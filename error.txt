 ### Tokenizing input ###
/home/sabar/Desktop/nlp_project/jamr/tools/cdec/corpus/support/utf8-normalize.sh: Cannot find ICU uconv (http://site.icu-project.org/) ... falling back to iconv. Quality may suffer.
 ### Running NER system ###
~/Desktop/nlp_project/jamr/tools/IllinoisNerExtended ~/Desktop/nlp_project/jamr
Adding feature: Forms
Adding feature: Capitalization
Adding feature: WordTypeInformation
Adding feature: Affixes
Adding feature: PreviousTag1
Adding feature: PreviousTag2
Adding feature: PreviousTagPatternLevel1
Adding feature: PreviousTagPatternLevel2
Adding feature: PrevTagsForContext
Adding feature: PredictionsLevel1
Adding feature: GazetteersFeatures
Adding feature: BrownClusterPaths
Loading gazetteers....
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
	loading gazetteer:....ner-ext/KnownLists/known_nationalities.lst
	loading gazetteer:....ner-ext/KnownLists/known_names.big.lst
	loading gazetteer:....ner-ext/KnownLists/WikiPeople.lst
	loading gazetteer:....ner-ext/KnownLists/temporal_words.txt
	loading gazetteer:....ner-ext/KnownLists/WikiLocationsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/measurments.txt
	loading gazetteer:....ner-ext/KnownLists/WikiPeopleRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/cardinalNumber.txt
	loading gazetteer:....ner-ext/KnownLists/WikiManMadeObjectNames.lst
	loading gazetteer:....ner-ext/KnownLists/known_corporations.lst
	loading gazetteer:....ner-ext/KnownLists/WikiCompetitionsBattlesEvents.lst
	loading gazetteer:....ner-ext/KnownLists/currencyFinal.txt
	loading gazetteer:....ner-ext/KnownLists/WikiOrganizationsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/WikiOrganizations.lst
	loading gazetteer:....ner-ext/KnownLists/known_place.lst
	loading gazetteer:....ner-ext/KnownLists/KnownNationalities.txt
	loading gazetteer:....ner-ext/KnownLists/Occupations.txt
	loading gazetteer:....ner-ext/KnownLists/WikiSongs.lst
	loading gazetteer:....ner-ext/KnownLists/WikiArtWorkRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_title.lst
	loading gazetteer:....ner-ext/KnownLists/ordinalNumber.txt
	loading gazetteer:....ner-ext/KnownLists/known_name.lst
	loading gazetteer:....ner-ext/KnownLists/WikiManMadeObjectNamesRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/WikiArtWork.lst
	loading gazetteer:....ner-ext/KnownLists/WikiSongsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_country.lst
	loading gazetteer:....ner-ext/KnownLists/WikiFilms.lst
	loading gazetteer:....ner-ext/KnownLists/WikiCompetitionsBattlesEventsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_jobs.lst
	loading gazetteer:....ner-ext/KnownLists/VincentNgPeopleTitles.txt
	loading gazetteer:....ner-ext/KnownLists/WikiFilmsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_state.lst
	loading gazetteer:....ner-ext/KnownLists/WikiLocations.lst
found 33 gazetteers
1288301 words added
95262 words added
85963 words added

Working parameters are:
	inferenceMethod=GREEDY
	beamSize=5
	thresholdPrediction=false
	predictionConfidenceThreshold=-1.0
	labelTypes
		PER		ORG		LOC		MISC
	logging=false
	debuggingLogPath=null
	forceNewSentenceOnLineBreaks=true
	keepOriginalFileTokenizationAndSentenceSplitting=false
	taggingScheme=BILOU
	tokenizationScheme=DualTokenizationScheme
	pathToModelFile=data/Models/CoNLL/finalSystemBILOU.model
Brown clusters resource: 
	-Path: brown-clusters/brown-english-wikitext.case-intact.txt-c1000-freq10-v3.txt
	-WordThres=5
	-IsLowercased=false
Brown clusters resource: 
	-Path: brown-clusters/brownBllipClusters
	-WordThres=5
	-IsLowercased=false
Brown clusters resource: 
	-Path: brown-clusters/brown-rcv1.clean.tokenized-CoNLL03.txt-c1000-freq1.txt
	-WordThres=5
	-IsLowercased=false

Tagging file: /tmp/jamr-16893.snt.tmp
Reading model file : data/Models/CoNLL/finalSystemBILOU.model.level1
Reading model file : data/Models/CoNLL/finalSystemBILOU.model.level2
Extracting features for level 2 inference
Done - Extracting features for level 2 inference
~/Desktop/nlp_project/jamr
 ### Running dependency parser ###
Adding annotator tokenize
Adding annotator ssplit
Adding annotator parse
Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ... done [1.4 sec].
 ### Running JAMR ###
Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: since there are literally millions of fans of coronation street a book that promises the inside story of the thriceweekly soap opera will doubtless sell well

Spans:
Span 11-12:  book => book
Span 23-24:  doubtless => doubt-01
Span 6-7:  fans => fan
Span 15-16:  inside => inside
Span 3-4:  literally => literal
Span 21-22:  opera => opera
Span 13-14:  promises => promise-01
Span 24-25:  sell => sell-01
Span 0-1:  since => since
Span 20-21:  soap => soap
Span 16-17:  story => story
Span 9-10:  street => street
Span 25-26:  well => well

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),well,well,false), Span(24,25,List(1),sell,sell-01,false), Span(23,24,List(2),doubtless,doubt-01,false), Span(21,22,List(3),opera,opera,false), Span(20,21,List(4),soap,soap,false), Span(16,17,List(5),story,story,false), Span(15,16,List(6),inside,inside,false), Span(13,14,List(7),promises,promise-01,false), Span(11,12,List(8),book,book,false), Span(9,10,List(9),street,street,false), Span(6,7,List(10),fans,fan,false), Span(3,4,List(11),literally,literal,false), Span(0,1,List(12),since,since,false)),Map(2 -> doubt-01, 5 -> story, 12 -> since, 8 -> book, 7 -> promise-01, 1 -> sell-01, 4 -> soap, 11 -> literal, 6 -> inside, 0 -> well, 9 -> street, 3 -> opera, 10 -> fan),Map(s5 -> since, w -> well, s2 -> soap, b -> book, s -> sell-01, s4 -> street, d -> doubt-01, p -> promise-01, i -> inside, s3 -> story, l -> literal, f -> fan, o -> opera))),[Ljava.lang.String;@98f0b11,Annotation([Ljava.lang.String;@e1f8dfe,[Ljava.lang.String;@39a325f0,[Ljava.lang.String;@60fcd20),Annotation([Ljava.lang.String;@7763f2fb,[Ljava.lang.String;@42e579f9,[Ledu.cmu.lti.nlp.amr.Dependency;@67aaecbe),Annotation([Ljava.lang.String;@69ce31e,[Ljava.lang.String;@2602c9f6,[Ljava.lang.String;@11948f9),Annotation([Ljava.lang.String;@2305d3ff,[Ljava.lang.String;@53a11c4f,[Ledu.cmu.lti.nlp.amr.Entity;@7649b16d))
AMR:
(b / book, mod, f / fan)
(d / doubt-01, ARG0, s5 / since)
(d / doubt-01, ARG1, s / sell-01)
(f / fan, location, s4 / street)
(o / opera, mod, s2 / soap)
(p / promise-01, ARG0, b / book)
(p / promise-01, ARG1, s3 / story)
(s / sell-01, ARG0, s3 / story)
(s / sell-01, ARG1, l / literal)
(s / sell-01, manner, w / well)
(s3 / story, mod, i / inside)
(s3 / story, topic, o / opera)

Decoded in 1,341,639 microseconds
Sentence: the hard men at the finance ministry have promised to review the austerity measures at the end of this month

Spans:
Span 5-6:  finance => finance-01
Span 1-2:  hard => hard
Span 13-14:  measures => measure
Span 2-3:  men => man
Span 6-7:  ministry => ministry
Span 19-20:  month => (temporal-quantity :unit month)
Span 8-9:  promised => promise-01
Span 10-11:  review => review-01
Span 18-19:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),month,(temporal-quantity :unit month),false), Span(18,19,List(2),this,this,false), Span(13,14,List(3),measures,measure,false), Span(10,11,List(4),review,review-01,false), Span(8,9,List(5),promised,promise-01,false), Span(6,7,List(6),ministry,ministry,false), Span(5,6,List(7),finance,finance-01,false), Span(2,3,List(8),men,man,false), Span(1,2,List(9),hard,hard,false)),Map(2 -> this, 5 -> promise-01, 8 -> man, 7 -> finance-01, 1 -> month, 4 -> review-01, 6 -> ministry, 9 -> hard, 0 -> temporal-quantity, 3 -> measure),Map(m3 -> ministry, h -> hard, t -> temporal-quantity, m2 -> measure, m -> month, p -> promise-01, m4 -> man, t2 -> this, r -> review-01, f -> finance-01))),[Ljava.lang.String;@6d7eaa83,Annotation([Ljava.lang.String;@16ecb69e,[Ljava.lang.String;@ec94ad4,[Ljava.lang.String;@414fabe1),Annotation([Ljava.lang.String;@559d6246,[Ljava.lang.String;@4f9f0d93,[Ledu.cmu.lti.nlp.amr.Dependency;@533456bb),Annotation([Ljava.lang.String;@112a39aa,[Ljava.lang.String;@6b2fd0b3,[Ljava.lang.String;@102ecebf),Annotation([Ljava.lang.String;@710765e5,[Ljava.lang.String;@1cb2d75c,[Ledu.cmu.lti.nlp.amr.Entity;@2158e7bc))
AMR:
(f / finance-01, ARG1, m3 / ministry)
(m / month, mod, t2 / this)
(m3 / ministry, mod, t2 / this)
(m4 / man, mod, h / hard)
(p / promise-01, ARG0, m3 / ministry)
(p / promise-01, ARG1, m4 / man)
(p / promise-01, ARG2, r / review-01)
(r / review-01, ARG1, m2 / measure)
(t / temporal-quantity, unit, m / month)

Decoded in 169,636 microseconds
Sentence: with this years addition of the iaaf world marathon cup the 1991 race promises to be the best ever

Spans:
Span 11-12:  1991 => (date-entity :year 1991)
Span 9-10:  cup => cup
Span 18-19:  ever => ever
Span 8-9:  marathon => marathon
Span 13-14:  promises => promise-01
Span 12-13:  race => race
Span 1-2:  this => this
Span 7-8:  world => world
Span 2-3:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),ever,ever,false), Span(13,14,List(1),promises,promise-01,false), Span(12,13,List(2),race,race,false), Span(11,12,List(4, 3),1991,(date-entity :year 1991),false), Span(9,10,List(5),cup,cup,false), Span(8,9,List(6),marathon,marathon,false), Span(7,8,List(7),world,world,false), Span(2,3,List(9, 8),years,(temporal-quantity :unit year),false), Span(1,2,List(10),this,this,false)),Map(2 -> race, 5 -> cup, 8 -> temporal-quantity, 7 -> world, 1 -> promise-01, 4 -> 1991, 6 -> marathon, 9 -> year, 0 -> ever, 10 -> this, 3 -> date-entity),Map(w -> world, e -> ever, t -> temporal-quantity, m -> marathon, d -> date-entity, y -> year, 1 -> 1991, p -> promise-01, t2 -> this, r -> race, c -> cup))),[Ljava.lang.String;@78b274de,Annotation([Ljava.lang.String;@c16d8ba,[Ljava.lang.String;@2feea189,[Ljava.lang.String;@5baf41f4),Annotation([Ljava.lang.String;@4f132932,[Ljava.lang.String;@72f5ba2c,[Ledu.cmu.lti.nlp.amr.Dependency;@6291d9aa),Annotation([Ljava.lang.String;@55695a74,[Ljava.lang.String;@77b1a17a,[Ljava.lang.String;@2ee08dfa),Annotation([Ljava.lang.String;@18893021,[Ljava.lang.String;@56b6d31c,[Ledu.cmu.lti.nlp.amr.Entity;@7cddffbd))
AMR:
(d / date-entity, year, 1 / 1991)
(m / marathon, consist, c / cup)
(m / marathon, mod, w / world)
(m / marathon, op, p / promise-01)
(p / promise-01, ARG0, r / race)
(p / promise-01, ARG1, e / ever)
(p / promise-01, ARG2, t / temporal-quantity)
(r / race, time, d / date-entity)
(t / temporal-quantity, unit, y / year)
(y / year, mod, t2 / this)

Decoded in 681,903 microseconds
Sentence: as jonathan is away in india at the moment interviewing researchers i have promised him that i would approach you to see if you would be able to cooperate with us in the planned work

NER Entity: (country :name (name :op "india"))
NER Entity: (country :name (name :op "india"))
Spans:
Span 26-27:  able => possible
Span 18-19:  approach => approach-02
Span 3-4:  away => away
Span 28-29:  cooperate => cooperate-01
Span 16-17:  i => i
Span 11-12:  i => i
Span 5-6:  india => (country :name (name :op "India"))
Span 8-9:  moment => moment
Span 33-34:  planned => plan-01
Span 13-14:  promised => promise-01
Span 10-11:  researchers => (person :ARG0-of research-01)
Span 21-22:  see => see-01
Span 23-24:  you => you
Span 19-20:  you => you

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),planned,plan-01,false), Span(28,29,List(1),cooperate,cooperate-01,false), Span(26,27,List(2),able,possible,false), Span(23,24,List(3),you,you,false), Span(21,22,List(4),see,see-01,false), Span(19,20,List(5),you,you,false), Span(18,19,List(6),approach,approach-02,false), Span(16,17,List(7),i,i,false), Span(13,14,List(8),promised,promise-01,false), Span(11,12,List(9),i,i,false), Span(10,11,List(11, 10),researchers,(person :ARG0-of research-01),false), Span(8,9,List(12),moment,moment,false), Span(5,6,List(15, 14, 13),india,(country :name (name :op "India")),false), Span(3,4,List(16),away,away,false)),Map(2 -> possible, 5 -> you, 12 -> moment, 15 -> "India", 8 -> promise-01, 7 -> i, 1 -> cooperate-01, 4 -> see-01, 11 -> research-01, 14 -> name, 6 -> approach-02, 0 -> plan-01, 9 -> i, 16 -> away, 3 -> you, 10 -> person, 13 -> country),Map(n -> name, p2 -> possible, s -> see-01, m -> moment, p -> plan-01, y -> you, a -> approach-02, p4 -> person, i2 -> i, a2 -> away, i -> i, r -> research-01, c -> cooperate-01, p3 -> promise-01, c2 -> country, y2 -> you))),[Ljava.lang.String;@11f37cd0,Annotation([Ljava.lang.String;@88744e5,[Ljava.lang.String;@68bc1ac2,[Ljava.lang.String;@1580ec46),Annotation([Ljava.lang.String;@4317f2b1,[Ljava.lang.String;@593e64e0,[Ledu.cmu.lti.nlp.amr.Dependency;@f50dbe6),Annotation([Ljava.lang.String;@594e0e5,[Ljava.lang.String;@7138dd3f,[Ljava.lang.String;@4c458d2b),Annotation([Ljava.lang.String;@6a37292b,[Ljava.lang.String;@4b6ffc87,[Ledu.cmu.lti.nlp.amr.Entity;@252c29c2))
AMR:
(a / approach-02, ARG0, i / i)
(a / approach-02, ARG1, y2 / you)
(a / approach-02, purpose, s / see-01)
(a2 / away, op, c2 / country)
(c / cooperate-01, ARG0, y / you)
(c / cooperate-01, ARG1, c2 / country)
(c2 / country, name, n / name)
(n / name, op, "India")
(p / plan-01, ARG0, c2 / country)
(p2 / possible, domain, c / cooperate-01)
(p3 / promise-01, ARG0, i2 / i)
(p3 / promise-01, ARG1, p4 / person)
(r / research-01, ARG0, p4 / person)
(r / research-01, ARG1, m / moment)
(s / see-01, ARG0, i2 / i)
(s / see-01, ARG1, p2 / possible)

Decoded in 1,484,925 microseconds
Sentence: now though still experimental the methods of genetransfer promise to bring about even more productive variations crossing the specieslines that has stopped nature cold

Spans:
Span 10-11:  bring => bring-01
Span 23-24:  cold => cold
Span 16-17:  crossing => cross-02
Span 3-4:  experimental => experiment-01
Span 5-6:  methods => method
Span 22-23:  nature => nature
Span 0-1:  now => now
Span 14-15:  productive => productive
Span 8-9:  promise => promise-01
Span 2-3:  still => still
Span 21-22:  stopped => stop-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),cold,cold,false), Span(22,23,List(1),nature,nature,false), Span(21,22,List(2),stopped,stop-01,false), Span(16,17,List(3),crossing,cross-02,false), Span(14,15,List(4),productive,productive,false), Span(10,11,List(5),bring,bring-01,false), Span(8,9,List(6),promise,promise-01,false), Span(5,6,List(7),methods,method,false), Span(3,4,List(8),experimental,experiment-01,false), Span(2,3,List(9),still,still,false), Span(0,1,List(10),now,now,false)),Map(2 -> stop-01, 5 -> bring-01, 8 -> experiment-01, 7 -> method, 1 -> nature, 4 -> productive, 6 -> promise-01, 9 -> still, 0 -> cold, 10 -> now, 3 -> cross-02),Map(e -> experiment-01, n -> nature, s2 -> still, b -> bring-01, p2 -> promise-01, s -> stop-01, m -> method, p -> productive, c -> cold, n2 -> now, c2 -> cross-02))),[Ljava.lang.String;@7669929e,Annotation([Ljava.lang.String;@d18ffce,[Ljava.lang.String;@64423419,[Ljava.lang.String;@366a88bb),Annotation([Ljava.lang.String;@c36c8e6,[Ljava.lang.String;@60bf7a4d,[Ledu.cmu.lti.nlp.amr.Dependency;@3af686da),Annotation([Ljava.lang.String;@f0f7074,[Ljava.lang.String;@3e9fd765,[Ljava.lang.String;@6ff64801),Annotation([Ljava.lang.String;@11f17314,[Ljava.lang.String;@2ba2f40,[Ledu.cmu.lti.nlp.amr.Entity;@d741426))
AMR:
(b / bring-01, ARG1, n2 / now)
(b / bring-01, time, c2 / cross-02)
(c / cold, mod, n / nature)
(e / experiment-01, ARG0, p / productive)
(e / experiment-01, ARG1, m / method)
(p2 / promise-01, ARG0, m / method)
(p2 / promise-01, ARG1, s / stop-01)
(p2 / promise-01, ARG2, b / bring-01)
(p2 / promise-01, time, s2 / still)
(s / stop-01, ARG1, c / cold)

Decoded in 218,066 microseconds
Sentence: addressing an international conference of experts organised by the allparty war crimes group mr patten said mr hurd had promised to let the lords and commons decide in a free vote in the next few weeks and had undertaken not to commit himself in advance of the debate

Spans:
Span 0-1:  addressing => address-02
Span 44-45:  advance => advance-01
Span 36-37:  and => and
Span 24-25:  and => and
Span 41-42:  commit => commit-02
Span 25-26:  commons => (government-organization :name (name :op "Commons"))
Span 3-4:  conference => conference
Span 11-12:  crimes => crime
Span 47-48:  debate => debate-01
Span 26-27:  decide => decide-01
Span 5-6:  experts => (person :ARG1-of expert-41)
Span 34-35:  few => few
Span 29-30:  free => free-41
Span 12-13:  group => group
Span 2-3:  international => international
Span 21-22:  let => let-01
Span 23-24:  lords => lord
Span 33-34:  next => next
Span 6-7:  organised => organize-01
Span 19-20:  promised => promise-01
Span 15-16:  said => say-01
Span 38-39:  undertaken => undertake-01
Span 30-31:  vote => vote-01
Span 10-11:  war => war
Span 35-36:  weeks => (temporal-quantity :unit week)

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),debate,debate-01,false), Span(44,45,List(1),advance,advance-01,false), Span(41,42,List(2),commit,commit-02,false), Span(38,39,List(3),undertaken,undertake-01,false), Span(36,37,List(4),and,and,false), Span(35,36,List(6, 5),weeks,(temporal-quantity :unit week),false), Span(34,35,List(7),few,few,false), Span(33,34,List(8),next,next,false), Span(30,31,List(9),vote,vote-01,false), Span(29,30,List(10),free,free-41,false), Span(26,27,List(11),decide,decide-01,false), Span(25,26,List(14, 13, 12),commons,(government-organization :name (name :op "Commons")),false), Span(24,25,List(15),and,and,false), Span(23,24,List(16),lords,lord,false), Span(21,22,List(17),let,let-01,false), Span(19,20,List(18),promised,promise-01,false), Span(15,16,List(19),said,say-01,false), Span(12,13,List(20),group,group,false), Span(11,12,List(21),crimes,crime,false), Span(10,11,List(22),war,war,false), Span(6,7,List(23),organised,organize-01,false), Span(5,6,List(25, 24),experts,(person :ARG1-of expert-41),false), Span(3,4,List(26),conference,conference,false), Span(2,3,List(27),international,international,false), Span(0,1,List(28),addressing,address-02,false)),Map(2 -> commit-02, 5 -> temporal-quantity, 27 -> international, 12 -> government-organization, 8 -> next, 15 -> and, 21 -> crime, 18 -> promise-01, 24 -> person, 7 -> few, 1 -> advance-01, 17 -> let-01, 23 -> organize-01, 26 -> conference, 4 -> and, 11 -> decide-01, 14 -> "Commons", 20 -> group, 28 -> address-02, 6 -> week, 9 -> vote-01, 0 -> debate-01, 22 -> war, 16 -> lord, 19 -> say-01, 10 -> free-41, 3 -> undertake-01, 25 -> expert-41, 13 -> name),Map(e -> expert-41, n -> next, w -> week, t -> temporal-quantity, p2 -> person, a3 -> and, s -> say-01, v -> vote-01, d -> debate-01, g2 -> group, g -> government-organization, p -> promise-01, c3 -> conference, a -> advance-01, d2 -> decide-01, l2 -> let-01, w2 -> war, i -> international, a2 -> and, c -> commit-02, f2 -> free-41, u -> undertake-01, l -> lord, f -> few, o -> organize-01, n2 -> name, c2 -> crime, a4 -> address-02))),[Ljava.lang.String;@6f4f5643,Annotation([Ljava.lang.String;@41a881cc,[Ljava.lang.String;@1de199c1,[Ljava.lang.String;@46355d3a),Annotation([Ljava.lang.String;@597baed8,[Ljava.lang.String;@471414cd,[Ledu.cmu.lti.nlp.amr.Dependency;@7761c32f),Annotation([Ljava.lang.String;@33557fe4,[Ljava.lang.String;@323f6c10,[Ljava.lang.String;@61cfa835),Annotation([Ljava.lang.String;@82c61be,[Ljava.lang.String;@19c50523,[Ledu.cmu.lti.nlp.amr.Entity;@55d44a0c))
AMR:
(a / advance-01, ARG1, d / debate-01)
(a2 / and, op, p / promise-01)
(a2 / and, op, u / undertake-01)
(a3 / and, op, g / government-organization)
(a3 / and, op, l2 / let-01)
(a4 / address-02, ARG0, g2 / group)
(a4 / address-02, ARG1, c3 / conference)
(c / commit-02, time, a / advance-01)
(c2 / crime, mod, w2 / war)
(c3 / conference, mod, i / international)
(d2 / decide-01, ARG0, a3 / and)
(d2 / decide-01, ARG1, v / vote-01)
(e / expert-41, ARG1, p2 / person)
(f / few, op, t / temporal-quantity)
(f2 / free-41, ARG1, v / vote-01)
(g / government-organization, name, n2 / name)
(g2 / group, mod, c2 / crime)
(l2 / let-01, ARG0, g2 / group)
(l2 / let-01, ARG1, l / lord)
(n2 / name, op, "Commons")
(o / organize-01, ARG0, c3 / conference)
(o / organize-01, ARG1, p2 / person)
(p / promise-01, ARG1, l2 / let-01)
(s / say-01, ARG1, p / promise-01)
(t / temporal-quantity, unit, w / week)
(u / undertake-01, ARG1, c / commit-02)
(v / vote-01, ARG1, t / temporal-quantity)
(w / week, mod, n / next)

Decoded in 1,799,107 microseconds
Sentence: scorpio oct 24nov 22 a saturday shopping spree give you a chance to pick up one or two prized purchases youve been promising to buy hence saving you time and energy around the house or introducing a swish air of sophistication to your home

Spans:
Span 3-4:  22 => 22
Span 38-39:  air => air
Span 29-30:  and => and
Span 31-32:  around => around
Span 24-25:  buy => buy-01
Span 11-12:  chance => chance
Span 30-31:  energy => energy
Span 8-9:  give => give-01
Span 43-44:  home => home
Span 33-34:  house => house
Span 35-36:  introducing => introduce-02
Span 1-2:  oct => (date-entity :month 10)
Span 34-35:  or => or
Span 16-17:  or => or
Span 13-14:  pick => pick-01
Span 18-19:  prized => prize-01
Span 22-23:  promising => promise-01
Span 19-20:  purchases => purchase-01
Span 5-6:  saturday => saturday
Span 26-27:  saving => save-02
Span 6-7:  shopping => shop-01
Span 40-41:  sophistication => sophistication
Span 7-8:  spree => spree
Span 28-29:  time => time
Span 17-18:  two => 2
Span 27-28:  you => you
Span 9-10:  you => you

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),home,home,false), Span(40,41,List(1),sophistication,sophistication,false), Span(38,39,List(2),air,air,false), Span(35,36,List(3),introducing,introduce-02,false), Span(34,35,List(4),or,or,false), Span(33,34,List(5),house,house,false), Span(31,32,List(6),around,around,false), Span(30,31,List(7),energy,energy,false), Span(29,30,List(8),and,and,false), Span(28,29,List(9),time,time,false), Span(27,28,List(10),you,you,false), Span(26,27,List(11),saving,save-02,false), Span(24,25,List(12),buy,buy-01,false), Span(22,23,List(13),promising,promise-01,false), Span(19,20,List(14),purchases,purchase-01,false), Span(18,19,List(15),prized,prize-01,false), Span(17,18,List(16),two,2,false), Span(16,17,List(17),or,or,false), Span(13,14,List(18),pick,pick-01,false), Span(11,12,List(19),chance,chance,false), Span(9,10,List(20),you,you,false), Span(8,9,List(21),give,give-01,false), Span(7,8,List(22),spree,spree,false), Span(6,7,List(23),shopping,shop-01,false), Span(5,6,List(24),saturday,saturday,false), Span(3,4,List(25),22,22,false), Span(1,2,List(27, 26),oct,(date-entity :month 10),false)),Map(2 -> air, 5 -> house, 27 -> 10, 12 -> buy-01, 8 -> and, 15 -> prize-01, 21 -> give-01, 18 -> pick-01, 24 -> saturday, 7 -> energy, 1 -> sophistication, 17 -> or, 23 -> shop-01, 26 -> date-entity, 4 -> or, 11 -> save-02, 14 -> purchase-01, 20 -> you, 6 -> around, 9 -> time, 0 -> home, 22 -> spree, 16 -> 2, 19 -> chance, 10 -> you, 3 -> introduce-02, 25 -> 22, 13 -> promise-01),Map(e -> energy, s5 -> saturday, h -> home, 2 -> 2, s2 -> save-02, h2 -> house, t -> time, b -> buy-01, p2 -> purchase-01, a3 -> and, s -> sophistication, s4 -> shop-01, d -> date-entity, 1 -> 10, y -> you, p -> promise-01, g -> give-01, a -> air, p4 -> pick-01, o2 -> or, a2 -> around, i -> introduce-02, c -> chance, s3 -> spree, 22 -> 22, o -> or, p3 -> prize-01, y2 -> you))),[Ljava.lang.String;@633c2a46,Annotation([Ljava.lang.String;@2fb8c90,[Ljava.lang.String;@50c94377,[Ljava.lang.String;@4d6c6310),Annotation([Ljava.lang.String;@6dbd726,[Ljava.lang.String;@4b0a034e,[Ledu.cmu.lti.nlp.amr.Dependency;@7e5f1c5e),Annotation([Ljava.lang.String;@163fa023,[Ljava.lang.String;@2b2a653e,[Ljava.lang.String;@6c5cdf95),Annotation([Ljava.lang.String;@455ae6c7,[Ljava.lang.String;@52e53663,[Ledu.cmu.lti.nlp.amr.Entity;@4655c819))
AMR:
(a2 / around, op, h2 / house)
(a3 / and, op, i / introduce-02)
(b / buy-01, ARG1, o / or)
(c / chance, topic, p4 / pick-01)
(d / date-entity, month, 1 / 10)
(g / give-01, ARG0, s3 / spree)
(g / give-01, ARG1, c / chance)
(g / give-01, ARG2, y2 / you)
(i / introduce-02, ARG1, a / air)
(i / introduce-02, ARG2, h / home)
(o / or, op, e / energy)
(o / or, op, i / introduce-02)
(o / or, op, s2 / save-02)
(o2 / or, op, p2 / purchase-01)
(o2 / or, op, p3 / prize-01)
(p / promise-01, ARG1, b / buy-01)
(p2 / purchase-01, ARG1, s / sophistication)
(p2 / purchase-01, ARG2, b / buy-01)
(p2 / purchase-01, quant, 2 / 2)
(p3 / prize-01, ARG0, d / date-entity)
(s2 / save-02, ARG0, 22 / 22)
(s2 / save-02, ARG2, y / you)
(s2 / save-02, location, a2 / around)
(s3 / spree, mod, s4 / shop-01)
(s4 / shop-01, ARG0, y / you)
(s4 / shop-01, ARG1, s5 / saturday)
(t / time, mod, y / you)

Decoded in 1,829,201 microseconds
Sentence: mr krenz promised that there would be a full examination of the past mistakes made by the party for next months special congress

Spans:
Span 22-23:  congress => (government-organization :name (name :op "Congress"))
Span 9-10:  examination => examine-01
Span 8-9:  full => full
Span 13-14:  mistakes => mistake-01
Span 20-21:  months => (temporal-quantity :unit month)
Span 19-20:  next => next
Span 17-18:  party => party
Span 12-13:  past => past
Span 2-3:  promised => promise-01
Span 21-22:  special => special

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(2, 1, 0),congress,(government-organization :name (name :op "Congress")),false), Span(21,22,List(3),special,special,false), Span(20,21,List(5, 4),months,(temporal-quantity :unit month),false), Span(19,20,List(6),next,next,false), Span(17,18,List(7),party,party,false), Span(13,14,List(8),mistakes,mistake-01,false), Span(12,13,List(9),past,past,false), Span(9,10,List(10),examination,examine-01,false), Span(8,9,List(11),full,full,false), Span(2,3,List(12),promised,promise-01,false)),Map(2 -> "Congress", 5 -> month, 12 -> promise-01, 8 -> mistake-01, 7 -> party, 1 -> name, 4 -> temporal-quantity, 11 -> full, 6 -> next, 0 -> government-organization, 9 -> past, 3 -> special, 10 -> examine-01),Map(e -> examine-01, n -> name, t -> temporal-quantity, m2 -> mistake-01, p2 -> past, s -> special, m -> month, p -> party, g -> government-organization, f -> full, p3 -> promise-01, n2 -> next))),[Ljava.lang.String;@29c40562,Annotation([Ljava.lang.String;@43d7a5a,[Ljava.lang.String;@602bace2,[Ljava.lang.String;@53635ac1),Annotation([Ljava.lang.String;@1fdb5fac,[Ljava.lang.String;@7b66258a,[Ledu.cmu.lti.nlp.amr.Dependency;@6f2ac650),Annotation([Ljava.lang.String;@6141e734,[Ljava.lang.String;@2db238ce,[Ljava.lang.String;@faf73d2),Annotation([Ljava.lang.String;@47dce809,[Ljava.lang.String;@7805cbba,[Ledu.cmu.lti.nlp.amr.Entity;@44825de5))
AMR:
(e / examine-01, ARG0, t / temporal-quantity)
(e / examine-01, ARG1, m2 / mistake-01)
(e / examine-01, mod, f / full)
(g / government-organization, mod, s / special)
(g / government-organization, name, n / name)
(m / month, mod, n2 / next)
(m2 / mistake-01, time, p2 / past)
(n / name, op, "Congress")
(p / party, name, e / examine-01)
(p3 / promise-01, ARG0, g / government-organization)
(p3 / promise-01, ARG1, e / examine-01)
(t / temporal-quantity, unit, m / month)

Decoded in 126,831 microseconds
Sentence: in the course of this i shall return to the remaining examples of apparently altruistic behaviour that i gave in chapter 1 and which i promised to explain

Spans:
Span 21-22:  1 => 1
Span 22-23:  and => and
Span 13-14:  apparently => apparent
Span 15-16:  behaviour => behave-01
Span 20-21:  chapter => chapter
Span 11-12:  examples => example
Span 27-28:  explain => explain-01
Span 24-25:  i => i
Span 17-18:  i => i
Span 5-6:  i => i
Span 25-26:  promised => promise-01
Span 10-11:  remaining => remain-01
Span 4-5:  this => this

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),explain,explain-01,false), Span(25,26,List(1),promised,promise-01,false), Span(24,25,List(2),i,i,false), Span(22,23,List(3),and,and,false), Span(21,22,List(4),1,1,false), Span(20,21,List(5),chapter,chapter,false), Span(17,18,List(6),i,i,false), Span(15,16,List(7),behaviour,behave-01,false), Span(13,14,List(8),apparently,apparent,false), Span(11,12,List(9),examples,example,false), Span(10,11,List(10),remaining,remain-01,false), Span(5,6,List(11),i,i,false), Span(4,5,List(12),this,this,false)),Map(2 -> i, 5 -> chapter, 12 -> this, 8 -> apparent, 7 -> behave-01, 1 -> promise-01, 4 -> 1, 11 -> i, 6 -> i, 0 -> explain-01, 9 -> example, 3 -> and, 10 -> remain-01),Map(e -> explain-01, b -> behave-01, t -> this, e2 -> example, 1 -> 1, i3 -> i, p -> promise-01, a -> and, i2 -> i, i -> i, a2 -> apparent, r -> remain-01, c -> chapter))),[Ljava.lang.String;@5e713bd2,Annotation([Ljava.lang.String;@5c0e886e,[Ljava.lang.String;@3e1f1cf9,[Ljava.lang.String;@6ca73f4b),Annotation([Ljava.lang.String;@582c8ca7,[Ljava.lang.String;@54c6552a,[Ledu.cmu.lti.nlp.amr.Dependency;@290163e1),Annotation([Ljava.lang.String;@1a445dcf,[Ljava.lang.String;@7e6ace81,[Ljava.lang.String;@161bb7fe),Annotation([Ljava.lang.String;@75cc9008,[Ljava.lang.String;@490439a3,[Ledu.cmu.lti.nlp.amr.Entity;@346421c8))
AMR:
(a / and, op, p / promise-01)
(a2 / apparent, op, e / explain-01)
(b / behave-01, ARG0, i2 / i)
(b / behave-01, ARG1, e2 / example)
(c / chapter, poss, i / i)
(e / explain-01, ARG0, i3 / i)
(e / explain-01, ARG1, t / this)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, i2 / i)
(p / promise-01, ARG2, e / explain-01)
(r / remain-01, ARG0, 1 / 1)
(r / remain-01, ARG1, e2 / example)

Decoded in 549,001 microseconds
Sentence: it was accepted that by promising to pay the extra 10300 the defendants secured benefits

Spans:
Span 2-3:  accepted => accept-01
Span 14-15:  benefits => benefit-01
Span 12-13:  defendants => defendant
Span 9-10:  extra => extra
Span 0-1:  it => it
Span 7-8:  pay => pay-01
Span 5-6:  promising => promise-01
Span 13-14:  secured => secure-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),benefits,benefit-01,false), Span(13,14,List(1),secured,secure-01,false), Span(12,13,List(2),defendants,defendant,false), Span(9,10,List(3),extra,extra,false), Span(7,8,List(4),pay,pay-01,false), Span(5,6,List(5),promising,promise-01,false), Span(2,3,List(6),accepted,accept-01,false), Span(0,1,List(7),it,it,false)),Map(2 -> defendant, 5 -> promise-01, 7 -> it, 1 -> secure-01, 4 -> pay-01, 6 -> accept-01, 0 -> benefit-01, 3 -> extra),Map(e -> extra, b -> benefit-01, p2 -> promise-01, s -> secure-01, d -> defendant, p -> pay-01, a -> accept-01, i -> it))),[Ljava.lang.String;@19e5ec57,Annotation([Ljava.lang.String;@45ff5109,[Ljava.lang.String;@7d2149c5,[Ljava.lang.String;@147264b1),Annotation([Ljava.lang.String;@6230aaf3,[Ljava.lang.String;@692769e1,[Ledu.cmu.lti.nlp.amr.Dependency;@1a9868b6),Annotation([Ljava.lang.String;@c02925e,[Ljava.lang.String;@7cd75f7a,[Ljava.lang.String;@1fbd829e),Annotation([Ljava.lang.String;@52ca6359,[Ljava.lang.String;@65409285,[Ledu.cmu.lti.nlp.amr.Entity;@72538db1))
AMR:
(a / accept-01, ARG1, i / it)
(b / benefit-01, ARG0, i / it)
(b / benefit-01, ARG1, p / pay-01)
(p / pay-01, ARG0, e / extra)
(p / pay-01, ARG3, d / defendant)
(p2 / promise-01, ARG1, p / pay-01)
(s / secure-01, ARG1, b / benefit-01)

Decoded in 133,333 microseconds
Sentence: which promises to be as big a success as zabat dash

Spans:
Span 5-6:  big => big
Span 1-2:  promises => promise-01
Span 7-8:  success => succeed-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),success,succeed-01,false), Span(5,6,List(1),big,big,false), Span(1,2,List(2),promises,promise-01,false)),Map(2 -> promise-01, 1 -> big, 0 -> succeed-01),Map(b -> big, s -> succeed-01, p -> promise-01))),[Ljava.lang.String;@4b7b9a1a,Annotation([Ljava.lang.String;@1fc247ad,[Ljava.lang.String;@befbf25,[Ljava.lang.String;@28ee1c42),Annotation([Ljava.lang.String;@2881460c,[Ljava.lang.String;@3f1dd29a,[Ledu.cmu.lti.nlp.amr.Dependency;@3eed9cd5),Annotation([Ljava.lang.String;@61d38439,[Ljava.lang.String;@58dec5c,[Ljava.lang.String;@28988edd),Annotation([Ljava.lang.String;@37cb63fd,[Ljava.lang.String;@a1193a9,[Ledu.cmu.lti.nlp.amr.Entity;@7f54169))
AMR:
(b / big, time, s / succeed-01)
(p / promise-01, ARG1, b / big)

Decoded in 12,964 microseconds
Sentence:   robson declined an opportunity however to promise gascoigne promotion to the senior side for englands next friendly opposition still to be arranged after the abandonment of plans to visit dublin in march

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   robson declined an opportunity however to promise gascoigne promotion to the senior side for englands next friendly opposition still to be arranged after the abandonment of plans to visit dublin in march
myTokenized = robson declined an opportunity however to promise gascoigne promotion to the senior side for englands next friendly opposition still to be arranged after the abandonment of plans to visit dublin in march
i = 0
prefix = List(robson)
regexr = \Qr\E ?\Qo\E ?\Qb\E ?\Qs\E ?\Qo\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: new poems by dannie abse are promised as is the collected john berryman

Spans:
Span 10-11:  collected => collect-01
Span 0-1:  new => new
Span 6-7:  promised => promise-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),collected,collect-01,false), Span(6,7,List(1),promised,promise-01,false), Span(0,1,List(2),new,new,false)),Map(2 -> new, 1 -> promise-01, 0 -> collect-01),Map(n -> new, p -> promise-01, c -> collect-01))),[Ljava.lang.String;@5b70d9d4,Annotation([Ljava.lang.String;@4ded1c32,[Ljava.lang.String;@9d63e96,[Ljava.lang.String;@50a6eee5),Annotation([Ljava.lang.String;@7f8e25c0,[Ljava.lang.String;@4d50a1ac,[Ledu.cmu.lti.nlp.amr.Dependency;@68a64adb),Annotation([Ljava.lang.String;@7d7ca589,[Ljava.lang.String;@25805bc,[Ljava.lang.String;@60e07ad7),Annotation([Ljava.lang.String;@31a0eaf1,[Ljava.lang.String;@3ba08dab,[Ledu.cmu.lti.nlp.amr.Entity;@29b4f422))
AMR:
(c / collect-01, ARG0, n / new)
(c / collect-01, ARG1, p / promise-01)

Decoded in 16,834 microseconds
Sentence: mr robinson promised to amend it

Spans:
Span 5-6:  it => it
Span 2-3:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),it,it,false), Span(2,3,List(1),promised,promise-01,false)),Map(1 -> promise-01, 0 -> it),Map(p -> promise-01, i -> it))),[Ljava.lang.String;@2707f992,Annotation([Ljava.lang.String;@7c91f442,[Ljava.lang.String;@523b58f2,[Ljava.lang.String;@364ca20b),Annotation([Ljava.lang.String;@61229c06,[Ljava.lang.String;@27317fbc,[Ledu.cmu.lti.nlp.amr.Dependency;@22b923be),Annotation([Ljava.lang.String;@28d9a0c1,[Ljava.lang.String;@67c8f3da,[Ljava.lang.String;@3a01a271),Annotation([Ljava.lang.String;@414fc677,[Ljava.lang.String;@5c6ed020,[Ledu.cmu.lti.nlp.amr.Entity;@6f221448))
AMR:
(i / it, op, p / promise-01)

Decoded in 6,681 microseconds
Sentence: where a party to a contract promises to make a payment to the other party in addition to the contract price in order to ensure that the other party completes his existing contractual obligations on time the paying partys benefit in obtaining thereby a practical advantage such as avoiding a penalty can amount to consideration for the additional payment provided that the additional payment was not given under economic duress or fraud

Spans:
Span 62-63:  additional => additional
Span 57-58:  additional => additional
Span 45-46:  advantage => advantage
Span 52-53:  amount => amount
Span 48-49:  avoiding => avoid-01
Span 39-40:  benefit => benefit-01
Span 51-52:  can => possible
Span 54-55:  consideration => consider-02
Span 19-20:  contract => contract-02
Span 5-6:  contract => contract-02
Span 32-33:  contractual => contract-02
Span 68-69:  economic => economy
Span 24-25:  ensure => ensure-01
Span 31-32:  existing => exist-01
Span 66-67:  given => give-01
Span 33-34:  obligations => obligate-01
Span 41-42:  obtaining => obtain-01
Span 70-71:  or => or
Span 27-28:  other => other
Span 13-14:  other => other
Span 28-29:  party => party
Span 14-15:  party => party
Span 2-3:  party => party
Span 37-38:  paying => pay-01
Span 50-51:  penalty => penalize-01
Span 44-45:  practical => practical
Span 20-21:  price => (thing :ARG2-of price-01)
Span 6-7:  promises => promise-01
Span 59-60:  provided => provide-01
Span 46-47:  such => such
Span 35-36:  time => time

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(70,71,List(0),or,or,false), Span(68,69,List(1),economic,economy,false), Span(66,67,List(2),given,give-01,false), Span(62,63,List(3),additional,additional,false), Span(59,60,List(4),provided,provide-01,false), Span(57,58,List(5),additional,additional,false), Span(54,55,List(6),consideration,consider-02,false), Span(52,53,List(7),amount,amount,false), Span(51,52,List(8),can,possible,false), Span(50,51,List(9),penalty,penalize-01,false), Span(48,49,List(10),avoiding,avoid-01,false), Span(46,47,List(11),such,such,false), Span(45,46,List(12),advantage,advantage,false), Span(44,45,List(13),practical,practical,false), Span(41,42,List(14),obtaining,obtain-01,false), Span(39,40,List(15),benefit,benefit-01,false), Span(37,38,List(16),paying,pay-01,false), Span(35,36,List(17),time,time,false), Span(33,34,List(18),obligations,obligate-01,false), Span(32,33,List(19),contractual,contract-02,false), Span(31,32,List(20),existing,exist-01,false), Span(28,29,List(21),party,party,false), Span(27,28,List(22),other,other,false), Span(24,25,List(23),ensure,ensure-01,false), Span(20,21,List(25, 24),price,(thing :ARG2-of price-01),false), Span(19,20,List(26),contract,contract-02,false), Span(14,15,List(27),party,party,false), Span(13,14,List(28),other,other,false), Span(6,7,List(29),promises,promise-01,false), Span(5,6,List(30),contract,contract-02,false), Span(2,3,List(31),party,party,false)),Map(30 -> contract-02, 2 -> give-01, 5 -> additional, 27 -> party, 12 -> advantage, 8 -> possible, 15 -> benefit-01, 21 -> party, 18 -> obligate-01, 24 -> thing, 7 -> amount, 1 -> economy, 17 -> time, 23 -> ensure-01, 26 -> contract-02, 4 -> provide-01, 11 -> such, 14 -> obtain-01, 29 -> promise-01, 20 -> exist-01, 28 -> other, 6 -> consider-02, 9 -> penalize-01, 0 -> or, 22 -> other, 16 -> pay-01, 19 -> contract-02, 10 -> avoid-01, 3 -> additional, 31 -> party, 25 -> price-01, 13 -> practical),Map(p10 -> party, e -> economy, p5 -> pay-01, t -> time, b -> benefit-01, p8 -> party, o3 -> obligate-01, p2 -> possible, e2 -> exist-01, c4 -> contract-02, a3 -> amount, s -> such, o5 -> other, p -> provide-01, g -> give-01, c3 -> contract-02, a -> additional, p4 -> practical, a5 -> advantage, o2 -> obtain-01, p7 -> price-01, t2 -> thing, a2 -> additional, c -> consider-02, p6 -> party, o -> or, p9 -> promise-01, o4 -> other, p3 -> penalize-01, e3 -> ensure-01, c2 -> contract-02, a4 -> avoid-01))),[Ljava.lang.String;@2c08cb35,Annotation([Ljava.lang.String;@75551b28,[Ljava.lang.String;@266a1b46,[Ljava.lang.String;@24a45e),Annotation([Ljava.lang.String;@65a31764,[Ljava.lang.String;@3654da5d,[Ledu.cmu.lti.nlp.amr.Dependency;@7ccc2b88),Annotation([Ljava.lang.String;@403e2dba,[Ljava.lang.String;@322c2f49,[Ljava.lang.String;@72d47b5a),Annotation([Ljava.lang.String;@5bee8c9b,[Ljava.lang.String;@a514344,[Ledu.cmu.lti.nlp.amr.Entity;@5d172aa6))
AMR:
(a3 / amount, beneficiary, p3 / penalize-01)
(a3 / amount, op, c / consider-02)
(a4 / avoid-01, ARG0, s / such)
(a4 / avoid-01, ARG1, a3 / amount)
(a5 / advantage, example, a4 / avoid-01)
(a5 / advantage, mod, p4 / practical)
(b / benefit-01, ARG0, t / time)
(b / benefit-01, ARG1, p8 / party)
(b / benefit-01, ARG2, o2 / obtain-01)
(c2 / contract-02, ARG1, o3 / obligate-01)
(c3 / contract-02, ARG1, t2 / thing)
(e2 / exist-01, ARG1, o3 / obligate-01)
(e3 / ensure-01, ARG0, p10 / party)
(e3 / ensure-01, ARG1, o3 / obligate-01)
(g / give-01, ARG0, o / or)
(o2 / obtain-01, ARG0, a / additional)
(o2 / obtain-01, ARG1, a5 / advantage)
(o2 / obtain-01, ARG2, p / provide-01)
(o3 / obligate-01, ARG0, t / time)
(o3 / obligate-01, ARG1, p6 / party)
(p / provide-01, ARG1, o / or)
(p2 / possible, domain, a3 / amount)
(p3 / penalize-01, ARG1, e / economy)
(p5 / pay-01, ARG1, a2 / additional)
(p5 / pay-01, manner, o2 / obtain-01)
(p6 / party, mod, o4 / other)
(p7 / price-01, ARG1, e3 / ensure-01)
(p7 / price-01, ARG2, t2 / thing)
(p8 / party, mod, o5 / other)
(p9 / promise-01, ARG0, p10 / party)
(p9 / promise-01, ARG1, c4 / contract-02)

Decoded in 1,889,599 microseconds
Sentence: mr houphouetboigny seeks to keep his critics at bay by legalising four opposition political parties and promising to stand down as president before elections at the end of the year

Spans:
Span 15-16:  and => and
Span 22-23:  before => before
Span 6-7:  critics => critic
Span 19-20:  down => down
Span 23-24:  elections => elect-01
Span 11-12:  four => 4
Span 10-11:  legalising => legalize-01
Span 12-13:  opposition => oppose-01
Span 14-15:  parties => party
Span 13-14:  political => politics
Span 21-22:  president => (have-org-role-91 :ARG2 president)
Span 16-17:  promising => promise-01
Span 2-3:  seeks => seek-01
Span 29-30:  year => year

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),year,year,false), Span(23,24,List(1),elections,elect-01,false), Span(22,23,List(2),before,before,false), Span(21,22,List(4, 3),president,(have-org-role-91 :ARG2 president),false), Span(19,20,List(5),down,down,false), Span(16,17,List(6),promising,promise-01,false), Span(15,16,List(7),and,and,false), Span(14,15,List(8),parties,party,false), Span(13,14,List(9),political,politics,false), Span(12,13,List(10),opposition,oppose-01,false), Span(11,12,List(11),four,4,false), Span(10,11,List(12),legalising,legalize-01,false), Span(6,7,List(13),critics,critic,false), Span(2,3,List(14),seeks,seek-01,false)),Map(2 -> before, 5 -> down, 12 -> legalize-01, 8 -> party, 7 -> and, 1 -> elect-01, 4 -> president, 11 -> 4, 14 -> seek-01, 6 -> promise-01, 0 -> year, 9 -> politics, 3 -> have-org-role-91, 10 -> oppose-01, 13 -> critic),Map(e -> elect-01, h -> have-org-role-91, b -> before, p2 -> promise-01, s -> seek-01, d -> down, y -> year, p -> president, a -> and, 4 -> 4, p4 -> politics, c -> critic, l -> legalize-01, o -> oppose-01, p3 -> party))),[Ljava.lang.String;@1bf12809,Annotation([Ljava.lang.String;@757b7533,[Ljava.lang.String;@7c4ba386,[Ljava.lang.String;@49dcf22a),Annotation([Ljava.lang.String;@489ec948,[Ljava.lang.String;@30b0bb37,[Ledu.cmu.lti.nlp.amr.Dependency;@22d330da),Annotation([Ljava.lang.String;@572c4a12,[Ljava.lang.String;@1cb31074,[Ljava.lang.String;@2ffd3e64),Annotation([Ljava.lang.String;@1b0b2fd9,[Ljava.lang.String;@7b725d6d,[Ledu.cmu.lti.nlp.amr.Entity;@1153de6c))
AMR:
(a / and, op, l / legalize-01)
(a / and, op, p2 / promise-01)
(a / and, op, s / seek-01)
(b / before, op, e / elect-01)
(h / have-org-role-91, ARG1, d / down)
(h / have-org-role-91, ARG2, p / president)
(h / have-org-role-91, time, b / before)
(l / legalize-01, ARG0, c / critic)
(l / legalize-01, ARG1, y / year)
(o / oppose-01, ARG1, p4 / politics)
(o / oppose-01, quant, 4 / 4)
(p2 / promise-01, ARG1, p3 / party)
(p2 / promise-01, time, b / before)
(p3 / party, mod, p4 / politics)

Decoded in 128,083 microseconds
Sentence: ill see to everything i promise

Spans:
Span 3-4:  everything => everything
Span 4-5:  i => i
Span 0-1:  ill => ill-41
Span 5-6:  promise => promise-01
Span 1-2:  see => see-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),promise,promise-01,false), Span(4,5,List(1),i,i,false), Span(3,4,List(2),everything,everything,false), Span(1,2,List(3),see,see-01,false), Span(0,1,List(4),ill,ill-41,false)),Map(2 -> everything, 1 -> i, 4 -> ill-41, 0 -> promise-01, 3 -> see-01),Map(e -> everything, s -> see-01, p -> promise-01, i2 -> ill-41, i -> i))),[Ljava.lang.String;@192f8d57,Annotation([Ljava.lang.String;@e857ac,[Ljava.lang.String;@15d3ddab,[Ljava.lang.String;@87e10bf),Annotation([Ljava.lang.String;@c7d6ff4,[Ljava.lang.String;@7f410293,[Ledu.cmu.lti.nlp.amr.Dependency;@510422a),Annotation([Ljava.lang.String;@6e67d5fe,[Ljava.lang.String;@63124f52,[Ljava.lang.String;@4715c34e),Annotation([Ljava.lang.String;@65c95a57,[Ljava.lang.String;@64a39f6,[Ledu.cmu.lti.nlp.amr.Entity;@732348b3))
AMR:
(i2 / ill-41, ARG1, s / see-01)
(p / promise-01, ARG0, i / i)
(s / see-01, ARG0, p / promise-01)
(s / see-01, ARG1, e / everything)

Decoded in 24,892 microseconds
Sentence: british rail promised to consider a station at kidlington provided other authorities helped with the cost

NER Entity: (organization :name (name :op "british" :op "rail"))
NER Entity: (country :name (name :op "kidlington"))
Spans:
Span 11-12:  authorities => authority
Span 0-2:  british rail => (organization :name (name :op "british" :op "rail"))
Span 4-5:  consider => consider-02
Span 15-16:  cost => cost-01
Span 12-13:  helped => help-01
Span 10-11:  other => other
Span 2-3:  promised => promise-01
Span 9-10:  provided => provide-01
Span 6-7:  station => station

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),cost,cost-01,false), Span(12,13,List(1),helped,help-01,false), Span(11,12,List(2),authorities,authority,false), Span(10,11,List(3),other,other,false), Span(9,10,List(4),provided,provide-01,false), Span(6,7,List(5),station,station,false), Span(4,5,List(6),consider,consider-02,false), Span(2,3,List(7),promised,promise-01,false), Span(0,2,List(11, 10, 9, 8),british rail,(organization :name (name :op "british" :op "rail")),false)),Map(2 -> authority, 5 -> station, 8 -> organization, 7 -> promise-01, 1 -> help-01, 11 -> "rail", 4 -> provide-01, 6 -> consider-02, 9 -> name, 0 -> cost-01, 10 -> "british", 3 -> other),Map(n -> name, h -> help-01, p2 -> promise-01, s -> station, p -> provide-01, a -> authority, o2 -> organization, c -> cost-01, o -> other, c2 -> consider-02))),[Ljava.lang.String;@117a1ad3,Annotation([Ljava.lang.String;@67771b9b,[Ljava.lang.String;@3cb5922e,[Ljava.lang.String;@34902925),Annotation([Ljava.lang.String;@647d5718,[Ljava.lang.String;@60e11c32,[Ledu.cmu.lti.nlp.amr.Dependency;@5b02484e),Annotation([Ljava.lang.String;@72d9278f,[Ljava.lang.String;@eb45831,[Ljava.lang.String;@620a0081),Annotation([Ljava.lang.String;@7ea7476f,[Ljava.lang.String;@1843095f,[Ledu.cmu.lti.nlp.amr.Entity;@591c486a))
AMR:
(a / authority, mod, o / other)
(c2 / consider-02, ARG1, s / station)
(h / help-01, ARG0, a / authority)
(n / name, op, "british")
(n / name, op, "rail")
(o2 / organization, name, n / name)
(p / provide-01, ARG0, c / cost-01)
(p / provide-01, ARG1, c2 / consider-02)
(p / provide-01, ARG2, h / help-01)
(p2 / promise-01, ARG0, o2 / organization)
(p2 / promise-01, ARG1, c2 / consider-02)

Decoded in 145,022 microseconds
Sentence: boogie down productions headed by the selfstyled krsi promised to be cleverer and brighter than the rest but the new album is a disappointment

Spans:
Span 20-21:  album => album
Span 12-13:  and => and
Span 17-18:  but => contrast-01
Span 23-24:  disappointment => disappoint-01
Span 1-2:  down => down
Span 19-20:  new => new
Span 8-9:  promised => promise-01
Span 16-17:  rest => rest

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),disappointment,disappoint-01,false), Span(20,21,List(1),album,album,false), Span(19,20,List(2),new,new,false), Span(17,18,List(3),but,contrast-01,false), Span(16,17,List(4),rest,rest,false), Span(12,13,List(5),and,and,false), Span(8,9,List(6),promised,promise-01,false), Span(1,2,List(7),down,down,false)),Map(2 -> new, 5 -> and, 7 -> down, 1 -> album, 4 -> rest, 6 -> promise-01, 0 -> disappoint-01, 3 -> contrast-01),Map(n -> new, d -> disappoint-01, p -> promise-01, a -> album, d2 -> down, a2 -> and, r -> rest, c -> contrast-01))),[Ljava.lang.String;@4fd654da,Annotation([Ljava.lang.String;@5cdd29,[Ljava.lang.String;@50bbaeee,[Ljava.lang.String;@51d9b4aa),Annotation([Ljava.lang.String;@2be42ee1,[Ljava.lang.String;@11c1cc4a,[Ledu.cmu.lti.nlp.amr.Dependency;@4a4b1761),Annotation([Ljava.lang.String;@7ec0762,[Ljava.lang.String;@18d8b6fe,[Ljava.lang.String;@3bd5ea70),Annotation([Ljava.lang.String;@59127dc0,[Ljava.lang.String;@4cfdf5ef,[Ledu.cmu.lti.nlp.amr.Entity;@351d4566))
AMR:
(a / album, mod, n / new)
(c / contrast-01, ARG1, r / rest)
(c / contrast-01, ARG2, a / album)
(c / contrast-01, condition, d / disappoint-01)
(d / disappoint-01, ARG0, d2 / down)
(d / disappoint-01, ARG1, a2 / and)
(p / promise-01, ARG1, a2 / and)

Decoded in 193,785 microseconds
Sentence: barry told me that the council have been promising to mend the fences doors and windows for years but the inside looked magical

Spans:
Span 14-15:  and => and
Span 18-19:  but => contrast-01
Span 5-6:  council => council
Span 13-14:  doors => door
Span 12-13:  fences => fence
Span 20-21:  inside => inside
Span 21-22:  looked => look-01
Span 10-11:  mend => mend-01
Span 8-9:  promising => promise-01
Span 1-2:  told => tell-01
Span 15-16:  windows => window
Span 17-18:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),looked,look-01,false), Span(20,21,List(1),inside,inside,false), Span(18,19,List(2),but,contrast-01,false), Span(17,18,List(4, 3),years,(temporal-quantity :unit year),false), Span(15,16,List(5),windows,window,false), Span(14,15,List(6),and,and,false), Span(13,14,List(7),doors,door,false), Span(12,13,List(8),fences,fence,false), Span(10,11,List(9),mend,mend-01,false), Span(8,9,List(10),promising,promise-01,false), Span(5,6,List(11),council,council,false), Span(1,2,List(12),told,tell-01,false)),Map(2 -> contrast-01, 5 -> window, 12 -> tell-01, 8 -> fence, 7 -> door, 1 -> inside, 4 -> year, 11 -> council, 6 -> and, 0 -> look-01, 9 -> mend-01, 3 -> temporal-quantity, 10 -> promise-01),Map(w -> window, t -> temporal-quantity, d -> door, m -> mend-01, y -> year, p -> promise-01, a -> and, t2 -> tell-01, i -> inside, c -> contrast-01, l -> look-01, f -> fence, c2 -> council))),[Ljava.lang.String;@c87ff18,Annotation([Ljava.lang.String;@347c8715,[Ljava.lang.String;@5b888e9e,[Ljava.lang.String;@624b5604),Annotation([Ljava.lang.String;@3ffc5306,[Ljava.lang.String;@4eaecfbb,[Ledu.cmu.lti.nlp.amr.Dependency;@36c82658),Annotation([Ljava.lang.String;@e4d7781,[Ljava.lang.String;@7fe0bd7c,[Ljava.lang.String;@7bb8597a),Annotation([Ljava.lang.String;@3fa980b,[Ljava.lang.String;@3913fc37,[Ledu.cmu.lti.nlp.amr.Entity;@4f139c27))
AMR:
(a / and, op, w / window)
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, l / look-01)
(d / door, mod, f / fence)
(l / look-01, ARG0, t / temporal-quantity)
(l / look-01, ARG1, i / inside)
(m / mend-01, ARG0, c2 / council)
(m / mend-01, ARG1, a / and)
(m / mend-01, ARG2, d / door)
(p / promise-01, ARG0, c2 / council)
(t / temporal-quantity, unit, y / year)
(t2 / tell-01, ARG1, p / promise-01)

Decoded in 644,658 microseconds
Sentence: who at the outset of the campaign promised not to pander to pressure groups now says that as mayor he would have mr arafat arrested as an accomplice to terrorism

Spans:
Span 27-28:  accomplice => accomplice
Span 24-25:  arrested => arrest-01
Span 6-7:  campaign => campaign-01
Span 13-14:  groups => group
Span 19-20:  he => he
Span 18-19:  mayor => (have-org-role-91 :ARG2 mayor)
Span 14-15:  now => now
Span 3-4:  outset => outset
Span 12-13:  pressure => pressure-01
Span 7-8:  promised => promise-01
Span 15-16:  says => say-01
Span 29-30:  terrorism => terrorism

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),terrorism,terrorism,false), Span(27,28,List(1),accomplice,accomplice,false), Span(24,25,List(2),arrested,arrest-01,false), Span(19,20,List(3),he,he,false), Span(18,19,List(5, 4),mayor,(have-org-role-91 :ARG2 mayor),false), Span(15,16,List(6),says,say-01,false), Span(14,15,List(7),now,now,false), Span(13,14,List(8),groups,group,false), Span(12,13,List(9),pressure,pressure-01,false), Span(7,8,List(10),promised,promise-01,false), Span(6,7,List(11),campaign,campaign-01,false), Span(3,4,List(12),outset,outset,false)),Map(2 -> arrest-01, 5 -> mayor, 12 -> outset, 8 -> group, 7 -> now, 1 -> accomplice, 4 -> have-org-role-91, 11 -> campaign-01, 6 -> say-01, 0 -> terrorism, 9 -> pressure-01, 3 -> he, 10 -> promise-01),Map(n -> now, h -> he, h2 -> have-org-role-91, t -> terrorism, p2 -> promise-01, s -> say-01, m -> mayor, g -> group, p -> pressure-01, a -> accomplice, a2 -> arrest-01, c -> campaign-01, o -> outset))),[Ljava.lang.String;@1070ed00,Annotation([Ljava.lang.String;@65d7a36e,[Ljava.lang.String;@302abefe,[Ljava.lang.String;@46612e66),Annotation([Ljava.lang.String;@162d4ea3,[Ljava.lang.String;@7885bab4,[Ledu.cmu.lti.nlp.amr.Dependency;@13a4bd3d),Annotation([Ljava.lang.String;@2483f9de,[Ljava.lang.String;@5489708c,[Ljava.lang.String;@b3c22b0),Annotation([Ljava.lang.String;@19095693,[Ljava.lang.String;@3412d9bc,[Ledu.cmu.lti.nlp.amr.Entity;@4194e059))
AMR:
(a2 / arrest-01, ARG1, h / he)
(a2 / arrest-01, time, a / accomplice)
(c / campaign-01, ARG0, o / outset)
(c / campaign-01, ARG1, t / terrorism)
(h2 / have-org-role-91, ARG0, h / he)
(h2 / have-org-role-91, ARG2, m / mayor)
(p / pressure-01, ARG0, g / group)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, c / campaign-01)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, g / group)
(s / say-01, time, n / now)

Decoded in 134,056 microseconds
Sentence: they promised to elect a president by 7 november thus ending the preposterous existence of two rival cabinets which have governed against each other for more than a year

Spans:
Span 7-8:  7 => 7
Span 22-23:  each => each
Span 3-4:  elect => elect-01
Span 10-11:  ending => end-01
Span 13-14:  existence => exist-01
Span 20-21:  governed => govern-01
Span 8-9:  november => (date-entity :month 11)
Span 23-24:  other => other
Span 12-13:  preposterous => preposterous
Span 5-6:  president => (have-org-role-91 :ARG2 president)
Span 1-2:  promised => promise-01
Span 16-17:  rival => rival-01
Span 0-1:  they => they
Span 15-16:  two => 2
Span 28-29:  year => year

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),year,year,false), Span(23,24,List(1),other,other,false), Span(22,23,List(2),each,each,false), Span(20,21,List(3),governed,govern-01,false), Span(16,17,List(4),rival,rival-01,false), Span(15,16,List(5),two,2,false), Span(13,14,List(6),existence,exist-01,false), Span(12,13,List(7),preposterous,preposterous,false), Span(10,11,List(8),ending,end-01,false), Span(8,9,List(10, 9),november,(date-entity :month 11),false), Span(7,8,List(11),7,7,false), Span(5,6,List(13, 12),president,(have-org-role-91 :ARG2 president),false), Span(3,4,List(14),elect,elect-01,false), Span(1,2,List(15),promised,promise-01,false), Span(0,1,List(16),they,they,false)),Map(2 -> each, 5 -> 2, 12 -> have-org-role-91, 15 -> promise-01, 8 -> end-01, 7 -> preposterous, 1 -> other, 4 -> rival-01, 11 -> 7, 14 -> elect-01, 6 -> exist-01, 0 -> year, 9 -> date-entity, 16 -> they, 3 -> govern-01, 10 -> 11, 13 -> president),Map(e -> each, h -> have-org-role-91, 2 -> 2, t -> they, p2 -> president, e2 -> exist-01, d -> date-entity, 7 -> 7, 1 -> 11, y -> year, g -> govern-01, p -> preposterous, e4 -> elect-01, r -> rival-01, o -> other, p3 -> promise-01, e3 -> end-01))),[Ljava.lang.String;@f1abb1c,Annotation([Ljava.lang.String;@23f23303,[Ljava.lang.String;@71f31c64,[Ljava.lang.String;@fcd23ae),Annotation([Ljava.lang.String;@64e17c9c,[Ljava.lang.String;@fbc1982,[Ledu.cmu.lti.nlp.amr.Dependency;@62eade0),Annotation([Ljava.lang.String;@6299504b,[Ljava.lang.String;@3f669e7f,[Ljava.lang.String;@6a2fc45d),Annotation([Ljava.lang.String;@6604ec21,[Ljava.lang.String;@4d2a9eda,[Ledu.cmu.lti.nlp.amr.Entity;@292321ca))
AMR:
(2 / 2, op, p3 / promise-01)
(d / date-entity, month, 1 / 11)
(e2 / exist-01, ARG1, 7 / 7)
(e3 / end-01, ARG1, e2 / exist-01)
(e4 / elect-01, ARG0, t / they)
(e4 / elect-01, ARG1, p2 / president)
(g / govern-01, ARG1, e2 / exist-01)
(h / have-org-role-91, ARG0, y / year)
(h / have-org-role-91, ARG2, p2 / president)
(o / other, mod, e / each)
(p / preposterous, domain, e2 / exist-01)
(p3 / promise-01, ARG0, e / each)
(p3 / promise-01, ARG1, e3 / end-01)
(p3 / promise-01, ARG2, e4 / elect-01)
(p3 / promise-01, time, d / date-entity)
(r / rival-01, ARG1, e4 / elect-01)

Decoded in 575,218 microseconds
Sentence: 95 this new edition revised updated and extended for the 21st century promises to teach you how to calculate draw and eventually interpret a horoscope and is plainly making a bid to be included in the national curriculum

Spans:
Span 0-1:  95 => 95
Span 25-26:  and => and
Span 20-21:  and => and
Span 6-7:  and => and
Span 30-31:  bid => bid-01
Span 18-19:  calculate => calculate-01
Span 37-38:  curriculum => curriculum
Span 19-20:  draw => draw-02
Span 3-4:  edition => edition
Span 21-22:  eventually => eventual
Span 7-8:  extended => extend-01
Span 33-34:  included => include-01
Span 22-23:  interpret => interpret-01
Span 36-37:  national => nation
Span 2-3:  new => new
Span 27-28:  plainly => plain
Span 12-13:  promises => promise-01
Span 4-5:  revised => revise-01
Span 14-15:  teach => teach-01
Span 1-2:  this => this
Span 5-6:  updated => update-01
Span 15-16:  you => you

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),curriculum,curriculum,false), Span(36,37,List(1),national,nation,false), Span(33,34,List(2),included,include-01,false), Span(30,31,List(3),bid,bid-01,false), Span(27,28,List(4),plainly,plain,false), Span(25,26,List(5),and,and,false), Span(22,23,List(6),interpret,interpret-01,false), Span(21,22,List(7),eventually,eventual,false), Span(20,21,List(8),and,and,false), Span(19,20,List(9),draw,draw-02,false), Span(18,19,List(10),calculate,calculate-01,false), Span(15,16,List(11),you,you,false), Span(14,15,List(12),teach,teach-01,false), Span(12,13,List(13),promises,promise-01,false), Span(7,8,List(14),extended,extend-01,false), Span(6,7,List(15),and,and,false), Span(5,6,List(16),updated,update-01,false), Span(4,5,List(17),revised,revise-01,false), Span(3,4,List(18),edition,edition,false), Span(2,3,List(19),new,new,false), Span(1,2,List(20),this,this,false), Span(0,1,List(21),95,95,false)),Map(2 -> include-01, 5 -> and, 12 -> teach-01, 15 -> and, 8 -> and, 21 -> 95, 18 -> edition, 7 -> eventual, 17 -> revise-01, 1 -> nation, 4 -> plain, 11 -> you, 14 -> extend-01, 20 -> this, 6 -> interpret-01, 0 -> curriculum, 9 -> draw-02, 16 -> update-01, 19 -> new, 3 -> bid-01, 10 -> calculate-01, 13 -> promise-01),Map(e -> eventual, n -> nation, b -> bid-01, t -> teach-01, e2 -> extend-01, p2 -> promise-01, a3 -> and, d -> draw-02, p -> plain, y -> you, a -> and, t2 -> this, i2 -> interpret-01, r -> revise-01, i -> include-01, a2 -> and, c -> curriculum, u -> update-01, 9 -> 95, e3 -> edition, n2 -> new, c2 -> calculate-01))),[Ljava.lang.String;@7ff6bd58,Annotation([Ljava.lang.String;@20091e0a,[Ljava.lang.String;@369332f4,[Ljava.lang.String;@79f64d29),Annotation([Ljava.lang.String;@1943fd4d,[Ljava.lang.String;@3eaad730,[Ledu.cmu.lti.nlp.amr.Dependency;@4215b074),Annotation([Ljava.lang.String;@1df3b191,[Ljava.lang.String;@6a0eb5f3,[Ljava.lang.String;@6bcb9aea),Annotation([Ljava.lang.String;@427aff0,[Ljava.lang.String;@498fb7b1,[Ledu.cmu.lti.nlp.amr.Entity;@7a64eb31))
AMR:
(a / and, op, b / bid-01)
(a / and, op, p2 / promise-01)
(a2 / and, op, c2 / calculate-01)
(a2 / and, op, i2 / interpret-01)
(a3 / and, op, u / update-01)
(b / bid-01, ARG1, i / include-01)
(c / curriculum, mod, n / nation)
(c2 / calculate-01, ARG1, d / draw-02)
(e2 / extend-01, ARG1, a3 / and)
(i / include-01, ARG1, a3 / and)
(i / include-01, ARG2, c / curriculum)
(i2 / interpret-01, ARG1, t2 / this)
(i2 / interpret-01, time, e / eventual)
(p2 / promise-01, ARG2, t / teach-01)
(r / revise-01, ARG0, p / plain)
(r / revise-01, ARG1, u / update-01)
(t / teach-01, ARG0, a2 / and)
(t / teach-01, ARG1, y / you)
(u / update-01, ARG0, e3 / edition)
(u / update-01, ARG1, 9 / 95)
(u / update-01, mod, n2 / new)

Decoded in 1,099,725 microseconds
Sentence: here minnowfilled ditches run cold and clear over beds of emerald starwort delicate as seaweed in a rock pool and  promising with their mossy winter growth the washed green brilliance of the coming irish spring

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = here minnowfilled ditches run cold and clear over beds of emerald starwort delicate as seaweed in a rock pool and  promising with their mossy winter growth the washed green brilliance of the coming irish spring
myTokenized = here minnowfilled ditches run cold and clear over beds of emerald starwort delicate as seaweed in a rock pool and promising with their mossy winter growth the washed green brilliance of the coming irish spring
i = 20
prefix = List(here, minnowfilled, ditches, run, cold, and, clear, over, beds, of, emerald, starwort, delicate, as, seaweed, in, a, rock, pool, and, promising)
regexr = \Qh\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qm\E ?\Qi\E ?\Qn\E ?\Qn\E ?\Qo\E ?\Qw\E ?\Qf\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qe\E ?\Qd\E ?\Qd\E ?\Qi\E ?\Qt\E ?\Qc\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qr\E ?\Qu\E ?\Qn\E ?\Qc\E ?\Qo\E ?\Ql\E ?\Qd\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qc\E ?\Ql\E ?\Qe\E ?\Qa\E ?\Qr\E ?\Qo\E ?\Qv\E ?\Qe\E ?\Qr\E ?\Qb\E ?\Qe\E ?\Qd\E ?\Qs\E ?\Qo\E ?\Qf\E ?\Qe\E ?\Qm\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Ql\E ?\Qd\E ?\Qs\E ?\Qt\E ?\Qa\E ?\Qr\E ?\Qw\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qd\E ?\Qe\E ?\Ql\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qa\E ?\Qs\E ?\Qs\E ?\Qe\E ?\Qa\E ?\Qw\E ?\Qe\E ?\Qe\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qr\E ?\Qo\E ?\Qc\E ?\Qk\E ?\Qp\E ?\Qo\E ?\Qo\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qn\E ?\Qg\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the ballot for the executive and officers of the 1922 committee of tory mps promises to be as bitter as the main bout on 5 december

Spans:
Span 9-10:  1922 => (date-entity :year 1922)
Span 24-25:  5 => 5
Span 5-6:  and => and
Span 1-2:  ballot => ballot
Span 18-19:  bitter => bitter
Span 10-11:  committee => committee
Span 25-26:  december => (date-entity :month 12)
Span 4-5:  executive => executive
Span 21-22:  main => main
Span 6-7:  officers => (have-org-role-91 :ARG2 officer)
Span 14-15:  promises => promise-01
Span 12-13:  tory => (political-party :name (name :op "Tory"))

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(1, 0),december,(date-entity :month 12),false), Span(24,25,List(2),5,5,false), Span(21,22,List(3),main,main,false), Span(18,19,List(4),bitter,bitter,false), Span(14,15,List(5),promises,promise-01,false), Span(12,13,List(8, 7, 6),tory,(political-party :name (name :op "Tory")),false), Span(10,11,List(9),committee,committee,false), Span(9,10,List(11, 10),1922,(date-entity :year 1922),false), Span(6,7,List(13, 12),officers,(have-org-role-91 :ARG2 officer),false), Span(5,6,List(14),and,and,false), Span(4,5,List(15),executive,executive,false), Span(1,2,List(16),ballot,ballot,false)),Map(2 -> 5, 5 -> promise-01, 12 -> have-org-role-91, 15 -> executive, 8 -> "Tory", 7 -> name, 1 -> 12, 4 -> bitter, 11 -> 1922, 14 -> and, 6 -> political-party, 0 -> date-entity, 9 -> committee, 16 -> ballot, 3 -> main, 10 -> date-entity, 13 -> officer),Map(e -> executive, n -> name, h -> have-org-role-91, 5 -> 5, b -> bitter, 12 -> 1922, b2 -> ballot, p2 -> political-party, d -> date-entity, m -> main, 1 -> 12, p -> promise-01, a -> and, d2 -> date-entity, c -> committee, o -> officer))),[Ljava.lang.String;@5159f99c,Annotation([Ljava.lang.String;@6a129a7d,[Ljava.lang.String;@6b5cbaf2,[Ljava.lang.String;@14f59cef),Annotation([Ljava.lang.String;@91219a9,[Ljava.lang.String;@352aae6,[Ledu.cmu.lti.nlp.amr.Dependency;@2851e3be),Annotation([Ljava.lang.String;@183ee3a0,[Ljava.lang.String;@48d229cf,[Ljava.lang.String;@5db6fa62),Annotation([Ljava.lang.String;@17f067ff,[Ljava.lang.String;@283ba2a0,[Ledu.cmu.lti.nlp.amr.Entity;@6331cb02))
AMR:
(a / and, op, b2 / ballot)
(a / and, op, e / executive)
(b / bitter, time, d / date-entity)
(c / committee, time, d2 / date-entity)
(d / date-entity, month, 1 / 12)
(d / date-entity, quant, 5 / 5)
(d2 / date-entity, year, 12 / 1922)
(h / have-org-role-91, ARG0, b / bitter)
(h / have-org-role-91, ARG1, p2 / political-party)
(h / have-org-role-91, ARG2, o / officer)
(h / have-org-role-91, time, m / main)
(n / name, op, "Tory")
(p / promise-01, ARG0, b2 / ballot)
(p / promise-01, ARG1, b / bitter)
(p / promise-01, ARG2, c / committee)
(p2 / political-party, name, n / name)

Decoded in 330,737 microseconds
Sentence: your mother is a remarkable woman and i have promised to come again

Spans:
Span 12-13:  again => again
Span 6-7:  and => and
Span 7-8:  i => i
Span 1-2:  mother => (have-rel-role-91 :ARG2 mother)
Span 9-10:  promised => promise-01
Span 4-5:  remarkable => remarkable
Span 5-6:  woman => woman

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),again,again,false), Span(9,10,List(1),promised,promise-01,false), Span(7,8,List(2),i,i,false), Span(6,7,List(3),and,and,false), Span(5,6,List(4),woman,woman,false), Span(4,5,List(5),remarkable,remarkable,false), Span(1,2,List(7, 6),mother,(have-rel-role-91 :ARG2 mother),false)),Map(2 -> i, 5 -> remarkable, 7 -> mother, 1 -> promise-01, 4 -> woman, 6 -> have-rel-role-91, 0 -> again, 3 -> and),Map(w -> woman, h -> have-rel-role-91, m -> mother, p -> promise-01, a -> again, r -> remarkable, a2 -> and, i -> i))),[Ljava.lang.String;@32fc1c17,Annotation([Ljava.lang.String;@45984427,[Ljava.lang.String;@fa28023,[Ljava.lang.String;@758a81d9),Annotation([Ljava.lang.String;@585309d8,[Ljava.lang.String;@33ab7135,[Ledu.cmu.lti.nlp.amr.Dependency;@3c956913),Annotation([Ljava.lang.String;@75257d77,[Ljava.lang.String;@70504bb6,[Ljava.lang.String;@279ad355),Annotation([Ljava.lang.String;@25a885c3,[Ljava.lang.String;@5ae5d885,[Ledu.cmu.lti.nlp.amr.Entity;@27ea3262))
AMR:
(a2 / and, op, i / i)
(h / have-rel-role-91, ARG0, a / again)
(h / have-rel-role-91, ARG1, i / i)
(h / have-rel-role-91, ARG2, m / mother)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, w / woman)
(w / woman, mod, r / remarkable)

Decoded in 178,917 microseconds
Sentence: general aoun shrewdly grasped this point and immediately demanded that the christian mps return home to explain themselves and to promise that they would not ratify the agreement

Spans:
Span 27-28:  agreement => agree-01
Span 18-19:  and => and
Span 6-7:  and => and
Span 11-12:  christian => (religious-group :name (name :op "Christian"))
Span 8-9:  demanded => demand-01
Span 16-17:  explain => explain-01
Span 0-1:  general => general
Span 14-15:  home => home
Span 7-8:  immediately => immediate
Span 5-6:  point => point
Span 20-21:  promise => promise-01
Span 25-26:  ratify => ratify-01
Span 22-23:  they => they
Span 4-5:  this => this

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),agreement,agree-01,false), Span(25,26,List(1),ratify,ratify-01,false), Span(22,23,List(2),they,they,false), Span(20,21,List(3),promise,promise-01,false), Span(18,19,List(4),and,and,false), Span(16,17,List(5),explain,explain-01,false), Span(14,15,List(6),home,home,false), Span(11,12,List(9, 8, 7),christian,(religious-group :name (name :op "Christian")),false), Span(8,9,List(10),demanded,demand-01,false), Span(7,8,List(11),immediately,immediate,false), Span(6,7,List(12),and,and,false), Span(5,6,List(13),point,point,false), Span(4,5,List(14),this,this,false), Span(0,1,List(15),general,general,false)),Map(2 -> they, 5 -> explain-01, 12 -> and, 15 -> general, 8 -> name, 7 -> religious-group, 1 -> ratify-01, 4 -> and, 11 -> immediate, 14 -> this, 6 -> home, 0 -> agree-01, 9 -> "Christian", 3 -> promise-01, 10 -> demand-01, 13 -> point),Map(e -> explain-01, n -> name, h -> home, t -> they, p2 -> point, a3 -> and, d -> demand-01, g -> general, p -> promise-01, r2 -> religious-group, a -> agree-01, t2 -> this, r -> ratify-01, a2 -> and, i -> immediate))),[Ljava.lang.String;@91d467,Annotation([Ljava.lang.String;@660fb67b,[Ljava.lang.String;@11957996,[Ljava.lang.String;@6c616fde),Annotation([Ljava.lang.String;@70f78f68,[Ljava.lang.String;@ce82ec9,[Ledu.cmu.lti.nlp.amr.Dependency;@5f5794bd),Annotation([Ljava.lang.String;@6ee63531,[Ljava.lang.String;@4bae5cd8,[Ljava.lang.String;@24518fb9),Annotation([Ljava.lang.String;@66b2cd4f,[Ljava.lang.String;@64c53235,[Ledu.cmu.lti.nlp.amr.Entity;@4e636942))
AMR:
(a / agree-01, ARG1, g / general)
(a2 / and, op, p / promise-01)
(a3 / and, op, d / demand-01)
(d / demand-01, ARG1, a2 / and)
(d / demand-01, time, i / immediate)
(e / explain-01, ARG1, a2 / and)
(h / home, mod, r2 / religious-group)
(n / name, op, "Christian")
(p / promise-01, ARG0, h / home)
(p / promise-01, ARG1, r / ratify-01)
(p2 / point, mod, t2 / this)
(p2 / point, poss, a3 / and)
(r / ratify-01, ARG0, t / they)
(r / ratify-01, ARG1, a / agree-01)
(r2 / religious-group, name, n / name)

Decoded in 213,352 microseconds
Sentence: 90 as things developed the burden on the taxpayer promised to increase

Spans:
Span 0-1:  90 => 90
Span 5-6:  burden => burden-01
Span 3-4:  developed => develop-02
Span 11-12:  increase => increase-01
Span 9-10:  promised => promise-01
Span 2-3:  things => thing

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),increase,increase-01,false), Span(9,10,List(1),promised,promise-01,false), Span(5,6,List(2),burden,burden-01,false), Span(3,4,List(3),developed,develop-02,false), Span(2,3,List(4),things,thing,false), Span(0,1,List(5),90,90,false)),Map(2 -> burden-01, 5 -> 90, 1 -> promise-01, 4 -> thing, 0 -> increase-01, 3 -> develop-02),Map(t -> thing, b -> burden-01, d -> develop-02, p -> promise-01, i -> increase-01, 9 -> 90))),[Ljava.lang.String;@f3d62aa,Annotation([Ljava.lang.String;@7188eb7,[Ljava.lang.String;@5d419404,[Ljava.lang.String;@7c5cc270),Annotation([Ljava.lang.String;@2de186d9,[Ljava.lang.String;@315c2817,[Ledu.cmu.lti.nlp.amr.Dependency;@194c1752),Annotation([Ljava.lang.String;@528f1577,[Ljava.lang.String;@2fca61f9,[Ljava.lang.String;@fe63af2),Annotation([Ljava.lang.String;@5427ee05,[Ljava.lang.String;@97bb56d,[Ledu.cmu.lti.nlp.amr.Entity;@18c40bf8))
AMR:
(b / burden-01, purpose, i / increase-01)
(d / develop-02, ARG0, t / thing)
(d / develop-02, ARG1, b / burden-01)
(d / develop-02, ARG2, 9 / 90)
(p / promise-01, ARG2, i / increase-01)

Decoded in 53,283 microseconds
Sentence: bronzed beeffed to be sighted on dynasty in luxury condos and in harrods with expensive cameras and too much money they are now the target of an introduction agency which promises to bring together peachycomplexioned jane seymours with hunky tom cruises

Spans:
Span 28-29:  agency => agency
Span 16-17:  and => and
Span 10-11:  and => and
Span 32-33:  bring => bring-01
Span 15-16:  cameras => camera
Span 6-7:  dynasty => dynasty
Span 14-15:  expensive => expensive
Span 27-28:  introduction => introduce-02
Span 8-9:  luxury => luxury
Span 19-20:  money => money
Span 18-19:  much => much
Span 22-23:  now => now
Span 30-31:  promises => promise-01
Span 24-25:  target => target-01
Span 20-21:  they => they
Span 33-34:  together => together
Span 17-18:  too => too

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),together,together,false), Span(32,33,List(1),bring,bring-01,false), Span(30,31,List(2),promises,promise-01,false), Span(28,29,List(3),agency,agency,false), Span(27,28,List(4),introduction,introduce-02,false), Span(24,25,List(5),target,target-01,false), Span(22,23,List(6),now,now,false), Span(20,21,List(7),they,they,false), Span(19,20,List(8),money,money,false), Span(18,19,List(9),much,much,false), Span(17,18,List(10),too,too,false), Span(16,17,List(11),and,and,false), Span(15,16,List(12),cameras,camera,false), Span(14,15,List(13),expensive,expensive,false), Span(10,11,List(14),and,and,false), Span(8,9,List(15),luxury,luxury,false), Span(6,7,List(16),dynasty,dynasty,false)),Map(2 -> promise-01, 5 -> target-01, 12 -> camera, 15 -> luxury, 8 -> money, 7 -> they, 1 -> bring-01, 4 -> introduce-02, 11 -> and, 14 -> and, 6 -> now, 0 -> together, 9 -> much, 16 -> dynasty, 3 -> agency, 10 -> too, 13 -> expensive),Map(e -> expensive, n -> now, t4 -> too, t -> together, b -> bring-01, m2 -> much, a3 -> and, d -> dynasty, m -> money, t3 -> they, p -> promise-01, a -> agency, t2 -> target-01, i -> introduce-02, a2 -> and, c -> camera, l -> luxury))),[Ljava.lang.String;@726d73af,Annotation([Ljava.lang.String;@6fc620d9,[Ljava.lang.String;@3896bfe3,[Ljava.lang.String;@310fed1b),Annotation([Ljava.lang.String;@c97a0c7,[Ljava.lang.String;@36bc6f46,[Ledu.cmu.lti.nlp.amr.Dependency;@d2d78bd),Annotation([Ljava.lang.String;@2451c70d,[Ljava.lang.String;@74e3391b,[Ljava.lang.String;@71ba5790),Annotation([Ljava.lang.String;@cae945,[Ljava.lang.String;@998b16b,[Ledu.cmu.lti.nlp.amr.Entity;@7a7ecb9))
AMR:
(a / agency, mod, i / introduce-02)
(a2 / and, op, c / camera)
(a2 / and, op, m / money)
(b / bring-01, ARG0, t4 / too)
(b / bring-01, ARG1, l / luxury)
(b / bring-01, ARG2, a3 / and)
(b / bring-01, ARG3, t / together)
(c / camera, mod, e / expensive)
(i / introduce-02, ARG0, d / dynasty)
(i / introduce-02, ARG1, a2 / and)
(m / money, quant, m2 / much)
(p / promise-01, ARG0, t2 / target-01)
(p / promise-01, ARG1, b / bring-01)
(t2 / target-01, ARG0, a / agency)
(t2 / target-01, ARG1, t3 / they)
(t2 / target-01, time, n / now)

Decoded in 492,070 microseconds
Sentence: but as some financial institutions were promising support for the besieged tobacco to retailing and insurance giant others were adding their names to the bidding group

Spans:
Span 19-20:  adding => add-02
Span 14-15:  and => and
Span 10-11:  besieged => besiege-01
Span 24-25:  bidding => bid-01
Span 0-1:  but => contrast-01
Span 3-4:  financial => finance
Span 16-17:  giant => giant
Span 25-26:  group => group
Span 4-5:  institutions => institution
Span 15-16:  insurance => insure-02
Span 21-22:  names => name
Span 17-18:  others => other
Span 6-7:  promising => promise-01
Span 2-3:  some => some
Span 7-8:  support => support-01
Span 11-12:  tobacco => tobacco

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),group,group,false), Span(24,25,List(1),bidding,bid-01,false), Span(21,22,List(2),names,name,false), Span(19,20,List(3),adding,add-02,false), Span(17,18,List(4),others,other,false), Span(16,17,List(5),giant,giant,false), Span(15,16,List(6),insurance,insure-02,false), Span(14,15,List(7),and,and,false), Span(11,12,List(8),tobacco,tobacco,false), Span(10,11,List(9),besieged,besiege-01,false), Span(7,8,List(10),support,support-01,false), Span(6,7,List(11),promising,promise-01,false), Span(4,5,List(12),institutions,institution,false), Span(3,4,List(13),financial,finance,false), Span(2,3,List(14),some,some,false), Span(0,1,List(15),but,contrast-01,false)),Map(2 -> name, 5 -> giant, 12 -> institution, 15 -> contrast-01, 8 -> tobacco, 7 -> and, 1 -> bid-01, 4 -> other, 11 -> promise-01, 14 -> some, 6 -> insure-02, 0 -> group, 9 -> besiege-01, 3 -> add-02, 10 -> support-01, 13 -> finance),Map(n -> name, s2 -> some, b -> bid-01, t -> tobacco, b2 -> besiege-01, s -> support-01, g2 -> giant, g -> group, p -> promise-01, a -> add-02, i2 -> institution, i -> insure-02, a2 -> and, c -> contrast-01, f -> finance, o -> other))),[Ljava.lang.String;@21a6699c,Annotation([Ljava.lang.String;@345f9206,[Ljava.lang.String;@6e6be2c6,[Ljava.lang.String;@6cf56dcc),Annotation([Ljava.lang.String;@64fba3f6,[Ljava.lang.String;@44c99f45,[Ledu.cmu.lti.nlp.amr.Dependency;@10f78e4b),Annotation([Ljava.lang.String;@6c9ee6a0,[Ljava.lang.String;@34374a16,[Ljava.lang.String;@19e10522),Annotation([Ljava.lang.String;@4180874,[Ljava.lang.String;@45d2f9c5,[Ledu.cmu.lti.nlp.amr.Entity;@1e0c1853))
AMR:
(a / add-02, ARG0, i2 / institution)
(a / add-02, ARG1, n / name)
(a / add-02, ARG2, g / group)
(a2 / and, op, a / add-02)
(a2 / and, op, i / insure-02)
(b / bid-01, ARG0, g / group)
(b / bid-01, ARG1, s2 / some)
(b2 / besiege-01, ARG1, t / tobacco)
(c / contrast-01, ARG0, t / tobacco)
(c / contrast-01, ARG1, p / promise-01)
(i / insure-02, ARG1, o / other)
(i2 / institution, mod, f / finance)
(o / other, mod, g2 / giant)
(p / promise-01, ARG0, i2 / institution)
(p / promise-01, ARG1, s / support-01)

Decoded in 553,641 microseconds
Sentence: though he promised to back the proposals of the convention if there were substantial agreement  he privately assured carson that nothing would be done without ulsters consent and ulster strong in this assurance rejected any solution in advance

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = though he promised to back the proposals of the convention if there were substantial agreement  he privately assured carson that nothing would be done without ulsters consent and ulster strong in this assurance rejected any solution in advance
myTokenized = though he promised to back the proposals of the convention if there were substantial agreement he privately assured carson that nothing would be done without ulsters consent and ulster strong in this assurance rejected any solution in advance
i = 15
prefix = List(though, he, promised, to, back, the, proposals, of, the, convention, if, there, were, substantial, agreement, he)
regexr = \Qt\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qb\E ?\Qa\E ?\Qc\E ?\Qk\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qp\E ?\Qo\E ?\Qs\E ?\Qa\E ?\Ql\E ?\Qs\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qv\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qi\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qw\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qs\E ?\Qu\E ?\Qb\E ?\Qs\E ?\Qt\E ?\Qa\E ?\Qn\E ?\Qt\E ?\Qi\E ?\Qa\E ?\Ql\E ?\Qa\E ?\Qg\E ?\Qr\E ?\Qe\E ?\Qe\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the finns subsequently followed a policy of enlightened selfrestraint accepting the limitations that moscow was determined to impose on their foreign policy promising by treaty to fight to repel a german invasion of the soviet union through their territory and rejecting western economic aid

NER Entity: (country :name (name :op "moscow"))
NER Entity: (thing :name (name :op "german"))
NER Entity: (country :name (name :op "soviet"))
Spans:
Span 9-10:  accepting => accept-01
Span 43-44:  aid => aid-01
Span 39-40:  and => and
Span 15-16:  determined => determine-01
Span 42-43:  economic => economy
Span 7-8:  enlightened => enlighten-01
Span 26-27:  fight => fight-01
Span 3-4:  followed => follow-01
Span 20-21:  foreign => foreign
Span 17-18:  impose => impose-01
Span 31-32:  invasion => invade-01
Span 11-12:  limitations => limit-01
Span 21-22:  policy => policy
Span 5-6:  policy => policy
Span 22-23:  promising => promise-01
Span 2-3:  subsequently => subsequent
Span 38-39:  territory => territory
Span 24-25:  treaty => treaty
Span 35-36:  union => union
Span 41-42:  western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),aid,aid-01,false), Span(42,43,List(1),economic,economy,false), Span(41,42,List(4, 3, 2),western,(world-region :name (name :op "West")),false), Span(39,40,List(5),and,and,false), Span(38,39,List(6),territory,territory,false), Span(35,36,List(7),union,union,false), Span(31,32,List(8),invasion,invade-01,false), Span(26,27,List(9),fight,fight-01,false), Span(24,25,List(10),treaty,treaty,false), Span(22,23,List(11),promising,promise-01,false), Span(21,22,List(12),policy,policy,false), Span(20,21,List(13),foreign,foreign,false), Span(17,18,List(14),impose,impose-01,false), Span(15,16,List(15),determined,determine-01,false), Span(11,12,List(16),limitations,limit-01,false), Span(9,10,List(17),accepting,accept-01,false), Span(7,8,List(18),enlightened,enlighten-01,false), Span(5,6,List(19),policy,policy,false), Span(3,4,List(20),followed,follow-01,false), Span(2,3,List(21),subsequently,subsequent,false)),Map(2 -> world-region, 5 -> and, 12 -> policy, 15 -> determine-01, 8 -> invade-01, 21 -> subsequent, 18 -> enlighten-01, 7 -> union, 17 -> accept-01, 1 -> economy, 4 -> "West", 11 -> promise-01, 14 -> impose-01, 20 -> follow-01, 6 -> territory, 0 -> aid-01, 9 -> fight-01, 16 -> limit-01, 19 -> policy, 3 -> name, 10 -> treaty, 13 -> foreign),Map(e -> economy, w -> world-region, n -> name, t -> territory, e2 -> enlighten-01, p2 -> policy, a3 -> accept-01, s -> subsequent, d -> determine-01, p -> promise-01, a -> aid-01, f3 -> follow-01, i2 -> impose-01, t2 -> treaty, a2 -> and, i -> invade-01, l -> limit-01, u -> union, f2 -> foreign, f -> fight-01, p3 -> policy))),[Ljava.lang.String;@32a19277,Annotation([Ljava.lang.String;@d96dc99,[Ljava.lang.String;@2b6cc7c7,[Ljava.lang.String;@72aff016),Annotation([Ljava.lang.String;@7cbb6f2c,[Ljava.lang.String;@757ff1ad,[Ledu.cmu.lti.nlp.amr.Dependency;@22d3d11f),Annotation([Ljava.lang.String;@465c16,[Ljava.lang.String;@b47a87e,[Ljava.lang.String;@d86edfb),Annotation([Ljava.lang.String;@157200ad,[Ljava.lang.String;@6f8a68da,[Ledu.cmu.lti.nlp.amr.Entity;@67e9f96b))
AMR:
(a / aid-01, mod, e / economy)
(a / aid-01, mod, w / world-region)
(a2 / and, op, a / aid-01)
(a2 / and, op, d / determine-01)
(a3 / accept-01, ARG1, l / limit-01)
(d / determine-01, ARG1, i2 / impose-01)
(e2 / enlighten-01, ARG1, i / invade-01)
(f / fight-01, ARG1, i / invade-01)
(f / fight-01, instrument, t2 / treaty)
(f3 / follow-01, ARG1, a3 / accept-01)
(f3 / follow-01, ARG2, p3 / policy)
(f3 / follow-01, mod, s / subsequent)
(i / invade-01, ARG1, u / union)
(i / invade-01, location, t / territory)
(i2 / impose-01, ARG1, p2 / policy)
(l / limit-01, ARG1, d / determine-01)
(n / name, op, "West")
(p / promise-01, ARG1, p2 / policy)
(p / promise-01, ARG2, f / fight-01)
(p2 / policy, mod, f2 / foreign)
(w / world-region, name, n / name)

Decoded in 384,560 microseconds
Sentence: john lister the welsh treasurer of the aaabaab promises that the payments will continue annually

NER Entity: (thing :name (name :op "welsh"))
Spans:
Span 13-14:  continue => continue-01
Span 11-12:  payments => payment
Span 8-9:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),continue,continue-01,false), Span(11,12,List(1),payments,payment,false), Span(8,9,List(2),promises,promise-01,false)),Map(2 -> promise-01, 1 -> payment, 0 -> continue-01),Map(p2 -> promise-01, p -> payment, c -> continue-01))),[Ljava.lang.String;@31f61519,Annotation([Ljava.lang.String;@12e335ef,[Ljava.lang.String;@2e9e799,[Ljava.lang.String;@4a63ef4d),Annotation([Ljava.lang.String;@66f3ce62,[Ljava.lang.String;@1072b8bc,[Ledu.cmu.lti.nlp.amr.Dependency;@5bbe4713),Annotation([Ljava.lang.String;@292c5f73,[Ljava.lang.String;@202e8c23,[Ljava.lang.String;@4ff25e56),Annotation([Ljava.lang.String;@310f891b,[Ljava.lang.String;@72f264c6,[Ledu.cmu.lti.nlp.amr.Entity;@7b63e1f))
AMR:
(c / continue-01, ARG0, p / payment)
(p2 / promise-01, ARG1, c / continue-01)

Decoded in 15,218 microseconds
Sentence: it follows that peoples interest in being able to bind themselves is the basis of a power to promise which they possess and of an obligation to keep promises they make

Spans:
Span 7-8:  able => possible
Span 22-23:  and => and
Span 4-5:  interest => interest-01
Span 0-1:  it => it
Span 25-26:  obligation => obligate-01
Span 3-4:  peoples => people
Span 21-22:  possess => possess-01
Span 16-17:  power => power
Span 18-19:  promise => promise-01
Span 28-29:  promises => promise-01
Span 29-30:  they => they
Span 20-21:  they => they

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),they,they,false), Span(28,29,List(1),promises,promise-01,false), Span(25,26,List(2),obligation,obligate-01,false), Span(22,23,List(3),and,and,false), Span(21,22,List(4),possess,possess-01,false), Span(20,21,List(5),they,they,false), Span(18,19,List(6),promise,promise-01,false), Span(16,17,List(7),power,power,false), Span(7,8,List(8),able,possible,false), Span(4,5,List(9),interest,interest-01,false), Span(3,4,List(10),peoples,people,false), Span(0,1,List(11),it,it,false)),Map(2 -> obligate-01, 5 -> they, 8 -> possible, 7 -> power, 1 -> promise-01, 11 -> it, 4 -> possess-01, 6 -> promise-01, 9 -> interest-01, 0 -> they, 10 -> people, 3 -> and),Map(p5 -> possible, t -> they, p2 -> possess-01, p -> promise-01, p4 -> power, a -> and, i2 -> it, t2 -> they, i -> interest-01, p6 -> people, o -> obligate-01, p3 -> promise-01))),[Ljava.lang.String;@4da8692d,Annotation([Ljava.lang.String;@6b91312f,[Ljava.lang.String;@9343bd5,[Ljava.lang.String;@444421ab),Annotation([Ljava.lang.String;@54fe8490,[Ljava.lang.String;@11b13588,[Ledu.cmu.lti.nlp.amr.Dependency;@9317ccb),Annotation([Ljava.lang.String;@ff7f824,[Ljava.lang.String;@60c40bac,[Ljava.lang.String;@66da7ad5),Annotation([Ljava.lang.String;@11b66ab4,[Ljava.lang.String;@5f175881,[Ledu.cmu.lti.nlp.amr.Entity;@75b3adec))
AMR:
(a / and, op, p2 / possess-01)
(i / interest-01, ARG0, p5 / possible)
(i / interest-01, ARG1, p6 / people)
(o / obligate-01, ARG1, t2 / they)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, o / obligate-01)
(p / promise-01, ARG2, i / interest-01)
(p2 / possess-01, ARG0, t2 / they)
(p2 / possess-01, ARG1, i2 / it)
(p3 / promise-01, ARG0, p4 / power)
(p3 / promise-01, ARG1, p2 / possess-01)

Decoded in 194,862 microseconds
Sentence: within a month she promised the prime minister both men would be forced to resign

Spans:
Span 8-9:  both => both
Span 12-13:  forced => force-01
Span 9-10:  men => man
Span 7-8:  minister => (have-org-role-91 :ARG2 minister)
Span 2-3:  month => (temporal-quantity :unit month)
Span 6-7:  prime => prime
Span 4-5:  promised => promise-01
Span 14-15:  resign => resign-01
Span 3-4:  she => she
Span 0-1:  within => within

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),resign,resign-01,false), Span(12,13,List(1),forced,force-01,false), Span(9,10,List(2),men,man,false), Span(8,9,List(3),both,both,false), Span(7,8,List(5, 4),minister,(have-org-role-91 :ARG2 minister),false), Span(6,7,List(6),prime,prime,false), Span(4,5,List(7),promised,promise-01,false), Span(3,4,List(8),she,she,false), Span(2,3,List(10, 9),month,(temporal-quantity :unit month),false), Span(0,1,List(11),within,within,false)),Map(2 -> man, 5 -> minister, 8 -> she, 7 -> promise-01, 1 -> force-01, 11 -> within, 4 -> have-org-role-91, 6 -> prime, 9 -> temporal-quantity, 0 -> resign-01, 10 -> month, 3 -> both),Map(w -> within, m3 -> month, h -> have-org-role-91, t -> temporal-quantity, b -> both, m2 -> minister, p2 -> promise-01, s -> she, m -> man, p -> prime, r -> resign-01, f -> force-01))),[Ljava.lang.String;@675f9d52,Annotation([Ljava.lang.String;@3651a783,[Ljava.lang.String;@2acca551,[Ljava.lang.String;@61797eca),Annotation([Ljava.lang.String;@6f7331c4,[Ljava.lang.String;@73c87405,[Ledu.cmu.lti.nlp.amr.Dependency;@6d392fa5),Annotation([Ljava.lang.String;@456731a8,[Ljava.lang.String;@79ed3030,[Ljava.lang.String;@42f6ddd9),Annotation([Ljava.lang.String;@5d5ef3e7,[Ljava.lang.String;@4def295,[Ledu.cmu.lti.nlp.amr.Entity;@490816b2))
AMR:
(f / force-01, ARG1, m / man)
(f / force-01, ARG2, r / resign-01)
(h / have-org-role-91, ARG2, m2 / minister)
(m / man, mod, b / both)
(m2 / minister, mod, p / prime)
(p2 / promise-01, ARG0, s / she)
(p2 / promise-01, ARG2, h / have-org-role-91)
(p2 / promise-01, time, w / within)
(r / resign-01, ARG1, h / have-org-role-91)
(t / temporal-quantity, unit, m3 / month)
(w / within, op, t / temporal-quantity)

Decoded in 51,926 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@320a2593,Annotation([Ljava.lang.String;@3828ef8f,[Ljava.lang.String;@787b217,[Ljava.lang.String;@5dbd07dd),Annotation([Ljava.lang.String;@254f6e3f,[Ljava.lang.String;@1cefd3c,[Ledu.cmu.lti.nlp.amr.Dependency;@3c536f11),Annotation([Ljava.lang.String;@9a0e408,[Ljava.lang.String;@21dace28,[Ljava.lang.String;@2414b575),Annotation([Ljava.lang.String;@4b9526d4,[Ljava.lang.String;@2d284f10,[Ledu.cmu.lti.nlp.amr.Entity;@315eba99))
AMR:


Decoded in 1,947 microseconds
Sentence: the doctors seem likely to be promised more nhs cash and perhaps trial runs for some of mr clarkes wilder schemes

Spans:
Span 10-11:  and => and
Span 9-10:  cash => cash
Span 1-2:  doctors => doctor
Span 3-4:  likely => likely
Span 11-12:  perhaps => perhaps
Span 6-7:  promised => promise-01
Span 20-21:  schemes => scheme-01
Span 2-3:  seem => seem-01
Span 15-16:  some => some
Span 12-13:  trial => trial

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),schemes,scheme-01,false), Span(15,16,List(1),some,some,false), Span(12,13,List(2),trial,trial,false), Span(11,12,List(3),perhaps,perhaps,false), Span(10,11,List(4),and,and,false), Span(9,10,List(5),cash,cash,false), Span(6,7,List(6),promised,promise-01,false), Span(3,4,List(7),likely,likely,false), Span(2,3,List(8),seem,seem-01,false), Span(1,2,List(9),doctors,doctor,false)),Map(2 -> trial, 5 -> cash, 8 -> seem-01, 7 -> likely, 1 -> some, 4 -> and, 6 -> promise-01, 9 -> doctor, 0 -> scheme-01, 3 -> perhaps),Map(t -> trial, s2 -> some, p2 -> promise-01, s -> scheme-01, d -> doctor, p -> perhaps, a -> and, s3 -> seem-01, l -> likely, c -> cash))),[Ljava.lang.String;@422cac21,Annotation([Ljava.lang.String;@2d8cc78,[Ljava.lang.String;@6757dbbd,[Ljava.lang.String;@391b8a4c),Annotation([Ljava.lang.String;@3f14a0de,[Ljava.lang.String;@634d6f2c,[Ledu.cmu.lti.nlp.amr.Dependency;@70bde4a2),Annotation([Ljava.lang.String;@42ed8181,[Ljava.lang.String;@76d15e7a,[Ljava.lang.String;@2b91d887),Annotation([Ljava.lang.String;@741e9d69,[Ljava.lang.String;@5f0940e,[Ledu.cmu.lti.nlp.amr.Entity;@7588262d))
AMR:
(a / and, op, c / cash)
(a / and, op, p / perhaps)
(a / and, op, p2 / promise-01)
(l / likely, domain, p2 / promise-01)
(l / likely, domain, s3 / seem-01)
(p2 / promise-01, ARG1, t / trial)
(s / scheme-01, ARG1, p2 / promise-01)
(s / scheme-01, quant, s2 / some)
(s3 / seem-01, ARG1, d / doctor)

Decoded in 83,250 microseconds
Sentence: last night as union leaders awaited support promised by european dockers the industrial action at many british ports weakened significantly

NER Entity: (thing :name (name :op "british"))
Spans:
Span 13-14:  action => action
Span 9-10:  european => (continent :name (name :op "Europe"))
Span 12-13:  industrial => industry
Span 0-1:  last => last
Span 4-5:  leaders => (person :ARG0-of lead-02)
Span 15-16:  many => many
Span 1-2:  night => night
Span 17-18:  ports => port
Span 7-8:  promised => promise-01
Span 19-20:  significantly => significant
Span 6-7:  support => support-01
Span 3-4:  union => union
Span 18-19:  weakened => weaken-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),significantly,significant,false), Span(18,19,List(1),weakened,weaken-01,false), Span(17,18,List(2),ports,port,false), Span(15,16,List(3),many,many,false), Span(13,14,List(4),action,action,false), Span(12,13,List(5),industrial,industry,false), Span(9,10,List(8, 7, 6),european,(continent :name (name :op "Europe")),false), Span(7,8,List(9),promised,promise-01,false), Span(6,7,List(10),support,support-01,false), Span(4,5,List(12, 11),leaders,(person :ARG0-of lead-02),false), Span(3,4,List(13),union,union,false), Span(1,2,List(14),night,night,false), Span(0,1,List(15),last,last,false)),Map(2 -> port, 5 -> industry, 12 -> lead-02, 15 -> last, 8 -> "Europe", 7 -> name, 1 -> weaken-01, 4 -> action, 11 -> person, 14 -> night, 6 -> continent, 0 -> significant, 9 -> promise-01, 3 -> many, 10 -> support-01, 13 -> union),Map(w -> weaken-01, n -> name, s2 -> support-01, p2 -> promise-01, s -> significant, m -> many, p -> port, a -> action, l2 -> last, i -> industry, c -> continent, l -> lead-02, u -> union, p3 -> person, n2 -> night))),[Ljava.lang.String;@3d8290a3,Annotation([Ljava.lang.String;@46e5dce1,[Ljava.lang.String;@1d085c24,[Ljava.lang.String;@fd94e60),Annotation([Ljava.lang.String;@3a888c1,[Ljava.lang.String;@2daa38c7,[Ledu.cmu.lti.nlp.amr.Dependency;@275a83d),Annotation([Ljava.lang.String;@7a783e0d,[Ljava.lang.String;@6c32064b,[Ljava.lang.String;@483b5d6b),Annotation([Ljava.lang.String;@317240d9,[Ljava.lang.String;@43ff7feb,[Ledu.cmu.lti.nlp.amr.Entity;@3b27402d))
AMR:
(a / action, mod, i / industry)
(c / continent, name, n / name)
(l / lead-02, ARG0, p3 / person)
(l / lead-02, ARG1, u / union)
(n / name, op, "Europe")
(n2 / night, mod, l2 / last)
(p / port, quant, m / many)
(p2 / promise-01, ARG0, n2 / night)
(p2 / promise-01, ARG1, s2 / support-01)
(p2 / promise-01, ARG2, a / action)
(s2 / support-01, ARG0, c / continent)
(s2 / support-01, ARG1, p3 / person)
(w / weaken-01, ARG0, a / action)
(w / weaken-01, ARG1, p / port)
(w / weaken-01, degree, s / significant)

Decoded in 264,513 microseconds
Sentence: fortunately schur promises to keep his promise

Spans:
Span 0-1:  fortunately => fortunate-41
Span 6-7:  promise => promise-01
Span 2-3:  promises => promise-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),promise,promise-01,false), Span(2,3,List(1),promises,promise-01,false), Span(0,1,List(2),fortunately,fortunate-41,false)),Map(2 -> fortunate-41, 1 -> promise-01, 0 -> promise-01),Map(p2 -> promise-01, p -> promise-01, f -> fortunate-41))),[Ljava.lang.String;@11e3853f,Annotation([Ljava.lang.String;@7040f445,[Ljava.lang.String;@38651796,[Ljava.lang.String;@74ef95c6),Annotation([Ljava.lang.String;@1d523624,[Ljava.lang.String;@608486,[Ledu.cmu.lti.nlp.amr.Dependency;@409c799b),Annotation([Ljava.lang.String;@60f3d040,[Ljava.lang.String;@26ed4b7a,[Ljava.lang.String;@24f64a8d),Annotation([Ljava.lang.String;@259881f0,[Ljava.lang.String;@3f7ac6d8,[Ledu.cmu.lti.nlp.amr.Entity;@1594af77))
AMR:
(p / promise-01, ARG1, f / fortunate-41)
(p2 / promise-01, ARG1, p / promise-01)

Decoded in 26,433 microseconds
Sentence: mr collor promised to reduce inflation to just 3 per cent a month within a year by using shock tactics similar to those of president menem of argentina

NER Entity: (country :name (name :op "argentina"))
NER Entity: (country :name (name :op "argentina"))
Spans:
Span 8-9:  3 => 3
Span 27-28:  argentina => (country :name (name :op "Argentina"))
Span 10-11:  cent => (monetary-quantity :unit cent)
Span 5-6:  inflation => inflation
Span 7-8:  just => just
Span 12-13:  month => (temporal-quantity :unit month)
Span 24-25:  president => (have-org-role-91 :ARG2 president)
Span 2-3:  promised => promise-01
Span 4-5:  reduce => reduce-01
Span 18-19:  shock => shock-01
Span 19-20:  tactics => tactic
Span 17-18:  using => use-01
Span 13-14:  within => within
Span 15-16:  year => year

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(2, 1, 0),argentina,(country :name (name :op "Argentina")),false), Span(24,25,List(4, 3),president,(have-org-role-91 :ARG2 president),false), Span(19,20,List(5),tactics,tactic,false), Span(18,19,List(6),shock,shock-01,false), Span(17,18,List(7),using,use-01,false), Span(15,16,List(8),year,year,false), Span(13,14,List(9),within,within,false), Span(12,13,List(11, 10),month,(temporal-quantity :unit month),false), Span(10,11,List(13, 12),cent,(monetary-quantity :unit cent),false), Span(8,9,List(14),3,3,false), Span(7,8,List(15),just,just,false), Span(5,6,List(16),inflation,inflation,false), Span(4,5,List(17),reduce,reduce-01,false), Span(2,3,List(18),promised,promise-01,false)),Map(2 -> "Argentina", 5 -> tactic, 12 -> monetary-quantity, 15 -> just, 8 -> year, 18 -> promise-01, 7 -> use-01, 17 -> reduce-01, 1 -> name, 4 -> president, 11 -> month, 14 -> 3, 6 -> shock-01, 0 -> country, 9 -> within, 16 -> inflation, 3 -> have-org-role-91, 10 -> temporal-quantity, 13 -> cent),Map(n -> name, w -> within, h -> have-org-role-91, t -> tactic, m2 -> monetary-quantity, p2 -> promise-01, j -> just, s -> shock-01, m -> month, p -> president, y -> year, t2 -> temporal-quantity, r -> reduce-01, i -> inflation, c -> country, u -> use-01, 3 -> 3, c2 -> cent))),[Ljava.lang.String;@548bb8b2,Annotation([Ljava.lang.String;@210ad97b,[Ljava.lang.String;@4f4c2b2f,[Ljava.lang.String;@11a74355),Annotation([Ljava.lang.String;@7c358a80,[Ljava.lang.String;@1f181935,[Ledu.cmu.lti.nlp.amr.Dependency;@671ef685),Annotation([Ljava.lang.String;@21cacaa7,[Ljava.lang.String;@8beab46,[Ljava.lang.String;@1dde8526),Annotation([Ljava.lang.String;@7bf7911b,[Ljava.lang.String;@3a57c332,[Ledu.cmu.lti.nlp.amr.Entity;@57d0258a))
AMR:
(c / country, name, n / name)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p / president)
(m2 / monetary-quantity, unit, c2 / cent)
(n / name, op, "Argentina")
(p2 / promise-01, ARG0, j / just)
(p2 / promise-01, ARG1, r / reduce-01)
(p2 / promise-01, manner, u / use-01)
(r / reduce-01, ARG0, m2 / monetary-quantity)
(r / reduce-01, ARG1, i / inflation)
(r / reduce-01, location, c / country)
(s / shock-01, ARG0, t / tactic)
(s / shock-01, ARG1, 3 / 3)
(t2 / temporal-quantity, location, w / within)
(t2 / temporal-quantity, time, s / shock-01)
(t2 / temporal-quantity, unit, m / month)
(u / use-01, ARG0, y / year)
(u / use-01, ARG1, t / tactic)

Decoded in 334,831 microseconds
Sentence: mr iliescu and his team will serve until free elections promised for next spring are held

Spans:
Span 2-3:  and => and
Span 9-10:  elections => elect-01
Span 8-9:  free => free-41
Span 12-13:  next => next
Span 10-11:  promised => promise-01
Span 6-7:  serve => serve-01
Span 13-14:  spring => spring
Span 4-5:  team => team
Span 7-8:  until => until

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),spring,spring,false), Span(12,13,List(1),next,next,false), Span(10,11,List(2),promised,promise-01,false), Span(9,10,List(3),elections,elect-01,false), Span(8,9,List(4),free,free-41,false), Span(7,8,List(5),until,until,false), Span(6,7,List(6),serve,serve-01,false), Span(4,5,List(7),team,team,false), Span(2,3,List(8),and,and,false)),Map(2 -> promise-01, 5 -> until, 8 -> and, 7 -> team, 1 -> next, 4 -> free-41, 6 -> serve-01, 0 -> spring, 3 -> elect-01),Map(e -> elect-01, n -> next, t -> team, s2 -> serve-01, s -> spring, p -> promise-01, a -> and, u -> until, f -> free-41))),[Ljava.lang.String;@2250b410,Annotation([Ljava.lang.String;@605d9809,[Ljava.lang.String;@20a8a84c,[Ljava.lang.String;@20c12654),Annotation([Ljava.lang.String;@68bb6598,[Ljava.lang.String;@670b13df,[Ledu.cmu.lti.nlp.amr.Dependency;@845ca53),Annotation([Ljava.lang.String;@1de61363,[Ljava.lang.String;@6c02d7ea,[Ljava.lang.String;@2ead7b0c),Annotation([Ljava.lang.String;@7f6968c4,[Ljava.lang.String;@615d5d35,[Ledu.cmu.lti.nlp.amr.Entity;@38927483))
AMR:
(a / and, op, t / team)
(f / free-41, ARG1, e / elect-01)
(p / promise-01, ARG0, s / spring)
(p / promise-01, ARG1, e / elect-01)
(s / spring, mod, n / next)
(s2 / serve-01, ARG0, a / and)
(s2 / serve-01, time, u / until)
(u / until, op, p / promise-01)

Decoded in 69,519 microseconds
Sentence: and peking is also very keen for the deal to go ahead because the rocket launchers promise to be a source of hard currency

Spans:
Span 11-12:  ahead => ahead
Span 3-4:  also => also
Span 0-1:  and => and
Span 12-13:  because => cause-01
Span 23-24:  currency => currency
Span 8-9:  deal => deal-01
Span 22-23:  hard => hard
Span 5-6:  keen => keen-41
Span 15-16:  launchers => launch-01
Span 16-17:  promise => promise-01
Span 14-15:  rocket => rocket
Span 20-21:  source => source
Span 4-5:  very => very

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),currency,currency,false), Span(22,23,List(1),hard,hard,false), Span(20,21,List(2),source,source,false), Span(16,17,List(3),promise,promise-01,false), Span(15,16,List(4),launchers,launch-01,false), Span(14,15,List(5),rocket,rocket,false), Span(12,13,List(6),because,cause-01,false), Span(11,12,List(7),ahead,ahead,false), Span(8,9,List(8),deal,deal-01,false), Span(5,6,List(9),keen,keen-41,false), Span(4,5,List(10),very,very,false), Span(3,4,List(11),also,also,false), Span(0,1,List(12),and,and,false)),Map(2 -> source, 5 -> rocket, 12 -> and, 8 -> deal-01, 7 -> ahead, 1 -> hard, 4 -> launch-01, 11 -> also, 6 -> cause-01, 0 -> currency, 9 -> keen-41, 3 -> promise-01, 10 -> very),Map(h -> hard, k -> keen-41, a3 -> and, s -> source, v -> very, d -> deal-01, p -> promise-01, a -> ahead, r -> rocket, a2 -> also, c -> currency, l -> launch-01, c2 -> cause-01))),[Ljava.lang.String;@171f6179,Annotation([Ljava.lang.String;@d385acb,[Ljava.lang.String;@6ed0cc34,[Ljava.lang.String;@4e0ea2c2),Annotation([Ljava.lang.String;@22df9697,[Ljava.lang.String;@517a564,[Ledu.cmu.lti.nlp.amr.Dependency;@536b4ad8),Annotation([Ljava.lang.String;@28fed5b1,[Ljava.lang.String;@727f6c7d,[Ljava.lang.String;@babbd45),Annotation([Ljava.lang.String;@381702ff,[Ljava.lang.String;@6ec5d01d,[Ledu.cmu.lti.nlp.amr.Entity;@7ce258bb))
AMR:
(c / currency, mod, h / hard)
(c / currency, poss, r / rocket)
(c2 / cause-01, ARG0, p / promise-01)
(c2 / cause-01, ARG1, k / keen-41)
(c2 / cause-01, mod, a / ahead)
(k / keen-41, ARG0, a3 / and)
(k / keen-41, ARG1, d / deal-01)
(k / keen-41, degree, v / very)
(k / keen-41, mod, a2 / also)
(l / launch-01, ARG1, r / rocket)
(p / promise-01, ARG0, l / launch-01)
(p / promise-01, ARG1, s / source)

Decoded in 147,191 microseconds
Sentence:   clearly this conversation promised more than it was permitted to deliver

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   clearly this conversation promised more than it was permitted to deliver
myTokenized = clearly this conversation promised more than it was permitted to deliver
i = 0
prefix = List(clearly)
regexr = \Qc\E ?\Ql\E ?\Qe\E ?\Qa\E ?\Qr\E ?\Ql\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he advised me to stick to the facts as i knew them and not to promise more than i could deliver

Spans:
Span 1-2:  advised => advise-01
Span 12-13:  and => and
Span 19-20:  could => possible
Span 20-21:  deliver => deliver-01
Span 7-8:  facts => fact
Span 0-1:  he => he
Span 18-19:  i => i
Span 9-10:  i => i
Span 10-11:  knew => know-01
Span 15-16:  promise => promise-01
Span 4-5:  stick => stick-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),deliver,deliver-01,false), Span(19,20,List(1),could,possible,false), Span(18,19,List(2),i,i,false), Span(15,16,List(3),promise,promise-01,false), Span(12,13,List(4),and,and,false), Span(10,11,List(5),knew,know-01,false), Span(9,10,List(6),i,i,false), Span(7,8,List(7),facts,fact,false), Span(4,5,List(8),stick,stick-01,false), Span(1,2,List(9),advised,advise-01,false), Span(0,1,List(10),he,he,false)),Map(2 -> i, 5 -> know-01, 8 -> stick-01, 7 -> fact, 1 -> possible, 4 -> and, 6 -> i, 9 -> advise-01, 0 -> deliver-01, 10 -> he, 3 -> promise-01),Map(h -> he, k -> know-01, p2 -> promise-01, s -> stick-01, d -> deliver-01, p -> possible, a -> and, i2 -> i, a2 -> advise-01, i -> i, f -> fact))),[Ljava.lang.String;@45ef3510,Annotation([Ljava.lang.String;@5b84d14e,[Ljava.lang.String;@6cc986d2,[Ljava.lang.String;@22b27cca),Annotation([Ljava.lang.String;@741ec391,[Ljava.lang.String;@fb9a026,[Ledu.cmu.lti.nlp.amr.Dependency;@63c126da),Annotation([Ljava.lang.String;@1ddde560,[Ljava.lang.String;@52fe10f1,[Ljava.lang.String;@260a68c8),Annotation([Ljava.lang.String;@756535fa,[Ljava.lang.String;@47baec4c,[Ledu.cmu.lti.nlp.amr.Entity;@40ef965e))
AMR:
(a / and, op, s / stick-01)
(a2 / advise-01, ARG0, h / he)
(d / deliver-01, ARG1, i / i)
(d / deliver-01, mod, p / possible)
(k / know-01, ARG0, i2 / i)
(k / know-01, ARG1, a / and)
(p2 / promise-01, ARG0, h / he)
(s / stick-01, ARG0, h / he)
(s / stick-01, ARG1, i / i)
(s / stick-01, ARG2, f / fact)

Decoded in 80,919 microseconds
Sentence: apparently the great heartthrob was in moscow and had promised to join her and yevtushenkos party which now included the great director of crime and punishment only recently returned to russia after being in exile

NER Entity: (country :name (name :op "moscow"))
NER Entity: (country :name (name :op "russia"))
Spans:
Span 31-32:  after => after
Span 24-25:  and => and
Span 13-14:  and => and
Span 7-8:  and => and
Span 0-1:  apparently => apparent
Span 23-24:  crime => crime
Span 21-22:  director => (have-org-role-91 :ARG2 director)
Span 34-35:  exile => exile-01
Span 20-21:  great => great
Span 2-3:  great => great
Span 18-19:  included => include-01
Span 11-12:  join => join-01
Span 17-18:  now => now
Span 26-27:  only => only
Span 15-16:  party => party
Span 9-10:  promised => promise-01
Span 25-26:  punishment => punish-01
Span 27-28:  recently => recent
Span 28-29:  returned => return-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),exile,exile-01,false), Span(31,32,List(1),after,after,false), Span(28,29,List(2),returned,return-01,false), Span(27,28,List(3),recently,recent,false), Span(26,27,List(4),only,only,false), Span(25,26,List(5),punishment,punish-01,false), Span(24,25,List(6),and,and,false), Span(23,24,List(7),crime,crime,false), Span(21,22,List(9, 8),director,(have-org-role-91 :ARG2 director),false), Span(20,21,List(10),great,great,false), Span(18,19,List(11),included,include-01,false), Span(17,18,List(12),now,now,false), Span(15,16,List(13),party,party,false), Span(13,14,List(14),and,and,false), Span(11,12,List(15),join,join-01,false), Span(9,10,List(16),promised,promise-01,false), Span(7,8,List(17),and,and,false), Span(2,3,List(18),great,great,false), Span(0,1,List(19),apparently,apparent,false)),Map(2 -> return-01, 5 -> punish-01, 12 -> now, 15 -> join-01, 8 -> have-org-role-91, 18 -> great, 7 -> crime, 17 -> and, 1 -> after, 4 -> only, 11 -> include-01, 14 -> and, 6 -> and, 0 -> exile-01, 9 -> director, 16 -> promise-01, 19 -> apparent, 3 -> recent, 10 -> great, 13 -> party),Map(e -> exile-01, n -> now, h -> have-org-role-91, p2 -> party, j -> join-01, a3 -> and, d -> director, g2 -> great, r2 -> recent, p -> punish-01, g -> great, a -> after, a5 -> apparent, r -> return-01, a2 -> and, i -> include-01, c -> crime, o -> only, p3 -> promise-01, a4 -> and))),[Ljava.lang.String;@4bc7bc0,Annotation([Ljava.lang.String;@72607cad,[Ljava.lang.String;@1c997c85,[Ljava.lang.String;@20be0e6e),Annotation([Ljava.lang.String;@1da5688d,[Ljava.lang.String;@5673102f,[Ledu.cmu.lti.nlp.amr.Dependency;@1c2baa00),Annotation([Ljava.lang.String;@76a5f472,[Ljava.lang.String;@953a539,[Ljava.lang.String;@528445f7),Annotation([Ljava.lang.String;@6a0d8573,[Ljava.lang.String;@1db4776a,[Ledu.cmu.lti.nlp.amr.Entity;@330bdf62))
AMR:
(a2 / and, op, c / crime)
(a2 / and, op, r / return-01)
(a4 / and, op, p3 / promise-01)
(d / director, mod, g / great)
(h / have-org-role-91, ARG0, a5 / apparent)
(h / have-org-role-91, ARG1, c / crime)
(h / have-org-role-91, ARG2, d / director)
(i / include-01, ARG0, p2 / party)
(i / include-01, ARG1, a2 / and)
(i / include-01, time, n / now)
(j / join-01, ARG0, a3 / and)
(j / join-01, ARG1, p2 / party)
(p / punish-01, ARG1, g2 / great)
(p3 / promise-01, ARG2, j / join-01)
(r / return-01, ARG1, p / punish-01)
(r / return-01, accompanier, e / exile-01)
(r / return-01, time, a / after)
(r / return-01, time, r2 / recent)
(r2 / recent, mod, o / only)

Decoded in 361,779 microseconds
Sentence: strike action to remove the maximum wage in 1960 was promised

Spans:
Span 8-9:  1960 => (date-entity :year 1960)
Span 1-2:  action => action
Span 5-6:  maximum => maximum
Span 10-11:  promised => promise-01
Span 3-4:  remove => remove-01
Span 0-1:  strike => strike-01
Span 6-7:  wage => wage-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),promised,promise-01,false), Span(8,9,List(2, 1),1960,(date-entity :year 1960),false), Span(6,7,List(3),wage,wage-01,false), Span(5,6,List(4),maximum,maximum,false), Span(3,4,List(5),remove,remove-01,false), Span(1,2,List(6),action,action,false), Span(0,1,List(7),strike,strike-01,false)),Map(2 -> 1960, 5 -> remove-01, 7 -> strike-01, 1 -> date-entity, 4 -> maximum, 6 -> action, 0 -> promise-01, 3 -> wage-01),Map(w -> wage-01, s -> strike-01, m -> maximum, d -> date-entity, 1 -> 1960, p -> promise-01, a -> action, r -> remove-01))),[Ljava.lang.String;@5076b51c,Annotation([Ljava.lang.String;@216c6a89,[Ljava.lang.String;@54c65983,[Ljava.lang.String;@2a1ed2f0),Annotation([Ljava.lang.String;@4daaa02a,[Ljava.lang.String;@7cf94d3b,[Ledu.cmu.lti.nlp.amr.Dependency;@533d9c96),Annotation([Ljava.lang.String;@71f3668b,[Ljava.lang.String;@22d16a1f,[Ljava.lang.String;@628e2b14),Annotation([Ljava.lang.String;@63ae6098,[Ljava.lang.String;@4d47ce48,[Ledu.cmu.lti.nlp.amr.Entity;@2538009b))
AMR:
(d / date-entity, year, 1 / 1960)
(p / promise-01, ARG1, w / wage-01)
(r / remove-01, ARG0, a / action)
(r / remove-01, ARG1, p / promise-01)
(s / strike-01, ARG1, r / remove-01)
(w / wage-01, degree, m / maximum)
(w / wage-01, time, d / date-entity)

Decoded in 25,564 microseconds
Sentence: its creator promises that unlike the real war that has virtually destroyed his country it involves no blood and no politics

Spans:
Span 18-19:  and => and
Span 17-18:  blood => blood
Span 13-14:  country => country
Span 11-12:  destroyed => destroy-01
Span 15-16:  involves => involve-01
Span 14-15:  it => it
Span 19-20:  no => -
Span 16-17:  no => -
Span 20-21:  politics => politics
Span 2-3:  promises => promise-01
Span 6-7:  real => real
Span 10-11:  virtually => virtual
Span 7-8:  war => war

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),politics,politics,false), Span(19,20,List(1),no,-,false), Span(18,19,List(2),and,and,false), Span(17,18,List(3),blood,blood,false), Span(16,17,List(4),no,-,false), Span(15,16,List(5),involves,involve-01,false), Span(14,15,List(6),it,it,false), Span(13,14,List(7),country,country,false), Span(11,12,List(8),destroyed,destroy-01,false), Span(10,11,List(9),virtually,virtual,false), Span(7,8,List(10),war,war,false), Span(6,7,List(11),real,real,false), Span(2,3,List(12),promises,promise-01,false)),Map(2 -> and, 5 -> involve-01, 12 -> promise-01, 8 -> destroy-01, 7 -> country, 1 -> -, 4 -> -, 11 -> real, 6 -> it, 0 -> politics, 9 -> virtual, 3 -> blood, 10 -> war),Map(w -> war, b -> blood, p2 -> promise-01, v -> virtual, d -> destroy-01, p -> politics, a -> and, i2 -> it, i -> involve-01, r -> real, c -> country, - -> -, -2 -> -))),[Ljava.lang.String;@4c5e50d4,Annotation([Ljava.lang.String;@440cb577,[Ljava.lang.String;@1e5dba88,[Ljava.lang.String;@1b81464b),Annotation([Ljava.lang.String;@442df408,[Ljava.lang.String;@24f05c30,[Ledu.cmu.lti.nlp.amr.Dependency;@20346642),Annotation([Ljava.lang.String;@50258792,[Ljava.lang.String;@4fe7ab59,[Ljava.lang.String;@72a2890a),Annotation([Ljava.lang.String;@cd32a52,[Ljava.lang.String;@7b7f7411,[Ledu.cmu.lti.nlp.amr.Entity;@6c9d476e))
AMR:
(a / and, op, b / blood)
(a / and, op, p / politics)
(d / destroy-01, ARG0, w / war)
(d / destroy-01, ARG1, c / country)
(d / destroy-01, manner, v / virtual)
(i / involve-01, ARG0, i2 / it)
(i / involve-01, ARG1, a / and)
(i / involve-01, ARG3, c / country)
(i / involve-01, polarity, -2 / -)
(p / politics, polarity, - / -)
(p2 / promise-01, ARG1, i / involve-01)
(w / war, mod, r / real)

Decoded in 321,852 microseconds
Sentence: the board of admiralty hastily promised a revision and the more extreme cuts were in fact reduced

Spans:
Span 8-9:  and => and
Span 12-13:  cuts => cut-02
Span 11-12:  extreme => extreme
Span 15-16:  fact => fact
Span 4-5:  hastily => hasty
Span 5-6:  promised => promise-01
Span 16-17:  reduced => reduce-01
Span 7-8:  revision => revise-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),reduced,reduce-01,false), Span(15,16,List(1),fact,fact,false), Span(12,13,List(2),cuts,cut-02,false), Span(11,12,List(3),extreme,extreme,false), Span(8,9,List(4),and,and,false), Span(7,8,List(5),revision,revise-01,false), Span(5,6,List(6),promised,promise-01,false), Span(4,5,List(7),hastily,hasty,false)),Map(2 -> cut-02, 5 -> revise-01, 7 -> hasty, 1 -> fact, 4 -> and, 6 -> promise-01, 0 -> reduce-01, 3 -> extreme),Map(e -> extreme, h -> hasty, p -> promise-01, r2 -> revise-01, a -> and, r -> reduce-01, c -> cut-02, f -> fact))),[Ljava.lang.String;@49bcbe77,Annotation([Ljava.lang.String;@67c9c73,[Ljava.lang.String;@5f034558,[Ljava.lang.String;@4fbdc523),Annotation([Ljava.lang.String;@33d9a5bb,[Ljava.lang.String;@160fb295,[Ledu.cmu.lti.nlp.amr.Dependency;@60955f83),Annotation([Ljava.lang.String;@6eb1c2fe,[Ljava.lang.String;@5878ea78,[Ljava.lang.String;@6a6999a8),Annotation([Ljava.lang.String;@3ae71b2c,[Ljava.lang.String;@1aa903ea,[Ledu.cmu.lti.nlp.amr.Entity;@4e400552))
AMR:
(a / and, op, c / cut-02)
(a / and, op, p / promise-01)
(c / cut-02, degree, e / extreme)
(p / promise-01, ARG1, r2 / revise-01)
(p / promise-01, manner, h / hasty)
(r / reduce-01, ARG0, f / fact)
(r / reduce-01, ARG1, c / cut-02)

Decoded in 74,126 microseconds
Sentence: i promise you they will know him all right after italys match at wembley in a fortnights time

NER Entity: (country :name (name :op "wembley"))
Spans:
Span 9-10:  after => after
Span 7-8:  all => all
Span 0-1:  i => i
Span 5-6:  know => know-01
Span 11-12:  match => match-01
Span 1-2:  promise => promise-01
Span 3-4:  they => they
Span 17-18:  time => time
Span 2-3:  you => you

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),time,time,false), Span(11,12,List(1),match,match-01,false), Span(9,10,List(2),after,after,false), Span(7,8,List(3),all,all,false), Span(5,6,List(4),know,know-01,false), Span(3,4,List(5),they,they,false), Span(2,3,List(6),you,you,false), Span(1,2,List(7),promise,promise-01,false), Span(0,1,List(8),i,i,false)),Map(2 -> after, 5 -> they, 8 -> i, 7 -> promise-01, 1 -> match-01, 4 -> know-01, 6 -> you, 0 -> time, 3 -> all),Map(k -> know-01, t -> time, m -> match-01, p -> promise-01, y -> you, a -> after, t2 -> they, i -> i, a2 -> all))),[Ljava.lang.String;@4d1d72a0,Annotation([Ljava.lang.String;@48508ded,[Ljava.lang.String;@2095e7b2,[Ljava.lang.String;@519e67d4),Annotation([Ljava.lang.String;@76b2b928,[Ljava.lang.String;@4f9a2df9,[Ledu.cmu.lti.nlp.amr.Dependency;@13405f43),Annotation([Ljava.lang.String;@672e3194,[Ljava.lang.String;@9b92078,[Ljava.lang.String;@5902ab44),Annotation([Ljava.lang.String;@3e3a2b03,[Ljava.lang.String;@5cddf1df,[Ledu.cmu.lti.nlp.amr.Entity;@6f32971a))
AMR:
(a / after, op, m / match-01)
(k / know-01, ARG0, t2 / they)
(k / know-01, ARG1, t / time)
(m / match-01, ARG1, k / know-01)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, t2 / they)
(p / promise-01, ARG2, y / you)
(p / promise-01, manner, a2 / all)

Decoded in 271,846 microseconds
Sentence:   azumah nelson who defends his wbc superfeatherweight title against jim mcdonnell of london at the albert hall on 5 november came face to face with the challenger in london yesterday and promised to walk straight through him in the ring

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   azumah nelson who defends his wbc superfeatherweight title against jim mcdonnell of london at the albert hall on 5 november came face to face with the challenger in london yesterday and promised to walk straight through him in the ring
myTokenized = azumah nelson who defends his wbc superfeatherweight title against jim mcdonnell of london at the albert hall on 5 november came face to face with the challenger in london yesterday and promised to walk straight through him in the ring
i = 0
prefix = List(azumah)
regexr = \Qa\E ?\Qz\E ?\Qu\E ?\Qm\E ?\Qa\E ?\Qh\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in one village beidian north of peking farmers say they can sell only a third of their crop at the price promised by the planners

Spans:
Span 10-11:  can => possible
Span 17-18:  crop => crop
Span 7-8:  farmers => (person :ARG0-of farm-01)
Span 4-5:  north => north
Span 12-13:  only => only
Span 24-25:  planners => (person :ARG0-of plan-01)
Span 20-21:  price => (thing :ARG2-of price-01)
Span 21-22:  promised => promise-01
Span 8-9:  say => say-01
Span 11-12:  sell => sell-01
Span 9-10:  they => they
Span 2-3:  village => village

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),planners,(person :ARG0-of plan-01),false), Span(21,22,List(2),promised,promise-01,false), Span(20,21,List(4, 3),price,(thing :ARG2-of price-01),false), Span(17,18,List(5),crop,crop,false), Span(12,13,List(6),only,only,false), Span(11,12,List(7),sell,sell-01,false), Span(10,11,List(8),can,possible,false), Span(9,10,List(9),they,they,false), Span(8,9,List(10),say,say-01,false), Span(7,8,List(12, 11),farmers,(person :ARG0-of farm-01),false), Span(4,5,List(13),north,north,false), Span(2,3,List(14),village,village,false)),Map(2 -> promise-01, 5 -> crop, 12 -> farm-01, 8 -> possible, 7 -> sell-01, 1 -> plan-01, 4 -> price-01, 11 -> person, 14 -> village, 6 -> only, 0 -> person, 9 -> they, 3 -> thing, 10 -> say-01, 13 -> north),Map(n -> north, p5 -> possible, s2 -> say-01, t -> thing, p2 -> plan-01, s -> sell-01, v -> village, p -> person, p4 -> price-01, t2 -> they, c -> crop, p6 -> person, f -> farm-01, o -> only, p3 -> promise-01))),[Ljava.lang.String;@57030eda,Annotation([Ljava.lang.String;@9c436d7,[Ljava.lang.String;@30ec6243,[Ljava.lang.String;@6f2735cc),Annotation([Ljava.lang.String;@773d1d16,[Ljava.lang.String;@4d40cc82,[Ledu.cmu.lti.nlp.amr.Dependency;@5932926d),Annotation([Ljava.lang.String;@72b5fdb,[Ljava.lang.String;@30a2268a,[Ljava.lang.String;@659046f7),Annotation([Ljava.lang.String;@63233638,[Ljava.lang.String;@1cbcc961,[Ledu.cmu.lti.nlp.amr.Entity;@2e490e04))
AMR:
(f / farm-01, ARG0, p6 / person)
(p2 / plan-01, ARG0, p / person)
(p2 / plan-01, ARG1, v / village)
(p3 / promise-01, ARG0, p / person)
(p3 / promise-01, ARG1, t / thing)
(p3 / promise-01, manner, c / crop)
(p4 / price-01, ARG1, s / sell-01)
(p4 / price-01, ARG2, t / thing)
(p5 / possible, domain, s / sell-01)
(s / sell-01, ARG0, t2 / they)
(s / sell-01, ARG1, n / north)
(s / sell-01, ARG3, o / only)
(s2 / say-01, ARG0, p6 / person)
(s2 / say-01, ARG1, p5 / possible)

Decoded in 600,291 microseconds
Sentence: it is doubly disquieting that other scholars and of course students will not unnaturally assume that he was correct and look no farther and that accordingly this theory will in due course become one of the fairytales of the canadian constitution to which i once rashly and publicly promised to devote a book in my declining years

NER Entity: (thing :name (name :op "canadian"))
Spans:
Span 25-26:  accordingly => accordingly
Span 46-47:  and => and
Span 23-24:  and => and
Span 19-20:  and => and
Span 7-8:  and => and
Span 14-15:  assume => assume-02
Span 32-33:  become => become-01
Span 52-53:  book => book
Span 40-41:  constitution => constitution
Span 18-19:  correct => correct
Span 50-51:  devote => devote-01
Span 22-23:  farther => far
Span 16-17:  he => he
Span 43-44:  i => i
Span 0-1:  it => it
Span 21-22:  no => -
Span 44-45:  once => once
Span 5-6:  other => other
Span 48-49:  promised => promise-01
Span 47-48:  publicly => public
Span 6-7:  scholars => scholar
Span 10-11:  students => (person :ARG0-of study-01)
Span 27-28:  theory => theory
Span 26-27:  this => this
Span 56-57:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(56,57,List(1, 0),years,(temporal-quantity :unit year),false), Span(52,53,List(2),book,book,false), Span(50,51,List(3),devote,devote-01,false), Span(48,49,List(4),promised,promise-01,false), Span(47,48,List(5),publicly,public,false), Span(46,47,List(6),and,and,false), Span(44,45,List(7),once,once,false), Span(43,44,List(8),i,i,false), Span(40,41,List(9),constitution,constitution,false), Span(32,33,List(10),become,become-01,false), Span(27,28,List(11),theory,theory,false), Span(26,27,List(12),this,this,false), Span(25,26,List(13),accordingly,accordingly,false), Span(23,24,List(14),and,and,false), Span(22,23,List(15),farther,far,false), Span(21,22,List(16),no,-,false), Span(19,20,List(17),and,and,false), Span(18,19,List(18),correct,correct,false), Span(16,17,List(19),he,he,false), Span(14,15,List(20),assume,assume-02,false), Span(10,11,List(22, 21),students,(person :ARG0-of study-01),false), Span(7,8,List(23),and,and,false), Span(6,7,List(24),scholars,scholar,false), Span(5,6,List(25),other,other,false), Span(0,1,List(26),it,it,false)),Map(2 -> book, 5 -> public, 12 -> this, 8 -> i, 15 -> far, 21 -> person, 18 -> correct, 24 -> scholar, 7 -> once, 1 -> year, 17 -> and, 23 -> and, 26 -> it, 4 -> promise-01, 11 -> theory, 14 -> and, 20 -> assume-02, 6 -> and, 9 -> constitution, 0 -> temporal-quantity, 22 -> study-01, 16 -> -, 19 -> he, 10 -> become-01, 3 -> devote-01, 25 -> other, 13 -> accordingly),Map(h -> he, s2 -> scholar, t -> temporal-quantity, b -> book, b2 -> become-01, p2 -> public, a3 -> and, s -> study-01, a6 -> and, d -> devote-01, t3 -> this, y -> year, p -> promise-01, a -> and, a5 -> assume-02, o2 -> other, i2 -> it, t2 -> theory, i -> i, a2 -> accordingly, - -> -, c -> constitution, f -> far, o -> once, p3 -> person, c2 -> correct, a4 -> and))),[Ljava.lang.String;@792cc6d9,Annotation([Ljava.lang.String;@6ab30eb5,[Ljava.lang.String;@118ac3cd,[Ljava.lang.String;@2d3cd0ba),Annotation([Ljava.lang.String;@73ab7a89,[Ljava.lang.String;@7ef9f3b2,[Ledu.cmu.lti.nlp.amr.Dependency;@4bee6c3e),Annotation([Ljava.lang.String;@12048164,[Ljava.lang.String;@65cad579,[Ljava.lang.String;@67852f24),Annotation([Ljava.lang.String;@58da1994,[Ljava.lang.String;@56c5711e,[Ledu.cmu.lti.nlp.amr.Entity;@3c859513))
AMR:
(- / -, poss, i2 / it)
(a / and, op, b2 / become-01)
(a / and, op, i / i)
(a / and, op, p / promise-01)
(a3 / and, op, a5 / assume-02)
(a4 / and, op, a5 / assume-02)
(a4 / and, op, b2 / become-01)
(a5 / assume-02, ARG0, a6 / and)
(a5 / assume-02, ARG1, c2 / correct)
(a6 / and, mod, o2 / other)
(a6 / and, op, s2 / scholar)
(b / book, topic, t / temporal-quantity)
(b2 / become-01, ARG0, c / constitution)
(b2 / become-01, ARG1, i2 / it)
(b2 / become-01, ARG2, p3 / person)
(b2 / become-01, ARG3, a2 / accordingly)
(c2 / correct, domain, h / he)
(d / devote-01, ARG1, b / book)
(f / far, op, p / promise-01)
(i / i, time, o / once)
(p / promise-01, ARG1, t2 / theory)
(p / promise-01, ARG2, d / devote-01)
(p / promise-01, manner, p2 / public)
(s / study-01, ARG0, p3 / person)
(t / temporal-quantity, unit, y / year)
(t2 / theory, mod, t3 / this)

Decoded in 874,041 microseconds
Sentence: the kadets at this time a middleclass reform party promised cultural selfdetermination and equality for the peoples of the empire but in a unitary state

Spans:
Span 12-13:  and => and
Span 20-21:  but => contrast-01
Span 10-11:  cultural => culture
Span 19-20:  empire => empire
Span 13-14:  equality => equal-01
Span 8-9:  party => party
Span 16-17:  peoples => people
Span 9-10:  promised => promise-01
Span 7-8:  reform => reform-01
Span 24-25:  state => state
Span 3-4:  this => this
Span 4-5:  time => time

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),state,state,false), Span(20,21,List(1),but,contrast-01,false), Span(19,20,List(2),empire,empire,false), Span(16,17,List(3),peoples,people,false), Span(13,14,List(4),equality,equal-01,false), Span(12,13,List(5),and,and,false), Span(10,11,List(6),cultural,culture,false), Span(9,10,List(7),promised,promise-01,false), Span(8,9,List(8),party,party,false), Span(7,8,List(9),reform,reform-01,false), Span(4,5,List(10),time,time,false), Span(3,4,List(11),this,this,false)),Map(2 -> empire, 5 -> and, 8 -> party, 7 -> promise-01, 1 -> contrast-01, 11 -> this, 4 -> equal-01, 6 -> culture, 9 -> reform-01, 0 -> state, 10 -> time, 3 -> people),Map(e -> empire, t -> time, p2 -> promise-01, e2 -> equal-01, s -> state, p -> people, a -> and, t2 -> this, r -> reform-01, c -> contrast-01, p3 -> party, c2 -> culture))),[Ljava.lang.String;@135fa2b9,Annotation([Ljava.lang.String;@6bb4299e,[Ljava.lang.String;@1187b50,[Ljava.lang.String;@6e47c1bf),Annotation([Ljava.lang.String;@29011b29,[Ljava.lang.String;@79e35c7,[Ledu.cmu.lti.nlp.amr.Dependency;@23dc9fb9),Annotation([Ljava.lang.String;@697a3d13,[Ljava.lang.String;@583fe07e,[Ljava.lang.String;@49ab9d75),Annotation([Ljava.lang.String;@21ee921c,[Ljava.lang.String;@35ba7dab,[Ledu.cmu.lti.nlp.amr.Entity;@6690811b))
AMR:
(c / contrast-01, ARG1, e / empire)
(e2 / equal-01, ARG0, p3 / party)
(e2 / equal-01, ARG1, c / contrast-01)
(e2 / equal-01, manner, p / people)
(e2 / equal-01, mod, c2 / culture)
(p2 / promise-01, ARG0, p3 / party)
(p2 / promise-01, ARG1, a / and)
(p2 / promise-01, time, t / time)
(p3 / party, mod, r / reform-01)
(r / reform-01, ARG1, s / state)
(t / time, mod, t2 / this)

Decoded in 322,751 microseconds
Sentence: he has promised that 1990 will be the year of the student with improvements in student support which include extra money for libraries and more lodgings

Spans:
Span 4-5:  1990 => (date-entity :year 1990)
Span 23-24:  and => and
Span 19-20:  extra => extra
Span 0-1:  he => he
Span 13-14:  improvements => improve-01
Span 18-19:  include => include-01
Span 22-23:  libraries => library
Span 20-21:  money => money
Span 2-3:  promised => promise-01
Span 15-16:  student => (person :ARG0-of study-01)
Span 11-12:  student => (person :ARG0-of study-01)
Span 16-17:  support => support-01
Span 8-9:  year => year

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),and,and,false), Span(22,23,List(1),libraries,library,false), Span(20,21,List(2),money,money,false), Span(19,20,List(3),extra,extra,false), Span(18,19,List(4),include,include-01,false), Span(16,17,List(5),support,support-01,false), Span(15,16,List(7, 6),student,(person :ARG0-of study-01),false), Span(13,14,List(8),improvements,improve-01,false), Span(11,12,List(10, 9),student,(person :ARG0-of study-01),false), Span(8,9,List(11),year,year,false), Span(4,5,List(13, 12),1990,(date-entity :year 1990),false), Span(2,3,List(14),promised,promise-01,false), Span(0,1,List(15),he,he,false)),Map(2 -> money, 5 -> support-01, 12 -> date-entity, 15 -> he, 8 -> improve-01, 7 -> study-01, 1 -> library, 4 -> include-01, 11 -> year, 14 -> promise-01, 6 -> person, 0 -> and, 9 -> person, 3 -> extra, 10 -> study-01, 13 -> 1990),Map(e -> extra, h -> he, s2 -> study-01, p2 -> person, s -> support-01, m -> money, d -> date-entity, 1 -> 1990, p -> person, y -> year, a -> and, i2 -> improve-01, i -> include-01, s3 -> study-01, l -> library, p3 -> promise-01))),[Ljava.lang.String;@190c4838,Annotation([Ljava.lang.String;@75596160,[Ljava.lang.String;@3f0821d0,[Ljava.lang.String;@2ee3ff04),Annotation([Ljava.lang.String;@7a7b77a8,[Ljava.lang.String;@3fecf56a,[Ledu.cmu.lti.nlp.amr.Dependency;@5de422ef),Annotation([Ljava.lang.String;@2cb1a911,[Ljava.lang.String;@43d2b203,[Ljava.lang.String;@3da505be),Annotation([Ljava.lang.String;@1d1c1c90,[Ljava.lang.String;@209740de,[Ledu.cmu.lti.nlp.amr.Entity;@2a23bf89))
AMR:
(a / and, op, i / include-01)
(a / and, op, l / library)
(d / date-entity, year, 1 / 1990)
(i / include-01, ARG0, s / support-01)
(i / include-01, ARG1, m / money)
(i2 / improve-01, ARG1, s / support-01)
(m / money, mod, e / extra)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, y / year)
(s / support-01, ARG0, d / date-entity)
(s / support-01, ARG1, p / person)
(s2 / study-01, ARG0, p / person)
(s3 / study-01, ARG0, p2 / person)
(s3 / study-01, ARG2, s / support-01)
(s3 / study-01, time, y / year)

Decoded in 349,982 microseconds
Sentence: they cared about equal pay  which lloyd george had promised for piece work only and which the men opposed

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = they cared about equal pay  which lloyd george had promised for piece work only and which the men opposed
myTokenized = they cared about equal pay which lloyd george had promised for piece work only and which the men opposed
i = 5
prefix = List(they, cared, about, equal, pay, which)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qy\E ?\Qc\E ?\Qa\E ?\Qr\E ?\Qe\E ?\Qd\E ?\Qa\E ?\Qb\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qe\E ?\Qq\E ?\Qu\E ?\Qa\E ?\Ql\E ?\Qp\E ?\Qa\E ?\Qy\E ?\Qw\E ?\Qh\E ?\Qi\E ?\Qc\E ?\Qh\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: astra has already promised to provide four fullblown hdtv channels from its fourth satellite

Spans:
Span 2-3:  already => already
Span 9-10:  channels => channel
Span 6-7:  four => 4
Span 12-13:  fourth => fourth
Span 3-4:  promised => promise-01
Span 5-6:  provide => provide-01
Span 13-14:  satellite => satellite

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),satellite,satellite,false), Span(12,13,List(1),fourth,fourth,false), Span(9,10,List(2),channels,channel,false), Span(6,7,List(3),four,4,false), Span(5,6,List(4),provide,provide-01,false), Span(3,4,List(5),promised,promise-01,false), Span(2,3,List(6),already,already,false)),Map(2 -> channel, 5 -> promise-01, 1 -> fourth, 4 -> provide-01, 6 -> already, 0 -> satellite, 3 -> 4),Map(p2 -> promise-01, s -> satellite, p -> provide-01, a -> already, 4 -> 4, c -> channel, f -> fourth))),[Ljava.lang.String;@771d5915,Annotation([Ljava.lang.String;@27c3aecb,[Ljava.lang.String;@2008a5d2,[Ljava.lang.String;@17be8e6c),Annotation([Ljava.lang.String;@5f7860a1,[Ljava.lang.String;@58101afe,[Ledu.cmu.lti.nlp.amr.Dependency;@95c46dd),Annotation([Ljava.lang.String;@9305bf8,[Ljava.lang.String;@45e5fb7e,[Ljava.lang.String;@7de2310b),Annotation([Ljava.lang.String;@d0209be,[Ljava.lang.String;@cd9f9e,[Ledu.cmu.lti.nlp.amr.Entity;@3baa3e7b))
AMR:
(c / channel, quant, 4 / 4)
(p / provide-01, ARG0, s / satellite)
(p / provide-01, ARG1, c / channel)
(p2 / promise-01, ARG2, p / provide-01)
(p2 / promise-01, time, a / already)
(s / satellite, mod, f / fourth)

Decoded in 58,210 microseconds
Sentence: sarney promised to get them out but the military said they didnt have the money

Spans:
Span 6-7:  but => contrast-01
Span 8-9:  military => military
Span 14-15:  money => money
Span 1-2:  promised => promise-01
Span 9-10:  said => say-01
Span 10-11:  they => they

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),money,money,false), Span(10,11,List(1),they,they,false), Span(9,10,List(2),said,say-01,false), Span(8,9,List(3),military,military,false), Span(6,7,List(4),but,contrast-01,false), Span(1,2,List(5),promised,promise-01,false)),Map(2 -> say-01, 5 -> promise-01, 1 -> they, 4 -> contrast-01, 0 -> money, 3 -> military),Map(t -> they, m2 -> military, s -> say-01, m -> money, p -> promise-01, c -> contrast-01))),[Ljava.lang.String;@25ec1bd7,Annotation([Ljava.lang.String;@3017d3b4,[Ljava.lang.String;@6c4be716,[Ljava.lang.String;@6b308ce5),Annotation([Ljava.lang.String;@4072455d,[Ljava.lang.String;@e27fdb9,[Ledu.cmu.lti.nlp.amr.Dependency;@638283f1),Annotation([Ljava.lang.String;@da47641,[Ljava.lang.String;@284fac66,[Ljava.lang.String;@6bf7137),Annotation([Ljava.lang.String;@2a1d557,[Ljava.lang.String;@4ebd441a,[Ledu.cmu.lti.nlp.amr.Entity;@6bc22f58))
AMR:
(c / contrast-01, ARG1, m / money)
(c / contrast-01, ARG2, s / say-01)
(p / promise-01, ARG1, s / say-01)
(s / say-01, ARG0, m2 / military)
(s / say-01, ARG1, t / they)

Decoded in 43,566 microseconds
Sentence:  he promised that if the specimen went to stuttgart it would be available for study to british scientists

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  he promised that if the specimen went to stuttgart it would be available for study to british scientists
myTokenized = he promised that if the specimen went to stuttgart it would be available for study to british scientists
i = 0
prefix = List(he)
regexr = \Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: also many of these have shown rapid economic growth in the present decade and promise to continue doing so in the 1990s

Spans:
Span 21-22:  1990s => 1990
Span 0-1:  also => also
Span 13-14:  and => and
Span 16-17:  continue => continue-01
Span 12-13:  decade => (temporal-quantity :unit decade)
Span 17-18:  doing => do-02
Span 7-8:  economic => economy
Span 8-9:  growth => grow-01
Span 1-2:  many => many
Span 11-12:  present => present
Span 14-15:  promise => promise-01
Span 6-7:  rapid => rapid
Span 5-6:  shown => show-01
Span 18-19:  so => so

Langrangian relaxation converged after 60 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),1990s,1990,false), Span(18,19,List(1),so,so,false), Span(17,18,List(2),doing,do-02,false), Span(16,17,List(3),continue,continue-01,false), Span(14,15,List(4),promise,promise-01,false), Span(13,14,List(5),and,and,false), Span(12,13,List(7, 6),decade,(temporal-quantity :unit decade),false), Span(11,12,List(8),present,present,false), Span(8,9,List(9),growth,grow-01,false), Span(7,8,List(10),economic,economy,false), Span(6,7,List(11),rapid,rapid,false), Span(5,6,List(12),shown,show-01,false), Span(1,2,List(13),many,many,false), Span(0,1,List(14),also,also,false)),Map(2 -> do-02, 5 -> and, 12 -> show-01, 8 -> present, 7 -> decade, 1 -> so, 4 -> promise-01, 11 -> rapid, 14 -> also, 6 -> temporal-quantity, 0 -> 1990, 9 -> grow-01, 3 -> continue-01, 10 -> economy, 13 -> many),Map(e -> economy, s2 -> show-01, t -> temporal-quantity, p2 -> present, s -> so, m -> many, d -> do-02, 1 -> 1990, p -> promise-01, g -> grow-01, a -> and, d2 -> decade, a2 -> also, r -> rapid, c -> continue-01))),[Ljava.lang.String;@62b84cb8,Annotation([Ljava.lang.String;@31b4f6aa,[Ljava.lang.String;@5fae2c64,[Ljava.lang.String;@23e48a4f),Annotation([Ljava.lang.String;@71345af1,[Ljava.lang.String;@243ebe47,[Ledu.cmu.lti.nlp.amr.Dependency;@133e39e8),Annotation([Ljava.lang.String;@5a4bb836,[Ljava.lang.String;@212b0f8a,[Ljava.lang.String;@12093e09),Annotation([Ljava.lang.String;@1cc7ca1f,[Ljava.lang.String;@a6c7fc,[Ledu.cmu.lti.nlp.amr.Entity;@459371b9))
AMR:
(c / continue-01, ARG0, a / and)
(c / continue-01, ARG1, d / do-02)
(c / continue-01, prep-for, 1 / 1990)
(d / do-02, ARG1, s / so)
(d2 / decade, mod, p2 / present)
(g / grow-01, ARG0, m / many)
(g / grow-01, ARG1, e / economy)
(g / grow-01, manner, r / rapid)
(m / many, mod, a2 / also)
(p / promise-01, ARG1, c / continue-01)
(p / promise-01, mod, p2 / present)
(s2 / show-01, ARG0, a / and)
(s2 / show-01, ARG1, g / grow-01)
(t / temporal-quantity, unit, d2 / decade)

Decoded in 714,108 microseconds
Sentence: sam nujoma swapos leader promised to work with all political parties to draft a new constitution and raised the prospect of forming a coalition government after independence next year

Spans:
Span 25-26:  after => after
Span 8-9:  all => all
Span 16-17:  and => and
Span 23-24:  coalition => coalition
Span 15-16:  constitution => constitution
Span 12-13:  draft => draft-01
Span 21-22:  forming => form-01
Span 26-27:  independence => (depend-01 :polarity -)
Span 3-4:  leader => (person :ARG0-of lead-02)
Span 14-15:  new => new
Span 27-28:  next => next
Span 10-11:  parties => party
Span 9-10:  political => politics
Span 4-5:  promised => promise-01
Span 19-20:  prospect => prospect
Span 17-18:  raised => raise-01
Span 28-29:  year => year

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),year,year,false), Span(27,28,List(1),next,next,false), Span(26,27,List(3, 2),independence,(depend-01 :polarity -),false), Span(25,26,List(4),after,after,false), Span(23,24,List(5),coalition,coalition,false), Span(21,22,List(6),forming,form-01,false), Span(19,20,List(7),prospect,prospect,false), Span(17,18,List(8),raised,raise-01,false), Span(16,17,List(9),and,and,false), Span(15,16,List(10),constitution,constitution,false), Span(14,15,List(11),new,new,false), Span(12,13,List(12),draft,draft-01,false), Span(10,11,List(13),parties,party,false), Span(9,10,List(14),political,politics,false), Span(8,9,List(15),all,all,false), Span(4,5,List(16),promised,promise-01,false), Span(3,4,List(18, 17),leader,(person :ARG0-of lead-02),false)),Map(2 -> depend-01, 5 -> coalition, 12 -> draft-01, 15 -> all, 8 -> raise-01, 18 -> lead-02, 7 -> prospect, 17 -> person, 1 -> next, 4 -> after, 11 -> new, 14 -> politics, 6 -> form-01, 0 -> year, 9 -> and, 16 -> promise-01, 3 -> -, 10 -> constitution, 13 -> party),Map(n -> next, p5 -> person, p2 -> party, a3 -> all, d -> depend-01, y -> year, p -> prospect, a -> after, p4 -> promise-01, d2 -> draft-01, r -> raise-01, a2 -> and, c -> coalition, l -> lead-02, f -> form-01, p3 -> politics, c2 -> constitution, n2 -> new))),[Ljava.lang.String;@115ed9ec,Annotation([Ljava.lang.String;@6a351ddc,[Ljava.lang.String;@453b8cfd,[Ljava.lang.String;@48a5598d),Annotation([Ljava.lang.String;@5f9a5d3d,[Ljava.lang.String;@f5f80d4,[Ledu.cmu.lti.nlp.amr.Dependency;@4702e62e),Annotation([Ljava.lang.String;@f55fa6e,[Ljava.lang.String;@55ac539f,[Ljava.lang.String;@24a617aa),Annotation([Ljava.lang.String;@145bacb2,[Ljava.lang.String;@ea6e48f,[Ledu.cmu.lti.nlp.amr.Entity;@6ee76fcc))
AMR:
(a / after, op, d / depend-01)
(a2 / and, op, r / raise-01)
(c2 / constitution, mod, n2 / new)
(d / depend-01, polarity, -)
(d2 / draft-01, ARG0, p5 / person)
(d2 / draft-01, ARG1, c2 / constitution)
(d2 / draft-01, instrument, p2 / party)
(f / form-01, ARG0, p / prospect)
(f / form-01, ARG1, c / coalition)
(f / form-01, time, a / after)
(l / lead-02, ARG0, p5 / person)
(p2 / party, mod, p3 / politics)
(p2 / party, quant, a3 / all)
(p4 / promise-01, ARG0, p5 / person)
(r / raise-01, ARG0, p5 / person)
(r / raise-01, ARG1, p / prospect)
(r / raise-01, time, y / year)
(y / year, mod, n / next)

Decoded in 636,504 microseconds
Sentence: he also promised to lift the twomonthold blockade

Spans:
Span 1-2:  also => also
Span 7-8:  blockade => blockade-01
Span 0-1:  he => he
Span 4-5:  lift => lift-01
Span 2-3:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),blockade,blockade-01,false), Span(4,5,List(1),lift,lift-01,false), Span(2,3,List(2),promised,promise-01,false), Span(1,2,List(3),also,also,false), Span(0,1,List(4),he,he,false)),Map(2 -> promise-01, 1 -> lift-01, 4 -> he, 0 -> blockade-01, 3 -> also),Map(h -> he, b -> blockade-01, p -> promise-01, a -> also, l -> lift-01))),[Ljava.lang.String;@1c5cf2f6,Annotation([Ljava.lang.String;@1a530306,[Ljava.lang.String;@3feb8c6a,[Ljava.lang.String;@14fa3ef),Annotation([Ljava.lang.String;@1393a095,[Ljava.lang.String;@4113a03d,[Ledu.cmu.lti.nlp.amr.Dependency;@6f7d262b),Annotation([Ljava.lang.String;@1550a3c,[Ljava.lang.String;@7612e9d2,[Ljava.lang.String;@53b5168d),Annotation([Ljava.lang.String;@15dbadea,[Ljava.lang.String;@976e8dc,[Ledu.cmu.lti.nlp.amr.Entity;@5db1c85e))
AMR:
(l / lift-01, ARG1, b / blockade-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, l / lift-01)
(p / promise-01, mod, a / also)

Decoded in 12,206 microseconds
Sentence: all we are left with are a few opening chapters published as coots in the north edited by hugh brogan and notes towards an encounter between two sets of pirates the death and glories and the amazons which promised to have been a battle royal

Spans:
Span 0-1:  all => all
Span 34-35:  and => and
Span 32-33:  and => and
Span 20-21:  and => and
Span 43-44:  battle => battle-01
Span 25-26:  between => between
Span 9-10:  chapters => chapter
Span 31-32:  death => die-01
Span 16-17:  edited => edit-01
Span 24-25:  encounter => encounter-01
Span 7-8:  few => few
Span 15-16:  north => north
Span 21-22:  notes => note
Span 8-9:  opening => open-01
Span 29-30:  pirates => pirate
Span 38-39:  promised => promise-01
Span 10-11:  published => publish-01
Span 44-45:  royal => royal
Span 27-28:  sets => set
Span 26-27:  two => 2
Span 1-2:  we => we

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),royal,royal,false), Span(43,44,List(1),battle,battle-01,false), Span(38,39,List(2),promised,promise-01,false), Span(34,35,List(3),and,and,false), Span(32,33,List(4),and,and,false), Span(31,32,List(5),death,die-01,false), Span(29,30,List(6),pirates,pirate,false), Span(27,28,List(7),sets,set,false), Span(26,27,List(8),two,2,false), Span(25,26,List(9),between,between,false), Span(24,25,List(10),encounter,encounter-01,false), Span(21,22,List(11),notes,note,false), Span(20,21,List(12),and,and,false), Span(16,17,List(13),edited,edit-01,false), Span(15,16,List(14),north,north,false), Span(10,11,List(15),published,publish-01,false), Span(9,10,List(16),chapters,chapter,false), Span(8,9,List(17),opening,open-01,false), Span(7,8,List(18),few,few,false), Span(1,2,List(19),we,we,false), Span(0,1,List(20),all,all,false)),Map(2 -> promise-01, 5 -> die-01, 12 -> and, 15 -> publish-01, 8 -> 2, 18 -> few, 7 -> set, 17 -> open-01, 1 -> battle-01, 4 -> and, 11 -> note, 14 -> north, 20 -> all, 6 -> pirate, 0 -> royal, 9 -> between, 16 -> chapter, 19 -> we, 3 -> and, 10 -> encounter-01, 13 -> edit-01),Map(e -> encounter-01, w -> we, n -> note, 2 -> 2, b -> battle-01, b2 -> between, e2 -> edit-01, p2 -> pirate, a3 -> and, s -> set, d -> die-01, p -> promise-01, a -> and, r -> royal, a2 -> and, c -> chapter, f -> few, o -> open-01, p3 -> publish-01, n2 -> north, a4 -> all))),[Ljava.lang.String;@42d9c360,Annotation([Ljava.lang.String;@66a9f5e9,[Ljava.lang.String;@204fc8a7,[Ljava.lang.String;@55fe5c83),Annotation([Ljava.lang.String;@2e6bc890,[Ljava.lang.String;@263c7dbf,[Ledu.cmu.lti.nlp.amr.Dependency;@4d639a35),Annotation([Ljava.lang.String;@46213544,[Ljava.lang.String;@2e302754,[Ljava.lang.String;@5b66137c),Annotation([Ljava.lang.String;@a8960c5,[Ljava.lang.String;@41302aea,[Ledu.cmu.lti.nlp.amr.Entity;@41518a15))
AMR:
(a / and, op, p2 / pirate)
(a2 / and, op, a / and)
(a2 / and, op, d / die-01)
(a2 / and, op, s / set)
(a3 / and, op, n / note)
(a3 / and, op, o / open-01)
(b / battle-01, ARG0, r / royal)
(b2 / between, op, s / set)
(e / encounter-01, ARG0, f / few)
(e / encounter-01, ARG1, b2 / between)
(e2 / edit-01, ARG0, a3 / and)
(e2 / edit-01, ARG1, n2 / north)
(e2 / edit-01, time, e / encounter-01)
(o / open-01, ARG0, c / chapter)
(p / promise-01, ARG1, r / royal)
(p / promise-01, ARG2, a / and)
(p3 / publish-01, ARG0, w / we)
(p3 / publish-01, ARG1, c / chapter)
(s / set, quant, 2 / 2)
(w / we, mod, a4 / all)

Decoded in 270,834 microseconds
Sentence:   she said she was not in a predatory mood but had promised information to david gerrard

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   she said she was not in a predatory mood but had promised information to david gerrard
myTokenized = she said she was not in a predatory mood but had promised information to david gerrard
i = 0
prefix = List(she)
regexr = \Qs\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: during wednesdays meeting the threeperson delegation pointed out that more than 80 political activists are on death row and mrs thatcher promised to make representations to pretoria on a casebycase basis

Spans:
Span 11-12:  80 => 80
Span 13-14:  activists => activist
Span 18-19:  and => and
Span 16-17:  death => die-01
Span 5-6:  delegation => delegation
Span 2-3:  meeting => meet-03
Span 6-7:  pointed => point-02
Span 12-13:  political => politics
Span 21-22:  promised => promise-01
Span 24-25:  representations => represent-01
Span 17-18:  row => row

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),representations,represent-01,false), Span(21,22,List(1),promised,promise-01,false), Span(18,19,List(2),and,and,false), Span(17,18,List(3),row,row,false), Span(16,17,List(4),death,die-01,false), Span(13,14,List(5),activists,activist,false), Span(12,13,List(6),political,politics,false), Span(11,12,List(7),80,80,false), Span(6,7,List(8),pointed,point-02,false), Span(5,6,List(9),delegation,delegation,false), Span(2,3,List(10),meeting,meet-03,false)),Map(2 -> and, 5 -> activist, 8 -> point-02, 7 -> 80, 1 -> promise-01, 4 -> die-01, 6 -> politics, 9 -> delegation, 0 -> represent-01, 10 -> meet-03, 3 -> row),Map(8 -> 80, p2 -> politics, m -> meet-03, d -> die-01, r2 -> row, p -> promise-01, a -> and, d2 -> delegation, a2 -> activist, r -> represent-01, p3 -> point-02))),[Ljava.lang.String;@3d31436e,Annotation([Ljava.lang.String;@6d420a24,[Ljava.lang.String;@aa7f986,[Ljava.lang.String;@19eed1e1),Annotation([Ljava.lang.String;@e151814,[Ljava.lang.String;@adfd045,[Ledu.cmu.lti.nlp.amr.Dependency;@6be26796),Annotation([Ljava.lang.String;@5cfee02f,[Ljava.lang.String;@61305d5b,[Ljava.lang.String;@2e413336),Annotation([Ljava.lang.String;@3a8935f3,[Ljava.lang.String;@635028b,[Ledu.cmu.lti.nlp.amr.Entity;@239f6dc))
AMR:
(a / and, op, r2 / row)
(a2 / activist, mod, p2 / politics)
(p / promise-01, ARG0, a2 / activist)
(p / promise-01, ARG1, r / represent-01)
(p / promise-01, ARG2, a / and)
(p3 / point-02, ARG0, d2 / delegation)
(p3 / point-02, ARG1, a / and)
(p3 / point-02, time, m / meet-03)
(r / represent-01, ARG1, 8 / 80)
(r2 / row, mod, d / die-01)

Decoded in 97,718 microseconds
Sentence: ive promised him that come and sit down instructed laura and led her to a fireside chair

Spans:
Span 10-11:  and => and
Span 5-6:  and => and
Span 16-17:  chair => chair
Span 7-8:  down => down
Span 8-9:  instructed => instruct-01
Span 11-12:  led => lead-02
Span 1-2:  promised => promise-01
Span 6-7:  sit => sit-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),chair,chair,false), Span(11,12,List(1),led,lead-02,false), Span(10,11,List(2),and,and,false), Span(8,9,List(3),instructed,instruct-01,false), Span(7,8,List(4),down,down,false), Span(6,7,List(5),sit,sit-01,false), Span(5,6,List(6),and,and,false), Span(1,2,List(7),promised,promise-01,false)),Map(2 -> and, 5 -> sit-01, 7 -> promise-01, 1 -> lead-02, 4 -> down, 6 -> and, 0 -> chair, 3 -> instruct-01),Map(s -> sit-01, d -> down, p -> promise-01, a -> and, a2 -> and, i -> instruct-01, l -> lead-02, c -> chair))),[Ljava.lang.String;@2b7de6a8,Annotation([Ljava.lang.String;@56b235e6,[Ljava.lang.String;@4df0bb81,[Ljava.lang.String;@77a63a20),Annotation([Ljava.lang.String;@4232483e,[Ljava.lang.String;@73250065,[Ledu.cmu.lti.nlp.amr.Dependency;@23d21f2),Annotation([Ljava.lang.String;@7b7f9803,[Ljava.lang.String;@75d52c4c,[Ljava.lang.String;@7e4f6e03),Annotation([Ljava.lang.String;@10bfc7be,[Ljava.lang.String;@1ed29389,[Ledu.cmu.lti.nlp.amr.Entity;@12d4172e))
AMR:
(a / and, op, l / lead-02)
(a / and, op, s / sit-01)
(a2 / and, op, s / sit-01)
(d / down, op, i / instruct-01)
(l / lead-02, destination, c / chair)
(p / promise-01, ARG1, a2 / and)
(s / sit-01, duration, d / down)

Decoded in 29,602 microseconds
Sentence: that programme is cautious promising to clean up human rights abuses investigate past crimes raise minimum wages improve health and education and not much more

Spans:
Span 10-11:  abuses => abuse-01
Span 21-22:  and => and
Span 19-20:  and => and
Span 3-4:  cautious => cautious
Span 6-7:  clean => clean
Span 13-14:  crimes => crime
Span 20-21:  education => educate-01
Span 18-19:  health => health
Span 8-9:  human => human
Span 17-18:  improve => improve-01
Span 11-12:  investigate => investigate-01
Span 15-16:  minimum => minimum
Span 23-24:  much => much
Span 12-13:  past => past
Span 1-2:  programme => program
Span 4-5:  promising => promise-01
Span 14-15:  raise => raise-01
Span 9-10:  rights => right
Span 16-17:  wages => wage

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),much,much,false), Span(21,22,List(1),and,and,false), Span(20,21,List(2),education,educate-01,false), Span(19,20,List(3),and,and,false), Span(18,19,List(4),health,health,false), Span(17,18,List(5),improve,improve-01,false), Span(16,17,List(6),wages,wage,false), Span(15,16,List(7),minimum,minimum,false), Span(14,15,List(8),raise,raise-01,false), Span(13,14,List(9),crimes,crime,false), Span(12,13,List(10),past,past,false), Span(11,12,List(11),investigate,investigate-01,false), Span(10,11,List(12),abuses,abuse-01,false), Span(9,10,List(13),rights,right,false), Span(8,9,List(14),human,human,false), Span(6,7,List(15),clean,clean,false), Span(4,5,List(16),promising,promise-01,false), Span(3,4,List(17),cautious,cautious,false), Span(1,2,List(18),programme,program,false)),Map(2 -> educate-01, 5 -> improve-01, 12 -> abuse-01, 15 -> clean, 8 -> raise-01, 18 -> program, 7 -> minimum, 17 -> cautious, 1 -> and, 4 -> health, 11 -> investigate-01, 14 -> human, 6 -> wage, 0 -> much, 9 -> crime, 16 -> promise-01, 3 -> and, 10 -> past, 13 -> right),Map(e -> educate-01, w -> wage, h -> health, h2 -> human, m2 -> minimum, p2 -> promise-01, a3 -> abuse-01, m -> much, r2 -> right, p -> past, c3 -> cautious, a -> and, i2 -> investigate-01, a2 -> and, i -> improve-01, r -> raise-01, c -> crime, p3 -> program, c2 -> clean))),[Ljava.lang.String;@5576a406,Annotation([Ljava.lang.String;@600ab1bf,[Ljava.lang.String;@5e1ba3db,[Ljava.lang.String;@68a2af21),Annotation([Ljava.lang.String;@1097d532,[Ljava.lang.String;@602dce20,[Ledu.cmu.lti.nlp.amr.Dependency;@5f37c834),Annotation([Ljava.lang.String;@4738fec2,[Ljava.lang.String;@6edd9715,[Ljava.lang.String;@15ea1c90),Annotation([Ljava.lang.String;@3cf93d2d,[Ljava.lang.String;@f1f74a1,[Ledu.cmu.lti.nlp.amr.Entity;@5a21fdc8))
AMR:
(a / and, op, p2 / promise-01)
(a2 / and, op, e / educate-01)
(a2 / and, op, i / improve-01)
(a3 / abuse-01, ARG1, r2 / right)
(c / crime, time, p / past)
(c3 / cautious, domain, p3 / program)
(e / educate-01, ARG1, m / much)
(i / improve-01, ARG0, w / wage)
(i / improve-01, ARG2, h / health)
(i2 / investigate-01, ARG0, a3 / abuse-01)
(i2 / investigate-01, ARG1, r / raise-01)
(p2 / promise-01, ARG1, r2 / right)
(p2 / promise-01, ARG2, c2 / clean)
(p2 / promise-01, manner, c3 / cautious)
(r / raise-01, ARG0, c / crime)
(r / raise-01, ARG1, h / health)
(r2 / right, mod, h2 / human)
(w / wage, mod, m2 / minimum)

Decoded in 806,277 microseconds
Sentence: in an effort to secure british support for a compromise solution on a common ec mergers regulation the european commission yesterday promised to come forward with new measures to remove unfair obstacles to company takeovers

NER Entity: (thing :name (name :op "british"))
Spans:
Span 19-20:  commission => commission
Span 13-14:  common => common
Span 33-34:  company => company
Span 9-10:  compromise => compromise-01
Span 2-3:  effort => effort
Span 18-19:  european => (continent :name (name :op "Europe"))
Span 24-25:  forward => forward
Span 27-28:  measures => measure
Span 15-16:  mergers => merge-01
Span 26-27:  new => new
Span 31-32:  obstacles => obstacle
Span 21-22:  promised => promise-01
Span 16-17:  regulation => regulate-01
Span 29-30:  remove => remove-01
Span 4-5:  secure => secure-02
Span 10-11:  solution => solution
Span 6-7:  support => support-01
Span 30-31:  unfair => (fair :polarity -)
Span 20-21:  yesterday => yesterday

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),company,company,false), Span(31,32,List(1),obstacles,obstacle,false), Span(30,31,List(3, 2),unfair,(fair :polarity -),false), Span(29,30,List(4),remove,remove-01,false), Span(27,28,List(5),measures,measure,false), Span(26,27,List(6),new,new,false), Span(24,25,List(7),forward,forward,false), Span(21,22,List(8),promised,promise-01,false), Span(20,21,List(9),yesterday,yesterday,false), Span(19,20,List(10),commission,commission,false), Span(18,19,List(13, 12, 11),european,(continent :name (name :op "Europe")),false), Span(16,17,List(14),regulation,regulate-01,false), Span(15,16,List(15),mergers,merge-01,false), Span(13,14,List(16),common,common,false), Span(10,11,List(17),solution,solution,false), Span(9,10,List(18),compromise,compromise-01,false), Span(6,7,List(19),support,support-01,false), Span(4,5,List(20),secure,secure-02,false), Span(2,3,List(21),effort,effort,false)),Map(2 -> fair, 5 -> measure, 12 -> name, 15 -> merge-01, 8 -> promise-01, 21 -> effort, 18 -> compromise-01, 7 -> forward, 17 -> solution, 1 -> obstacle, 4 -> remove-01, 11 -> continent, 14 -> regulate-01, 20 -> secure-02, 6 -> new, 0 -> company, 9 -> yesterday, 16 -> common, 19 -> support-01, 3 -> -, 10 -> commission, 13 -> "Europe"),Map(e -> effort, n -> new, s2 -> support-01, m2 -> merge-01, c4 -> common, s -> solution, m -> measure, p -> promise-01, y -> yesterday, r2 -> regulate-01, c3 -> continent, r -> remove-01, s3 -> secure-02, c -> company, f2 -> forward, f -> fair, o -> obstacle, c2 -> commission, n2 -> name, c5 -> compromise-01))),[Ljava.lang.String;@3e8a5356,Annotation([Ljava.lang.String;@6b65532d,[Ljava.lang.String;@4937e670,[Ljava.lang.String;@74f9e89d),Annotation([Ljava.lang.String;@4316d76a,[Ljava.lang.String;@1098928f,[Ledu.cmu.lti.nlp.amr.Dependency;@10bdf2cc),Annotation([Ljava.lang.String;@268f37aa,[Ljava.lang.String;@48f8dad,[Ljava.lang.String;@6c9e5b31),Annotation([Ljava.lang.String;@107525ad,[Ljava.lang.String;@7afc894b,[Ledu.cmu.lti.nlp.amr.Entity;@5999da01))
AMR:
(c2 / commission, mod, c3 / continent)
(c3 / continent, name, n2 / name)
(c5 / compromise-01, ARG1, f / fair)
(e / effort, purpose, s3 / secure-02)
(f / fair, polarity, -)
(m / measure, mod, n / new)
(m2 / merge-01, ARG1, r2 / regulate-01)
(n2 / name, op, "Europe")
(o / obstacle, mod, f / fair)
(p / promise-01, ARG0, y / yesterday)
(p / promise-01, ARG1, f2 / forward)
(p / promise-01, ARG2, m / measure)
(p / promise-01, ARG3, r2 / regulate-01)
(r / remove-01, ARG0, m / measure)
(r / remove-01, ARG1, o / obstacle)
(r / remove-01, ARG2, c / company)
(r2 / regulate-01, ARG1, c2 / commission)
(r2 / regulate-01, mod, c4 / common)
(s / solution, mod, c5 / compromise-01)
(s3 / secure-02, ARG0, y / yesterday)
(s3 / secure-02, ARG1, s2 / support-01)

Decoded in 389,698 microseconds
Sentence: while general michel aoun promises to fight to the death against syria a french warship is dispatched to lebanese waters

NER Entity: (country :name (name :op "syria"))
NER Entity: (thing :name (name :op "lebanese"))
NER Entity: (country :name (name :op "syria"))
Spans:
Span 9-10:  death => die-01
Span 16-17:  dispatched => dispatch-01
Span 6-7:  fight => fight-01
Span 13-14:  french => (country :name (name :op "France"))
Span 1-2:  general => general
Span 4-5:  promises => promise-01
Span 11-12:  syria => (country :name (name :op "Syria"))
Span 19-20:  waters => water

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),waters,water,false), Span(16,17,List(1),dispatched,dispatch-01,false), Span(13,14,List(4, 3, 2),french,(country :name (name :op "France")),false), Span(11,12,List(7, 6, 5),syria,(country :name (name :op "Syria")),false), Span(9,10,List(8),death,die-01,false), Span(6,7,List(9),fight,fight-01,false), Span(4,5,List(10),promises,promise-01,false), Span(1,2,List(11),general,general,false)),Map(2 -> country, 5 -> country, 8 -> die-01, 7 -> "Syria", 1 -> dispatch-01, 11 -> general, 4 -> "France", 6 -> name, 9 -> fight-01, 0 -> water, 10 -> promise-01, 3 -> name),Map(n -> name, w -> water, d -> dispatch-01, g -> general, p -> promise-01, d2 -> die-01, c -> country, f -> fight-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@3b7a59c,Annotation([Ljava.lang.String;@dd9a6ac,[Ljava.lang.String;@4c4d6d4e,[Ljava.lang.String;@6f434304),Annotation([Ljava.lang.String;@28e4f4ad,[Ljava.lang.String;@4f7b9ed4,[Ledu.cmu.lti.nlp.amr.Dependency;@3cf89910),Annotation([Ljava.lang.String;@650908b5,[Ljava.lang.String;@341ad6e5,[Ljava.lang.String;@4e126f1c),Annotation([Ljava.lang.String;@1c3cbf4f,[Ljava.lang.String;@5833ea04,[Ledu.cmu.lti.nlp.amr.Entity;@3848d9d9))
AMR:
(c / country, example, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / dispatch-01, ARG1, w / water)
(d / dispatch-01, location, c2 / country)
(d2 / die-01, ARG1, g / general)
(f / fight-01, ARG1, d / dispatch-01)
(f / fight-01, ARG2, d2 / die-01)
(n / name, op, "France")
(n2 / name, op, "Syria")
(p / promise-01, ARG2, f / fight-01)

Decoded in 46,619 microseconds
Sentence: measurement of intelligence relative to that of a pupils contemporaries promised the fairest and the simplest and apparently the most appropriate means for effecting selection of this kind

Spans:
Span 16-17:  and => and
Span 13-14:  and => and
Span 17-18:  apparently => apparent
Span 20-21:  appropriate => appropriate
Span 2-3:  intelligence => intelligence
Span 27-28:  kind => kind
Span 21-22:  means => mean-01
Span 19-20:  most => most
Span 10-11:  promised => promise-01
Span 8-9:  pupils => pupil
Span 3-4:  relative => relative
Span 24-25:  selection => select-01
Span 26-27:  this => this

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),kind,kind,false), Span(26,27,List(1),this,this,false), Span(24,25,List(2),selection,select-01,false), Span(21,22,List(3),means,mean-01,false), Span(20,21,List(4),appropriate,appropriate,false), Span(19,20,List(5),most,most,false), Span(17,18,List(6),apparently,apparent,false), Span(16,17,List(7),and,and,false), Span(13,14,List(8),and,and,false), Span(10,11,List(9),promised,promise-01,false), Span(8,9,List(10),pupils,pupil,false), Span(3,4,List(11),relative,relative,false), Span(2,3,List(12),intelligence,intelligence,false)),Map(2 -> select-01, 5 -> most, 12 -> intelligence, 8 -> and, 7 -> and, 1 -> this, 4 -> appropriate, 11 -> relative, 6 -> apparent, 0 -> kind, 9 -> promise-01, 3 -> mean-01, 10 -> pupil),Map(k -> kind, t -> this, m2 -> most, p2 -> pupil, a3 -> and, s -> select-01, m -> mean-01, p -> promise-01, a -> appropriate, a2 -> apparent, r -> relative, i -> intelligence, a4 -> and))),[Ljava.lang.String;@36d6526d,Annotation([Ljava.lang.String;@30bd8e3b,[Ljava.lang.String;@6cc4dc7c,[Ljava.lang.String;@706788ad),Annotation([Ljava.lang.String;@1d3e4f82,[Ljava.lang.String;@65d5eecd,[Ledu.cmu.lti.nlp.amr.Dependency;@403108f6),Annotation([Ljava.lang.String;@53436f66,[Ljava.lang.String;@7046bc3e,[Ljava.lang.String;@33f0c408),Annotation([Ljava.lang.String;@3d603dc,[Ljava.lang.String;@5797627b,[Ledu.cmu.lti.nlp.amr.Entity;@13c2a62a))
AMR:
(a / appropriate, degree, m2 / most)
(a4 / and, op, m / mean-01)
(k / kind, mod, t / this)
(m / mean-01, ARG1, s / select-01)
(m / mean-01, mod, a / appropriate)
(m / mean-01, mod, a2 / apparent)
(p / promise-01, ARG0, i / intelligence)
(p / promise-01, ARG1, a3 / and)
(p / promise-01, ARG2, a4 / and)
(p / promise-01, location, r / relative)
(s / select-01, ARG0, p2 / pupil)
(s / select-01, ARG1, k / kind)

Decoded in 144,823 microseconds
Sentence: crowds of albanians who dodged bullets to storm into foreign embassies in tirana were sitting tight today after the leaders of europes last stalinist outpost promised to grant them passage abroad

NER Entity: (country :name (name :op "tirana"))
Spans:
Span 30-31:  abroad => abroad
Span 17-18:  after => after
Span 5-6:  bullets => bullet
Span 0-1:  crowds => crowd
Span 10-11:  embassies => embassy
Span 9-10:  foreign => foreign
Span 27-28:  grant => grant-01
Span 22-23:  last => last
Span 19-20:  leaders => (person :ARG0-of lead-02)
Span 29-30:  passage => pass-01
Span 25-26:  promised => promise-01
Span 14-15:  sitting => sit-01
Span 7-8:  storm => storm
Span 15-16:  tight => tight
Span 16-17:  today => today

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),abroad,abroad,false), Span(29,30,List(1),passage,pass-01,false), Span(27,28,List(2),grant,grant-01,false), Span(25,26,List(3),promised,promise-01,false), Span(22,23,List(4),last,last,false), Span(19,20,List(6, 5),leaders,(person :ARG0-of lead-02),false), Span(17,18,List(7),after,after,false), Span(16,17,List(8),today,today,false), Span(15,16,List(9),tight,tight,false), Span(14,15,List(10),sitting,sit-01,false), Span(10,11,List(11),embassies,embassy,false), Span(9,10,List(12),foreign,foreign,false), Span(7,8,List(13),storm,storm,false), Span(5,6,List(14),bullets,bullet,false), Span(0,1,List(15),crowds,crowd,false)),Map(2 -> grant-01, 5 -> person, 12 -> foreign, 15 -> crowd, 8 -> today, 7 -> after, 1 -> pass-01, 4 -> last, 11 -> embassy, 14 -> bullet, 6 -> lead-02, 0 -> abroad, 9 -> tight, 3 -> promise-01, 10 -> sit-01, 13 -> storm),Map(e -> embassy, s2 -> storm, b -> bullet, t -> today, p2 -> promise-01, s -> sit-01, p -> pass-01, g -> grant-01, a -> abroad, t2 -> tight, l2 -> lead-02, a2 -> after, c -> crowd, l -> last, f -> foreign, p3 -> person))),[Ljava.lang.String;@3d9958d6,Annotation([Ljava.lang.String;@1e976932,[Ljava.lang.String;@667b614e,[Ljava.lang.String;@2e317c72),Annotation([Ljava.lang.String;@32e1380f,[Ljava.lang.String;@60277ae1,[Ledu.cmu.lti.nlp.amr.Dependency;@3ff47b18),Annotation([Ljava.lang.String;@4bbd8575,[Ljava.lang.String;@784eb2c,[Ljava.lang.String;@276b998f),Annotation([Ljava.lang.String;@92e8f81,[Ljava.lang.String;@4fcf62dc,[Ledu.cmu.lti.nlp.amr.Entity;@38638273))
AMR:
(a2 / after, op, p2 / promise-01)
(e / embassy, mod, f / foreign)
(g / grant-01, ARG0, b / bullet)
(l2 / lead-02, ARG0, p3 / person)
(p / pass-01, ARG0, p3 / person)
(p / pass-01, ARG1, s2 / storm)
(p / pass-01, time, l / last)
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, ARG1, f / foreign)
(p2 / promise-01, ARG2, g / grant-01)
(p2 / promise-01, location, a / abroad)
(s / sit-01, ARG1, c / crowd)
(s / sit-01, ARG2, t2 / tight)
(s / sit-01, time, a2 / after)
(s / sit-01, time, t / today)

Decoded in 299,324 microseconds
Sentence: sarah eventually called when she got her phone two weeks later than promised and she still hadnt come home to see them

Spans:
Span 13-14:  and => and
Span 1-2:  eventually => eventual
Span 18-19:  home => home
Span 10-11:  later => late
Span 7-8:  phone => phone
Span 12-13:  promised => promise-01
Span 20-21:  see => see-01
Span 14-15:  she => she
Span 4-5:  she => she
Span 15-16:  still => still
Span 8-9:  two => 2
Span 9-10:  weeks => (temporal-quantity :unit week)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),see,see-01,false), Span(18,19,List(1),home,home,false), Span(15,16,List(2),still,still,false), Span(14,15,List(3),she,she,false), Span(13,14,List(4),and,and,false), Span(12,13,List(5),promised,promise-01,false), Span(10,11,List(6),later,late,false), Span(9,10,List(8, 7),weeks,(temporal-quantity :unit week),false), Span(8,9,List(9),two,2,false), Span(7,8,List(10),phone,phone,false), Span(4,5,List(11),she,she,false), Span(1,2,List(12),eventually,eventual,false)),Map(2 -> still, 5 -> promise-01, 12 -> eventual, 8 -> week, 7 -> temporal-quantity, 1 -> home, 4 -> and, 11 -> she, 6 -> late, 0 -> see-01, 9 -> 2, 3 -> she, 10 -> phone),Map(e -> eventual, w -> week, h -> home, 2 -> 2, s2 -> still, t -> temporal-quantity, p2 -> phone, s -> see-01, s4 -> she, p -> promise-01, a -> and, s3 -> she, l -> late))),[Ljava.lang.String;@d0968f1,Annotation([Ljava.lang.String;@64c8ace6,[Ljava.lang.String;@32cf63bb,[Ljava.lang.String;@4d9ca40c),Annotation([Ljava.lang.String;@66d637a2,[Ljava.lang.String;@79dea16c,[Ledu.cmu.lti.nlp.amr.Dependency;@737f7f6),Annotation([Ljava.lang.String;@6b783b2d,[Ljava.lang.String;@22753e7a,[Ljava.lang.String;@3f58cd42),Annotation([Ljava.lang.String;@5f0bc88b,[Ljava.lang.String;@7e9b4e6c,[Ledu.cmu.lti.nlp.amr.Entity;@639d564))
AMR:
(a / and, op, p / promise-01)
(e / eventual, op, s / see-01)
(h / home, poss, s4 / she)
(h / home, purpose, s / see-01)
(l / late, op, t / temporal-quantity)
(p / promise-01, ARG0, s4 / she)
(p / promise-01, ARG1, s2 / still)
(p2 / phone, poss, s4 / she)
(s / see-01, ARG0, s3 / she)
(s / see-01, ARG1, l / late)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, w / week)

Decoded in 162,014 microseconds
Sentence: or promised according to taste dash

Spans:
Span 0-1:  or => or
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),promised,promise-01,false), Span(0,1,List(1),or,or,false)),Map(1 -> or, 0 -> promise-01),Map(p -> promise-01, o -> or))),[Ljava.lang.String;@3ee89b6d,Annotation([Ljava.lang.String;@1934315f,[Ljava.lang.String;@319560e6,[Ljava.lang.String;@460cb578),Annotation([Ljava.lang.String;@6c5dfd35,[Ljava.lang.String;@e9ada28,[Ledu.cmu.lti.nlp.amr.Dependency;@58687f95),Annotation([Ljava.lang.String;@34903c8b,[Ljava.lang.String;@6976e4a2,[Ljava.lang.String;@7c9c7dc5),Annotation([Ljava.lang.String;@605506d,[Ljava.lang.String;@46e32731,[Ledu.cmu.lti.nlp.amr.Entity;@6b222652))
AMR:
(o / or, op, p / promise-01)

Decoded in 5,952 microseconds
Sentence: is it with any sadness that culham and harwell have seen these people go  yes its always sad to say farewell to collegues that have been with you for a number of years but all things have to come to an end we say farewell with sadness and vocal soundum fond memories to those whove been with us for so long but we welcome all those who are joining us and we can promise them a thriving future

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = is it with any sadness that culham and harwell have seen these people go  yes its always sad to say farewell to collegues that have been with you for a number of years but all things have to come to an end we say farewell with sadness and vocal soundum fond memories to those whove been with us for so long but we welcome all those who are joining us and we can promise them a thriving future
myTokenized = is it with any sadness that culham and harwell have seen these people go yes its always sad to say farewell to collegues that have been with you for a number of years but all things have to come to an end we say farewell with sadness and vocal soundum fond memories to those whove been with us for so long but we welcome all those who are joining us and we can promise them a thriving future
i = 14
prefix = List(is, it, with, any, sadness, that, culham, and, harwell, have, seen, these, people, go, yes)
regexr = \Qi\E ?\Qs\E ?\Qi\E ?\Qt\E ?\Qw\E ?\Qi\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qn\E ?\Qy\E ?\Qs\E ?\Qa\E ?\Qd\E ?\Qn\E ?\Qe\E ?\Qs\E ?\Qs\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qc\E ?\Qu\E ?\Ql\E ?\Qh\E ?\Qa\E ?\Qm\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qh\E ?\Qa\E ?\Qr\E ?\Qw\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qh\E ?\Qa\E ?\Qv\E ?\Qe\E ?\Qs\E ?\Qe\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qe\E ?\Qp\E ?\Qe\E ?\Qo\E ?\Qp\E ?\Ql\E ?\Qe\E ?\Qg\E ?\Qo\E ?\Qy\E ?\Qe\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the young raciallymixed crowd of 50000 selfstyled comrades chanted the catchy campaign hymn that promised my first vote will make our star shine

Spans:
Span 5-6:  50000 => 50000
Span 11-12:  campaign => campaign-01
Span 8-9:  chanted => chant-01
Span 7-8:  comrades => (have-rel-role-91 :ARG2 comrade)
Span 3-4:  crowd => crowd
Span 14-15:  promised => promise-01
Span 22-23:  shine => shine-01
Span 21-22:  star => star
Span 17-18:  vote => vote-01
Span 1-2:  young => young

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),shine,shine-01,false), Span(21,22,List(1),star,star,false), Span(17,18,List(2),vote,vote-01,false), Span(14,15,List(3),promised,promise-01,false), Span(11,12,List(4),campaign,campaign-01,false), Span(8,9,List(5),chanted,chant-01,false), Span(7,8,List(7, 6),comrades,(have-rel-role-91 :ARG2 comrade),false), Span(5,6,List(8),50000,50000,false), Span(3,4,List(9),crowd,crowd,false), Span(1,2,List(10),young,young,false)),Map(2 -> vote-01, 5 -> chant-01, 8 -> 50000, 7 -> comrade, 1 -> star, 4 -> campaign-01, 6 -> have-rel-role-91, 9 -> crowd, 0 -> shine-01, 10 -> young, 3 -> promise-01),Map(h -> have-rel-role-91, 5 -> 50000, s2 -> star, c4 -> crowd, s -> shine-01, v -> vote-01, y -> young, p -> promise-01, c3 -> comrade, c -> campaign-01, c2 -> chant-01))),[Ljava.lang.String;@4e783a69,Annotation([Ljava.lang.String;@3742ebbe,[Ljava.lang.String;@a83234a,[Ljava.lang.String;@2781d4aa),Annotation([Ljava.lang.String;@3cb0f929,[Ljava.lang.String;@6b611e0,[Ledu.cmu.lti.nlp.amr.Dependency;@1b4f8c91),Annotation([Ljava.lang.String;@3959199,[Ljava.lang.String;@5089d5a5,[Ljava.lang.String;@9296cf2),Annotation([Ljava.lang.String;@7eaf8890,[Ljava.lang.String;@362ee6ea,[Ledu.cmu.lti.nlp.amr.Entity;@413a2870))
AMR:
(c / campaign-01, ARG1, v / vote-01)
(c2 / chant-01, ARG0, h / have-rel-role-91)
(c2 / chant-01, ARG1, c4 / crowd)
(c4 / crowd, mod, y / young)
(h / have-rel-role-91, ARG2, c3 / comrade)
(p / promise-01, ARG0, c4 / crowd)
(p / promise-01, ARG1, v / vote-01)
(s / shine-01, ARG0, v / vote-01)
(s / shine-01, ARG1, s2 / star)
(v / vote-01, ARG1, 5 / 50000)

Decoded in 124,118 microseconds
Sentence: to promise action to halt the slide

Spans:
Span 2-3:  action => action
Span 4-5:  halt => halt-01
Span 1-2:  promise => promise-01
Span 6-7:  slide => slide-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),slide,slide-01,false), Span(4,5,List(1),halt,halt-01,false), Span(2,3,List(2),action,action,false), Span(1,2,List(3),promise,promise-01,false)),Map(2 -> action, 1 -> halt-01, 0 -> slide-01, 3 -> promise-01),Map(h -> halt-01, s -> slide-01, p -> promise-01, a -> action))),[Ljava.lang.String;@5134f284,Annotation([Ljava.lang.String;@6b1de1c2,[Ljava.lang.String;@76d0be7e,[Ljava.lang.String;@28a7f23),Annotation([Ljava.lang.String;@52a0d422,[Ljava.lang.String;@3cc72e8f,[Ledu.cmu.lti.nlp.amr.Dependency;@38c1cd75),Annotation([Ljava.lang.String;@3b97d96f,[Ljava.lang.String;@6e4424f9,[Ljava.lang.String;@3bd78ffd),Annotation([Ljava.lang.String;@452e49bc,[Ljava.lang.String;@61eaf91f,[Ledu.cmu.lti.nlp.amr.Entity;@9899472))
AMR:
(h / halt-01, ARG0, a / action)
(h / halt-01, ARG1, s / slide-01)
(p / promise-01, ARG2, h / halt-01)

Decoded in 9,011 microseconds
Sentence: he promised a shock of credibility to beat inflation

Spans:
Span 7-8:  beat => beat-01
Span 5-6:  credibility => credibility
Span 0-1:  he => he
Span 8-9:  inflation => inflation
Span 1-2:  promised => promise-01
Span 3-4:  shock => shock-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),inflation,inflation,false), Span(7,8,List(1),beat,beat-01,false), Span(5,6,List(2),credibility,credibility,false), Span(3,4,List(3),shock,shock-01,false), Span(1,2,List(4),promised,promise-01,false), Span(0,1,List(5),he,he,false)),Map(2 -> credibility, 5 -> he, 1 -> beat-01, 4 -> promise-01, 0 -> inflation, 3 -> shock-01),Map(h -> he, b -> beat-01, s -> shock-01, p -> promise-01, i -> inflation, c -> credibility))),[Ljava.lang.String;@2770cd42,Annotation([Ljava.lang.String;@5eb3bc48,[Ljava.lang.String;@6a0e4b8a,[Ljava.lang.String;@5081876b),Annotation([Ljava.lang.String;@67e1ab17,[Ljava.lang.String;@10a7a849,[Ledu.cmu.lti.nlp.amr.Dependency;@6f195929),Annotation([Ljava.lang.String;@692ccbba,[Ljava.lang.String;@7bf35647,[Ljava.lang.String;@24a58ee4),Annotation([Ljava.lang.String;@71482d87,[Ljava.lang.String;@39a5342b,[Ledu.cmu.lti.nlp.amr.Entity;@d04109e))
AMR:
(b / beat-01, ARG1, i / inflation)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, c / credibility)
(s / shock-01, ARG0, h / he)
(s / shock-01, ARG1, b / beat-01)

Decoded in 15,170 microseconds
Sentence: the term anzac would hardly have satisfied the trade descriptions act in view of the appearance of only three allblacks instead of the seven originally promised by the new zealand rfu

Spans:
Span 10-11:  act => act-02
Span 15-16:  appearance => appear-01
Span 4-5:  hardly => hardly
Span 20-21:  instead => instead
Span 28-29:  new => new
Span 17-18:  only => only
Span 24-25:  originally => original
Span 25-26:  promised => promise-01
Span 6-7:  satisfied => satisfy-01
Span 23-24:  seven => 7
Span 1-2:  term => term
Span 18-19:  three => 3
Span 8-9:  trade => trade-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),new,new,false), Span(25,26,List(1),promised,promise-01,false), Span(24,25,List(2),originally,original,false), Span(23,24,List(3),seven,7,false), Span(20,21,List(4),instead,instead,false), Span(18,19,List(5),three,3,false), Span(17,18,List(6),only,only,false), Span(15,16,List(7),appearance,appear-01,false), Span(10,11,List(8),act,act-02,false), Span(8,9,List(9),trade,trade-01,false), Span(6,7,List(10),satisfied,satisfy-01,false), Span(4,5,List(11),hardly,hardly,false), Span(1,2,List(12),term,term,false)),Map(2 -> original, 5 -> 3, 12 -> term, 8 -> act-02, 7 -> appear-01, 1 -> promise-01, 4 -> instead, 11 -> hardly, 6 -> only, 0 -> new, 9 -> trade-01, 3 -> 7, 10 -> satisfy-01),Map(n -> new, h -> hardly, t -> trade-01, s -> satisfy-01, 7 -> 7, p -> promise-01, a -> appear-01, o2 -> only, t2 -> term, i -> instead, a2 -> act-02, o -> original, 3 -> 3))),[Ljava.lang.String;@5defbbf,Annotation([Ljava.lang.String;@7261bb9b,[Ljava.lang.String;@6e63f7c7,[Ljava.lang.String;@6520626f),Annotation([Ljava.lang.String;@311e9947,[Ljava.lang.String;@4fe11d82,[Ledu.cmu.lti.nlp.amr.Dependency;@44586ac6),Annotation([Ljava.lang.String;@8ca1038,[Ljava.lang.String;@9eed10a,[Ljava.lang.String;@1dddec9e),Annotation([Ljava.lang.String;@54d98863,[Ljava.lang.String;@1589471a,[Ledu.cmu.lti.nlp.amr.Entity;@679b0701))
AMR:
(a / appear-01, ARG0, i / instead)
(a / appear-01, ARG1, o2 / only)
(a2 / act-02, ARG1, a / appear-01)
(p / promise-01, ARG0, t2 / term)
(p / promise-01, ARG1, a / appear-01)
(p / promise-01, time, 7 / 7)
(p / promise-01, time, o / original)
(s / satisfy-01, ARG1, a2 / act-02)
(s / satisfy-01, mod, h / hardly)
(t / trade-01, ARG0, n / new)
(t / trade-01, ARG1, 3 / 3)
(t / trade-01, ARG2, s / satisfy-01)

Decoded in 164,506 microseconds
Sentence: the university of zimbabwe closed for the first time in its 32year history on 4 october after riots erupted reopens temporarily today for exams but students must sign a statement promising not to engage in political activity

NER Entity: (country :name (name :op "zimbabwe"))
Spans:
Span 14-15:  4 => 4
Span 36-37:  activity => activity
Span 16-17:  after => after
Span 24-25:  but => contrast-01
Span 4-5:  closed => close-01
Span 33-34:  engage => engage-01
Span 18-19:  erupted => erupt-01
Span 12-13:  history => history
Span 15-16:  october => (date-entity :month 10)
Span 35-36:  political => politics
Span 30-31:  promising => promise-01
Span 17-18:  riots => riot-01
Span 29-30:  statement => state-01
Span 25-26:  students => (person :ARG0-of study-01)
Span 20-21:  temporarily => temporary
Span 8-9:  time => time
Span 21-22:  today => today
Span 1-2:  university => university

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),activity,activity,false), Span(35,36,List(1),political,politics,false), Span(33,34,List(2),engage,engage-01,false), Span(30,31,List(3),promising,promise-01,false), Span(29,30,List(4),statement,state-01,false), Span(25,26,List(6, 5),students,(person :ARG0-of study-01),false), Span(24,25,List(7),but,contrast-01,false), Span(21,22,List(8),today,today,false), Span(20,21,List(9),temporarily,temporary,false), Span(18,19,List(10),erupted,erupt-01,false), Span(17,18,List(11),riots,riot-01,false), Span(16,17,List(12),after,after,false), Span(15,16,List(14, 13),october,(date-entity :month 10),false), Span(14,15,List(15),4,4,false), Span(12,13,List(16),history,history,false), Span(8,9,List(17),time,time,false), Span(4,5,List(18),closed,close-01,false), Span(1,2,List(19),university,university,false)),Map(2 -> engage-01, 5 -> person, 12 -> after, 15 -> 4, 8 -> today, 18 -> close-01, 7 -> contrast-01, 17 -> time, 1 -> politics, 4 -> state-01, 11 -> riot-01, 14 -> 10, 6 -> study-01, 0 -> activity, 9 -> temporary, 16 -> history, 19 -> university, 3 -> promise-01, 10 -> erupt-01, 13 -> date-entity),Map(e -> engage-01, h -> history, s2 -> study-01, t -> today, p2 -> promise-01, e2 -> erupt-01, s -> state-01, d -> date-entity, t3 -> time, 1 -> 10, p -> politics, 4 -> 4, a -> activity, t2 -> temporary, r -> riot-01, a2 -> after, c -> contrast-01, u -> university, p3 -> person, c2 -> close-01))),[Ljava.lang.String;@72e907ca,Annotation([Ljava.lang.String;@20fe99b6,[Ljava.lang.String;@2b1d8ca6,[Ljava.lang.String;@20fcfc67),Annotation([Ljava.lang.String;@411edf1c,[Ljava.lang.String;@51c9c8aa,[Ledu.cmu.lti.nlp.amr.Dependency;@16953ad9),Annotation([Ljava.lang.String;@1f4a8824,[Ljava.lang.String;@56300388,[Ljava.lang.String;@6a3801ec),Annotation([Ljava.lang.String;@306636f,[Ljava.lang.String;@186a0df6,[Ledu.cmu.lti.nlp.amr.Entity;@5aba9dff))
AMR:
(a / activity, mod, p / politics)
(a2 / after, op, d / date-entity)
(a2 / after, op, e2 / erupt-01)
(c / contrast-01, ARG0, t2 / temporary)
(c / contrast-01, ARG1, t / today)
(c2 / close-01, ARG0, u / university)
(c2 / close-01, ARG1, t3 / time)
(c2 / close-01, time, a2 / after)
(d / date-entity, month, 1 / 10)
(d / date-entity, quant, 4 / 4)
(e / engage-01, ARG2, a / activity)
(e2 / erupt-01, ARG1, r / riot-01)
(p2 / promise-01, ARG0, s / state-01)
(p2 / promise-01, ARG1, r / riot-01)
(p2 / promise-01, ARG2, e / engage-01)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, c / contrast-01)
(s2 / study-01, ARG0, p3 / person)
(t3 / time, poss, h / history)

Decoded in 312,911 microseconds
Sentence: shed promised the girl a lift as far as malaga

Spans:
Span 7-8:  far => far
Span 3-4:  girl => girl
Span 5-6:  lift => lift-01
Span 1-2:  promised => promise-01
Span 0-1:  shed => shed-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),far,far,false), Span(5,6,List(1),lift,lift-01,false), Span(3,4,List(2),girl,girl,false), Span(1,2,List(3),promised,promise-01,false), Span(0,1,List(4),shed,shed-01,false)),Map(2 -> girl, 1 -> lift-01, 4 -> shed-01, 0 -> far, 3 -> promise-01),Map(s -> shed-01, p -> promise-01, g -> girl, l -> lift-01, f -> far))),[Ljava.lang.String;@4093b096,Annotation([Ljava.lang.String;@202e68f9,[Ljava.lang.String;@46edc3f0,[Ljava.lang.String;@23dae5f1),Annotation([Ljava.lang.String;@782e439a,[Ljava.lang.String;@2558711a,[Ledu.cmu.lti.nlp.amr.Dependency;@5169751d),Annotation([Ljava.lang.String;@6287ecac,[Ljava.lang.String;@49c342bd,[Ljava.lang.String;@3252ac20),Annotation([Ljava.lang.String;@51a282af,[Ljava.lang.String;@431d908,[Ledu.cmu.lti.nlp.amr.Entity;@649f9e5e))
AMR:
(l / lift-01, ARG1, g / girl)
(p / promise-01, ARG1, g / girl)
(p / promise-01, manner, f / far)
(s / shed-01, ARG1, p / promise-01)

Decoded in 35,453 microseconds
Sentence: the nearest house alida had promised herself in her short desperate journey through the storm the nearest house and she had spoken the words to isabel sweating and terrified by the harshness of her own breathing by the lightning and rain while skirting the edge of the open field she dared not cross

Spans:
Span 39-40:  and => and
Span 27-28:  and => and
Span 18-19:  and => and
Span 35-36:  breathing => breathe-01
Span 52-53:  cross => cross-02
Span 50-51:  dared => dare-01
Span 10-11:  desperate => desperate
Span 48-49:  field => field
Span 17-18:  house => house
Span 2-3:  house => house
Span 11-12:  journey => journey-01
Span 16-17:  nearest => (near :degree most)
Span 1-2:  nearest => (near :degree most)
Span 5-6:  promised => promise-01
Span 40-41:  rain => rain-01
Span 49-50:  she => she
Span 19-20:  she => she
Span 9-10:  short => short
Span 21-22:  spoken => speak-01
Span 14-15:  storm => storm
Span 28-29:  terrified => terrify-01
Span 23-24:  words => word

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(52,53,List(0),cross,cross-02,false), Span(50,51,List(1),dared,dare-01,false), Span(49,50,List(2),she,she,false), Span(48,49,List(3),field,field,false), Span(40,41,List(4),rain,rain-01,false), Span(39,40,List(5),and,and,false), Span(35,36,List(6),breathing,breathe-01,false), Span(28,29,List(7),terrified,terrify-01,false), Span(27,28,List(8),and,and,false), Span(23,24,List(9),words,word,false), Span(21,22,List(10),spoken,speak-01,false), Span(19,20,List(11),she,she,false), Span(18,19,List(12),and,and,false), Span(17,18,List(13),house,house,false), Span(16,17,List(15, 14),nearest,(near :degree most),false), Span(14,15,List(16),storm,storm,false), Span(11,12,List(17),journey,journey-01,false), Span(10,11,List(18),desperate,desperate,false), Span(9,10,List(19),short,short,false), Span(5,6,List(20),promised,promise-01,false), Span(2,3,List(21),house,house,false), Span(1,2,List(23, 22),nearest,(near :degree most),false)),Map(2 -> she, 5 -> and, 12 -> and, 15 -> most, 8 -> and, 21 -> house, 18 -> desperate, 7 -> terrify-01, 17 -> journey-01, 1 -> dare-01, 23 -> most, 4 -> rain-01, 11 -> she, 14 -> near, 20 -> promise-01, 6 -> breathe-01, 22 -> near, 0 -> cross-02, 9 -> word, 16 -> storm, 19 -> short, 3 -> field, 10 -> speak-01, 13 -> house),Map(s5 -> short, n -> near, w -> word, h -> house, h2 -> house, s2 -> speak-01, b -> breathe-01, t -> terrify-01, m2 -> most, j -> journey-01, a3 -> and, s -> she, s4 -> storm, m -> most, d -> dare-01, p -> promise-01, a -> and, d2 -> desperate, r -> rain-01, a2 -> and, c -> cross-02, s3 -> she, f -> field, n2 -> near))),[Ljava.lang.String;@4aee808a,Annotation([Ljava.lang.String;@70390a74,[Ljava.lang.String;@30dd7f3b,[Ljava.lang.String;@1dcc138d),Annotation([Ljava.lang.String;@41179d43,[Ljava.lang.String;@7555bb17,[Ledu.cmu.lti.nlp.amr.Dependency;@4f6e1f2f),Annotation([Ljava.lang.String;@46c16f66,[Ljava.lang.String;@4578b5d4,[Ljava.lang.String;@77e994ed),Annotation([Ljava.lang.String;@830911c,[Ljava.lang.String;@2c86c977,[Ledu.cmu.lti.nlp.amr.Entity;@4514ba77))
AMR:
(a / and, op, b / breathe-01)
(a / and, op, r / rain-01)
(a2 / and, op, t / terrify-01)
(a3 / and, op, a / and)
(a3 / and, op, s2 / speak-01)
(a3 / and, op, s3 / she)
(d / dare-01, ARG0, s / she)
(d / dare-01, ARG1, f / field)
(d / dare-01, ARG2, c / cross-02)
(h / house, mod, n / near)
(j / journey-01, ARG1, s4 / storm)
(j / journey-01, manner, d2 / desperate)
(j / journey-01, mod, s5 / short)
(n / near, degree, m / most)
(n2 / near, degree, m2 / most)
(p / promise-01, ARG0, n2 / near)
(p / promise-01, ARG1, h2 / house)
(p / promise-01, ARG2, a2 / and)
(p / promise-01, prep-by, j / journey-01)
(s2 / speak-01, ARG0, a2 / and)
(s2 / speak-01, ARG1, w / word)
(s2 / speak-01, ARG2, h / house)
(t / terrify-01, ARG1, d / dare-01)

Decoded in 1,103,718 microseconds
Sentence:   bryan gould labours environment spokesman promised a constructive response but said a genuine green bill would have at its heart a programme to reduce carbon dioxide and other greenhouse gas emissions

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   bryan gould labours environment spokesman promised a constructive response but said a genuine green bill would have at its heart a programme to reduce carbon dioxide and other greenhouse gas emissions
myTokenized = bryan gould labours environment spokesman promised a constructive response but said a genuine green bill would have at its heart a programme to reduce carbon dioxide and other greenhouse gas emissions
i = 0
prefix = List(bryan)
regexr = \Qb\E ?\Qr\E ?\Qy\E ?\Qa\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he had not received the fair play which george v had promised

NER Entity: (organization :name (name :op "george"))
Spans:
Span 5-6:  fair => fair
Span 0-1:  he => he
Span 6-7:  play => play-01
Span 11-12:  promised => promise-01
Span 3-4:  received => receive-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promised,promise-01,false), Span(6,7,List(1),play,play-01,false), Span(5,6,List(2),fair,fair,false), Span(3,4,List(3),received,receive-01,false), Span(0,1,List(4),he,he,false)),Map(2 -> fair, 1 -> play-01, 4 -> he, 0 -> promise-01, 3 -> receive-01),Map(h -> he, p2 -> play-01, p -> promise-01, r -> receive-01, f -> fair))),[Ljava.lang.String;@1352b5cd,Annotation([Ljava.lang.String;@1b1dafa4,[Ljava.lang.String;@39f645e4,[Ljava.lang.String;@57669976),Annotation([Ljava.lang.String;@10e53ece,[Ljava.lang.String;@3a7e4f0c,[Ledu.cmu.lti.nlp.amr.Dependency;@3a77bad4),Annotation([Ljava.lang.String;@a8ad249,[Ljava.lang.String;@1ff3bc07,[Ljava.lang.String;@3abd7ff4),Annotation([Ljava.lang.String;@6f1b8a4c,[Ljava.lang.String;@7914bc90,[Ledu.cmu.lti.nlp.amr.Entity;@4067d00a))
AMR:
(p / promise-01, ARG0, h / he)
(p2 / play-01, degree, f / fair)
(r / receive-01, ARG0, h / he)
(r / receive-01, ARG1, p2 / play-01)

Decoded in 15,068 microseconds
Sentence: us analysts were impressed that mr gorbachev this week promised that the newlyelected supreme soviet would debate the issues behind the strike

NER Entity: (country :name (name :op "soviet"))
Spans:
Span 1-2:  analysts => (person :ARG0-of analyze-01)
Span 19-20:  behind => behind
Span 16-17:  debate => debate-01
Span 3-4:  impressed => impress-01
Span 18-19:  issues => issue
Span 9-10:  promised => promise-01
Span 21-22:  strike => strike-01
Span 13-14:  supreme => supreme
Span 7-8:  this => this
Span 8-9:  week => week

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),strike,strike-01,false), Span(19,20,List(1),behind,behind,false), Span(18,19,List(2),issues,issue,false), Span(16,17,List(3),debate,debate-01,false), Span(13,14,List(4),supreme,supreme,false), Span(9,10,List(5),promised,promise-01,false), Span(8,9,List(6),week,week,false), Span(7,8,List(7),this,this,false), Span(3,4,List(8),impressed,impress-01,false), Span(1,2,List(10, 9),analysts,(person :ARG0-of analyze-01),false)),Map(2 -> issue, 5 -> promise-01, 8 -> impress-01, 7 -> this, 1 -> behind, 4 -> supreme, 6 -> week, 9 -> person, 0 -> strike-01, 10 -> analyze-01, 3 -> debate-01),Map(w -> week, t -> this, s2 -> supreme, b -> behind, p2 -> person, s -> strike-01, d -> debate-01, p -> promise-01, a -> analyze-01, i2 -> impress-01, i -> issue))),[Ljava.lang.String;@5f8b618e,Annotation([Ljava.lang.String;@37b1e2a3,[Ljava.lang.String;@7f9657e5,[Ljava.lang.String;@6764bcd3),Annotation([Ljava.lang.String;@6a8f5ad,[Ljava.lang.String;@3e993445,[Ledu.cmu.lti.nlp.amr.Dependency;@3c36be1e),Annotation([Ljava.lang.String;@2dfbc274,[Ljava.lang.String;@6b9b6541,[Ljava.lang.String;@2714c598),Annotation([Ljava.lang.String;@44b89233,[Ljava.lang.String;@31867584,[Ledu.cmu.lti.nlp.amr.Entity;@728d4682))
AMR:
(a / analyze-01, ARG0, p2 / person)
(b / behind, op, s / strike-01)
(d / debate-01, ARG1, i / issue)
(i / issue, location, b / behind)
(i2 / impress-01, ARG0, s2 / supreme)
(i2 / impress-01, ARG1, p2 / person)
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, d / debate-01)
(p / promise-01, time, w / week)
(w / week, mod, t / this)

Decoded in 208,139 microseconds
Sentence:  and andy was so impressed with their efforts that he photographed the alien models and has promised to include these shots in slide shows presented during every workshop

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  and andy was so impressed with their efforts that he photographed the alien models and has promised to include these shots in slide shows presented during every workshop
myTokenized = and andy was so impressed with their efforts that he photographed the alien models and has promised to include these shots in slide shows presented during every workshop
i = 0
prefix = List(and)
regexr = \Qa\E ?\Qn\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: besides she had turned down all other invitations for the weekend and what was left of it promised to be a dull affair

Spans:
Span 22-23:  affair => affair
Span 5-6:  all => all
Span 11-12:  and => and
Span 0-1:  besides => besides
Span 4-5:  down => down
Span 21-22:  dull => dull-01
Span 16-17:  it => it
Span 6-7:  other => other
Span 17-18:  promised => promise-01
Span 1-2:  she => she
Span 10-11:  weekend => weekend

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),affair,affair,false), Span(21,22,List(1),dull,dull-01,false), Span(17,18,List(2),promised,promise-01,false), Span(16,17,List(3),it,it,false), Span(11,12,List(4),and,and,false), Span(10,11,List(5),weekend,weekend,false), Span(6,7,List(6),other,other,false), Span(5,6,List(7),all,all,false), Span(4,5,List(8),down,down,false), Span(1,2,List(9),she,she,false), Span(0,1,List(10),besides,besides,false)),Map(2 -> promise-01, 5 -> weekend, 8 -> down, 7 -> all, 1 -> dull-01, 4 -> and, 6 -> other, 9 -> she, 0 -> affair, 10 -> besides, 3 -> it),Map(w -> weekend, b -> besides, s -> she, a3 -> all, d -> dull-01, p -> promise-01, a -> affair, d2 -> down, a2 -> and, i -> it, o -> other))),[Ljava.lang.String;@29c71bf,Annotation([Ljava.lang.String;@6cefb3ef,[Ljava.lang.String;@6d0e47c8,[Ljava.lang.String;@448ad367),Annotation([Ljava.lang.String;@763d3258,[Ljava.lang.String;@2bb46c0d,[Ledu.cmu.lti.nlp.amr.Dependency;@5221dfe5),Annotation([Ljava.lang.String;@2df25d83,[Ljava.lang.String;@2d95b06,[Ljava.lang.String;@be6e860),Annotation([Ljava.lang.String;@64a1fcba,[Ljava.lang.String;@46d74af3,[Ledu.cmu.lti.nlp.amr.Entity;@6079bbda))
AMR:
(a2 / and, op, d / dull-01)
(a2 / and, op, w / weekend)
(a3 / all, mod, d2 / down)
(b / besides, op, s / she)
(d / dull-01, ARG0, b / besides)
(d / dull-01, ARG1, a / affair)
(o / other, mod, d2 / down)
(p / promise-01, ARG0, o / other)
(p / promise-01, ARG1, a / affair)
(p / promise-01, ARG2, i / it)

Decoded in 364,625 microseconds
Sentence: she took the details into the office on sunday afternoon to show rain who had promised to call in at the office although it was hollys sunday for editing the column

Spans:
Span 9-10:  afternoon => afternoon
Span 30-31:  column => column
Span 3-4:  details => detail-01
Span 23-24:  it => it
Span 21-22:  office => office
Span 6-7:  office => office
Span 15-16:  promised => promise-01
Span 12-13:  rain => rain-01
Span 0-1:  she => she
Span 11-12:  show => show-01
Span 26-27:  sunday => sunday
Span 8-9:  sunday => sunday

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),column,column,false), Span(26,27,List(1),sunday,sunday,false), Span(23,24,List(2),it,it,false), Span(21,22,List(3),office,office,false), Span(15,16,List(4),promised,promise-01,false), Span(12,13,List(5),rain,rain-01,false), Span(11,12,List(6),show,show-01,false), Span(9,10,List(7),afternoon,afternoon,false), Span(8,9,List(8),sunday,sunday,false), Span(6,7,List(9),office,office,false), Span(3,4,List(10),details,detail-01,false), Span(0,1,List(11),she,she,false)),Map(2 -> it, 5 -> rain-01, 8 -> sunday, 7 -> afternoon, 1 -> sunday, 11 -> she, 4 -> promise-01, 6 -> show-01, 9 -> office, 0 -> column, 10 -> detail-01, 3 -> office),Map(s2 -> show-01, s -> sunday, s4 -> she, d -> detail-01, p -> promise-01, a -> afternoon, o2 -> office, r -> rain-01, i -> it, s3 -> sunday, c -> column, o -> office))),[Ljava.lang.String;@581c16b1,Annotation([Ljava.lang.String;@1c15eba8,[Ljava.lang.String;@632270ff,[Ljava.lang.String;@6a28a831),Annotation([Ljava.lang.String;@133a5f6a,[Ljava.lang.String;@5d4e3202,[Ledu.cmu.lti.nlp.amr.Dependency;@38b55129),Annotation([Ljava.lang.String;@7e377d5,[Ljava.lang.String;@66d044fe,[Ljava.lang.String;@7361b46d),Annotation([Ljava.lang.String;@138c9b49,[Ljava.lang.String;@7426dfa5,[Ledu.cmu.lti.nlp.amr.Entity;@24250536))
AMR:
(a / afternoon, mod, s3 / sunday)
(d / detail-01, ARG0, s4 / she)
(d / detail-01, ARG1, o2 / office)
(o / office, poss, i / it)
(o / office, poss, s4 / she)
(o2 / office, mod, s3 / sunday)
(p / promise-01, ARG0, s / sunday)
(p / promise-01, ARG1, r / rain-01)
(r / rain-01, ARG1, c / column)
(s2 / show-01, ARG0, s4 / she)
(s2 / show-01, ARG1, r / rain-01)

Decoded in 147,640 microseconds
Sentence: then sir alfred pulled in in his bentley and promised me a free hand to design a car that worked

Spans:
Span 8-9:  and => and
Span 17-18:  car => car
Span 15-16:  design => design-01
Span 12-13:  free => free-41
Span 13-14:  hand => hand
Span 9-10:  promised => promise-01
Span 0-1:  then => then
Span 19-20:  worked => work-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),worked,work-01,false), Span(17,18,List(1),car,car,false), Span(15,16,List(2),design,design-01,false), Span(13,14,List(3),hand,hand,false), Span(12,13,List(4),free,free-41,false), Span(9,10,List(5),promised,promise-01,false), Span(8,9,List(6),and,and,false), Span(0,1,List(7),then,then,false)),Map(2 -> design-01, 5 -> promise-01, 7 -> then, 1 -> car, 4 -> free-41, 6 -> and, 0 -> work-01, 3 -> hand),Map(w -> work-01, h -> hand, t -> then, d -> design-01, p -> promise-01, a -> and, c -> car, f -> free-41))),[Ljava.lang.String;@7a792ec3,Annotation([Ljava.lang.String;@29ed4306,[Ljava.lang.String;@17cb546b,[Ljava.lang.String;@26134901),Annotation([Ljava.lang.String;@3c1df42e,[Ljava.lang.String;@528a16d7,[Ledu.cmu.lti.nlp.amr.Dependency;@67e1a796),Annotation([Ljava.lang.String;@fc19e22,[Ljava.lang.String;@7074d242,[Ljava.lang.String;@59824bc),Annotation([Ljava.lang.String;@4793b582,[Ljava.lang.String;@32718e84,[Ledu.cmu.lti.nlp.amr.Entity;@3d4395fb))
AMR:
(a / and, op, p / promise-01)
(d / design-01, ARG1, c / car)
(f / free-41, ARG1, h / hand)
(p / promise-01, ARG0, t / then)
(p / promise-01, ARG1, h / hand)
(p / promise-01, ARG2, d / design-01)
(w / work-01, ARG1, c / car)

Decoded in 50,180 microseconds
Sentence:   i will she promised and promptly forgot when oliver got home a few minutes later

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   i will she promised and promptly forgot when oliver got home a few minutes later
myTokenized = i will she promised and promptly forgot when oliver got home a few minutes later
i = 0
prefix = List(i)
regexr = \Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he promised the union would exhaust all pay bargaining tactics before a strike ballot was held

Spans:
Span 6-7:  all => all
Span 13-14:  ballot => ballot
Span 8-9:  bargaining => bargain-01
Span 10-11:  before => before
Span 0-1:  he => he
Span 7-8:  pay => pay-01
Span 1-2:  promised => promise-01
Span 12-13:  strike => strike-01
Span 9-10:  tactics => tactic
Span 3-4:  union => union

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),ballot,ballot,false), Span(12,13,List(1),strike,strike-01,false), Span(10,11,List(2),before,before,false), Span(9,10,List(3),tactics,tactic,false), Span(8,9,List(4),bargaining,bargain-01,false), Span(7,8,List(5),pay,pay-01,false), Span(6,7,List(6),all,all,false), Span(3,4,List(7),union,union,false), Span(1,2,List(8),promised,promise-01,false), Span(0,1,List(9),he,he,false)),Map(2 -> before, 5 -> pay-01, 8 -> promise-01, 7 -> union, 1 -> strike-01, 4 -> bargain-01, 6 -> all, 9 -> he, 0 -> ballot, 3 -> tactic),Map(b3 -> bargain-01, h -> he, t -> tactic, b -> ballot, b2 -> before, p2 -> promise-01, s -> strike-01, p -> pay-01, a -> all, u -> union))),[Ljava.lang.String;@147c0b3f,Annotation([Ljava.lang.String;@5bc65f9a,[Ljava.lang.String;@3caea688,[Ljava.lang.String;@6e3749d7),Annotation([Ljava.lang.String;@6fd0fac8,[Ljava.lang.String;@10099d2,[Ledu.cmu.lti.nlp.amr.Dependency;@4e72aa81),Annotation([Ljava.lang.String;@4a182363,[Ljava.lang.String;@76bb5e95,[Ljava.lang.String;@73ec519),Annotation([Ljava.lang.String;@29fdf006,[Ljava.lang.String;@5e992f73,[Ledu.cmu.lti.nlp.amr.Entity;@1afa578a))
AMR:
(b3 / bargain-01, ARG1, s / strike-01)
(p / pay-01, ARG0, u / union)
(p / pay-01, ARG1, t / tactic)
(p / pay-01, mod, a / all)
(p / pay-01, time, b2 / before)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, u / union)
(s / strike-01, ARG1, b / ballot)
(t / tactic, purpose, b3 / bargain-01)

Decoded in 93,466 microseconds
Sentence: but the first night in boston passed off without incident he left for england promising lady gregory to return if the situation deteriorated

NER Entity: (country :name (name :op "boston"))
NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "england"))
Spans:
Span 0-1:  but => contrast-01
Span 22-23:  deteriorated => deteriorate-01
Span 13-14:  england => (country :name (name :op "England"))
Span 10-11:  he => he
Span 9-10:  incident => incident
Span 15-16:  lady => lady
Span 3-4:  night => night
Span 7-8:  off => off
Span 14-15:  promising => promise-01
Span 21-22:  situation => situation

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),deteriorated,deteriorate-01,false), Span(21,22,List(1),situation,situation,false), Span(15,16,List(2),lady,lady,false), Span(14,15,List(3),promising,promise-01,false), Span(13,14,List(6, 5, 4),england,(country :name (name :op "England")),false), Span(10,11,List(7),he,he,false), Span(9,10,List(8),incident,incident,false), Span(7,8,List(9),off,off,false), Span(3,4,List(10),night,night,false), Span(0,1,List(11),but,contrast-01,false)),Map(2 -> lady, 5 -> name, 8 -> incident, 7 -> he, 1 -> situation, 11 -> contrast-01, 4 -> country, 6 -> "England", 9 -> off, 0 -> deteriorate-01, 10 -> night, 3 -> promise-01),Map(n -> name, h -> he, s -> situation, d -> deteriorate-01, p -> promise-01, i -> incident, c -> country, l -> lady, o -> off, c2 -> contrast-01, n2 -> night))),[Ljava.lang.String;@298932dc,Annotation([Ljava.lang.String;@6e6a1ed1,[Ljava.lang.String;@790d63f8,[Ljava.lang.String;@5e1e6cde),Annotation([Ljava.lang.String;@1f7d9318,[Ljava.lang.String;@6d441cce,[Ledu.cmu.lti.nlp.amr.Dependency;@12bf506d),Annotation([Ljava.lang.String;@4e392db8,[Ljava.lang.String;@be8b327,[Ljava.lang.String;@5a49cb8c),Annotation([Ljava.lang.String;@22d282a3,[Ljava.lang.String;@2a7ead31,[Ledu.cmu.lti.nlp.amr.Entity;@629c81c2))
AMR:
(c / country, name, n / name)
(c2 / contrast-01, ARG0, i / incident)
(c2 / contrast-01, ARG1, s / situation)
(c2 / contrast-01, ARG2, n2 / night)
(d / deteriorate-01, ARG0, h / he)
(d / deteriorate-01, ARG1, s / situation)
(d / deteriorate-01, purpose, p / promise-01)
(l / lady, mod, c / country)
(n / name, op, "England")
(o / off, op, i / incident)
(p / promise-01, ARG1, l / lady)

Decoded in 152,831 microseconds
Sentence: the result of further investigation would i promise you be an article brimming with surprised enthusiasm and would go a long way towards radicalising the dating game in which no female participant ever regards herself as a failure

Spans:
Span 16-17:  and => and
Span 11-12:  article => article
Span 12-13:  brimming => brim-01
Span 25-26:  dating => date-02
Span 15-16:  enthusiasm => enthusiasm
Span 32-33:  ever => ever
Span 37-38:  failure => fail-01
Span 30-31:  female => female
Span 3-4:  further => further
Span 26-27:  game => game
Span 6-7:  i => i
Span 4-5:  investigation => investigate-01
Span 29-30:  no => -
Span 7-8:  promise => promise-01
Span 1-2:  result => result-01
Span 14-15:  surprised => surprise-01
Span 21-22:  way => way
Span 8-9:  you => you

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),failure,fail-01,false), Span(32,33,List(1),ever,ever,false), Span(30,31,List(2),female,female,false), Span(29,30,List(3),no,-,false), Span(26,27,List(4),game,game,false), Span(25,26,List(5),dating,date-02,false), Span(21,22,List(6),way,way,false), Span(16,17,List(7),and,and,false), Span(15,16,List(8),enthusiasm,enthusiasm,false), Span(14,15,List(9),surprised,surprise-01,false), Span(12,13,List(10),brimming,brim-01,false), Span(11,12,List(11),article,article,false), Span(8,9,List(12),you,you,false), Span(7,8,List(13),promise,promise-01,false), Span(6,7,List(14),i,i,false), Span(4,5,List(15),investigation,investigate-01,false), Span(3,4,List(16),further,further,false), Span(1,2,List(17),result,result-01,false)),Map(2 -> female, 5 -> date-02, 12 -> you, 15 -> investigate-01, 8 -> enthusiasm, 7 -> and, 17 -> result-01, 1 -> ever, 4 -> game, 11 -> article, 14 -> i, 6 -> way, 0 -> fail-01, 9 -> surprise-01, 16 -> further, 3 -> -, 10 -> brim-01, 13 -> promise-01),Map(e -> ever, w -> way, b -> brim-01, e2 -> enthusiasm, s -> surprise-01, d -> date-02, g -> game, y -> you, p -> promise-01, a -> and, f3 -> further, i2 -> investigate-01, r -> result-01, i -> i, a2 -> article, - -> -, f2 -> female, f -> fail-01))),[Ljava.lang.String;@6fe0b6eb,Annotation([Ljava.lang.String;@a0937af,[Ljava.lang.String;@6326c74e,[Ljava.lang.String;@6e704bd),Annotation([Ljava.lang.String;@28e817d5,[Ljava.lang.String;@1d74b5ee,[Ledu.cmu.lti.nlp.amr.Dependency;@59542b5d),Annotation([Ljava.lang.String;@24eb147c,[Ljava.lang.String;@458debd3,[Ljava.lang.String;@68758d51),Annotation([Ljava.lang.String;@7d90f66a,[Ljava.lang.String;@3821e98d,[Ledu.cmu.lti.nlp.amr.Entity;@3a6c44c5))
AMR:
(a / and, op, a2 / article)
(a2 / article, domain, y / you)
(b / brim-01, ARG0, a2 / article)
(b / brim-01, ARG1, e2 / enthusiasm)
(d / date-02, ARG1, g / game)
(d / date-02, ARG2, w / way)
(f / fail-01, ARG1, a / and)
(i2 / investigate-01, ARG0, - / -)
(i2 / investigate-01, ARG1, f2 / female)
(i2 / investigate-01, degree, f3 / further)
(p / promise-01, ARG0, r / result-01)
(p / promise-01, ARG1, a2 / article)
(p / promise-01, manner, i / i)
(r / result-01, ARG1, i2 / investigate-01)
(s / surprise-01, ARG0, e / ever)
(s / surprise-01, ARG1, e2 / enthusiasm)
(w / way, domain, a / and)

Decoded in 524,402 microseconds
Sentence: now he too was waiting for a phone call promised for the afternoon

Spans:
Span 12-13:  afternoon => afternoon
Span 1-2:  he => he
Span 0-1:  now => now
Span 7-8:  phone => phone
Span 9-10:  promised => promise-01
Span 2-3:  too => too
Span 4-5:  waiting => wait-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),afternoon,afternoon,false), Span(9,10,List(1),promised,promise-01,false), Span(7,8,List(2),phone,phone,false), Span(4,5,List(3),waiting,wait-01,false), Span(2,3,List(4),too,too,false), Span(1,2,List(5),he,he,false), Span(0,1,List(6),now,now,false)),Map(2 -> phone, 5 -> he, 1 -> promise-01, 4 -> too, 6 -> now, 0 -> afternoon, 3 -> wait-01),Map(n -> now, w -> wait-01, h -> he, t -> too, p2 -> phone, p -> promise-01, a -> afternoon))),[Ljava.lang.String;@1a16ff7a,Annotation([Ljava.lang.String;@5bdeaff7,[Ljava.lang.String;@78f2b03f,[Ljava.lang.String;@5113622),Annotation([Ljava.lang.String;@2cf8f4c7,[Ljava.lang.String;@c8e4be2,[Ledu.cmu.lti.nlp.amr.Dependency;@5217e8de),Annotation([Ljava.lang.String;@1fb970ed,[Ljava.lang.String;@47a4e7e0,[Ljava.lang.String;@1b7347df),Annotation([Ljava.lang.String;@2d738f8d,[Ljava.lang.String;@7dd5894a,[Ledu.cmu.lti.nlp.amr.Entity;@4e2899d0))
AMR:
(p / promise-01, ARG1, a / afternoon)
(w / wait-01, ARG0, h / he)
(w / wait-01, ARG1, p2 / phone)
(w / wait-01, mod, t / too)
(w / wait-01, time, n / now)
(w / wait-01, time, p / promise-01)

Decoded in 31,310 microseconds
Sentence: the home office has also promised a shakeup of the training and selection of senior police officers but rejected mps calls for a central pool for appointments to the highest ranks

Spans:
Span 4-5:  also => also
Span 11-12:  and => and
Span 17-18:  but => contrast-01
Span 23-24:  central => central
Span 29-30:  highest => (high :degree most)
Span 1-2:  home => home
Span 2-3:  office => office
Span 16-17:  officers => (have-org-role-91 :ARG2 officer)
Span 15-16:  police => police
Span 24-25:  pool => pool
Span 5-6:  promised => promise-01
Span 30-31:  ranks => rank
Span 18-19:  rejected => reject-01
Span 12-13:  selection => select-01
Span 14-15:  senior => senior
Span 10-11:  training => train-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),ranks,rank,false), Span(29,30,List(2, 1),highest,(high :degree most),false), Span(24,25,List(3),pool,pool,false), Span(23,24,List(4),central,central,false), Span(18,19,List(5),rejected,reject-01,false), Span(17,18,List(6),but,contrast-01,false), Span(16,17,List(8, 7),officers,(have-org-role-91 :ARG2 officer),false), Span(15,16,List(9),police,police,false), Span(14,15,List(10),senior,senior,false), Span(12,13,List(11),selection,select-01,false), Span(11,12,List(12),and,and,false), Span(10,11,List(13),training,train-01,false), Span(5,6,List(14),promised,promise-01,false), Span(4,5,List(15),also,also,false), Span(2,3,List(16),office,office,false), Span(1,2,List(17),home,home,false)),Map(2 -> most, 5 -> reject-01, 12 -> and, 15 -> also, 8 -> officer, 7 -> have-org-role-91, 17 -> home, 1 -> high, 4 -> central, 11 -> select-01, 14 -> promise-01, 6 -> contrast-01, 0 -> rank, 9 -> police, 16 -> office, 3 -> pool, 10 -> senior, 13 -> train-01),Map(h -> high, h2 -> have-org-role-91, s2 -> select-01, t -> train-01, p2 -> police, s -> senior, m -> most, p -> pool, r2 -> reject-01, a -> and, o2 -> office, a2 -> also, r -> rank, h3 -> home, c -> central, o -> officer, p3 -> promise-01, c2 -> contrast-01))),[Ljava.lang.String;@4b8a4ec6,Annotation([Ljava.lang.String;@6539cfe8,[Ljava.lang.String;@3680bc43,[Ljava.lang.String;@3dc7eea9),Annotation([Ljava.lang.String;@1105b8ef,[Ljava.lang.String;@eb05ba4,[Ledu.cmu.lti.nlp.amr.Dependency;@5c507384),Annotation([Ljava.lang.String;@25d00e75,[Ljava.lang.String;@7e6536b7,[Ljava.lang.String;@26eb6935),Annotation([Ljava.lang.String;@29482a89,[Ljava.lang.String;@40e09d8b,[Ledu.cmu.lti.nlp.amr.Entity;@5a8731f3))
AMR:
(a / and, op, s2 / select-01)
(a / and, op, t / train-01)
(c2 / contrast-01, ARG1, p3 / promise-01)
(c2 / contrast-01, ARG2, r2 / reject-01)
(h / high, degree, m / most)
(h2 / have-org-role-91, ARG1, p2 / police)
(h2 / have-org-role-91, ARG2, o / officer)
(o / officer, mod, s / senior)
(o2 / office, mod, h3 / home)
(p / pool, mod, c / central)
(p3 / promise-01, ARG0, o2 / office)
(p3 / promise-01, ARG1, t / train-01)
(p3 / promise-01, mod, a2 / also)
(r / rank, mod, h / high)
(r2 / reject-01, ARG1, r / rank)
(r2 / reject-01, manner, p / pool)
(s2 / select-01, ARG1, h2 / have-org-role-91)

Decoded in 307,486 microseconds
Sentence: a pilot scheme involving 2000 people had been successful and 500000 for a further survey of 20000 people had been promised by the health education authority and the economic and social research council esrc

mkDayMonthYear(500000,00,00,50)
mkDayMonthYear(500000,00,00,50)
Spans:
Span 4-5:  2000 => (date-entity :year 2000)
Span 16-17:  20000 => 20000
Span 10-11:  500000 => 500000
Span 29-30:  and => and
Span 26-27:  and => and
Span 9-10:  and => and
Span 25-26:  authority => authority
Span 32-33:  council => council
Span 28-29:  economic => economy
Span 24-25:  education => educate-01
Span 13-14:  further => further
Span 23-24:  health => health
Span 3-4:  involving => involve-01
Span 20-21:  promised => promise-01
Span 31-32:  research => research-01
Span 2-3:  scheme => scheme
Span 30-31:  social => society
Span 8-9:  successful => succeed-01
Span 14-15:  survey => survey-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),council,council,false), Span(31,32,List(1),research,research-01,false), Span(30,31,List(2),social,society,false), Span(29,30,List(3),and,and,false), Span(28,29,List(4),economic,economy,false), Span(26,27,List(5),and,and,false), Span(25,26,List(6),authority,authority,false), Span(24,25,List(7),education,educate-01,false), Span(23,24,List(8),health,health,false), Span(20,21,List(9),promised,promise-01,false), Span(16,17,List(10),20000,20000,false), Span(14,15,List(11),survey,survey-01,false), Span(13,14,List(12),further,further,false), Span(10,11,List(13),500000,500000,false), Span(9,10,List(14),and,and,false), Span(8,9,List(15),successful,succeed-01,false), Span(4,5,List(17, 16),2000,(date-entity :year 2000),false), Span(3,4,List(18),involving,involve-01,false), Span(2,3,List(19),scheme,scheme,false)),Map(2 -> society, 5 -> and, 12 -> further, 15 -> succeed-01, 8 -> health, 18 -> involve-01, 7 -> educate-01, 17 -> 2000, 1 -> research-01, 4 -> economy, 11 -> survey-01, 14 -> and, 6 -> authority, 0 -> council, 9 -> promise-01, 16 -> date-entity, 19 -> scheme, 3 -> and, 10 -> 20000, 13 -> 500000),Map(e -> economy, h -> health, 2 -> 20000, 5 -> 500000, s2 -> survey-01, e2 -> educate-01, a3 -> authority, s -> society, s4 -> scheme, d -> date-entity, p -> promise-01, a -> and, i -> involve-01, r -> research-01, a2 -> and, s3 -> succeed-01, c -> council, 22 -> 2000, f -> further, a4 -> and))),[Ljava.lang.String;@38d9e447,Annotation([Ljava.lang.String;@691a0e79,[Ljava.lang.String;@2dac5fd7,[Ljava.lang.String;@fc833ae),Annotation([Ljava.lang.String;@20b8ec9a,[Ljava.lang.String;@4cb5833e,[Ledu.cmu.lti.nlp.amr.Dependency;@20bb82ca),Annotation([Ljava.lang.String;@7687ac8f,[Ljava.lang.String;@45521d14,[Ljava.lang.String;@11f32f9a),Annotation([Ljava.lang.String;@74ba30aa,[Ljava.lang.String;@6bd124c4,[Ledu.cmu.lti.nlp.amr.Entity;@6fc4f728))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, a3 / authority)
(a2 / and, op, p / promise-01)
(a4 / and, op, r / research-01)
(a4 / and, op, s2 / survey-01)
(c / council, mod, r / research-01)
(d / date-entity, year, 22 / 2000)
(e2 / educate-01, ARG0, a3 / authority)
(e2 / educate-01, ARG1, h / health)
(i / involve-01, ARG0, s4 / scheme)
(i / involve-01, ARG1, a4 / and)
(p / promise-01, ARG1, i / involve-01)
(r / research-01, ARG0, s / society)
(r / research-01, ARG1, 2 / 20000)
(r / research-01, ARG2, e / economy)
(s2 / survey-01, ARG0, d / date-entity)
(s2 / survey-01, degree, f / further)
(s3 / succeed-01, ARG0, a4 / and)
(s3 / succeed-01, ARG1, 5 / 500000)

Decoded in 289,425 microseconds
Sentence: the programme promises an interesting mixture of music from the renaissance to the preseent day and from betthoven to byrd

Spans:
Span 15-16:  and => and
Span 14-15:  day => day
Span 4-5:  interesting => interesting
Span 7-8:  music => music
Span 1-2:  programme => program
Span 2-3:  promises => promise-01
Span 10-11:  renaissance => renaissance

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),and,and,false), Span(14,15,List(1),day,day,false), Span(10,11,List(2),renaissance,renaissance,false), Span(7,8,List(3),music,music,false), Span(4,5,List(4),interesting,interesting,false), Span(2,3,List(5),promises,promise-01,false), Span(1,2,List(6),programme,program,false)),Map(2 -> renaissance, 5 -> promise-01, 1 -> day, 4 -> interesting, 6 -> program, 0 -> and, 3 -> music),Map(p2 -> program, m -> music, d -> day, p -> promise-01, a -> and, i -> interesting, r -> renaissance))),[Ljava.lang.String;@6c3e9c6b,Annotation([Ljava.lang.String;@28f6c52,[Ljava.lang.String;@16107cce,[Ljava.lang.String;@1471c3b3),Annotation([Ljava.lang.String;@38e72741,[Ljava.lang.String;@4fc23996,[Ledu.cmu.lti.nlp.amr.Dependency;@5852cfc2),Annotation([Ljava.lang.String;@24c5f6db,[Ljava.lang.String;@40d1b6b9,[Ljava.lang.String;@8334cee),Annotation([Ljava.lang.String;@5fffa176,[Ljava.lang.String;@7c17b37,[Ledu.cmu.lti.nlp.amr.Entity;@2f805bdb))
AMR:
(a / and, op, d / day)
(i / interesting, poss, a / and)
(p / promise-01, ARG0, p2 / program)
(p / promise-01, ARG1, m / music)
(p / promise-01, ARG2, a / and)
(r / renaissance, prep-to, d / day)

Decoded in 43,783 microseconds
Sentence: from the balcony of the socialist party newspaper now almost living up to its title the playwright vaclav havel had announced that the prime minister ladislav adamec had promised there would be no more beatings

NER Entity: (person :name (name :op "ladislav" :op "adamec"))
Spans:
Span 9-10:  almost => almost
Span 20-21:  announced => announce-01
Span 34-35:  beatings => beat-01
Span 25-27:  ladislav adamec => (person :name (name :op "ladislav" :op "adamec"))
Span 10-11:  living => live-01
Span 24-25:  minister => (have-org-role-91 :ARG2 minister)
Span 7-8:  newspaper => newspaper
Span 32-33:  no => -
Span 8-9:  now => now
Span 6-7:  party => party
Span 23-24:  prime => prime
Span 28-29:  promised => promise-01
Span 5-6:  socialist => socialist
Span 14-15:  title => title

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),beatings,beat-01,false), Span(32,33,List(1),no,-,false), Span(28,29,List(2),promised,promise-01,false), Span(25,27,List(6, 5, 4, 3),ladislav adamec,(person :name (name :op "ladislav" :op "adamec")),false), Span(24,25,List(8, 7),minister,(have-org-role-91 :ARG2 minister),false), Span(23,24,List(9),prime,prime,false), Span(20,21,List(10),announced,announce-01,false), Span(14,15,List(11),title,title,false), Span(10,11,List(12),living,live-01,false), Span(9,10,List(13),almost,almost,false), Span(8,9,List(14),now,now,false), Span(7,8,List(15),newspaper,newspaper,false), Span(6,7,List(16),party,party,false), Span(5,6,List(17),socialist,socialist,false)),Map(2 -> promise-01, 5 -> "ladislav", 12 -> live-01, 15 -> newspaper, 8 -> minister, 7 -> have-org-role-91, 17 -> socialist, 1 -> -, 4 -> name, 11 -> title, 14 -> now, 6 -> "adamec", 0 -> beat-01, 9 -> prime, 16 -> party, 3 -> person, 10 -> announce-01, 13 -> almost),Map(n -> name, h -> have-org-role-91, b -> beat-01, t -> title, p2 -> person, s -> socialist, m -> minister, p -> promise-01, a -> announce-01, n3 -> newspaper, p4 -> party, a2 -> almost, - -> -, l -> live-01, p3 -> prime, n2 -> now))),[Ljava.lang.String;@4bf7a31f,Annotation([Ljava.lang.String;@6ef66f2f,[Ljava.lang.String;@74fdaf92,[Ljava.lang.String;@3b11d63f),Annotation([Ljava.lang.String;@1008e065,[Ljava.lang.String;@36c40f1c,[Ledu.cmu.lti.nlp.amr.Dependency;@1bc135b),Annotation([Ljava.lang.String;@629abc40,[Ljava.lang.String;@1cbd4053,[Ljava.lang.String;@4cca17e2),Annotation([Ljava.lang.String;@67e61dd0,[Ljava.lang.String;@34af77fa,[Ledu.cmu.lti.nlp.amr.Entity;@6bedd91b))
AMR:
(a / announce-01, ARG1, p / promise-01)
(a / announce-01, time, t / title)
(b / beat-01, polarity, - / -)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, m / minister)
(l / live-01, ARG0, n3 / newspaper)
(l / live-01, ARG1, t / title)
(l / live-01, mod, a2 / almost)
(l / live-01, time, n2 / now)
(m / minister, mod, p3 / prime)
(n / name, op, "adamec")
(n / name, op, "ladislav")
(n3 / newspaper, mod, p4 / party)
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, b / beat-01)
(p2 / person, name, n / name)
(p4 / party, mod, s / socialist)

Decoded in 289,912 microseconds
Sentence: the law society which feared the judges might exercise their right of final approval to fetter the solicitors ability to appear in the higher courts has been largely reassured by a passage in the white paper promising statutory backing for a speedy introduction of the new rights

Spans:
Span 18-19:  ability => ability
Span 20-21:  appear => appear-02
Span 13-14:  approval => approve-01
Span 38-39:  backing => back-01
Span 24-25:  courts => court
Span 8-9:  exercise => exercise-02
Span 4-5:  feared => fear-01
Span 12-13:  final => final
Span 23-24:  higher => high
Span 42-43:  introduction => introduce-02
Span 6-7:  judges => judge-01
Span 27-28:  largely => large
Span 1-2:  law => law
Span 45-46:  new => new
Span 35-36:  paper => paper
Span 31-32:  passage => pass-01
Span 36-37:  promising => promise-01
Span 28-29:  reassured => reassure-01
Span 46-47:  rights => right
Span 2-3:  society => society
Span 34-35:  white => white

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),rights,right,false), Span(45,46,List(1),new,new,false), Span(42,43,List(2),introduction,introduce-02,false), Span(38,39,List(3),backing,back-01,false), Span(36,37,List(4),promising,promise-01,false), Span(35,36,List(5),paper,paper,false), Span(34,35,List(6),white,white,false), Span(31,32,List(7),passage,pass-01,false), Span(28,29,List(8),reassured,reassure-01,false), Span(27,28,List(9),largely,large,false), Span(24,25,List(10),courts,court,false), Span(23,24,List(11),higher,high,false), Span(20,21,List(12),appear,appear-02,false), Span(18,19,List(13),ability,ability,false), Span(13,14,List(14),approval,approve-01,false), Span(12,13,List(15),final,final,false), Span(8,9,List(16),exercise,exercise-02,false), Span(6,7,List(17),judges,judge-01,false), Span(4,5,List(18),feared,fear-01,false), Span(2,3,List(19),society,society,false), Span(1,2,List(20),law,law,false)),Map(2 -> introduce-02, 5 -> paper, 12 -> appear-02, 15 -> final, 8 -> reassure-01, 18 -> fear-01, 7 -> pass-01, 17 -> judge-01, 1 -> new, 4 -> promise-01, 11 -> high, 14 -> approve-01, 20 -> law, 6 -> white, 0 -> right, 9 -> large, 16 -> exercise-02, 19 -> society, 3 -> back-01, 10 -> court, 13 -> ability),Map(e -> exercise-02, n -> new, w -> white, h -> high, b -> back-01, p2 -> paper, j -> judge-01, a3 -> approve-01, s -> society, p -> promise-01, r2 -> reassure-01, a -> appear-02, l2 -> law, a2 -> ability, r -> right, i -> introduce-02, c -> court, f2 -> fear-01, l -> large, f -> final, p3 -> pass-01))),[Ljava.lang.String;@38dddee8,Annotation([Ljava.lang.String;@6e556e82,[Ljava.lang.String;@2aca5165,[Ljava.lang.String;@48a5d3d5),Annotation([Ljava.lang.String;@7ef66a35,[Ljava.lang.String;@63b6feb1,[Ledu.cmu.lti.nlp.amr.Dependency;@30b499c),Annotation([Ljava.lang.String;@5a0da253,[Ljava.lang.String;@351c2555,[Ljava.lang.String;@4ad70ab0),Annotation([Ljava.lang.String;@6bfecf32,[Ljava.lang.String;@25d51302,[Ledu.cmu.lti.nlp.amr.Entity;@47d2fbb5))
AMR:
(a / appear-02, ARG1, c / court)
(a2 / ability, purpose, a / appear-02)
(a3 / approve-01, ARG0, a2 / ability)
(a3 / approve-01, mod, f / final)
(b / back-01, ARG1, i / introduce-02)
(c / court, mod, h / high)
(e / exercise-02, ARG1, j / judge-01)
(e / exercise-02, ARG2, a3 / approve-01)
(f2 / fear-01, ARG0, s / society)
(f2 / fear-01, ARG1, e / exercise-02)
(i / introduce-02, ARG1, r / right)
(p / promise-01, ARG0, s / society)
(p / promise-01, ARG1, b / back-01)
(p2 / paper, mod, w / white)
(p3 / pass-01, ARG1, p2 / paper)
(r / right, mod, n / new)
(r2 / reassure-01, ARG1, p3 / pass-01)
(r2 / reassure-01, degree, l / large)
(r2 / reassure-01, purpose, p / promise-01)
(s / society, mod, l2 / law)

Decoded in 567,369 microseconds
Sentence: they derived no benefit in law since the plaintiff was promising to do no more than he was already bound to do

Spans:
Span 18-19:  already => already
Span 3-4:  benefit => benefit-01
Span 1-2:  derived => derive-01
Span 16-17:  he => he
Span 5-6:  law => law
Span 13-14:  no => -
Span 2-3:  no => -
Span 10-11:  promising => promise-01
Span 6-7:  since => since
Span 0-1:  they => they

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),already,already,false), Span(16,17,List(1),he,he,false), Span(13,14,List(2),no,-,false), Span(10,11,List(3),promising,promise-01,false), Span(6,7,List(4),since,since,false), Span(5,6,List(5),law,law,false), Span(3,4,List(6),benefit,benefit-01,false), Span(2,3,List(7),no,-,false), Span(1,2,List(8),derived,derive-01,false), Span(0,1,List(9),they,they,false)),Map(2 -> -, 5 -> law, 8 -> derive-01, 7 -> -, 1 -> he, 4 -> since, 6 -> benefit-01, 9 -> they, 0 -> already, 3 -> promise-01),Map(h -> he, t -> they, b -> benefit-01, s -> since, d -> derive-01, p -> promise-01, a -> already, -2 -> -, - -> -, l -> law))),[Ljava.lang.String;@6c8b4ce9,Annotation([Ljava.lang.String;@2d668cab,[Ljava.lang.String;@279d45d6,[Ljava.lang.String;@4653f8eb),Annotation([Ljava.lang.String;@32fb305f,[Ljava.lang.String;@924c71f,[Ledu.cmu.lti.nlp.amr.Dependency;@4d8cc8e9),Annotation([Ljava.lang.String;@55da60c5,[Ljava.lang.String;@7407518b,[Ljava.lang.String;@c7ab830),Annotation([Ljava.lang.String;@4cd25db6,[Ljava.lang.String;@7067f21,[Ledu.cmu.lti.nlp.amr.Entity;@3b845321))
AMR:
(b / benefit-01, ARG1, - / -)
(b / benefit-01, polarity, -2 / -)
(d / derive-01, ARG0, t / they)
(d / derive-01, ARG1, b / benefit-01)
(d / derive-01, ARG2, l / law)
(d / derive-01, time, s / since)
(h / he, quant, a / already)
(p / promise-01, ARG0, h / he)
(s / since, op, p / promise-01)

Decoded in 110,370 microseconds
Sentence: after the forced return to hanoi last week of 51 vietnamese douglas hurd foreign secretary promised there would be no more repatriations until mps had debated the matter

NER Entity: (thing :name (name :op "vietnamese"))
Spans:
Span 9-10:  51 => 51
Span 0-1:  after => after
Span 25-26:  debated => debate-01
Span 2-3:  forced => force-01
Span 13-14:  foreign => foreign
Span 6-7:  last => last
Span 27-28:  matter => matter
Span 19-20:  no => -
Span 15-16:  promised => promise-01
Span 14-15:  secretary => secretary
Span 22-23:  until => until
Span 7-8:  week => week

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),matter,matter,false), Span(25,26,List(1),debated,debate-01,false), Span(22,23,List(2),until,until,false), Span(19,20,List(3),no,-,false), Span(15,16,List(4),promised,promise-01,false), Span(14,15,List(5),secretary,secretary,false), Span(13,14,List(6),foreign,foreign,false), Span(9,10,List(7),51,51,false), Span(7,8,List(8),week,week,false), Span(6,7,List(9),last,last,false), Span(2,3,List(10),forced,force-01,false), Span(0,1,List(11),after,after,false)),Map(2 -> until, 5 -> secretary, 8 -> week, 7 -> 51, 1 -> debate-01, 11 -> after, 4 -> promise-01, 6 -> foreign, 9 -> last, 0 -> matter, 10 -> force-01, 3 -> -),Map(w -> week, 5 -> 51, s -> secretary, d -> debate-01, m -> matter, p -> promise-01, a -> after, - -> -, f2 -> force-01, l -> last, u -> until, f -> foreign))),[Ljava.lang.String;@6c6dba0d,Annotation([Ljava.lang.String;@17d1e318,[Ljava.lang.String;@549448df,[Ljava.lang.String;@533c53da),Annotation([Ljava.lang.String;@1da537e7,[Ljava.lang.String;@49f92de5,[Ledu.cmu.lti.nlp.amr.Dependency;@6343b54),Annotation([Ljava.lang.String;@4f230afa,[Ljava.lang.String;@5a5cbad,[Ljava.lang.String;@47decdc0),Annotation([Ljava.lang.String;@74961d1c,[Ljava.lang.String;@2b515510,[Ledu.cmu.lti.nlp.amr.Entity;@68a7a3a7))
AMR:
(5 / 51, op, d / debate-01)
(d / debate-01, ARG0, - / -)
(d / debate-01, ARG1, m / matter)
(d / debate-01, ARG2, f2 / force-01)
(f2 / force-01, ARG0, w / week)
(p / promise-01, ARG0, s / secretary)
(p / promise-01, ARG1, u / until)
(s / secretary, mod, f / foreign)
(u / until, op, a / after)
(u / until, op, d / debate-01)
(w / week, mod, l / last)

Decoded in 172,170 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@55e95e9e,Annotation([Ljava.lang.String;@4c430322,[Ljava.lang.String;@4382d44b,[Ljava.lang.String;@423faa8d),Annotation([Ljava.lang.String;@61d630f5,[Ljava.lang.String;@35285701,[Ledu.cmu.lti.nlp.amr.Dependency;@6b681dea),Annotation([Ljava.lang.String;@8424bd,[Ljava.lang.String;@6387f48e,[Ljava.lang.String;@72c8c9ae),Annotation([Ljava.lang.String;@5c30f961,[Ljava.lang.String;@13447e90,[Ledu.cmu.lti.nlp.amr.Entity;@75d129d1))
AMR:


Decoded in 1,638 microseconds
Sentence: king hussein of jordan has promised a parliament with real powers after elections on 8 november the first for 22 years

NER Entity: (country :name (name :op "jordan"))
Spans:
Span 19-20:  22 => 22
Span 14-15:  8 => 8
Span 11-12:  after => after
Span 12-13:  elections => elect-01
Span 0-1:  king => king
Span 15-16:  november => (date-entity :month 11)
Span 7-8:  parliament => (government-organization :name (name :op "Parliament"))
Span 10-11:  powers => power
Span 5-6:  promised => promise-01
Span 9-10:  real => real
Span 20-21:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(1, 0),years,(temporal-quantity :unit year),false), Span(19,20,List(2),22,22,false), Span(15,16,List(4, 3),november,(date-entity :month 11),false), Span(14,15,List(5),8,8,false), Span(12,13,List(6),elections,elect-01,false), Span(11,12,List(7),after,after,false), Span(10,11,List(8),powers,power,false), Span(9,10,List(9),real,real,false), Span(7,8,List(12, 11, 10),parliament,(government-organization :name (name :op "Parliament")),false), Span(5,6,List(13),promised,promise-01,false), Span(0,1,List(14),king,king,false)),Map(2 -> 22, 5 -> 8, 12 -> "Parliament", 8 -> power, 7 -> after, 1 -> year, 4 -> 11, 11 -> name, 14 -> king, 6 -> elect-01, 0 -> temporal-quantity, 9 -> real, 3 -> date-entity, 10 -> government-organization, 13 -> promise-01),Map(e -> elect-01, n -> name, 2 -> 22, k -> king, t -> temporal-quantity, 8 -> 8, p2 -> promise-01, d -> date-entity, 1 -> 11, y -> year, p -> power, g -> government-organization, a -> after, r -> real))),[Ljava.lang.String;@771094c4,Annotation([Ljava.lang.String;@61970ced,[Ljava.lang.String;@3d1cda9,[Ljava.lang.String;@43151434),Annotation([Ljava.lang.String;@1ce18454,[Ljava.lang.String;@19b6b59c,[Ledu.cmu.lti.nlp.amr.Dependency;@2a4d21f4),Annotation([Ljava.lang.String;@2df02fde,[Ljava.lang.String;@73d6af61,[Ljava.lang.String;@139444b1),Annotation([Ljava.lang.String;@6b29ca81,[Ljava.lang.String;@4ae121e,[Ledu.cmu.lti.nlp.amr.Entity;@402771f8))
AMR:
(a / after, op, e / elect-01)
(d / date-entity, month, 1 / 11)
(e / elect-01, ARG0, k / king)
(e / elect-01, ARG1, p2 / promise-01)
(e / elect-01, time, 8 / 8)
(e / elect-01, time, d / date-entity)
(g / government-organization, name, n / name)
(n / name, op, "Parliament")
(p / power, mod, r / real)
(p / power, prep-in, e / elect-01)
(p2 / promise-01, ARG0, g / government-organization)
(p2 / promise-01, ARG1, t / temporal-quantity)
(t / temporal-quantity, quant, 2 / 22)
(t / temporal-quantity, unit, y / year)

Decoded in 231,701 microseconds
Sentence: i will visit mrs thorne again as i promised

Spans:
Span 5-6:  again => again
Span 7-8:  i => i
Span 0-1:  i => i
Span 8-9:  promised => promise-01
Span 2-3:  visit => visit-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promised,promise-01,false), Span(7,8,List(1),i,i,false), Span(5,6,List(2),again,again,false), Span(2,3,List(3),visit,visit-01,false), Span(0,1,List(4),i,i,false)),Map(2 -> again, 1 -> i, 4 -> i, 0 -> promise-01, 3 -> visit-01),Map(v -> visit-01, p -> promise-01, a -> again, i2 -> i, i -> i))),[Ljava.lang.String;@5dab71af,Annotation([Ljava.lang.String;@22b4c834,[Ljava.lang.String;@ac3dfb9,[Ljava.lang.String;@4194f034),Annotation([Ljava.lang.String;@1926078f,[Ljava.lang.String;@fba4a2f,[Ledu.cmu.lti.nlp.amr.Dependency;@f5c5bba),Annotation([Ljava.lang.String;@788a1836,[Ljava.lang.String;@323bbf0d,[Ljava.lang.String;@707c083e),Annotation([Ljava.lang.String;@5f015823,[Ljava.lang.String;@5141928f,[Ledu.cmu.lti.nlp.amr.Entity;@27fd13f6))
AMR:
(p / promise-01, ARG0, i / i)
(v / visit-01, ARG0, i2 / i)
(v / visit-01, mod, a / again)
(v / visit-01, time, p / promise-01)

Decoded in 26,280 microseconds
Sentence: mr lewis promised that no caravan would be allowed onto the site if it was not clean and tidy and their would be strict rules for travellers who wanted to stop their

Spans:
Span 8-9:  allowed => allow-01
Span 19-20:  and => and
Span 17-18:  and => and
Span 16-17:  clean => clean
Span 13-14:  it => it
Span 4-5:  no => -
Span 9-10:  onto => onto
Span 2-3:  promised => promise-01
Span 24-25:  rules => rule
Span 11-12:  site => site
Span 30-31:  stop => stop-01
Span 23-24:  strict => strict
Span 26-27:  travellers => travel-01
Span 28-29:  wanted => want-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),stop,stop-01,false), Span(28,29,List(1),wanted,want-01,false), Span(26,27,List(2),travellers,travel-01,false), Span(24,25,List(3),rules,rule,false), Span(23,24,List(4),strict,strict,false), Span(19,20,List(5),and,and,false), Span(17,18,List(6),and,and,false), Span(16,17,List(7),clean,clean,false), Span(13,14,List(8),it,it,false), Span(11,12,List(9),site,site,false), Span(9,10,List(10),onto,onto,false), Span(8,9,List(11),allowed,allow-01,false), Span(4,5,List(12),no,-,false), Span(2,3,List(13),promised,promise-01,false)),Map(2 -> travel-01, 5 -> and, 12 -> -, 8 -> it, 7 -> clean, 1 -> want-01, 4 -> strict, 11 -> allow-01, 6 -> and, 0 -> stop-01, 9 -> site, 3 -> rule, 10 -> onto, 13 -> promise-01),Map(w -> want-01, s2 -> strict, t -> travel-01, a3 -> allow-01, s -> stop-01, p -> promise-01, a -> and, r -> rule, a2 -> and, i -> it, - -> -, c -> clean, s3 -> site, o -> onto))),[Ljava.lang.String;@58298ffc,Annotation([Ljava.lang.String;@10ac169c,[Ljava.lang.String;@12006451,[Ljava.lang.String;@57ba0b12),Annotation([Ljava.lang.String;@772cf7bc,[Ljava.lang.String;@293c94c4,[Ledu.cmu.lti.nlp.amr.Dependency;@484ae502),Annotation([Ljava.lang.String;@2d010b62,[Ljava.lang.String;@1f926603,[Ljava.lang.String;@44675f26),Annotation([Ljava.lang.String;@5e97dadf,[Ljava.lang.String;@43a296fd,[Ledu.cmu.lti.nlp.amr.Entity;@6766debb))
AMR:
(a / and, op, a3 / allow-01)
(a2 / and, op, a / and)
(a2 / and, op, t / travel-01)
(a3 / allow-01, ARG1, i / it)
(a3 / allow-01, polarity, - / -)
(a3 / allow-01, time, o / onto)
(c / clean, domain, i / it)
(o / onto, op, s3 / site)
(p / promise-01, ARG1, a2 / and)
(r / rule, mod, s2 / strict)
(r / rule, topic, t / travel-01)
(s / stop-01, ARG0, t / travel-01)
(w / want-01, ARG1, s / stop-01)

Decoded in 123,942 microseconds
Sentence: it promises peaceful competition and an enduring commitment to human rights

Spans:
Span 4-5:  and => and
Span 7-8:  commitment => commit-01
Span 3-4:  competition => compete-01
Span 6-7:  enduring => endure-01
Span 9-10:  human => human
Span 0-1:  it => it
Span 2-3:  peaceful => peaceful
Span 1-2:  promises => promise-01
Span 10-11:  rights => right

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),rights,right,false), Span(9,10,List(1),human,human,false), Span(7,8,List(2),commitment,commit-01,false), Span(6,7,List(3),enduring,endure-01,false), Span(4,5,List(4),and,and,false), Span(3,4,List(5),competition,compete-01,false), Span(2,3,List(6),peaceful,peaceful,false), Span(1,2,List(7),promises,promise-01,false), Span(0,1,List(8),it,it,false)),Map(2 -> commit-01, 5 -> compete-01, 8 -> it, 7 -> promise-01, 1 -> human, 4 -> and, 6 -> peaceful, 0 -> right, 3 -> endure-01),Map(e -> endure-01, h -> human, p2 -> promise-01, p -> peaceful, a -> and, i -> it, r -> right, c -> commit-01, c2 -> compete-01))),[Ljava.lang.String;@12a8fc06,Annotation([Ljava.lang.String;@1439f77c,[Ljava.lang.String;@69a6f843,[Ljava.lang.String;@50f52ce5),Annotation([Ljava.lang.String;@105697e9,[Ljava.lang.String;@250f4a60,[Ledu.cmu.lti.nlp.amr.Dependency;@edbf7a2),Annotation([Ljava.lang.String;@b5eb44d,[Ljava.lang.String;@768f310f,[Ljava.lang.String;@32de0c98),Annotation([Ljava.lang.String;@100ce93f,[Ljava.lang.String;@3fa52f54,[Ledu.cmu.lti.nlp.amr.Entity;@75c65470))
AMR:
(a / and, op, c / commit-01)
(c / commit-01, ARG1, r / right)
(c2 / compete-01, ARG0, i / it)
(c2 / compete-01, manner, p / peaceful)
(e / endure-01, ARG1, c / commit-01)
(p2 / promise-01, ARG0, i / it)
(p2 / promise-01, ARG1, a / and)
(r / right, mod, h / human)

Decoded in 87,968 microseconds
Sentence: we had a row with lucas there because they had fitted fuel injection to jimmy clarks lotus despite promising us exclusive use for the season if we persevered with it

Spans:
Span 7-8:  because => cause-01
Span 20-21:  exclusive => exclusive
Span 11-12:  fuel => fuel
Span 12-13:  injection => inject-01
Span 29-30:  it => it
Span 18-19:  promising => promise-01
Span 3-4:  row => row
Span 24-25:  season => season
Span 8-9:  they => they
Span 21-22:  use => use-01
Span 26-27:  we => we
Span 0-1:  we => we

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),it,it,false), Span(26,27,List(1),we,we,false), Span(24,25,List(2),season,season,false), Span(21,22,List(3),use,use-01,false), Span(20,21,List(4),exclusive,exclusive,false), Span(18,19,List(5),promising,promise-01,false), Span(12,13,List(6),injection,inject-01,false), Span(11,12,List(7),fuel,fuel,false), Span(8,9,List(8),they,they,false), Span(7,8,List(9),because,cause-01,false), Span(3,4,List(10),row,row,false), Span(0,1,List(11),we,we,false)),Map(2 -> season, 5 -> promise-01, 8 -> they, 7 -> fuel, 1 -> we, 11 -> we, 4 -> exclusive, 6 -> inject-01, 9 -> cause-01, 0 -> it, 10 -> row, 3 -> use-01),Map(e -> exclusive, w -> we, t -> they, s -> season, p -> promise-01, i2 -> inject-01, w2 -> we, r -> row, i -> it, c -> cause-01, u -> use-01, f -> fuel))),[Ljava.lang.String;@4ae692db,Annotation([Ljava.lang.String;@67b38e47,[Ljava.lang.String;@3d420c81,[Ljava.lang.String;@3b430892),Annotation([Ljava.lang.String;@2de7c7a3,[Ljava.lang.String;@4be3b5e0,[Ledu.cmu.lti.nlp.amr.Dependency;@52b9ac0c),Annotation([Ljava.lang.String;@1bce7242,[Ljava.lang.String;@eaf5951,[Ljava.lang.String;@1a10dc5f),Annotation([Ljava.lang.String;@48f3ee57,[Ljava.lang.String;@6a4b72c,[Ledu.cmu.lti.nlp.amr.Entity;@27f5ad1c))
AMR:
(c / cause-01, ARG0, t / they)
(c / cause-01, ARG1, r / row)
(i2 / inject-01, ARG0, w2 / we)
(i2 / inject-01, ARG1, t / they)
(i2 / inject-01, condition, p / promise-01)
(i2 / inject-01, mod, f / fuel)
(p / promise-01, ARG0, w / we)
(p / promise-01, ARG1, u / use-01)
(s / season, beneficiary, i / it)
(u / use-01, ARG1, s / season)
(u / use-01, manner, e / exclusive)

Decoded in 128,006 microseconds
Sentence: just about three minutes to go until the first pictures come through ellip   he promised as if the den of democracy were the sea of tranquillity

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = just about three minutes to go until the first pictures come through ellip   he promised as if the den of democracy were the sea of tranquillity
myTokenized = just about three minutes to go until the first pictures come through ellip he promised as if the den of democracy were the sea of tranquillity
i = 13
prefix = List(just, about, three, minutes, to, go, until, the, first, pictures, come, through, ellip, he)
regexr = \Qj\E ?\Qu\E ?\Qs\E ?\Qt\E ?\Qa\E ?\Qb\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qr\E ?\Qe\E ?\Qe\E ?\Qm\E ?\Qi\E ?\Qn\E ?\Qu\E ?\Qt\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qg\E ?\Qo\E ?\Qu\E ?\Qn\E ?\Qt\E ?\Qi\E ?\Ql\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qf\E ?\Qi\E ?\Qr\E ?\Qs\E ?\Qt\E ?\Qp\E ?\Qi\E ?\Qc\E ?\Qt\E ?\Qu\E ?\Qr\E ?\Qe\E ?\Qs\E ?\Qc\E ?\Qo\E ?\Qm\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qr\E ?\Qo\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qp\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the ministry also promised that people who had been wrongfully punished after political trials would be rehabilitated

Spans:
Span 11-12:  after => after
Span 2-3:  also => also
Span 1-2:  ministry => ministry
Span 12-13:  political => politics
Span 3-4:  promised => promise-01
Span 10-11:  punished => punish-01
Span 13-14:  trials => trial

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),trials,trial,false), Span(12,13,List(1),political,politics,false), Span(11,12,List(2),after,after,false), Span(10,11,List(3),punished,punish-01,false), Span(3,4,List(4),promised,promise-01,false), Span(2,3,List(5),also,also,false), Span(1,2,List(6),ministry,ministry,false)),Map(2 -> after, 5 -> also, 1 -> politics, 4 -> promise-01, 6 -> ministry, 0 -> trial, 3 -> punish-01),Map(t -> trial, p2 -> punish-01, m -> ministry, p -> politics, a -> after, a2 -> also, p3 -> promise-01))),[Ljava.lang.String;@4229e623,Annotation([Ljava.lang.String;@4cc425c4,[Ljava.lang.String;@618b8e3b,[Ljava.lang.String;@1126f585),Annotation([Ljava.lang.String;@14c0f78f,[Ljava.lang.String;@8bcd7ee,[Ledu.cmu.lti.nlp.amr.Dependency;@26044ebd),Annotation([Ljava.lang.String;@64cd6dca,[Ljava.lang.String;@6ae31c79,[Ljava.lang.String;@646282c1),Annotation([Ljava.lang.String;@7f768063,[Ljava.lang.String;@3ce724f5,[Ledu.cmu.lti.nlp.amr.Entity;@6b2b700f))
AMR:
(a / after, op, t / trial)
(p2 / punish-01, ARG1, p3 / promise-01)
(p2 / punish-01, time, a / after)
(p3 / promise-01, ARG0, m / ministry)
(p3 / promise-01, mod, a2 / also)
(t / trial, mod, p / politics)

Decoded in 27,031 microseconds
Sentence:   everything about next weeks championship promises to be on a grander scale than before

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   everything about next weeks championship promises to be on a grander scale than before
myTokenized = everything about next weeks championship promises to be on a grander scale than before
i = 0
prefix = List(everything)
regexr = \Qe\E ?\Qv\E ?\Qe\E ?\Qr\E ?\Qy\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qn\E ?\Qg\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: mr hurd who promised there would be no more repatriations before mps debate the issue on 19 december accepted there was case for looking again at economic relations with vietnam including a role for the world bank

NER Entity: (country :name (name :op "vietnam"))
Spans:
Span 16-17:  19 => 19
Span 18-19:  accepted => accept-01
Span 24-25:  again => again
Span 36-37:  bank => bank
Span 10-11:  before => before
Span 21-22:  case => case
Span 12-13:  debate => debate-01
Span 17-18:  december => (date-entity :month 12)
Span 26-27:  economic => economy
Span 14-15:  issue => issue
Span 7-8:  no => -
Span 3-4:  promised => promise-01
Span 27-28:  relations => relation
Span 32-33:  role => role
Span 35-36:  world => world

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),bank,bank,false), Span(35,36,List(1),world,world,false), Span(32,33,List(2),role,role,false), Span(27,28,List(3),relations,relation,false), Span(26,27,List(4),economic,economy,false), Span(24,25,List(5),again,again,false), Span(21,22,List(6),case,case,false), Span(18,19,List(7),accepted,accept-01,false), Span(17,18,List(9, 8),december,(date-entity :month 12),false), Span(16,17,List(10),19,19,false), Span(14,15,List(11),issue,issue,false), Span(12,13,List(12),debate,debate-01,false), Span(10,11,List(13),before,before,false), Span(7,8,List(14),no,-,false), Span(3,4,List(15),promised,promise-01,false)),Map(2 -> role, 5 -> again, 12 -> debate-01, 15 -> promise-01, 8 -> date-entity, 7 -> accept-01, 1 -> world, 4 -> economy, 11 -> issue, 14 -> -, 6 -> case, 0 -> bank, 9 -> 12, 3 -> relation, 10 -> 19, 13 -> before),Map(e -> economy, w -> world, b -> bank, 12 -> 19, b2 -> before, d -> date-entity, 1 -> 12, p -> promise-01, r2 -> relation, a -> again, d2 -> debate-01, r -> role, a2 -> accept-01, i -> issue, - -> -, c -> case))),[Ljava.lang.String;@65eab019,Annotation([Ljava.lang.String;@12cf6d95,[Ljava.lang.String;@70235ad8,[Ljava.lang.String;@2121546c),Annotation([Ljava.lang.String;@132d8f72,[Ljava.lang.String;@14248f34,[Ledu.cmu.lti.nlp.amr.Dependency;@6c35a940),Annotation([Ljava.lang.String;@36fae040,[Ljava.lang.String;@1098a5f3,[Ljava.lang.String;@15b6fd08),Annotation([Ljava.lang.String;@209e235b,[Ljava.lang.String;@6e233c17,[Ledu.cmu.lti.nlp.amr.Entity;@4b3e427e))
AMR:
(a2 / accept-01, ARG0, d / date-entity)
(a2 / accept-01, ARG1, i / issue)
(a2 / accept-01, ARG2, c / case)
(b / bank, mod, w / world)
(b2 / before, op, d2 / debate-01)
(d / date-entity, month, 1 / 12)
(d / date-entity, quant, 12 / 19)
(d2 / debate-01, ARG1, - / -)
(d2 / debate-01, time, i / issue)
(e / economy, op, p / promise-01)
(p / promise-01, ARG1, a / again)
(p / promise-01, time, b2 / before)
(r / role, poss, b / bank)
(r2 / relation, mod, e / economy)
(w / world, op, d2 / debate-01)

Decoded in 343,401 microseconds
Sentence: the debate on concentration of ownership promises to be one of the hottest of next year

Spans:
Span 3-4:  concentration => concentrate-02
Span 1-2:  debate => debate-01
Span 14-15:  next => next
Span 5-6:  ownership => ownership
Span 6-7:  promises => promise-01
Span 15-16:  year => year

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),year,year,false), Span(14,15,List(1),next,next,false), Span(6,7,List(2),promises,promise-01,false), Span(5,6,List(3),ownership,ownership,false), Span(3,4,List(4),concentration,concentrate-02,false), Span(1,2,List(5),debate,debate-01,false)),Map(2 -> promise-01, 5 -> debate-01, 1 -> next, 4 -> concentrate-02, 0 -> year, 3 -> ownership),Map(n -> next, d -> debate-01, p -> promise-01, y -> year, c -> concentrate-02, o -> ownership))),[Ljava.lang.String;@647f84c9,Annotation([Ljava.lang.String;@6fe6dbaa,[Ljava.lang.String;@1d5faf4b,[Ljava.lang.String;@74ed73fd),Annotation([Ljava.lang.String;@115a2304,[Ljava.lang.String;@34b0e482,[Ledu.cmu.lti.nlp.amr.Dependency;@496a2dd4),Annotation([Ljava.lang.String;@59e6def3,[Ljava.lang.String;@443751a1,[Ljava.lang.String;@bd04404),Annotation([Ljava.lang.String;@162168ab,[Ljava.lang.String;@6b5ebde6,[Ledu.cmu.lti.nlp.amr.Entity;@19057e1c))
AMR:
(c / concentrate-02, ARG1, o / ownership)
(d / debate-01, ARG1, c / concentrate-02)
(p / promise-01, ARG0, d / debate-01)
(p / promise-01, ARG1, n / next)
(y / year, mod, n / next)

Decoded in 26,265 microseconds
Sentence: they also promise a return to learn entitlement of up to a years full time education for people aged more than 50 and who left school at 15 or earlier

Spans:
Span 27-28:  15 => 15
Span 21-22:  50 => 50
Span 18-19:  aged => age-01
Span 1-2:  also => also
Span 22-23:  and => and
Span 29-30:  earlier => early
Span 15-16:  education => educate-01
Span 13-14:  full => full
Span 6-7:  learn => learn-01
Span 28-29:  or => or
Span 2-3:  promise => promise-01
Span 25-26:  school => school
Span 0-1:  they => they
Span 14-15:  time => time
Span 12-13:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),earlier,early,false), Span(28,29,List(1),or,or,false), Span(27,28,List(2),15,15,false), Span(25,26,List(3),school,school,false), Span(22,23,List(4),and,and,false), Span(21,22,List(5),50,50,false), Span(18,19,List(6),aged,age-01,false), Span(15,16,List(7),education,educate-01,false), Span(14,15,List(8),time,time,false), Span(13,14,List(9),full,full,false), Span(12,13,List(11, 10),years,(temporal-quantity :unit year),false), Span(6,7,List(12),learn,learn-01,false), Span(2,3,List(13),promise,promise-01,false), Span(1,2,List(14),also,also,false), Span(0,1,List(15),they,they,false)),Map(2 -> 15, 5 -> 50, 12 -> learn-01, 15 -> they, 8 -> time, 7 -> educate-01, 1 -> or, 4 -> and, 11 -> year, 14 -> also, 6 -> age-01, 0 -> early, 9 -> full, 3 -> school, 10 -> temporal-quantity, 13 -> promise-01),Map(e -> early, 5 -> 50, t -> time, e2 -> educate-01, a3 -> also, s -> school, t3 -> they, 1 -> 15, p -> promise-01, y -> year, a -> and, t2 -> temporal-quantity, a2 -> age-01, l -> learn-01, f -> full, o -> or))),[Ljava.lang.String;@379a6d19,Annotation([Ljava.lang.String;@7b70a0d3,[Ljava.lang.String;@1f4ebbf5,[Ljava.lang.String;@6a15e1e1),Annotation([Ljava.lang.String;@42a0b130,[Ljava.lang.String;@43d0e87c,[Ledu.cmu.lti.nlp.amr.Dependency;@484f47ac),Annotation([Ljava.lang.String;@4cea924a,[Ljava.lang.String;@3c2a5fb9,[Ljava.lang.String;@1f2898b),Annotation([Ljava.lang.String;@5a2405ac,[Ljava.lang.String;@72f08d6f,[Ledu.cmu.lti.nlp.amr.Entity;@ed5ad5d))
AMR:
(a / and, op, l / learn-01)
(a / and, op, o / or)
(a / and, op, s / school)
(a2 / age-01, ARG1, 5 / 50)
(a2 / age-01, ARG2, e2 / educate-01)
(e2 / educate-01, ARG0, t / time)
(e2 / educate-01, ARG1, t2 / temporal-quantity)
(l / learn-01, ARG0, t3 / they)
(l / learn-01, ARG1, e2 / educate-01)
(o / or, op, e / early)
(p / promise-01, ARG0, t3 / they)
(p / promise-01, ARG1, 1 / 15)
(p / promise-01, mod, a3 / also)
(t / time, mod, f / full)
(t2 / temporal-quantity, unit, y / year)

Decoded in 240,976 microseconds
Sentence: sir robert agreed that brs industrial relations had to be improved and promised to do so as soon as the strike was over

Spans:
Span 2-3:  agreed => agree-01
Span 11-12:  and => and
Span 10-11:  improved => improve-01
Span 5-6:  industrial => industry
Span 12-13:  promised => promise-01
Span 6-7:  relations => relation
Span 15-16:  so => so
Span 17-18:  soon => soon
Span 20-21:  strike => strike-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),strike,strike-01,false), Span(17,18,List(1),soon,soon,false), Span(15,16,List(2),so,so,false), Span(12,13,List(3),promised,promise-01,false), Span(11,12,List(4),and,and,false), Span(10,11,List(5),improved,improve-01,false), Span(6,7,List(6),relations,relation,false), Span(5,6,List(7),industrial,industry,false), Span(2,3,List(8),agreed,agree-01,false)),Map(2 -> so, 5 -> improve-01, 8 -> agree-01, 7 -> industry, 1 -> soon, 4 -> and, 6 -> relation, 0 -> strike-01, 3 -> promise-01),Map(s2 -> soon, s -> strike-01, p -> promise-01, a -> and, i2 -> industry, a2 -> agree-01, r -> relation, i -> improve-01, s3 -> so))),[Ljava.lang.String;@6e68bc46,Annotation([Ljava.lang.String;@1e20d04b,[Ljava.lang.String;@7c4afb60,[Ljava.lang.String;@1ebd9b60),Annotation([Ljava.lang.String;@3223cb64,[Ljava.lang.String;@4bfe2bf3,[Ledu.cmu.lti.nlp.amr.Dependency;@1bf7857f),Annotation([Ljava.lang.String;@175d6331,[Ljava.lang.String;@741b31f2,[Ljava.lang.String;@256c426b),Annotation([Ljava.lang.String;@667c91fe,[Ljava.lang.String;@7c54ef42,[Ledu.cmu.lti.nlp.amr.Entity;@2c2815d3))
AMR:
(a / and, op, i / improve-01)
(a / and, op, p / promise-01)
(a2 / agree-01, ARG1, a / and)
(i / improve-01, ARG1, r / relation)
(i2 / industry, op, s / strike-01)
(p / promise-01, ARG1, s3 / so)
(s / strike-01, ARG0, s2 / soon)
(s / strike-01, ARG1, r / relation)

Decoded in 98,040 microseconds
Sentence: at the invitation of the soviet government and accompanied by no fewer than 25 swedish journalists members of raul wallenbergs family and the society which bears his name will meet during their weeklong visit to moscow representatives of the kgb and the foreign ministry who have promised to submit to them all available material

NER Entity: (country :name (name :op "soviet"))
NER Entity: (country :name (name :op "moscow"))
Spans:
Span 13-14:  25 => 25
Span 8-9:  accompanied => accompany-01
Span 51-52:  all => all
Span 40-41:  and => and
Span 21-22:  and => and
Span 7-8:  and => and
Span 52-53:  available => available
Span 25-26:  bears => (thing :manner-of bear-01)
Span 20-21:  family => family
Span 11-12:  fewer => few
Span 42-43:  foreign => foreign
Span 2-3:  invitation => invite-01
Span 15-16:  journalists => journalist
Span 53-54:  material => material
Span 16-17:  members => (have-org-role-91 :ARG2 member)
Span 43-44:  ministry => ministry
Span 10-11:  no => -
Span 46-47:  promised => promise-01
Span 36-37:  representatives => (person :ARG0-of represent-01)
Span 23-24:  society => society
Span 48-49:  submit => submit-01
Span 33-34:  visit => visit-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),material,material,false), Span(52,53,List(1),available,available,false), Span(51,52,List(2),all,all,false), Span(48,49,List(3),submit,submit-01,false), Span(46,47,List(4),promised,promise-01,false), Span(43,44,List(5),ministry,ministry,false), Span(42,43,List(6),foreign,foreign,false), Span(40,41,List(7),and,and,false), Span(36,37,List(9, 8),representatives,(person :ARG0-of represent-01),false), Span(33,34,List(10),visit,visit-01,false), Span(25,26,List(12, 11),bears,(thing :manner-of bear-01),false), Span(23,24,List(13),society,society,false), Span(21,22,List(14),and,and,false), Span(20,21,List(15),family,family,false), Span(16,17,List(17, 16),members,(have-org-role-91 :ARG2 member),false), Span(15,16,List(18),journalists,journalist,false), Span(13,14,List(19),25,25,false), Span(11,12,List(20),fewer,few,false), Span(10,11,List(21),no,-,false), Span(8,9,List(22),accompanied,accompany-01,false), Span(7,8,List(23),and,and,false), Span(2,3,List(24),invitation,invite-01,false)),Map(2 -> all, 5 -> ministry, 12 -> bear-01, 8 -> person, 15 -> family, 21 -> -, 18 -> journalist, 24 -> invite-01, 7 -> and, 1 -> available, 17 -> member, 23 -> and, 4 -> promise-01, 11 -> thing, 14 -> and, 20 -> few, 6 -> foreign, 9 -> represent-01, 0 -> material, 22 -> accompany-01, 16 -> have-org-role-91, 19 -> 25, 10 -> visit-01, 3 -> submit-01, 13 -> society),Map(m3 -> member, h -> have-org-role-91, 2 -> 25, s2 -> society, t -> thing, b -> bear-01, m2 -> ministry, p2 -> person, a3 -> and, j -> journalist, s -> submit-01, a6 -> and, v -> visit-01, m -> material, p -> promise-01, a -> available, a5 -> accompany-01, f3 -> few, r -> represent-01, a2 -> all, i -> invite-01, - -> -, f2 -> family, f -> foreign, a4 -> and))),[Ljava.lang.String;@1adf43b7,Annotation([Ljava.lang.String;@37d6b129,[Ljava.lang.String;@70091762,[Ljava.lang.String;@64de5c64),Annotation([Ljava.lang.String;@4283dcf8,[Ljava.lang.String;@5f203fe5,[Ledu.cmu.lti.nlp.amr.Dependency;@3e43042d),Annotation([Ljava.lang.String;@21c7464a,[Ljava.lang.String;@21d7b599,[Ljava.lang.String;@58d3612a),Annotation([Ljava.lang.String;@1d9039f5,[Ljava.lang.String;@67cd12fc,[Ledu.cmu.lti.nlp.amr.Entity;@489993a1))
AMR:
(a4 / and, op, f2 / family)
(a4 / and, op, j / journalist)
(a4 / and, op, s2 / society)
(a5 / accompany-01, ARG0, j / journalist)
(a6 / and, op, a5 / accompany-01)
(b / bear-01, ARG1, s2 / society)
(b / bear-01, manner, t / thing)
(f3 / few, mod, - / -)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, f2 / family)
(h / have-org-role-91, ARG2, m3 / member)
(i / invite-01, ARG1, a6 / and)
(j / journalist, mod, f3 / few)
(j / journalist, quant, 2 / 25)
(m / material, quant, a2 / all)
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, m2 / ministry)
(p / promise-01, ARG2, s / submit-01)
(r / represent-01, ARG0, p2 / person)
(r / represent-01, ARG1, a3 / and)
(s / submit-01, ARG1, a2 / all)
(s / submit-01, mod, f / foreign)
(v / visit-01, ARG0, a / available)
(v / visit-01, ARG1, p2 / person)

Decoded in 845,366 microseconds
Sentence: theyll be as interested in them as you are since you have obviously been satisfactory and promise to be even more valuable once youve acquired other skills

Spans:
Span 24-25:  acquired => acquire-01
Span 15-16:  and => and
Span 3-4:  interested => interest-01
Span 12-13:  obviously => obvious-41
Span 22-23:  once => once
Span 25-26:  other => other
Span 16-17:  promise => promise-01
Span 9-10:  since => since
Span 26-27:  skills => skill
Span 21-22:  valuable => value-01
Span 10-11:  you => you
Span 7-8:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),skills,skill,false), Span(25,26,List(1),other,other,false), Span(24,25,List(2),acquired,acquire-01,false), Span(22,23,List(3),once,once,false), Span(21,22,List(4),valuable,value-01,false), Span(16,17,List(5),promise,promise-01,false), Span(15,16,List(6),and,and,false), Span(12,13,List(7),obviously,obvious-41,false), Span(10,11,List(8),you,you,false), Span(9,10,List(9),since,since,false), Span(7,8,List(10),you,you,false), Span(3,4,List(11),interested,interest-01,false)),Map(2 -> acquire-01, 5 -> promise-01, 8 -> you, 7 -> obvious-41, 1 -> other, 11 -> interest-01, 4 -> value-01, 6 -> and, 9 -> since, 0 -> skill, 10 -> you, 3 -> once),Map(s2 -> since, o3 -> obvious-41, s -> skill, v -> value-01, y -> you, p -> promise-01, a -> acquire-01, o2 -> once, i -> interest-01, a2 -> and, o -> other, y2 -> you))),[Ljava.lang.String;@26292936,Annotation([Ljava.lang.String;@5850abcc,[Ljava.lang.String;@183f0b60,[Ljava.lang.String;@5303d80f),Annotation([Ljava.lang.String;@215deb5d,[Ljava.lang.String;@1d0737c8,[Ledu.cmu.lti.nlp.amr.Dependency;@44df3a5b),Annotation([Ljava.lang.String;@1b704fb0,[Ljava.lang.String;@6a7fb9e2,[Ljava.lang.String;@6784db0d),Annotation([Ljava.lang.String;@43496793,[Ljava.lang.String;@82f0668,[Ledu.cmu.lti.nlp.amr.Entity;@474d9a0a))
AMR:
(a / acquire-01, ARG1, s / skill)
(a2 / and, op, i / interest-01)
(a2 / and, op, p / promise-01)
(a2 / and, time, o3 / obvious-41)
(i / interest-01, ARG1, y2 / you)
(o2 / once, op, a / acquire-01)
(p / promise-01, ARG1, v / value-01)
(s / skill, mod, o / other)
(s2 / since, op, a2 / and)
(s2 / since, op, y / you)
(v / value-01, ARG1, o2 / once)

Decoded in 103,995 microseconds
Sentence: for its part the european commission promised proposals next month for an action programme of social legislation demanded by the charter

Spans:
Span 12-13:  action => action
Span 20-21:  charter => charter-01
Span 5-6:  commission => commission
Span 17-18:  demanded => demand-01
Span 4-5:  european => (continent :name (name :op "Europe"))
Span 16-17:  legislation => legislation
Span 9-10:  month => (temporal-quantity :unit month)
Span 8-9:  next => next
Span 13-14:  programme => program
Span 6-7:  promised => promise-01
Span 7-8:  proposals => (thing :ARG1-of propose-01)
Span 15-16:  social => society

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),charter,charter-01,false), Span(17,18,List(1),demanded,demand-01,false), Span(16,17,List(2),legislation,legislation,false), Span(15,16,List(3),social,society,false), Span(13,14,List(4),programme,program,false), Span(12,13,List(5),action,action,false), Span(9,10,List(7, 6),month,(temporal-quantity :unit month),false), Span(8,9,List(8),next,next,false), Span(7,8,List(10, 9),proposals,(thing :ARG1-of propose-01),false), Span(6,7,List(11),promised,promise-01,false), Span(5,6,List(12),commission,commission,false), Span(4,5,List(15, 14, 13),european,(continent :name (name :op "Europe")),false)),Map(2 -> legislation, 5 -> action, 12 -> commission, 15 -> "Europe", 8 -> next, 7 -> month, 1 -> demand-01, 4 -> program, 11 -> promise-01, 14 -> name, 6 -> temporal-quantity, 0 -> charter-01, 9 -> thing, 3 -> society, 10 -> propose-01, 13 -> continent),Map(n -> next, t -> temporal-quantity, p2 -> propose-01, s -> society, d -> demand-01, m -> month, p -> program, c3 -> continent, a -> action, t2 -> thing, c -> charter-01, l -> legislation, p3 -> promise-01, n2 -> name, c2 -> commission))),[Ljava.lang.String;@37bc2b18,Annotation([Ljava.lang.String;@22b1513e,[Ljava.lang.String;@274ccf3d,[Ljava.lang.String;@23b9c1f3),Annotation([Ljava.lang.String;@786c4ad7,[Ljava.lang.String;@da5a705,[Ledu.cmu.lti.nlp.amr.Dependency;@76784042),Annotation([Ljava.lang.String;@50c2e9d1,[Ljava.lang.String;@2c84c1c3,[Ljava.lang.String;@3fcd000a),Annotation([Ljava.lang.String;@2bbdb13f,[Ljava.lang.String;@32bfb588,[Ledu.cmu.lti.nlp.amr.Entity;@48270dbf))
AMR:
(c / charter-01, ARG1, t / temporal-quantity)
(c2 / commission, mod, c3 / continent)
(c3 / continent, name, n2 / name)
(d / demand-01, ARG0, c / charter-01)
(d / demand-01, ARG1, l / legislation)
(l / legislation, mod, s / society)
(m / month, mod, n / next)
(n2 / name, op, "Europe")
(p / program, mod, a / action)
(p2 / propose-01, ARG1, t2 / thing)
(p2 / propose-01, time, t / temporal-quantity)
(p3 / promise-01, ARG0, c2 / commission)
(p3 / promise-01, ARG1, t2 / thing)
(p3 / promise-01, ARG2, p / program)
(t / temporal-quantity, unit, m / month)

Decoded in 132,248 microseconds
Sentence: unauthorised by the city fathers but whose immunity had been promised beforehand in person by the kgb chairman vladimir kryuchkov to andrei sakharov the countrys most famous campaigner for human rights

Spans:
Span 11-12:  beforehand => beforehand
Span 5-6:  but => contrast-01
Span 17-18:  chairman => (have-org-role-91 :ARG2 chairman)
Span 3-4:  city => city
Span 26-27:  famous => famous
Span 4-5:  fathers => father
Span 29-30:  human => human
Span 7-8:  immunity => immunity
Span 25-26:  most => most
Span 13-14:  person => person
Span 10-11:  promised => promise-01
Span 30-31:  rights => right

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),rights,right,false), Span(29,30,List(1),human,human,false), Span(26,27,List(2),famous,famous,false), Span(25,26,List(3),most,most,false), Span(17,18,List(5, 4),chairman,(have-org-role-91 :ARG2 chairman),false), Span(13,14,List(6),person,person,false), Span(11,12,List(7),beforehand,beforehand,false), Span(10,11,List(8),promised,promise-01,false), Span(7,8,List(9),immunity,immunity,false), Span(5,6,List(10),but,contrast-01,false), Span(4,5,List(11),fathers,father,false), Span(3,4,List(12),city,city,false)),Map(2 -> famous, 5 -> chairman, 12 -> city, 8 -> promise-01, 7 -> beforehand, 1 -> human, 4 -> have-org-role-91, 11 -> father, 6 -> person, 0 -> right, 9 -> immunity, 3 -> most, 10 -> contrast-01),Map(h -> human, h2 -> have-org-role-91, b -> beforehand, p2 -> promise-01, m -> most, p -> person, c3 -> city, r -> right, i -> immunity, c -> chairman, f2 -> father, f -> famous, c2 -> contrast-01))),[Ljava.lang.String;@7bf79b9a,Annotation([Ljava.lang.String;@3d08db0b,[Ljava.lang.String;@1064ce7b,[Ljava.lang.String;@4a2ff5a5),Annotation([Ljava.lang.String;@12a849b0,[Ljava.lang.String;@667dcb61,[Ledu.cmu.lti.nlp.amr.Dependency;@4cb381d8),Annotation([Ljava.lang.String;@1d11b33f,[Ljava.lang.String;@750efc01,[Ljava.lang.String;@2ac2e1b1),Annotation([Ljava.lang.String;@606f4165,[Ljava.lang.String;@282e7f59,[Ledu.cmu.lti.nlp.amr.Entity;@4aac0ab))
AMR:
(c2 / contrast-01, ARG1, p2 / promise-01)
(f / famous, degree, m / most)
(f / famous, op, c2 / contrast-01)
(f2 / father, mod, c3 / city)
(h / human, op, c2 / contrast-01)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c3 / city)
(h2 / have-org-role-91, ARG2, c / chairman)
(p2 / promise-01, ARG0, p / person)
(p2 / promise-01, ARG1, i / immunity)
(p2 / promise-01, manner, b / beforehand)
(r / right, mod, h / human)

Decoded in 220,393 microseconds
Sentence: ministers will also be seeking to lift sagging tory morale by offering assurances on a range of issues which promise to make this one of the most difficult annual conferences the party leadership has faced since margaret thatcher came to office

Spans:
Span 2-3:  also => also
Span 12-13:  assurances => assure-01
Span 29-30:  conferences => conference
Span 27-28:  difficult => difficult
Span 34-35:  faced => face-01
Span 17-18:  issues => issue
Span 6-7:  lift => lift-01
Span 0-1:  ministers => (have-org-role-91 :ARG2 minister)
Span 26-27:  most => most
Span 11-12:  offering => offer-01
Span 40-41:  office => office
Span 31-32:  party => party
Span 19-20:  promise => promise-01
Span 15-16:  range => range-01
Span 4-5:  seeking => seek-01
Span 35-36:  since => since
Span 22-23:  this => this
Span 8-9:  tory => (political-party :name (name :op "Tory"))

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),office,office,false), Span(35,36,List(1),since,since,false), Span(34,35,List(2),faced,face-01,false), Span(31,32,List(3),party,party,false), Span(29,30,List(4),conferences,conference,false), Span(27,28,List(5),difficult,difficult,false), Span(26,27,List(6),most,most,false), Span(22,23,List(7),this,this,false), Span(19,20,List(8),promise,promise-01,false), Span(17,18,List(9),issues,issue,false), Span(15,16,List(10),range,range-01,false), Span(12,13,List(11),assurances,assure-01,false), Span(11,12,List(12),offering,offer-01,false), Span(8,9,List(15, 14, 13),tory,(political-party :name (name :op "Tory")),false), Span(6,7,List(16),lift,lift-01,false), Span(4,5,List(17),seeking,seek-01,false), Span(2,3,List(18),also,also,false), Span(0,1,List(20, 19),ministers,(have-org-role-91 :ARG2 minister),false)),Map(2 -> face-01, 5 -> difficult, 12 -> offer-01, 15 -> "Tory", 8 -> promise-01, 18 -> also, 7 -> this, 17 -> seek-01, 1 -> since, 4 -> conference, 11 -> assure-01, 14 -> name, 20 -> minister, 6 -> most, 0 -> office, 9 -> issue, 16 -> lift-01, 19 -> have-org-role-91, 3 -> party, 10 -> range-01, 13 -> political-party),Map(n -> name, h -> have-org-role-91, s2 -> seek-01, t -> this, m2 -> minister, p2 -> promise-01, s -> since, d -> difficult, m -> most, p -> party, a -> assure-01, o2 -> offer-01, a2 -> also, i -> issue, r -> range-01, c -> conference, l -> lift-01, f -> face-01, o -> office, p3 -> political-party))),[Ljava.lang.String;@664f1cf1,Annotation([Ljava.lang.String;@53f546b0,[Ljava.lang.String;@bf3f7e0,[Ljava.lang.String;@3e169941),Annotation([Ljava.lang.String;@3da79a3f,[Ljava.lang.String;@467fbdb8,[Ledu.cmu.lti.nlp.amr.Dependency;@6c809f30),Annotation([Ljava.lang.String;@70533ff6,[Ljava.lang.String;@698c6916,[Ljava.lang.String;@147597d),Annotation([Ljava.lang.String;@73441e32,[Ljava.lang.String;@7d1a9fbc,[Ledu.cmu.lti.nlp.amr.Entity;@5eed2fce))
AMR:
(a / assure-01, ARG0, t / this)
(a / assure-01, ARG1, i / issue)
(a / assure-01, ARG2, o2 / offer-01)
(c / conference, mod, d / difficult)
(d / difficult, degree, m / most)
(f / face-01, ARG1, c / conference)
(f / face-01, time, s / since)
(h / have-org-role-91, ARG1, p3 / political-party)
(h / have-org-role-91, ARG2, m2 / minister)
(l / lift-01, ARG0, h / have-org-role-91)
(l / lift-01, ARG3, a / assure-01)
(n / name, op, "Tory")
(o2 / offer-01, ARG0, p / party)
(o2 / offer-01, ARG1, f / face-01)
(p2 / promise-01, ARG0, i / issue)
(p2 / promise-01, ARG1, o / office)
(p3 / political-party, name, n / name)
(r / range-01, ARG1, i / issue)
(s2 / seek-01, ARG1, l / lift-01)
(s2 / seek-01, mod, a2 / also)

Decoded in 415,608 microseconds
Sentence: in 1917 india had been promised responsible government ellip

NER Entity: (country :name (name :op "india"))
NER Entity: (country :name (name :op "india"))
Spans:
Span 1-2:  1917 => (date-entity :year 1917)
Span 2-3:  india => (country :name (name :op "India"))
Span 5-6:  promised => promise-01
Span 6-7:  responsible => responsible-41

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),responsible,responsible-41,false), Span(5,6,List(1),promised,promise-01,false), Span(2,3,List(4, 3, 2),india,(country :name (name :op "India")),false), Span(1,2,List(6, 5),1917,(date-entity :year 1917),false)),Map(2 -> country, 5 -> date-entity, 1 -> promise-01, 4 -> "India", 6 -> 1917, 0 -> responsible-41, 3 -> name),Map(n -> name, d -> date-entity, 1 -> 1917, p -> promise-01, r -> responsible-41, c -> country))),[Ljava.lang.String;@72808c3,Annotation([Ljava.lang.String;@55573de0,[Ljava.lang.String;@529f68e5,[Ljava.lang.String;@5f9fbcc3),Annotation([Ljava.lang.String;@7021d740,[Ljava.lang.String;@3dbae443,[Ledu.cmu.lti.nlp.amr.Dependency;@38e00a5e),Annotation([Ljava.lang.String;@7cc8be7d,[Ljava.lang.String;@5f52408b,[Ljava.lang.String;@110b9691),Annotation([Ljava.lang.String;@fca1255,[Ljava.lang.String;@1b79928c,[Ledu.cmu.lti.nlp.amr.Entity;@4a84336b))
AMR:
(c / country, name, n / name)
(d / date-entity, year, 1 / 1917)
(n / name, op, "India")
(p / promise-01, ARG1, c / country)
(r / responsible-41, ARG1, c / country)
(r / responsible-41, ARG2, d / date-entity)

Decoded in 59,241 microseconds
Sentence:   after two lengthy meetings with mr field mr kinnock promised a thorough investigation into mr fields allegations about militant infiltration in wirral including birkenhead

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   after two lengthy meetings with mr field mr kinnock promised a thorough investigation into mr fields allegations about militant infiltration in wirral including birkenhead
myTokenized = after two lengthy meetings with mr field mr kinnock promised a thorough investigation into mr fields allegations about militant infiltration in wirral including birkenhead
i = 0
prefix = List(after)
regexr = \Qa\E ?\Qf\E ?\Qt\E ?\Qe\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he is confident that the fleet will still have about 50 modern destroyers and frigates at the turn of the century as the government has promised

Spans:
Span 10-11:  50 => 50
Span 13-14:  and => and
Span 2-3:  confident => confident-41
Span 12-13:  destroyers => destroyer
Span 5-6:  fleet => fleet
Span 0-1:  he => he
Span 11-12:  modern => modern
Span 25-26:  promised => promise-01
Span 7-8:  still => still

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),promised,promise-01,false), Span(13,14,List(1),and,and,false), Span(12,13,List(2),destroyers,destroyer,false), Span(11,12,List(3),modern,modern,false), Span(10,11,List(4),50,50,false), Span(7,8,List(5),still,still,false), Span(5,6,List(6),fleet,fleet,false), Span(2,3,List(7),confident,confident-41,false), Span(0,1,List(8),he,he,false)),Map(2 -> destroyer, 5 -> still, 8 -> he, 7 -> confident-41, 1 -> and, 4 -> 50, 6 -> fleet, 0 -> promise-01, 3 -> modern),Map(h -> he, 5 -> 50, s -> still, m -> modern, d -> destroyer, p -> promise-01, a -> and, c -> confident-41, f -> fleet))),[Ljava.lang.String;@4f59e37e,Annotation([Ljava.lang.String;@16668de5,[Ljava.lang.String;@26edc0e0,[Ljava.lang.String;@4311c617),Annotation([Ljava.lang.String;@43e43267,[Ljava.lang.String;@3aa92b03,[Ledu.cmu.lti.nlp.amr.Dependency;@3846f00b),Annotation([Ljava.lang.String;@39397f0a,[Ljava.lang.String;@6dc386df,[Ljava.lang.String;@3fcbd2c5),Annotation([Ljava.lang.String;@5e7aa43b,[Ljava.lang.String;@45b44df2,[Ledu.cmu.lti.nlp.amr.Entity;@40696e9e))
AMR:
(a / and, op, d / destroyer)
(a / and, op, p / promise-01)
(c / confident-41, ARG0, s / still)
(c / confident-41, ARG1, h / he)
(d / destroyer, mod, m / modern)
(d / destroyer, poss, f / fleet)
(d / destroyer, quant, 5 / 50)
(p / promise-01, ARG0, h / he)

Decoded in 118,805 microseconds
Sentence: is that they must now accept far greater liability for the quality and safety of what they sell and deliver what they promise

Spans:
Span 5-6:  accept => accept-01
Span 18-19:  and => and
Span 12-13:  and => and
Span 19-20:  deliver => deliver-01
Span 6-7:  far => far
Span 7-8:  greater => great
Span 8-9:  liability => liability
Span 4-5:  now => now
Span 22-23:  promise => promise-01
Span 11-12:  quality => quality
Span 13-14:  safety => safe-41
Span 17-18:  sell => sell-01
Span 21-22:  they => they
Span 16-17:  they => they
Span 2-3:  they => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),promise,promise-01,false), Span(21,22,List(1),they,they,false), Span(19,20,List(2),deliver,deliver-01,false), Span(18,19,List(3),and,and,false), Span(17,18,List(4),sell,sell-01,false), Span(16,17,List(5),they,they,false), Span(13,14,List(6),safety,safe-41,false), Span(12,13,List(7),and,and,false), Span(11,12,List(8),quality,quality,false), Span(8,9,List(9),liability,liability,false), Span(7,8,List(10),greater,great,false), Span(6,7,List(11),far,far,false), Span(5,6,List(12),accept,accept-01,false), Span(4,5,List(13),now,now,false), Span(2,3,List(14),they,they,false)),Map(2 -> deliver-01, 5 -> they, 12 -> accept-01, 8 -> quality, 7 -> and, 1 -> they, 4 -> sell-01, 11 -> far, 14 -> they, 6 -> safe-41, 0 -> promise-01, 9 -> liability, 3 -> and, 10 -> great, 13 -> now),Map(n -> now, q -> quality, s2 -> safe-41, t -> they, a3 -> accept-01, s -> sell-01, d -> deliver-01, t3 -> they, p -> promise-01, g -> great, a -> and, t2 -> they, a2 -> and, l -> liability, f -> far))),[Ljava.lang.String;@49dd681b,Annotation([Ljava.lang.String;@66ddea7f,[Ljava.lang.String;@734e6c9b,[Ljava.lang.String;@21bc6f41),Annotation([Ljava.lang.String;@5a2c25b4,[Ljava.lang.String;@85f7aac,[Ledu.cmu.lti.nlp.amr.Dependency;@346eb67f),Annotation([Ljava.lang.String;@508f66bd,[Ljava.lang.String;@76a22b9c,[Ljava.lang.String;@10dd4b9d),Annotation([Ljava.lang.String;@308f3911,[Ljava.lang.String;@aeba3ff,[Ledu.cmu.lti.nlp.amr.Entity;@745bbff2))
AMR:
(a / and, op, a3 / accept-01)
(a / and, op, s / sell-01)
(a2 / and, op, d / deliver-01)
(a2 / and, op, s2 / safe-41)
(a3 / accept-01, ARG0, t3 / they)
(a3 / accept-01, ARG1, l / liability)
(a3 / accept-01, prep-under, q / quality)
(a3 / accept-01, time, n / now)
(d / deliver-01, ARG0, t3 / they)
(d / deliver-01, ARG1, p / promise-01)
(g / great, mod, f / far)
(l / liability, mod, g / great)
(p / promise-01, ARG0, t / they)
(s / sell-01, ARG0, t2 / they)

Decoded in 78,190 microseconds
Sentence: it was a measure of the crisis facing the soviet economy that mr gorbachev felt obliged to appear on television yesterday promising that the supreme soviet and the government would urgently consider their demands

NER Entity: (country :name (name :op "soviet"))
NER Entity: (country :name (name :op "soviet"))
Spans:
Span 26-27:  and => and
Span 17-18:  appear => appear-02
Span 31-32:  consider => consider-02
Span 6-7:  crisis => crisis
Span 33-34:  demands => demand-01
Span 10-11:  economy => economy
Span 7-8:  facing => face-01
Span 14-15:  felt => feel-01
Span 0-1:  it => it
Span 3-4:  measure => measure
Span 15-16:  obliged => oblige-02
Span 21-22:  promising => promise-01
Span 24-25:  supreme => supreme
Span 19-20:  television => television
Span 30-31:  urgently => urgent
Span 20-21:  yesterday => yesterday

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),demands,demand-01,false), Span(31,32,List(1),consider,consider-02,false), Span(30,31,List(2),urgently,urgent,false), Span(26,27,List(3),and,and,false), Span(24,25,List(4),supreme,supreme,false), Span(21,22,List(5),promising,promise-01,false), Span(20,21,List(6),yesterday,yesterday,false), Span(19,20,List(7),television,television,false), Span(17,18,List(8),appear,appear-02,false), Span(15,16,List(9),obliged,oblige-02,false), Span(14,15,List(10),felt,feel-01,false), Span(10,11,List(11),economy,economy,false), Span(7,8,List(12),facing,face-01,false), Span(6,7,List(13),crisis,crisis,false), Span(3,4,List(14),measure,measure,false), Span(0,1,List(15),it,it,false)),Map(2 -> urgent, 5 -> promise-01, 12 -> face-01, 15 -> it, 8 -> appear-02, 7 -> television, 1 -> consider-02, 4 -> supreme, 11 -> economy, 14 -> measure, 6 -> yesterday, 0 -> demand-01, 9 -> oblige-02, 3 -> and, 10 -> feel-01, 13 -> crisis),Map(e -> economy, t -> television, s -> supreme, m -> measure, d -> demand-01, p -> promise-01, y -> yesterday, a -> and, i -> it, a2 -> appear-02, c -> consider-02, u -> urgent, f2 -> face-01, f -> feel-01, o -> oblige-02, c2 -> crisis))),[Ljava.lang.String;@3396e48c,Annotation([Ljava.lang.String;@7776bdc9,[Ljava.lang.String;@14a61465,[Ljava.lang.String;@2384fd7a),Annotation([Ljava.lang.String;@701d66cd,[Ljava.lang.String;@1a48563c,[Ledu.cmu.lti.nlp.amr.Dependency;@3158a9f),Annotation([Ljava.lang.String;@7b3fce4d,[Ljava.lang.String;@1a016072,[Ljava.lang.String;@5062e9b4),Annotation([Ljava.lang.String;@ddd51a7,[Ljava.lang.String;@3d1bb20d,[Ledu.cmu.lti.nlp.amr.Entity;@654692d2))
AMR:
(a2 / appear-02, ARG1, t / television)
(c / consider-02, ARG0, a / and)
(c / consider-02, ARG1, d / demand-01)
(c / consider-02, manner, u / urgent)
(c / consider-02, mod, s / supreme)
(f / feel-01, ARG0, e / economy)
(f / feel-01, ARG1, o / oblige-02)
(f / feel-01, purpose, p / promise-01)
(f2 / face-01, ARG0, e / economy)
(f2 / face-01, ARG1, c2 / crisis)
(m / measure, domain, i / it)
(m / measure, op, c2 / crisis)
(o / oblige-02, ARG2, a2 / appear-02)
(p / promise-01, ARG0, y / yesterday)
(p / promise-01, ARG1, c / consider-02)

Decoded in 424,667 microseconds
Sentence: rain had promised supper in lymington in exchange for the bed and breakfast

NER Entity: (country :name (name :op "lymington"))
Spans:
Span 11-12:  and => and
Span 10-11:  bed => bed
Span 7-8:  exchange => exchange-01
Span 2-3:  promised => promise-01
Span 0-1:  rain => rain-01
Span 3-4:  supper => supper

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),and,and,false), Span(10,11,List(1),bed,bed,false), Span(7,8,List(2),exchange,exchange-01,false), Span(3,4,List(3),supper,supper,false), Span(2,3,List(4),promised,promise-01,false), Span(0,1,List(5),rain,rain-01,false)),Map(2 -> exchange-01, 5 -> rain-01, 1 -> bed, 4 -> promise-01, 0 -> and, 3 -> supper),Map(e -> exchange-01, b -> bed, s -> supper, p -> promise-01, a -> and, r -> rain-01))),[Ljava.lang.String;@7c514cef,Annotation([Ljava.lang.String;@3d921eac,[Ljava.lang.String;@441bcdc8,[Ljava.lang.String;@7d632866),Annotation([Ljava.lang.String;@78f180d9,[Ljava.lang.String;@37426497,[Ledu.cmu.lti.nlp.amr.Dependency;@67da11d8),Annotation([Ljava.lang.String;@1dc9b12c,[Ljava.lang.String;@248ecefb,[Ljava.lang.String;@1bb6d37d),Annotation([Ljava.lang.String;@7ff6c1c1,[Ljava.lang.String;@212aa789,[Ledu.cmu.lti.nlp.amr.Entity;@775d2461))
AMR:
(a / and, op, e / exchange-01)
(e / exchange-01, ARG0, r / rain-01)
(e / exchange-01, ARG1, b / bed)
(p / promise-01, ARG0, r / rain-01)
(p / promise-01, ARG1, s / supper)

Decoded in 18,638 microseconds
Sentence: it may have been wrong to promise to give my son fireworks for they are too dangerous

Spans:
Span 16-17:  dangerous => dangerous
Span 11-12:  fireworks => firework
Span 8-9:  give => give-01
Span 0-1:  it => it
Span 1-2:  may => (date-entity :month 5)
Span 6-7:  promise => promise-01
Span 10-11:  son => (have-rel-role-91 :ARG2 son)
Span 13-14:  they => they
Span 15-16:  too => too
Span 4-5:  wrong => wrong-41

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),dangerous,dangerous,false), Span(15,16,List(1),too,too,false), Span(13,14,List(2),they,they,false), Span(11,12,List(3),fireworks,firework,false), Span(10,11,List(5, 4),son,(have-rel-role-91 :ARG2 son),false), Span(8,9,List(6),give,give-01,false), Span(6,7,List(7),promise,promise-01,false), Span(4,5,List(8),wrong,wrong-41,false), Span(1,2,List(10, 9),may,(date-entity :month 5),false), Span(0,1,List(11),it,it,false)),Map(2 -> they, 5 -> son, 8 -> wrong-41, 7 -> promise-01, 1 -> too, 11 -> it, 4 -> have-rel-role-91, 6 -> give-01, 9 -> date-entity, 0 -> dangerous, 10 -> 5, 3 -> firework),Map(w -> wrong-41, h -> have-rel-role-91, 5 -> 5, t -> too, s -> son, d -> dangerous, p -> promise-01, g -> give-01, d2 -> date-entity, t2 -> they, i -> it, f -> firework))),[Ljava.lang.String;@3ff9980,Annotation([Ljava.lang.String;@1b6a48d,[Ljava.lang.String;@7ded25db,[Ljava.lang.String;@5c508d73),Annotation([Ljava.lang.String;@2c76a85e,[Ljava.lang.String;@2227ca20,[Ledu.cmu.lti.nlp.amr.Dependency;@62470c64),Annotation([Ljava.lang.String;@267eaba4,[Ljava.lang.String;@4636afba,[Ljava.lang.String;@304b0059),Annotation([Ljava.lang.String;@c03ebd4,[Ljava.lang.String;@556fb175,[Ledu.cmu.lti.nlp.amr.Entity;@17eba425))
AMR:
(d / dangerous, degree, t / too)
(d / dangerous, domain, i / it)
(d / dangerous, domain, t2 / they)
(d2 / date-entity, domain, w / wrong-41)
(d2 / date-entity, month, 5 / 5)
(g / give-01, ARG1, f / firework)
(h / have-rel-role-91, ARG0, f / firework)
(h / have-rel-role-91, ARG2, s / son)
(p / promise-01, ARG2, g / give-01)
(w / wrong-41, ARG1, i / it)
(w / wrong-41, ARG2, p / promise-01)

Decoded in 48,340 microseconds
Sentence: he promised there is no hiding place for them in the housing schemes of glasgow

NER Entity: (country :name (name :op "glasgow"))
Spans:
Span 0-1:  he => he
Span 5-6:  hiding => hide-01
Span 11-12:  housing => house-01
Span 4-5:  no => -
Span 6-7:  place => place
Span 1-2:  promised => promise-01
Span 12-13:  schemes => scheme-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),schemes,scheme-01,false), Span(11,12,List(1),housing,house-01,false), Span(6,7,List(2),place,place,false), Span(5,6,List(3),hiding,hide-01,false), Span(4,5,List(4),no,-,false), Span(1,2,List(5),promised,promise-01,false), Span(0,1,List(6),he,he,false)),Map(2 -> place, 5 -> promise-01, 1 -> house-01, 4 -> -, 6 -> he, 0 -> scheme-01, 3 -> hide-01),Map(h -> house-01, h2 -> hide-01, p2 -> promise-01, s -> scheme-01, p -> place, - -> -, h3 -> he))),[Ljava.lang.String;@6f658567,Annotation([Ljava.lang.String;@72196653,[Ljava.lang.String;@618d0daa,[Ljava.lang.String;@737c45ee),Annotation([Ljava.lang.String;@63d3477d,[Ljava.lang.String;@43fa92be,[Ledu.cmu.lti.nlp.amr.Dependency;@77b81acf),Annotation([Ljava.lang.String;@57e84970,[Ljava.lang.String;@532d8526,[Ljava.lang.String;@5180ac73),Annotation([Ljava.lang.String;@56b9dbd2,[Ljava.lang.String;@440ee479,[Ledu.cmu.lti.nlp.amr.Entity;@2db9e6d7))
AMR:
(h / house-01, ARG0, s / scheme-01)
(h2 / hide-01, ARG0, p / place)
(h2 / hide-01, ARG1, s / scheme-01)
(p / place, polarity, - / -)
(p2 / promise-01, ARG0, h3 / he)
(p2 / promise-01, ARG1, p / place)

Decoded in 22,753 microseconds
Sentence: and to cap it all off when she was tiedup she couldnt run backwards so she lay down instead  inanna was the most beautiful friendly and uncooperative horse that one could ever have the misfortune to own because from her looks she promised so much but from her heart she gave so little

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = and to cap it all off when she was tiedup she couldnt run backwards so she lay down instead  inanna was the most beautiful friendly and uncooperative horse that one could ever have the misfortune to own because from her looks she promised so much but from her heart she gave so little
myTokenized = and to cap it all off when she was tiedup she couldnt run backwards so she lay down instead inanna was the most beautiful friendly and uncooperative horse that one could ever have the misfortune to own because from her looks she promised so much but from her heart she gave so little
i = 19
prefix = List(and, to, cap, it, all, off, when, she, was, tiedup, she, couldnt, run, backwards, so, she, lay, down, instead, inanna)
regexr = \Qa\E ?\Qn\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qc\E ?\Qa\E ?\Qp\E ?\Qi\E ?\Qt\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qo\E ?\Qf\E ?\Qf\E ?\Qw\E ?\Qh\E ?\Qe\E ?\Qn\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Qw\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qi\E ?\Qe\E ?\Qd\E ?\Qu\E ?\Qp\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Qc\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qn\E ?\Qt\E ?\Qr\E ?\Qu\E ?\Qn\E ?\Qb\E ?\Qa\E ?\Qc\E ?\Qk\E ?\Qw\E ?\Qa\E ?\Qr\E ?\Qd\E ?\Qs\E ?\Qs\E ?\Qo\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qy\E ?\Qd\E ?\Qo\E ?\Qw\E ?\Qn\E ?\Qi\E ?\Qn\E ?\Qs\E ?\Qt\E ?\Qe\E ?\Qa\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qn\E ?\Qn\E ?\Qa\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: 5 million promised to the church urban fund by the three counties of the diocese of oxford is almost matched by fabric appeals totalling 1

NER Entity: (organization :name (name :op "diocese" :op "of" :op "oxford"))
Spans:
Span 24-25:  1 => 1
Span 0-1:  5 => 5
Span 18-19:  almost => almost
Span 22-23:  appeals => appeal-01
Span 5-6:  church => church
Span 11-12:  counties => county
Span 14-17:  diocese of oxford => (organization :name (name :op "diocese" :op "of" :op "oxford"))
Span 21-22:  fabric => fabric
Span 7-8:  fund => fund-01
Span 19-20:  matched => match-01
Span 2-3:  promised => promise-01
Span 10-11:  three => 3
Span 6-7:  urban => urban

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),1,1,false), Span(22,23,List(1),appeals,appeal-01,false), Span(21,22,List(2),fabric,fabric,false), Span(19,20,List(3),matched,match-01,false), Span(18,19,List(4),almost,almost,false), Span(14,17,List(9, 8, 7, 6, 5),diocese of oxford,(organization :name (name :op "diocese" :op "of" :op "oxford")),false), Span(11,12,List(10),counties,county,false), Span(10,11,List(11),three,3,false), Span(7,8,List(12),fund,fund-01,false), Span(6,7,List(13),urban,urban,false), Span(5,6,List(14),church,church,false), Span(2,3,List(15),promised,promise-01,false), Span(0,1,List(16),5,5,false)),Map(2 -> fabric, 5 -> organization, 12 -> fund-01, 15 -> promise-01, 8 -> "of", 7 -> "diocese", 1 -> appeal-01, 4 -> almost, 11 -> 3, 14 -> church, 6 -> name, 0 -> 1, 9 -> "oxford", 16 -> 5, 3 -> match-01, 10 -> county, 13 -> urban),Map(n -> name, 5 -> 5, m -> match-01, 1 -> 1, p -> promise-01, a -> appeal-01, a2 -> almost, c -> county, f2 -> fund-01, u -> urban, f -> fabric, o -> organization, 3 -> 3, c2 -> church))),[Ljava.lang.String;@384ddd18,Annotation([Ljava.lang.String;@7fee6f88,[Ljava.lang.String;@7edc8b55,[Ljava.lang.String;@413fba84),Annotation([Ljava.lang.String;@3eee5193,[Ljava.lang.String;@102daa2c,[Ledu.cmu.lti.nlp.amr.Dependency;@25ff3700),Annotation([Ljava.lang.String;@1673f47d,[Ljava.lang.String;@16b8460f,[Ljava.lang.String;@1bff8e70),Annotation([Ljava.lang.String;@26e0696c,[Ljava.lang.String;@57294564,[Ledu.cmu.lti.nlp.amr.Entity;@568ad4f0))
AMR:
(a / appeal-01, ARG0, 5 / 5)
(a / appeal-01, ARG1, f / fabric)
(c / county, poss, o / organization)
(c / county, quant, 3 / 3)
(f2 / fund-01, ARG1, c2 / church)
(f2 / fund-01, mod, u / urban)
(m / match-01, ARG0, c / county)
(m / match-01, ARG1, 1 / 1)
(m / match-01, ARG2, a / appeal-01)
(m / match-01, mod, a2 / almost)
(n / name, op, "diocese")
(n / name, op, "of")
(n / name, op, "oxford")
(o / organization, name, n / name)
(p / promise-01, ARG1, 5 / 5)
(p / promise-01, ARG2, f2 / fund-01)

Decoded in 209,439 microseconds
Sentence: the prosecution is resisting a plea bargain unless the mayor promises not to stand for office again and accepts that he will have to plead guilty to at least one felony

Spans:
Span 18-19:  accepts => accept-01
Span 16-17:  again => again
Span 17-18:  and => and
Span 6-7:  bargain => bargain-01
Span 25-26:  guilty => guilty-41
Span 20-21:  he => he
Span 9-10:  mayor => (have-org-role-91 :ARG2 mayor)
Span 15-16:  office => office
Span 5-6:  plea => plead-02
Span 24-25:  plead => plead-02
Span 10-11:  promises => promise-01
Span 1-2:  prosecution => prosecute-01
Span 3-4:  resisting => resist-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),guilty,guilty-41,false), Span(24,25,List(1),plead,plead-02,false), Span(20,21,List(2),he,he,false), Span(18,19,List(3),accepts,accept-01,false), Span(17,18,List(4),and,and,false), Span(16,17,List(5),again,again,false), Span(15,16,List(6),office,office,false), Span(10,11,List(7),promises,promise-01,false), Span(9,10,List(9, 8),mayor,(have-org-role-91 :ARG2 mayor),false), Span(6,7,List(10),bargain,bargain-01,false), Span(5,6,List(11),plea,plead-02,false), Span(3,4,List(12),resisting,resist-01,false), Span(1,2,List(13),prosecution,prosecute-01,false)),Map(2 -> he, 5 -> again, 12 -> resist-01, 8 -> have-org-role-91, 7 -> promise-01, 1 -> plead-02, 4 -> and, 11 -> plead-02, 6 -> office, 0 -> guilty-41, 9 -> mayor, 3 -> accept-01, 10 -> bargain-01, 13 -> prosecute-01),Map(h -> he, h2 -> have-org-role-91, b -> bargain-01, p2 -> promise-01, a3 -> again, m -> mayor, g -> guilty-41, p -> plead-02, a -> accept-01, p4 -> prosecute-01, a2 -> and, r -> resist-01, o -> office, p3 -> plead-02))),[Ljava.lang.String;@34a204f3,Annotation([Ljava.lang.String;@78f30883,[Ljava.lang.String;@1bb40e7e,[Ljava.lang.String;@4a238067),Annotation([Ljava.lang.String;@60c31037,[Ljava.lang.String;@265dbc82,[Ledu.cmu.lti.nlp.amr.Dependency;@54030e7b),Annotation([Ljava.lang.String;@14abd854,[Ljava.lang.String;@1e077d66,[Ljava.lang.String;@7db9c2f0),Annotation([Ljava.lang.String;@2ead5b0c,[Ljava.lang.String;@773488c4,[Ledu.cmu.lti.nlp.amr.Entity;@19ff3900))
AMR:
(a / accept-01, ARG0, h / he)
(a / accept-01, ARG1, o / office)
(a2 / and, condition, p2 / promise-01)
(a2 / and, op, a / accept-01)
(b / bargain-01, ARG1, p3 / plead-02)
(h2 / have-org-role-91, ARG2, m / mayor)
(p / plead-02, ARG0, h / he)
(p / plead-02, ARG1, g / guilty-41)
(p2 / promise-01, ARG0, m / mayor)
(p2 / promise-01, ARG1, a3 / again)
(r / resist-01, ARG0, p4 / prosecute-01)
(r / resist-01, ARG1, b / bargain-01)
(r / resist-01, condition, p2 / promise-01)

Decoded in 148,678 microseconds
Sentence: in addition it promises to ringfence community care funds and repeats commitments in the policy statement to reintroduce free eye and dental checks and end compulsory competitive tendering

Spans:
Span 23-24:  and => and
Span 20-21:  and => and
Span 9-10:  and => and
Span 7-8:  care => care-01
Span 22-23:  checks => check-01
Span 11-12:  commitments => commit-01
Span 6-7:  community => community
Span 26-27:  competitive => compete-01
Span 25-26:  compulsory => compel-01
Span 19-20:  eye => eye
Span 18-19:  free => free-41
Span 8-9:  funds => fund
Span 2-3:  it => it
Span 14-15:  policy => policy
Span 3-4:  promises => promise-01
Span 17-18:  reintroduce => reintroduce-02
Span 10-11:  repeats => repeat-01
Span 15-16:  statement => state-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),competitive,compete-01,false), Span(25,26,List(1),compulsory,compel-01,false), Span(23,24,List(2),and,and,false), Span(22,23,List(3),checks,check-01,false), Span(20,21,List(4),and,and,false), Span(19,20,List(5),eye,eye,false), Span(18,19,List(6),free,free-41,false), Span(17,18,List(7),reintroduce,reintroduce-02,false), Span(15,16,List(8),statement,state-01,false), Span(14,15,List(9),policy,policy,false), Span(11,12,List(10),commitments,commit-01,false), Span(10,11,List(11),repeats,repeat-01,false), Span(9,10,List(12),and,and,false), Span(8,9,List(13),funds,fund,false), Span(7,8,List(14),care,care-01,false), Span(6,7,List(15),community,community,false), Span(3,4,List(16),promises,promise-01,false), Span(2,3,List(17),it,it,false)),Map(2 -> and, 5 -> eye, 12 -> and, 15 -> community, 8 -> state-01, 7 -> reintroduce-02, 17 -> it, 1 -> compel-01, 4 -> and, 11 -> repeat-01, 14 -> care-01, 6 -> free-41, 0 -> compete-01, 9 -> policy, 16 -> promise-01, 3 -> check-01, 10 -> commit-01, 13 -> fund),Map(e -> eye, p2 -> promise-01, c4 -> commit-01, a3 -> and, s -> state-01, p -> policy, r2 -> repeat-01, a -> and, c3 -> check-01, c6 -> community, i -> it, a2 -> and, r -> reintroduce-02, c -> compete-01, f2 -> fund, f -> free-41, c2 -> compel-01, c5 -> care-01))),[Ljava.lang.String;@759a12cb,Annotation([Ljava.lang.String;@564809be,[Ljava.lang.String;@1377c533,[Ljava.lang.String;@1c33a141),Annotation([Ljava.lang.String;@19fc0de,[Ljava.lang.String;@1f2f2fa7,[Ledu.cmu.lti.nlp.amr.Dependency;@52e18cef),Annotation([Ljava.lang.String;@55ebc96b,[Ljava.lang.String;@6af4bbde,[Ljava.lang.String;@695a22ad),Annotation([Ljava.lang.String;@1c9ac1e4,[Ljava.lang.String;@742f6e67,[Ledu.cmu.lti.nlp.amr.Entity;@55f967c8))
AMR:
(a / and, op, c / compete-01)
(a / and, op, c3 / check-01)
(a / and, op, r / reintroduce-02)
(a2 / and, op, a / and)
(a3 / and, op, f2 / fund)
(c2 / compel-01, ARG1, a / and)
(c4 / commit-01, ARG1, s / state-01)
(c4 / commit-01, manner, r2 / repeat-01)
(c5 / care-01, ARG0, f2 / fund)
(c5 / care-01, ARG1, c6 / community)
(f / free-41, ARG1, e / eye)
(p2 / promise-01, ARG0, i / it)
(p2 / promise-01, ARG2, a3 / and)
(r / reintroduce-02, ARG0, i / it)
(r / reintroduce-02, ARG1, e / eye)
(s / state-01, ARG1, r / reintroduce-02)
(s / state-01, mod, p / policy)

Decoded in 821,023 microseconds
Sentence: id promised my mother id buy her some new centralheating and the only time it could be fitted was the next week so i needed to be home for monday when the workmen came round

Spans:
Span 10-11:  and => and
Span 5-6:  buy => buy-01
Span 15-16:  could => possible
Span 27-28:  home => home
Span 23-24:  i => i
Span 4-5:  id => id
Span 0-1:  id => id
Span 14-15:  it => it
Span 3-4:  mother => (have-rel-role-91 :ARG2 mother)
Span 24-25:  needed => need-01
Span 8-9:  new => new
Span 20-21:  next => next
Span 12-13:  only => only
Span 1-2:  promised => promise-01
Span 34-35:  round => round
Span 22-23:  so => so
Span 7-8:  some => some
Span 13-14:  time => time
Span 21-22:  week => week

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),round,round,false), Span(27,28,List(1),home,home,false), Span(24,25,List(2),needed,need-01,false), Span(23,24,List(3),i,i,false), Span(22,23,List(4),so,so,false), Span(21,22,List(5),week,week,false), Span(20,21,List(6),next,next,false), Span(15,16,List(7),could,possible,false), Span(14,15,List(8),it,it,false), Span(13,14,List(9),time,time,false), Span(12,13,List(10),only,only,false), Span(10,11,List(11),and,and,false), Span(8,9,List(12),new,new,false), Span(7,8,List(13),some,some,false), Span(5,6,List(14),buy,buy-01,false), Span(4,5,List(15),id,id,false), Span(3,4,List(17, 16),mother,(have-rel-role-91 :ARG2 mother),false), Span(1,2,List(18),promised,promise-01,false), Span(0,1,List(19),id,id,false)),Map(2 -> need-01, 5 -> week, 12 -> new, 15 -> id, 8 -> it, 18 -> promise-01, 7 -> possible, 17 -> mother, 1 -> home, 4 -> so, 11 -> and, 14 -> buy-01, 6 -> next, 0 -> round, 9 -> time, 16 -> have-rel-role-91, 19 -> id, 3 -> i, 10 -> only, 13 -> some),Map(n -> need-01, w -> week, i4 -> id, h -> home, h2 -> have-rel-role-91, s2 -> some, b -> buy-01, t -> time, p2 -> promise-01, s -> so, m -> mother, i3 -> id, p -> possible, a -> and, n3 -> new, i2 -> it, r -> round, i -> i, o -> only, n2 -> next))),[Ljava.lang.String;@690ca790,Annotation([Ljava.lang.String;@3dcd14d1,[Ljava.lang.String;@6311c509,[Ljava.lang.String;@239f04af),Annotation([Ljava.lang.String;@1cec8f6e,[Ljava.lang.String;@6ebc8d97,[Ledu.cmu.lti.nlp.amr.Dependency;@1cf3ed4d),Annotation([Ljava.lang.String;@52606914,[Ljava.lang.String;@3792ca4c,[Ljava.lang.String;@61f6015),Annotation([Ljava.lang.String;@75dd05d6,[Ljava.lang.String;@1aa610e,[Ledu.cmu.lti.nlp.amr.Entity;@58c9defc))
AMR:
(a / and, op, r / round)
(a / and, op, t / time)
(b / buy-01, ARG0, i3 / id)
(b / buy-01, ARG1, p / possible)
(h2 / have-rel-role-91, ARG1, i / i)
(h2 / have-rel-role-91, ARG2, m / mother)
(n / need-01, ARG0, i / i)
(n / need-01, ARG1, h / home)
(p2 / promise-01, ARG0, a / and)
(p2 / promise-01, ARG1, h2 / have-rel-role-91)
(p2 / promise-01, ARG2, i3 / id)
(p2 / promise-01, time, i4 / id)
(s / so, op, n / need-01)
(s / so, quant, w / week)
(t / time, mod, n3 / new)
(t / time, mod, o / only)
(t / time, mod, s2 / some)
(w / week, domain, i2 / it)
(w / week, mod, n2 / next)

Decoded in 341,352 microseconds
Sentence: for example many who agree that people have a right to promise will disagree with my view expressed above of the interest on which it is based and will justify it only by reference to some other interests of the rightholders

Spans:
Span 18-19:  above => above
Span 4-5:  agree => agree-01
Span 27-28:  and => and
Span 26-27:  based => base-01
Span 13-14:  disagree => disagree-01
Span 1-2:  example => example
Span 17-18:  expressed => express-01
Span 21-22:  interest => interest-01
Span 37-38:  interests => interest
Span 30-31:  it => it
Span 24-25:  it => it
Span 29-30:  justify => justify-01
Span 2-3:  many => many
Span 31-32:  only => only
Span 36-37:  other => other
Span 11-12:  promise => promise-01
Span 33-34:  reference => reference-01
Span 35-36:  some => some

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),interests,interest,false), Span(36,37,List(1),other,other,false), Span(35,36,List(2),some,some,false), Span(33,34,List(3),reference,reference-01,false), Span(31,32,List(4),only,only,false), Span(30,31,List(5),it,it,false), Span(29,30,List(6),justify,justify-01,false), Span(27,28,List(7),and,and,false), Span(26,27,List(8),based,base-01,false), Span(24,25,List(9),it,it,false), Span(21,22,List(10),interest,interest-01,false), Span(18,19,List(11),above,above,false), Span(17,18,List(12),expressed,express-01,false), Span(13,14,List(13),disagree,disagree-01,false), Span(11,12,List(14),promise,promise-01,false), Span(4,5,List(15),agree,agree-01,false), Span(2,3,List(16),many,many,false), Span(1,2,List(17),example,example,false)),Map(2 -> some, 5 -> it, 12 -> express-01, 15 -> agree-01, 8 -> base-01, 7 -> and, 17 -> example, 1 -> other, 4 -> only, 11 -> above, 14 -> promise-01, 6 -> justify-01, 0 -> interest, 9 -> it, 16 -> many, 3 -> reference-01, 10 -> interest-01, 13 -> disagree-01),Map(e -> express-01, i4 -> interest-01, b -> base-01, e2 -> example, a3 -> agree-01, j -> justify-01, s -> some, m -> many, d -> disagree-01, i3 -> it, p -> promise-01, a -> and, o2 -> only, i2 -> it, i -> interest, r -> reference-01, a2 -> above, o -> other))),[Ljava.lang.String;@2d4e9fee,Annotation([Ljava.lang.String;@4e5d97f,[Ljava.lang.String;@e2a235c,[Ljava.lang.String;@70777447),Annotation([Ljava.lang.String;@32731b00,[Ljava.lang.String;@22f1b6e0,[Ledu.cmu.lti.nlp.amr.Dependency;@2b1d3e0c),Annotation([Ljava.lang.String;@cd49bf1,[Ljava.lang.String;@5a49f1cb,[Ljava.lang.String;@2ca174bc),Annotation([Ljava.lang.String;@1bf6f988,[Ljava.lang.String;@73785e0f,[Ledu.cmu.lti.nlp.amr.Entity;@63676602))
AMR:
(a / and, op, b / base-01)
(a3 / agree-01, ARG0, a / and)
(a3 / agree-01, ARG1, e2 / example)
(b / base-01, ARG1, i3 / it)
(d / disagree-01, ARG0, e2 / example)
(e / express-01, ARG1, a2 / above)
(e / express-01, manner, i4 / interest-01)
(e2 / example, quant, m / many)
(i / interest, mod, o / other)
(i2 / it, topic, r / reference-01)
(i4 / interest-01, ARG1, i3 / it)
(j / justify-01, ARG0, a / and)
(j / justify-01, ARG1, i2 / it)
(p / promise-01, ARG1, d / disagree-01)
(r / reference-01, ARG1, s / some)
(r / reference-01, ARG2, i / interest)
(r / reference-01, mod, o2 / only)

Decoded in 353,209 microseconds
Sentence: if only his physical self didnt promise so much

Spans:
Span 8-9:  much => much
Span 1-2:  only => only
Span 3-4:  physical => physical
Span 6-7:  promise => promise-01
Span 4-5:  self => self
Span 7-8:  so => so

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),much,much,false), Span(7,8,List(1),so,so,false), Span(6,7,List(2),promise,promise-01,false), Span(4,5,List(3),self,self,false), Span(3,4,List(4),physical,physical,false), Span(1,2,List(5),only,only,false)),Map(2 -> promise-01, 5 -> only, 1 -> so, 4 -> physical, 0 -> much, 3 -> self),Map(s2 -> self, p2 -> physical, s -> so, m -> much, p -> promise-01, o -> only))),[Ljava.lang.String;@195a404a,Annotation([Ljava.lang.String;@7432c746,[Ljava.lang.String;@31b90043,[Ljava.lang.String;@68c04835),Annotation([Ljava.lang.String;@27c4c54d,[Ljava.lang.String;@677556a0,[Ledu.cmu.lti.nlp.amr.Dependency;@488a5770),Annotation([Ljava.lang.String;@72729f44,[Ljava.lang.String;@4336640f,[Ljava.lang.String;@27e33742),Annotation([Ljava.lang.String;@3640e283,[Ljava.lang.String;@5dd72248,[Ledu.cmu.lti.nlp.amr.Entity;@570bd519))
AMR:
(m / much, degree, s / so)
(p / promise-01, ARG1, s2 / self)
(p / promise-01, mod, m / much)
(p2 / physical, mod, o / only)
(s2 / self, mod, p2 / physical)

Decoded in 16,140 microseconds
Sentence: an improved model is promised by the summer

Spans:
Span 1-2:  improved => improve-01
Span 2-3:  model => model
Span 4-5:  promised => promise-01
Span 7-8:  summer => summer

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),summer,summer,false), Span(4,5,List(1),promised,promise-01,false), Span(2,3,List(2),model,model,false), Span(1,2,List(3),improved,improve-01,false)),Map(2 -> model, 1 -> promise-01, 0 -> summer, 3 -> improve-01),Map(s -> summer, m -> model, p -> promise-01, i -> improve-01))),[Ljava.lang.String;@49d388f4,Annotation([Ljava.lang.String;@5ec47109,[Ljava.lang.String;@32d9367a,[Ljava.lang.String;@52879daa),Annotation([Ljava.lang.String;@45802e3a,[Ljava.lang.String;@625b057b,[Ledu.cmu.lti.nlp.amr.Dependency;@45c500af),Annotation([Ljava.lang.String;@8b004f2,[Ljava.lang.String;@5c14b052,[Ljava.lang.String;@524406b8),Annotation([Ljava.lang.String;@70154439,[Ljava.lang.String;@43233ac,[Ledu.cmu.lti.nlp.amr.Entity;@7bde635a))
AMR:
(i / improve-01, ARG1, m / model)
(p / promise-01, ARG0, s / summer)
(p / promise-01, ARG1, m / model)

Decoded in 10,330 microseconds
Sentence: i promise myself a cup of tea as soon as i get in

Spans:
Span 4-5:  cup => cup
Span 10-11:  i => i
Span 0-1:  i => i
Span 1-2:  promise => promise-01
Span 8-9:  soon => soon
Span 6-7:  tea => tea

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),i,i,false), Span(8,9,List(1),soon,soon,false), Span(6,7,List(2),tea,tea,false), Span(4,5,List(3),cup,cup,false), Span(1,2,List(4),promise,promise-01,false), Span(0,1,List(5),i,i,false)),Map(2 -> tea, 5 -> i, 1 -> soon, 4 -> promise-01, 0 -> i, 3 -> cup),Map(t -> tea, s -> soon, p -> promise-01, i2 -> i, i -> i, c -> cup))),[Ljava.lang.String;@d313905,Annotation([Ljava.lang.String;@1a967e07,[Ljava.lang.String;@e2c0b34,[Ljava.lang.String;@6d938a30),Annotation([Ljava.lang.String;@71558d83,[Ljava.lang.String;@27bdcd96,[Ledu.cmu.lti.nlp.amr.Dependency;@1e04473c),Annotation([Ljava.lang.String;@2ae0c389,[Ljava.lang.String;@a456d5d,[Ljava.lang.String;@540ef9ef),Annotation([Ljava.lang.String;@233ae506,[Ljava.lang.String;@6f91fefb,[Ledu.cmu.lti.nlp.amr.Entity;@59fb49f6))
AMR:
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, c / cup)
(p / promise-01, ARG2, t / tea)
(p / promise-01, manner, s / soon)
(s / soon, mod, i / i)

Decoded in 63,596 microseconds
Sentence: the uninterested male voice promised to do so

Spans:
Span 2-3:  male => male
Span 4-5:  promised => promise-01
Span 7-8:  so => so
Span 3-4:  voice => voice

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),so,so,false), Span(4,5,List(1),promised,promise-01,false), Span(3,4,List(2),voice,voice,false), Span(2,3,List(3),male,male,false)),Map(2 -> voice, 1 -> promise-01, 0 -> so, 3 -> male),Map(s -> so, m -> male, v -> voice, p -> promise-01))),[Ljava.lang.String;@b4e3a1,Annotation([Ljava.lang.String;@63cc5f63,[Ljava.lang.String;@7e8a8fc4,[Ljava.lang.String;@3ae4cdc3),Annotation([Ljava.lang.String;@380db6a,[Ljava.lang.String;@c50df2,[Ledu.cmu.lti.nlp.amr.Dependency;@9168b43),Annotation([Ljava.lang.String;@2710e05e,[Ljava.lang.String;@44fa4f5b,[Ljava.lang.String;@d7002be),Annotation([Ljava.lang.String;@34c40ed6,[Ljava.lang.String;@33aa1eaa,[Ledu.cmu.lti.nlp.amr.Entity;@65c34565))
AMR:
(p / promise-01, ARG0, v / voice)
(p / promise-01, ARG1, s / so)
(v / voice, mod, m / male)

Decoded in 11,349 microseconds
Sentence: at the office i left him promising to call for him at his house about 600 that evening

Spans:
Span 15-16:  600 => 600
Span 17-18:  evening => evening
Span 13-14:  house => house
Span 3-4:  i => i
Span 2-3:  office => office
Span 6-7:  promising => promise-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),evening,evening,false), Span(15,16,List(1),600,600,false), Span(13,14,List(2),house,house,false), Span(6,7,List(3),promising,promise-01,false), Span(3,4,List(4),i,i,false), Span(2,3,List(5),office,office,false)),Map(2 -> house, 5 -> office, 1 -> 600, 4 -> i, 0 -> evening, 3 -> promise-01),Map(e -> evening, h -> house, p -> promise-01, i -> i, 6 -> 600, o -> office))),[Ljava.lang.String;@77011e14,Annotation([Ljava.lang.String;@6a5df015,[Ljava.lang.String;@3d3d2941,[Ljava.lang.String;@7a5f89cf),Annotation([Ljava.lang.String;@1650b3cd,[Ljava.lang.String;@c4c632d,[Ledu.cmu.lti.nlp.amr.Dependency;@6b0325a9),Annotation([Ljava.lang.String;@1b9db122,[Ljava.lang.String;@dd83d58,[Ljava.lang.String;@6fa36381),Annotation([Ljava.lang.String;@4fd9e369,[Ljava.lang.String;@69e12b73,[Ledu.cmu.lti.nlp.amr.Entity;@3debc153))
AMR:
(6 / 600, op, p / promise-01)
(h / house, poss, i / i)
(o / office, poss, e / evening)
(p / promise-01, ARG1, i / i)
(p / promise-01, ARG2, o / office)

Decoded in 36,954 microseconds
Sentence: the aggressive french bank promised not to bid for 12 months as long as no one else did

Spans:
Span 9-10:  12 => 12
Span 1-2:  aggressive => aggressive
Span 3-4:  bank => bank
Span 7-8:  bid => bid-01
Span 16-17:  else => else
Span 2-3:  french => (country :name (name :op "France"))
Span 10-11:  months => (temporal-quantity :unit month)
Span 14-15:  no => -
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),else,else,false), Span(14,15,List(1),no,-,false), Span(10,11,List(3, 2),months,(temporal-quantity :unit month),false), Span(9,10,List(4),12,12,false), Span(7,8,List(5),bid,bid-01,false), Span(4,5,List(6),promised,promise-01,false), Span(3,4,List(7),bank,bank,false), Span(2,3,List(10, 9, 8),french,(country :name (name :op "France")),false), Span(1,2,List(11),aggressive,aggressive,false)),Map(2 -> temporal-quantity, 5 -> bid-01, 8 -> country, 7 -> bank, 1 -> -, 11 -> aggressive, 4 -> 12, 6 -> promise-01, 9 -> name, 0 -> else, 10 -> "France", 3 -> month),Map(n -> name, e -> else, b -> bid-01, t -> temporal-quantity, b2 -> bank, m -> month, p -> promise-01, 1 -> 12, a -> aggressive, - -> -, c -> country))),[Ljava.lang.String;@40e14fe7,Annotation([Ljava.lang.String;@844e7f8,[Ljava.lang.String;@63d94f05,[Ljava.lang.String;@4fd30479),Annotation([Ljava.lang.String;@26cacce0,[Ljava.lang.String;@4c509a05,[Ledu.cmu.lti.nlp.amr.Dependency;@3fafe567),Annotation([Ljava.lang.String;@34fdeddb,[Ljava.lang.String;@b0ae00b,[Ljava.lang.String;@76faf7d6),Annotation([Ljava.lang.String;@56a53fa0,[Ljava.lang.String;@7af44dd0,[Ledu.cmu.lti.nlp.amr.Entity;@3d20d1c0))
AMR:
(b / bid-01, ARG0, e / else)
(b / bid-01, duration, t / temporal-quantity)
(b2 / bank, mod, a / aggressive)
(b2 / bank, mod, c / country)
(c / country, name, n / name)
(n / name, op, "France")
(p / promise-01, ARG0, b2 / bank)
(p / promise-01, ARG1, - / -)
(p / promise-01, ARG2, b / bid-01)
(t / temporal-quantity, quant, 1 / 12)
(t / temporal-quantity, unit, m / month)

Decoded in 61,005 microseconds
Sentence: then he kissed her and reproved her for being a daft little hen of a woman and they waltzed around the kitchen promising things that they would do when they were married like putting a skylight in the kitchen and getting a new range so that she did not have to dirty her fingers with the ashes and clinkers

Spans:
Span 57-58:  and => and
Span 39-40:  and => and
Span 16-17:  and => and
Span 4-5:  and => and
Span 19-20:  around => around
Span 51-52:  dirty => dirty
Span 53-54:  fingers => finger
Span 1-2:  he => he
Span 11-12:  little => little
Span 31-32:  married => marry-01
Span 42-43:  new => new
Span 22-23:  promising => promise-01
Span 33-34:  putting => put-01
Span 43-44:  range => range-01
Span 46-47:  she => she
Span 44-45:  so => so
Span 0-1:  then => then
Span 29-30:  they => they
Span 25-26:  they => they
Span 17-18:  they => they
Span 23-24:  things => thing
Span 15-16:  woman => woman

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(57,58,List(0),and,and,false), Span(53,54,List(1),fingers,finger,false), Span(51,52,List(2),dirty,dirty,false), Span(46,47,List(3),she,she,false), Span(44,45,List(4),so,so,false), Span(43,44,List(5),range,range-01,false), Span(42,43,List(6),new,new,false), Span(39,40,List(7),and,and,false), Span(33,34,List(8),putting,put-01,false), Span(31,32,List(9),married,marry-01,false), Span(29,30,List(10),they,they,false), Span(25,26,List(11),they,they,false), Span(23,24,List(12),things,thing,false), Span(22,23,List(13),promising,promise-01,false), Span(19,20,List(14),around,around,false), Span(17,18,List(15),they,they,false), Span(16,17,List(16),and,and,false), Span(15,16,List(17),woman,woman,false), Span(11,12,List(18),little,little,false), Span(4,5,List(19),and,and,false), Span(1,2,List(20),he,he,false), Span(0,1,List(21),then,then,false)),Map(2 -> dirty, 5 -> range-01, 12 -> thing, 15 -> they, 8 -> put-01, 21 -> then, 18 -> little, 7 -> and, 17 -> woman, 1 -> finger, 4 -> so, 11 -> they, 14 -> around, 20 -> he, 6 -> new, 0 -> and, 9 -> marry-01, 16 -> and, 19 -> and, 3 -> she, 10 -> they, 13 -> promise-01),Map(w -> woman, n -> new, h -> he, t4 -> they, s2 -> so, t -> they, p2 -> promise-01, a3 -> around, s -> she, d -> dirty, m -> marry-01, t3 -> thing, p -> put-01, a -> and, a5 -> and, t2 -> they, t5 -> then, r -> range-01, a2 -> and, l -> little, f -> finger, a4 -> and))),[Ljava.lang.String;@35aab39a,Annotation([Ljava.lang.String;@59f55efc,[Ljava.lang.String;@7c2f2087,[Ljava.lang.String;@7a00bec2),Annotation([Ljava.lang.String;@46ebf121,[Ljava.lang.String;@2c23d1e7,[Ledu.cmu.lti.nlp.amr.Dependency;@63a9ab54),Annotation([Ljava.lang.String;@182f4aea,[Ljava.lang.String;@48df550d,[Ljava.lang.String;@3e48eddb),Annotation([Ljava.lang.String;@25f7e4cf,[Ljava.lang.String;@35cee582,[Ledu.cmu.lti.nlp.amr.Entity;@223dd567))
AMR:
(a / and, op, f / finger)
(a2 / and, op, p / put-01)
(a2 / and, op, r / range-01)
(a3 / around, op, p2 / promise-01)
(a3 / around, op, t4 / they)
(a4 / and, op, a3 / around)
(a4 / and, op, a5 / and)
(a4 / and, op, w / woman)
(a4 / and, time, t5 / then)
(d / dirty, ARG0, s / she)
(d / dirty, part, f / finger)
(l / little, op, p / put-01)
(m / marry-01, ARG0, t2 / they)
(m / marry-01, ARG1, t / they)
(p / put-01, ARG0, t / they)
(p / put-01, ARG1, s2 / so)
(p / put-01, ARG2, s / she)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, t3 / thing)
(r / range-01, ARG1, p2 / promise-01)
(r / range-01, mod, n / new)

Decoded in 548,306 microseconds
Sentence: boys promise about the weather holds true

Spans:
Span 0-1:  boys => boy
Span 5-6:  holds => hold-01
Span 1-2:  promise => promise-01
Span 6-7:  true => true
Span 4-5:  weather => weather

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),true,true,false), Span(5,6,List(1),holds,hold-01,false), Span(4,5,List(2),weather,weather,false), Span(1,2,List(3),promise,promise-01,false), Span(0,1,List(4),boys,boy,false)),Map(2 -> weather, 1 -> hold-01, 4 -> boy, 0 -> true, 3 -> promise-01),Map(w -> weather, h -> hold-01, b -> boy, t -> true, p -> promise-01))),[Ljava.lang.String;@9856ec1,Annotation([Ljava.lang.String;@172a45c9,[Ljava.lang.String;@584b9b00,[Ljava.lang.String;@4bad4a49),Annotation([Ljava.lang.String;@5de8256f,[Ljava.lang.String;@33f1ca93,[Ledu.cmu.lti.nlp.amr.Dependency;@472a9389),Annotation([Ljava.lang.String;@3c3c2bdf,[Ljava.lang.String;@12645c5e,[Ljava.lang.String;@7aec28c0),Annotation([Ljava.lang.String;@2667944c,[Ljava.lang.String;@5a391d46,[Ledu.cmu.lti.nlp.amr.Entity;@5bb10cf0))
AMR:
(h / hold-01, ARG0, p / promise-01)
(h / hold-01, ARG1, t / true)
(p / promise-01, ARG0, b / boy)
(p / promise-01, ARG1, w / weather)

Decoded in 22,396 microseconds
Sentence: he had promised us something new and had a coloured chart and a working model

Spans:
Span 11-12:  and => and
Span 6-7:  and => and
Span 10-11:  chart => chart-01
Span 0-1:  he => he
Span 14-15:  model => model
Span 5-6:  new => new
Span 2-3:  promised => promise-01
Span 4-5:  something => something
Span 13-14:  working => work-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),model,model,false), Span(13,14,List(1),working,work-01,false), Span(11,12,List(2),and,and,false), Span(10,11,List(3),chart,chart-01,false), Span(6,7,List(4),and,and,false), Span(5,6,List(5),new,new,false), Span(4,5,List(6),something,something,false), Span(2,3,List(7),promised,promise-01,false), Span(0,1,List(8),he,he,false)),Map(2 -> and, 5 -> new, 8 -> he, 7 -> promise-01, 1 -> work-01, 4 -> and, 6 -> something, 0 -> model, 3 -> chart-01),Map(n -> new, w -> work-01, h -> he, s -> something, m -> model, p -> promise-01, a -> and, a2 -> and, c -> chart-01))),[Ljava.lang.String;@44c88f97,Annotation([Ljava.lang.String;@4b4b25c8,[Ljava.lang.String;@329d9416,[Ljava.lang.String;@7654a50),Annotation([Ljava.lang.String;@af1cdfb,[Ljava.lang.String;@90a1f5a,[Ledu.cmu.lti.nlp.amr.Dependency;@77905258),Annotation([Ljava.lang.String;@240e4cbb,[Ljava.lang.String;@26cf9b7b,[Ljava.lang.String;@7e8bc25),Annotation([Ljava.lang.String;@40982531,[Ljava.lang.String;@44b1d518,[Ledu.cmu.lti.nlp.amr.Entity;@771d3de3))
AMR:
(a / and, op, c / chart-01)
(a / and, op, m / model)
(a2 / and, op, p / promise-01)
(c / chart-01, ARG1, h / he)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, s / something)
(s / something, mod, n / new)
(w / work-01, ARG0, m / model)

Decoded in 31,891 microseconds
Sentence: for poles the programme of her party promised the equality of all national groups that live in russia assurance of their cultural development national schools and freedom in the use of native languages provincial selfgovernment that is to say autonomy

NER Entity: (country :name (name :op "russia"))
Spans:
Span 11-12:  all => all
Span 25-26:  and => and
Span 18-19:  assurance => assure-01
Span 39-40:  autonomy => autonomy
Span 21-22:  cultural => culture
Span 22-23:  development => develop-02
Span 9-10:  equality => equal-01
Span 26-27:  freedom => free-41
Span 13-14:  groups => group
Span 32-33:  languages => language
Span 15-16:  live => live-01
Span 23-24:  national => nation
Span 12-13:  national => nation
Span 31-32:  native => native
Span 6-7:  party => party
Span 3-4:  programme => program
Span 7-8:  promised => promise-01
Span 33-34:  provincial => province
Span 38-39:  say => say-01
Span 24-25:  schools => school
Span 29-30:  use => use-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),autonomy,autonomy,false), Span(38,39,List(1),say,say-01,false), Span(33,34,List(2),provincial,province,false), Span(32,33,List(3),languages,language,false), Span(31,32,List(4),native,native,false), Span(29,30,List(5),use,use-01,false), Span(26,27,List(6),freedom,free-41,false), Span(25,26,List(7),and,and,false), Span(24,25,List(8),schools,school,false), Span(23,24,List(9),national,nation,false), Span(22,23,List(10),development,develop-02,false), Span(21,22,List(11),cultural,culture,false), Span(18,19,List(12),assurance,assure-01,false), Span(15,16,List(13),live,live-01,false), Span(13,14,List(14),groups,group,false), Span(12,13,List(15),national,nation,false), Span(11,12,List(16),all,all,false), Span(9,10,List(17),equality,equal-01,false), Span(7,8,List(18),promised,promise-01,false), Span(6,7,List(19),party,party,false), Span(3,4,List(20),programme,program,false)),Map(2 -> province, 5 -> use-01, 12 -> assure-01, 15 -> nation, 8 -> school, 18 -> promise-01, 7 -> and, 17 -> equal-01, 1 -> say-01, 4 -> native, 11 -> culture, 14 -> group, 20 -> program, 6 -> free-41, 0 -> autonomy, 9 -> nation, 16 -> all, 19 -> party, 3 -> language, 10 -> develop-02, 13 -> live-01),Map(e -> equal-01, n -> native, s2 -> school, p2 -> promise-01, a3 -> assure-01, s -> say-01, d -> develop-02, g -> group, p -> province, n3 -> nation, a -> autonomy, p4 -> program, l2 -> live-01, a2 -> and, c -> culture, l -> language, u -> use-01, f -> free-41, p3 -> party, n2 -> nation, a4 -> all))),[Ljava.lang.String;@3df9b42c,Annotation([Ljava.lang.String;@54a3d47d,[Ljava.lang.String;@4fd385f4,[Ljava.lang.String;@47ff7f1d),Annotation([Ljava.lang.String;@56f26dd8,[Ljava.lang.String;@4609ac80,[Ledu.cmu.lti.nlp.amr.Dependency;@251c2b6c),Annotation([Ljava.lang.String;@5c66d27c,[Ljava.lang.String;@6284fa48,[Ljava.lang.String;@84bbf80),Annotation([Ljava.lang.String;@250970c1,[Ljava.lang.String;@ec9a1e6,[Ledu.cmu.lti.nlp.amr.Entity;@57a40a9f))
AMR:
(a2 / and, op, u / use-01)
(a3 / assure-01, ARG1, s2 / school)
(a3 / assure-01, ARG2, a2 / and)
(d / develop-02, ARG0, c / culture)
(d / develop-02, ARG1, s2 / school)
(e / equal-01, ARG0, n / native)
(e / equal-01, ARG1, g / group)
(f / free-41, ARG1, u / use-01)
(g / group, mod, n3 / nation)
(g / group, quant, a4 / all)
(l2 / live-01, ARG0, g / group)
(l2 / live-01, manner, a3 / assure-01)
(p / province, mod, n / native)
(p2 / promise-01, ARG1, p4 / program)
(p2 / promise-01, ARG2, e / equal-01)
(p4 / program, source, p3 / party)
(s / say-01, ARG1, a / autonomy)
(s / say-01, ARG2, u / use-01)
(s2 / school, mod, n2 / nation)
(u / use-01, ARG1, l / language)

Decoded in 694,817 microseconds
Sentence: he drove away promising to telephone more frequently and to shut the gate to the lane

Spans:
Span 8-9:  and => and
Span 2-3:  away => away
Span 1-2:  drove => drive-02
Span 7-8:  frequently => frequent
Span 0-1:  he => he
Span 3-4:  promising => promise-01
Span 10-11:  shut => shut-05
Span 5-6:  telephone => telephone-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),shut,shut-05,false), Span(8,9,List(1),and,and,false), Span(7,8,List(2),frequently,frequent,false), Span(5,6,List(3),telephone,telephone-01,false), Span(3,4,List(4),promising,promise-01,false), Span(2,3,List(5),away,away,false), Span(1,2,List(6),drove,drive-02,false), Span(0,1,List(7),he,he,false)),Map(2 -> frequent, 5 -> away, 7 -> he, 1 -> and, 4 -> promise-01, 6 -> drive-02, 0 -> shut-05, 3 -> telephone-01),Map(h -> he, t -> telephone-01, s -> shut-05, d -> drive-02, p -> promise-01, a -> and, a2 -> away, f -> frequent))),[Ljava.lang.String;@52b579ac,Annotation([Ljava.lang.String;@84735a0,[Ljava.lang.String;@7b119f9e,[Ljava.lang.String;@42067d31),Annotation([Ljava.lang.String;@38053dd4,[Ljava.lang.String;@601e4607,[Ledu.cmu.lti.nlp.amr.Dependency;@6387a6dd),Annotation([Ljava.lang.String;@5edc2a37,[Ljava.lang.String;@4857b188,[Ljava.lang.String;@75487cd2),Annotation([Ljava.lang.String;@69fafb25,[Ljava.lang.String;@5c7e707e,[Ledu.cmu.lti.nlp.amr.Entity;@710b8fa2))
AMR:
(a / and, op, s / shut-05)
(a / and, op, t / telephone-01)
(d / drive-02, ARG0, h / he)
(d / drive-02, ARG2, a2 / away)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, t / telephone-01)
(t / telephone-01, location, f / frequent)

Decoded in 28,484 microseconds
Sentence: the lions face a moment of truth in their tour of australia in what promises to be a momentous third test at sydney football stadium tomorrow

NER Entity: (country :name (name :op "australia"))
NER Entity: (country :name (name :op "sydney"))
NER Entity: (country :name (name :op "australia"))
Spans:
Span 11-12:  australia => (country :name (name :op "Australia"))
Span 2-3:  face => face-01
Span 23-24:  football => football
Span 4-5:  moment => moment
Span 18-19:  momentous => momentous
Span 14-15:  promises => promise-01
Span 20-21:  test => test-01
Span 25-26:  tomorrow => tomorrow
Span 9-10:  tour => tour-01
Span 6-7:  truth => truth

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),tomorrow,tomorrow,false), Span(23,24,List(1),football,football,false), Span(20,21,List(2),test,test-01,false), Span(18,19,List(3),momentous,momentous,false), Span(14,15,List(4),promises,promise-01,false), Span(11,12,List(7, 6, 5),australia,(country :name (name :op "Australia")),false), Span(9,10,List(8),tour,tour-01,false), Span(6,7,List(9),truth,truth,false), Span(4,5,List(10),moment,moment,false), Span(2,3,List(11),face,face-01,false)),Map(2 -> test-01, 5 -> country, 8 -> tour-01, 7 -> "Australia", 1 -> football, 11 -> face-01, 4 -> promise-01, 6 -> name, 9 -> truth, 0 -> tomorrow, 10 -> moment, 3 -> momentous),Map(n -> name, t4 -> truth, t -> tomorrow, m2 -> moment, m -> momentous, t3 -> tour-01, p -> promise-01, t2 -> test-01, f2 -> face-01, c -> country, f -> football))),[Ljava.lang.String;@2e030ea9,Annotation([Ljava.lang.String;@4ab790d8,[Ljava.lang.String;@59867b3a,[Ljava.lang.String;@c044ac1),Annotation([Ljava.lang.String;@6dc7cb10,[Ljava.lang.String;@57e4bfbe,[Ledu.cmu.lti.nlp.amr.Dependency;@6ae88006),Annotation([Ljava.lang.String;@462d40bf,[Ljava.lang.String;@44f5df97,[Ljava.lang.String;@6a2a55df),Annotation([Ljava.lang.String;@16bd9ed,[Ljava.lang.String;@4fb05755,[Ledu.cmu.lti.nlp.amr.Entity;@4235b652))
AMR:
(c / country, name, n / name)
(f2 / face-01, ARG1, m2 / moment)
(f2 / face-01, ARG2, t3 / tour-01)
(f2 / face-01, manner, p / promise-01)
(n / name, op, "Australia")
(p / promise-01, ARG0, f / football)
(p / promise-01, ARG1, t2 / test-01)
(t2 / test-01, mod, m / momentous)
(t2 / test-01, time, t / tomorrow)
(t3 / tour-01, ARG1, c / country)
(t3 / tour-01, part, t4 / truth)

Decoded in 108,113 microseconds
Sentence: this was a curious outburst of imperial obstinacy the british incurred a vast debt and many casualties for the sake of a country which they had promised to leave when the war was over

NER Entity: (thing :name (name :op "british"))
Spans:
Span 14-15:  and => and
Span 16-17:  casualties => casualty
Span 22-23:  country => country
Span 3-4:  curious => curious-41
Span 13-14:  debt => debt
Span 10-11:  incurred => incur-01
Span 28-29:  leave => leave-01
Span 15-16:  many => many
Span 26-27:  promised => promise-01
Span 19-20:  sake => sake
Span 24-25:  they => they
Span 0-1:  this => this
Span 12-13:  vast => vast
Span 31-32:  war => war

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),war,war,false), Span(28,29,List(1),leave,leave-01,false), Span(26,27,List(2),promised,promise-01,false), Span(24,25,List(3),they,they,false), Span(22,23,List(4),country,country,false), Span(19,20,List(5),sake,sake,false), Span(16,17,List(6),casualties,casualty,false), Span(15,16,List(7),many,many,false), Span(14,15,List(8),and,and,false), Span(13,14,List(9),debt,debt,false), Span(12,13,List(10),vast,vast,false), Span(10,11,List(11),incurred,incur-01,false), Span(3,4,List(12),curious,curious-41,false), Span(0,1,List(13),this,this,false)),Map(2 -> promise-01, 5 -> sake, 12 -> curious-41, 8 -> and, 7 -> many, 1 -> leave-01, 4 -> country, 11 -> incur-01, 6 -> casualty, 0 -> war, 9 -> debt, 3 -> they, 10 -> vast, 13 -> this),Map(w -> war, t -> they, s -> sake, v -> vast, m -> many, d -> debt, p -> promise-01, a -> and, c3 -> curious-41, t2 -> this, i -> incur-01, c -> country, l -> leave-01, c2 -> casualty))),[Ljava.lang.String;@1120be46,Annotation([Ljava.lang.String;@7cabee72,[Ljava.lang.String;@7bb3be4f,[Ljava.lang.String;@559373fb),Annotation([Ljava.lang.String;@43a38fa1,[Ljava.lang.String;@272ab5b8,[Ledu.cmu.lti.nlp.amr.Dependency;@6500571e),Annotation([Ljava.lang.String;@7957a65f,[Ljava.lang.String;@696be535,[Ljava.lang.String;@2a9530a5),Annotation([Ljava.lang.String;@28acb67a,[Ljava.lang.String;@63001872,[Ledu.cmu.lti.nlp.amr.Entity;@1b451725))
AMR:
(a / and, op, l / leave-01)
(c2 / casualty, quant, m / many)
(c3 / curious-41, ARG0, c2 / casualty)
(c3 / curious-41, ARG1, i / incur-01)
(d / debt, mod, v / vast)
(i / incur-01, ARG0, w / war)
(i / incur-01, ARG1, a / and)
(i / incur-01, ARG2, d / debt)
(l / leave-01, ARG0, t / they)
(l / leave-01, ARG1, c / country)
(p / promise-01, ARG0, t2 / this)
(p / promise-01, ARG2, l / leave-01)
(s / sake, poss, c / country)

Decoded in 388,453 microseconds
Sentence: while in china mr maude promised british support for an early end to the economic sanctions imposed after last years tiananmen square massacre

NER Entity: (country :name (name :op "china"))
NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "china"))
Spans:
Span 17-18:  after => after
Span 2-3:  china => (country :name (name :op "China"))
Span 10-11:  early => early
Span 14-15:  economic => economy
Span 16-17:  imposed => impose-01
Span 18-19:  last => last
Span 22-23:  massacre => massacre-01
Span 5-6:  promised => promise-01
Span 15-16:  sanctions => sanction-02
Span 21-22:  square => square
Span 7-8:  support => support-01
Span 19-20:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),massacre,massacre-01,false), Span(21,22,List(1),square,square,false), Span(19,20,List(3, 2),years,(temporal-quantity :unit year),false), Span(18,19,List(4),last,last,false), Span(17,18,List(5),after,after,false), Span(16,17,List(6),imposed,impose-01,false), Span(15,16,List(7),sanctions,sanction-02,false), Span(14,15,List(8),economic,economy,false), Span(10,11,List(9),early,early,false), Span(7,8,List(10),support,support-01,false), Span(5,6,List(11),promised,promise-01,false), Span(2,3,List(14, 13, 12),china,(country :name (name :op "China")),false)),Map(2 -> temporal-quantity, 5 -> after, 12 -> country, 8 -> economy, 7 -> sanction-02, 1 -> square, 4 -> last, 11 -> promise-01, 14 -> "China", 6 -> impose-01, 0 -> massacre-01, 9 -> early, 3 -> year, 10 -> support-01, 13 -> name),Map(e -> economy, n -> name, s2 -> sanction-02, t -> temporal-quantity, e2 -> early, s -> square, m -> massacre-01, y -> year, p -> promise-01, a -> after, i -> impose-01, s3 -> support-01, c -> country, l -> last))),[Ljava.lang.String;@54f28c1f,Annotation([Ljava.lang.String;@7fcd72ca,[Ljava.lang.String;@92b6d53,[Ljava.lang.String;@21668d9),Annotation([Ljava.lang.String;@d3d7fa1,[Ljava.lang.String;@408629d1,[Ledu.cmu.lti.nlp.amr.Dependency;@2823796f),Annotation([Ljava.lang.String;@30f97aff,[Ljava.lang.String;@4afa1477,[Ljava.lang.String;@6855b715),Annotation([Ljava.lang.String;@5366f936,[Ljava.lang.String;@d737301,[Ledu.cmu.lti.nlp.amr.Entity;@16834d8d))
AMR:
(c / country, name, n / name)
(i / impose-01, ARG1, s2 / sanction-02)
(i / impose-01, time, a / after)
(m / massacre-01, ARG0, c / country)
(m / massacre-01, mod, s / square)
(n / name, op, "China")
(p / promise-01, ARG0, m / massacre-01)
(p / promise-01, ARG1, s3 / support-01)
(p / promise-01, time, e2 / early)
(s2 / sanction-02, ARG1, t / temporal-quantity)
(s2 / sanction-02, mod, e / economy)
(s3 / support-01, ARG1, s2 / sanction-02)
(t / temporal-quantity, unit, y / year)
(y / year, mod, l / last)

Decoded in 169,412 microseconds
Sentence: unlike religion science promised the final authority the shape of things to come

Spans:
Span 6-7:  authority => authority
Span 5-6:  final => final
Span 3-4:  promised => promise-01
Span 1-2:  religion => religion
Span 2-3:  science => science
Span 8-9:  shape => shape-01
Span 10-11:  things => thing

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),things,thing,false), Span(8,9,List(1),shape,shape-01,false), Span(6,7,List(2),authority,authority,false), Span(5,6,List(3),final,final,false), Span(3,4,List(4),promised,promise-01,false), Span(2,3,List(5),science,science,false), Span(1,2,List(6),religion,religion,false)),Map(2 -> authority, 5 -> science, 1 -> shape-01, 4 -> promise-01, 6 -> religion, 0 -> thing, 3 -> final),Map(s2 -> science, t -> thing, s -> shape-01, p -> promise-01, a -> authority, r -> religion, f -> final))),[Ljava.lang.String;@6586f87,Annotation([Ljava.lang.String;@18020b52,[Ljava.lang.String;@2e3540ce,[Ljava.lang.String;@2a31ac15),Annotation([Ljava.lang.String;@2318ac57,[Ljava.lang.String;@28da95c1,[Ledu.cmu.lti.nlp.amr.Dependency;@269dc6db),Annotation([Ljava.lang.String;@406a67ab,[Ljava.lang.String;@9bc2c97,[Ljava.lang.String;@2113727f),Annotation([Ljava.lang.String;@3c200d0,[Ljava.lang.String;@35c3599d,[Ledu.cmu.lti.nlp.amr.Entity;@2c306dfe))
AMR:
(a / authority, mod, f / final)
(p / promise-01, ARG0, s2 / science)
(p / promise-01, ARG1, a / authority)
(p / promise-01, ARG2, s / shape-01)
(s / shape-01, ARG1, t / thing)
(s2 / science, mod, r / religion)

Decoded in 64,334 microseconds
Sentence: it promises to be a great night with supporting open races to make it one of the nights to remember at the vastly popular cowley base

Spans:
Span 25-26:  base => base
Span 5-6:  great => great
Span 13-14:  it => it
Span 0-1:  it => it
Span 6-7:  night => night
Span 17-18:  nights => night
Span 23-24:  popular => popular-41
Span 1-2:  promises => promise-01
Span 10-11:  races => race
Span 19-20:  remember => remember-01
Span 8-9:  supporting => support-01
Span 22-23:  vastly => vast

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),base,base,false), Span(23,24,List(1),popular,popular-41,false), Span(22,23,List(2),vastly,vast,false), Span(19,20,List(3),remember,remember-01,false), Span(17,18,List(4),nights,night,false), Span(13,14,List(5),it,it,false), Span(10,11,List(6),races,race,false), Span(8,9,List(7),supporting,support-01,false), Span(6,7,List(8),night,night,false), Span(5,6,List(9),great,great,false), Span(1,2,List(10),promises,promise-01,false), Span(0,1,List(11),it,it,false)),Map(2 -> vast, 5 -> it, 8 -> night, 7 -> support-01, 1 -> popular-41, 11 -> it, 4 -> night, 6 -> race, 9 -> great, 0 -> base, 10 -> promise-01, 3 -> remember-01),Map(n -> night, b -> base, p2 -> promise-01, s -> support-01, v -> vast, g -> great, r2 -> race, p -> popular-41, i2 -> it, i -> it, r -> remember-01, n2 -> night))),[Ljava.lang.String;@1f85555c,Annotation([Ljava.lang.String;@6aa71b2e,[Ljava.lang.String;@e99fb6,[Ljava.lang.String;@69f46631),Annotation([Ljava.lang.String;@2c61514f,[Ljava.lang.String;@2921304c,[Ledu.cmu.lti.nlp.amr.Dependency;@41e9e2ac),Annotation([Ljava.lang.String;@6220ac02,[Ljava.lang.String;@4efce9a2,[Ljava.lang.String;@3e4eb331),Annotation([Ljava.lang.String;@20d675ec,[Ljava.lang.String;@5fd7e9cb,[Ledu.cmu.lti.nlp.amr.Entity;@58363f95))
AMR:
(n2 / night, mod, g / great)
(n2 / night, mod, s / support-01)
(p / popular-41, ARG1, b / base)
(p / popular-41, mod, v / vast)
(p2 / promise-01, ARG0, i2 / it)
(p2 / promise-01, ARG1, n2 / night)
(r / remember-01, ARG0, i2 / it)
(r / remember-01, ARG1, n / night)
(r / remember-01, time, b / base)
(s / support-01, ARG0, i / it)
(s / support-01, ARG1, r2 / race)

Decoded in 105,141 microseconds
Sentence: in the early days of his involvement the new labour government had promised to squeeze the rich until the pips squeak

Spans:
Span 3-4:  days => (temporal-quantity :unit day)
Span 2-3:  early => early
Span 6-7:  involvement => involve-01
Span 9-10:  labour => labour
Span 8-9:  new => new
Span 12-13:  promised => promise-01
Span 16-17:  rich => rich
Span 14-15:  squeeze => squeeze-01
Span 17-18:  until => until

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),until,until,false), Span(16,17,List(1),rich,rich,false), Span(14,15,List(2),squeeze,squeeze-01,false), Span(12,13,List(3),promised,promise-01,false), Span(9,10,List(4),labour,labour,false), Span(8,9,List(5),new,new,false), Span(6,7,List(6),involvement,involve-01,false), Span(3,4,List(8, 7),days,(temporal-quantity :unit day),false), Span(2,3,List(9),early,early,false)),Map(2 -> squeeze-01, 5 -> new, 8 -> day, 7 -> temporal-quantity, 1 -> rich, 4 -> labour, 6 -> involve-01, 9 -> early, 0 -> until, 3 -> promise-01),Map(e -> early, n -> new, t -> temporal-quantity, s -> squeeze-01, d -> day, p -> promise-01, i -> involve-01, r -> rich, l -> labour, u -> until))),[Ljava.lang.String;@51887c71,Annotation([Ljava.lang.String;@57a20888,[Ljava.lang.String;@4ede45aa,[Ljava.lang.String;@62afc459),Annotation([Ljava.lang.String;@183e1ad,[Ljava.lang.String;@795525a1,[Ledu.cmu.lti.nlp.amr.Dependency;@4519ab42),Annotation([Ljava.lang.String;@183a9d7f,[Ljava.lang.String;@303a0946,[Ljava.lang.String;@3236eb66),Annotation([Ljava.lang.String;@33988f4b,[Ljava.lang.String;@64e79f63,[Ledu.cmu.lti.nlp.amr.Entity;@22915056))
AMR:
(e / early, op, t / temporal-quantity)
(i / involve-01, ARG0, n / new)
(i / involve-01, ARG1, t / temporal-quantity)
(p / promise-01, ARG1, l / labour)
(p / promise-01, ARG2, s / squeeze-01)
(p / promise-01, time, e / early)
(r / rich, time, u / until)
(s / squeeze-01, ARG1, u / until)
(t / temporal-quantity, unit, d / day)

Decoded in 44,286 microseconds
Sentence: the organizer gerald barry promised fun fantasy and colour as a tonic to the nation

NER Entity: (person :name (name :op "gerald" :op "barry"))
Spans:
Span 7-8:  and => and
Span 8-9:  colour => colour
Span 6-7:  fantasy => fantasy
Span 5-6:  fun => fun
Span 2-4:  gerald barry => (person :name (name :op "gerald" :op "barry"))
Span 14-15:  nation => nation
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),nation,nation,false), Span(8,9,List(1),colour,colour,false), Span(7,8,List(2),and,and,false), Span(6,7,List(3),fantasy,fantasy,false), Span(5,6,List(4),fun,fun,false), Span(4,5,List(5),promised,promise-01,false), Span(2,4,List(9, 8, 7, 6),gerald barry,(person :name (name :op "gerald" :op "barry")),false)),Map(2 -> and, 5 -> promise-01, 8 -> "gerald", 7 -> name, 1 -> colour, 4 -> fun, 6 -> person, 9 -> "barry", 0 -> nation, 3 -> fantasy),Map(n -> nation, p2 -> person, p -> promise-01, a -> and, f2 -> fun, c -> colour, f -> fantasy, n2 -> name))),[Ljava.lang.String;@72314fd4,Annotation([Ljava.lang.String;@37021de,[Ljava.lang.String;@36bf7795,[Ljava.lang.String;@5443f347),Annotation([Ljava.lang.String;@3918e589,[Ljava.lang.String;@1185a2a8,[Ledu.cmu.lti.nlp.amr.Dependency;@5c79cc94),Annotation([Ljava.lang.String;@406637fa,[Ljava.lang.String;@76e51f1d,[Ljava.lang.String;@3c5de5e6),Annotation([Ljava.lang.String;@38a07e00,[Ljava.lang.String;@30b04f0b,[Ledu.cmu.lti.nlp.amr.Entity;@7157426))
AMR:
(a / and, op, c / colour)
(a / and, op, f / fantasy)
(n2 / name, op, "barry")
(n2 / name, op, "gerald")
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, f2 / fun)
(p / promise-01, ARG2, a / and)
(p / promise-01, beneficiary, n / nation)
(p2 / person, name, n2 / name)

Decoded in 193,348 microseconds
Sentence: cagliari bars are to be closed to the throngs of enthusiasts it is promised on match days

Spans:
Span 1-2:  bars => bar-01
Span 5-6:  closed => close-01
Span 16-17:  days => (temporal-quantity :unit day)
Span 11-12:  it => it
Span 15-16:  match => match-01
Span 13-14:  promised => promise-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),days,(temporal-quantity :unit day),false), Span(15,16,List(2),match,match-01,false), Span(13,14,List(3),promised,promise-01,false), Span(11,12,List(4),it,it,false), Span(5,6,List(5),closed,close-01,false), Span(1,2,List(6),bars,bar-01,false)),Map(2 -> match-01, 5 -> close-01, 1 -> day, 4 -> it, 6 -> bar-01, 0 -> temporal-quantity, 3 -> promise-01),Map(b -> bar-01, t -> temporal-quantity, m -> match-01, d -> day, p -> promise-01, i -> it, c -> close-01))),[Ljava.lang.String;@117c6e6c,Annotation([Ljava.lang.String;@357d6c,[Ljava.lang.String;@37bd3d8f,[Ljava.lang.String;@691493df),Annotation([Ljava.lang.String;@45f84b5e,[Ljava.lang.String;@301c2c35,[Ledu.cmu.lti.nlp.amr.Dependency;@99a6440),Annotation([Ljava.lang.String;@772baaac,[Ljava.lang.String;@53d23f53,[Ljava.lang.String;@103b8d23),Annotation([Ljava.lang.String;@35aefd28,[Ljava.lang.String;@736e68a0,[Ledu.cmu.lti.nlp.amr.Entity;@55971b94))
AMR:
(b / bar-01, ARG1, p / promise-01)
(c / close-01, ARG1, b / bar-01)
(m / match-01, ARG0, t / temporal-quantity)
(m / match-01, ARG1, c / close-01)
(p / promise-01, ARG1, i / it)
(t / temporal-quantity, unit, d / day)

Decoded in 28,513 microseconds
Sentence: this way the funds will be at the governments disposal for investment while clients mr bekesi promised will benefit from fair rates

Spans:
Span 18-19:  benefit => benefit-01
Span 13-14:  clients => client
Span 20-21:  fair => fair
Span 3-4:  funds => fund
Span 8-9:  governments => (government-organization :ARG0-of govern-01)
Span 11-12:  investment => invest-01
Span 16-17:  promised => promise-01
Span 21-22:  rates => rate
Span 0-1:  this => this
Span 1-2:  way => way

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),rates,rate,false), Span(20,21,List(1),fair,fair,false), Span(18,19,List(2),benefit,benefit-01,false), Span(16,17,List(3),promised,promise-01,false), Span(13,14,List(4),clients,client,false), Span(11,12,List(5),investment,invest-01,false), Span(8,9,List(7, 6),governments,(government-organization :ARG0-of govern-01),false), Span(3,4,List(8),funds,fund,false), Span(1,2,List(9),way,way,false), Span(0,1,List(10),this,this,false)),Map(2 -> benefit-01, 5 -> invest-01, 8 -> fund, 7 -> govern-01, 1 -> fair, 4 -> client, 6 -> government-organization, 9 -> way, 0 -> rate, 10 -> this, 3 -> promise-01),Map(w -> way, t -> this, b -> benefit-01, g2 -> govern-01, g -> government-organization, p -> promise-01, i -> invest-01, r -> rate, f2 -> fund, c -> client, f -> fair))),[Ljava.lang.String;@287aa1d2,Annotation([Ljava.lang.String;@b15f6c1,[Ljava.lang.String;@4efafe96,[Ljava.lang.String;@4060525c),Annotation([Ljava.lang.String;@73bf3708,[Ljava.lang.String;@eb62996,[Ledu.cmu.lti.nlp.amr.Dependency;@59643e65),Annotation([Ljava.lang.String;@443c86bc,[Ljava.lang.String;@61b1c3a3,[Ljava.lang.String;@5da33470),Annotation([Ljava.lang.String;@5c7d517,[Ljava.lang.String;@276dbf8,[Ledu.cmu.lti.nlp.amr.Entity;@4963780b))
AMR:
(b / benefit-01, ARG0, r / rate)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, b / benefit-01)
(i / invest-01, ARG1, c / client)
(p / promise-01, ARG0, f2 / fund)
(p / promise-01, ARG1, b / benefit-01)
(p / promise-01, ARG2, i / invest-01)
(r / rate, mod, f / fair)
(w / way, mod, t / this)
(w / way, name, f2 / fund)

Decoded in 158,799 microseconds
Sentence: there are also rumours that she may take a role in a film directed by david lynchs daughter jennifer which promises to make blue velvet look positively staid

Spans:
Span 2-3:  also => also
Span 23-24:  blue => blue
Span 17-18:  daughter => (have-rel-role-91 :ARG2 daughter)
Span 13-14:  directed => direct-01
Span 12-13:  film => film
Span 6-7:  may => (date-entity :month 5)
Span 26-27:  positively => positive
Span 20-21:  promises => promise-01
Span 9-10:  role => role
Span 5-6:  she => she

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),positively,positive,false), Span(23,24,List(1),blue,blue,false), Span(20,21,List(2),promises,promise-01,false), Span(17,18,List(4, 3),daughter,(have-rel-role-91 :ARG2 daughter),false), Span(13,14,List(5),directed,direct-01,false), Span(12,13,List(6),film,film,false), Span(9,10,List(7),role,role,false), Span(6,7,List(9, 8),may,(date-entity :month 5),false), Span(5,6,List(10),she,she,false), Span(2,3,List(11),also,also,false)),Map(2 -> promise-01, 5 -> direct-01, 8 -> date-entity, 7 -> role, 1 -> blue, 11 -> also, 4 -> daughter, 6 -> film, 9 -> 5, 0 -> positive, 10 -> she, 3 -> have-rel-role-91),Map(h -> have-rel-role-91, 5 -> 5, b -> blue, d3 -> date-entity, p2 -> promise-01, s -> she, d -> daughter, p -> positive, a -> also, d2 -> direct-01, r -> role, f -> film))),[Ljava.lang.String;@215e3fd1,Annotation([Ljava.lang.String;@32afc374,[Ljava.lang.String;@31490eab,[Ljava.lang.String;@336215d4),Annotation([Ljava.lang.String;@6c872ba6,[Ljava.lang.String;@1e42d6f4,[Ledu.cmu.lti.nlp.amr.Dependency;@362e3cb1),Annotation([Ljava.lang.String;@1592a441,[Ljava.lang.String;@4e5db277,[Ljava.lang.String;@696fcad2),Annotation([Ljava.lang.String;@2a6cd712,[Ljava.lang.String;@4f9bf480,[Ledu.cmu.lti.nlp.amr.Entity;@7d12855))
AMR:
(d2 / direct-01, ARG0, a / also)
(d2 / direct-01, ARG1, f / film)
(d3 / date-entity, ARG2, s / she)
(d3 / date-entity, month, 5 / 5)
(d3 / date-entity, op, h / have-rel-role-91)
(h / have-rel-role-91, ARG0, f / film)
(h / have-rel-role-91, ARG1, b / blue)
(h / have-rel-role-91, ARG2, d / daughter)
(p / positive, op, p2 / promise-01)
(p2 / promise-01, ARG0, d2 / direct-01)
(r / role, location, f / film)

Decoded in 161,835 microseconds
Sentence: mr wilson said my client had promised himself a compact disc player and the temptation became too great

Spans:
Span 12-13:  and => and
Span 15-16:  became => become-01
Span 4-5:  client => client
Span 9-10:  compact => compact-01
Span 17-18:  great => great
Span 6-7:  promised => promise-01
Span 2-3:  said => say-01
Span 16-17:  too => too

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),great,great,false), Span(16,17,List(1),too,too,false), Span(15,16,List(2),became,become-01,false), Span(12,13,List(3),and,and,false), Span(9,10,List(4),compact,compact-01,false), Span(6,7,List(5),promised,promise-01,false), Span(4,5,List(6),client,client,false), Span(2,3,List(7),said,say-01,false)),Map(2 -> become-01, 5 -> promise-01, 7 -> say-01, 1 -> too, 4 -> compact-01, 6 -> client, 0 -> great, 3 -> and),Map(b -> become-01, t -> too, s -> say-01, p -> promise-01, g -> great, a -> and, c -> compact-01, c2 -> client))),[Ljava.lang.String;@34aee875,Annotation([Ljava.lang.String;@471f7458,[Ljava.lang.String;@620f61e2,[Ljava.lang.String;@5fe36eb9),Annotation([Ljava.lang.String;@4c7a64dd,[Ljava.lang.String;@77741064,[Ledu.cmu.lti.nlp.amr.Dependency;@64e05280),Annotation([Ljava.lang.String;@4348853d,[Ljava.lang.String;@4e238a4d,[Ljava.lang.String;@7f4ced4e),Annotation([Ljava.lang.String;@136fdd2d,[Ljava.lang.String;@1521bf53,[Ledu.cmu.lti.nlp.amr.Entity;@5a97ecfb))
AMR:
(a / and, op, g / great)
(a / and, op, p / promise-01)
(b / become-01, ARG2, g / great)
(c / compact-01, ARG1, s / say-01)
(g / great, degree, t / too)
(p / promise-01, ARG0, c2 / client)
(s / say-01, ARG1, a / and)

Decoded in 30,287 microseconds
Sentence: on our first cautious visit i had drawn a stick which according to the book of numbers promised me a great journey and much success

Spans:
Span 22-23:  and => and
Span 14-15:  book => book
Span 3-4:  cautious => cautious
Span 20-21:  great => great
Span 5-6:  i => i
Span 21-22:  journey => journey-01
Span 23-24:  much => much
Span 16-17:  numbers => number
Span 17-18:  promised => promise-01
Span 9-10:  stick => stick-01
Span 24-25:  success => succeed-01
Span 4-5:  visit => visit-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),success,succeed-01,false), Span(23,24,List(1),much,much,false), Span(22,23,List(2),and,and,false), Span(21,22,List(3),journey,journey-01,false), Span(20,21,List(4),great,great,false), Span(17,18,List(5),promised,promise-01,false), Span(16,17,List(6),numbers,number,false), Span(14,15,List(7),book,book,false), Span(9,10,List(8),stick,stick-01,false), Span(5,6,List(9),i,i,false), Span(4,5,List(10),visit,visit-01,false), Span(3,4,List(11),cautious,cautious,false)),Map(2 -> and, 5 -> promise-01, 8 -> stick-01, 7 -> book, 1 -> much, 11 -> cautious, 4 -> great, 6 -> number, 9 -> i, 0 -> succeed-01, 10 -> visit-01, 3 -> journey-01),Map(n -> number, s2 -> stick-01, b -> book, j -> journey-01, s -> succeed-01, v -> visit-01, m -> much, p -> promise-01, g -> great, a -> and, i -> i, c -> cautious))),[Ljava.lang.String;@2c478134,Annotation([Ljava.lang.String;@a7393a2,[Ljava.lang.String;@29e1760a,[Ljava.lang.String;@110ca001),Annotation([Ljava.lang.String;@53dcaa65,[Ljava.lang.String;@3c36f7e6,[Ledu.cmu.lti.nlp.amr.Dependency;@3ccd3bec),Annotation([Ljava.lang.String;@46192223,[Ljava.lang.String;@1c104bc9,[Ljava.lang.String;@71df8783),Annotation([Ljava.lang.String;@a39e3dd,[Ljava.lang.String;@5e9ec769,[Ledu.cmu.lti.nlp.amr.Entity;@a35ef07))
AMR:
(a / and, op, s / succeed-01)
(j / journey-01, ARG1, b / book)
(j / journey-01, mod, g / great)
(p / promise-01, ARG0, n / number)
(p / promise-01, ARG1, a / and)
(p / promise-01, ARG2, j / journey-01)
(s / succeed-01, ARG1, s2 / stick-01)
(s / succeed-01, quant, m / much)
(s2 / stick-01, ARG1, i / i)
(v / visit-01, ARG0, s2 / stick-01)
(v / visit-01, manner, c / cautious)

Decoded in 169,703 microseconds
Sentence: president guillermo endara who was sworn in on thursday promised a government of reconciliation and reconstruction

NER Entity: (person :name (name :op "guillermo" :op "endara"))
Spans:
Span 14-15:  and => and
Span 1-3:  guillermo endara => (person :name (name :op "guillermo" :op "endara"))
Span 0-1:  president => (have-org-role-91 :ARG2 president)
Span 9-10:  promised => promise-01
Span 13-14:  reconciliation => reconcile-01
Span 15-16:  reconstruction => reconstruct-01
Span 5-6:  sworn => swear-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),reconstruction,reconstruct-01,false), Span(14,15,List(1),and,and,false), Span(13,14,List(2),reconciliation,reconcile-01,false), Span(9,10,List(3),promised,promise-01,false), Span(5,6,List(4),sworn,swear-01,false), Span(1,3,List(8, 7, 6, 5),guillermo endara,(person :name (name :op "guillermo" :op "endara")),false), Span(0,1,List(10, 9),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> reconcile-01, 5 -> person, 8 -> "endara", 7 -> "guillermo", 1 -> and, 4 -> swear-01, 6 -> name, 9 -> have-org-role-91, 0 -> reconstruct-01, 10 -> president, 3 -> promise-01),Map(n -> name, h -> have-org-role-91, p2 -> person, s -> swear-01, p -> promise-01, r2 -> reconcile-01, a -> and, r -> reconstruct-01, p3 -> president))),[Ljava.lang.String;@5adfb9cd,Annotation([Ljava.lang.String;@161f7057,[Ljava.lang.String;@6a086b19,[Ljava.lang.String;@4eaf6cb1),Annotation([Ljava.lang.String;@5f0900d2,[Ljava.lang.String;@48150bbc,[Ledu.cmu.lti.nlp.amr.Dependency;@5db5889c),Annotation([Ljava.lang.String;@391be9d4,[Ljava.lang.String;@57947a96,[Ljava.lang.String;@54fc3ac5),Annotation([Ljava.lang.String;@7b768719,[Ljava.lang.String;@229fb9a2,[Ledu.cmu.lti.nlp.amr.Entity;@24544c70))
AMR:
(a / and, op, r / reconstruct-01)
(a / and, op, r2 / reconcile-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p3 / president)
(n / name, op, "endara")
(n / name, op, "guillermo")
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, a / and)
(p2 / person, name, n / name)
(s / swear-01, ARG1, p2 / person)

Decoded in 46,000 microseconds
Sentence: it will only take a few moments i promise you

Spans:
Span 5-6:  few => few
Span 7-8:  i => i
Span 0-1:  it => it
Span 6-7:  moments => moment
Span 2-3:  only => only
Span 8-9:  promise => promise-01
Span 9-10:  you => you

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),you,you,false), Span(8,9,List(1),promise,promise-01,false), Span(7,8,List(2),i,i,false), Span(6,7,List(3),moments,moment,false), Span(5,6,List(4),few,few,false), Span(2,3,List(5),only,only,false), Span(0,1,List(6),it,it,false)),Map(2 -> i, 5 -> only, 1 -> promise-01, 4 -> few, 6 -> it, 0 -> you, 3 -> moment),Map(m -> moment, p -> promise-01, y -> you, i2 -> it, i -> i, o -> only, f -> few))),[Ljava.lang.String;@1a665fb2,Annotation([Ljava.lang.String;@3714aca8,[Ljava.lang.String;@2e5365d8,[Ljava.lang.String;@65435faa),Annotation([Ljava.lang.String;@2a3dc5d6,[Ljava.lang.String;@3d877a44,[Ledu.cmu.lti.nlp.amr.Dependency;@96c25eb),Annotation([Ljava.lang.String;@1b2d6c22,[Ljava.lang.String;@43163a1e,[Ljava.lang.String;@6841a9fa),Annotation([Ljava.lang.String;@2efe918f,[Ljava.lang.String;@4b065b63,[Ledu.cmu.lti.nlp.amr.Entity;@e59e710))
AMR:
(i2 / it, part, m / moment)
(m / moment, mod, o / only)
(m / moment, poss, i / i)
(m / moment, quant, f / few)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, y / you)

Decoded in 41,744 microseconds
Sentence: he promises to make her the editor but only if she performs six tasks for him each involving a different form of sexual humiliation

Spans:
Span 7-8:  but => contrast-01
Span 19-20:  different => differ-02
Span 16-17:  each => each
Span 6-7:  editor => editor
Span 20-21:  form => form
Span 0-1:  he => he
Span 23-24:  humiliation => humiliate-01
Span 17-18:  involving => involve-01
Span 8-9:  only => only
Span 1-2:  promises => promise-01
Span 22-23:  sexual => sexual
Span 10-11:  she => she
Span 12-13:  six => 6
Span 13-14:  tasks => task-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),humiliation,humiliate-01,false), Span(22,23,List(1),sexual,sexual,false), Span(20,21,List(2),form,form,false), Span(19,20,List(3),different,differ-02,false), Span(17,18,List(4),involving,involve-01,false), Span(16,17,List(5),each,each,false), Span(13,14,List(6),tasks,task-01,false), Span(12,13,List(7),six,6,false), Span(10,11,List(8),she,she,false), Span(8,9,List(9),only,only,false), Span(7,8,List(10),but,contrast-01,false), Span(6,7,List(11),editor,editor,false), Span(1,2,List(12),promises,promise-01,false), Span(0,1,List(13),he,he,false)),Map(2 -> form, 5 -> each, 12 -> promise-01, 8 -> she, 7 -> 6, 1 -> sexual, 4 -> involve-01, 11 -> editor, 6 -> task-01, 0 -> humiliate-01, 9 -> only, 3 -> differ-02, 10 -> contrast-01, 13 -> he),Map(e -> each, h -> humiliate-01, h2 -> he, s2 -> she, t -> task-01, e2 -> editor, s -> sexual, d -> differ-02, p -> promise-01, i -> involve-01, 6 -> 6, c -> contrast-01, f -> form, o -> only))),[Ljava.lang.String;@3050d2cc,Annotation([Ljava.lang.String;@a3f67dc,[Ljava.lang.String;@48bba1c5,[Ljava.lang.String;@1679b1d1),Annotation([Ljava.lang.String;@f891bde,[Ljava.lang.String;@728493c9,[Ledu.cmu.lti.nlp.amr.Dependency;@5e02abdb),Annotation([Ljava.lang.String;@160e715,[Ljava.lang.String;@e31468,[Ljava.lang.String;@3c50b84c),Annotation([Ljava.lang.String;@5773a483,[Ljava.lang.String;@6935c14f,[Ledu.cmu.lti.nlp.amr.Entity;@48265f7f))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, t / task-01)
(d / differ-02, ARG1, f / form)
(f / form, mod, h / humiliate-01)
(h / humiliate-01, ARG1, o / only)
(h / humiliate-01, mod, s / sexual)
(i / involve-01, ARG0, s2 / she)
(i / involve-01, ARG1, f / form)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, e2 / editor)
(t / task-01, ARG1, e / each)
(t / task-01, ARG2, i / involve-01)
(t / task-01, quant, 6 / 6)

Decoded in 241,662 microseconds
Sentence:   i promise

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   i promise
myTokenized = i promise
i = 0
prefix = List(i)
regexr = \Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: what is happening in the us combined with parallel developments in japan promises to give the securities business worldwide an almighty shakeup by letting commercial banks operate freely in major markets from which they are currently banned

NER Entity: (country :name (name :op "japan"))
Spans:
Span 25-26:  banks => bank
Span 36-37:  banned => ban-01
Span 17-18:  business => business
Span 6-7:  combined => combine-01
Span 24-25:  commercial => commerce
Span 35-36:  currently => current
Span 9-10:  developments => develop-01
Span 27-28:  freely => free
Span 14-15:  give => give-01
Span 2-3:  happening => happen-01
Span 23-24:  letting => let-01
Span 29-30:  major => major
Span 30-31:  markets => market
Span 26-27:  operate => operate-01
Span 12-13:  promises => promise-01
Span 33-34:  they => they
Span 18-19:  worldwide => worldwide

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),banned,ban-01,false), Span(35,36,List(1),currently,current,false), Span(33,34,List(2),they,they,false), Span(30,31,List(3),markets,market,false), Span(29,30,List(4),major,major,false), Span(27,28,List(5),freely,free,false), Span(26,27,List(6),operate,operate-01,false), Span(25,26,List(7),banks,bank,false), Span(24,25,List(8),commercial,commerce,false), Span(23,24,List(9),letting,let-01,false), Span(18,19,List(10),worldwide,worldwide,false), Span(17,18,List(11),business,business,false), Span(14,15,List(12),give,give-01,false), Span(12,13,List(13),promises,promise-01,false), Span(9,10,List(14),developments,develop-01,false), Span(6,7,List(15),combined,combine-01,false), Span(2,3,List(16),happening,happen-01,false)),Map(2 -> they, 5 -> free, 12 -> give-01, 15 -> combine-01, 8 -> commerce, 7 -> bank, 1 -> current, 4 -> major, 11 -> business, 14 -> develop-01, 6 -> operate-01, 0 -> ban-01, 9 -> let-01, 16 -> happen-01, 3 -> market, 10 -> worldwide, 13 -> promise-01),Map(w -> worldwide, b3 -> business, h -> happen-01, b -> ban-01, t -> they, m2 -> major, b2 -> bank, d -> develop-01, m -> market, p -> promise-01, g -> give-01, c3 -> combine-01, c -> current, l -> let-01, f -> free, o -> operate-01, c2 -> commerce))),[Ljava.lang.String;@ea80f3a,Annotation([Ljava.lang.String;@3b7fb05a,[Ljava.lang.String;@3c13033a,[Ljava.lang.String;@438f3a6),Annotation([Ljava.lang.String;@37041974,[Ljava.lang.String;@6e232ae3,[Ledu.cmu.lti.nlp.amr.Dependency;@46d4d592),Annotation([Ljava.lang.String;@3f118892,[Ljava.lang.String;@181d4997,[Ljava.lang.String;@2aca64df),Annotation([Ljava.lang.String;@4da4826b,[Ljava.lang.String;@6b6e669f,[Ledu.cmu.lti.nlp.amr.Entity;@1d1387d3))
AMR:
(b / ban-01, ARG1, t / they)
(b / ban-01, time, c / current)
(b2 / bank, mod, c2 / commerce)
(b3 / business, location, w / worldwide)
(c3 / combine-01, ARG1, l / let-01)
(c3 / combine-01, ARG2, d / develop-01)
(d / develop-01, ARG1, p / promise-01)
(g / give-01, ARG1, b3 / business)
(g / give-01, ARG2, t / they)
(h / happen-01, ARG1, l / let-01)
(l / let-01, ARG1, o / operate-01)
(m / market, example, t / they)
(m / market, mod, m2 / major)
(o / operate-01, ARG0, b2 / bank)
(o / operate-01, manner, f / free)
(p / promise-01, ARG1, g / give-01)

Decoded in 190,095 microseconds
Sentence: there was a time just after britain and china signed in 1984 their joint declaration on the question of hong kong when the colony looked forward with high hopes to the 50 or more years of capitalist autonomy which both parentgovernments had promised would follow its reversion to chinese sovereignty in 1997

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "hong" :op "kong"))
NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 11-12:  1984 => (date-entity :year 1984)
Span 51-52:  1997 => (date-entity :year 1997)
Span 31-32:  50 => 50
Span 5-6:  after => after
Span 7-8:  and => and
Span 37-38:  autonomy => autonomy
Span 39-40:  both => both
Span 6-7:  britain => (country :name (name :op "Britain"))
Span 36-37:  capitalist => capitalist
Span 8-9:  china => (country :name (name :op "China"))
Span 48-49:  chinese => (person :mod (country :name (name :op "China")))
Span 23-24:  colony => colony
Span 14-15:  declaration => declare-02
Span 44-45:  follow => follow-02
Span 25-26:  forward => forward
Span 27-28:  high => high
Span 19-21:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 28-29:  hopes => hope-01
Span 13-14:  joint => joint
Span 4-5:  just => just
Span 24-25:  looked => look-01
Span 32-33:  or => or
Span 42-43:  promised => promise-01
Span 17-18:  question => question-01
Span 9-10:  signed => sign-02
Span 49-50:  sovereignty => sovereignty
Span 3-4:  time => time
Span 34-35:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(1, 0),1997,(date-entity :year 1997),false), Span(49,50,List(2),sovereignty,sovereignty,false), Span(48,49,List(6, 5, 4, 3),chinese,(person :mod (country :name (name :op "China"))),false), Span(44,45,List(7),follow,follow-02,false), Span(42,43,List(8),promised,promise-01,false), Span(39,40,List(9),both,both,false), Span(37,38,List(10),autonomy,autonomy,false), Span(36,37,List(11),capitalist,capitalist,false), Span(34,35,List(13, 12),years,(temporal-quantity :unit year),false), Span(32,33,List(14),or,or,false), Span(31,32,List(15),50,50,false), Span(28,29,List(16),hopes,hope-01,false), Span(27,28,List(17),high,high,false), Span(25,26,List(18),forward,forward,false), Span(24,25,List(19),looked,look-01,false), Span(23,24,List(20),colony,colony,false), Span(19,21,List(24, 23, 22, 21),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(17,18,List(25),question,question-01,false), Span(14,15,List(26),declaration,declare-02,false), Span(13,14,List(27),joint,joint,false), Span(11,12,List(29, 28),1984,(date-entity :year 1984),false), Span(9,10,List(30),signed,sign-02,false), Span(8,9,List(33, 32, 31),china,(country :name (name :op "China")),false), Span(7,8,List(34),and,and,false), Span(6,7,List(37, 36, 35),britain,(country :name (name :op "Britain")),false), Span(5,6,List(38),after,after,false), Span(4,5,List(39),just,just,false), Span(3,4,List(40),time,time,false)),Map(39 -> just, 30 -> sign-02, 2 -> sovereignty, 5 -> name, 33 -> "China", 27 -> joint, 12 -> temporal-quantity, 8 -> promise-01, 15 -> 50, 36 -> name, 21 -> country, 18 -> forward, 24 -> "kong", 35 -> country, 7 -> follow-02, 1 -> 1997, 17 -> high, 23 -> "hong", 38 -> after, 26 -> declare-02, 4 -> country, 11 -> capitalist, 32 -> name, 14 -> or, 29 -> 1984, 20 -> colony, 34 -> and, 28 -> date-entity, 6 -> "China", 40 -> time, 9 -> both, 0 -> date-entity, 22 -> name, 16 -> hope-01, 37 -> "Britain", 19 -> look-01, 10 -> autonomy, 3 -> person, 31 -> country, 25 -> question-01, 13 -> year),Map(n -> name, h -> hope-01, q -> question-01, 5 -> 50, s2 -> sign-02, h2 -> high, 12 -> 1984, t -> temporal-quantity, b -> both, d3 -> date-entity, p2 -> promise-01, a3 -> after, n4 -> name, c4 -> country, j -> joint, j2 -> just, s -> sovereignty, d -> date-entity, 1 -> 1997, y -> year, p -> person, n3 -> name, a -> autonomy, c3 -> colony, d2 -> declare-02, c6 -> country, t2 -> time, a2 -> and, c -> country, f2 -> forward, l -> look-01, f -> follow-02, o -> or, c2 -> capitalist, n2 -> name, c5 -> country))),[Ljava.lang.String;@a5dc6a8,Annotation([Ljava.lang.String;@129d44e9,[Ljava.lang.String;@1317268b,[Ljava.lang.String;@54e37977),Annotation([Ljava.lang.String;@223b9f2b,[Ljava.lang.String;@784ed19b,[Ledu.cmu.lti.nlp.amr.Dependency;@7ea354d1),Annotation([Ljava.lang.String;@1515a64b,[Ljava.lang.String;@405890bd,[Ljava.lang.String;@7686894b),Annotation([Ljava.lang.String;@7a9fd7b7,[Ljava.lang.String;@140b6e46,[Ledu.cmu.lti.nlp.amr.Entity;@7a74bff1))
AMR:
(a / autonomy, mod, c2 / capitalist)
(a2 / and, op, c6 / country)
(a2 / and, op, o / or)
(a3 / after, mod, j2 / just)
(a3 / after, op, a2 / and)
(a3 / after, op, s2 / sign-02)
(c / country, name, n / name)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c6 / country, name, n4 / name)
(d / date-entity, year, 1 / 1997)
(d2 / declare-02, ARG0, c4 / country)
(d2 / declare-02, ARG1, c2 / capitalist)
(d2 / declare-02, mod, j / joint)
(d3 / date-entity, year, 12 / 1984)
(f / follow-02, ARG0, a2 / and)
(f / follow-02, ARG1, p / person)
(h / hope-01, ARG1, a2 / and)
(h / hope-01, mod, h2 / high)
(l / look-01, ARG0, c3 / colony)
(l / look-01, ARG1, h / hope-01)
(l / look-01, direction, f2 / forward)
(n / name, op, "China")
(n2 / name, op, "hong")
(n2 / name, op, "kong")
(n3 / name, op, "China")
(n4 / name, op, "Britain")
(o / or, op, t / temporal-quantity)
(p / person, mod, c / country)
(p / person, time, d / date-entity)
(p2 / promise-01, ARG1, f / follow-02)
(q / question-01, ARG0, b / both)
(q / question-01, ARG1, c4 / country)
(s / sovereignty, poss, p / person)
(s2 / sign-02, ARG1, d2 / declare-02)
(s2 / sign-02, ARG2, c5 / country)
(s2 / sign-02, time, d3 / date-entity)
(t / temporal-quantity, quant, 5 / 50)
(t / temporal-quantity, unit, y / year)
(t2 / time, time, a3 / after)

Decoded in 1,165,452 microseconds
Sentence: mr mayor yesterday issued a long statement replying to staff criticism of his measures and promised that in future all senior posts would be advertised internally before appointments were made

Spans:
Span 19-20:  all => all
Span 14-15:  and => and
Span 26-27:  before => before
Span 10-11:  criticism => criticize-01
Span 18-19:  future => future
Span 3-4:  issued => issue-01
Span 1-2:  mayor => (have-org-role-91 :ARG2 mayor)
Span 13-14:  measures => measure
Span 21-22:  posts => post
Span 15-16:  promised => promise-01
Span 7-8:  replying => reply-01
Span 20-21:  senior => senior
Span 9-10:  staff => (person :ARG2-of staff-01)
Span 6-7:  statement => state-01
Span 2-3:  yesterday => yesterday

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),before,before,false), Span(21,22,List(1),posts,post,false), Span(20,21,List(2),senior,senior,false), Span(19,20,List(3),all,all,false), Span(18,19,List(4),future,future,false), Span(15,16,List(5),promised,promise-01,false), Span(14,15,List(6),and,and,false), Span(13,14,List(7),measures,measure,false), Span(10,11,List(8),criticism,criticize-01,false), Span(9,10,List(10, 9),staff,(person :ARG2-of staff-01),false), Span(7,8,List(11),replying,reply-01,false), Span(6,7,List(12),statement,state-01,false), Span(3,4,List(13),issued,issue-01,false), Span(2,3,List(14),yesterday,yesterday,false), Span(1,2,List(16, 15),mayor,(have-org-role-91 :ARG2 mayor),false)),Map(2 -> senior, 5 -> promise-01, 12 -> state-01, 15 -> have-org-role-91, 8 -> criticize-01, 7 -> measure, 1 -> post, 4 -> future, 11 -> reply-01, 14 -> yesterday, 6 -> and, 0 -> before, 9 -> person, 16 -> mayor, 3 -> all, 10 -> staff-01, 13 -> issue-01),Map(h -> have-org-role-91, s2 -> staff-01, b -> before, m2 -> mayor, p2 -> promise-01, s -> senior, m -> measure, y -> yesterday, p -> post, a -> all, i -> issue-01, a2 -> and, r -> reply-01, c -> criticize-01, s3 -> state-01, f -> future, p3 -> person))),[Ljava.lang.String;@6e5a606,Annotation([Ljava.lang.String;@4ef6d773,[Ljava.lang.String;@2fbae785,[Ljava.lang.String;@17b5e53e),Annotation([Ljava.lang.String;@26dd559b,[Ljava.lang.String;@d1f470c,[Ledu.cmu.lti.nlp.amr.Dependency;@716b8f),Annotation([Ljava.lang.String;@164c7983,[Ljava.lang.String;@76bd92e4,[Ljava.lang.String;@17f6f3a3),Annotation([Ljava.lang.String;@55f55e9f,[Ljava.lang.String;@601744cf,[Ledu.cmu.lti.nlp.amr.Entity;@17a6a352))
AMR:
(a2 / and, op, i / issue-01)
(a2 / and, op, p2 / promise-01)
(c / criticize-01, ARG0, p3 / person)
(c / criticize-01, ARG1, m / measure)
(h / have-org-role-91, ARG1, p / post)
(h / have-org-role-91, ARG2, m2 / mayor)
(i / issue-01, ARG0, f / future)
(i / issue-01, ARG1, r / reply-01)
(i / issue-01, time, y / yesterday)
(p / post, mod, s / senior)
(p / post, quant, a / all)
(p2 / promise-01, ARG0, m2 / mayor)
(p2 / promise-01, ARG1, b / before)
(r / reply-01, ARG1, c / criticize-01)
(s2 / staff-01, ARG2, p3 / person)
(s3 / state-01, ARG0, r / reply-01)

Decoded in 244,862 microseconds
Sentence: in addition to the valid yes i promise they added the words by legal imperative

Spans:
Span 9-10:  added => add-01
Span 6-7:  i => i
Span 14-15:  imperative => imperative
Span 13-14:  legal => legal
Span 7-8:  promise => promise-01
Span 8-9:  they => they
Span 4-5:  valid => valid-41
Span 11-12:  words => word
Span 5-6:  yes => yes

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),imperative,imperative,false), Span(13,14,List(1),legal,legal,false), Span(11,12,List(2),words,word,false), Span(9,10,List(3),added,add-01,false), Span(8,9,List(4),they,they,false), Span(7,8,List(5),promise,promise-01,false), Span(6,7,List(6),i,i,false), Span(5,6,List(7),yes,yes,false), Span(4,5,List(8),valid,valid-41,false)),Map(2 -> word, 5 -> promise-01, 8 -> valid-41, 7 -> yes, 1 -> legal, 4 -> they, 6 -> i, 0 -> imperative, 3 -> add-01),Map(w -> word, t -> they, v -> valid-41, y -> yes, p -> promise-01, a -> add-01, i2 -> i, i -> imperative, l -> legal))),[Ljava.lang.String;@3d2c689f,Annotation([Ljava.lang.String;@2e88be19,[Ljava.lang.String;@1378732d,[Ljava.lang.String;@48d19957),Annotation([Ljava.lang.String;@38aa441a,[Ljava.lang.String;@325d2406,[Ledu.cmu.lti.nlp.amr.Dependency;@e81fbf),Annotation([Ljava.lang.String;@77c3510,[Ljava.lang.String;@6b7fb146,[Ljava.lang.String;@c4fa1cd),Annotation([Ljava.lang.String;@4007a00b,[Ljava.lang.String;@349c5304,[Ledu.cmu.lti.nlp.amr.Entity;@30e4698))
AMR:
(a / add-01, ARG0, t / they)
(a / add-01, ARG1, w / word)
(a / add-01, ARG2, i / imperative)
(i / imperative, mod, l / legal)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, t / they)
(p / promise-01, time, y / yes)
(v / valid-41, ARG1, p / promise-01)

Decoded in 115,910 microseconds
Sentence: as if to anticipate the likely pressure from the debtor countries and to underscore their newfound financial strength and leadership the japanese yesterday promised to unveil a new package of financial support which could give a substantial boost to plans for debt relief and reduction

NER Entity: (thing :name (name :op "japanese"))
Spans:
Span 43-44:  and => and
Span 18-19:  and => and
Span 11-12:  and => and
Span 37-38:  boost => boost-01
Span 33-34:  could => possible
Span 10-11:  countries => country
Span 41-42:  debt => debt
Span 30-31:  financial => finance
Span 16-17:  financial => finance
Span 34-35:  give => give-01
Span 5-6:  likely => likely
Span 27-28:  new => new
Span 15-16:  newfound => newfound
Span 28-29:  package => package
Span 39-40:  plans => plan-01
Span 6-7:  pressure => pressure-01
Span 23-24:  promised => promise-01
Span 44-45:  reduction => reduce-01
Span 42-43:  relief => relieve-01
Span 17-18:  strength => strength
Span 36-37:  substantial => substantial
Span 31-32:  support => support-01
Span 22-23:  yesterday => yesterday

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),reduction,reduce-01,false), Span(43,44,List(1),and,and,false), Span(42,43,List(2),relief,relieve-01,false), Span(41,42,List(3),debt,debt,false), Span(39,40,List(4),plans,plan-01,false), Span(37,38,List(5),boost,boost-01,false), Span(36,37,List(6),substantial,substantial,false), Span(34,35,List(7),give,give-01,false), Span(33,34,List(8),could,possible,false), Span(31,32,List(9),support,support-01,false), Span(30,31,List(10),financial,finance,false), Span(28,29,List(11),package,package,false), Span(27,28,List(12),new,new,false), Span(23,24,List(13),promised,promise-01,false), Span(22,23,List(14),yesterday,yesterday,false), Span(18,19,List(15),and,and,false), Span(17,18,List(16),strength,strength,false), Span(16,17,List(17),financial,finance,false), Span(15,16,List(18),newfound,newfound,false), Span(11,12,List(19),and,and,false), Span(10,11,List(20),countries,country,false), Span(6,7,List(21),pressure,pressure-01,false), Span(5,6,List(22),likely,likely,false)),Map(2 -> relieve-01, 5 -> boost-01, 12 -> new, 15 -> and, 8 -> possible, 21 -> pressure-01, 18 -> newfound, 7 -> give-01, 17 -> finance, 1 -> and, 4 -> plan-01, 11 -> package, 14 -> yesterday, 20 -> country, 6 -> substantial, 22 -> likely, 0 -> reduce-01, 9 -> support-01, 16 -> strength, 19 -> and, 3 -> debt, 10 -> finance, 13 -> promise-01),Map(n -> new, p5 -> pressure-01, s2 -> support-01, b -> boost-01, p2 -> possible, a3 -> and, s -> substantial, d -> debt, y -> yesterday, r2 -> relieve-01, p -> plan-01, g -> give-01, a -> and, p4 -> promise-01, a2 -> and, r -> reduce-01, c -> country, s3 -> strength, l -> likely, f2 -> finance, f -> finance, p3 -> package, n2 -> newfound))),[Ljava.lang.String;@1fe5cb31,Annotation([Ljava.lang.String;@277f0e53,[Ljava.lang.String;@6857f67,[Ljava.lang.String;@266f4689),Annotation([Ljava.lang.String;@537fe015,[Ljava.lang.String;@7050ad86,[Ledu.cmu.lti.nlp.amr.Dependency;@40b07205),Annotation([Ljava.lang.String;@dc771,[Ljava.lang.String;@8a0cbbe,[Ljava.lang.String;@74a02b5e),Annotation([Ljava.lang.String;@3f7f6423,[Ljava.lang.String;@44875666,[Ledu.cmu.lti.nlp.amr.Entity;@113965b0))
AMR:
(a / and, op, r / reduce-01)
(a2 / and, op, s3 / strength)
(a3 / and, op, p5 / pressure-01)
(b / boost-01, mod, s / substantial)
(g / give-01, ARG0, s2 / support-01)
(g / give-01, ARG1, b / boost-01)
(g / give-01, ARG2, p / plan-01)
(g / give-01, manner, r2 / relieve-01)
(l / likely, domain, p5 / pressure-01)
(p / plan-01, ARG1, a / and)
(p2 / possible, domain, g / give-01)
(p3 / package, mod, g / give-01)
(p3 / package, mod, n / new)
(p4 / promise-01, ARG0, y / yesterday)
(p4 / promise-01, ARG1, p3 / package)
(p5 / pressure-01, ARG1, c / country)
(r / reduce-01, ARG1, d / debt)
(s2 / support-01, mod, f / finance)
(s3 / strength, mod, f2 / finance)
(s3 / strength, mod, n2 / newfound)
(s3 / strength, poss, c / country)
(s3 / strength, purpose, p4 / promise-01)

Decoded in 633,594 microseconds
Sentence: this will ease the pain my love she promised

Spans:
Span 2-3:  ease => ease-02
Span 6-7:  love => love-01
Span 4-5:  pain => pain-01
Span 8-9:  promised => promise-01
Span 7-8:  she => she
Span 0-1:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promised,promise-01,false), Span(7,8,List(1),she,she,false), Span(6,7,List(2),love,love-01,false), Span(4,5,List(3),pain,pain-01,false), Span(2,3,List(4),ease,ease-02,false), Span(0,1,List(5),this,this,false)),Map(2 -> love-01, 5 -> this, 1 -> she, 4 -> ease-02, 0 -> promise-01, 3 -> pain-01),Map(e -> ease-02, t -> this, p2 -> pain-01, s -> she, p -> promise-01, l -> love-01))),[Ljava.lang.String;@4f430ea5,Annotation([Ljava.lang.String;@3b769b4a,[Ljava.lang.String;@67cd35c5,[Ljava.lang.String;@51854dc0),Annotation([Ljava.lang.String;@6b3a210,[Ljava.lang.String;@7b54cbdf,[Ledu.cmu.lti.nlp.amr.Dependency;@7c14dcba),Annotation([Ljava.lang.String;@3da776fa,[Ljava.lang.String;@3d7436b5,[Ljava.lang.String;@18b3c498),Annotation([Ljava.lang.String;@422fe3d3,[Ljava.lang.String;@56165397,[Ledu.cmu.lti.nlp.amr.Entity;@53ca0aa8))
AMR:
(e / ease-02, ARG0, t / this)
(e / ease-02, ARG1, p2 / pain-01)
(l / love-01, ARG1, p2 / pain-01)
(p / promise-01, ARG0, s / she)
(p / promise-01, ARG1, l / love-01)

Decoded in 14,760 microseconds
Sentence: she is assured of as warm a welcome from the british government she will be seeing margaret thatcher and the foreign secretary douglas hurd as she received last week in washington from president bush who promised to restore aid to nicaragua if she won

NER Entity: (thing :name (name :op "british"))
NER Entity: (person :name (name :op "margaret" :op "thatcher"))
NER Entity: (person :name (name :op "douglas" :op "hurd"))
NER Entity: (country :name (name :op "washington"))
NER Entity: (country :name (name :op "nicaragua"))
Spans:
Span 38-39:  aid => aid-01
Span 18-19:  and => and
Span 2-3:  assured => assure-01
Span 33-34:  bush => bush-league
Span 22-24:  douglas hurd => (person :name (name :op "douglas" :op "hurd"))
Span 20-21:  foreign => foreign
Span 27-28:  last => last
Span 16-18:  margaret thatcher => (person :name (name :op "margaret" :op "thatcher"))
Span 32-33:  president => (have-org-role-91 :ARG2 president)
Span 35-36:  promised => promise-01
Span 26-27:  received => receive-01
Span 37-38:  restore => restore-01
Span 21-22:  secretary => secretary
Span 15-16:  seeing => see-01
Span 42-43:  she => she
Span 25-26:  she => she
Span 12-13:  she => she
Span 0-1:  she => she
Span 5-6:  warm => warm
Span 28-29:  week => week
Span 7-8:  welcome => welcome-01
Span 43-44:  won => win-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),won,win-01,false), Span(42,43,List(1),she,she,false), Span(38,39,List(2),aid,aid-01,false), Span(37,38,List(3),restore,restore-01,false), Span(35,36,List(4),promised,promise-01,false), Span(33,34,List(5),bush,bush-league,false), Span(32,33,List(7, 6),president,(have-org-role-91 :ARG2 president),false), Span(28,29,List(8),week,week,false), Span(27,28,List(9),last,last,false), Span(26,27,List(10),received,receive-01,false), Span(25,26,List(11),she,she,false), Span(22,24,List(15, 14, 13, 12),douglas hurd,(person :name (name :op "douglas" :op "hurd")),false), Span(21,22,List(16),secretary,secretary,false), Span(20,21,List(17),foreign,foreign,false), Span(18,19,List(18),and,and,false), Span(16,18,List(22, 21, 20, 19),margaret thatcher,(person :name (name :op "margaret" :op "thatcher")),false), Span(15,16,List(23),seeing,see-01,false), Span(12,13,List(24),she,she,false), Span(7,8,List(25),welcome,welcome-01,false), Span(5,6,List(26),warm,warm,false), Span(2,3,List(27),assured,assure-01,false), Span(0,1,List(28),she,she,false)),Map(2 -> aid-01, 5 -> bush-league, 27 -> assure-01, 12 -> person, 8 -> week, 15 -> "hurd", 21 -> "margaret", 18 -> and, 24 -> she, 7 -> president, 1 -> she, 17 -> foreign, 23 -> see-01, 26 -> warm, 4 -> promise-01, 11 -> she, 14 -> "douglas", 20 -> name, 28 -> she, 6 -> have-org-role-91, 9 -> last, 0 -> win-01, 22 -> "thatcher", 16 -> secretary, 19 -> person, 10 -> receive-01, 3 -> restore-01, 25 -> welcome-01, 13 -> name),Map(s5 -> she, w -> win-01, n -> name, h -> have-org-role-91, s2 -> she, b -> bush-league, p2 -> president, a3 -> assure-01, w3 -> welcome-01, s -> she, s4 -> see-01, r2 -> receive-01, p -> promise-01, a -> aid-01, p4 -> person, w2 -> week, r -> restore-01, a2 -> and, s3 -> secretary, l -> last, f -> foreign, s6 -> she, p3 -> person, n2 -> name, w4 -> warm))),[Ljava.lang.String;@76dbb00d,Annotation([Ljava.lang.String;@51036271,[Ljava.lang.String;@35341244,[Ljava.lang.String;@6d9b49a5),Annotation([Ljava.lang.String;@6e0027da,[Ljava.lang.String;@4c3891a1,[Ledu.cmu.lti.nlp.amr.Dependency;@15e1081f),Annotation([Ljava.lang.String;@68dc3671,[Ljava.lang.String;@517a6a7f,[Ljava.lang.String;@3be5e1a3),Annotation([Ljava.lang.String;@7140b30d,[Ljava.lang.String;@4eab5491,[Ledu.cmu.lti.nlp.amr.Entity;@523d23f0))
AMR:
(a2 / and, op, p4 / person)
(a2 / and, op, s3 / secretary)
(a3 / assure-01, ARG0, p3 / person)
(a3 / assure-01, ARG1, s6 / she)
(h / have-org-role-91, ARG0, b / bush-league)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "douglas")
(n / name, op, "hurd")
(n2 / name, op, "margaret")
(n2 / name, op, "thatcher")
(p / promise-01, ARG0, b / bush-league)
(p / promise-01, ARG1, p3 / person)
(p / promise-01, ARG2, r / restore-01)
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)
(r / restore-01, ARG1, a / aid-01)
(r2 / receive-01, ARG0, s2 / she)
(r2 / receive-01, ARG1, p3 / person)
(r2 / receive-01, ARG2, s3 / secretary)
(r2 / receive-01, mod, w4 / warm)
(r2 / receive-01, time, w2 / week)
(s3 / secretary, mod, f / foreign)
(s4 / see-01, ARG0, s5 / she)
(s4 / see-01, ARG1, a2 / and)
(w / win-01, ARG0, s / she)
(w / win-01, ARG1, s2 / she)
(w2 / week, mod, l / last)
(w3 / welcome-01, ARG1, p4 / person)

Decoded in 1,444,084 microseconds
Sentence: this is on account of what you might call the counterlife theory of holidays which holds that what you get out of the experience will be the opposite of what you were promised or expected or desired

Spans:
Span 3-4:  account => account
Span 36-37:  desired => desire-01
Span 34-35:  expected => expect-01
Span 23-24:  experience => experience-01
Span 15-16:  holds => hold-01
Span 13-14:  holidays => holiday
Span 27-28:  opposite => opposite-41
Span 35-36:  or => or
Span 33-34:  or => or
Span 32-33:  promised => promise-01
Span 11-12:  theory => theory
Span 0-1:  this => this
Span 30-31:  you => you
Span 18-19:  you => you
Span 6-7:  you => you

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),desired,desire-01,false), Span(35,36,List(1),or,or,false), Span(34,35,List(2),expected,expect-01,false), Span(33,34,List(3),or,or,false), Span(32,33,List(4),promised,promise-01,false), Span(30,31,List(5),you,you,false), Span(27,28,List(6),opposite,opposite-41,false), Span(23,24,List(7),experience,experience-01,false), Span(18,19,List(8),you,you,false), Span(15,16,List(9),holds,hold-01,false), Span(13,14,List(10),holidays,holiday,false), Span(11,12,List(11),theory,theory,false), Span(6,7,List(12),you,you,false), Span(3,4,List(13),account,account,false), Span(0,1,List(14),this,this,false)),Map(2 -> expect-01, 5 -> you, 12 -> you, 8 -> you, 7 -> experience-01, 1 -> or, 4 -> promise-01, 11 -> theory, 14 -> this, 6 -> opposite-41, 0 -> desire-01, 9 -> hold-01, 3 -> or, 10 -> holiday, 13 -> account),Map(e -> expect-01, h -> hold-01, h2 -> holiday, t -> theory, o3 -> opposite-41, e2 -> experience-01, d -> desire-01, p -> promise-01, y -> you, a -> account, y3 -> you, o2 -> or, t2 -> this, o -> or, y2 -> you))),[Ljava.lang.String;@2c028bbe,Annotation([Ljava.lang.String;@5b247d84,[Ljava.lang.String;@38ac93db,[Ljava.lang.String;@4a1f2bee),Annotation([Ljava.lang.String;@447d3c46,[Ljava.lang.String;@7a003aca,[Ledu.cmu.lti.nlp.amr.Dependency;@2513e259),Annotation([Ljava.lang.String;@3c715413,[Ljava.lang.String;@3446ca65,[Ljava.lang.String;@1391c7b3),Annotation([Ljava.lang.String;@47cdc2ce,[Ljava.lang.String;@15b08736,[Ledu.cmu.lti.nlp.amr.Entity;@787cf559))
AMR:
(d / desire-01, ARG1, e2 / experience-01)
(e / expect-01, ARG0, y / you)
(e2 / experience-01, ARG0, y2 / you)
(e2 / experience-01, ARG1, t2 / this)
(h / hold-01, ARG0, t / theory)
(h / hold-01, ARG1, h2 / holiday)
(o / or, op, d / desire-01)
(o / or, op, h / hold-01)
(o2 / or, op, o / or)
(o2 / or, op, p / promise-01)
(o3 / opposite-41, ARG1, a / account)
(p / promise-01, ARG0, y / you)
(p / promise-01, ARG1, o3 / opposite-41)
(t / theory, poss, y3 / you)

Decoded in 492,687 microseconds
Sentence: it was reported at the meeting of cassington parish council that arc had promised to give materials for the surfacing of the green and mr rowe had agreed to organise the spreading of the hardcore and top soil in the late spring or early summer

NER Entity: (country :name (name :op "cassington"))
Spans:
Span 27-28:  agreed => agree-01
Span 35-36:  and => and
Span 23-24:  and => and
Span 9-10:  council => council
Span 43-44:  early => early
Span 15-16:  give => give-01
Span 22-23:  green => green
Span 34-35:  hardcore => hardcore
Span 0-1:  it => it
Span 40-41:  late => late
Span 16-17:  materials => material
Span 5-6:  meeting => meet-03
Span 42-43:  or => or
Span 29-30:  organise => organize-01
Span 13-14:  promised => promise-01
Span 2-3:  reported => report-01
Span 37-38:  soil => soil
Span 31-32:  spreading => spread-03
Span 41-42:  spring => spring
Span 44-45:  summer => summer
Span 36-37:  top => top

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),summer,summer,false), Span(43,44,List(1),early,early,false), Span(42,43,List(2),or,or,false), Span(41,42,List(3),spring,spring,false), Span(40,41,List(4),late,late,false), Span(37,38,List(5),soil,soil,false), Span(36,37,List(6),top,top,false), Span(35,36,List(7),and,and,false), Span(34,35,List(8),hardcore,hardcore,false), Span(31,32,List(9),spreading,spread-03,false), Span(29,30,List(10),organise,organize-01,false), Span(27,28,List(11),agreed,agree-01,false), Span(23,24,List(12),and,and,false), Span(22,23,List(13),green,green,false), Span(16,17,List(14),materials,material,false), Span(15,16,List(15),give,give-01,false), Span(13,14,List(16),promised,promise-01,false), Span(9,10,List(17),council,council,false), Span(5,6,List(18),meeting,meet-03,false), Span(2,3,List(19),reported,report-01,false), Span(0,1,List(20),it,it,false)),Map(2 -> or, 5 -> soil, 12 -> and, 15 -> give-01, 8 -> hardcore, 18 -> meet-03, 7 -> and, 17 -> council, 1 -> early, 4 -> late, 11 -> agree-01, 14 -> material, 20 -> it, 6 -> top, 0 -> summer, 9 -> spread-03, 16 -> promise-01, 19 -> report-01, 3 -> spring, 10 -> organize-01, 13 -> green),Map(e -> early, h -> hardcore, s2 -> spring, t -> top, m2 -> meet-03, a3 -> and, s -> summer, s4 -> spread-03, m -> material, g2 -> give-01, p -> promise-01, g -> green, a -> and, o2 -> organize-01, i -> it, r -> report-01, a2 -> agree-01, c -> council, s3 -> soil, l -> late, o -> or))),[Ljava.lang.String;@757869d9,Annotation([Ljava.lang.String;@346d61cf,[Ljava.lang.String;@793077ec,[Ljava.lang.String;@5d11651c),Annotation([Ljava.lang.String;@21054100,[Ljava.lang.String;@5fee77ef,[Ledu.cmu.lti.nlp.amr.Dependency;@21041d1d),Annotation([Ljava.lang.String;@15136bda,[Ljava.lang.String;@2e0dc005,[Ljava.lang.String;@8b99fe2),Annotation([Ljava.lang.String;@52afb2e7,[Ljava.lang.String;@d0a861a,[Ledu.cmu.lti.nlp.amr.Entity;@2dea1ba6))
AMR:
(a / and, op, s3 / soil)
(a / and, op, s4 / spread-03)
(a2 / agree-01, ARG1, o2 / organize-01)
(a3 / and, op, g / green)
(g2 / give-01, ARG1, m / material)
(g2 / give-01, purpose, a2 / agree-01)
(m2 / meet-03, ARG1, c / council)
(o / or, op, e / early)
(o / or, op, o2 / organize-01)
(o / or, op, s / summer)
(o / or, op, s2 / spring)
(o2 / organize-01, ARG0, a3 / and)
(o2 / organize-01, ARG1, s4 / spread-03)
(p / promise-01, ARG2, g2 / give-01)
(r / report-01, ARG0, i / it)
(r / report-01, ARG1, p / promise-01)
(r / report-01, time, m2 / meet-03)
(s2 / spring, mod, l / late)
(s3 / soil, mod, t / top)
(s4 / spread-03, ARG1, h / hardcore)

Decoded in 717,198 microseconds
Sentence: these were followed or interspersed by a windswept starmersmith standing on the touchline microphone in hand sporting a selection from his extensive wardrobe of scarves and neckties and promising delights which were sure to come next week but which had unaccountably failed to materialise this week

Spans:
Span 27-28:  and => and
Span 25-26:  and => and
Span 37-38:  but => contrast-01
Span 21-22:  extensive => extensive
Span 41-42:  failed => fail-01
Span 2-3:  followed => follow-01
Span 15-16:  hand => hand
Span 35-36:  next => next
Span 3-4:  or => or
Span 28-29:  promising => promise-01
Span 18-19:  selection => select-01
Span 16-17:  sporting => sport
Span 44-45:  this => this
Span 45-46:  week => week
Span 36-37:  week => week

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),week,week,false), Span(44,45,List(1),this,this,false), Span(41,42,List(2),failed,fail-01,false), Span(37,38,List(3),but,contrast-01,false), Span(36,37,List(4),week,week,false), Span(35,36,List(5),next,next,false), Span(28,29,List(6),promising,promise-01,false), Span(27,28,List(7),and,and,false), Span(25,26,List(8),and,and,false), Span(21,22,List(9),extensive,extensive,false), Span(18,19,List(10),selection,select-01,false), Span(16,17,List(11),sporting,sport,false), Span(15,16,List(12),hand,hand,false), Span(3,4,List(13),or,or,false), Span(2,3,List(14),followed,follow-01,false)),Map(2 -> fail-01, 5 -> next, 12 -> hand, 8 -> and, 7 -> and, 1 -> this, 4 -> week, 11 -> sport, 14 -> follow-01, 6 -> promise-01, 0 -> week, 9 -> extensive, 3 -> contrast-01, 10 -> select-01, 13 -> or),Map(e -> extensive, w -> week, n -> next, h -> hand, s2 -> sport, t -> this, s -> select-01, p -> promise-01, a -> and, w2 -> week, a2 -> and, c -> contrast-01, f2 -> follow-01, f -> fail-01, o -> or))),[Ljava.lang.String;@64bd46d6,Annotation([Ljava.lang.String;@4675bf45,[Ljava.lang.String;@5c606f26,[Ljava.lang.String;@3f21572b),Annotation([Ljava.lang.String;@25e1e86e,[Ljava.lang.String;@1262a130,[Ledu.cmu.lti.nlp.amr.Dependency;@9445fbe),Annotation([Ljava.lang.String;@67e9b7b2,[Ljava.lang.String;@211b3c6a,[Ljava.lang.String;@31b6421),Annotation([Ljava.lang.String;@7b4ab41e,[Ljava.lang.String;@65775cce,[Ledu.cmu.lti.nlp.amr.Entity;@7f6e0c6c))
AMR:
(a / and, op, p / promise-01)
(a / and, op, s2 / sport)
(a2 / and, op, p / promise-01)
(c / contrast-01, ARG1, w2 / week)
(c / contrast-01, ARG2, f / fail-01)
(f / fail-01, ARG0, e / extensive)
(f / fail-01, ARG1, a / and)
(f / fail-01, time, w / week)
(f2 / follow-01, ARG1, s2 / sport)
(o / or, op, f2 / follow-01)
(p / promise-01, ARG1, s / select-01)
(s / select-01, ARG0, h / hand)
(w / week, mod, t / this)
(w2 / week, mod, n / next)

Decoded in 226,460 microseconds
Sentence: even if beijing can be persuaded to make important gestures such as promising not to station peoples liberation army troops in the territory it will be hard to make any impact on the hundreds of thousands who have decided to quit hong kong for good

NER Entity: (country :name (name :op "beijing"))
NER Entity: (country :name (name :op "hong" :op "kong"))
Spans:
Span 29-30:  any => any
Span 18-19:  army => army
Span 3-4:  can => possible
Span 38-39:  decided => decide-01
Span 44-45:  good => good
Span 26-27:  hard => hard
Span 41-43:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 30-31:  impact => impact-01
Span 8-9:  important => important
Span 23-24:  it => it
Span 17-18:  liberation => liberate-01
Span 16-17:  peoples => people
Span 5-6:  persuaded => persuade-01
Span 12-13:  promising => promise-01
Span 40-41:  quit => quit-01
Span 15-16:  station => station
Span 10-11:  such => such
Span 22-23:  territory => territory
Span 19-20:  troops => troop

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),good,good,false), Span(41,43,List(4, 3, 2, 1),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(40,41,List(5),quit,quit-01,false), Span(38,39,List(6),decided,decide-01,false), Span(30,31,List(7),impact,impact-01,false), Span(29,30,List(8),any,any,false), Span(26,27,List(9),hard,hard,false), Span(23,24,List(10),it,it,false), Span(22,23,List(11),territory,territory,false), Span(19,20,List(12),troops,troop,false), Span(18,19,List(13),army,army,false), Span(17,18,List(14),liberation,liberate-01,false), Span(16,17,List(15),peoples,people,false), Span(15,16,List(16),station,station,false), Span(12,13,List(17),promising,promise-01,false), Span(10,11,List(18),such,such,false), Span(8,9,List(19),important,important,false), Span(5,6,List(20),persuaded,persuade-01,false), Span(3,4,List(21),can,possible,false)),Map(2 -> name, 5 -> quit-01, 12 -> troop, 15 -> people, 8 -> any, 21 -> possible, 18 -> such, 7 -> impact-01, 17 -> promise-01, 1 -> country, 4 -> "kong", 11 -> territory, 14 -> liberate-01, 20 -> persuade-01, 6 -> decide-01, 0 -> good, 9 -> hard, 16 -> station, 19 -> important, 3 -> "hong", 10 -> it, 13 -> army),Map(n -> name, h -> hard, q -> quit-01, s2 -> such, t -> territory, p2 -> promise-01, s -> station, d -> decide-01, i3 -> important, p -> people, g -> good, a -> any, p4 -> possible, i2 -> it, t2 -> troop, i -> impact-01, a2 -> army, c -> country, l -> liberate-01, p3 -> persuade-01))),[Ljava.lang.String;@361e7c47,Annotation([Ljava.lang.String;@b713513,[Ljava.lang.String;@35537843,[Ljava.lang.String;@7afc920e),Annotation([Ljava.lang.String;@5bd91436,[Ljava.lang.String;@8be1456,[Ledu.cmu.lti.nlp.amr.Dependency;@77291e95),Annotation([Ljava.lang.String;@2c970551,[Ljava.lang.String;@6ede1fb5,[Ljava.lang.String;@38f3dcf0),Annotation([Ljava.lang.String;@122e2dc6,[Ljava.lang.String;@15bf2b7d,[Ledu.cmu.lti.nlp.amr.Entity;@39c026b2))
AMR:
(c / country, name, n / name)
(d / decide-01, ARG0, a / any)
(d / decide-01, ARG1, q / quit-01)
(d / decide-01, ARG2, l / liberate-01)
(d / decide-01, purpose, i / impact-01)
(h / hard, domain, i2 / it)
(i / impact-01, ARG0, i2 / it)
(i3 / important, op, i / impact-01)
(l / liberate-01, ARG1, a2 / army)
(l / liberate-01, ARG2, p / people)
(n / name, op, "hong")
(n / name, op, "kong")
(p2 / promise-01, ARG0, t2 / troop)
(p2 / promise-01, ARG1, s2 / such)
(p3 / persuade-01, ARG1, p2 / promise-01)
(p4 / possible, domain, p3 / persuade-01)
(q / quit-01, ARG0, g / good)
(q / quit-01, ARG1, c / country)
(s / station, part, p / people)
(t / territory, part, t2 / troop)
(t2 / troop, location, a2 / army)

Decoded in 677,916 microseconds
Sentence: at present the smaller scheme promises increases of up to 5 per cent whereas the main scheme guarantees indexlinked payments

Spans:
Span 10-11:  5 => 5
Span 12-13:  cent => (monetary-quantity :unit cent)
Span 17-18:  guarantees => guarantee-01
Span 6-7:  increases => increase-01
Span 15-16:  main => main
Span 19-20:  payments => payment
Span 1-2:  present => present
Span 5-6:  promises => promise-01
Span 16-17:  scheme => scheme
Span 4-5:  scheme => scheme
Span 3-4:  smaller => small
Span 13-14:  whereas => whereas

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),payments,payment,false), Span(17,18,List(1),guarantees,guarantee-01,false), Span(16,17,List(2),scheme,scheme,false), Span(15,16,List(3),main,main,false), Span(13,14,List(4),whereas,whereas,false), Span(12,13,List(6, 5),cent,(monetary-quantity :unit cent),false), Span(10,11,List(7),5,5,false), Span(6,7,List(8),increases,increase-01,false), Span(5,6,List(9),promises,promise-01,false), Span(4,5,List(10),scheme,scheme,false), Span(3,4,List(11),smaller,small,false), Span(1,2,List(12),present,present,false)),Map(2 -> scheme, 5 -> monetary-quantity, 12 -> present, 8 -> increase-01, 7 -> 5, 1 -> guarantee-01, 4 -> whereas, 11 -> small, 6 -> cent, 0 -> payment, 9 -> promise-01, 3 -> main, 10 -> scheme),Map(w -> whereas, 5 -> 5, s2 -> scheme, m2 -> monetary-quantity, p2 -> promise-01, s -> scheme, m -> main, p -> payment, g -> guarantee-01, i -> increase-01, c -> cent, s3 -> small, p3 -> present))),[Ljava.lang.String;@762c8dbc,Annotation([Ljava.lang.String;@670d6e40,[Ljava.lang.String;@22c1609b,[Ljava.lang.String;@45ad71f0),Annotation([Ljava.lang.String;@7e13674c,[Ljava.lang.String;@2be2ef3e,[Ledu.cmu.lti.nlp.amr.Dependency;@3fc8e5f4),Annotation([Ljava.lang.String;@1e7116e3,[Ljava.lang.String;@1295a0b2,[Ljava.lang.String;@1d690fa6),Annotation([Ljava.lang.String;@5c826a5f,[Ljava.lang.String;@7615b26b,[Ledu.cmu.lti.nlp.amr.Entity;@a74cb5e))
AMR:
(g / guarantee-01, ARG0, s / scheme)
(g / guarantee-01, ARG1, p / payment)
(g / guarantee-01, mod, m / main)
(g / guarantee-01, time, 5 / 5)
(i / increase-01, ARG1, p2 / promise-01)
(i / increase-01, purpose, g / guarantee-01)
(m2 / monetary-quantity, location, w / whereas)
(m2 / monetary-quantity, unit, c / cent)
(p2 / promise-01, ARG1, s2 / scheme)
(p2 / promise-01, ARG2, s3 / small)
(p3 / present, time, w / whereas)
(w / whereas, op, g / guarantee-01)

Decoded in 122,606 microseconds
Sentence: he and beatty were compared to a cad and a weasel romping through a story with little of the hilarity that it had promised

Spans:
Span 8-9:  and => and
Span 1-2:  and => and
Span 4-5:  compared => compare-01
Span 0-1:  he => he
Span 19-20:  hilarity => hilarity
Span 21-22:  it => it
Span 16-17:  little => little
Span 23-24:  promised => promise-01
Span 14-15:  story => story

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),promised,promise-01,false), Span(21,22,List(1),it,it,false), Span(19,20,List(2),hilarity,hilarity,false), Span(16,17,List(3),little,little,false), Span(14,15,List(4),story,story,false), Span(8,9,List(5),and,and,false), Span(4,5,List(6),compared,compare-01,false), Span(1,2,List(7),and,and,false), Span(0,1,List(8),he,he,false)),Map(2 -> hilarity, 5 -> and, 8 -> he, 7 -> and, 1 -> it, 4 -> story, 6 -> compare-01, 0 -> promise-01, 3 -> little),Map(h -> hilarity, h2 -> he, s -> story, p -> promise-01, a -> and, a2 -> and, i -> it, c -> compare-01, l -> little))),[Ljava.lang.String;@79d38dae,Annotation([Ljava.lang.String;@2ffad8fe,[Ljava.lang.String;@7dbc244d,[Ljava.lang.String;@4af37bb8),Annotation([Ljava.lang.String;@373f9379,[Ljava.lang.String;@2eeb0945,[Ledu.cmu.lti.nlp.amr.Dependency;@48ada913),Annotation([Ljava.lang.String;@13743ac,[Ljava.lang.String;@533bd1d3,[Ljava.lang.String;@7c4c9e55),Annotation([Ljava.lang.String;@a2f1e34,[Ljava.lang.String;@1b67ed25,[Ledu.cmu.lti.nlp.amr.Entity;@44022631))
AMR:
(a2 / and, op, h2 / he)
(c / compare-01, ARG1, a2 / and)
(c / compare-01, ARG2, a / and)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, i / it)
(p / promise-01, prep-on, h / hilarity)
(s / story, location, h / hilarity)
(s / story, location, l / little)

Decoded in 104,591 microseconds
Sentence: nevertheless two weeks before polling day he swept aside talk of municipal financial problems inaugurated a statefinanced electrification project in a workingclass district and promised running water and sewers for a poor district with a tendency to vote prd

Spans:
Span 27-28:  and => and
Span 23-24:  and => and
Span 8-9:  aside => aside
Span 3-4:  before => before
Span 5-6:  day => day
Span 32-33:  district => district
Span 22-23:  district => district
Span 17-18:  electrification => electrify-01
Span 12-13:  financial => finance
Span 6-7:  he => he
Span 14-15:  inaugurated => inaugurate-02
Span 11-12:  municipal => municipal
Span 31-32:  poor => poor
Span 13-14:  problems => problem
Span 18-19:  project => project
Span 24-25:  promised => promise-01
Span 28-29:  sewers => sewer
Span 7-8:  swept => sweep-02
Span 9-10:  talk => talk-01
Span 1-2:  two => 2
Span 37-38:  vote => vote-01
Span 26-27:  water => water
Span 2-3:  weeks => (temporal-quantity :unit week)

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),vote,vote-01,false), Span(32,33,List(1),district,district,false), Span(31,32,List(2),poor,poor,false), Span(28,29,List(3),sewers,sewer,false), Span(27,28,List(4),and,and,false), Span(26,27,List(5),water,water,false), Span(24,25,List(6),promised,promise-01,false), Span(23,24,List(7),and,and,false), Span(22,23,List(8),district,district,false), Span(18,19,List(9),project,project,false), Span(17,18,List(10),electrification,electrify-01,false), Span(14,15,List(11),inaugurated,inaugurate-02,false), Span(13,14,List(12),problems,problem,false), Span(12,13,List(13),financial,finance,false), Span(11,12,List(14),municipal,municipal,false), Span(9,10,List(15),talk,talk-01,false), Span(8,9,List(16),aside,aside,false), Span(7,8,List(17),swept,sweep-02,false), Span(6,7,List(18),he,he,false), Span(5,6,List(19),day,day,false), Span(3,4,List(20),before,before,false), Span(2,3,List(22, 21),weeks,(temporal-quantity :unit week),false), Span(1,2,List(23),two,2,false)),Map(2 -> poor, 5 -> water, 12 -> problem, 15 -> talk-01, 8 -> district, 21 -> temporal-quantity, 18 -> he, 7 -> and, 17 -> sweep-02, 1 -> district, 23 -> 2, 4 -> and, 11 -> inaugurate-02, 14 -> municipal, 20 -> before, 6 -> promise-01, 22 -> week, 0 -> vote-01, 9 -> project, 16 -> aside, 19 -> day, 3 -> sewer, 10 -> electrify-01, 13 -> finance),Map(e -> electrify-01, w -> water, h -> he, 2 -> 2, s2 -> sweep-02, b -> before, t -> talk-01, d3 -> day, p2 -> promise-01, a3 -> aside, s -> sewer, v -> vote-01, m -> municipal, d -> district, p -> poor, a -> and, p4 -> problem, d2 -> district, t2 -> temporal-quantity, w2 -> week, a2 -> and, i -> inaugurate-02, f -> finance, p3 -> project))),[Ljava.lang.String;@7bfabad8,Annotation([Ljava.lang.String;@a00fa7f,[Ljava.lang.String;@463dacfa,[Ljava.lang.String;@7b27751c),Annotation([Ljava.lang.String;@5b79c06e,[Ljava.lang.String;@1648a4ad,[Ledu.cmu.lti.nlp.amr.Dependency;@7b336548),Annotation([Ljava.lang.String;@6b3e9928,[Ljava.lang.String;@5ab94819,[Ljava.lang.String;@3a2c8fd7),Annotation([Ljava.lang.String;@43978a17,[Ljava.lang.String;@11eb0eac,[Ledu.cmu.lti.nlp.amr.Entity;@5f104764))
AMR:
(a / and, op, s / sewer)
(a / and, op, w / water)
(a2 / and, op, i / inaugurate-02)
(a2 / and, op, p2 / promise-01)
(a2 / and, op, v / vote-01)
(d / district, mod, p / poor)
(d / district, mod, p3 / project)
(i / inaugurate-02, ARG0, p4 / problem)
(i / inaugurate-02, ARG1, p3 / project)
(p2 / promise-01, ARG0, d2 / district)
(p2 / promise-01, ARG1, w / water)
(p3 / project, mod, e / electrify-01)
(p4 / problem, mod, f / finance)
(p4 / problem, mod, m / municipal)
(s2 / sweep-02, ARG0, h / he)
(s2 / sweep-02, ARG1, t / talk-01)
(s2 / sweep-02, direction, a3 / aside)
(s2 / sweep-02, time, b / before)
(s2 / sweep-02, time, d3 / day)
(t / talk-01, ARG1, p4 / problem)
(t2 / temporal-quantity, location, d3 / day)
(t2 / temporal-quantity, quant, 2 / 2)
(t2 / temporal-quantity, unit, w2 / week)

Decoded in 476,126 microseconds
Sentence: the governments reform programme intended to make the armed forces fit for a democratic hungary also imposes a troop reduction of 30 to 35 per cent over two years and promises to cut national service from 18 to 12 months by 1991

NER Entity: (country :name (name :op "hungary"))
Spans:
Span 38-39:  12 => 12
Span 36-37:  18 => 18
Span 41-42:  1991 => (date-entity :year 1991)
Span 21-22:  30 => 30
Span 23-24:  35 => 35
Span 15-16:  also => also
Span 29-30:  and => and
Span 8-9:  armed => arm-01
Span 25-26:  cent => (monetary-quantity :unit cent)
Span 13-14:  democratic => democracy
Span 10-11:  fit => fit-01
Span 9-10:  forces => force
Span 1-2:  governments => (government-organization :ARG0-of govern-01)
Span 16-17:  imposes => impose-01
Span 4-5:  intended => intend-01
Span 39-40:  months => (temporal-quantity :unit month)
Span 33-34:  national => nation
Span 3-4:  programme => program
Span 30-31:  promises => promise-01
Span 19-20:  reduction => reduce-01
Span 2-3:  reform => reform-01
Span 18-19:  troop => troop
Span 27-28:  two => 2
Span 28-29:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(1, 0),1991,(date-entity :year 1991),false), Span(39,40,List(3, 2),months,(temporal-quantity :unit month),false), Span(38,39,List(4),12,12,false), Span(36,37,List(5),18,18,false), Span(33,34,List(6),national,nation,false), Span(30,31,List(7),promises,promise-01,false), Span(29,30,List(8),and,and,false), Span(28,29,List(10, 9),years,(temporal-quantity :unit year),false), Span(27,28,List(11),two,2,false), Span(25,26,List(13, 12),cent,(monetary-quantity :unit cent),false), Span(23,24,List(14),35,35,false), Span(21,22,List(15),30,30,false), Span(19,20,List(16),reduction,reduce-01,false), Span(18,19,List(17),troop,troop,false), Span(16,17,List(18),imposes,impose-01,false), Span(15,16,List(19),also,also,false), Span(13,14,List(20),democratic,democracy,false), Span(10,11,List(21),fit,fit-01,false), Span(9,10,List(22),forces,force,false), Span(8,9,List(23),armed,arm-01,false), Span(4,5,List(24),intended,intend-01,false), Span(3,4,List(25),programme,program,false), Span(2,3,List(26),reform,reform-01,false), Span(1,2,List(28, 27),governments,(government-organization :ARG0-of govern-01),false)),Map(2 -> temporal-quantity, 5 -> 18, 27 -> government-organization, 12 -> monetary-quantity, 8 -> and, 15 -> 30, 21 -> fit-01, 18 -> impose-01, 24 -> intend-01, 7 -> promise-01, 1 -> 1991, 17 -> troop, 23 -> arm-01, 26 -> reform-01, 4 -> 12, 11 -> 2, 14 -> 35, 20 -> democracy, 28 -> govern-01, 6 -> nation, 9 -> temporal-quantity, 0 -> date-entity, 22 -> force, 16 -> reduce-01, 19 -> also, 10 -> year, 3 -> month, 25 -> program, 13 -> cent),Map(n -> nation, 2 -> 2, 12 -> 12, t -> temporal-quantity, m2 -> monetary-quantity, p2 -> program, a3 -> arm-01, m -> month, d -> date-entity, g2 -> govern-01, 1 -> 1991, t3 -> troop, r2 -> reform-01, y -> year, g -> government-organization, p -> promise-01, a -> and, 32 -> 30, d2 -> democracy, t2 -> temporal-quantity, i2 -> intend-01, r -> reduce-01, i -> impose-01, a2 -> also, c -> cent, f2 -> force, f -> fit-01, 3 -> 35, 13 -> 18))),[Ljava.lang.String;@56164f3a,Annotation([Ljava.lang.String;@52ab94fd,[Ljava.lang.String;@7ec29871,[Ljava.lang.String;@19a663bb),Annotation([Ljava.lang.String;@7add9724,[Ljava.lang.String;@69edfb80,[Ledu.cmu.lti.nlp.amr.Dependency;@71ac6d5),Annotation([Ljava.lang.String;@6ef3cd97,[Ljava.lang.String;@483ead69,[Ljava.lang.String;@aeaed8d),Annotation([Ljava.lang.String;@4591c994,[Ljava.lang.String;@6649373a,[Ledu.cmu.lti.nlp.amr.Entity;@50c8f54c))
AMR:
(13 / 18, op, i / impose-01)
(a / and, op, p / promise-01)
(a / and, op, r / reduce-01)
(a3 / arm-01, ARG0, 32 / 30)
(a3 / arm-01, ARG1, f2 / force)
(d / date-entity, year, 1 / 1991)
(f / fit-01, ARG1, f2 / force)
(g2 / govern-01, ARG0, g / government-organization)
(i / impose-01, ARG1, r / reduce-01)
(i / impose-01, mod, a2 / also)
(i2 / intend-01, ARG0, f2 / force)
(i2 / intend-01, ARG1, p2 / program)
(m2 / monetary-quantity, unit, c / cent)
(p / promise-01, ARG0, p2 / program)
(p / promise-01, ARG1, m2 / monetary-quantity)
(p / promise-01, ARG3, t2 / temporal-quantity)
(p / promise-01, duration, t / temporal-quantity)
(p / promise-01, time, d / date-entity)
(p2 / program, mod, g / government-organization)
(p2 / program, mod, r2 / reform-01)
(r / reduce-01, ARG0, n / nation)
(r / reduce-01, ARG1, t3 / troop)
(r2 / reform-01, ARG0, d2 / democracy)
(r2 / reform-01, ARG1, 3 / 35)
(t / temporal-quantity, quant, 12 / 12)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, quant, 2 / 2)
(t2 / temporal-quantity, unit, y / year)

Decoded in 1,731,648 microseconds
Sentence: although there is little evidence of any physical threat to the strategic waterway the confrontation with general noriega promised to hinder the handover

Spans:
Span 6-7:  any => any
Span 14-15:  confrontation => confront-01
Span 4-5:  evidence => evidence-01
Span 16-17:  general => general
Span 20-21:  hinder => hinder-01
Span 3-4:  little => little
Span 7-8:  physical => physical
Span 18-19:  promised => promise-01
Span 11-12:  strategic => strategy
Span 8-9:  threat => threaten-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),hinder,hinder-01,false), Span(18,19,List(1),promised,promise-01,false), Span(16,17,List(2),general,general,false), Span(14,15,List(3),confrontation,confront-01,false), Span(11,12,List(4),strategic,strategy,false), Span(8,9,List(5),threat,threaten-01,false), Span(7,8,List(6),physical,physical,false), Span(6,7,List(7),any,any,false), Span(4,5,List(8),evidence,evidence-01,false), Span(3,4,List(9),little,little,false)),Map(2 -> general, 5 -> threaten-01, 8 -> evidence-01, 7 -> any, 1 -> promise-01, 4 -> strategy, 6 -> physical, 9 -> little, 0 -> hinder-01, 3 -> confront-01),Map(e -> evidence-01, h -> hinder-01, t -> threaten-01, p2 -> physical, s -> strategy, g -> general, p -> promise-01, a -> any, l -> little, c -> confront-01))),[Ljava.lang.String;@39607a03,Annotation([Ljava.lang.String;@6cea7862,[Ljava.lang.String;@1585a1cb,[Ljava.lang.String;@78412176),Annotation([Ljava.lang.String;@7bfc07a7,[Ljava.lang.String;@5f5aa488,[Ledu.cmu.lti.nlp.amr.Dependency;@37e80da0),Annotation([Ljava.lang.String;@63d6a00c,[Ljava.lang.String;@1fa5a709,[Ljava.lang.String;@3479501a),Annotation([Ljava.lang.String;@879f5e0,[Ljava.lang.String;@7efd4978,[Ledu.cmu.lti.nlp.amr.Entity;@26e2a66a))
AMR:
(e / evidence-01, ARG0, t / threaten-01)
(e / evidence-01, purpose, p / promise-01)
(e / evidence-01, quant, l / little)
(h / hinder-01, ARG1, s / strategy)
(p / promise-01, ARG0, c / confront-01)
(p / promise-01, ARG2, h / hinder-01)
(t / threaten-01, ARG1, g / general)
(t / threaten-01, mod, a / any)
(t / threaten-01, mod, p2 / physical)

Decoded in 60,570 microseconds
Sentence: no more tapping promise

Spans:
Span 0-1:  no => -
Span 3-4:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),promise,promise-01,false), Span(0,1,List(1),no,-,false)),Map(1 -> -, 0 -> promise-01),Map(p -> promise-01, - -> -))),[Ljava.lang.String;@6a1b8d17,Annotation([Ljava.lang.String;@36cc176d,[Ljava.lang.String;@11161136,[Ljava.lang.String;@3fc3f8fd),Annotation([Ljava.lang.String;@5b0fcabf,[Ljava.lang.String;@69c7f04d,[Ledu.cmu.lti.nlp.amr.Dependency;@4571857c),Annotation([Ljava.lang.String;@1ff2b382,[Ljava.lang.String;@76e72c30,[Ljava.lang.String;@4306404c),Annotation([Ljava.lang.String;@4f675ff4,[Ljava.lang.String;@bccb4e6,[Ledu.cmu.lti.nlp.amr.Entity;@2c786e17))
AMR:
(p / promise-01, ARG1, - / -)

Decoded in 4,018 microseconds
Sentence: the seventh conference of the 102nation convention on international trade in endangered species which opens in lausanne today promises some lively debates particularly on orchids and ivory

Spans:
Span 25-26:  and => and
Span 2-3:  conference => conference
Span 6-7:  convention => convention
Span 21-22:  debates => debate-01
Span 11-12:  endangered => endanger-01
Span 8-9:  international => international
Span 20-21:  lively => lively
Span 14-15:  opens => open-01
Span 22-23:  particularly => particular
Span 18-19:  promises => promise-01
Span 19-20:  some => some
Span 12-13:  species => species
Span 17-18:  today => today
Span 9-10:  trade => trade-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),and,and,false), Span(22,23,List(1),particularly,particular,false), Span(21,22,List(2),debates,debate-01,false), Span(20,21,List(3),lively,lively,false), Span(19,20,List(4),some,some,false), Span(18,19,List(5),promises,promise-01,false), Span(17,18,List(6),today,today,false), Span(14,15,List(7),opens,open-01,false), Span(12,13,List(8),species,species,false), Span(11,12,List(9),endangered,endanger-01,false), Span(9,10,List(10),trade,trade-01,false), Span(8,9,List(11),international,international,false), Span(6,7,List(12),convention,convention,false), Span(2,3,List(13),conference,conference,false)),Map(2 -> debate-01, 5 -> promise-01, 12 -> convention, 8 -> species, 7 -> open-01, 1 -> particular, 4 -> some, 11 -> international, 6 -> today, 0 -> and, 9 -> endanger-01, 3 -> lively, 10 -> trade-01, 13 -> conference),Map(e -> endanger-01, s2 -> species, t -> today, p2 -> promise-01, s -> some, d -> debate-01, p -> particular, a -> and, t2 -> trade-01, i -> international, c -> convention, l -> lively, o -> open-01, c2 -> conference))),[Ljava.lang.String;@1683bed0,Annotation([Ljava.lang.String;@2364553c,[Ljava.lang.String;@1017e84b,[Ljava.lang.String;@11939c2e),Annotation([Ljava.lang.String;@71f29905,[Ljava.lang.String;@6e1c51b4,[Ledu.cmu.lti.nlp.amr.Dependency;@53838e6),Annotation([Ljava.lang.String;@2e1f86b7,[Ljava.lang.String;@17c57009,[Ljava.lang.String;@233e6b10),Annotation([Ljava.lang.String;@56e6f983,[Ljava.lang.String;@56073407,[Ledu.cmu.lti.nlp.amr.Entity;@72e8e3b0))
AMR:
(c / convention, mod, t2 / trade-01)
(c2 / conference, mod, c / convention)
(d / debate-01, ARG0, l / lively)
(d / debate-01, direction, p / particular)
(d / debate-01, mod, s / some)
(e / endanger-01, ARG1, s2 / species)
(o / open-01, ARG0, t2 / trade-01)
(o / open-01, ARG1, t / today)
(p2 / promise-01, ARG0, c2 / conference)
(p2 / promise-01, ARG1, d / debate-01)
(p2 / promise-01, ARG2, a / and)
(t2 / trade-01, ARG1, s2 / species)
(t2 / trade-01, mod, i / international)

Decoded in 298,925 microseconds
Sentence: but any action will have to wait at least until the environment white paper which mr patten has promised for next autumn

Spans:
Span 2-3:  action => action
Span 1-2:  any => any
Span 0-1:  but => contrast-01
Span 11-12:  environment => environment
Span 20-21:  next => next
Span 13-14:  paper => paper
Span 18-19:  promised => promise-01
Span 9-10:  until => until
Span 6-7:  wait => wait-01
Span 12-13:  white => white

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),next,next,false), Span(18,19,List(1),promised,promise-01,false), Span(13,14,List(2),paper,paper,false), Span(12,13,List(3),white,white,false), Span(11,12,List(4),environment,environment,false), Span(9,10,List(5),until,until,false), Span(6,7,List(6),wait,wait-01,false), Span(2,3,List(7),action,action,false), Span(1,2,List(8),any,any,false), Span(0,1,List(9),but,contrast-01,false)),Map(2 -> paper, 5 -> until, 8 -> any, 7 -> action, 1 -> promise-01, 4 -> environment, 6 -> wait-01, 9 -> contrast-01, 0 -> next, 3 -> white),Map(e -> environment, w -> white, n -> next, p2 -> paper, p -> promise-01, a -> action, a2 -> any, w2 -> wait-01, c -> contrast-01, u -> until))),[Ljava.lang.String;@17bc72c0,Annotation([Ljava.lang.String;@5511a76c,[Ljava.lang.String;@7a06cf15,[Ljava.lang.String;@5505aa49),Annotation([Ljava.lang.String;@66eeca3a,[Ljava.lang.String;@471edaa1,[Ledu.cmu.lti.nlp.amr.Dependency;@3aa3a481),Annotation([Ljava.lang.String;@4d852f3a,[Ljava.lang.String;@62dfb098,[Ljava.lang.String;@4bc2fdde),Annotation([Ljava.lang.String;@6ea920ad,[Ljava.lang.String;@21a0769d,[Ledu.cmu.lti.nlp.amr.Entity;@2dcb4eaa))
AMR:
(a / action, mod, a2 / any)
(c / contrast-01, ARG0, e / environment)
(c / contrast-01, ARG2, w2 / wait-01)
(p / promise-01, ARG1, p2 / paper)
(p2 / paper, mod, w / white)
(w2 / wait-01, ARG0, n / next)
(w2 / wait-01, ARG1, a / action)
(w2 / wait-01, medium, p2 / paper)
(w2 / wait-01, time, u / until)

Decoded in 59,505 microseconds
Sentence: he also promised a stormy meeting that when he came to sell his majority shareholding he would first negotiate with his fellow directors including amer midani before going to outsiders

Spans:
Span 1-2:  also => also
Span 26-27:  before => before
Span 22-23:  directors => director
Span 21-22:  fellow => fellow
Span 15-16:  he => he
Span 8-9:  he => he
Span 0-1:  he => he
Span 13-14:  majority => majority
Span 5-6:  meeting => meet-03
Span 18-19:  negotiate => negotiate-01
Span 29-30:  outsiders => outsider
Span 2-3:  promised => promise-01
Span 11-12:  sell => sell-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),outsiders,outsider,false), Span(26,27,List(1),before,before,false), Span(22,23,List(2),directors,director,false), Span(21,22,List(3),fellow,fellow,false), Span(18,19,List(4),negotiate,negotiate-01,false), Span(15,16,List(5),he,he,false), Span(13,14,List(6),majority,majority,false), Span(11,12,List(7),sell,sell-01,false), Span(8,9,List(8),he,he,false), Span(5,6,List(9),meeting,meet-03,false), Span(2,3,List(10),promised,promise-01,false), Span(1,2,List(11),also,also,false), Span(0,1,List(12),he,he,false)),Map(2 -> director, 5 -> he, 12 -> he, 8 -> he, 7 -> sell-01, 1 -> before, 4 -> negotiate-01, 11 -> also, 6 -> majority, 0 -> outsider, 9 -> meet-03, 3 -> fellow, 10 -> promise-01),Map(n -> negotiate-01, h -> he, h2 -> he, b -> before, m2 -> meet-03, s -> sell-01, d -> director, m -> majority, p -> promise-01, a -> also, h3 -> he, f -> fellow, o -> outsider))),[Ljava.lang.String;@850179b,Annotation([Ljava.lang.String;@423dc560,[Ljava.lang.String;@65694399,[Ljava.lang.String;@61d525d2),Annotation([Ljava.lang.String;@70a6302b,[Ljava.lang.String;@2ea490d4,[Ledu.cmu.lti.nlp.amr.Dependency;@36206638),Annotation([Ljava.lang.String;@917024b,[Ljava.lang.String;@45978e96,[Ljava.lang.String;@61123d8b),Annotation([Ljava.lang.String;@7486a276,[Ljava.lang.String;@33142cbe,[Ledu.cmu.lti.nlp.amr.Entity;@71858824))
AMR:
(d / director, mod, f / fellow)
(d / director, poss, h / he)
(h2 / he, part, m / majority)
(m2 / meet-03, ARG0, h2 / he)
(m2 / meet-03, time, b / before)
(n / negotiate-01, ARG0, h / he)
(n / negotiate-01, ARG1, h2 / he)
(p / promise-01, ARG0, h3 / he)
(p / promise-01, ARG1, m2 / meet-03)
(p / promise-01, mod, a / also)
(s / sell-01, ARG0, h2 / he)
(s / sell-01, ARG1, o / outsider)

Decoded in 356,163 microseconds
Sentence: the soviet yacht fazisi will be able to complete the next two legs of the whitbread roundtheworld race after a new zealand radio station promised to underwrite the yachts costs

NER Entity: (country :name (name :op "soviet"))
Spans:
Span 6-7:  able => possible
Span 18-19:  after => after
Span 8-9:  complete => complete
Span 29-30:  costs => cost-01
Span 12-13:  legs => leg
Span 20-21:  new => new
Span 10-11:  next => next
Span 24-25:  promised => promise-01
Span 17-18:  race => race
Span 22-23:  radio => radio
Span 23-24:  station => station
Span 11-12:  two => 2
Span 28-29:  yachts => yacht

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),costs,cost-01,false), Span(28,29,List(1),yachts,yacht,false), Span(24,25,List(2),promised,promise-01,false), Span(23,24,List(3),station,station,false), Span(22,23,List(4),radio,radio,false), Span(20,21,List(5),new,new,false), Span(18,19,List(6),after,after,false), Span(17,18,List(7),race,race,false), Span(12,13,List(8),legs,leg,false), Span(11,12,List(9),two,2,false), Span(10,11,List(10),next,next,false), Span(8,9,List(11),complete,complete,false), Span(6,7,List(12),able,possible,false)),Map(2 -> promise-01, 5 -> new, 12 -> possible, 8 -> leg, 7 -> race, 1 -> yacht, 4 -> radio, 11 -> complete, 6 -> after, 0 -> cost-01, 9 -> 2, 3 -> station, 10 -> next),Map(n -> new, 2 -> 2, p2 -> possible, s -> station, y -> yacht, p -> promise-01, r2 -> race, a -> after, r -> radio, c -> cost-01, l -> leg, n2 -> next, c2 -> complete))),[Ljava.lang.String;@75ad2db5,Annotation([Ljava.lang.String;@3c94026e,[Ljava.lang.String;@192ba2d4,[Ljava.lang.String;@7fcf1934),Annotation([Ljava.lang.String;@757fe679,[Ljava.lang.String;@1ff44e33,[Ledu.cmu.lti.nlp.amr.Dependency;@603a06a8),Annotation([Ljava.lang.String;@18b30f3,[Ljava.lang.String;@593aa24f,[Ljava.lang.String;@18761e4d),Annotation([Ljava.lang.String;@72bf5dc6,[Ljava.lang.String;@71a5ad04,[Ledu.cmu.lti.nlp.amr.Entity;@34021be6))
AMR:
(2 / 2, op, p / promise-01)
(a / after, op, p / promise-01)
(a / after, op, s / station)
(c / cost-01, mod, y / yacht)
(c2 / complete, time, a / after)
(l / leg, mod, n2 / next)
(l / leg, time, a / after)
(p / promise-01, ARG0, r2 / race)
(p / promise-01, ARG1, c / cost-01)
(p2 / possible, domain, c2 / complete)
(s / station, mod, n / new)
(s / station, mod, r / radio)

Decoded in 364,318 microseconds
Sentence:   after all ive done all ive promised you

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   after all ive done all ive promised you
myTokenized = after all ive done all ive promised you
i = 0
prefix = List(after)
regexr = \Qa\E ?\Qf\E ?\Qt\E ?\Qe\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: as soon as we can gather up your things darling her mother promised

Spans:
Span 4-5:  can => possible
Span 9-10:  darling => darling
Span 5-6:  gather => gather-01
Span 11-12:  mother => (have-rel-role-91 :ARG2 mother)
Span 12-13:  promised => promise-01
Span 1-2:  soon => soon
Span 8-9:  things => thing
Span 3-4:  we => we

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),promised,promise-01,false), Span(11,12,List(2, 1),mother,(have-rel-role-91 :ARG2 mother),false), Span(9,10,List(3),darling,darling,false), Span(8,9,List(4),things,thing,false), Span(5,6,List(5),gather,gather-01,false), Span(4,5,List(6),can,possible,false), Span(3,4,List(7),we,we,false), Span(1,2,List(8),soon,soon,false)),Map(2 -> mother, 5 -> gather-01, 8 -> soon, 7 -> we, 1 -> have-rel-role-91, 4 -> thing, 6 -> possible, 0 -> promise-01, 3 -> darling),Map(w -> we, h -> have-rel-role-91, t -> thing, p2 -> possible, s -> soon, d -> darling, m -> mother, g -> gather-01, p -> promise-01))),[Ljava.lang.String;@2969ae7c,Annotation([Ljava.lang.String;@593e6421,[Ljava.lang.String;@f1fe04d,[Ljava.lang.String;@75bee6fc),Annotation([Ljava.lang.String;@482ee6c8,[Ljava.lang.String;@7f31797d,[Ledu.cmu.lti.nlp.amr.Dependency;@91f3ec8),Annotation([Ljava.lang.String;@6252c125,[Ljava.lang.String;@27069691,[Ljava.lang.String;@21871d9b),Annotation([Ljava.lang.String;@2da8bc4f,[Ljava.lang.String;@20e2fdf4,[Ledu.cmu.lti.nlp.amr.Entity;@168eaf0a))
AMR:
(d / darling, poss, t / thing)
(g / gather-01, ARG0, w / we)
(g / gather-01, ARG1, d / darling)
(h / have-rel-role-91, ARG2, m / mother)
(p / promise-01, ARG1, h / have-rel-role-91)
(p / promise-01, condition, g / gather-01)
(p2 / possible, domain, g / gather-01)
(p2 / possible, mod, s / soon)

Decoded in 113,305 microseconds
Sentence: mr carlos menem who optimistically promised he would lead argentina out of its economic wilderness will get the chance to prove his worth when he is sworn in as president tomorrow

NER Entity: (country :name (name :op "argentina"))
NER Entity: (country :name (name :op "argentina"))
Spans:
Span 9-10:  argentina => (country :name (name :op "Argentina"))
Span 18-19:  chance => chance
Span 13-14:  economic => economy
Span 24-25:  he => he
Span 6-7:  he => he
Span 29-30:  president => (have-org-role-91 :ARG2 president)
Span 5-6:  promised => promise-01
Span 20-21:  prove => prove-01
Span 26-27:  sworn => swear-01
Span 30-31:  tomorrow => tomorrow
Span 22-23:  worth => worth

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),tomorrow,tomorrow,false), Span(29,30,List(2, 1),president,(have-org-role-91 :ARG2 president),false), Span(26,27,List(3),sworn,swear-01,false), Span(24,25,List(4),he,he,false), Span(22,23,List(5),worth,worth,false), Span(20,21,List(6),prove,prove-01,false), Span(18,19,List(7),chance,chance,false), Span(13,14,List(8),economic,economy,false), Span(9,10,List(11, 10, 9),argentina,(country :name (name :op "Argentina")),false), Span(6,7,List(12),he,he,false), Span(5,6,List(13),promised,promise-01,false)),Map(2 -> president, 5 -> worth, 12 -> he, 8 -> economy, 7 -> chance, 1 -> have-org-role-91, 4 -> he, 11 -> "Argentina", 6 -> prove-01, 0 -> tomorrow, 9 -> country, 3 -> swear-01, 10 -> name, 13 -> promise-01),Map(e -> economy, w -> worth, n -> name, h -> have-org-role-91, h2 -> he, t -> tomorrow, p2 -> prove-01, s -> swear-01, p -> president, c -> chance, h3 -> he, p3 -> promise-01, c2 -> country))),[Ljava.lang.String;@7185c517,Annotation([Ljava.lang.String;@54ea33b,[Ljava.lang.String;@6dbe7935,[Ljava.lang.String;@7407bedc),Annotation([Ljava.lang.String;@28839907,[Ljava.lang.String;@57b3af58,[Ledu.cmu.lti.nlp.amr.Dependency;@55bce763),Annotation([Ljava.lang.String;@64fb408e,[Ljava.lang.String;@2b4b5e6d,[Ljava.lang.String;@61245c4f),Annotation([Ljava.lang.String;@1a28785c,[Ljava.lang.String;@56f5ed6e,[Ledu.cmu.lti.nlp.amr.Entity;@2bb6fd5c))
AMR:
(c / chance, topic, p2 / prove-01)
(c2 / country, name, n / name)
(h / have-org-role-91, ARG0, h2 / he)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, p / president)
(n / name, op, "Argentina")
(p2 / prove-01, ARG1, w / worth)
(p2 / prove-01, location, e / economy)
(p2 / prove-01, time, s / swear-01)
(p3 / promise-01, ARG0, h3 / he)
(p3 / promise-01, ARG1, c2 / country)
(s / swear-01, ARG1, h2 / he)
(s / swear-01, time, t / tomorrow)

Decoded in 133,566 microseconds
Sentence: the winner of columbias presidential election has promised to continue the war against the countrys drugs cartels

Spans:
Span 16-17:  cartels => cartel
Span 9-10:  continue => continue-01
Span 15-16:  drugs => drug
Span 5-6:  election => elect-01
Span 4-5:  presidential => (have-org-role-91 :ARG2 president)
Span 7-8:  promised => promise-01
Span 11-12:  war => war

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),cartels,cartel,false), Span(15,16,List(1),drugs,drug,false), Span(11,12,List(2),war,war,false), Span(9,10,List(3),continue,continue-01,false), Span(7,8,List(4),promised,promise-01,false), Span(5,6,List(5),election,elect-01,false), Span(4,5,List(7, 6),presidential,(have-org-role-91 :ARG2 president),false)),Map(2 -> war, 5 -> elect-01, 7 -> president, 1 -> drug, 4 -> promise-01, 6 -> have-org-role-91, 0 -> cartel, 3 -> continue-01),Map(e -> elect-01, w -> war, h -> have-org-role-91, p2 -> president, d -> drug, p -> promise-01, c -> cartel, c2 -> continue-01))),[Ljava.lang.String;@7ab3b96f,Annotation([Ljava.lang.String;@2d536558,[Ljava.lang.String;@3e228ba7,[Ljava.lang.String;@4dfea0cf),Annotation([Ljava.lang.String;@7ef9e0a,[Ljava.lang.String;@470a698,[Ledu.cmu.lti.nlp.amr.Dependency;@7fc9476e),Annotation([Ljava.lang.String;@7770c84c,[Ljava.lang.String;@d6e32d7,[Ljava.lang.String;@3dcbc824),Annotation([Ljava.lang.String;@dc0d32e,[Ljava.lang.String;@6e68780f,[Ledu.cmu.lti.nlp.amr.Entity;@ca2596a))
AMR:
(c / cartel, mod, d / drug)
(c2 / continue-01, ARG1, w / war)
(h / have-org-role-91, ARG1, c / cartel)
(h / have-org-role-91, ARG2, p2 / president)
(p / promise-01, ARG0, e / elect-01)
(p / promise-01, ARG1, c2 / continue-01)
(w / war, location, c / cartel)

Decoded in 31,200 microseconds
Sentence: was rush barricading himself in  henry imagined the noise growing in volume the creaks thumps and rattles coalescing fusing until in the dawn rush would as he had promised start to grind

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = was rush barricading himself in  henry imagined the noise growing in volume the creaks thumps and rattles coalescing fusing until in the dawn rush would as he had promised start to grind
myTokenized = was rush barricading himself in henry imagined the noise growing in volume the creaks thumps and rattles coalescing fusing until in the dawn rush would as he had promised start to grind
i = 5
prefix = List(was, rush, barricading, himself, in, henry)
regexr = \Qw\E ?\Qa\E ?\Qs\E ?\Qr\E ?\Qu\E ?\Qs\E ?\Qh\E ?\Qb\E ?\Qa\E ?\Qr\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qh\E ?\Qi\E ?\Qm\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qf\E ?\Qi\E ?\Qn\E ?\Qh\E ?\Qe\E ?\Qn\E ?\Qr\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the taylor inquiry report on crowd safety for example promises a new direction for the game though there is little mention of the corroding nationalism which infects english support

NER Entity: (thing :name (name :op "english"))
NER Entity: (thing :name (name :op "english"))
Spans:
Span 5-6:  crowd => crowd
Span 12-13:  direction => direction
Span 27-28:  english => (language :name (name :op "English"))
Span 8-9:  example => example
Span 15-16:  game => game
Span 2-3:  inquiry => inquire-01
Span 19-20:  little => little
Span 20-21:  mention => mention-01
Span 24-25:  nationalism => nationalism
Span 11-12:  new => new
Span 9-10:  promises => promise-01
Span 3-4:  report => report
Span 6-7:  safety => safe-41
Span 28-29:  support => support-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),support,support-01,false), Span(27,28,List(3, 2, 1),english,(language :name (name :op "English")),false), Span(24,25,List(4),nationalism,nationalism,false), Span(20,21,List(5),mention,mention-01,false), Span(19,20,List(6),little,little,false), Span(15,16,List(7),game,game,false), Span(12,13,List(8),direction,direction,false), Span(11,12,List(9),new,new,false), Span(9,10,List(10),promises,promise-01,false), Span(8,9,List(11),example,example,false), Span(6,7,List(12),safety,safe-41,false), Span(5,6,List(13),crowd,crowd,false), Span(3,4,List(14),report,report,false), Span(2,3,List(15),inquiry,inquire-01,false)),Map(2 -> name, 5 -> mention-01, 12 -> safe-41, 15 -> inquire-01, 8 -> direction, 7 -> game, 1 -> language, 4 -> nationalism, 11 -> example, 14 -> report, 6 -> little, 0 -> support-01, 9 -> new, 3 -> "English", 10 -> promise-01, 13 -> crowd),Map(e -> example, n -> name, s2 -> safe-41, s -> support-01, m -> mention-01, d -> direction, g -> game, p -> promise-01, n3 -> new, l2 -> little, i -> inquire-01, r -> report, c -> crowd, l -> language, n2 -> nationalism))),[Ljava.lang.String;@709112ad,Annotation([Ljava.lang.String;@44615597,[Ljava.lang.String;@523a4f93,[Ljava.lang.String;@723e6611),Annotation([Ljava.lang.String;@5e9f20af,[Ljava.lang.String;@211af1b1,[Ledu.cmu.lti.nlp.amr.Dependency;@6ff1ac71),Annotation([Ljava.lang.String;@63706821,[Ljava.lang.String;@68c48187,[Ljava.lang.String;@3d13fbcd),Annotation([Ljava.lang.String;@6af86f0e,[Ljava.lang.String;@5c4336ff,[Ledu.cmu.lti.nlp.amr.Entity;@40cfceab))
AMR:
(d / direction, mod, n3 / new)
(l / language, name, n / name)
(m / mention-01, ARG1, n2 / nationalism)
(m / mention-01, mod, l2 / little)
(n / name, op, "English")
(p / promise-01, ARG0, r / report)
(p / promise-01, ARG1, d / direction)
(p / promise-01, time, g / game)
(r / report, topic, i / inquire-01)
(r / report, topic, s2 / safe-41)
(s / support-01, ARG0, n2 / nationalism)
(s / support-01, ARG1, s2 / safe-41)
(s / support-01, manner, l / language)
(s2 / safe-41, ARG0, e / example)
(s2 / safe-41, ARG1, c / crowd)

Decoded in 353,643 microseconds
Sentence: looking at this from another perspective one sees mikhail gorbachev himself begging believers to help him in the lagging perestroika process promising them in return a new law guaranteeing religious liberty

Spans:
Span 4-5:  another => another
Span 11-12:  begging => beg-01
Span 12-13:  believers => believe-01
Span 28-29:  guaranteeing => guarantee-01
Span 14-15:  help => help-01
Span 18-19:  lagging => lag-01
Span 27-28:  law => law
Span 30-31:  liberty => liberty
Span 26-27:  new => new
Span 5-6:  perspective => perspective
Span 20-21:  process => process
Span 21-22:  promising => promise-01
Span 7-8:  sees => see-01
Span 2-3:  this => this

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),liberty,liberty,false), Span(28,29,List(1),guaranteeing,guarantee-01,false), Span(27,28,List(2),law,law,false), Span(26,27,List(3),new,new,false), Span(21,22,List(4),promising,promise-01,false), Span(20,21,List(5),process,process,false), Span(18,19,List(6),lagging,lag-01,false), Span(14,15,List(7),help,help-01,false), Span(12,13,List(8),believers,believe-01,false), Span(11,12,List(9),begging,beg-01,false), Span(7,8,List(10),sees,see-01,false), Span(5,6,List(11),perspective,perspective,false), Span(4,5,List(12),another,another,false), Span(2,3,List(13),this,this,false)),Map(2 -> law, 5 -> process, 12 -> another, 8 -> believe-01, 7 -> help-01, 1 -> guarantee-01, 4 -> promise-01, 11 -> perspective, 6 -> lag-01, 0 -> liberty, 9 -> beg-01, 3 -> new, 10 -> see-01, 13 -> this),Map(n -> new, h -> help-01, t -> this, b -> believe-01, b2 -> beg-01, p2 -> process, l3 -> lag-01, s -> see-01, g -> guarantee-01, p -> promise-01, a -> another, l2 -> law, l -> liberty, p3 -> perspective))),[Ljava.lang.String;@b095dcb,Annotation([Ljava.lang.String;@13ecc016,[Ljava.lang.String;@1c36ee92,[Ljava.lang.String;@5a68c1b6),Annotation([Ljava.lang.String;@1385c219,[Ljava.lang.String;@328a0152,[Ledu.cmu.lti.nlp.amr.Dependency;@25cc86a),Annotation([Ljava.lang.String;@1969a85c,[Ljava.lang.String;@67ac3d0c,[Ljava.lang.String;@5cdc1400),Annotation([Ljava.lang.String;@74a53ba0,[Ljava.lang.String;@bedc134,[Ledu.cmu.lti.nlp.amr.Entity;@2627430a))
AMR:
(b / believe-01, ARG1, h / help-01)
(b2 / beg-01, ARG1, h / help-01)
(g / guarantee-01, ARG0, l2 / law)
(g / guarantee-01, ARG1, l / liberty)
(h / help-01, ARG0, t / this)
(h / help-01, ARG1, p / promise-01)
(l2 / law, mod, n / new)
(l3 / lag-01, ARG1, p2 / process)
(p / promise-01, ARG0, p3 / perspective)
(p / promise-01, ARG1, p2 / process)
(p3 / perspective, mod, a / another)
(s / see-01, ARG0, l2 / law)
(s / see-01, ARG1, b2 / beg-01)

Decoded in 300,002 microseconds
Sentence: most of the remainder goes on the salaries of civil servants and recurrent expenditure leaving very little for the ambitious development schemes she has promised the electorate

Spans:
Span 19-20:  ambitious => ambitious
Span 11-12:  and => and
Span 9-10:  civil => civil
Span 20-21:  development => develop-02
Span 26-27:  electorate => electorate
Span 13-14:  expenditure => expend-01
Span 14-15:  leaving => leave-01
Span 16-17:  little => little
Span 0-1:  most => most
Span 24-25:  promised => promise-01
Span 3-4:  remainder => remainder
Span 7-8:  salaries => salary
Span 21-22:  schemes => scheme-01
Span 10-11:  servants => (person :ARG0-of serve-02)
Span 22-23:  she => she
Span 15-16:  very => very

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),electorate,electorate,false), Span(24,25,List(1),promised,promise-01,false), Span(22,23,List(2),she,she,false), Span(21,22,List(3),schemes,scheme-01,false), Span(20,21,List(4),development,develop-02,false), Span(19,20,List(5),ambitious,ambitious,false), Span(16,17,List(6),little,little,false), Span(15,16,List(7),very,very,false), Span(14,15,List(8),leaving,leave-01,false), Span(13,14,List(9),expenditure,expend-01,false), Span(11,12,List(10),and,and,false), Span(10,11,List(12, 11),servants,(person :ARG0-of serve-02),false), Span(9,10,List(13),civil,civil,false), Span(7,8,List(14),salaries,salary,false), Span(3,4,List(15),remainder,remainder,false), Span(0,1,List(16),most,most,false)),Map(2 -> she, 5 -> ambitious, 12 -> serve-02, 15 -> remainder, 8 -> leave-01, 7 -> very, 1 -> promise-01, 4 -> develop-02, 11 -> person, 14 -> salary, 6 -> little, 0 -> electorate, 9 -> expend-01, 16 -> most, 3 -> scheme-01, 10 -> and, 13 -> civil),Map(e -> electorate, s2 -> scheme-01, e2 -> expend-01, p2 -> person, s -> she, s4 -> salary, v -> very, m -> most, d -> develop-02, p -> promise-01, a -> ambitious, l2 -> leave-01, r -> remainder, a2 -> and, c -> civil, s3 -> serve-02, l -> little))),[Ljava.lang.String;@7f872400,Annotation([Ljava.lang.String;@14cbd69,[Ljava.lang.String;@55273929,[Ljava.lang.String;@219de6c),Annotation([Ljava.lang.String;@70598587,[Ljava.lang.String;@54d9bb1,[Ledu.cmu.lti.nlp.amr.Dependency;@2a28842f),Annotation([Ljava.lang.String;@49fe3f48,[Ljava.lang.String;@52ecb5eb,[Ljava.lang.String;@329b81d5),Annotation([Ljava.lang.String;@7f68e0e7,[Ljava.lang.String;@3e859f0a,[Ledu.cmu.lti.nlp.amr.Entity;@368c6997))
AMR:
(a2 / and, op, e2 / expend-01)
(a2 / and, op, p2 / person)
(a2 / and, op, s4 / salary)
(d / develop-02, ARG1, a / ambitious)
(l / little, degree, v / very)
(l / little, time, d / develop-02)
(l2 / leave-01, ARG0, a2 / and)
(l2 / leave-01, ARG1, s2 / scheme-01)
(p / promise-01, ARG0, s / she)
(p / promise-01, ARG1, s2 / scheme-01)
(p / promise-01, ARG2, e / electorate)
(p2 / person, mod, c / civil)
(r / remainder, quant, m / most)
(s2 / scheme-01, ARG0, m / most)
(s2 / scheme-01, ARG1, d / develop-02)
(s3 / serve-02, ARG0, p2 / person)

Decoded in 715,723 microseconds
Sentence: but a vorkuta strike committee spokesman said yesterday that extra food promised by the government was not reaching the miners

Spans:
Span 0-1:  but => contrast-01
Span 4-5:  committee => committee
Span 9-10:  extra => extra
Span 10-11:  food => food
Span 19-20:  miners => (person :ARG0-of mine-01)
Span 11-12:  promised => promise-01
Span 17-18:  reaching => reach-01
Span 6-7:  said => say-01
Span 5-6:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 3-4:  strike => strike-01
Span 7-8:  yesterday => yesterday

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),miners,(person :ARG0-of mine-01),false), Span(17,18,List(2),reaching,reach-01,false), Span(11,12,List(3),promised,promise-01,false), Span(10,11,List(4),food,food,false), Span(9,10,List(5),extra,extra,false), Span(7,8,List(6),yesterday,yesterday,false), Span(6,7,List(7),said,say-01,false), Span(5,6,List(9, 8),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(4,5,List(10),committee,committee,false), Span(3,4,List(11),strike,strike-01,false), Span(0,1,List(12),but,contrast-01,false)),Map(2 -> reach-01, 5 -> extra, 12 -> contrast-01, 8 -> have-org-role-91, 7 -> say-01, 1 -> mine-01, 4 -> food, 11 -> strike-01, 6 -> yesterday, 0 -> person, 9 -> spokesman, 3 -> promise-01, 10 -> committee),Map(e -> extra, h -> have-org-role-91, s2 -> spokesman, p2 -> promise-01, s -> say-01, m -> mine-01, p -> person, y -> yesterday, r -> reach-01, c -> committee, s3 -> strike-01, f -> food, c2 -> contrast-01))),[Ljava.lang.String;@3c68547b,Annotation([Ljava.lang.String;@65827638,[Ljava.lang.String;@581f8a98,[Ljava.lang.String;@7ec42e5a),Annotation([Ljava.lang.String;@1bf57bb,[Ljava.lang.String;@3918b6e2,[Ledu.cmu.lti.nlp.amr.Dependency;@58eccb7),Annotation([Ljava.lang.String;@6222053a,[Ljava.lang.String;@2785552b,[Ljava.lang.String;@229a8e52),Annotation([Ljava.lang.String;@50f5bb3d,[Ljava.lang.String;@34d7cb51,[Ledu.cmu.lti.nlp.amr.Entity;@43654df1))
AMR:
(c / committee, mod, s3 / strike-01)
(c2 / contrast-01, ARG1, s / say-01)
(f / food, mod, e / extra)
(h / have-org-role-91, ARG1, c / committee)
(h / have-org-role-91, ARG2, s2 / spokesman)
(m / mine-01, ARG0, p / person)
(p2 / promise-01, ARG1, f / food)
(r / reach-01, ARG0, f / food)
(r / reach-01, ARG1, p / person)
(s / say-01, ARG0, c / committee)
(s / say-01, ARG1, r / reach-01)
(s / say-01, time, y / yesterday)

Decoded in 65,102 microseconds
Sentence: the government has promised to convene a national congress involving interest groups of all political persuasions early next year to draft a new constitution

Spans:
Span 13-14:  all => all
Span 8-9:  congress => (government-organization :name (name :op "Congress"))
Span 23-24:  constitution => constitution
Span 5-6:  convene => convene-01
Span 20-21:  draft => draft-01
Span 16-17:  early => early
Span 11-12:  groups => group
Span 10-11:  interest => interest-01
Span 9-10:  involving => involve-01
Span 7-8:  national => nation
Span 22-23:  new => new
Span 17-18:  next => next
Span 14-15:  political => politics
Span 3-4:  promised => promise-01
Span 18-19:  year => year

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),constitution,constitution,false), Span(22,23,List(1),new,new,false), Span(20,21,List(2),draft,draft-01,false), Span(18,19,List(3),year,year,false), Span(17,18,List(4),next,next,false), Span(16,17,List(5),early,early,false), Span(14,15,List(6),political,politics,false), Span(13,14,List(7),all,all,false), Span(11,12,List(8),groups,group,false), Span(10,11,List(9),interest,interest-01,false), Span(9,10,List(10),involving,involve-01,false), Span(8,9,List(13, 12, 11),congress,(government-organization :name (name :op "Congress")),false), Span(7,8,List(14),national,nation,false), Span(5,6,List(15),convene,convene-01,false), Span(3,4,List(16),promised,promise-01,false)),Map(2 -> draft-01, 5 -> early, 12 -> name, 15 -> convene-01, 8 -> group, 7 -> all, 1 -> new, 4 -> next, 11 -> government-organization, 14 -> nation, 6 -> politics, 0 -> constitution, 9 -> interest-01, 16 -> promise-01, 3 -> year, 10 -> involve-01, 13 -> "Congress"),Map(e -> early, n -> new, p2 -> promise-01, n4 -> nation, d -> draft-01, g2 -> government-organization, y -> year, p -> politics, g -> group, a -> all, n3 -> name, i2 -> involve-01, i -> interest-01, c -> constitution, c2 -> convene-01, n2 -> next))),[Ljava.lang.String;@2fe02bc8,Annotation([Ljava.lang.String;@265a7006,[Ljava.lang.String;@7b70ad95,[Ljava.lang.String;@22945083),Annotation([Ljava.lang.String;@3731da31,[Ljava.lang.String;@29ebe346,[Ledu.cmu.lti.nlp.amr.Dependency;@3d961e2a),Annotation([Ljava.lang.String;@4a9676fc,[Ljava.lang.String;@5c5dc0a5,[Ljava.lang.String;@f12c003),Annotation([Ljava.lang.String;@17fc0cb0,[Ljava.lang.String;@24a5031d,[Ledu.cmu.lti.nlp.amr.Entity;@4d6f77b6))
AMR:
(c / constitution, mod, n / new)
(c2 / convene-01, ARG0, p / politics)
(c2 / convene-01, ARG1, g2 / government-organization)
(d / draft-01, ARG1, c / constitution)
(e / early, op, y / year)
(g / group, mod, i / interest-01)
(g2 / government-organization, mod, n4 / nation)
(g2 / government-organization, name, n3 / name)
(i2 / involve-01, ARG0, g2 / government-organization)
(i2 / involve-01, ARG1, g / group)
(i2 / involve-01, ARG2, d / draft-01)
(i2 / involve-01, time, y / year)
(n3 / name, op, "Congress")
(p2 / promise-01, ARG0, a / all)
(p2 / promise-01, ARG1, c2 / convene-01)
(y / year, mod, n2 / next)

Decoded in 511,590 microseconds
Sentence: the sites owners hanson plc promised to preserve the site to spare it from the two perennial dangers of the era dash

Spans:
Span 17-18:  dangers => danger
Span 20-21:  era => era
Span 12-13:  it => it
Span 2-3:  owners => (person :ARG0-of own-01)
Span 7-8:  preserve => preserve-01
Span 5-6:  promised => promise-01
Span 9-10:  site => site
Span 1-2:  sites => site
Span 11-12:  spare => spare-02
Span 15-16:  two => 2

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),era,era,false), Span(17,18,List(1),dangers,danger,false), Span(15,16,List(2),two,2,false), Span(12,13,List(3),it,it,false), Span(11,12,List(4),spare,spare-02,false), Span(9,10,List(5),site,site,false), Span(7,8,List(6),preserve,preserve-01,false), Span(5,6,List(7),promised,promise-01,false), Span(2,3,List(9, 8),owners,(person :ARG0-of own-01),false), Span(1,2,List(10),sites,site,false)),Map(2 -> 2, 5 -> site, 8 -> person, 7 -> promise-01, 1 -> danger, 4 -> spare-02, 6 -> preserve-01, 9 -> own-01, 0 -> era, 10 -> site, 3 -> it),Map(e -> era, 2 -> 2, s2 -> site, p2 -> promise-01, s -> spare-02, d -> danger, p -> preserve-01, i -> it, s3 -> site, o -> own-01, p3 -> person))),[Ljava.lang.String;@511c7571,Annotation([Ljava.lang.String;@23627751,[Ljava.lang.String;@158778fd,[Ljava.lang.String;@71183515),Annotation([Ljava.lang.String;@6c452fb4,[Ljava.lang.String;@323f09f4,[Ledu.cmu.lti.nlp.amr.Dependency;@48a68bf1),Annotation([Ljava.lang.String;@2e2da07a,[Ljava.lang.String;@3582c145,[Ljava.lang.String;@1b5eb475),Annotation([Ljava.lang.String;@66997b5c,[Ljava.lang.String;@667209a3,[Ledu.cmu.lti.nlp.amr.Entity;@48d6e0e0))
AMR:
(d / danger, quant, 2 / 2)
(o / own-01, ARG0, p3 / person)
(p / preserve-01, ARG1, s2 / site)
(p / preserve-01, purpose, s / spare-02)
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, ARG1, e / era)
(p2 / promise-01, ARG2, p / preserve-01)
(p3 / person, mod, s3 / site)
(s / spare-02, ARG1, i / it)
(s / spare-02, ARG2, d / danger)

Decoded in 155,011 microseconds
Sentence:  mr gorbachev promised that 10billion roubles 10000million would be found to import consumer goods despite the scarcity of foreign exchange

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  mr gorbachev promised that 10billion roubles 10000million would be found to import consumer goods despite the scarcity of foreign exchange
myTokenized = mr gorbachev promised that 10billion roubles 10000million would be found to import consumer goods despite the scarcity of foreign exchange
i = 0
prefix = List(mr)
regexr = \Qm\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: this thursday you must promise yourself to start keeping notes on important issues and to keep your finger on the pulse of your income and expenditure

Spans:
Span 24-25:  and => and
Span 13-14:  and => and
Span 25-26:  expenditure => expend-01
Span 17-18:  finger => finger
Span 11-12:  important => important
Span 23-24:  income => income
Span 12-13:  issues => issue
Span 9-10:  notes => note
Span 4-5:  promise => promise-01
Span 20-21:  pulse => pulse
Span 7-8:  start => start-01
Span 0-1:  this => this
Span 2-3:  you => you

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),expenditure,expend-01,false), Span(24,25,List(1),and,and,false), Span(23,24,List(2),income,income,false), Span(20,21,List(3),pulse,pulse,false), Span(17,18,List(4),finger,finger,false), Span(13,14,List(5),and,and,false), Span(12,13,List(6),issues,issue,false), Span(11,12,List(7),important,important,false), Span(9,10,List(8),notes,note,false), Span(7,8,List(9),start,start-01,false), Span(4,5,List(10),promise,promise-01,false), Span(2,3,List(11),you,you,false), Span(0,1,List(12),this,this,false)),Map(2 -> income, 5 -> and, 12 -> this, 8 -> note, 7 -> important, 1 -> and, 4 -> finger, 11 -> you, 6 -> issue, 0 -> expend-01, 9 -> start-01, 3 -> pulse, 10 -> promise-01),Map(e -> expend-01, n -> note, t -> this, p2 -> promise-01, s -> start-01, i3 -> important, p -> pulse, y -> you, a -> and, i2 -> issue, i -> income, a2 -> and, f -> finger))),[Ljava.lang.String;@1464cc1a,Annotation([Ljava.lang.String;@6593c96b,[Ljava.lang.String;@498cc3e6,[Ljava.lang.String;@389156c3),Annotation([Ljava.lang.String;@4dd73938,[Ljava.lang.String;@6cedb374,[Ledu.cmu.lti.nlp.amr.Dependency;@69a0bc8a),Annotation([Ljava.lang.String;@37ba3e33,[Ljava.lang.String;@2449a2da,[Ljava.lang.String;@5e62a8d2),Annotation([Ljava.lang.String;@1f39a367,[Ljava.lang.String;@116cf35,[Ledu.cmu.lti.nlp.amr.Entity;@7da122))
AMR:
(a / and, op, e / expend-01)
(a / and, op, p / pulse)
(a / and, op, s / start-01)
(a2 / and, op, s / start-01)
(e / expend-01, ARG1, t / this)
(f / finger, location, p / pulse)
(i / income, part, p / pulse)
(i2 / issue, mod, i3 / important)
(n / note, source, i2 / issue)
(p2 / promise-01, ARG0, y / you)
(p2 / promise-01, ARG1, s / start-01)
(s / start-01, ARG1, n / note)

Decoded in 177,445 microseconds
Sentence: he appointed a transitional administration and promised elections in august

Spans:
Span 4-5:  administration => administrate-01
Span 5-6:  and => and
Span 1-2:  appointed => appoint-01
Span 9-10:  august => (date-entity :month 8)
Span 7-8:  elections => elect-01
Span 0-1:  he => he
Span 6-7:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(1, 0),august,(date-entity :month 8),false), Span(7,8,List(2),elections,elect-01,false), Span(6,7,List(3),promised,promise-01,false), Span(5,6,List(4),and,and,false), Span(4,5,List(5),administration,administrate-01,false), Span(1,2,List(6),appointed,appoint-01,false), Span(0,1,List(7),he,he,false)),Map(2 -> elect-01, 5 -> administrate-01, 7 -> he, 1 -> 8, 4 -> and, 6 -> appoint-01, 0 -> date-entity, 3 -> promise-01),Map(e -> elect-01, h -> he, 8 -> 8, a3 -> appoint-01, d -> date-entity, p -> promise-01, a -> and, a2 -> administrate-01))),[Ljava.lang.String;@37ddbf6e,Annotation([Ljava.lang.String;@3f42eb69,[Ljava.lang.String;@426d5af1,[Ljava.lang.String;@196da649),Annotation([Ljava.lang.String;@6dc00fa9,[Ljava.lang.String;@5c445889,[Ledu.cmu.lti.nlp.amr.Dependency;@b10b9b2),Annotation([Ljava.lang.String;@770f5aca,[Ljava.lang.String;@1111c0d7,[Ljava.lang.String;@248b6c02),Annotation([Ljava.lang.String;@3d600a0c,[Ljava.lang.String;@6c33b94e,[Ledu.cmu.lti.nlp.amr.Entity;@37cae761))
AMR:
(a / and, op, a3 / appoint-01)
(a / and, op, p / promise-01)
(a3 / appoint-01, ARG0, h / he)
(d / date-entity, month, 8 / 8)
(p / promise-01, ARG1, a2 / administrate-01)
(p / promise-01, ARG2, e / elect-01)
(p / promise-01, time, d / date-entity)

Decoded in 23,205 microseconds
Sentence: an unemployed father of four claims he is owed more than 450 by southern electric which he says has been promising the money since february but still not paid out

Spans:
Span 11-12:  450 => 450
Span 25-26:  but => contrast-01
Span 5-6:  claims => claim-01
Span 14-15:  electric => electric
Span 2-3:  father => (have-rel-role-91 :ARG2 father)
Span 24-25:  february => (date-entity :month 2)
Span 4-5:  four => 4
Span 16-17:  he => he
Span 6-7:  he => he
Span 22-23:  money => money
Span 8-9:  owed => owe-01
Span 28-29:  paid => pay-01
Span 20-21:  promising => promise-01
Span 17-18:  says => say-01
Span 23-24:  since => since
Span 13-14:  southern => south
Span 26-27:  still => still
Span 1-2:  unemployed => (person :ARG1-of employ-01)

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),paid,pay-01,false), Span(26,27,List(1),still,still,false), Span(25,26,List(2),but,contrast-01,false), Span(24,25,List(4, 3),february,(date-entity :month 2),false), Span(23,24,List(5),since,since,false), Span(22,23,List(6),money,money,false), Span(20,21,List(7),promising,promise-01,false), Span(17,18,List(8),says,say-01,false), Span(16,17,List(9),he,he,false), Span(14,15,List(10),electric,electric,false), Span(13,14,List(11),southern,south,false), Span(11,12,List(12),450,450,false), Span(8,9,List(13),owed,owe-01,false), Span(6,7,List(14),he,he,false), Span(5,6,List(15),claims,claim-01,false), Span(4,5,List(16),four,4,false), Span(2,3,List(18, 17),father,(have-rel-role-91 :ARG2 father),false), Span(1,2,List(20, 19),unemployed,(person :ARG1-of employ-01),false)),Map(2 -> contrast-01, 5 -> since, 12 -> 450, 15 -> claim-01, 8 -> say-01, 18 -> father, 7 -> promise-01, 17 -> have-rel-role-91, 1 -> still, 4 -> 2, 11 -> south, 14 -> he, 20 -> employ-01, 6 -> money, 0 -> pay-01, 9 -> he, 16 -> 4, 19 -> person, 3 -> date-entity, 10 -> electric, 13 -> owe-01),Map(e -> electric, h -> he, 2 -> 2, h2 -> he, s2 -> since, 42 -> 4, e2 -> employ-01, p2 -> promise-01, s -> still, s4 -> south, d -> date-entity, m -> money, p -> pay-01, 4 -> 450, h3 -> have-rel-role-91, c -> contrast-01, s3 -> say-01, f -> father, o -> owe-01, p3 -> person, c2 -> claim-01))),[Ljava.lang.String;@ef28a30,Annotation([Ljava.lang.String;@554e5cfa,[Ljava.lang.String;@bba4cd7,[Ljava.lang.String;@740abd44),Annotation([Ljava.lang.String;@6d0ff6e0,[Ljava.lang.String;@33192410,[Ledu.cmu.lti.nlp.amr.Dependency;@378eb0a5),Annotation([Ljava.lang.String;@78ef3d21,[Ljava.lang.String;@22967f8e,[Ljava.lang.String;@4690555f),Annotation([Ljava.lang.String;@2dd4f42a,[Ljava.lang.String;@77ea08e7,[Ledu.cmu.lti.nlp.amr.Entity;@25eeb332))
AMR:
(c / contrast-01, ARG1, p2 / promise-01)
(c / contrast-01, ARG2, p / pay-01)
(c2 / claim-01, quant, 42 / 4)
(d / date-entity, month, 2 / 2)
(e / electric, mod, s4 / south)
(e2 / employ-01, ARG1, p3 / person)
(h3 / have-rel-role-91, ARG0, p3 / person)
(h3 / have-rel-role-91, ARG1, c2 / claim-01)
(h3 / have-rel-role-91, ARG2, f / father)
(o / owe-01, ARG0, h2 / he)
(o / owe-01, ARG1, c2 / claim-01)
(o / owe-01, ARG2, e / electric)
(p / pay-01, ARG1, 4 / 450)
(p / pay-01, time, s / still)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, m / money)
(p2 / promise-01, time, s2 / since)
(s2 / since, op, d / date-entity)
(s3 / say-01, ARG0, h / he)
(s3 / say-01, ARG1, e / electric)

Decoded in 794,747 microseconds
Sentence: although guarantees against losses in share transactions are prohibited under japanese law daiwa officials said no laws were broken because brokers did not promise to underwrite losses as a means of obtaining business

NER Entity: (thing :name (name :op "japanese"))
Spans:
Span 19-20:  because => cause-01
Span 18-19:  broken => break-01
Span 20-21:  brokers => broker
Span 32-33:  business => business
Span 1-2:  guarantees => guarantee-01
Span 11-12:  law => law
Span 16-17:  laws => law
Span 29-30:  means => mean-01
Span 15-16:  no => -
Span 31-32:  obtaining => obtain-01
Span 13-14:  officials => (have-org-role-91 :ARG2 official)
Span 8-9:  prohibited => prohibit-01
Span 23-24:  promise => promise-01
Span 14-15:  said => say-01
Span 5-6:  share => share-01
Span 6-7:  transactions => transact-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),business,business,false), Span(31,32,List(1),obtaining,obtain-01,false), Span(29,30,List(2),means,mean-01,false), Span(23,24,List(3),promise,promise-01,false), Span(20,21,List(4),brokers,broker,false), Span(19,20,List(5),because,cause-01,false), Span(18,19,List(6),broken,break-01,false), Span(16,17,List(7),laws,law,false), Span(15,16,List(8),no,-,false), Span(14,15,List(9),said,say-01,false), Span(13,14,List(11, 10),officials,(have-org-role-91 :ARG2 official),false), Span(11,12,List(12),law,law,false), Span(8,9,List(13),prohibited,prohibit-01,false), Span(6,7,List(14),transactions,transact-01,false), Span(5,6,List(15),share,share-01,false), Span(1,2,List(16),guarantees,guarantee-01,false)),Map(2 -> mean-01, 5 -> cause-01, 12 -> law, 15 -> share-01, 8 -> -, 7 -> law, 1 -> obtain-01, 4 -> broker, 11 -> official, 14 -> transact-01, 6 -> break-01, 0 -> business, 9 -> say-01, 16 -> guarantee-01, 3 -> promise-01, 10 -> have-org-role-91, 13 -> prohibit-01),Map(b3 -> break-01, h -> have-org-role-91, s2 -> share-01, t -> transact-01, b -> business, b2 -> broker, p2 -> prohibit-01, s -> say-01, m -> mean-01, g -> guarantee-01, p -> promise-01, o2 -> official, l2 -> law, - -> -, c -> cause-01, l -> law, o -> obtain-01))),[Ljava.lang.String;@3b195903,Annotation([Ljava.lang.String;@7d22f244,[Ljava.lang.String;@14f8e8b,[Ljava.lang.String;@e174859),Annotation([Ljava.lang.String;@1a8ed249,[Ljava.lang.String;@168fc43e,[Ledu.cmu.lti.nlp.amr.Dependency;@389cce04),Annotation([Ljava.lang.String;@3e9985a5,[Ljava.lang.String;@511533be,[Ljava.lang.String;@46f82888),Annotation([Ljava.lang.String;@4e2d1d1e,[Ljava.lang.String;@73d2c4aa,[Ledu.cmu.lti.nlp.amr.Entity;@126db04e))
AMR:
(b3 / break-01, ARG0, l2 / law)
(b3 / break-01, ARG1, l / law)
(b3 / break-01, polarity, - / -)
(c / cause-01, ARG0, p / promise-01)
(c / cause-01, ARG1, b3 / break-01)
(g / guarantee-01, ARG2, t / transact-01)
(h / have-org-role-91, ARG2, o2 / official)
(o / obtain-01, ARG0, m / mean-01)
(o / obtain-01, ARG1, b / business)
(p / promise-01, ARG0, b2 / broker)
(p / promise-01, ARG1, m / mean-01)
(p2 / prohibit-01, ARG0, h / have-org-role-91)
(p2 / prohibit-01, ARG1, g / guarantee-01)
(p2 / prohibit-01, ARG2, l2 / law)
(s / say-01, ARG1, b3 / break-01)
(t / transact-01, ARG1, s2 / share-01)

Decoded in 411,564 microseconds
Sentence:   like the other good things promised in paris this weekend it may sound better in the telling

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   like the other good things promised in paris this weekend it may sound better in the telling
myTokenized = like the other good things promised in paris this weekend it may sound better in the telling
i = 0
prefix = List(like)
regexr = \Ql\E ?\Qi\E ?\Qk\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the government has promised an extra 30m next year to implement the provisions particularly to fund the training of environmental health and trading standards officers

Spans:
Span 21-22:  and => and
Span 19-20:  environmental => environment
Span 5-6:  extra => extra
Span 15-16:  fund => fund-01
Span 20-21:  health => health
Span 10-11:  implement => implement-01
Span 7-8:  next => next
Span 24-25:  officers => (have-org-role-91 :ARG2 officer)
Span 13-14:  particularly => particular
Span 3-4:  promised => promise-01
Span 12-13:  provisions => provision
Span 23-24:  standards => standard
Span 22-23:  trading => trade-01
Span 17-18:  training => train-01
Span 8-9:  year => year

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),officers,(have-org-role-91 :ARG2 officer),false), Span(23,24,List(2),standards,standard,false), Span(22,23,List(3),trading,trade-01,false), Span(21,22,List(4),and,and,false), Span(20,21,List(5),health,health,false), Span(19,20,List(6),environmental,environment,false), Span(17,18,List(7),training,train-01,false), Span(15,16,List(8),fund,fund-01,false), Span(13,14,List(9),particularly,particular,false), Span(12,13,List(10),provisions,provision,false), Span(10,11,List(11),implement,implement-01,false), Span(8,9,List(12),year,year,false), Span(7,8,List(13),next,next,false), Span(5,6,List(14),extra,extra,false), Span(3,4,List(15),promised,promise-01,false)),Map(2 -> standard, 5 -> health, 12 -> year, 15 -> promise-01, 8 -> fund-01, 7 -> train-01, 1 -> officer, 4 -> and, 11 -> implement-01, 14 -> extra, 6 -> environment, 0 -> have-org-role-91, 9 -> particular, 3 -> trade-01, 10 -> provision, 13 -> next),Map(e -> environment, n -> next, h -> have-org-role-91, h2 -> health, t -> trade-01, e2 -> extra, p2 -> provision, s -> standard, p -> particular, y -> year, a -> and, t2 -> train-01, i -> implement-01, f -> fund-01, o -> officer, p3 -> promise-01))),[Ljava.lang.String;@76d53356,Annotation([Ljava.lang.String;@271d900d,[Ljava.lang.String;@5dc598b,[Ljava.lang.String;@457ab7ae),Annotation([Ljava.lang.String;@7bb12424,[Ljava.lang.String;@2abbf6ed,[Ledu.cmu.lti.nlp.amr.Dependency;@1a505786),Annotation([Ljava.lang.String;@10a22be9,[Ljava.lang.String;@6f0d687,[Ljava.lang.String;@2d943ca0),Annotation([Ljava.lang.String;@5f1843c0,[Ljava.lang.String;@32082306,[Ledu.cmu.lti.nlp.amr.Entity;@34337893))
AMR:
(a / and, op, h2 / health)
(f / fund-01, ARG1, t2 / train-01)
(h / have-org-role-91, ARG1, s / standard)
(h / have-org-role-91, ARG2, o / officer)
(h2 / health, mod, e / environment)
(i / implement-01, ARG1, p2 / provision)
(i / implement-01, purpose, f / fund-01)
(p3 / promise-01, ARG1, p / particular)
(p3 / promise-01, ARG2, i / implement-01)
(p3 / promise-01, time, y / year)
(s / standard, mod, t / trade-01)
(s / standard, topic, a / and)
(t2 / train-01, ARG1, a / and)
(y / year, mod, e2 / extra)
(y / year, mod, n / next)

Decoded in 510,741 microseconds
Sentence: when she left she promised to come home every weekend

Spans:
Span 8-9:  every => every
Span 7-8:  home => home
Span 4-5:  promised => promise-01
Span 3-4:  she => she
Span 1-2:  she => she
Span 9-10:  weekend => weekend

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),weekend,weekend,false), Span(8,9,List(1),every,every,false), Span(7,8,List(2),home,home,false), Span(4,5,List(3),promised,promise-01,false), Span(3,4,List(4),she,she,false), Span(1,2,List(5),she,she,false)),Map(2 -> home, 5 -> she, 1 -> every, 4 -> she, 0 -> weekend, 3 -> promise-01),Map(e -> every, w -> weekend, h -> home, s2 -> she, s -> she, p -> promise-01))),[Ljava.lang.String;@1f3115ab,Annotation([Ljava.lang.String;@4f859d8c,[Ljava.lang.String;@4d2a7b1d,[Ljava.lang.String;@1ff8d47f),Annotation([Ljava.lang.String;@946ee3f,[Ljava.lang.String;@fc36edb,[Ledu.cmu.lti.nlp.amr.Dependency;@67a2f3f2),Annotation([Ljava.lang.String;@7b3dca05,[Ljava.lang.String;@159a4d79,[Ljava.lang.String;@45544e03),Annotation([Ljava.lang.String;@21cdca84,[Ljava.lang.String;@4daab172,[Ledu.cmu.lti.nlp.amr.Entity;@167db34))
AMR:
(p / promise-01, ARG0, s2 / she)
(p / promise-01, ARG1, h / home)
(p / promise-01, ARG2, s / she)
(p / promise-01, time, w / weekend)
(w / weekend, frequency, e / every)

Decoded in 129,255 microseconds
Sentence: in no way was this the prime minister everyone loves to hate said one soothed peer although she promised to fight the social charter tooth and nail, apparently mrs thatcher promised less legislation in the coming session including bills on food safety the environment embryology and the nhs shakeup but threatened no further privatisation

Spans:
Span 46-47:  and => and
Span 25-26:  and => and
Span 28-29:  apparently => apparent
Span 39-40:  bills => bill-01
Span 50-51:  but => contrast-01
Span 23-24:  charter => charter-01
Span 44-45:  environment => environment
Span 8-9:  everyone => everyone
Span 20-21:  fight => fight-01
Span 41-42:  food => food
Span 53-54:  further => further
Span 11-12:  hate => hate-01
Span 33-34:  legislation => legislation
Span 32-33:  less => less
Span 9-10:  loves => love-01
Span 7-8:  minister => (have-org-role-91 :ARG2 minister)
Span 26-27:  nail => nail
Span 52-53:  no => -
Span 1-2:  no => -
Span 15-16:  peer => peer
Span 6-7:  prime => prime
Span 31-32:  promised => promise-01
Span 18-19:  promised => promise-01
Span 42-43:  safety => safe-41
Span 12-13:  said => say-01
Span 37-38:  session => session
Span 17-18:  she => she
Span 22-23:  social => society
Span 4-5:  this => this
Span 51-52:  threatened => threaten-01
Span 24-25:  tooth => tooth
Span 2-3:  way => way

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),further,further,false), Span(52,53,List(1),no,-,false), Span(51,52,List(2),threatened,threaten-01,false), Span(50,51,List(3),but,contrast-01,false), Span(46,47,List(4),and,and,false), Span(44,45,List(5),environment,environment,false), Span(42,43,List(6),safety,safe-41,false), Span(41,42,List(7),food,food,false), Span(39,40,List(8),bills,bill-01,false), Span(37,38,List(9),session,session,false), Span(33,34,List(10),legislation,legislation,false), Span(32,33,List(11),less,less,false), Span(31,32,List(12),promised,promise-01,false), Span(28,29,List(13),apparently,apparent,false), Span(26,27,List(14),nail,nail,false), Span(25,26,List(15),and,and,false), Span(24,25,List(16),tooth,tooth,false), Span(23,24,List(17),charter,charter-01,false), Span(22,23,List(18),social,society,false), Span(20,21,List(19),fight,fight-01,false), Span(18,19,List(20),promised,promise-01,false), Span(17,18,List(21),she,she,false), Span(15,16,List(22),peer,peer,false), Span(12,13,List(23),said,say-01,false), Span(11,12,List(24),hate,hate-01,false), Span(9,10,List(25),loves,love-01,false), Span(8,9,List(26),everyone,everyone,false), Span(7,8,List(28, 27),minister,(have-org-role-91 :ARG2 minister),false), Span(6,7,List(29),prime,prime,false), Span(4,5,List(30),this,this,false), Span(2,3,List(31),way,way,false), Span(1,2,List(32),no,-,false)),Map(30 -> this, 2 -> threaten-01, 5 -> environment, 27 -> have-org-role-91, 12 -> promise-01, 8 -> bill-01, 15 -> and, 21 -> she, 18 -> society, 24 -> hate-01, 7 -> food, 1 -> -, 17 -> charter-01, 23 -> say-01, 26 -> everyone, 4 -> and, 11 -> less, 32 -> -, 14 -> nail, 29 -> prime, 20 -> promise-01, 28 -> minister, 6 -> safe-41, 9 -> session, 0 -> further, 22 -> peer, 16 -> tooth, 19 -> fight-01, 10 -> legislation, 3 -> contrast-01, 31 -> way, 25 -> love-01, 13 -> apparent),Map(e -> environment, s5 -> say-01, w -> way, n -> nail, h -> hate-01, h2 -> have-org-role-91, s2 -> session, t -> threaten-01, b -> bill-01, e2 -> everyone, p2 -> promise-01, a3 -> and, l3 -> love-01, s -> safe-41, s4 -> she, m -> minister, t3 -> this, p -> promise-01, a -> and, p4 -> prime, f3 -> fight-01, t2 -> tooth, l2 -> less, a2 -> apparent, - -> -, c -> contrast-01, -2 -> -, s3 -> society, f2 -> food, l -> legislation, f -> further, p3 -> peer, c2 -> charter-01))),[Ljava.lang.String;@3a2334a1,Annotation([Ljava.lang.String;@5d5453d8,[Ljava.lang.String;@4b4cb9c6,[Ljava.lang.String;@1a389cc9),Annotation([Ljava.lang.String;@7abd5d91,[Ljava.lang.String;@264a198b,[Ledu.cmu.lti.nlp.amr.Dependency;@4ad30850),Annotation([Ljava.lang.String;@64c6e290,[Ljava.lang.String;@3d448fa0,[Ljava.lang.String;@603170cc),Annotation([Ljava.lang.String;@4de4926a,[Ljava.lang.String;@59489519,[Ledu.cmu.lti.nlp.amr.Entity;@2c34ca1a))
AMR:
(a / and, op, s / safe-41)
(a / and, op, t / threaten-01)
(a3 / and, op, n / nail)
(a3 / and, op, p / promise-01)
(a3 / and, op, t2 / tooth)
(b / bill-01, ARG1, s / safe-41)
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, t / threaten-01)
(c2 / charter-01, ARG0, t2 / tooth)
(c2 / charter-01, ARG1, s3 / society)
(f3 / fight-01, ARG0, s4 / she)
(f3 / fight-01, ARG1, c2 / charter-01)
(f3 / fight-01, manner, a2 / apparent)
(h / hate-01, ARG0, e2 / everyone)
(h / hate-01, ARG1, s5 / say-01)
(h2 / have-org-role-91, ARG0, e2 / everyone)
(h2 / have-org-role-91, ARG2, m / minister)
(h2 / have-org-role-91, mod, t3 / this)
(l / legislation, degree, l2 / less)
(l3 / love-01, ARG1, h / hate-01)
(m / minister, mod, p4 / prime)
(p / promise-01, ARG1, l / legislation)
(p2 / promise-01, ARG2, f3 / fight-01)
(p3 / peer, time, p2 / promise-01)
(s / safe-41, ARG0, f / further)
(s / safe-41, ARG1, f2 / food)
(s5 / say-01, ARG1, p3 / peer)
(s5 / say-01, manner, w / way)
(t / threaten-01, ARG0, s2 / session)
(t / threaten-01, ARG1, e / environment)
(t / threaten-01, polarity, - / -)
(w / way, polarity, -2 / -)

Decoded in 1,259,634 microseconds
Sentence:   the new code of conduct also requires operators to deliver what they promise

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the new code of conduct also requires operators to deliver what they promise
myTokenized = the new code of conduct also requires operators to deliver what they promise
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: neil kinnock last night promised that 14 out of every 15 working people would pay no more income tax under labour and that families earning 20000plus would suffer only marginal net increases if any

Spans:
Span 6-7:  14 => 14
Span 10-11:  15 => 15
Span 21-22:  and => and
Span 33-34:  any => any
Span 24-25:  earning => earn-01
Span 9-10:  every => every
Span 23-24:  families => family
Span 17-18:  income => income
Span 31-32:  increases => increase-01
Span 20-21:  labour => labour
Span 2-3:  last => last
Span 30-31:  net => net
Span 3-4:  night => night
Span 15-16:  no => -
Span 28-29:  only => only
Span 14-15:  pay => pay-01
Span 4-5:  promised => promise-01
Span 27-28:  suffer => suffer-01
Span 18-19:  tax => tax-01
Span 11-12:  working => work-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),any,any,false), Span(31,32,List(1),increases,increase-01,false), Span(30,31,List(2),net,net,false), Span(28,29,List(3),only,only,false), Span(27,28,List(4),suffer,suffer-01,false), Span(24,25,List(5),earning,earn-01,false), Span(23,24,List(6),families,family,false), Span(21,22,List(7),and,and,false), Span(20,21,List(8),labour,labour,false), Span(18,19,List(9),tax,tax-01,false), Span(17,18,List(10),income,income,false), Span(15,16,List(11),no,-,false), Span(14,15,List(12),pay,pay-01,false), Span(11,12,List(13),working,work-01,false), Span(10,11,List(14),15,15,false), Span(9,10,List(15),every,every,false), Span(6,7,List(16),14,14,false), Span(4,5,List(17),promised,promise-01,false), Span(3,4,List(18),night,night,false), Span(2,3,List(19),last,last,false)),Map(2 -> net, 5 -> earn-01, 12 -> pay-01, 15 -> every, 8 -> labour, 18 -> night, 7 -> and, 17 -> promise-01, 1 -> increase-01, 4 -> suffer-01, 11 -> -, 14 -> 15, 6 -> family, 0 -> any, 9 -> tax-01, 16 -> 14, 19 -> last, 3 -> only, 10 -> income, 13 -> work-01),Map(e -> earn-01, n -> net, w -> work-01, 12 -> 14, t -> tax-01, p2 -> promise-01, e2 -> every, s -> suffer-01, 1 -> 15, p -> pay-01, a -> any, i2 -> income, l2 -> last, i -> increase-01, a2 -> and, - -> -, l -> labour, f -> family, o -> only, n2 -> night))),[Ljava.lang.String;@2b08bc5a,Annotation([Ljava.lang.String;@4a85cec8,[Ljava.lang.String;@16cad2b1,[Ljava.lang.String;@5dce6e27),Annotation([Ljava.lang.String;@1ba1f28e,[Ljava.lang.String;@253b56ce,[Ledu.cmu.lti.nlp.amr.Dependency;@5ac0017a),Annotation([Ljava.lang.String;@73a11f21,[Ljava.lang.String;@5702ead5,[Ljava.lang.String;@877294),Annotation([Ljava.lang.String;@3c7352d1,[Ljava.lang.String;@37423658,[Ledu.cmu.lti.nlp.amr.Entity;@5bfde7bf))
AMR:
(1 / 15, op, i / increase-01)
(a2 / and, op, p / pay-01)
(a2 / and, op, s / suffer-01)
(e / earn-01, ARG1, f / family)
(e / earn-01, mod, i2 / income)
(i / increase-01, ARG0, 12 / 14)
(i / increase-01, ARG1, n / net)
(i / increase-01, time, o / only)
(n2 / night, mod, l2 / last)
(p / pay-01, ARG1, t / tax-01)
(p2 / promise-01, ARG1, a2 / and)
(p2 / promise-01, time, n2 / night)
(s / suffer-01, ARG0, a / any)
(s / suffer-01, ARG1, i / increase-01)
(t / tax-01, ARG1, i2 / income)
(t / tax-01, ARG3, l / labour)
(t / tax-01, polarity, - / -)
(w / work-01, ARG0, f / family)
(w / work-01, ARG1, e2 / every)

Decoded in 369,299 microseconds
Sentence: don penny organiser of an embryonic abbey national investors protest group said yesterday that abbey promised him on thursday his shares would definitely arrive on friday

Spans:
Span 23-24:  arrive => arrive-01
Span 22-23:  definitely => definite
Span 25-26:  friday => friday
Span 10-11:  group => group
Span 8-9:  investors => (person :ARG0-of invest-01)
Span 7-8:  national => nation
Span 15-16:  promised => promise-01
Span 9-10:  protest => protest-01
Span 11-12:  said => say-01
Span 20-21:  shares => share
Span 12-13:  yesterday => yesterday

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),friday,friday,false), Span(23,24,List(1),arrive,arrive-01,false), Span(22,23,List(2),definitely,definite,false), Span(20,21,List(3),shares,share,false), Span(15,16,List(4),promised,promise-01,false), Span(12,13,List(5),yesterday,yesterday,false), Span(11,12,List(6),said,say-01,false), Span(10,11,List(7),group,group,false), Span(9,10,List(8),protest,protest-01,false), Span(8,9,List(10, 9),investors,(person :ARG0-of invest-01),false), Span(7,8,List(11),national,nation,false)),Map(2 -> definite, 5 -> yesterday, 8 -> protest-01, 7 -> group, 1 -> arrive-01, 11 -> nation, 4 -> promise-01, 6 -> say-01, 9 -> person, 0 -> friday, 10 -> invest-01, 3 -> share),Map(n -> nation, s2 -> say-01, p2 -> protest-01, s -> share, d -> definite, g -> group, y -> yesterday, p -> promise-01, a -> arrive-01, i -> invest-01, f -> friday, p3 -> person))),[Ljava.lang.String;@7a79dbc7,Annotation([Ljava.lang.String;@564c24a2,[Ljava.lang.String;@20f933f1,[Ljava.lang.String;@48c12420),Annotation([Ljava.lang.String;@2ad631,[Ljava.lang.String;@7c542b0c,[Ledu.cmu.lti.nlp.amr.Dependency;@79d66098),Annotation([Ljava.lang.String;@695fd9a5,[Ljava.lang.String;@13ca15af,[Ljava.lang.String;@38559e4f),Annotation([Ljava.lang.String;@7d0c716d,[Ljava.lang.String;@3beaeb3e,[Ledu.cmu.lti.nlp.amr.Entity;@3bfa522d))
AMR:
(a / arrive-01, ARG1, s / share)
(a / arrive-01, ARG4, f / friday)
(a / arrive-01, mod, d / definite)
(i / invest-01, ARG0, p3 / person)
(i / invest-01, ARG1, g / group)
(p / promise-01, ARG1, a / arrive-01)
(p2 / protest-01, ARG0, g / group)
(p3 / person, mod, n / nation)
(s2 / say-01, ARG0, g / group)
(s2 / say-01, ARG1, p / promise-01)
(s2 / say-01, time, y / yesterday)

Decoded in 116,032 microseconds
Sentence: gower attacked promising to storm into gerrards office within the hour if there was no good excuse for his failure to appear with the 10

Spans:
Span 24-25:  10 => 10
Span 21-22:  appear => appear-02
Span 1-2:  attacked => attack-01
Span 16-17:  excuse => excuse-01
Span 19-20:  failure => fail-01
Span 15-16:  good => good
Span 10-11:  hour => (temporal-quantity :unit hour)
Span 14-15:  no => -
Span 7-8:  office => office
Span 2-3:  promising => promise-01
Span 4-5:  storm => storm
Span 8-9:  within => within

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),10,10,false), Span(21,22,List(1),appear,appear-02,false), Span(19,20,List(2),failure,fail-01,false), Span(16,17,List(3),excuse,excuse-01,false), Span(15,16,List(4),good,good,false), Span(14,15,List(5),no,-,false), Span(10,11,List(7, 6),hour,(temporal-quantity :unit hour),false), Span(8,9,List(8),within,within,false), Span(7,8,List(9),office,office,false), Span(4,5,List(10),storm,storm,false), Span(2,3,List(11),promising,promise-01,false), Span(1,2,List(12),attacked,attack-01,false)),Map(2 -> fail-01, 5 -> -, 12 -> attack-01, 8 -> within, 7 -> hour, 1 -> appear-02, 4 -> good, 11 -> promise-01, 6 -> temporal-quantity, 0 -> 10, 9 -> office, 3 -> excuse-01, 10 -> storm),Map(e -> excuse-01, w -> within, h -> hour, t -> temporal-quantity, s -> storm, 1 -> 10, g -> good, p -> promise-01, a -> appear-02, a2 -> attack-01, - -> -, f -> fail-01, o -> office))),[Ljava.lang.String;@2f29271e,Annotation([Ljava.lang.String;@36c73ac2,[Ljava.lang.String;@51e2b2a6,[Ljava.lang.String;@7a3eda49),Annotation([Ljava.lang.String;@346d2d52,[Ljava.lang.String;@6bba7d61,[Ledu.cmu.lti.nlp.amr.Dependency;@207da288),Annotation([Ljava.lang.String;@18399f62,[Ljava.lang.String;@6f0ee75a,[Ljava.lang.String;@3b76feac),Annotation([Ljava.lang.String;@149ecb4,[Ljava.lang.String;@1c531e15,[Ledu.cmu.lti.nlp.amr.Entity;@14dc033a))
AMR:
(a2 / attack-01, ARG1, p / promise-01)
(e / excuse-01, ARG1, f / fail-01)
(e / excuse-01, mod, g / good)
(e / excuse-01, polarity, - / -)
(f / fail-01, ARG1, 1 / 10)
(f / fail-01, ARG2, a / appear-02)
(p / promise-01, ARG0, w / within)
(p / promise-01, ARG1, o / office)
(p / promise-01, ARG2, s / storm)
(p / promise-01, purpose, e / excuse-01)
(t / temporal-quantity, unit, h / hour)
(w / within, op, t / temporal-quantity)

Decoded in 116,739 microseconds
Sentence: he promised attacks by his cartel would cease if the government agreed to negotiate

Spans:
Span 11-12:  agreed => agree-01
Span 2-3:  attacks => attack-01
Span 5-6:  cartel => cartel
Span 7-8:  cease => cease-01
Span 0-1:  he => he
Span 13-14:  negotiate => negotiate-01
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),negotiate,negotiate-01,false), Span(11,12,List(1),agreed,agree-01,false), Span(7,8,List(2),cease,cease-01,false), Span(5,6,List(3),cartel,cartel,false), Span(2,3,List(4),attacks,attack-01,false), Span(1,2,List(5),promised,promise-01,false), Span(0,1,List(6),he,he,false)),Map(2 -> cease-01, 5 -> promise-01, 1 -> agree-01, 4 -> attack-01, 6 -> he, 0 -> negotiate-01, 3 -> cartel),Map(n -> negotiate-01, h -> he, p -> promise-01, a -> agree-01, a2 -> attack-01, c -> cease-01, c2 -> cartel))),[Ljava.lang.String;@51149771,Annotation([Ljava.lang.String;@1ee2a54d,[Ljava.lang.String;@31d27212,[Ljava.lang.String;@6f3f154b),Annotation([Ljava.lang.String;@168f27fc,[Ljava.lang.String;@108a1cf6,[Ledu.cmu.lti.nlp.amr.Dependency;@5b7362f5),Annotation([Ljava.lang.String;@7465f1ba,[Ljava.lang.String;@50e12609,[Ljava.lang.String;@6d88425a),Annotation([Ljava.lang.String;@cbc5ae4,[Ljava.lang.String;@21f33544,[Ledu.cmu.lti.nlp.amr.Entity;@662e14c5))
AMR:
(a / agree-01, ARG1, n / negotiate-01)
(a2 / attack-01, ARG0, h / he)
(a2 / attack-01, ARG1, c2 / cartel)
(c / cease-01, condition, a / agree-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, c / cease-01)

Decoded in 57,050 microseconds
Sentence: in 1963 when he was already leader of the labour party harold wilson promised that under a labour government there would be grammar school education for all and few in the labour party wanted to be seen as the enemy of the grammar schools

NER Entity: (person :name (name :op "harold" :op "wilson"))
Spans:
Span 1-2:  1963 => (date-entity :year 1963)
Span 26-27:  all => all
Span 5-6:  already => already
Span 27-28:  and => and
Span 24-25:  education => educate-01
Span 39-40:  enemy => (have-rel-role-91 :ARG2 enemy)
Span 28-29:  few => few
Span 42-43:  grammar => grammar
Span 22-23:  grammar => grammar
Span 11-13:  harold wilson => (person :name (name :op "harold" :op "wilson"))
Span 3-4:  he => he
Span 31-32:  labour => labour
Span 17-18:  labour => labour
Span 9-10:  labour => labour
Span 6-7:  leader => (person :ARG0-of lead-02)
Span 32-33:  party => party
Span 10-11:  party => party
Span 13-14:  promised => promise-01
Span 23-24:  school => school
Span 43-44:  schools => school
Span 36-37:  seen => see-01
Span 33-34:  wanted => want-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),schools,school,false), Span(42,43,List(1),grammar,grammar,false), Span(39,40,List(3, 2),enemy,(have-rel-role-91 :ARG2 enemy),false), Span(36,37,List(4),seen,see-01,false), Span(33,34,List(5),wanted,want-01,false), Span(32,33,List(6),party,party,false), Span(31,32,List(7),labour,labour,false), Span(28,29,List(8),few,few,false), Span(27,28,List(9),and,and,false), Span(26,27,List(10),all,all,false), Span(24,25,List(11),education,educate-01,false), Span(23,24,List(12),school,school,false), Span(22,23,List(13),grammar,grammar,false), Span(17,18,List(14),labour,labour,false), Span(13,14,List(15),promised,promise-01,false), Span(11,13,List(19, 18, 17, 16),harold wilson,(person :name (name :op "harold" :op "wilson")),false), Span(10,11,List(20),party,party,false), Span(9,10,List(21),labour,labour,false), Span(6,7,List(23, 22),leader,(person :ARG0-of lead-02),false), Span(5,6,List(24),already,already,false), Span(3,4,List(25),he,he,false), Span(1,2,List(27, 26),1963,(date-entity :year 1963),false)),Map(2 -> have-rel-role-91, 5 -> want-01, 27 -> 1963, 12 -> school, 8 -> few, 15 -> promise-01, 21 -> labour, 18 -> "harold", 24 -> already, 7 -> labour, 1 -> grammar, 17 -> name, 23 -> lead-02, 26 -> date-entity, 4 -> see-01, 11 -> educate-01, 14 -> labour, 20 -> party, 6 -> party, 9 -> and, 0 -> school, 22 -> person, 16 -> person, 19 -> "wilson", 10 -> all, 3 -> enemy, 25 -> he, 13 -> grammar),Map(e -> enemy, w -> want-01, n -> name, h -> have-rel-role-91, s2 -> see-01, p5 -> person, h2 -> he, e2 -> educate-01, p2 -> promise-01, l3 -> labour, a3 -> already, s -> school, d -> date-entity, 1 -> 1963, g2 -> grammar, p -> party, g -> grammar, a -> and, p4 -> party, l2 -> labour, a2 -> all, s3 -> school, l -> labour, f -> few, p3 -> person, l4 -> lead-02))),[Ljava.lang.String;@5c34f625,Annotation([Ljava.lang.String;@190c266e,[Ljava.lang.String;@6caf0c9a,[Ljava.lang.String;@58648a34),Annotation([Ljava.lang.String;@30ad8942,[Ljava.lang.String;@510e6505,[Ledu.cmu.lti.nlp.amr.Dependency;@80a54d6),Annotation([Ljava.lang.String;@5e47b1b9,[Ljava.lang.String;@34e5190a,[Ljava.lang.String;@2ccefaa7),Annotation([Ljava.lang.String;@48aa00ec,[Ljava.lang.String;@1122ab39,[Ledu.cmu.lti.nlp.amr.Entity;@7b1733f8))
AMR:
(a / and, op, p3 / person)
(a / and, op, s / school)
(d / date-entity, year, 1 / 1963)
(e2 / educate-01, ARG1, a2 / all)
(e2 / educate-01, mod, s3 / school)
(f / few, op, h / have-rel-role-91)
(h / have-rel-role-91, ARG1, l2 / labour)
(h / have-rel-role-91, ARG2, e / enemy)
(h / have-rel-role-91, location, s / school)
(l4 / lead-02, ARG0, p5 / person)
(l4 / lead-02, ARG1, p4 / party)
(n / name, op, "harold")
(n / name, op, "wilson")
(p / party, mod, l / labour)
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, ARG1, e2 / educate-01)
(p3 / person, name, n / name)
(p3 / person, prep-without, d / date-entity)
(p4 / party, mod, l3 / labour)
(p4 / party, name, p3 / person)
(p5 / person, domain, h2 / he)
(p5 / person, time, a3 / already)
(s / school, mod, g / grammar)
(s2 / see-01, ARG1, p / party)
(s3 / school, mod, g2 / grammar)
(w / want-01, ARG0, p3 / person)
(w / want-01, ARG1, s2 / see-01)

Decoded in 1,084,614 microseconds
Sentence: speaking as a cabinet minister rather than a father the mufti did however promise a solution to the turmoil in kashmir

Spans:
Span 3-4:  cabinet => cabinet
Span 8-9:  father => (have-rel-role-91 :ARG2 father)
Span 4-5:  minister => (have-org-role-91 :ARG2 minister)
Span 13-14:  promise => promise-01
Span 15-16:  solution => solution
Span 0-1:  speaking => speak-01
Span 18-19:  turmoil => turmoil

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),turmoil,turmoil,false), Span(15,16,List(1),solution,solution,false), Span(13,14,List(2),promise,promise-01,false), Span(8,9,List(4, 3),father,(have-rel-role-91 :ARG2 father),false), Span(4,5,List(6, 5),minister,(have-org-role-91 :ARG2 minister),false), Span(3,4,List(7),cabinet,cabinet,false), Span(0,1,List(8),speaking,speak-01,false)),Map(2 -> promise-01, 5 -> have-org-role-91, 8 -> speak-01, 7 -> cabinet, 1 -> solution, 4 -> father, 6 -> minister, 0 -> turmoil, 3 -> have-rel-role-91),Map(h -> have-rel-role-91, s2 -> speak-01, h2 -> have-org-role-91, t -> turmoil, s -> solution, m -> minister, p -> promise-01, c -> cabinet, f -> father))),[Ljava.lang.String;@30551dea,Annotation([Ljava.lang.String;@241f0670,[Ljava.lang.String;@70dfb596,[Ljava.lang.String;@6f0ac4be),Annotation([Ljava.lang.String;@2bfacee6,[Ljava.lang.String;@5f257498,[Ledu.cmu.lti.nlp.amr.Dependency;@1409d7f5),Annotation([Ljava.lang.String;@1241201a,[Ljava.lang.String;@71a29452,[Ljava.lang.String;@68b7cdc6),Annotation([Ljava.lang.String;@7b26b7df,[Ljava.lang.String;@2af1d0a3,[Ledu.cmu.lti.nlp.amr.Entity;@69b8935b))
AMR:
(h / have-rel-role-91, ARG2, f / father)
(h2 / have-org-role-91, ARG0, s / solution)
(h2 / have-org-role-91, ARG1, c / cabinet)
(h2 / have-org-role-91, ARG2, m / minister)
(p / promise-01, ARG1, h / have-rel-role-91)
(s / solution, beneficiary, t / turmoil)
(s2 / speak-01, ARG0, s / solution)
(s2 / speak-01, ARG1, p / promise-01)

Decoded in 67,354 microseconds
Sentence: and if ever it isnt ill make it all right i promise

Spans:
Span 8-9:  all => all
Span 0-1:  and => and
Span 2-3:  ever => ever
Span 10-11:  i => i
Span 5-6:  ill => ill-41
Span 7-8:  it => it
Span 3-4:  it => it
Span 11-12:  promise => promise-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promise,promise-01,false), Span(10,11,List(1),i,i,false), Span(8,9,List(2),all,all,false), Span(7,8,List(3),it,it,false), Span(5,6,List(4),ill,ill-41,false), Span(3,4,List(5),it,it,false), Span(2,3,List(6),ever,ever,false), Span(0,1,List(7),and,and,false)),Map(2 -> all, 5 -> it, 7 -> and, 1 -> i, 4 -> ill-41, 6 -> ever, 0 -> promise-01, 3 -> it),Map(e -> ever, i4 -> it, i3 -> ill-41, p -> promise-01, a -> all, i2 -> it, a2 -> and, i -> i))),[Ljava.lang.String;@54d27196,Annotation([Ljava.lang.String;@441f5a5b,[Ljava.lang.String;@66652f4d,[Ljava.lang.String;@7d049cbf),Annotation([Ljava.lang.String;@39ceffb8,[Ljava.lang.String;@44f6a6ae,[Ledu.cmu.lti.nlp.amr.Dependency;@1d390ce1),Annotation([Ljava.lang.String;@c7c96c4,[Ljava.lang.String;@478e2443,[Ljava.lang.String;@44eecf68),Annotation([Ljava.lang.String;@1a72d833,[Ljava.lang.String;@69d009d5,[Ledu.cmu.lti.nlp.amr.Entity;@5935b538))
AMR:
(a2 / and, domain, i4 / it)
(i2 / it, quant, a / all)
(i3 / ill-41, ARG0, e / ever)
(i3 / ill-41, ARG1, i4 / it)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, a / all)
(p / promise-01, ARG2, a2 / and)

Decoded in 42,232 microseconds
Sentence: the arrests came hours after the government promised that the killers of six jesuit priests and two civilians on thursday would not escape justice even if as alleged they prove to be members of the army

Spans:
Span 4-5:  after => after
Span 27-28:  alleged => allege-01
Span 15-16:  and => and
Span 35-36:  army => army
Span 1-2:  arrests => arrest-01
Span 17-18:  civilians => civilian
Span 22-23:  escape => escape-01
Span 3-4:  hours => (temporal-quantity :unit hour)
Span 23-24:  justice => justice
Span 10-11:  killers => (person :ARG0-of kill-01)
Span 32-33:  members => (have-org-role-91 :ARG2 member)
Span 14-15:  priests => priest
Span 7-8:  promised => promise-01
Span 29-30:  prove => prove-01
Span 12-13:  six => 6
Span 28-29:  they => they
Span 16-17:  two => 2

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),army,army,false), Span(32,33,List(2, 1),members,(have-org-role-91 :ARG2 member),false), Span(29,30,List(3),prove,prove-01,false), Span(28,29,List(4),they,they,false), Span(27,28,List(5),alleged,allege-01,false), Span(23,24,List(6),justice,justice,false), Span(22,23,List(7),escape,escape-01,false), Span(17,18,List(8),civilians,civilian,false), Span(16,17,List(9),two,2,false), Span(15,16,List(10),and,and,false), Span(14,15,List(11),priests,priest,false), Span(12,13,List(12),six,6,false), Span(10,11,List(14, 13),killers,(person :ARG0-of kill-01),false), Span(7,8,List(15),promised,promise-01,false), Span(4,5,List(16),after,after,false), Span(3,4,List(18, 17),hours,(temporal-quantity :unit hour),false), Span(1,2,List(19),arrests,arrest-01,false)),Map(2 -> member, 5 -> allege-01, 12 -> 6, 15 -> promise-01, 8 -> civilian, 18 -> hour, 7 -> escape-01, 17 -> temporal-quantity, 1 -> have-org-role-91, 4 -> they, 11 -> priest, 14 -> kill-01, 6 -> justice, 0 -> army, 9 -> 2, 16 -> after, 19 -> arrest-01, 3 -> prove-01, 10 -> and, 13 -> person),Map(e -> escape-01, h -> have-org-role-91, 2 -> 2, h2 -> hour, k -> kill-01, t -> they, p2 -> priest, j -> justice, a3 -> and, m -> member, p -> prove-01, a -> army, p4 -> promise-01, a5 -> arrest-01, t2 -> temporal-quantity, a2 -> allege-01, c -> civilian, 6 -> 6, p3 -> person, a4 -> after))),[Ljava.lang.String;@550c9d49,Annotation([Ljava.lang.String;@2f2a4f3e,[Ljava.lang.String;@2b887a3,[Ljava.lang.String;@20d0dfba),Annotation([Ljava.lang.String;@71103d2a,[Ljava.lang.String;@611fca63,[Ledu.cmu.lti.nlp.amr.Dependency;@6e205b65),Annotation([Ljava.lang.String;@e507c5f,[Ljava.lang.String;@46154850,[Ljava.lang.String;@1f3ea022),Annotation([Ljava.lang.String;@48832834,[Ljava.lang.String;@1ac4931d,[Ledu.cmu.lti.nlp.amr.Entity;@5f9662a5))
AMR:
(a2 / allege-01, ARG1, p / prove-01)
(a3 / and, op, p2 / priest)
(a4 / after, op, p4 / promise-01)
(a5 / arrest-01, time, a4 / after)
(c / civilian, quant, 2 / 2)
(e / escape-01, ARG0, p3 / person)
(e / escape-01, ARG1, j / justice)
(e / escape-01, time, a2 / allege-01)
(h / have-org-role-91, ARG0, t / they)
(h / have-org-role-91, ARG1, a / army)
(h / have-org-role-91, ARG2, m / member)
(k / kill-01, ARG0, p3 / person)
(k / kill-01, ARG1, a3 / and)
(p / prove-01, ARG0, t / they)
(p / prove-01, ARG1, 2 / 2)
(p2 / priest, quant, 6 / 6)
(p4 / promise-01, ARG1, e / escape-01)
(t2 / temporal-quantity, time, a4 / after)
(t2 / temporal-quantity, unit, h2 / hour)

Decoded in 352,196 microseconds
Sentence: he questioned the adequacy of the 30m promised to implement the bill in view of the need to train environmental health and trading standards officers

Spans:
Span 21-22:  and => and
Span 11-12:  bill => bill
Span 19-20:  environmental => environment
Span 0-1:  he => he
Span 20-21:  health => health
Span 9-10:  implement => implement-01
Span 16-17:  need => need-01
Span 24-25:  officers => (have-org-role-91 :ARG2 officer)
Span 7-8:  promised => promise-01
Span 1-2:  questioned => question-01
Span 23-24:  standards => standard
Span 22-23:  trading => trade-01
Span 18-19:  train => train

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),officers,(have-org-role-91 :ARG2 officer),false), Span(23,24,List(2),standards,standard,false), Span(22,23,List(3),trading,trade-01,false), Span(21,22,List(4),and,and,false), Span(20,21,List(5),health,health,false), Span(19,20,List(6),environmental,environment,false), Span(18,19,List(7),train,train,false), Span(16,17,List(8),need,need-01,false), Span(11,12,List(9),bill,bill,false), Span(9,10,List(10),implement,implement-01,false), Span(7,8,List(11),promised,promise-01,false), Span(1,2,List(12),questioned,question-01,false), Span(0,1,List(13),he,he,false)),Map(2 -> standard, 5 -> health, 12 -> question-01, 8 -> need-01, 7 -> train, 1 -> officer, 4 -> and, 11 -> promise-01, 6 -> environment, 0 -> have-org-role-91, 9 -> bill, 3 -> trade-01, 10 -> implement-01, 13 -> he),Map(e -> environment, n -> need-01, h -> have-org-role-91, q -> question-01, h2 -> health, t -> trade-01, b -> bill, s -> standard, p -> promise-01, a -> and, t2 -> train, i -> implement-01, h3 -> he, o -> officer))),[Ljava.lang.String;@a266faa,Annotation([Ljava.lang.String;@616d071a,[Ljava.lang.String;@3ced6dee,[Ljava.lang.String;@7cc4382),Annotation([Ljava.lang.String;@73640fcd,[Ljava.lang.String;@2e4996ea,[Ledu.cmu.lti.nlp.amr.Dependency;@6152f463),Annotation([Ljava.lang.String;@d2ac180,[Ljava.lang.String;@7205c140,[Ljava.lang.String;@57d28b3b),Annotation([Ljava.lang.String;@3fb2fb88,[Ljava.lang.String;@7f9fbe63,[Ledu.cmu.lti.nlp.amr.Entity;@508c970a))
AMR:
(a / and, op, h2 / health)
(a / and, op, q / question-01)
(a / and, op, t2 / train)
(h / have-org-role-91, ARG1, s / standard)
(h / have-org-role-91, ARG2, o / officer)
(h2 / health, mod, e / environment)
(i / implement-01, ARG0, h3 / he)
(i / implement-01, ARG1, b / bill)
(n / need-01, ARG1, t2 / train)
(p / promise-01, ARG0, s / standard)
(p / promise-01, ARG1, t / trade-01)
(p / promise-01, ARG2, i / implement-01)
(q / question-01, ARG0, h3 / he)

Decoded in 276,828 microseconds
Sentence: in exchange for dollars 1000 each partner was promised a threenight stay at the hotel every year for the rest of their lives

Spans:
Span 4-5:  1000 => (date-entity :year 1000)
Span 3-4:  dollars => (monetary-quantity :unit dollar)
Span 5-6:  each => each
Span 15-16:  every => every
Span 1-2:  exchange => exchange-01
Span 14-15:  hotel => hotel
Span 22-23:  lives => life
Span 6-7:  partner => partner-01
Span 8-9:  promised => promise-01
Span 19-20:  rest => rest
Span 11-12:  stay => stay-01
Span 16-17:  year => year

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),lives,life,false), Span(19,20,List(1),rest,rest,false), Span(16,17,List(2),year,year,false), Span(15,16,List(3),every,every,false), Span(14,15,List(4),hotel,hotel,false), Span(11,12,List(5),stay,stay-01,false), Span(8,9,List(6),promised,promise-01,false), Span(6,7,List(7),partner,partner-01,false), Span(5,6,List(8),each,each,false), Span(4,5,List(10, 9),1000,(date-entity :year 1000),false), Span(3,4,List(12, 11),dollars,(monetary-quantity :unit dollar),false), Span(1,2,List(13),exchange,exchange-01,false)),Map(2 -> year, 5 -> stay-01, 12 -> dollar, 8 -> each, 7 -> partner-01, 1 -> rest, 4 -> hotel, 11 -> monetary-quantity, 6 -> promise-01, 0 -> life, 9 -> date-entity, 3 -> every, 10 -> 1000, 13 -> exchange-01),Map(e -> every, h -> hotel, p2 -> partner-01, e2 -> each, s -> stay-01, d -> date-entity, m -> monetary-quantity, 1 -> 1000, y -> year, p -> promise-01, d2 -> dollar, r -> rest, l -> life, e3 -> exchange-01))),[Ljava.lang.String;@1b86d76f,Annotation([Ljava.lang.String;@31a9c687,[Ljava.lang.String;@128e28a,[Ljava.lang.String;@2330d29e),Annotation([Ljava.lang.String;@5a53951e,[Ljava.lang.String;@256312e6,[Ledu.cmu.lti.nlp.amr.Dependency;@b6dcd37),Annotation([Ljava.lang.String;@55bbdbbd,[Ljava.lang.String;@20578144,[Ljava.lang.String;@50e7a7f2),Annotation([Ljava.lang.String;@18c32a5d,[Ljava.lang.String;@35124c5e,[Ledu.cmu.lti.nlp.amr.Entity;@4453ca8a))
AMR:
(1 / 1000, mod, m / monetary-quantity)
(d / date-entity, year, 1 / 1000)
(e3 / exchange-01, ARG0, y / year)
(e3 / exchange-01, ARG1, d / date-entity)
(l / life, part, r / rest)
(m / monetary-quantity, unit, d2 / dollar)
(p / promise-01, ARG0, e / every)
(p / promise-01, ARG1, p2 / partner-01)
(p / promise-01, ARG2, s / stay-01)
(p / promise-01, time, e3 / exchange-01)
(p2 / partner-01, mod, e2 / each)
(s / stay-01, location, h / hotel)
(s / stay-01, prep-with, r / rest)

Decoded in 592,912 microseconds
Sentence: with the countrys military chiefs but he promised to make an announcement soon

Spans:
Span 11-12:  announcement => announce-01
Span 5-6:  but => contrast-01
Span 4-5:  chiefs => (have-org-role-91 :ARG2 chief)
Span 6-7:  he => he
Span 3-4:  military => military
Span 7-8:  promised => promise-01
Span 12-13:  soon => soon

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),soon,soon,false), Span(11,12,List(1),announcement,announce-01,false), Span(7,8,List(2),promised,promise-01,false), Span(6,7,List(3),he,he,false), Span(5,6,List(4),but,contrast-01,false), Span(4,5,List(6, 5),chiefs,(have-org-role-91 :ARG2 chief),false), Span(3,4,List(7),military,military,false)),Map(2 -> promise-01, 5 -> have-org-role-91, 7 -> military, 1 -> announce-01, 4 -> contrast-01, 6 -> chief, 0 -> soon, 3 -> he),Map(h -> he, h2 -> have-org-role-91, s -> soon, m -> military, p -> promise-01, a -> announce-01, c -> contrast-01, c2 -> chief))),[Ljava.lang.String;@59164d11,Annotation([Ljava.lang.String;@471dc4c8,[Ljava.lang.String;@73624af1,[Ljava.lang.String;@3a264f65),Annotation([Ljava.lang.String;@29268db6,[Ljava.lang.String;@2221bcd5,[Ledu.cmu.lti.nlp.amr.Dependency;@54f45574),Annotation([Ljava.lang.String;@75165e3e,[Ljava.lang.String;@f857480,[Ljava.lang.String;@2a38776),Annotation([Ljava.lang.String;@3e125554,[Ljava.lang.String;@25a01da2,[Ledu.cmu.lti.nlp.amr.Entity;@32f989fa))
AMR:
(a / announce-01, direction, s / soon)
(c / contrast-01, ARG1, a / announce-01)
(c / contrast-01, ARG2, p / promise-01)
(h2 / have-org-role-91, ARG1, m / military)
(h2 / have-org-role-91, ARG2, c2 / chief)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, h2 / have-org-role-91)

Decoded in 86,517 microseconds
Sentence: french industry has no illusions that it will be easy to realise the ambitious projects promised in the paris agreements

Spans:
Span 19-20:  agreements => agree-01
Span 13-14:  ambitious => ambitious
Span 9-10:  easy => easy
Span 0-1:  french => (country :name (name :op "France"))
Span 4-5:  illusions => illusion
Span 1-2:  industry => industry
Span 6-7:  it => it
Span 3-4:  no => -
Span 14-15:  projects => project
Span 15-16:  promised => promise-01
Span 11-12:  realise => realize-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),agreements,agree-01,false), Span(15,16,List(1),promised,promise-01,false), Span(14,15,List(2),projects,project,false), Span(13,14,List(3),ambitious,ambitious,false), Span(11,12,List(4),realise,realize-01,false), Span(9,10,List(5),easy,easy,false), Span(6,7,List(6),it,it,false), Span(4,5,List(7),illusions,illusion,false), Span(3,4,List(8),no,-,false), Span(1,2,List(9),industry,industry,false), Span(0,1,List(12, 11, 10),french,(country :name (name :op "France")),false)),Map(2 -> project, 5 -> easy, 12 -> "France", 8 -> -, 7 -> illusion, 1 -> promise-01, 4 -> realize-01, 11 -> name, 6 -> it, 0 -> agree-01, 9 -> industry, 3 -> ambitious, 10 -> country),Map(n -> name, e -> easy, p2 -> project, i3 -> industry, p -> promise-01, a -> agree-01, i2 -> illusion, i -> it, r -> realize-01, a2 -> ambitious, - -> -, c -> country))),[Ljava.lang.String;@1cd1963b,Annotation([Ljava.lang.String;@3de0a45,[Ljava.lang.String;@667439fe,[Ljava.lang.String;@588b873e),Annotation([Ljava.lang.String;@305c24dc,[Ljava.lang.String;@71780051,[Ledu.cmu.lti.nlp.amr.Dependency;@7d5d0009),Annotation([Ljava.lang.String;@64ad8f2b,[Ljava.lang.String;@3e9283b0,[Ljava.lang.String;@503b7e8),Annotation([Ljava.lang.String;@371ee2ea,[Ljava.lang.String;@4cc38ceb,[Ledu.cmu.lti.nlp.amr.Entity;@3a58bfac))
AMR:
(a / agree-01, ARG0, c / country)
(c / country, name, n / name)
(e / easy, domain, r / realize-01)
(e / easy, polarity, - / -)
(i2 / illusion, polarity, - / -)
(i3 / industry, mod, c / country)
(n / name, op, "France")
(p / promise-01, ARG0, p2 / project)
(p / promise-01, ARG1, a / agree-01)
(p2 / project, mod, a2 / ambitious)
(r / realize-01, ARG0, i / it)
(r / realize-01, ARG1, p2 / project)

Decoded in 298,009 microseconds
Sentence: henry leland claimed henry ford had promised to reimburse all lincolns original creditors and shareholders

Spans:
Span 9-10:  all => all
Span 13-14:  and => and
Span 2-3:  claimed => claim-01
Span 11-12:  original => original
Span 6-7:  promised => promise-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),and,and,false), Span(11,12,List(1),original,original,false), Span(9,10,List(2),all,all,false), Span(6,7,List(3),promised,promise-01,false), Span(2,3,List(4),claimed,claim-01,false)),Map(2 -> all, 1 -> original, 4 -> claim-01, 0 -> and, 3 -> promise-01),Map(p -> promise-01, a -> and, a2 -> all, c -> claim-01, o -> original))),[Ljava.lang.String;@188fd321,Annotation([Ljava.lang.String;@a6e2820,[Ljava.lang.String;@460c5239,[Ljava.lang.String;@52ea401c),Annotation([Ljava.lang.String;@111718cb,[Ljava.lang.String;@35cc031,[Ledu.cmu.lti.nlp.amr.Dependency;@3e4dd2b0),Annotation([Ljava.lang.String;@674340c4,[Ljava.lang.String;@705138d2,[Ljava.lang.String;@64699c99),Annotation([Ljava.lang.String;@51a8344f,[Ljava.lang.String;@7a02586a,[Ledu.cmu.lti.nlp.amr.Entity;@2ffad5ba))
AMR:
(c / claim-01, ARG0, o / original)
(c / claim-01, ARG1, a2 / all)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, c / claim-01)

Decoded in 23,471 microseconds
Sentence: on 9 april 1986 when the plaintiff had already completed the roof sustantially completed nine flats and received interim payments of 16000 the defendants promised to pay the plaintiff a further sum of 10300 at the rate of 575 for each flat on which the carpentry work was completed

mkDayMonthYear(9	april	1986,9,april,1986)
Spans:
Span 21-22:  16000 => 16000
Span 1-4:  9 april 1986 => (date-entity :day 9 :month 4 :year 1986)
Span 8-9:  already => already
Span 16-17:  and => and
Span 48-49:  completed => complete-01
Span 13-14:  completed => complete-01
Span 9-10:  completed => complete-01
Span 23-24:  defendants => defendant
Span 40-41:  each => each
Span 41-42:  flat => flat
Span 30-31:  further => further
Span 18-19:  interim => interim
Span 14-15:  nine => 9
Span 26-27:  pay => pay-01
Span 19-20:  payments => payment
Span 24-25:  promised => promise-01
Span 36-37:  rate => rate
Span 17-18:  received => receive-01
Span 11-12:  roof => roof
Span 31-32:  sum => sum

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),completed,complete-01,false), Span(41,42,List(1),flat,flat,false), Span(40,41,List(2),each,each,false), Span(36,37,List(3),rate,rate,false), Span(31,32,List(4),sum,sum,false), Span(30,31,List(5),further,further,false), Span(26,27,List(6),pay,pay-01,false), Span(24,25,List(7),promised,promise-01,false), Span(23,24,List(8),defendants,defendant,false), Span(21,22,List(9),16000,16000,false), Span(19,20,List(10),payments,payment,false), Span(18,19,List(11),interim,interim,false), Span(17,18,List(12),received,receive-01,false), Span(16,17,List(13),and,and,false), Span(14,15,List(14),nine,9,false), Span(13,14,List(15),completed,complete-01,false), Span(11,12,List(16),roof,roof,false), Span(9,10,List(17),completed,complete-01,false), Span(8,9,List(18),already,already,false), Span(1,4,List(22, 21, 20, 19),9 april 1986,(date-entity :day 9 :month 4 :year 1986),false)),Map(2 -> each, 5 -> further, 12 -> receive-01, 15 -> complete-01, 8 -> defendant, 21 -> 4, 18 -> already, 7 -> promise-01, 17 -> complete-01, 1 -> flat, 4 -> sum, 11 -> interim, 14 -> 9, 20 -> 9, 6 -> pay-01, 22 -> 1986, 0 -> complete-01, 9 -> 16000, 16 -> roof, 19 -> date-entity, 3 -> rate, 10 -> payment, 13 -> and),Map(e -> each, r3 -> roof, 12 -> 1986, 92 -> 9, p2 -> promise-01, s -> sum, d -> defendant, 1 -> 16000, p -> pay-01, r2 -> receive-01, 4 -> 4, c3 -> complete-01, a -> and, d2 -> date-entity, a2 -> already, r -> rate, i -> interim, c -> complete-01, f2 -> further, 9 -> 9, f -> flat, p3 -> payment, c2 -> complete-01))),[Ljava.lang.String;@7ad4cdd4,Annotation([Ljava.lang.String;@2915584c,[Ljava.lang.String;@3857faa6,[Ljava.lang.String;@1808c530),Annotation([Ljava.lang.String;@67c9dea3,[Ljava.lang.String;@7637d490,[Ledu.cmu.lti.nlp.amr.Dependency;@4b647692),Annotation([Ljava.lang.String;@30a491e9,[Ljava.lang.String;@46770f2,[Ljava.lang.String;@23282220),Annotation([Ljava.lang.String;@1fd874e8,[Ljava.lang.String;@3be33bad,[Ledu.cmu.lti.nlp.amr.Entity;@4362f992))
AMR:
(a / and, op, c2 / complete-01)
(a / and, op, d / defendant)
(a / and, op, r2 / receive-01)
(a / and, time, d2 / date-entity)
(c / complete-01, ARG0, e / each)
(c / complete-01, ARG1, a / and)
(c2 / complete-01, ARG0, r / rate)
(c2 / complete-01, ARG1, r3 / roof)
(c3 / complete-01, ARG1, r3 / roof)
(c3 / complete-01, time, a2 / already)
(d2 / date-entity, day, 92 / 9)
(d2 / date-entity, month, 4 / 4)
(d2 / date-entity, year, 12 / 1986)
(f / flat, domain, e / each)
(p / pay-01, ARG0, d / defendant)
(p / pay-01, ARG1, 1 / 16000)
(p2 / promise-01, ARG0, 9 / 9)
(p2 / promise-01, ARG2, p / pay-01)
(p3 / payment, mod, i / interim)
(r2 / receive-01, ARG0, s / sum)
(r2 / receive-01, ARG1, p3 / payment)
(s / sum, mod, f2 / further)

Decoded in 565,789 microseconds
Sentence: he also promised that all political prisoners where possible will be freed from jail by christmas

Spans:
Span 4-5:  all => all
Span 1-2:  also => also
Span 11-12:  freed => free-01
Span 0-1:  he => he
Span 13-14:  jail => jail
Span 5-6:  political => politics
Span 8-9:  possible => possible
Span 2-3:  promised => promise-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),jail,jail,false), Span(11,12,List(1),freed,free-01,false), Span(8,9,List(2),possible,possible,false), Span(5,6,List(3),political,politics,false), Span(4,5,List(4),all,all,false), Span(2,3,List(5),promised,promise-01,false), Span(1,2,List(6),also,also,false), Span(0,1,List(7),he,he,false)),Map(2 -> possible, 5 -> promise-01, 7 -> he, 1 -> free-01, 4 -> all, 6 -> also, 0 -> jail, 3 -> politics),Map(h -> he, p2 -> politics, j -> jail, p -> possible, a -> all, a2 -> also, f -> free-01, p3 -> promise-01))),[Ljava.lang.String;@16ef02ce,Annotation([Ljava.lang.String;@25a12e25,[Ljava.lang.String;@78dc926f,[Ljava.lang.String;@5911f366),Annotation([Ljava.lang.String;@2982db39,[Ljava.lang.String;@4e069079,[Ledu.cmu.lti.nlp.amr.Dependency;@10f71ff4),Annotation([Ljava.lang.String;@5052d4df,[Ljava.lang.String;@6e15a5ab,[Ljava.lang.String;@4f2fb603),Annotation([Ljava.lang.String;@4556a792,[Ljava.lang.String;@3c1385ce,[Ledu.cmu.lti.nlp.amr.Entity;@25b5b632))
AMR:
(a / all, domain, p3 / promise-01)
(f / free-01, ARG0, h / he)
(f / free-01, ARG1, p / possible)
(f / free-01, ARG2, j / jail)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, p2 / politics)
(p3 / promise-01, mod, a2 / also)

Decoded in 54,739 microseconds
Sentence: mr bush this week publicly promised government and opposition groups in poland and hungary that he would plead their cause at the paris summit

NER Entity: (country :name (name :op "poland"))
NER Entity: (country :name (name :op "hungary"))
Spans:
Span 12-13:  and => and
Span 7-8:  and => and
Span 1-2:  bush => bush-league
Span 19-20:  cause => cause-01
Span 9-10:  groups => group
Span 15-16:  he => he
Span 8-9:  opposition => oppose-01
Span 17-18:  plead => plead-02
Span 5-6:  promised => promise-01
Span 4-5:  publicly => public
Span 23-24:  summit => summit
Span 2-3:  this => this
Span 3-4:  week => week

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),summit,summit,false), Span(19,20,List(1),cause,cause-01,false), Span(17,18,List(2),plead,plead-02,false), Span(15,16,List(3),he,he,false), Span(12,13,List(4),and,and,false), Span(9,10,List(5),groups,group,false), Span(8,9,List(6),opposition,oppose-01,false), Span(7,8,List(7),and,and,false), Span(5,6,List(8),promised,promise-01,false), Span(4,5,List(9),publicly,public,false), Span(3,4,List(10),week,week,false), Span(2,3,List(11),this,this,false), Span(1,2,List(12),bush,bush-league,false)),Map(2 -> plead-02, 5 -> group, 12 -> bush-league, 8 -> promise-01, 7 -> and, 1 -> cause-01, 4 -> and, 11 -> this, 6 -> oppose-01, 0 -> summit, 9 -> public, 3 -> he, 10 -> week),Map(w -> week, h -> he, t -> this, b -> bush-league, p2 -> promise-01, s -> summit, p -> plead-02, g -> group, a -> and, a2 -> and, c -> cause-01, o -> oppose-01, p3 -> public))),[Ljava.lang.String;@3ccc9ff5,Annotation([Ljava.lang.String;@1e19ad02,[Ljava.lang.String;@27ad6dbe,[Ljava.lang.String;@6affe94b),Annotation([Ljava.lang.String;@472d71ce,[Ljava.lang.String;@788aafe3,[Ledu.cmu.lti.nlp.amr.Dependency;@59219de8),Annotation([Ljava.lang.String;@2e06180f,[Ljava.lang.String;@12159864,[Ljava.lang.String;@47c7d682),Annotation([Ljava.lang.String;@10d4159f,[Ljava.lang.String;@53d7825a,[Ledu.cmu.lti.nlp.amr.Entity;@69af0db6))
AMR:
(a2 / and, op, p2 / promise-01)
(c / cause-01, ARG1, s / summit)
(o / oppose-01, ARG0, g / group)
(o / oppose-01, ARG1, a / and)
(p / plead-02, ARG0, h / he)
(p / plead-02, ARG1, c / cause-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, b / bush-league)
(p2 / promise-01, ARG2, g / group)
(p2 / promise-01, manner, p3 / public)
(p2 / promise-01, time, w / week)
(w / week, mod, t / this)

Decoded in 226,463 microseconds
Sentence: all the companies need do is buy address lists or scour the electoral rolls send off one letter promising tempting prizes and our natural optimism dash

Spans:
Span 7-8:  address => address-02
Span 0-1:  all => all
Span 21-22:  and => and
Span 6-7:  buy => buy-01
Span 2-3:  companies => company
Span 12-13:  electoral => elect-01
Span 17-18:  letter => letter
Span 8-9:  lists => list-01
Span 23-24:  natural => natural
Span 3-4:  need => need-01
Span 15-16:  off => off
Span 24-25:  optimism => optimism
Span 9-10:  or => or
Span 18-19:  promising => promise-01
Span 13-14:  rolls => roll
Span 10-11:  scour => scour-02
Span 14-15:  send => send-01
Span 19-20:  tempting => tempt-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),optimism,optimism,false), Span(23,24,List(1),natural,natural,false), Span(21,22,List(2),and,and,false), Span(19,20,List(3),tempting,tempt-01,false), Span(18,19,List(4),promising,promise-01,false), Span(17,18,List(5),letter,letter,false), Span(15,16,List(6),off,off,false), Span(14,15,List(7),send,send-01,false), Span(13,14,List(8),rolls,roll,false), Span(12,13,List(9),electoral,elect-01,false), Span(10,11,List(10),scour,scour-02,false), Span(9,10,List(11),or,or,false), Span(8,9,List(12),lists,list-01,false), Span(7,8,List(13),address,address-02,false), Span(6,7,List(14),buy,buy-01,false), Span(3,4,List(15),need,need-01,false), Span(2,3,List(16),companies,company,false), Span(0,1,List(17),all,all,false)),Map(2 -> and, 5 -> letter, 12 -> list-01, 15 -> need-01, 8 -> roll, 7 -> send-01, 17 -> all, 1 -> natural, 4 -> promise-01, 11 -> or, 14 -> buy-01, 6 -> off, 0 -> optimism, 9 -> elect-01, 16 -> company, 3 -> tempt-01, 10 -> scour-02, 13 -> address-02),Map(e -> elect-01, n -> natural, s2 -> scour-02, b -> buy-01, t -> tempt-01, o3 -> or, a3 -> all, s -> send-01, p -> promise-01, a -> and, o2 -> off, l2 -> list-01, a2 -> address-02, r -> roll, c -> company, l -> letter, o -> optimism, n2 -> need-01))),[Ljava.lang.String;@f8dd88b,Annotation([Ljava.lang.String;@298395a7,[Ljava.lang.String;@7dd61c3b,[Ljava.lang.String;@73d7a607),Annotation([Ljava.lang.String;@52d550fb,[Ljava.lang.String;@32b7b939,[Ledu.cmu.lti.nlp.amr.Dependency;@3be16732),Annotation([Ljava.lang.String;@4b3e2254,[Ljava.lang.String;@5c3fdf63,[Ljava.lang.String;@65630be5),Annotation([Ljava.lang.String;@49a21b63,[Ljava.lang.String;@31b42659,[Ledu.cmu.lti.nlp.amr.Entity;@2a41b68d))
AMR:
(a / and, op, o / optimism)
(a2 / address-02, ARG1, l2 / list-01)
(b / buy-01, ARG1, l2 / list-01)
(e / elect-01, ARG1, a2 / address-02)
(n2 / need-01, ARG0, c / company)
(n2 / need-01, ARG1, n / natural)
(n2 / need-01, mod, a3 / all)
(o3 / or, op, b / buy-01)
(o3 / or, op, s2 / scour-02)
(p / promise-01, ARG0, l / letter)
(p / promise-01, ARG1, a / and)
(s / send-01, ARG0, r / roll)
(s / send-01, ARG1, l / letter)
(s / send-01, direction, o2 / off)
(s2 / scour-02, ARG0, n2 / need-01)
(s2 / scour-02, ARG1, s / send-01)
(t / tempt-01, ARG1, a / and)

Decoded in 551,309 microseconds
Sentence: if vasily vasilievs moscow company is so far the toast of lift at the brixton academy valeria vasilievskis adaptation of the song of lawino at the ica promises to be the honey

Spans:
Span 15-16:  academy => academy
Span 18-19:  adaptation => (thing :ARG1-of adapt-01)
Span 4-5:  company => company
Span 7-8:  far => far
Span 11-12:  lift => lift-01
Span 27-28:  promises => promise-01
Span 6-7:  so => so
Span 21-22:  song => song

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),promises,promise-01,false), Span(21,22,List(1),song,song,false), Span(18,19,List(3, 2),adaptation,(thing :ARG1-of adapt-01),false), Span(15,16,List(4),academy,academy,false), Span(11,12,List(5),lift,lift-01,false), Span(7,8,List(6),far,far,false), Span(6,7,List(7),so,so,false), Span(4,5,List(8),company,company,false)),Map(2 -> thing, 5 -> lift-01, 8 -> company, 7 -> so, 1 -> song, 4 -> academy, 6 -> far, 0 -> promise-01, 3 -> adapt-01),Map(s2 -> so, t -> thing, s -> song, p -> promise-01, a -> adapt-01, a2 -> academy, c -> company, l -> lift-01, f -> far))),[Ljava.lang.String;@4037f8a7,Annotation([Ljava.lang.String;@1aa5bce1,[Ljava.lang.String;@77136571,[Ljava.lang.String;@1a691aca),Annotation([Ljava.lang.String;@6a5dd151,[Ljava.lang.String;@35595365,[Ledu.cmu.lti.nlp.amr.Dependency;@7b72273f),Annotation([Ljava.lang.String;@36ed86a,[Ljava.lang.String;@624218e8,[Ljava.lang.String;@617159bd),Annotation([Ljava.lang.String;@58bab945,[Ljava.lang.String;@4ad98e85,[Ledu.cmu.lti.nlp.amr.Entity;@111be427))
AMR:
(a / adapt-01, ARG1, t / thing)
(a / adapt-01, location, a2 / academy)
(a / adapt-01, time, s / song)
(f / far, degree, s2 / so)
(l / lift-01, ARG0, t / thing)
(l / lift-01, ARG1, p / promise-01)
(p / promise-01, ARG0, c / company)
(p / promise-01, ARG1, s2 / so)

Decoded in 267,205 microseconds
Sentence: a mobile psychologist will now be available at a vets surgery in oxfordshire promising peace of mind for both rover and his owner

Spans:
Span 20-21:  and => and
Span 6-7:  available => available
Span 18-19:  both => both
Span 16-17:  mind => mind
Span 1-2:  mobile => mobile
Span 4-5:  now => now
Span 22-23:  owner => (person :ARG0-of own-01)
Span 14-15:  peace => peace
Span 13-14:  promising => promise-01
Span 2-3:  psychologist => psychologist
Span 10-11:  surgery => surgery

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),owner,(person :ARG0-of own-01),false), Span(20,21,List(2),and,and,false), Span(18,19,List(3),both,both,false), Span(16,17,List(4),mind,mind,false), Span(14,15,List(5),peace,peace,false), Span(13,14,List(6),promising,promise-01,false), Span(10,11,List(7),surgery,surgery,false), Span(6,7,List(8),available,available,false), Span(4,5,List(9),now,now,false), Span(2,3,List(10),psychologist,psychologist,false), Span(1,2,List(11),mobile,mobile,false)),Map(2 -> and, 5 -> peace, 8 -> available, 7 -> surgery, 1 -> own-01, 11 -> mobile, 4 -> mind, 6 -> promise-01, 9 -> now, 0 -> person, 10 -> psychologist, 3 -> both),Map(n -> now, b -> both, m2 -> mobile, p2 -> peace, s -> surgery, m -> mind, p -> person, p4 -> psychologist, a -> and, a2 -> available, o -> own-01, p3 -> promise-01))),[Ljava.lang.String;@3e1fc537,Annotation([Ljava.lang.String;@17ccbdbe,[Ljava.lang.String;@2bd1127,[Ljava.lang.String;@4ab118d8),Annotation([Ljava.lang.String;@30d63337,[Ljava.lang.String;@3ebc78ed,[Ledu.cmu.lti.nlp.amr.Dependency;@47a72fc8),Annotation([Ljava.lang.String;@31321838,[Ljava.lang.String;@4fd41dc3,[Ljava.lang.String;@6eee1626),Annotation([Ljava.lang.String;@50f051af,[Ljava.lang.String;@5182e1ac,[Ledu.cmu.lti.nlp.amr.Entity;@67ae0d02))
AMR:
(a / and, mod, b / both)
(a / and, op, p / person)
(a2 / available, mod, p4 / psychologist)
(a2 / available, time, n / now)
(o / own-01, ARG0, p / person)
(p / person, poss, m / mind)
(p2 / peace, mod, m / mind)
(p2 / peace, mod, p3 / promise-01)
(p3 / promise-01, ARG0, p4 / psychologist)
(p4 / psychologist, mod, m2 / mobile)
(s / surgery, poss, p2 / peace)

Decoded in 75,268 microseconds
Sentence: mr howe said trafford council had promised not to use the extra data from its polltax forms even in paper files

Spans:
Span 4-5:  council => council
Span 12-13:  data => data
Span 11-12:  extra => extra
Span 20-21:  files => file
Span 16-17:  forms => form
Span 19-20:  paper => paper
Span 6-7:  promised => promise-01
Span 2-3:  said => say-01
Span 9-10:  use => use-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),files,file,false), Span(19,20,List(1),paper,paper,false), Span(16,17,List(2),forms,form,false), Span(12,13,List(3),data,data,false), Span(11,12,List(4),extra,extra,false), Span(9,10,List(5),use,use-01,false), Span(6,7,List(6),promised,promise-01,false), Span(4,5,List(7),council,council,false), Span(2,3,List(8),said,say-01,false)),Map(2 -> form, 5 -> use-01, 8 -> say-01, 7 -> council, 1 -> paper, 4 -> extra, 6 -> promise-01, 0 -> file, 3 -> data),Map(e -> extra, p2 -> promise-01, s -> say-01, d -> data, p -> paper, c -> council, u -> use-01, f2 -> form, f -> file))),[Ljava.lang.String;@53d8337b,Annotation([Ljava.lang.String;@171bfb3e,[Ljava.lang.String;@2e0baf4c,[Ljava.lang.String;@121be32),Annotation([Ljava.lang.String;@4e4dc532,[Ljava.lang.String;@53cd7dc7,[Ledu.cmu.lti.nlp.amr.Dependency;@57fcbecc),Annotation([Ljava.lang.String;@12527035,[Ljava.lang.String;@6244b0f8,[Ljava.lang.String;@bbe9c2f),Annotation([Ljava.lang.String;@effd7af,[Ljava.lang.String;@3ea929da,[Ledu.cmu.lti.nlp.amr.Entity;@53fac759))
AMR:
(d / data, location, f2 / form)
(d / data, mod, e / extra)
(f / file, mod, p / paper)
(p2 / promise-01, ARG0, c / council)
(p2 / promise-01, ARG1, u / use-01)
(s / say-01, ARG1, p2 / promise-01)
(u / use-01, ARG1, d / data)
(u / use-01, ARG2, f / file)

Decoded in 71,321 microseconds
Sentence: 3 flyer is promised for later in the season

Spans:
Span 0-1:  3 => 3
Span 5-6:  later => late
Span 3-4:  promised => promise-01
Span 8-9:  season => season

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),season,season,false), Span(5,6,List(1),later,late,false), Span(3,4,List(2),promised,promise-01,false), Span(0,1,List(3),3,3,false)),Map(2 -> promise-01, 1 -> late, 0 -> season, 3 -> 3),Map(s -> season, p -> promise-01, l -> late, 3 -> 3))),[Ljava.lang.String;@7535cf21,Annotation([Ljava.lang.String;@1fb1bba5,[Ljava.lang.String;@4d965de4,[Ljava.lang.String;@4aee4b87),Annotation([Ljava.lang.String;@62a0b27f,[Ljava.lang.String;@2426e26f,[Ledu.cmu.lti.nlp.amr.Dependency;@74dbf7f3),Annotation([Ljava.lang.String;@1573ae75,[Ljava.lang.String;@5dc28e53,[Ljava.lang.String;@100e1b3c),Annotation([Ljava.lang.String;@e1e0860,[Ljava.lang.String;@55b7dddd,[Ledu.cmu.lti.nlp.amr.Entity;@1a470422))
AMR:
(p / promise-01, ARG1, 3 / 3)
(p / promise-01, location, s / season)
(p / promise-01, manner, l / late)

Decoded in 9,259 microseconds
Sentence: the car we always promised ourselves

Spans:
Span 3-4:  always => always
Span 1-2:  car => car
Span 4-5:  promised => promise-01
Span 2-3:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),promised,promise-01,false), Span(3,4,List(1),always,always,false), Span(2,3,List(2),we,we,false), Span(1,2,List(3),car,car,false)),Map(2 -> we, 1 -> always, 0 -> promise-01, 3 -> car),Map(w -> we, p -> promise-01, a -> always, c -> car))),[Ljava.lang.String;@2c6061a8,Annotation([Ljava.lang.String;@6bab735a,[Ljava.lang.String;@452250ef,[Ljava.lang.String;@4fef9e5e),Annotation([Ljava.lang.String;@7c865651,[Ljava.lang.String;@578d1fb5,[Ledu.cmu.lti.nlp.amr.Dependency;@721cd0fa),Annotation([Ljava.lang.String;@41dc079d,[Ljava.lang.String;@5477f632,[Ljava.lang.String;@fc477f1),Annotation([Ljava.lang.String;@2b9e774d,[Ljava.lang.String;@30aa769a,[Ledu.cmu.lti.nlp.amr.Entity;@750916c))
AMR:
(p / promise-01, ARG0, w / we)
(p / promise-01, ARG1, c / car)
(p / promise-01, time, a / always)

Decoded in 7,655 microseconds
Sentence: they promise a quick and clean victory to a chief executive whose aides are strong at crisis management and poll analysis but who have no conception at all beyond those imperatives

Spans:
Span 12-13:  aides => (have-org-role-91 :ARG2 aide)
Span 27-28:  all => all
Span 20-21:  analysis => analyze-01
Span 18-19:  and => and
Span 4-5:  and => and
Span 28-29:  beyond => beyond
Span 21-22:  but => contrast-01
Span 9-10:  chief => (have-org-role-91 :ARG2 chief)
Span 5-6:  clean => clean
Span 16-17:  crisis => crisis
Span 10-11:  executive => executive
Span 17-18:  management => manage-01
Span 24-25:  no => -
Span 19-20:  poll => poll-01
Span 1-2:  promise => promise-01
Span 3-4:  quick => quick
Span 14-15:  strong => strong
Span 0-1:  they => they

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),beyond,beyond,false), Span(27,28,List(1),all,all,false), Span(24,25,List(2),no,-,false), Span(21,22,List(3),but,contrast-01,false), Span(20,21,List(4),analysis,analyze-01,false), Span(19,20,List(5),poll,poll-01,false), Span(18,19,List(6),and,and,false), Span(17,18,List(7),management,manage-01,false), Span(16,17,List(8),crisis,crisis,false), Span(14,15,List(9),strong,strong,false), Span(12,13,List(11, 10),aides,(have-org-role-91 :ARG2 aide),false), Span(10,11,List(12),executive,executive,false), Span(9,10,List(14, 13),chief,(have-org-role-91 :ARG2 chief),false), Span(5,6,List(15),clean,clean,false), Span(4,5,List(16),and,and,false), Span(3,4,List(17),quick,quick,false), Span(1,2,List(18),promise,promise-01,false), Span(0,1,List(19),they,they,false)),Map(2 -> -, 5 -> poll-01, 12 -> executive, 15 -> clean, 8 -> crisis, 18 -> promise-01, 7 -> manage-01, 17 -> quick, 1 -> all, 4 -> analyze-01, 11 -> aide, 14 -> chief, 6 -> and, 0 -> beyond, 9 -> strong, 16 -> and, 19 -> they, 3 -> contrast-01, 10 -> have-org-role-91, 13 -> have-org-role-91),Map(e -> executive, h -> have-org-role-91, q -> quick, h2 -> have-org-role-91, t -> they, b -> beyond, p2 -> promise-01, c4 -> clean, a3 -> and, s -> strong, m -> manage-01, p -> poll-01, c3 -> chief, a -> all, a5 -> and, a2 -> analyze-01, - -> -, c -> contrast-01, c2 -> crisis, a4 -> aide))),[Ljava.lang.String;@3a7b4d34,Annotation([Ljava.lang.String;@7509aeea,[Ljava.lang.String;@4ebac0ad,[Ljava.lang.String;@46bfc63c),Annotation([Ljava.lang.String;@586fb16d,[Ljava.lang.String;@ce99877,[Ledu.cmu.lti.nlp.amr.Dependency;@3c18b340),Annotation([Ljava.lang.String;@79a04d92,[Ljava.lang.String;@b44eaa0,[Ljava.lang.String;@5987b427),Annotation([Ljava.lang.String;@5c449a5c,[Ljava.lang.String;@1bf23d57,[Ledu.cmu.lti.nlp.amr.Entity;@3c992916))
AMR:
(a2 / analyze-01, ARG1, p / poll-01)
(a3 / and, op, a2 / analyze-01)
(a3 / and, op, m / manage-01)
(a5 / and, op, c4 / clean)
(a5 / and, op, q / quick)
(b / beyond, op, a5 / and)
(c / contrast-01, ARG1, a5 / and)
(c / contrast-01, ARG2, s / strong)
(h / have-org-role-91, ARG1, e / executive)
(h / have-org-role-91, ARG2, a4 / aide)
(h2 / have-org-role-91, ARG0, e / executive)
(h2 / have-org-role-91, ARG2, c3 / chief)
(m / manage-01, ARG1, c2 / crisis)
(p / poll-01, ARG1, a / all)
(p2 / promise-01, ARG0, t / they)
(p2 / promise-01, ARG1, a5 / and)
(s / strong, domain, h / have-org-role-91)
(s / strong, polarity, - / -)
(s / strong, topic, m / manage-01)

Decoded in 176,190 microseconds
Sentence: we were very keen to get the new uniforms and liveries they promised

Spans:
Span 9-10:  and => and
Span 3-4:  keen => keen-41
Span 7-8:  new => new
Span 12-13:  promised => promise-01
Span 11-12:  they => they
Span 8-9:  uniforms => uniform-01
Span 2-3:  very => very
Span 0-1:  we => we

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),promised,promise-01,false), Span(11,12,List(1),they,they,false), Span(9,10,List(2),and,and,false), Span(8,9,List(3),uniforms,uniform-01,false), Span(7,8,List(4),new,new,false), Span(3,4,List(5),keen,keen-41,false), Span(2,3,List(6),very,very,false), Span(0,1,List(7),we,we,false)),Map(2 -> and, 5 -> keen-41, 7 -> we, 1 -> they, 4 -> new, 6 -> very, 0 -> promise-01, 3 -> uniform-01),Map(w -> we, n -> new, k -> keen-41, t -> they, v -> very, p -> promise-01, a -> and, u -> uniform-01))),[Ljava.lang.String;@6b58826e,Annotation([Ljava.lang.String;@7fdb3ad0,[Ljava.lang.String;@11f26f44,[Ljava.lang.String;@4366e290),Annotation([Ljava.lang.String;@17a47e82,[Ljava.lang.String;@306d94ee,[Ledu.cmu.lti.nlp.amr.Dependency;@6a4cae18),Annotation([Ljava.lang.String;@5039e02d,[Ljava.lang.String;@7acd381,[Ljava.lang.String;@6371be16),Annotation([Ljava.lang.String;@4076c95b,[Ljava.lang.String;@369d966d,[Ledu.cmu.lti.nlp.amr.Entity;@23feea1e))
AMR:
(a / and, mod, n / new)
(a / and, op, p / promise-01)
(a / and, op, u / uniform-01)
(k / keen-41, ARG1, w / we)
(k / keen-41, degree, v / very)
(k / keen-41, domain, a / and)
(p / promise-01, ARG0, t / they)

Decoded in 101,137 microseconds
