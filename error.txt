 ### Tokenizing input ###
/home/sabar/Desktop/nlp_project/jamr/tools/cdec/corpus/support/utf8-normalize.sh: Cannot find ICU uconv (http://site.icu-project.org/) ... falling back to iconv. Quality may suffer.
 ### Running NER system ###
~/Desktop/nlp_project/jamr/tools/IllinoisNerExtended ~/Desktop/nlp_project/jamr
Adding feature: Forms
Adding feature: Capitalization
Adding feature: WordTypeInformation
Adding feature: Affixes
Adding feature: PreviousTag1
Adding feature: PreviousTag2
Adding feature: PreviousTagPatternLevel1
Adding feature: PreviousTagPatternLevel2
Adding feature: PrevTagsForContext
Adding feature: PredictionsLevel1
Adding feature: GazetteersFeatures
Adding feature: BrownClusterPaths
Loading gazetteers....
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
	loading gazetteer:....ner-ext/KnownLists/known_nationalities.lst
	loading gazetteer:....ner-ext/KnownLists/known_names.big.lst
	loading gazetteer:....ner-ext/KnownLists/WikiPeople.lst
	loading gazetteer:....ner-ext/KnownLists/temporal_words.txt
	loading gazetteer:....ner-ext/KnownLists/WikiLocationsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/measurments.txt
	loading gazetteer:....ner-ext/KnownLists/WikiPeopleRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/cardinalNumber.txt
	loading gazetteer:....ner-ext/KnownLists/WikiManMadeObjectNames.lst
	loading gazetteer:....ner-ext/KnownLists/known_corporations.lst
	loading gazetteer:....ner-ext/KnownLists/WikiCompetitionsBattlesEvents.lst
	loading gazetteer:....ner-ext/KnownLists/currencyFinal.txt
	loading gazetteer:....ner-ext/KnownLists/WikiOrganizationsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/WikiOrganizations.lst
	loading gazetteer:....ner-ext/KnownLists/known_place.lst
	loading gazetteer:....ner-ext/KnownLists/KnownNationalities.txt
	loading gazetteer:....ner-ext/KnownLists/Occupations.txt
	loading gazetteer:....ner-ext/KnownLists/WikiSongs.lst
	loading gazetteer:....ner-ext/KnownLists/WikiArtWorkRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_title.lst
	loading gazetteer:....ner-ext/KnownLists/ordinalNumber.txt
	loading gazetteer:....ner-ext/KnownLists/known_name.lst
	loading gazetteer:....ner-ext/KnownLists/WikiManMadeObjectNamesRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/WikiArtWork.lst
	loading gazetteer:....ner-ext/KnownLists/WikiSongsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_country.lst
	loading gazetteer:....ner-ext/KnownLists/WikiFilms.lst
	loading gazetteer:....ner-ext/KnownLists/WikiCompetitionsBattlesEventsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_jobs.lst
	loading gazetteer:....ner-ext/KnownLists/VincentNgPeopleTitles.txt
	loading gazetteer:....ner-ext/KnownLists/WikiFilmsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_state.lst
	loading gazetteer:....ner-ext/KnownLists/WikiLocations.lst
found 33 gazetteers
1288301 words added
95262 words added
85963 words added

Working parameters are:
	inferenceMethod=GREEDY
	beamSize=5
	thresholdPrediction=false
	predictionConfidenceThreshold=-1.0
	labelTypes
		PER		ORG		LOC		MISC
	logging=false
	debuggingLogPath=null
	forceNewSentenceOnLineBreaks=true
	keepOriginalFileTokenizationAndSentenceSplitting=false
	taggingScheme=BILOU
	tokenizationScheme=DualTokenizationScheme
	pathToModelFile=data/Models/CoNLL/finalSystemBILOU.model
Brown clusters resource: 
	-Path: brown-clusters/brown-english-wikitext.case-intact.txt-c1000-freq10-v3.txt
	-WordThres=5
	-IsLowercased=false
Brown clusters resource: 
	-Path: brown-clusters/brownBllipClusters
	-WordThres=5
	-IsLowercased=false
Brown clusters resource: 
	-Path: brown-clusters/brown-rcv1.clean.tokenized-CoNLL03.txt-c1000-freq1.txt
	-WordThres=5
	-IsLowercased=false

Tagging file: /tmp/jamr-3517.snt.tmp
Reading model file : data/Models/CoNLL/finalSystemBILOU.model.level1
Reading model file : data/Models/CoNLL/finalSystemBILOU.model.level2
Extracting features for level 2 inference
Done - Extracting features for level 2 inference
~/Desktop/nlp_project/jamr
 ### Running dependency parser ###
Adding annotator tokenize
Adding annotator ssplit
Adding annotator parse
Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ... done [1.2 sec].
 ### Running JAMR ###
Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: the book reads like a kind of inventory of narrative elements derived from the prostitutes realist plot strung together in rapidfire order with little concern for psychological motivation or character development

Spans:
Span 1-2:  book => book
Span 29-30:  character => character
Span 24-25:  concern => concern-01
Span 11-12:  derived => derive-01
Span 30-31:  development => develop-02
Span 10-11:  elements => element
Span 7-8:  inventory => inventory
Span 5-6:  kind => kind
Span 23-24:  little => little
Span 27-28:  motivation => motivate-01
Span 9-10:  narrative => narrative
Span 28-29:  or => or
Span 16-17:  plot => plot-01
Span 14-15:  prostitutes => prostitute-01
Span 26-27:  psychological => psychological
Span 2-3:  reads => read-01
Span 15-16:  realist => realist
Span 18-19:  together => together

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),development,develop-02,false), Span(29,30,List(1),character,character,false), Span(28,29,List(2),or,or,false), Span(27,28,List(3),motivation,motivate-01,false), Span(26,27,List(4),psychological,psychological,false), Span(24,25,List(5),concern,concern-01,false), Span(23,24,List(6),little,little,false), Span(18,19,List(7),together,together,false), Span(16,17,List(8),plot,plot-01,false), Span(15,16,List(9),realist,realist,false), Span(14,15,List(10),prostitutes,prostitute-01,false), Span(11,12,List(11),derived,derive-01,false), Span(10,11,List(12),elements,element,false), Span(9,10,List(13),narrative,narrative,false), Span(7,8,List(14),inventory,inventory,false), Span(5,6,List(15),kind,kind,false), Span(2,3,List(16),reads,read-01,false), Span(1,2,List(17),book,book,false)),Map(2 -> or, 5 -> concern-01, 12 -> element, 15 -> kind, 8 -> plot-01, 7 -> together, 17 -> book, 1 -> character, 4 -> psychological, 11 -> derive-01, 14 -> inventory, 6 -> little, 0 -> develop-02, 9 -> realist, 16 -> read-01, 3 -> motivate-01, 10 -> prostitute-01, 13 -> narrative),Map(e -> element, n -> narrative, b -> book, k -> kind, t -> together, p2 -> plot-01, d -> develop-02, m -> motivate-01, r2 -> read-01, p -> psychological, d2 -> derive-01, i -> inventory, r -> realist, c -> character, l -> little, o -> or, p3 -> prostitute-01, c2 -> concern-01))),[Ljava.lang.String;@55adb150,Annotation([Ljava.lang.String;@7e542721,[Ljava.lang.String;@46d52852,[Ljava.lang.String;@544a43d2),Annotation([Ljava.lang.String;@57aabb39,[Ljava.lang.String;@9e9c826,[Ledu.cmu.lti.nlp.amr.Dependency;@53533bdf),Annotation([Ljava.lang.String;@7d7fd835,[Ljava.lang.String;@544bbff1,[Ljava.lang.String;@39269273),Annotation([Ljava.lang.String;@1358d955,[Ljava.lang.String;@2e24655f,[Ledu.cmu.lti.nlp.amr.Entity;@577b57a3))
AMR:
(c2 / concern-01, ARG1, o / or)
(c2 / concern-01, mod, l / little)
(d / develop-02, ARG1, c / character)
(d / develop-02, ARG2, p2 / plot-01)
(d2 / derive-01, ARG0, t / together)
(d2 / derive-01, ARG1, e / element)
(d2 / derive-01, ARG2, p2 / plot-01)
(e / element, mod, n / narrative)
(i / inventory, mod, k / kind)
(i / inventory, poss, e / element)
(m / motivate-01, mod, p / psychological)
(o / or, op, d / develop-02)
(o / or, op, m / motivate-01)
(p2 / plot-01, ARG1, r / realist)
(p3 / prostitute-01, ARG1, p2 / plot-01)
(r2 / read-01, ARG0, b / book)
(r2 / read-01, ARG1, c2 / concern-01)

Decoded in 4,787,510 microseconds
Sentence: the confrontational view of morality which pitches a persons own interests and goals as not only occasionally in conflict with his obligations to others but as deriving from independent and fundamentally different sources is essentially an individualistic conception

Spans:
Span 29-30:  and => and
Span 11-12:  and => and
Span 24-25:  but => contrast-01
Span 18-19:  conflict => conflict-01
Span 1-2:  confrontational => confrontation
Span 31-32:  different => differ-02
Span 34-35:  essentially => essential
Span 30-31:  fundamentally => fundamental
Span 12-13:  goals => goal
Span 28-29:  independent => (depend-01 :polarity -)
Span 36-37:  individualistic => individualistic
Span 10-11:  interests => interest
Span 4-5:  morality => morality
Span 21-22:  obligations => obligate-01
Span 16-17:  occasionally => occasional
Span 15-16:  only => only
Span 23-24:  others => other
Span 8-9:  persons => person
Span 32-33:  sources => source

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),individualistic,individualistic,false), Span(34,35,List(1),essentially,essential,false), Span(32,33,List(2),sources,source,false), Span(31,32,List(3),different,differ-02,false), Span(30,31,List(4),fundamentally,fundamental,false), Span(29,30,List(5),and,and,false), Span(28,29,List(7, 6),independent,(depend-01 :polarity -),false), Span(24,25,List(8),but,contrast-01,false), Span(23,24,List(9),others,other,false), Span(21,22,List(10),obligations,obligate-01,false), Span(18,19,List(11),conflict,conflict-01,false), Span(16,17,List(12),occasionally,occasional,false), Span(15,16,List(13),only,only,false), Span(12,13,List(14),goals,goal,false), Span(11,12,List(15),and,and,false), Span(10,11,List(16),interests,interest,false), Span(8,9,List(17),persons,person,false), Span(4,5,List(18),morality,morality,false), Span(1,2,List(19),confrontational,confrontation,false)),Map(2 -> source, 5 -> and, 12 -> occasional, 15 -> and, 8 -> contrast-01, 18 -> morality, 7 -> -, 17 -> person, 1 -> essential, 4 -> fundamental, 11 -> conflict-01, 14 -> goal, 6 -> depend-01, 0 -> individualistic, 9 -> other, 16 -> interest, 19 -> confrontation, 3 -> differ-02, 10 -> obligate-01, 13 -> only),Map(e -> essential, o3 -> occasional, s -> source, m -> morality, d -> differ-02, p -> person, g -> goal, c3 -> confrontation, a -> and, d2 -> depend-01, o2 -> obligate-01, i2 -> interest, a2 -> and, i -> individualistic, c -> contrast-01, f -> fundamental, o -> other, o4 -> only, c2 -> conflict-01))),[Ljava.lang.String;@5baf41f4,Annotation([Ljava.lang.String;@4f132932,[Ljava.lang.String;@72f5ba2c,[Ljava.lang.String;@6291d9aa),Annotation([Ljava.lang.String;@55695a74,[Ljava.lang.String;@77b1a17a,[Ledu.cmu.lti.nlp.amr.Dependency;@2ee08dfa),Annotation([Ljava.lang.String;@18893021,[Ljava.lang.String;@56b6d31c,[Ljava.lang.String;@7cddffbd),Annotation([Ljava.lang.String;@52c11156,[Ljava.lang.String;@1594f8c,[Ledu.cmu.lti.nlp.amr.Entity;@e757105))
AMR:
(a / and, op, d / differ-02)
(a / and, op, d2 / depend-01)
(a / and, op, s / source)
(a2 / and, op, g / goal)
(a2 / and, op, i2 / interest)
(a2 / and, op, p / person)
(c / contrast-01, ARG0, c3 / confrontation)
(c / contrast-01, ARG2, a / and)
(c2 / conflict-01, ARG0, e / essential)
(c2 / conflict-01, ARG1, o2 / obligate-01)
(d / differ-02, ARG1, a2 / and)
(d / differ-02, mod, f / fundamental)
(d2 / depend-01, ARG0, m / morality)
(d2 / depend-01, ARG1, i / individualistic)
(d2 / depend-01, polarity, -)
(o2 / obligate-01, ARG1, o / other)
(o2 / obligate-01, ARG2, c / contrast-01)
(o3 / occasional, mod, o4 / only)
(o3 / occasional, op, o / other)

Decoded in 981,365 microseconds
Sentence: donna can warn him but is aware that though his pain will be five time as great as the satisfaction each of them will derive from the attack given that there are ten bashers and one victim their total satisfaction is greater than his pain

Spans:
Span 34-35:  and => and
Span 27-28:  attack => attack-01
Span 4-5:  but => contrast-01
Span 1-2:  can => possible
Span 24-25:  derive => derive-01
Span 20-21:  each => each
Span 13-14:  five => 5
Span 28-29:  given => give-01
Span 16-17:  great => great
Span 41-42:  greater => great
Span 44-45:  pain => pain-01
Span 10-11:  pain => pain-01
Span 39-40:  satisfaction => satisfy-01
Span 19-20:  satisfaction => satisfy-01
Span 14-15:  time => time
Span 36-37:  victim => victim
Span 2-3:  warn => warn-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),pain,pain-01,false), Span(41,42,List(1),greater,great,false), Span(39,40,List(2),satisfaction,satisfy-01,false), Span(36,37,List(3),victim,victim,false), Span(34,35,List(4),and,and,false), Span(28,29,List(5),given,give-01,false), Span(27,28,List(6),attack,attack-01,false), Span(24,25,List(7),derive,derive-01,false), Span(20,21,List(8),each,each,false), Span(19,20,List(9),satisfaction,satisfy-01,false), Span(16,17,List(10),great,great,false), Span(14,15,List(11),time,time,false), Span(13,14,List(12),five,5,false), Span(10,11,List(13),pain,pain-01,false), Span(4,5,List(14),but,contrast-01,false), Span(2,3,List(15),warn,warn-01,false), Span(1,2,List(16),can,possible,false)),Map(2 -> satisfy-01, 5 -> give-01, 12 -> 5, 15 -> warn-01, 8 -> each, 7 -> derive-01, 1 -> great, 4 -> and, 11 -> time, 14 -> contrast-01, 6 -> attack-01, 0 -> pain-01, 9 -> satisfy-01, 16 -> possible, 3 -> victim, 10 -> great, 13 -> pain-01),Map(e -> each, w -> warn-01, g3 -> great, s2 -> satisfy-01, 5 -> 5, t -> time, p2 -> pain-01, s -> satisfy-01, v -> victim, d -> derive-01, g2 -> give-01, p -> pain-01, g -> great, a -> and, a2 -> attack-01, c -> contrast-01, p3 -> possible))),[Ljava.lang.String;@404f06ad,Annotation([Ljava.lang.String;@43f68d7,[Ljava.lang.String;@5efbfd6e,[Ljava.lang.String;@71bb7179),Annotation([Ljava.lang.String;@4916f944,[Ljava.lang.String;@34704d9,[Ledu.cmu.lti.nlp.amr.Dependency;@2b8f443d),Annotation([Ljava.lang.String;@4ac91722,[Ljava.lang.String;@580ddf89,[Ljava.lang.String;@76cec888),Annotation([Ljava.lang.String;@1cf95a8,[Ljava.lang.String;@636a4985,[Ledu.cmu.lti.nlp.amr.Entity;@5700edc0))
AMR:
(a / and, op, g2 / give-01)
(a2 / attack-01, ARG1, p2 / pain-01)
(c / contrast-01, ARG1, p3 / possible)
(d / derive-01, ARG0, 5 / 5)
(d / derive-01, ARG1, s2 / satisfy-01)
(d / derive-01, ARG2, a2 / attack-01)
(g / great, compared-to, p / pain-01)
(g2 / give-01, ARG1, a2 / attack-01)
(g3 / great, domain, p2 / pain-01)
(p2 / pain-01, ARG1, s / satisfy-01)
(p3 / possible, domain, w / warn-01)
(s / satisfy-01, ARG0, g / great)
(s / satisfy-01, ARG1, v / victim)
(s2 / satisfy-01, ARG1, e / each)
(t / time, mod, g3 / great)
(w / warn-01, ARG1, a2 / attack-01)

Decoded in 463,062 microseconds
Sentence: what is the mechanism of this from where is the extra liveliness derived

Spans:
Span 12-13:  derived => derive-01
Span 10-11:  extra => extra
Span 3-4:  mechanism => mechanism
Span 5-6:  this => this

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),derived,derive-01,false), Span(10,11,List(1),extra,extra,false), Span(5,6,List(2),this,this,false), Span(3,4,List(3),mechanism,mechanism,false)),Map(2 -> this, 1 -> extra, 0 -> derive-01, 3 -> mechanism),Map(e -> extra, t -> this, m -> mechanism, d -> derive-01))),[Ljava.lang.String;@7df904df,Annotation([Ljava.lang.String;@67af0d15,[Ljava.lang.String;@158412e1,[Ljava.lang.String;@11f37cd0),Annotation([Ljava.lang.String;@88744e5,[Ljava.lang.String;@68bc1ac2,[Ledu.cmu.lti.nlp.amr.Dependency;@1580ec46),Annotation([Ljava.lang.String;@4317f2b1,[Ljava.lang.String;@593e64e0,[Ljava.lang.String;@f50dbe6),Annotation([Ljava.lang.String;@594e0e5,[Ljava.lang.String;@7138dd3f,[Ledu.cmu.lti.nlp.amr.Entity;@4c458d2b))
AMR:
(d / derive-01, ARG0, m / mechanism)
(d / derive-01, ARG1, t / this)
(d / derive-01, ARG2, e / extra)

Decoded in 46,298 microseconds
Sentence: the markedly sceptical attitude and arguments which run through his writings are derived from sextus and from others such as michel montaigne and pierre charron who were themselves influenced by sextus

Spans:
Span 22-23:  and => and
Span 15-16:  and => and
Span 4-5:  and => and
Span 5-6:  arguments => argue-01
Span 3-4:  attitude => attitude
Span 12-13:  derived => derive-01
Span 28-29:  influenced => influence-01
Span 17-18:  others => other
Span 2-3:  sceptical => sceptical
Span 18-19:  such => such
Span 10-11:  writings => (thing :ARG1-of write-01)

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),influenced,influence-01,false), Span(22,23,List(1),and,and,false), Span(18,19,List(2),such,such,false), Span(17,18,List(3),others,other,false), Span(15,16,List(4),and,and,false), Span(12,13,List(5),derived,derive-01,false), Span(10,11,List(7, 6),writings,(thing :ARG1-of write-01),false), Span(5,6,List(8),arguments,argue-01,false), Span(4,5,List(9),and,and,false), Span(3,4,List(10),attitude,attitude,false), Span(2,3,List(11),sceptical,sceptical,false)),Map(2 -> such, 5 -> derive-01, 8 -> argue-01, 7 -> write-01, 1 -> and, 11 -> sceptical, 4 -> and, 6 -> thing, 9 -> and, 0 -> influence-01, 10 -> attitude, 3 -> other),Map(w -> write-01, s2 -> sceptical, t -> thing, a3 -> argue-01, s -> such, d -> derive-01, a -> and, a5 -> attitude, a2 -> and, i -> influence-01, o -> other, a4 -> and))),[Ljava.lang.String;@d18ffce,Annotation([Ljava.lang.String;@64423419,[Ljava.lang.String;@366a88bb,[Ljava.lang.String;@c36c8e6),Annotation([Ljava.lang.String;@60bf7a4d,[Ljava.lang.String;@3af686da,[Ledu.cmu.lti.nlp.amr.Dependency;@f0f7074),Annotation([Ljava.lang.String;@3e9fd765,[Ljava.lang.String;@6ff64801,[Ljava.lang.String;@11f17314),Annotation([Ljava.lang.String;@2ba2f40,[Ljava.lang.String;@d741426,[Ledu.cmu.lti.nlp.amr.Entity;@3fd6d1b0))
AMR:
(a2 / and, op, t / thing)
(a4 / and, op, a3 / argue-01)
(a5 / attitude, mod, s2 / sceptical)
(d / derive-01, ARG1, a5 / attitude)
(d / derive-01, ARG2, a / and)
(d / derive-01, manner, a2 / and)
(d / derive-01, purpose, a4 / and)
(i / influence-01, ARG0, a / and)
(i / influence-01, ARG1, o / other)
(s / such, mod, o / other)
(w / write-01, ARG1, t / thing)

Decoded in 777,161 microseconds
Sentence: cubism was used as a vehicle for the laws of simultaneous contrast of colour derived from chevreul via gauguin van gogh the symbolists and the fauves by robert and sonia delaunay

Spans:
Span 28-29:  and => and
Span 23-24:  and => and
Span 13-14:  colour => colour
Span 11-12:  contrast => contrast-01
Span 14-15:  derived => derive-01
Span 8-9:  laws => law
Span 10-11:  simultaneous => simultaneous
Span 2-3:  used => use-01
Span 19-20:  van => van
Span 5-6:  vehicle => vehicle

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),and,and,false), Span(23,24,List(1),and,and,false), Span(19,20,List(2),van,van,false), Span(14,15,List(3),derived,derive-01,false), Span(13,14,List(4),colour,colour,false), Span(11,12,List(5),contrast,contrast-01,false), Span(10,11,List(6),simultaneous,simultaneous,false), Span(8,9,List(7),laws,law,false), Span(5,6,List(8),vehicle,vehicle,false), Span(2,3,List(9),used,use-01,false)),Map(2 -> van, 5 -> contrast-01, 8 -> vehicle, 7 -> law, 1 -> and, 4 -> colour, 6 -> simultaneous, 9 -> use-01, 0 -> and, 3 -> derive-01),Map(v2 -> vehicle, s -> simultaneous, d -> derive-01, v -> van, a -> and, a2 -> and, u -> use-01, l -> law, c -> colour, c2 -> contrast-01))),[Ljava.lang.String;@706b6c9,Annotation([Ljava.lang.String;@49ca49b9,[Ljava.lang.String;@7fae3687,[Ljava.lang.String;@67e1a8e),Annotation([Ljava.lang.String;@410163f6,[Ljava.lang.String;@4249ccd1,[Ledu.cmu.lti.nlp.amr.Dependency;@7b25cf56),Annotation([Ljava.lang.String;@6f4f5643,[Ljava.lang.String;@41a881cc,[Ljava.lang.String;@1de199c1),Annotation([Ljava.lang.String;@46355d3a,[Ljava.lang.String;@597baed8,[Ledu.cmu.lti.nlp.amr.Entity;@471414cd))
AMR:
(a / and, op, u / use-01)
(c2 / contrast-01, ARG1, d / derive-01)
(c2 / contrast-01, ARG2, a / and)
(c2 / contrast-01, mod, s / simultaneous)
(d / derive-01, ARG1, c / colour)
(l / law, topic, c2 / contrast-01)
(u / use-01, ARG1, a2 / and)
(u / use-01, ARG2, v2 / vehicle)
(v / van, topic, a2 / and)

Decoded in 310,521 microseconds
Sentence: one in every four purchases from your local chemist contains compounds derived from rainforest species

Spans:
Span 8-9:  chemist => chemist
Span 9-10:  contains => contain-01
Span 11-12:  derived => derive-01
Span 2-3:  every => every
Span 3-4:  four => 4
Span 7-8:  local => local
Span 4-5:  purchases => purchase-01
Span 14-15:  species => species

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),species,species,false), Span(11,12,List(1),derived,derive-01,false), Span(9,10,List(2),contains,contain-01,false), Span(8,9,List(3),chemist,chemist,false), Span(7,8,List(4),local,local,false), Span(4,5,List(5),purchases,purchase-01,false), Span(3,4,List(6),four,4,false), Span(2,3,List(7),every,every,false)),Map(2 -> contain-01, 5 -> purchase-01, 7 -> every, 1 -> derive-01, 4 -> local, 6 -> 4, 0 -> species, 3 -> chemist),Map(e -> every, s -> species, d -> derive-01, p -> purchase-01, 4 -> 4, l -> local, c -> contain-01, c2 -> chemist))),[Ljava.lang.String;@7761c32f,Annotation([Ljava.lang.String;@33557fe4,[Ljava.lang.String;@323f6c10,[Ljava.lang.String;@61cfa835),Annotation([Ljava.lang.String;@82c61be,[Ljava.lang.String;@19c50523,[Ledu.cmu.lti.nlp.amr.Dependency;@55d44a0c),Annotation([Ljava.lang.String;@644985d9,[Ljava.lang.String;@16f29cff,[Ljava.lang.String;@1221351e),Annotation([Ljava.lang.String;@42264dde,[Ljava.lang.String;@60c24bbf,[Ledu.cmu.lti.nlp.amr.Entity;@73fb1a39))
AMR:
(c / contain-01, ARG0, c2 / chemist)
(c / contain-01, ARG1, d / derive-01)
(c2 / chemist, mod, l / local)
(d / derive-01, ARG2, s / species)
(p / purchase-01, ARG1, c2 / chemist)
(p / purchase-01, mod, e / every)
(p / purchase-01, quant, 4 / 4)

Decoded in 83,300 microseconds
Sentence: does not our analysis reinforce the view that freedom is not an independent separate ideal that freedom consists in the pursuit of valuable forms of life and that its value derives from the value of that pursuit

Spans:
Span 3-4:  analysis => analyze-01
Span 26-27:  and => and
Span 17-18:  consists => consist-01
Span 23-24:  forms => form
Span 16-17:  freedom => free-41
Span 8-9:  freedom => free-41
Span 14-15:  ideal => ideal
Span 12-13:  independent => (depend-01 :polarity -)
Span 25-26:  life => life
Span 36-37:  pursuit => pursue-01
Span 20-21:  pursuit => pursue-01
Span 4-5:  reinforce => reinforce-01
Span 13-14:  separate => separate
Span 22-23:  valuable => value-01
Span 33-34:  value => value-01
Span 29-30:  value => value-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),pursuit,pursue-01,false), Span(33,34,List(1),value,value-01,false), Span(29,30,List(2),value,value-01,false), Span(26,27,List(3),and,and,false), Span(25,26,List(4),life,life,false), Span(23,24,List(5),forms,form,false), Span(22,23,List(6),valuable,value-01,false), Span(20,21,List(7),pursuit,pursue-01,false), Span(17,18,List(8),consists,consist-01,false), Span(16,17,List(9),freedom,free-41,false), Span(14,15,List(10),ideal,ideal,false), Span(13,14,List(11),separate,separate,false), Span(12,13,List(13, 12),independent,(depend-01 :polarity -),false), Span(8,9,List(14),freedom,free-41,false), Span(4,5,List(15),reinforce,reinforce-01,false), Span(3,4,List(16),analysis,analyze-01,false)),Map(2 -> value-01, 5 -> form, 12 -> depend-01, 15 -> reinforce-01, 8 -> consist-01, 7 -> pursue-01, 1 -> value-01, 4 -> life, 11 -> separate, 14 -> free-41, 6 -> value-01, 0 -> pursue-01, 9 -> free-41, 16 -> analyze-01, 3 -> and, 10 -> ideal, 13 -> -),Map(v2 -> value-01, p2 -> pursue-01, s -> separate, v -> value-01, d -> depend-01, p -> pursue-01, a -> and, f3 -> free-41, v3 -> value-01, a2 -> analyze-01, r -> reinforce-01, i -> ideal, c -> consist-01, l -> life, f2 -> free-41, f -> form))),[Ljava.lang.String;@1e3c1a28,Annotation([Ljava.lang.String;@7bd94799,[Ljava.lang.String;@75ebcd54,[Ljava.lang.String;@4bf58247),Annotation([Ljava.lang.String;@633c2a46,[Ljava.lang.String;@2fb8c90,[Ledu.cmu.lti.nlp.amr.Dependency;@50c94377),Annotation([Ljava.lang.String;@4d6c6310,[Ljava.lang.String;@6dbd726,[Ljava.lang.String;@4b0a034e),Annotation([Ljava.lang.String;@7e5f1c5e,[Ljava.lang.String;@163fa023,[Ledu.cmu.lti.nlp.amr.Entity;@2b2a653e))
AMR:
(a / and, op, c / consist-01)
(c / consist-01, ARG0, i / ideal)
(c / consist-01, ARG1, f2 / free-41)
(c / consist-01, ARG2, p2 / pursue-01)
(d / depend-01, ARG0, i / ideal)
(d / depend-01, polarity, -)
(f3 / free-41, ARG1, l / life)
(i / ideal, domain, f3 / free-41)
(i / ideal, mod, s / separate)
(p / pursue-01, ARG1, v3 / value-01)
(p2 / pursue-01, ARG1, f / form)
(r / reinforce-01, ARG0, i / ideal)
(r / reinforce-01, ARG1, a2 / analyze-01)
(v / value-01, ARG1, p / pursue-01)
(v2 / value-01, topic, p / pursue-01)
(v3 / value-01, ARG1, f / form)

Decoded in 633,679 microseconds
Sentence: the powerfulness of the stories derives in part from the immediacy of lewiss roughhewn style but more surely from the fact that this image touches something so very deep in so many people

Spans:
Span 15-16:  but => contrast-01
Span 28-29:  deep => deep
Span 20-21:  fact => fact
Span 23-24:  image => image
Span 31-32:  many => many
Span 30-31:  so => so
Span 26-27:  so => so
Span 25-26:  something => something
Span 4-5:  stories => story
Span 14-15:  style => style
Span 17-18:  surely => sure
Span 22-23:  this => this
Span 24-25:  touches => touch-01
Span 27-28:  very => very

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),many,many,false), Span(30,31,List(1),so,so,false), Span(28,29,List(2),deep,deep,false), Span(27,28,List(3),very,very,false), Span(26,27,List(4),so,so,false), Span(25,26,List(5),something,something,false), Span(24,25,List(6),touches,touch-01,false), Span(23,24,List(7),image,image,false), Span(22,23,List(8),this,this,false), Span(20,21,List(9),fact,fact,false), Span(17,18,List(10),surely,sure,false), Span(15,16,List(11),but,contrast-01,false), Span(14,15,List(12),style,style,false), Span(4,5,List(13),stories,story,false)),Map(2 -> deep, 5 -> something, 12 -> style, 8 -> this, 7 -> image, 1 -> so, 4 -> so, 11 -> contrast-01, 6 -> touch-01, 0 -> many, 9 -> fact, 3 -> very, 10 -> sure, 13 -> story),Map(s5 -> style, s2 -> so, t -> touch-01, s -> so, v -> very, s4 -> sure, m -> many, d -> deep, t2 -> this, i -> image, s3 -> something, c -> contrast-01, f -> fact, s6 -> story))),[Ljava.lang.String;@6c5cdf95,Annotation([Ljava.lang.String;@455ae6c7,[Ljava.lang.String;@52e53663,[Ljava.lang.String;@4655c819),Annotation([Ljava.lang.String;@29c40562,[Ljava.lang.String;@43d7a5a,[Ledu.cmu.lti.nlp.amr.Dependency;@602bace2),Annotation([Ljava.lang.String;@53635ac1,[Ljava.lang.String;@1fdb5fac,[Ljava.lang.String;@7b66258a),Annotation([Ljava.lang.String;@6f2ac650,[Ljava.lang.String;@6141e734,[Ledu.cmu.lti.nlp.amr.Entity;@2db238ce))
AMR:
(c / contrast-01, ARG0, s / so)
(c / contrast-01, consist, s5 / style)
(d / deep, degree, v / very)
(d / deep, example, s3 / something)
(f / fact, poss, s3 / something)
(f / fact, quant, s4 / sure)
(m / many, degree, s / so)
(s3 / something, mod, t2 / this)
(s4 / sure, degree, c / contrast-01)
(s6 / story, op, t / touch-01)
(t / touch-01, ARG0, s3 / something)
(t / touch-01, ARG1, i / image)
(v / very, degree, s2 / so)

Decoded in 318,219 microseconds
Sentence: this discourse of authority was shot through with religious reference and for practical purposes it made islamic any number of locally derived forms of acts and relations

Spans:
Span 25-26:  and => and
Span 10-11:  and => and
Span 17-18:  any => any
Span 3-4:  authority => authority
Span 21-22:  derived => derive-01
Span 22-23:  forms => form
Span 14-15:  it => it
Span 20-21:  locally => local
Span 18-19:  number => number
Span 12-13:  practical => practical
Span 13-14:  purposes => purpose
Span 9-10:  reference => reference-01
Span 26-27:  relations => relation
Span 5-6:  shot => shoot-02
Span 0-1:  this => this

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),relations,relation,false), Span(25,26,List(1),and,and,false), Span(22,23,List(2),forms,form,false), Span(21,22,List(3),derived,derive-01,false), Span(20,21,List(4),locally,local,false), Span(18,19,List(5),number,number,false), Span(17,18,List(6),any,any,false), Span(14,15,List(7),it,it,false), Span(13,14,List(8),purposes,purpose,false), Span(12,13,List(9),practical,practical,false), Span(10,11,List(10),and,and,false), Span(9,10,List(11),reference,reference-01,false), Span(5,6,List(12),shot,shoot-02,false), Span(3,4,List(13),authority,authority,false), Span(0,1,List(14),this,this,false)),Map(2 -> form, 5 -> number, 12 -> shoot-02, 8 -> purpose, 7 -> it, 1 -> and, 4 -> local, 11 -> reference-01, 14 -> this, 6 -> any, 0 -> relation, 9 -> practical, 3 -> derive-01, 10 -> and, 13 -> authority),Map(n -> number, t -> this, p2 -> practical, a3 -> and, s -> shoot-02, d -> derive-01, p -> purpose, r2 -> reference-01, a -> and, r -> relation, a2 -> any, i -> it, l -> local, f -> form, a4 -> authority))),[Ljava.lang.String;@47dce809,Annotation([Ljava.lang.String;@7805cbba,[Ljava.lang.String;@44825de5,[Ljava.lang.String;@4ae28886),Annotation([Ljava.lang.String;@5e713bd2,[Ljava.lang.String;@5c0e886e,[Ledu.cmu.lti.nlp.amr.Dependency;@3e1f1cf9),Annotation([Ljava.lang.String;@6ca73f4b,[Ljava.lang.String;@582c8ca7,[Ljava.lang.String;@54c6552a),Annotation([Ljava.lang.String;@290163e1,[Ljava.lang.String;@1a445dcf,[Ledu.cmu.lti.nlp.amr.Entity;@7e6ace81))
AMR:
(a / and, op, a3 / and)
(a / and, op, f / form)
(a / and, op, r / relation)
(a3 / and, op, r2 / reference-01)
(d / derive-01, ARG0, t / this)
(d / derive-01, ARG1, f / form)
(d / derive-01, manner, l / local)
(f / form, quant, n / number)
(n / number, mod, a2 / any)
(p / purpose, mod, p2 / practical)
(r2 / reference-01, ARG0, p2 / practical)
(r2 / reference-01, ARG1, i / it)
(s / shoot-02, ARG0, r2 / reference-01)
(s / shoot-02, ARG1, a4 / authority)

Decoded in 262,866 microseconds
Sentence: he had recently used these devices of degas in the ballet paintings and mirliton panels and once again he complemented them with a caricatural quality derived from popular illustration

Spans:
Span 17-18:  again => again
Span 15-16:  and => and
Span 12-13:  and => and
Span 10-11:  ballet => ballet
Span 19-20:  complemented => complement-01
Span 25-26:  derived => derive-01
Span 5-6:  devices => device
Span 18-19:  he => he
Span 0-1:  he => he
Span 28-29:  illustration => illustrate-01
Span 16-17:  once => once
Span 11-12:  paintings => paint-02
Span 27-28:  popular => popular-41
Span 24-25:  quality => quality
Span 2-3:  recently => recent
Span 3-4:  used => use-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),illustration,illustrate-01,false), Span(27,28,List(1),popular,popular-41,false), Span(25,26,List(2),derived,derive-01,false), Span(24,25,List(3),quality,quality,false), Span(19,20,List(4),complemented,complement-01,false), Span(18,19,List(5),he,he,false), Span(17,18,List(6),again,again,false), Span(16,17,List(7),once,once,false), Span(15,16,List(8),and,and,false), Span(12,13,List(9),and,and,false), Span(11,12,List(10),paintings,paint-02,false), Span(10,11,List(11),ballet,ballet,false), Span(5,6,List(12),devices,device,false), Span(3,4,List(13),used,use-01,false), Span(2,3,List(14),recently,recent,false), Span(0,1,List(15),he,he,false)),Map(2 -> derive-01, 5 -> he, 12 -> device, 15 -> he, 8 -> and, 7 -> once, 1 -> popular-41, 4 -> complement-01, 11 -> ballet, 14 -> recent, 6 -> again, 0 -> illustrate-01, 9 -> and, 3 -> quality, 10 -> paint-02, 13 -> use-01),Map(h -> he, q -> quality, h2 -> he, b -> ballet, p2 -> paint-02, a3 -> and, d -> derive-01, p -> popular-41, a -> again, d2 -> device, r -> recent, i -> illustrate-01, a2 -> and, c -> complement-01, u -> use-01, o -> once))),[Ljava.lang.String;@161bb7fe,Annotation([Ljava.lang.String;@75cc9008,[Ljava.lang.String;@490439a3,[Ljava.lang.String;@346421c8),Annotation([Ljava.lang.String;@19e5ec57,[Ljava.lang.String;@45ff5109,[Ledu.cmu.lti.nlp.amr.Dependency;@7d2149c5),Annotation([Ljava.lang.String;@147264b1,[Ljava.lang.String;@6230aaf3,[Ljava.lang.String;@692769e1),Annotation([Ljava.lang.String;@1a9868b6,[Ljava.lang.String;@c02925e,[Ledu.cmu.lti.nlp.amr.Entity;@7cd75f7a))
AMR:
(a2 / and, op, c / complement-01)
(a2 / and, op, h2 / he)
(a2 / and, op, p2 / paint-02)
(a3 / and, op, a2 / and)
(a3 / and, op, b / ballet)
(c / complement-01, ARG0, h / he)
(c / complement-01, ARG1, q / quality)
(c / complement-01, mod, a / again)
(d / derive-01, ARG1, q / quality)
(d / derive-01, ARG2, i / illustrate-01)
(o / once, op, c / complement-01)
(p / popular-41, ARG1, i / illustrate-01)
(u / use-01, ARG0, h2 / he)
(u / use-01, ARG1, d2 / device)
(u / use-01, time, r / recent)

Decoded in 277,336 microseconds
Sentence: both liturgically conservative they would have been unlikely to have derived much pleasure from the knowledge of how radical liturgical change in their church was destined to be

Spans:
Span 0-1:  both => both
Span 20-21:  change => change-01
Span 23-24:  church => church
Span 2-3:  conservative => conservative
Span 10-11:  derived => derive-01
Span 25-26:  destined => destine-01
Span 15-16:  knowledge => knowledge
Span 11-12:  much => much
Span 12-13:  pleasure => pleasure
Span 18-19:  radical => radical
Span 3-4:  they => they
Span 7-8:  unlikely => (likely :polarity -)

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),destined,destine-01,false), Span(23,24,List(1),church,church,false), Span(20,21,List(2),change,change-01,false), Span(18,19,List(3),radical,radical,false), Span(15,16,List(4),knowledge,knowledge,false), Span(12,13,List(5),pleasure,pleasure,false), Span(11,12,List(6),much,much,false), Span(10,11,List(7),derived,derive-01,false), Span(7,8,List(9, 8),unlikely,(likely :polarity -),false), Span(3,4,List(10),they,they,false), Span(2,3,List(11),conservative,conservative,false), Span(0,1,List(12),both,both,false)),Map(2 -> change-01, 5 -> pleasure, 12 -> both, 8 -> likely, 7 -> derive-01, 1 -> church, 4 -> knowledge, 11 -> conservative, 6 -> much, 0 -> destine-01, 9 -> -, 3 -> radical, 10 -> they),Map(b -> both, t -> they, k -> knowledge, m -> much, d -> destine-01, p -> pleasure, c3 -> conservative, d2 -> derive-01, r -> radical, l -> likely, c -> church, c2 -> change-01))),[Ljava.lang.String;@1fbd829e,Annotation([Ljava.lang.String;@52ca6359,[Ljava.lang.String;@65409285,[Ljava.lang.String;@72538db1),Annotation([Ljava.lang.String;@4b7b9a1a,[Ljava.lang.String;@1fc247ad,[Ledu.cmu.lti.nlp.amr.Dependency;@befbf25),Annotation([Ljava.lang.String;@28ee1c42,[Ljava.lang.String;@2881460c,[Ljava.lang.String;@3f1dd29a),Annotation([Ljava.lang.String;@3eed9cd5,[Ljava.lang.String;@61d38439,[Ledu.cmu.lti.nlp.amr.Entity;@58dec5c))
AMR:
(c2 / change-01, ARG0, b / both)
(c2 / change-01, ARG1, c / church)
(c2 / change-01, mod, r / radical)
(c3 / conservative, prep-in, t / they)
(d / destine-01, ARG0, c2 / change-01)
(d / destine-01, ARG1, k / knowledge)
(d2 / derive-01, ARG0, t / they)
(d2 / derive-01, ARG1, p / pleasure)
(l / likely, domain, d2 / derive-01)
(l / likely, polarity, -)
(p / pleasure, mod, k / knowledge)
(p / pleasure, quant, m / much)

Decoded in 155,382 microseconds
Sentence: an agent must not without his principals knowledge and consent receive any reward or commission from those with whom he deals on his principals behalf or derive any profit from transactions entered into on the principals behalf beyond the remuneration agreed upon

Spans:
Span 1-2:  agent => agent
Span 40-41:  agreed => agree-01
Span 8-9:  and => and
Span 27-28:  any => any
Span 11-12:  any => any
Span 37-38:  beyond => beyond
Span 14-15:  commission => commission
Span 9-10:  consent => consent-01
Span 20-21:  deals => deal-01
Span 26-27:  derive => derive-01
Span 31-32:  entered => enter-01
Span 19-20:  he => he
Span 7-8:  knowledge => knowledge
Span 25-26:  or => or
Span 13-14:  or => or
Span 35-36:  principals => principal
Span 23-24:  principals => principal
Span 6-7:  principals => principal
Span 28-29:  profit => profit-01
Span 10-11:  receive => receive-01
Span 39-40:  remuneration => remunerate-01
Span 12-13:  reward => reward-01
Span 30-31:  transactions => transact-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),agreed,agree-01,false), Span(39,40,List(1),remuneration,remunerate-01,false), Span(37,38,List(2),beyond,beyond,false), Span(35,36,List(3),principals,principal,false), Span(31,32,List(4),entered,enter-01,false), Span(30,31,List(5),transactions,transact-01,false), Span(28,29,List(6),profit,profit-01,false), Span(27,28,List(7),any,any,false), Span(26,27,List(8),derive,derive-01,false), Span(25,26,List(9),or,or,false), Span(23,24,List(10),principals,principal,false), Span(20,21,List(11),deals,deal-01,false), Span(19,20,List(12),he,he,false), Span(14,15,List(13),commission,commission,false), Span(13,14,List(14),or,or,false), Span(12,13,List(15),reward,reward-01,false), Span(11,12,List(16),any,any,false), Span(10,11,List(17),receive,receive-01,false), Span(9,10,List(18),consent,consent-01,false), Span(8,9,List(19),and,and,false), Span(7,8,List(20),knowledge,knowledge,false), Span(6,7,List(21),principals,principal,false), Span(1,2,List(22),agent,agent,false)),Map(2 -> beyond, 5 -> transact-01, 12 -> he, 15 -> reward-01, 8 -> derive-01, 21 -> principal, 18 -> consent-01, 7 -> any, 17 -> receive-01, 1 -> remunerate-01, 4 -> enter-01, 11 -> deal-01, 14 -> or, 20 -> knowledge, 6 -> profit-01, 22 -> agent, 0 -> agree-01, 9 -> or, 16 -> any, 19 -> and, 3 -> principal, 10 -> principal, 13 -> commission),Map(e -> enter-01, r3 -> receive-01, h -> he, k -> knowledge, b -> beyond, t -> transact-01, p2 -> profit-01, a3 -> any, d -> derive-01, r2 -> reward-01, p -> principal, a -> agree-01, p4 -> principal, a5 -> agent, o2 -> or, d2 -> deal-01, r -> remunerate-01, a2 -> any, c -> commission, o -> or, p3 -> principal, c2 -> consent-01, a4 -> and))),[Ljava.lang.String;@a1193a9,Annotation([Ljava.lang.String;@7f54169,[Ljava.lang.String;@76995893,[Ljava.lang.String;@4d8657b9),Annotation([Ljava.lang.String;@2ee95a72,[Ljava.lang.String;@5a310a6d,[Ledu.cmu.lti.nlp.amr.Dependency;@49a3a85d),Annotation([Ljava.lang.String;@17829770,[Ljava.lang.String;@7ea4461e,[Ljava.lang.String;@52f79c86),Annotation([Ljava.lang.String;@7e454bf7,[Ljava.lang.String;@777e85e4,[Ledu.cmu.lti.nlp.amr.Entity;@13887906))
AMR:
(a / agree-01, ARG1, r / remunerate-01)
(a4 / and, op, c2 / consent-01)
(a4 / and, op, k / knowledge)
(a4 / and, op, r3 / receive-01)
(b / beyond, op, r / remunerate-01)
(d / derive-01, ARG0, a5 / agent)
(d / derive-01, ARG1, p2 / profit-01)
(d2 / deal-01, ARG0, h / he)
(d2 / deal-01, ARG1, o / or)
(e / enter-01, ARG0, p / principal)
(e / enter-01, ARG1, t / transact-01)
(e / enter-01, mod, b / beyond)
(k / knowledge, mod, p4 / principal)
(o / or, op, c / commission)
(o / or, op, d / derive-01)
(o2 / or, mod, a3 / any)
(o2 / or, op, c / commission)
(o2 / or, op, r2 / reward-01)
(p2 / profit-01, ARG1, t / transact-01)
(p2 / profit-01, mod, a2 / any)
(p3 / principal, poss, h / he)
(r3 / receive-01, ARG1, r2 / reward-01)

Decoded in 1,202,573 microseconds
Sentence: its graphic form may be better interpreted by the 12 sided regular duodecagon derived from a rotating equilateral triangle

Spans:
Span 9-10:  12 => 12
Span 13-14:  derived => derive-01
Span 2-3:  form => form
Span 1-2:  graphic => graphic
Span 3-4:  may => (date-entity :month 5)
Span 11-12:  regular => regular
Span 16-17:  rotating => rotate-02

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),rotating,rotate-02,false), Span(13,14,List(1),derived,derive-01,false), Span(11,12,List(2),regular,regular,false), Span(9,10,List(3),12,12,false), Span(3,4,List(5, 4),may,(date-entity :month 5),false), Span(2,3,List(6),form,form,false), Span(1,2,List(7),graphic,graphic,false)),Map(2 -> regular, 5 -> 5, 7 -> graphic, 1 -> derive-01, 4 -> date-entity, 6 -> form, 0 -> rotate-02, 3 -> 12),Map(5 -> 5, d -> derive-01, g -> graphic, 1 -> 12, r2 -> regular, d2 -> date-entity, r -> rotate-02, f -> form))),[Ljava.lang.String;@10439aa9,Annotation([Ljava.lang.String;@465ed596,[Ljava.lang.String;@7c188ef1,[Ljava.lang.String;@3050afdd),Annotation([Ljava.lang.String;@149eef3,[Ljava.lang.String;@1ce6942e,[Ledu.cmu.lti.nlp.amr.Dependency;@660a66d4),Annotation([Ljava.lang.String;@34e51ca2,[Ljava.lang.String;@2dbaeacf,[Ljava.lang.String;@4a8dd37d),Annotation([Ljava.lang.String;@2537d9c8,[Ljava.lang.String;@75baec8e,[Ledu.cmu.lti.nlp.amr.Entity;@43009b04))
AMR:
(d / derive-01, ARG0, f / form)
(d / derive-01, manner, r / rotate-02)
(d2 / date-entity, month, 5 / 5)
(d2 / date-entity, op, r / rotate-02)
(f / form, mod, g / graphic)
(r / rotate-02, ARG0, 1 / 12)
(r / rotate-02, ARG1, r2 / regular)

Decoded in 125,605 microseconds
Sentence: it does however have a missionary vision of what it means to be truly human derived partly from rational reflection on human capacities and desires but supremely from its conviction that we glimpse true humanity in the life death and teaching of jesus

Spans:
Span 39-40:  and => and
Span 23-24:  and => and
Span 25-26:  but => contrast-01
Span 29-30:  conviction => convict-01
Span 38-39:  death => die-01
Span 15-16:  derived => derive-01
Span 21-22:  human => human
Span 14-15:  human => human
Span 34-35:  humanity => humanity
Span 9-10:  it => it
Span 0-1:  it => it
Span 37-38:  life => life
Span 10-11:  means => mean-01
Span 16-17:  partly => partly
Span 18-19:  rational => rational
Span 19-20:  reflection => reflect-01
Span 40-41:  teaching => teach-01
Span 33-34:  true => true
Span 13-14:  truly => truly
Span 31-32:  we => we

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),teaching,teach-01,false), Span(39,40,List(1),and,and,false), Span(38,39,List(2),death,die-01,false), Span(37,38,List(3),life,life,false), Span(34,35,List(4),humanity,humanity,false), Span(33,34,List(5),true,true,false), Span(31,32,List(6),we,we,false), Span(29,30,List(7),conviction,convict-01,false), Span(25,26,List(8),but,contrast-01,false), Span(23,24,List(9),and,and,false), Span(21,22,List(10),human,human,false), Span(19,20,List(11),reflection,reflect-01,false), Span(18,19,List(12),rational,rational,false), Span(16,17,List(13),partly,partly,false), Span(15,16,List(14),derived,derive-01,false), Span(14,15,List(15),human,human,false), Span(13,14,List(16),truly,truly,false), Span(10,11,List(17),means,mean-01,false), Span(9,10,List(18),it,it,false), Span(0,1,List(19),it,it,false)),Map(2 -> die-01, 5 -> true, 12 -> rational, 15 -> human, 8 -> contrast-01, 18 -> it, 7 -> convict-01, 17 -> mean-01, 1 -> and, 4 -> humanity, 11 -> reflect-01, 14 -> derive-01, 6 -> we, 0 -> teach-01, 9 -> and, 16 -> truly, 19 -> it, 3 -> life, 10 -> human, 13 -> partly),Map(w -> we, h -> humanity, h2 -> human, t -> teach-01, m -> mean-01, d -> die-01, t3 -> truly, p -> partly, r2 -> rational, a -> and, d2 -> derive-01, i2 -> it, t2 -> true, i -> it, a2 -> and, r -> reflect-01, h3 -> human, c -> convict-01, l -> life, c2 -> contrast-01))),[Ljava.lang.String;@14d90e02,Annotation([Ljava.lang.String;@3626afff,[Ljava.lang.String;@25ecaa1f,[Ljava.lang.String;@5494ecac),Annotation([Ljava.lang.String;@7d3e3b95,[Ljava.lang.String;@b9f370,[Ledu.cmu.lti.nlp.amr.Dependency;@301d3e6f),Annotation([Ljava.lang.String;@4fee0216,[Ljava.lang.String;@12cb1b59,[Ljava.lang.String;@547079b2),Annotation([Ljava.lang.String;@2445c06d,[Ljava.lang.String;@5f5c46b5,[Ledu.cmu.lti.nlp.amr.Entity;@232645fc))
AMR:
(a / and, op, h / humanity)
(a / and, op, t / teach-01)
(a2 / and, op, c2 / contrast-01)
(c / convict-01, ARG1, w / we)
(c2 / contrast-01, ARG1, d2 / derive-01)
(c2 / contrast-01, mod, h2 / human)
(d / die-01, ARG1, w / we)
(d2 / derive-01, ARG0, w / we)
(d2 / derive-01, ARG1, p / partly)
(d2 / derive-01, manner, h3 / human)
(d2 / derive-01, time, t3 / truly)
(h / humanity, mod, t2 / true)
(h / humanity, topic, d / die-01)
(m / mean-01, ARG0, i / it)
(m / mean-01, ARG1, h3 / human)
(r / reflect-01, ARG1, i2 / it)
(r / reflect-01, ARG2, a2 / and)
(r / reflect-01, mod, r2 / rational)
(t / teach-01, ARG1, l / life)

Decoded in 864,684 microseconds
Sentence:   evidently she derived some emotional satisfaction from having the sheer illogicality of her letters exploded by the great man himself

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   evidently she derived some emotional satisfaction from having the sheer illogicality of her letters exploded by the great man himself
myTokenized = evidently she derived some emotional satisfaction from having the sheer illogicality of her letters exploded by the great man himself
i = 0
prefix = List(evidently)
regexr = \Qe\E ?\Qv\E ?\Qi\E ?\Qd\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Ql\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: mr kentridge submitted that all disciplinary powers derived from the judges so that any complaint about the incorrect or improper exercise of the powers must go to the judges and not to the divisional court

Spans:
Span 4-5:  all => all
Span 29-30:  and => and
Span 13-14:  any => any
Span 14-15:  complaint => complain-01
Span 34-35:  court => court
Span 7-8:  derived => derive-01
Span 5-6:  disciplinary => discipline
Span 20-21:  exercise => exercise-02
Span 17-18:  incorrect => (correct :polarity -)
Span 28-29:  judges => judge-01
Span 10-11:  judges => judge-01
Span 18-19:  or => or
Span 23-24:  powers => power
Span 6-7:  powers => power
Span 11-12:  so => so
Span 2-3:  submitted => submit-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),court,court,false), Span(29,30,List(1),and,and,false), Span(28,29,List(2),judges,judge-01,false), Span(23,24,List(3),powers,power,false), Span(20,21,List(4),exercise,exercise-02,false), Span(18,19,List(5),or,or,false), Span(17,18,List(7, 6),incorrect,(correct :polarity -),false), Span(14,15,List(8),complaint,complain-01,false), Span(13,14,List(9),any,any,false), Span(11,12,List(10),so,so,false), Span(10,11,List(11),judges,judge-01,false), Span(7,8,List(12),derived,derive-01,false), Span(6,7,List(13),powers,power,false), Span(5,6,List(14),disciplinary,discipline,false), Span(4,5,List(15),all,all,false), Span(2,3,List(16),submitted,submit-01,false)),Map(2 -> judge-01, 5 -> or, 12 -> derive-01, 15 -> all, 8 -> complain-01, 7 -> -, 1 -> and, 4 -> exercise-02, 11 -> judge-01, 14 -> discipline, 6 -> correct, 0 -> court, 9 -> any, 16 -> submit-01, 3 -> power, 10 -> so, 13 -> power),Map(e -> exercise-02, s2 -> submit-01, p2 -> power, a3 -> all, j -> judge-01, s -> so, j2 -> judge-01, d -> derive-01, p -> power, a -> and, c3 -> complain-01, d2 -> discipline, a2 -> any, c -> court, o -> or, c2 -> correct))),[Ljava.lang.String;@266a1b46,Annotation([Ljava.lang.String;@24a45e,[Ljava.lang.String;@65a31764,[Ljava.lang.String;@3654da5d),Annotation([Ljava.lang.String;@7ccc2b88,[Ljava.lang.String;@403e2dba,[Ledu.cmu.lti.nlp.amr.Dependency;@322c2f49),Annotation([Ljava.lang.String;@72d47b5a,[Ljava.lang.String;@5bee8c9b,[Ljava.lang.String;@a514344),Annotation([Ljava.lang.String;@5d172aa6,[Ljava.lang.String;@1bf12809,[Ledu.cmu.lti.nlp.amr.Entity;@757b7533))
AMR:
(a / and, op, c / court)
(c2 / correct, polarity, -)
(c3 / complain-01, ARG2, e / exercise-02)
(c3 / complain-01, mod, a2 / any)
(d / derive-01, ARG0, p2 / power)
(d / derive-01, ARG1, j / judge-01)
(d / derive-01, ARG2, j2 / judge-01)
(e / exercise-02, ARG1, p / power)
(e / exercise-02, mod, c2 / correct)
(j / judge-01, ARG0, a / and)
(j / judge-01, ARG1, e / exercise-02)
(o / or, op, e / exercise-02)
(p2 / power, mod, d2 / discipline)
(p2 / power, quant, a3 / all)
(s2 / submit-01, ARG0, s / so)
(s2 / submit-01, ARG1, d / derive-01)

Decoded in 566,682 microseconds
Sentence: nor did they make any serious efforts to derive income from a huge fixed asset which was used for only a few hours a week

Spans:
Span 4-5:  any => any
Span 14-15:  asset => asset
Span 8-9:  derive => derive-01
Span 6-7:  efforts => effort
Span 21-22:  few => few
Span 13-14:  fixed => fix-03
Span 22-23:  hours => (temporal-quantity :unit hour)
Span 12-13:  huge => huge
Span 9-10:  income => income
Span 19-20:  only => only
Span 5-6:  serious => serious
Span 2-3:  they => they
Span 17-18:  used => use-01
Span 24-25:  week => week

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),week,week,false), Span(22,23,List(2, 1),hours,(temporal-quantity :unit hour),false), Span(21,22,List(3),few,few,false), Span(19,20,List(4),only,only,false), Span(17,18,List(5),used,use-01,false), Span(14,15,List(6),asset,asset,false), Span(13,14,List(7),fixed,fix-03,false), Span(12,13,List(8),huge,huge,false), Span(9,10,List(9),income,income,false), Span(8,9,List(10),derive,derive-01,false), Span(6,7,List(11),efforts,effort,false), Span(5,6,List(12),serious,serious,false), Span(4,5,List(13),any,any,false), Span(2,3,List(14),they,they,false)),Map(2 -> hour, 5 -> use-01, 12 -> serious, 8 -> huge, 7 -> fix-03, 1 -> temporal-quantity, 4 -> only, 11 -> effort, 14 -> they, 6 -> asset, 0 -> week, 9 -> income, 3 -> few, 10 -> derive-01, 13 -> any),Map(e -> effort, w -> week, h -> hour, h2 -> huge, t -> temporal-quantity, s -> serious, d -> derive-01, a -> asset, t2 -> they, a2 -> any, i -> income, u -> use-01, f2 -> fix-03, f -> few, o -> only))),[Ljava.lang.String;@7c4ba386,Annotation([Ljava.lang.String;@49dcf22a,[Ljava.lang.String;@489ec948,[Ljava.lang.String;@30b0bb37),Annotation([Ljava.lang.String;@22d330da,[Ljava.lang.String;@572c4a12,[Ledu.cmu.lti.nlp.amr.Dependency;@1cb31074),Annotation([Ljava.lang.String;@2ffd3e64,[Ljava.lang.String;@1b0b2fd9,[Ljava.lang.String;@7b725d6d),Annotation([Ljava.lang.String;@1153de6c,[Ljava.lang.String;@192f8d57,[Ledu.cmu.lti.nlp.amr.Entity;@e857ac))
AMR:
(a / asset, mod, h2 / huge)
(a / asset, poss, t2 / they)
(d / derive-01, ARG0, t2 / they)
(d / derive-01, ARG1, i / income)
(d / derive-01, ARG2, e / effort)
(e / effort, mod, a2 / any)
(e / effort, mod, s / serious)
(f / few, op, t / temporal-quantity)
(f2 / fix-03, ARG0, o / only)
(f2 / fix-03, ARG1, a / asset)
(t / temporal-quantity, unit, h / hour)
(u / use-01, ARG1, a / asset)
(u / use-01, ARG2, f / few)
(u / use-01, time, w / week)

Decoded in 472,756 microseconds
Sentence: a second plausible explanation more recent derives from the siting of the gallows which serviced the garrison at charles fort

Spans:
Span 3-4:  explanation => explain-01
Span 2-3:  plausible => plausible
Span 5-6:  recent => recent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),recent,recent,false), Span(3,4,List(1),explanation,explain-01,false), Span(2,3,List(2),plausible,plausible,false)),Map(2 -> plausible, 1 -> explain-01, 0 -> recent),Map(e -> explain-01, p -> plausible, r -> recent))),[Ljava.lang.String;@15d3ddab,Annotation([Ljava.lang.String;@87e10bf,[Ljava.lang.String;@c7d6ff4,[Ljava.lang.String;@7f410293),Annotation([Ljava.lang.String;@510422a,[Ljava.lang.String;@6e67d5fe,[Ledu.cmu.lti.nlp.amr.Dependency;@63124f52),Annotation([Ljava.lang.String;@4715c34e,[Ljava.lang.String;@65c95a57,[Ljava.lang.String;@64a39f6),Annotation([Ljava.lang.String;@732348b3,[Ljava.lang.String;@117a1ad3,[Ledu.cmu.lti.nlp.amr.Entity;@67771b9b))
AMR:
(e / explain-01, mod, p / plausible)
(e / explain-01, time, r / recent)

Decoded in 40,459 microseconds
Sentence: only halifax had an historic title and it derived from a nineteenthcentury whig

Spans:
Span 6-7:  and => and
Span 8-9:  derived => derive-01
Span 4-5:  historic => history
Span 7-8:  it => it
Span 0-1:  only => only
Span 5-6:  title => title

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),derived,derive-01,false), Span(7,8,List(1),it,it,false), Span(6,7,List(2),and,and,false), Span(5,6,List(3),title,title,false), Span(4,5,List(4),historic,history,false), Span(0,1,List(5),only,only,false)),Map(2 -> and, 5 -> only, 1 -> it, 4 -> history, 0 -> derive-01, 3 -> title),Map(h -> history, t -> title, d -> derive-01, a -> and, i -> it, o -> only))),[Ljava.lang.String;@3cb5922e,Annotation([Ljava.lang.String;@34902925,[Ljava.lang.String;@647d5718,[Ljava.lang.String;@60e11c32),Annotation([Ljava.lang.String;@5b02484e,[Ljava.lang.String;@72d9278f,[Ledu.cmu.lti.nlp.amr.Dependency;@eb45831),Annotation([Ljava.lang.String;@620a0081,[Ljava.lang.String;@7ea7476f,[Ljava.lang.String;@1843095f),Annotation([Ljava.lang.String;@591c486a,[Ljava.lang.String;@4fd654da,[Ledu.cmu.lti.nlp.amr.Entity;@5cdd29))
AMR:
(a / and, mod, h / history)
(a / and, op, d / derive-01)
(a / and, op, t / title)
(d / derive-01, ARG0, o / only)
(d / derive-01, ARG1, i / it)

Decoded in 55,032 microseconds
Sentence: for locke however they are whatsoever is the object of the understanding when a man thinks and his conception of them as essentially minddependent things is derived from descartes

Spans:
Span 16-17:  and => and
Span 26-27:  derived => derive-01
Span 22-23:  essentially => essential
Span 14-15:  man => man
Span 8-9:  object => object
Span 3-4:  they => they
Span 24-25:  things => thing
Span 15-16:  thinks => think-01
Span 11-12:  understanding => understand-01
Span 5-6:  whatsoever => whatsoever

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),derived,derive-01,false), Span(24,25,List(1),things,thing,false), Span(22,23,List(2),essentially,essential,false), Span(16,17,List(3),and,and,false), Span(15,16,List(4),thinks,think-01,false), Span(14,15,List(5),man,man,false), Span(11,12,List(6),understanding,understand-01,false), Span(8,9,List(7),object,object,false), Span(5,6,List(8),whatsoever,whatsoever,false), Span(3,4,List(9),they,they,false)),Map(2 -> essential, 5 -> man, 8 -> whatsoever, 7 -> object, 1 -> thing, 4 -> think-01, 6 -> understand-01, 9 -> they, 0 -> derive-01, 3 -> and),Map(w -> whatsoever, e -> essential, t -> thing, m -> man, d -> derive-01, t3 -> they, a -> and, t2 -> think-01, u -> understand-01, o -> object))),[Ljava.lang.String;@51d9b4aa,Annotation([Ljava.lang.String;@2be42ee1,[Ljava.lang.String;@11c1cc4a,[Ljava.lang.String;@4a4b1761),Annotation([Ljava.lang.String;@7ec0762,[Ljava.lang.String;@18d8b6fe,[Ledu.cmu.lti.nlp.amr.Dependency;@3bd5ea70),Annotation([Ljava.lang.String;@59127dc0,[Ljava.lang.String;@4cfdf5ef,[Ljava.lang.String;@351d4566),Annotation([Ljava.lang.String;@14b746c8,[Ljava.lang.String;@c87ff18,[Ledu.cmu.lti.nlp.amr.Entity;@347c8715))
AMR:
(a / and, op, d / derive-01)
(a / and, op, t2 / think-01)
(d / derive-01, ARG1, t / thing)
(o / object, mod, u / understand-01)
(t2 / think-01, ARG0, m / man)
(t2 / think-01, ARG1, u / understand-01)
(t3 / they, op, d / derive-01)
(u / understand-01, ARG1, e / essential)
(w / whatsoever, op, d / derive-01)

Decoded in 280,803 microseconds
Sentence: similarly folk memories of 1929 derived from flickering pathe news clips inspire styles of panic on todays trading floors

NER Entity: (organization :name (name :op "pathe"))
Spans:
Span 4-5:  1929 => (date-entity :year 1929)
Span 10-11:  clips => clip
Span 5-6:  derived => derive-01
Span 1-2:  folk => folk
Span 11-12:  inspire => inspire-01
Span 2-3:  memories => memory
Span 9-10:  news => news
Span 14-15:  panic => panic-01
Span 17-18:  trading => trade-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),trading,trade-01,false), Span(14,15,List(1),panic,panic-01,false), Span(11,12,List(2),inspire,inspire-01,false), Span(10,11,List(3),clips,clip,false), Span(9,10,List(4),news,news,false), Span(5,6,List(5),derived,derive-01,false), Span(4,5,List(7, 6),1929,(date-entity :year 1929),false), Span(2,3,List(8),memories,memory,false), Span(1,2,List(9),folk,folk,false)),Map(2 -> inspire-01, 5 -> derive-01, 8 -> memory, 7 -> 1929, 1 -> panic-01, 4 -> news, 6 -> date-entity, 9 -> folk, 0 -> trade-01, 3 -> clip),Map(n -> news, t -> trade-01, m -> memory, d -> derive-01, 1 -> 1929, p -> panic-01, d2 -> date-entity, i -> inspire-01, c -> clip, f -> folk))),[Ljava.lang.String;@1070ed00,Annotation([Ljava.lang.String;@65d7a36e,[Ljava.lang.String;@302abefe,[Ljava.lang.String;@46612e66),Annotation([Ljava.lang.String;@162d4ea3,[Ljava.lang.String;@7885bab4,[Ledu.cmu.lti.nlp.amr.Dependency;@13a4bd3d),Annotation([Ljava.lang.String;@2483f9de,[Ljava.lang.String;@5489708c,[Ljava.lang.String;@b3c22b0),Annotation([Ljava.lang.String;@19095693,[Ljava.lang.String;@3412d9bc,[Ledu.cmu.lti.nlp.amr.Entity;@4194e059))
AMR:
(c / clip, mod, n / news)
(d / derive-01, ARG0, c / clip)
(d / derive-01, ARG1, m / memory)
(d2 / date-entity, year, 1 / 1929)
(i / inspire-01, ARG0, c / clip)
(i / inspire-01, ARG1, p / panic-01)
(m / memory, mod, f / folk)
(p / panic-01, ARG1, d2 / date-entity)
(t / trade-01, ARG0, c / clip)

Decoded in 209,500 microseconds
Sentence: the new system for arranging eurobond issues is derived from the way new issues have been done in the us for many years

Spans:
Span 8-9:  derived => derive-01
Span 13-14:  issues => issue
Span 6-7:  issues => issue
Span 21-22:  many => many
Span 12-13:  new => new
Span 1-2:  new => new
Span 2-3:  system => system
Span 11-12:  way => way
Span 22-23:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),years,(temporal-quantity :unit year),false), Span(21,22,List(2),many,many,false), Span(13,14,List(3),issues,issue,false), Span(12,13,List(4),new,new,false), Span(11,12,List(5),way,way,false), Span(8,9,List(6),derived,derive-01,false), Span(6,7,List(7),issues,issue,false), Span(2,3,List(8),system,system,false), Span(1,2,List(9),new,new,false)),Map(2 -> many, 5 -> way, 8 -> system, 7 -> issue, 1 -> year, 4 -> new, 6 -> derive-01, 9 -> new, 0 -> temporal-quantity, 3 -> issue),Map(w -> way, n -> new, t -> temporal-quantity, s -> system, d -> derive-01, m -> many, y -> year, i2 -> issue, i -> issue, n2 -> new))),[Ljava.lang.String;@151514b2,Annotation([Ljava.lang.String;@1b01bcee,[Ljava.lang.String;@f1abb1c,[Ljava.lang.String;@23f23303),Annotation([Ljava.lang.String;@71f31c64,[Ljava.lang.String;@fcd23ae,[Ledu.cmu.lti.nlp.amr.Dependency;@64e17c9c),Annotation([Ljava.lang.String;@fbc1982,[Ljava.lang.String;@62eade0,[Ljava.lang.String;@6299504b),Annotation([Ljava.lang.String;@3f669e7f,[Ljava.lang.String;@6a2fc45d,[Ledu.cmu.lti.nlp.amr.Entity;@6604ec21))
AMR:
(d / derive-01, ARG0, i2 / issue)
(d / derive-01, ARG1, s / system)
(d / derive-01, ARG2, w / way)
(i / issue, mod, n / new)
(m / many, op, d / derive-01)
(m / many, op, t / temporal-quantity)
(s / system, mod, n2 / new)
(s / system, part, i / issue)
(t / temporal-quantity, unit, y / year)

Decoded in 183,784 microseconds
Sentence: it requires that a right be justified by the service it does to the interest of the rightholder but it allows that the value placed on that interest may derive from its usefulness to others

Spans:
Span 20-21:  allows => allow-01
Span 18-19:  but => contrast-01
Span 29-30:  derive => derive-01
Span 27-28:  interest => interest-01
Span 14-15:  interest => interest-01
Span 19-20:  it => it
Span 10-11:  it => it
Span 0-1:  it => it
Span 6-7:  justified => justify-01
Span 28-29:  may => (date-entity :month 5)
Span 34-35:  others => other
Span 24-25:  placed => place-01
Span 1-2:  requires => require-01
Span 23-24:  value => value-01

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),others,other,false), Span(29,30,List(1),derive,derive-01,false), Span(28,29,List(3, 2),may,(date-entity :month 5),false), Span(27,28,List(4),interest,interest-01,false), Span(24,25,List(5),placed,place-01,false), Span(23,24,List(6),value,value-01,false), Span(20,21,List(7),allows,allow-01,false), Span(19,20,List(8),it,it,false), Span(18,19,List(9),but,contrast-01,false), Span(14,15,List(10),interest,interest-01,false), Span(10,11,List(11),it,it,false), Span(6,7,List(12),justified,justify-01,false), Span(1,2,List(13),requires,require-01,false), Span(0,1,List(14),it,it,false)),Map(2 -> date-entity, 5 -> place-01, 12 -> justify-01, 8 -> it, 7 -> allow-01, 1 -> derive-01, 4 -> interest-01, 11 -> it, 14 -> it, 6 -> value-01, 0 -> other, 9 -> contrast-01, 3 -> 5, 10 -> interest-01, 13 -> require-01),Map(i4 -> it, 5 -> 5, j -> justify-01, v -> value-01, d -> derive-01, i3 -> interest-01, p -> place-01, a -> allow-01, d2 -> date-entity, i2 -> it, i5 -> it, r -> require-01, i -> interest-01, c -> contrast-01, o -> other))),[Ljava.lang.String;@292321ca,Annotation([Ljava.lang.String;@417f69df,[Ljava.lang.String;@13ffd111,[Ljava.lang.String;@7ff6bd58),Annotation([Ljava.lang.String;@20091e0a,[Ljava.lang.String;@369332f4,[Ledu.cmu.lti.nlp.amr.Dependency;@79f64d29),Annotation([Ljava.lang.String;@1943fd4d,[Ljava.lang.String;@3eaad730,[Ljava.lang.String;@4215b074),Annotation([Ljava.lang.String;@1df3b191,[Ljava.lang.String;@6a0eb5f3,[Ledu.cmu.lti.nlp.amr.Entity;@6bcb9aea))
AMR:
(a / allow-01, ARG0, i2 / it)
(a / allow-01, ARG1, d / derive-01)
(c / contrast-01, ARG1, i3 / interest-01)
(c / contrast-01, ARG2, a / allow-01)
(d / derive-01, ARG0, i4 / it)
(d / derive-01, ARG1, v / value-01)
(d / derive-01, ARG2, o / other)
(d / derive-01, mod, d2 / date-entity)
(d2 / date-entity, month, 5 / 5)
(i / interest-01, ARG1, j / justify-01)
(j / justify-01, ARG1, i5 / it)
(p / place-01, ARG1, v / value-01)
(p / place-01, ARG2, i / interest-01)
(r / require-01, ARG1, i5 / it)

Decoded in 714,397 microseconds
Sentence: therefore my right in the street derives from my rights in the houses and not the other way round

Spans:
Span 13-14:  and => and
Span 12-13:  houses => house
Span 16-17:  other => other
Span 9-10:  rights => right
Span 18-19:  round => round
Span 5-6:  street => street
Span 17-18:  way => way

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),round,round,false), Span(17,18,List(1),way,way,false), Span(16,17,List(2),other,other,false), Span(13,14,List(3),and,and,false), Span(12,13,List(4),houses,house,false), Span(9,10,List(5),rights,right,false), Span(5,6,List(6),street,street,false)),Map(2 -> other, 5 -> right, 1 -> way, 4 -> house, 6 -> street, 0 -> round, 3 -> and),Map(w -> way, h -> house, s -> street, r2 -> right, a -> and, r -> round, o -> other))),[Ljava.lang.String;@427aff0,Annotation([Ljava.lang.String;@498fb7b1,[Ljava.lang.String;@7a64eb31,[Ljava.lang.String;@778d1cbd),Annotation([Ljava.lang.String;@5159f99c,[Ljava.lang.String;@6a129a7d,[Ledu.cmu.lti.nlp.amr.Dependency;@6b5cbaf2),Annotation([Ljava.lang.String;@14f59cef,[Ljava.lang.String;@91219a9,[Ljava.lang.String;@352aae6),Annotation([Ljava.lang.String;@2851e3be,[Ljava.lang.String;@183ee3a0,[Ledu.cmu.lti.nlp.amr.Entity;@48d229cf))
AMR:
(a / and, op, h / house)
(a / and, op, r / round)
(a / and, op, r2 / right)
(r / round, mod, o / other)
(r2 / right, poss, s / street)
(w / way, consist, r / round)

Decoded in 48,848 microseconds
Sentence: these goals generally conflict and it is rarely possible to establish a formal tradeoff among the goals between profit and safety say to derive a single composite objective function

Spans:
Span 14-15:  among => among
Span 19-20:  and => and
Span 4-5:  and => and
Span 17-18:  between => between
Span 3-4:  conflict => conflict-01
Span 23-24:  derive => derive-01
Span 10-11:  establish => establish-01
Span 12-13:  formal => formal
Span 28-29:  function => function-01
Span 2-3:  generally => general
Span 16-17:  goals => goal
Span 1-2:  goals => goal
Span 5-6:  it => it
Span 27-28:  objective => objective
Span 8-9:  possible => possible
Span 18-19:  profit => profit-01
Span 7-8:  rarely => rare
Span 20-21:  safety => safe-41
Span 21-22:  say => say-01
Span 25-26:  single => single

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),function,function-01,false), Span(27,28,List(1),objective,objective,false), Span(25,26,List(2),single,single,false), Span(23,24,List(3),derive,derive-01,false), Span(21,22,List(4),say,say-01,false), Span(20,21,List(5),safety,safe-41,false), Span(19,20,List(6),and,and,false), Span(18,19,List(7),profit,profit-01,false), Span(17,18,List(8),between,between,false), Span(16,17,List(9),goals,goal,false), Span(14,15,List(10),among,among,false), Span(12,13,List(11),formal,formal,false), Span(10,11,List(12),establish,establish-01,false), Span(8,9,List(13),possible,possible,false), Span(7,8,List(14),rarely,rare,false), Span(5,6,List(15),it,it,false), Span(4,5,List(16),and,and,false), Span(3,4,List(17),conflict,conflict-01,false), Span(2,3,List(18),generally,general,false), Span(1,2,List(19),goals,goal,false)),Map(2 -> single, 5 -> safe-41, 12 -> establish-01, 15 -> it, 8 -> between, 18 -> general, 7 -> profit-01, 17 -> conflict-01, 1 -> objective, 4 -> say-01, 11 -> formal, 14 -> rare, 6 -> and, 0 -> function-01, 9 -> goal, 16 -> and, 19 -> goal, 3 -> derive-01, 10 -> among, 13 -> possible),Map(e -> establish-01, g3 -> goal, s2 -> say-01, b -> between, p2 -> possible, a3 -> and, s -> single, d -> derive-01, g2 -> general, p -> profit-01, g -> goal, a -> and, i -> it, r -> rare, a2 -> among, c -> conflict-01, s3 -> safe-41, f2 -> formal, f -> function-01, o -> objective))),[Ljava.lang.String;@fa28023,Annotation([Ljava.lang.String;@758a81d9,[Ljava.lang.String;@585309d8,[Ljava.lang.String;@33ab7135),Annotation([Ljava.lang.String;@3c956913,[Ljava.lang.String;@75257d77,[Ledu.cmu.lti.nlp.amr.Dependency;@70504bb6),Annotation([Ljava.lang.String;@279ad355,[Ljava.lang.String;@25a885c3,[Ljava.lang.String;@5ae5d885),Annotation([Ljava.lang.String;@27ea3262,[Ljava.lang.String;@91d467,[Ledu.cmu.lti.nlp.amr.Entity;@660fb67b))
AMR:
(a / and, op, p / profit-01)
(a2 / among, op, g / goal)
(a3 / and, op, c / conflict-01)
(a3 / and, op, p2 / possible)
(b / between, op, p / profit-01)
(b / between, op, s3 / safe-41)
(c / conflict-01, ARG0, g3 / goal)
(c / conflict-01, manner, g2 / general)
(d / derive-01, ARG0, f2 / formal)
(d / derive-01, ARG1, f / function-01)
(e / establish-01, ARG0, i / it)
(e / establish-01, location, a2 / among)
(f / function-01, ARG1, o / objective)
(f / function-01, mod, s / single)
(g / goal, mod, p / profit-01)
(p2 / possible, domain, i / it)
(p2 / possible, mod, r / rare)
(s2 / say-01, ARG1, a3 / and)
(s2 / say-01, ARG2, d / derive-01)

Decoded in 583,446 microseconds
Sentence: concerning the general foundation of morals whether they be derived from reason or from sentiment, according to some the divisions we make between good and bad virtue and vice derive from a chain of argument

Spans:
Span 28-29:  and => and
Span 25-26:  and => and
Span 35-36:  argument => argue-01
Span 26-27:  bad => bad
Span 23-24:  between => between
Span 33-34:  chain => chain
Span 0-1:  concerning => concern-02
Span 30-31:  derive => derive-01
Span 9-10:  derived => derive-01
Span 20-21:  divisions => division
Span 3-4:  foundation => foundation
Span 2-3:  general => general
Span 24-25:  good => good
Span 5-6:  morals => moral
Span 12-13:  or => or
Span 11-12:  reason => reason
Span 14-15:  sentiment => sentiment
Span 18-19:  some => some
Span 7-8:  they => they
Span 29-30:  vice => vice
Span 27-28:  virtue => virtue
Span 21-22:  we => we

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),argument,argue-01,false), Span(33,34,List(1),chain,chain,false), Span(30,31,List(2),derive,derive-01,false), Span(29,30,List(3),vice,vice,false), Span(28,29,List(4),and,and,false), Span(27,28,List(5),virtue,virtue,false), Span(26,27,List(6),bad,bad,false), Span(25,26,List(7),and,and,false), Span(24,25,List(8),good,good,false), Span(23,24,List(9),between,between,false), Span(21,22,List(10),we,we,false), Span(20,21,List(11),divisions,division,false), Span(18,19,List(12),some,some,false), Span(14,15,List(13),sentiment,sentiment,false), Span(12,13,List(14),or,or,false), Span(11,12,List(15),reason,reason,false), Span(9,10,List(16),derived,derive-01,false), Span(7,8,List(17),they,they,false), Span(5,6,List(18),morals,moral,false), Span(3,4,List(19),foundation,foundation,false), Span(2,3,List(20),general,general,false), Span(0,1,List(21),concerning,concern-02,false)),Map(2 -> derive-01, 5 -> virtue, 12 -> some, 15 -> reason, 8 -> good, 21 -> concern-02, 18 -> moral, 7 -> and, 17 -> they, 1 -> chain, 4 -> and, 11 -> division, 14 -> or, 20 -> general, 6 -> bad, 0 -> argue-01, 9 -> between, 16 -> derive-01, 19 -> foundation, 3 -> vice, 10 -> we, 13 -> sentiment),Map(v2 -> virtue, w -> we, s2 -> sentiment, t -> they, b -> bad, d3 -> derive-01, b2 -> between, a3 -> and, s -> some, v -> vice, m -> moral, d -> derive-01, g2 -> general, g -> good, a -> argue-01, d2 -> division, r -> reason, a2 -> and, c -> chain, f -> foundation, o -> or, c2 -> concern-02))),[Ljava.lang.String;@70f78f68,Annotation([Ljava.lang.String;@ce82ec9,[Ljava.lang.String;@5f5794bd,[Ljava.lang.String;@6ee63531),Annotation([Ljava.lang.String;@4bae5cd8,[Ljava.lang.String;@24518fb9,[Ledu.cmu.lti.nlp.amr.Dependency;@66b2cd4f),Annotation([Ljava.lang.String;@64c53235,[Ljava.lang.String;@4e636942,[Ljava.lang.String;@60939442),Annotation([Ljava.lang.String;@78eaaa96,[Ljava.lang.String;@76659bde,[Ledu.cmu.lti.nlp.amr.Entity;@8dc488c))
AMR:
(a / argue-01, ARG0, s / some)
(a / argue-01, ARG1, o / or)
(a2 / and, op, a / argue-01)
(a2 / and, op, d / derive-01)
(a2 / and, source, c / chain)
(a3 / and, op, a2 / and)
(a3 / and, op, b / bad)
(a3 / and, op, g / good)
(b2 / between, op, d / derive-01)
(b2 / between, op, v2 / virtue)
(b2 / between, op, w / we)
(c2 / concern-02, ARG0, t / they)
(c2 / concern-02, ARG1, f / foundation)
(d / derive-01, ARG0, d2 / division)
(d / derive-01, mod, v / vice)
(d3 / derive-01, ARG0, o / or)
(d3 / derive-01, ARG1, t / they)
(f / foundation, mod, g2 / general)
(f / foundation, mod, m / moral)
(o / or, op, r / reason)
(o / or, op, s2 / sentiment)

Decoded in 864,915 microseconds
Sentence: for it was thought that the generalist could whenever he wanted to add a specialist dimension to his knowledge but general concepts were less easy to derive from the specialist

Spans:
Span 12-13:  add => add-02
Span 19-20:  but => contrast-01
Span 21-22:  concepts => concept
Span 7-8:  could => possible
Span 26-27:  derive => derive-01
Span 15-16:  dimension => dimension
Span 24-25:  easy => easy
Span 20-21:  general => general
Span 9-10:  he => he
Span 1-2:  it => it
Span 18-19:  knowledge => knowledge
Span 23-24:  less => less
Span 29-30:  specialist => (person :ARG0-of specialize-01)
Span 14-15:  specialist => (person :ARG0-of specialize-01)
Span 3-4:  thought => think-01
Span 10-11:  wanted => want-01
Span 8-9:  whenever => whenever

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(1, 0),specialist,(person :ARG0-of specialize-01),false), Span(26,27,List(2),derive,derive-01,false), Span(24,25,List(3),easy,easy,false), Span(23,24,List(4),less,less,false), Span(21,22,List(5),concepts,concept,false), Span(20,21,List(6),general,general,false), Span(19,20,List(7),but,contrast-01,false), Span(18,19,List(8),knowledge,knowledge,false), Span(15,16,List(9),dimension,dimension,false), Span(14,15,List(11, 10),specialist,(person :ARG0-of specialize-01),false), Span(12,13,List(12),add,add-02,false), Span(10,11,List(13),wanted,want-01,false), Span(9,10,List(14),he,he,false), Span(8,9,List(15),whenever,whenever,false), Span(7,8,List(16),could,possible,false), Span(3,4,List(17),thought,think-01,false), Span(1,2,List(18),it,it,false)),Map(2 -> derive-01, 5 -> concept, 12 -> add-02, 15 -> whenever, 8 -> knowledge, 18 -> it, 7 -> contrast-01, 17 -> think-01, 1 -> specialize-01, 4 -> less, 11 -> specialize-01, 14 -> he, 6 -> general, 0 -> person, 9 -> dimension, 16 -> possible, 3 -> easy, 10 -> person, 13 -> want-01),Map(e -> easy, w -> want-01, h -> he, s2 -> specialize-01, t -> think-01, k -> knowledge, p2 -> person, s -> specialize-01, d -> derive-01, p -> person, g -> general, a -> add-02, d2 -> dimension, w2 -> whenever, i -> it, c -> concept, l -> less, p3 -> possible, c2 -> contrast-01))),[Ljava.lang.String;@2602613b,Annotation([Ljava.lang.String;@663d7bfb,[Ljava.lang.String;@4e96d02d,[Ljava.lang.String;@f3d62aa),Annotation([Ljava.lang.String;@7188eb7,[Ljava.lang.String;@5d419404,[Ledu.cmu.lti.nlp.amr.Dependency;@7c5cc270),Annotation([Ljava.lang.String;@2de186d9,[Ljava.lang.String;@315c2817,[Ljava.lang.String;@194c1752),Annotation([Ljava.lang.String;@528f1577,[Ljava.lang.String;@2fca61f9,[Ledu.cmu.lti.nlp.amr.Entity;@fe63af2))
AMR:
(a / add-02, ARG1, d2 / dimension)
(a / add-02, ARG2, k / knowledge)
(c / concept, mod, g / general)
(c2 / contrast-01, ARG1, w / want-01)
(c2 / contrast-01, ARG2, e / easy)
(d / derive-01, ARG2, p / person)
(e / easy, degree, l / less)
(e / easy, domain, c / concept)
(e / easy, domain, d / derive-01)
(p3 / possible, condition, t / think-01)
(s / specialize-01, ARG0, p / person)
(s2 / specialize-01, ARG0, p2 / person)
(s2 / specialize-01, ARG2, k / knowledge)
(t / think-01, ARG0, p2 / person)
(t / think-01, ARG1, i / it)
(w / want-01, ARG0, h / he)
(w / want-01, ARG1, a / add-02)
(w / want-01, location, w2 / whenever)

Decoded in 762,874 microseconds
Sentence: magdalen has suffered from a reputation for fragmentation and anonymity deriving largely from it geographical size and its relatively large numbers 550 students 44 per cent postgraduate

Spans:
Span 23-24:  44 => 44
Span 16-17:  and => and
Span 8-9:  and => and
Span 9-10:  anonymity => anonymity
Span 25-26:  cent => (monetary-quantity :unit cent)
Span 7-8:  fragmentation => fragment-01
Span 14-15:  geographical => geography
Span 13-14:  it => it
Span 19-20:  large => large
Span 11-12:  largely => large
Span 20-21:  numbers => number
Span 18-19:  relatively => relative
Span 5-6:  reputation => reputation
Span 15-16:  size => size
Span 22-23:  students => (person :ARG0-of study-01)
Span 2-3:  suffered => suffer-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(1, 0),cent,(monetary-quantity :unit cent),false), Span(23,24,List(2),44,44,false), Span(22,23,List(4, 3),students,(person :ARG0-of study-01),false), Span(20,21,List(5),numbers,number,false), Span(19,20,List(6),large,large,false), Span(18,19,List(7),relatively,relative,false), Span(16,17,List(8),and,and,false), Span(15,16,List(9),size,size,false), Span(14,15,List(10),geographical,geography,false), Span(13,14,List(11),it,it,false), Span(11,12,List(12),largely,large,false), Span(9,10,List(13),anonymity,anonymity,false), Span(8,9,List(14),and,and,false), Span(7,8,List(15),fragmentation,fragment-01,false), Span(5,6,List(16),reputation,reputation,false), Span(2,3,List(17),suffered,suffer-01,false)),Map(2 -> 44, 5 -> number, 12 -> large, 15 -> fragment-01, 8 -> and, 7 -> relative, 17 -> suffer-01, 1 -> cent, 4 -> study-01, 11 -> it, 14 -> and, 6 -> large, 0 -> monetary-quantity, 9 -> size, 16 -> reputation, 3 -> person, 10 -> geography, 13 -> anonymity),Map(n -> number, s2 -> size, a3 -> and, s -> study-01, m -> monetary-quantity, r2 -> reputation, p -> person, g -> geography, 4 -> 44, a -> and, l2 -> large, a2 -> anonymity, r -> relative, i -> it, s3 -> suffer-01, c -> cent, l -> large, f -> fragment-01))),[Ljava.lang.String;@5427ee05,Annotation([Ljava.lang.String;@97bb56d,[Ljava.lang.String;@18c40bf8,[Ljava.lang.String;@6eedd37b),Annotation([Ljava.lang.String;@3fd76922,[Ljava.lang.String;@573757ec,[Ledu.cmu.lti.nlp.amr.Dependency;@726d73af),Annotation([Ljava.lang.String;@6fc620d9,[Ljava.lang.String;@3896bfe3,[Ljava.lang.String;@310fed1b),Annotation([Ljava.lang.String;@c97a0c7,[Ljava.lang.String;@36bc6f46,[Ledu.cmu.lti.nlp.amr.Entity;@d2d78bd))
AMR:
(a / and, op, p / person)
(a / and, op, s2 / size)
(a3 / and, op, a2 / anonymity)
(a3 / and, op, f / fragment-01)
(a3 / and, op, l2 / large)
(f / fragment-01, ARG0, 4 / 44)
(f / fragment-01, ARG1, m / monetary-quantity)
(i / it, mod, s2 / size)
(l / large, degree, r / relative)
(m / monetary-quantity, unit, c / cent)
(n / number, mod, l / large)
(r2 / reputation, location, f / fragment-01)
(s / study-01, ARG0, p / person)
(s / study-01, ARG1, n / number)
(s2 / size, mod, g / geography)
(s3 / suffer-01, ARG0, r2 / reputation)
(s3 / suffer-01, ARG1, a / and)

Decoded in 196,247 microseconds
Sentence: indeed to revert to the watchmans speech it is in fact from the verb kratei 10 that the audience derives its first impression of the queen

Spans:
Span 15-16:  10 => 10
Span 18-19:  audience => audience
Span 10-11:  fact => fact
Span 22-23:  impression => impression
Span 0-1:  indeed => indeed
Span 7-8:  it => it
Span 2-3:  revert => revert-01
Span 6-7:  speech => speech

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),impression,impression,false), Span(18,19,List(1),audience,audience,false), Span(15,16,List(2),10,10,false), Span(10,11,List(3),fact,fact,false), Span(7,8,List(4),it,it,false), Span(6,7,List(5),speech,speech,false), Span(2,3,List(6),revert,revert-01,false), Span(0,1,List(7),indeed,indeed,false)),Map(2 -> 10, 5 -> speech, 7 -> indeed, 1 -> audience, 4 -> it, 6 -> revert-01, 0 -> impression, 3 -> fact),Map(s -> speech, i3 -> indeed, 1 -> 10, a -> audience, i2 -> it, r -> revert-01, i -> impression, f -> fact))),[Ljava.lang.String;@2451c70d,Annotation([Ljava.lang.String;@74e3391b,[Ljava.lang.String;@71ba5790,[Ljava.lang.String;@cae945),Annotation([Ljava.lang.String;@998b16b,[Ljava.lang.String;@7a7ecb9,[Ledu.cmu.lti.nlp.amr.Dependency;@21a6699c),Annotation([Ljava.lang.String;@345f9206,[Ljava.lang.String;@6e6be2c6,[Ljava.lang.String;@6cf56dcc),Annotation([Ljava.lang.String;@64fba3f6,[Ljava.lang.String;@44c99f45,[Ledu.cmu.lti.nlp.amr.Entity;@10f78e4b))
AMR:
(1 / 10, op, r / revert-01)
(i / impression, op, r / revert-01)
(i / impression, poss, a / audience)
(r / revert-01, ARG0, f / fact)
(r / revert-01, ARG2, s / speech)
(r / revert-01, instrument, i3 / indeed)
(s / speech, domain, i2 / it)

Decoded in 54,808 microseconds
Sentence: other visitors derived a contrary impression

Spans:
Span 4-5:  contrary => contrary-41
Span 2-3:  derived => derive-01
Span 5-6:  impression => impression
Span 0-1:  other => other
Span 1-2:  visitors => (person :ARG0-of visit-01)

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),impression,impression,false), Span(4,5,List(1),contrary,contrary-41,false), Span(2,3,List(2),derived,derive-01,false), Span(1,2,List(4, 3),visitors,(person :ARG0-of visit-01),false), Span(0,1,List(5),other,other,false)),Map(2 -> derive-01, 5 -> other, 1 -> contrary-41, 4 -> visit-01, 0 -> impression, 3 -> person),Map(v -> visit-01, d -> derive-01, p -> person, i -> impression, c -> contrary-41, o -> other))),[Ljava.lang.String;@6c9ee6a0,Annotation([Ljava.lang.String;@34374a16,[Ljava.lang.String;@19e10522,[Ljava.lang.String;@4180874),Annotation([Ljava.lang.String;@45d2f9c5,[Ljava.lang.String;@1e0c1853,[Ledu.cmu.lti.nlp.amr.Dependency;@2c11008e),Annotation([Ljava.lang.String;@103b813c,[Ljava.lang.String;@32a19277,[Ljava.lang.String;@d96dc99),Annotation([Ljava.lang.String;@2b6cc7c7,[Ljava.lang.String;@72aff016,[Ledu.cmu.lti.nlp.amr.Entity;@7cbb6f2c))
AMR:
(c / contrary-41, ARG0, i / impression)
(d / derive-01, ARG0, p / person)
(d / derive-01, ARG1, i / impression)
(p / person, mod, o / other)
(v / visit-01, ARG0, p / person)

Decoded in 29,511 microseconds
Sentence: though all our knowledge is in the senses or derived from them it is not always simply a matter of sensory information

Spans:
Span 1-2:  all => all
Span 15-16:  always => always
Span 9-10:  derived => derive-01
Span 21-22:  information => information
Span 12-13:  it => it
Span 3-4:  knowledge => knowledge
Span 18-19:  matter => matter
Span 8-9:  or => or
Span 7-8:  senses => sense
Span 16-17:  simply => simple

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),information,information,false), Span(18,19,List(1),matter,matter,false), Span(16,17,List(2),simply,simple,false), Span(15,16,List(3),always,always,false), Span(12,13,List(4),it,it,false), Span(9,10,List(5),derived,derive-01,false), Span(8,9,List(6),or,or,false), Span(7,8,List(7),senses,sense,false), Span(3,4,List(8),knowledge,knowledge,false), Span(1,2,List(9),all,all,false)),Map(2 -> simple, 5 -> derive-01, 8 -> knowledge, 7 -> sense, 1 -> matter, 4 -> it, 6 -> or, 9 -> all, 0 -> information, 3 -> always),Map(k -> knowledge, s2 -> sense, s -> simple, d -> derive-01, m -> matter, a -> always, i2 -> it, a2 -> all, i -> information, o -> or))),[Ljava.lang.String;@757ff1ad,Annotation([Ljava.lang.String;@22d3d11f,[Ljava.lang.String;@465c16,[Ljava.lang.String;@b47a87e),Annotation([Ljava.lang.String;@d86edfb,[Ljava.lang.String;@157200ad,[Ledu.cmu.lti.nlp.amr.Dependency;@6f8a68da),Annotation([Ljava.lang.String;@67e9f96b,[Ljava.lang.String;@31f61519,[Ljava.lang.String;@12e335ef),Annotation([Ljava.lang.String;@2e9e799,[Ljava.lang.String;@4a63ef4d,[Ledu.cmu.lti.nlp.amr.Entity;@66f3ce62))
AMR:
(d / derive-01, ARG0, k / knowledge)
(d / derive-01, ARG1, m / matter)
(i / information, quant, m / matter)
(k / knowledge, quant, a2 / all)
(m / matter, domain, i2 / it)
(m / matter, mod, a / always)
(m / matter, mod, s / simple)
(o / or, op, d / derive-01)
(o / or, op, s2 / sense)

Decoded in 58,542 microseconds
Sentence: some art historians believe the design derives from the mouth of the whale in the story of jonah

Spans:
Span 1-2:  art => art
Span 3-4:  believe => believe-01
Span 5-6:  design => design-01
Span 2-3:  historians => historian
Span 9-10:  mouth => mouth
Span 0-1:  some => some
Span 15-16:  story => story
Span 12-13:  whale => whale

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),story,story,false), Span(12,13,List(1),whale,whale,false), Span(9,10,List(2),mouth,mouth,false), Span(5,6,List(3),design,design-01,false), Span(3,4,List(4),believe,believe-01,false), Span(2,3,List(5),historians,historian,false), Span(1,2,List(6),art,art,false), Span(0,1,List(7),some,some,false)),Map(2 -> mouth, 5 -> historian, 7 -> some, 1 -> whale, 4 -> believe-01, 6 -> art, 0 -> story, 3 -> design-01),Map(w -> whale, h -> historian, s2 -> some, b -> believe-01, s -> story, d -> design-01, m -> mouth, a -> art))),[Ljava.lang.String;@1072b8bc,Annotation([Ljava.lang.String;@5bbe4713,[Ljava.lang.String;@292c5f73,[Ljava.lang.String;@202e8c23),Annotation([Ljava.lang.String;@4ff25e56,[Ljava.lang.String;@310f891b,[Ledu.cmu.lti.nlp.amr.Dependency;@72f264c6),Annotation([Ljava.lang.String;@7b63e1f,[Ljava.lang.String;@4da8692d,[Ljava.lang.String;@6b91312f),Annotation([Ljava.lang.String;@9343bd5,[Ljava.lang.String;@444421ab,[Ledu.cmu.lti.nlp.amr.Entity;@54fe8490))
AMR:
(b / believe-01, ARG0, h / historian)
(b / believe-01, ARG1, m / mouth)
(d / design-01, ARG0, h / historian)
(d / design-01, topic, w / whale)
(h / historian, quant, s2 / some)
(h / historian, topic, a / art)
(w / whale, poss, s / story)

Decoded in 48,937 microseconds
Sentence: but the stations do demonstrate that architectural influences flowed north and south through the americas bending styles derived from europe to new ends

Spans:
Span 10-11:  and => and
Span 0-1:  but => contrast-01
Span 4-5:  demonstrate => demonstrate-01
Span 17-18:  derived => derive-01
Span 22-23:  ends => end-01
Span 19-20:  europe => (continent :name (name :op "Europe"))
Span 8-9:  flowed => flow-01
Span 7-8:  influences => influence-01
Span 21-22:  new => new
Span 9-10:  north => north
Span 11-12:  south => south
Span 2-3:  stations => station

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),ends,end-01,false), Span(21,22,List(1),new,new,false), Span(19,20,List(4, 3, 2),europe,(continent :name (name :op "Europe")),false), Span(17,18,List(5),derived,derive-01,false), Span(11,12,List(6),south,south,false), Span(10,11,List(7),and,and,false), Span(9,10,List(8),north,north,false), Span(8,9,List(9),flowed,flow-01,false), Span(7,8,List(10),influences,influence-01,false), Span(4,5,List(11),demonstrate,demonstrate-01,false), Span(2,3,List(12),stations,station,false), Span(0,1,List(13),but,contrast-01,false)),Map(2 -> continent, 5 -> derive-01, 12 -> station, 8 -> north, 7 -> and, 1 -> new, 4 -> "Europe", 11 -> demonstrate-01, 6 -> south, 0 -> end-01, 9 -> flow-01, 3 -> name, 10 -> influence-01, 13 -> contrast-01),Map(e -> end-01, n -> new, s2 -> station, s -> south, d -> derive-01, a -> and, n3 -> north, d2 -> demonstrate-01, i -> influence-01, c -> continent, f -> flow-01, n2 -> name, c2 -> contrast-01))),[Ljava.lang.String;@11b13588,Annotation([Ljava.lang.String;@9317ccb,[Ljava.lang.String;@ff7f824,[Ljava.lang.String;@60c40bac),Annotation([Ljava.lang.String;@66da7ad5,[Ljava.lang.String;@11b66ab4,[Ledu.cmu.lti.nlp.amr.Dependency;@5f175881),Annotation([Ljava.lang.String;@75b3adec,[Ljava.lang.String;@675f9d52,[Ljava.lang.String;@3651a783),Annotation([Ljava.lang.String;@2acca551,[Ljava.lang.String;@61797eca,[Ledu.cmu.lti.nlp.amr.Entity;@6f7331c4))
AMR:
(a / and, op, f / flow-01)
(a / and, op, n3 / north)
(a / and, op, s / south)
(c / continent, name, n2 / name)
(c2 / contrast-01, ARG1, d2 / demonstrate-01)
(d / derive-01, ARG1, e / end-01)
(d / derive-01, ARG2, c / continent)
(d2 / demonstrate-01, ARG0, s2 / station)
(d2 / demonstrate-01, ARG1, f / flow-01)
(e / end-01, ARG1, a / and)
(e / end-01, mod, n / new)
(f / flow-01, ARG1, i / influence-01)
(n2 / name, op, "Europe")

Decoded in 75,255 microseconds
Sentence: becomes phallic through the power she derives from her violent mutilation

Spans:
Span 0-1:  becomes => become-01
Span 4-5:  power => power
Span 5-6:  she => she
Span 9-10:  violent => violent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),violent,violent,false), Span(5,6,List(1),she,she,false), Span(4,5,List(2),power,power,false), Span(0,1,List(3),becomes,become-01,false)),Map(2 -> power, 1 -> she, 0 -> violent, 3 -> become-01),Map(b -> become-01, s -> she, v -> violent, p -> power))),[Ljava.lang.String;@73c87405,Annotation([Ljava.lang.String;@6d392fa5,[Ljava.lang.String;@456731a8,[Ljava.lang.String;@79ed3030),Annotation([Ljava.lang.String;@42f6ddd9,[Ljava.lang.String;@5d5ef3e7,[Ledu.cmu.lti.nlp.amr.Dependency;@4def295),Annotation([Ljava.lang.String;@490816b2,[Ljava.lang.String;@320a2593,[Ljava.lang.String;@3828ef8f),Annotation([Ljava.lang.String;@787b217,[Ljava.lang.String;@5dbd07dd,[Ledu.cmu.lti.nlp.amr.Entity;@254f6e3f))
AMR:
(b / become-01, ARG1, s / she)
(b / become-01, time, p / power)
(v / violent, domain, s / she)

Decoded in 13,474 microseconds
Sentence: and a patients group from new york called project inform released preliminary data suggesting that compound q a substance derived from a chinese cucumber could be effective in helping patients already taking azt

NER Entity: (country :name (name :op "york"))
Spans:
Span 30-31:  already => already
Span 0-1:  and => and
Span 22-23:  chinese => (person :mod (country :name (name :op "China")))
Span 15-16:  compound => compound-01
Span 24-25:  could => possible
Span 12-13:  data => data
Span 19-20:  derived => derive-01
Span 26-27:  effective => effective
Span 3-4:  group => group
Span 28-29:  helping => help-01
Span 9-10:  inform => inform-01
Span 5-6:  new => new
Span 29-30:  patients => (have-rel-role-91 :ARG2 patient)
Span 2-3:  patients => (have-rel-role-91 :ARG2 patient)
Span 11-12:  preliminary => preliminary
Span 8-9:  project => project
Span 10-11:  released => release-01
Span 18-19:  substance => substance
Span 13-14:  suggesting => suggest-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),already,already,false), Span(29,30,List(2, 1),patients,(have-rel-role-91 :ARG2 patient),false), Span(28,29,List(3),helping,help-01,false), Span(26,27,List(4),effective,effective,false), Span(24,25,List(5),could,possible,false), Span(22,23,List(9, 8, 7, 6),chinese,(person :mod (country :name (name :op "China"))),false), Span(19,20,List(10),derived,derive-01,false), Span(18,19,List(11),substance,substance,false), Span(15,16,List(12),compound,compound-01,false), Span(13,14,List(13),suggesting,suggest-01,false), Span(12,13,List(14),data,data,false), Span(11,12,List(15),preliminary,preliminary,false), Span(10,11,List(16),released,release-01,false), Span(9,10,List(17),inform,inform-01,false), Span(8,9,List(18),project,project,false), Span(5,6,List(19),new,new,false), Span(3,4,List(20),group,group,false), Span(2,3,List(22, 21),patients,(have-rel-role-91 :ARG2 patient),false), Span(0,1,List(23),and,and,false)),Map(2 -> patient, 5 -> possible, 12 -> compound-01, 15 -> preliminary, 8 -> name, 21 -> have-rel-role-91, 18 -> project, 7 -> country, 17 -> inform-01, 1 -> have-rel-role-91, 23 -> and, 4 -> effective, 11 -> substance, 14 -> data, 20 -> group, 6 -> person, 22 -> patient, 0 -> already, 9 -> "China", 16 -> release-01, 19 -> new, 3 -> help-01, 10 -> derive-01, 13 -> suggest-01),Map(e -> effective, n -> name, h -> have-rel-role-91, p5 -> project, h2 -> help-01, s2 -> suggest-01, p2 -> possible, s -> substance, d -> derive-01, g -> group, p -> patient, a -> already, p4 -> preliminary, d2 -> data, a2 -> and, i -> inform-01, r -> release-01, h3 -> have-rel-role-91, c -> country, p6 -> patient, p3 -> person, n2 -> new, c2 -> compound-01))),[Ljava.lang.String;@21dace28,Annotation([Ljava.lang.String;@2414b575,[Ljava.lang.String;@4b9526d4,[Ljava.lang.String;@2d284f10),Annotation([Ljava.lang.String;@315eba99,[Ljava.lang.String;@422cac21,[Ledu.cmu.lti.nlp.amr.Dependency;@2d8cc78),Annotation([Ljava.lang.String;@6757dbbd,[Ljava.lang.String;@391b8a4c,[Ljava.lang.String;@3f14a0de),Annotation([Ljava.lang.String;@634d6f2c,[Ljava.lang.String;@70bde4a2,[Ledu.cmu.lti.nlp.amr.Entity;@42ed8181))
AMR:
(c / country, name, n / name)
(c2 / compound-01, ARG1, n2 / new)
(d / derive-01, ARG1, s / substance)
(d2 / data, mod, p4 / preliminary)
(e / effective, purpose, h2 / help-01)
(g / group, name, i / inform-01)
(h / have-rel-role-91, ARG1, p3 / person)
(h / have-rel-role-91, ARG2, p / patient)
(h2 / help-01, ARG1, p / patient)
(h3 / have-rel-role-91, ARG1, g / group)
(h3 / have-rel-role-91, ARG2, p6 / patient)
(i / inform-01, ARG1, a / already)
(i / inform-01, mod, p5 / project)
(n / name, op, "China")
(p2 / possible, domain, e / effective)
(p3 / person, mod, c / country)
(p4 / preliminary, mod, p2 / possible)
(r / release-01, ARG0, i / inform-01)
(r / release-01, ARG1, d2 / data)
(r / release-01, ARG2, c2 / compound-01)
(s2 / suggest-01, ARG0, d2 / data)
(s2 / suggest-01, ARG1, a2 / and)
(s2 / suggest-01, ARG2, s / substance)

Decoded in 1,654,962 microseconds
Sentence: and by the married womens property act 1964 any money derived by a wife from an allowance made by her husband for housekeeping purposes or any property acquired out of it is deemed in the absence of any agreement between them to the contrary to belong in equal shares to the husband and wife

Spans:
Span 7-8:  1964 => (date-entity :year 1964)
Span 35-36:  absence => absent-01
Span 27-28:  acquired => acquire-01
Span 6-7:  act => act-02
Span 38-39:  agreement => agree-01
Span 16-17:  allowance => allowance
Span 52-53:  and => and
Span 0-1:  and => and
Span 37-38:  any => any
Span 25-26:  any => any
Span 8-9:  any => any
Span 45-46:  belong => belong-01
Span 39-40:  between => between
Span 43-44:  contrary => contrary-41
Span 32-33:  deemed => deem-01
Span 10-11:  derived => derive-01
Span 47-48:  equal => equal-01
Span 51-52:  husband => (have-rel-role-91 :ARG2 husband)
Span 20-21:  husband => (have-rel-role-91 :ARG2 husband)
Span 30-31:  it => it
Span 3-4:  married => marry-01
Span 9-10:  money => money
Span 24-25:  or => or
Span 26-27:  property => property
Span 5-6:  property => property
Span 23-24:  purposes => purpose
Span 48-49:  shares => share
Span 53-54:  wife => (have-rel-role-91 :ARG2 wife)
Span 13-14:  wife => (have-rel-role-91 :ARG2 wife)

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(1, 0),wife,(have-rel-role-91 :ARG2 wife),false), Span(52,53,List(2),and,and,false), Span(51,52,List(4, 3),husband,(have-rel-role-91 :ARG2 husband),false), Span(48,49,List(5),shares,share,false), Span(47,48,List(6),equal,equal-01,false), Span(45,46,List(7),belong,belong-01,false), Span(43,44,List(8),contrary,contrary-41,false), Span(39,40,List(9),between,between,false), Span(38,39,List(10),agreement,agree-01,false), Span(37,38,List(11),any,any,false), Span(35,36,List(12),absence,absent-01,false), Span(32,33,List(13),deemed,deem-01,false), Span(30,31,List(14),it,it,false), Span(27,28,List(15),acquired,acquire-01,false), Span(26,27,List(16),property,property,false), Span(25,26,List(17),any,any,false), Span(24,25,List(18),or,or,false), Span(23,24,List(19),purposes,purpose,false), Span(20,21,List(21, 20),husband,(have-rel-role-91 :ARG2 husband),false), Span(16,17,List(22),allowance,allowance,false), Span(13,14,List(24, 23),wife,(have-rel-role-91 :ARG2 wife),false), Span(10,11,List(25),derived,derive-01,false), Span(9,10,List(26),money,money,false), Span(8,9,List(27),any,any,false), Span(7,8,List(29, 28),1964,(date-entity :year 1964),false), Span(6,7,List(30),act,act-02,false), Span(5,6,List(31),property,property,false), Span(3,4,List(32),married,marry-01,false), Span(0,1,List(33),and,and,false)),Map(30 -> act-02, 2 -> and, 5 -> share, 33 -> and, 27 -> any, 12 -> absent-01, 8 -> contrary-41, 15 -> acquire-01, 21 -> husband, 18 -> or, 24 -> wife, 7 -> belong-01, 1 -> wife, 17 -> any, 23 -> have-rel-role-91, 26 -> money, 4 -> husband, 11 -> any, 32 -> marry-01, 14 -> it, 29 -> 1964, 20 -> have-rel-role-91, 28 -> date-entity, 6 -> equal-01, 9 -> between, 0 -> have-rel-role-91, 22 -> allowance, 16 -> property, 19 -> purpose, 10 -> agree-01, 3 -> have-rel-role-91, 31 -> property, 25 -> derive-01, 13 -> deem-01),Map(e -> equal-01, h5 -> husband, a7 -> allowance, w -> wife, h -> have-rel-role-91, a10 -> and, h2 -> have-rel-role-91, b -> belong-01, m2 -> marry-01, b2 -> between, d3 -> date-entity, a9 -> act-02, p2 -> purpose, a3 -> any, s -> share, a6 -> any, h4 -> have-rel-role-91, m -> money, d -> deem-01, 1 -> 1964, p -> property, a -> and, d2 -> derive-01, a5 -> acquire-01, a8 -> any, w2 -> wife, a2 -> agree-01, i -> it, c -> contrary-41, h3 -> husband, h6 -> have-rel-role-91, o -> or, p3 -> property, a4 -> absent-01))),[Ljava.lang.String;@5f0940e,Annotation([Ljava.lang.String;@7588262d,[Ljava.lang.String;@3d8290a3,[Ljava.lang.String;@46e5dce1),Annotation([Ljava.lang.String;@1d085c24,[Ljava.lang.String;@fd94e60,[Ledu.cmu.lti.nlp.amr.Dependency;@3a888c1),Annotation([Ljava.lang.String;@2daa38c7,[Ljava.lang.String;@275a83d,[Ljava.lang.String;@7a783e0d),Annotation([Ljava.lang.String;@6c32064b,[Ljava.lang.String;@483b5d6b,[Ledu.cmu.lti.nlp.amr.Entity;@317240d9))
AMR:
(a / and, op, h2 / have-rel-role-91)
(a10 / and, op, a9 / act-02)
(a2 / agree-01, ARG1, b2 / between)
(a2 / agree-01, mod, a3 / any)
(a4 / absent-01, ARG0, i / it)
(a4 / absent-01, ARG1, a2 / agree-01)
(a5 / acquire-01, ARG0, p2 / purpose)
(a5 / acquire-01, ARG1, p / property)
(a5 / acquire-01, manner, d / deem-01)
(a9 / act-02, ARG0, d3 / date-entity)
(a9 / act-02, ARG1, p3 / property)
(b / belong-01, ARG0, s / share)
(b / belong-01, ARG1, a / and)
(c / contrary-41, ARG0, i / it)
(c / contrary-41, ARG1, b / belong-01)
(d / deem-01, ARG1, a4 / absent-01)
(d2 / derive-01, ARG1, m / money)
(d3 / date-entity, year, 1 / 1964)
(e / equal-01, ARG1, s / share)
(h / have-rel-role-91, ARG1, d / deem-01)
(h / have-rel-role-91, ARG2, w / wife)
(h2 / have-rel-role-91, ARG2, h3 / husband)
(h4 / have-rel-role-91, ARG1, p2 / purpose)
(h4 / have-rel-role-91, ARG2, h5 / husband)
(h5 / husband, poss, a7 / allowance)
(h6 / have-rel-role-91, ARG1, a7 / allowance)
(h6 / have-rel-role-91, ARG2, w2 / wife)
(m / money, mod, a8 / any)
(m / money, poss, d3 / date-entity)
(m2 / marry-01, ARG1, a9 / act-02)
(o / or, op, m / money)
(o / or, op, p / property)
(p / property, mod, a6 / any)

Decoded in 1,615,582 microseconds
Sentence: in most jurisdictions however instructions are nowadays derived mainly from patterns drafted by semiofficial sources such as californias baji book of approved jury instructions

Spans:
Span 21-22:  approved => approve-01
Span 19-20:  book => book
Span 7-8:  derived => derive-01
Span 11-12:  drafted => draft-01
Span 23-24:  instructions => instruction
Span 4-5:  instructions => instruction
Span 2-3:  jurisdictions => jurisdiction
Span 22-23:  jury => jury
Span 8-9:  mainly => main
Span 1-2:  most => most
Span 6-7:  nowadays => nowadays
Span 10-11:  patterns => pattern-01
Span 14-15:  sources => source
Span 15-16:  such => such

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),instructions,instruction,false), Span(22,23,List(1),jury,jury,false), Span(21,22,List(2),approved,approve-01,false), Span(19,20,List(3),book,book,false), Span(15,16,List(4),such,such,false), Span(14,15,List(5),sources,source,false), Span(11,12,List(6),drafted,draft-01,false), Span(10,11,List(7),patterns,pattern-01,false), Span(8,9,List(8),mainly,main,false), Span(7,8,List(9),derived,derive-01,false), Span(6,7,List(10),nowadays,nowadays,false), Span(4,5,List(11),instructions,instruction,false), Span(2,3,List(12),jurisdictions,jurisdiction,false), Span(1,2,List(13),most,most,false)),Map(2 -> approve-01, 5 -> source, 12 -> jurisdiction, 8 -> main, 7 -> pattern-01, 1 -> jury, 4 -> such, 11 -> instruction, 6 -> draft-01, 0 -> instruction, 9 -> derive-01, 3 -> book, 10 -> nowadays, 13 -> most),Map(n -> nowadays, s2 -> source, b -> book, m2 -> most, j -> jury, s -> such, j2 -> jurisdiction, d -> draft-01, m -> main, p -> pattern-01, a -> approve-01, d2 -> derive-01, i2 -> instruction, i -> instruction))),[Ljava.lang.String;@43ff7feb,Annotation([Ljava.lang.String;@3b27402d,[Ljava.lang.String;@de668b2,[Ljava.lang.String;@11e3853f),Annotation([Ljava.lang.String;@7040f445,[Ljava.lang.String;@38651796,[Ledu.cmu.lti.nlp.amr.Dependency;@74ef95c6),Annotation([Ljava.lang.String;@1d523624,[Ljava.lang.String;@608486,[Ljava.lang.String;@409c799b),Annotation([Ljava.lang.String;@60f3d040,[Ljava.lang.String;@26ed4b7a,[Ledu.cmu.lti.nlp.amr.Entity;@24f64a8d))
AMR:
(a / approve-01, ARG1, i / instruction)
(b / book, topic, i / instruction)
(d / draft-01, ARG0, s2 / source)
(d / draft-01, ARG1, p / pattern-01)
(d2 / derive-01, ARG0, i / instruction)
(d2 / derive-01, ARG1, i2 / instruction)
(d2 / derive-01, ARG2, j2 / jurisdiction)
(d2 / derive-01, manner, n / nowadays)
(d2 / derive-01, manner, p / pattern-01)
(d2 / derive-01, mod, m / main)
(i / instruction, mod, j / jury)
(j2 / jurisdiction, quant, m2 / most)
(s / such, mod, s2 / source)

Decoded in 243,541 microseconds
Sentence: though at the very beginning of his political career hitler had emphasized the need for antisemitism derived from reason not pure emotion there were dash

NER Entity: (person :name (name :op "hitler"))
Spans:
Span 4-5:  beginning => begin-01
Span 8-9:  career => career
Span 16-17:  derived => derive-01
Span 21-22:  emotion => emotion
Span 11-12:  emphasized => emphasize-01
Span 13-14:  need => need-01
Span 7-8:  political => politics
Span 20-21:  pure => pure
Span 18-19:  reason => reason
Span 3-4:  very => very

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),emotion,emotion,false), Span(20,21,List(1),pure,pure,false), Span(18,19,List(2),reason,reason,false), Span(16,17,List(3),derived,derive-01,false), Span(13,14,List(4),need,need-01,false), Span(11,12,List(5),emphasized,emphasize-01,false), Span(8,9,List(6),career,career,false), Span(7,8,List(7),political,politics,false), Span(4,5,List(8),beginning,begin-01,false), Span(3,4,List(9),very,very,false)),Map(2 -> reason, 5 -> emphasize-01, 8 -> begin-01, 7 -> politics, 1 -> pure, 4 -> need-01, 6 -> career, 9 -> very, 0 -> emotion, 3 -> derive-01),Map(n -> need-01, e -> emotion, b -> begin-01, p2 -> politics, e2 -> emphasize-01, v -> very, d -> derive-01, p -> pure, r -> reason, c -> career))),[Ljava.lang.String;@259881f0,Annotation([Ljava.lang.String;@3f7ac6d8,[Ljava.lang.String;@1594af77,[Ljava.lang.String;@548bb8b2),Annotation([Ljava.lang.String;@210ad97b,[Ljava.lang.String;@4f4c2b2f,[Ledu.cmu.lti.nlp.amr.Dependency;@11a74355),Annotation([Ljava.lang.String;@7c358a80,[Ljava.lang.String;@1f181935,[Ljava.lang.String;@671ef685),Annotation([Ljava.lang.String;@21cacaa7,[Ljava.lang.String;@8beab46,[Ledu.cmu.lti.nlp.amr.Entity;@1dde8526))
AMR:
(b / begin-01, ARG1, c / career)
(b / begin-01, degree, v / very)
(c / career, mod, p2 / politics)
(e / emotion, quant, p / pure)
(e2 / emphasize-01, ARG1, n / need-01)
(e2 / emphasize-01, time, b / begin-01)
(n / need-01, ARG0, e / emotion)
(n / need-01, ARG1, d / derive-01)
(n / need-01, location, r / reason)

Decoded in 75,324 microseconds
Sentence: the feeling against acid house parties derives from a mixture of officiousness and puritanism

Spans:
Span 3-4:  acid => acid
Span 12-13:  and => and
Span 1-2:  feeling => feel-01
Span 4-5:  house => house
Span 5-6:  parties => party

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),and,and,false), Span(5,6,List(1),parties,party,false), Span(4,5,List(2),house,house,false), Span(3,4,List(3),acid,acid,false), Span(1,2,List(4),feeling,feel-01,false)),Map(2 -> house, 1 -> party, 4 -> feel-01, 0 -> and, 3 -> acid),Map(h -> house, p -> party, a -> and, a2 -> acid, f -> feel-01))),[Ljava.lang.String;@7bf7911b,Annotation([Ljava.lang.String;@3a57c332,[Ljava.lang.String;@57d0258a,[Ljava.lang.String;@2250b410),Annotation([Ljava.lang.String;@605d9809,[Ljava.lang.String;@20a8a84c,[Ledu.cmu.lti.nlp.amr.Dependency;@20c12654),Annotation([Ljava.lang.String;@68bb6598,[Ljava.lang.String;@670b13df,[Ljava.lang.String;@845ca53),Annotation([Ljava.lang.String;@1de61363,[Ljava.lang.String;@6c02d7ea,[Ledu.cmu.lti.nlp.amr.Entity;@2ead7b0c))
AMR:
(a / and, op, f / feel-01)
(f / feel-01, ARG1, p / party)
(p / party, mod, a2 / acid)
(p / party, mod, h / house)

Decoded in 18,851 microseconds
Sentence: derived from a fivespeed used by peugeot and citroen it comes close to perfection in terms of lightness and precision

Spans:
Span 18-19:  and => and
Span 7-8:  and => and
Span 0-1:  derived => derive-01
Span 9-10:  it => it
Span 19-20:  precision => precision
Span 15-16:  terms => term
Span 4-5:  used => use-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),precision,precision,false), Span(18,19,List(1),and,and,false), Span(15,16,List(2),terms,term,false), Span(9,10,List(3),it,it,false), Span(7,8,List(4),and,and,false), Span(4,5,List(5),used,use-01,false), Span(0,1,List(6),derived,derive-01,false)),Map(2 -> term, 5 -> use-01, 1 -> and, 4 -> and, 6 -> derive-01, 0 -> precision, 3 -> it),Map(t -> term, d -> derive-01, p -> precision, a -> and, a2 -> and, i -> it, u -> use-01))),[Ljava.lang.String;@7f6968c4,Annotation([Ljava.lang.String;@615d5d35,[Ljava.lang.String;@38927483,[Ljava.lang.String;@171f6179),Annotation([Ljava.lang.String;@d385acb,[Ljava.lang.String;@6ed0cc34,[Ledu.cmu.lti.nlp.amr.Dependency;@4e0ea2c2),Annotation([Ljava.lang.String;@22df9697,[Ljava.lang.String;@517a564,[Ljava.lang.String;@536b4ad8),Annotation([Ljava.lang.String;@28fed5b1,[Ljava.lang.String;@727f6c7d,[Ledu.cmu.lti.nlp.amr.Entity;@babbd45))
AMR:
(a / and, op, p / precision)
(d / derive-01, manner, u / use-01)
(t / term, poss, a / and)
(t / term, poss, a2 / and)
(u / use-01, ARG0, i / it)
(u / use-01, ARG1, a2 / and)

Decoded in 59,944 microseconds
Sentence: 99 these pinched vignettes of life on the margins derive their strength from the vivid earthy idioms of kelmans glasgow it is language that raises his characters above their dismal circumstances

Spans:
Span 0-1:  99 => 99
Span 27-28:  above => above
Span 26-27:  characters => character
Span 30-31:  circumstances => circumstance
Span 9-10:  derive => derive-01
Span 29-30:  dismal => dismal
Span 20-21:  it => it
Span 22-23:  language => language
Span 5-6:  life => life
Span 8-9:  margins => margin
Span 24-25:  raises => raise-01
Span 11-12:  strength => strength
Span 3-4:  vignettes => vignette

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),circumstances,circumstance,false), Span(29,30,List(1),dismal,dismal,false), Span(27,28,List(2),above,above,false), Span(26,27,List(3),characters,character,false), Span(24,25,List(4),raises,raise-01,false), Span(22,23,List(5),language,language,false), Span(20,21,List(6),it,it,false), Span(11,12,List(7),strength,strength,false), Span(9,10,List(8),derive,derive-01,false), Span(8,9,List(9),margins,margin,false), Span(5,6,List(10),life,life,false), Span(3,4,List(11),vignettes,vignette,false), Span(0,1,List(12),99,99,false)),Map(2 -> above, 5 -> language, 12 -> 99, 8 -> derive-01, 7 -> strength, 1 -> dismal, 4 -> raise-01, 11 -> vignette, 6 -> it, 0 -> circumstance, 9 -> margin, 3 -> character, 10 -> life),Map(s -> strength, v -> vignette, d -> dismal, m -> margin, a -> above, d2 -> derive-01, l2 -> life, r -> raise-01, i -> it, c -> circumstance, l -> language, 9 -> 99, c2 -> character))),[Ljava.lang.String;@381702ff,Annotation([Ljava.lang.String;@6ec5d01d,[Ljava.lang.String;@7ce258bb,[Ljava.lang.String;@702f9d0a),Annotation([Ljava.lang.String;@45ef3510,[Ljava.lang.String;@5b84d14e,[Ledu.cmu.lti.nlp.amr.Dependency;@6cc986d2),Annotation([Ljava.lang.String;@22b27cca,[Ljava.lang.String;@741ec391,[Ljava.lang.String;@fb9a026),Annotation([Ljava.lang.String;@63c126da,[Ljava.lang.String;@1ddde560,[Ledu.cmu.lti.nlp.amr.Entity;@52fe10f1))
AMR:
(9 / 99, op, r / raise-01)
(a / above, op, c / circumstance)
(c / circumstance, mod, d / dismal)
(d2 / derive-01, ARG0, v / vignette)
(d2 / derive-01, ARG1, s / strength)
(l / language, domain, i / it)
(r / raise-01, ARG0, l / language)
(r / raise-01, ARG1, c2 / character)
(r / raise-01, ARG4, a / above)
(s / strength, poss, m / margin)
(v / vignette, mod, l2 / life)
(v / vignette, op, r / raise-01)

Decoded in 290,806 microseconds
Sentence: analytically the is one of deriving more specific principles from more general ones

Spans:
Span 11-12:  general => general
Span 12-13:  ones => one
Span 8-9:  principles => principle
Span 7-8:  specific => specific

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),ones,one,false), Span(11,12,List(1),general,general,false), Span(8,9,List(2),principles,principle,false), Span(7,8,List(3),specific,specific,false)),Map(2 -> principle, 1 -> general, 0 -> one, 3 -> specific),Map(s -> specific, p -> principle, g -> general, o -> one))),[Ljava.lang.String;@47baec4c,Annotation([Ljava.lang.String;@40ef965e,[Ljava.lang.String;@317916a0,[Ljava.lang.String;@4bc7bc0),Annotation([Ljava.lang.String;@72607cad,[Ljava.lang.String;@1c997c85,[Ledu.cmu.lti.nlp.amr.Dependency;@20be0e6e),Annotation([Ljava.lang.String;@1da5688d,[Ljava.lang.String;@5673102f,[Ljava.lang.String;@1c2baa00),Annotation([Ljava.lang.String;@76a5f472,[Ljava.lang.String;@953a539,[Ledu.cmu.lti.nlp.amr.Entity;@528445f7))
AMR:
(o / one, mod, g / general)
(p / principle, location, o / one)
(p / principle, mod, s / specific)

Decoded in 31,852 microseconds
Sentence: hrer again and to derive new strength from his words

Spans:
Span 1-2:  again => again
Span 2-3:  and => and
Span 4-5:  derive => derive-01
Span 5-6:  new => new
Span 6-7:  strength => strength
Span 9-10:  words => word

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),words,word,false), Span(6,7,List(1),strength,strength,false), Span(5,6,List(2),new,new,false), Span(4,5,List(3),derive,derive-01,false), Span(2,3,List(4),and,and,false), Span(1,2,List(5),again,again,false)),Map(2 -> new, 5 -> again, 1 -> strength, 4 -> and, 0 -> word, 3 -> derive-01),Map(n -> new, w -> word, s -> strength, d -> derive-01, a -> and, a2 -> again))),[Ljava.lang.String;@6a0d8573,Annotation([Ljava.lang.String;@1db4776a,[Ljava.lang.String;@330bdf62,[Ljava.lang.String;@5076b51c),Annotation([Ljava.lang.String;@216c6a89,[Ljava.lang.String;@54c65983,[Ledu.cmu.lti.nlp.amr.Dependency;@2a1ed2f0),Annotation([Ljava.lang.String;@4daaa02a,[Ljava.lang.String;@7cf94d3b,[Ljava.lang.String;@533d9c96),Annotation([Ljava.lang.String;@71f3668b,[Ljava.lang.String;@22d16a1f,[Ledu.cmu.lti.nlp.amr.Entity;@628e2b14))
AMR:
(a / and, mod, a2 / again)
(a / and, op, d / derive-01)
(d / derive-01, ARG1, s / strength)
(d / derive-01, ARG2, w / word)
(s / strength, mod, n / new)

Decoded in 24,162 microseconds
Sentence: the system of case law is peculiar to england and the countries which have derived their law from england

NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "england"))
Spans:
Span 9-10:  and => and
Span 3-4:  case => case
Span 11-12:  countries => country
Span 14-15:  derived => derive-01
Span 18-19:  england => (country :name (name :op "England"))
Span 8-9:  england => (country :name (name :op "England"))
Span 16-17:  law => law
Span 4-5:  law => law
Span 6-7:  peculiar => peculiar-41
Span 1-2:  system => system

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(2, 1, 0),england,(country :name (name :op "England")),false), Span(16,17,List(3),law,law,false), Span(14,15,List(4),derived,derive-01,false), Span(11,12,List(5),countries,country,false), Span(9,10,List(6),and,and,false), Span(8,9,List(9, 8, 7),england,(country :name (name :op "England")),false), Span(6,7,List(10),peculiar,peculiar-41,false), Span(4,5,List(11),law,law,false), Span(3,4,List(12),case,case,false), Span(1,2,List(13),system,system,false)),Map(2 -> "England", 5 -> country, 12 -> case, 8 -> name, 7 -> country, 1 -> name, 4 -> derive-01, 11 -> law, 6 -> and, 0 -> country, 9 -> "England", 3 -> law, 10 -> peculiar-41, 13 -> system),Map(n -> name, s -> system, c4 -> case, d -> derive-01, p -> peculiar-41, c3 -> country, a -> and, l2 -> law, l -> law, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@63ae6098,Annotation([Ljava.lang.String;@4d47ce48,[Ljava.lang.String;@2538009b,[Ljava.lang.String;@7fafd333),Annotation([Ljava.lang.String;@7052fac2,[Ljava.lang.String;@57cd102a,[Ledu.cmu.lti.nlp.amr.Dependency;@57e0626e),Annotation([Ljava.lang.String;@4c5e50d4,[Ljava.lang.String;@440cb577,[Ljava.lang.String;@1e5dba88),Annotation([Ljava.lang.String;@1b81464b,[Ljava.lang.String;@442df408,[Ledu.cmu.lti.nlp.amr.Entity;@24f05c30))
AMR:
(a / and, op, c2 / country)
(c / country, name, n / name)
(c3 / country, name, n2 / name)
(d / derive-01, ARG1, l / law)
(d / derive-01, ARG2, c / country)
(l / law, poss, c2 / country)
(l2 / law, topic, c4 / case)
(n / name, op, "England")
(n2 / name, op, "England")
(p / peculiar-41, ARG0, s / system)
(p / peculiar-41, ARG1, c3 / country)
(p / peculiar-41, prep-to, a / and)
(s / system, mod, l2 / law)

Decoded in 238,804 microseconds
Sentence: both lada selects feature the same mechanical and equipment specification as the models from which they are derived with the exception of a one year  50000 mile rather than two year  50000 mile manufacturers warranty

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = both lada selects feature the same mechanical and equipment specification as the models from which they are derived with the exception of a one year  50000 mile rather than two year  50000 mile manufacturers warranty
myTokenized = both lada selects feature the same mechanical and equipment specification as the models from which they are derived with the exception of a one year 50000 mile rather than two year 50000 mile manufacturers warranty
i = 25
prefix = List(both, lada, selects, feature, the, same, mechanical, and, equipment, specification, as, the, models, from, which, they, are, derived, with, the, exception, of, a, one, year, 50000)
regexr = \Qb\E ?\Qo\E ?\Qt\E ?\Qh\E ?\Ql\E ?\Qa\E ?\Qd\E ?\Qa\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qe\E ?\Qc\E ?\Qt\E ?\Qs\E ?\Qf\E ?\Qe\E ?\Qa\E ?\Qt\E ?\Qu\E ?\Qr\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qa\E ?\Qm\E ?\Qe\E ?\Qm\E ?\Qe\E ?\Qc\E ?\Qh\E ?\Qa\E ?\Qn\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Qq\E ?\Qu\E ?\Qi\E ?\Qp\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qs\E ?\Qp\E ?\Qe\E ?\Qc\E ?\Qi\E ?\Qf\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qm\E ?\Qo\E ?\Qd\E ?\Qe\E ?\Ql\E ?\Qs\E ?\Qf\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qw\E ?\Qh\E ?\Qi\E ?\Qc\E ?\Qh\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qy\E ?\Qa\E ?\Qr\E ?\Qe\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qd\E ?\Qw\E ?\Qi\E ?\Qt\E ?\Qh\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qe\E ?\Qx\E ?\Qc\E ?\Qe\E ?\Qp\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qo\E ?\Qf\E ?\Qa\E ?\Qo\E ?\Qn\E ?\Qe\E ?\Qy\E ?\Qe\E ?\Qa\E ?\Qr\E ?\Q5\E ?\Q0\E ?\Q0\E ?\Q0\E ?\Q0\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: a simplistic view of einsteins work can be derived by consideration of the problem in one dimension only

Spans:
Span 6-7:  can => possible
Span 10-11:  consideration => consider-02
Span 8-9:  derived => derive-01
Span 16-17:  dimension => dimension
Span 17-18:  only => only
Span 13-14:  problem => problem
Span 1-2:  simplistic => simplistic

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),only,only,false), Span(16,17,List(1),dimension,dimension,false), Span(13,14,List(2),problem,problem,false), Span(10,11,List(3),consideration,consider-02,false), Span(8,9,List(4),derived,derive-01,false), Span(6,7,List(5),can,possible,false), Span(1,2,List(6),simplistic,simplistic,false)),Map(2 -> problem, 5 -> possible, 1 -> dimension, 4 -> derive-01, 6 -> simplistic, 0 -> only, 3 -> consider-02),Map(p2 -> possible, s -> simplistic, d -> dimension, p -> problem, d2 -> derive-01, c -> consider-02, o -> only))),[Ljava.lang.String;@50258792,Annotation([Ljava.lang.String;@4fe7ab59,[Ljava.lang.String;@72a2890a,[Ljava.lang.String;@cd32a52),Annotation([Ljava.lang.String;@7b7f7411,[Ljava.lang.String;@6c9d476e,[Ledu.cmu.lti.nlp.amr.Dependency;@49bcbe77),Annotation([Ljava.lang.String;@67c9c73,[Ljava.lang.String;@5f034558,[Ljava.lang.String;@4fbdc523),Annotation([Ljava.lang.String;@33d9a5bb,[Ljava.lang.String;@160fb295,[Ledu.cmu.lti.nlp.amr.Entity;@60955f83))
AMR:
(c / consider-02, ARG0, s / simplistic)
(c / consider-02, ARG1, p / problem)
(d2 / derive-01, ARG2, c / consider-02)
(p / problem, mod, o / only)
(p / problem, prep-with, d / dimension)
(p2 / possible, domain, d2 / derive-01)

Decoded in 32,215 microseconds
Sentence: its willingness to take from one person and give to another depending on who will derive the greater net benefit from the allocation

Spans:
Span 22-23:  allocation => allocate-01
Span 7-8:  and => and
Span 10-11:  another => another
Span 19-20:  benefit => benefit-01
Span 11-12:  depending => depend-01
Span 15-16:  derive => derive-01
Span 8-9:  give => give-01
Span 17-18:  greater => great
Span 18-19:  net => net
Span 6-7:  person => person
Span 1-2:  willingness => will-02

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),allocation,allocate-01,false), Span(19,20,List(1),benefit,benefit-01,false), Span(18,19,List(2),net,net,false), Span(17,18,List(3),greater,great,false), Span(15,16,List(4),derive,derive-01,false), Span(11,12,List(5),depending,depend-01,false), Span(10,11,List(6),another,another,false), Span(8,9,List(7),give,give-01,false), Span(7,8,List(8),and,and,false), Span(6,7,List(9),person,person,false), Span(1,2,List(10),willingness,will-02,false)),Map(2 -> net, 5 -> depend-01, 8 -> and, 7 -> give-01, 1 -> benefit-01, 4 -> derive-01, 6 -> another, 9 -> person, 0 -> allocate-01, 10 -> will-02, 3 -> great),Map(w -> will-02, n -> net, b -> benefit-01, a3 -> and, d -> derive-01, p -> person, g2 -> give-01, g -> great, a -> allocate-01, d2 -> depend-01, a2 -> another))),[Ljava.lang.String;@6eb1c2fe,Annotation([Ljava.lang.String;@5878ea78,[Ljava.lang.String;@6a6999a8,[Ljava.lang.String;@3ae71b2c),Annotation([Ljava.lang.String;@1aa903ea,[Ljava.lang.String;@4e400552,[Ledu.cmu.lti.nlp.amr.Dependency;@4d1d72a0),Annotation([Ljava.lang.String;@48508ded,[Ljava.lang.String;@2095e7b2,[Ljava.lang.String;@519e67d4),Annotation([Ljava.lang.String;@76b2b928,[Ljava.lang.String;@4f9a2df9,[Ledu.cmu.lti.nlp.amr.Entity;@13405f43))
AMR:
(a3 / and, op, g2 / give-01)
(a3 / and, op, p / person)
(b / benefit-01, ARG1, a / allocate-01)
(b / benefit-01, mod, g / great)
(b / benefit-01, mod, n / net)
(d / derive-01, ARG1, b / benefit-01)
(d2 / depend-01, ARG0, g2 / give-01)
(d2 / depend-01, ARG1, d / derive-01)
(g2 / give-01, ARG0, a2 / another)
(g2 / give-01, ARG1, w / will-02)

Decoded in 184,492 microseconds
Sentence: sausagemaking is recorded in histories of the roman empire and the words sausage salami and saucissons are all derived from the latin salsus meaning salted

NER Entity: (country :name (name :op "roman" :op "empire"))
Spans:
Span 17-18:  all => all
Span 14-15:  and => and
Span 9-10:  and => and
Span 18-19:  derived => derive-01
Span 4-5:  histories => history
Span 23-24:  meaning => mean-01
Span 2-3:  recorded => record-01
Span 7-9:  roman empire => (country :name (name :op "roman" :op "empire"))
Span 24-25:  salted => salt-01
Span 11-12:  words => word

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),salted,salt-01,false), Span(23,24,List(1),meaning,mean-01,false), Span(18,19,List(2),derived,derive-01,false), Span(17,18,List(3),all,all,false), Span(14,15,List(4),and,and,false), Span(11,12,List(5),words,word,false), Span(9,10,List(6),and,and,false), Span(7,9,List(10, 9, 8, 7),roman empire,(country :name (name :op "roman" :op "empire")),false), Span(4,5,List(11),histories,history,false), Span(2,3,List(12),recorded,record-01,false)),Map(2 -> derive-01, 5 -> word, 12 -> record-01, 8 -> name, 7 -> country, 1 -> mean-01, 4 -> and, 11 -> history, 6 -> and, 0 -> salt-01, 9 -> "roman", 3 -> all, 10 -> "empire"),Map(n -> name, w -> word, h -> history, a3 -> and, s -> salt-01, d -> derive-01, m -> mean-01, a -> all, r -> record-01, a2 -> and, c -> country))),[Ljava.lang.String;@672e3194,Annotation([Ljava.lang.String;@9b92078,[Ljava.lang.String;@5902ab44,[Ljava.lang.String;@3e3a2b03),Annotation([Ljava.lang.String;@5cddf1df,[Ljava.lang.String;@6f32971a,[Ledu.cmu.lti.nlp.amr.Dependency;@625e64fe),Annotation([Ljava.lang.String;@23389226,[Ljava.lang.String;@57030eda,[Ljava.lang.String;@9c436d7),Annotation([Ljava.lang.String;@30ec6243,[Ljava.lang.String;@6f2735cc,[Ledu.cmu.lti.nlp.amr.Entity;@773d1d16))
AMR:
(a3 / and, op, h / history)
(a3 / and, op, w / word)
(c / country, name, n / name)
(d / derive-01, ARG1, a2 / and)
(d / derive-01, ARG2, s / salt-01)
(h / history, poss, c / country)
(m / mean-01, ARG1, s / salt-01)
(n / name, op, "empire")
(n / name, op, "roman")
(r / record-01, ARG0, a / all)
(r / record-01, ARG1, a3 / and)
(s / salt-01, ARG1, h / history)

Decoded in 181,048 microseconds
Sentence: to say this is not to endorse the thesis that all duties derive from rights or that morality is rightbased

Spans:
Span 10-11:  all => all
Span 12-13:  derive => derive-01
Span 11-12:  duties => duty
Span 6-7:  endorse => endorse-01
Span 17-18:  morality => morality
Span 15-16:  or => or
Span 14-15:  rights => right
Span 1-2:  say => say-01
Span 2-3:  this => this

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),morality,morality,false), Span(15,16,List(1),or,or,false), Span(14,15,List(2),rights,right,false), Span(12,13,List(3),derive,derive-01,false), Span(11,12,List(4),duties,duty,false), Span(10,11,List(5),all,all,false), Span(6,7,List(6),endorse,endorse-01,false), Span(2,3,List(7),this,this,false), Span(1,2,List(8),say,say-01,false)),Map(2 -> right, 5 -> all, 8 -> say-01, 7 -> this, 1 -> or, 4 -> duty, 6 -> endorse-01, 0 -> morality, 3 -> derive-01),Map(e -> endorse-01, t -> this, s -> say-01, d -> derive-01, m -> morality, a -> all, d2 -> duty, r -> right, o -> or))),[Ljava.lang.String;@4d40cc82,Annotation([Ljava.lang.String;@5932926d,[Ljava.lang.String;@72b5fdb,[Ljava.lang.String;@30a2268a),Annotation([Ljava.lang.String;@659046f7,[Ljava.lang.String;@63233638,[Ledu.cmu.lti.nlp.amr.Dependency;@1cbcc961),Annotation([Ljava.lang.String;@2e490e04,[Ljava.lang.String;@3e374059,[Ljava.lang.String;@1d61b2f8),Annotation([Ljava.lang.String;@792cc6d9,[Ljava.lang.String;@6ab30eb5,[Ledu.cmu.lti.nlp.amr.Entity;@118ac3cd))
AMR:
(d / derive-01, ARG0, d2 / duty)
(d / derive-01, ARG1, m / morality)
(d / derive-01, time, s / say-01)
(d2 / duty, quant, a / all)
(e / endorse-01, manner, o / or)
(o / or, op, d / derive-01)
(o / or, op, r / right)
(s / say-01, ARG1, t / this)

Decoded in 197,087 microseconds
Sentence: i answer in one word from experience in that all our knowledge is founded and from that it ultimately derives itself

Spans:
Span 9-10:  all => all
Span 14-15:  and => and
Span 1-2:  answer => answer-01
Span 6-7:  experience => experience-01
Span 13-14:  founded => found-01
Span 0-1:  i => i
Span 17-18:  it => it
Span 11-12:  knowledge => knowledge
Span 18-19:  ultimately => ultimate
Span 4-5:  word => word

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),ultimately,ultimate,false), Span(17,18,List(1),it,it,false), Span(14,15,List(2),and,and,false), Span(13,14,List(3),founded,found-01,false), Span(11,12,List(4),knowledge,knowledge,false), Span(9,10,List(5),all,all,false), Span(6,7,List(6),experience,experience-01,false), Span(4,5,List(7),word,word,false), Span(1,2,List(8),answer,answer-01,false), Span(0,1,List(9),i,i,false)),Map(2 -> and, 5 -> all, 8 -> answer-01, 7 -> word, 1 -> it, 4 -> knowledge, 6 -> experience-01, 9 -> i, 0 -> ultimate, 3 -> found-01),Map(w -> word, e -> experience-01, k -> knowledge, a3 -> answer-01, a -> and, i2 -> i, a2 -> all, i -> it, u -> ultimate, f -> found-01))),[Ljava.lang.String;@73ab7a89,Annotation([Ljava.lang.String;@7ef9f3b2,[Ljava.lang.String;@4bee6c3e,[Ljava.lang.String;@12048164),Annotation([Ljava.lang.String;@65cad579,[Ljava.lang.String;@67852f24,[Ledu.cmu.lti.nlp.amr.Dependency;@58da1994),Annotation([Ljava.lang.String;@56c5711e,[Ljava.lang.String;@3c859513,[Ljava.lang.String;@65fe316f),Annotation([Ljava.lang.String;@135fa2b9,[Ljava.lang.String;@6bb4299e,[Ledu.cmu.lti.nlp.amr.Entity;@1187b50))
AMR:
(a / and, op, f / found-01)
(a3 / answer-01, ARG0, i2 / i)
(a3 / answer-01, ARG1, i / it)
(a3 / answer-01, ARG2, w / word)
(e / experience-01, ARG1, a / and)
(f / found-01, ARG0, u / ultimate)
(f / found-01, ARG1, k / knowledge)
(k / knowledge, quant, a2 / all)
(w / word, prep-against, e / experience-01)

Decoded in 102,176 microseconds
Sentence: this public backlash against the shoddy callous and spivvy aspects of mrs thatchers administration does not derive from the sense of chronic economic crisis which infected the politics of the 1970s but rather is born of prosperity

Spans:
Span 30-31:  1970s => 1970
Span 13-14:  administration => administrate-01
Span 7-8:  and => and
Span 9-10:  aspects => aspect
Span 2-3:  backlash => backlash
Span 34-35:  born => bear-02
Span 31-32:  but => contrast-01
Span 6-7:  callous => callous
Span 21-22:  chronic => chronic
Span 23-24:  crisis => crisis
Span 16-17:  derive => derive-01
Span 22-23:  economic => economy
Span 25-26:  infected => infect-01
Span 27-28:  politics => politics
Span 36-37:  prosperity => prosper-01
Span 1-2:  public => public
Span 19-20:  sense => sense
Span 0-1:  this => this

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),prosperity,prosper-01,false), Span(34,35,List(1),born,bear-02,false), Span(31,32,List(2),but,contrast-01,false), Span(30,31,List(3),1970s,1970,false), Span(27,28,List(4),politics,politics,false), Span(25,26,List(5),infected,infect-01,false), Span(23,24,List(6),crisis,crisis,false), Span(22,23,List(7),economic,economy,false), Span(21,22,List(8),chronic,chronic,false), Span(19,20,List(9),sense,sense,false), Span(16,17,List(10),derive,derive-01,false), Span(13,14,List(11),administration,administrate-01,false), Span(9,10,List(12),aspects,aspect,false), Span(7,8,List(13),and,and,false), Span(6,7,List(14),callous,callous,false), Span(2,3,List(15),backlash,backlash,false), Span(1,2,List(16),public,public,false), Span(0,1,List(17),this,this,false)),Map(2 -> contrast-01, 5 -> infect-01, 12 -> aspect, 15 -> backlash, 8 -> chronic, 7 -> economy, 17 -> this, 1 -> bear-02, 4 -> politics, 11 -> administrate-01, 14 -> callous, 6 -> crisis, 0 -> prosper-01, 9 -> sense, 16 -> public, 3 -> 1970, 10 -> derive-01, 13 -> and),Map(e -> economy, t -> this, b -> bear-02, b2 -> backlash, p2 -> politics, c4 -> callous, a3 -> and, s -> sense, d -> derive-01, 1 -> 1970, p -> prosper-01, c3 -> chronic, a -> administrate-01, i -> infect-01, a2 -> aspect, c -> contrast-01, p3 -> public, c2 -> crisis))),[Ljava.lang.String;@6e47c1bf,Annotation([Ljava.lang.String;@29011b29,[Ljava.lang.String;@79e35c7,[Ljava.lang.String;@23dc9fb9),Annotation([Ljava.lang.String;@697a3d13,[Ljava.lang.String;@583fe07e,[Ledu.cmu.lti.nlp.amr.Dependency;@49ab9d75),Annotation([Ljava.lang.String;@21ee921c,[Ljava.lang.String;@35ba7dab,[Ljava.lang.String;@6690811b),Annotation([Ljava.lang.String;@190c4838,[Ljava.lang.String;@75596160,[Ledu.cmu.lti.nlp.amr.Entity;@3f0821d0))
AMR:
(a / administrate-01, ARG1, a2 / aspect)
(a3 / and, op, a2 / aspect)
(a3 / and, op, c4 / callous)
(b / bear-02, ARG1, p / prosper-01)
(b2 / backlash, mod, p3 / public)
(b2 / backlash, mod, t / this)
(b2 / backlash, source, a3 / and)
(c / contrast-01, ARG1, i / infect-01)
(c / contrast-01, ARG2, b / bear-02)
(c2 / crisis, mod, c3 / chronic)
(c2 / crisis, mod, e / economy)
(d / derive-01, ARG0, s / sense)
(d / derive-01, ARG1, a / administrate-01)
(i / infect-01, ARG0, c2 / crisis)
(i / infect-01, ARG1, p2 / politics)
(p2 / politics, location, 1 / 1970)
(s / sense, mod, c2 / crisis)

Decoded in 430,726 microseconds
Sentence: and all are derived from one paninfarina concept car dash

Spans:
Span 1-2:  all => all
Span 0-1:  and => and
Span 8-9:  car => car
Span 7-8:  concept => concept
Span 3-4:  derived => derive-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),car,car,false), Span(7,8,List(1),concept,concept,false), Span(3,4,List(2),derived,derive-01,false), Span(1,2,List(3),all,all,false), Span(0,1,List(4),and,and,false)),Map(2 -> derive-01, 1 -> concept, 4 -> and, 0 -> car, 3 -> all),Map(d -> derive-01, a -> all, a2 -> and, c -> car, c2 -> concept))),[Ljava.lang.String;@2ee3ff04,Annotation([Ljava.lang.String;@7a7b77a8,[Ljava.lang.String;@3fecf56a,[Ljava.lang.String;@5de422ef),Annotation([Ljava.lang.String;@2cb1a911,[Ljava.lang.String;@43d2b203,[Ledu.cmu.lti.nlp.amr.Dependency;@3da505be),Annotation([Ljava.lang.String;@1d1c1c90,[Ljava.lang.String;@209740de,[Ljava.lang.String;@2a23bf89),Annotation([Ljava.lang.String;@10f3d0fc,[Ljava.lang.String;@771d5915,[Ledu.cmu.lti.nlp.amr.Entity;@27c3aecb))
AMR:
(a2 / and, op, c / car)
(a2 / and, op, d / derive-01)
(c / car, mod, c2 / concept)
(d / derive-01, ARG1, a / all)

Decoded in 20,669 microseconds
Sentence: but the specific features and structural characteristics of the german sociopolitical culture in the shortlived and illfated nationstate which conditioned the manufacture and appeal of the extraordinary hitler myth were largely swept away in the whirlpool of change arising from total defeat and were completely banished in the process of longterm change deriving from postwar reconstruction

NER Entity: (thing :name (name :op "german"))
NER Entity: (person :name (name :op "hitler"))
Spans:
Span 42-43:  and => and
Span 22-23:  and => and
Span 15-16:  and => and
Span 4-5:  and => and
Span 23-24:  appeal => appeal-02
Span 32-33:  away => away
Span 0-1:  but => contrast-01
Span 51-52:  change => change-01
Span 37-38:  change => change-01
Span 6-7:  characteristics => (thing :ARG2-of characteristic-41)
Span 44-45:  completely => complete
Span 11-12:  culture => culture
Span 41-42:  defeat => defeat-01
Span 26-27:  extraordinary => extraordinary
Span 3-4:  features => feature-01
Span 30-31:  largely => large
Span 21-22:  manufacture => manufacture-01
Span 28-29:  myth => myth
Span 48-49:  process => process
Span 55-56:  reconstruction => reconstruct-01
Span 2-3:  specific => specific
Span 5-6:  structural => structure
Span 31-32:  swept => sweep-02

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(55,56,List(0),reconstruction,reconstruct-01,false), Span(51,52,List(1),change,change-01,false), Span(48,49,List(2),process,process,false), Span(44,45,List(3),completely,complete,false), Span(42,43,List(4),and,and,false), Span(41,42,List(5),defeat,defeat-01,false), Span(37,38,List(6),change,change-01,false), Span(32,33,List(7),away,away,false), Span(31,32,List(8),swept,sweep-02,false), Span(30,31,List(9),largely,large,false), Span(28,29,List(10),myth,myth,false), Span(26,27,List(11),extraordinary,extraordinary,false), Span(23,24,List(12),appeal,appeal-02,false), Span(22,23,List(13),and,and,false), Span(21,22,List(14),manufacture,manufacture-01,false), Span(15,16,List(15),and,and,false), Span(11,12,List(16),culture,culture,false), Span(6,7,List(18, 17),characteristics,(thing :ARG2-of characteristic-41),false), Span(5,6,List(19),structural,structure,false), Span(4,5,List(20),and,and,false), Span(3,4,List(21),features,feature-01,false), Span(2,3,List(22),specific,specific,false), Span(0,1,List(23),but,contrast-01,false)),Map(2 -> process, 5 -> defeat-01, 12 -> appeal-02, 15 -> and, 8 -> sweep-02, 21 -> feature-01, 18 -> characteristic-41, 7 -> away, 17 -> thing, 1 -> change-01, 23 -> contrast-01, 4 -> and, 11 -> extraordinary, 14 -> manufacture-01, 20 -> and, 6 -> change-01, 22 -> specific, 0 -> reconstruct-01, 9 -> large, 16 -> culture, 19 -> structure, 3 -> complete, 10 -> myth, 13 -> and),Map(e -> extraordinary, s2 -> structure, t -> thing, m2 -> manufacture-01, c4 -> culture, a3 -> appeal-02, s -> sweep-02, a6 -> and, d -> defeat-01, m -> myth, p -> process, a -> and, c3 -> change-01, a5 -> and, c6 -> contrast-01, r -> reconstruct-01, a2 -> away, s3 -> specific, c -> change-01, l -> large, f -> feature-01, c2 -> complete, a4 -> and, c5 -> characteristic-41))),[Ljava.lang.String;@5f7860a1,Annotation([Ljava.lang.String;@58101afe,[Ljava.lang.String;@95c46dd,[Ljava.lang.String;@9305bf8),Annotation([Ljava.lang.String;@45e5fb7e,[Ljava.lang.String;@7de2310b,[Ledu.cmu.lti.nlp.amr.Dependency;@d0209be),Annotation([Ljava.lang.String;@cd9f9e,[Ljava.lang.String;@3baa3e7b,[Ljava.lang.String;@25ec1bd7),Annotation([Ljava.lang.String;@3017d3b4,[Ljava.lang.String;@6c4be716,[Ledu.cmu.lti.nlp.amr.Entity;@6b308ce5))
AMR:
(a / and, op, s / sweep-02)
(a3 / appeal-02, ARG1, m / myth)
(a4 / and, op, a3 / appeal-02)
(a4 / and, op, m2 / manufacture-01)
(a5 / and, op, c3 / change-01)
(a6 / and, example, a5 / and)
(a6 / and, op, f / feature-01)
(a6 / and, op, t / thing)
(c / change-01, ARG1, r / reconstruct-01)
(c2 / complete, op, c / change-01)
(c3 / change-01, ARG1, d / defeat-01)
(c5 / characteristic-41, ARG1, c4 / culture)
(c5 / characteristic-41, ARG2, t / thing)
(c6 / contrast-01, ARG1, a4 / and)
(f / feature-01, ARG1, c6 / contrast-01)
(f / feature-01, mod, s3 / specific)
(m / myth, mod, e / extraordinary)
(p / process, purpose, c / change-01)
(r / reconstruct-01, ARG1, d / defeat-01)
(s / sweep-02, ARG1, m / myth)
(s / sweep-02, degree, l / large)
(s / sweep-02, direction, a2 / away)
(t / thing, mod, s2 / structure)

Decoded in 585,227 microseconds
Sentence: it derives from their contribution to the wellbeing of persons

Spans:
Span 4-5:  contribution => contribute-01
Span 0-1:  it => it
Span 9-10:  persons => person

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),persons,person,false), Span(4,5,List(1),contribution,contribute-01,false), Span(0,1,List(2),it,it,false)),Map(2 -> it, 1 -> contribute-01, 0 -> person),Map(p -> person, i -> it, c -> contribute-01))),[Ljava.lang.String;@4072455d,Annotation([Ljava.lang.String;@e27fdb9,[Ljava.lang.String;@638283f1,[Ljava.lang.String;@da47641),Annotation([Ljava.lang.String;@284fac66,[Ljava.lang.String;@6bf7137,[Ledu.cmu.lti.nlp.amr.Dependency;@2a1d557),Annotation([Ljava.lang.String;@4ebd441a,[Ljava.lang.String;@6bc22f58,[Ljava.lang.String;@19b271ad),Annotation([Ljava.lang.String;@12452209,[Ljava.lang.String;@78bd863d,[Ledu.cmu.lti.nlp.amr.Entity;@62b84cb8))
AMR:
(c / contribute-01, ARG0, p / person)
(c / contribute-01, poss, i / it)

Decoded in 9,459 microseconds
Sentence: many of the infections derive from the animal and bird world and humans usually shrug them off

Spans:
Span 11-12:  and => and
Span 8-9:  and => and
Span 7-8:  animal => animal
Span 9-10:  bird => bird
Span 4-5:  derive => derive-01
Span 12-13:  humans => human
Span 3-4:  infections => infect-01
Span 0-1:  many => many
Span 16-17:  off => off
Span 13-14:  usually => usual
Span 10-11:  world => world

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),off,off,false), Span(13,14,List(1),usually,usual,false), Span(12,13,List(2),humans,human,false), Span(11,12,List(3),and,and,false), Span(10,11,List(4),world,world,false), Span(9,10,List(5),bird,bird,false), Span(8,9,List(6),and,and,false), Span(7,8,List(7),animal,animal,false), Span(4,5,List(8),derive,derive-01,false), Span(3,4,List(9),infections,infect-01,false), Span(0,1,List(10),many,many,false)),Map(2 -> human, 5 -> bird, 8 -> derive-01, 7 -> animal, 1 -> usual, 4 -> world, 6 -> and, 9 -> infect-01, 0 -> off, 10 -> many, 3 -> and),Map(w -> world, h -> human, b -> bird, a3 -> animal, m -> many, d -> derive-01, a -> and, i -> infect-01, a2 -> and, u -> usual, o -> off))),[Ljava.lang.String;@31b4f6aa,Annotation([Ljava.lang.String;@5fae2c64,[Ljava.lang.String;@23e48a4f,[Ljava.lang.String;@71345af1),Annotation([Ljava.lang.String;@243ebe47,[Ljava.lang.String;@133e39e8,[Ledu.cmu.lti.nlp.amr.Dependency;@5a4bb836),Annotation([Ljava.lang.String;@212b0f8a,[Ljava.lang.String;@12093e09,[Ljava.lang.String;@1cc7ca1f),Annotation([Ljava.lang.String;@a6c7fc,[Ljava.lang.String;@459371b9,[Ledu.cmu.lti.nlp.amr.Entity;@530f4c5e))
AMR:
(a / and, mod, b / bird)
(a / and, op, h / human)
(a2 / and, consist, w / world)
(a2 / and, op, a3 / animal)
(a2 / and, poss, a / and)
(d / derive-01, ARG1, i / infect-01)
(d / derive-01, ARG2, w / world)
(i / infect-01, ARG0, u / usual)
(i / infect-01, quant, m / many)
(o / off, op, i / infect-01)

Decoded in 93,647 microseconds
Sentence: derived from say parents of highquality beef stock dash

Spans:
Span 6-7:  beef => beef
Span 0-1:  derived => derive-01
Span 3-4:  parents => (have-rel-role-91 :ARG2 parent)
Span 2-3:  say => say-01
Span 7-8:  stock => stock

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),stock,stock,false), Span(6,7,List(1),beef,beef,false), Span(3,4,List(3, 2),parents,(have-rel-role-91 :ARG2 parent),false), Span(2,3,List(4),say,say-01,false), Span(0,1,List(5),derived,derive-01,false)),Map(2 -> have-rel-role-91, 5 -> derive-01, 1 -> beef, 4 -> say-01, 0 -> stock, 3 -> parent),Map(h -> have-rel-role-91, s2 -> say-01, b -> beef, s -> stock, d -> derive-01, p -> parent))),[Ljava.lang.String;@115ed9ec,Annotation([Ljava.lang.String;@6a351ddc,[Ljava.lang.String;@453b8cfd,[Ljava.lang.String;@48a5598d),Annotation([Ljava.lang.String;@5f9a5d3d,[Ljava.lang.String;@f5f80d4,[Ledu.cmu.lti.nlp.amr.Dependency;@4702e62e),Annotation([Ljava.lang.String;@f55fa6e,[Ljava.lang.String;@55ac539f,[Ljava.lang.String;@24a617aa),Annotation([Ljava.lang.String;@145bacb2,[Ljava.lang.String;@ea6e48f,[Ledu.cmu.lti.nlp.amr.Entity;@6ee76fcc))
AMR:
(d / derive-01, ARG1, b / beef)
(h / have-rel-role-91, ARG1, s / stock)
(h / have-rel-role-91, ARG2, p / parent)
(s / stock, mod, b / beef)
(s2 / say-01, ARG1, h / have-rel-role-91)

Decoded in 16,236 microseconds
Sentence: but his was one of the many families in the streets that ran off the main road at the bottom of the hill and from whom this shop and the tobacconists derived most of their regular custom

Spans:
Span 28-29:  and => and
Span 23-24:  and => and
Span 19-20:  bottom => bottom
Span 0-1:  but => contrast-01
Span 31-32:  derived => derive-01
Span 7-8:  families => family
Span 15-16:  main => main
Span 6-7:  many => many
Span 32-33:  most => most
Span 13-14:  off => off
Span 35-36:  regular => regular
Span 16-17:  road => road
Span 27-28:  shop => shop
Span 10-11:  streets => street
Span 26-27:  this => this

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),regular,regular,false), Span(32,33,List(1),most,most,false), Span(31,32,List(2),derived,derive-01,false), Span(28,29,List(3),and,and,false), Span(27,28,List(4),shop,shop,false), Span(26,27,List(5),this,this,false), Span(23,24,List(6),and,and,false), Span(19,20,List(7),bottom,bottom,false), Span(16,17,List(8),road,road,false), Span(15,16,List(9),main,main,false), Span(13,14,List(10),off,off,false), Span(10,11,List(11),streets,street,false), Span(7,8,List(12),families,family,false), Span(6,7,List(13),many,many,false), Span(0,1,List(14),but,contrast-01,false)),Map(2 -> derive-01, 5 -> this, 12 -> family, 8 -> road, 7 -> bottom, 1 -> most, 4 -> shop, 11 -> street, 14 -> contrast-01, 6 -> and, 0 -> regular, 9 -> main, 3 -> and, 10 -> off, 13 -> many),Map(m3 -> many, s2 -> street, t -> this, b -> bottom, m2 -> main, s -> shop, m -> most, d -> derive-01, r2 -> road, a -> and, r -> regular, a2 -> and, c -> contrast-01, f -> family, o -> off))),[Ljava.lang.String;@1c5cf2f6,Annotation([Ljava.lang.String;@1a530306,[Ljava.lang.String;@3feb8c6a,[Ljava.lang.String;@14fa3ef),Annotation([Ljava.lang.String;@1393a095,[Ljava.lang.String;@4113a03d,[Ledu.cmu.lti.nlp.amr.Dependency;@6f7d262b),Annotation([Ljava.lang.String;@1550a3c,[Ljava.lang.String;@7612e9d2,[Ljava.lang.String;@53b5168d),Annotation([Ljava.lang.String;@15dbadea,[Ljava.lang.String;@976e8dc,[Ledu.cmu.lti.nlp.amr.Entity;@5db1c85e))
AMR:
(a / and, op, s / shop)
(c / contrast-01, ARG0, m2 / main)
(c / contrast-01, ARG2, a2 / and)
(d / derive-01, ARG0, a2 / and)
(d / derive-01, ARG1, a / and)
(d / derive-01, ARG2, r / regular)
(d / derive-01, manner, m / most)
(f / family, location, s2 / street)
(f / family, quant, m3 / many)
(o / off, op, r2 / road)
(r2 / road, location, a2 / and)
(r2 / road, location, b / bottom)
(s / shop, mod, t / this)
(s2 / street, op, d / derive-01)

Decoded in 307,582 microseconds
Sentence: it is now thought to derive from the german word for the common market europaische ekonomische kommunitat

NER Entity: (thing :name (name :op "german"))
Spans:
Span 12-13:  common => common
Span 5-6:  derive => derive-01
Span 0-1:  it => it
Span 13-14:  market => market
Span 2-3:  now => now
Span 3-4:  thought => think-01
Span 9-10:  word => word

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),market,market,false), Span(12,13,List(1),common,common,false), Span(9,10,List(2),word,word,false), Span(5,6,List(3),derive,derive-01,false), Span(3,4,List(4),thought,think-01,false), Span(2,3,List(5),now,now,false), Span(0,1,List(6),it,it,false)),Map(2 -> word, 5 -> now, 1 -> common, 4 -> think-01, 6 -> it, 0 -> market, 3 -> derive-01),Map(n -> now, w -> word, t -> think-01, d -> derive-01, m -> market, i -> it, c -> common))),[Ljava.lang.String;@42d9c360,Annotation([Ljava.lang.String;@66a9f5e9,[Ljava.lang.String;@204fc8a7,[Ljava.lang.String;@55fe5c83),Annotation([Ljava.lang.String;@2e6bc890,[Ljava.lang.String;@263c7dbf,[Ledu.cmu.lti.nlp.amr.Dependency;@4d639a35),Annotation([Ljava.lang.String;@46213544,[Ljava.lang.String;@2e302754,[Ljava.lang.String;@5b66137c),Annotation([Ljava.lang.String;@a8960c5,[Ljava.lang.String;@41302aea,[Ledu.cmu.lti.nlp.amr.Entity;@41518a15))
AMR:
(d / derive-01, ARG0, i / it)
(d / derive-01, ARG1, m / market)
(d / derive-01, ARG2, w / word)
(m / market, mod, c / common)
(t / think-01, ARG1, d / derive-01)
(t / think-01, time, n / now)

Decoded in 35,553 microseconds
Sentence: can that exclusion be derived from the principle of autonomy

Spans:
Span 9-10:  autonomy => autonomy
Span 0-1:  can => possible
Span 4-5:  derived => derive-01
Span 2-3:  exclusion => exclude-01
Span 7-8:  principle => principle

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),autonomy,autonomy,false), Span(7,8,List(1),principle,principle,false), Span(4,5,List(2),derived,derive-01,false), Span(2,3,List(3),exclusion,exclude-01,false), Span(0,1,List(4),can,possible,false)),Map(2 -> derive-01, 1 -> principle, 4 -> possible, 0 -> autonomy, 3 -> exclude-01),Map(e -> exclude-01, p2 -> possible, d -> derive-01, p -> principle, a -> autonomy))),[Ljava.lang.String;@50408a33,Annotation([Ljava.lang.String;@3d31436e,[Ljava.lang.String;@6d420a24,[Ljava.lang.String;@aa7f986),Annotation([Ljava.lang.String;@19eed1e1,[Ljava.lang.String;@e151814,[Ledu.cmu.lti.nlp.amr.Dependency;@adfd045),Annotation([Ljava.lang.String;@6be26796,[Ljava.lang.String;@5cfee02f,[Ljava.lang.String;@61305d5b),Annotation([Ljava.lang.String;@2e413336,[Ljava.lang.String;@3a8935f3,[Ledu.cmu.lti.nlp.amr.Entity;@635028b))
AMR:
(d / derive-01, ARG0, p / principle)
(d / derive-01, ARG1, e / exclude-01)
(p / principle, poss, a / autonomy)
(p2 / possible, domain, d / derive-01)

Decoded in 41,556 microseconds
Sentence: this ratio was derived by dividing the dose sufficient to destroy all parasites by the maximum dose which will not kill the patient

Spans:
Span 11-12:  all => all
Span 3-4:  derived => derive-01
Span 10-11:  destroy => destroy-01
Span 5-6:  dividing => divide-02
Span 16-17:  dose => dose-01
Span 7-8:  dose => dose-01
Span 20-21:  kill => kill-01
Span 15-16:  maximum => maximum
Span 12-13:  parasites => parasite
Span 22-23:  patient => (have-rel-role-91 :ARG2 patient)
Span 1-2:  ratio => ratio
Span 8-9:  sufficient => suffice-01
Span 0-1:  this => this

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),patient,(have-rel-role-91 :ARG2 patient),false), Span(20,21,List(2),kill,kill-01,false), Span(16,17,List(3),dose,dose-01,false), Span(15,16,List(4),maximum,maximum,false), Span(12,13,List(5),parasites,parasite,false), Span(11,12,List(6),all,all,false), Span(10,11,List(7),destroy,destroy-01,false), Span(8,9,List(8),sufficient,suffice-01,false), Span(7,8,List(9),dose,dose-01,false), Span(5,6,List(10),dividing,divide-02,false), Span(3,4,List(11),derived,derive-01,false), Span(1,2,List(12),ratio,ratio,false), Span(0,1,List(13),this,this,false)),Map(2 -> kill-01, 5 -> parasite, 12 -> ratio, 8 -> suffice-01, 7 -> destroy-01, 1 -> patient, 4 -> maximum, 11 -> derive-01, 6 -> all, 0 -> have-rel-role-91, 9 -> dose-01, 3 -> dose-01, 10 -> divide-02, 13 -> this),Map(h -> have-rel-role-91, t -> this, k -> kill-01, d3 -> dose-01, p2 -> parasite, s -> suffice-01, d -> dose-01, m -> maximum, p -> patient, a -> all, d2 -> destroy-01, d5 -> derive-01, r -> ratio, d4 -> divide-02))),[Ljava.lang.String;@56b235e6,Annotation([Ljava.lang.String;@4df0bb81,[Ljava.lang.String;@77a63a20,[Ljava.lang.String;@4232483e),Annotation([Ljava.lang.String;@73250065,[Ljava.lang.String;@23d21f2,[Ledu.cmu.lti.nlp.amr.Dependency;@7b7f9803),Annotation([Ljava.lang.String;@75d52c4c,[Ljava.lang.String;@7e4f6e03,[Ljava.lang.String;@10bfc7be),Annotation([Ljava.lang.String;@1ed29389,[Ljava.lang.String;@12d4172e,[Ledu.cmu.lti.nlp.amr.Entity;@223dd6aa))
AMR:
(d / dose-01, ARG1, p2 / parasite)
(d / dose-01, degree, m / maximum)
(d2 / destroy-01, ARG1, p2 / parasite)
(d4 / divide-02, ARG1, d3 / dose-01)
(d5 / derive-01, ARG1, r / ratio)
(d5 / derive-01, ARG2, d4 / divide-02)
(h / have-rel-role-91, ARG2, p / patient)
(k / kill-01, ARG0, d / dose-01)
(k / kill-01, ARG1, p / patient)
(p2 / parasite, quant, a / all)
(r / ratio, mod, t / this)
(s / suffice-01, ARG0, d3 / dose-01)
(s / suffice-01, ARG1, d2 / destroy-01)

Decoded in 205,503 microseconds
Sentence: 1m derived from turnover of 23m and bicc has guaranteed that current year profits will be not less than 1

Spans:
Span 19-20:  1 => 1
Span 6-7:  and => and
Span 11-12:  current => current
Span 1-2:  derived => derive-01
Span 9-10:  guaranteed => guarantee-01
Span 17-18:  less => less
Span 13-14:  profits => profit-01
Span 3-4:  turnover => turnover
Span 12-13:  year => year

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),1,1,false), Span(17,18,List(1),less,less,false), Span(13,14,List(2),profits,profit-01,false), Span(12,13,List(3),year,year,false), Span(11,12,List(4),current,current,false), Span(9,10,List(5),guaranteed,guarantee-01,false), Span(6,7,List(6),and,and,false), Span(3,4,List(7),turnover,turnover,false), Span(1,2,List(8),derived,derive-01,false)),Map(2 -> profit-01, 5 -> guarantee-01, 8 -> derive-01, 7 -> turnover, 1 -> less, 4 -> current, 6 -> and, 0 -> 1, 3 -> year),Map(t -> turnover, d -> derive-01, g -> guarantee-01, y -> year, p -> profit-01, 1 -> 1, a -> and, c -> current, l -> less))),[Ljava.lang.String;@9d84476,Annotation([Ljava.lang.String;@5576a406,[Ljava.lang.String;@600ab1bf,[Ljava.lang.String;@5e1ba3db),Annotation([Ljava.lang.String;@68a2af21,[Ljava.lang.String;@1097d532,[Ledu.cmu.lti.nlp.amr.Dependency;@602dce20),Annotation([Ljava.lang.String;@5f37c834,[Ljava.lang.String;@4738fec2,[Ljava.lang.String;@6edd9715),Annotation([Ljava.lang.String;@15ea1c90,[Ljava.lang.String;@3cf93d2d,[Ledu.cmu.lti.nlp.amr.Entity;@f1f74a1))
AMR:
(a / and, op, t / turnover)
(d / derive-01, ARG1, p / profit-01)
(d / derive-01, ARG2, t / turnover)
(g / guarantee-01, ARG0, l / less)
(g / guarantee-01, ARG1, c / current)
(p / profit-01, ARG0, y / year)
(p / profit-01, ARG1, 1 / 1)
(y / year, mod, c / current)

Decoded in 51,680 microseconds
Sentence: rhetorically it was the time of the great horticultural images of education derived perhaps first from rousseau and reinforced by froebel for whom the child was the tender plant growing in the garden the kindergarten

Spans:
Span 17-18:  and => and
Span 24-25:  child => child
Span 12-13:  derived => derive-01
Span 11-12:  education => educate-01
Span 32-33:  garden => garden
Span 7-8:  great => great
Span 29-30:  growing => grow-01
Span 9-10:  images => image
Span 1-2:  it => it
Span 13-14:  perhaps => perhaps
Span 28-29:  plant => plant
Span 18-19:  reinforced => reinforce-01
Span 27-28:  tender => tender
Span 4-5:  time => time

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),garden,garden,false), Span(29,30,List(1),growing,grow-01,false), Span(28,29,List(2),plant,plant,false), Span(27,28,List(3),tender,tender,false), Span(24,25,List(4),child,child,false), Span(18,19,List(5),reinforced,reinforce-01,false), Span(17,18,List(6),and,and,false), Span(13,14,List(7),perhaps,perhaps,false), Span(12,13,List(8),derived,derive-01,false), Span(11,12,List(9),education,educate-01,false), Span(9,10,List(10),images,image,false), Span(7,8,List(11),great,great,false), Span(4,5,List(12),time,time,false), Span(1,2,List(13),it,it,false)),Map(2 -> plant, 5 -> reinforce-01, 12 -> time, 8 -> derive-01, 7 -> perhaps, 1 -> grow-01, 4 -> child, 11 -> great, 6 -> and, 0 -> garden, 9 -> educate-01, 3 -> tender, 10 -> image, 13 -> it),Map(e -> educate-01, g3 -> great, t -> tender, p2 -> perhaps, d -> derive-01, g2 -> grow-01, g -> garden, p -> plant, a -> and, i2 -> it, t2 -> time, r -> reinforce-01, i -> image, c -> child))),[Ljava.lang.String;@5a21fdc8,Annotation([Ljava.lang.String;@6d9c83b2,[Ljava.lang.String;@3e8a5356,[Ljava.lang.String;@6b65532d),Annotation([Ljava.lang.String;@4937e670,[Ljava.lang.String;@74f9e89d,[Ledu.cmu.lti.nlp.amr.Dependency;@4316d76a),Annotation([Ljava.lang.String;@1098928f,[Ljava.lang.String;@10bdf2cc,[Ljava.lang.String;@268f37aa),Annotation([Ljava.lang.String;@48f8dad,[Ljava.lang.String;@6c9e5b31,[Ledu.cmu.lti.nlp.amr.Entity;@107525ad))
AMR:
(a / and, op, d / derive-01)
(a / and, op, r / reinforce-01)
(c / child, domain, p / plant)
(d / derive-01, ARG0, i / image)
(d / derive-01, ARG1, p2 / perhaps)
(e / educate-01, ARG1, g / garden)
(g2 / grow-01, ARG1, p / plant)
(g2 / grow-01, ARG2, g / garden)
(i / image, mod, g3 / great)
(i / image, topic, e / educate-01)
(p / plant, mod, t / tender)
(t2 / time, domain, i2 / it)
(t2 / time, poss, i / image)

Decoded in 235,366 microseconds
Sentence: but he derived pleasure from two activities

Spans:
Span 6-7:  activities => activity
Span 0-1:  but => contrast-01
Span 2-3:  derived => derive-01
Span 1-2:  he => he
Span 3-4:  pleasure => pleasure
Span 5-6:  two => 2

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),activities,activity,false), Span(5,6,List(1),two,2,false), Span(3,4,List(2),pleasure,pleasure,false), Span(2,3,List(3),derived,derive-01,false), Span(1,2,List(4),he,he,false), Span(0,1,List(5),but,contrast-01,false)),Map(2 -> pleasure, 5 -> contrast-01, 1 -> 2, 4 -> he, 0 -> activity, 3 -> derive-01),Map(h -> he, 2 -> 2, d -> derive-01, p -> pleasure, a -> activity, c -> contrast-01))),[Ljava.lang.String;@7afc894b,Annotation([Ljava.lang.String;@5999da01,[Ljava.lang.String;@3b7a59c,[Ljava.lang.String;@dd9a6ac),Annotation([Ljava.lang.String;@4c4d6d4e,[Ljava.lang.String;@6f434304,[Ledu.cmu.lti.nlp.amr.Dependency;@28e4f4ad),Annotation([Ljava.lang.String;@4f7b9ed4,[Ljava.lang.String;@3cf89910,[Ljava.lang.String;@650908b5),Annotation([Ljava.lang.String;@341ad6e5,[Ljava.lang.String;@4e126f1c,[Ledu.cmu.lti.nlp.amr.Entity;@1c3cbf4f))
AMR:
(a / activity, quant, 2 / 2)
(c / contrast-01, ARG2, d / derive-01)
(d / derive-01, ARG0, h / he)
(d / derive-01, ARG1, p / pleasure)
(p / pleasure, source, a / activity)

Decoded in 14,956 microseconds
Sentence: the story of acis and galatea derives from ovid

Spans:
Span 4-5:  and => and
Span 1-2:  story => story

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),and,and,false), Span(1,2,List(1),story,story,false)),Map(1 -> story, 0 -> and),Map(s -> story, a -> and))),[Ljava.lang.String;@5833ea04,Annotation([Ljava.lang.String;@3848d9d9,[Ljava.lang.String;@36d6526d,[Ljava.lang.String;@30bd8e3b),Annotation([Ljava.lang.String;@6cc4dc7c,[Ljava.lang.String;@706788ad,[Ledu.cmu.lti.nlp.amr.Dependency;@1d3e4f82),Annotation([Ljava.lang.String;@65d5eecd,[Ljava.lang.String;@403108f6,[Ljava.lang.String;@53436f66),Annotation([Ljava.lang.String;@7046bc3e,[Ljava.lang.String;@33f0c408,[Ledu.cmu.lti.nlp.amr.Entity;@3d603dc))
AMR:
(s / story, poss, a / and)

Decoded in 6,761 microseconds
Sentence: the second consideration derives from the fact that in accepting certain concessions mr krenz has exposed the weaknesses of the east german government

NER Entity: (thing :name (name :op "german"))
Spans:
Span 9-10:  accepting => accept-01
Span 10-11:  certain => certain
Span 11-12:  concessions => concede-01
Span 2-3:  consideration => consider-02
Span 20-21:  east => east
Span 15-16:  exposed => expose-01
Span 6-7:  fact => fact
Span 17-18:  weaknesses => weakness

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),east,east,false), Span(17,18,List(1),weaknesses,weakness,false), Span(15,16,List(2),exposed,expose-01,false), Span(11,12,List(3),concessions,concede-01,false), Span(10,11,List(4),certain,certain,false), Span(9,10,List(5),accepting,accept-01,false), Span(6,7,List(6),fact,fact,false), Span(2,3,List(7),consideration,consider-02,false)),Map(2 -> expose-01, 5 -> accept-01, 7 -> consider-02, 1 -> weakness, 4 -> certain, 6 -> fact, 0 -> east, 3 -> concede-01),Map(w -> weakness, e -> east, e2 -> expose-01, c3 -> consider-02, a -> accept-01, c -> concede-01, f -> fact, c2 -> certain))),[Ljava.lang.String;@5797627b,Annotation([Ljava.lang.String;@13c2a62a,[Ljava.lang.String;@502b1988,[Ljava.lang.String;@3d9958d6),Annotation([Ljava.lang.String;@1e976932,[Ljava.lang.String;@667b614e,[Ledu.cmu.lti.nlp.amr.Dependency;@2e317c72),Annotation([Ljava.lang.String;@32e1380f,[Ljava.lang.String;@60277ae1,[Ljava.lang.String;@3ff47b18),Annotation([Ljava.lang.String;@4bbd8575,[Ljava.lang.String;@784eb2c,[Ledu.cmu.lti.nlp.amr.Entity;@276b998f))
AMR:
(a / accept-01, ARG0, e / east)
(a / accept-01, ARG1, c / concede-01)
(c / concede-01, ARG1, f / fact)
(c / concede-01, ARG2, c2 / certain)
(e2 / expose-01, ARG0, c3 / consider-02)
(e2 / expose-01, ARG1, w / weakness)
(e2 / expose-01, manner, a / accept-01)

Decoded in 84,087 microseconds
Sentence: they lacked the width arsenal derived from nigel winterburns support of brian marwood until the winger was supplanted by paul merson towards the end

Spans:
Span 4-5:  arsenal => arsenal
Span 5-6:  derived => derive-01
Span 1-2:  lacked => lack-01
Span 9-10:  support => support-01
Span 0-1:  they => they
Span 13-14:  until => until

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),until,until,false), Span(9,10,List(1),support,support-01,false), Span(5,6,List(2),derived,derive-01,false), Span(4,5,List(3),arsenal,arsenal,false), Span(1,2,List(4),lacked,lack-01,false), Span(0,1,List(5),they,they,false)),Map(2 -> derive-01, 5 -> they, 1 -> support-01, 4 -> lack-01, 0 -> until, 3 -> arsenal),Map(t -> they, s -> support-01, d -> derive-01, a -> arsenal, l -> lack-01, u -> until))),[Ljava.lang.String;@92e8f81,Annotation([Ljava.lang.String;@4fcf62dc,[Ljava.lang.String;@38638273,[Ljava.lang.String;@d0968f1),Annotation([Ljava.lang.String;@64c8ace6,[Ljava.lang.String;@32cf63bb,[Ledu.cmu.lti.nlp.amr.Dependency;@4d9ca40c),Annotation([Ljava.lang.String;@66d637a2,[Ljava.lang.String;@79dea16c,[Ljava.lang.String;@737f7f6),Annotation([Ljava.lang.String;@6b783b2d,[Ljava.lang.String;@22753e7a,[Ledu.cmu.lti.nlp.amr.Entity;@3f58cd42))
AMR:
(d / derive-01, ARG1, a / arsenal)
(d / derive-01, ARG2, s / support-01)
(l / lack-01, ARG0, t / they)
(l / lack-01, ARG1, a / arsenal)
(l / lack-01, time, u / until)

Decoded in 50,088 microseconds
Sentence: the treatise however derives it in terms of the notion of sympathy from other previously discovered principles such as those of association

Spans:
Span 21-22:  association => associate-01
Span 15-16:  discovered => discover-01
Span 4-5:  it => it
Span 9-10:  notion => notion
Span 13-14:  other => other
Span 14-15:  previously => previous
Span 16-17:  principles => principle
Span 17-18:  such => such
Span 11-12:  sympathy => sympathy
Span 6-7:  terms => term

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),association,associate-01,false), Span(17,18,List(1),such,such,false), Span(16,17,List(2),principles,principle,false), Span(15,16,List(3),discovered,discover-01,false), Span(14,15,List(4),previously,previous,false), Span(13,14,List(5),other,other,false), Span(11,12,List(6),sympathy,sympathy,false), Span(9,10,List(7),notion,notion,false), Span(6,7,List(8),terms,term,false), Span(4,5,List(9),it,it,false)),Map(2 -> principle, 5 -> other, 8 -> term, 7 -> notion, 1 -> such, 4 -> previous, 6 -> sympathy, 9 -> it, 0 -> associate-01, 3 -> discover-01),Map(n -> notion, t -> term, s2 -> sympathy, p2 -> previous, s -> such, d -> discover-01, p -> principle, a -> associate-01, i -> it, o -> other))),[Ljava.lang.String;@5f0bc88b,Annotation([Ljava.lang.String;@7e9b4e6c,[Ljava.lang.String;@639d564,[Ljava.lang.String;@3ee89b6d),Annotation([Ljava.lang.String;@1934315f,[Ljava.lang.String;@319560e6,[Ledu.cmu.lti.nlp.amr.Dependency;@460cb578),Annotation([Ljava.lang.String;@6c5dfd35,[Ljava.lang.String;@e9ada28,[Ljava.lang.String;@58687f95),Annotation([Ljava.lang.String;@34903c8b,[Ljava.lang.String;@6976e4a2,[Ledu.cmu.lti.nlp.amr.Entity;@7c9c7dc5))
AMR:
(a / associate-01, ARG1, i / it)
(d / discover-01, ARG1, p / principle)
(d / discover-01, ARG2, a / associate-01)
(d / discover-01, time, p2 / previous)
(i / it, topic, t / term)
(n / notion, topic, s2 / sympathy)
(p / principle, mod, o / other)
(s / such, condition, d / discover-01)
(t / term, mod, n / notion)

Decoded in 116,222 microseconds
Sentence: nevertheless the sources from which we derive our knowledge of the common law are in writing or print

Spans:
Span 11-12:  common => common
Span 6-7:  derive => derive-01
Span 8-9:  knowledge => knowledge
Span 12-13:  law => law
Span 16-17:  or => or
Span 17-18:  print => print-01
Span 2-3:  sources => source
Span 5-6:  we => we
Span 15-16:  writing => write-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),print,print-01,false), Span(16,17,List(1),or,or,false), Span(15,16,List(2),writing,write-01,false), Span(12,13,List(3),law,law,false), Span(11,12,List(4),common,common,false), Span(8,9,List(5),knowledge,knowledge,false), Span(6,7,List(6),derive,derive-01,false), Span(5,6,List(7),we,we,false), Span(2,3,List(8),sources,source,false)),Map(2 -> write-01, 5 -> knowledge, 8 -> source, 7 -> we, 1 -> or, 4 -> common, 6 -> derive-01, 0 -> print-01, 3 -> law),Map(w -> write-01, k -> knowledge, s -> source, d -> derive-01, p -> print-01, w2 -> we, c -> common, l -> law, o -> or))),[Ljava.lang.String;@605506d,Annotation([Ljava.lang.String;@46e32731,[Ljava.lang.String;@6b222652,[Ljava.lang.String;@f020871),Annotation([Ljava.lang.String;@4e783a69,[Ljava.lang.String;@3742ebbe,[Ledu.cmu.lti.nlp.amr.Dependency;@a83234a),Annotation([Ljava.lang.String;@2781d4aa,[Ljava.lang.String;@3cb0f929,[Ljava.lang.String;@6b611e0),Annotation([Ljava.lang.String;@1b4f8c91,[Ljava.lang.String;@3959199,[Ledu.cmu.lti.nlp.amr.Entity;@5089d5a5))
AMR:
(d / derive-01, ARG0, w2 / we)
(d / derive-01, ARG1, s / source)
(d / derive-01, condition, o / or)
(k / knowledge, location, l / law)
(k / knowledge, poss, w2 / we)
(l / law, mod, c / common)
(o / or, op, p / print-01)
(o / or, op, w / write-01)

Decoded in 50,493 microseconds
Sentence: it is necessary for you to take this  kind of positive approach think in terms of maximizing the  number of nutrients that you derive from food by eating the  right kind of balance of different foods during meals

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = it is necessary for you to take this  kind of positive approach think in terms of maximizing the  number of nutrients that you derive from food by eating the  right kind of balance of different foods during meals
myTokenized = it is necessary for you to take this kind of positive approach think in terms of maximizing the number of nutrients that you derive from food by eating the right kind of balance of different foods during meals
i = 8
prefix = List(it, is, necessary, for, you, to, take, this, kind)
regexr = \Qi\E ?\Qt\E ?\Qi\E ?\Qs\E ?\Qn\E ?\Qe\E ?\Qc\E ?\Qe\E ?\Qs\E ?\Qs\E ?\Qa\E ?\Qr\E ?\Qy\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qo\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qk\E ?\Qi\E ?\Qn\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: independant that from that equal creation they derive rights inherent and

Spans:
Span 10-11:  and => and
Span 5-6:  creation => create-01
Span 7-8:  derive => derive-01
Span 4-5:  equal => equal-01
Span 0-1:  independant => independent
Span 9-10:  inherent => inherent
Span 8-9:  rights => right
Span 6-7:  they => they

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),and,and,false), Span(9,10,List(1),inherent,inherent,false), Span(8,9,List(2),rights,right,false), Span(7,8,List(3),derive,derive-01,false), Span(6,7,List(4),they,they,false), Span(5,6,List(5),creation,create-01,false), Span(4,5,List(6),equal,equal-01,false), Span(0,1,List(7),independant,independent,false)),Map(2 -> right, 5 -> create-01, 7 -> independent, 1 -> inherent, 4 -> they, 6 -> equal-01, 0 -> and, 3 -> derive-01),Map(e -> equal-01, t -> they, d -> derive-01, a -> and, i2 -> independent, r -> right, i -> inherent, c -> create-01))),[Ljava.lang.String;@7eaf8890,Annotation([Ljava.lang.String;@362ee6ea,[Ljava.lang.String;@413a2870,[Ljava.lang.String;@5134f284),Annotation([Ljava.lang.String;@6b1de1c2,[Ljava.lang.String;@76d0be7e,[Ledu.cmu.lti.nlp.amr.Dependency;@28a7f23),Annotation([Ljava.lang.String;@52a0d422,[Ljava.lang.String;@3cc72e8f,[Ljava.lang.String;@38c1cd75),Annotation([Ljava.lang.String;@3b97d96f,[Ljava.lang.String;@6e4424f9,[Ledu.cmu.lti.nlp.amr.Entity;@3bd78ffd))
AMR:
(a / and, poss, t / they)
(c / create-01, ARG0, t / they)
(d / derive-01, ARG0, t / they)
(d / derive-01, ARG1, r / right)
(d / derive-01, condition, i2 / independent)
(e / equal-01, ARG1, c / create-01)
(i / inherent, domain, r / right)

Decoded in 70,828 microseconds
Sentence: the partners moved they held purely for business reasons and derived no personal benefit from the move which in each case proved financially disadvantageous

Spans:
Span 9-10:  and => and
Span 13-14:  benefit => benefit-01
Span 7-8:  business => business
Span 20-21:  case => case
Span 10-11:  derived => derive-01
Span 19-20:  each => each
Span 22-23:  financially => finance
Span 2-3:  moved => move-01
Span 11-12:  no => -
Span 12-13:  personal => personal
Span 21-22:  proved => prove-01
Span 5-6:  purely => pure
Span 8-9:  reasons => reason
Span 3-4:  they => they

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),financially,finance,false), Span(21,22,List(1),proved,prove-01,false), Span(20,21,List(2),case,case,false), Span(19,20,List(3),each,each,false), Span(13,14,List(4),benefit,benefit-01,false), Span(12,13,List(5),personal,personal,false), Span(11,12,List(6),no,-,false), Span(10,11,List(7),derived,derive-01,false), Span(9,10,List(8),and,and,false), Span(8,9,List(9),reasons,reason,false), Span(7,8,List(10),business,business,false), Span(5,6,List(11),purely,pure,false), Span(3,4,List(12),they,they,false), Span(2,3,List(13),moved,move-01,false)),Map(2 -> case, 5 -> personal, 12 -> they, 8 -> and, 7 -> derive-01, 1 -> prove-01, 4 -> benefit-01, 11 -> pure, 6 -> -, 0 -> finance, 9 -> reason, 3 -> each, 10 -> business, 13 -> move-01),Map(e -> each, b -> benefit-01, t -> they, b2 -> business, p2 -> personal, d -> derive-01, m -> move-01, p -> prove-01, a -> and, r -> reason, - -> -, c -> case, f -> finance, p3 -> pure))),[Ljava.lang.String;@6a0e4b8a,Annotation([Ljava.lang.String;@5081876b,[Ljava.lang.String;@67e1ab17,[Ljava.lang.String;@10a7a849),Annotation([Ljava.lang.String;@6f195929,[Ljava.lang.String;@692ccbba,[Ledu.cmu.lti.nlp.amr.Dependency;@7bf35647),Annotation([Ljava.lang.String;@24a58ee4,[Ljava.lang.String;@71482d87,[Ljava.lang.String;@39a5342b),Annotation([Ljava.lang.String;@d04109e,[Ljava.lang.String;@5defbbf,[Ledu.cmu.lti.nlp.amr.Entity;@7261bb9b))
AMR:
(a / and, op, d / derive-01)
(b / benefit-01, ARG1, b2 / business)
(b / benefit-01, mod, p2 / personal)
(c / case, mod, e / each)
(d / derive-01, ARG0, t / they)
(d / derive-01, ARG1, b / benefit-01)
(d / derive-01, polarity, - / -)
(m / move-01, ARG0, p3 / pure)
(m / move-01, ARG1, a / and)
(p / prove-01, ARG0, b / benefit-01)
(p / prove-01, ARG1, f / finance)
(p / prove-01, prep-in, c / case)
(r / reason, mod, b2 / business)

Decoded in 217,593 microseconds
Sentence: the universe viewed in those prechloroform days was dark and painful and horrible and wherever else the human race derived its image of a loving moral creator it was not from a simple contemplation of nature

Spans:
Span 13-14:  and => and
Span 11-12:  and => and
Span 9-10:  and => and
Span 8-9:  dark => dark
Span 6-7:  days => (temporal-quantity :unit day)
Span 19-20:  derived => derive-01
Span 15-16:  else => else
Span 12-13:  horrible => horrible
Span 17-18:  human => human
Span 21-22:  image => image
Span 27-28:  it => it
Span 24-25:  loving => love-01
Span 25-26:  moral => moral
Span 35-36:  nature => nature
Span 10-11:  painful => pain-01
Span 18-19:  race => race
Span 32-33:  simple => simple
Span 1-2:  universe => universe
Span 2-3:  viewed => view-02
Span 14-15:  wherever => wherever

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),nature,nature,false), Span(32,33,List(1),simple,simple,false), Span(27,28,List(2),it,it,false), Span(25,26,List(3),moral,moral,false), Span(24,25,List(4),loving,love-01,false), Span(21,22,List(5),image,image,false), Span(19,20,List(6),derived,derive-01,false), Span(18,19,List(7),race,race,false), Span(17,18,List(8),human,human,false), Span(15,16,List(9),else,else,false), Span(14,15,List(10),wherever,wherever,false), Span(13,14,List(11),and,and,false), Span(12,13,List(12),horrible,horrible,false), Span(11,12,List(13),and,and,false), Span(10,11,List(14),painful,pain-01,false), Span(9,10,List(15),and,and,false), Span(8,9,List(16),dark,dark,false), Span(6,7,List(18, 17),days,(temporal-quantity :unit day),false), Span(2,3,List(19),viewed,view-02,false), Span(1,2,List(20),universe,universe,false)),Map(2 -> it, 5 -> image, 12 -> horrible, 15 -> and, 8 -> human, 18 -> day, 7 -> race, 17 -> temporal-quantity, 1 -> simple, 4 -> love-01, 11 -> and, 14 -> pain-01, 20 -> universe, 6 -> derive-01, 0 -> nature, 9 -> else, 16 -> dark, 19 -> view-02, 3 -> moral, 10 -> wherever, 13 -> and),Map(e -> else, n -> nature, w -> wherever, h -> human, h2 -> horrible, t -> temporal-quantity, d3 -> day, a3 -> and, s -> simple, v -> view-02, m -> moral, d -> derive-01, p -> pain-01, a -> and, d2 -> dark, i2 -> image, a2 -> and, i -> it, r -> race, u -> universe, l -> love-01))),[Ljava.lang.String;@6e63f7c7,Annotation([Ljava.lang.String;@6520626f,[Ljava.lang.String;@311e9947,[Ljava.lang.String;@4fe11d82),Annotation([Ljava.lang.String;@44586ac6,[Ljava.lang.String;@8ca1038,[Ledu.cmu.lti.nlp.amr.Dependency;@9eed10a),Annotation([Ljava.lang.String;@1dddec9e,[Ljava.lang.String;@54d98863,[Ljava.lang.String;@1589471a),Annotation([Ljava.lang.String;@679b0701,[Ljava.lang.String;@72e907ca,[Ledu.cmu.lti.nlp.amr.Entity;@20fe99b6))
AMR:
(a / and, op, d / derive-01)
(a / and, op, n / nature)
(a2 / and, op, a / and)
(a2 / and, op, d2 / dark)
(a2 / and, op, h2 / horrible)
(a2 / and, op, p / pain-01)
(a3 / and, op, a2 / and)
(d / derive-01, ARG0, r / race)
(d / derive-01, ARG1, i2 / image)
(d / derive-01, location, w / wherever)
(l / love-01, ARG0, a / and)
(l / love-01, ARG1, m / moral)
(n / nature, poss, i / it)
(p / pain-01, ARG0, t / temporal-quantity)
(p / pain-01, ARG1, s / simple)
(r / race, mod, e / else)
(r / race, mod, h / human)
(t / temporal-quantity, unit, d3 / day)
(v / view-02, ARG0, u / universe)
(v / view-02, ARG1, a3 / and)

Decoded in 458,947 microseconds
Sentence: when a grazing farmer takes his stock off the land to be housed indoors for the winter as is normal he derives  no benefit from the expensive pumping which keeps his neighbours ploughland dry through the winter months

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = when a grazing farmer takes his stock off the land to be housed indoors for the winter as is normal he derives  no benefit from the expensive pumping which keeps his neighbours ploughland dry through the winter months
myTokenized = when a grazing farmer takes his stock off the land to be housed indoors for the winter as is normal he derives no benefit from the expensive pumping which keeps his neighbours ploughland dry through the winter months
i = 22
prefix = List(when, a, grazing, farmer, takes, his, stock, off, the, land, to, be, housed, indoors, for, the, winter, as, is, normal, he, derives, no)
regexr = \Qw\E ?\Qh\E ?\Qe\E ?\Qn\E ?\Qa\E ?\Qg\E ?\Qr\E ?\Qa\E ?\Qz\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qf\E ?\Qa\E ?\Qr\E ?\Qm\E ?\Qe\E ?\Qr\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qs\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qc\E ?\Qk\E ?\Qo\E ?\Qf\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qb\E ?\Qe\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qd\E ?\Qo\E ?\Qo\E ?\Qr\E ?\Qs\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qw\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Qs\E ?\Qi\E ?\Qs\E ?\Qn\E ?\Qo\E ?\Qr\E ?\Qm\E ?\Qa\E ?\Ql\E ?\Qh\E ?\Qe\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qs\E ?\Qn\E ?\Qo\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: short of a transformation of the context from which the competitive necessities derived the process of national centralization had to continue

Spans:
Span 10-11:  competitive => compete-01
Span 6-7:  context => context
Span 20-21:  continue => continue-01
Span 12-13:  derived => derive-01
Span 16-17:  national => nation
Span 14-15:  process => process
Span 0-1:  short => short
Span 3-4:  transformation => transform-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),continue,continue-01,false), Span(16,17,List(1),national,nation,false), Span(14,15,List(2),process,process,false), Span(12,13,List(3),derived,derive-01,false), Span(10,11,List(4),competitive,compete-01,false), Span(6,7,List(5),context,context,false), Span(3,4,List(6),transformation,transform-01,false), Span(0,1,List(7),short,short,false)),Map(2 -> process, 5 -> context, 7 -> short, 1 -> nation, 4 -> compete-01, 6 -> transform-01, 0 -> continue-01, 3 -> derive-01),Map(n -> nation, t -> transform-01, s -> short, d -> derive-01, p -> process, c3 -> context, c -> continue-01, c2 -> compete-01))),[Ljava.lang.String;@20fcfc67,Annotation([Ljava.lang.String;@411edf1c,[Ljava.lang.String;@51c9c8aa,[Ljava.lang.String;@16953ad9),Annotation([Ljava.lang.String;@1f4a8824,[Ljava.lang.String;@56300388,[Ledu.cmu.lti.nlp.amr.Dependency;@6a3801ec),Annotation([Ljava.lang.String;@306636f,[Ljava.lang.String;@186a0df6,[Ljava.lang.String;@5aba9dff),Annotation([Ljava.lang.String;@11dafee2,[Ljava.lang.String;@4093b096,[Ledu.cmu.lti.nlp.amr.Entity;@202e68f9))
AMR:
(c / continue-01, ARG0, p / process)
(c / continue-01, ARG1, c3 / context)
(c2 / compete-01, ARG0, n / nation)
(c2 / compete-01, ARG1, t / transform-01)
(d / derive-01, ARG1, p / process)
(s / short, compared-to, t / transform-01)
(t / transform-01, ARG1, c3 / context)

Decoded in 69,059 microseconds
Sentence:   mcgaughey the university graduate from a welltodo kentucky background seems more standoffish even haughty and is clearly sensitive about his nickname shug which was derived from his mother calling him sugar

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   mcgaughey the university graduate from a welltodo kentucky background seems more standoffish even haughty and is clearly sensitive about his nickname shug which was derived from his mother calling him sugar
myTokenized = mcgaughey the university graduate from a welltodo kentucky background seems more standoffish even haughty and is clearly sensitive about his nickname shug which was derived from his mother calling him sugar
i = 0
prefix = List(mcgaughey)
regexr = \Qm\E ?\Qc\E ?\Qg\E ?\Qa\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qe\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he reiterates that all knowledge is ultimately derived from the senses but explains that this does not mean that it directly comes from it

Spans:
Span 3-4:  all => all
Span 11-12:  but => contrast-01
Span 7-8:  derived => derive-01
Span 20-21:  directly => direct
Span 12-13:  explains => explain-01
Span 0-1:  he => he
Span 23-24:  it => it
Span 19-20:  it => it
Span 4-5:  knowledge => knowledge
Span 17-18:  mean => mean-01
Span 10-11:  senses => sense
Span 14-15:  this => this
Span 6-7:  ultimately => ultimate

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),it,it,false), Span(20,21,List(1),directly,direct,false), Span(19,20,List(2),it,it,false), Span(17,18,List(3),mean,mean-01,false), Span(14,15,List(4),this,this,false), Span(12,13,List(5),explains,explain-01,false), Span(11,12,List(6),but,contrast-01,false), Span(10,11,List(7),senses,sense,false), Span(7,8,List(8),derived,derive-01,false), Span(6,7,List(9),ultimately,ultimate,false), Span(4,5,List(10),knowledge,knowledge,false), Span(3,4,List(11),all,all,false), Span(0,1,List(12),he,he,false)),Map(2 -> it, 5 -> explain-01, 12 -> he, 8 -> derive-01, 7 -> sense, 1 -> direct, 4 -> this, 11 -> all, 6 -> contrast-01, 0 -> it, 9 -> ultimate, 3 -> mean-01, 10 -> knowledge),Map(e -> explain-01, h -> he, t -> this, k -> knowledge, s -> sense, d -> direct, m -> mean-01, a -> all, d2 -> derive-01, i2 -> it, i -> it, c -> contrast-01, u -> ultimate))),[Ljava.lang.String;@782e439a,Annotation([Ljava.lang.String;@2558711a,[Ljava.lang.String;@5169751d,[Ljava.lang.String;@6287ecac),Annotation([Ljava.lang.String;@49c342bd,[Ljava.lang.String;@3252ac20,[Ledu.cmu.lti.nlp.amr.Dependency;@51a282af),Annotation([Ljava.lang.String;@431d908,[Ljava.lang.String;@649f9e5e,[Ljava.lang.String;@2b5660ee),Annotation([Ljava.lang.String;@33f5bf7c,[Ljava.lang.String;@4aee808a,[Ledu.cmu.lti.nlp.amr.Entity;@70390a74))
AMR:
(c / contrast-01, ARG0, d / direct)
(c / contrast-01, ARG1, d2 / derive-01)
(c / contrast-01, ARG2, e / explain-01)
(d2 / derive-01, ARG0, h / he)
(d2 / derive-01, ARG1, k / knowledge)
(d2 / derive-01, ARG2, s / sense)
(d2 / derive-01, time, u / ultimate)
(e / explain-01, ARG0, i / it)
(e / explain-01, ARG1, m / mean-01)
(k / knowledge, quant, a / all)
(m / mean-01, ARG0, t / this)
(m / mean-01, ARG1, i2 / it)

Decoded in 217,635 microseconds
Sentence: once awakened as in religious conversion or falling in love the nationalist finds a new family from which he or she derives pride dignity the opportunity for unimagined courage contact with a supposed eternity and humanity as opposed to the mechanical arrangements of an alien bureaucracy and the market

Spans:
Span 46-47:  and => and
Span 34-35:  and => and
Span 41-42:  arrangements => arrange-01
Span 1-2:  awakened => awaken-01
Span 45-46:  bureaucracy => bureaucracy
Span 29-30:  contact => contact-01
Span 5-6:  conversion => convert-01
Span 28-29:  courage => courage
Span 23-24:  dignity => dignity
Span 33-34:  eternity => eternity
Span 7-8:  falling => fall-01
Span 15-16:  family => family
Span 12-13:  finds => find-01
Span 18-19:  he => he
Span 35-36:  humanity => humanity
Span 9-10:  love => love-01
Span 48-49:  market => market
Span 40-41:  mechanical => mechanics
Span 11-12:  nationalist => nationalist
Span 14-15:  new => new
Span 0-1:  once => once
Span 25-26:  opportunity => opportunity
Span 37-38:  opposed => oppose-01
Span 19-20:  or => or
Span 6-7:  or => or
Span 22-23:  pride => pride-01
Span 20-21:  she => she
Span 32-33:  supposed => suppose-02
Span 27-28:  unimagined => imagine-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),market,market,false), Span(46,47,List(1),and,and,false), Span(45,46,List(2),bureaucracy,bureaucracy,false), Span(41,42,List(3),arrangements,arrange-01,false), Span(40,41,List(4),mechanical,mechanics,false), Span(37,38,List(5),opposed,oppose-01,false), Span(35,36,List(6),humanity,humanity,false), Span(34,35,List(7),and,and,false), Span(33,34,List(8),eternity,eternity,false), Span(32,33,List(9),supposed,suppose-02,false), Span(29,30,List(10),contact,contact-01,false), Span(28,29,List(11),courage,courage,false), Span(27,28,List(12),unimagined,imagine-01,false), Span(25,26,List(13),opportunity,opportunity,false), Span(23,24,List(14),dignity,dignity,false), Span(22,23,List(15),pride,pride-01,false), Span(20,21,List(16),she,she,false), Span(19,20,List(17),or,or,false), Span(18,19,List(18),he,he,false), Span(15,16,List(19),family,family,false), Span(14,15,List(20),new,new,false), Span(12,13,List(21),finds,find-01,false), Span(11,12,List(22),nationalist,nationalist,false), Span(9,10,List(23),love,love-01,false), Span(7,8,List(24),falling,fall-01,false), Span(6,7,List(25),or,or,false), Span(5,6,List(26),conversion,convert-01,false), Span(1,2,List(27),awakened,awaken-01,false), Span(0,1,List(28),once,once,false)),Map(2 -> bureaucracy, 5 -> oppose-01, 27 -> awaken-01, 12 -> imagine-01, 8 -> eternity, 15 -> pride-01, 21 -> find-01, 18 -> he, 24 -> fall-01, 7 -> and, 1 -> and, 17 -> or, 23 -> love-01, 26 -> convert-01, 4 -> mechanics, 11 -> courage, 14 -> dignity, 20 -> new, 28 -> once, 6 -> humanity, 9 -> suppose-02, 0 -> market, 22 -> nationalist, 16 -> she, 19 -> family, 10 -> contact-01, 3 -> arrange-01, 25 -> or, 13 -> opportunity),Map(e -> eternity, n -> new, h -> humanity, s2 -> she, h2 -> he, b -> bureaucracy, m2 -> mechanics, o3 -> or, a3 -> and, s -> suppose-02, m -> market, d -> dignity, o5 -> once, p -> pride-01, c3 -> convert-01, a -> and, o2 -> opportunity, f3 -> fall-01, i -> imagine-01, a2 -> arrange-01, c -> contact-01, f2 -> find-01, l -> love-01, f -> family, o -> oppose-01, o4 -> or, c2 -> courage, n2 -> nationalist, a4 -> awaken-01))),[Ljava.lang.String;@1dcc138d,Annotation([Ljava.lang.String;@41179d43,[Ljava.lang.String;@7555bb17,[Ljava.lang.String;@4f6e1f2f),Annotation([Ljava.lang.String;@46c16f66,[Ljava.lang.String;@4578b5d4,[Ledu.cmu.lti.nlp.amr.Dependency;@77e994ed),Annotation([Ljava.lang.String;@830911c,[Ljava.lang.String;@2c86c977,[Ljava.lang.String;@4514ba77),Annotation([Ljava.lang.String;@53ddfe0f,[Ljava.lang.String;@1352b5cd,[Ledu.cmu.lti.nlp.amr.Entity;@1b1dafa4))
AMR:
(a / and, op, m / market)
(a2 / arrange-01, ARG0, b / bureaucracy)
(a2 / arrange-01, ARG1, a / and)
(a3 / and, op, h / humanity)
(a3 / and, op, s / suppose-02)
(a4 / awaken-01, ARG0, a3 / and)
(a4 / awaken-01, ARG1, f2 / find-01)
(a4 / awaken-01, purpose, c3 / convert-01)
(a4 / awaken-01, time, o5 / once)
(c / contact-01, ARG0, c2 / courage)
(c / contact-01, ARG1, e / eternity)
(c3 / convert-01, ARG1, l / love-01)
(d / dignity, poss, h2 / he)
(f / family, mod, n / new)
(f2 / find-01, ARG0, o2 / opportunity)
(f2 / find-01, ARG1, f / family)
(f2 / find-01, ARG2, h2 / he)
(f3 / fall-01, ARG1, n2 / nationalist)
(f3 / fall-01, ARG4, l / love-01)
(i / imagine-01, ARG1, c / contact-01)
(o / oppose-01, ARG0, h / humanity)
(o / oppose-01, ARG1, a2 / arrange-01)
(o3 / or, op, h2 / he)
(o3 / or, op, s2 / she)
(o4 / or, op, f3 / fall-01)
(p / pride-01, ARG0, s2 / she)
(p / pride-01, ARG1, m2 / mechanics)
(s / suppose-02, ARG1, e / eternity)

Decoded in 874,546 microseconds
Sentence: a few months later on 30 january 1937 he referred briefly to the beneficial effects for german culture which had been derived from the removal of jewish influence and at the opening of the house of german art in munich the following july he again scorned the jewish contribution to the arts

mkDayMonthYear(30	january	1937,30,january,1937)
NER Entity: (thing :name (name :op "german"))
NER Entity: (thing :name (name :op "german"))
Spans:
Span 5-8:  30 january 1937 => (date-entity :day 30 :month 1 :year 1937)
Span 44-45:  again => again
Span 28-29:  and => and
Span 37-38:  art => art
Span 51-52:  arts => art
Span 13-14:  beneficial => benefit-01
Span 48-49:  contribution => contribute-01
Span 17-18:  culture => culture
Span 21-22:  derived => derive-01
Span 14-15:  effects => effect-01
Span 1-2:  few => few
Span 43-44:  he => he
Span 8-9:  he => he
Span 34-35:  house => house
Span 27-28:  influence => influence-01
Span 47-48:  jewish => (ethnic-group :name (name :op "Jew"))
Span 26-27:  jewish => (ethnic-group :name (name :op "Jew"))
Span 42-43:  july => (date-entity :month 7)
Span 3-4:  later => late
Span 2-3:  months => (temporal-quantity :unit month)
Span 31-32:  opening => open-01
Span 9-10:  referred => refer-01
Span 24-25:  removal => remove-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),arts,art,false), Span(48,49,List(1),contribution,contribute-01,false), Span(47,48,List(4, 3, 2),jewish,(ethnic-group :name (name :op "Jew")),false), Span(44,45,List(5),again,again,false), Span(43,44,List(6),he,he,false), Span(42,43,List(8, 7),july,(date-entity :month 7),false), Span(37,38,List(9),art,art,false), Span(34,35,List(10),house,house,false), Span(31,32,List(11),opening,open-01,false), Span(28,29,List(12),and,and,false), Span(27,28,List(13),influence,influence-01,false), Span(26,27,List(16, 15, 14),jewish,(ethnic-group :name (name :op "Jew")),false), Span(24,25,List(17),removal,remove-01,false), Span(21,22,List(18),derived,derive-01,false), Span(17,18,List(19),culture,culture,false), Span(14,15,List(20),effects,effect-01,false), Span(13,14,List(21),beneficial,benefit-01,false), Span(9,10,List(22),referred,refer-01,false), Span(8,9,List(23),he,he,false), Span(5,8,List(27, 26, 25, 24),30 january 1937,(date-entity :day 30 :month 1 :year 1937),false), Span(3,4,List(28),later,late,false), Span(2,3,List(30, 29),months,(temporal-quantity :unit month),false), Span(1,2,List(31),few,few,false)),Map(30 -> month, 2 -> ethnic-group, 5 -> again, 27 -> 1937, 12 -> and, 8 -> 7, 15 -> name, 21 -> benefit-01, 18 -> derive-01, 24 -> date-entity, 7 -> date-entity, 1 -> contribute-01, 17 -> remove-01, 23 -> he, 26 -> 1, 4 -> "Jew", 11 -> open-01, 14 -> ethnic-group, 29 -> temporal-quantity, 20 -> effect-01, 28 -> late, 6 -> he, 9 -> art, 0 -> art, 22 -> refer-01, 16 -> "Jew", 19 -> culture, 10 -> house, 3 -> name, 31 -> few, 25 -> 30, 13 -> influence-01),Map(e -> ethnic-group, n -> name, h -> he, h2 -> house, t -> temporal-quantity, 12 -> 1937, b -> benefit-01, d3 -> date-entity, e2 -> ethnic-group, a3 -> art, m -> month, d -> date-entity, 7 -> 7, 1 -> 1, r2 -> refer-01, a -> art, d2 -> derive-01, i -> influence-01, a2 -> again, r -> remove-01, c -> contribute-01, h3 -> he, l -> late, f -> few, o -> open-01, e3 -> effect-01, 3 -> 30, n2 -> name, c2 -> culture, a4 -> and))),[Ljava.lang.String;@6f1b8a4c,Annotation([Ljava.lang.String;@7914bc90,[Ljava.lang.String;@4067d00a,[Ljava.lang.String;@5f8b618e),Annotation([Ljava.lang.String;@37b1e2a3,[Ljava.lang.String;@7f9657e5,[Ledu.cmu.lti.nlp.amr.Dependency;@6764bcd3),Annotation([Ljava.lang.String;@6a8f5ad,[Ljava.lang.String;@3e993445,[Ljava.lang.String;@3c36be1e),Annotation([Ljava.lang.String;@2dfbc274,[Ljava.lang.String;@6b9b6541,[Ledu.cmu.lti.nlp.amr.Entity;@2714c598))
AMR:
(a3 / art, time, d / date-entity)
(a4 / and, op, c / contribute-01)
(a4 / and, op, i / influence-01)
(b / benefit-01, ARG1, e3 / effect-01)
(c / contribute-01, ARG0, h / he)
(c / contribute-01, ARG1, a / art)
(c / contribute-01, mod, a2 / again)
(c / contribute-01, mod, e / ethnic-group)
(d / date-entity, month, 7 / 7)
(d2 / derive-01, ARG1, c2 / culture)
(d2 / derive-01, ARG2, r / remove-01)
(d3 / date-entity, day, 3 / 30)
(d3 / date-entity, month, 1 / 1)
(d3 / date-entity, year, 12 / 1937)
(e / ethnic-group, name, n / name)
(e2 / ethnic-group, name, n2 / name)
(e3 / effect-01, ARG0, c2 / culture)
(i / influence-01, location, h2 / house)
(i / influence-01, mod, e2 / ethnic-group)
(l / late, op, f / few)
(l / late, op, t / temporal-quantity)
(n / name, op, "Jew")
(n2 / name, op, "Jew")
(o / open-01, ARG1, h2 / house)
(o / open-01, ARG2, a3 / art)
(r / remove-01, ARG1, i / influence-01)
(r2 / refer-01, ARG0, h3 / he)
(r2 / refer-01, ARG1, e3 / effect-01)
(r2 / refer-01, time, d3 / date-entity)
(r2 / refer-01, time, l / late)
(t / temporal-quantity, unit, m / month)

Decoded in 713,877 microseconds
Sentence: mr lawson can also derive comfort from the industrial production figures which showed manufacturing still growing strongly

Spans:
Span 3-4:  also => also
Span 2-3:  can => possible
Span 5-6:  comfort => comfort-01
Span 4-5:  derive => derive-01
Span 10-11:  figures => figure
Span 15-16:  growing => grow-01
Span 8-9:  industrial => industry
Span 13-14:  manufacturing => manufacture-01
Span 9-10:  production => produce-01
Span 12-13:  showed => show-01
Span 14-15:  still => still
Span 16-17:  strongly => strong

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),strongly,strong,false), Span(15,16,List(1),growing,grow-01,false), Span(14,15,List(2),still,still,false), Span(13,14,List(3),manufacturing,manufacture-01,false), Span(12,13,List(4),showed,show-01,false), Span(10,11,List(5),figures,figure,false), Span(9,10,List(6),production,produce-01,false), Span(8,9,List(7),industrial,industry,false), Span(5,6,List(8),comfort,comfort-01,false), Span(4,5,List(9),derive,derive-01,false), Span(3,4,List(10),also,also,false), Span(2,3,List(11),can,possible,false)),Map(2 -> still, 5 -> figure, 8 -> comfort-01, 7 -> industry, 1 -> grow-01, 11 -> possible, 4 -> show-01, 6 -> produce-01, 9 -> derive-01, 0 -> strong, 10 -> also, 3 -> manufacture-01),Map(s2 -> still, p2 -> possible, s -> strong, d -> derive-01, m -> manufacture-01, p -> produce-01, g -> grow-01, a -> also, i -> industry, c -> comfort-01, s3 -> show-01, f -> figure))),[Ljava.lang.String;@44b89233,Annotation([Ljava.lang.String;@31867584,[Ljava.lang.String;@728d4682,[Ljava.lang.String;@19103b8f),Annotation([Ljava.lang.String;@78b63623,[Ljava.lang.String;@29c71bf,[Ledu.cmu.lti.nlp.amr.Dependency;@6cefb3ef),Annotation([Ljava.lang.String;@6d0e47c8,[Ljava.lang.String;@448ad367,[Ljava.lang.String;@763d3258),Annotation([Ljava.lang.String;@2bb46c0d,[Ljava.lang.String;@5221dfe5,[Ledu.cmu.lti.nlp.amr.Entity;@2df25d83))
AMR:
(d / derive-01, ARG1, c / comfort-01)
(d / derive-01, ARG2, f / figure)
(d / derive-01, mod, a / also)
(f / figure, mod, p / produce-01)
(g / grow-01, ARG1, s / strong)
(g / grow-01, mod, s2 / still)
(p / produce-01, ARG0, i / industry)
(p2 / possible, domain, d / derive-01)
(s3 / show-01, ARG0, f / figure)
(s3 / show-01, ARG1, m / manufacture-01)
(s3 / show-01, ARG2, g / grow-01)

Decoded in 150,520 microseconds
Sentence: in the present case his lordship was not persuaded that the source of the jockey clubs powers could properly be regarded as derived from the prerogative even though it had been set up under a royal charter

Spans:
Span 3-4:  case => case
Span 36-37:  charter => charter-01
Span 15-16:  clubs => club
Span 17-18:  could => possible
Span 22-23:  derived => derive-01
Span 28-29:  it => it
Span 8-9:  persuaded => persuade-01
Span 16-17:  powers => power
Span 25-26:  prerogative => prerogative
Span 2-3:  present => present
Span 18-19:  properly => proper
Span 20-21:  regarded => regard-01
Span 35-36:  royal => royal
Span 11-12:  source => source

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),charter,charter-01,false), Span(35,36,List(1),royal,royal,false), Span(28,29,List(2),it,it,false), Span(25,26,List(3),prerogative,prerogative,false), Span(22,23,List(4),derived,derive-01,false), Span(20,21,List(5),regarded,regard-01,false), Span(18,19,List(6),properly,proper,false), Span(17,18,List(7),could,possible,false), Span(16,17,List(8),powers,power,false), Span(15,16,List(9),clubs,club,false), Span(11,12,List(10),source,source,false), Span(8,9,List(11),persuaded,persuade-01,false), Span(3,4,List(12),case,case,false), Span(2,3,List(13),present,present,false)),Map(2 -> it, 5 -> regard-01, 12 -> case, 8 -> power, 7 -> possible, 1 -> royal, 4 -> derive-01, 11 -> persuade-01, 6 -> proper, 0 -> charter-01, 9 -> club, 3 -> prerogative, 10 -> source, 13 -> present),Map(p5 -> persuade-01, p2 -> proper, s -> source, d -> derive-01, p -> prerogative, r2 -> regard-01, c3 -> case, p4 -> power, r -> royal, i -> it, c -> charter-01, p6 -> present, p3 -> possible, c2 -> club))),[Ljava.lang.String;@2d95b06,Annotation([Ljava.lang.String;@be6e860,[Ljava.lang.String;@64a1fcba,[Ljava.lang.String;@46d74af3),Annotation([Ljava.lang.String;@6079bbda,[Ljava.lang.String;@581c16b1,[Ledu.cmu.lti.nlp.amr.Dependency;@1c15eba8),Annotation([Ljava.lang.String;@632270ff,[Ljava.lang.String;@6a28a831,[Ljava.lang.String;@133a5f6a),Annotation([Ljava.lang.String;@5d4e3202,[Ljava.lang.String;@38b55129,[Ledu.cmu.lti.nlp.amr.Entity;@7e377d5))
AMR:
(c / charter-01, ARG0, i / it)
(c / charter-01, mod, r / royal)
(c3 / case, time, p6 / present)
(d / derive-01, ARG0, p4 / power)
(d / derive-01, ARG1, i / it)
(d / derive-01, ARG2, p / prerogative)
(p3 / possible, condition, d / derive-01)
(p3 / possible, domain, r2 / regard-01)
(p4 / power, mod, c2 / club)
(p5 / persuade-01, ARG1, p3 / possible)
(p5 / persuade-01, time, c3 / case)
(r2 / regard-01, ARG1, s / source)
(r2 / regard-01, manner, p2 / proper)

Decoded in 112,138 microseconds
Sentence: a good third of the stock of any hardware retail shop in nairobi is now derived from this source

Spans:
Span 7-8:  any => any
Span 15-16:  derived => derive-01
Span 1-2:  good => good
Span 8-9:  hardware => hardware
Span 14-15:  now => now
Span 9-10:  retail => retail-01
Span 10-11:  shop => shop
Span 18-19:  source => source
Span 5-6:  stock => stock
Span 17-18:  this => this

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),source,source,false), Span(17,18,List(1),this,this,false), Span(15,16,List(2),derived,derive-01,false), Span(14,15,List(3),now,now,false), Span(10,11,List(4),shop,shop,false), Span(9,10,List(5),retail,retail-01,false), Span(8,9,List(6),hardware,hardware,false), Span(7,8,List(7),any,any,false), Span(5,6,List(8),stock,stock,false), Span(1,2,List(9),good,good,false)),Map(2 -> derive-01, 5 -> retail-01, 8 -> stock, 7 -> any, 1 -> this, 4 -> shop, 6 -> hardware, 9 -> good, 0 -> source, 3 -> now),Map(n -> now, h -> hardware, s2 -> shop, t -> this, s -> source, d -> derive-01, g -> good, a -> any, r -> retail-01, s3 -> stock))),[Ljava.lang.String;@66d044fe,Annotation([Ljava.lang.String;@7361b46d,[Ljava.lang.String;@138c9b49,[Ljava.lang.String;@7426dfa5),Annotation([Ljava.lang.String;@24250536,[Ljava.lang.String;@7a792ec3,[Ledu.cmu.lti.nlp.amr.Dependency;@29ed4306),Annotation([Ljava.lang.String;@17cb546b,[Ljava.lang.String;@26134901,[Ljava.lang.String;@3c1df42e),Annotation([Ljava.lang.String;@528a16d7,[Ljava.lang.String;@67e1a796,[Ledu.cmu.lti.nlp.amr.Entity;@fc19e22))
AMR:
(d / derive-01, ARG0, s2 / shop)
(d / derive-01, ARG1, s3 / stock)
(d / derive-01, ARG2, s / source)
(d / derive-01, time, n / now)
(r / retail-01, ARG0, h / hardware)
(r / retail-01, ARG1, g / good)
(s / source, mod, t / this)
(s2 / shop, mod, a / any)
(s2 / shop, mod, r / retail-01)

Decoded in 54,902 microseconds
Sentence: failures in the application of functionalism have derived from an incorrect definition of live in

Spans:
Span 3-4:  application => apply-01
Span 11-12:  definition => define-01
Span 7-8:  derived => derive-01
Span 0-1:  failures => fail-01
Span 10-11:  incorrect => (correct :polarity -)
Span 13-14:  live => live-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),live,live-01,false), Span(11,12,List(1),definition,define-01,false), Span(10,11,List(3, 2),incorrect,(correct :polarity -),false), Span(7,8,List(4),derived,derive-01,false), Span(3,4,List(5),application,apply-01,false), Span(0,1,List(6),failures,fail-01,false)),Map(2 -> correct, 5 -> apply-01, 1 -> define-01, 4 -> derive-01, 6 -> fail-01, 0 -> live-01, 3 -> -),Map(d -> define-01, a -> apply-01, d2 -> derive-01, c -> correct, l -> live-01, f -> fail-01))),[Ljava.lang.String;@7074d242,Annotation([Ljava.lang.String;@59824bc,[Ljava.lang.String;@4793b582,[Ljava.lang.String;@32718e84),Annotation([Ljava.lang.String;@3d4395fb,[Ljava.lang.String;@202bb129,[Ledu.cmu.lti.nlp.amr.Dependency;@147c0b3f),Annotation([Ljava.lang.String;@5bc65f9a,[Ljava.lang.String;@3caea688,[Ljava.lang.String;@6e3749d7),Annotation([Ljava.lang.String;@6fd0fac8,[Ljava.lang.String;@10099d2,[Ledu.cmu.lti.nlp.amr.Entity;@4e72aa81))
AMR:
(c / correct, polarity, -)
(d / define-01, mod, c / correct)
(d2 / derive-01, ARG1, f / fail-01)
(d2 / derive-01, ARG2, d / define-01)
(f / fail-01, ARG1, a / apply-01)
(l / live-01, ARG1, d / define-01)

Decoded in 23,418 microseconds
Sentence: among the many constraints on africas attempts at industrialization the factors deriving from africas precolonial social structure must be deemed among the most important

Spans:
Span 20-21:  among => among
Span 0-1:  among => among
Span 6-7:  attempts => attempt-01
Span 3-4:  constraints => constrain-01
Span 19-20:  deemed => deem-01
Span 10-11:  factors => factor
Span 23-24:  important => important
Span 2-3:  many => many
Span 22-23:  most => most
Span 15-16:  social => society
Span 16-17:  structure => structure

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),important,important,false), Span(22,23,List(1),most,most,false), Span(20,21,List(2),among,among,false), Span(19,20,List(3),deemed,deem-01,false), Span(16,17,List(4),structure,structure,false), Span(15,16,List(5),social,society,false), Span(10,11,List(6),factors,factor,false), Span(6,7,List(7),attempts,attempt-01,false), Span(3,4,List(8),constraints,constrain-01,false), Span(2,3,List(9),many,many,false), Span(0,1,List(10),among,among,false)),Map(2 -> among, 5 -> society, 8 -> constrain-01, 7 -> attempt-01, 1 -> most, 4 -> structure, 6 -> factor, 9 -> many, 0 -> important, 10 -> among, 3 -> deem-01),Map(s2 -> society, m2 -> many, a3 -> among, s -> structure, d -> deem-01, m -> most, a -> among, a2 -> attempt-01, i -> important, c -> constrain-01, f -> factor))),[Ljava.lang.String;@4a182363,Annotation([Ljava.lang.String;@76bb5e95,[Ljava.lang.String;@73ec519,[Ljava.lang.String;@29fdf006),Annotation([Ljava.lang.String;@5e992f73,[Ljava.lang.String;@1afa578a,[Ledu.cmu.lti.nlp.amr.Dependency;@298932dc),Annotation([Ljava.lang.String;@6e6a1ed1,[Ljava.lang.String;@790d63f8,[Ljava.lang.String;@5e1e6cde),Annotation([Ljava.lang.String;@1f7d9318,[Ljava.lang.String;@6d441cce,[Ledu.cmu.lti.nlp.amr.Entity;@12bf506d))
AMR:
(a2 / attempt-01, ARG0, f / factor)
(a2 / attempt-01, medium, c / constrain-01)
(a3 / among, op, c / constrain-01)
(a3 / among, op, m2 / many)
(d / deem-01, ARG0, f / factor)
(d / deem-01, ARG1, s / structure)
(d / deem-01, location, a / among)
(d / deem-01, manner, i / important)
(i / important, degree, m / most)
(s / structure, mod, s2 / society)

Decoded in 128,544 microseconds
Sentence: when it is discovered that the poison is derived from the yew tree police attention is turned to the family home a sombre house called yew tree lodge deep in the home counties golf and commuter belt

Spans:
Span 34-35:  and => and
Span 14-15:  attention => attention
Span 36-37:  belt => belt
Span 32-33:  counties => county
Span 28-29:  deep => deep
Span 8-9:  derived => derive-01
Span 3-4:  discovered => discover-01
Span 19-20:  family => family
Span 33-34:  golf => golf
Span 31-32:  home => home
Span 20-21:  home => home
Span 23-24:  house => house
Span 1-2:  it => it
Span 27-28:  lodge => lodge
Span 13-14:  police => police
Span 26-27:  tree => tree
Span 12-13:  tree => tree

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),belt,belt,false), Span(34,35,List(1),and,and,false), Span(33,34,List(2),golf,golf,false), Span(32,33,List(3),counties,county,false), Span(31,32,List(4),home,home,false), Span(28,29,List(5),deep,deep,false), Span(27,28,List(6),lodge,lodge,false), Span(26,27,List(7),tree,tree,false), Span(23,24,List(8),house,house,false), Span(20,21,List(9),home,home,false), Span(19,20,List(10),family,family,false), Span(14,15,List(11),attention,attention,false), Span(13,14,List(12),police,police,false), Span(12,13,List(13),tree,tree,false), Span(8,9,List(14),derived,derive-01,false), Span(3,4,List(15),discovered,discover-01,false), Span(1,2,List(16),it,it,false)),Map(2 -> golf, 5 -> deep, 12 -> police, 15 -> discover-01, 8 -> house, 7 -> tree, 1 -> and, 4 -> home, 11 -> attention, 14 -> derive-01, 6 -> lodge, 0 -> belt, 9 -> home, 16 -> it, 3 -> county, 10 -> family, 13 -> tree),Map(h -> home, h2 -> house, b -> belt, t -> tree, d3 -> discover-01, d -> deep, g -> golf, p -> police, a -> and, d2 -> derive-01, t2 -> tree, i -> it, a2 -> attention, c -> county, h3 -> home, l -> lodge, f -> family))),[Ljava.lang.String;@5a49cb8c,Annotation([Ljava.lang.String;@22d282a3,[Ljava.lang.String;@2a7ead31,[Ljava.lang.String;@629c81c2),Annotation([Ljava.lang.String;@110b1a22,[Ljava.lang.String;@6fe0b6eb,[Ledu.cmu.lti.nlp.amr.Dependency;@a0937af),Annotation([Ljava.lang.String;@6326c74e,[Ljava.lang.String;@6e704bd,[Ljava.lang.String;@28e817d5),Annotation([Ljava.lang.String;@1d74b5ee,[Ljava.lang.String;@59542b5d,[Ledu.cmu.lti.nlp.amr.Entity;@24eb147c))
AMR:
(a / and, op, b / belt)
(a / and, op, g / golf)
(a2 / attention, mod, p / police)
(d2 / derive-01, ARG0, h / home)
(d2 / derive-01, ARG1, i / it)
(d2 / derive-01, ARG2, t2 / tree)
(d2 / derive-01, location, p / police)
(d3 / discover-01, ARG0, h2 / house)
(d3 / discover-01, ARG1, i / it)
(g / golf, mod, c / county)
(g / golf, mod, h / home)
(h3 / home, mod, f / family)
(l / lodge, location, a / and)
(l / lodge, location, h3 / home)
(l / lodge, manner, d / deep)
(l / lodge, mod, t / tree)

Decoded in 296,132 microseconds
Sentence: lyonaise has interests in waste management health care energy and leisure although it still derives 50 per cent of its profits at ffr726 million 73 million in 1989 from its water activities

Spans:
Span 27-28:  1989 => (date-entity :year 1989)
Span 15-16:  50 => 50
Span 24-25:  73 => 73
Span 31-32:  activities => activity
Span 9-10:  and => and
Span 7-8:  care => care-01
Span 17-18:  cent => (monetary-quantity :unit cent)
Span 8-9:  energy => energy
Span 6-7:  health => health
Span 2-3:  interests => interest
Span 12-13:  it => it
Span 5-6:  management => manage-01
Span 20-21:  profits => profit-01
Span 13-14:  still => still
Span 4-5:  waste => waste-01
Span 30-31:  water => water

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),activities,activity,false), Span(30,31,List(1),water,water,false), Span(27,28,List(3, 2),1989,(date-entity :year 1989),false), Span(24,25,List(4),73,73,false), Span(20,21,List(5),profits,profit-01,false), Span(17,18,List(7, 6),cent,(monetary-quantity :unit cent),false), Span(15,16,List(8),50,50,false), Span(13,14,List(9),still,still,false), Span(12,13,List(10),it,it,false), Span(9,10,List(11),and,and,false), Span(8,9,List(12),energy,energy,false), Span(7,8,List(13),care,care-01,false), Span(6,7,List(14),health,health,false), Span(5,6,List(15),management,manage-01,false), Span(4,5,List(16),waste,waste-01,false), Span(2,3,List(17),interests,interest,false)),Map(2 -> date-entity, 5 -> profit-01, 12 -> energy, 15 -> manage-01, 8 -> 50, 7 -> cent, 17 -> interest, 1 -> water, 4 -> 73, 11 -> and, 14 -> health, 6 -> monetary-quantity, 0 -> activity, 9 -> still, 16 -> waste-01, 3 -> 1989, 10 -> it, 13 -> care-01),Map(e -> energy, w -> water, h -> health, 5 -> 50, m2 -> manage-01, s -> still, d -> date-entity, 7 -> 73, m -> monetary-quantity, 1 -> 1989, p -> profit-01, a -> activity, i2 -> interest, w2 -> waste-01, i -> it, a2 -> and, c -> cent, c2 -> care-01))),[Ljava.lang.String;@458debd3,Annotation([Ljava.lang.String;@68758d51,[Ljava.lang.String;@7d90f66a,[Ljava.lang.String;@3821e98d),Annotation([Ljava.lang.String;@3a6c44c5,[Ljava.lang.String;@1a16ff7a,[Ledu.cmu.lti.nlp.amr.Dependency;@5bdeaff7),Annotation([Ljava.lang.String;@78f2b03f,[Ljava.lang.String;@5113622,[Ljava.lang.String;@2cf8f4c7),Annotation([Ljava.lang.String;@c8e4be2,[Ljava.lang.String;@5217e8de,[Ledu.cmu.lti.nlp.amr.Entity;@1fb970ed))
AMR:
(7 / 73, op, w2 / waste-01)
(a / activity, mod, w / water)
(a2 / and, op, i2 / interest)
(c / cent, op, p / profit-01)
(c2 / care-01, ARG0, e / energy)
(c2 / care-01, ARG1, h / health)
(c2 / care-01, ARG2, p / profit-01)
(c2 / care-01, ARG3, m2 / manage-01)
(d / date-entity, year, 1 / 1989)
(i2 / interest, poss, e / energy)
(m / monetary-quantity, unit, c / cent)
(m2 / manage-01, ARG0, d / date-entity)
(m2 / manage-01, mod, w2 / waste-01)
(p / profit-01, ARG0, i / it)
(p / profit-01, ARG1, a / activity)
(w / water, mod, s / still)
(w2 / waste-01, ARG0, 5 / 50)

Decoded in 275,505 microseconds
Sentence: dramatic genius has taken a forward step here is the suggestion of a new technique the telling of one mans story for the dramatic values to be derived from the man himself as well as those arising from the story and from the reactions of the chorus

Spans:
Span 40-41:  and => and
Span 27-28:  derived => derive-01
Span 23-24:  dramatic => dramatic
Span 0-1:  dramatic => dramatic
Span 5-6:  forward => forward
Span 1-2:  genius => genius
Span 7-8:  here => here
Span 30-31:  man => man
Span 13-14:  new => new
Span 43-44:  reactions => react-01
Span 39-40:  story => story
Span 20-21:  story => story
Span 10-11:  suggestion => (thing :ARG1-of suggest-01)
Span 14-15:  technique => technique
Span 16-17:  telling => tell-01
Span 24-25:  values => value
Span 33-34:  well => well

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),reactions,react-01,false), Span(40,41,List(1),and,and,false), Span(39,40,List(2),story,story,false), Span(33,34,List(3),well,well,false), Span(30,31,List(4),man,man,false), Span(27,28,List(5),derived,derive-01,false), Span(24,25,List(6),values,value,false), Span(23,24,List(7),dramatic,dramatic,false), Span(20,21,List(8),story,story,false), Span(16,17,List(9),telling,tell-01,false), Span(14,15,List(10),technique,technique,false), Span(13,14,List(11),new,new,false), Span(10,11,List(13, 12),suggestion,(thing :ARG1-of suggest-01),false), Span(7,8,List(14),here,here,false), Span(5,6,List(15),forward,forward,false), Span(1,2,List(16),genius,genius,false), Span(0,1,List(17),dramatic,dramatic,false)),Map(2 -> story, 5 -> derive-01, 12 -> thing, 15 -> forward, 8 -> story, 7 -> dramatic, 17 -> dramatic, 1 -> and, 4 -> man, 11 -> new, 14 -> here, 6 -> value, 0 -> react-01, 9 -> tell-01, 16 -> genius, 3 -> well, 10 -> technique, 13 -> suggest-01),Map(w -> well, n -> new, h -> here, s2 -> story, t -> tell-01, d3 -> dramatic, s -> story, v -> value, m -> man, d -> derive-01, t3 -> thing, g -> genius, a -> and, d2 -> dramatic, t2 -> technique, r -> react-01, s3 -> suggest-01, f -> forward))),[Ljava.lang.String;@2d738f8d,Annotation([Ljava.lang.String;@7dd5894a,[Ljava.lang.String;@4e2899d0,[Ljava.lang.String;@4b8a4ec6),Annotation([Ljava.lang.String;@6539cfe8,[Ljava.lang.String;@3680bc43,[Ledu.cmu.lti.nlp.amr.Dependency;@3dc7eea9),Annotation([Ljava.lang.String;@1105b8ef,[Ljava.lang.String;@eb05ba4,[Ljava.lang.String;@5c507384),Annotation([Ljava.lang.String;@25d00e75,[Ljava.lang.String;@7e6536b7,[Ledu.cmu.lti.nlp.amr.Entity;@26eb6935))
AMR:
(a / and, op, r / react-01)
(a / and, op, s / story)
(d / derive-01, ARG0, m / man)
(d / derive-01, ARG1, s2 / story)
(d / derive-01, ARG2, v / value)
(d3 / dramatic, op, t / tell-01)
(f / forward, op, d / derive-01)
(g / genius, mod, d3 / dramatic)
(r / react-01, ARG1, w / well)
(s3 / suggest-01, ARG0, t2 / technique)
(s3 / suggest-01, ARG1, t3 / thing)
(s3 / suggest-01, location, h / here)
(t / tell-01, ARG0, t2 / technique)
(t / tell-01, ARG1, s2 / story)
(t / tell-01, ARG2, a / and)
(t2 / technique, mod, n / new)
(v / value, mod, d2 / dramatic)

Decoded in 625,019 microseconds
Sentence: his interest in the celtic nations derives from his father who was educated at glasgow university and his uncle who was a gp in edinburgh

Spans:
Span 16-17:  and => and
Span 12-13:  educated => educate-01
Span 9-10:  father => (have-rel-role-91 :ARG2 father)
Span 1-2:  interest => interest-01
Span 5-6:  nations => nation
Span 18-19:  uncle => (have-rel-role-91 :ARG2 uncle)
Span 15-16:  university => university

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),uncle,(have-rel-role-91 :ARG2 uncle),false), Span(16,17,List(2),and,and,false), Span(15,16,List(3),university,university,false), Span(12,13,List(4),educated,educate-01,false), Span(9,10,List(6, 5),father,(have-rel-role-91 :ARG2 father),false), Span(5,6,List(7),nations,nation,false), Span(1,2,List(8),interest,interest-01,false)),Map(2 -> and, 5 -> have-rel-role-91, 8 -> interest-01, 7 -> nation, 1 -> uncle, 4 -> educate-01, 6 -> father, 0 -> have-rel-role-91, 3 -> university),Map(n -> nation, e -> educate-01, h -> have-rel-role-91, h2 -> have-rel-role-91, u2 -> university, a -> and, i -> interest-01, u -> uncle, f -> father))),[Ljava.lang.String;@29482a89,Annotation([Ljava.lang.String;@40e09d8b,[Ljava.lang.String;@5a8731f3,[Ljava.lang.String;@61e076f3),Annotation([Ljava.lang.String;@57a17db8,[Ljava.lang.String;@2b44e7fa,[Ledu.cmu.lti.nlp.amr.Dependency;@38d9e447),Annotation([Ljava.lang.String;@691a0e79,[Ljava.lang.String;@2dac5fd7,[Ljava.lang.String;@fc833ae),Annotation([Ljava.lang.String;@20b8ec9a,[Ljava.lang.String;@4cb5833e,[Ledu.cmu.lti.nlp.amr.Entity;@20bb82ca))
AMR:
(a / and, op, e / educate-01)
(a / and, op, u2 / university)
(e / educate-01, ARG1, h2 / have-rel-role-91)
(f / father, poss, n / nation)
(h / have-rel-role-91, ARG1, u2 / university)
(h / have-rel-role-91, ARG2, u / uncle)
(h2 / have-rel-role-91, ARG2, f / father)
(i / interest-01, ARG1, n / nation)

Decoded in 55,534 microseconds
Sentence: the french speak a language derived from that small group of speakers of latin who conquered gaul at the beginning of the first millennium ad although they suppose they are descended more from the gauls than the romans

Spans:
Span 19-20:  beginning => begin-01
Span 15-16:  conquered => conquer-01
Span 5-6:  derived => derive-01
Span 1-2:  french => (country :name (name :op "France"))
Span 9-10:  group => group
Span 4-5:  language => language
Span 8-9:  small => small
Span 2-3:  speak => speak-01
Span 27-28:  suppose => suppose-01
Span 28-29:  they => they
Span 26-27:  they => they

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),they,they,false), Span(27,28,List(1),suppose,suppose-01,false), Span(26,27,List(2),they,they,false), Span(19,20,List(3),beginning,begin-01,false), Span(15,16,List(4),conquered,conquer-01,false), Span(9,10,List(5),group,group,false), Span(8,9,List(6),small,small,false), Span(5,6,List(7),derived,derive-01,false), Span(4,5,List(8),language,language,false), Span(2,3,List(9),speak,speak-01,false), Span(1,2,List(12, 11, 10),french,(country :name (name :op "France")),false)),Map(2 -> they, 5 -> group, 12 -> "France", 8 -> language, 7 -> derive-01, 1 -> suppose-01, 4 -> conquer-01, 11 -> name, 6 -> small, 0 -> they, 9 -> speak-01, 3 -> begin-01, 10 -> country),Map(n -> name, s2 -> small, b -> begin-01, t -> they, s -> suppose-01, d -> derive-01, g -> group, t2 -> they, s3 -> speak-01, l -> language, c -> conquer-01, c2 -> country))),[Ljava.lang.String;@7687ac8f,Annotation([Ljava.lang.String;@45521d14,[Ljava.lang.String;@11f32f9a,[Ljava.lang.String;@74ba30aa),Annotation([Ljava.lang.String;@6bd124c4,[Ljava.lang.String;@6fc4f728,[Ledu.cmu.lti.nlp.amr.Dependency;@6c3e9c6b),Annotation([Ljava.lang.String;@28f6c52,[Ljava.lang.String;@16107cce,[Ljava.lang.String;@1471c3b3),Annotation([Ljava.lang.String;@38e72741,[Ljava.lang.String;@4fc23996,[Ledu.cmu.lti.nlp.amr.Entity;@5852cfc2))
AMR:
(b / begin-01, ARG0, t / they)
(c / conquer-01, ARG0, t2 / they)
(c / conquer-01, ARG1, c2 / country)
(c / conquer-01, time, b / begin-01)
(c2 / country, name, n / name)
(d / derive-01, ARG0, g / group)
(d / derive-01, ARG1, l / language)
(g / group, mod, s2 / small)
(n / name, op, "France")
(s / suppose-01, ARG0, t2 / they)
(s3 / speak-01, ARG0, c2 / country)
(s3 / speak-01, ARG1, l / language)

Decoded in 135,407 microseconds
Sentence: only 1012 per cent of marmitebovrils approximately 35m in annual sales is derived from uk markets according to cpc

NER Entity: (country :name (name :op "uk"))
Spans:
Span 1-2:  1012 => (date-entity :year 1012)
Span 6-7:  approximately => approximately
Span 3-4:  cent => (monetary-quantity :unit cent)
Span 12-13:  derived => derive-01
Span 15-16:  markets => market
Span 0-1:  only => only

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),markets,market,false), Span(12,13,List(1),derived,derive-01,false), Span(6,7,List(2),approximately,approximately,false), Span(3,4,List(4, 3),cent,(monetary-quantity :unit cent),false), Span(1,2,List(6, 5),1012,(date-entity :year 1012),false), Span(0,1,List(7),only,only,false)),Map(2 -> approximately, 5 -> date-entity, 7 -> only, 1 -> derive-01, 4 -> cent, 6 -> 1012, 0 -> market, 3 -> monetary-quantity),Map(m2 -> monetary-quantity, d -> derive-01, m -> market, 1 -> 1012, a -> approximately, d2 -> date-entity, c -> cent, o -> only))),[Ljava.lang.String;@24c5f6db,Annotation([Ljava.lang.String;@40d1b6b9,[Ljava.lang.String;@8334cee,[Ljava.lang.String;@5fffa176),Annotation([Ljava.lang.String;@7c17b37,[Ljava.lang.String;@2f805bdb,[Ledu.cmu.lti.nlp.amr.Dependency;@140e9f3a),Annotation([Ljava.lang.String;@4bf7a31f,[Ljava.lang.String;@6ef66f2f,[Ljava.lang.String;@74fdaf92),Annotation([Ljava.lang.String;@3b11d63f,[Ljava.lang.String;@1008e065,[Ledu.cmu.lti.nlp.amr.Entity;@36c40f1c))
AMR:
(a / approximately, op, d2 / date-entity)
(a / approximately, op, m2 / monetary-quantity)
(d / derive-01, ARG0, o / only)
(d / derive-01, ARG1, m2 / monetary-quantity)
(d / derive-01, ARG2, m / market)
(d2 / date-entity, year, 1 / 1012)
(m2 / monetary-quantity, unit, c / cent)

Decoded in 41,207 microseconds
Sentence: green gardeners are concerned with preventing damage to the environment so they use less powerful deterrents many derived from plants

Spans:
Span 3-4:  concerned => concern-01
Span 6-7:  damage => damage-01
Span 17-18:  derived => derive-01
Span 9-10:  environment => environment
Span 0-1:  green => green
Span 13-14:  less => less
Span 16-17:  many => many
Span 19-20:  plants => plant
Span 14-15:  powerful => powerful
Span 5-6:  preventing => prevent-01
Span 10-11:  so => so
Span 11-12:  they => they
Span 12-13:  use => use-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),plants,plant,false), Span(17,18,List(1),derived,derive-01,false), Span(16,17,List(2),many,many,false), Span(14,15,List(3),powerful,powerful,false), Span(13,14,List(4),less,less,false), Span(12,13,List(5),use,use-01,false), Span(11,12,List(6),they,they,false), Span(10,11,List(7),so,so,false), Span(9,10,List(8),environment,environment,false), Span(6,7,List(9),damage,damage-01,false), Span(5,6,List(10),preventing,prevent-01,false), Span(3,4,List(11),concerned,concern-01,false), Span(0,1,List(12),green,green,false)),Map(2 -> many, 5 -> use-01, 12 -> green, 8 -> environment, 7 -> so, 1 -> derive-01, 4 -> less, 11 -> concern-01, 6 -> they, 0 -> plant, 9 -> damage-01, 3 -> powerful, 10 -> prevent-01),Map(e -> environment, t -> they, p2 -> powerful, s -> so, d -> derive-01, m -> many, p -> plant, g -> green, d2 -> damage-01, c -> concern-01, l -> less, u -> use-01, p3 -> prevent-01))),[Ljava.lang.String;@1bc135b,Annotation([Ljava.lang.String;@629abc40,[Ljava.lang.String;@1cbd4053,[Ljava.lang.String;@4cca17e2),Annotation([Ljava.lang.String;@67e61dd0,[Ljava.lang.String;@34af77fa,[Ledu.cmu.lti.nlp.amr.Dependency;@6bedd91b),Annotation([Ljava.lang.String;@4c48b2f8,[Ljava.lang.String;@38dddee8,[Ljava.lang.String;@6e556e82),Annotation([Ljava.lang.String;@2aca5165,[Ljava.lang.String;@48a5d3d5,[Ledu.cmu.lti.nlp.amr.Entity;@7ef66a35))
AMR:
(c / concern-01, ARG1, t / they)
(c / concern-01, ARG2, p3 / prevent-01)
(d / derive-01, ARG0, t / they)
(d / derive-01, ARG1, m / many)
(d / derive-01, ARG2, p / plant)
(d2 / damage-01, ARG1, e / environment)
(g / green, op, d / derive-01)
(p2 / powerful, degree, l / less)
(p3 / prevent-01, ARG1, d2 / damage-01)
(s / so, op, u / use-01)
(u / use-01, ARG0, t / they)
(u / use-01, ARG1, l / less)

Decoded in 151,913 microseconds
Sentence: since it was generally associated with the corpuscular theory of matter it was a common idea in lockes time though its details and the arguments from which it was derived were not always the same

Spans:
Span 32-33:  always => always
Span 22-23:  and => and
Span 24-25:  arguments => argue-01
Span 4-5:  associated => associate-01
Span 14-15:  common => common
Span 29-30:  derived => derive-01
Span 21-22:  details => detail-01
Span 3-4:  generally => general
Span 15-16:  idea => idea
Span 27-28:  it => it
Span 11-12:  it => it
Span 1-2:  it => it
Span 10-11:  matter => matter
Span 34-35:  same => same-41
Span 0-1:  since => since
Span 8-9:  theory => theory
Span 18-19:  time => time

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),same,same-41,false), Span(32,33,List(1),always,always,false), Span(29,30,List(2),derived,derive-01,false), Span(27,28,List(3),it,it,false), Span(24,25,List(4),arguments,argue-01,false), Span(22,23,List(5),and,and,false), Span(21,22,List(6),details,detail-01,false), Span(18,19,List(7),time,time,false), Span(15,16,List(8),idea,idea,false), Span(14,15,List(9),common,common,false), Span(11,12,List(10),it,it,false), Span(10,11,List(11),matter,matter,false), Span(8,9,List(12),theory,theory,false), Span(4,5,List(13),associated,associate-01,false), Span(3,4,List(14),generally,general,false), Span(1,2,List(15),it,it,false), Span(0,1,List(16),since,since,false)),Map(2 -> derive-01, 5 -> and, 12 -> theory, 15 -> it, 8 -> idea, 7 -> time, 1 -> always, 4 -> argue-01, 11 -> matter, 14 -> general, 6 -> detail-01, 0 -> same-41, 9 -> common, 16 -> since, 3 -> it, 10 -> it, 13 -> associate-01),Map(i4 -> it, s2 -> since, t -> time, a3 -> and, s -> same-41, d -> derive-01, m -> matter, i3 -> it, g -> general, a -> always, d2 -> detail-01, i2 -> idea, t2 -> theory, i -> it, a2 -> argue-01, c -> common, a4 -> associate-01))),[Ljava.lang.String;@63b6feb1,Annotation([Ljava.lang.String;@30b499c,[Ljava.lang.String;@5a0da253,[Ljava.lang.String;@351c2555),Annotation([Ljava.lang.String;@4ad70ab0,[Ljava.lang.String;@6bfecf32,[Ledu.cmu.lti.nlp.amr.Dependency;@25d51302),Annotation([Ljava.lang.String;@47d2fbb5,[Ljava.lang.String;@6c8b4ce9,[Ljava.lang.String;@2d668cab),Annotation([Ljava.lang.String;@279d45d6,[Ljava.lang.String;@4653f8eb,[Ledu.cmu.lti.nlp.amr.Entity;@32fb305f))
AMR:
(a2 / argue-01, ARG1, i / it)
(a3 / and, op, a2 / argue-01)
(a3 / and, op, d2 / detail-01)
(a4 / associate-01, ARG1, i4 / it)
(a4 / associate-01, ARG2, t2 / theory)
(a4 / associate-01, mod, g / general)
(d / derive-01, ARG1, i / it)
(i2 / idea, domain, i3 / it)
(i2 / idea, mod, c / common)
(i2 / idea, mod, t / time)
(m / matter, domain, i3 / it)
(s / same-41, ARG0, i3 / it)
(s / same-41, ARG1, a3 / and)
(s / same-41, time, a / always)
(s2 / since, op, a4 / associate-01)
(t2 / theory, topic, m / matter)

Decoded in 149,849 microseconds
Sentence:   all our ideas are derived from experience and he argues against descartes that there are no innate ideas which are with us at birth

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   all our ideas are derived from experience and he argues against descartes that there are no innate ideas which are with us at birth
myTokenized = all our ideas are derived from experience and he argues against descartes that there are no innate ideas which are with us at birth
i = 0
prefix = List(all)
regexr = \Qa\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: perhaps then the idea is derived from the consciousness we have of our power over our own bodies

Spans:
Span 17-18:  bodies => body
Span 8-9:  consciousness => consciousness
Span 5-6:  derived => derive-01
Span 3-4:  idea => idea
Span 0-1:  perhaps => perhaps
Span 13-14:  power => power
Span 1-2:  then => then
Span 9-10:  we => we

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),bodies,body,false), Span(13,14,List(1),power,power,false), Span(9,10,List(2),we,we,false), Span(8,9,List(3),consciousness,consciousness,false), Span(5,6,List(4),derived,derive-01,false), Span(3,4,List(5),idea,idea,false), Span(1,2,List(6),then,then,false), Span(0,1,List(7),perhaps,perhaps,false)),Map(2 -> we, 5 -> idea, 7 -> perhaps, 1 -> power, 4 -> derive-01, 6 -> then, 0 -> body, 3 -> consciousness),Map(w -> we, t -> then, b -> body, p2 -> perhaps, d -> derive-01, p -> power, i -> idea, c -> consciousness))),[Ljava.lang.String;@55da60c5,Annotation([Ljava.lang.String;@7407518b,[Ljava.lang.String;@c7ab830,[Ljava.lang.String;@4cd25db6),Annotation([Ljava.lang.String;@7067f21,[Ljava.lang.String;@3b845321,[Ledu.cmu.lti.nlp.amr.Dependency;@6c6dba0d),Annotation([Ljava.lang.String;@17d1e318,[Ljava.lang.String;@549448df,[Ljava.lang.String;@533c53da),Annotation([Ljava.lang.String;@1da537e7,[Ljava.lang.String;@49f92de5,[Ledu.cmu.lti.nlp.amr.Entity;@6343b54))
AMR:
(b / body, poss, w / we)
(d / derive-01, ARG0, p2 / perhaps)
(d / derive-01, ARG1, i / idea)
(d / derive-01, ARG2, c / consciousness)
(p / power, poss, c / consciousness)
(p / power, poss, w / we)
(t / then, mod, p2 / perhaps)

Decoded in 67,719 microseconds
Sentence: i feel that i am doing a job as well as i can and i also feel that i am capable of deriving pleasure from it

Spans:
Span 15-16:  also => also
Span 13-14:  and => and
Span 12-13:  can => possible
Span 20-21:  capable => capable-41
Span 5-6:  doing => do-02
Span 16-17:  feel => feel-01
Span 1-2:  feel => feel-01
Span 18-19:  i => i
Span 14-15:  i => i
Span 11-12:  i => i
Span 3-4:  i => i
Span 0-1:  i => i
Span 25-26:  it => it
Span 7-8:  job => job
Span 23-24:  pleasure => pleasure
Span 9-10:  well => well

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),it,it,false), Span(23,24,List(1),pleasure,pleasure,false), Span(20,21,List(2),capable,capable-41,false), Span(18,19,List(3),i,i,false), Span(16,17,List(4),feel,feel-01,false), Span(15,16,List(5),also,also,false), Span(14,15,List(6),i,i,false), Span(13,14,List(7),and,and,false), Span(12,13,List(8),can,possible,false), Span(11,12,List(9),i,i,false), Span(9,10,List(10),well,well,false), Span(7,8,List(11),job,job,false), Span(5,6,List(12),doing,do-02,false), Span(3,4,List(13),i,i,false), Span(1,2,List(14),feel,feel-01,false), Span(0,1,List(15),i,i,false)),Map(2 -> capable-41, 5 -> also, 12 -> do-02, 15 -> i, 8 -> possible, 7 -> and, 1 -> pleasure, 4 -> feel-01, 11 -> job, 14 -> feel-01, 6 -> i, 0 -> it, 9 -> i, 3 -> i, 10 -> well, 13 -> i),Map(w -> well, i4 -> i, p2 -> possible, j -> job, i6 -> i, d -> do-02, i3 -> i, p -> pleasure, a -> also, i2 -> i, i5 -> i, i -> it, a2 -> and, c -> capable-41, f2 -> feel-01, f -> feel-01))),[Ljava.lang.String;@4f230afa,Annotation([Ljava.lang.String;@5a5cbad,[Ljava.lang.String;@47decdc0,[Ljava.lang.String;@74961d1c),Annotation([Ljava.lang.String;@2b515510,[Ljava.lang.String;@68a7a3a7,[Ledu.cmu.lti.nlp.amr.Dependency;@55e95e9e),Annotation([Ljava.lang.String;@4c430322,[Ljava.lang.String;@4382d44b,[Ljava.lang.String;@423faa8d),Annotation([Ljava.lang.String;@61d630f5,[Ljava.lang.String;@35285701,[Ledu.cmu.lti.nlp.amr.Entity;@6b681dea))
AMR:
(a2 / and, op, d / do-02)
(a2 / and, op, f / feel-01)
(a2 / and, op, p2 / possible)
(c / capable-41, ARG1, i3 / i)
(c / capable-41, ARG2, p / pleasure)
(c / capable-41, domain, i2 / i)
(d / do-02, ARG0, i5 / i)
(d / do-02, ARG1, j / job)
(f / feel-01, ARG0, i3 / i)
(f / feel-01, mod, a / also)
(f2 / feel-01, ARG0, i6 / i)
(f2 / feel-01, ARG1, d / do-02)
(p / pleasure, poss, i / it)
(p2 / possible, mod, i4 / i)
(w / well, op, p2 / possible)

Decoded in 417,905 microseconds
Sentence: it will not be disputed that about half the money to be spent by the county council is in future to be derived directly from central government and about a quarter from the proceeds of the uniform business rate

Spans:
Span 27-28:  and => and
Span 37-38:  business => business
Span 25-26:  central => central
Span 16-17:  council => council
Span 15-16:  county => county
Span 22-23:  derived => derive-01
Span 23-24:  directly => direct
Span 4-5:  disputed => dispute-01
Span 19-20:  future => future
Span 7-8:  half => half
Span 0-1:  it => it
Span 9-10:  money => money
Span 38-39:  rate => rate
Span 12-13:  spent => spend-01
Span 36-37:  uniform => uniform

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),rate,rate,false), Span(37,38,List(1),business,business,false), Span(36,37,List(2),uniform,uniform,false), Span(27,28,List(3),and,and,false), Span(25,26,List(4),central,central,false), Span(23,24,List(5),directly,direct,false), Span(22,23,List(6),derived,derive-01,false), Span(19,20,List(7),future,future,false), Span(16,17,List(8),council,council,false), Span(15,16,List(9),county,county,false), Span(12,13,List(10),spent,spend-01,false), Span(9,10,List(11),money,money,false), Span(7,8,List(12),half,half,false), Span(4,5,List(13),disputed,dispute-01,false), Span(0,1,List(14),it,it,false)),Map(2 -> uniform, 5 -> direct, 12 -> half, 8 -> council, 7 -> future, 1 -> business, 4 -> central, 11 -> money, 14 -> it, 6 -> derive-01, 0 -> rate, 9 -> county, 3 -> and, 10 -> spend-01, 13 -> dispute-01),Map(h -> half, b -> business, d3 -> dispute-01, s -> spend-01, d -> direct, m -> money, a -> and, c3 -> county, d2 -> derive-01, i -> it, r -> rate, c -> central, u -> uniform, f -> future, c2 -> council))),[Ljava.lang.String;@8424bd,Annotation([Ljava.lang.String;@6387f48e,[Ljava.lang.String;@72c8c9ae,[Ljava.lang.String;@5c30f961),Annotation([Ljava.lang.String;@13447e90,[Ljava.lang.String;@75d129d1,[Ledu.cmu.lti.nlp.amr.Dependency;@771094c4),Annotation([Ljava.lang.String;@61970ced,[Ljava.lang.String;@3d1cda9,[Ljava.lang.String;@43151434),Annotation([Ljava.lang.String;@1ce18454,[Ljava.lang.String;@19b6b59c,[Ledu.cmu.lti.nlp.amr.Entity;@2a4d21f4))
AMR:
(a / and, op, d3 / dispute-01)
(c2 / council, mod, c3 / county)
(d2 / derive-01, ARG0, m / money)
(d2 / derive-01, ARG1, f / future)
(d2 / derive-01, ARG2, r / rate)
(d2 / derive-01, location, a / and)
(d2 / derive-01, manner, d / direct)
(d3 / dispute-01, ARG0, c / central)
(d3 / dispute-01, ARG1, i / it)
(r / rate, mod, b / business)
(r / rate, mod, u / uniform)
(s / spend-01, ARG0, h / half)
(s / spend-01, ARG1, c2 / council)
(s / spend-01, ARG3, m / money)

Decoded in 264,672 microseconds
Sentence: in judging the value of negative freedom one should never forget that it derives from its contribution to autonomy

Spans:
Span 18-19:  autonomy => autonomy
Span 16-17:  contribution => contribute-01
Span 10-11:  forget => forget-01
Span 6-7:  freedom => free-41
Span 12-13:  it => it
Span 1-2:  judging => judge-01
Span 5-6:  negative => negative
Span 8-9:  should => recommend-01
Span 3-4:  value => value-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),autonomy,autonomy,false), Span(16,17,List(1),contribution,contribute-01,false), Span(12,13,List(2),it,it,false), Span(10,11,List(3),forget,forget-01,false), Span(8,9,List(4),should,recommend-01,false), Span(6,7,List(5),freedom,free-41,false), Span(5,6,List(6),negative,negative,false), Span(3,4,List(7),value,value-01,false), Span(1,2,List(8),judging,judge-01,false)),Map(2 -> it, 5 -> free-41, 8 -> judge-01, 7 -> value-01, 1 -> contribute-01, 4 -> recommend-01, 6 -> negative, 0 -> autonomy, 3 -> forget-01),Map(n -> negative, j -> judge-01, v -> value-01, a -> autonomy, r -> recommend-01, i -> it, f2 -> free-41, c -> contribute-01, f -> forget-01))),[Ljava.lang.String;@73d6af61,Annotation([Ljava.lang.String;@139444b1,[Ljava.lang.String;@6b29ca81,[Ljava.lang.String;@4ae121e),Annotation([Ljava.lang.String;@402771f8,[Ljava.lang.String;@5dab71af,[Ledu.cmu.lti.nlp.amr.Dependency;@22b4c834),Annotation([Ljava.lang.String;@ac3dfb9,[Ljava.lang.String;@4194f034,[Ljava.lang.String;@1926078f),Annotation([Ljava.lang.String;@fba4a2f,[Ljava.lang.String;@f5c5bba,[Ledu.cmu.lti.nlp.amr.Entity;@788a1836))
AMR:
(c / contribute-01, ARG1, a / autonomy)
(c / contribute-01, poss, i / it)
(f / forget-01, ARG0, i / it)
(f / forget-01, ARG1, f2 / free-41)
(f2 / free-41, mod, n / negative)
(j / judge-01, ARG1, v / value-01)
(r / recommend-01, ARG1, f / forget-01)
(v / value-01, ARG1, r / recommend-01)

Decoded in 84,866 microseconds
Sentence: far from being an emblem of wholeness this woman is fragmented lacking and she derives from her lack the nervous energy of desire

Spans:
Span 12-13:  and => and
Span 22-23:  desire => desire-01
Span 20-21:  energy => energy
Span 0-1:  far => far
Span 17-18:  lack => lack-01
Span 11-12:  lacking => lack-01
Span 19-20:  nervous => nervous-41
Span 13-14:  she => she
Span 7-8:  this => this
Span 8-9:  woman => woman

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),desire,desire-01,false), Span(20,21,List(1),energy,energy,false), Span(19,20,List(2),nervous,nervous-41,false), Span(17,18,List(3),lack,lack-01,false), Span(13,14,List(4),she,she,false), Span(12,13,List(5),and,and,false), Span(11,12,List(6),lacking,lack-01,false), Span(8,9,List(7),woman,woman,false), Span(7,8,List(8),this,this,false), Span(0,1,List(9),far,far,false)),Map(2 -> nervous-41, 5 -> and, 8 -> this, 7 -> woman, 1 -> energy, 4 -> she, 6 -> lack-01, 9 -> far, 0 -> desire-01, 3 -> lack-01),Map(w -> woman, n -> nervous-41, e -> energy, t -> this, s -> she, d -> desire-01, a -> and, l2 -> lack-01, l -> lack-01, f -> far))),[Ljava.lang.String;@323bbf0d,Annotation([Ljava.lang.String;@707c083e,[Ljava.lang.String;@5f015823,[Ljava.lang.String;@5141928f),Annotation([Ljava.lang.String;@27fd13f6,[Ljava.lang.String;@58298ffc,[Ledu.cmu.lti.nlp.amr.Dependency;@10ac169c),Annotation([Ljava.lang.String;@12006451,[Ljava.lang.String;@57ba0b12,[Ljava.lang.String;@772cf7bc),Annotation([Ljava.lang.String;@293c94c4,[Ljava.lang.String;@484ae502,[Ledu.cmu.lti.nlp.amr.Entity;@2d010b62))
AMR:
(a / and, op, e / energy)
(d / desire-01, ARG1, l / lack-01)
(l / lack-01, ARG1, f / far)
(l / lack-01, poss, s / she)
(l2 / lack-01, ARG0, a / and)
(l2 / lack-01, ARG1, w / woman)
(n / nervous-41, ARG0, l / lack-01)
(n / nervous-41, ARG1, e / energy)
(w / woman, mod, t / this)

Decoded in 79,692 microseconds
Sentence: liberating while attempting to control all the resentment and sense of oppression of the lower strata was notoriously liable to backfire on those confident enough to undertake the task even if such resentment was couched in cultural terms from which such leaders also derived their legitimacy

Spans:
Span 5-6:  all => all
Span 42-43:  also => also
Span 8-9:  and => and
Span 2-3:  attempting => attempt-01
Span 23-24:  confident => confident-41
Span 4-5:  control => control-01
Span 36-37:  cultural => culture
Span 43-44:  derived => derive-01
Span 24-25:  enough => enough
Span 41-42:  leaders => (person :ARG0-of lead-02)
Span 45-46:  legitimacy => legitimacy
Span 18-19:  liable => liable-41
Span 14-15:  lower => low
Span 17-18:  notoriously => notorious
Span 11-12:  oppression => oppress-01
Span 32-33:  resentment => resent-01
Span 7-8:  resentment => resent-01
Span 9-10:  sense => sense
Span 40-41:  such => such
Span 31-32:  such => such
Span 28-29:  task => task
Span 37-38:  terms => term
Span 26-27:  undertake => undertake-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),legitimacy,legitimacy,false), Span(43,44,List(1),derived,derive-01,false), Span(42,43,List(2),also,also,false), Span(41,42,List(4, 3),leaders,(person :ARG0-of lead-02),false), Span(40,41,List(5),such,such,false), Span(37,38,List(6),terms,term,false), Span(36,37,List(7),cultural,culture,false), Span(32,33,List(8),resentment,resent-01,false), Span(31,32,List(9),such,such,false), Span(28,29,List(10),task,task,false), Span(26,27,List(11),undertake,undertake-01,false), Span(24,25,List(12),enough,enough,false), Span(23,24,List(13),confident,confident-41,false), Span(18,19,List(14),liable,liable-41,false), Span(17,18,List(15),notoriously,notorious,false), Span(14,15,List(16),lower,low,false), Span(11,12,List(17),oppression,oppress-01,false), Span(9,10,List(18),sense,sense,false), Span(8,9,List(19),and,and,false), Span(7,8,List(20),resentment,resent-01,false), Span(5,6,List(21),all,all,false), Span(4,5,List(22),control,control-01,false), Span(2,3,List(23),attempting,attempt-01,false)),Map(2 -> also, 5 -> such, 12 -> enough, 15 -> notorious, 8 -> resent-01, 21 -> all, 18 -> sense, 7 -> culture, 17 -> oppress-01, 1 -> derive-01, 23 -> attempt-01, 4 -> lead-02, 11 -> undertake-01, 14 -> liable-41, 20 -> resent-01, 6 -> term, 22 -> control-01, 0 -> legitimacy, 9 -> such, 16 -> low, 19 -> and, 3 -> person, 10 -> task, 13 -> confident-41),Map(e -> enough, n -> notorious, s2 -> such, t -> term, a3 -> all, l3 -> liable-41, s -> such, d -> derive-01, r2 -> resent-01, p -> person, c3 -> control-01, a -> also, t2 -> task, l2 -> lead-02, a2 -> and, r -> resent-01, s3 -> sense, c -> culture, l -> legitimacy, u -> undertake-01, o -> oppress-01, c2 -> confident-41, a4 -> attempt-01, l4 -> low))),[Ljava.lang.String;@44675f26,Annotation([Ljava.lang.String;@5e97dadf,[Ljava.lang.String;@43a296fd,[Ljava.lang.String;@6766debb),Annotation([Ljava.lang.String;@12a8fc06,[Ljava.lang.String;@1439f77c,[Ledu.cmu.lti.nlp.amr.Dependency;@69a6f843),Annotation([Ljava.lang.String;@50f52ce5,[Ljava.lang.String;@105697e9,[Ljava.lang.String;@250f4a60),Annotation([Ljava.lang.String;@edbf7a2,[Ljava.lang.String;@b5eb44d,[Ledu.cmu.lti.nlp.amr.Entity;@768f310f))
AMR:
(a2 / and, op, s3 / sense)
(a4 / attempt-01, ARG1, c3 / control-01)
(c2 / confident-41, ARG0, t / term)
(c2 / confident-41, ARG1, u / undertake-01)
(c2 / confident-41, condition, r / resent-01)
(c2 / confident-41, degree, e / enough)
(c3 / control-01, ARG0, a2 / and)
(c3 / control-01, ARG1, r2 / resent-01)
(d / derive-01, ARG0, p / person)
(d / derive-01, ARG1, l / legitimacy)
(d / derive-01, condition, r / resent-01)
(d / derive-01, mod, a / also)
(l2 / lead-02, ARG0, p / person)
(l3 / liable-41, ARG1, c3 / control-01)
(l3 / liable-41, mod, n / notorious)
(o / oppress-01, ARG1, r / resent-01)
(p / person, mod, s / such)
(r / resent-01, mod, s2 / such)
(r2 / resent-01, ARG1, l4 / low)
(r2 / resent-01, quant, a3 / all)
(s3 / sense, mod, o / oppress-01)
(t / term, mod, c / culture)
(u / undertake-01, ARG1, t2 / task)

Decoded in 1,155,310 microseconds
Sentence: before that he had been for ten years prime minister of the council of ministers in london not so much a shadow cabinet as a cabinet of political ghosts whose dogged persistence over nearly half a century and apparent constitutional legitimacy once more haunts the warsaw government deriving its legitimacy chiefly from the realpolitik of yalta

NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 37-38:  and => and
Span 38-39:  apparent => apparent
Span 0-1:  before => before
Span 25-26:  cabinet => cabinet
Span 22-23:  cabinet => cabinet
Span 50-51:  chiefly => chiefly
Span 39-40:  constitutional => constitution
Span 12-13:  council => council
Span 34-35:  half => half
Span 2-3:  he => he
Span 49-50:  legitimacy => legitimacy
Span 40-41:  legitimacy => legitimacy
Span 16-17:  london => (city :name (name :op "London"))
Span 9-10:  minister => (have-org-role-91 :ARG2 minister)
Span 14-15:  ministers => (have-org-role-91 :ARG2 minister)
Span 19-20:  much => much
Span 33-34:  nearly => nearly
Span 41-42:  once => once
Span 27-28:  political => politics
Span 8-9:  prime => prime
Span 21-22:  shadow => shadow-01
Span 18-19:  so => so
Span 7-8:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),chiefly,chiefly,false), Span(49,50,List(1),legitimacy,legitimacy,false), Span(41,42,List(2),once,once,false), Span(40,41,List(3),legitimacy,legitimacy,false), Span(39,40,List(4),constitutional,constitution,false), Span(38,39,List(5),apparent,apparent,false), Span(37,38,List(6),and,and,false), Span(34,35,List(7),half,half,false), Span(33,34,List(8),nearly,nearly,false), Span(27,28,List(9),political,politics,false), Span(25,26,List(10),cabinet,cabinet,false), Span(22,23,List(11),cabinet,cabinet,false), Span(21,22,List(12),shadow,shadow-01,false), Span(19,20,List(13),much,much,false), Span(18,19,List(14),so,so,false), Span(16,17,List(17, 16, 15),london,(city :name (name :op "London")),false), Span(14,15,List(19, 18),ministers,(have-org-role-91 :ARG2 minister),false), Span(12,13,List(20),council,council,false), Span(9,10,List(22, 21),minister,(have-org-role-91 :ARG2 minister),false), Span(8,9,List(23),prime,prime,false), Span(7,8,List(25, 24),years,(temporal-quantity :unit year),false), Span(2,3,List(26),he,he,false), Span(0,1,List(27),before,before,false)),Map(2 -> once, 5 -> apparent, 27 -> before, 12 -> shadow-01, 8 -> nearly, 15 -> city, 21 -> have-org-role-91, 18 -> have-org-role-91, 24 -> temporal-quantity, 7 -> half, 1 -> legitimacy, 17 -> "London", 23 -> prime, 26 -> he, 4 -> constitution, 11 -> cabinet, 14 -> so, 20 -> council, 6 -> and, 9 -> politics, 0 -> chiefly, 22 -> minister, 16 -> name, 19 -> minister, 10 -> cabinet, 3 -> legitimacy, 25 -> year, 13 -> much),Map(m3 -> minister, n -> nearly, h -> half, s2 -> so, h2 -> have-org-role-91, t -> temporal-quantity, b -> before, m2 -> minister, p2 -> prime, c4 -> cabinet, s -> shadow-01, h4 -> he, m -> much, y -> year, p -> politics, c3 -> cabinet, a -> apparent, c6 -> council, l2 -> legitimacy, a2 -> and, c -> chiefly, h3 -> have-org-role-91, l -> legitimacy, o -> once, c2 -> constitution, n2 -> name, c5 -> city))),[Ljava.lang.String;@75c65470,Annotation([Ljava.lang.String;@2fd1c178,[Ljava.lang.String;@73f4c5ce,[Ljava.lang.String;@4ae692db),Annotation([Ljava.lang.String;@67b38e47,[Ljava.lang.String;@3d420c81,[Ledu.cmu.lti.nlp.amr.Dependency;@3b430892),Annotation([Ljava.lang.String;@2de7c7a3,[Ljava.lang.String;@4be3b5e0,[Ljava.lang.String;@52b9ac0c),Annotation([Ljava.lang.String;@1bce7242,[Ljava.lang.String;@eaf5951,[Ledu.cmu.lti.nlp.amr.Entity;@1a10dc5f))
AMR:
(a2 / and, location, o / once)
(a2 / and, op, l2 / legitimacy)
(c3 / cabinet, poss, h4 / he)
(c4 / cabinet, polarity, s2 / so)
(c5 / city, name, n2 / name)
(h / half, mod, n / nearly)
(h2 / have-org-role-91, ARG0, a / apparent)
(h2 / have-org-role-91, ARG1, c4 / cabinet)
(h2 / have-org-role-91, ARG2, m2 / minister)
(h2 / have-org-role-91, location, c5 / city)
(h3 / have-org-role-91, ARG0, h4 / he)
(h3 / have-org-role-91, ARG1, c6 / council)
(h3 / have-org-role-91, ARG2, m3 / minister)
(h3 / have-org-role-91, duration, t / temporal-quantity)
(h3 / have-org-role-91, purpose, s / shadow-01)
(l / legitimacy, location, c / chiefly)
(l / legitimacy, poss, p / politics)
(l2 / legitimacy, mod, a / apparent)
(l2 / legitimacy, mod, c2 / constitution)
(m / much, degree, s2 / so)
(m3 / minister, mod, p2 / prime)
(n / nearly, op, t / temporal-quantity)
(n2 / name, op, "London")
(p / politics, poss, a2 / and)
(s / shadow-01, ARG0, c4 / cabinet)
(s / shadow-01, ARG1, b / before)
(t / temporal-quantity, unit, y / year)

Decoded in 1,178,046 microseconds
Sentence: i have as a result of the new storyboard got a detailed list of proposals and suggestions from the new programmer which i am faxing to you eight pages to follow and which will form the basis of formal discussions between the programmer and myself and possibly david and from which we have to derive a proper technical specification

Spans:
Span 48-49:  and => and
Span 45-46:  and => and
Span 43-44:  and => and
Span 31-32:  and => and
Span 15-16:  and => and
Span 40-41:  between => between
Span 54-55:  derive => derive-01
Span 11-12:  detailed => detail-01
Span 39-40:  discussions => discuss-01
Span 27-28:  eight => 8
Span 30-31:  follow => follow-02
Span 34-35:  form => form
Span 38-39:  formal => formal
Span 22-23:  i => i
Span 0-1:  i => i
Span 12-13:  list => list-01
Span 19-20:  new => new
Span 7-8:  new => new
Span 28-29:  pages => page
Span 46-47:  possibly => possible
Span 56-57:  proper => proper
Span 14-15:  proposals => (thing :ARG1-of propose-01)
Span 4-5:  result => result-01
Span 16-17:  suggestions => suggest-01
Span 57-58:  technical => technical
Span 51-52:  we => we
Span 26-27:  you => you

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(57,58,List(0),technical,technical,false), Span(56,57,List(1),proper,proper,false), Span(54,55,List(2),derive,derive-01,false), Span(51,52,List(3),we,we,false), Span(48,49,List(4),and,and,false), Span(46,47,List(5),possibly,possible,false), Span(45,46,List(6),and,and,false), Span(43,44,List(7),and,and,false), Span(40,41,List(8),between,between,false), Span(39,40,List(9),discussions,discuss-01,false), Span(38,39,List(10),formal,formal,false), Span(34,35,List(11),form,form,false), Span(31,32,List(12),and,and,false), Span(30,31,List(13),follow,follow-02,false), Span(28,29,List(14),pages,page,false), Span(27,28,List(15),eight,8,false), Span(26,27,List(16),you,you,false), Span(22,23,List(17),i,i,false), Span(19,20,List(18),new,new,false), Span(16,17,List(19),suggestions,suggest-01,false), Span(15,16,List(20),and,and,false), Span(14,15,List(22, 21),proposals,(thing :ARG1-of propose-01),false), Span(12,13,List(23),list,list-01,false), Span(11,12,List(24),detailed,detail-01,false), Span(7,8,List(25),new,new,false), Span(4,5,List(26),result,result-01,false), Span(0,1,List(27),i,i,false)),Map(2 -> derive-01, 5 -> possible, 27 -> i, 12 -> and, 8 -> between, 15 -> 8, 21 -> thing, 18 -> new, 24 -> detail-01, 7 -> and, 1 -> proper, 17 -> i, 23 -> list-01, 26 -> result-01, 4 -> and, 11 -> form, 14 -> page, 20 -> and, 6 -> and, 9 -> discuss-01, 0 -> technical, 22 -> propose-01, 16 -> you, 19 -> suggest-01, 10 -> formal, 3 -> we, 25 -> new, 13 -> follow-02),Map(w -> we, n -> new, t -> technical, b -> between, 8 -> 8, d3 -> detail-01, p2 -> possible, a3 -> and, s -> suggest-01, d -> derive-01, y -> you, p -> proper, a -> and, p4 -> propose-01, d2 -> discuss-01, a5 -> and, f3 -> follow-02, i2 -> i, t2 -> thing, r -> result-01, a2 -> and, i -> i, f2 -> form, l -> list-01, f -> formal, p3 -> page, n2 -> new, a4 -> and))),[Ljava.lang.String;@48f3ee57,Annotation([Ljava.lang.String;@6a4b72c,[Ljava.lang.String;@27f5ad1c,[Ljava.lang.String;@72381dc2),Annotation([Ljava.lang.String;@4229e623,[Ljava.lang.String;@4cc425c4,[Ledu.cmu.lti.nlp.amr.Dependency;@618b8e3b),Annotation([Ljava.lang.String;@1126f585,[Ljava.lang.String;@14c0f78f,[Ljava.lang.String;@8bcd7ee),Annotation([Ljava.lang.String;@26044ebd,[Ljava.lang.String;@64cd6dca,[Ledu.cmu.lti.nlp.amr.Entity;@6ae31c79))
AMR:
(8 / 8, mod, y / you)
(a / and, op, f2 / form)
(a2 / and, op, a / and)
(a2 / and, op, p2 / possible)
(a4 / and, op, a2 / and)
(a4 / and, op, d / derive-01)
(a4 / and, op, f3 / follow-02)
(a4 / and, op, l / list-01)
(a4 / and, op, p3 / page)
(a5 / and, op, s / suggest-01)
(a5 / and, op, t2 / thing)
(d / derive-01, ARG0, w / we)
(d2 / discuss-01, ARG0, a2 / and)
(d2 / discuss-01, ARG1, a3 / and)
(d2 / discuss-01, location, b / between)
(d2 / discuss-01, mod, f / formal)
(d3 / detail-01, ARG0, n / new)
(d3 / detail-01, ARG1, l / list-01)
(f3 / follow-02, ARG0, i / i)
(f3 / follow-02, ARG1, n2 / new)
(l / list-01, ARG0, r / result-01)
(l / list-01, ARG1, a5 / and)
(p / proper, op, d2 / discuss-01)
(p3 / page, domain, y / you)
(p4 / propose-01, ARG1, t2 / thing)
(s / suggest-01, ARG0, i2 / i)
(t / technical, op, d2 / discuss-01)

Decoded in 667,559 microseconds
Sentence: derived essentially from the earlier atomist democritus dash

Spans:
Span 0-1:  derived => derive-01
Span 4-5:  earlier => early
Span 1-2:  essentially => essential

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),earlier,early,false), Span(1,2,List(1),essentially,essential,false), Span(0,1,List(2),derived,derive-01,false)),Map(2 -> derive-01, 1 -> essential, 0 -> early),Map(e -> early, e2 -> essential, d -> derive-01))),[Ljava.lang.String;@646282c1,Annotation([Ljava.lang.String;@7f768063,[Ljava.lang.String;@3ce724f5,[Ljava.lang.String;@6b2b700f),Annotation([Ljava.lang.String;@70ca1fc0,[Ljava.lang.String;@65eab019,[Ledu.cmu.lti.nlp.amr.Dependency;@12cf6d95),Annotation([Ljava.lang.String;@70235ad8,[Ljava.lang.String;@2121546c,[Ljava.lang.String;@132d8f72),Annotation([Ljava.lang.String;@14248f34,[Ljava.lang.String;@6c35a940,[Ledu.cmu.lti.nlp.amr.Entity;@36fae040))
AMR:
(d / derive-01, ARG1, e / early)
(d / derive-01, manner, e2 / essential)

Decoded in 14,377 microseconds
Sentence: by definition rights are not fundamental but derive from interests

Spans:
Span 6-7:  but => contrast-01
Span 1-2:  definition => define-01
Span 7-8:  derive => derive-01
Span 5-6:  fundamental => fundamental
Span 9-10:  interests => interest
Span 2-3:  rights => right

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),interests,interest,false), Span(7,8,List(1),derive,derive-01,false), Span(6,7,List(2),but,contrast-01,false), Span(5,6,List(3),fundamental,fundamental,false), Span(2,3,List(4),rights,right,false), Span(1,2,List(5),definition,define-01,false)),Map(2 -> contrast-01, 5 -> define-01, 1 -> derive-01, 4 -> right, 0 -> interest, 3 -> fundamental),Map(d -> derive-01, d2 -> define-01, r -> right, i -> interest, c -> contrast-01, f -> fundamental))),[Ljava.lang.String;@1098a5f3,Annotation([Ljava.lang.String;@15b6fd08,[Ljava.lang.String;@209e235b,[Ljava.lang.String;@6e233c17),Annotation([Ljava.lang.String;@4b3e427e,[Ljava.lang.String;@647f84c9,[Ledu.cmu.lti.nlp.amr.Dependency;@6fe6dbaa),Annotation([Ljava.lang.String;@1d5faf4b,[Ljava.lang.String;@74ed73fd,[Ljava.lang.String;@115a2304),Annotation([Ljava.lang.String;@34b0e482,[Ljava.lang.String;@496a2dd4,[Ledu.cmu.lti.nlp.amr.Entity;@59e6def3))
AMR:
(c / contrast-01, ARG1, f / fundamental)
(c / contrast-01, ARG2, d / derive-01)
(d / derive-01, ARG0, i / interest)
(d / derive-01, ARG1, r / right)
(d2 / define-01, ARG0, r / right)

Decoded in 18,416 microseconds
Sentence: a nickname said to derive from his swarthy complexion and curly black hair dash

Spans:
Span 9-10:  and => and
Span 11-12:  black => black
Span 4-5:  derive => derive-01
Span 12-13:  hair => hair
Span 2-3:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),hair,hair,false), Span(11,12,List(1),black,black,false), Span(9,10,List(2),and,and,false), Span(4,5,List(3),derive,derive-01,false), Span(2,3,List(4),said,say-01,false)),Map(2 -> and, 1 -> black, 4 -> say-01, 0 -> hair, 3 -> derive-01),Map(h -> hair, b -> black, s -> say-01, d -> derive-01, a -> and))),[Ljava.lang.String;@443751a1,Annotation([Ljava.lang.String;@bd04404,[Ljava.lang.String;@162168ab,[Ljava.lang.String;@6b5ebde6),Annotation([Ljava.lang.String;@19057e1c,[Ljava.lang.String;@379a6d19,[Ledu.cmu.lti.nlp.amr.Dependency;@7b70a0d3),Annotation([Ljava.lang.String;@1f4ebbf5,[Ljava.lang.String;@6a15e1e1,[Ljava.lang.String;@42a0b130),Annotation([Ljava.lang.String;@43d0e87c,[Ljava.lang.String;@484f47ac,[Ledu.cmu.lti.nlp.amr.Entity;@4cea924a))
AMR:
(a / and, op, b / black)
(a / and, op, h / hair)
(d / derive-01, ARG1, a / and)
(s / say-01, ARG1, d / derive-01)

Decoded in 20,021 microseconds
Sentence: fascination with the city undoubtedly also derives in part from its condition as a carnival on the edge of frenzy professor ronald dworkin quoted in calcutta of the western world 7 november

NER Entity: (person :name (name :op "ronald" :op "dworkin"))
NER Entity: (country :name (name :op "calcutta"))
Spans:
Span 30-31:  7 => 7
Span 5-6:  also => also
Span 3-4:  city => city
Span 11-12:  condition => condition
Span 19-20:  frenzy => frenzy
Span 31-32:  november => (date-entity :month 11)
Span 20-21:  professor => (have-org-role-91 :ARG2 professor)
Span 23-24:  quoted => quote-01
Span 21-23:  ronald dworkin => (person :name (name :op "ronald" :op "dworkin"))
Span 4-5:  undoubtedly => (doubt-01 :polarity -)
Span 28-29:  western => (world-region :name (name :op "West"))
Span 29-30:  world => world

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(1, 0),november,(date-entity :month 11),false), Span(30,31,List(2),7,7,false), Span(29,30,List(3),world,world,false), Span(28,29,List(6, 5, 4),western,(world-region :name (name :op "West")),false), Span(23,24,List(7),quoted,quote-01,false), Span(21,23,List(11, 10, 9, 8),ronald dworkin,(person :name (name :op "ronald" :op "dworkin")),false), Span(20,21,List(13, 12),professor,(have-org-role-91 :ARG2 professor),false), Span(19,20,List(14),frenzy,frenzy,false), Span(11,12,List(15),condition,condition,false), Span(5,6,List(16),also,also,false), Span(4,5,List(18, 17),undoubtedly,(doubt-01 :polarity -),false), Span(3,4,List(19),city,city,false)),Map(2 -> 7, 5 -> name, 12 -> have-org-role-91, 15 -> condition, 8 -> person, 18 -> -, 7 -> quote-01, 17 -> doubt-01, 1 -> 11, 4 -> world-region, 11 -> "dworkin", 14 -> frenzy, 6 -> "West", 0 -> date-entity, 9 -> name, 16 -> also, 19 -> city, 3 -> world, 10 -> "ronald", 13 -> professor),Map(w -> world, n -> name, h -> have-org-role-91, q -> quote-01, p2 -> professor, d -> date-entity, 7 -> 7, 1 -> 11, p -> person, a -> also, d2 -> doubt-01, w2 -> world-region, c -> condition, f -> frenzy, c2 -> city, n2 -> name))),[Ljava.lang.String;@5a2405ac,Annotation([Ljava.lang.String;@72f08d6f,[Ljava.lang.String;@ed5ad5d,[Ljava.lang.String;@6e68bc46),Annotation([Ljava.lang.String;@1e20d04b,[Ljava.lang.String;@7c4afb60,[Ledu.cmu.lti.nlp.amr.Dependency;@1ebd9b60),Annotation([Ljava.lang.String;@3223cb64,[Ljava.lang.String;@4bfe2bf3,[Ljava.lang.String;@1bf7857f),Annotation([Ljava.lang.String;@175d6331,[Ljava.lang.String;@741b31f2,[Ledu.cmu.lti.nlp.amr.Entity;@256c426b))
AMR:
(c / condition, topic, h / have-org-role-91)
(c2 / city, location, p / person)
(d / date-entity, month, 1 / 11)
(d / date-entity, quant, 7 / 7)
(d2 / doubt-01, ARG0, w2 / world-region)
(d2 / doubt-01, ARG1, a / also)
(d2 / doubt-01, polarity, -)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, f / frenzy)
(h / have-org-role-91, ARG2, p2 / professor)
(n / name, op, "West")
(n2 / name, op, "dworkin")
(n2 / name, op, "ronald")
(p / person, name, n2 / name)
(q / quote-01, ARG0, a / also)
(q / quote-01, ARG1, p / person)
(q / quote-01, duration, d / date-entity)
(w / world, location, w2 / world-region)
(w2 / world-region, name, n / name)

Decoded in 293,086 microseconds
Sentence: until now factor nine has been derived from pooled blood transfusions a system which permitted the transmission of the hiv virus before the introduction of screening and heat inactivation

Spans:
Span 26-27:  and => and
Span 21-22:  before => before
Span 9-10:  blood => blood
Span 6-7:  derived => derive-01
Span 2-3:  factor => factor
Span 27-28:  heat => heat
Span 23-24:  introduction => introduce-02
Span 3-4:  nine => 9
Span 1-2:  now => now
Span 14-15:  permitted => permit-01
Span 8-9:  pooled => pool-01
Span 12-13:  system => system
Span 0-1:  until => until
Span 20-21:  virus => virus

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),heat,heat,false), Span(26,27,List(1),and,and,false), Span(23,24,List(2),introduction,introduce-02,false), Span(21,22,List(3),before,before,false), Span(20,21,List(4),virus,virus,false), Span(14,15,List(5),permitted,permit-01,false), Span(12,13,List(6),system,system,false), Span(9,10,List(7),blood,blood,false), Span(8,9,List(8),pooled,pool-01,false), Span(6,7,List(9),derived,derive-01,false), Span(3,4,List(10),nine,9,false), Span(2,3,List(11),factor,factor,false), Span(1,2,List(12),now,now,false), Span(0,1,List(13),until,until,false)),Map(2 -> introduce-02, 5 -> permit-01, 12 -> now, 8 -> pool-01, 7 -> blood, 1 -> and, 4 -> virus, 11 -> factor, 6 -> system, 0 -> heat, 9 -> derive-01, 3 -> before, 10 -> 9, 13 -> until),Map(n -> now, h -> heat, b -> before, b2 -> blood, p2 -> pool-01, s -> system, v -> virus, d -> derive-01, p -> permit-01, a -> and, i -> introduce-02, u -> until, 9 -> 9, f -> factor))),[Ljava.lang.String;@667c91fe,Annotation([Ljava.lang.String;@7c54ef42,[Ljava.lang.String;@2c2815d3,[Ljava.lang.String;@7bb0e64a),Annotation([Ljava.lang.String;@1adf43b7,[Ljava.lang.String;@37d6b129,[Ledu.cmu.lti.nlp.amr.Dependency;@70091762),Annotation([Ljava.lang.String;@64de5c64,[Ljava.lang.String;@4283dcf8,[Ljava.lang.String;@5f203fe5),Annotation([Ljava.lang.String;@3e43042d,[Ljava.lang.String;@21c7464a,[Ledu.cmu.lti.nlp.amr.Entity;@21d7b599))
AMR:
(a / and, op, h / heat)
(b / before, op, i / introduce-02)
(d / derive-01, ARG1, f / factor)
(d / derive-01, ARG2, s / system)
(f / factor, time, n / now)
(i / introduce-02, ARG0, 9 / 9)
(i / introduce-02, ARG1, a / and)
(p / permit-01, ARG0, s / system)
(p / permit-01, ARG1, b2 / blood)
(p / permit-01, time, b / before)
(p2 / pool-01, ARG1, i / introduce-02)
(u / until, op, d / derive-01)
(v / virus, time, b / before)

Decoded in 428,057 microseconds
Sentence: they do not derive from a common source or from common ultimate principles

Spans:
Span 10-11:  common => common
Span 6-7:  common => common
Span 3-4:  derive => derive-01
Span 8-9:  or => or
Span 12-13:  principles => principle
Span 7-8:  source => source
Span 0-1:  they => they
Span 11-12:  ultimate => ultimate

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),principles,principle,false), Span(11,12,List(1),ultimate,ultimate,false), Span(10,11,List(2),common,common,false), Span(8,9,List(3),or,or,false), Span(7,8,List(4),source,source,false), Span(6,7,List(5),common,common,false), Span(3,4,List(6),derive,derive-01,false), Span(0,1,List(7),they,they,false)),Map(2 -> common, 5 -> common, 7 -> they, 1 -> ultimate, 4 -> source, 6 -> derive-01, 0 -> principle, 3 -> or),Map(t -> they, s -> source, d -> derive-01, p -> principle, c -> common, u -> ultimate, o -> or, c2 -> common))),[Ljava.lang.String;@58d3612a,Annotation([Ljava.lang.String;@1d9039f5,[Ljava.lang.String;@67cd12fc,[Ljava.lang.String;@489993a1),Annotation([Ljava.lang.String;@5aab5443,[Ljava.lang.String;@26292936,[Ledu.cmu.lti.nlp.amr.Dependency;@5850abcc),Annotation([Ljava.lang.String;@183f0b60,[Ljava.lang.String;@5303d80f,[Ljava.lang.String;@215deb5d),Annotation([Ljava.lang.String;@1d0737c8,[Ljava.lang.String;@44df3a5b,[Ledu.cmu.lti.nlp.amr.Entity;@1b704fb0))
AMR:
(d / derive-01, ARG0, o / or)
(d / derive-01, ARG1, t / they)
(d / derive-01, ARG2, s / source)
(o / or, op, c2 / common)
(o / or, op, p / principle)
(p / principle, mod, c / common)
(p / principle, mod, u / ultimate)

Decoded in 110,351 microseconds
Sentence: the criticisms that we make derive strength from an analysis of other jurisdictions with similar commonlaw backgrounds and the same liberal democratic traditions as the united kingdom

NER Entity: (country :name (name :op "united" :op "kingdom"))
Spans:
Span 9-10:  analysis => analyze-01
Span 17-18:  and => and
Span 16-17:  backgrounds => background
Span 1-2:  criticisms => criticism
Span 21-22:  democratic => democracy
Span 5-6:  derive => derive-01
Span 12-13:  jurisdictions => jurisdiction
Span 20-21:  liberal => liberal
Span 11-12:  other => other
Span 19-20:  same => same-41
Span 6-7:  strength => strength
Span 22-23:  traditions => tradition
Span 25-27:  united kingdom => (country :name (name :op "united" :op "kingdom"))
Span 3-4:  we => we

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,27,List(3, 2, 1, 0),united kingdom,(country :name (name :op "united" :op "kingdom")),false), Span(22,23,List(4),traditions,tradition,false), Span(21,22,List(5),democratic,democracy,false), Span(20,21,List(6),liberal,liberal,false), Span(19,20,List(7),same,same-41,false), Span(17,18,List(8),and,and,false), Span(16,17,List(9),backgrounds,background,false), Span(12,13,List(10),jurisdictions,jurisdiction,false), Span(11,12,List(11),other,other,false), Span(9,10,List(12),analysis,analyze-01,false), Span(6,7,List(13),strength,strength,false), Span(5,6,List(14),derive,derive-01,false), Span(3,4,List(15),we,we,false), Span(1,2,List(16),criticisms,criticism,false)),Map(2 -> "united", 5 -> democracy, 12 -> analyze-01, 15 -> we, 8 -> and, 7 -> same-41, 1 -> name, 4 -> tradition, 11 -> other, 14 -> derive-01, 6 -> liberal, 0 -> country, 9 -> background, 16 -> criticism, 3 -> "kingdom", 10 -> jurisdiction, 13 -> strength),Map(w -> we, n -> name, s2 -> strength, t -> tradition, b -> background, j -> jurisdiction, s -> same-41, d -> democracy, a -> and, d2 -> derive-01, a2 -> analyze-01, c -> country, l -> liberal, o -> other, c2 -> criticism))),[Ljava.lang.String;@6784db0d,Annotation([Ljava.lang.String;@43496793,[Ljava.lang.String;@82f0668,[Ljava.lang.String;@474d9a0a),Annotation([Ljava.lang.String;@37bc2b18,[Ljava.lang.String;@22b1513e,[Ledu.cmu.lti.nlp.amr.Dependency;@274ccf3d),Annotation([Ljava.lang.String;@23b9c1f3,[Ljava.lang.String;@786c4ad7,[Ljava.lang.String;@da5a705),Annotation([Ljava.lang.String;@76784042,[Ljava.lang.String;@50c2e9d1,[Ledu.cmu.lti.nlp.amr.Entity;@2c84c1c3))
AMR:
(a / and, mod, c2 / criticism)
(a / and, op, a2 / analyze-01)
(a / and, op, s2 / strength)
(a / and, op, t / tradition)
(a2 / analyze-01, ARG0, c / country)
(a2 / analyze-01, ARG1, j / jurisdiction)
(c / country, name, n / name)
(j / jurisdiction, mod, o / other)
(j / jurisdiction, poss, b / background)
(n / name, op, "kingdom")
(n / name, op, "united")
(s / same-41, ARG1, t / tradition)
(s2 / strength, mod, d2 / derive-01)
(s2 / strength, poss, w / we)
(t / tradition, mod, d / democracy)
(t / tradition, mod, l / liberal)

Decoded in 244,990 microseconds
Sentence: the rightholders interest itself conceived independently of its contribution to the public interest is deemed insufficient to justify holding others to be subject to the extensive duties and disabilities commonly derived from the right of free speech

Spans:
Span 27-28:  and => and
Span 29-30:  commonly => common
Span 4-5:  conceived => conceive-01
Span 8-9:  contribution => contribute-01
Span 14-15:  deemed => deem-01
Span 30-31:  derived => derive-01
Span 26-27:  duties => duty
Span 25-26:  extensive => extensive
Span 35-36:  free => free-41
Span 18-19:  holding => hold-01
Span 5-6:  independently => independent
Span 15-16:  insufficient => (suffice-01 :polarity -)
Span 12-13:  interest => interest-01
Span 2-3:  interest => interest-01
Span 17-18:  justify => justify-01
Span 19-20:  others => other
Span 11-12:  public => public
Span 36-37:  speech => speech
Span 22-23:  subject => subject

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),speech,speech,false), Span(35,36,List(1),free,free-41,false), Span(30,31,List(2),derived,derive-01,false), Span(29,30,List(3),commonly,common,false), Span(27,28,List(4),and,and,false), Span(26,27,List(5),duties,duty,false), Span(25,26,List(6),extensive,extensive,false), Span(22,23,List(7),subject,subject,false), Span(19,20,List(8),others,other,false), Span(18,19,List(9),holding,hold-01,false), Span(17,18,List(10),justify,justify-01,false), Span(15,16,List(12, 11),insufficient,(suffice-01 :polarity -),false), Span(14,15,List(13),deemed,deem-01,false), Span(12,13,List(14),interest,interest-01,false), Span(11,12,List(15),public,public,false), Span(8,9,List(16),contribution,contribute-01,false), Span(5,6,List(17),independently,independent,false), Span(4,5,List(18),conceived,conceive-01,false), Span(2,3,List(19),interest,interest-01,false)),Map(2 -> derive-01, 5 -> duty, 12 -> -, 15 -> public, 8 -> other, 18 -> conceive-01, 7 -> subject, 17 -> independent, 1 -> free-41, 4 -> and, 11 -> suffice-01, 14 -> interest-01, 6 -> extensive, 0 -> speech, 9 -> hold-01, 16 -> contribute-01, 19 -> interest-01, 3 -> common, 10 -> justify-01, 13 -> deem-01),Map(e -> extensive, h -> hold-01, s2 -> subject, d3 -> deem-01, j -> justify-01, s -> speech, d -> derive-01, i3 -> interest-01, p -> public, c3 -> conceive-01, a -> and, d2 -> duty, i2 -> independent, i -> interest-01, c -> common, s3 -> suffice-01, f -> free-41, o -> other, c2 -> contribute-01))),[Ljava.lang.String;@3fcd000a,Annotation([Ljava.lang.String;@2bbdb13f,[Ljava.lang.String;@32bfb588,[Ljava.lang.String;@48270dbf),Annotation([Ljava.lang.String;@7bf79b9a,[Ljava.lang.String;@3d08db0b,[Ledu.cmu.lti.nlp.amr.Dependency;@1064ce7b),Annotation([Ljava.lang.String;@4a2ff5a5,[Ljava.lang.String;@12a849b0,[Ljava.lang.String;@667dcb61),Annotation([Ljava.lang.String;@4cb381d8,[Ljava.lang.String;@1d11b33f,[Ledu.cmu.lti.nlp.amr.Entity;@750efc01))
AMR:
(a / and, op, d / derive-01)
(a / and, op, d2 / duty)
(c2 / contribute-01, ARG1, i / interest-01)
(c3 / conceive-01, ARG1, i3 / interest-01)
(d / derive-01, ARG2, s / speech)
(d / derive-01, mod, c / common)
(d2 / duty, mod, e / extensive)
(d3 / deem-01, ARG1, i3 / interest-01)
(d3 / deem-01, ARG2, j / justify-01)
(f / free-41, ARG1, s / speech)
(h / hold-01, ARG1, o / other)
(i / interest-01, ARG1, p / public)
(i3 / interest-01, ARG1, i / interest-01)
(j / justify-01, ARG1, h / hold-01)
(s2 / subject, domain, o / other)
(s2 / subject, prep-to, d2 / duty)
(s3 / suffice-01, ARG0, i2 / independent)
(s3 / suffice-01, ARG1, j / justify-01)
(s3 / suffice-01, polarity, -)

Decoded in 414,494 microseconds
Sentence: one of the amendments would tax a foreign investor on gains derived from the sale of shares in a us company in which the investor owned 10 per cent or more of the outstanding shares

Spans:
Span 26-27:  10 => 10
Span 3-4:  amendments => amend-01
Span 28-29:  cent => (monetary-quantity :unit cent)
Span 20-21:  company => company
Span 11-12:  derived => derive-01
Span 7-8:  foreign => foreign
Span 24-25:  investor => (person :ARG0-of invest-01)
Span 8-9:  investor => (person :ARG0-of invest-01)
Span 29-30:  or => or
Span 33-34:  outstanding => outstanding
Span 25-26:  owned => own-01
Span 34-35:  shares => share
Span 16-17:  shares => share
Span 5-6:  tax => tax-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),shares,share,false), Span(33,34,List(1),outstanding,outstanding,false), Span(29,30,List(2),or,or,false), Span(28,29,List(4, 3),cent,(monetary-quantity :unit cent),false), Span(26,27,List(5),10,10,false), Span(25,26,List(6),owned,own-01,false), Span(24,25,List(8, 7),investor,(person :ARG0-of invest-01),false), Span(20,21,List(9),company,company,false), Span(16,17,List(10),shares,share,false), Span(11,12,List(11),derived,derive-01,false), Span(8,9,List(13, 12),investor,(person :ARG0-of invest-01),false), Span(7,8,List(14),foreign,foreign,false), Span(5,6,List(15),tax,tax-01,false), Span(3,4,List(16),amendments,amend-01,false)),Map(2 -> or, 5 -> 10, 12 -> person, 15 -> tax-01, 8 -> invest-01, 7 -> person, 1 -> outstanding, 4 -> cent, 11 -> derive-01, 14 -> foreign, 6 -> own-01, 0 -> share, 9 -> company, 16 -> amend-01, 3 -> monetary-quantity, 10 -> share, 13 -> invest-01),Map(s2 -> share, t -> tax-01, o3 -> own-01, p2 -> person, s -> share, m -> monetary-quantity, d -> derive-01, 1 -> 10, p -> person, a -> amend-01, o2 -> or, i2 -> invest-01, i -> invest-01, c -> cent, f -> foreign, o -> outstanding, c2 -> company))),[Ljava.lang.String;@2ac2e1b1,Annotation([Ljava.lang.String;@606f4165,[Ljava.lang.String;@282e7f59,[Ljava.lang.String;@4aac0ab),Annotation([Ljava.lang.String;@664f1cf1,[Ljava.lang.String;@53f546b0,[Ledu.cmu.lti.nlp.amr.Dependency;@bf3f7e0),Annotation([Ljava.lang.String;@3e169941,[Ljava.lang.String;@3da79a3f,[Ljava.lang.String;@467fbdb8),Annotation([Ljava.lang.String;@6c809f30,[Ljava.lang.String;@70533ff6,[Ledu.cmu.lti.nlp.amr.Entity;@698c6916))
AMR:
(a / amend-01, ARG1, o3 / own-01)
(c2 / company, op, o3 / own-01)
(d / derive-01, ARG1, o / outstanding)
(d / derive-01, ARG2, s2 / share)
(i / invest-01, ARG0, p / person)
(i2 / invest-01, ARG0, p2 / person)
(i2 / invest-01, ARG1, d / derive-01)
(m / monetary-quantity, unit, c / cent)
(o2 / or, op, m / monetary-quantity)
(o3 / own-01, ARG0, p / person)
(o3 / own-01, ARG1, 1 / 10)
(o3 / own-01, location, m / monetary-quantity)
(p2 / person, mod, f / foreign)
(s / share, mod, o / outstanding)
(t / tax-01, ARG0, a / amend-01)
(t / tax-01, ARG1, p2 / person)

Decoded in 238,982 microseconds
Sentence: the woman standing on the far right of the picture derives from a series of images lautrec painted of prostitutes waiting for their periodic medical exam

Spans:
Span 25-26:  exam => exam
Span 5-6:  far => far
Span 15-16:  images => image
Span 24-25:  medical => medicine
Span 17-18:  painted => paint-03
Span 23-24:  periodic => periodic
Span 9-10:  picture => picture
Span 19-20:  prostitutes => prostitute-01
Span 13-14:  series => series
Span 20-21:  waiting => wait-01
Span 1-2:  woman => woman

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),exam,exam,false), Span(24,25,List(1),medical,medicine,false), Span(23,24,List(2),periodic,periodic,false), Span(20,21,List(3),waiting,wait-01,false), Span(19,20,List(4),prostitutes,prostitute-01,false), Span(17,18,List(5),painted,paint-03,false), Span(15,16,List(6),images,image,false), Span(13,14,List(7),series,series,false), Span(9,10,List(8),picture,picture,false), Span(5,6,List(9),far,far,false), Span(1,2,List(10),woman,woman,false)),Map(2 -> periodic, 5 -> paint-03, 8 -> picture, 7 -> series, 1 -> medicine, 4 -> prostitute-01, 6 -> image, 9 -> far, 0 -> exam, 10 -> woman, 3 -> wait-01),Map(w -> wait-01, e -> exam, p2 -> prostitute-01, s -> series, m -> medicine, p -> periodic, p4 -> picture, w2 -> woman, i -> image, f -> far, p3 -> paint-03))),[Ljava.lang.String;@147597d,Annotation([Ljava.lang.String;@73441e32,[Ljava.lang.String;@7d1a9fbc,[Ljava.lang.String;@5eed2fce),Annotation([Ljava.lang.String;@25ddae12,[Ljava.lang.String;@7ccf3329,[Ledu.cmu.lti.nlp.amr.Dependency;@72808c3),Annotation([Ljava.lang.String;@55573de0,[Ljava.lang.String;@529f68e5,[Ljava.lang.String;@5f9fbcc3),Annotation([Ljava.lang.String;@7021d740,[Ljava.lang.String;@3dbae443,[Ledu.cmu.lti.nlp.amr.Entity;@38e00a5e))
AMR:
(e / exam, mod, m / medicine)
(i / image, quant, s / series)
(p2 / prostitute-01, ARG0, w2 / woman)
(p2 / prostitute-01, ARG1, p4 / picture)
(p2 / prostitute-01, quant, s / series)
(p3 / paint-03, ARG0, p / periodic)
(p3 / paint-03, ARG1, i / image)
(w / wait-01, ARG0, f / far)
(w / wait-01, ARG1, p2 / prostitute-01)
(w / wait-01, ARG2, e / exam)

Decoded in 146,012 microseconds
Sentence: thus according to bacon  that wisdom which we have derived principally from the greeks is but like the boyhood of knowledge and has the characteristic property of boys it can talk but it cannot generate for it is fruitful of controversies but barren of works

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = thus according to bacon  that wisdom which we have derived principally from the greeks is but like the boyhood of knowledge and has the characteristic property of boys it can talk but it cannot generate for it is fruitful of controversies but barren of works
myTokenized = thus according to bacon that wisdom which we have derived principally from the greeks is but like the boyhood of knowledge and has the characteristic property of boys it can talk but it cannot generate for it is fruitful of controversies but barren of works
i = 4
prefix = List(thus, according, to, bacon, that)
regexr = \Qt\E ?\Qh\E ?\Qu\E ?\Qs\E ?\Qa\E ?\Qc\E ?\Qc\E ?\Qo\E ?\Qr\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qt\E ?\Qo\E ?\Qb\E ?\Qa\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the tops of the keewenaw lavas are all reddened and oxidized a fairly  common condition for basalts and it has been suggested that oxygen  derived from iron oxides in the basalt combined with the sulphur from earlier copper sulphide minerals effectively reducing them to native  copper

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = the tops of the keewenaw lavas are all reddened and oxidized a fairly  common condition for basalts and it has been suggested that oxygen  derived from iron oxides in the basalt combined with the sulphur from earlier copper sulphide minerals effectively reducing them to native  copper
myTokenized = the tops of the keewenaw lavas are all reddened and oxidized a fairly common condition for basalts and it has been suggested that oxygen derived from iron oxides in the basalt combined with the sulphur from earlier copper sulphide minerals effectively reducing them to native copper
i = 13
prefix = List(the, tops, of, the, keewenaw, lavas, are, all, reddened, and, oxidized, a, fairly, common)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qp\E ?\Qs\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qk\E ?\Qe\E ?\Qe\E ?\Qw\E ?\Qe\E ?\Qn\E ?\Qa\E ?\Qw\E ?\Ql\E ?\Qa\E ?\Qv\E ?\Qa\E ?\Qs\E ?\Qa\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qr\E ?\Qe\E ?\Qd\E ?\Qd\E ?\Qe\E ?\Qn\E ?\Qe\E ?\Qd\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qo\E ?\Qx\E ?\Qi\E ?\Qd\E ?\Qi\E ?\Qz\E ?\Qe\E ?\Qd\E ?\Qa\E ?\Qf\E ?\Qa\E ?\Qi\E ?\Qr\E ?\Ql\E ?\Qy\E ?\Qc\E ?\Qo\E ?\Qm\E ?\Qm\E ?\Qo\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: it is the depiction of men and women as creatures of their context their sensations ultimately derived from the involuntary conditions of circumstance their transcendence denied

Spans:
Span 6-7:  and => and
Span 22-23:  circumstance => circumstance
Span 20-21:  conditions => condition
Span 12-13:  context => context
Span 25-26:  denied => deny-01
Span 16-17:  derived => derive-01
Span 19-20:  involuntary => (volunteer-01 :polarity -)
Span 0-1:  it => it
Span 5-6:  men => man
Span 14-15:  sensations => sensation
Span 15-16:  ultimately => ultimate
Span 7-8:  women => woman

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),denied,deny-01,false), Span(22,23,List(1),circumstance,circumstance,false), Span(20,21,List(2),conditions,condition,false), Span(19,20,List(4, 3),involuntary,(volunteer-01 :polarity -),false), Span(16,17,List(5),derived,derive-01,false), Span(15,16,List(6),ultimately,ultimate,false), Span(14,15,List(7),sensations,sensation,false), Span(12,13,List(8),context,context,false), Span(7,8,List(9),women,woman,false), Span(6,7,List(10),and,and,false), Span(5,6,List(11),men,man,false), Span(0,1,List(12),it,it,false)),Map(2 -> condition, 5 -> derive-01, 12 -> it, 8 -> context, 7 -> sensation, 1 -> circumstance, 4 -> -, 11 -> man, 6 -> ultimate, 0 -> deny-01, 9 -> woman, 3 -> volunteer-01, 10 -> and),Map(w -> woman, s -> sensation, m -> man, v -> volunteer-01, d -> deny-01, a -> and, c3 -> context, d2 -> derive-01, i -> it, u -> ultimate, c -> circumstance, c2 -> condition))),[Ljava.lang.String;@fca1255,Annotation([Ljava.lang.String;@1b79928c,[Ljava.lang.String;@4a84336b,[Ljava.lang.String;@2d4bdc05),Annotation([Ljava.lang.String;@4f59e37e,[Ljava.lang.String;@16668de5,[Ledu.cmu.lti.nlp.amr.Dependency;@26edc0e0),Annotation([Ljava.lang.String;@4311c617,[Ljava.lang.String;@43e43267,[Ljava.lang.String;@3aa92b03),Annotation([Ljava.lang.String;@3846f00b,[Ljava.lang.String;@39397f0a,[Ledu.cmu.lti.nlp.amr.Entity;@6dc386df))
AMR:
(a / and, op, m / man)
(a / and, op, w / woman)
(c2 / condition, mod, v / volunteer-01)
(d / deny-01, ARG0, s / sensation)
(d / deny-01, ARG1, c / circumstance)
(d2 / derive-01, ARG1, s / sensation)
(d2 / derive-01, ARG2, c2 / condition)
(d2 / derive-01, time, u / ultimate)
(m / man, domain, i / it)
(v / volunteer-01, ARG0, a / and)
(v / volunteer-01, polarity, -)
(w / woman, part, c3 / context)

Decoded in 177,578 microseconds
Sentence: though different in detail these ideas are similar in that they both derive from the clocks observable characteristics and behaviour

Spans:
Span 18-19:  and => and
Span 19-20:  behaviour => behave-01
Span 11-12:  both => both
Span 17-18:  characteristics => (thing :ARG2-of characteristic-41)
Span 12-13:  derive => derive-01
Span 3-4:  detail => detail-01
Span 1-2:  different => differ-02
Span 5-6:  ideas => idea
Span 10-11:  they => they

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),behaviour,behave-01,false), Span(18,19,List(1),and,and,false), Span(17,18,List(3, 2),characteristics,(thing :ARG2-of characteristic-41),false), Span(12,13,List(4),derive,derive-01,false), Span(11,12,List(5),both,both,false), Span(10,11,List(6),they,they,false), Span(5,6,List(7),ideas,idea,false), Span(3,4,List(8),detail,detail-01,false), Span(1,2,List(9),different,differ-02,false)),Map(2 -> thing, 5 -> both, 8 -> detail-01, 7 -> idea, 1 -> and, 4 -> derive-01, 6 -> they, 9 -> differ-02, 0 -> behave-01, 3 -> characteristic-41),Map(t -> thing, b -> behave-01, d3 -> differ-02, b2 -> both, d -> derive-01, a -> and, d2 -> detail-01, t2 -> they, i -> idea, c -> characteristic-41))),[Ljava.lang.String;@3fcbd2c5,Annotation([Ljava.lang.String;@5e7aa43b,[Ljava.lang.String;@45b44df2,[Ljava.lang.String;@40696e9e),Annotation([Ljava.lang.String;@49dd681b,[Ljava.lang.String;@66ddea7f,[Ledu.cmu.lti.nlp.amr.Dependency;@734e6c9b),Annotation([Ljava.lang.String;@21bc6f41,[Ljava.lang.String;@5a2c25b4,[Ljava.lang.String;@85f7aac),Annotation([Ljava.lang.String;@346eb67f,[Ljava.lang.String;@508f66bd,[Ledu.cmu.lti.nlp.amr.Entity;@76a22b9c))
AMR:
(a / and, op, b / behave-01)
(a / and, op, d / derive-01)
(b / behave-01, ARG1, d3 / differ-02)
(c / characteristic-41, ARG2, t / thing)
(d / derive-01, ARG0, t2 / they)
(d / derive-01, ARG2, t / thing)
(d3 / differ-02, ARG1, i / idea)
(d3 / differ-02, ARG2, d2 / detail-01)
(t2 / they, mod, b2 / both)

Decoded in 82,507 microseconds
Sentence: set on the last day of the war and the first day of the peace the story derives much of its power from the tension between intense polishness and impassioned scepticism about the national tradition of romantic heroism

Spans:
Span 28-29:  and => and
Span 8-9:  and => and
Span 25-26:  between => between
Span 11-12:  day => day
Span 4-5:  day => day
Span 26-27:  intense => intense
Span 3-4:  last => last
Span 18-19:  much => much
Span 33-34:  national => nation
Span 14-15:  peace => peace
Span 21-22:  power => power
Span 36-37:  romantic => romantic
Span 16-17:  story => story
Span 24-25:  tension => tension
Span 34-35:  tradition => tradition
Span 7-8:  war => war

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),romantic,romantic,false), Span(34,35,List(1),tradition,tradition,false), Span(33,34,List(2),national,nation,false), Span(28,29,List(3),and,and,false), Span(26,27,List(4),intense,intense,false), Span(25,26,List(5),between,between,false), Span(24,25,List(6),tension,tension,false), Span(21,22,List(7),power,power,false), Span(18,19,List(8),much,much,false), Span(16,17,List(9),story,story,false), Span(14,15,List(10),peace,peace,false), Span(11,12,List(11),day,day,false), Span(8,9,List(12),and,and,false), Span(7,8,List(13),war,war,false), Span(4,5,List(14),day,day,false), Span(3,4,List(15),last,last,false)),Map(2 -> nation, 5 -> between, 12 -> and, 15 -> last, 8 -> much, 7 -> power, 1 -> tradition, 4 -> intense, 11 -> day, 14 -> day, 6 -> tension, 0 -> romantic, 9 -> story, 3 -> and, 10 -> peace, 13 -> war),Map(w -> war, n -> nation, t -> tradition, b -> between, p2 -> peace, s -> story, m -> much, d -> day, p -> power, a -> and, d2 -> day, t2 -> tension, r -> romantic, i -> intense, a2 -> and, l -> last))),[Ljava.lang.String;@10dd4b9d,Annotation([Ljava.lang.String;@308f3911,[Ljava.lang.String;@aeba3ff,[Ljava.lang.String;@745bbff2),Annotation([Ljava.lang.String;@3396e48c,[Ljava.lang.String;@7776bdc9,[Ledu.cmu.lti.nlp.amr.Dependency;@14a61465),Annotation([Ljava.lang.String;@2384fd7a,[Ljava.lang.String;@701d66cd,[Ljava.lang.String;@1a48563c),Annotation([Ljava.lang.String;@3158a9f,[Ljava.lang.String;@7b3fce4d,[Ledu.cmu.lti.nlp.amr.Entity;@1a016072))
AMR:
(a / and, op, i / intense)
(a / and, op, p2 / peace)
(a / and, poss, t / tradition)
(a2 / and, op, d / day)
(a2 / and, op, d2 / day)
(a2 / and, op, l / last)
(b / between, op, a / and)
(p / power, example, a / and)
(p / power, part, m / much)
(p / power, poss, s / story)
(p2 / peace, part, d / day)
(r / romantic, poss, p2 / peace)
(t / tradition, mod, n / nation)
(t2 / tension, mod, b / between)
(w / war, time, d2 / day)

Decoded in 120,315 microseconds
Sentence: few arsenal players will derive much pleasure from pondering their performances but if anyone is waking up at night screaming it will be niall quinn

Spans:
Span 13-14:  anyone => anyone
Span 1-2:  arsenal => arsenal
Span 11-12:  but => contrast-01
Span 4-5:  derive => derive-01
Span 0-1:  few => few
Span 20-21:  it => it
Span 5-6:  much => much
Span 18-19:  night => night
Span 10-11:  performances => perform-01
Span 2-3:  players => (person :ARG0-of play-01)
Span 6-7:  pleasure => pleasure
Span 19-20:  screaming => scream-01
Span 15-16:  waking => wake-02

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),it,it,false), Span(19,20,List(1),screaming,scream-01,false), Span(18,19,List(2),night,night,false), Span(15,16,List(3),waking,wake-02,false), Span(13,14,List(4),anyone,anyone,false), Span(11,12,List(5),but,contrast-01,false), Span(10,11,List(6),performances,perform-01,false), Span(6,7,List(7),pleasure,pleasure,false), Span(5,6,List(8),much,much,false), Span(4,5,List(9),derive,derive-01,false), Span(2,3,List(11, 10),players,(person :ARG0-of play-01),false), Span(1,2,List(12),arsenal,arsenal,false), Span(0,1,List(13),few,few,false)),Map(2 -> night, 5 -> contrast-01, 12 -> arsenal, 8 -> much, 7 -> pleasure, 1 -> scream-01, 4 -> anyone, 11 -> play-01, 6 -> perform-01, 0 -> it, 9 -> derive-01, 3 -> wake-02, 10 -> person, 13 -> few),Map(n -> night, w -> wake-02, p2 -> pleasure, s -> scream-01, m -> much, d -> derive-01, p -> perform-01, a -> anyone, p4 -> play-01, i -> it, a2 -> arsenal, c -> contrast-01, f -> few, p3 -> person))),[Ljava.lang.String;@5062e9b4,Annotation([Ljava.lang.String;@ddd51a7,[Ljava.lang.String;@3d1bb20d,[Ljava.lang.String;@654692d2),Annotation([Ljava.lang.String;@7c514cef,[Ljava.lang.String;@3d921eac,[Ledu.cmu.lti.nlp.amr.Dependency;@441bcdc8),Annotation([Ljava.lang.String;@7d632866,[Ljava.lang.String;@78f180d9,[Ljava.lang.String;@37426497),Annotation([Ljava.lang.String;@67da11d8,[Ljava.lang.String;@1dc9b12c,[Ledu.cmu.lti.nlp.amr.Entity;@248ecefb))
AMR:
(c / contrast-01, ARG1, d / derive-01)
(c / contrast-01, ARG2, w / wake-02)
(d / derive-01, ARG0, p3 / person)
(d / derive-01, ARG1, p2 / pleasure)
(p / perform-01, ARG0, p3 / person)
(p2 / pleasure, quant, m / much)
(p3 / person, quant, f / few)
(p4 / play-01, ARG0, p3 / person)
(p4 / play-01, ARG1, a2 / arsenal)
(s / scream-01, ARG0, a / anyone)
(w / wake-02, ARG0, a / anyone)
(w / wake-02, ARG1, i / it)
(w / wake-02, time, n / night)

Decoded in 217,220 microseconds
Sentence: the standard for dryers for example is 243 thousand which is derived by aggregating the standard inventory level for each of the individual dryer skus

Spans:
Span 11-12:  derived => derive-01
Span 3-4:  dryers => dryer
Span 19-20:  each => each
Span 5-6:  example => example
Span 22-23:  individual => individual
Span 16-17:  inventory => inventory
Span 17-18:  level => level
Span 15-16:  standard => standard
Span 1-2:  standard => standard

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),individual,individual,false), Span(19,20,List(1),each,each,false), Span(17,18,List(2),level,level,false), Span(16,17,List(3),inventory,inventory,false), Span(15,16,List(4),standard,standard,false), Span(11,12,List(5),derived,derive-01,false), Span(5,6,List(6),example,example,false), Span(3,4,List(7),dryers,dryer,false), Span(1,2,List(8),standard,standard,false)),Map(2 -> level, 5 -> derive-01, 8 -> standard, 7 -> dryer, 1 -> each, 4 -> standard, 6 -> example, 0 -> individual, 3 -> inventory),Map(e -> each, s2 -> standard, e2 -> example, s -> standard, d -> derive-01, d2 -> dryer, i2 -> inventory, i -> individual, l -> level))),[Ljava.lang.String;@1bb6d37d,Annotation([Ljava.lang.String;@7ff6c1c1,[Ljava.lang.String;@212aa789,[Ljava.lang.String;@775d2461),Annotation([Ljava.lang.String;@3ff9980,[Ljava.lang.String;@1b6a48d,[Ledu.cmu.lti.nlp.amr.Dependency;@7ded25db),Annotation([Ljava.lang.String;@5c508d73,[Ljava.lang.String;@2c76a85e,[Ljava.lang.String;@2227ca20),Annotation([Ljava.lang.String;@62470c64,[Ljava.lang.String;@267eaba4,[Ledu.cmu.lti.nlp.amr.Entity;@4636afba))
AMR:
(d / derive-01, ARG0, d2 / dryer)
(d / derive-01, ARG1, e / each)
(d / derive-01, ARG2, i2 / inventory)
(d2 / dryer, mod, e2 / example)
(l / level, mod, i2 / inventory)
(l / level, mod, s / standard)
(s2 / standard, poss, i / individual)
(s2 / standard, topic, d2 / dryer)

Decoded in 62,255 microseconds
Sentence: from dutch historian gustav renier i derived the formulation that history is a social necessity in face of government philistinism and the fantasies of cultural theory this i believe is the bedrock upon which claims for a proper respect for historical study should be founded

Spans:
Span 20-21:  and => and
Span 28-29:  believe => believe-01
Span 34-35:  claims => claim-01
Span 24-25:  cultural => culture
Span 6-7:  derived => derive-01
Span 16-17:  face => face-01
Span 22-23:  fantasies => fantasy
Span 44-45:  founded => found-01
Span 40-41:  historical => history
Span 10-11:  history => history
Span 27-28:  i => i
Span 5-6:  i => i
Span 37-38:  proper => proper
Span 38-39:  respect => respect-01
Span 42-43:  should => recommend-01
Span 13-14:  social => society
Span 41-42:  study => study-01
Span 25-26:  theory => theory
Span 26-27:  this => this

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),founded,found-01,false), Span(42,43,List(1),should,recommend-01,false), Span(41,42,List(2),study,study-01,false), Span(40,41,List(3),historical,history,false), Span(38,39,List(4),respect,respect-01,false), Span(37,38,List(5),proper,proper,false), Span(34,35,List(6),claims,claim-01,false), Span(28,29,List(7),believe,believe-01,false), Span(27,28,List(8),i,i,false), Span(26,27,List(9),this,this,false), Span(25,26,List(10),theory,theory,false), Span(24,25,List(11),cultural,culture,false), Span(22,23,List(12),fantasies,fantasy,false), Span(20,21,List(13),and,and,false), Span(16,17,List(14),face,face-01,false), Span(13,14,List(15),social,society,false), Span(10,11,List(16),history,history,false), Span(6,7,List(17),derived,derive-01,false), Span(5,6,List(18),i,i,false)),Map(2 -> study-01, 5 -> proper, 12 -> fantasy, 15 -> society, 8 -> i, 18 -> i, 7 -> believe-01, 17 -> derive-01, 1 -> recommend-01, 4 -> respect-01, 11 -> culture, 14 -> face-01, 6 -> claim-01, 0 -> found-01, 9 -> this, 16 -> history, 3 -> history, 10 -> theory, 13 -> and),Map(h -> history, h2 -> history, s2 -> society, b -> believe-01, t -> this, s -> study-01, d -> derive-01, r2 -> respect-01, p -> proper, a -> and, f3 -> face-01, i2 -> i, t2 -> theory, r -> recommend-01, i -> i, c -> claim-01, f2 -> fantasy, f -> found-01, c2 -> culture))),[Ljava.lang.String;@c03ebd4,Annotation([Ljava.lang.String;@556fb175,[Ljava.lang.String;@17eba425,[Ljava.lang.String;@6f658567),Annotation([Ljava.lang.String;@72196653,[Ljava.lang.String;@618d0daa,[Ledu.cmu.lti.nlp.amr.Dependency;@737c45ee),Annotation([Ljava.lang.String;@63d3477d,[Ljava.lang.String;@43fa92be,[Ljava.lang.String;@77b81acf),Annotation([Ljava.lang.String;@57e84970,[Ljava.lang.String;@532d8526,[Ledu.cmu.lti.nlp.amr.Entity;@5180ac73))
AMR:
(a / and, op, f2 / fantasy)
(a / and, op, r / recommend-01)
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, t / this)
(c / claim-01, ARG0, s2 / society)
(c / claim-01, ARG1, r2 / respect-01)
(d / derive-01, ARG0, i / i)
(d / derive-01, ARG1, i2 / i)
(f / found-01, ARG1, c / claim-01)
(f3 / face-01, ARG0, h2 / history)
(f3 / face-01, ARG1, a / and)
(r / recommend-01, ARG1, f / found-01)
(r2 / respect-01, ARG0, i / i)
(r2 / respect-01, ARG1, s / study-01)
(r2 / respect-01, mod, p / proper)
(s / study-01, mod, h / history)
(t2 / theory, mod, f2 / fantasy)
(t2 / theory, topic, c2 / culture)

Decoded in 696,360 microseconds
Sentence: some rights derive from others

Spans:
Span 2-3:  derive => derive-01
Span 4-5:  others => other
Span 1-2:  rights => right
Span 0-1:  some => some

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),others,other,false), Span(2,3,List(1),derive,derive-01,false), Span(1,2,List(2),rights,right,false), Span(0,1,List(3),some,some,false)),Map(2 -> right, 1 -> derive-01, 0 -> other, 3 -> some),Map(s -> some, d -> derive-01, r -> right, o -> other))),[Ljava.lang.String;@56b9dbd2,Annotation([Ljava.lang.String;@440ee479,[Ljava.lang.String;@2db9e6d7,[Ljava.lang.String;@7e244b5),Annotation([Ljava.lang.String;@180ccb1e,[Ljava.lang.String;@6feb2ae7,[Ledu.cmu.lti.nlp.amr.Dependency;@384ddd18),Annotation([Ljava.lang.String;@7fee6f88,[Ljava.lang.String;@7edc8b55,[Ljava.lang.String;@413fba84),Annotation([Ljava.lang.String;@3eee5193,[Ljava.lang.String;@102daa2c,[Ledu.cmu.lti.nlp.amr.Entity;@25ff3700))
AMR:
(d / derive-01, ARG1, r / right)
(d / derive-01, ARG2, o / other)
(r / right, quant, s / some)

Decoded in 8,214 microseconds
Sentence: since it was in the interests of justice that the owner of a stolen confidential file should have a civil remedy against the person who had stolen the file a journalist was required to disclose his source of information which had been derived from the stolen file in order that the owner could bring civil proceedings to recover the file

Spans:
Span 53-54:  bring => bring-01
Span 54-55:  civil => civil
Span 19-20:  civil => civil
Span 14-15:  confidential => confidential
Span 52-53:  could => possible
Span 42-43:  derived => derive-01
Span 34-35:  disclose => disclose-01
Span 59-60:  file => file
Span 46-47:  file => file
Span 28-29:  file => file
Span 15-16:  file => file
Span 38-39:  information => information
Span 5-6:  interests => interest
Span 1-2:  it => it
Span 30-31:  journalist => journalist
Span 7-8:  justice => justice
Span 51-52:  owner => (person :ARG0-of own-01)
Span 10-11:  owner => (person :ARG0-of own-01)
Span 23-24:  person => person
Span 55-56:  proceedings => proceeding
Span 57-58:  recover => recover-02
Span 20-21:  remedy => remedy-01
Span 32-33:  required => require-01
Span 16-17:  should => recommend-01
Span 0-1:  since => since
Span 36-37:  source => source
Span 45-46:  stolen => steal-01
Span 26-27:  stolen => steal-01
Span 13-14:  stolen => steal-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(59,60,List(0),file,file,false), Span(57,58,List(1),recover,recover-02,false), Span(55,56,List(2),proceedings,proceeding,false), Span(54,55,List(3),civil,civil,false), Span(53,54,List(4),bring,bring-01,false), Span(52,53,List(5),could,possible,false), Span(51,52,List(7, 6),owner,(person :ARG0-of own-01),false), Span(46,47,List(8),file,file,false), Span(45,46,List(9),stolen,steal-01,false), Span(42,43,List(10),derived,derive-01,false), Span(38,39,List(11),information,information,false), Span(36,37,List(12),source,source,false), Span(34,35,List(13),disclose,disclose-01,false), Span(32,33,List(14),required,require-01,false), Span(30,31,List(15),journalist,journalist,false), Span(28,29,List(16),file,file,false), Span(26,27,List(17),stolen,steal-01,false), Span(23,24,List(18),person,person,false), Span(20,21,List(19),remedy,remedy-01,false), Span(19,20,List(20),civil,civil,false), Span(16,17,List(21),should,recommend-01,false), Span(15,16,List(22),file,file,false), Span(14,15,List(23),confidential,confidential,false), Span(13,14,List(24),stolen,steal-01,false), Span(10,11,List(26, 25),owner,(person :ARG0-of own-01),false), Span(7,8,List(27),justice,justice,false), Span(5,6,List(28),interests,interest,false), Span(1,2,List(29),it,it,false), Span(0,1,List(30),since,since,false)),Map(30 -> since, 2 -> proceeding, 5 -> possible, 27 -> justice, 12 -> source, 8 -> file, 15 -> journalist, 21 -> recommend-01, 18 -> person, 24 -> steal-01, 7 -> own-01, 1 -> recover-02, 17 -> steal-01, 23 -> confidential, 26 -> own-01, 4 -> bring-01, 11 -> information, 14 -> require-01, 29 -> it, 20 -> civil, 28 -> interest, 6 -> person, 9 -> steal-01, 0 -> file, 22 -> file, 16 -> file, 19 -> remedy-01, 10 -> derive-01, 3 -> civil, 25 -> person, 13 -> disclose-01),Map(s5 -> since, r3 -> remedy-01, p5 -> person, s2 -> source, b -> bring-01, f4 -> file, p2 -> possible, j -> journalist, j2 -> justice, s -> steal-01, s4 -> steal-01, d -> derive-01, i3 -> it, r2 -> require-01, p -> proceeding, c3 -> confidential, p4 -> person, o2 -> own-01, d2 -> disclose-01, f3 -> file, i2 -> interest, i -> information, r -> recover-02, r4 -> recommend-01, c -> civil, s3 -> steal-01, f2 -> file, f -> file, o -> own-01, p3 -> person, c2 -> civil))),[Ljava.lang.String;@26e0696c,Annotation([Ljava.lang.String;@57294564,[Ljava.lang.String;@568ad4f0,[Ljava.lang.String;@34a204f3),Annotation([Ljava.lang.String;@78f30883,[Ljava.lang.String;@1bb40e7e,[Ledu.cmu.lti.nlp.amr.Dependency;@4a238067),Annotation([Ljava.lang.String;@60c31037,[Ljava.lang.String;@265dbc82,[Ljava.lang.String;@54030e7b),Annotation([Ljava.lang.String;@14abd854,[Ljava.lang.String;@1e077d66,[Ledu.cmu.lti.nlp.amr.Entity;@7db9c2f0))
AMR:
(b / bring-01, ARG0, p3 / person)
(b / bring-01, ARG1, p / proceeding)
(b / bring-01, mod, p2 / possible)
(b / bring-01, purpose, r / recover-02)
(d / derive-01, ARG1, i / information)
(d / derive-01, ARG2, f2 / file)
(d2 / disclose-01, ARG0, j / journalist)
(d2 / disclose-01, ARG1, s2 / source)
(d2 / disclose-01, ARG3, i / information)
(f4 / file, mod, c3 / confidential)
(i2 / interest, location, j2 / justice)
(j2 / justice, op, r4 / recommend-01)
(o / own-01, ARG0, p3 / person)
(o2 / own-01, ARG0, p5 / person)
(o2 / own-01, ARG1, f4 / file)
(p / proceeding, mod, c / civil)
(r / recover-02, ARG0, f3 / file)
(r / recover-02, ARG1, f / file)
(r2 / require-01, ARG0, f3 / file)
(r2 / require-01, ARG1, d2 / disclose-01)
(r3 / remedy-01, ARG0, p5 / person)
(r3 / remedy-01, ARG1, p4 / person)
(r3 / remedy-01, mod, c2 / civil)
(r4 / recommend-01, ARG0, i3 / it)
(r4 / recommend-01, ARG1, r3 / remedy-01)
(r4 / recommend-01, time, s5 / since)
(s / steal-01, ARG1, f2 / file)
(s3 / steal-01, ARG0, p4 / person)
(s3 / steal-01, ARG1, f3 / file)
(s4 / steal-01, ARG1, f4 / file)

Decoded in 1,457,519 microseconds
Sentence: reagan felt the need for catchphrases usually showbiz derived lets make it one more for the gipper is a line he said in a biopic of the baseball player george gipp you aint seen nothin yet is the merest amendment of al jolsons standard intro

NER Entity: (person :name (name :op "reagan"))
NER Entity: (country :name (name :op "al"))
Spans:
Span 39-40:  amendment => amend-01
Span 27-28:  baseball => baseball
Span 8-9:  derived => derive-01
Span 1-2:  felt => feel-01
Span 20-21:  he => he
Span 11-12:  it => it
Span 9-10:  lets => let-01
Span 19-20:  line => line
Span 3-4:  need => need-01
Span 21-22:  said => say-01
Span 33-34:  seen => see-01
Span 43-44:  standard => standard
Span 6-7:  usually => usual
Span 35-36:  yet => yet
Span 31-32:  you => you

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),standard,standard,false), Span(39,40,List(1),amendment,amend-01,false), Span(35,36,List(2),yet,yet,false), Span(33,34,List(3),seen,see-01,false), Span(31,32,List(4),you,you,false), Span(27,28,List(5),baseball,baseball,false), Span(21,22,List(6),said,say-01,false), Span(20,21,List(7),he,he,false), Span(19,20,List(8),line,line,false), Span(11,12,List(9),it,it,false), Span(9,10,List(10),lets,let-01,false), Span(8,9,List(11),derived,derive-01,false), Span(6,7,List(12),usually,usual,false), Span(3,4,List(13),need,need-01,false), Span(1,2,List(14),felt,feel-01,false)),Map(2 -> yet, 5 -> baseball, 12 -> usual, 8 -> line, 7 -> he, 1 -> amend-01, 4 -> you, 11 -> derive-01, 14 -> feel-01, 6 -> say-01, 0 -> standard, 9 -> it, 3 -> see-01, 10 -> let-01, 13 -> need-01),Map(n -> need-01, h -> he, s2 -> see-01, b -> baseball, s -> standard, d -> derive-01, y -> yet, a -> amend-01, l2 -> let-01, i -> it, s3 -> say-01, l -> line, u -> usual, f -> feel-01, y2 -> you))),[Ljava.lang.String;@773488c4,Annotation([Ljava.lang.String;@19ff3900,[Ljava.lang.String;@42f73c55,[Ljava.lang.String;@759a12cb),Annotation([Ljava.lang.String;@564809be,[Ljava.lang.String;@1377c533,[Ledu.cmu.lti.nlp.amr.Dependency;@1c33a141),Annotation([Ljava.lang.String;@19fc0de,[Ljava.lang.String;@1f2f2fa7,[Ljava.lang.String;@52e18cef),Annotation([Ljava.lang.String;@55ebc96b,[Ljava.lang.String;@6af4bbde,[Ledu.cmu.lti.nlp.amr.Entity;@695a22ad))
AMR:
(a / amend-01, ARG0, y2 / you)
(d / derive-01, ARG1, l2 / let-01)
(f / feel-01, ARG0, u / usual)
(f / feel-01, ARG1, l2 / let-01)
(f / feel-01, ARG2, n / need-01)
(l2 / let-01, ARG1, i / it)
(n / need-01, ARG0, y2 / you)
(n / need-01, ARG1, b / baseball)
(s / standard, op, s2 / see-01)
(s2 / see-01, ARG0, h / he)
(s3 / say-01, ARG0, h / he)
(s3 / say-01, ARG1, l / line)
(y / yet, op, a / amend-01)
(y / yet, op, s2 / see-01)

Decoded in 668,550 microseconds
Sentence: the right which the promise confers on the promisee does not derive from the right to promise which is a right of the promisor

Spans:
Span 11-12:  derive => derive-01
Span 16-17:  promise => promise-01
Span 4-5:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),promise,promise-01,false), Span(11,12,List(1),derive,derive-01,false), Span(4,5,List(2),promise,promise-01,false)),Map(2 -> promise-01, 1 -> derive-01, 0 -> promise-01),Map(p2 -> promise-01, d -> derive-01, p -> promise-01))),[Ljava.lang.String;@1c9ac1e4,Annotation([Ljava.lang.String;@742f6e67,[Ljava.lang.String;@55f967c8,[Ljava.lang.String;@690ca790),Annotation([Ljava.lang.String;@3dcd14d1,[Ljava.lang.String;@6311c509,[Ledu.cmu.lti.nlp.amr.Dependency;@239f04af),Annotation([Ljava.lang.String;@1cec8f6e,[Ljava.lang.String;@6ebc8d97,[Ljava.lang.String;@1cf3ed4d),Annotation([Ljava.lang.String;@52606914,[Ljava.lang.String;@3792ca4c,[Ledu.cmu.lti.nlp.amr.Entity;@61f6015))
AMR:
(p / promise-01, ARG1, d / derive-01)
(p2 / promise-01, ARG1, p / promise-01)

Decoded in 22,945 microseconds
Sentence: in response to these difficulties a different form of work organisation deriving from the singleplace tradition was developed

Spans:
Span 17-18:  developed => develop-02
Span 6-7:  different => differ-02
Span 4-5:  difficulties => difficulty
Span 7-8:  form => form
Span 10-11:  organisation => organize-01
Span 1-2:  response => respond-01
Span 15-16:  tradition => tradition

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),developed,develop-02,false), Span(15,16,List(1),tradition,tradition,false), Span(10,11,List(2),organisation,organize-01,false), Span(7,8,List(3),form,form,false), Span(6,7,List(4),different,differ-02,false), Span(4,5,List(5),difficulties,difficulty,false), Span(1,2,List(6),response,respond-01,false)),Map(2 -> organize-01, 5 -> difficulty, 1 -> tradition, 4 -> differ-02, 6 -> respond-01, 0 -> develop-02, 3 -> form),Map(t -> tradition, d3 -> difficulty, d -> develop-02, d2 -> differ-02, r -> respond-01, f -> form, o -> organize-01))),[Ljava.lang.String;@75dd05d6,Annotation([Ljava.lang.String;@1aa610e,[Ljava.lang.String;@58c9defc,[Ljava.lang.String;@2d4e9fee),Annotation([Ljava.lang.String;@4e5d97f,[Ljava.lang.String;@e2a235c,[Ledu.cmu.lti.nlp.amr.Dependency;@70777447),Annotation([Ljava.lang.String;@32731b00,[Ljava.lang.String;@22f1b6e0,[Ljava.lang.String;@2b1d3e0c),Annotation([Ljava.lang.String;@cd49bf1,[Ljava.lang.String;@5a49f1cb,[Ledu.cmu.lti.nlp.amr.Entity;@2ca174bc))
AMR:
(d / develop-02, ARG1, o / organize-01)
(d2 / differ-02, ARG0, d3 / difficulty)
(d2 / differ-02, ARG1, f / form)
(f / form, mod, o / organize-01)
(o / organize-01, ARG0, t / tradition)
(r / respond-01, ARG1, d3 / difficulty)

Decoded in 44,011 microseconds
Sentence: the majesty of the law does not derive from pomp but from fear

Spans:
Span 10-11:  but => contrast-01
Span 7-8:  derive => derive-01
Span 12-13:  fear => fear-01
Span 4-5:  law => law

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),fear,fear-01,false), Span(10,11,List(1),but,contrast-01,false), Span(7,8,List(2),derive,derive-01,false), Span(4,5,List(3),law,law,false)),Map(2 -> derive-01, 1 -> contrast-01, 0 -> fear-01, 3 -> law),Map(d -> derive-01, l -> law, c -> contrast-01, f -> fear-01))),[Ljava.lang.String;@1bf6f988,Annotation([Ljava.lang.String;@73785e0f,[Ljava.lang.String;@63676602,[Ljava.lang.String;@195a404a),Annotation([Ljava.lang.String;@7432c746,[Ljava.lang.String;@31b90043,[Ledu.cmu.lti.nlp.amr.Dependency;@68c04835),Annotation([Ljava.lang.String;@27c4c54d,[Ljava.lang.String;@677556a0,[Ljava.lang.String;@488a5770),Annotation([Ljava.lang.String;@72729f44,[Ljava.lang.String;@4336640f,[Ledu.cmu.lti.nlp.amr.Entity;@27e33742))
AMR:
(d / derive-01, ARG1, l / law)
(d / derive-01, ARG2, c / contrast-01)
(f / fear-01, ARG1, d / derive-01)

Decoded in 12,276 microseconds
Sentence: i have argued that the originality and force of nana derives from the way it simultaneously generates two conflicting interpretive networks for male fantasmatic apprehension of female sexuality

Spans:
Span 6-7:  and => and
Span 24-25:  apprehension => apprehension
Span 2-3:  argued => argue-01
Span 18-19:  conflicting => conflict-01
Span 26-27:  female => female
Span 7-8:  force => force
Span 16-17:  generates => generate-01
Span 0-1:  i => i
Span 14-15:  it => it
Span 22-23:  male => male
Span 20-21:  networks => network
Span 27-28:  sexuality => sexuality
Span 15-16:  simultaneously => simultaneous
Span 17-18:  two => 2
Span 13-14:  way => way

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),sexuality,sexuality,false), Span(26,27,List(1),female,female,false), Span(24,25,List(2),apprehension,apprehension,false), Span(22,23,List(3),male,male,false), Span(20,21,List(4),networks,network,false), Span(18,19,List(5),conflicting,conflict-01,false), Span(17,18,List(6),two,2,false), Span(16,17,List(7),generates,generate-01,false), Span(15,16,List(8),simultaneously,simultaneous,false), Span(14,15,List(9),it,it,false), Span(13,14,List(10),way,way,false), Span(7,8,List(11),force,force,false), Span(6,7,List(12),and,and,false), Span(2,3,List(13),argued,argue-01,false), Span(0,1,List(14),i,i,false)),Map(2 -> apprehension, 5 -> conflict-01, 12 -> and, 8 -> simultaneous, 7 -> generate-01, 1 -> female, 4 -> network, 11 -> force, 14 -> i, 6 -> 2, 0 -> sexuality, 9 -> it, 3 -> male, 10 -> way, 13 -> argue-01),Map(n -> network, w -> way, 2 -> 2, s2 -> simultaneous, a3 -> argue-01, s -> sexuality, m -> male, g -> generate-01, a -> apprehension, i2 -> i, i -> it, a2 -> and, c -> conflict-01, f2 -> force, f -> female))),[Ljava.lang.String;@3640e283,Annotation([Ljava.lang.String;@5dd72248,[Ljava.lang.String;@570bd519,[Ljava.lang.String;@49d388f4),Annotation([Ljava.lang.String;@5ec47109,[Ljava.lang.String;@32d9367a,[Ledu.cmu.lti.nlp.amr.Dependency;@52879daa),Annotation([Ljava.lang.String;@45802e3a,[Ljava.lang.String;@625b057b,[Ljava.lang.String;@45c500af),Annotation([Ljava.lang.String;@8b004f2,[Ljava.lang.String;@5c14b052,[Ledu.cmu.lti.nlp.amr.Entity;@524406b8))
AMR:
(a / apprehension, mod, s / sexuality)
(a2 / and, op, a3 / argue-01)
(a2 / and, op, f2 / force)
(a3 / argue-01, ARG0, i2 / i)
(a3 / argue-01, ARG1, g / generate-01)
(c / conflict-01, ARG1, n / network)
(c / conflict-01, quant, 2 / 2)
(g / generate-01, ARG0, i / it)
(g / generate-01, ARG1, n / network)
(g / generate-01, manner, w / way)
(g / generate-01, time, s2 / simultaneous)
(m / male, op, a3 / argue-01)
(n / network, poss, a / apprehension)
(s / sexuality, mod, f / female)

Decoded in 138,931 microseconds
Sentence: in so holding the commissioners clearly regarded the firm as an entity quite separate from the partners whose expenses were being repaid and looked not at all at the immediate purpose of those expenses namely the establishment of personal residences for themselves and their families but solely at the advantages the firm would derive from having those partners residing in their new locations

Spans:
Span 49-50:  advantages => advantage
Span 26-27:  all => all
Span 42-43:  and => and
Span 22-23:  and => and
Span 45-46:  but => contrast-01
Span 5-6:  clearly => clear
Span 4-5:  commissioners => commissioner
Span 53-54:  derive => derive-01
Span 11-12:  entity => entity
Span 36-37:  establishment => establish-01
Span 33-34:  expenses => expend-01
Span 18-19:  expenses => expend-01
Span 44-45:  families => family
Span 51-52:  firm => firm
Span 8-9:  firm => firm
Span 2-3:  holding => hold-01
Span 29-30:  immediate => immediate
Span 62-63:  locations => location
Span 23-24:  looked => look-01
Span 34-35:  namely => (country :name name)
Span 61-62:  new => new
Span 38-39:  personal => personal
Span 30-31:  purpose => purpose
Span 12-13:  quite => quite
Span 6-7:  regarded => regard-01
Span 21-22:  repaid => repay-01
Span 58-59:  residing => reside-01
Span 13-14:  separate => separate
Span 1-2:  so => so
Span 46-47:  solely => sole

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(62,63,List(0),locations,location,false), Span(61,62,List(1),new,new,false), Span(58,59,List(2),residing,reside-01,false), Span(53,54,List(3),derive,derive-01,false), Span(51,52,List(4),firm,firm,false), Span(49,50,List(5),advantages,advantage,false), Span(46,47,List(6),solely,sole,false), Span(45,46,List(7),but,contrast-01,false), Span(44,45,List(8),families,family,false), Span(42,43,List(9),and,and,false), Span(38,39,List(10),personal,personal,false), Span(36,37,List(11),establishment,establish-01,false), Span(34,35,List(13, 12),namely,(country :name name),false), Span(33,34,List(14),expenses,expend-01,false), Span(30,31,List(15),purpose,purpose,false), Span(29,30,List(16),immediate,immediate,false), Span(26,27,List(17),all,all,false), Span(23,24,List(18),looked,look-01,false), Span(22,23,List(19),and,and,false), Span(21,22,List(20),repaid,repay-01,false), Span(18,19,List(21),expenses,expend-01,false), Span(13,14,List(22),separate,separate,false), Span(12,13,List(23),quite,quite,false), Span(11,12,List(24),entity,entity,false), Span(8,9,List(25),firm,firm,false), Span(6,7,List(26),regarded,regard-01,false), Span(5,6,List(27),clearly,clear,false), Span(4,5,List(28),commissioners,commissioner,false), Span(2,3,List(29),holding,hold-01,false), Span(1,2,List(30),so,so,false)),Map(30 -> so, 2 -> reside-01, 5 -> advantage, 27 -> clear, 12 -> country, 8 -> family, 15 -> purpose, 21 -> expend-01, 18 -> look-01, 24 -> entity, 7 -> contrast-01, 1 -> new, 17 -> all, 23 -> quite, 26 -> regard-01, 4 -> firm, 11 -> establish-01, 14 -> expend-01, 29 -> hold-01, 20 -> repay-01, 28 -> commissioner, 6 -> sole, 9 -> and, 0 -> location, 22 -> separate, 16 -> immediate, 19 -> and, 10 -> personal, 3 -> derive-01, 25 -> firm, 13 -> name),Map(e -> establish-01, n -> new, h -> hold-01, r3 -> regard-01, q -> quite, s2 -> separate, e2 -> expend-01, p2 -> purpose, c4 -> commissioner, a3 -> all, s -> sole, d -> derive-01, r2 -> repay-01, p -> personal, c3 -> clear, a -> advantage, e4 -> entity, f3 -> firm, l2 -> look-01, a2 -> and, r -> reside-01, i -> immediate, c -> contrast-01, s3 -> so, f2 -> family, l -> location, f -> firm, e3 -> expend-01, c2 -> country, n2 -> name, a4 -> and))),[Ljava.lang.String;@454ce93e,Annotation([Ljava.lang.String;@3c6508fd,[Ljava.lang.String;@d313905,[Ljava.lang.String;@1a967e07),Annotation([Ljava.lang.String;@e2c0b34,[Ljava.lang.String;@6d938a30,[Ledu.cmu.lti.nlp.amr.Dependency;@71558d83),Annotation([Ljava.lang.String;@27bdcd96,[Ljava.lang.String;@1e04473c,[Ljava.lang.String;@2ae0c389),Annotation([Ljava.lang.String;@a456d5d,[Ljava.lang.String;@540ef9ef,[Ledu.cmu.lti.nlp.amr.Entity;@233ae506))
AMR:
(a2 / and, op, e2 / expend-01)
(a2 / and, op, f2 / family)
(a4 / and, op, e / establish-01)
(a4 / and, op, e2 / expend-01)
(a4 / and, op, l2 / look-01)
(a4 / and, op, r2 / repay-01)
(c / contrast-01, ARG1, l2 / look-01)
(c2 / country, name, n2 / name)
(d / derive-01, ARG0, f / firm)
(d / derive-01, ARG1, a / advantage)
(d / derive-01, condition, c / contrast-01)
(e2 / expend-01, ARG0, c2 / country)
(e2 / expend-01, ARG1, p / personal)
(h / hold-01, ARG0, s2 / separate)
(h / hold-01, ARG1, c4 / commissioner)
(h / hold-01, degree, s3 / so)
(l / location, mod, n / new)
(l2 / look-01, ARG0, s / sole)
(l2 / look-01, ARG1, e3 / expend-01)
(p2 / purpose, mod, e2 / expend-01)
(p2 / purpose, quant, a3 / all)
(p2 / purpose, time, i / immediate)
(r / reside-01, ARG1, l / location)
(r / reside-01, ARG2, e / establish-01)
(r2 / repay-01, ARG0, s2 / separate)
(r3 / regard-01, ARG0, h / hold-01)
(r3 / regard-01, ARG1, f3 / firm)
(r3 / regard-01, ARG2, e4 / entity)
(r3 / regard-01, mod, c3 / clear)
(s2 / separate, degree, q / quite)

Decoded in 1,784,162 microseconds
Sentence: this indicates that the basalts were derived from more  than one primary source rather than from a single common pool of magma  as some earlier speculations had suggested

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = this indicates that the basalts were derived from more  than one primary source rather than from a single common pool of magma  as some earlier speculations had suggested
myTokenized = this indicates that the basalts were derived from more than one primary source rather than from a single common pool of magma as some earlier speculations had suggested
i = 9
prefix = List(this, indicates, that, the, basalts, were, derived, from, more, than)
regexr = \Qt\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qn\E ?\Qd\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qb\E ?\Qa\E ?\Qs\E ?\Qa\E ?\Ql\E ?\Qt\E ?\Qs\E ?\Qw\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qd\E ?\Qf\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qm\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: ought interviewers to be retaliating by demanding new forms of training for themselves  or is there a case for devising new forms of more explicitly adversarial programmes perhaps derived from the model of the courtroom where the normal constraints against tough lines of questioning are relaxed

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = ought interviewers to be retaliating by demanding new forms of training for themselves  or is there a case for devising new forms of more explicitly adversarial programmes perhaps derived from the model of the courtroom where the normal constraints against tough lines of questioning are relaxed
myTokenized = ought interviewers to be retaliating by demanding new forms of training for themselves or is there a case for devising new forms of more explicitly adversarial programmes perhaps derived from the model of the courtroom where the normal constraints against tough lines of questioning are relaxed
i = 13
prefix = List(ought, interviewers, to, be, retaliating, by, demanding, new, forms, of, training, for, themselves, or)
regexr = \Qo\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qv\E ?\Qi\E ?\Qe\E ?\Qw\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qb\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qt\E ?\Qa\E ?\Ql\E ?\Qi\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qb\E ?\Qy\E ?\Qd\E ?\Qe\E ?\Qm\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qn\E ?\Qe\E ?\Qw\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qm\E ?\Qs\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qi\E ?\Qn\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qm\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qv\E ?\Qe\E ?\Qs\E ?\Qo\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: but they begin at the beginning with three works derived from the greeks the first is euripidess dramatised cantata of desolation the trojan women

Spans:
Span 2-3:  begin => begin-01
Span 5-6:  beginning => begin-01
Span 0-1:  but => contrast-01
Span 9-10:  derived => derive-01
Span 1-2:  they => they
Span 7-8:  three => 3
Span 23-24:  women => woman

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),women,woman,false), Span(9,10,List(1),derived,derive-01,false), Span(7,8,List(2),three,3,false), Span(5,6,List(3),beginning,begin-01,false), Span(2,3,List(4),begin,begin-01,false), Span(1,2,List(5),they,they,false), Span(0,1,List(6),but,contrast-01,false)),Map(2 -> 3, 5 -> they, 1 -> derive-01, 4 -> begin-01, 6 -> contrast-01, 0 -> woman, 3 -> begin-01),Map(w -> woman, t -> they, b -> begin-01, b2 -> begin-01, d -> derive-01, c -> contrast-01, 3 -> 3))),[Ljava.lang.String;@b4e3a1,Annotation([Ljava.lang.String;@63cc5f63,[Ljava.lang.String;@7e8a8fc4,[Ljava.lang.String;@3ae4cdc3),Annotation([Ljava.lang.String;@380db6a,[Ljava.lang.String;@c50df2,[Ledu.cmu.lti.nlp.amr.Dependency;@9168b43),Annotation([Ljava.lang.String;@2710e05e,[Ljava.lang.String;@44fa4f5b,[Ljava.lang.String;@d7002be),Annotation([Ljava.lang.String;@34c40ed6,[Ljava.lang.String;@33aa1eaa,[Ledu.cmu.lti.nlp.amr.Entity;@65c34565))
AMR:
(b2 / begin-01, ARG0, t / they)
(b2 / begin-01, ARG1, 3 / 3)
(b2 / begin-01, time, b / begin-01)
(c / contrast-01, ARG1, w / woman)
(c / contrast-01, ARG2, b2 / begin-01)
(d / derive-01, ARG1, b / begin-01)

Decoded in 45,787 microseconds
Sentence: a feature of the timisoara demonstration and of the last major protest against the regime in romanias second largest city of brasov in november 1987 was its spontaneity one derived from the sheer despair of its inhabitants

NER Entity: (country :name (name :op "brasov"))
Spans:
Span 6-7:  and => and
Span 19-20:  city => city
Span 5-6:  demonstration => demonstrate-01
Span 29-30:  derived => derive-01
Span 33-34:  despair => despair-01
Span 1-2:  feature => feature-01
Span 36-37:  inhabitants => inhabit-01
Span 18-19:  largest => (large :degree most)
Span 9-10:  last => last
Span 10-11:  major => major
Span 23-25:  november 1987 => (date-entity :month 11 :year 1987)
Span 11-12:  protest => protest-01
Span 14-15:  regime => regime
Span 32-33:  sheer => sheer
Span 27-28:  spontaneity => spontaneity

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),inhabitants,inhabit-01,false), Span(33,34,List(1),despair,despair-01,false), Span(32,33,List(2),sheer,sheer,false), Span(29,30,List(3),derived,derive-01,false), Span(27,28,List(4),spontaneity,spontaneity,false), Span(23,25,List(7, 6, 5),november 1987,(date-entity :month 11 :year 1987),false), Span(19,20,List(8),city,city,false), Span(18,19,List(10, 9),largest,(large :degree most),false), Span(14,15,List(11),regime,regime,false), Span(11,12,List(12),protest,protest-01,false), Span(10,11,List(13),major,major,false), Span(9,10,List(14),last,last,false), Span(6,7,List(15),and,and,false), Span(5,6,List(16),demonstration,demonstrate-01,false), Span(1,2,List(17),feature,feature-01,false)),Map(2 -> sheer, 5 -> date-entity, 12 -> protest-01, 15 -> and, 8 -> city, 7 -> 1987, 17 -> feature-01, 1 -> despair-01, 4 -> spontaneity, 11 -> regime, 14 -> last, 6 -> 11, 0 -> inhabit-01, 9 -> large, 16 -> demonstrate-01, 3 -> derive-01, 10 -> most, 13 -> major),Map(s2 -> spontaneity, 12 -> 1987, m2 -> major, d3 -> date-entity, s -> sheer, d -> despair-01, m -> most, 1 -> 11, p -> protest-01, a -> and, d2 -> derive-01, l2 -> last, i -> inhabit-01, r -> regime, c -> city, l -> large, f -> feature-01, d4 -> demonstrate-01))),[Ljava.lang.String;@6a5df015,Annotation([Ljava.lang.String;@3d3d2941,[Ljava.lang.String;@7a5f89cf,[Ljava.lang.String;@1650b3cd),Annotation([Ljava.lang.String;@c4c632d,[Ljava.lang.String;@6b0325a9,[Ledu.cmu.lti.nlp.amr.Dependency;@1b9db122),Annotation([Ljava.lang.String;@dd83d58,[Ljava.lang.String;@6fa36381,[Ljava.lang.String;@4fd9e369),Annotation([Ljava.lang.String;@69e12b73,[Ljava.lang.String;@3debc153,[Ledu.cmu.lti.nlp.amr.Entity;@40e14fe7))
AMR:
(a / and, op, d4 / demonstrate-01)
(a / and, op, r / regime)
(c / city, mod, l / large)
(d / despair-01, ARG1, i / inhabit-01)
(d2 / derive-01, ARG1, d4 / demonstrate-01)
(d2 / derive-01, ARG2, d / despair-01)
(d3 / date-entity, month, 1 / 11)
(d3 / date-entity, year, 12 / 1987)
(d4 / demonstrate-01, ARG1, s2 / spontaneity)
(f / feature-01, ARG0, d3 / date-entity)
(f / feature-01, ARG1, d4 / demonstrate-01)
(l / large, degree, m / most)
(p / protest-01, ARG0, s / sheer)
(p / protest-01, ARG1, r / regime)
(p / protest-01, mod, l2 / last)
(p / protest-01, mod, m2 / major)
(r / regime, location, c / city)

Decoded in 210,479 microseconds
Sentence: in the case of the railway companies it was a belief derived from a number of sources

Spans:
Span 10-11:  belief => believe-01
Span 2-3:  case => case
Span 6-7:  companies => company
Span 11-12:  derived => derive-01
Span 7-8:  it => it
Span 14-15:  number => number
Span 5-6:  railway => railway
Span 16-17:  sources => source

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),sources,source,false), Span(14,15,List(1),number,number,false), Span(11,12,List(2),derived,derive-01,false), Span(10,11,List(3),belief,believe-01,false), Span(7,8,List(4),it,it,false), Span(6,7,List(5),companies,company,false), Span(5,6,List(6),railway,railway,false), Span(2,3,List(7),case,case,false)),Map(2 -> derive-01, 5 -> company, 7 -> case, 1 -> number, 4 -> it, 6 -> railway, 0 -> source, 3 -> believe-01),Map(n -> number, b -> believe-01, s -> source, d -> derive-01, r -> railway, i -> it, c -> company, c2 -> case))),[Ljava.lang.String;@844e7f8,Annotation([Ljava.lang.String;@63d94f05,[Ljava.lang.String;@4fd30479,[Ljava.lang.String;@26cacce0),Annotation([Ljava.lang.String;@4c509a05,[Ljava.lang.String;@3fafe567,[Ledu.cmu.lti.nlp.amr.Dependency;@34fdeddb),Annotation([Ljava.lang.String;@b0ae00b,[Ljava.lang.String;@76faf7d6,[Ljava.lang.String;@56a53fa0),Annotation([Ljava.lang.String;@7af44dd0,[Ljava.lang.String;@3d20d1c0,[Ledu.cmu.lti.nlp.amr.Entity;@35aab39a))
AMR:
(b / believe-01, domain, i / it)
(c / company, mod, r / railway)
(c2 / case, prep-for, c / company)
(d / derive-01, ARG0, c / company)
(d / derive-01, ARG1, b / believe-01)
(d / derive-01, ARG2, s / source)
(s / source, quant, n / number)

Decoded in 141,780 microseconds
Sentence: those who engage in what is inaptly referred to as the sport may well argue that they derive some enjoyment from hunting

Spans:
Span 14-15:  argue => argue-01
Span 17-18:  derive => derive-01
Span 2-3:  engage => engage-01
Span 19-20:  enjoyment => enjoy-01
Span 21-22:  hunting => hunt-01
Span 12-13:  may => (date-entity :month 5)
Span 7-8:  referred => refer-01
Span 18-19:  some => some
Span 11-12:  sport => sport
Span 16-17:  they => they
Span 13-14:  well => well

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),hunting,hunt-01,false), Span(19,20,List(1),enjoyment,enjoy-01,false), Span(18,19,List(2),some,some,false), Span(17,18,List(3),derive,derive-01,false), Span(16,17,List(4),they,they,false), Span(14,15,List(5),argue,argue-01,false), Span(13,14,List(6),well,well,false), Span(12,13,List(8, 7),may,(date-entity :month 5),false), Span(11,12,List(9),sport,sport,false), Span(7,8,List(10),referred,refer-01,false), Span(2,3,List(11),engage,engage-01,false)),Map(2 -> some, 5 -> argue-01, 8 -> 5, 7 -> date-entity, 1 -> enjoy-01, 11 -> engage-01, 4 -> they, 6 -> well, 9 -> sport, 0 -> hunt-01, 10 -> refer-01, 3 -> derive-01),Map(w -> well, e -> enjoy-01, h -> hunt-01, s2 -> sport, 5 -> 5, t -> they, e2 -> engage-01, s -> some, d -> derive-01, a -> argue-01, d2 -> date-entity, r -> refer-01))),[Ljava.lang.String;@59f55efc,Annotation([Ljava.lang.String;@7c2f2087,[Ljava.lang.String;@7a00bec2,[Ljava.lang.String;@46ebf121),Annotation([Ljava.lang.String;@2c23d1e7,[Ljava.lang.String;@63a9ab54,[Ledu.cmu.lti.nlp.amr.Dependency;@182f4aea),Annotation([Ljava.lang.String;@48df550d,[Ljava.lang.String;@3e48eddb,[Ljava.lang.String;@25f7e4cf),Annotation([Ljava.lang.String;@35cee582,[Ljava.lang.String;@223dd567,[Ledu.cmu.lti.nlp.amr.Entity;@9856ec1))
AMR:
(a / argue-01, ARG0, e2 / engage-01)
(a / argue-01, ARG1, d / derive-01)
(a / argue-01, mod, w / well)
(d / derive-01, ARG0, t / they)
(d2 / date-entity, domain, a / argue-01)
(d2 / date-entity, month, 5 / 5)
(e / enjoy-01, ARG0, t / they)
(e / enjoy-01, quant, s / some)
(e2 / engage-01, manner, r / refer-01)
(h / hunt-01, ARG0, t / they)
(r / refer-01, ARG1, s2 / sport)

Decoded in 58,960 microseconds
Sentence: the same cannot be said of tour de france 1990 c4 which spoils a lot of nice views of french countryside by intruding an unaesthetic snake of bicyclists into the picture at all times but the coverage included an interesting item about the caravan publicitaire a procession of cars and vans and novelty vehicles which covers the route ahead of the racers and distributes plastic carrier bags and similar tat to the overexcited populace and derives much publicity and goodwill for the commercial sponsors

NER Entity: (country :name (name :op "france"))
NER Entity: (country :name (name :op "france"))
Spans:
Span 9-10:  1990 => (date-entity :year 1990)
Span 58-59:  ahead => ahead
Span 32-33:  all => all
Span 78-79:  and => and
Span 74-75:  and => and
Span 67-68:  and => and
Span 62-63:  and => and
Span 51-52:  and => and
Span 49-50:  and => and
Span 66-67:  bags => bag
Span 34-35:  but => contrast-01
Span 65-66:  carrier => carrier
Span 48-49:  cars => car
Span 82-83:  commercial => commerce
Span 20-21:  countryside => countryside
Span 36-37:  coverage => cover-03
Span 55-56:  covers => cover-01
Span 8-9:  france => (country :name (name :op "France"))
Span 19-20:  french => (country :name (name :op "France"))
Span 79-80:  goodwill => goodwill
Span 37-38:  included => include-01
Span 39-40:  interesting => interesting
Span 40-41:  item => item
Span 14-15:  lot => lot
Span 76-77:  much => much
Span 16-17:  nice => nice-42
Span 52-53:  novelty => novelty
Span 30-31:  picture => picture
Span 64-65:  plastic => plastic
Span 73-74:  populace => populace
Span 46-47:  procession => procession
Span 77-78:  publicity => publicity
Span 57-58:  route => route
Span 4-5:  said => say-01
Span 1-2:  same => same-41
Span 25-26:  snake => snake
Span 12-13:  spoils => spoil
Span 83-84:  sponsors => sponsor-01
Span 6-7:  tour => tour-01
Span 53-54:  vehicles => vehicle

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(83,84,List(0),sponsors,sponsor-01,false), Span(82,83,List(1),commercial,commerce,false), Span(79,80,List(2),goodwill,goodwill,false), Span(78,79,List(3),and,and,false), Span(77,78,List(4),publicity,publicity,false), Span(76,77,List(5),much,much,false), Span(74,75,List(6),and,and,false), Span(73,74,List(7),populace,populace,false), Span(67,68,List(8),and,and,false), Span(66,67,List(9),bags,bag,false), Span(65,66,List(10),carrier,carrier,false), Span(64,65,List(11),plastic,plastic,false), Span(62,63,List(12),and,and,false), Span(58,59,List(13),ahead,ahead,false), Span(57,58,List(14),route,route,false), Span(55,56,List(15),covers,cover-01,false), Span(53,54,List(16),vehicles,vehicle,false), Span(52,53,List(17),novelty,novelty,false), Span(51,52,List(18),and,and,false), Span(49,50,List(19),and,and,false), Span(48,49,List(20),cars,car,false), Span(46,47,List(21),procession,procession,false), Span(40,41,List(22),item,item,false), Span(39,40,List(23),interesting,interesting,false), Span(37,38,List(24),included,include-01,false), Span(36,37,List(25),coverage,cover-03,false), Span(34,35,List(26),but,contrast-01,false), Span(32,33,List(27),all,all,false), Span(30,31,List(28),picture,picture,false), Span(25,26,List(29),snake,snake,false), Span(20,21,List(30),countryside,countryside,false), Span(19,20,List(33, 32, 31),french,(country :name (name :op "France")),false), Span(16,17,List(34),nice,nice-42,false), Span(14,15,List(35),lot,lot,false), Span(12,13,List(36),spoils,spoil,false), Span(9,10,List(38, 37),1990,(date-entity :year 1990),false), Span(8,9,List(41, 40, 39),france,(country :name (name :op "France")),false), Span(6,7,List(42),tour,tour-01,false), Span(4,5,List(43),said,say-01,false), Span(1,2,List(44),same,same-41,false)),Map(39 -> country, 30 -> countryside, 2 -> goodwill, 5 -> much, 33 -> "France", 27 -> all, 12 -> and, 8 -> and, 15 -> cover-01, 42 -> tour-01, 36 -> spoil, 21 -> procession, 18 -> and, 24 -> include-01, 41 -> "France", 35 -> lot, 7 -> populace, 1 -> commerce, 17 -> novelty, 44 -> same-41, 23 -> interesting, 38 -> 1990, 26 -> contrast-01, 4 -> publicity, 11 -> plastic, 32 -> name, 14 -> route, 29 -> snake, 20 -> car, 34 -> nice-42, 28 -> picture, 6 -> and, 40 -> name, 43 -> say-01, 9 -> bag, 0 -> sponsor-01, 22 -> item, 16 -> vehicle, 37 -> date-entity, 19 -> and, 10 -> carrier, 3 -> and, 31 -> country, 25 -> cover-03, 13 -> ahead),Map(s5 -> same-41, a7 -> and, n -> novelty, c8 -> country, s2 -> snake, p5 -> picture, t -> tour-01, b -> bag, c7 -> countryside, p2 -> populace, n4 -> name, a3 -> and, c4 -> car, s -> sponsor-01, s4 -> say-01, a6 -> and, v -> vehicle, d -> date-entity, m -> much, 1 -> 1990, i3 -> include-01, p -> publicity, g -> goodwill, n3 -> nice-42, a -> and, c3 -> cover-01, p4 -> procession, a5 -> ahead, c6 -> contrast-01, c9 -> country, a8 -> all, i2 -> interesting, a2 -> and, r -> route, i -> item, c -> commerce, s3 -> spoil, l -> lot, p3 -> plastic, n2 -> name, c2 -> carrier, a4 -> and, c5 -> cover-03))),[Ljava.lang.String;@33f1ca93,Annotation([Ljava.lang.String;@472a9389,[Ljava.lang.String;@3c3c2bdf,[Ljava.lang.String;@12645c5e),Annotation([Ljava.lang.String;@7aec28c0,[Ljava.lang.String;@2667944c,[Ledu.cmu.lti.nlp.amr.Dependency;@5a391d46),Annotation([Ljava.lang.String;@5bb10cf0,[Ljava.lang.String;@44c88f97,[Ljava.lang.String;@4b4b25c8),Annotation([Ljava.lang.String;@329d9416,[Ljava.lang.String;@7654a50,[Ledu.cmu.lti.nlp.amr.Entity;@af1cdfb))
AMR:
(a / and, op, g / goodwill)
(a2 / and, op, a / and)
(a2 / and, op, p / publicity)
(a3 / and, op, b / bag)
(a3 / and, op, p2 / populace)
(a4 / and, op, a3 / and)
(a4 / and, op, c3 / cover-01)
(a6 / and, op, c3 / cover-01)
(a6 / and, op, c4 / car)
(a6 / and, op, c6 / contrast-01)
(a6 / and, op, p4 / procession)
(a8 / all, op, c3 / cover-01)
(b / bag, mod, p3 / plastic)
(c2 / carrier, consist, b / bag)
(c3 / cover-01, ARG0, v / vehicle)
(c3 / cover-01, ARG1, r / route)
(c3 / cover-01, time, a5 / ahead)
(c5 / cover-03, ARG0, c8 / country)
(c5 / cover-03, ARG1, l / lot)
(c6 / contrast-01, ARG0, s2 / snake)
(c6 / contrast-01, ARG1, p5 / picture)
(c6 / contrast-01, ARG2, i3 / include-01)
(c7 / countryside, mod, c8 / country)
(c8 / country, name, n2 / name)
(c9 / country, name, n4 / name)
(d / date-entity, year, 1 / 1990)
(g / goodwill, prep-against, p2 / populace)
(i / item, mod, i2 / interesting)
(i3 / include-01, ARG0, i / item)
(i3 / include-01, ARG1, a7 / and)
(i3 / include-01, ARG2, c5 / cover-03)
(n2 / name, op, "France")
(n3 / nice-42, ARG0, c9 / country)
(n3 / nice-42, ARG2, i3 / include-01)
(n4 / name, op, "France")
(p / publicity, quant, m / much)
(s / sponsor-01, ARG0, a / and)
(s / sponsor-01, mod, c / commerce)
(s3 / spoil, op, c6 / contrast-01)
(s4 / say-01, ARG1, a2 / and)
(s4 / say-01, time, t / tour-01)
(s5 / same-41, ARG1, s4 / say-01)
(t / tour-01, time, d / date-entity)
(v / vehicle, mod, n / novelty)

Decoded in 2,086,841 microseconds
Sentence: even though deontological and teleological considerations are distinct they derive from a common moral core

Spans:
Span 3-4:  and => and
Span 12-13:  common => common
Span 5-6:  considerations => consider-01
Span 14-15:  core => core
Span 9-10:  derive => derive-01
Span 7-8:  distinct => distinct
Span 13-14:  moral => moral
Span 8-9:  they => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),core,core,false), Span(13,14,List(1),moral,moral,false), Span(12,13,List(2),common,common,false), Span(9,10,List(3),derive,derive-01,false), Span(8,9,List(4),they,they,false), Span(7,8,List(5),distinct,distinct,false), Span(5,6,List(6),considerations,consider-01,false), Span(3,4,List(7),and,and,false)),Map(2 -> common, 5 -> distinct, 7 -> and, 1 -> moral, 4 -> they, 6 -> consider-01, 0 -> core, 3 -> derive-01),Map(t -> they, d -> derive-01, m -> moral, a -> and, c3 -> consider-01, d2 -> distinct, c -> core, c2 -> common))),[Ljava.lang.String;@240e4cbb,Annotation([Ljava.lang.String;@26cf9b7b,[Ljava.lang.String;@7e8bc25,[Ljava.lang.String;@40982531),Annotation([Ljava.lang.String;@44b1d518,[Ljava.lang.String;@771d3de3,[Ledu.cmu.lti.nlp.amr.Dependency;@20ca3f2d),Annotation([Ljava.lang.String;@3df9b42c,[Ljava.lang.String;@54a3d47d,[Ljava.lang.String;@4fd385f4),Annotation([Ljava.lang.String;@47ff7f1d,[Ljava.lang.String;@56f26dd8,[Ledu.cmu.lti.nlp.amr.Entity;@4609ac80))
AMR:
(c / core, mod, c2 / common)
(c / core, mod, m / moral)
(c3 / consider-01, ARG1, a / and)
(d / derive-01, ARG0, t / they)
(d / derive-01, ARG1, c3 / consider-01)
(d / derive-01, ARG2, c / core)
(d2 / distinct, domain, c3 / consider-01)

Decoded in 55,016 microseconds
Sentence: the declining historical significance of nationalism is today concealed not only by the visible spread of ethnic  linguistic agitations but also by the semantic illusion which derives from the fact that all states are today officially nations though many of them patently have nothing in common with what the term nationstate is commonly held to mean that therefore all movements seeking to win independence think of themselves as establishing nations even when they are patently not doing so and that centralisation and state bureaucracy will if they possibly can put on the fashionable national costume

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = the declining historical significance of nationalism is today concealed not only by the visible spread of ethnic  linguistic agitations but also by the semantic illusion which derives from the fact that all states are today officially nations though many of them patently have nothing in common with what the term nationstate is commonly held to mean that therefore all movements seeking to win independence think of themselves as establishing nations even when they are patently not doing so and that centralisation and state bureaucracy will if they possibly can put on the fashionable national costume
myTokenized = the declining historical significance of nationalism is today concealed not only by the visible spread of ethnic linguistic agitations but also by the semantic illusion which derives from the fact that all states are today officially nations though many of them patently have nothing in common with what the term nationstate is commonly held to mean that therefore all movements seeking to win independence think of themselves as establishing nations even when they are patently not doing so and that centralisation and state bureaucracy will if they possibly can put on the fashionable national costume
i = 17
prefix = List(the, declining, historical, significance, of, nationalism, is, today, concealed, not, only, by, the, visible, spread, of, ethnic, linguistic)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qd\E ?\Qe\E ?\Qc\E ?\Ql\E ?\Qi\E ?\Qn\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Ql\E ?\Qs\E ?\Qi\E ?\Qg\E ?\Qn\E ?\Qi\E ?\Qf\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Qn\E ?\Qc\E ?\Qe\E ?\Qo\E ?\Qf\E ?\Qn\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Ql\E ?\Qi\E ?\Qs\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qd\E ?\Qa\E ?\Qy\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qc\E ?\Qe\E ?\Qa\E ?\Ql\E ?\Qe\E ?\Qd\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qo\E ?\Qn\E ?\Ql\E ?\Qy\E ?\Qb\E ?\Qy\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qv\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qb\E ?\Ql\E ?\Qe\E ?\Qs\E ?\Qp\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qd\E ?\Qo\E ?\Qf\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qn\E ?\Qi\E ?\Qc\E ?\Ql\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qu\E ?\Qi\E ?\Qs\E ?\Qt\E ?\Qi\E ?\Qc\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: from this concept which he proposed 40 years ago much of the current interest in fish oils and vegetable oils has been derived

Spans:
Span 6-7:  40 => 40
Span 17-18:  and => and
Span 2-3:  concept => concept
Span 12-13:  current => current
Span 22-23:  derived => derive-01
Span 15-16:  fish => fish
Span 4-5:  he => he
Span 13-14:  interest => interest-01
Span 9-10:  much => much
Span 5-6:  proposed => propose-01
Span 1-2:  this => this
Span 7-8:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),derived,derive-01,false), Span(17,18,List(1),and,and,false), Span(15,16,List(2),fish,fish,false), Span(13,14,List(3),interest,interest-01,false), Span(12,13,List(4),current,current,false), Span(9,10,List(5),much,much,false), Span(7,8,List(7, 6),years,(temporal-quantity :unit year),false), Span(6,7,List(8),40,40,false), Span(5,6,List(9),proposed,propose-01,false), Span(4,5,List(10),he,he,false), Span(2,3,List(11),concept,concept,false), Span(1,2,List(12),this,this,false)),Map(2 -> fish, 5 -> much, 12 -> this, 8 -> 40, 7 -> year, 1 -> and, 4 -> current, 11 -> concept, 6 -> temporal-quantity, 0 -> derive-01, 9 -> propose-01, 3 -> interest-01, 10 -> he),Map(h -> he, t -> temporal-quantity, d -> derive-01, m -> much, y -> year, p -> propose-01, a -> and, 4 -> 40, t2 -> this, i -> interest-01, c -> current, f -> fish, c2 -> concept))),[Ljava.lang.String;@5c66d27c,Annotation([Ljava.lang.String;@6284fa48,[Ljava.lang.String;@84bbf80,[Ljava.lang.String;@250970c1),Annotation([Ljava.lang.String;@ec9a1e6,[Ljava.lang.String;@57a40a9f,[Ledu.cmu.lti.nlp.amr.Dependency;@52b579ac),Annotation([Ljava.lang.String;@84735a0,[Ljava.lang.String;@7b119f9e,[Ljava.lang.String;@42067d31),Annotation([Ljava.lang.String;@38053dd4,[Ljava.lang.String;@601e4607,[Ledu.cmu.lti.nlp.amr.Entity;@6387a6dd))
AMR:
(c2 / concept, mod, t2 / this)
(d / derive-01, ARG0, h / he)
(d / derive-01, ARG1, t / temporal-quantity)
(f / fish, op, p / propose-01)
(i / interest-01, ARG1, a / and)
(i / interest-01, ARG2, t / temporal-quantity)
(i / interest-01, time, c / current)
(m / much, op, i / interest-01)
(p / propose-01, ARG0, h / he)
(p / propose-01, ARG1, c2 / concept)
(t / temporal-quantity, quant, 4 / 40)
(t / temporal-quantity, unit, y / year)

Decoded in 341,363 microseconds
Sentence: there is the mysterious indian d with customs that may derive from fire worship

Spans:
Span 7-8:  customs => customs
Span 5-6:  d => d
Span 10-11:  derive => derive-01
Span 9-10:  may => (date-entity :month 5)
Span 3-4:  mysterious => mystery
Span 13-14:  worship => worship-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),worship,worship-01,false), Span(10,11,List(1),derive,derive-01,false), Span(9,10,List(3, 2),may,(date-entity :month 5),false), Span(7,8,List(4),customs,customs,false), Span(5,6,List(5),d,d,false), Span(3,4,List(6),mysterious,mystery,false)),Map(2 -> date-entity, 5 -> d, 1 -> derive-01, 4 -> customs, 6 -> mystery, 0 -> worship-01, 3 -> 5),Map(w -> worship-01, 5 -> 5, d3 -> d, m -> mystery, d -> derive-01, d2 -> date-entity, c -> customs))),[Ljava.lang.String;@5edc2a37,Annotation([Ljava.lang.String;@4857b188,[Ljava.lang.String;@75487cd2,[Ljava.lang.String;@69fafb25),Annotation([Ljava.lang.String;@5c7e707e,[Ljava.lang.String;@710b8fa2,[Ledu.cmu.lti.nlp.amr.Dependency;@2e030ea9),Annotation([Ljava.lang.String;@4ab790d8,[Ljava.lang.String;@59867b3a,[Ljava.lang.String;@c044ac1),Annotation([Ljava.lang.String;@6dc7cb10,[Ljava.lang.String;@57e4bfbe,[Ledu.cmu.lti.nlp.amr.Entity;@6ae88006))
AMR:
(d / derive-01, ARG0, d3 / d)
(d / derive-01, ARG1, c / customs)
(d / derive-01, ARG2, w / worship-01)
(d / derive-01, mod, d2 / date-entity)
(d2 / date-entity, month, 5 / 5)
(d3 / d, mod, m / mystery)

Decoded in 23,095 microseconds
Sentence: he was a big man in every sense of that word paternalistic without being condescending and derived as much pleasure if not more from having a game of tabletennis or chatting with the lads as having a convivial social evening outside

Spans:
Span 15-16:  and => and
Span 3-4:  big => big
Span 16-17:  derived => derive-01
Span 39-40:  evening => evening
Span 6-7:  every => every
Span 26-27:  game => game
Span 0-1:  he => he
Span 4-5:  man => man
Span 18-19:  much => much
Span 29-30:  or => or
Span 40-41:  outside => outside
Span 19-20:  pleasure => pleasure
Span 7-8:  sense => sense
Span 38-39:  social => society
Span 10-11:  word => word

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),outside,outside,false), Span(39,40,List(1),evening,evening,false), Span(38,39,List(2),social,society,false), Span(29,30,List(3),or,or,false), Span(26,27,List(4),game,game,false), Span(19,20,List(5),pleasure,pleasure,false), Span(18,19,List(6),much,much,false), Span(16,17,List(7),derived,derive-01,false), Span(15,16,List(8),and,and,false), Span(10,11,List(9),word,word,false), Span(7,8,List(10),sense,sense,false), Span(6,7,List(11),every,every,false), Span(4,5,List(12),man,man,false), Span(3,4,List(13),big,big,false), Span(0,1,List(14),he,he,false)),Map(2 -> society, 5 -> pleasure, 12 -> man, 8 -> and, 7 -> derive-01, 1 -> evening, 4 -> game, 11 -> every, 14 -> he, 6 -> much, 0 -> outside, 9 -> word, 3 -> or, 10 -> sense, 13 -> big),Map(e -> evening, w -> word, h -> he, s2 -> sense, b -> big, m2 -> man, e2 -> every, s -> society, m -> much, d -> derive-01, g -> game, p -> pleasure, a -> and, o2 -> or, o -> outside))),[Ljava.lang.String;@462d40bf,Annotation([Ljava.lang.String;@44f5df97,[Ljava.lang.String;@6a2a55df,[Ljava.lang.String;@16bd9ed),Annotation([Ljava.lang.String;@4fb05755,[Ljava.lang.String;@4235b652,[Ledu.cmu.lti.nlp.amr.Dependency;@5454e373),Annotation([Ljava.lang.String;@1120be46,[Ljava.lang.String;@7cabee72,[Ljava.lang.String;@7bb3be4f),Annotation([Ljava.lang.String;@559373fb,[Ljava.lang.String;@43a38fa1,[Ledu.cmu.lti.nlp.amr.Entity;@272ab5b8))
AMR:
(a / and, op, d / derive-01)
(a / and, op, o2 / or)
(d / derive-01, ARG0, h / he)
(d / derive-01, ARG1, w / word)
(d / derive-01, location, p / pleasure)
(e / evening, location, o / outside)
(e / evening, mod, s / society)
(m2 / man, domain, h / he)
(m2 / man, mod, b / big)
(m2 / man, poss, s2 / sense)
(o2 / or, op, g / game)
(p / pleasure, quant, m / much)
(s / society, op, d / derive-01)
(s2 / sense, domain, e2 / every)

Decoded in 217,430 microseconds
Sentence: his success derives partly from his shrewd understanding that fantasy needs to be built on a solid base of prosaic reality

Spans:
Span 17-18:  base => base
Span 13-14:  built => build-01
Span 9-10:  fantasy => fantasy
Span 10-11:  needs => need-01
Span 3-4:  partly => partly
Span 19-20:  prosaic => prosaic
Span 20-21:  reality => reality
Span 16-17:  solid => solid
Span 1-2:  success => succeed-01
Span 7-8:  understanding => understand-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),reality,reality,false), Span(19,20,List(1),prosaic,prosaic,false), Span(17,18,List(2),base,base,false), Span(16,17,List(3),solid,solid,false), Span(13,14,List(4),built,build-01,false), Span(10,11,List(5),needs,need-01,false), Span(9,10,List(6),fantasy,fantasy,false), Span(7,8,List(7),understanding,understand-01,false), Span(3,4,List(8),partly,partly,false), Span(1,2,List(9),success,succeed-01,false)),Map(2 -> base, 5 -> need-01, 8 -> partly, 7 -> understand-01, 1 -> prosaic, 4 -> build-01, 6 -> fantasy, 9 -> succeed-01, 0 -> reality, 3 -> solid),Map(n -> need-01, s2 -> succeed-01, b -> base, b2 -> build-01, p2 -> partly, s -> solid, p -> prosaic, r -> reality, u -> understand-01, f -> fantasy))),[Ljava.lang.String;@6500571e,Annotation([Ljava.lang.String;@7957a65f,[Ljava.lang.String;@696be535,[Ljava.lang.String;@2a9530a5),Annotation([Ljava.lang.String;@28acb67a,[Ljava.lang.String;@63001872,[Ledu.cmu.lti.nlp.amr.Dependency;@1b451725),Annotation([Ljava.lang.String;@54f28c1f,[Ljava.lang.String;@7fcd72ca,[Ljava.lang.String;@92b6d53),Annotation([Ljava.lang.String;@21668d9,[Ljava.lang.String;@d3d7fa1,[Ledu.cmu.lti.nlp.amr.Entity;@408629d1))
AMR:
(b / base, mod, s / solid)
(b2 / build-01, ARG0, b / base)
(b2 / build-01, ARG1, r / reality)
(n / need-01, ARG0, f / fantasy)
(n / need-01, ARG1, b2 / build-01)
(r / reality, mod, p / prosaic)
(s2 / succeed-01, time, u / understand-01)
(u / understand-01, ARG0, p2 / partly)
(u / understand-01, ARG1, r / reality)

Decoded in 259,210 microseconds
Sentence: is this your concept of the dignity of the profession  cannot you entertain the notion that people and not only academics take pride in what they do derive satisfaction from doing it well

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = is this your concept of the dignity of the profession  cannot you entertain the notion that people and not only academics take pride in what they do derive satisfaction from doing it well
myTokenized = is this your concept of the dignity of the profession cannot you entertain the notion that people and not only academics take pride in what they do derive satisfaction from doing it well
i = 10
prefix = List(is, this, your, concept, of, the, dignity, of, the, profession, cannot)
regexr = \Qi\E ?\Qs\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qc\E ?\Qe\E ?\Qp\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qd\E ?\Qi\E ?\Qg\E ?\Qn\E ?\Qi\E ?\Qt\E ?\Qy\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qf\E ?\Qe\E ?\Qs\E ?\Qs\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qc\E ?\Qa\E ?\Qn\E ?\Qn\E ?\Qo\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: concerning the general foundation of morals whether they be derived from reason or from sentiment

Spans:
Span 0-1:  concerning => concern-02
Span 9-10:  derived => derive-01
Span 3-4:  foundation => foundation
Span 2-3:  general => general
Span 5-6:  morals => moral
Span 12-13:  or => or
Span 11-12:  reason => reason
Span 14-15:  sentiment => sentiment
Span 7-8:  they => they

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),sentiment,sentiment,false), Span(12,13,List(1),or,or,false), Span(11,12,List(2),reason,reason,false), Span(9,10,List(3),derived,derive-01,false), Span(7,8,List(4),they,they,false), Span(5,6,List(5),morals,moral,false), Span(3,4,List(6),foundation,foundation,false), Span(2,3,List(7),general,general,false), Span(0,1,List(8),concerning,concern-02,false)),Map(2 -> reason, 5 -> moral, 8 -> concern-02, 7 -> general, 1 -> or, 4 -> they, 6 -> foundation, 0 -> sentiment, 3 -> derive-01),Map(t -> they, s -> sentiment, m -> moral, d -> derive-01, g -> general, r -> reason, c -> concern-02, f -> foundation, o -> or))),[Ljava.lang.String;@4afa1477,Annotation([Ljava.lang.String;@6855b715,[Ljava.lang.String;@5366f936,[Ljava.lang.String;@d737301),Annotation([Ljava.lang.String;@16834d8d,[Ljava.lang.String;@6586f87,[Ledu.cmu.lti.nlp.amr.Dependency;@18020b52),Annotation([Ljava.lang.String;@2e3540ce,[Ljava.lang.String;@2a31ac15,[Ljava.lang.String;@2318ac57),Annotation([Ljava.lang.String;@28da95c1,[Ljava.lang.String;@269dc6db,[Ledu.cmu.lti.nlp.amr.Entity;@406a67ab))
AMR:
(c / concern-02, ARG1, f / foundation)
(d / derive-01, ARG1, t / they)
(f / foundation, mod, g / general)
(f / foundation, mod, m / moral)
(o / or, op, c / concern-02)
(o / or, op, d / derive-01)
(o / or, op, r / reason)
(o / or, op, s / sentiment)

Decoded in 153,460 microseconds
Sentence: a good part of the difficulty is derived directly from the structure of social and cultural values discussed earlier in this book

Spans:
Span 14-15:  and => and
Span 21-22:  book => book
Span 15-16:  cultural => culture
Span 7-8:  derived => derive-01
Span 5-6:  difficulty => difficult
Span 8-9:  directly => direct
Span 17-18:  discussed => discuss-01
Span 18-19:  earlier => early
Span 1-2:  good => good
Span 13-14:  social => society
Span 11-12:  structure => structure
Span 20-21:  this => this
Span 16-17:  values => value

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),book,book,false), Span(20,21,List(1),this,this,false), Span(18,19,List(2),earlier,early,false), Span(17,18,List(3),discussed,discuss-01,false), Span(16,17,List(4),values,value,false), Span(15,16,List(5),cultural,culture,false), Span(14,15,List(6),and,and,false), Span(13,14,List(7),social,society,false), Span(11,12,List(8),structure,structure,false), Span(8,9,List(9),directly,direct,false), Span(7,8,List(10),derived,derive-01,false), Span(5,6,List(11),difficulty,difficult,false), Span(1,2,List(12),good,good,false)),Map(2 -> early, 5 -> culture, 12 -> good, 8 -> structure, 7 -> society, 1 -> this, 4 -> value, 11 -> difficult, 6 -> and, 0 -> book, 9 -> direct, 3 -> discuss-01, 10 -> derive-01),Map(e -> early, s2 -> structure, b -> book, t -> this, d3 -> derive-01, s -> society, v -> value, d -> discuss-01, g -> good, a -> and, d2 -> direct, c -> culture, d4 -> difficult))),[Ljava.lang.String;@9bc2c97,Annotation([Ljava.lang.String;@2113727f,[Ljava.lang.String;@3c200d0,[Ljava.lang.String;@35c3599d),Annotation([Ljava.lang.String;@2c306dfe,[Ljava.lang.String;@1f85555c,[Ledu.cmu.lti.nlp.amr.Dependency;@6aa71b2e),Annotation([Ljava.lang.String;@e99fb6,[Ljava.lang.String;@69f46631,[Ljava.lang.String;@2c61514f),Annotation([Ljava.lang.String;@2921304c,[Ljava.lang.String;@41e9e2ac,[Ledu.cmu.lti.nlp.amr.Entity;@6220ac02))
AMR:
(a / and, consist, s2 / structure)
(a / and, op, d / discuss-01)
(a / and, op, s / society)
(b / book, mod, e / early)
(b / book, mod, t / this)
(d / discuss-01, ARG0, g / good)
(d / discuss-01, ARG1, v / value)
(d / discuss-01, time, e / early)
(d3 / derive-01, ARG1, d4 / difficult)
(d3 / derive-01, ARG2, v / value)
(d3 / derive-01, manner, d2 / direct)
(v / value, mod, c / culture)

Decoded in 261,405 microseconds
Sentence: from this initiative derived a number of labour colleges in the coalfields industrial cities and especially in south wales and scotland

NER Entity: (country :name (name :op "wales"))
Spans:
Span 19-20:  and => and
Span 14-15:  and => and
Span 13-14:  cities => city
Span 8-9:  colleges => college
Span 3-4:  derived => derive-01
Span 15-16:  especially => especially
Span 12-13:  industrial => industry
Span 2-3:  initiative => initiative
Span 7-8:  labour => labour
Span 5-6:  number => number
Span 20-21:  scotland => (country :name (name :op "Scotland"))
Span 17-18:  south => south
Span 1-2:  this => this

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),scotland,(country :name (name :op "Scotland")),false), Span(19,20,List(3),and,and,false), Span(17,18,List(4),south,south,false), Span(15,16,List(5),especially,especially,false), Span(14,15,List(6),and,and,false), Span(13,14,List(7),cities,city,false), Span(12,13,List(8),industrial,industry,false), Span(8,9,List(9),colleges,college,false), Span(7,8,List(10),labour,labour,false), Span(5,6,List(11),number,number,false), Span(3,4,List(12),derived,derive-01,false), Span(2,3,List(13),initiative,initiative,false), Span(1,2,List(14),this,this,false)),Map(2 -> "Scotland", 5 -> especially, 12 -> derive-01, 8 -> industry, 7 -> city, 1 -> name, 4 -> south, 11 -> number, 14 -> this, 6 -> and, 0 -> country, 9 -> college, 3 -> and, 10 -> labour, 13 -> initiative),Map(e -> especially, n -> name, t -> this, s -> south, d -> derive-01, a -> and, c3 -> college, i2 -> initiative, a2 -> and, i -> industry, c -> country, l -> labour, c2 -> city, n2 -> number))),[Ljava.lang.String;@4efce9a2,Annotation([Ljava.lang.String;@3e4eb331,[Ljava.lang.String;@20d675ec,[Ljava.lang.String;@5fd7e9cb),Annotation([Ljava.lang.String;@58363f95,[Ljava.lang.String;@51887c71,[Ledu.cmu.lti.nlp.amr.Dependency;@57a20888),Annotation([Ljava.lang.String;@4ede45aa,[Ljava.lang.String;@62afc459,[Ljava.lang.String;@183e1ad),Annotation([Ljava.lang.String;@795525a1,[Ljava.lang.String;@4519ab42,[Ledu.cmu.lti.nlp.amr.Entity;@183a9d7f))
AMR:
(a / and, op, a2 / and)
(a / and, op, c / country)
(a / and, op, s / south)
(c / country, name, n / name)
(c2 / city, mod, i / industry)
(c3 / college, mod, l / labour)
(c3 / college, quant, n2 / number)
(d / derive-01, ARG0, i2 / initiative)
(d / derive-01, ARG1, n2 / number)
(d / derive-01, ARG2, a2 / and)
(e / especially, op, a / and)
(i2 / initiative, mod, t / this)
(n / name, op, "Scotland")
(n2 / number, location, c2 / city)

Decoded in 432,209 microseconds
Sentence: most of the andean stations have an abandoned air and see few trains although those in the capital cities derive a certain faded grandeur from the fact that their buildings often incorporate the headquarters of the railway companies

Spans:
Span 7-8:  abandoned => abandon-01
Span 8-9:  air => air
Span 9-10:  and => and
Span 29-30:  buildings => building
Span 17-18:  capital => capital
Span 21-22:  certain => certain
Span 18-19:  cities => city
Span 37-38:  companies => company
Span 19-20:  derive => derive-01
Span 26-27:  fact => fact
Span 22-23:  faded => fade-01
Span 11-12:  few => few
Span 33-34:  headquarters => headquarters
Span 0-1:  most => most
Span 30-31:  often => often
Span 36-37:  railway => railway
Span 10-11:  see => see-01
Span 4-5:  stations => station
Span 12-13:  trains => train

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),companies,company,false), Span(36,37,List(1),railway,railway,false), Span(33,34,List(2),headquarters,headquarters,false), Span(30,31,List(3),often,often,false), Span(29,30,List(4),buildings,building,false), Span(26,27,List(5),fact,fact,false), Span(22,23,List(6),faded,fade-01,false), Span(21,22,List(7),certain,certain,false), Span(19,20,List(8),derive,derive-01,false), Span(18,19,List(9),cities,city,false), Span(17,18,List(10),capital,capital,false), Span(12,13,List(11),trains,train,false), Span(11,12,List(12),few,few,false), Span(10,11,List(13),see,see-01,false), Span(9,10,List(14),and,and,false), Span(8,9,List(15),air,air,false), Span(7,8,List(16),abandoned,abandon-01,false), Span(4,5,List(17),stations,station,false), Span(0,1,List(18),most,most,false)),Map(2 -> headquarters, 5 -> fact, 12 -> few, 15 -> air, 8 -> derive-01, 18 -> most, 7 -> certain, 17 -> station, 1 -> railway, 4 -> building, 11 -> train, 14 -> and, 6 -> fade-01, 0 -> company, 9 -> city, 16 -> abandon-01, 3 -> often, 10 -> capital, 13 -> see-01),Map(h -> headquarters, s2 -> station, b -> building, t -> train, a3 -> abandon-01, c4 -> capital, s -> see-01, m -> most, d -> derive-01, a -> and, c3 -> city, f3 -> few, a2 -> air, r -> railway, c -> company, f2 -> fade-01, f -> fact, o -> often, c2 -> certain))),[Ljava.lang.String;@3236eb66,Annotation([Ljava.lang.String;@33988f4b,[Ljava.lang.String;@64e79f63,[Ljava.lang.String;@22915056),Annotation([Ljava.lang.String;@72314fd4,[Ljava.lang.String;@37021de,[Ledu.cmu.lti.nlp.amr.Dependency;@36bf7795),Annotation([Ljava.lang.String;@5443f347,[Ljava.lang.String;@3918e589,[Ljava.lang.String;@1185a2a8),Annotation([Ljava.lang.String;@5c79cc94,[Ljava.lang.String;@406637fa,[Ledu.cmu.lti.nlp.amr.Entity;@76e51f1d))
AMR:
(a / and, op, a2 / air)
(a / and, op, s / see-01)
(a3 / abandon-01, ARG0, c2 / certain)
(a3 / abandon-01, ARG1, t / train)
(c / company, mod, r / railway)
(c4 / capital, mod, c3 / city)
(d / derive-01, ARG0, c3 / city)
(d / derive-01, ARG1, h / headquarters)
(d / derive-01, ARG2, f / fact)
(f2 / fade-01, ARG0, o / often)
(f2 / fade-01, ARG1, m / most)
(h / headquarters, poss, b / building)
(h / headquarters, poss, c / company)
(s / see-01, ARG1, t / train)
(s / see-01, condition, d / derive-01)
(s2 / station, mod, f / fact)
(s2 / station, quant, m / most)
(t / train, quant, f3 / few)

Decoded in 245,050 microseconds
Sentence: from these his lordship derived the following guidelines

Spans:
Span 4-5:  derived => derive-01
Span 7-8:  guidelines => guideline

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),guidelines,guideline,false), Span(4,5,List(1),derived,derive-01,false)),Map(1 -> derive-01, 0 -> guideline),Map(d -> derive-01, g -> guideline))),[Ljava.lang.String;@3c5de5e6,Annotation([Ljava.lang.String;@38a07e00,[Ljava.lang.String;@30b04f0b,[Ljava.lang.String;@7157426),Annotation([Ljava.lang.String;@117c6e6c,[Ljava.lang.String;@357d6c,[Ledu.cmu.lti.nlp.amr.Dependency;@37bd3d8f),Annotation([Ljava.lang.String;@691493df,[Ljava.lang.String;@45f84b5e,[Ljava.lang.String;@301c2c35),Annotation([Ljava.lang.String;@99a6440,[Ljava.lang.String;@772baaac,[Ledu.cmu.lti.nlp.amr.Entity;@53d23f53))
AMR:
(d / derive-01, ARG1, g / guideline)

Decoded in 6,129 microseconds
Sentence: bank of montreal has set itself a target of deriving half its profits from us operations up from about 26 per cent last year

NER Entity: (country :name (name :op "montreal"))
Spans:
Span 19-20:  26 => 26
Span 0-1:  bank => bank
Span 21-22:  cent => (monetary-quantity :unit cent)
Span 10-11:  half => half
Span 22-23:  last => last
Span 15-16:  operations => operation
Span 12-13:  profits => profit-01
Span 7-8:  target => target-01
Span 23-24:  year => year

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),year,year,false), Span(22,23,List(1),last,last,false), Span(21,22,List(3, 2),cent,(monetary-quantity :unit cent),false), Span(19,20,List(4),26,26,false), Span(15,16,List(5),operations,operation,false), Span(12,13,List(6),profits,profit-01,false), Span(10,11,List(7),half,half,false), Span(7,8,List(8),target,target-01,false), Span(0,1,List(9),bank,bank,false)),Map(2 -> monetary-quantity, 5 -> operation, 8 -> target-01, 7 -> half, 1 -> last, 4 -> 26, 6 -> profit-01, 9 -> bank, 0 -> year, 3 -> cent),Map(h -> half, 2 -> 26, b -> bank, t -> target-01, m -> monetary-quantity, p -> profit-01, y -> year, c -> cent, l -> last, o -> operation))),[Ljava.lang.String;@103b8d23,Annotation([Ljava.lang.String;@35aefd28,[Ljava.lang.String;@736e68a0,[Ljava.lang.String;@55971b94),Annotation([Ljava.lang.String;@3393bd72,[Ljava.lang.String;@287aa1d2,[Ledu.cmu.lti.nlp.amr.Dependency;@b15f6c1),Annotation([Ljava.lang.String;@4efafe96,[Ljava.lang.String;@4060525c,[Ljava.lang.String;@73bf3708),Annotation([Ljava.lang.String;@eb62996,[Ljava.lang.String;@59643e65,[Ledu.cmu.lti.nlp.amr.Entity;@443c86bc))
AMR:
(m / monetary-quantity, unit, c / cent)
(p / profit-01, ARG0, t / target-01)
(p / profit-01, ARG1, o / operation)
(p / profit-01, quant, h / half)
(t / target-01, ARG0, b / bank)
(t / target-01, ARG1, 2 / 26)
(y / year, mod, l / last)
(y / year, part, m / monetary-quantity)
(y / year, quant, 2 / 26)

Decoded in 78,324 microseconds
Sentence: this is because the central disciplines over a new state derive from the world system of competitive and unequal states and the continuing struggle to preserve national independence

Spans:
Span 20-21:  and => and
Span 17-18:  and => and
Span 2-3:  because => cause-01
Span 4-5:  central => central
Span 16-17:  competitive => compete-01
Span 22-23:  continuing => continue-01
Span 10-11:  derive => derive-01
Span 5-6:  disciplines => discipline
Span 27-28:  independence => (depend-01 :polarity -)
Span 26-27:  national => nation
Span 8-9:  new => new
Span 25-26:  preserve => preserve-01
Span 9-10:  state => state
Span 19-20:  states => state
Span 23-24:  struggle => struggle-01
Span 14-15:  system => system
Span 0-1:  this => this
Span 18-19:  unequal => (equal-01 :polarity -)
Span 13-14:  world => world

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(1, 0),independence,(depend-01 :polarity -),false), Span(26,27,List(2),national,nation,false), Span(25,26,List(3),preserve,preserve-01,false), Span(23,24,List(4),struggle,struggle-01,false), Span(22,23,List(5),continuing,continue-01,false), Span(20,21,List(6),and,and,false), Span(19,20,List(7),states,state,false), Span(18,19,List(9, 8),unequal,(equal-01 :polarity -),false), Span(17,18,List(10),and,and,false), Span(16,17,List(11),competitive,compete-01,false), Span(14,15,List(12),system,system,false), Span(13,14,List(13),world,world,false), Span(10,11,List(14),derive,derive-01,false), Span(9,10,List(15),state,state,false), Span(8,9,List(16),new,new,false), Span(5,6,List(17),disciplines,discipline,false), Span(4,5,List(18),central,central,false), Span(2,3,List(19),because,cause-01,false), Span(0,1,List(20),this,this,false)),Map(2 -> nation, 5 -> continue-01, 12 -> system, 15 -> state, 8 -> equal-01, 18 -> central, 7 -> state, 17 -> discipline, 1 -> -, 4 -> struggle-01, 11 -> compete-01, 14 -> derive-01, 20 -> this, 6 -> and, 0 -> depend-01, 9 -> -, 16 -> new, 19 -> cause-01, 3 -> preserve-01, 10 -> and, 13 -> world),Map(e -> equal-01, n -> nation, w -> world, s2 -> state, t -> this, d3 -> discipline, c4 -> cause-01, s -> struggle-01, s4 -> state, d -> depend-01, p -> preserve-01, c3 -> central, a -> and, d2 -> derive-01, a2 -> and, c -> continue-01, s3 -> system, n2 -> new, c2 -> compete-01))),[Ljava.lang.String;@61b1c3a3,Annotation([Ljava.lang.String;@5da33470,[Ljava.lang.String;@5c7d517,[Ljava.lang.String;@276dbf8),Annotation([Ljava.lang.String;@4963780b,[Ljava.lang.String;@215e3fd1,[Ledu.cmu.lti.nlp.amr.Dependency;@32afc374),Annotation([Ljava.lang.String;@31490eab,[Ljava.lang.String;@336215d4,[Ljava.lang.String;@6c872ba6),Annotation([Ljava.lang.String;@1e42d6f4,[Ljava.lang.String;@362e3cb1,[Ledu.cmu.lti.nlp.amr.Entity;@1592a441))
AMR:
(a / and, op, c2 / compete-01)
(a / and, op, s / struggle-01)
(a2 / and, op, c2 / compete-01)
(a2 / and, op, s3 / system)
(c / continue-01, ARG1, s / struggle-01)
(c2 / compete-01, ARG1, s2 / state)
(c4 / cause-01, ARG0, p / preserve-01)
(c4 / cause-01, ARG1, t / this)
(d / depend-01, mod, n / nation)
(d / depend-01, polarity, -)
(d2 / derive-01, ARG0, s4 / state)
(d2 / derive-01, ARG1, s3 / system)
(d2 / derive-01, mod, n2 / new)
(d3 / discipline, mod, c3 / central)
(e / equal-01, ARG1, s2 / state)
(e / equal-01, polarity, -)
(p / preserve-01, ARG0, d3 / discipline)
(p / preserve-01, ARG1, d / depend-01)
(s / struggle-01, ARG0, w / world)
(s / struggle-01, ARG1, p / preserve-01)

Decoded in 171,489 microseconds
Sentence: even when they hardly know each other and where women do not hide the pleasure they derive from such oldfashioned niceties

Spans:
Span 7-8:  and => and
Span 16-17:  derive => derive-01
Span 5-6:  each => each
Span 3-4:  hardly => hardly
Span 12-13:  hide => hide-01
Span 4-5:  know => know-01
Span 6-7:  other => other
Span 14-15:  pleasure => pleasure
Span 18-19:  such => such
Span 15-16:  they => they
Span 2-3:  they => they
Span 9-10:  women => woman

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),such,such,false), Span(16,17,List(1),derive,derive-01,false), Span(15,16,List(2),they,they,false), Span(14,15,List(3),pleasure,pleasure,false), Span(12,13,List(4),hide,hide-01,false), Span(9,10,List(5),women,woman,false), Span(7,8,List(6),and,and,false), Span(6,7,List(7),other,other,false), Span(5,6,List(8),each,each,false), Span(4,5,List(9),know,know-01,false), Span(3,4,List(10),hardly,hardly,false), Span(2,3,List(11),they,they,false)),Map(2 -> they, 5 -> woman, 8 -> each, 7 -> other, 1 -> derive-01, 11 -> they, 4 -> hide-01, 6 -> and, 9 -> know-01, 0 -> such, 10 -> hardly, 3 -> pleasure),Map(e -> each, w -> woman, h -> hide-01, h2 -> hardly, k -> know-01, t -> they, s -> such, d -> derive-01, p -> pleasure, a -> and, t2 -> they, o -> other))),[Ljava.lang.String;@4e5db277,Annotation([Ljava.lang.String;@696fcad2,[Ljava.lang.String;@2a6cd712,[Ljava.lang.String;@4f9bf480),Annotation([Ljava.lang.String;@7d12855,[Ljava.lang.String;@34aee875,[Ledu.cmu.lti.nlp.amr.Dependency;@471f7458),Annotation([Ljava.lang.String;@620f61e2,[Ljava.lang.String;@5fe36eb9,[Ljava.lang.String;@4c7a64dd),Annotation([Ljava.lang.String;@77741064,[Ljava.lang.String;@64e05280,[Ledu.cmu.lti.nlp.amr.Entity;@4348853d))
AMR:
(a / and, op, h / hide-01)
(d / derive-01, ARG0, t / they)
(d / derive-01, ARG1, p / pleasure)
(h / hide-01, ARG0, w / woman)
(h / hide-01, ARG1, p / pleasure)
(k / know-01, ARG0, t2 / they)
(k / know-01, ARG1, a / and)
(k / know-01, ARG2, o / other)
(k / know-01, mod, h2 / hardly)
(o / other, mod, e / each)
(s / such, op, k / know-01)

Decoded in 298,096 microseconds
Sentence: the contemporary defamation of their name manifestly derives from jewish and thereby christian hostility and prejudice

Spans:
Span 14-15:  and => and
Span 10-11:  and => and
Span 12-13:  christian => (religious-group :name (name :op "Christian"))
Span 1-2:  contemporary => contemporary
Span 2-3:  defamation => defame-01
Span 13-14:  hostility => hostility
Span 9-10:  jewish => (ethnic-group :name (name :op "Jew"))
Span 15-16:  prejudice => prejudice-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),prejudice,prejudice-01,false), Span(14,15,List(1),and,and,false), Span(13,14,List(2),hostility,hostility,false), Span(12,13,List(5, 4, 3),christian,(religious-group :name (name :op "Christian")),false), Span(10,11,List(6),and,and,false), Span(9,10,List(9, 8, 7),jewish,(ethnic-group :name (name :op "Jew")),false), Span(2,3,List(10),defamation,defame-01,false), Span(1,2,List(11),contemporary,contemporary,false)),Map(2 -> hostility, 5 -> "Christian", 8 -> name, 7 -> ethnic-group, 1 -> and, 11 -> contemporary, 4 -> name, 6 -> and, 9 -> "Jew", 0 -> prejudice-01, 10 -> defame-01, 3 -> religious-group),Map(e -> ethnic-group, n -> name, h -> hostility, d -> defame-01, p -> prejudice-01, a -> and, a2 -> and, r -> religious-group, c -> contemporary, n2 -> name))),[Ljava.lang.String;@4e238a4d,Annotation([Ljava.lang.String;@7f4ced4e,[Ljava.lang.String;@136fdd2d,[Ljava.lang.String;@1521bf53),Annotation([Ljava.lang.String;@5a97ecfb,[Ljava.lang.String;@2c478134,[Ledu.cmu.lti.nlp.amr.Dependency;@a7393a2),Annotation([Ljava.lang.String;@29e1760a,[Ljava.lang.String;@110ca001,[Ljava.lang.String;@53dcaa65),Annotation([Ljava.lang.String;@3c36f7e6,[Ljava.lang.String;@3ccd3bec,[Ledu.cmu.lti.nlp.amr.Entity;@46192223))
AMR:
(a / and, op, h / hostility)
(a / and, op, p / prejudice-01)
(a / and, op, r / religious-group)
(a2 / and, op, d / defame-01)
(a2 / and, op, e / ethnic-group)
(a2 / and, op, r / religious-group)
(d / defame-01, time, c / contemporary)
(e / ethnic-group, name, n2 / name)
(n / name, op, "Christian")
(n2 / name, op, "Jew")
(r / religious-group, name, n / name)

Decoded in 41,048 microseconds
Sentence: some will say that that requirement of respect is derived from the requirement to respect other persons some of whom have an interest in art

Spans:
Span 24-25:  art => art
Span 9-10:  derived => derive-01
Span 22-23:  interest => interest-01
Span 15-16:  other => other
Span 16-17:  persons => person
Span 12-13:  requirement => require-01
Span 5-6:  requirement => require-01
Span 14-15:  respect => respect-01
Span 7-8:  respect => respect-01
Span 2-3:  say => say-01
Span 17-18:  some => some
Span 0-1:  some => some

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),art,art,false), Span(22,23,List(1),interest,interest-01,false), Span(17,18,List(2),some,some,false), Span(16,17,List(3),persons,person,false), Span(15,16,List(4),other,other,false), Span(14,15,List(5),respect,respect-01,false), Span(12,13,List(6),requirement,require-01,false), Span(9,10,List(7),derived,derive-01,false), Span(7,8,List(8),respect,respect-01,false), Span(5,6,List(9),requirement,require-01,false), Span(2,3,List(10),say,say-01,false), Span(0,1,List(11),some,some,false)),Map(2 -> some, 5 -> respect-01, 8 -> respect-01, 7 -> derive-01, 1 -> interest-01, 11 -> some, 4 -> other, 6 -> require-01, 9 -> require-01, 0 -> art, 10 -> say-01, 3 -> person),Map(r3 -> respect-01, s2 -> say-01, s -> some, d -> derive-01, r2 -> require-01, p -> person, a -> art, r4 -> require-01, r -> respect-01, i -> interest-01, s3 -> some, o -> other))),[Ljava.lang.String;@a39e3dd,Annotation([Ljava.lang.String;@5e9ec769,[Ljava.lang.String;@a35ef07,[Ljava.lang.String;@5adfb9cd),Annotation([Ljava.lang.String;@161f7057,[Ljava.lang.String;@6a086b19,[Ledu.cmu.lti.nlp.amr.Dependency;@4eaf6cb1),Annotation([Ljava.lang.String;@5f0900d2,[Ljava.lang.String;@48150bbc,[Ljava.lang.String;@5db5889c),Annotation([Ljava.lang.String;@391be9d4,[Ljava.lang.String;@57947a96,[Ledu.cmu.lti.nlp.amr.Entity;@54fc3ac5))
AMR:
(d / derive-01, ARG1, r4 / require-01)
(d / derive-01, ARG2, r2 / require-01)
(i / interest-01, ARG0, s / some)
(i / interest-01, ARG1, p / person)
(i / interest-01, ARG2, a / art)
(p / person, mod, o / other)
(r / respect-01, ARG0, s3 / some)
(r / respect-01, ARG1, p / person)
(r2 / require-01, ARG1, r / respect-01)
(r3 / respect-01, ARG1, r4 / require-01)
(s2 / say-01, ARG1, d / derive-01)

Decoded in 353,698 microseconds
Sentence: have only one and that an easy method of refuting it by producing that idea which in their opinion is not derived from this source

Spans:
Span 3-4:  and => and
Span 21-22:  derived => derive-01
Span 6-7:  easy => easy
Span 14-15:  idea => idea
Span 10-11:  it => it
Span 7-8:  method => method
Span 1-2:  only => only
Span 18-19:  opinion => opine-01
Span 12-13:  producing => produce-01
Span 24-25:  source => source
Span 23-24:  this => this

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),source,source,false), Span(23,24,List(1),this,this,false), Span(21,22,List(2),derived,derive-01,false), Span(18,19,List(3),opinion,opine-01,false), Span(14,15,List(4),idea,idea,false), Span(12,13,List(5),producing,produce-01,false), Span(10,11,List(6),it,it,false), Span(7,8,List(7),method,method,false), Span(6,7,List(8),easy,easy,false), Span(3,4,List(9),and,and,false), Span(1,2,List(10),only,only,false)),Map(2 -> derive-01, 5 -> produce-01, 8 -> easy, 7 -> method, 1 -> this, 4 -> idea, 6 -> it, 9 -> and, 0 -> source, 10 -> only, 3 -> opine-01),Map(e -> easy, t -> this, s -> source, m -> method, d -> derive-01, p -> produce-01, a -> and, o2 -> only, i2 -> it, i -> idea, o -> opine-01))),[Ljava.lang.String;@7b768719,Annotation([Ljava.lang.String;@229fb9a2,[Ljava.lang.String;@24544c70,[Ljava.lang.String;@1a665fb2),Annotation([Ljava.lang.String;@3714aca8,[Ljava.lang.String;@2e5365d8,[Ledu.cmu.lti.nlp.amr.Dependency;@65435faa),Annotation([Ljava.lang.String;@2a3dc5d6,[Ljava.lang.String;@3d877a44,[Ljava.lang.String;@96c25eb),Annotation([Ljava.lang.String;@1b2d6c22,[Ljava.lang.String;@43163a1e,[Ledu.cmu.lti.nlp.amr.Entity;@6841a9fa))
AMR:
(a / and, mod, o2 / only)
(a / and, op, p / produce-01)
(d / derive-01, ARG0, s / source)
(d / derive-01, ARG1, i / idea)
(d / derive-01, time, o / opine-01)
(m / method, mod, e / easy)
(o / opine-01, ARG0, m / method)
(p / produce-01, ARG0, i2 / it)
(p / produce-01, ARG1, i / idea)
(s / source, mod, t / this)

Decoded in 155,152 microseconds
Sentence: a person who made a promise has an agentrelative reason to keep it even though it may derive from an agentneutral reason to keep ones promises

Spans:
Span 17-18:  derive => derive-01
Span 15-16:  it => it
Span 12-13:  it => it
Span 16-17:  may => (date-entity :month 5)
Span 24-25:  ones => one
Span 1-2:  person => person
Span 5-6:  promise => promise-01
Span 25-26:  promises => promise-01
Span 21-22:  reason => reason
Span 9-10:  reason => reason

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),promises,promise-01,false), Span(24,25,List(1),ones,one,false), Span(21,22,List(2),reason,reason,false), Span(17,18,List(3),derive,derive-01,false), Span(16,17,List(5, 4),may,(date-entity :month 5),false), Span(15,16,List(6),it,it,false), Span(12,13,List(7),it,it,false), Span(9,10,List(8),reason,reason,false), Span(5,6,List(9),promise,promise-01,false), Span(1,2,List(10),person,person,false)),Map(2 -> reason, 5 -> 5, 8 -> reason, 7 -> it, 1 -> one, 4 -> date-entity, 6 -> it, 9 -> promise-01, 0 -> promise-01, 10 -> person, 3 -> derive-01),Map(5 -> 5, p2 -> promise-01, d -> derive-01, r2 -> reason, p -> promise-01, d2 -> date-entity, i2 -> it, i -> it, r -> reason, o -> one, p3 -> person))),[Ljava.lang.String;@2efe918f,Annotation([Ljava.lang.String;@4b065b63,[Ljava.lang.String;@e59e710,[Ljava.lang.String;@3050d2cc),Annotation([Ljava.lang.String;@a3f67dc,[Ljava.lang.String;@48bba1c5,[Ledu.cmu.lti.nlp.amr.Dependency;@1679b1d1),Annotation([Ljava.lang.String;@f891bde,[Ljava.lang.String;@728493c9,[Ljava.lang.String;@5e02abdb),Annotation([Ljava.lang.String;@160e715,[Ljava.lang.String;@e31468,[Ledu.cmu.lti.nlp.amr.Entity;@3c50b84c))
AMR:
(d / derive-01, ARG0, i / it)
(d / derive-01, ARG1, i2 / it)
(d / derive-01, ARG2, r / reason)
(d / derive-01, ARG3, r2 / reason)
(d / derive-01, mod, d2 / date-entity)
(d2 / date-entity, month, 5 / 5)
(o / one, poss, i / it)
(p / promise-01, ARG0, p3 / person)
(p / promise-01, ARG1, o / one)
(p2 / promise-01, ARG1, d / derive-01)

Decoded in 311,093 microseconds
Sentence: my ownership of a house in the street does not derive from my ownership of the street as a whole even though the statement that i own a house in the street is entailed by the statement that i own the street

Spans:
Span 10-11:  derive => derive-01
Span 28-29:  house => house
Span 4-5:  house => house
Span 38-39:  i => i
Span 25-26:  i => i
Span 13-14:  ownership => ownership
Span 1-2:  ownership => ownership
Span 36-37:  statement => state-01
Span 23-24:  statement => state-01
Span 41-42:  street => street
Span 31-32:  street => street
Span 16-17:  street => street
Span 7-8:  street => street
Span 19-20:  whole => whole

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),street,street,false), Span(38,39,List(1),i,i,false), Span(36,37,List(2),statement,state-01,false), Span(31,32,List(3),street,street,false), Span(28,29,List(4),house,house,false), Span(25,26,List(5),i,i,false), Span(23,24,List(6),statement,state-01,false), Span(19,20,List(7),whole,whole,false), Span(16,17,List(8),street,street,false), Span(13,14,List(9),ownership,ownership,false), Span(10,11,List(10),derive,derive-01,false), Span(7,8,List(11),street,street,false), Span(4,5,List(12),house,house,false), Span(1,2,List(13),ownership,ownership,false)),Map(2 -> state-01, 5 -> i, 12 -> house, 8 -> street, 7 -> whole, 1 -> i, 4 -> house, 11 -> street, 6 -> state-01, 0 -> street, 9 -> ownership, 3 -> street, 10 -> derive-01, 13 -> ownership),Map(s5 -> street, w -> whole, h -> house, s2 -> state-01, h2 -> house, s -> street, s4 -> state-01, d -> derive-01, o2 -> ownership, i2 -> i, i -> i, s3 -> street, o -> ownership, s6 -> street))),[Ljava.lang.String;@5773a483,Annotation([Ljava.lang.String;@6935c14f,[Ljava.lang.String;@48265f7f,[Ljava.lang.String;@4f47afda),Annotation([Ljava.lang.String;@6b6a39df,[Ljava.lang.String;@afd9691,[Ledu.cmu.lti.nlp.amr.Dependency;@ea80f3a),Annotation([Ljava.lang.String;@3b7fb05a,[Ljava.lang.String;@3c13033a,[Ljava.lang.String;@438f3a6),Annotation([Ljava.lang.String;@37041974,[Ljava.lang.String;@6e232ae3,[Ledu.cmu.lti.nlp.amr.Entity;@46d4d592))
AMR:
(d / derive-01, ARG0, o2 / ownership)
(d / derive-01, ARG1, s6 / street)
(d / derive-01, ARG2, o / ownership)
(h / house, location, s3 / street)
(h2 / house, poss, i2 / i)
(o / ownership, location, s5 / street)
(o2 / ownership, location, h2 / house)
(s / street, example, i / i)
(s2 / state-01, ARG0, i / i)
(s2 / state-01, ARG1, s4 / state-01)
(s4 / state-01, ARG0, i2 / i)
(s4 / state-01, ARG1, h / house)
(s5 / street, domain, w / whole)

Decoded in 189,866 microseconds
Sentence: stalins argument was part of a broader one that he derived from lenin the right of national selfdetermination was valid only where countries were passing from feudalism to capitalism

Spans:
Span 1-2:  argument => argue-01
Span 6-7:  broader => broad
Span 28-29:  capitalism => capitalism
Span 22-23:  countries => country
Span 10-11:  derived => derive-01
Span 9-10:  he => he
Span 16-17:  national => nation
Span 20-21:  only => only
Span 19-20:  valid => valid-41

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),capitalism,capitalism,false), Span(22,23,List(1),countries,country,false), Span(20,21,List(2),only,only,false), Span(19,20,List(3),valid,valid-41,false), Span(16,17,List(4),national,nation,false), Span(10,11,List(5),derived,derive-01,false), Span(9,10,List(6),he,he,false), Span(6,7,List(7),broader,broad,false), Span(1,2,List(8),argument,argue-01,false)),Map(2 -> only, 5 -> derive-01, 8 -> argue-01, 7 -> broad, 1 -> country, 4 -> nation, 6 -> he, 0 -> capitalism, 3 -> valid-41),Map(n -> nation, h -> he, b -> broad, d -> derive-01, v -> valid-41, a -> argue-01, c -> capitalism, o -> only, c2 -> country))),[Ljava.lang.String;@2aca64df,Annotation([Ljava.lang.String;@4da4826b,[Ljava.lang.String;@6b6e669f,[Ljava.lang.String;@1d1387d3),Annotation([Ljava.lang.String;@6d3a3c8e,[Ljava.lang.String;@a5dc6a8,[Ledu.cmu.lti.nlp.amr.Dependency;@129d44e9),Annotation([Ljava.lang.String;@1317268b,[Ljava.lang.String;@54e37977,[Ljava.lang.String;@223b9f2b),Annotation([Ljava.lang.String;@784ed19b,[Ljava.lang.String;@7ea354d1,[Ledu.cmu.lti.nlp.amr.Entity;@1515a64b))
AMR:
(a / argue-01, ARG0, c2 / country)
(a / argue-01, ARG1, b / broad)
(d / derive-01, ARG0, h / he)
(d / derive-01, ARG1, v / valid-41)
(n / nation, op, a / argue-01)
(v / valid-41, ARG0, c / capitalism)
(v / valid-41, ARG1, c2 / country)
(v / valid-41, time, o / only)

Decoded in 134,055 microseconds
Sentence: followers of football on north humberside deprived of success by their ailing professional club can derive much satisfaction from the form of the citys schoolboy team

Spans:
Span 14-15:  can => possible
Span 13-14:  club => club
Span 15-16:  derive => derive-01
Span 0-1:  followers => (person :ARG0-of follow-02)
Span 2-3:  football => football
Span 20-21:  form => form
Span 16-17:  much => much
Span 4-5:  north => north
Span 12-13:  professional => professional
Span 17-18:  satisfaction => satisfy-01
Span 8-9:  success => succeed-01
Span 25-26:  team => team

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),team,team,false), Span(20,21,List(1),form,form,false), Span(17,18,List(2),satisfaction,satisfy-01,false), Span(16,17,List(3),much,much,false), Span(15,16,List(4),derive,derive-01,false), Span(14,15,List(5),can,possible,false), Span(13,14,List(6),club,club,false), Span(12,13,List(7),professional,professional,false), Span(8,9,List(8),success,succeed-01,false), Span(4,5,List(9),north,north,false), Span(2,3,List(10),football,football,false), Span(0,1,List(12, 11),followers,(person :ARG0-of follow-02),false)),Map(2 -> satisfy-01, 5 -> possible, 12 -> follow-02, 8 -> succeed-01, 7 -> professional, 1 -> form, 4 -> derive-01, 11 -> person, 6 -> club, 0 -> team, 9 -> north, 3 -> much, 10 -> football),Map(n -> north, s2 -> succeed-01, t -> team, p2 -> professional, s -> satisfy-01, m -> much, d -> derive-01, p -> possible, f3 -> follow-02, c -> club, f2 -> football, f -> form, p3 -> person))),[Ljava.lang.String;@405890bd,Annotation([Ljava.lang.String;@7686894b,[Ljava.lang.String;@7a9fd7b7,[Ljava.lang.String;@140b6e46),Annotation([Ljava.lang.String;@7a74bff1,[Ljava.lang.String;@6e5a606,[Ledu.cmu.lti.nlp.amr.Dependency;@4ef6d773),Annotation([Ljava.lang.String;@2fbae785,[Ljava.lang.String;@17b5e53e,[Ljava.lang.String;@26dd559b),Annotation([Ljava.lang.String;@d1f470c,[Ljava.lang.String;@716b8f,[Ledu.cmu.lti.nlp.amr.Entity;@164c7983))
AMR:
(c / club, mod, p2 / professional)
(d / derive-01, ARG0, p3 / person)
(d / derive-01, ARG1, s / satisfy-01)
(f / form, poss, t / team)
(f3 / follow-02, ARG0, p3 / person)
(f3 / follow-02, ARG1, f2 / football)
(p / possible, domain, d / derive-01)
(p3 / person, location, n / north)
(s / satisfy-01, manner, f / form)
(s / satisfy-01, quant, m / much)
(s2 / succeed-01, ARG0, n / north)
(s2 / succeed-01, ARG1, c / club)

Decoded in 240,539 microseconds
Sentence: other interesting youthpreserving ingredients which work together to promote cell rejuvenation and boost capillary circulations functions that grow sluggish with time are apricot essence b15 and a form of vitamin e called tocopherol nicotinate derived from polished rice

Spans:
Span 25-26:  and => and
Span 11-12:  and => and
Span 12-13:  boost => boost-01
Span 9-10:  cell => cell
Span 34-35:  derived => derive-01
Span 23-24:  essence => essence
Span 27-28:  form => form
Span 15-16:  functions => function-01
Span 17-18:  grow => grow-01
Span 3-4:  ingredients => ingredient
Span 1-2:  interesting => interesting
Span 0-1:  other => other
Span 36-37:  polished => polish-02
Span 8-9:  promote => promote-02
Span 37-38:  rice => rice
Span 18-19:  sluggish => sluggish
Span 20-21:  time => time
Span 6-7:  together => together
Span 29-30:  vitamin => vitamin

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),rice,rice,false), Span(36,37,List(1),polished,polish-02,false), Span(34,35,List(2),derived,derive-01,false), Span(29,30,List(3),vitamin,vitamin,false), Span(27,28,List(4),form,form,false), Span(25,26,List(5),and,and,false), Span(23,24,List(6),essence,essence,false), Span(20,21,List(7),time,time,false), Span(18,19,List(8),sluggish,sluggish,false), Span(17,18,List(9),grow,grow-01,false), Span(15,16,List(10),functions,function-01,false), Span(12,13,List(11),boost,boost-01,false), Span(11,12,List(12),and,and,false), Span(9,10,List(13),cell,cell,false), Span(8,9,List(14),promote,promote-02,false), Span(6,7,List(15),together,together,false), Span(3,4,List(16),ingredients,ingredient,false), Span(1,2,List(17),interesting,interesting,false), Span(0,1,List(18),other,other,false)),Map(2 -> derive-01, 5 -> and, 12 -> and, 15 -> together, 8 -> sluggish, 18 -> other, 7 -> time, 17 -> interesting, 1 -> polish-02, 4 -> form, 11 -> boost-01, 14 -> promote-02, 6 -> essence, 0 -> rice, 9 -> grow-01, 16 -> ingredient, 3 -> vitamin, 10 -> function-01, 13 -> cell),Map(e -> essence, t -> time, b -> boost-01, p2 -> promote-02, s -> sluggish, v -> vitamin, d -> derive-01, p -> polish-02, g -> grow-01, a -> and, i2 -> interesting, t2 -> together, i -> ingredient, r -> rice, a2 -> and, c -> cell, f2 -> function-01, f -> form, o -> other))),[Ljava.lang.String;@76bd92e4,Annotation([Ljava.lang.String;@17f6f3a3,[Ljava.lang.String;@55f55e9f,[Ljava.lang.String;@601744cf),Annotation([Ljava.lang.String;@17a6a352,[Ljava.lang.String;@3d2c689f,[Ledu.cmu.lti.nlp.amr.Dependency;@2e88be19),Annotation([Ljava.lang.String;@1378732d,[Ljava.lang.String;@48d19957,[Ljava.lang.String;@38aa441a),Annotation([Ljava.lang.String;@325d2406,[Ljava.lang.String;@e81fbf,[Ledu.cmu.lti.nlp.amr.Entity;@77c3510))
AMR:
(a / and, op, f / form)
(a2 / and, mod, t2 / together)
(a2 / and, op, b / boost-01)
(a2 / and, op, f2 / function-01)
(a2 / and, op, p2 / promote-02)
(b / boost-01, ARG0, e / essence)
(b / boost-01, ARG1, c / cell)
(d / derive-01, ARG1, a / and)
(d / derive-01, ARG2, r / rice)
(f / form, mod, v / vitamin)
(f2 / function-01, ARG1, p / polish-02)
(g / grow-01, ARG0, f2 / function-01)
(g / grow-01, ARG1, s / sluggish)
(g / grow-01, time, t / time)
(i / ingredient, mod, i2 / interesting)
(i / ingredient, mod, o / other)
(p / polish-02, ARG1, r / rice)
(p2 / promote-02, ARG1, i / ingredient)

Decoded in 345,827 microseconds
Sentence: some people are willing to go further and to hold that the value of the relationship between the man and the dog derives equally from its contribution to the wellbeing of the dog and that the dogs wellbeing is not merely derivatively important because of its contribution to the mans wellbeing

Spans:
Span 33-34:  and => and
Span 19-20:  and => and
Span 7-8:  and => and
Span 43-44:  because => cause-01
Span 16-17:  between => between
Span 46-47:  contribution => contribute-01
Span 26-27:  contribution => contribute-01
Span 32-33:  dog => dog
Span 21-22:  dog => dog
Span 36-37:  dogs => dog
Span 23-24:  equally => equal
Span 6-7:  further => further
Span 42-43:  important => important
Span 18-19:  man => man
Span 40-41:  merely => mere
Span 15-16:  relationship => relationship
Span 0-1:  some => some
Span 12-13:  value => value-01
Span 3-4:  willing => will-02

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),contribution,contribute-01,false), Span(43,44,List(1),because,cause-01,false), Span(42,43,List(2),important,important,false), Span(40,41,List(3),merely,mere,false), Span(36,37,List(4),dogs,dog,false), Span(33,34,List(5),and,and,false), Span(32,33,List(6),dog,dog,false), Span(26,27,List(7),contribution,contribute-01,false), Span(23,24,List(8),equally,equal,false), Span(21,22,List(9),dog,dog,false), Span(19,20,List(10),and,and,false), Span(18,19,List(11),man,man,false), Span(16,17,List(12),between,between,false), Span(15,16,List(13),relationship,relationship,false), Span(12,13,List(14),value,value-01,false), Span(7,8,List(15),and,and,false), Span(6,7,List(16),further,further,false), Span(3,4,List(17),willing,will-02,false), Span(0,1,List(18),some,some,false)),Map(2 -> important, 5 -> and, 12 -> between, 15 -> and, 8 -> equal, 18 -> some, 7 -> contribute-01, 17 -> will-02, 1 -> cause-01, 4 -> dog, 11 -> man, 14 -> value-01, 6 -> dog, 0 -> contribute-01, 9 -> dog, 16 -> further, 3 -> mere, 10 -> and, 13 -> relationship),Map(e -> equal, w -> will-02, b -> between, d3 -> dog, m2 -> man, a3 -> and, s -> some, v -> value-01, m -> mere, d -> dog, a -> and, c3 -> contribute-01, d2 -> dog, r -> relationship, i -> important, a2 -> and, c -> contribute-01, f -> further, c2 -> cause-01))),[Ljava.lang.String;@4007a00b,Annotation([Ljava.lang.String;@349c5304,[Ljava.lang.String;@30e4698,[Ljava.lang.String;@1e3ca6b9),Annotation([Ljava.lang.String;@1fe5cb31,[Ljava.lang.String;@277f0e53,[Ledu.cmu.lti.nlp.amr.Dependency;@6857f67),Annotation([Ljava.lang.String;@266f4689,[Ljava.lang.String;@537fe015,[Ljava.lang.String;@7050ad86),Annotation([Ljava.lang.String;@40b07205,[Ljava.lang.String;@dc771,[Ledu.cmu.lti.nlp.amr.Entity;@8a0cbbe))
AMR:
(a / and, op, d2 / dog)
(a / and, op, i / important)
(a / and, op, v / value-01)
(a2 / and, op, r / relationship)
(a3 / and, op, a / and)
(b / between, op, d3 / dog)
(b / between, op, m2 / man)
(c2 / cause-01, ARG0, c / contribute-01)
(c2 / cause-01, ARG1, a / and)
(c2 / cause-01, mod, m / mere)
(c3 / contribute-01, ARG0, e / equal)
(c3 / contribute-01, ARG1, d3 / dog)
(r / relationship, mod, b / between)
(v / value-01, ARG0, d / dog)
(v / value-01, ARG1, a2 / and)
(v / value-01, ARG2, s / some)
(w / will-02, ARG1, f / further)
(w / will-02, ARG2, a3 / and)

Decoded in 460,733 microseconds
Sentence: these accounts are on the one hand carefully controlled literary structures whose themes and images derive from and elaborate material already presented in the text and whose artistic purpose is to give the reader the illusion of actual oneiric experience

Spans:
Span 1-2:  accounts => account
Span 37-38:  actual => actual
Span 20-21:  already => already
Span 25-26:  and => and
Span 17-18:  and => and
Span 13-14:  and => and
Span 27-28:  artistic => artistic
Span 7-8:  carefully => careful
Span 8-9:  controlled => control-01
Span 15-16:  derive => derive-01
Span 18-19:  elaborate => elaborate-01
Span 39-40:  experience => experience-01
Span 31-32:  give => give-01
Span 6-7:  hand => hand
Span 35-36:  illusion => illusion
Span 14-15:  images => image
Span 9-10:  literary => literary
Span 19-20:  material => material
Span 21-22:  presented => present-01
Span 28-29:  purpose => purpose
Span 33-34:  reader => (person :ARG0-of read-01)
Span 10-11:  structures => structure
Span 24-25:  text => text
Span 12-13:  themes => theme

Langrangian relaxation converged after 77 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),experience,experience-01,false), Span(37,38,List(1),actual,actual,false), Span(35,36,List(2),illusion,illusion,false), Span(33,34,List(4, 3),reader,(person :ARG0-of read-01),false), Span(31,32,List(5),give,give-01,false), Span(28,29,List(6),purpose,purpose,false), Span(27,28,List(7),artistic,artistic,false), Span(25,26,List(8),and,and,false), Span(24,25,List(9),text,text,false), Span(21,22,List(10),presented,present-01,false), Span(20,21,List(11),already,already,false), Span(19,20,List(12),material,material,false), Span(18,19,List(13),elaborate,elaborate-01,false), Span(17,18,List(14),and,and,false), Span(15,16,List(15),derive,derive-01,false), Span(14,15,List(16),images,image,false), Span(13,14,List(17),and,and,false), Span(12,13,List(18),themes,theme,false), Span(10,11,List(19),structures,structure,false), Span(9,10,List(20),literary,literary,false), Span(8,9,List(21),controlled,control-01,false), Span(7,8,List(22),carefully,careful,false), Span(6,7,List(23),hand,hand,false), Span(1,2,List(24),accounts,account,false)),Map(2 -> illusion, 5 -> give-01, 12 -> material, 8 -> and, 15 -> derive-01, 21 -> control-01, 18 -> theme, 24 -> account, 7 -> artistic, 1 -> actual, 17 -> and, 23 -> hand, 4 -> read-01, 11 -> already, 14 -> and, 20 -> literary, 6 -> purpose, 9 -> text, 0 -> experience-01, 22 -> careful, 16 -> image, 19 -> structure, 10 -> present-01, 3 -> person, 13 -> elaborate-01),Map(e -> experience-01, a7 -> account, h -> hand, t -> text, p2 -> purpose, e2 -> elaborate-01, a3 -> and, s -> structure, a6 -> and, m -> material, d -> derive-01, g -> give-01, p -> person, a -> actual, a5 -> and, i2 -> image, t2 -> theme, a2 -> artistic, r -> read-01, i -> illusion, c -> control-01, l -> literary, p3 -> present-01, c2 -> careful, a4 -> already))),[Ljava.lang.String;@113965b0,Annotation([Ljava.lang.String;@4f430ea5,[Ljava.lang.String;@3b769b4a,[Ljava.lang.String;@67cd35c5),Annotation([Ljava.lang.String;@51854dc0,[Ljava.lang.String;@6b3a210,[Ledu.cmu.lti.nlp.amr.Dependency;@7b54cbdf),Annotation([Ljava.lang.String;@7c14dcba,[Ljava.lang.String;@3da776fa,[Ljava.lang.String;@3d7436b5),Annotation([Ljava.lang.String;@18b3c498,[Ljava.lang.String;@422fe3d3,[Ledu.cmu.lti.nlp.amr.Entity;@56165397))
AMR:
(a3 / and, op, d / derive-01)
(a3 / and, op, i2 / image)
(a5 / and, op, c / control-01)
(a5 / and, op, e2 / elaborate-01)
(a5 / and, op, g / give-01)
(a6 / and, op, e2 / elaborate-01)
(c / control-01, ARG0, h / hand)
(c / control-01, ARG1, s / structure)
(c / control-01, ARG2, a7 / account)
(c / control-01, manner, c2 / careful)
(d / derive-01, ARG1, a6 / and)
(e / experience-01, ARG1, a2 / artistic)
(e / experience-01, mod, a / actual)
(e2 / elaborate-01, ARG0, t2 / theme)
(e2 / elaborate-01, ARG1, m / material)
(e2 / elaborate-01, manner, p3 / present-01)
(g / give-01, ARG0, p2 / purpose)
(g / give-01, ARG1, i / illusion)
(g / give-01, ARG2, p / person)
(i / illusion, domain, e / experience-01)
(p3 / present-01, ARG1, t / text)
(p3 / present-01, mod, a4 / already)
(r / read-01, ARG0, p / person)
(s / structure, mod, l / literary)

Decoded in 2,322,965 microseconds
Sentence: ive been following it for years and have never derived any practical advantage from any of your books

Spans:
Span 12-13:  advantage => advantage
Span 6-7:  and => and
Span 14-15:  any => any
Span 10-11:  any => any
Span 17-18:  books => book
Span 9-10:  derived => derive-01
Span 3-4:  it => it
Span 11-12:  practical => practical
Span 5-6:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),books,book,false), Span(14,15,List(1),any,any,false), Span(12,13,List(2),advantage,advantage,false), Span(11,12,List(3),practical,practical,false), Span(10,11,List(4),any,any,false), Span(9,10,List(5),derived,derive-01,false), Span(6,7,List(6),and,and,false), Span(5,6,List(8, 7),years,(temporal-quantity :unit year),false), Span(3,4,List(9),it,it,false)),Map(2 -> advantage, 5 -> derive-01, 8 -> year, 7 -> temporal-quantity, 1 -> any, 4 -> any, 6 -> and, 9 -> it, 0 -> book, 3 -> practical),Map(t -> temporal-quantity, b -> book, a3 -> any, d -> derive-01, y -> year, p -> practical, a -> any, i -> it, a2 -> advantage, a4 -> and))),[Ljava.lang.String;@53ca0aa8,Annotation([Ljava.lang.String;@7581c691,[Ljava.lang.String;@1b1395dc,[Ljava.lang.String;@22d3ac67),Annotation([Ljava.lang.String;@76dbb00d,[Ljava.lang.String;@51036271,[Ledu.cmu.lti.nlp.amr.Dependency;@35341244),Annotation([Ljava.lang.String;@6d9b49a5,[Ljava.lang.String;@6e0027da,[Ljava.lang.String;@4c3891a1),Annotation([Ljava.lang.String;@15e1081f,[Ljava.lang.String;@68dc3671,[Ledu.cmu.lti.nlp.amr.Entity;@517a6a7f))
AMR:
(a2 / advantage, mod, a3 / any)
(a2 / advantage, mod, p / practical)
(a2 / advantage, op, b / book)
(a4 / and, op, d / derive-01)
(b / book, mod, a / any)
(d / derive-01, ARG0, i / it)
(d / derive-01, ARG1, a2 / advantage)
(i / it, topic, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)

Decoded in 69,835 microseconds
Sentence: such displeasure does not derive from the increase in pensions for war widows although it may perhaps apply to the long delay in this being granted but rather to the abandonment by increasing numbers among all the main parties of parliaments prime constitutional role of keeping a check upon the executive

Spans:
Span 30-31:  abandonment => abandon-03
Span 35-36:  all => all
Span 34-35:  among => among
Span 17-18:  apply => apply-01
Span 26-27:  but => contrast-01
Span 42-43:  constitutional => constitution
Span 21-22:  delay => delay-01
Span 4-5:  derive => derive-01
Span 1-2:  displeasure => displease-01
Span 50-51:  executive => executive
Span 25-26:  granted => grant-01
Span 7-8:  increase => increase-01
Span 32-33:  increasing => increase-01
Span 14-15:  it => it
Span 37-38:  main => main
Span 15-16:  may => (date-entity :month 5)
Span 33-34:  numbers => number
Span 38-39:  parties => party
Span 9-10:  pensions => pension
Span 16-17:  perhaps => perhaps
Span 41-42:  prime => prime
Span 43-44:  role => role
Span 0-1:  such => such
Span 23-24:  this => this
Span 11-12:  war => war

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),executive,executive,false), Span(43,44,List(1),role,role,false), Span(42,43,List(2),constitutional,constitution,false), Span(41,42,List(3),prime,prime,false), Span(38,39,List(4),parties,party,false), Span(37,38,List(5),main,main,false), Span(35,36,List(6),all,all,false), Span(34,35,List(7),among,among,false), Span(33,34,List(8),numbers,number,false), Span(32,33,List(9),increasing,increase-01,false), Span(30,31,List(10),abandonment,abandon-03,false), Span(26,27,List(11),but,contrast-01,false), Span(25,26,List(12),granted,grant-01,false), Span(23,24,List(13),this,this,false), Span(21,22,List(14),delay,delay-01,false), Span(17,18,List(15),apply,apply-01,false), Span(16,17,List(16),perhaps,perhaps,false), Span(15,16,List(18, 17),may,(date-entity :month 5),false), Span(14,15,List(19),it,it,false), Span(11,12,List(20),war,war,false), Span(9,10,List(21),pensions,pension,false), Span(7,8,List(22),increase,increase-01,false), Span(4,5,List(23),derive,derive-01,false), Span(1,2,List(24),displeasure,displease-01,false), Span(0,1,List(25),such,such,false)),Map(2 -> constitution, 5 -> main, 12 -> grant-01, 8 -> number, 15 -> apply-01, 21 -> pension, 18 -> 5, 24 -> displease-01, 7 -> among, 1 -> role, 17 -> date-entity, 23 -> derive-01, 4 -> party, 11 -> contrast-01, 14 -> delay-01, 20 -> war, 6 -> all, 9 -> increase-01, 0 -> executive, 22 -> increase-01, 16 -> perhaps, 19 -> it, 10 -> abandon-03, 3 -> prime, 25 -> such, 13 -> this),Map(e -> executive, n -> number, w -> war, 5 -> 5, t -> this, d3 -> derive-01, p2 -> party, a3 -> abandon-03, s -> such, m -> main, d -> delay-01, i3 -> increase-01, g -> grant-01, p -> prime, a -> all, p4 -> pension, d2 -> date-entity, i2 -> it, i -> increase-01, a2 -> among, r -> role, c -> constitution, d4 -> displease-01, p3 -> perhaps, c2 -> contrast-01, a4 -> apply-01))),[Ljava.lang.String;@2c028bbe,Annotation([Ljava.lang.String;@5b247d84,[Ljava.lang.String;@38ac93db,[Ljava.lang.String;@4a1f2bee),Annotation([Ljava.lang.String;@447d3c46,[Ljava.lang.String;@7a003aca,[Ledu.cmu.lti.nlp.amr.Dependency;@2513e259),Annotation([Ljava.lang.String;@3c715413,[Ljava.lang.String;@3446ca65,[Ljava.lang.String;@1391c7b3),Annotation([Ljava.lang.String;@47cdc2ce,[Ljava.lang.String;@15b08736,[Ledu.cmu.lti.nlp.amr.Entity;@787cf559))
AMR:
(a2 / among, op, p2 / party)
(a3 / abandon-03, ARG1, i / increase-01)
(a4 / apply-01, ARG0, i2 / it)
(a4 / apply-01, ARG1, p2 / party)
(a4 / apply-01, ARG2, d / delay-01)
(a4 / apply-01, manner, p3 / perhaps)
(c2 / contrast-01, ARG1, g / grant-01)
(d / delay-01, ARG1, t / this)
(d2 / date-entity, domain, a4 / apply-01)
(d2 / date-entity, month, 5 / 5)
(d3 / derive-01, ARG1, d4 / displease-01)
(d3 / derive-01, ARG2, i3 / increase-01)
(d3 / derive-01, purpose, a4 / apply-01)
(d4 / displease-01, mod, s / such)
(g / grant-01, ARG1, e / executive)
(g / grant-01, ARG2, d / delay-01)
(i / increase-01, ARG1, n / number)
(i3 / increase-01, ARG1, p4 / pension)
(i3 / increase-01, location, w / war)
(n / number, poss, p2 / party)
(p2 / party, mod, m / main)
(p2 / party, quant, a / all)
(r / role, mod, c / constitution)
(r / role, mod, p / prime)
(r / role, poss, n / number)

Decoded in 1,188,569 microseconds
Sentence: rank explains it in terms of the male female dichotomy since modern psychology is not only masculine but derived from our neurotic type of man a great deal of its terminology originated from a misinterpretation of woman in terms of mans sexual ideology

Spans:
Span 17-18:  but => contrast-01
Span 27-28:  deal => deal-01
Span 18-19:  derived => derive-01
Span 1-2:  explains => explain-01
Span 8-9:  female => female
Span 26-27:  great => great
Span 42-43:  ideology => ideology
Span 2-3:  it => it
Span 7-8:  male => male
Span 24-25:  man => man
Span 11-12:  modern => modern
Span 15-16:  only => only
Span 31-32:  originated => originate-01
Span 12-13:  psychology => psychology
Span 41-42:  sexual => sexual
Span 10-11:  since => since
Span 38-39:  terms => term
Span 4-5:  terms => term
Span 22-23:  type => type
Span 36-37:  woman => woman

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),ideology,ideology,false), Span(41,42,List(1),sexual,sexual,false), Span(38,39,List(2),terms,term,false), Span(36,37,List(3),woman,woman,false), Span(31,32,List(4),originated,originate-01,false), Span(27,28,List(5),deal,deal-01,false), Span(26,27,List(6),great,great,false), Span(24,25,List(7),man,man,false), Span(22,23,List(8),type,type,false), Span(18,19,List(9),derived,derive-01,false), Span(17,18,List(10),but,contrast-01,false), Span(15,16,List(11),only,only,false), Span(12,13,List(12),psychology,psychology,false), Span(11,12,List(13),modern,modern,false), Span(10,11,List(14),since,since,false), Span(8,9,List(15),female,female,false), Span(7,8,List(16),male,male,false), Span(4,5,List(17),terms,term,false), Span(2,3,List(18),it,it,false), Span(1,2,List(19),explains,explain-01,false)),Map(2 -> term, 5 -> deal-01, 12 -> psychology, 15 -> female, 8 -> type, 18 -> it, 7 -> man, 17 -> term, 1 -> sexual, 4 -> originate-01, 11 -> only, 14 -> since, 6 -> great, 0 -> ideology, 9 -> derive-01, 16 -> male, 19 -> explain-01, 3 -> woman, 10 -> contrast-01, 13 -> modern),Map(e -> explain-01, m3 -> male, w -> woman, s2 -> since, t -> term, m2 -> modern, s -> sexual, d -> deal-01, m -> man, t3 -> term, g -> great, p -> psychology, d2 -> derive-01, o2 -> only, i2 -> it, t2 -> type, i -> ideology, c -> contrast-01, f -> female, o -> originate-01))),[Ljava.lang.String;@53cfe3db,Annotation([Ljava.lang.String;@757869d9,[Ljava.lang.String;@346d61cf,[Ljava.lang.String;@793077ec),Annotation([Ljava.lang.String;@5d11651c,[Ljava.lang.String;@21054100,[Ledu.cmu.lti.nlp.amr.Dependency;@5fee77ef),Annotation([Ljava.lang.String;@21041d1d,[Ljava.lang.String;@15136bda,[Ljava.lang.String;@2e0dc005),Annotation([Ljava.lang.String;@8b99fe2,[Ljava.lang.String;@52afb2e7,[Ledu.cmu.lti.nlp.amr.Entity;@d0a861a))
AMR:
(c / contrast-01, ARG1, m3 / male)
(c / contrast-01, ARG2, d2 / derive-01)
(d / deal-01, ARG1, w / woman)
(d / deal-01, mod, g / great)
(d2 / derive-01, ARG1, d / deal-01)
(d2 / derive-01, ARG2, t3 / term)
(d2 / derive-01, manner, t2 / type)
(e / explain-01, ARG0, m2 / modern)
(e / explain-01, ARG1, i2 / it)
(e / explain-01, manner, t3 / term)
(e / explain-01, time, s2 / since)
(f / female, mod, m3 / male)
(i / ideology, mod, s / sexual)
(m / man, mod, t2 / type)
(o / originate-01, ARG0, o2 / only)
(o / originate-01, ARG1, d / deal-01)
(o / originate-01, manner, t / term)
(p / psychology, mod, m2 / modern)
(t / term, topic, i / ideology)

Decoded in 307,883 microseconds
Sentence: some laws are presented to us as having from the beginning a separate and independent existence they are not derived by any process of analysis or development from the law as a whole

Spans:
Span 24-25:  analysis => analyze-01
Span 13-14:  and => and
Span 21-22:  any => any
Span 10-11:  beginning => begin-01
Span 19-20:  derived => derive-01
Span 26-27:  development => develop-02
Span 15-16:  existence => exist-01
Span 14-15:  independent => (depend-01 :polarity -)
Span 29-30:  law => law
Span 1-2:  laws => law
Span 25-26:  or => or
Span 3-4:  presented => present-01
Span 22-23:  process => process
Span 12-13:  separate => separate
Span 0-1:  some => some
Span 16-17:  they => they
Span 32-33:  whole => whole

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),whole,whole,false), Span(29,30,List(1),law,law,false), Span(26,27,List(2),development,develop-02,false), Span(25,26,List(3),or,or,false), Span(24,25,List(4),analysis,analyze-01,false), Span(22,23,List(5),process,process,false), Span(21,22,List(6),any,any,false), Span(19,20,List(7),derived,derive-01,false), Span(16,17,List(8),they,they,false), Span(15,16,List(9),existence,exist-01,false), Span(14,15,List(11, 10),independent,(depend-01 :polarity -),false), Span(13,14,List(12),and,and,false), Span(12,13,List(13),separate,separate,false), Span(10,11,List(14),beginning,begin-01,false), Span(3,4,List(15),presented,present-01,false), Span(1,2,List(16),laws,law,false), Span(0,1,List(17),some,some,false)),Map(2 -> develop-02, 5 -> process, 12 -> and, 15 -> present-01, 8 -> they, 7 -> derive-01, 17 -> some, 1 -> law, 4 -> analyze-01, 11 -> -, 14 -> begin-01, 6 -> any, 0 -> whole, 9 -> exist-01, 16 -> law, 3 -> or, 10 -> depend-01, 13 -> separate),Map(e -> exist-01, w -> whole, s2 -> some, b -> begin-01, t -> they, d3 -> depend-01, p2 -> present-01, a3 -> and, s -> separate, d -> develop-02, p -> process, a -> analyze-01, d2 -> derive-01, l2 -> law, a2 -> any, l -> law, o -> or))),[Ljava.lang.String;@4675bf45,Annotation([Ljava.lang.String;@5c606f26,[Ljava.lang.String;@3f21572b,[Ljava.lang.String;@25e1e86e),Annotation([Ljava.lang.String;@1262a130,[Ljava.lang.String;@9445fbe,[Ledu.cmu.lti.nlp.amr.Dependency;@67e9b7b2),Annotation([Ljava.lang.String;@211b3c6a,[Ljava.lang.String;@31b6421,[Ljava.lang.String;@7b4ab41e),Annotation([Ljava.lang.String;@65775cce,[Ljava.lang.String;@7f6e0c6c,[Ledu.cmu.lti.nlp.amr.Entity;@11f1c7d0))
AMR:
(a / analyze-01, ARG1, l2 / law)
(a3 / and, op, d3 / depend-01)
(a3 / and, op, s / separate)
(d / develop-02, ARG1, l / law)
(d2 / derive-01, ARG1, t / they)
(d2 / derive-01, ARG2, p / process)
(d3 / depend-01, ARG1, e / exist-01)
(d3 / depend-01, polarity, -)
(e / exist-01, ARG0, t / they)
(e / exist-01, ARG1, b / begin-01)
(l / law, domain, w / whole)
(l2 / law, quant, s2 / some)
(o / or, op, a / analyze-01)
(o / or, op, d / develop-02)
(p / process, mod, a2 / any)
(p / process, topic, a / analyze-01)
(p2 / present-01, ARG1, l2 / law)

Decoded in 687,646 microseconds
Sentence: the buildings derived their interest from these towers and from the complex interrelationship of the elements

Spans:
Span 8-9:  and => and
Span 1-2:  buildings => building
Span 11-12:  complex => complex
Span 2-3:  derived => derive-01
Span 15-16:  elements => element
Span 4-5:  interest => interest-01
Span 7-8:  towers => tower

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),elements,element,false), Span(11,12,List(1),complex,complex,false), Span(8,9,List(2),and,and,false), Span(7,8,List(3),towers,tower,false), Span(4,5,List(4),interest,interest-01,false), Span(2,3,List(5),derived,derive-01,false), Span(1,2,List(6),buildings,building,false)),Map(2 -> and, 5 -> derive-01, 1 -> complex, 4 -> interest-01, 6 -> building, 0 -> element, 3 -> tower),Map(e -> element, b -> building, t -> tower, d -> derive-01, a -> and, i -> interest-01, c -> complex))),[Ljava.lang.String;@187531e4,Annotation([Ljava.lang.String;@361e7c47,[Ljava.lang.String;@b713513,[Ljava.lang.String;@35537843),Annotation([Ljava.lang.String;@7afc920e,[Ljava.lang.String;@5bd91436,[Ledu.cmu.lti.nlp.amr.Dependency;@8be1456),Annotation([Ljava.lang.String;@77291e95,[Ljava.lang.String;@2c970551,[Ljava.lang.String;@6ede1fb5),Annotation([Ljava.lang.String;@38f3dcf0,[Ljava.lang.String;@122e2dc6,[Ledu.cmu.lti.nlp.amr.Entity;@15bf2b7d))
AMR:
(a / and, op, c / complex)
(d / derive-01, ARG0, a / and)
(d / derive-01, ARG1, i / interest-01)
(i / interest-01, ARG0, e / element)
(i / interest-01, ARG1, b / building)
(i / interest-01, ARG2, t / tower)

Decoded in 70,187 microseconds
Sentence: the permancy of bricks and mortar from which the nationwide anglia building society derived its strength is denied to its wallingford office right now

Spans:
Span 4-5:  and => and
Span 3-4:  bricks => brick
Span 11-12:  building => build-01
Span 17-18:  denied => deny-01
Span 13-14:  derived => derive-01
Span 5-6:  mortar => mortar
Span 9-10:  nationwide => nationwide
Span 23-24:  now => now
Span 21-22:  office => office
Span 12-13:  society => society
Span 15-16:  strength => strength

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),now,now,false), Span(21,22,List(1),office,office,false), Span(17,18,List(2),denied,deny-01,false), Span(15,16,List(3),strength,strength,false), Span(13,14,List(4),derived,derive-01,false), Span(12,13,List(5),society,society,false), Span(11,12,List(6),building,build-01,false), Span(9,10,List(7),nationwide,nationwide,false), Span(5,6,List(8),mortar,mortar,false), Span(4,5,List(9),and,and,false), Span(3,4,List(10),bricks,brick,false)),Map(2 -> deny-01, 5 -> society, 8 -> mortar, 7 -> nationwide, 1 -> office, 4 -> derive-01, 6 -> build-01, 9 -> and, 0 -> now, 10 -> brick, 3 -> strength),Map(n -> now, b -> build-01, s2 -> society, b2 -> brick, s -> strength, m -> mortar, d -> deny-01, a -> and, d2 -> derive-01, o -> office, n2 -> nationwide))),[Ljava.lang.String;@39c026b2,Annotation([Ljava.lang.String;@762c8dbc,[Ljava.lang.String;@670d6e40,[Ljava.lang.String;@22c1609b),Annotation([Ljava.lang.String;@45ad71f0,[Ljava.lang.String;@7e13674c,[Ledu.cmu.lti.nlp.amr.Dependency;@2be2ef3e),Annotation([Ljava.lang.String;@3fc8e5f4,[Ljava.lang.String;@1e7116e3,[Ljava.lang.String;@1295a0b2),Annotation([Ljava.lang.String;@1d690fa6,[Ljava.lang.String;@5c826a5f,[Ledu.cmu.lti.nlp.amr.Entity;@7615b26b))
AMR:
(a / and, op, b2 / brick)
(a / and, op, m / mortar)
(b / build-01, ARG0, s2 / society)
(b / build-01, ARG1, a / and)
(d / deny-01, ARG1, s / strength)
(d / deny-01, ARG4, o / office)
(d / deny-01, time, n / now)
(d2 / derive-01, ARG0, s2 / society)
(d2 / derive-01, ARG1, d / deny-01)
(s2 / society, mod, n2 / nationwide)

Decoded in 60,412 microseconds
Sentence: overlook the oddball cynos badge on the back cynos is derived from cynosure or centre of attention and the cute reardrive toyota coupe has plenty going for it

Spans:
Span 17-18:  and => and
Span 16-17:  attention => attention
Span 7-8:  back => back
Span 10-11:  derived => derive-01
Span 27-28:  it => it
Span 2-3:  oddball => oddball
Span 13-14:  or => or
Span 0-1:  overlook => overlook-01
Span 24-25:  plenty => plenty

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),it,it,false), Span(24,25,List(1),plenty,plenty,false), Span(17,18,List(2),and,and,false), Span(16,17,List(3),attention,attention,false), Span(13,14,List(4),or,or,false), Span(10,11,List(5),derived,derive-01,false), Span(7,8,List(6),back,back,false), Span(2,3,List(7),oddball,oddball,false), Span(0,1,List(8),overlook,overlook-01,false)),Map(2 -> and, 5 -> derive-01, 8 -> overlook-01, 7 -> oddball, 1 -> plenty, 4 -> or, 6 -> back, 0 -> it, 3 -> attention),Map(b -> back, o3 -> overlook-01, d -> derive-01, p -> plenty, a -> and, o2 -> oddball, a2 -> attention, i -> it, o -> or))),[Ljava.lang.String;@a74cb5e,Annotation([Ljava.lang.String;@79d38dae,[Ljava.lang.String;@2ffad8fe,[Ljava.lang.String;@7dbc244d),Annotation([Ljava.lang.String;@4af37bb8,[Ljava.lang.String;@373f9379,[Ledu.cmu.lti.nlp.amr.Dependency;@2eeb0945),Annotation([Ljava.lang.String;@48ada913,[Ljava.lang.String;@13743ac,[Ljava.lang.String;@533bd1d3),Annotation([Ljava.lang.String;@7c4c9e55,[Ljava.lang.String;@a2f1e34,[Ledu.cmu.lti.nlp.amr.Entity;@1b67ed25))
AMR:
(a / and, op, a2 / attention)
(a / and, op, d / derive-01)
(b / back, poss, a / and)
(d / derive-01, ARG1, i / it)
(d / derive-01, ARG2, o / or)
(o / or, op, o3 / overlook-01)
(o3 / overlook-01, ARG0, p / plenty)
(o3 / overlook-01, ARG1, o2 / oddball)

Decoded in 75,241 microseconds
Sentence: i am sorry to say that williams himself fails to derive the lesson to be recommended below from his own insight

Spans:
Span 16-17:  below => below
Span 10-11:  derive => derive-01
Span 8-9:  fails => fail-01
Span 0-1:  i => i
Span 12-13:  lesson => lesson
Span 15-16:  recommended => recommend-01
Span 4-5:  say => say-01
Span 2-3:  sorry => sorry-41

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),below,below,false), Span(15,16,List(1),recommended,recommend-01,false), Span(12,13,List(2),lesson,lesson,false), Span(10,11,List(3),derive,derive-01,false), Span(8,9,List(4),fails,fail-01,false), Span(4,5,List(5),say,say-01,false), Span(2,3,List(6),sorry,sorry-41,false), Span(0,1,List(7),i,i,false)),Map(2 -> lesson, 5 -> say-01, 7 -> i, 1 -> recommend-01, 4 -> fail-01, 6 -> sorry-41, 0 -> below, 3 -> derive-01),Map(s2 -> sorry-41, b -> below, s -> say-01, d -> derive-01, i -> i, r -> recommend-01, l -> lesson, f -> fail-01))),[Ljava.lang.String;@44022631,Annotation([Ljava.lang.String;@69197dd8,[Ljava.lang.String;@89525d0,[Ljava.lang.String;@77e57f16),Annotation([Ljava.lang.String;@7bfabad8,[Ljava.lang.String;@a00fa7f,[Ledu.cmu.lti.nlp.amr.Dependency;@463dacfa),Annotation([Ljava.lang.String;@7b27751c,[Ljava.lang.String;@5b79c06e,[Ljava.lang.String;@1648a4ad),Annotation([Ljava.lang.String;@7b336548,[Ljava.lang.String;@6b3e9928,[Ledu.cmu.lti.nlp.amr.Entity;@5ab94819))
AMR:
(d / derive-01, ARG1, l / lesson)
(f / fail-01, ARG1, s / say-01)
(f / fail-01, ARG2, d / derive-01)
(r / recommend-01, ARG1, l / lesson)
(r / recommend-01, manner, b / below)
(s2 / sorry-41, ARG1, i / i)
(s2 / sorry-41, ARG2, s / say-01)

Decoded in 72,423 microseconds
Sentence: much of its ancient prosperity derived from its magnificent shipyards has gone

Spans:
Span 3-4:  ancient => ancient
Span 5-6:  derived => derive-01
Span 8-9:  magnificent => magnificent
Span 0-1:  much => much
Span 4-5:  prosperity => prosper-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),magnificent,magnificent,false), Span(5,6,List(1),derived,derive-01,false), Span(4,5,List(2),prosperity,prosper-01,false), Span(3,4,List(3),ancient,ancient,false), Span(0,1,List(4),much,much,false)),Map(2 -> prosper-01, 1 -> derive-01, 4 -> much, 0 -> magnificent, 3 -> ancient),Map(m2 -> much, d -> derive-01, m -> magnificent, p -> prosper-01, a -> ancient))),[Ljava.lang.String;@3a2c8fd7,Annotation([Ljava.lang.String;@43978a17,[Ljava.lang.String;@11eb0eac,[Ljava.lang.String;@5f104764),Annotation([Ljava.lang.String;@25bf26fe,[Ljava.lang.String;@2899010e,[Ledu.cmu.lti.nlp.amr.Dependency;@551452f4),Annotation([Ljava.lang.String;@29523ccf,[Ljava.lang.String;@56164f3a,[Ljava.lang.String;@52ab94fd),Annotation([Ljava.lang.String;@7ec29871,[Ljava.lang.String;@19a663bb,[Ledu.cmu.lti.nlp.amr.Entity;@7add9724))
AMR:
(d / derive-01, ARG1, p / prosper-01)
(p / prosper-01, ARG0, m / magnificent)
(p / prosper-01, manner, a / ancient)
(p / prosper-01, part, m2 / much)

Decoded in 16,355 microseconds
Sentence:   another reason analysts are sceptical about hammerson derives from the extent to which john parry is seen not as a substitute for mr mason dash

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   another reason analysts are sceptical about hammerson derives from the extent to which john parry is seen not as a substitute for mr mason dash
myTokenized = another reason analysts are sceptical about hammerson derives from the extent to which john parry is seen not as a substitute for mr mason dash
i = 0
prefix = List(another)
regexr = \Qa\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the ceausescu version of transylvanian history relied heavily on an extreme school of romanian nationalist writing fashionable during the interwar period and which derived from prejudice rather than rational investigation

NER Entity: (thing :name (name :op "romanian"))
Spans:
Span 21-22:  and => and
Span 23-24:  derived => derive-01
Span 10-11:  extreme => extreme
Span 7-8:  heavily => heavy
Span 5-6:  history => history
Span 29-30:  investigation => investigate-01
Span 14-15:  nationalist => nationalist
Span 20-21:  period => period
Span 25-26:  prejudice => prejudice-01
Span 28-29:  rational => rational
Span 6-7:  relied => rely-01
Span 11-12:  school => school
Span 2-3:  version => version
Span 15-16:  writing => write-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),investigation,investigate-01,false), Span(28,29,List(1),rational,rational,false), Span(25,26,List(2),prejudice,prejudice-01,false), Span(23,24,List(3),derived,derive-01,false), Span(21,22,List(4),and,and,false), Span(20,21,List(5),period,period,false), Span(15,16,List(6),writing,write-01,false), Span(14,15,List(7),nationalist,nationalist,false), Span(11,12,List(8),school,school,false), Span(10,11,List(9),extreme,extreme,false), Span(7,8,List(10),heavily,heavy,false), Span(6,7,List(11),relied,rely-01,false), Span(5,6,List(12),history,history,false), Span(2,3,List(13),version,version,false)),Map(2 -> prejudice-01, 5 -> period, 12 -> history, 8 -> school, 7 -> nationalist, 1 -> rational, 4 -> and, 11 -> rely-01, 6 -> write-01, 0 -> investigate-01, 9 -> extreme, 3 -> derive-01, 10 -> heavy, 13 -> version),Map(e -> extreme, w -> write-01, n -> nationalist, h -> heavy, h2 -> history, p2 -> period, s -> school, v -> version, d -> derive-01, p -> prejudice-01, r2 -> rely-01, a -> and, i -> investigate-01, r -> rational))),[Ljava.lang.String;@71ac6d5,Annotation([Ljava.lang.String;@6ef3cd97,[Ljava.lang.String;@483ead69,[Ljava.lang.String;@aeaed8d),Annotation([Ljava.lang.String;@4591c994,[Ljava.lang.String;@6649373a,[Ledu.cmu.lti.nlp.amr.Dependency;@50c8f54c),Annotation([Ljava.lang.String;@39607a03,[Ljava.lang.String;@6cea7862,[Ljava.lang.String;@1585a1cb),Annotation([Ljava.lang.String;@78412176,[Ljava.lang.String;@7bfc07a7,[Ledu.cmu.lti.nlp.amr.Entity;@5f5aa488))
AMR:
(a / and, op, d / derive-01)
(d / derive-01, ARG1, p2 / period)
(d / derive-01, ARG2, p / prejudice-01)
(h2 / history, mod, v / version)
(i / investigate-01, ARG1, p / prejudice-01)
(i / investigate-01, manner, r / rational)
(r2 / rely-01, ARG0, v / version)
(r2 / rely-01, ARG1, a / and)
(r2 / rely-01, manner, h / heavy)
(s / school, mod, e / extreme)
(s / school, poss, n / nationalist)
(w / write-01, ARG0, h2 / history)
(w / write-01, ARG1, n / nationalist)

Decoded in 146,147 microseconds
Sentence: furthermore many would derive great pleasure and enrichment if they could look at it

Spans:
Span 6-7:  and => and
Span 10-11:  could => possible
Span 3-4:  derive => derive-01
Span 7-8:  enrichment => enrich-01
Span 4-5:  great => great
Span 13-14:  it => it
Span 1-2:  many => many
Span 5-6:  pleasure => pleasure
Span 9-10:  they => they

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),it,it,false), Span(10,11,List(1),could,possible,false), Span(9,10,List(2),they,they,false), Span(7,8,List(3),enrichment,enrich-01,false), Span(6,7,List(4),and,and,false), Span(5,6,List(5),pleasure,pleasure,false), Span(4,5,List(6),great,great,false), Span(3,4,List(7),derive,derive-01,false), Span(1,2,List(8),many,many,false)),Map(2 -> they, 5 -> pleasure, 8 -> many, 7 -> derive-01, 1 -> possible, 4 -> and, 6 -> great, 0 -> it, 3 -> enrich-01),Map(e -> enrich-01, t -> they, p2 -> pleasure, m -> many, d -> derive-01, g -> great, p -> possible, a -> and, i -> it))),[Ljava.lang.String;@37e80da0,Annotation([Ljava.lang.String;@63d6a00c,[Ljava.lang.String;@1fa5a709,[Ljava.lang.String;@3479501a),Annotation([Ljava.lang.String;@879f5e0,[Ljava.lang.String;@7efd4978,[Ledu.cmu.lti.nlp.amr.Dependency;@26e2a66a),Annotation([Ljava.lang.String;@6a1b8d17,[Ljava.lang.String;@36cc176d,[Ljava.lang.String;@11161136),Annotation([Ljava.lang.String;@3fc3f8fd,[Ljava.lang.String;@5b0fcabf,[Ledu.cmu.lti.nlp.amr.Entity;@69c7f04d))
AMR:
(a / and, op, e / enrich-01)
(a / and, op, p2 / pleasure)
(d / derive-01, ARG0, m / many)
(d / derive-01, ARG1, a / and)
(d / derive-01, ARG2, t / they)
(d / derive-01, condition, p / possible)
(e / enrich-01, ARG0, i / it)
(p2 / pleasure, mod, g / great)

Decoded in 149,652 microseconds
Sentence: perhaps one should allow that a certain knowledge derived from our experience of the appearances of things should be termed genuine knowledge

Spans:
Span 3-4:  allow => allow-01
Span 6-7:  certain => certain
Span 8-9:  derived => derive-01
Span 11-12:  experience => experience-01
Span 20-21:  genuine => genuine
Span 21-22:  knowledge => knowledge
Span 7-8:  knowledge => knowledge
Span 0-1:  perhaps => perhaps
Span 17-18:  should => recommend-01
Span 2-3:  should => recommend-01
Span 19-20:  termed => term-01
Span 16-17:  things => thing

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),knowledge,knowledge,false), Span(20,21,List(1),genuine,genuine,false), Span(19,20,List(2),termed,term-01,false), Span(17,18,List(3),should,recommend-01,false), Span(16,17,List(4),things,thing,false), Span(11,12,List(5),experience,experience-01,false), Span(8,9,List(6),derived,derive-01,false), Span(7,8,List(7),knowledge,knowledge,false), Span(6,7,List(8),certain,certain,false), Span(3,4,List(9),allow,allow-01,false), Span(2,3,List(10),should,recommend-01,false), Span(0,1,List(11),perhaps,perhaps,false)),Map(2 -> term-01, 5 -> experience-01, 8 -> certain, 7 -> knowledge, 1 -> genuine, 11 -> perhaps, 4 -> thing, 6 -> derive-01, 9 -> allow-01, 0 -> knowledge, 10 -> recommend-01, 3 -> recommend-01),Map(k2 -> knowledge, e -> experience-01, t -> term-01, k -> knowledge, d -> derive-01, p -> perhaps, r2 -> recommend-01, g -> genuine, a -> allow-01, t2 -> thing, r -> recommend-01, c -> certain))),[Ljava.lang.String;@4571857c,Annotation([Ljava.lang.String;@1ff2b382,[Ljava.lang.String;@76e72c30,[Ljava.lang.String;@4306404c),Annotation([Ljava.lang.String;@4f675ff4,[Ljava.lang.String;@bccb4e6,[Ledu.cmu.lti.nlp.amr.Dependency;@2c786e17),Annotation([Ljava.lang.String;@1683bed0,[Ljava.lang.String;@2364553c,[Ljava.lang.String;@1017e84b),Annotation([Ljava.lang.String;@11939c2e,[Ljava.lang.String;@71f29905,[Ledu.cmu.lti.nlp.amr.Entity;@6e1c51b4))
AMR:
(a / allow-01, ARG0, p / perhaps)
(a / allow-01, ARG1, r / recommend-01)
(d / derive-01, ARG1, k2 / knowledge)
(d / derive-01, ARG2, e / experience-01)
(e / experience-01, ARG1, t2 / thing)
(k / knowledge, mod, g / genuine)
(k2 / knowledge, mod, c / certain)
(r / recommend-01, ARG1, t / term-01)
(r2 / recommend-01, ARG1, a / allow-01)
(t / term-01, ARG1, k / knowledge)
(t / term-01, time, d / derive-01)

Decoded in 148,940 microseconds
Sentence: but if rights are given greater weight than is warranted by the interest they protect considered in itself this is presumably due to considerations which do not derive from concern for the wellbeing of the rightholder

Spans:
Span 0-1:  but => contrast-01
Span 29-30:  concern => concern-01
Span 23-24:  considerations => consider-01
Span 15-16:  considered => consider-01
Span 27-28:  derive => derive-01
Span 4-5:  given => give-01
Span 5-6:  greater => great
Span 12-13:  interest => interest-01
Span 20-21:  presumably => presume-01
Span 14-15:  protect => protect-01
Span 2-3:  rights => right
Span 13-14:  they => they
Span 18-19:  this => this
Span 9-10:  warranted => warrant-01
Span 6-7:  weight => weight

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),concern,concern-01,false), Span(27,28,List(1),derive,derive-01,false), Span(23,24,List(2),considerations,consider-01,false), Span(20,21,List(3),presumably,presume-01,false), Span(18,19,List(4),this,this,false), Span(15,16,List(5),considered,consider-01,false), Span(14,15,List(6),protect,protect-01,false), Span(13,14,List(7),they,they,false), Span(12,13,List(8),interest,interest-01,false), Span(9,10,List(9),warranted,warrant-01,false), Span(6,7,List(10),weight,weight,false), Span(5,6,List(11),greater,great,false), Span(4,5,List(12),given,give-01,false), Span(2,3,List(13),rights,right,false), Span(0,1,List(14),but,contrast-01,false)),Map(2 -> consider-01, 5 -> consider-01, 12 -> give-01, 8 -> interest-01, 7 -> they, 1 -> derive-01, 4 -> this, 11 -> great, 14 -> contrast-01, 6 -> protect-01, 0 -> concern-01, 9 -> warrant-01, 3 -> presume-01, 10 -> weight, 13 -> right),Map(w -> warrant-01, t -> this, p2 -> protect-01, c4 -> contrast-01, d -> derive-01, g2 -> give-01, p -> presume-01, g -> great, c3 -> consider-01, t2 -> they, w2 -> weight, r -> right, i -> interest-01, c -> concern-01, c2 -> consider-01))),[Ljava.lang.String;@2e1f86b7,Annotation([Ljava.lang.String;@17c57009,[Ljava.lang.String;@233e6b10,[Ljava.lang.String;@56e6f983),Annotation([Ljava.lang.String;@56073407,[Ljava.lang.String;@72e8e3b0,[Ledu.cmu.lti.nlp.amr.Dependency;@17bc72c0),Annotation([Ljava.lang.String;@5511a76c,[Ljava.lang.String;@7a06cf15,[Ljava.lang.String;@5505aa49),Annotation([Ljava.lang.String;@66eeca3a,[Ljava.lang.String;@471edaa1,[Ledu.cmu.lti.nlp.amr.Entity;@3aa3a481))
AMR:
(c2 / consider-01, ARG1, i / interest-01)
(c3 / consider-01, ARG0, t2 / they)
(c4 / contrast-01, ARG1, g2 / give-01)
(d / derive-01, ARG1, c2 / consider-01)
(d / derive-01, ARG2, c / concern-01)
(g2 / give-01, ARG1, w2 / weight)
(g2 / give-01, ARG2, r / right)
(g2 / give-01, purpose, w / warrant-01)
(p / presume-01, ARG1, i / interest-01)
(p2 / protect-01, ARG0, t2 / they)
(p2 / protect-01, ARG1, i / interest-01)
(w / warrant-01, ARG0, t / this)
(w / warrant-01, ARG1, i / interest-01)
(w2 / weight, mod, g / great)

Decoded in 178,133 microseconds
Sentence: but earle can derive comfort from the fact that it is impossible to sink as low as crosby stills and

Spans:
Span 19-20:  and => and
Span 0-1:  but => contrast-01
Span 2-3:  can => possible
Span 4-5:  comfort => comfort-01
Span 3-4:  derive => derive-01
Span 7-8:  fact => fact
Span 9-10:  it => it
Span 15-16:  low => low
Span 13-14:  sink => sink-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),and,and,false), Span(15,16,List(1),low,low,false), Span(13,14,List(2),sink,sink-01,false), Span(9,10,List(3),it,it,false), Span(7,8,List(4),fact,fact,false), Span(4,5,List(5),comfort,comfort-01,false), Span(3,4,List(6),derive,derive-01,false), Span(2,3,List(7),can,possible,false), Span(0,1,List(8),but,contrast-01,false)),Map(2 -> sink-01, 5 -> comfort-01, 8 -> contrast-01, 7 -> possible, 1 -> low, 4 -> fact, 6 -> derive-01, 0 -> and, 3 -> it),Map(s -> sink-01, d -> derive-01, p -> possible, a -> and, i -> it, c -> comfort-01, l -> low, f -> fact, c2 -> contrast-01))),[Ljava.lang.String;@4d852f3a,Annotation([Ljava.lang.String;@62dfb098,[Ljava.lang.String;@4bc2fdde,[Ljava.lang.String;@6ea920ad),Annotation([Ljava.lang.String;@21a0769d,[Ljava.lang.String;@2dcb4eaa,[Ledu.cmu.lti.nlp.amr.Dependency;@7e999262),Annotation([Ljava.lang.String;@1459a0dd,[Ljava.lang.String;@850179b,[Ljava.lang.String;@423dc560),Annotation([Ljava.lang.String;@65694399,[Ljava.lang.String;@61d525d2,[Ledu.cmu.lti.nlp.amr.Entity;@70a6302b))
AMR:
(c / comfort-01, ARG1, l / low)
(c2 / contrast-01, ARG1, p / possible)
(c2 / contrast-01, ARG2, d / derive-01)
(d / derive-01, ARG1, c / comfort-01)
(d / derive-01, ARG2, f / fact)
(p / possible, domain, s / sink-01)
(s / sink-01, ARG0, i / it)
(s / sink-01, ARG4, a / and)

Decoded in 39,770 microseconds
Sentence: later in the same decade when british filmmakers had lost their interest in international affairs the same actor george cole plays the inadequate gangleader in too many crooks 1959 a film whose insights into the cold realities of contemporary marriage derives from the story of a kidnapped wife who plots revenge when her husband shows himself less than interested in paying over her ransom

Spans:
Span 28-29:  1959 => (date-entity :year 1959)
Span 14-15:  affairs => affair
Span 35-36:  cold => cold
Span 38-39:  contemporary => contemporary
Span 27-28:  crooks => crook
Span 4-5:  decade => (temporal-quantity :unit decade)
Span 30-31:  film => film
Span 53-54:  husband => (have-rel-role-91 :ARG2 husband)
Span 22-23:  inadequate => (adequate :polarity -)
Span 11-12:  interest => interest-01
Span 58-59:  interested => interest-01
Span 13-14:  international => international
Span 46-47:  kidnapped => kidnap-01
Span 0-1:  later => late
Span 56-57:  less => less
Span 9-10:  lost => lose-02
Span 26-27:  many => many
Span 39-40:  marriage => marry-01
Span 60-61:  paying => pay-01
Span 20-21:  plays => play-02
Span 49-50:  plots => plot-01
Span 63-64:  ransom => ransom
Span 36-37:  realities => reality
Span 50-51:  revenge => revenge-00
Span 16-17:  same => same-41
Span 3-4:  same => same-41
Span 54-55:  shows => show-01
Span 43-44:  story => story
Span 25-26:  too => too
Span 47-48:  wife => (have-rel-role-91 :ARG2 wife)

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(63,64,List(0),ransom,ransom,false), Span(60,61,List(1),paying,pay-01,false), Span(58,59,List(2),interested,interest-01,false), Span(56,57,List(3),less,less,false), Span(54,55,List(4),shows,show-01,false), Span(53,54,List(6, 5),husband,(have-rel-role-91 :ARG2 husband),false), Span(50,51,List(7),revenge,revenge-00,false), Span(49,50,List(8),plots,plot-01,false), Span(47,48,List(10, 9),wife,(have-rel-role-91 :ARG2 wife),false), Span(46,47,List(11),kidnapped,kidnap-01,false), Span(43,44,List(12),story,story,false), Span(39,40,List(13),marriage,marry-01,false), Span(38,39,List(14),contemporary,contemporary,false), Span(36,37,List(15),realities,reality,false), Span(35,36,List(16),cold,cold,false), Span(30,31,List(17),film,film,false), Span(28,29,List(19, 18),1959,(date-entity :year 1959),false), Span(27,28,List(20),crooks,crook,false), Span(26,27,List(21),many,many,false), Span(25,26,List(22),too,too,false), Span(22,23,List(24, 23),inadequate,(adequate :polarity -),false), Span(20,21,List(25),plays,play-02,false), Span(16,17,List(26),same,same-41,false), Span(14,15,List(27),affairs,affair,false), Span(13,14,List(28),international,international,false), Span(11,12,List(29),interest,interest-01,false), Span(9,10,List(30),lost,lose-02,false), Span(4,5,List(32, 31),decade,(temporal-quantity :unit decade),false), Span(3,4,List(33),same,same-41,false), Span(0,1,List(34),later,late,false)),Map(30 -> lose-02, 2 -> interest-01, 5 -> have-rel-role-91, 33 -> same-41, 27 -> affair, 12 -> story, 8 -> plot-01, 15 -> reality, 21 -> many, 18 -> date-entity, 24 -> -, 7 -> revenge-00, 1 -> pay-01, 17 -> film, 23 -> adequate, 26 -> same-41, 4 -> show-01, 11 -> kidnap-01, 32 -> decade, 14 -> contemporary, 29 -> interest-01, 20 -> crook, 34 -> late, 28 -> international, 6 -> husband, 9 -> have-rel-role-91, 0 -> ransom, 22 -> too, 16 -> cold, 19 -> 1959, 10 -> wife, 3 -> less, 31 -> temporal-quantity, 25 -> play-02, 13 -> marry-01),Map(w -> wife, h -> have-rel-role-91, r3 -> reality, s2 -> story, h2 -> husband, t -> too, k -> kidnap-01, m2 -> many, p2 -> plot-01, l3 -> late, s -> show-01, s4 -> same-41, m -> marry-01, d -> date-entity, 1 -> 1959, i3 -> interest-01, r2 -> revenge-00, p -> pay-01, c3 -> crook, a -> adequate, d2 -> decade, t2 -> temporal-quantity, i2 -> international, l2 -> lose-02, a2 -> affair, i -> interest-01, r -> ransom, h3 -> have-rel-role-91, c -> contemporary, s3 -> same-41, l -> less, f -> film, p3 -> play-02, c2 -> cold))),[Ljava.lang.String;@45978e96,Annotation([Ljava.lang.String;@61123d8b,[Ljava.lang.String;@7486a276,[Ljava.lang.String;@33142cbe),Annotation([Ljava.lang.String;@71858824,[Ljava.lang.String;@75ad2db5,[Ledu.cmu.lti.nlp.amr.Dependency;@3c94026e),Annotation([Ljava.lang.String;@192ba2d4,[Ljava.lang.String;@7fcf1934,[Ljava.lang.String;@757fe679),Annotation([Ljava.lang.String;@1ff44e33,[Ljava.lang.String;@603a06a8,[Ledu.cmu.lti.nlp.amr.Entity;@18b30f3))
AMR:
(a / adequate, polarity, -)
(a2 / affair, mod, i2 / international)
(c3 / crook, quant, m2 / many)
(d / date-entity, year, 1 / 1959)
(h / have-rel-role-91, ARG1, f / film)
(h / have-rel-role-91, ARG2, h2 / husband)
(h3 / have-rel-role-91, ARG1, p2 / plot-01)
(h3 / have-rel-role-91, ARG2, w / wife)
(i / interest-01, ARG0, h / have-rel-role-91)
(i / interest-01, ARG1, p / pay-01)
(i / interest-01, degree, l / less)
(i3 / interest-01, ARG1, l3 / late)
(i3 / interest-01, ARG2, a2 / affair)
(k / kidnap-01, ARG1, t / too)
(l2 / lose-02, ARG1, i3 / interest-01)
(l2 / lose-02, location, t2 / temporal-quantity)
(m / marry-01, ARG1, p / pay-01)
(m / marry-01, time, c / contemporary)
(m2 / many, degree, t / too)
(p / pay-01, ARG1, r / ransom)
(p2 / plot-01, mod, k / kidnap-01)
(p3 / play-02, ARG1, a / adequate)
(p3 / play-02, ARG2, i3 / interest-01)
(p3 / play-02, duration, t / too)
(p3 / play-02, time, d / date-entity)
(r2 / revenge-00, ARG1, p2 / plot-01)
(r2 / revenge-00, time, s / show-01)
(r3 / reality, mod, c2 / cold)
(r3 / reality, topic, m / marry-01)
(s / show-01, ARG0, s2 / story)
(s / show-01, ARG1, i / interest-01)
(s3 / same-41, ARG1, m / marry-01)
(s4 / same-41, ARG1, t2 / temporal-quantity)
(t2 / temporal-quantity, unit, d2 / decade)

Decoded in 1,740,293 microseconds
Sentence: tradition  that which we have always done and believed and from which we have derived our social forms

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = tradition  that which we have always done and believed and from which we have derived our social forms
myTokenized = tradition that which we have always done and believed and from which we have derived our social forms
i = 1
prefix = List(tradition, that)
regexr = \Qt\E ?\Qr\E ?\Qa\E ?\Qd\E ?\Qi\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: this last idea is certainly not the least important for hume and putting the others aside he tries to locate the impression from which it is derived

Spans:
Span 11-12:  and => and
Span 15-16:  aside => aside
Span 4-5:  certainly => certain
Span 26-27:  derived => derive-01
Span 16-17:  he => he
Span 2-3:  idea => idea
Span 8-9:  important => important
Span 21-22:  impression => impression
Span 24-25:  it => it
Span 1-2:  last => last
Span 19-20:  locate => locate-02
Span 14-15:  others => other
Span 12-13:  putting => put-01
Span 0-1:  this => this
Span 17-18:  tries => try-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),derived,derive-01,false), Span(24,25,List(1),it,it,false), Span(21,22,List(2),impression,impression,false), Span(19,20,List(3),locate,locate-02,false), Span(17,18,List(4),tries,try-01,false), Span(16,17,List(5),he,he,false), Span(15,16,List(6),aside,aside,false), Span(14,15,List(7),others,other,false), Span(12,13,List(8),putting,put-01,false), Span(11,12,List(9),and,and,false), Span(8,9,List(10),important,important,false), Span(4,5,List(11),certainly,certain,false), Span(2,3,List(12),idea,idea,false), Span(1,2,List(13),last,last,false), Span(0,1,List(14),this,this,false)),Map(2 -> impression, 5 -> he, 12 -> idea, 8 -> put-01, 7 -> other, 1 -> it, 4 -> try-01, 11 -> certain, 14 -> this, 6 -> aside, 0 -> derive-01, 9 -> and, 3 -> locate-02, 10 -> important, 13 -> last),Map(h -> he, i4 -> idea, t -> try-01, d -> derive-01, i3 -> important, p -> put-01, a -> aside, t2 -> this, i2 -> impression, l2 -> last, i -> it, a2 -> and, c -> certain, l -> locate-02, o -> other))),[Ljava.lang.String;@18761e4d,Annotation([Ljava.lang.String;@72bf5dc6,[Ljava.lang.String;@71a5ad04,[Ljava.lang.String;@34021be6),Annotation([Ljava.lang.String;@7675b3b6,[Ljava.lang.String;@2969ae7c,[Ledu.cmu.lti.nlp.amr.Dependency;@593e6421),Annotation([Ljava.lang.String;@f1fe04d,[Ljava.lang.String;@75bee6fc,[Ljava.lang.String;@482ee6c8),Annotation([Ljava.lang.String;@7f31797d,[Ljava.lang.String;@91f3ec8,[Ledu.cmu.lti.nlp.amr.Entity;@6252c125))
AMR:
(a2 / and, op, i3 / important)
(a2 / and, op, p / put-01)
(c / certain, op, d / derive-01)
(d / derive-01, ARG0, h / he)
(d / derive-01, ARG1, i / it)
(i4 / idea, mod, l2 / last)
(i4 / idea, mod, t2 / this)
(l / locate-02, ARG0, h / he)
(l / locate-02, ARG1, i2 / impression)
(p / put-01, ARG0, l2 / last)
(p / put-01, ARG1, o / other)
(p / put-01, ARG2, h / he)
(t / try-01, ARG0, h / he)
(t / try-01, ARG1, a / aside)

Decoded in 230,224 microseconds
Sentence: the report suggests that rational credit use occurs when the utility derived from the immediate consumption outweighs the disutility of consumption foregone in the future

Spans:
Span 20-21:  consumption => consume-01
Span 15-16:  consumption => consume-01
Span 5-6:  credit => credit-02
Span 11-12:  derived => derive-01
Span 24-25:  future => future
Span 14-15:  immediate => immediate
Span 7-8:  occurs => occur-01
Span 16-17:  outweighs => outweigh-01
Span 4-5:  rational => rational
Span 1-2:  report => report
Span 2-3:  suggests => suggest-01
Span 6-7:  use => use-01
Span 10-11:  utility => utility

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),future,future,false), Span(20,21,List(1),consumption,consume-01,false), Span(16,17,List(2),outweighs,outweigh-01,false), Span(15,16,List(3),consumption,consume-01,false), Span(14,15,List(4),immediate,immediate,false), Span(11,12,List(5),derived,derive-01,false), Span(10,11,List(6),utility,utility,false), Span(7,8,List(7),occurs,occur-01,false), Span(6,7,List(8),use,use-01,false), Span(5,6,List(9),credit,credit-02,false), Span(4,5,List(10),rational,rational,false), Span(2,3,List(11),suggests,suggest-01,false), Span(1,2,List(12),report,report,false)),Map(2 -> outweigh-01, 5 -> derive-01, 12 -> report, 8 -> use-01, 7 -> occur-01, 1 -> consume-01, 4 -> immediate, 11 -> suggest-01, 6 -> utility, 0 -> future, 9 -> credit-02, 3 -> consume-01, 10 -> rational),Map(u2 -> use-01, s -> suggest-01, d -> derive-01, r2 -> report, c3 -> credit-02, o2 -> occur-01, i -> immediate, r -> rational, c -> consume-01, u -> utility, f -> future, o -> outweigh-01, c2 -> consume-01))),[Ljava.lang.String;@27069691,Annotation([Ljava.lang.String;@21871d9b,[Ljava.lang.String;@2da8bc4f,[Ljava.lang.String;@20e2fdf4),Annotation([Ljava.lang.String;@168eaf0a,[Ljava.lang.String;@7185c517,[Ledu.cmu.lti.nlp.amr.Dependency;@54ea33b),Annotation([Ljava.lang.String;@6dbe7935,[Ljava.lang.String;@7407bedc,[Ljava.lang.String;@28839907),Annotation([Ljava.lang.String;@57b3af58,[Ljava.lang.String;@55bce763,[Ledu.cmu.lti.nlp.amr.Entity;@64fb408e))
AMR:
(c / consume-01, ARG1, c2 / consume-01)
(c2 / consume-01, time, i / immediate)
(d / derive-01, ARG1, u / utility)
(d / derive-01, ARG2, c2 / consume-01)
(o / outweigh-01, ARG0, u2 / use-01)
(o / outweigh-01, ARG1, u / utility)
(o / outweigh-01, dayperiod, f / future)
(o2 / occur-01, ARG1, u2 / use-01)
(s / suggest-01, ARG0, r2 / report)
(s / suggest-01, ARG1, o2 / occur-01)
(u2 / use-01, ARG1, c3 / credit-02)
(u2 / use-01, mod, r / rational)

Decoded in 191,525 microseconds
Sentence: it produces the same feeling of shock that one derives from attending walter hoopers meetings of the c

Spans:
Span 11-12:  attending => attend-01
Span 17-18:  c => c
Span 4-5:  feeling => feel-01
Span 0-1:  it => it
Span 14-15:  meetings => meet-03
Span 1-2:  produces => produce-01
Span 3-4:  same => same-41
Span 6-7:  shock => shock-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),c,c,false), Span(14,15,List(1),meetings,meet-03,false), Span(11,12,List(2),attending,attend-01,false), Span(6,7,List(3),shock,shock-01,false), Span(4,5,List(4),feeling,feel-01,false), Span(3,4,List(5),same,same-41,false), Span(1,2,List(6),produces,produce-01,false), Span(0,1,List(7),it,it,false)),Map(2 -> attend-01, 5 -> same-41, 7 -> it, 1 -> meet-03, 4 -> feel-01, 6 -> produce-01, 0 -> c, 3 -> shock-01),Map(s2 -> same-41, s -> shock-01, m -> meet-03, p -> produce-01, a -> attend-01, i -> it, c -> c, f -> feel-01))),[Ljava.lang.String;@2b4b5e6d,Annotation([Ljava.lang.String;@61245c4f,[Ljava.lang.String;@1a28785c,[Ljava.lang.String;@56f5ed6e),Annotation([Ljava.lang.String;@2bb6fd5c,[Ljava.lang.String;@7ab3b96f,[Ledu.cmu.lti.nlp.amr.Dependency;@2d536558),Annotation([Ljava.lang.String;@3e228ba7,[Ljava.lang.String;@4dfea0cf,[Ljava.lang.String;@7ef9e0a),Annotation([Ljava.lang.String;@470a698,[Ljava.lang.String;@7fc9476e,[Ledu.cmu.lti.nlp.amr.Entity;@7770c84c))
AMR:
(a / attend-01, ARG0, s / shock-01)
(a / attend-01, ARG1, m / meet-03)
(f / feel-01, ARG1, s / shock-01)
(m / meet-03, ARG1, c / c)
(p / produce-01, ARG0, i / it)
(p / produce-01, ARG1, f / feel-01)
(s2 / same-41, ARG1, f / feel-01)

Decoded in 87,805 microseconds
Sentence:   the irradiation process uses either electron beam machines or gamma radiation which is derived from cobalt 60 a radio isotope also used in medical therapy

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the irradiation process uses either electron beam machines or gamma radiation which is derived from cobalt 60 a radio isotope also used in medical therapy
myTokenized = the irradiation process uses either electron beam machines or gamma radiation which is derived from cobalt 60 a radio isotope also used in medical therapy
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the concept of an integrated school combining courses for solo and choral singers and for solo pianists and accompanists is characteristic of hereford and derives largely from suzanne judelsons conviction that musicians of all standards and disciplines should have the opportunity to meet and learn from each other

Spans:
Span 33-34:  all => all
Span 43-44:  and => and
Span 35-36:  and => and
Span 23-24:  and => and
Span 17-18:  and => and
Span 13-14:  and => and
Span 10-11:  and => and
Span 20-21:  characteristic => characteristic-41
Span 6-7:  combining => combine-01
Span 1-2:  concept => concept
Span 29-30:  conviction => convict-01
Span 7-8:  courses => course
Span 36-37:  disciplines => discipline
Span 46-47:  each => each
Span 4-5:  integrated => integrate-01
Span 25-26:  largely => large
Span 44-45:  learn => learn-01
Span 31-32:  musicians => musician
Span 40-41:  opportunity => opportunity
Span 47-48:  other => other
Span 5-6:  school => school
Span 37-38:  should => recommend-01
Span 12-13:  singers => sing-01
Span 34-35:  standards => standard

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),other,other,false), Span(46,47,List(1),each,each,false), Span(44,45,List(2),learn,learn-01,false), Span(43,44,List(3),and,and,false), Span(40,41,List(4),opportunity,opportunity,false), Span(37,38,List(5),should,recommend-01,false), Span(36,37,List(6),disciplines,discipline,false), Span(35,36,List(7),and,and,false), Span(34,35,List(8),standards,standard,false), Span(33,34,List(9),all,all,false), Span(31,32,List(10),musicians,musician,false), Span(29,30,List(11),conviction,convict-01,false), Span(25,26,List(12),largely,large,false), Span(23,24,List(13),and,and,false), Span(20,21,List(14),characteristic,characteristic-41,false), Span(17,18,List(15),and,and,false), Span(13,14,List(16),and,and,false), Span(12,13,List(17),singers,sing-01,false), Span(10,11,List(18),and,and,false), Span(7,8,List(19),courses,course,false), Span(6,7,List(20),combining,combine-01,false), Span(5,6,List(21),school,school,false), Span(4,5,List(22),integrated,integrate-01,false), Span(1,2,List(23),concept,concept,false)),Map(2 -> learn-01, 5 -> recommend-01, 12 -> large, 15 -> and, 8 -> standard, 21 -> school, 18 -> and, 7 -> and, 17 -> sing-01, 1 -> each, 23 -> concept, 4 -> opportunity, 11 -> convict-01, 14 -> characteristic-41, 20 -> combine-01, 6 -> discipline, 22 -> integrate-01, 0 -> other, 9 -> all, 16 -> and, 19 -> course, 3 -> and, 10 -> musician, 13 -> and),Map(a7 -> and, e -> each, s2 -> sing-01, c4 -> combine-01, a3 -> all, s -> standard, a6 -> and, d -> discipline, m -> musician, c3 -> course, a -> and, a5 -> and, o2 -> opportunity, l2 -> large, i -> integrate-01, r -> recommend-01, a2 -> and, s3 -> school, c -> convict-01, l -> learn-01, o -> other, c2 -> characteristic-41, a4 -> and, c5 -> concept))),[Ljava.lang.String;@dc0d32e,Annotation([Ljava.lang.String;@6e68780f,[Ljava.lang.String;@ca2596a,[Ljava.lang.String;@769c44a0),Annotation([Ljava.lang.String;@d5da136,[Ljava.lang.String;@7e02e714,[Ledu.cmu.lti.nlp.amr.Dependency;@709112ad),Annotation([Ljava.lang.String;@44615597,[Ljava.lang.String;@523a4f93,[Ljava.lang.String;@723e6611),Annotation([Ljava.lang.String;@5e9f20af,[Ljava.lang.String;@211af1b1,[Ledu.cmu.lti.nlp.amr.Entity;@6ff1ac71))
AMR:
(a / and, op, l / learn-01)
(a2 / and, mod, a3 / all)
(a2 / and, op, c / convict-01)
(a2 / and, op, d / discipline)
(a2 / and, op, m / musician)
(a2 / and, op, r / recommend-01)
(a2 / and, op, s / standard)
(a5 / and, op, s2 / sing-01)
(a6 / and, op, r / recommend-01)
(a6 / and, op, s2 / sing-01)
(a7 / and, op, i / integrate-01)
(a7 / and, op, s2 / sing-01)
(c / convict-01, ARG0, l2 / large)
(c2 / characteristic-41, ARG0, c5 / concept)
(c2 / characteristic-41, ARG2, r / recommend-01)
(c4 / combine-01, ARG1, c3 / course)
(c4 / combine-01, ARG2, a6 / and)
(i / integrate-01, ARG1, s3 / school)
(l / learn-01, ARG1, a4 / and)
(o / other, mod, e / each)
(o2 / opportunity, purpose, a / and)
(r / recommend-01, ARG0, e / each)
(r / recommend-01, ARG1, o2 / opportunity)

Decoded in 883,428 microseconds
Sentence: insurance companies have been accused of systematically exploiting the vulnerability of the more seriously injured claimants by artificial delays from which the companies derive the added advantage of earning income on their invested funds in the meantime and of seeing claimants become increasingly less able to sustain a successful trial with the flux of time

Spans:
Span 44-45:  able => possible
Span 4-5:  accused => accuse-01
Span 25-26:  added => add-01
Span 26-27:  advantage => advantage
Span 37-38:  and => and
Span 17-18:  artificial => artificial
Span 41-42:  become => become-01
Span 22-23:  companies => company
Span 1-2:  companies => company
Span 18-19:  delays => delay-01
Span 23-24:  derive => derive-01
Span 28-29:  earning => earn-01
Span 7-8:  exploiting => exploit-01
Span 52-53:  flux => flux-01
Span 33-34:  funds => fund
Span 29-30:  income => income
Span 42-43:  increasingly => increase-01
Span 14-15:  injured => injure-01
Span 0-1:  insurance => insure-02
Span 32-33:  invested => invest-01
Span 43-44:  less => less
Span 36-37:  meantime => meantime
Span 39-40:  seeing => see-01
Span 13-14:  seriously => serious
Span 48-49:  successful => succeed-01
Span 46-47:  sustain => sustain-01
Span 6-7:  systematically => systematical
Span 54-55:  time => time
Span 49-50:  trial => trial
Span 9-10:  vulnerability => vulnerability

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),time,time,false), Span(52,53,List(1),flux,flux-01,false), Span(49,50,List(2),trial,trial,false), Span(48,49,List(3),successful,succeed-01,false), Span(46,47,List(4),sustain,sustain-01,false), Span(44,45,List(5),able,possible,false), Span(43,44,List(6),less,less,false), Span(42,43,List(7),increasingly,increase-01,false), Span(41,42,List(8),become,become-01,false), Span(39,40,List(9),seeing,see-01,false), Span(37,38,List(10),and,and,false), Span(36,37,List(11),meantime,meantime,false), Span(33,34,List(12),funds,fund,false), Span(32,33,List(13),invested,invest-01,false), Span(29,30,List(14),income,income,false), Span(28,29,List(15),earning,earn-01,false), Span(26,27,List(16),advantage,advantage,false), Span(25,26,List(17),added,add-01,false), Span(23,24,List(18),derive,derive-01,false), Span(22,23,List(19),companies,company,false), Span(18,19,List(20),delays,delay-01,false), Span(17,18,List(21),artificial,artificial,false), Span(14,15,List(22),injured,injure-01,false), Span(13,14,List(23),seriously,serious,false), Span(9,10,List(24),vulnerability,vulnerability,false), Span(7,8,List(25),exploiting,exploit-01,false), Span(6,7,List(26),systematically,systematical,false), Span(4,5,List(27),accused,accuse-01,false), Span(1,2,List(28),companies,company,false), Span(0,1,List(29),insurance,insure-02,false)),Map(2 -> trial, 5 -> possible, 27 -> accuse-01, 12 -> fund, 8 -> become-01, 15 -> earn-01, 21 -> artificial, 18 -> derive-01, 24 -> vulnerability, 7 -> increase-01, 1 -> flux-01, 17 -> add-01, 23 -> serious, 26 -> systematical, 4 -> sustain-01, 11 -> meantime, 14 -> income, 29 -> insure-02, 20 -> delay-01, 28 -> company, 6 -> less, 9 -> see-01, 0 -> time, 22 -> injure-01, 16 -> advantage, 19 -> company, 10 -> and, 3 -> succeed-01, 25 -> exploit-01, 13 -> invest-01),Map(s5 -> systematical, e -> earn-01, i4 -> injure-01, s2 -> sustain-01, t -> time, b -> become-01, e2 -> exploit-01, a3 -> add-01, s -> succeed-01, s4 -> serious, v -> vulnerability, m -> meantime, d -> derive-01, i3 -> income, p -> possible, a -> and, a5 -> accuse-01, d2 -> delay-01, t2 -> trial, i2 -> invest-01, i5 -> insure-02, i -> increase-01, a2 -> advantage, c -> company, s3 -> see-01, f2 -> fund, l -> less, f -> flux-01, c2 -> company, a4 -> artificial))),[Ljava.lang.String;@6af86f0e,Annotation([Ljava.lang.String;@5c4336ff,[Ljava.lang.String;@40cfceab,[Ljava.lang.String;@b095dcb),Annotation([Ljava.lang.String;@13ecc016,[Ljava.lang.String;@1c36ee92,[Ledu.cmu.lti.nlp.amr.Dependency;@5a68c1b6),Annotation([Ljava.lang.String;@1385c219,[Ljava.lang.String;@328a0152,[Ljava.lang.String;@25cc86a),Annotation([Ljava.lang.String;@1969a85c,[Ljava.lang.String;@67ac3d0c,[Ledu.cmu.lti.nlp.amr.Entity;@5cdc1400))
AMR:
(a / and, op, s3 / see-01)
(a3 / add-01, ARG1, a2 / advantage)
(a3 / add-01, time, e / earn-01)
(a5 / accuse-01, ARG1, c2 / company)
(a5 / accuse-01, ARG2, e2 / exploit-01)
(b / become-01, ARG1, c / company)
(b / become-01, ARG2, p / possible)
(d / derive-01, ARG0, c / company)
(d / derive-01, ARG1, a2 / advantage)
(d2 / delay-01, ARG1, d / derive-01)
(d2 / delay-01, mod, a4 / artificial)
(e / earn-01, ARG1, i3 / income)
(e2 / exploit-01, ARG1, v / vulnerability)
(e2 / exploit-01, manner, s5 / systematical)
(e2 / exploit-01, time, d2 / delay-01)
(f / flux-01, ARG1, t / time)
(f2 / fund, poss, m / meantime)
(i / increase-01, ARG1, p / possible)
(i2 / invest-01, ARG0, c / company)
(i2 / invest-01, ARG2, f2 / fund)
(i4 / injure-01, ARG1, d2 / delay-01)
(i4 / injure-01, degree, s4 / serious)
(i5 / insure-02, ARG0, c2 / company)
(p / possible, degree, l / less)
(p / possible, domain, s2 / sustain-01)
(s / succeed-01, ARG1, t2 / trial)
(s2 / sustain-01, ARG1, t2 / trial)
(s2 / sustain-01, prep-in, f / flux-01)
(s3 / see-01, ARG1, b / become-01)

Decoded in 1,605,911 microseconds
Sentence: sadly for barrow it is comprised of defeats although they could derive a scrap of satisfaction from yesterdays 626 reverse at wigan

NER Entity: (country :name (name :op "wigan"))
Spans:
Span 5-6:  comprised => comprise-01
Span 10-11:  could => possible
Span 11-12:  derive => derive-01
Span 3-4:  it => it
Span 19-20:  reverse => reverse-01
Span 15-16:  satisfaction => satisfy-01
Span 13-14:  scrap => scrap-01
Span 9-10:  they => they

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),reverse,reverse-01,false), Span(15,16,List(1),satisfaction,satisfy-01,false), Span(13,14,List(2),scrap,scrap-01,false), Span(11,12,List(3),derive,derive-01,false), Span(10,11,List(4),could,possible,false), Span(9,10,List(5),they,they,false), Span(5,6,List(6),comprised,comprise-01,false), Span(3,4,List(7),it,it,false)),Map(2 -> scrap-01, 5 -> they, 7 -> it, 1 -> satisfy-01, 4 -> possible, 6 -> comprise-01, 0 -> reverse-01, 3 -> derive-01),Map(t -> they, s2 -> scrap-01, s -> satisfy-01, d -> derive-01, p -> possible, i -> it, r -> reverse-01, c -> comprise-01))),[Ljava.lang.String;@74a53ba0,Annotation([Ljava.lang.String;@bedc134,[Ljava.lang.String;@2627430a,[Ljava.lang.String;@5ba25917),Annotation([Ljava.lang.String;@7f872400,[Ljava.lang.String;@14cbd69,[Ledu.cmu.lti.nlp.amr.Dependency;@55273929),Annotation([Ljava.lang.String;@219de6c,[Ljava.lang.String;@70598587,[Ljava.lang.String;@54d9bb1),Annotation([Ljava.lang.String;@2a28842f,[Ljava.lang.String;@49fe3f48,[Ledu.cmu.lti.nlp.amr.Entity;@52ecb5eb))
AMR:
(c / comprise-01, ARG0, t / they)
(c / comprise-01, ARG1, i / it)
(d / derive-01, ARG0, t / they)
(d / derive-01, ARG1, s2 / scrap-01)
(p / possible, domain, d / derive-01)
(r / reverse-01, subevent, d / derive-01)
(s2 / scrap-01, ARG1, s / satisfy-01)

Decoded in 43,792 microseconds
Sentence: the sulphates of course would  have been derived from the copious volumes of sulphur dioxide carried up  into the atmosphere during the eruption

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = the sulphates of course would  have been derived from the copious volumes of sulphur dioxide carried up  into the atmosphere during the eruption
myTokenized = the sulphates of course would have been derived from the copious volumes of sulphur dioxide carried up into the atmosphere during the eruption
i = 5
prefix = List(the, sulphates, of, course, would, have)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qu\E ?\Ql\E ?\Qp\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qs\E ?\Qo\E ?\Qf\E ?\Qc\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qs\E ?\Qe\E ?\Qw\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qh\E ?\Qa\E ?\Qv\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: to the extent that every person has reason to act in the interest of others his reasons derive from their goals

Spans:
Span 9-10:  act => act-02
Span 17-18:  derive => derive-01
Span 4-5:  every => every
Span 2-3:  extent => extent
Span 20-21:  goals => goal
Span 12-13:  interest => interest-01
Span 14-15:  others => other
Span 5-6:  person => person
Span 7-8:  reason => reason
Span 16-17:  reasons => reason

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),goals,goal,false), Span(17,18,List(1),derive,derive-01,false), Span(16,17,List(2),reasons,reason,false), Span(14,15,List(3),others,other,false), Span(12,13,List(4),interest,interest-01,false), Span(9,10,List(5),act,act-02,false), Span(7,8,List(6),reason,reason,false), Span(5,6,List(7),person,person,false), Span(4,5,List(8),every,every,false), Span(2,3,List(9),extent,extent,false)),Map(2 -> reason, 5 -> act-02, 8 -> every, 7 -> person, 1 -> derive-01, 4 -> interest-01, 6 -> reason, 9 -> extent, 0 -> goal, 3 -> other),Map(e -> every, e2 -> extent, d -> derive-01, p -> person, r2 -> reason, g -> goal, a -> act-02, i -> interest-01, r -> reason, o -> other))),[Ljava.lang.String;@7f68e0e7,Annotation([Ljava.lang.String;@3e859f0a,[Ljava.lang.String;@368c6997,[Ljava.lang.String;@3c68547b),Annotation([Ljava.lang.String;@65827638,[Ljava.lang.String;@581f8a98,[Ledu.cmu.lti.nlp.amr.Dependency;@7ec42e5a),Annotation([Ljava.lang.String;@1bf57bb,[Ljava.lang.String;@3918b6e2,[Ljava.lang.String;@58eccb7),Annotation([Ljava.lang.String;@6222053a,[Ljava.lang.String;@2785552b,[Ledu.cmu.lti.nlp.amr.Entity;@229a8e52))
AMR:
(a / act-02, ARG0, p / person)
(a / act-02, ARG1, d / derive-01)
(a / act-02, location, e2 / extent)
(a / act-02, manner, i / interest-01)
(d / derive-01, ARG0, r / reason)
(d / derive-01, ARG1, g / goal)
(i / interest-01, ARG1, r2 / reason)
(i / interest-01, ARG2, o / other)
(p / person, mod, e / every)

Decoded in 116,599 microseconds
Sentence: finding out that a husband is not only dressing up as a woman but deriving sexual pleasure from it perhaps masturbating whilst dressed in front of a mirror can threaten her own sexuality

Spans:
Span 13-14:  but => contrast-01
Span 28-29:  can => possible
Span 22-23:  dressed => dress-01
Span 8-9:  dressing => dress-01
Span 0-1:  finding => find-01
Span 24-25:  front => front
Span 4-5:  husband => (have-rel-role-91 :ARG2 husband)
Span 18-19:  it => it
Span 27-28:  mirror => mirror
Span 7-8:  only => only
Span 19-20:  perhaps => perhaps
Span 16-17:  pleasure => pleasure
Span 15-16:  sexual => sexual
Span 32-33:  sexuality => sexuality
Span 29-30:  threaten => threaten-01
Span 12-13:  woman => woman

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),sexuality,sexuality,false), Span(29,30,List(1),threaten,threaten-01,false), Span(28,29,List(2),can,possible,false), Span(27,28,List(3),mirror,mirror,false), Span(24,25,List(4),front,front,false), Span(22,23,List(5),dressed,dress-01,false), Span(19,20,List(6),perhaps,perhaps,false), Span(18,19,List(7),it,it,false), Span(16,17,List(8),pleasure,pleasure,false), Span(15,16,List(9),sexual,sexual,false), Span(13,14,List(10),but,contrast-01,false), Span(12,13,List(11),woman,woman,false), Span(8,9,List(12),dressing,dress-01,false), Span(7,8,List(13),only,only,false), Span(4,5,List(15, 14),husband,(have-rel-role-91 :ARG2 husband),false), Span(0,1,List(16),finding,find-01,false)),Map(2 -> possible, 5 -> dress-01, 12 -> dress-01, 15 -> husband, 8 -> pleasure, 7 -> it, 1 -> threaten-01, 4 -> front, 11 -> woman, 14 -> have-rel-role-91, 6 -> perhaps, 0 -> sexuality, 9 -> sexual, 16 -> find-01, 3 -> mirror, 10 -> contrast-01, 13 -> only),Map(w -> woman, h -> have-rel-role-91, h2 -> husband, s2 -> sexual, t -> threaten-01, p2 -> perhaps, s -> sexuality, m -> mirror, d -> dress-01, p -> possible, d2 -> dress-01, i -> it, c -> contrast-01, f2 -> find-01, f -> front, o -> only, p3 -> pleasure))),[Ljava.lang.String;@50f5bb3d,Annotation([Ljava.lang.String;@34d7cb51,[Ljava.lang.String;@43654df1,[Ljava.lang.String;@2fe02bc8),Annotation([Ljava.lang.String;@265a7006,[Ljava.lang.String;@7b70ad95,[Ledu.cmu.lti.nlp.amr.Dependency;@22945083),Annotation([Ljava.lang.String;@3731da31,[Ljava.lang.String;@29ebe346,[Ljava.lang.String;@3d961e2a),Annotation([Ljava.lang.String;@4a9676fc,[Ljava.lang.String;@5c5dc0a5,[Ledu.cmu.lti.nlp.amr.Entity;@f12c003))
AMR:
(c / contrast-01, ARG1, f2 / find-01)
(c / contrast-01, ARG2, p3 / pleasure)
(d / dress-01, ARG0, i / it)
(d / dress-01, ARG1, p / possible)
(d / dress-01, ARG2, f / front)
(d2 / dress-01, ARG0, h2 / husband)
(d2 / dress-01, ARG1, c / contrast-01)
(d2 / dress-01, ARG2, w / woman)
(d2 / dress-01, mod, o / only)
(h / have-rel-role-91, ARG1, p2 / perhaps)
(h / have-rel-role-91, ARG2, h2 / husband)
(p / possible, domain, t / threaten-01)
(p3 / pleasure, mod, s2 / sexual)
(p3 / pleasure, poss, i / it)
(s / sexuality, poss, m / mirror)
(t / threaten-01, ARG1, s / sexuality)

Decoded in 358,092 microseconds
Sentence: much of the power and prestige it went on to gain derived from the fact that unlike other such organizations which have come and gone it managed to keep its numbers extremely low thus giving this claim some credibility

Spans:
Span 23-24:  and => and
Span 4-5:  and => and
Span 36-37:  claim => claim-01
Span 38-39:  credibility => credibility
Span 11-12:  derived => derive-01
Span 31-32:  extremely => extreme
Span 14-15:  fact => fact
Span 10-11:  gain => gain-02
Span 25-26:  it => it
Span 6-7:  it => it
Span 32-33:  low => low
Span 26-27:  managed => manage-02
Span 0-1:  much => much
Span 30-31:  numbers => number
Span 19-20:  organizations => organization
Span 17-18:  other => other
Span 3-4:  power => power
Span 5-6:  prestige => prestige
Span 37-38:  some => some
Span 18-19:  such => such
Span 35-36:  this => this

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),credibility,credibility,false), Span(37,38,List(1),some,some,false), Span(36,37,List(2),claim,claim-01,false), Span(35,36,List(3),this,this,false), Span(32,33,List(4),low,low,false), Span(31,32,List(5),extremely,extreme,false), Span(30,31,List(6),numbers,number,false), Span(26,27,List(7),managed,manage-02,false), Span(25,26,List(8),it,it,false), Span(23,24,List(9),and,and,false), Span(19,20,List(10),organizations,organization,false), Span(18,19,List(11),such,such,false), Span(17,18,List(12),other,other,false), Span(14,15,List(13),fact,fact,false), Span(11,12,List(14),derived,derive-01,false), Span(10,11,List(15),gain,gain-02,false), Span(6,7,List(16),it,it,false), Span(5,6,List(17),prestige,prestige,false), Span(4,5,List(18),and,and,false), Span(3,4,List(19),power,power,false), Span(0,1,List(20),much,much,false)),Map(2 -> claim-01, 5 -> extreme, 12 -> other, 15 -> gain-02, 8 -> it, 18 -> and, 7 -> manage-02, 17 -> prestige, 1 -> some, 4 -> low, 11 -> such, 14 -> derive-01, 20 -> much, 6 -> number, 0 -> credibility, 9 -> and, 16 -> it, 19 -> power, 3 -> this, 10 -> organization, 13 -> fact),Map(e -> extreme, n -> number, s2 -> such, t -> this, m2 -> much, p2 -> power, s -> some, d -> derive-01, m -> manage-02, p -> prestige, g -> gain-02, a -> and, o2 -> other, i2 -> it, a2 -> and, i -> it, c -> credibility, l -> low, f -> fact, o -> organization, c2 -> claim-01))),[Ljava.lang.String;@24a5031d,Annotation([Ljava.lang.String;@4d6f77b6,[Ljava.lang.String;@511c7571,[Ljava.lang.String;@23627751),Annotation([Ljava.lang.String;@158778fd,[Ljava.lang.String;@71183515,[Ledu.cmu.lti.nlp.amr.Dependency;@6c452fb4),Annotation([Ljava.lang.String;@323f09f4,[Ljava.lang.String;@48a68bf1,[Ljava.lang.String;@2e2da07a),Annotation([Ljava.lang.String;@3582c145,[Ljava.lang.String;@1b5eb475,[Ledu.cmu.lti.nlp.amr.Entity;@66997b5c))
AMR:
(a / and, op, c2 / claim-01)
(a / and, op, m / manage-02)
(a / and, op, o / organization)
(a2 / and, degree, m2 / much)
(a2 / and, op, p / prestige)
(a2 / and, op, p2 / power)
(c / credibility, quant, s / some)
(c / credibility, time, c2 / claim-01)
(d / derive-01, ARG0, i / it)
(d / derive-01, ARG1, t / this)
(d / derive-01, ARG2, f / fact)
(g / gain-02, ARG0, i2 / it)
(g / gain-02, ARG1, d / derive-01)
(g / gain-02, ARG2, p2 / power)
(l / low, degree, e / extreme)
(m / manage-02, ARG0, i / it)
(m / manage-02, ARG1, l / low)
(n / number, poss, i / it)
(o / organization, mod, o2 / other)
(o / organization, mod, s2 / such)

Decoded in 545,995 microseconds
Sentence: steve reichs different trains took us into the realms of documentary its basic melodic ideas derived from speech samples taken from recordings of the composers governess three holocaust survivors and a retired pullman porter all recollecting wartime train journeys

Spans:
Span 34-35:  all => all
Span 29-30:  and => and
Span 12-13:  basic => basic
Span 15-16:  derived => derive-01
Span 2-3:  different => differ-02
Span 10-11:  documentary => documentary
Span 27-28:  holocaust => holocaust
Span 14-15:  ideas => idea
Span 8-9:  realms => realm
Span 31-32:  retired => retire-01
Span 18-19:  samples => sample-01
Span 17-18:  speech => speech
Span 28-29:  survivors => (person :ARG0-of survive-01)
Span 26-27:  three => 3
Span 37-38:  train => train
Span 3-4:  trains => train
Span 36-37:  wartime => wartime

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),train,train,false), Span(36,37,List(1),wartime,wartime,false), Span(34,35,List(2),all,all,false), Span(31,32,List(3),retired,retire-01,false), Span(29,30,List(4),and,and,false), Span(28,29,List(6, 5),survivors,(person :ARG0-of survive-01),false), Span(27,28,List(7),holocaust,holocaust,false), Span(26,27,List(8),three,3,false), Span(18,19,List(9),samples,sample-01,false), Span(17,18,List(10),speech,speech,false), Span(15,16,List(11),derived,derive-01,false), Span(14,15,List(12),ideas,idea,false), Span(12,13,List(13),basic,basic,false), Span(10,11,List(14),documentary,documentary,false), Span(8,9,List(15),realms,realm,false), Span(3,4,List(16),trains,train,false), Span(2,3,List(17),different,differ-02,false)),Map(2 -> all, 5 -> person, 12 -> idea, 15 -> realm, 8 -> 3, 7 -> holocaust, 17 -> differ-02, 1 -> wartime, 4 -> and, 11 -> derive-01, 14 -> documentary, 6 -> survive-01, 0 -> train, 9 -> sample-01, 16 -> train, 3 -> retire-01, 10 -> speech, 13 -> basic),Map(w -> wartime, h -> holocaust, s2 -> sample-01, b -> basic, t -> train, d3 -> differ-02, s -> survive-01, d -> derive-01, r2 -> realm, p -> person, a -> all, d2 -> documentary, t2 -> train, r -> retire-01, a2 -> and, i -> idea, s3 -> speech, 3 -> 3))),[Ljava.lang.String;@667209a3,Annotation([Ljava.lang.String;@48d6e0e0,[Ljava.lang.String;@1345b77c,[Ljava.lang.String;@461137c6),Annotation([Ljava.lang.String;@1464cc1a,[Ljava.lang.String;@6593c96b,[Ledu.cmu.lti.nlp.amr.Dependency;@498cc3e6),Annotation([Ljava.lang.String;@389156c3,[Ljava.lang.String;@4dd73938,[Ljava.lang.String;@6cedb374),Annotation([Ljava.lang.String;@69a0bc8a,[Ljava.lang.String;@37ba3e33,[Ledu.cmu.lti.nlp.amr.Entity;@2449a2da))
AMR:
(a2 / and, op, p / person)
(d / derive-01, ARG0, d2 / documentary)
(d / derive-01, ARG1, i / idea)
(d / derive-01, ARG2, s2 / sample-01)
(d2 / documentary, quant, r2 / realm)
(d3 / differ-02, ARG0, t2 / train)
(d3 / differ-02, ARG1, r2 / realm)
(i / idea, mod, b / basic)
(p / person, mod, h / holocaust)
(p / person, quant, 3 / 3)
(r / retire-01, ARG0, p / person)
(r / retire-01, ARG1, i / idea)
(s / survive-01, ARG0, p / person)
(s2 / sample-01, ARG1, s3 / speech)
(t / train, mod, w / wartime)
(w / wartime, mod, a / all)
(w / wartime, op, d / derive-01)

Decoded in 464,263 microseconds
Sentence: but the main problem derives from joffeacute

Spans:
Span 0-1:  but => contrast-01
Span 2-3:  main => main
Span 3-4:  problem => problem

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),problem,problem,false), Span(2,3,List(1),main,main,false), Span(0,1,List(2),but,contrast-01,false)),Map(2 -> contrast-01, 1 -> main, 0 -> problem),Map(m -> main, p -> problem, c -> contrast-01))),[Ljava.lang.String;@5e62a8d2,Annotation([Ljava.lang.String;@1f39a367,[Ljava.lang.String;@116cf35,[Ljava.lang.String;@7da122),Annotation([Ljava.lang.String;@37ddbf6e,[Ljava.lang.String;@3f42eb69,[Ledu.cmu.lti.nlp.amr.Dependency;@426d5af1),Annotation([Ljava.lang.String;@196da649,[Ljava.lang.String;@6dc00fa9,[Ljava.lang.String;@5c445889),Annotation([Ljava.lang.String;@b10b9b2,[Ljava.lang.String;@770f5aca,[Ledu.cmu.lti.nlp.amr.Entity;@1111c0d7))
AMR:
(c / contrast-01, ARG2, p / problem)
(p / problem, mod, m / main)

Decoded in 6,496 microseconds
Sentence: their magic over the spanish masses derives from their remoteness

Spans:
Span 1-2:  magic => magic
Span 5-6:  masses => mass
Span 9-10:  remoteness => remoteness
Span 4-5:  spanish => (language :name (name :op "Spanish"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),remoteness,remoteness,false), Span(5,6,List(1),masses,mass,false), Span(4,5,List(4, 3, 2),spanish,(language :name (name :op "Spanish")),false), Span(1,2,List(5),magic,magic,false)),Map(2 -> language, 5 -> magic, 1 -> mass, 4 -> "Spanish", 0 -> remoteness, 3 -> name),Map(n -> name, m2 -> magic, m -> mass, r -> remoteness, l -> language))),[Ljava.lang.String;@248b6c02,Annotation([Ljava.lang.String;@3d600a0c,[Ljava.lang.String;@6c33b94e,[Ljava.lang.String;@37cae761),Annotation([Ljava.lang.String;@6a1cade4,[Ljava.lang.String;@dc8a29,[Ledu.cmu.lti.nlp.amr.Dependency;@ef28a30),Annotation([Ljava.lang.String;@554e5cfa,[Ljava.lang.String;@bba4cd7,[Ljava.lang.String;@740abd44),Annotation([Ljava.lang.String;@6d0ff6e0,[Ljava.lang.String;@33192410,[Ledu.cmu.lti.nlp.amr.Entity;@378eb0a5))
AMR:
(l / language, name, n / name)
(m / mass, medium, l / language)
(n / name, op, "Spanish")
(r / remoteness, poss, m / mass)
(r / remoteness, poss, m2 / magic)

Decoded in 13,600 microseconds
Sentence: perhaps levis impatience with obscurity his desire to communicate at all costs derived from the absolute lack of communication at auschwitz where there was only as he said a debased vocabulary full of savage imperatives insults blasphemies and imprecations

Spans:
Span 15-16:  absolute => absolute
Span 10-11:  all => all
Span 37-38:  and => and
Span 8-9:  communicate => communicate-01
Span 18-19:  communication => communicate-01
Span 11-12:  costs => cost-01
Span 12-13:  derived => derive-01
Span 6-7:  desire => desire-01
Span 31-32:  full => full
Span 26-27:  he => he
Span 35-36:  insults => insult-01
Span 16-17:  lack => lack-01
Span 24-25:  only => only
Span 0-1:  perhaps => perhaps
Span 27-28:  said => say-01
Span 33-34:  savage => savage

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),and,and,false), Span(35,36,List(1),insults,insult-01,false), Span(33,34,List(2),savage,savage,false), Span(31,32,List(3),full,full,false), Span(27,28,List(4),said,say-01,false), Span(26,27,List(5),he,he,false), Span(24,25,List(6),only,only,false), Span(18,19,List(7),communication,communicate-01,false), Span(16,17,List(8),lack,lack-01,false), Span(15,16,List(9),absolute,absolute,false), Span(12,13,List(10),derived,derive-01,false), Span(11,12,List(11),costs,cost-01,false), Span(10,11,List(12),all,all,false), Span(8,9,List(13),communicate,communicate-01,false), Span(6,7,List(14),desire,desire-01,false), Span(0,1,List(15),perhaps,perhaps,false)),Map(2 -> savage, 5 -> he, 12 -> all, 15 -> perhaps, 8 -> lack-01, 7 -> communicate-01, 1 -> insult-01, 4 -> say-01, 11 -> cost-01, 14 -> desire-01, 6 -> only, 0 -> and, 9 -> absolute, 3 -> full, 10 -> derive-01, 13 -> communicate-01),Map(h -> he, s2 -> say-01, a3 -> all, s -> savage, d -> derive-01, p -> perhaps, c3 -> communicate-01, a -> and, d2 -> desire-01, i -> insult-01, a2 -> absolute, c -> communicate-01, l -> lack-01, f -> full, o -> only, c2 -> cost-01))),[Ljava.lang.String;@22967f8e,Annotation([Ljava.lang.String;@4690555f,[Ljava.lang.String;@2dd4f42a,[Ljava.lang.String;@77ea08e7),Annotation([Ljava.lang.String;@25eeb332,[Ljava.lang.String;@5a36ab12,[Ledu.cmu.lti.nlp.amr.Dependency;@3b195903),Annotation([Ljava.lang.String;@7d22f244,[Ljava.lang.String;@14f8e8b,[Ljava.lang.String;@e174859),Annotation([Ljava.lang.String;@1a8ed249,[Ljava.lang.String;@168fc43e,[Ledu.cmu.lti.nlp.amr.Entity;@389cce04))
AMR:
(a / and, op, l / lack-01)
(c2 / cost-01, ARG1, s / savage)
(c3 / communicate-01, ARG1, p / perhaps)
(c3 / communicate-01, ARG2, c2 / cost-01)
(d / derive-01, ARG1, c2 / cost-01)
(d / derive-01, ARG2, l / lack-01)
(d2 / desire-01, ARG0, a3 / all)
(d2 / desire-01, ARG1, c3 / communicate-01)
(i / insult-01, ARG0, h / he)
(i / insult-01, ARG1, a / and)
(l / lack-01, ARG1, c / communicate-01)
(l / lack-01, mod, a2 / absolute)
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, f / full)
(s2 / say-01, mod, o / only)

Decoded in 303,379 microseconds
Sentence: i believe staff anxieties about me watching the procedure derived from an assumption that if i watched the horror film of my own mutilation i would suffer

Spans:
Span 1-2:  believe => believe-01
Span 9-10:  derived => derive-01
Span 19-20:  film => film
Span 18-19:  horror => horror
Span 24-25:  i => i
Span 15-16:  i => i
Span 0-1:  i => i
Span 8-9:  procedure => procedure
Span 2-3:  staff => (person :ARG2-of staff-01)
Span 26-27:  suffer => suffer-01
Span 16-17:  watched => watch-01
Span 6-7:  watching => watch-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),suffer,suffer-01,false), Span(24,25,List(1),i,i,false), Span(19,20,List(2),film,film,false), Span(18,19,List(3),horror,horror,false), Span(16,17,List(4),watched,watch-01,false), Span(15,16,List(5),i,i,false), Span(9,10,List(6),derived,derive-01,false), Span(8,9,List(7),procedure,procedure,false), Span(6,7,List(8),watching,watch-01,false), Span(2,3,List(10, 9),staff,(person :ARG2-of staff-01),false), Span(1,2,List(11),believe,believe-01,false), Span(0,1,List(12),i,i,false)),Map(2 -> film, 5 -> i, 12 -> i, 8 -> watch-01, 7 -> procedure, 1 -> i, 4 -> watch-01, 11 -> believe-01, 6 -> derive-01, 0 -> suffer-01, 9 -> person, 3 -> horror, 10 -> staff-01),Map(w -> watch-01, h -> horror, s2 -> staff-01, b -> believe-01, p2 -> person, s -> suffer-01, d -> derive-01, i3 -> i, p -> procedure, i2 -> i, w2 -> watch-01, i -> i, f -> film))),[Ljava.lang.String;@3e9985a5,Annotation([Ljava.lang.String;@511533be,[Ljava.lang.String;@46f82888,[Ljava.lang.String;@4e2d1d1e),Annotation([Ljava.lang.String;@73d2c4aa,[Ljava.lang.String;@126db04e,[Ledu.cmu.lti.nlp.amr.Dependency;@5f51da55),Annotation([Ljava.lang.String;@76d53356,[Ljava.lang.String;@271d900d,[Ljava.lang.String;@5dc598b),Annotation([Ljava.lang.String;@457ab7ae,[Ljava.lang.String;@7bb12424,[Ledu.cmu.lti.nlp.amr.Entity;@2abbf6ed))
AMR:
(b / believe-01, ARG0, i3 / i)
(b / believe-01, manner, w2 / watch-01)
(d / derive-01, ARG1, p / procedure)
(f / film, mod, h / horror)
(s / suffer-01, ARG0, i / i)
(s / suffer-01, condition, w / watch-01)
(s2 / staff-01, ARG0, i3 / i)
(s2 / staff-01, ARG2, p2 / person)
(w / watch-01, ARG0, i2 / i)
(w / watch-01, ARG1, f / film)
(w2 / watch-01, ARG0, i / i)
(w2 / watch-01, ARG1, d / derive-01)

Decoded in 227,412 microseconds
Sentence: evidently he thinks of the distinction as being no more than a useful device for developing and explaining his claim that all ideas derive from experience

Spans:
Span 21-22:  all => all
Span 16-17:  and => and
Span 19-20:  claim => claim-01
Span 23-24:  derive => derive-01
Span 15-16:  developing => develop-02
Span 13-14:  device => device
Span 5-6:  distinction => distinguish-01
Span 0-1:  evidently => evident
Span 25-26:  experience => experience-01
Span 17-18:  explaining => explain-01
Span 1-2:  he => he
Span 22-23:  ideas => idea
Span 8-9:  no => -
Span 2-3:  thinks => think-01
Span 12-13:  useful => useful

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),experience,experience-01,false), Span(23,24,List(1),derive,derive-01,false), Span(22,23,List(2),ideas,idea,false), Span(21,22,List(3),all,all,false), Span(19,20,List(4),claim,claim-01,false), Span(17,18,List(5),explaining,explain-01,false), Span(16,17,List(6),and,and,false), Span(15,16,List(7),developing,develop-02,false), Span(13,14,List(8),device,device,false), Span(12,13,List(9),useful,useful,false), Span(8,9,List(10),no,-,false), Span(5,6,List(11),distinction,distinguish-01,false), Span(2,3,List(12),thinks,think-01,false), Span(1,2,List(13),he,he,false), Span(0,1,List(14),evidently,evident,false)),Map(2 -> idea, 5 -> explain-01, 12 -> think-01, 8 -> device, 7 -> develop-02, 1 -> derive-01, 4 -> claim-01, 11 -> distinguish-01, 14 -> evident, 6 -> and, 0 -> experience-01, 9 -> useful, 3 -> all, 10 -> -, 13 -> he),Map(e -> experience-01, h -> he, t -> think-01, d3 -> device, e2 -> explain-01, d -> derive-01, a -> all, d2 -> develop-02, i -> idea, a2 -> and, - -> -, c -> claim-01, u -> useful, d4 -> distinguish-01, e3 -> evident))),[Ljava.lang.String;@1a505786,Annotation([Ljava.lang.String;@10a22be9,[Ljava.lang.String;@6f0d687,[Ljava.lang.String;@2d943ca0),Annotation([Ljava.lang.String;@5f1843c0,[Ljava.lang.String;@32082306,[Ledu.cmu.lti.nlp.amr.Dependency;@34337893),Annotation([Ljava.lang.String;@1f3115ab,[Ljava.lang.String;@4f859d8c,[Ljava.lang.String;@4d2a7b1d),Annotation([Ljava.lang.String;@1ff8d47f,[Ljava.lang.String;@946ee3f,[Ledu.cmu.lti.nlp.amr.Entity;@fc36edb))
AMR:
(a2 / and, op, d2 / develop-02)
(a2 / and, op, e2 / explain-01)
(c / claim-01, ARG1, i / idea)
(d / derive-01, ARG0, h / he)
(d / derive-01, ARG1, i / idea)
(d / derive-01, ARG2, e / experience-01)
(d3 / device, mod, e2 / explain-01)
(d3 / device, mod, u / useful)
(e2 / explain-01, ARG0, - / -)
(e2 / explain-01, ARG1, c / claim-01)
(i / idea, quant, a / all)
(t / think-01, ARG0, h / he)
(t / think-01, ARG1, e3 / evident)
(t / think-01, ARG2, d4 / distinguish-01)

Decoded in 288,580 microseconds
Sentence: if ackerley derived any satisfaction from this rough rackety frustrated life it was in his work at the listener where his enlightened editorial policies make him sound like a reviewers dream he telephoned contributors at midnight to query the removal of a comma

Spans:
Span 3-4:  any => any
Span 33-34:  contributors => contribute-01
Span 2-3:  derived => derive-01
Span 30-31:  dream => dream-01
Span 22-23:  editorial => editorial
Span 21-22:  enlightened => enlighten-01
Span 9-10:  frustrated => frustrate-01
Span 31-32:  he => he
Span 11-12:  it => it
Span 10-11:  life => life
Span 35-36:  midnight => midnight
Span 23-24:  policies => policy
Span 39-40:  removal => remove-01
Span 7-8:  rough => rough
Span 4-5:  satisfaction => satisfy-01
Span 26-27:  sound => sound
Span 6-7:  this => this

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),removal,remove-01,false), Span(35,36,List(1),midnight,midnight,false), Span(33,34,List(2),contributors,contribute-01,false), Span(31,32,List(3),he,he,false), Span(30,31,List(4),dream,dream-01,false), Span(26,27,List(5),sound,sound,false), Span(23,24,List(6),policies,policy,false), Span(22,23,List(7),editorial,editorial,false), Span(21,22,List(8),enlightened,enlighten-01,false), Span(11,12,List(9),it,it,false), Span(10,11,List(10),life,life,false), Span(9,10,List(11),frustrated,frustrate-01,false), Span(7,8,List(12),rough,rough,false), Span(6,7,List(13),this,this,false), Span(4,5,List(14),satisfaction,satisfy-01,false), Span(3,4,List(15),any,any,false), Span(2,3,List(16),derived,derive-01,false)),Map(2 -> contribute-01, 5 -> sound, 12 -> rough, 15 -> any, 8 -> enlighten-01, 7 -> editorial, 1 -> midnight, 4 -> dream-01, 11 -> frustrate-01, 14 -> satisfy-01, 6 -> policy, 0 -> remove-01, 9 -> it, 16 -> derive-01, 3 -> he, 10 -> life, 13 -> this),Map(e -> editorial, h -> he, s2 -> satisfy-01, t -> this, e2 -> enlighten-01, s -> sound, m -> midnight, d -> dream-01, p -> policy, r2 -> rough, a -> any, d2 -> derive-01, r -> remove-01, i -> it, c -> contribute-01, l -> life, f -> frustrate-01))),[Ljava.lang.String;@67a2f3f2,Annotation([Ljava.lang.String;@7b3dca05,[Ljava.lang.String;@159a4d79,[Ljava.lang.String;@45544e03),Annotation([Ljava.lang.String;@21cdca84,[Ljava.lang.String;@4daab172,[Ledu.cmu.lti.nlp.amr.Dependency;@167db34),Annotation([Ljava.lang.String;@496833a4,[Ljava.lang.String;@581679a2,[Ljava.lang.String;@2b8ba7dc),Annotation([Ljava.lang.String;@5db972d9,[Ljava.lang.String;@3a2334a1,[Ledu.cmu.lti.nlp.amr.Entity;@5d5453d8))
AMR:
(c / contribute-01, ARG0, h / he)
(c / contribute-01, ARG1, m / midnight)
(d / dream-01, ARG0, h / he)
(d2 / derive-01, ARG1, s2 / satisfy-01)
(e2 / enlighten-01, ARG0, t / this)
(e2 / enlighten-01, ARG1, p / policy)
(f / frustrate-01, ARG1, l / life)
(f / frustrate-01, ARG2, d / dream-01)
(l / life, mod, r2 / rough)
(p / policy, topic, e / editorial)
(r / remove-01, ARG1, h / he)
(s / sound, domain, p / policy)
(s / sound, time, d / dream-01)
(s2 / satisfy-01, ARG1, i / it)
(s2 / satisfy-01, mod, a / any)
(s2 / satisfy-01, purpose, l / life)

Decoded in 349,417 microseconds
Sentence: it actually derives from a greek word meaning a pathless path

NER Entity: (thing :name (name :op "greek"))
Spans:
Span 1-2:  actually => actual
Span 0-1:  it => it
Span 7-8:  meaning => mean-01
Span 10-11:  path => path
Span 6-7:  word => word

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),path,path,false), Span(7,8,List(1),meaning,mean-01,false), Span(6,7,List(2),word,word,false), Span(1,2,List(3),actually,actual,false), Span(0,1,List(4),it,it,false)),Map(2 -> word, 1 -> mean-01, 4 -> it, 0 -> path, 3 -> actual),Map(w -> word, m -> mean-01, p -> path, a -> actual, i -> it))),[Ljava.lang.String;@4b4cb9c6,Annotation([Ljava.lang.String;@1a389cc9,[Ljava.lang.String;@7abd5d91,[Ljava.lang.String;@264a198b),Annotation([Ljava.lang.String;@4ad30850,[Ljava.lang.String;@64c6e290,[Ledu.cmu.lti.nlp.amr.Dependency;@3d448fa0),Annotation([Ljava.lang.String;@603170cc,[Ljava.lang.String;@4de4926a,[Ljava.lang.String;@59489519),Annotation([Ljava.lang.String;@2c34ca1a,[Ljava.lang.String;@3dc087a2,[Ledu.cmu.lti.nlp.amr.Entity;@2b08bc5a))
AMR:
(a / actual, op, p / path)
(m / mean-01, ARG0, w / word)
(m / mean-01, ARG1, p / path)
(p / path, poss, i / it)

Decoded in 18,216 microseconds
Sentence: cooke can also derive satisfaction from the welcome return to form of nigel redman at lock from the possible emergence of dean ryan and tim rodber in the back row from the enterprising nigel heslop on the wing and despite his hesitation last saturday against buenos aires from the promise of gavin thompson

NER Entity: (country :name (name :op "buenos" :op "aires"))
Spans:
Span 2-3:  also => also
Span 38-39:  and => and
Span 23-24:  and => and
Span 28-29:  back => back
Span 45-47:  buenos aires => (country :name (name :op "buenos" :op "aires"))
Span 1-2:  can => possible
Span 21-22:  dean => dean
Span 3-4:  derive => derive-01
Span 19-20:  emergence => emerge-02
Span 10-11:  form => form
Span 41-42:  hesitation => hesitate-01
Span 42-43:  last => last
Span 15-16:  lock => lock-01
Span 18-19:  possible => possible
Span 49-50:  promise => promise-01
Span 29-30:  row => row
Span 4-5:  satisfaction => satisfy-01
Span 43-44:  saturday => saturday
Span 7-8:  welcome => welcome-01
Span 37-38:  wing => wing

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),promise,promise-01,false), Span(45,47,List(4, 3, 2, 1),buenos aires,(country :name (name :op "buenos" :op "aires")),false), Span(43,44,List(5),saturday,saturday,false), Span(42,43,List(6),last,last,false), Span(41,42,List(7),hesitation,hesitate-01,false), Span(38,39,List(8),and,and,false), Span(37,38,List(9),wing,wing,false), Span(29,30,List(10),row,row,false), Span(28,29,List(11),back,back,false), Span(23,24,List(12),and,and,false), Span(21,22,List(13),dean,dean,false), Span(19,20,List(14),emergence,emerge-02,false), Span(18,19,List(15),possible,possible,false), Span(15,16,List(16),lock,lock-01,false), Span(10,11,List(17),form,form,false), Span(7,8,List(18),welcome,welcome-01,false), Span(4,5,List(19),satisfaction,satisfy-01,false), Span(3,4,List(20),derive,derive-01,false), Span(2,3,List(21),also,also,false), Span(1,2,List(22),can,possible,false)),Map(2 -> name, 5 -> saturday, 12 -> and, 15 -> possible, 8 -> and, 21 -> also, 18 -> welcome-01, 7 -> hesitate-01, 17 -> form, 1 -> country, 4 -> "aires", 11 -> back, 14 -> emerge-02, 20 -> derive-01, 6 -> last, 22 -> possible, 0 -> promise-01, 9 -> wing, 16 -> lock-01, 19 -> satisfy-01, 3 -> "buenos", 10 -> row, 13 -> dean),Map(e -> emerge-02, n -> name, w -> wing, h -> hesitate-01, s2 -> satisfy-01, b -> back, p2 -> possible, a3 -> also, s -> saturday, d -> dean, p -> promise-01, a -> and, d2 -> derive-01, w2 -> welcome-01, l2 -> lock-01, r -> row, a2 -> and, c -> country, l -> last, f -> form, p3 -> possible))),[Ljava.lang.String;@16cad2b1,Annotation([Ljava.lang.String;@5dce6e27,[Ljava.lang.String;@1ba1f28e,[Ljava.lang.String;@253b56ce),Annotation([Ljava.lang.String;@5ac0017a,[Ljava.lang.String;@73a11f21,[Ledu.cmu.lti.nlp.amr.Dependency;@5702ead5),Annotation([Ljava.lang.String;@877294,[Ljava.lang.String;@3c7352d1,[Ljava.lang.String;@37423658),Annotation([Ljava.lang.String;@5bfde7bf,[Ljava.lang.String;@7a79dbc7,[Ledu.cmu.lti.nlp.amr.Entity;@564c24a2))
AMR:
(a / and, op, r / row)
(c / country, name, n / name)
(d2 / derive-01, ARG1, s2 / satisfy-01)
(d2 / derive-01, mod, a3 / also)
(d2 / derive-01, purpose, f / form)
(e / emerge-02, ARG0, l / last)
(e / emerge-02, ARG1, a2 / and)
(e / emerge-02, ARG2, a / and)
(e / emerge-02, mod, p2 / possible)
(h / hesitate-01, ARG1, s / saturday)
(l2 / lock-01, ARG1, d / dean)
(l2 / lock-01, time, e / emerge-02)
(n / name, op, "aires")
(n / name, op, "buenos")
(p / promise-01, ARG0, c / country)
(p / promise-01, ARG1, h / hesitate-01)
(p / promise-01, ARG2, a / and)
(p3 / possible, domain, d2 / derive-01)
(r / row, mod, b / back)
(s2 / satisfy-01, ARG1, a2 / and)
(w / wing, mod, p2 / possible)
(w2 / welcome-01, ARG1, s2 / satisfy-01)

Decoded in 586,863 microseconds
Sentence: they are its fundamental principles for first their justification does not presuppose any other moral principles and secondly all valid moral views derive from them with the addition of premisses which do not by themselves yield any moral conclusions

Spans:
Span 18-19:  all => all
Span 16-17:  and => and
Span 36-37:  any => any
Span 12-13:  any => any
Span 38-39:  conclusions => (thing :ARG1-of conclude-01)
Span 22-23:  derive => derive-01
Span 3-4:  fundamental => fundamental
Span 8-9:  justification => justify-01
Span 37-38:  moral => moral
Span 20-21:  moral => moral
Span 14-15:  moral => moral
Span 13-14:  other => other
Span 11-12:  presuppose => presuppose-00
Span 15-16:  principles => principle
Span 4-5:  principles => principle
Span 0-1:  they => they
Span 19-20:  valid => valid-41
Span 35-36:  yield => yield-02

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(1, 0),conclusions,(thing :ARG1-of conclude-01),false), Span(37,38,List(2),moral,moral,false), Span(36,37,List(3),any,any,false), Span(35,36,List(4),yield,yield-02,false), Span(22,23,List(5),derive,derive-01,false), Span(20,21,List(6),moral,moral,false), Span(19,20,List(7),valid,valid-41,false), Span(18,19,List(8),all,all,false), Span(16,17,List(9),and,and,false), Span(15,16,List(10),principles,principle,false), Span(14,15,List(11),moral,moral,false), Span(13,14,List(12),other,other,false), Span(12,13,List(13),any,any,false), Span(11,12,List(14),presuppose,presuppose-00,false), Span(8,9,List(15),justification,justify-01,false), Span(4,5,List(16),principles,principle,false), Span(3,4,List(17),fundamental,fundamental,false), Span(0,1,List(18),they,they,false)),Map(2 -> moral, 5 -> derive-01, 12 -> other, 15 -> justify-01, 8 -> all, 18 -> they, 7 -> valid-41, 17 -> fundamental, 1 -> conclude-01, 4 -> yield-02, 11 -> moral, 14 -> presuppose-00, 6 -> moral, 0 -> thing, 9 -> and, 16 -> principle, 3 -> any, 10 -> principle, 13 -> any),Map(m3 -> moral, t -> thing, m2 -> moral, p2 -> presuppose-00, j -> justify-01, a3 -> and, v -> valid-41, m -> moral, d -> derive-01, y -> yield-02, p -> principle, a -> any, t2 -> they, a2 -> all, c -> conclude-01, f -> fundamental, o -> other, p3 -> principle, a4 -> any))),[Ljava.lang.String;@20f933f1,Annotation([Ljava.lang.String;@48c12420,[Ljava.lang.String;@2ad631,[Ljava.lang.String;@7c542b0c),Annotation([Ljava.lang.String;@79d66098,[Ljava.lang.String;@695fd9a5,[Ledu.cmu.lti.nlp.amr.Dependency;@13ca15af),Annotation([Ljava.lang.String;@38559e4f,[Ljava.lang.String;@7d0c716d,[Ljava.lang.String;@3beaeb3e),Annotation([Ljava.lang.String;@3bfa522d,[Ljava.lang.String;@2f29271e,[Ledu.cmu.lti.nlp.amr.Entity;@36c73ac2))
AMR:
(a3 / and, op, p2 / presuppose-00)
(c / conclude-01, ARG1, t / thing)
(d / derive-01, ARG0, t2 / they)
(d / derive-01, mod, a2 / all)
(d / derive-01, mod, a4 / any)
(d / derive-01, mod, m2 / moral)
(p / principle, mod, a4 / any)
(p / principle, mod, m3 / moral)
(p / principle, mod, o / other)
(p2 / presuppose-00, ARG0, j / justify-01)
(p2 / presuppose-00, ARG1, p / principle)
(p3 / principle, mod, f / fundamental)
(p3 / principle, poss, t2 / they)
(t / thing, mod, a / any)
(t / thing, mod, m / moral)
(v / valid-41, ARG1, d / derive-01)
(y / yield-02, ARG0, m3 / moral)
(y / yield-02, ARG1, t / thing)

Decoded in 299,099 microseconds
Sentence: it derives its sustenance from the ground through its roots and clings to its host only for support

Spans:
Span 10-11:  and => and
Span 6-7:  ground => ground
Span 14-15:  host => host-01
Span 0-1:  it => it
Span 15-16:  only => only
Span 9-10:  roots => root
Span 17-18:  support => support-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),support,support-01,false), Span(15,16,List(1),only,only,false), Span(14,15,List(2),host,host-01,false), Span(10,11,List(3),and,and,false), Span(9,10,List(4),roots,root,false), Span(6,7,List(5),ground,ground,false), Span(0,1,List(6),it,it,false)),Map(2 -> host-01, 5 -> ground, 1 -> only, 4 -> root, 6 -> it, 0 -> support-01, 3 -> and),Map(h -> host-01, s -> support-01, g -> ground, a -> and, i -> it, r -> root, o -> only))),[Ljava.lang.String;@51e2b2a6,Annotation([Ljava.lang.String;@7a3eda49,[Ljava.lang.String;@346d2d52,[Ljava.lang.String;@6bba7d61),Annotation([Ljava.lang.String;@207da288,[Ljava.lang.String;@18399f62,[Ledu.cmu.lti.nlp.amr.Dependency;@6f0ee75a),Annotation([Ljava.lang.String;@3b76feac,[Ljava.lang.String;@149ecb4,[Ljava.lang.String;@1c531e15),Annotation([Ljava.lang.String;@14dc033a,[Ljava.lang.String;@7857df88,[Ledu.cmu.lti.nlp.amr.Entity;@51149771))
AMR:
(a / and, op, g / ground)
(g / ground, location, r / root)
(h / host-01, ARG0, i / it)
(h / host-01, ARG1, a / and)
(h / host-01, ARG3, s / support-01)
(h / host-01, mod, o / only)

Decoded in 39,418 microseconds
Sentence: ultimately inspiration for her doctorate derived from personal circumstances

Spans:
Span 8-9:  circumstances => circumstance
Span 5-6:  derived => derive-01
Span 1-2:  inspiration => inspire-01
Span 7-8:  personal => personal
Span 0-1:  ultimately => ultimate

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),circumstances,circumstance,false), Span(7,8,List(1),personal,personal,false), Span(5,6,List(2),derived,derive-01,false), Span(1,2,List(3),inspiration,inspire-01,false), Span(0,1,List(4),ultimately,ultimate,false)),Map(2 -> derive-01, 1 -> personal, 4 -> ultimate, 0 -> circumstance, 3 -> inspire-01),Map(d -> derive-01, p -> personal, i -> inspire-01, u -> ultimate, c -> circumstance))),[Ljava.lang.String;@1ee2a54d,Annotation([Ljava.lang.String;@31d27212,[Ljava.lang.String;@6f3f154b,[Ljava.lang.String;@168f27fc),Annotation([Ljava.lang.String;@108a1cf6,[Ljava.lang.String;@5b7362f5,[Ledu.cmu.lti.nlp.amr.Dependency;@7465f1ba),Annotation([Ljava.lang.String;@50e12609,[Ljava.lang.String;@6d88425a,[Ljava.lang.String;@cbc5ae4),Annotation([Ljava.lang.String;@21f33544,[Ljava.lang.String;@662e14c5,[Ledu.cmu.lti.nlp.amr.Entity;@5b55c5eb))
AMR:
(c / circumstance, mod, p / personal)
(d / derive-01, ARG1, i / inspire-01)
(d / derive-01, ARG2, c / circumstance)
(i / inspire-01, degree, u / ultimate)

Decoded in 12,527 microseconds
Sentence: properties of this sort were supposed to flow derive or emanate from the form, as aquinas says a things characteristic operations derive from its substantial form

Spans:
Span 20-21:  characteristic => characteristic-41
Span 22-23:  derive => derive-01
Span 8-9:  derive => derive-01
Span 7-8:  flow => flow-01
Span 26-27:  form => form
Span 13-14:  form => form
Span 21-22:  operations => operation
Span 9-10:  or => or
Span 0-1:  properties => property
Span 17-18:  says => say-01
Span 3-4:  sort => sort
Span 25-26:  substantial => substantial
Span 5-6:  supposed => suppose-02
Span 19-20:  things => thing
Span 2-3:  this => this

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),form,form,false), Span(25,26,List(1),substantial,substantial,false), Span(22,23,List(2),derive,derive-01,false), Span(21,22,List(3),operations,operation,false), Span(20,21,List(4),characteristic,characteristic-41,false), Span(19,20,List(5),things,thing,false), Span(17,18,List(6),says,say-01,false), Span(13,14,List(7),form,form,false), Span(9,10,List(8),or,or,false), Span(8,9,List(9),derive,derive-01,false), Span(7,8,List(10),flow,flow-01,false), Span(5,6,List(11),supposed,suppose-02,false), Span(3,4,List(12),sort,sort,false), Span(2,3,List(13),this,this,false), Span(0,1,List(14),properties,property,false)),Map(2 -> derive-01, 5 -> thing, 12 -> sort, 8 -> or, 7 -> form, 1 -> substantial, 4 -> characteristic-41, 11 -> suppose-02, 14 -> property, 6 -> say-01, 0 -> form, 9 -> derive-01, 3 -> operation, 10 -> flow-01, 13 -> this),Map(s2 -> say-01, t -> thing, s -> substantial, s4 -> sort, d -> derive-01, p -> property, o2 -> or, d2 -> derive-01, f3 -> flow-01, t2 -> this, c -> characteristic-41, s3 -> suppose-02, f2 -> form, f -> form, o -> operation))),[Ljava.lang.String;@6caf0c9a,Annotation([Ljava.lang.String;@58648a34,[Ljava.lang.String;@30ad8942,[Ljava.lang.String;@510e6505),Annotation([Ljava.lang.String;@80a54d6,[Ljava.lang.String;@5e47b1b9,[Ledu.cmu.lti.nlp.amr.Dependency;@34e5190a),Annotation([Ljava.lang.String;@2ccefaa7,[Ljava.lang.String;@48aa00ec,[Ljava.lang.String;@1122ab39),Annotation([Ljava.lang.String;@7b1733f8,[Ljava.lang.String;@30551dea,[Ledu.cmu.lti.nlp.amr.Entity;@241f0670))
AMR:
(c / characteristic-41, ARG0, o / operation)
(d / derive-01, ARG0, o / operation)
(d / derive-01, ARG1, t / thing)
(d / derive-01, manner, f / form)
(d2 / derive-01, ARG1, f3 / flow-01)
(f / form, mod, s / substantial)
(o2 / or, op, d2 / derive-01)
(o2 / or, time, f2 / form)
(p / property, mod, s4 / sort)
(s2 / say-01, ARG0, p / property)
(s2 / say-01, ARG1, t / thing)
(s3 / suppose-02, ARG1, p / property)
(s3 / suppose-02, ARG2, d2 / derive-01)
(s4 / sort, mod, t2 / this)

Decoded in 253,857 microseconds
Sentence: sir  a painting by rembrandt or anybody else derives a significant proportion of its potency from its relationship with other works by that artist and consequently a deattribution robs it of all the richness of association experts cast doubt on 20 rembrandts  8 december

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = sir  a painting by rembrandt or anybody else derives a significant proportion of its potency from its relationship with other works by that artist and consequently a deattribution robs it of all the richness of association experts cast doubt on 20 rembrandts  8 december
myTokenized = sir a painting by rembrandt or anybody else derives a significant proportion of its potency from its relationship with other works by that artist and consequently a deattribution robs it of all the richness of association experts cast doubt on 20 rembrandts 8 december
i = 1
prefix = List(sir, a)
regexr = \Qs\E ?\Qi\E ?\Qr\E ?\Qa\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: lemys recherches sur la variole from which zola derived his clinical picture

Spans:
Span 10-11:  clinical => clinical
Span 8-9:  derived => derive-01
Span 3-4:  la => "la"
Span 11-12:  picture => picture

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),picture,picture,false), Span(10,11,List(1),clinical,clinical,false), Span(8,9,List(2),derived,derive-01,false), Span(3,4,List(3),la,"la",false)),Map(2 -> derive-01, 1 -> clinical, 0 -> picture, 3 -> "la"),Map(d -> derive-01, p -> picture, l -> "la", c -> clinical))),[Ljava.lang.String;@6f0ac4be,Annotation([Ljava.lang.String;@2bfacee6,[Ljava.lang.String;@5f257498,[Ljava.lang.String;@1409d7f5),Annotation([Ljava.lang.String;@1241201a,[Ljava.lang.String;@71a29452,[Ledu.cmu.lti.nlp.amr.Dependency;@68b7cdc6),Annotation([Ljava.lang.String;@7b26b7df,[Ljava.lang.String;@2af1d0a3,[Ljava.lang.String;@69b8935b),Annotation([Ljava.lang.String;@54d27196,[Ljava.lang.String;@441f5a5b,[Ledu.cmu.lti.nlp.amr.Entity;@66652f4d))
AMR:
(d / derive-01, ARG0, l / "la")
(d / derive-01, ARG1, p / picture)
(p / picture, mod, c / clinical)

Decoded in 15,157 microseconds
Sentence: it will not be disputed that about half the money to be spent by the county council is in future to be derived directly from central government and about a quarter from the proceeds of the uniform business rate, for each authority this is to be a fixed sum and expenditure above that level is to be derived from the community charge

Spans:
Span 52-53:  above => above
Span 50-51:  and => and
Span 27-28:  and => and
Span 42-43:  authority => authority
Span 37-38:  business => business
Span 25-26:  central => central
Span 61-62:  community => community
Span 16-17:  council => council
Span 15-16:  county => county
Span 58-59:  derived => derive-01
Span 22-23:  derived => derive-01
Span 23-24:  directly => direct
Span 4-5:  disputed => dispute-01
Span 41-42:  each => each
Span 51-52:  expenditure => expend-01
Span 48-49:  fixed => fix-03
Span 19-20:  future => future
Span 7-8:  half => half
Span 0-1:  it => it
Span 54-55:  level => level
Span 9-10:  money => money
Span 38-39:  rate => rate
Span 12-13:  spent => spend-01
Span 49-50:  sum => sum
Span 43-44:  this => this
Span 36-37:  uniform => uniform

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(61,62,List(0),community,community,false), Span(58,59,List(1),derived,derive-01,false), Span(54,55,List(2),level,level,false), Span(52,53,List(3),above,above,false), Span(51,52,List(4),expenditure,expend-01,false), Span(50,51,List(5),and,and,false), Span(49,50,List(6),sum,sum,false), Span(48,49,List(7),fixed,fix-03,false), Span(43,44,List(8),this,this,false), Span(42,43,List(9),authority,authority,false), Span(41,42,List(10),each,each,false), Span(38,39,List(11),rate,rate,false), Span(37,38,List(12),business,business,false), Span(36,37,List(13),uniform,uniform,false), Span(27,28,List(14),and,and,false), Span(25,26,List(15),central,central,false), Span(23,24,List(16),directly,direct,false), Span(22,23,List(17),derived,derive-01,false), Span(19,20,List(18),future,future,false), Span(16,17,List(19),council,council,false), Span(15,16,List(20),county,county,false), Span(12,13,List(21),spent,spend-01,false), Span(9,10,List(22),money,money,false), Span(7,8,List(23),half,half,false), Span(4,5,List(24),disputed,dispute-01,false), Span(0,1,List(25),it,it,false)),Map(2 -> level, 5 -> and, 12 -> business, 8 -> this, 15 -> central, 21 -> spend-01, 18 -> future, 24 -> dispute-01, 7 -> fix-03, 1 -> derive-01, 17 -> derive-01, 23 -> half, 4 -> expend-01, 11 -> rate, 14 -> and, 20 -> county, 6 -> sum, 9 -> authority, 0 -> community, 22 -> money, 16 -> direct, 19 -> council, 10 -> each, 3 -> above, 25 -> it, 13 -> uniform),Map(e -> expend-01, h -> half, s2 -> spend-01, t -> this, b -> business, d3 -> derive-01, e2 -> each, a3 -> authority, c4 -> county, s -> sum, d -> derive-01, m -> money, a -> above, c3 -> council, d2 -> direct, i -> it, r -> rate, a2 -> and, c -> community, f2 -> future, l -> level, u -> uniform, d4 -> dispute-01, f -> fix-03, c2 -> central, a4 -> and))),[Ljava.lang.String;@44f6a6ae,Annotation([Ljava.lang.String;@1d390ce1,[Ljava.lang.String;@c7c96c4,[Ljava.lang.String;@478e2443),Annotation([Ljava.lang.String;@44eecf68,[Ljava.lang.String;@1a72d833,[Ledu.cmu.lti.nlp.amr.Dependency;@69d009d5),Annotation([Ljava.lang.String;@5935b538,[Ljava.lang.String;@550c9d49,[Ljava.lang.String;@2f2a4f3e),Annotation([Ljava.lang.String;@2b887a3,[Ljava.lang.String;@20d0dfba,[Ledu.cmu.lti.nlp.amr.Entity;@71103d2a))
AMR:
(a / above, op, l / level)
(a2 / and, op, a4 / and)
(a2 / and, op, e / expend-01)
(a2 / and, op, s / sum)
(a3 / authority, mod, e2 / each)
(a4 / and, op, d3 / derive-01)
(a4 / and, op, d4 / dispute-01)
(c3 / council, mod, c4 / county)
(d / derive-01, ARG0, b / business)
(d / derive-01, ARG1, l / level)
(d3 / derive-01, ARG0, m / money)
(d3 / derive-01, ARG1, f2 / future)
(d3 / derive-01, manner, d2 / direct)
(d4 / dispute-01, ARG0, h / half)
(d4 / dispute-01, ARG1, i / it)
(e / expend-01, ARG0, e2 / each)
(e / expend-01, ARG1, l / level)
(e / expend-01, location, c / community)
(f / fix-03, ARG0, c2 / central)
(f / fix-03, ARG1, e / expend-01)
(r / rate, mod, b / business)
(r / rate, mod, u / uniform)
(s / sum, domain, t / this)
(s2 / spend-01, ARG1, c3 / council)
(s2 / spend-01, ARG3, m / money)

Decoded in 883,672 microseconds
Sentence: but does its value derive from the fact that many people desire to be autonomous

Spans:
Span 14-15:  autonomous => autonomy
Span 0-1:  but => contrast-01
Span 4-5:  derive => derive-01
Span 11-12:  desire => desire-01
Span 7-8:  fact => fact
Span 9-10:  many => many
Span 3-4:  value => value-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),autonomous,autonomy,false), Span(11,12,List(1),desire,desire-01,false), Span(9,10,List(2),many,many,false), Span(7,8,List(3),fact,fact,false), Span(4,5,List(4),derive,derive-01,false), Span(3,4,List(5),value,value-01,false), Span(0,1,List(6),but,contrast-01,false)),Map(2 -> many, 5 -> value-01, 1 -> desire-01, 4 -> derive-01, 6 -> contrast-01, 0 -> autonomy, 3 -> fact),Map(v -> value-01, m -> many, d -> desire-01, a -> autonomy, d2 -> derive-01, c -> contrast-01, f -> fact))),[Ljava.lang.String;@611fca63,Annotation([Ljava.lang.String;@6e205b65,[Ljava.lang.String;@e507c5f,[Ljava.lang.String;@46154850),Annotation([Ljava.lang.String;@1f3ea022,[Ljava.lang.String;@48832834,[Ledu.cmu.lti.nlp.amr.Dependency;@1ac4931d),Annotation([Ljava.lang.String;@5f9662a5,[Ljava.lang.String;@a266faa,[Ljava.lang.String;@616d071a),Annotation([Ljava.lang.String;@3ced6dee,[Ljava.lang.String;@7cc4382,[Ledu.cmu.lti.nlp.amr.Entity;@73640fcd))
AMR:
(c / contrast-01, ARG0, m / many)
(c / contrast-01, ARG1, d2 / derive-01)
(c / contrast-01, ARG2, d / desire-01)
(d / desire-01, ARG1, a / autonomy)
(d2 / derive-01, ARG1, f / fact)
(d2 / derive-01, ARG2, v / value-01)

Decoded in 45,366 microseconds
Sentence: some comfort has also been derived from the price of the december contract which fell from 753 a tonne a week ago to 741 a tonne on friday

Spans:
Span 3-4:  also => also
Span 1-2:  comfort => comfort-01
Span 12-13:  contract => contract-02
Span 11-12:  december => (date-entity :month 12)
Span 5-6:  derived => derive-01
Span 14-15:  fell => fall-01
Span 27-28:  friday => friday
Span 8-9:  price => (thing :ARG2-of price-01)
Span 0-1:  some => some
Span 20-21:  week => week

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),friday,friday,false), Span(20,21,List(1),week,week,false), Span(14,15,List(2),fell,fall-01,false), Span(12,13,List(3),contract,contract-02,false), Span(11,12,List(5, 4),december,(date-entity :month 12),false), Span(8,9,List(7, 6),price,(thing :ARG2-of price-01),false), Span(5,6,List(8),derived,derive-01,false), Span(3,4,List(9),also,also,false), Span(1,2,List(10),comfort,comfort-01,false), Span(0,1,List(11),some,some,false)),Map(2 -> fall-01, 5 -> 12, 8 -> derive-01, 7 -> price-01, 1 -> week, 11 -> some, 4 -> date-entity, 6 -> thing, 9 -> also, 0 -> friday, 10 -> comfort-01, 3 -> contract-02),Map(w -> week, t -> thing, s -> some, d -> date-entity, p -> price-01, 1 -> 12, a -> also, d2 -> derive-01, c -> contract-02, f2 -> fall-01, f -> friday, c2 -> comfort-01))),[Ljava.lang.String;@2e4996ea,Annotation([Ljava.lang.String;@6152f463,[Ljava.lang.String;@d2ac180,[Ljava.lang.String;@7205c140),Annotation([Ljava.lang.String;@57d28b3b,[Ljava.lang.String;@3fb2fb88,[Ledu.cmu.lti.nlp.amr.Dependency;@7f9fbe63),Annotation([Ljava.lang.String;@508c970a,[Ljava.lang.String;@3e103ad6,[Ljava.lang.String;@1b86d76f),Annotation([Ljava.lang.String;@31a9c687,[Ljava.lang.String;@128e28a,[Ledu.cmu.lti.nlp.amr.Entity;@2330d29e))
AMR:
(c / contract-02, ARG1, d / date-entity)
(c2 / comfort-01, ARG1, w / week)
(c2 / comfort-01, quant, s / some)
(d / date-entity, month, 1 / 12)
(d2 / derive-01, ARG1, c2 / comfort-01)
(d2 / derive-01, ARG2, t / thing)
(d2 / derive-01, mod, a / also)
(f2 / fall-01, ARG0, c / contract-02)
(f2 / fall-01, ARG1, f / friday)
(p / price-01, ARG1, c / contract-02)
(p / price-01, ARG2, t / thing)

Decoded in 163,728 microseconds
Sentence: this ratio can also be derived algebraically by dividing a line length b  1 at a point where the ratio of the parts is equal to the ratio of the larger part to the sum

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = this ratio can also be derived algebraically by dividing a line length b  1 at a point where the ratio of the parts is equal to the ratio of the larger part to the sum
myTokenized = this ratio can also be derived algebraically by dividing a line length b 1 at a point where the ratio of the parts is equal to the ratio of the larger part to the sum
i = 13
prefix = List(this, ratio, can, also, be, derived, algebraically, by, dividing, a, line, length, b, 1)
regexr = \Qt\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qr\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qc\E ?\Qa\E ?\Qn\E ?\Qa\E ?\Ql\E ?\Qs\E ?\Qo\E ?\Qb\E ?\Qe\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qd\E ?\Qa\E ?\Ql\E ?\Qg\E ?\Qe\E ?\Qb\E ?\Qr\E ?\Qa\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qy\E ?\Qb\E ?\Qy\E ?\Qd\E ?\Qi\E ?\Qv\E ?\Qi\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qa\E ?\Ql\E ?\Qi\E ?\Qn\E ?\Qe\E ?\Ql\E ?\Qe\E ?\Qn\E ?\Qg\E ?\Qt\E ?\Qh\E ?\Qb\E ?\Q1\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: if authority existed it derived from section 1111 of the local government act 1972 which provided that local authorities should have power to do anything which was calculated to facilitate or is conducive or incidental to the discharge of any of their functions

Spans:
Span 7-8:  1111 => (date-entity :year 1111)
Span 13-14:  1972 => (date-entity :year 1972)
Span 12-13:  act => act-02
Span 39-40:  any => any
Span 24-25:  anything => anything
Span 18-19:  authorities => authority
Span 1-2:  authority => authority
Span 27-28:  calculated => calculate-01
Span 4-5:  derived => derive-01
Span 37-38:  discharge => discharge-01
Span 2-3:  existed => exist-01
Span 29-30:  facilitate => facilitate-01
Span 42-43:  functions => function-01
Span 34-35:  incidental => incidental
Span 3-4:  it => it
Span 17-18:  local => local
Span 10-11:  local => local
Span 33-34:  or => or
Span 30-31:  or => or
Span 21-22:  power => power
Span 15-16:  provided => provide-01
Span 6-7:  section => section
Span 19-20:  should => recommend-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),functions,function-01,false), Span(39,40,List(1),any,any,false), Span(37,38,List(2),discharge,discharge-01,false), Span(34,35,List(3),incidental,incidental,false), Span(33,34,List(4),or,or,false), Span(30,31,List(5),or,or,false), Span(29,30,List(6),facilitate,facilitate-01,false), Span(27,28,List(7),calculated,calculate-01,false), Span(24,25,List(8),anything,anything,false), Span(21,22,List(9),power,power,false), Span(19,20,List(10),should,recommend-01,false), Span(18,19,List(11),authorities,authority,false), Span(17,18,List(12),local,local,false), Span(15,16,List(13),provided,provide-01,false), Span(13,14,List(15, 14),1972,(date-entity :year 1972),false), Span(12,13,List(16),act,act-02,false), Span(10,11,List(17),local,local,false), Span(7,8,List(19, 18),1111,(date-entity :year 1111),false), Span(6,7,List(20),section,section,false), Span(4,5,List(21),derived,derive-01,false), Span(3,4,List(22),it,it,false), Span(2,3,List(23),existed,exist-01,false), Span(1,2,List(24),authority,authority,false)),Map(2 -> discharge-01, 5 -> or, 12 -> local, 8 -> anything, 15 -> 1972, 21 -> derive-01, 18 -> date-entity, 24 -> authority, 7 -> calculate-01, 1 -> any, 17 -> local, 23 -> exist-01, 4 -> or, 11 -> authority, 14 -> date-entity, 20 -> section, 6 -> facilitate-01, 9 -> power, 0 -> function-01, 22 -> it, 16 -> act-02, 19 -> 1111, 10 -> recommend-01, 3 -> incidental, 13 -> provide-01),Map(e -> exist-01, 12 -> 1111, d3 -> date-entity, p2 -> provide-01, a3 -> authority, s -> section, d -> discharge-01, 1 -> 1972, p -> power, a -> any, o2 -> or, d2 -> date-entity, a5 -> authority, i2 -> it, l2 -> local, r -> recommend-01, a2 -> anything, i -> incidental, c -> calculate-01, f2 -> facilitate-01, l -> local, d4 -> derive-01, f -> function-01, o -> or, a4 -> act-02))),[Ljava.lang.String;@55bbdbbd,Annotation([Ljava.lang.String;@20578144,[Ljava.lang.String;@50e7a7f2,[Ljava.lang.String;@18c32a5d),Annotation([Ljava.lang.String;@35124c5e,[Ljava.lang.String;@4453ca8a,[Ledu.cmu.lti.nlp.amr.Dependency;@59164d11),Annotation([Ljava.lang.String;@471dc4c8,[Ljava.lang.String;@73624af1,[Ljava.lang.String;@3a264f65),Annotation([Ljava.lang.String;@29268db6,[Ljava.lang.String;@2221bcd5,[Ledu.cmu.lti.nlp.amr.Entity;@54f45574))
AMR:
(a3 / authority, mod, l / local)
(a4 / act-02, mod, l2 / local)
(c / calculate-01, ARG0, a2 / anything)
(c / calculate-01, ARG1, f2 / facilitate-01)
(d / discharge-01, ARG1, f / function-01)
(d2 / date-entity, year, 1 / 1972)
(d3 / date-entity, year, 12 / 1111)
(d4 / derive-01, ARG0, a5 / authority)
(d4 / derive-01, ARG1, i2 / it)
(d4 / derive-01, ARG2, s / section)
(d4 / derive-01, purpose, a4 / act-02)
(d4 / derive-01, time, d3 / date-entity)
(e / exist-01, ARG1, d4 / derive-01)
(f / function-01, mod, a / any)
(f2 / facilitate-01, ARG1, o / or)
(o / or, beneficiary, d / discharge-01)
(o / or, op, i / incidental)
(o2 / or, op, d2 / date-entity)
(o2 / or, op, f2 / facilitate-01)
(o2 / or, op, p2 / provide-01)
(p2 / provide-01, ARG0, a4 / act-02)
(p2 / provide-01, ARG1, r / recommend-01)
(r / recommend-01, ARG1, p / power)
(r / recommend-01, ARG2, a3 / authority)

Decoded in 1,004,209 microseconds
Sentence: nations are he says the basis of the state and national struggles derive not from social classes but from historical entities called nations

Spans:
Span 9-10:  and => and
Span 17-18:  but => contrast-01
Span 16-17:  classes => class
Span 12-13:  derive => derive-01
Span 20-21:  entities => entity
Span 2-3:  he => he
Span 19-20:  historical => history
Span 10-11:  national => nation
Span 22-23:  nations => nation
Span 0-1:  nations => nation
Span 3-4:  says => say-01
Span 15-16:  social => society
Span 8-9:  state => state

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),nations,nation,false), Span(20,21,List(1),entities,entity,false), Span(19,20,List(2),historical,history,false), Span(17,18,List(3),but,contrast-01,false), Span(16,17,List(4),classes,class,false), Span(15,16,List(5),social,society,false), Span(12,13,List(6),derive,derive-01,false), Span(10,11,List(7),national,nation,false), Span(9,10,List(8),and,and,false), Span(8,9,List(9),state,state,false), Span(3,4,List(10),says,say-01,false), Span(2,3,List(11),he,he,false), Span(0,1,List(12),nations,nation,false)),Map(2 -> history, 5 -> society, 12 -> nation, 8 -> and, 7 -> nation, 1 -> entity, 4 -> class, 11 -> he, 6 -> derive-01, 0 -> nation, 9 -> state, 3 -> contrast-01, 10 -> say-01),Map(e -> entity, n -> nation, h -> history, s2 -> state, h2 -> he, s -> society, d -> derive-01, a -> and, n3 -> nation, c -> contrast-01, s3 -> say-01, c2 -> class, n2 -> nation))),[Ljava.lang.String;@75165e3e,Annotation([Ljava.lang.String;@f857480,[Ljava.lang.String;@2a38776,[Ljava.lang.String;@3e125554),Annotation([Ljava.lang.String;@25a01da2,[Ljava.lang.String;@32f989fa,[Ledu.cmu.lti.nlp.amr.Dependency;@1cd1963b),Annotation([Ljava.lang.String;@3de0a45,[Ljava.lang.String;@667439fe,[Ljava.lang.String;@588b873e),Annotation([Ljava.lang.String;@305c24dc,[Ljava.lang.String;@71780051,[Ledu.cmu.lti.nlp.amr.Entity;@7d5d0009))
AMR:
(a / and, op, d / derive-01)
(a / and, op, s2 / state)
(c / contrast-01, ARG1, s / society)
(c / contrast-01, ARG2, a / and)
(c2 / class, poss, h2 / he)
(d / derive-01, ARG0, c2 / class)
(d / derive-01, mod, h / history)
(d / derive-01, mod, n2 / nation)
(e / entity, mod, h / history)
(n / nation, mod, e / entity)
(s3 / say-01, ARG0, h2 / he)
(s3 / say-01, ARG1, n3 / nation)

Decoded in 256,422 microseconds
Sentence: the australian production of poll was given during a long season by the borovansky company in melbourne and proved a popular addition to a repertory that derived heavily in its creations as well is its revivals from edouard borovanskys origins in the ballets russes

NER Entity: (thing :name (name :op "australian"))
Spans:
Span 17-18:  and => and
Span 14-15:  company => company
Span 26-27:  derived => derive-01
Span 6-7:  given => give-01
Span 27-28:  heavily => heavy
Span 4-5:  poll => poll-01
Span 20-21:  popular => popular-41
Span 2-3:  production => produce-01
Span 18-19:  proved => prove-01
Span 10-11:  season => season
Span 32-33:  well => well

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),well,well,false), Span(27,28,List(1),heavily,heavy,false), Span(26,27,List(2),derived,derive-01,false), Span(20,21,List(3),popular,popular-41,false), Span(18,19,List(4),proved,prove-01,false), Span(17,18,List(5),and,and,false), Span(14,15,List(6),company,company,false), Span(10,11,List(7),season,season,false), Span(6,7,List(8),given,give-01,false), Span(4,5,List(9),poll,poll-01,false), Span(2,3,List(10),production,produce-01,false)),Map(2 -> derive-01, 5 -> and, 8 -> give-01, 7 -> season, 1 -> heavy, 4 -> prove-01, 6 -> company, 9 -> poll-01, 0 -> well, 10 -> produce-01, 3 -> popular-41),Map(w -> well, h -> heavy, p2 -> prove-01, s -> season, d -> derive-01, g -> give-01, p -> popular-41, p4 -> produce-01, a -> and, c -> company, p3 -> poll-01))),[Ljava.lang.String;@64ad8f2b,Annotation([Ljava.lang.String;@3e9283b0,[Ljava.lang.String;@503b7e8,[Ljava.lang.String;@371ee2ea),Annotation([Ljava.lang.String;@4cc38ceb,[Ljava.lang.String;@3a58bfac,[Ledu.cmu.lti.nlp.amr.Dependency;@188fd321),Annotation([Ljava.lang.String;@a6e2820,[Ljava.lang.String;@460c5239,[Ljava.lang.String;@52ea401c),Annotation([Ljava.lang.String;@111718cb,[Ljava.lang.String;@35cc031,[Ledu.cmu.lti.nlp.amr.Entity;@3e4dd2b0))
AMR:
(a / and, op, g / give-01)
(a / and, op, p2 / prove-01)
(d / derive-01, ARG1, p3 / poll-01)
(d / derive-01, manner, h / heavy)
(g / give-01, ARG0, c / company)
(g / give-01, ARG1, s / season)
(p / popular-41, ARG1, w / well)
(p2 / prove-01, ARG1, p4 / produce-01)
(p3 / poll-01, ARG1, p / popular-41)
(p4 / produce-01, ARG1, p3 / poll-01)

Decoded in 149,038 microseconds
Sentence: robyns mental image of a modern factory had derived mainly from tv commercials and documentaries deftly edited footage of brightly coloured machines and smoothly moving assembly lines manned by brisk operators in clean overalls turning out motor cars or transistor radios to the accompaniment of mozart on the sound track

Spans:
Span 22-23:  and => and
Span 13-14:  and => and
Span 25-26:  assembly => assembly
Span 37-38:  cars => car
Span 32-33:  clean => clean
Span 12-13:  commercials => commercial
Span 8-9:  derived => derive-01
Span 16-17:  edited => edit-01
Span 6-7:  factory => factory
Span 17-18:  footage => footage
Span 2-3:  image => image
Span 26-27:  lines => line
Span 21-22:  machines => machine
Span 9-10:  mainly => main
Span 27-28:  manned => man-01
Span 1-2:  mental => mental
Span 5-6:  modern => modern
Span 36-37:  motor => motorcycle
Span 24-25:  moving => move-01
Span 30-31:  operators => operate-01
Span 38-39:  or => or
Span 23-24:  smoothly => smooth
Span 48-49:  sound => sound
Span 49-50:  track => track
Span 34-35:  turning => turn-02

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),track,track,false), Span(48,49,List(1),sound,sound,false), Span(38,39,List(2),or,or,false), Span(37,38,List(3),cars,car,false), Span(36,37,List(4),motor,motorcycle,false), Span(34,35,List(5),turning,turn-02,false), Span(32,33,List(6),clean,clean,false), Span(30,31,List(7),operators,operate-01,false), Span(27,28,List(8),manned,man-01,false), Span(26,27,List(9),lines,line,false), Span(25,26,List(10),assembly,assembly,false), Span(24,25,List(11),moving,move-01,false), Span(23,24,List(12),smoothly,smooth,false), Span(22,23,List(13),and,and,false), Span(21,22,List(14),machines,machine,false), Span(17,18,List(15),footage,footage,false), Span(16,17,List(16),edited,edit-01,false), Span(13,14,List(17),and,and,false), Span(12,13,List(18),commercials,commercial,false), Span(9,10,List(19),mainly,main,false), Span(8,9,List(20),derived,derive-01,false), Span(6,7,List(21),factory,factory,false), Span(5,6,List(22),modern,modern,false), Span(2,3,List(23),image,image,false), Span(1,2,List(24),mental,mental,false)),Map(2 -> or, 5 -> turn-02, 12 -> smooth, 8 -> man-01, 15 -> footage, 21 -> factory, 18 -> commercial, 24 -> mental, 7 -> operate-01, 1 -> sound, 17 -> and, 23 -> image, 4 -> motorcycle, 11 -> move-01, 14 -> machine, 20 -> derive-01, 6 -> clean, 9 -> line, 0 -> track, 22 -> modern, 16 -> edit-01, 19 -> main, 10 -> assembly, 3 -> car, 13 -> and),Map(m3 -> move-01, e -> edit-01, s2 -> smooth, t -> track, m2 -> man-01, m5 -> main, a3 -> and, s -> sound, m -> motorcycle, d -> derive-01, a -> assembly, c3 -> commercial, m7 -> mental, o2 -> operate-01, m4 -> machine, t2 -> turn-02, a2 -> and, i -> image, c -> car, f2 -> factory, l -> line, f -> footage, o -> or, m6 -> modern, c2 -> clean))),[Ljava.lang.String;@705138d2,Annotation([Ljava.lang.String;@64699c99,[Ljava.lang.String;@51a8344f,[Ljava.lang.String;@7a02586a),Annotation([Ljava.lang.String;@2ffad5ba,[Ljava.lang.String;@7ce5bef1,[Ledu.cmu.lti.nlp.amr.Dependency;@4f5b0046),Annotation([Ljava.lang.String;@5f6f1c5d,[Ljava.lang.String;@77af4e9d,[Ljava.lang.String;@165262ce),Annotation([Ljava.lang.String;@7ad4cdd4,[Ljava.lang.String;@2915584c,[Ledu.cmu.lti.nlp.amr.Entity;@3857faa6))
AMR:
(a2 / and, op, f / footage)
(a2 / and, op, m3 / move-01)
(a3 / and, op, c3 / commercial)
(c / car, mod, m / motorcycle)
(d / derive-01, ARG0, i / image)
(d / derive-01, ARG1, a2 / and)
(d / derive-01, ARG3, a3 / and)
(d / derive-01, mod, m5 / main)
(e / edit-01, ARG0, c2 / clean)
(e / edit-01, ARG1, f / footage)
(f2 / factory, mod, m6 / modern)
(i / image, mod, f2 / factory)
(i / image, mod, m7 / mental)
(l / line, mod, a / assembly)
(m2 / man-01, ARG0, l / line)
(m2 / man-01, ARG1, s / sound)
(m2 / man-01, purpose, t2 / turn-02)
(m3 / move-01, ARG1, l / line)
(m3 / move-01, mod, s2 / smooth)
(o / or, op, c / car)
(o2 / operate-01, ARG0, l / line)
(o2 / operate-01, ARG1, m4 / machine)
(t / track, mod, s / sound)
(t2 / turn-02, ARG1, c / car)

Decoded in 967,282 microseconds
Sentence: inasmuch as the value of that interest does not derive from some other interest of the rightholder or of other persons

Spans:
Span 9-10:  derive => derive-01
Span 13-14:  interest => interest-01
Span 6-7:  interest => interest-01
Span 17-18:  or => or
Span 19-20:  other => other
Span 12-13:  other => other
Span 20-21:  persons => person
Span 11-12:  some => some
Span 3-4:  value => value-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),persons,person,false), Span(19,20,List(1),other,other,false), Span(17,18,List(2),or,or,false), Span(13,14,List(3),interest,interest-01,false), Span(12,13,List(4),other,other,false), Span(11,12,List(5),some,some,false), Span(9,10,List(6),derive,derive-01,false), Span(6,7,List(7),interest,interest-01,false), Span(3,4,List(8),value,value-01,false)),Map(2 -> or, 5 -> some, 8 -> value-01, 7 -> interest-01, 1 -> other, 4 -> other, 6 -> derive-01, 0 -> person, 3 -> interest-01),Map(o3 -> other, s -> some, v -> value-01, d -> derive-01, p -> person, o2 -> or, i2 -> interest-01, i -> interest-01, o -> other))),[Ljava.lang.String;@1808c530,Annotation([Ljava.lang.String;@67c9dea3,[Ljava.lang.String;@7637d490,[Ljava.lang.String;@4b647692),Annotation([Ljava.lang.String;@30a491e9,[Ljava.lang.String;@46770f2,[Ledu.cmu.lti.nlp.amr.Dependency;@23282220),Annotation([Ljava.lang.String;@1fd874e8,[Ljava.lang.String;@3be33bad,[Ljava.lang.String;@4362f992),Annotation([Ljava.lang.String;@16ef02ce,[Ljava.lang.String;@25a12e25,[Ledu.cmu.lti.nlp.amr.Entity;@78dc926f))
AMR:
(d / derive-01, ARG0, o2 / or)
(d / derive-01, ARG1, v / value-01)
(d / derive-01, ARG2, i / interest-01)
(i / interest-01, mod, s / some)
(i2 / interest-01, ARG2, v / value-01)
(o2 / or, mod, o3 / other)
(o2 / or, op, p / person)
(p / person, mod, o / other)

Decoded in 38,673 microseconds
Sentence: salaries and problems deriving from the nature of the work task and of work organisation dash

Spans:
Span 11-12:  and => and
Span 1-2:  and => and
Span 6-7:  nature => nature
Span 14-15:  organisation => organize-01
Span 2-3:  problems => problem
Span 0-1:  salaries => salary
Span 10-11:  task => task

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),organisation,organize-01,false), Span(11,12,List(1),and,and,false), Span(10,11,List(2),task,task,false), Span(6,7,List(3),nature,nature,false), Span(2,3,List(4),problems,problem,false), Span(1,2,List(5),and,and,false), Span(0,1,List(6),salaries,salary,false)),Map(2 -> task, 5 -> and, 1 -> and, 4 -> problem, 6 -> salary, 0 -> organize-01, 3 -> nature),Map(n -> nature, t -> task, s -> salary, p -> problem, a -> and, a2 -> and, o -> organize-01))),[Ljava.lang.String;@5911f366,Annotation([Ljava.lang.String;@2982db39,[Ljava.lang.String;@4e069079,[Ljava.lang.String;@10f71ff4),Annotation([Ljava.lang.String;@5052d4df,[Ljava.lang.String;@6e15a5ab,[Ledu.cmu.lti.nlp.amr.Dependency;@4f2fb603),Annotation([Ljava.lang.String;@4556a792,[Ljava.lang.String;@3c1385ce,[Ljava.lang.String;@25b5b632),Annotation([Ljava.lang.String;@3ccc9ff5,[Ljava.lang.String;@1e19ad02,[Ledu.cmu.lti.nlp.amr.Entity;@27ad6dbe))
AMR:
(a / and, domain, s / salary)
(a / and, op, n / nature)
(a2 / and, op, p / problem)
(a2 / and, op, s / salary)
(n / nature, poss, t / task)
(o / organize-01, ARG0, a2 / and)

Decoded in 29,551 microseconds
Sentence: but if the intrusive rock was derived from a particularly metalrich bit  of oceanic crust then not only will it have a high content of ore  metals itself but the hydrothermal solutions derived from it will tend  to concentrate the ore metals so that the ore bodies that are finally  deposited in the volcanic rocks may have such a high proportion of  useful metals that they are economically workable

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = but if the intrusive rock was derived from a particularly metalrich bit  of oceanic crust then not only will it have a high content of ore  metals itself but the hydrothermal solutions derived from it will tend  to concentrate the ore metals so that the ore bodies that are finally  deposited in the volcanic rocks may have such a high proportion of  useful metals that they are economically workable
myTokenized = but if the intrusive rock was derived from a particularly metalrich bit of oceanic crust then not only will it have a high content of ore metals itself but the hydrothermal solutions derived from it will tend to concentrate the ore metals so that the ore bodies that are finally deposited in the volcanic rocks may have such a high proportion of useful metals that they are economically workable
i = 12
prefix = List(but, if, the, intrusive, rock, was, derived, from, a, particularly, metalrich, bit, of)
regexr = \Qb\E ?\Qu\E ?\Qt\E ?\Qi\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qr\E ?\Qu\E ?\Qs\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qr\E ?\Qo\E ?\Qc\E ?\Qk\E ?\Qw\E ?\Qa\E ?\Qs\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qd\E ?\Qf\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qa\E ?\Qp\E ?\Qa\E ?\Qr\E ?\Qt\E ?\Qi\E ?\Qc\E ?\Qu\E ?\Ql\E ?\Qa\E ?\Qr\E ?\Ql\E ?\Qy\E ?\Qm\E ?\Qe\E ?\Qt\E ?\Qa\E ?\Ql\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qh\E ?\Qb\E ?\Qi\E ?\Qt\E ?\Qo\E ?\Qf\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the party should not derive its authority from a paragraph of text it must prove it every day

Spans:
Span 6-7:  authority => authority
Span 17-18:  day => day
Span 4-5:  derive => derive-01
Span 16-17:  every => every
Span 15-16:  it => it
Span 12-13:  it => it
Span 9-10:  paragraph => paragraph
Span 1-2:  party => party
Span 14-15:  prove => prove-01
Span 2-3:  should => recommend-01
Span 11-12:  text => text

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),day,day,false), Span(16,17,List(1),every,every,false), Span(15,16,List(2),it,it,false), Span(14,15,List(3),prove,prove-01,false), Span(12,13,List(4),it,it,false), Span(11,12,List(5),text,text,false), Span(9,10,List(6),paragraph,paragraph,false), Span(6,7,List(7),authority,authority,false), Span(4,5,List(8),derive,derive-01,false), Span(2,3,List(9),should,recommend-01,false), Span(1,2,List(10),party,party,false)),Map(2 -> it, 5 -> text, 8 -> derive-01, 7 -> authority, 1 -> every, 4 -> it, 6 -> paragraph, 9 -> recommend-01, 0 -> day, 10 -> party, 3 -> prove-01),Map(e -> every, t -> text, p2 -> paragraph, d -> day, p -> prove-01, a -> authority, d2 -> derive-01, i2 -> it, r -> recommend-01, i -> it, p3 -> party))),[Ljava.lang.String;@788aafe3,Annotation([Ljava.lang.String;@59219de8,[Ljava.lang.String;@2e06180f,[Ljava.lang.String;@12159864),Annotation([Ljava.lang.String;@47c7d682,[Ljava.lang.String;@10d4159f,[Ledu.cmu.lti.nlp.amr.Dependency;@53d7825a),Annotation([Ljava.lang.String;@69af0db6,[Ljava.lang.String;@63ad5dee,[Ljava.lang.String;@af1e762),Annotation([Ljava.lang.String;@f8dd88b,[Ljava.lang.String;@298395a7,[Ledu.cmu.lti.nlp.amr.Entity;@7dd61c3b))
AMR:
(d / day, mod, e / every)
(d2 / derive-01, ARG0, p3 / party)
(d2 / derive-01, ARG1, a / authority)
(d2 / derive-01, ARG2, p2 / paragraph)
(d2 / derive-01, extent, t / text)
(p / prove-01, ARG0, i2 / it)
(p / prove-01, ARG1, i / it)
(p / prove-01, manner, t / text)
(p / prove-01, time, d / day)
(r / recommend-01, ARG1, d2 / derive-01)

Decoded in 229,549 microseconds
Sentence: cassell letter 1 december suggests that mrs thatchers saying i am what i am may derive from godlike pretensions

Spans:
Span 2-3:  1 => 1
Span 3-4:  december => (date-entity :month 12)
Span 15-16:  derive => derive-01
Span 12-13:  i => i
Span 9-10:  i => i
Span 1-2:  letter => letter
Span 14-15:  may => (date-entity :month 5)
Span 8-9:  saying => say-01
Span 4-5:  suggests => suggest-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),derive,derive-01,false), Span(14,15,List(2, 1),may,(date-entity :month 5),false), Span(12,13,List(3),i,i,false), Span(9,10,List(4),i,i,false), Span(8,9,List(5),saying,say-01,false), Span(4,5,List(6),suggests,suggest-01,false), Span(3,4,List(8, 7),december,(date-entity :month 12),false), Span(2,3,List(9),1,1,false), Span(1,2,List(10),letter,letter,false)),Map(2 -> 5, 5 -> say-01, 8 -> 12, 7 -> date-entity, 1 -> date-entity, 4 -> i, 6 -> suggest-01, 9 -> 1, 0 -> derive-01, 10 -> letter, 3 -> i),Map(12 -> 1, s2 -> suggest-01, 5 -> 5, d3 -> date-entity, s -> say-01, d -> derive-01, 1 -> 12, d2 -> date-entity, i2 -> i, i -> i, l -> letter))),[Ljava.lang.String;@73d7a607,Annotation([Ljava.lang.String;@52d550fb,[Ljava.lang.String;@32b7b939,[Ljava.lang.String;@3be16732),Annotation([Ljava.lang.String;@4b3e2254,[Ljava.lang.String;@5c3fdf63,[Ledu.cmu.lti.nlp.amr.Dependency;@65630be5),Annotation([Ljava.lang.String;@49a21b63,[Ljava.lang.String;@31b42659,[Ljava.lang.String;@2a41b68d),Annotation([Ljava.lang.String;@4037f8a7,[Ljava.lang.String;@1aa5bce1,[Ledu.cmu.lti.nlp.amr.Entity;@77136571))
AMR:
(d / derive-01, ARG0, 12 / 1)
(d / derive-01, ARG1, s / say-01)
(d / derive-01, mod, d2 / date-entity)
(d2 / date-entity, month, 5 / 5)
(d3 / date-entity, month, 1 / 12)
(s / say-01, ARG0, i2 / i)
(s / say-01, ARG2, i / i)
(s2 / suggest-01, ARG0, l / letter)
(s2 / suggest-01, ARG1, d2 / date-entity)
(s2 / suggest-01, time, d3 / date-entity)

Decoded in 216,738 microseconds
Sentence: so the mechanism of travel is like that of a nuee ardente except that  in some nuees the gas that cushions the flow may be air entrapped by the  onrushing mass of debris while in an ignimbrite the gas is derived from  within the flow itself

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = so the mechanism of travel is like that of a nuee ardente except that  in some nuees the gas that cushions the flow may be air entrapped by the  onrushing mass of debris while in an ignimbrite the gas is derived from  within the flow itself
myTokenized = so the mechanism of travel is like that of a nuee ardente except that in some nuees the gas that cushions the flow may be air entrapped by the onrushing mass of debris while in an ignimbrite the gas is derived from within the flow itself
i = 14
prefix = List(so, the, mechanism, of, travel, is, like, that, of, a, nuee, ardente, except, that, in)
regexr = \Qs\E ?\Qo\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qm\E ?\Qe\E ?\Qc\E ?\Qh\E ?\Qa\E ?\Qn\E ?\Qi\E ?\Qs\E ?\Qm\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qv\E ?\Qe\E ?\Ql\E ?\Qi\E ?\Qs\E ?\Ql\E ?\Qi\E ?\Qk\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qa\E ?\Qn\E ?\Qu\E ?\Qe\E ?\Qe\E ?\Qa\E ?\Qr\E ?\Qd\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qe\E ?\Qe\E ?\Qx\E ?\Qc\E ?\Qe\E ?\Qp\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the first sealdah station of 1862 derived its prime grandeur from its engineering works a sixmile embankment had to be built to bring the railway into the centre of calcutta

NER Entity: (country :name (name :op "calcutta"))
Spans:
Span 5-6:  1862 => (date-entity :year 1862)
Span 22-23:  bring => bring-01
Span 20-21:  built => build-01
Span 6-7:  derived => derive-01
Span 12-13:  engineering => engineer-01
Span 8-9:  prime => prime
Span 24-25:  railway => railway
Span 3-4:  station => station

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),railway,railway,false), Span(22,23,List(1),bring,bring-01,false), Span(20,21,List(2),built,build-01,false), Span(12,13,List(3),engineering,engineer-01,false), Span(8,9,List(4),prime,prime,false), Span(6,7,List(5),derived,derive-01,false), Span(5,6,List(7, 6),1862,(date-entity :year 1862),false), Span(3,4,List(8),station,station,false)),Map(2 -> build-01, 5 -> derive-01, 8 -> station, 7 -> 1862, 1 -> bring-01, 4 -> prime, 6 -> date-entity, 0 -> railway, 3 -> engineer-01),Map(e -> engineer-01, b -> bring-01, b2 -> build-01, s -> station, d -> derive-01, 1 -> 1862, p -> prime, d2 -> date-entity, r -> railway))),[Ljava.lang.String;@35595365,Annotation([Ljava.lang.String;@7b72273f,[Ljava.lang.String;@36ed86a,[Ljava.lang.String;@624218e8),Annotation([Ljava.lang.String;@617159bd,[Ljava.lang.String;@58bab945,[Ledu.cmu.lti.nlp.amr.Dependency;@4ad98e85),Annotation([Ljava.lang.String;@111be427,[Ljava.lang.String;@3e1fc537,[Ljava.lang.String;@17ccbdbe),Annotation([Ljava.lang.String;@2bd1127,[Ljava.lang.String;@4ab118d8,[Ledu.cmu.lti.nlp.amr.Entity;@30d63337))
AMR:
(b / bring-01, ARG0, p / prime)
(b / bring-01, ARG1, r / railway)
(b2 / build-01, ARG0, e / engineer-01)
(b2 / build-01, ARG1, b / bring-01)
(d / derive-01, ARG0, s / station)
(d / derive-01, ARG1, b2 / build-01)
(d / derive-01, time, d2 / date-entity)
(d2 / date-entity, year, 1 / 1862)

Decoded in 218,162 microseconds
