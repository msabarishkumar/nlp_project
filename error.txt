 ### Tokenizing input ###
/home/sabar/Desktop/nlp_project/jamr/tools/cdec/corpus/support/utf8-normalize.sh: Cannot find ICU uconv (http://site.icu-project.org/) ... falling back to iconv. Quality may suffer.
 ### Running NER system ###
~/Desktop/nlp_project/jamr/tools/IllinoisNerExtended ~/Desktop/nlp_project/jamr
Adding feature: Forms
Adding feature: Capitalization
Adding feature: WordTypeInformation
Adding feature: Affixes
Adding feature: PreviousTag1
Adding feature: PreviousTag2
Adding feature: PreviousTagPatternLevel1
Adding feature: PreviousTagPatternLevel2
Adding feature: PrevTagsForContext
Adding feature: PredictionsLevel1
Adding feature: GazetteersFeatures
Adding feature: BrownClusterPaths
Loading gazetteers....
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
	loading gazetteer:....ner-ext/KnownLists/known_nationalities.lst
	loading gazetteer:....ner-ext/KnownLists/known_names.big.lst
	loading gazetteer:....ner-ext/KnownLists/WikiPeople.lst
	loading gazetteer:....ner-ext/KnownLists/temporal_words.txt
	loading gazetteer:....ner-ext/KnownLists/WikiLocationsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/measurments.txt
	loading gazetteer:....ner-ext/KnownLists/WikiPeopleRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/cardinalNumber.txt
	loading gazetteer:....ner-ext/KnownLists/WikiManMadeObjectNames.lst
	loading gazetteer:....ner-ext/KnownLists/known_corporations.lst
	loading gazetteer:....ner-ext/KnownLists/WikiCompetitionsBattlesEvents.lst
	loading gazetteer:....ner-ext/KnownLists/currencyFinal.txt
	loading gazetteer:....ner-ext/KnownLists/WikiOrganizationsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/WikiOrganizations.lst
	loading gazetteer:....ner-ext/KnownLists/known_place.lst
	loading gazetteer:....ner-ext/KnownLists/KnownNationalities.txt
	loading gazetteer:....ner-ext/KnownLists/Occupations.txt
	loading gazetteer:....ner-ext/KnownLists/WikiSongs.lst
	loading gazetteer:....ner-ext/KnownLists/WikiArtWorkRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_title.lst
	loading gazetteer:....ner-ext/KnownLists/ordinalNumber.txt
	loading gazetteer:....ner-ext/KnownLists/known_name.lst
	loading gazetteer:....ner-ext/KnownLists/WikiManMadeObjectNamesRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/WikiArtWork.lst
	loading gazetteer:....ner-ext/KnownLists/WikiSongsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_country.lst
	loading gazetteer:....ner-ext/KnownLists/WikiFilms.lst
	loading gazetteer:....ner-ext/KnownLists/WikiCompetitionsBattlesEventsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_jobs.lst
	loading gazetteer:....ner-ext/KnownLists/VincentNgPeopleTitles.txt
	loading gazetteer:....ner-ext/KnownLists/WikiFilmsRedirects.lst
	loading gazetteer:....ner-ext/KnownLists/known_state.lst
	loading gazetteer:....ner-ext/KnownLists/WikiLocations.lst
found 33 gazetteers
1288301 words added
95262 words added
85963 words added

Working parameters are:
	inferenceMethod=GREEDY
	beamSize=5
	thresholdPrediction=false
	predictionConfidenceThreshold=-1.0
	labelTypes
		PER		ORG		LOC		MISC
	logging=false
	debuggingLogPath=null
	forceNewSentenceOnLineBreaks=true
	keepOriginalFileTokenizationAndSentenceSplitting=false
	taggingScheme=BILOU
	tokenizationScheme=DualTokenizationScheme
	pathToModelFile=data/Models/CoNLL/finalSystemBILOU.model
Brown clusters resource: 
	-Path: brown-clusters/brown-english-wikitext.case-intact.txt-c1000-freq10-v3.txt
	-WordThres=5
	-IsLowercased=false
Brown clusters resource: 
	-Path: brown-clusters/brownBllipClusters
	-WordThres=5
	-IsLowercased=false
Brown clusters resource: 
	-Path: brown-clusters/brown-rcv1.clean.tokenized-CoNLL03.txt-c1000-freq1.txt
	-WordThres=5
	-IsLowercased=false

Tagging file: /tmp/jamr-17317.snt.tmp
Reading model file : data/Models/CoNLL/finalSystemBILOU.model.level1
Reading model file : data/Models/CoNLL/finalSystemBILOU.model.level2
Extracting features for level 2 inference
Done - Extracting features for level 2 inference
~/Desktop/nlp_project/jamr
 ### Running dependency parser ###
Adding annotator tokenize
Adding annotator ssplit
Adding annotator parse
Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ... done [1.3 sec].
 ### Running JAMR ###
Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: i thought of going out for some choc bars he would say adding sotto voce as his daughter ran for her anorak and i thought we might drop off at the gym  piano teachers  library on the way ellip   he promised her a sight of arfur this morning

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = i thought of going out for some choc bars he would say adding sotto voce as his daughter ran for her anorak and i thought we might drop off at the gym  piano teachers  library on the way ellip   he promised her a sight of arfur this morning
myTokenized = i thought of going out for some choc bars he would say adding sotto voce as his daughter ran for her anorak and i thought we might drop off at the gym piano teachers library on the way ellip he promised her a sight of arfur this morning
i = 32
prefix = List(i, thought, of, going, out, for, some, choc, bars, he, would, say, adding, sotto, voce, as, his, daughter, ran, for, her, anorak, and, i, thought, we, might, drop, off, at, the, gym, piano)
regexr = \Qi\E ?\Qt\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qg\E ?\Qo\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qs\E ?\Qo\E ?\Qm\E ?\Qe\E ?\Qc\E ?\Qh\E ?\Qo\E ?\Qc\E ?\Qb\E ?\Qa\E ?\Qr\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Qw\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qs\E ?\Qa\E ?\Qy\E ?\Qa\E ?\Qd\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qs\E ?\Qo\E ?\Qt\E ?\Qt\E ?\Qo\E ?\Qv\E ?\Qo\E ?\Qc\E ?\Qe\E ?\Qa\E ?\Qs\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qd\E ?\Qa\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qo\E ?\Qr\E ?\Qa\E ?\Qk\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qi\E ?\Qt\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qw\E ?\Qe\E ?\Qm\E ?\Qi\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qd\E ?\Qr\E ?\Qo\E ?\Qp\E ?\Qo\E ?\Qf\E ?\Qf\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qg\E ?\Qy\E ?\Qm\E ?\Qp\E ?\Qi\E ?\Qa\E ?\Qn\E ?\Qo\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: we know we have money promised through covenants but we will need additional money as well said mr chadwick

Spans:
Span 12-13:  additional => additional
Span 8-9:  but => contrast-01
Span 7-8:  covenants => covenant
Span 1-2:  know => know-01
Span 13-14:  money => money
Span 4-5:  money => money
Span 11-12:  need => need-01
Span 5-6:  promised => promise-01
Span 16-17:  said => say-01
Span 9-10:  we => we
Span 2-3:  we => we
Span 0-1:  we => we
Span 15-16:  well => well

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),said,say-01,false), Span(15,16,List(1),well,well,false), Span(13,14,List(2),money,money,false), Span(12,13,List(3),additional,additional,false), Span(11,12,List(4),need,need-01,false), Span(9,10,List(5),we,we,false), Span(8,9,List(6),but,contrast-01,false), Span(7,8,List(7),covenants,covenant,false), Span(5,6,List(8),promised,promise-01,false), Span(4,5,List(9),money,money,false), Span(2,3,List(10),we,we,false), Span(1,2,List(11),know,know-01,false), Span(0,1,List(12),we,we,false)),Map(2 -> money, 5 -> we, 12 -> we, 8 -> promise-01, 7 -> covenant, 1 -> well, 4 -> need-01, 11 -> know-01, 6 -> contrast-01, 0 -> say-01, 9 -> money, 3 -> additional, 10 -> we),Map(w -> well, n -> need-01, k -> know-01, m2 -> money, s -> say-01, w3 -> we, m -> money, p -> promise-01, a -> additional, w2 -> we, c -> contrast-01, c2 -> covenant, w4 -> we))),[Ljava.lang.String;@701fd0d1,Annotation([Ljava.lang.String;@38c682d9,[Ljava.lang.String;@70b891ad,[Ljava.lang.String;@65642eab),Annotation([Ljava.lang.String;@1434108e,[Ljava.lang.String;@662ae4fe,[Ledu.cmu.lti.nlp.amr.Dependency;@a201419),Annotation([Ljava.lang.String;@40077a80,[Ljava.lang.String;@2afb8a57,[Ljava.lang.String;@68376bcc),Annotation([Ljava.lang.String;@e865388,[Ljava.lang.String;@14d60d2b,[Ledu.cmu.lti.nlp.amr.Entity;@70fa8cbc))
AMR:
(c / contrast-01, ARG1, k / know-01)
(c / contrast-01, ARG2, n / need-01)
(k / know-01, ARG0, w4 / we)
(m / money, mod, a / additional)
(n / need-01, ARG0, w2 / we)
(n / need-01, ARG1, m / money)
(n / need-01, time, w / well)
(p / promise-01, ARG0, w3 / we)
(p / promise-01, ARG1, m2 / money)
(p / promise-01, ARG2, c / contrast-01)
(p / promise-01, location, c2 / covenant)
(s / say-01, ARG1, c / contrast-01)

Decoded in 1,777,098 microseconds
Sentence: even in vast zaire president mobutu sese seko has promised to end singleparty rule he is under mounting pressure from critics in belgium and america

NER Entity: (country :name (name :op "zaire"))
NER Entity: (person :name (name :op "mobutu" :op "sese" :op "seko"))
NER Entity: (country :name (name :op "belgium"))
NER Entity: (country :name (name :op "america"))
NER Entity: (country :name (name :op "america"))
Spans:
Span 24-25:  america => (country :name (name :op "America"))
Span 23-24:  and => and
Span 20-21:  critics => critic
Span 14-15:  he => he
Span 5-8:  mobutu sese seko => (person :name (name :op "mobutu" :op "sese" :op "seko"))
Span 17-18:  mounting => mount-02
Span 4-5:  president => (have-org-role-91 :ARG2 president)
Span 18-19:  pressure => pressure-01
Span 9-10:  promised => promise-01
Span 13-14:  rule => rule-03
Span 2-3:  vast => vast

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),america,(country :name (name :op "America")),false), Span(23,24,List(3),and,and,false), Span(20,21,List(4),critics,critic,false), Span(18,19,List(5),pressure,pressure-01,false), Span(17,18,List(6),mounting,mount-02,false), Span(14,15,List(7),he,he,false), Span(13,14,List(8),rule,rule-03,false), Span(9,10,List(9),promised,promise-01,false), Span(5,8,List(14, 13, 12, 11, 10),mobutu sese seko,(person :name (name :op "mobutu" :op "sese" :op "seko")),false), Span(4,5,List(16, 15),president,(have-org-role-91 :ARG2 president),false), Span(2,3,List(17),vast,vast,false)),Map(2 -> "America", 5 -> pressure-01, 12 -> "mobutu", 15 -> have-org-role-91, 8 -> rule-03, 7 -> he, 17 -> vast, 1 -> name, 4 -> critic, 11 -> name, 14 -> "seko", 6 -> mount-02, 0 -> country, 9 -> promise-01, 16 -> president, 3 -> and, 10 -> person, 13 -> "sese"),Map(n -> name, h -> he, h2 -> have-org-role-91, p2 -> promise-01, v -> vast, m -> mount-02, p -> pressure-01, a -> and, p4 -> president, r -> rule-03, c -> country, p3 -> person, c2 -> critic, n2 -> name))),[Ljava.lang.String;@582c8ca7,Annotation([Ljava.lang.String;@54c6552a,[Ljava.lang.String;@290163e1,[Ljava.lang.String;@1a445dcf),Annotation([Ljava.lang.String;@7e6ace81,[Ljava.lang.String;@161bb7fe,[Ledu.cmu.lti.nlp.amr.Dependency;@75cc9008),Annotation([Ljava.lang.String;@490439a3,[Ljava.lang.String;@346421c8,[Ljava.lang.String;@19e5ec57),Annotation([Ljava.lang.String;@45ff5109,[Ljava.lang.String;@7d2149c5,[Ledu.cmu.lti.nlp.amr.Entity;@147264b1))
AMR:
(a / and, op, c / country)
(a / and, op, p / pressure-01)
(c / country, name, n / name)
(c2 / critic, poss, a / and)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, p4 / president)
(m / mount-02, ARG0, h / he)
(m / mount-02, ARG1, p / pressure-01)
(n / name, op, "America")
(n2 / name, op, "mobutu")
(n2 / name, op, "seko")
(n2 / name, op, "sese")
(p2 / promise-01, ARG0, p3 / person)
(p3 / person, name, n2 / name)
(p4 / president, mod, v / vast)
(r / rule-03, ARG0, p3 / person)
(r / rule-03, ARG1, h / he)

Decoded in 897,956 microseconds
Sentence: dr aneez esmail a registrar in public health medicine said a year ago david mellor as junior health minister promised some action but a year has gone by and nothing has changed

Spans:
Span 21-22:  action => action
Span 28-29:  and => and
Span 22-23:  but => contrast-01
Span 31-32:  changed => change-01
Span 17-18:  health => health
Span 7-8:  health => health
Span 16-17:  junior => junior
Span 8-9:  medicine => medicine
Span 18-19:  minister => (have-org-role-91 :ARG2 minister)
Span 29-30:  nothing => nothing
Span 19-20:  promised => promise-01
Span 6-7:  public => public
Span 9-10:  said => say-01
Span 20-21:  some => some
Span 24-25:  year => year
Span 11-12:  year => year

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),changed,change-01,false), Span(29,30,List(1),nothing,nothing,false), Span(28,29,List(2),and,and,false), Span(24,25,List(3),year,year,false), Span(22,23,List(4),but,contrast-01,false), Span(21,22,List(5),action,action,false), Span(20,21,List(6),some,some,false), Span(19,20,List(7),promised,promise-01,false), Span(18,19,List(9, 8),minister,(have-org-role-91 :ARG2 minister),false), Span(17,18,List(10),health,health,false), Span(16,17,List(11),junior,junior,false), Span(11,12,List(12),year,year,false), Span(9,10,List(13),said,say-01,false), Span(8,9,List(14),medicine,medicine,false), Span(7,8,List(15),health,health,false), Span(6,7,List(16),public,public,false)),Map(2 -> and, 5 -> action, 12 -> year, 15 -> health, 8 -> have-org-role-91, 7 -> promise-01, 1 -> nothing, 4 -> contrast-01, 11 -> junior, 14 -> medicine, 6 -> some, 0 -> change-01, 9 -> minister, 16 -> public, 3 -> year, 10 -> health, 13 -> say-01),Map(n -> nothing, h -> have-org-role-91, s2 -> say-01, h2 -> health, m2 -> medicine, p2 -> public, j -> junior, s -> some, m -> minister, y -> year, p -> promise-01, a -> and, a2 -> action, h3 -> health, c -> change-01, c2 -> contrast-01, y2 -> year))),[Ljava.lang.String;@1a9868b6,Annotation([Ljava.lang.String;@c02925e,[Ljava.lang.String;@7cd75f7a,[Ljava.lang.String;@1fbd829e),Annotation([Ljava.lang.String;@52ca6359,[Ljava.lang.String;@65409285,[Ledu.cmu.lti.nlp.amr.Dependency;@72538db1),Annotation([Ljava.lang.String;@4b7b9a1a,[Ljava.lang.String;@1fc247ad,[Ljava.lang.String;@befbf25),Annotation([Ljava.lang.String;@28ee1c42,[Ljava.lang.String;@2881460c,[Ledu.cmu.lti.nlp.amr.Entity;@3f1dd29a))
AMR:
(a / and, op, c / change-01)
(a2 / action, quant, s / some)
(c / change-01, ARG0, n / nothing)
(c / change-01, ARG1, y / year)
(c2 / contrast-01, ARG1, p / promise-01)
(c2 / contrast-01, ARG2, c / change-01)
(h / have-org-role-91, ARG1, h2 / health)
(h / have-org-role-91, ARG2, m / minister)
(h2 / health, mod, j / junior)
(h3 / health, mod, p2 / public)
(m2 / medicine, beneficiary, h3 / health)
(p / promise-01, ARG1, m / minister)
(p / promise-01, ARG2, a2 / action)
(s2 / say-01, ARG0, m2 / medicine)
(s2 / say-01, ARG1, c2 / contrast-01)
(s2 / say-01, ARG2, y2 / year)

Decoded in 824,347 microseconds
Sentence: the publicity indistinguishable from the surrounding pornography promises that accounts of lesbianism beatings and seduction await

Spans:
Span 9-10:  accounts => account
Span 13-14:  and => and
Span 12-13:  beatings => beat-01
Span 6-7:  pornography => pornography
Span 7-8:  promises => promise-01
Span 1-2:  publicity => publicity
Span 5-6:  surrounding => surround-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),and,and,false), Span(12,13,List(1),beatings,beat-01,false), Span(9,10,List(2),accounts,account,false), Span(7,8,List(3),promises,promise-01,false), Span(6,7,List(4),pornography,pornography,false), Span(5,6,List(5),surrounding,surround-01,false), Span(1,2,List(6),publicity,publicity,false)),Map(2 -> account, 5 -> surround-01, 1 -> beat-01, 4 -> pornography, 6 -> publicity, 0 -> and, 3 -> promise-01),Map(b -> beat-01, p2 -> pornography, s -> surround-01, p -> promise-01, a -> and, a2 -> account, p3 -> publicity))),[Ljava.lang.String;@3eed9cd5,Annotation([Ljava.lang.String;@61d38439,[Ljava.lang.String;@58dec5c,[Ljava.lang.String;@28988edd),Annotation([Ljava.lang.String;@37cb63fd,[Ljava.lang.String;@a1193a9,[Ledu.cmu.lti.nlp.amr.Dependency;@7f54169),Annotation([Ljava.lang.String;@76995893,[Ljava.lang.String;@4d8657b9,[Ljava.lang.String;@2ee95a72),Annotation([Ljava.lang.String;@5a310a6d,[Ljava.lang.String;@49a3a85d,[Ledu.cmu.lti.nlp.amr.Entity;@17829770))
AMR:
(a / and, op, b / beat-01)
(a2 / account, topic, a / and)
(p / promise-01, ARG0, p3 / publicity)
(p / promise-01, ARG1, a / and)
(s / surround-01, ARG0, p / promise-01)
(s / surround-01, ARG1, p2 / pornography)

Decoded in 95,577 microseconds
Sentence: proposed arms cuts promised this week by the us defence secretary dick cheney go beyond the levels now being negotiated in vienna and are expected to crank the talks back on course in time for a deal within a year

NER Entity: (person :name (name :op "dick" :op "cheney"))
NER Entity: (country :name (name :op "vienna"))
Spans:
Span 22-23:  and => and
Span 1-2:  arms => arm
Span 29-30:  back => back
Span 14-15:  beyond => beyond
Span 2-3:  cuts => cut-02
Span 36-37:  deal => deal-01
Span 9-10:  defence => defend-01
Span 11-13:  dick cheney => (person :name (name :op "dick" :op "cheney"))
Span 24-25:  expected => expect-01
Span 16-17:  levels => level
Span 17-18:  now => now
Span 3-4:  promised => promise-01
Span 0-1:  proposed => propose-01
Span 10-11:  secretary => secretary
Span 28-29:  talks => talk-01
Span 4-5:  this => this
Span 33-34:  time => time
Span 5-6:  week => week
Span 37-38:  within => within
Span 39-40:  year => year

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),year,year,false), Span(37,38,List(1),within,within,false), Span(36,37,List(2),deal,deal-01,false), Span(33,34,List(3),time,time,false), Span(29,30,List(4),back,back,false), Span(28,29,List(5),talks,talk-01,false), Span(24,25,List(6),expected,expect-01,false), Span(22,23,List(7),and,and,false), Span(17,18,List(8),now,now,false), Span(16,17,List(9),levels,level,false), Span(14,15,List(10),beyond,beyond,false), Span(11,13,List(14, 13, 12, 11),dick cheney,(person :name (name :op "dick" :op "cheney")),false), Span(10,11,List(15),secretary,secretary,false), Span(9,10,List(16),defence,defend-01,false), Span(5,6,List(17),week,week,false), Span(4,5,List(18),this,this,false), Span(3,4,List(19),promised,promise-01,false), Span(2,3,List(20),cuts,cut-02,false), Span(1,2,List(21),arms,arm,false), Span(0,1,List(22),proposed,propose-01,false)),Map(2 -> deal-01, 5 -> talk-01, 12 -> name, 15 -> secretary, 8 -> now, 21 -> arm, 18 -> this, 7 -> and, 17 -> week, 1 -> within, 4 -> back, 11 -> person, 14 -> "cheney", 20 -> cut-02, 6 -> expect-01, 22 -> propose-01, 0 -> year, 9 -> level, 16 -> defend-01, 19 -> promise-01, 3 -> time, 10 -> beyond, 13 -> "dick"),Map(e -> expect-01, w -> within, n -> now, t -> time, b -> back, b2 -> beyond, p2 -> promise-01, s -> secretary, d -> deal-01, t3 -> this, y -> year, p -> person, a -> and, d2 -> defend-01, t2 -> talk-01, w2 -> week, a2 -> arm, c -> cut-02, l -> level, p3 -> propose-01, n2 -> name))),[Ljava.lang.String;@13887906,Annotation([Ljava.lang.String;@64c182ee,[Ljava.lang.String;@5c7b0aef,[Ljava.lang.String;@120b0058),Annotation([Ljava.lang.String;@10439aa9,[Ljava.lang.String;@465ed596,[Ledu.cmu.lti.nlp.amr.Dependency;@7c188ef1),Annotation([Ljava.lang.String;@3050afdd,[Ljava.lang.String;@149eef3,[Ljava.lang.String;@1ce6942e),Annotation([Ljava.lang.String;@660a66d4,[Ljava.lang.String;@34e51ca2,[Ledu.cmu.lti.nlp.amr.Entity;@2dbaeacf))
AMR:
(a / and, op, e / expect-01)
(a / and, op, p / person)
(a / and, op, p2 / promise-01)
(b2 / beyond, op, l / level)
(c / cut-02, ARG1, a2 / arm)
(d / deal-01, ARG0, a / and)
(d / deal-01, ARG1, y / year)
(d2 / defend-01, ARG1, n / now)
(e / expect-01, ARG0, l / level)
(e / expect-01, ARG1, t2 / talk-01)
(n2 / name, op, "cheney")
(n2 / name, op, "dick")
(p / person, name, n2 / name)
(p2 / promise-01, ARG0, c / cut-02)
(p2 / promise-01, ARG1, w2 / week)
(p2 / promise-01, time, d2 / defend-01)
(p3 / propose-01, ARG1, c / cut-02)
(s / secretary, mod, d2 / defend-01)
(t2 / talk-01, ARG0, t / time)
(t2 / talk-01, ARG1, b / back)
(w / within, op, y / year)
(w2 / week, mod, t3 / this)

Decoded in 901,125 microseconds
Sentence: the deadlock was not conjured away by the ingenious compromise of december 1932 promising germany equality of status within a system of security

NER Entity: (country :name (name :op "germany"))
Spans:
Span 5-6:  away => away
Span 9-10:  compromise => compromise-01
Span 1-2:  deadlock => deadlock-01
Span 11-13:  december 1932 => (date-entity :month 12 :year 1932)
Span 15-16:  equality => equal-01
Span 13-14:  promising => promise-01
Span 22-23:  security => security
Span 17-18:  status => status
Span 20-21:  system => system
Span 18-19:  within => within

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),security,security,false), Span(20,21,List(1),system,system,false), Span(18,19,List(2),within,within,false), Span(17,18,List(3),status,status,false), Span(15,16,List(4),equality,equal-01,false), Span(13,14,List(5),promising,promise-01,false), Span(11,13,List(8, 7, 6),december 1932,(date-entity :month 12 :year 1932),false), Span(9,10,List(9),compromise,compromise-01,false), Span(5,6,List(10),away,away,false), Span(1,2,List(11),deadlock,deadlock-01,false)),Map(2 -> within, 5 -> promise-01, 8 -> 1932, 7 -> 12, 1 -> system, 11 -> deadlock-01, 4 -> equal-01, 6 -> date-entity, 9 -> compromise-01, 0 -> security, 10 -> away, 3 -> status),Map(e -> equal-01, w -> within, 12 -> 1932, s2 -> system, s -> security, d -> date-entity, 1 -> 12, p -> promise-01, a -> away, d2 -> deadlock-01, c -> compromise-01, s3 -> status))),[Ljava.lang.String;@b9f370,Annotation([Ljava.lang.String;@301d3e6f,[Ljava.lang.String;@4fee0216,[Ljava.lang.String;@12cb1b59),Annotation([Ljava.lang.String;@547079b2,[Ljava.lang.String;@2445c06d,[Ledu.cmu.lti.nlp.amr.Dependency;@5f5c46b5),Annotation([Ljava.lang.String;@232645fc,[Ljava.lang.String;@25bcb56b,[Ljava.lang.String;@82a9728),Annotation([Ljava.lang.String;@2429c748,[Ljava.lang.String;@32da5a84,[Ledu.cmu.lti.nlp.amr.Entity;@1d6caa31))
AMR:
(a / away, op, p / promise-01)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 12 / 1932)
(e / equal-01, ARG1, s3 / status)
(p / promise-01, ARG0, d2 / deadlock-01)
(p / promise-01, ARG1, c / compromise-01)
(p / promise-01, ARG2, e / equal-01)
(p / promise-01, location, w / within)
(p / promise-01, time, d / date-entity)
(w / within, op, s / security)
(w / within, op, s2 / system)

Decoded in 489,411 microseconds
Sentence: the workers education authority based in brewers street oxford has promised to send tutors to the centre for six weeks starting tomorrow

Spans:
Span 3-4:  authority => authority
Span 4-5:  based => base-01
Span 2-3:  education => educate-01
Span 10-11:  promised => promise-01
Span 12-13:  send => send-01
Span 18-19:  six => 6
Span 20-21:  starting => start-01
Span 7-8:  street => street
Span 21-22:  tomorrow => tomorrow
Span 13-14:  tutors => (person :ARG0-of tutor-01)
Span 19-20:  weeks => (temporal-quantity :unit week)
Span 1-2:  workers => (person :ARG0-of work-01)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),tomorrow,tomorrow,false), Span(20,21,List(1),starting,start-01,false), Span(19,20,List(3, 2),weeks,(temporal-quantity :unit week),false), Span(18,19,List(4),six,6,false), Span(13,14,List(6, 5),tutors,(person :ARG0-of tutor-01),false), Span(12,13,List(7),send,send-01,false), Span(10,11,List(8),promised,promise-01,false), Span(7,8,List(9),street,street,false), Span(4,5,List(10),based,base-01,false), Span(3,4,List(11),authority,authority,false), Span(2,3,List(12),education,educate-01,false), Span(1,2,List(14, 13),workers,(person :ARG0-of work-01),false)),Map(2 -> temporal-quantity, 5 -> person, 12 -> educate-01, 8 -> promise-01, 7 -> send-01, 1 -> start-01, 4 -> 6, 11 -> authority, 14 -> work-01, 6 -> tutor-01, 0 -> tomorrow, 9 -> street, 3 -> week, 10 -> base-01, 13 -> person),Map(e -> educate-01, w -> week, s2 -> send-01, t -> tomorrow, b -> base-01, p2 -> promise-01, s -> start-01, t3 -> tutor-01, p -> person, a -> authority, t2 -> temporal-quantity, w2 -> work-01, 6 -> 6, s3 -> street, p3 -> person))),[Ljava.lang.String;@12b7e845,Annotation([Ljava.lang.String;@67f2139c,[Ljava.lang.String;@45e59c14,[Ljava.lang.String;@656a08e5),Annotation([Ljava.lang.String;@146e2667,[Ljava.lang.String;@4b9b3eab,[Ledu.cmu.lti.nlp.amr.Dependency;@3d2f7354),Annotation([Ljava.lang.String;@763caf2d,[Ljava.lang.String;@a10f000,[Ljava.lang.String;@5dfc9529),Annotation([Ljava.lang.String;@71a4e6f3,[Ljava.lang.String;@13695cf,[Ledu.cmu.lti.nlp.amr.Entity;@26a549a8))
AMR:
(b / base-01, ARG1, a / authority)
(e / educate-01, ARG0, p3 / person)
(e / educate-01, ARG1, a / authority)
(e / educate-01, ARG3, s3 / street)
(p2 / promise-01, ARG0, a / authority)
(p2 / promise-01, ARG2, s2 / send-01)
(s / start-01, ARG1, t / tomorrow)
(s2 / send-01, ARG1, p / person)
(s2 / send-01, time, t / tomorrow)
(t2 / temporal-quantity, quant, 6 / 6)
(t2 / temporal-quantity, unit, w / week)
(t3 / tutor-01, ARG0, p / person)
(t3 / tutor-01, duration, t2 / temporal-quantity)
(w2 / work-01, ARG0, p3 / person)

Decoded in 424,134 microseconds
Sentence: the council has also promised not to be a party to any tobacco advertising

Spans:
Span 3-4:  also => also
Span 11-12:  any => any
Span 1-2:  council => council
Span 9-10:  party => party
Span 4-5:  promised => promise-01
Span 12-13:  tobacco => tobacco

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),tobacco,tobacco,false), Span(11,12,List(1),any,any,false), Span(9,10,List(2),party,party,false), Span(4,5,List(3),promised,promise-01,false), Span(3,4,List(4),also,also,false), Span(1,2,List(5),council,council,false)),Map(2 -> party, 5 -> council, 1 -> any, 4 -> also, 0 -> tobacco, 3 -> promise-01),Map(t -> tobacco, p2 -> promise-01, p -> party, a -> any, a2 -> also, c -> council))),[Ljava.lang.String;@2d86c86a,Annotation([Ljava.lang.String;@6bcfbe7f,[Ljava.lang.String;@13e3bb25,[Ljava.lang.String;@4c138456),Annotation([Ljava.lang.String;@1555511f,[Ljava.lang.String;@1440d52a,[Ledu.cmu.lti.nlp.amr.Dependency;@2c6ac2c9),Annotation([Ljava.lang.String;@151a30e7,[Ljava.lang.String;@6a809883,[Ljava.lang.String;@209cf715),Annotation([Ljava.lang.String;@2121946d,[Ljava.lang.String;@23979119,[Ledu.cmu.lti.nlp.amr.Entity;@33b71290))
AMR:
(p / party, prep-to, a / any)
(p2 / promise-01, ARG0, c / council)
(p2 / promise-01, ARG1, p / party)
(p2 / promise-01, ARG2, t / tobacco)
(p2 / promise-01, mod, a2 / also)

Decoded in 92,203 microseconds
Sentence: for example i have a duty to water certain plants because i promised their owners to looked after them while they are away on holiday

Spans:
Span 17-18:  after => after
Span 22-23:  away => away
Span 10-11:  because => cause-01
Span 8-9:  certain => certain
Span 5-6:  duty => duty
Span 1-2:  example => example
Span 24-25:  holiday => holiday
Span 11-12:  i => i
Span 2-3:  i => i
Span 16-17:  looked => look-01
Span 14-15:  owners => (person :ARG0-of own-01)
Span 9-10:  plants => plant
Span 12-13:  promised => promise-01
Span 20-21:  they => they
Span 7-8:  water => water

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),holiday,holiday,false), Span(22,23,List(1),away,away,false), Span(20,21,List(2),they,they,false), Span(17,18,List(3),after,after,false), Span(16,17,List(4),looked,look-01,false), Span(14,15,List(6, 5),owners,(person :ARG0-of own-01),false), Span(12,13,List(7),promised,promise-01,false), Span(11,12,List(8),i,i,false), Span(10,11,List(9),because,cause-01,false), Span(9,10,List(10),plants,plant,false), Span(8,9,List(11),certain,certain,false), Span(7,8,List(12),water,water,false), Span(5,6,List(13),duty,duty,false), Span(2,3,List(14),i,i,false), Span(1,2,List(15),example,example,false)),Map(2 -> they, 5 -> person, 12 -> water, 15 -> example, 8 -> i, 7 -> promise-01, 1 -> away, 4 -> look-01, 11 -> certain, 14 -> i, 6 -> own-01, 0 -> holiday, 9 -> cause-01, 3 -> after, 10 -> plant, 13 -> duty),Map(e -> example, w -> water, h -> holiday, t -> they, p2 -> promise-01, d -> duty, p -> person, a -> away, i2 -> i, a2 -> after, i -> i, c -> cause-01, l -> look-01, o -> own-01, p3 -> plant, c2 -> certain))),[Ljava.lang.String;@3823c676,Annotation([Ljava.lang.String;@34ba89c5,[Ljava.lang.String;@42aaff8e,[Ljava.lang.String;@686fe5d3),Annotation([Ljava.lang.String;@a59b536,[Ljava.lang.String;@787f189,[Ledu.cmu.lti.nlp.amr.Dependency;@6e025d3b),Annotation([Ljava.lang.String;@5d3704e9,[Ljava.lang.String;@47238cce,[Ljava.lang.String;@6ef14cde),Annotation([Ljava.lang.String;@23edbbb9,[Ljava.lang.String;@4cbf811c,[Ledu.cmu.lti.nlp.amr.Entity;@30b57ca1))
AMR:
(a / away, op, c / cause-01)
(c / cause-01, ARG0, p2 / promise-01)
(c / cause-01, ARG1, w / water)
(d / duty, example, i2 / i)
(d / duty, poss, t / they)
(e / example, mod, p / person)
(l / look-01, ARG1, h / holiday)
(l / look-01, time, a2 / after)
(o / own-01, ARG0, p / person)
(p / person, poss, i / i)
(p2 / promise-01, ARG0, i / i)
(p2 / promise-01, ARG1, p3 / plant)
(p2 / promise-01, ARG2, l / look-01)
(p3 / plant, mod, c2 / certain)
(w / water, consist, d / duty)

Decoded in 305,697 microseconds
Sentence: ive promised them all total confidentiality

Spans:
Span 3-4:  all => all
Span 5-6:  confidentiality => confidentiality
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),confidentiality,confidentiality,false), Span(3,4,List(1),all,all,false), Span(1,2,List(2),promised,promise-01,false)),Map(2 -> promise-01, 1 -> all, 0 -> confidentiality),Map(p -> promise-01, a -> all, c -> confidentiality))),[Ljava.lang.String;@5b094702,Annotation([Ljava.lang.String;@3e1502ff,[Ljava.lang.String;@5577d330,[Ljava.lang.String;@2dca2026),Annotation([Ljava.lang.String;@3104b646,[Ljava.lang.String;@2c5ac6ce,[Ledu.cmu.lti.nlp.amr.Dependency;@7bb21521),Annotation([Ljava.lang.String;@688968f8,[Ljava.lang.String;@154aa766,[Ljava.lang.String;@58342475),Annotation([Ljava.lang.String;@4745aa90,[Ljava.lang.String;@2ec0f87e,[Ledu.cmu.lti.nlp.amr.Entity;@7efa302c))
AMR:
(c / confidentiality, quant, a / all)
(p / promise-01, ARG2, c / confidentiality)

Decoded in 10,538 microseconds
Sentence: but the british md was promising too much technical development to customers without checking with the r and

NER Entity: (thing :name (name :op "british"))
Spans:
Span 17-18:  and => and
Span 0-1:  but => contrast-01
Span 13-14:  checking => check-01
Span 11-12:  customers => customer
Span 9-10:  development => develop-02
Span 7-8:  much => much
Span 5-6:  promising => promise-01
Span 8-9:  technical => technical
Span 6-7:  too => too

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),and,and,false), Span(13,14,List(1),checking,check-01,false), Span(11,12,List(2),customers,customer,false), Span(9,10,List(3),development,develop-02,false), Span(8,9,List(4),technical,technical,false), Span(7,8,List(5),much,much,false), Span(6,7,List(6),too,too,false), Span(5,6,List(7),promising,promise-01,false), Span(0,1,List(8),but,contrast-01,false)),Map(2 -> customer, 5 -> much, 8 -> contrast-01, 7 -> promise-01, 1 -> check-01, 4 -> technical, 6 -> too, 0 -> and, 3 -> develop-02),Map(t -> technical, m -> much, d -> develop-02, p -> promise-01, c3 -> contrast-01, a -> and, t2 -> too, c -> check-01, c2 -> customer))),[Ljava.lang.String;@9d63e96,Annotation([Ljava.lang.String;@50a6eee5,[Ljava.lang.String;@7f8e25c0,[Ljava.lang.String;@4d50a1ac),Annotation([Ljava.lang.String;@68a64adb,[Ljava.lang.String;@7d7ca589,[Ledu.cmu.lti.nlp.amr.Dependency;@25805bc),Annotation([Ljava.lang.String;@60e07ad7,[Ljava.lang.String;@31a0eaf1,[Ljava.lang.String;@3ba08dab),Annotation([Ljava.lang.String;@29b4f422,[Ljava.lang.String;@2707f992,[Ledu.cmu.lti.nlp.amr.Entity;@7c91f442))
AMR:
(a / and, op, d / develop-02)
(a / and, op, p / promise-01)
(c / check-01, ARG1, a / and)
(c3 / contrast-01, ARG2, a / and)
(d / develop-02, ARG1, c2 / customer)
(d / develop-02, degree, m / much)
(d / develop-02, mod, t / technical)
(m / much, degree, t2 / too)

Decoded in 164,008 microseconds
Sentence: instead the conference agreed to try to persuade boat people to return home while promising to review this policy in october

Spans:
Span 3-4:  agreed => agree-01
Span 8-9:  boat => boat
Span 2-3:  conference => conference
Span 12-13:  home => home
Span 0-1:  instead => instead
Span 20-21:  october => (date-entity :month 10)
Span 7-8:  persuade => persuade-01
Span 18-19:  policy => policy
Span 14-15:  promising => promise-01
Span 16-17:  review => review-01
Span 17-18:  this => this
Span 5-6:  try => try-01

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(1, 0),october,(date-entity :month 10),false), Span(18,19,List(2),policy,policy,false), Span(17,18,List(3),this,this,false), Span(16,17,List(4),review,review-01,false), Span(14,15,List(5),promising,promise-01,false), Span(12,13,List(6),home,home,false), Span(8,9,List(7),boat,boat,false), Span(7,8,List(8),persuade,persuade-01,false), Span(5,6,List(9),try,try-01,false), Span(3,4,List(10),agreed,agree-01,false), Span(2,3,List(11),conference,conference,false), Span(0,1,List(12),instead,instead,false)),Map(2 -> policy, 5 -> promise-01, 12 -> instead, 8 -> persuade-01, 7 -> boat, 1 -> 10, 4 -> review-01, 11 -> conference, 6 -> home, 0 -> date-entity, 9 -> try-01, 3 -> this, 10 -> agree-01),Map(h -> home, t -> this, b -> boat, p2 -> promise-01, d -> date-entity, 1 -> 10, p -> policy, a -> agree-01, t2 -> try-01, r -> review-01, i -> instead, c -> conference, p3 -> persuade-01))),[Ljava.lang.String;@61229c06,Annotation([Ljava.lang.String;@27317fbc,[Ljava.lang.String;@22b923be,[Ljava.lang.String;@28d9a0c1),Annotation([Ljava.lang.String;@67c8f3da,[Ljava.lang.String;@3a01a271,[Ledu.cmu.lti.nlp.amr.Dependency;@414fc677),Annotation([Ljava.lang.String;@5c6ed020,[Ljava.lang.String;@6f221448,[Ljava.lang.String;@2661bbf8),Annotation([Ljava.lang.String;@5a7baa77,[Ljava.lang.String;@6cf49909,[Ledu.cmu.lti.nlp.amr.Entity;@2e6b55c1))
AMR:
(a / agree-01, ARG1, t2 / try-01)
(a / agree-01, concession, i / instead)
(a / agree-01, time, d / date-entity)
(d / date-entity, month, 1 / 10)
(p2 / promise-01, ARG0, t / this)
(p2 / promise-01, ARG1, r / review-01)
(p3 / persuade-01, ARG1, b / boat)
(p3 / persuade-01, ARG2, h / home)
(r / review-01, ARG0, h / home)
(r / review-01, ARG1, p / policy)
(t2 / try-01, ARG0, c / conference)
(t2 / try-01, ARG1, p3 / persuade-01)

Decoded in 703,745 microseconds
Sentence: for three seasons now barnet have promised to win the gm vauxhall conference only to display their annual spring cleanout of ideas

Spans:
Span 12-13:  conference => conference
Span 15-16:  display => display-01
Span 21-22:  ideas => idea
Span 3-4:  now => now
Span 13-14:  only => only
Span 6-7:  promised => promise-01
Span 18-19:  spring => spring
Span 1-2:  three => 3
Span 8-9:  win => win-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),ideas,idea,false), Span(18,19,List(1),spring,spring,false), Span(15,16,List(2),display,display-01,false), Span(13,14,List(3),only,only,false), Span(12,13,List(4),conference,conference,false), Span(8,9,List(5),win,win-01,false), Span(6,7,List(6),promised,promise-01,false), Span(3,4,List(7),now,now,false), Span(1,2,List(8),three,3,false)),Map(2 -> display-01, 5 -> win-01, 8 -> 3, 7 -> now, 1 -> spring, 4 -> conference, 6 -> promise-01, 0 -> idea, 3 -> only),Map(n -> now, w -> win-01, s -> spring, d -> display-01, p -> promise-01, i -> idea, c -> conference, o -> only, 3 -> 3))),[Ljava.lang.String;@8cb09b6,Annotation([Ljava.lang.String;@49ea903c,[Ljava.lang.String;@46a3790d,[Ljava.lang.String;@166068b6),Annotation([Ljava.lang.String;@137a9034,[Ljava.lang.String;@53914fe9,[Ledu.cmu.lti.nlp.amr.Dependency;@691574db),Annotation([Ljava.lang.String;@7fab0bc2,[Ljava.lang.String;@36912f09,[Ljava.lang.String;@75a713db),Annotation([Ljava.lang.String;@2c08cb35,[Ljava.lang.String;@75551b28,[Ledu.cmu.lti.nlp.amr.Entity;@266a1b46))
AMR:
(d / display-01, ARG0, c / conference)
(d / display-01, ARG1, s / spring)
(d / display-01, manner, i / idea)
(d / display-01, mod, o / only)
(p / promise-01, ARG1, n / now)
(p / promise-01, ARG2, w / win-01)
(w / win-01, ARG0, 3 / 3)
(w / win-01, ARG1, c / conference)

Decoded in 131,113 microseconds
Sentence: during that trip he was promised 200 sovietdesigned t55 tanks as a gift

Spans:
Span 6-7:  200 => 200
Span 12-13:  gift => gift-01
Span 3-4:  he => he
Span 5-6:  promised => promise-01
Span 9-10:  tanks => tank
Span 2-3:  trip => trip-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),gift,gift-01,false), Span(9,10,List(1),tanks,tank,false), Span(6,7,List(2),200,200,false), Span(5,6,List(3),promised,promise-01,false), Span(3,4,List(4),he,he,false), Span(2,3,List(5),trip,trip-01,false)),Map(2 -> 200, 5 -> trip-01, 1 -> tank, 4 -> he, 0 -> gift-01, 3 -> promise-01),Map(h -> he, 2 -> 200, t -> tank, p -> promise-01, g -> gift-01, t2 -> trip-01))),[Ljava.lang.String;@24a45e,Annotation([Ljava.lang.String;@65a31764,[Ljava.lang.String;@3654da5d,[Ljava.lang.String;@7ccc2b88),Annotation([Ljava.lang.String;@403e2dba,[Ljava.lang.String;@322c2f49,[Ledu.cmu.lti.nlp.amr.Dependency;@72d47b5a),Annotation([Ljava.lang.String;@5bee8c9b,[Ljava.lang.String;@a514344,[Ljava.lang.String;@5d172aa6),Annotation([Ljava.lang.String;@1bf12809,[Ljava.lang.String;@757b7533,[Ledu.cmu.lti.nlp.amr.Entity;@7c4ba386))
AMR:
(g / gift-01, ARG0, h / he)
(g / gift-01, ARG1, t / tank)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, t2 / trip-01)
(t / tank, quant, 2 / 200)

Decoded in 54,136 microseconds
Sentence: he promised an end to serfdom reform of landholdings and an extension of the suffrage a programme which in turn alienated an important part of the magyar gentry and rendered them much more favourably disposed to suspending national demands in favour of outside intervention to protect existing social relationships

Spans:
Span 20-21:  alienated => alienate-01
Span 28-29:  and => and
Span 9-10:  and => and
Span 38-39:  demands => demand-01
Span 34-35:  disposed => dispose-01
Span 46-47:  existing => exist-01
Span 11-12:  extension => extend-01
Span 40-41:  favour => favor-01
Span 0-1:  he => he
Span 22-23:  important => important
Span 43-44:  intervention => intervene-01
Span 31-32:  much => much
Span 37-38:  national => nation
Span 42-43:  outside => outside
Span 16-17:  programme => program
Span 1-2:  promised => promise-01
Span 45-46:  protect => protect-01
Span 6-7:  reform => reform-01
Span 48-49:  relationships => relationship
Span 29-30:  rendered => render-01
Span 47-48:  social => society
Span 36-37:  suspending => suspend-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),relationships,relationship,false), Span(47,48,List(1),social,society,false), Span(46,47,List(2),existing,exist-01,false), Span(45,46,List(3),protect,protect-01,false), Span(43,44,List(4),intervention,intervene-01,false), Span(42,43,List(5),outside,outside,false), Span(40,41,List(6),favour,favor-01,false), Span(38,39,List(7),demands,demand-01,false), Span(37,38,List(8),national,nation,false), Span(36,37,List(9),suspending,suspend-01,false), Span(34,35,List(10),disposed,dispose-01,false), Span(31,32,List(11),much,much,false), Span(29,30,List(12),rendered,render-01,false), Span(28,29,List(13),and,and,false), Span(22,23,List(14),important,important,false), Span(20,21,List(15),alienated,alienate-01,false), Span(16,17,List(16),programme,program,false), Span(11,12,List(17),extension,extend-01,false), Span(9,10,List(18),and,and,false), Span(6,7,List(19),reform,reform-01,false), Span(1,2,List(20),promised,promise-01,false), Span(0,1,List(21),he,he,false)),Map(2 -> exist-01, 5 -> outside, 12 -> render-01, 15 -> alienate-01, 8 -> nation, 21 -> he, 18 -> and, 7 -> demand-01, 17 -> extend-01, 1 -> society, 4 -> intervene-01, 11 -> much, 14 -> important, 20 -> promise-01, 6 -> favor-01, 0 -> relationship, 9 -> suspend-01, 16 -> program, 19 -> reform-01, 3 -> protect-01, 10 -> dispose-01, 13 -> and),Map(e -> exist-01, n -> nation, h -> he, r3 -> reform-01, s2 -> suspend-01, e2 -> extend-01, p2 -> program, a3 -> and, s -> society, d -> demand-01, m -> much, p -> protect-01, r2 -> render-01, a -> and, d2 -> dispose-01, i2 -> important, a2 -> alienate-01, r -> relationship, i -> intervene-01, f -> favor-01, o -> outside, p3 -> promise-01))),[Ljava.lang.String;@30b0bb37,Annotation([Ljava.lang.String;@22d330da,[Ljava.lang.String;@572c4a12,[Ljava.lang.String;@1cb31074),Annotation([Ljava.lang.String;@2ffd3e64,[Ljava.lang.String;@1b0b2fd9,[Ledu.cmu.lti.nlp.amr.Dependency;@7b725d6d),Annotation([Ljava.lang.String;@1153de6c,[Ljava.lang.String;@192f8d57,[Ljava.lang.String;@e857ac),Annotation([Ljava.lang.String;@15d3ddab,[Ljava.lang.String;@87e10bf,[Ledu.cmu.lti.nlp.amr.Entity;@c7d6ff4))
AMR:
(a / and, op, r2 / render-01)
(a2 / alienate-01, ARG0, h / he)
(a2 / alienate-01, ARG1, p2 / program)
(a3 / and, op, e2 / extend-01)
(a3 / and, op, r3 / reform-01)
(d / demand-01, mod, n / nation)
(d2 / dispose-01, ARG0, m / much)
(d2 / dispose-01, ARG1, s2 / suspend-01)
(e / exist-01, ARG1, i / intervene-01)
(f / favor-01, ARG1, i / intervene-01)
(i / intervene-01, ARG0, o / outside)
(i / intervene-01, ARG1, p / protect-01)
(p / protect-01, ARG0, h / he)
(p / protect-01, ARG1, r / relationship)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, i2 / important)
(r / relationship, mod, s / society)
(r2 / render-01, ARG0, h / he)
(r2 / render-01, ARG1, d2 / dispose-01)
(r3 / reform-01, ARG1, a / and)
(s2 / suspend-01, ARG1, d / demand-01)

Decoded in 883,113 microseconds
Sentence: meanwhile free elections were promised for the spring of next year

Spans:
Span 2-3:  elections => elect-01
Span 1-2:  free => free-41
Span 0-1:  meanwhile => meanwhile
Span 9-10:  next => next
Span 4-5:  promised => promise-01
Span 7-8:  spring => spring
Span 10-11:  year => year

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),year,year,false), Span(9,10,List(1),next,next,false), Span(7,8,List(2),spring,spring,false), Span(4,5,List(3),promised,promise-01,false), Span(2,3,List(4),elections,elect-01,false), Span(1,2,List(5),free,free-41,false), Span(0,1,List(6),meanwhile,meanwhile,false)),Map(2 -> spring, 5 -> free-41, 1 -> next, 4 -> elect-01, 6 -> meanwhile, 0 -> year, 3 -> promise-01),Map(e -> elect-01, n -> next, s -> spring, m -> meanwhile, p -> promise-01, y -> year, f -> free-41))),[Ljava.lang.String;@7f410293,Annotation([Ljava.lang.String;@510422a,[Ljava.lang.String;@6e67d5fe,[Ljava.lang.String;@63124f52),Annotation([Ljava.lang.String;@4715c34e,[Ljava.lang.String;@65c95a57,[Ledu.cmu.lti.nlp.amr.Dependency;@64a39f6),Annotation([Ljava.lang.String;@732348b3,[Ljava.lang.String;@117a1ad3,[Ljava.lang.String;@67771b9b),Annotation([Ljava.lang.String;@3cb5922e,[Ljava.lang.String;@34902925,[Ledu.cmu.lti.nlp.amr.Entity;@647d5718))
AMR:
(f / free-41, ARG0, y / year)
(f / free-41, ARG1, e / elect-01)
(f / free-41, manner, m / meanwhile)
(p / promise-01, ARG0, e / elect-01)
(p / promise-01, ARG1, s / spring)
(y / year, mod, n / next)

Decoded in 45,396 microseconds
Sentence: henri leconte another player of imagination many would like to see succeed on grass promised much but eventually failed to deliver against the burly austrian alex antonitsch and went down 26 64 76 26 63

NER Entity: (thing :name (name :op "austrian"))
mkDayMonthYear(26	64	76,76,64,26)
mkDayMonthYear(64	76	26,26,76,64)
mkDayMonthYear(76	26	63,63,26,76)
mkDayMonthYear(64	76	26,26,76,64)
mkDayMonthYear(26	64	76,76,64,26)
Spans:
Span 30-31:  26 => 26
Span 31-32:  64 => 64
Span 32-35:  76 26 63 => (date-entity :day 63 :month 26 :year 76)
Span 27-28:  and => and
Span 2-3:  another => another
Span 16-17:  but => contrast-01
Span 20-21:  deliver => deliver-01
Span 29-30:  down => down
Span 17-18:  eventually => eventual
Span 18-19:  failed => fail-01
Span 13-14:  grass => grass-roots
Span 6-7:  many => many
Span 15-16:  much => much
Span 14-15:  promised => promise-01
Span 10-11:  see => see-01
Span 11-12:  succeed => succeed-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,35,List(3, 2, 1, 0),76 26 63,(date-entity :day 63 :month 26 :year 76),false), Span(31,32,List(4),64,64,false), Span(30,31,List(5),26,26,false), Span(29,30,List(6),down,down,false), Span(27,28,List(7),and,and,false), Span(20,21,List(8),deliver,deliver-01,false), Span(18,19,List(9),failed,fail-01,false), Span(17,18,List(10),eventually,eventual,false), Span(16,17,List(11),but,contrast-01,false), Span(15,16,List(12),much,much,false), Span(14,15,List(13),promised,promise-01,false), Span(13,14,List(14),grass,grass-roots,false), Span(11,12,List(15),succeed,succeed-01,false), Span(10,11,List(16),see,see-01,false), Span(6,7,List(17),many,many,false), Span(2,3,List(18),another,another,false)),Map(2 -> 26, 5 -> 26, 12 -> much, 15 -> succeed-01, 8 -> deliver-01, 18 -> another, 7 -> and, 17 -> many, 1 -> 63, 4 -> 64, 11 -> contrast-01, 14 -> grass-roots, 6 -> down, 0 -> date-entity, 9 -> fail-01, 16 -> see-01, 3 -> 76, 10 -> eventual, 13 -> promise-01),Map(e -> eventual, 2 -> 26, s2 -> see-01, m2 -> many, d3 -> deliver-01, s -> succeed-01, d -> date-entity, 7 -> 76, 62 -> 64, m -> much, g -> grass-roots, p -> promise-01, a -> and, d2 -> down, a2 -> another, 6 -> 63, c -> contrast-01, 22 -> 26, f -> fail-01))),[Ljava.lang.String;@7ea7476f,Annotation([Ljava.lang.String;@1843095f,[Ljava.lang.String;@591c486a,[Ljava.lang.String;@4fd654da),Annotation([Ljava.lang.String;@5cdd29,[Ljava.lang.String;@50bbaeee,[Ledu.cmu.lti.nlp.amr.Dependency;@51d9b4aa),Annotation([Ljava.lang.String;@2be42ee1,[Ljava.lang.String;@11c1cc4a,[Ljava.lang.String;@4a4b1761),Annotation([Ljava.lang.String;@7ec0762,[Ljava.lang.String;@18d8b6fe,[Ledu.cmu.lti.nlp.amr.Entity;@3bd5ea70))
AMR:
(a / and, op, f / fail-01)
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, f / fail-01)
(d / date-entity, day, 6 / 63)
(d / date-entity, month, 2 / 26)
(d / date-entity, quant, 62 / 64)
(d / date-entity, year, 7 / 76)
(d2 / down, op, 22 / 26)
(d3 / deliver-01, ARG1, a2 / another)
(f / fail-01, ARG1, 22 / 26)
(f / fail-01, ARG2, d3 / deliver-01)
(f / fail-01, time, e / eventual)
(p / promise-01, ARG0, g / grass-roots)
(p / promise-01, ARG1, m / much)
(s / succeed-01, ARG1, g / grass-roots)
(s / succeed-01, time, d / date-entity)
(s2 / see-01, ARG0, m2 / many)
(s2 / see-01, ARG1, s / succeed-01)

Decoded in 558,874 microseconds
Sentence:   he appeared to be reassuring secular muslims and the christian minority when he promised that the rights of all jordanians are sacred and they are rights that will not be affected

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   he appeared to be reassuring secular muslims and the christian minority when he promised that the rights of all jordanians are sacred and they are rights that will not be affected
myTokenized = he appeared to be reassuring secular muslims and the christian minority when he promised that the rights of all jordanians are sacred and they are rights that will not be affected
i = 0
prefix = List(he)
regexr = \Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   new head of bbc documentary features colin cameron is promising more programmes making use of historical archive film but in a fresh way to explain how past events shape modern life

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   new head of bbc documentary features colin cameron is promising more programmes making use of historical archive film but in a fresh way to explain how past events shape modern life
myTokenized = new head of bbc documentary features colin cameron is promising more programmes making use of historical archive film but in a fresh way to explain how past events shape modern life
i = 0
prefix = List(new)
regexr = \Qn\E ?\Qe\E ?\Qw\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: but even if nestle had been spared to offer the exhaustive treatment of the subject that he promised the severe limitations of our knowledge of aeschylus would hardly have allowed him to put the case for a late date beyond reasonable doubt

Spans:
Span 29-30:  allowed => allow-01
Span 39-40:  beyond => beyond
Span 0-1:  but => contrast-01
Span 34-35:  case => case
Span 38-39:  date => date
Span 41-42:  doubt => doubt-01
Span 10-11:  exhaustive => exhaustive
Span 27-28:  hardly => hardly
Span 16-17:  he => he
Span 23-24:  knowledge => knowledge
Span 37-38:  late => late
Span 20-21:  limitations => limit-01
Span 8-9:  offer => offer-01
Span 17-18:  promised => promise-01
Span 40-41:  reasonable => reasonable
Span 19-20:  severe => severe
Span 6-7:  spared => spare-01
Span 14-15:  subject => subject
Span 11-12:  treatment => treat-03

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),doubt,doubt-01,false), Span(40,41,List(1),reasonable,reasonable,false), Span(39,40,List(2),beyond,beyond,false), Span(38,39,List(3),date,date,false), Span(37,38,List(4),late,late,false), Span(34,35,List(5),case,case,false), Span(29,30,List(6),allowed,allow-01,false), Span(27,28,List(7),hardly,hardly,false), Span(23,24,List(8),knowledge,knowledge,false), Span(20,21,List(9),limitations,limit-01,false), Span(19,20,List(10),severe,severe,false), Span(17,18,List(11),promised,promise-01,false), Span(16,17,List(12),he,he,false), Span(14,15,List(13),subject,subject,false), Span(11,12,List(14),treatment,treat-03,false), Span(10,11,List(15),exhaustive,exhaustive,false), Span(8,9,List(16),offer,offer-01,false), Span(6,7,List(17),spared,spare-01,false), Span(0,1,List(18),but,contrast-01,false)),Map(2 -> beyond, 5 -> case, 12 -> he, 15 -> exhaustive, 8 -> knowledge, 18 -> contrast-01, 7 -> hardly, 17 -> spare-01, 1 -> reasonable, 4 -> late, 11 -> promise-01, 14 -> treat-03, 6 -> allow-01, 0 -> doubt-01, 9 -> limit-01, 16 -> offer-01, 3 -> date, 10 -> severe, 13 -> subject),Map(e -> exhaustive, h -> hardly, s2 -> subject, h2 -> he, t -> treat-03, b -> beyond, k -> knowledge, s -> severe, d -> doubt-01, p -> promise-01, a -> allow-01, d2 -> date, l2 -> limit-01, r -> reasonable, s3 -> spare-01, c -> case, l -> late, o -> offer-01, c2 -> contrast-01))),[Ljava.lang.String;@c87ff18,Annotation([Ljava.lang.String;@347c8715,[Ljava.lang.String;@5b888e9e,[Ljava.lang.String;@624b5604),Annotation([Ljava.lang.String;@3ffc5306,[Ljava.lang.String;@4eaecfbb,[Ledu.cmu.lti.nlp.amr.Dependency;@36c82658),Annotation([Ljava.lang.String;@e4d7781,[Ljava.lang.String;@7fe0bd7c,[Ljava.lang.String;@7bb8597a),Annotation([Ljava.lang.String;@3fa980b,[Ljava.lang.String;@3913fc37,[Ledu.cmu.lti.nlp.amr.Entity;@4f139c27))
AMR:
(a / allow-01, ARG0, l2 / limit-01)
(a / allow-01, ARG1, c / case)
(b / beyond, op, d / doubt-01)
(c2 / contrast-01, ARG1, s3 / spare-01)
(d / doubt-01, ARG1, l2 / limit-01)
(d / doubt-01, mod, r / reasonable)
(d2 / date, location, b / beyond)
(d2 / date, mod, l / late)
(l2 / limit-01, ARG1, k / knowledge)
(l2 / limit-01, mod, s / severe)
(o / offer-01, ARG1, t / treat-03)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, l2 / limit-01)
(s3 / spare-01, ARG0, h / hardly)
(s3 / spare-01, ARG1, o / offer-01)
(t / treat-03, ARG1, s2 / subject)
(t / treat-03, ARG2, p / promise-01)
(t / treat-03, mod, e / exhaustive)

Decoded in 792,228 microseconds
Sentence: you had no right to promise yves anything he said bluntly going into the shower

Spans:
Span 7-8:  anything => anything
Span 10-11:  bluntly => blunt
Span 8-9:  he => he
Span 2-3:  no => -
Span 5-6:  promise => promise-01
Span 9-10:  said => say-01
Span 14-15:  shower => shower-01
Span 0-1:  you => you

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),shower,shower-01,false), Span(10,11,List(1),bluntly,blunt,false), Span(9,10,List(2),said,say-01,false), Span(8,9,List(3),he,he,false), Span(7,8,List(4),anything,anything,false), Span(5,6,List(5),promise,promise-01,false), Span(2,3,List(6),no,-,false), Span(0,1,List(7),you,you,false)),Map(2 -> say-01, 5 -> promise-01, 7 -> you, 1 -> blunt, 4 -> anything, 6 -> -, 0 -> shower-01, 3 -> he),Map(h -> he, s2 -> say-01, b -> blunt, s -> shower-01, y -> you, p -> promise-01, a -> anything, - -> -))),[Ljava.lang.String;@162d4ea3,Annotation([Ljava.lang.String;@7885bab4,[Ljava.lang.String;@13a4bd3d,[Ljava.lang.String;@2483f9de),Annotation([Ljava.lang.String;@5489708c,[Ljava.lang.String;@b3c22b0,[Ledu.cmu.lti.nlp.amr.Dependency;@19095693),Annotation([Ljava.lang.String;@3412d9bc,[Ljava.lang.String;@4194e059,[Ljava.lang.String;@151514b2),Annotation([Ljava.lang.String;@1b01bcee,[Ljava.lang.String;@f1abb1c,[Ledu.cmu.lti.nlp.amr.Entity;@23f23303))
AMR:
(a / anything, poss, y / you)
(p / promise-01, ARG0, y / you)
(p / promise-01, ARG1, - / -)
(s / shower-01, ARG1, h / he)
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, a / anything)
(s2 / say-01, ARG3, b / blunt)

Decoded in 154,201 microseconds
Sentence: again selfreference albeit of a slightly different character is essential to the analyses of valid consent and of promising which are acts changing the normative situation because they are undertaken in the belief that they so change the normative situation

Spans:
Span 0-1:  again => again
Span 12-13:  analyses => analysis
Span 16-17:  and => and
Span 26-27:  because => cause-01
Span 32-33:  belief => believe-01
Span 36-37:  change => change-01
Span 22-23:  changing => change-01
Span 7-8:  character => character
Span 15-16:  consent => consent-01
Span 6-7:  different => differ-02
Span 9-10:  essential => essential
Span 18-19:  promising => promise-01
Span 39-40:  situation => situation
Span 25-26:  situation => situation
Span 5-6:  slightly => slight
Span 35-36:  so => so
Span 34-35:  they => they
Span 27-28:  they => they
Span 29-30:  undertaken => undertake-01
Span 14-15:  valid => valid-41

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),situation,situation,false), Span(36,37,List(1),change,change-01,false), Span(35,36,List(2),so,so,false), Span(34,35,List(3),they,they,false), Span(32,33,List(4),belief,believe-01,false), Span(29,30,List(5),undertaken,undertake-01,false), Span(27,28,List(6),they,they,false), Span(26,27,List(7),because,cause-01,false), Span(25,26,List(8),situation,situation,false), Span(22,23,List(9),changing,change-01,false), Span(18,19,List(10),promising,promise-01,false), Span(16,17,List(11),and,and,false), Span(15,16,List(12),consent,consent-01,false), Span(14,15,List(13),valid,valid-41,false), Span(12,13,List(14),analyses,analysis,false), Span(9,10,List(15),essential,essential,false), Span(7,8,List(16),character,character,false), Span(6,7,List(17),different,differ-02,false), Span(5,6,List(18),slightly,slight,false), Span(0,1,List(19),again,again,false)),Map(2 -> so, 5 -> undertake-01, 12 -> consent-01, 15 -> essential, 8 -> situation, 18 -> slight, 7 -> cause-01, 17 -> differ-02, 1 -> change-01, 4 -> believe-01, 11 -> and, 14 -> analysis, 6 -> they, 0 -> situation, 9 -> change-01, 16 -> character, 19 -> again, 3 -> they, 10 -> promise-01, 13 -> valid-41),Map(e -> essential, s2 -> so, t -> they, b -> believe-01, a3 -> again, c4 -> consent-01, s -> situation, s4 -> slight, v -> valid-41, d -> differ-02, p -> promise-01, c3 -> change-01, a -> and, t2 -> they, a2 -> analysis, c -> change-01, s3 -> situation, u -> undertake-01, c2 -> cause-01, c5 -> character))),[Ljava.lang.String;@fbc1982,Annotation([Ljava.lang.String;@62eade0,[Ljava.lang.String;@6299504b,[Ljava.lang.String;@3f669e7f),Annotation([Ljava.lang.String;@6a2fc45d,[Ljava.lang.String;@6604ec21,[Ledu.cmu.lti.nlp.amr.Dependency;@4d2a9eda),Annotation([Ljava.lang.String;@292321ca,[Ljava.lang.String;@417f69df,[Ljava.lang.String;@13ffd111),Annotation([Ljava.lang.String;@7ff6bd58,[Ljava.lang.String;@20091e0a,[Ledu.cmu.lti.nlp.amr.Entity;@369332f4))
AMR:
(a / and, op, c / change-01)
(a / and, op, c4 / consent-01)
(a / and, op, p / promise-01)
(a / and, time, a3 / again)
(b / believe-01, ARG0, t2 / they)
(b / believe-01, ARG1, t / they)
(c / change-01, ARG0, t / they)
(c / change-01, ARG1, s / situation)
(c / change-01, mod, s2 / so)
(c2 / cause-01, ARG0, u / undertake-01)
(c2 / cause-01, ARG1, c3 / change-01)
(c3 / change-01, ARG1, s3 / situation)
(c4 / consent-01, ARG1, a2 / analysis)
(d / differ-02, ARG1, c5 / character)
(d / differ-02, degree, s4 / slight)
(e / essential, domain, c5 / character)
(p / promise-01, ARG0, c5 / character)
(u / undertake-01, ARG1, t2 / they)
(v / valid-41, ARG1, c4 / consent-01)

Decoded in 953,426 microseconds
Sentence:   a big northwest company had already promised 2

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   a big northwest company had already promised 2
myTokenized = a big northwest company had already promised 2
i = 0
prefix = List(a)
regexr = \Qa\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: well aware how sensitive such a move is bound to prove britain is seeking to make repatriation more palatable by promising that physical force will not be used to put vietnamese on planes bound for hanoi and that each person will have the right to refuse

NER Entity: (country :name (name :op "britain"))
NER Entity: (thing :name (name :op "vietnamese"))
NER Entity: (country :name (name :op "hanoi"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 36-37:  and => and
Span 11-12:  britain => (country :name (name :op "Britain"))
Span 38-39:  each => each
Span 23-24:  force => force
Span 18-19:  palatable => palatable
Span 39-40:  person => person
Span 22-23:  physical => physical
Span 32-33:  planes => plane
Span 20-21:  promising => promise-01
Span 10-11:  prove => prove-01
Span 45-46:  refuse => refuse-01
Span 16-17:  repatriation => repatriate-01
Span 13-14:  seeking => seek-01
Span 3-4:  sensitive => sensitive-41
Span 4-5:  such => such
Span 27-28:  used => use-01
Span 0-1:  well => well

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),refuse,refuse-01,false), Span(39,40,List(1),person,person,false), Span(38,39,List(2),each,each,false), Span(36,37,List(3),and,and,false), Span(32,33,List(4),planes,plane,false), Span(27,28,List(5),used,use-01,false), Span(23,24,List(6),force,force,false), Span(22,23,List(7),physical,physical,false), Span(20,21,List(8),promising,promise-01,false), Span(18,19,List(9),palatable,palatable,false), Span(16,17,List(10),repatriation,repatriate-01,false), Span(13,14,List(11),seeking,seek-01,false), Span(11,12,List(14, 13, 12),britain,(country :name (name :op "Britain")),false), Span(10,11,List(15),prove,prove-01,false), Span(4,5,List(16),such,such,false), Span(3,4,List(17),sensitive,sensitive-41,false), Span(0,1,List(18),well,well,false)),Map(2 -> each, 5 -> use-01, 12 -> country, 15 -> prove-01, 8 -> promise-01, 18 -> well, 7 -> physical, 17 -> sensitive-41, 1 -> person, 4 -> plane, 11 -> seek-01, 14 -> "Britain", 6 -> force, 0 -> refuse-01, 9 -> palatable, 16 -> such, 3 -> and, 10 -> repatriate-01, 13 -> name),Map(e -> each, w -> well, n -> name, s2 -> such, p5 -> palatable, p2 -> plane, s -> seek-01, p -> person, r2 -> repatriate-01, a -> and, p4 -> promise-01, r -> refuse-01, s3 -> sensitive-41, c -> country, p6 -> prove-01, u -> use-01, f -> force, p3 -> physical))),[Ljava.lang.String;@1943fd4d,Annotation([Ljava.lang.String;@3eaad730,[Ljava.lang.String;@4215b074,[Ljava.lang.String;@1df3b191),Annotation([Ljava.lang.String;@6a0eb5f3,[Ljava.lang.String;@6bcb9aea,[Ledu.cmu.lti.nlp.amr.Dependency;@427aff0),Annotation([Ljava.lang.String;@498fb7b1,[Ljava.lang.String;@7a64eb31,[Ljava.lang.String;@778d1cbd),Annotation([Ljava.lang.String;@5159f99c,[Ljava.lang.String;@6a129a7d,[Ledu.cmu.lti.nlp.amr.Entity;@6b5cbaf2))
AMR:
(a / and, op, u / use-01)
(c / country, name, n / name)
(f / force, mod, p3 / physical)
(n / name, op, "Britain")
(p4 / promise-01, ARG0, c / country)
(p4 / promise-01, ARG1, a / and)
(p5 / palatable, concession, p4 / promise-01)
(p6 / prove-01, ARG0, p2 / plane)
(p6 / prove-01, ARG1, s / seek-01)
(p6 / prove-01, manner, s3 / sensitive-41)
(r / refuse-01, ARG0, p / person)
(r2 / repatriate-01, ARG0, e / each)
(r2 / repatriate-01, ARG1, c / country)
(s / seek-01, ARG0, c / country)
(s / seek-01, ARG1, w / well)
(s3 / sensitive-41, ARG1, s2 / such)
(u / use-01, ARG0, p / person)
(u / use-01, ARG1, f / force)

Decoded in 247,519 microseconds
Sentence: he said the workers who had demanded more local control and a reduced role for the communist party had voted to go back to work after mining officials promised to meet demands on living conditions and increased holidays

Spans:
Span 25-26:  after => after
Span 35-36:  and => and
Span 10-11:  and => and
Span 22-23:  back => back
Span 16-18:  communist party => (political-party :name (name :op "Party" :op "Communist"))
Span 34-35:  conditions => condition
Span 9-10:  control => control-01
Span 6-7:  demanded => demand-01
Span 31-32:  demands => demand-01
Span 0-1:  he => he
Span 37-38:  holidays => holiday
Span 36-37:  increased => increase-01
Span 33-34:  living => live-01
Span 8-9:  local => local
Span 26-27:  mining => mine-01
Span 27-28:  officials => (have-org-role-91 :ARG2 official)
Span 28-29:  promised => promise-01
Span 12-13:  reduced => reduce-01
Span 13-14:  role => role
Span 1-2:  said => say-01
Span 19-20:  voted => vote-01
Span 3-4:  workers => (person :ARG0-of work-01)

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),holidays,holiday,false), Span(36,37,List(1),increased,increase-01,false), Span(35,36,List(2),and,and,false), Span(34,35,List(3),conditions,condition,false), Span(33,34,List(4),living,live-01,false), Span(31,32,List(5),demands,demand-01,false), Span(28,29,List(6),promised,promise-01,false), Span(27,28,List(8, 7),officials,(have-org-role-91 :ARG2 official),false), Span(26,27,List(9),mining,mine-01,false), Span(25,26,List(10),after,after,false), Span(22,23,List(11),back,back,false), Span(19,20,List(12),voted,vote-01,false), Span(16,18,List(16, 15, 14, 13),communist party,(political-party :name (name :op "Party" :op "Communist")),false), Span(13,14,List(17),role,role,false), Span(12,13,List(18),reduced,reduce-01,false), Span(10,11,List(19),and,and,false), Span(9,10,List(20),control,control-01,false), Span(8,9,List(21),local,local,false), Span(6,7,List(22),demanded,demand-01,false), Span(3,4,List(24, 23),workers,(person :ARG0-of work-01),false), Span(1,2,List(25),said,say-01,false), Span(0,1,List(26),he,he,false)),Map(2 -> and, 5 -> demand-01, 12 -> vote-01, 8 -> official, 15 -> "Party", 21 -> local, 18 -> reduce-01, 24 -> work-01, 7 -> have-org-role-91, 1 -> increase-01, 17 -> role, 23 -> person, 26 -> he, 4 -> live-01, 11 -> back, 14 -> name, 20 -> control-01, 6 -> promise-01, 9 -> mine-01, 0 -> holiday, 22 -> demand-01, 16 -> "Communist", 19 -> and, 10 -> after, 3 -> condition, 25 -> say-01, 13 -> political-party),Map(n -> name, w -> work-01, h -> holiday, h2 -> have-org-role-91, b -> back, p2 -> political-party, a3 -> and, s -> say-01, v -> vote-01, m -> mine-01, d -> demand-01, r2 -> reduce-01, p -> promise-01, a -> and, d2 -> demand-01, l2 -> local, a2 -> after, i -> increase-01, r -> role, c -> condition, h3 -> he, l -> live-01, o -> official, p3 -> person, c2 -> control-01))),[Ljava.lang.String;@183ee3a0,Annotation([Ljava.lang.String;@48d229cf,[Ljava.lang.String;@5db6fa62,[Ljava.lang.String;@17f067ff),Annotation([Ljava.lang.String;@283ba2a0,[Ljava.lang.String;@6331cb02,[Ledu.cmu.lti.nlp.amr.Dependency;@5a07232e),Annotation([Ljava.lang.String;@a96cf2f,[Ljava.lang.String;@32fc1c17,[Ljava.lang.String;@45984427),Annotation([Ljava.lang.String;@fa28023,[Ljava.lang.String;@758a81d9,[Ledu.cmu.lti.nlp.amr.Entity;@585309d8))
AMR:
(a / and, op, c / condition)
(a / and, op, i / increase-01)
(a2 / after, op, p / promise-01)
(a3 / and, op, r / role)
(c / condition, mod, l / live-01)
(c2 / control-01, ARG1, l2 / local)
(d / demand-01, ARG1, a / and)
(d2 / demand-01, ARG0, p3 / person)
(d2 / demand-01, ARG1, c2 / control-01)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, m / mine-01)
(h2 / have-org-role-91, ARG2, o / official)
(i / increase-01, ARG1, h / holiday)
(l / live-01, ARG1, h2 / have-org-role-91)
(n / name, op, "Communist")
(n / name, op, "Party")
(p / promise-01, ARG1, d / demand-01)
(p2 / political-party, name, n / name)
(r / role, poss, p2 / political-party)
(r2 / reduce-01, ARG0, r / role)
(r2 / reduce-01, ARG1, b / back)
(s / say-01, ARG0, h3 / he)
(s / say-01, ARG1, v / vote-01)
(v / vote-01, ARG0, p3 / person)
(v / vote-01, ARG1, a3 / and)
(w / work-01, ARG0, p3 / person)

Decoded in 2,375,028 microseconds
Sentence: consenting is very similar to promising

Spans:
Span 0-1:  consenting => consent-01
Span 5-6:  promising => promise-01
Span 2-3:  very => very

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),promising,promise-01,false), Span(2,3,List(1),very,very,false), Span(0,1,List(2),consenting,consent-01,false)),Map(2 -> consent-01, 1 -> very, 0 -> promise-01),Map(v -> very, p -> promise-01, c -> consent-01))),[Ljava.lang.String;@91d467,Annotation([Ljava.lang.String;@660fb67b,[Ljava.lang.String;@11957996,[Ljava.lang.String;@6c616fde),Annotation([Ljava.lang.String;@70f78f68,[Ljava.lang.String;@ce82ec9,[Ledu.cmu.lti.nlp.amr.Dependency;@5f5794bd),Annotation([Ljava.lang.String;@6ee63531,[Ljava.lang.String;@4bae5cd8,[Ljava.lang.String;@24518fb9),Annotation([Ljava.lang.String;@66b2cd4f,[Ljava.lang.String;@64c53235,[Ledu.cmu.lti.nlp.amr.Entity;@4e636942))
AMR:
(c / consent-01, ARG1, p / promise-01)
(p / promise-01, ARG1, v / very)

Decoded in 8,919 microseconds
Sentence: we were promised a dinnerdance

Spans:
Span 2-3:  promised => promise-01
Span 0-1:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),promised,promise-01,false), Span(0,1,List(1),we,we,false)),Map(1 -> we, 0 -> promise-01),Map(w -> we, p -> promise-01))),[Ljava.lang.String;@60939442,Annotation([Ljava.lang.String;@78eaaa96,[Ljava.lang.String;@76659bde,[Ljava.lang.String;@8dc488c),Annotation([Ljava.lang.String;@361ee3df,[Ljava.lang.String;@2602613b,[Ledu.cmu.lti.nlp.amr.Dependency;@663d7bfb),Annotation([Ljava.lang.String;@4e96d02d,[Ljava.lang.String;@f3d62aa,[Ljava.lang.String;@7188eb7),Annotation([Ljava.lang.String;@5d419404,[Ljava.lang.String;@7c5cc270,[Ledu.cmu.lti.nlp.amr.Entity;@2de186d9))
AMR:
(p / promise-01, ARG1, w / we)

Decoded in 5,494 microseconds
Sentence: at the end of 1988 the home secretary promised an additional 1230 officers for 198990

mkDayMonthYear(198990,90,89,2019)
mkDayMonthYear(198990,90,89,19)
mkDayMonthYear(198990,90,89,2019)
mkDayMonthYear(198990,90,89,19)
Spans:
Span 11-12:  1230 => (date-entity :year 1230)
Span 4-5:  1988 => (date-entity :year 1988)
Span 14-15:  198990 => (date-entity :day 90 :month 89 :year 19)
Span 10-11:  additional => additional
Span 6-7:  home => home
Span 12-13:  officers => (have-org-role-91 :ARG2 officer)
Span 8-9:  promised => promise-01
Span 7-8:  secretary => secretary

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(3, 2, 1, 0),198990,(date-entity :day 90 :month 89 :year 19),false), Span(12,13,List(5, 4),officers,(have-org-role-91 :ARG2 officer),false), Span(11,12,List(7, 6),1230,(date-entity :year 1230),false), Span(10,11,List(8),additional,additional,false), Span(8,9,List(9),promised,promise-01,false), Span(7,8,List(10),secretary,secretary,false), Span(6,7,List(11),home,home,false), Span(4,5,List(13, 12),1988,(date-entity :year 1988),false)),Map(2 -> 89, 5 -> officer, 12 -> date-entity, 8 -> additional, 7 -> 1230, 1 -> 90, 4 -> have-org-role-91, 11 -> home, 6 -> date-entity, 0 -> date-entity, 9 -> promise-01, 3 -> 19, 10 -> secretary, 13 -> 1988),Map(h -> have-org-role-91, h2 -> home, 12 -> 1230, 8 -> 89, d3 -> date-entity, s -> secretary, d -> date-entity, 1 -> 19, p -> promise-01, a -> additional, d2 -> date-entity, 9 -> 90, o -> officer, 13 -> 1988))),[Ljava.lang.String;@315c2817,Annotation([Ljava.lang.String;@194c1752,[Ljava.lang.String;@528f1577,[Ljava.lang.String;@2fca61f9),Annotation([Ljava.lang.String;@fe63af2,[Ljava.lang.String;@5427ee05,[Ledu.cmu.lti.nlp.amr.Dependency;@97bb56d),Annotation([Ljava.lang.String;@18c40bf8,[Ljava.lang.String;@6eedd37b,[Ljava.lang.String;@3fd76922),Annotation([Ljava.lang.String;@573757ec,[Ljava.lang.String;@726d73af,[Ledu.cmu.lti.nlp.amr.Entity;@6fc620d9))
AMR:
(d / date-entity, day, 9 / 90)
(d / date-entity, month, 8 / 89)
(d / date-entity, year, 1 / 19)
(d2 / date-entity, year, 12 / 1230)
(d3 / date-entity, year, 13 / 1988)
(h / have-org-role-91, ARG1, a / additional)
(h / have-org-role-91, ARG2, o / officer)
(h / have-org-role-91, time, d / date-entity)
(p / promise-01, ARG0, s / secretary)
(p / promise-01, ARG1, d2 / date-entity)
(p / promise-01, time, d / date-entity)
(p / promise-01, time, d3 / date-entity)
(s / secretary, mod, h2 / home)

Decoded in 151,845 microseconds
Sentence: in promising to crack down on unofficial strikes mr norman fowler the employment secretary has reopened the complex issue of unions liability for the action of their members dash

Spans:
Span 24-25:  action => action
Span 17-18:  complex => complex
Span 3-4:  crack => crack-02
Span 4-5:  down => down
Span 12-13:  employment => employment
Span 18-19:  issue => issue
Span 21-22:  liability => liability
Span 27-28:  members => (have-org-role-91 :ARG2 member)
Span 1-2:  promising => promise-01
Span 15-16:  reopened => reopen-01
Span 13-14:  secretary => secretary
Span 7-8:  strikes => strike-01
Span 20-21:  unions => union

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(1, 0),members,(have-org-role-91 :ARG2 member),false), Span(24,25,List(2),action,action,false), Span(21,22,List(3),liability,liability,false), Span(20,21,List(4),unions,union,false), Span(18,19,List(5),issue,issue,false), Span(17,18,List(6),complex,complex,false), Span(15,16,List(7),reopened,reopen-01,false), Span(13,14,List(8),secretary,secretary,false), Span(12,13,List(9),employment,employment,false), Span(7,8,List(10),strikes,strike-01,false), Span(4,5,List(11),down,down,false), Span(3,4,List(12),crack,crack-02,false), Span(1,2,List(13),promising,promise-01,false)),Map(2 -> action, 5 -> issue, 12 -> crack-02, 8 -> secretary, 7 -> reopen-01, 1 -> member, 4 -> union, 11 -> down, 6 -> complex, 0 -> have-org-role-91, 9 -> employment, 3 -> liability, 10 -> strike-01, 13 -> promise-01),Map(e -> employment, h -> have-org-role-91, s2 -> strike-01, s -> secretary, m -> member, d -> down, p -> promise-01, a -> action, i -> issue, r -> reopen-01, c -> complex, l -> liability, u -> union, c2 -> crack-02))),[Ljava.lang.String;@3896bfe3,Annotation([Ljava.lang.String;@310fed1b,[Ljava.lang.String;@c97a0c7,[Ljava.lang.String;@36bc6f46),Annotation([Ljava.lang.String;@d2d78bd,[Ljava.lang.String;@2451c70d,[Ledu.cmu.lti.nlp.amr.Dependency;@74e3391b),Annotation([Ljava.lang.String;@71ba5790,[Ljava.lang.String;@cae945,[Ljava.lang.String;@998b16b),Annotation([Ljava.lang.String;@7a7ecb9,[Ljava.lang.String;@21a6699c,[Ledu.cmu.lti.nlp.amr.Entity;@345f9206))
AMR:
(c2 / crack-02, ARG1, s2 / strike-01)
(c2 / crack-02, direction, d / down)
(h / have-org-role-91, ARG0, l / liability)
(h / have-org-role-91, ARG1, c2 / crack-02)
(h / have-org-role-91, ARG2, m / member)
(i / issue, location, a / action)
(i / issue, location, l / liability)
(i / issue, mod, c / complex)
(l / liability, mod, u / union)
(p / promise-01, ARG1, c2 / crack-02)
(r / reopen-01, ARG0, s / secretary)
(r / reopen-01, ARG1, i / issue)
(s / secretary, mod, e / employment)

Decoded in 373,550 microseconds
Sentence: it will be sorted out within a couple of hours i promise you

Spans:
Span 7-8:  couple => couple
Span 9-10:  hours => (temporal-quantity :unit hour)
Span 10-11:  i => i
Span 0-1:  it => it
Span 11-12:  promise => promise-01
Span 3-4:  sorted => sort-02
Span 5-6:  within => within
Span 12-13:  you => you

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),you,you,false), Span(11,12,List(1),promise,promise-01,false), Span(10,11,List(2),i,i,false), Span(9,10,List(4, 3),hours,(temporal-quantity :unit hour),false), Span(7,8,List(5),couple,couple,false), Span(5,6,List(6),within,within,false), Span(3,4,List(7),sorted,sort-02,false), Span(0,1,List(8),it,it,false)),Map(2 -> i, 5 -> couple, 8 -> it, 7 -> sort-02, 1 -> promise-01, 4 -> hour, 6 -> within, 0 -> you, 3 -> temporal-quantity),Map(w -> within, h -> hour, t -> temporal-quantity, s -> sort-02, p -> promise-01, y -> you, i2 -> it, i -> i, c -> couple))),[Ljava.lang.String;@6cf56dcc,Annotation([Ljava.lang.String;@64fba3f6,[Ljava.lang.String;@44c99f45,[Ljava.lang.String;@10f78e4b),Annotation([Ljava.lang.String;@6c9ee6a0,[Ljava.lang.String;@34374a16,[Ledu.cmu.lti.nlp.amr.Dependency;@19e10522),Annotation([Ljava.lang.String;@4180874,[Ljava.lang.String;@45d2f9c5,[Ljava.lang.String;@1e0c1853),Annotation([Ljava.lang.String;@2c11008e,[Ljava.lang.String;@103b813c,[Ledu.cmu.lti.nlp.amr.Entity;@32a19277))
AMR:
(c / couple, op, t / temporal-quantity)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, y / you)
(p / promise-01, purpose, s / sort-02)
(s / sort-02, ARG1, i2 / it)
(s / sort-02, location, w / within)
(t / temporal-quantity, unit, h / hour)
(w / within, op, c / couple)

Decoded in 139,969 microseconds
Sentence:  ill get some of the boys to check it over the officer promised

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  ill get some of the boys to check it over the officer promised
myTokenized = ill get some of the boys to check it over the officer promised
i = 0
prefix = List(ill)
regexr = \Qi\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in which he more or less accidentally dispatches his wife but cant bring himself to take the plunge and throw himself into the river as promised

Spans:
Span 6-7:  accidentally => accidental
Span 18-19:  and => and
Span 12-13:  bring => bring-01
Span 10-11:  but => contrast-01
Span 2-3:  he => he
Span 5-6:  less => less
Span 4-5:  or => or
Span 17-18:  plunge => plunge-01
Span 25-26:  promised => promise-01
Span 23-24:  river => river
Span 19-20:  throw => throw-01
Span 9-10:  wife => (have-rel-role-91 :ARG2 wife)

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),promised,promise-01,false), Span(23,24,List(1),river,river,false), Span(19,20,List(2),throw,throw-01,false), Span(18,19,List(3),and,and,false), Span(17,18,List(4),plunge,plunge-01,false), Span(12,13,List(5),bring,bring-01,false), Span(10,11,List(6),but,contrast-01,false), Span(9,10,List(8, 7),wife,(have-rel-role-91 :ARG2 wife),false), Span(6,7,List(9),accidentally,accidental,false), Span(5,6,List(10),less,less,false), Span(4,5,List(11),or,or,false), Span(2,3,List(12),he,he,false)),Map(2 -> throw-01, 5 -> bring-01, 12 -> he, 8 -> wife, 7 -> have-rel-role-91, 1 -> river, 4 -> plunge-01, 11 -> or, 6 -> contrast-01, 0 -> promise-01, 9 -> accidental, 3 -> and, 10 -> less),Map(w -> wife, h -> have-rel-role-91, h2 -> he, t -> throw-01, b -> bring-01, p2 -> plunge-01, p -> promise-01, a -> and, r -> river, a2 -> accidental, c -> contrast-01, l -> less, o -> or))),[Ljava.lang.String;@2b6cc7c7,Annotation([Ljava.lang.String;@72aff016,[Ljava.lang.String;@7cbb6f2c,[Ljava.lang.String;@757ff1ad),Annotation([Ljava.lang.String;@22d3d11f,[Ljava.lang.String;@465c16,[Ledu.cmu.lti.nlp.amr.Dependency;@b47a87e),Annotation([Ljava.lang.String;@d86edfb,[Ljava.lang.String;@157200ad,[Ljava.lang.String;@6f8a68da),Annotation([Ljava.lang.String;@67e9f96b,[Ljava.lang.String;@31f61519,[Ledu.cmu.lti.nlp.amr.Entity;@12e335ef))
AMR:
(a / and, op, p2 / plunge-01)
(a / and, op, t / throw-01)
(b / bring-01, ARG0, h2 / he)
(b / bring-01, ARG1, a / and)
(b / bring-01, manner, a2 / accidental)
(c / contrast-01, ARG2, b / bring-01)
(h / have-rel-role-91, ARG1, h2 / he)
(h / have-rel-role-91, ARG2, w / wife)
(o / or, op, b / bring-01)
(o / or, op, l / less)
(t / throw-01, ARG2, r / river)
(t / throw-01, time, p / promise-01)

Decoded in 100,531 microseconds
Sentence: it would however defuse what promises otherwise to be an explosive confrontation with brussels

Spans:
Span 11-12:  confrontation => confront-01
Span 3-4:  defuse => defuse-01
Span 10-11:  explosive => explode-01
Span 0-1:  it => it
Span 6-7:  otherwise => otherwise
Span 5-6:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),confrontation,confront-01,false), Span(10,11,List(1),explosive,explode-01,false), Span(6,7,List(2),otherwise,otherwise,false), Span(5,6,List(3),promises,promise-01,false), Span(3,4,List(4),defuse,defuse-01,false), Span(0,1,List(5),it,it,false)),Map(2 -> otherwise, 5 -> it, 1 -> explode-01, 4 -> defuse-01, 0 -> confront-01, 3 -> promise-01),Map(e -> explode-01, d -> defuse-01, p -> promise-01, i -> it, c -> confront-01, o -> otherwise))),[Ljava.lang.String;@2e9e799,Annotation([Ljava.lang.String;@4a63ef4d,[Ljava.lang.String;@66f3ce62,[Ljava.lang.String;@1072b8bc),Annotation([Ljava.lang.String;@5bbe4713,[Ljava.lang.String;@292c5f73,[Ledu.cmu.lti.nlp.amr.Dependency;@202e8c23),Annotation([Ljava.lang.String;@4ff25e56,[Ljava.lang.String;@310f891b,[Ljava.lang.String;@72f264c6),Annotation([Ljava.lang.String;@7b63e1f,[Ljava.lang.String;@4da8692d,[Ledu.cmu.lti.nlp.amr.Entity;@6b91312f))
AMR:
(d / defuse-01, ARG0, i / it)
(d / defuse-01, ARG1, p / promise-01)
(e / explode-01, ARG1, c / confront-01)
(p / promise-01, ARG1, c / confront-01)
(p / promise-01, mod, o / otherwise)

Decoded in 21,824 microseconds
Sentence: but he promised further talks with mps after the publication of the report into the piper alpha disaster

Spans:
Span 7-8:  after => after
Span 0-1:  but => contrast-01
Span 17-18:  disaster => disaster
Span 3-4:  further => further
Span 1-2:  he => he
Span 15-16:  piper => piper
Span 2-3:  promised => promise-01
Span 9-10:  publication => publication
Span 12-13:  report => report
Span 4-5:  talks => talk-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),disaster,disaster,false), Span(15,16,List(1),piper,piper,false), Span(12,13,List(2),report,report,false), Span(9,10,List(3),publication,publication,false), Span(7,8,List(4),after,after,false), Span(4,5,List(5),talks,talk-01,false), Span(3,4,List(6),further,further,false), Span(2,3,List(7),promised,promise-01,false), Span(1,2,List(8),he,he,false), Span(0,1,List(9),but,contrast-01,false)),Map(2 -> report, 5 -> talk-01, 8 -> he, 7 -> promise-01, 1 -> piper, 4 -> after, 6 -> further, 9 -> contrast-01, 0 -> disaster, 3 -> publication),Map(h -> he, t -> talk-01, p2 -> publication, d -> disaster, p -> piper, a -> after, r -> report, c -> contrast-01, f -> further, p3 -> promise-01))),[Ljava.lang.String;@9343bd5,Annotation([Ljava.lang.String;@444421ab,[Ljava.lang.String;@54fe8490,[Ljava.lang.String;@11b13588),Annotation([Ljava.lang.String;@9317ccb,[Ljava.lang.String;@ff7f824,[Ledu.cmu.lti.nlp.amr.Dependency;@60c40bac),Annotation([Ljava.lang.String;@66da7ad5,[Ljava.lang.String;@11b66ab4,[Ljava.lang.String;@5f175881),Annotation([Ljava.lang.String;@75b3adec,[Ljava.lang.String;@675f9d52,[Ledu.cmu.lti.nlp.amr.Entity;@3651a783))
AMR:
(a / after, op, p2 / publication)
(c / contrast-01, ARG0, r / report)
(c / contrast-01, ARG2, p3 / promise-01)
(d / disaster, mod, p / piper)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, t / talk-01)
(p3 / promise-01, time, a / after)
(t / talk-01, ARG1, d / disaster)
(t / talk-01, degree, f / further)

Decoded in 53,619 microseconds
Sentence: englands win was well merited although there were times in an evenly balanced absorbing match when belgiums greater awareness near goal promised to take les diables rouges through

Spans:
Span 13-14:  absorbing => absorb-01
Span 18-19:  awareness => awareness
Span 12-13:  balanced => balance-01
Span 11-12:  evenly => even-01
Span 20-21:  goal => goal
Span 17-18:  greater => great
Span 14-15:  match => match-01
Span 19-20:  near => near
Span 21-22:  promised => promise-01
Span 3-4:  well => well
Span 1-2:  win => win-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),promised,promise-01,false), Span(20,21,List(1),goal,goal,false), Span(19,20,List(2),near,near,false), Span(18,19,List(3),awareness,awareness,false), Span(17,18,List(4),greater,great,false), Span(14,15,List(5),match,match-01,false), Span(13,14,List(6),absorbing,absorb-01,false), Span(12,13,List(7),balanced,balance-01,false), Span(11,12,List(8),evenly,even-01,false), Span(3,4,List(9),well,well,false), Span(1,2,List(10),win,win-01,false)),Map(2 -> near, 5 -> match-01, 8 -> even-01, 7 -> balance-01, 1 -> goal, 4 -> great, 6 -> absorb-01, 9 -> well, 0 -> promise-01, 10 -> win-01, 3 -> awareness),Map(w -> well, e -> even-01, n -> near, b -> balance-01, m -> match-01, g2 -> great, g -> goal, p -> promise-01, a -> awareness, w2 -> win-01, a2 -> absorb-01))),[Ljava.lang.String;@2acca551,Annotation([Ljava.lang.String;@61797eca,[Ljava.lang.String;@6f7331c4,[Ljava.lang.String;@73c87405),Annotation([Ljava.lang.String;@6d392fa5,[Ljava.lang.String;@456731a8,[Ledu.cmu.lti.nlp.amr.Dependency;@79ed3030),Annotation([Ljava.lang.String;@42f6ddd9,[Ljava.lang.String;@5d5ef3e7,[Ljava.lang.String;@4def295),Annotation([Ljava.lang.String;@490816b2,[Ljava.lang.String;@320a2593,[Ledu.cmu.lti.nlp.amr.Entity;@3828ef8f))
AMR:
(a / awareness, location, n / near)
(a / awareness, mod, g2 / great)
(b / balance-01, ARG1, m / match-01)
(e / even-01, ARG1, m / match-01)
(m / match-01, ARG0, w / well)
(m / match-01, ARG1, a2 / absorb-01)
(n / near, op, g / goal)
(p / promise-01, ARG1, g / goal)
(w2 / win-01, ARG0, a / awareness)
(w2 / win-01, ARG1, e / even-01)

Decoded in 176,648 microseconds
Sentence: the home office has promised a shake up of the training and selection of senior police officers but rejected mps calls for a central pool for appointments to the highest ranks writes terry kirby

Spans:
Span 11-12:  and => and
Span 17-18:  but => contrast-01
Span 23-24:  central => central
Span 29-30:  highest => (high :degree most)
Span 1-2:  home => home
Span 2-3:  office => office
Span 16-17:  officers => (have-org-role-91 :ARG2 officer)
Span 15-16:  police => police
Span 24-25:  pool => pool
Span 4-5:  promised => promise-01
Span 30-31:  ranks => rank
Span 18-19:  rejected => reject-01
Span 12-13:  selection => select-01
Span 14-15:  senior => senior
Span 6-7:  shake => shake-01
Span 10-11:  training => train-01
Span 31-32:  writes => write-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),writes,write-01,false), Span(30,31,List(1),ranks,rank,false), Span(29,30,List(3, 2),highest,(high :degree most),false), Span(24,25,List(4),pool,pool,false), Span(23,24,List(5),central,central,false), Span(18,19,List(6),rejected,reject-01,false), Span(17,18,List(7),but,contrast-01,false), Span(16,17,List(9, 8),officers,(have-org-role-91 :ARG2 officer),false), Span(15,16,List(10),police,police,false), Span(14,15,List(11),senior,senior,false), Span(12,13,List(12),selection,select-01,false), Span(11,12,List(13),and,and,false), Span(10,11,List(14),training,train-01,false), Span(6,7,List(15),shake,shake-01,false), Span(4,5,List(16),promised,promise-01,false), Span(2,3,List(17),office,office,false), Span(1,2,List(18),home,home,false)),Map(2 -> high, 5 -> central, 12 -> select-01, 15 -> shake-01, 8 -> have-org-role-91, 18 -> home, 7 -> contrast-01, 17 -> office, 1 -> rank, 4 -> pool, 11 -> senior, 14 -> train-01, 6 -> reject-01, 0 -> write-01, 9 -> officer, 16 -> promise-01, 3 -> most, 10 -> police, 13 -> and),Map(w -> write-01, h -> high, h2 -> have-org-role-91, s2 -> select-01, t -> train-01, p2 -> police, s -> senior, m -> most, p -> pool, r2 -> reject-01, a -> and, o2 -> office, r -> rank, h3 -> home, s3 -> shake-01, c -> central, o -> officer, p3 -> promise-01, c2 -> contrast-01))),[Ljava.lang.String;@787b217,Annotation([Ljava.lang.String;@5dbd07dd,[Ljava.lang.String;@254f6e3f,[Ljava.lang.String;@1cefd3c),Annotation([Ljava.lang.String;@3c536f11,[Ljava.lang.String;@9a0e408,[Ledu.cmu.lti.nlp.amr.Dependency;@21dace28),Annotation([Ljava.lang.String;@2414b575,[Ljava.lang.String;@4b9526d4,[Ljava.lang.String;@2d284f10),Annotation([Ljava.lang.String;@315eba99,[Ljava.lang.String;@422cac21,[Ledu.cmu.lti.nlp.amr.Entity;@2d8cc78))
AMR:
(a / and, op, r2 / reject-01)
(a / and, op, s2 / select-01)
(a / and, op, t / train-01)
(c2 / contrast-01, ARG1, p3 / promise-01)
(c2 / contrast-01, ARG2, r2 / reject-01)
(h / high, degree, m / most)
(h2 / have-org-role-91, ARG1, p2 / police)
(h2 / have-org-role-91, ARG2, o / officer)
(o / officer, mod, s / senior)
(o2 / office, mod, h3 / home)
(p / pool, mod, c / central)
(p3 / promise-01, ARG0, o2 / office)
(p3 / promise-01, ARG1, s3 / shake-01)
(r / rank, mod, h / high)
(r2 / reject-01, manner, p / pool)
(s2 / select-01, ARG1, h2 / have-org-role-91)
(w / write-01, ARG0, r / rank)
(w / write-01, ARG1, r2 / reject-01)

Decoded in 327,143 microseconds
Sentence: labour promised more and stuck to the existing rules in practice

Spans:
Span 3-4:  and => and
Span 7-8:  existing => exist-01
Span 0-1:  labour => labour
Span 10-11:  practice => practice-01
Span 1-2:  promised => promise-01
Span 8-9:  rules => rule
Span 4-5:  stuck => stick-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),practice,practice-01,false), Span(8,9,List(1),rules,rule,false), Span(7,8,List(2),existing,exist-01,false), Span(4,5,List(3),stuck,stick-01,false), Span(3,4,List(4),and,and,false), Span(1,2,List(5),promised,promise-01,false), Span(0,1,List(6),labour,labour,false)),Map(2 -> exist-01, 5 -> promise-01, 1 -> rule, 4 -> and, 6 -> labour, 0 -> practice-01, 3 -> stick-01),Map(e -> exist-01, p2 -> promise-01, s -> stick-01, p -> practice-01, a -> and, r -> rule, l -> labour))),[Ljava.lang.String;@391b8a4c,Annotation([Ljava.lang.String;@3f14a0de,[Ljava.lang.String;@634d6f2c,[Ljava.lang.String;@70bde4a2),Annotation([Ljava.lang.String;@42ed8181,[Ljava.lang.String;@76d15e7a,[Ledu.cmu.lti.nlp.amr.Dependency;@2b91d887),Annotation([Ljava.lang.String;@741e9d69,[Ljava.lang.String;@5f0940e,[Ljava.lang.String;@7588262d),Annotation([Ljava.lang.String;@3d8290a3,[Ljava.lang.String;@46e5dce1,[Ledu.cmu.lti.nlp.amr.Entity;@1d085c24))
AMR:
(a / and, op, s / stick-01)
(e / exist-01, ARG1, r / rule)
(p2 / promise-01, ARG0, l / labour)
(p2 / promise-01, ARG2, a / and)
(r / rule, topic, p / practice-01)
(s / stick-01, ARG1, r / rule)

Decoded in 37,887 microseconds
Sentence: he promised to hold elections in six months calling a meeting of national reconciliation in the town of buchanan for next saturday

Spans:
Span 4-5:  elections => elect-01
Span 0-1:  he => he
Span 10-11:  meeting => meet-03
Span 7-8:  months => (temporal-quantity :unit month)
Span 12-13:  national => nation
Span 20-21:  next => next
Span 1-2:  promised => promise-01
Span 13-14:  reconciliation => reconcile-01
Span 21-22:  saturday => saturday
Span 6-7:  six => 6
Span 16-17:  town => town

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),saturday,saturday,false), Span(20,21,List(1),next,next,false), Span(16,17,List(2),town,town,false), Span(13,14,List(3),reconciliation,reconcile-01,false), Span(12,13,List(4),national,nation,false), Span(10,11,List(5),meeting,meet-03,false), Span(7,8,List(7, 6),months,(temporal-quantity :unit month),false), Span(6,7,List(8),six,6,false), Span(4,5,List(9),elections,elect-01,false), Span(1,2,List(10),promised,promise-01,false), Span(0,1,List(11),he,he,false)),Map(2 -> town, 5 -> meet-03, 8 -> 6, 7 -> month, 1 -> next, 11 -> he, 4 -> nation, 6 -> temporal-quantity, 9 -> elect-01, 0 -> saturday, 10 -> promise-01, 3 -> reconcile-01),Map(e -> elect-01, n -> next, h -> he, t -> town, m2 -> month, s -> saturday, m -> meet-03, p -> promise-01, t2 -> temporal-quantity, r -> reconcile-01, 6 -> 6, n2 -> nation))),[Ljava.lang.String;@fd94e60,Annotation([Ljava.lang.String;@3a888c1,[Ljava.lang.String;@2daa38c7,[Ljava.lang.String;@275a83d),Annotation([Ljava.lang.String;@7a783e0d,[Ljava.lang.String;@6c32064b,[Ledu.cmu.lti.nlp.amr.Dependency;@483b5d6b),Annotation([Ljava.lang.String;@317240d9,[Ljava.lang.String;@43ff7feb,[Ljava.lang.String;@3b27402d),Annotation([Ljava.lang.String;@de668b2,[Ljava.lang.String;@11e3853f,[Ledu.cmu.lti.nlp.amr.Entity;@7040f445))
AMR:
(e / elect-01, ARG0, h / he)
(m / meet-03, ARG0, r / reconcile-01)
(m / meet-03, ARG1, e / elect-01)
(m2 / month, poss, h / he)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, n / next)
(r / reconcile-01, ARG1, t / town)
(r / reconcile-01, mod, n2 / nation)
(s / saturday, op, e / elect-01)
(t2 / temporal-quantity, quant, 6 / 6)
(t2 / temporal-quantity, unit, m2 / month)

Decoded in 116,582 microseconds
Sentence: have you noticed how so many adverts for chocolate are aimed at girls they promise romance sex fun ellip

Spans:
Span 10-11:  aimed => aim-02
Span 17-18:  fun => fun
Span 12-13:  girls => girl
Span 5-6:  many => many
Span 2-3:  noticed => notice-01
Span 14-15:  promise => promise-01
Span 16-17:  sex => sex
Span 4-5:  so => so
Span 13-14:  they => they
Span 1-2:  you => you

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),fun,fun,false), Span(16,17,List(1),sex,sex,false), Span(14,15,List(2),promise,promise-01,false), Span(13,14,List(3),they,they,false), Span(12,13,List(4),girls,girl,false), Span(10,11,List(5),aimed,aim-02,false), Span(5,6,List(6),many,many,false), Span(4,5,List(7),so,so,false), Span(2,3,List(8),noticed,notice-01,false), Span(1,2,List(9),you,you,false)),Map(2 -> promise-01, 5 -> aim-02, 8 -> notice-01, 7 -> so, 1 -> sex, 4 -> girl, 6 -> many, 9 -> you, 0 -> fun, 3 -> they),Map(n -> notice-01, s2 -> so, t -> they, s -> sex, m -> many, y -> you, g -> girl, p -> promise-01, a -> aim-02, f -> fun))),[Ljava.lang.String;@38651796,Annotation([Ljava.lang.String;@74ef95c6,[Ljava.lang.String;@1d523624,[Ljava.lang.String;@608486),Annotation([Ljava.lang.String;@409c799b,[Ljava.lang.String;@60f3d040,[Ledu.cmu.lti.nlp.amr.Dependency;@26ed4b7a),Annotation([Ljava.lang.String;@24f64a8d,[Ljava.lang.String;@259881f0,[Ljava.lang.String;@3f7ac6d8),Annotation([Ljava.lang.String;@1594af77,[Ljava.lang.String;@548bb8b2,[Ledu.cmu.lti.nlp.amr.Entity;@210ad97b))
AMR:
(a / aim-02, ARG0, t / they)
(a / aim-02, ARG1, y / you)
(f / fun, mod, s / sex)
(m / many, degree, s2 / so)
(n / notice-01, ARG0, y / you)
(n / notice-01, ARG1, s2 / so)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, g / girl)
(s / sex, domain, t / they)

Decoded in 126,771 microseconds
Sentence: finally in may 1939 there came a white paper promising the end of jewish immigration after a further 75000 jews had been admitted

Spans:
Span 22-23:  admitted => admit-01
Span 15-16:  after => after
Span 0-1:  finally => final
Span 17-18:  further => further
Span 14-15:  immigration => immigrate-01
Span 13-14:  jewish => (ethnic-group :name (name :op "Jew"))
Span 19-20:  jews => (ethnic-group :name (name :op "Jew"))
Span 2-4:  may 1939 => (date-entity :month 5 :year 1939)
Span 8-9:  paper => paper
Span 9-10:  promising => promise-01
Span 7-8:  white => white

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),admitted,admit-01,false), Span(19,20,List(3, 2, 1),jews,(ethnic-group :name (name :op "Jew")),false), Span(17,18,List(4),further,further,false), Span(15,16,List(5),after,after,false), Span(14,15,List(6),immigration,immigrate-01,false), Span(13,14,List(9, 8, 7),jewish,(ethnic-group :name (name :op "Jew")),false), Span(9,10,List(10),promising,promise-01,false), Span(8,9,List(11),paper,paper,false), Span(7,8,List(12),white,white,false), Span(2,4,List(15, 14, 13),may 1939,(date-entity :month 5 :year 1939),false), Span(0,1,List(16),finally,final,false)),Map(2 -> name, 5 -> after, 12 -> white, 15 -> 1939, 8 -> name, 7 -> ethnic-group, 1 -> ethnic-group, 4 -> further, 11 -> paper, 14 -> 5, 6 -> immigrate-01, 0 -> admit-01, 9 -> "Jew", 16 -> final, 3 -> "Jew", 10 -> promise-01, 13 -> date-entity),Map(e -> ethnic-group, n -> name, w -> white, 5 -> 5, e2 -> ethnic-group, p2 -> paper, d -> date-entity, 1 -> 1939, p -> promise-01, a -> admit-01, a2 -> after, i -> immigrate-01, f2 -> final, f -> further, n2 -> name))),[Ljava.lang.String;@4f4c2b2f,Annotation([Ljava.lang.String;@11a74355,[Ljava.lang.String;@7c358a80,[Ljava.lang.String;@1f181935),Annotation([Ljava.lang.String;@671ef685,[Ljava.lang.String;@21cacaa7,[Ledu.cmu.lti.nlp.amr.Dependency;@8beab46),Annotation([Ljava.lang.String;@1dde8526,[Ljava.lang.String;@7bf7911b,[Ljava.lang.String;@3a57c332),Annotation([Ljava.lang.String;@57d0258a,[Ljava.lang.String;@2250b410,[Ledu.cmu.lti.nlp.amr.Entity;@605d9809))
AMR:
(a / admit-01, ARG1, e / ethnic-group)
(a2 / after, op, a / admit-01)
(d / date-entity, month, 5 / 5)
(d / date-entity, time, f2 / final)
(d / date-entity, year, 1 / 1939)
(e / ethnic-group, name, n / name)
(e2 / ethnic-group, name, n2 / name)
(i / immigrate-01, ARG1, f / further)
(i / immigrate-01, mod, e2 / ethnic-group)
(i / immigrate-01, time, a2 / after)
(n / name, op, "Jew")
(n2 / name, op, "Jew")
(p / promise-01, ARG0, f2 / final)
(p / promise-01, ARG1, p2 / paper)
(p / promise-01, ARG2, i / immigrate-01)
(p2 / paper, mod, w / white)

Decoded in 292,633 microseconds
Sentence: petar mladenov the communist party leader promised democratic multiparty elections by next june and the end of guarantees of the partys leading role

Spans:
Span 13-14:  and => and
Span 3-5:  communist party => (political-party :name (name :op "Party" :op "Communist"))
Span 7-8:  democratic => democracy
Span 9-10:  elections => elect-01
Span 17-18:  guarantees => guarantee-01
Span 12-13:  june => (date-entity :month 6)
Span 5-6:  leader => (person :ARG0-of lead-02)
Span 21-22:  leading => lead-01
Span 11-12:  next => next
Span 6-7:  promised => promise-01
Span 22-23:  role => role

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),role,role,false), Span(21,22,List(1),leading,lead-01,false), Span(17,18,List(2),guarantees,guarantee-01,false), Span(13,14,List(3),and,and,false), Span(12,13,List(5, 4),june,(date-entity :month 6),false), Span(11,12,List(6),next,next,false), Span(9,10,List(7),elections,elect-01,false), Span(7,8,List(8),democratic,democracy,false), Span(6,7,List(9),promised,promise-01,false), Span(5,6,List(11, 10),leader,(person :ARG0-of lead-02),false), Span(3,5,List(15, 14, 13, 12),communist party,(political-party :name (name :op "Party" :op "Communist")),false)),Map(2 -> guarantee-01, 5 -> 6, 12 -> political-party, 15 -> "Communist", 8 -> democracy, 7 -> elect-01, 1 -> lead-01, 4 -> date-entity, 11 -> lead-02, 14 -> "Party", 6 -> next, 0 -> role, 9 -> promise-01, 3 -> and, 10 -> person, 13 -> name),Map(e -> elect-01, n -> next, p2 -> person, d -> date-entity, g -> guarantee-01, p -> promise-01, a -> and, d2 -> democracy, l2 -> lead-02, r -> role, 6 -> 6, l -> lead-01, p3 -> political-party, n2 -> name))),[Ljava.lang.String;@20a8a84c,Annotation([Ljava.lang.String;@20c12654,[Ljava.lang.String;@68bb6598,[Ljava.lang.String;@670b13df),Annotation([Ljava.lang.String;@845ca53,[Ljava.lang.String;@1de61363,[Ledu.cmu.lti.nlp.amr.Dependency;@6c02d7ea),Annotation([Ljava.lang.String;@2ead7b0c,[Ljava.lang.String;@7f6968c4,[Ljava.lang.String;@615d5d35),Annotation([Ljava.lang.String;@38927483,[Ljava.lang.String;@171f6179,[Ledu.cmu.lti.nlp.amr.Entity;@d385acb))
AMR:
(a / and, op, d / date-entity)
(a / and, op, r / role)
(d / date-entity, mod, n / next)
(d / date-entity, month, 6 / 6)
(e / elect-01, mod, d2 / democracy)
(g / guarantee-01, ARG0, r / role)
(l / lead-01, ARG0, r / role)
(l2 / lead-02, ARG0, p2 / person)
(n2 / name, op, "Communist")
(n2 / name, op, "Party")
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, a / and)
(p / promise-01, ARG2, e / elect-01)
(p2 / person, mod, p3 / political-party)
(p3 / political-party, name, n2 / name)

Decoded in 114,214 microseconds
Sentence: however the understanding among the summit leaders is that most of this could be met by a planned increase in overseas aid promised by japan and other rich countries unable to provide food

NER Entity: (country :name (name :op "japan"))
Spans:
Span 21-22:  aid => aid-01
Span 3-4:  among => among
Span 25-26:  and => and
Span 12-13:  could => possible
Span 28-29:  countries => country
Span 32-33:  food => food
Span 18-19:  increase => increase-01
Span 6-7:  leaders => (person :ARG0-of lead-02)
Span 14-15:  met => meet-03
Span 9-10:  most => most
Span 26-27:  other => other
Span 20-21:  overseas => overseas
Span 17-18:  planned => plan-01
Span 22-23:  promised => promise-01
Span 31-32:  provide => provide-01
Span 27-28:  rich => rich
Span 5-6:  summit => summit
Span 11-12:  this => this
Span 2-3:  understanding => understand-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),food,food,false), Span(31,32,List(1),provide,provide-01,false), Span(28,29,List(2),countries,country,false), Span(27,28,List(3),rich,rich,false), Span(26,27,List(4),other,other,false), Span(25,26,List(5),and,and,false), Span(22,23,List(6),promised,promise-01,false), Span(21,22,List(7),aid,aid-01,false), Span(20,21,List(8),overseas,overseas,false), Span(18,19,List(9),increase,increase-01,false), Span(17,18,List(10),planned,plan-01,false), Span(14,15,List(11),met,meet-03,false), Span(12,13,List(12),could,possible,false), Span(11,12,List(13),this,this,false), Span(9,10,List(14),most,most,false), Span(6,7,List(16, 15),leaders,(person :ARG0-of lead-02),false), Span(5,6,List(17),summit,summit,false), Span(3,4,List(18),among,among,false), Span(2,3,List(19),understanding,understand-01,false)),Map(2 -> country, 5 -> and, 12 -> possible, 15 -> person, 8 -> overseas, 18 -> among, 7 -> aid-01, 17 -> summit, 1 -> provide-01, 4 -> other, 11 -> meet-03, 14 -> most, 6 -> promise-01, 0 -> food, 9 -> increase-01, 16 -> lead-02, 19 -> understand-01, 3 -> rich, 10 -> plan-01, 13 -> this),Map(p5 -> person, t -> this, m2 -> most, p2 -> promise-01, a3 -> among, s -> summit, m -> meet-03, p -> provide-01, a -> and, p4 -> possible, o2 -> overseas, r -> rich, a2 -> aid-01, i -> increase-01, c -> country, u -> understand-01, l -> lead-02, f -> food, o -> other, p3 -> plan-01))),[Ljava.lang.String;@22df9697,Annotation([Ljava.lang.String;@517a564,[Ljava.lang.String;@536b4ad8,[Ljava.lang.String;@28fed5b1),Annotation([Ljava.lang.String;@727f6c7d,[Ljava.lang.String;@babbd45,[Ledu.cmu.lti.nlp.amr.Dependency;@381702ff),Annotation([Ljava.lang.String;@6ec5d01d,[Ljava.lang.String;@7ce258bb,[Ljava.lang.String;@702f9d0a),Annotation([Ljava.lang.String;@45ef3510,[Ljava.lang.String;@5b84d14e,[Ledu.cmu.lti.nlp.amr.Entity;@6cc986d2))
AMR:
(a / and, op, c / country)
(a2 / aid-01, location, o2 / overseas)
(a3 / among, op, s / summit)
(c / country, mod, o / other)
(c / country, mod, r / rich)
(f / food, op, a2 / aid-01)
(i / increase-01, ARG1, a2 / aid-01)
(l / lead-02, ARG0, p5 / person)
(m / meet-03, ARG0, p5 / person)
(m / meet-03, ARG1, i / increase-01)
(p / provide-01, ARG0, t / this)
(p / provide-01, ARG1, f / food)
(p2 / promise-01, ARG1, a2 / aid-01)
(p2 / promise-01, ARG2, a / and)
(p3 / plan-01, ARG0, m2 / most)
(p3 / plan-01, ARG1, i / increase-01)
(p4 / possible, domain, m / meet-03)
(u / understand-01, ARG0, p5 / person)
(u / understand-01, ARG1, s / summit)

Decoded in 402,575 microseconds
Sentence: in his inaugural speech to congress mr menem promised a crackdown on corruption dash

Spans:
Span 5-6:  congress => (government-organization :name (name :op "Congress"))
Span 12-13:  corruption => corrupt-01
Span 10-11:  crackdown => crack-06
Span 8-9:  promised => promise-01
Span 3-4:  speech => speech

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),corruption,corrupt-01,false), Span(10,11,List(1),crackdown,crack-06,false), Span(8,9,List(2),promised,promise-01,false), Span(5,6,List(5, 4, 3),congress,(government-organization :name (name :op "Congress")),false), Span(3,4,List(6),speech,speech,false)),Map(2 -> promise-01, 5 -> "Congress", 1 -> crack-06, 4 -> name, 6 -> speech, 0 -> corrupt-01, 3 -> government-organization),Map(n -> name, s -> speech, g -> government-organization, p -> promise-01, c -> corrupt-01, c2 -> crack-06))),[Ljava.lang.String;@22b27cca,Annotation([Ljava.lang.String;@741ec391,[Ljava.lang.String;@fb9a026,[Ljava.lang.String;@63c126da),Annotation([Ljava.lang.String;@1ddde560,[Ljava.lang.String;@52fe10f1,[Ledu.cmu.lti.nlp.amr.Dependency;@260a68c8),Annotation([Ljava.lang.String;@756535fa,[Ljava.lang.String;@47baec4c,[Ljava.lang.String;@40ef965e),Annotation([Ljava.lang.String;@317916a0,[Ljava.lang.String;@4bc7bc0,[Ledu.cmu.lti.nlp.amr.Entity;@72607cad))
AMR:
(c2 / crack-06, ARG1, c / corrupt-01)
(g / government-organization, name, n / name)
(n / name, op, "Congress")
(p / promise-01, ARG0, g / government-organization)
(p / promise-01, ARG1, c2 / crack-06)
(s / speech, poss, c2 / crack-06)

Decoded in 35,122 microseconds
Sentence: knighton has promised to post a formal offer document to shareholders by 11 october but he could run into problems with the city panel on takeovers and mergers which is likely to require details of his financial backing

Spans:
Span 12-13:  11 => 11
Span 26-27:  and => and
Span 37-38:  backing => back-01
Span 14-15:  but => contrast-01
Span 22-23:  city => city
Span 16-17:  could => possible
Span 33-34:  details => detail-01
Span 8-9:  document => document
Span 36-37:  financial => finance
Span 6-7:  formal => formal
Span 15-16:  he => he
Span 30-31:  likely => likely
Span 27-28:  mergers => merge-01
Span 13-14:  october => (date-entity :month 10)
Span 7-8:  offer => offer-01
Span 23-24:  panel => panel
Span 4-5:  post => post
Span 19-20:  problems => problem
Span 2-3:  promised => promise-01
Span 32-33:  require => require-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),backing,back-01,false), Span(36,37,List(1),financial,finance,false), Span(33,34,List(2),details,detail-01,false), Span(32,33,List(3),require,require-01,false), Span(30,31,List(4),likely,likely,false), Span(27,28,List(5),mergers,merge-01,false), Span(26,27,List(6),and,and,false), Span(23,24,List(7),panel,panel,false), Span(22,23,List(8),city,city,false), Span(19,20,List(9),problems,problem,false), Span(16,17,List(10),could,possible,false), Span(15,16,List(11),he,he,false), Span(14,15,List(12),but,contrast-01,false), Span(13,14,List(14, 13),october,(date-entity :month 10),false), Span(12,13,List(15),11,11,false), Span(8,9,List(16),document,document,false), Span(7,8,List(17),offer,offer-01,false), Span(6,7,List(18),formal,formal,false), Span(4,5,List(19),post,post,false), Span(2,3,List(20),promised,promise-01,false)),Map(2 -> detail-01, 5 -> merge-01, 12 -> contrast-01, 15 -> 11, 8 -> city, 18 -> formal, 7 -> panel, 17 -> offer-01, 1 -> finance, 4 -> likely, 11 -> he, 14 -> 10, 20 -> promise-01, 6 -> and, 0 -> back-01, 9 -> problem, 16 -> document, 19 -> post, 3 -> require-01, 10 -> possible, 13 -> date-entity),Map(h -> he, p5 -> promise-01, 12 -> 11, b -> back-01, d3 -> document, p2 -> problem, d -> detail-01, m -> merge-01, 1 -> 10, p -> panel, a -> and, p4 -> post, d2 -> date-entity, r -> require-01, c -> city, f2 -> formal, l -> likely, f -> finance, o -> offer-01, p3 -> possible, c2 -> contrast-01))),[Ljava.lang.String;@20be0e6e,Annotation([Ljava.lang.String;@1da5688d,[Ljava.lang.String;@5673102f,[Ljava.lang.String;@1c2baa00),Annotation([Ljava.lang.String;@76a5f472,[Ljava.lang.String;@953a539,[Ledu.cmu.lti.nlp.amr.Dependency;@528445f7),Annotation([Ljava.lang.String;@6a0d8573,[Ljava.lang.String;@1db4776a,[Ljava.lang.String;@330bdf62),Annotation([Ljava.lang.String;@5076b51c,[Ljava.lang.String;@216c6a89,[Ledu.cmu.lti.nlp.amr.Entity;@54c65983))
AMR:
(a / and, op, m / merge-01)
(a / and, op, p2 / problem)
(b / back-01, ARG1, f / finance)
(c2 / contrast-01, ARG1, d2 / date-entity)
(c2 / contrast-01, ARG2, p3 / possible)
(d / detail-01, ARG0, 12 / 11)
(d / detail-01, ARG1, b / back-01)
(d2 / date-entity, month, 1 / 10)
(d3 / document, mod, f2 / formal)
(d3 / document, source, o / offer-01)
(l / likely, domain, r / require-01)
(m / merge-01, ARG1, l / likely)
(o / offer-01, ARG1, a / and)
(p / panel, mod, c / city)
(p2 / problem, location, p / panel)
(p4 / post, manner, d3 / document)
(p5 / promise-01, ARG0, h / he)
(p5 / promise-01, ARG1, c2 / contrast-01)
(p5 / promise-01, ARG2, p4 / post)
(r / require-01, ARG1, d / detail-01)

Decoded in 607,942 microseconds
Sentence: you may think you have to cut back on the necessities of life for a few days or cancel a treat you had promised yourself and the family

Spans:
Span 25-26:  and => and
Span 7-8:  back => back
Span 18-19:  cancel => cancel-01
Span 16-17:  days => (temporal-quantity :unit day)
Span 27-28:  family => family
Span 15-16:  few => few
Span 12-13:  life => life
Span 1-2:  may => (date-entity :month 5)
Span 17-18:  or => or
Span 23-24:  promised => promise-01
Span 2-3:  think => think-01
Span 20-21:  treat => treat-01
Span 21-22:  you => you
Span 3-4:  you => you
Span 0-1:  you => you

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),family,family,false), Span(25,26,List(1),and,and,false), Span(23,24,List(2),promised,promise-01,false), Span(21,22,List(3),you,you,false), Span(20,21,List(4),treat,treat-01,false), Span(18,19,List(5),cancel,cancel-01,false), Span(17,18,List(6),or,or,false), Span(16,17,List(8, 7),days,(temporal-quantity :unit day),false), Span(15,16,List(9),few,few,false), Span(12,13,List(10),life,life,false), Span(7,8,List(11),back,back,false), Span(3,4,List(12),you,you,false), Span(2,3,List(13),think,think-01,false), Span(1,2,List(15, 14),may,(date-entity :month 5),false), Span(0,1,List(16),you,you,false)),Map(2 -> promise-01, 5 -> cancel-01, 12 -> you, 15 -> 5, 8 -> day, 7 -> temporal-quantity, 1 -> and, 4 -> treat-01, 11 -> back, 14 -> date-entity, 6 -> or, 0 -> family, 9 -> few, 16 -> you, 3 -> you, 10 -> life, 13 -> think-01),Map(5 -> 5, t -> treat-01, b -> back, d -> day, t3 -> think-01, p -> promise-01, y -> you, a -> and, y3 -> you, d2 -> date-entity, t2 -> temporal-quantity, c -> cancel-01, f2 -> few, l -> life, f -> family, o -> or, y2 -> you))),[Ljava.lang.String;@4daaa02a,Annotation([Ljava.lang.String;@7cf94d3b,[Ljava.lang.String;@533d9c96,[Ljava.lang.String;@71f3668b),Annotation([Ljava.lang.String;@22d16a1f,[Ljava.lang.String;@628e2b14,[Ledu.cmu.lti.nlp.amr.Dependency;@63ae6098),Annotation([Ljava.lang.String;@4d47ce48,[Ljava.lang.String;@2538009b,[Ljava.lang.String;@7fafd333),Annotation([Ljava.lang.String;@7052fac2,[Ljava.lang.String;@57cd102a,[Ledu.cmu.lti.nlp.amr.Entity;@57e0626e))
AMR:
(a / and, op, f / family)
(a / and, op, t / treat-01)
(c / cancel-01, ARG0, y2 / you)
(c / cancel-01, ARG1, t / treat-01)
(d2 / date-entity, month, 5 / 5)
(f2 / few, op, t2 / temporal-quantity)
(o / or, op, c / cancel-01)
(o / or, op, t2 / temporal-quantity)
(p / promise-01, ARG0, y / you)
(p / promise-01, ARG1, t / treat-01)
(t / treat-01, ARG1, b / back)
(t / treat-01, mod, l / life)
(t2 / temporal-quantity, unit, d / day)
(t3 / think-01, ARG0, y3 / you)
(t3 / think-01, ARG1, o / or)
(t3 / think-01, mod, d2 / date-entity)

Decoded in 1,020,067 microseconds
Sentence: the warden of wadham sir claus moser said i am delighted at this excellent agreement as part of what promises to be a most worthwhile relationship

Spans:
Span 14-15:  agreement => agree-01
Span 10-11:  delighted => delight-01
Span 13-14:  excellent => excellent
Span 8-9:  i => i
Span 23-24:  most => most
Span 19-20:  promises => promise-01
Span 25-26:  relationship => relationship
Span 7-8:  said => say-01
Span 12-13:  this => this
Span 24-25:  worthwhile => worthwhile

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),relationship,relationship,false), Span(24,25,List(1),worthwhile,worthwhile,false), Span(23,24,List(2),most,most,false), Span(19,20,List(3),promises,promise-01,false), Span(14,15,List(4),agreement,agree-01,false), Span(13,14,List(5),excellent,excellent,false), Span(12,13,List(6),this,this,false), Span(10,11,List(7),delighted,delight-01,false), Span(8,9,List(8),i,i,false), Span(7,8,List(9),said,say-01,false)),Map(2 -> most, 5 -> excellent, 8 -> i, 7 -> delight-01, 1 -> worthwhile, 4 -> agree-01, 6 -> this, 9 -> say-01, 0 -> relationship, 3 -> promise-01),Map(e -> excellent, w -> worthwhile, t -> this, s -> say-01, d -> delight-01, m -> most, p -> promise-01, a -> agree-01, i -> i, r -> relationship))),[Ljava.lang.String;@4c5e50d4,Annotation([Ljava.lang.String;@440cb577,[Ljava.lang.String;@1e5dba88,[Ljava.lang.String;@1b81464b),Annotation([Ljava.lang.String;@442df408,[Ljava.lang.String;@24f05c30,[Ledu.cmu.lti.nlp.amr.Dependency;@20346642),Annotation([Ljava.lang.String;@50258792,[Ljava.lang.String;@4fe7ab59,[Ljava.lang.String;@72a2890a),Annotation([Ljava.lang.String;@cd32a52,[Ljava.lang.String;@7b7f7411,[Ledu.cmu.lti.nlp.amr.Entity;@6c9d476e))
AMR:
(a / agree-01, ARG0, p / promise-01)
(a / agree-01, ARG1, e / excellent)
(a / agree-01, mod, t / this)
(d / delight-01, ARG2, a / agree-01)
(d / delight-01, domain, i / i)
(p / promise-01, ARG1, r / relationship)
(r / relationship, mod, w / worthwhile)
(s / say-01, ARG0, i / i)
(w / worthwhile, degree, m / most)

Decoded in 53,085 microseconds
Sentence: the south african police promised a highlevel investigation yesterday into claims by a former security police captain that with the full knowledge of topranking officers who allegedly ran terror missions in and out of the country he had headed a hit squad which eliminated political enemies of the government

Spans:
Span 26-27:  allegedly => allege-01
Span 31-32:  and => and
Span 16-17:  captain => (have-org-role-91 :ARG2 captain)
Span 10-11:  claims => claim-01
Span 35-36:  country => country
Span 43-44:  eliminated => eliminate-01
Span 45-46:  enemies => (have-rel-role-91 :ARG2 enemy)
Span 13-14:  former => former
Span 20-21:  full => full
Span 36-37:  he => he
Span 40-41:  hit => hit-01
Span 7-8:  investigation => investigate-01
Span 21-22:  knowledge => knowledge
Span 29-30:  missions => mission
Span 24-25:  officers => (have-org-role-91 :ARG2 officer)
Span 15-16:  police => police
Span 3-4:  police => police
Span 44-45:  political => politics
Span 4-5:  promised => promise-01
Span 14-15:  security => security
Span 1-2:  south => south
Span 41-42:  squad => squad
Span 28-29:  terror => terror
Span 8-9:  yesterday => yesterday

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(1, 0),enemies,(have-rel-role-91 :ARG2 enemy),false), Span(44,45,List(2),political,politics,false), Span(43,44,List(3),eliminated,eliminate-01,false), Span(41,42,List(4),squad,squad,false), Span(40,41,List(5),hit,hit-01,false), Span(36,37,List(6),he,he,false), Span(35,36,List(7),country,country,false), Span(31,32,List(8),and,and,false), Span(29,30,List(9),missions,mission,false), Span(28,29,List(10),terror,terror,false), Span(26,27,List(11),allegedly,allege-01,false), Span(24,25,List(13, 12),officers,(have-org-role-91 :ARG2 officer),false), Span(21,22,List(14),knowledge,knowledge,false), Span(20,21,List(15),full,full,false), Span(16,17,List(17, 16),captain,(have-org-role-91 :ARG2 captain),false), Span(15,16,List(18),police,police,false), Span(14,15,List(19),security,security,false), Span(13,14,List(20),former,former,false), Span(10,11,List(21),claims,claim-01,false), Span(8,9,List(22),yesterday,yesterday,false), Span(7,8,List(23),investigation,investigate-01,false), Span(4,5,List(24),promised,promise-01,false), Span(3,4,List(25),police,police,false), Span(1,2,List(26),south,south,false)),Map(2 -> politics, 5 -> hit-01, 12 -> have-org-role-91, 8 -> and, 15 -> full, 21 -> claim-01, 18 -> police, 24 -> promise-01, 7 -> country, 1 -> enemy, 17 -> captain, 23 -> investigate-01, 26 -> south, 4 -> squad, 11 -> allege-01, 14 -> knowledge, 20 -> former, 6 -> he, 9 -> mission, 0 -> have-rel-role-91, 22 -> yesterday, 16 -> have-org-role-91, 19 -> security, 10 -> terror, 3 -> eliminate-01, 25 -> police, 13 -> officer),Map(e -> enemy, h5 -> have-org-role-91, h -> have-rel-role-91, h2 -> hit-01, s2 -> security, t -> terror, k -> knowledge, e2 -> eliminate-01, p2 -> police, s -> squad, h4 -> have-org-role-91, m -> mission, y -> yesterday, p -> politics, a -> and, c3 -> claim-01, p4 -> police, a2 -> allege-01, i -> investigate-01, c -> country, h3 -> he, s3 -> south, f2 -> former, f -> full, o -> officer, p3 -> promise-01, c2 -> captain))),[Ljava.lang.String;@33d9a5bb,Annotation([Ljava.lang.String;@160fb295,[Ljava.lang.String;@60955f83,[Ljava.lang.String;@6eb1c2fe),Annotation([Ljava.lang.String;@5878ea78,[Ljava.lang.String;@6a6999a8,[Ledu.cmu.lti.nlp.amr.Dependency;@3ae71b2c),Annotation([Ljava.lang.String;@1aa903ea,[Ljava.lang.String;@4e400552,[Ljava.lang.String;@4d1d72a0),Annotation([Ljava.lang.String;@48508ded,[Ljava.lang.String;@2095e7b2,[Ledu.cmu.lti.nlp.amr.Entity;@519e67d4))
AMR:
(a / and, op, c3 / claim-01)
(a2 / allege-01, ARG1, h4 / have-org-role-91)
(c3 / claim-01, ARG0, c2 / captain)
(e / enemy, mod, p / politics)
(e2 / eliminate-01, ARG0, h3 / he)
(e2 / eliminate-01, ARG1, s / squad)
(h / have-rel-role-91, ARG0, s / squad)
(h / have-rel-role-91, ARG2, e / enemy)
(h2 / hit-01, ARG0, h3 / he)
(h4 / have-org-role-91, ARG1, c / country)
(h4 / have-org-role-91, ARG2, o / officer)
(h5 / have-org-role-91, ARG1, p2 / police)
(h5 / have-org-role-91, ARG2, c2 / captain)
(h5 / have-org-role-91, time, f2 / former)
(i / investigate-01, ARG0, p4 / police)
(i / investigate-01, ARG1, a2 / allege-01)
(k / knowledge, location, h4 / have-org-role-91)
(k / knowledge, mod, f / full)
(k / knowledge, poss, h3 / he)
(m / mission, mod, t / terror)
(m / mission, topic, h4 / have-org-role-91)
(p2 / police, mod, s2 / security)
(p3 / promise-01, ARG0, p4 / police)
(p3 / promise-01, ARG1, c3 / claim-01)
(p3 / promise-01, time, y / yesterday)
(p4 / police, mod, s3 / south)

Decoded in 1,267,480 microseconds
Sentence: i was in scarborough on the day that hugh gaitskell promised to fight fight and fight again to save the party that he loved

Spans:
Span 16-17:  again => again
Span 14-15:  and => and
Span 6-7:  day => day
Span 15-16:  fight => fight-01
Span 13-14:  fight => fight-01
Span 12-13:  fight => fight-01
Span 22-23:  he => he
Span 0-1:  i => i
Span 23-24:  loved => love-01
Span 20-21:  party => party
Span 10-11:  promised => promise-01
Span 18-19:  save => save-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),loved,love-01,false), Span(22,23,List(1),he,he,false), Span(20,21,List(2),party,party,false), Span(18,19,List(3),save,save-02,false), Span(16,17,List(4),again,again,false), Span(15,16,List(5),fight,fight-01,false), Span(14,15,List(6),and,and,false), Span(13,14,List(7),fight,fight-01,false), Span(12,13,List(8),fight,fight-01,false), Span(10,11,List(9),promised,promise-01,false), Span(6,7,List(10),day,day,false), Span(0,1,List(11),i,i,false)),Map(2 -> party, 5 -> fight-01, 8 -> fight-01, 7 -> fight-01, 1 -> he, 11 -> i, 4 -> again, 6 -> and, 9 -> promise-01, 0 -> love-01, 10 -> day, 3 -> save-02),Map(h -> he, p2 -> promise-01, s -> save-02, d -> day, p -> party, a -> again, f3 -> fight-01, i -> i, a2 -> and, f2 -> fight-01, l -> love-01, f -> fight-01))),[Ljava.lang.String;@76b2b928,Annotation([Ljava.lang.String;@4f9a2df9,[Ljava.lang.String;@13405f43,[Ljava.lang.String;@672e3194),Annotation([Ljava.lang.String;@9b92078,[Ljava.lang.String;@5902ab44,[Ledu.cmu.lti.nlp.amr.Dependency;@3e3a2b03),Annotation([Ljava.lang.String;@5cddf1df,[Ljava.lang.String;@6f32971a,[Ljava.lang.String;@625e64fe),Annotation([Ljava.lang.String;@23389226,[Ljava.lang.String;@57030eda,[Ledu.cmu.lti.nlp.amr.Entity;@9c436d7))
AMR:
(a2 / and, op, f / fight-01)
(d / day, domain, f3 / fight-01)
(f / fight-01, ARG2, s / save-02)
(f / fight-01, mod, a / again)
(f3 / fight-01, ARG1, f2 / fight-01)
(l / love-01, ARG0, h / he)
(l / love-01, ARG1, p / party)
(p2 / promise-01, ARG0, i / i)
(p2 / promise-01, ARG1, a2 / and)
(p2 / promise-01, ARG2, f3 / fight-01)
(s / save-02, ARG1, l / love-01)

Decoded in 61,459 microseconds
Sentence: the syrians ensured the continuation of maronite rule by arranging for the installation of elias sarkis a banker of political probity whose rule was to be marked by the further collapse of the country he promised to save

Spans:
Span 30-31:  collapse => collapse-01
Span 4-5:  continuation => continue-01
Span 33-34:  country => country
Span 2-3:  ensured => ensure-01
Span 29-30:  further => further
Span 34-35:  he => he
Span 12-13:  installation => install-01
Span 26-27:  marked => mark-01
Span 19-20:  political => politics
Span 35-36:  promised => promise-01
Span 22-23:  rule => rule-03
Span 7-8:  rule => rule-03
Span 37-38:  save => save-02

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),save,save-02,false), Span(35,36,List(1),promised,promise-01,false), Span(34,35,List(2),he,he,false), Span(33,34,List(3),country,country,false), Span(30,31,List(4),collapse,collapse-01,false), Span(29,30,List(5),further,further,false), Span(26,27,List(6),marked,mark-01,false), Span(22,23,List(7),rule,rule-03,false), Span(19,20,List(8),political,politics,false), Span(12,13,List(9),installation,install-01,false), Span(7,8,List(10),rule,rule-03,false), Span(4,5,List(11),continuation,continue-01,false), Span(2,3,List(12),ensured,ensure-01,false)),Map(2 -> he, 5 -> further, 12 -> ensure-01, 8 -> politics, 7 -> rule-03, 1 -> promise-01, 4 -> collapse-01, 11 -> continue-01, 6 -> mark-01, 0 -> save-02, 9 -> install-01, 3 -> country, 10 -> rule-03),Map(e -> ensure-01, h -> he, p2 -> politics, s -> save-02, m -> mark-01, p -> promise-01, r2 -> rule-03, c3 -> continue-01, r -> rule-03, i -> install-01, c -> country, f -> further, c2 -> collapse-01))),[Ljava.lang.String;@30ec6243,Annotation([Ljava.lang.String;@6f2735cc,[Ljava.lang.String;@773d1d16,[Ljava.lang.String;@4d40cc82),Annotation([Ljava.lang.String;@5932926d,[Ljava.lang.String;@72b5fdb,[Ledu.cmu.lti.nlp.amr.Dependency;@30a2268a),Annotation([Ljava.lang.String;@659046f7,[Ljava.lang.String;@63233638,[Ljava.lang.String;@1cbcc961),Annotation([Ljava.lang.String;@2e490e04,[Ljava.lang.String;@3e374059,[Ledu.cmu.lti.nlp.amr.Entity;@1d61b2f8))
AMR:
(c2 / collapse-01, degree, f / further)
(c3 / continue-01, ARG1, r2 / rule-03)
(e / ensure-01, ARG1, c3 / continue-01)
(m / mark-01, ARG1, r / rule-03)
(p / promise-01, ARG1, c2 / collapse-01)
(p / promise-01, ARG2, s / save-02)
(r / rule-03, ARG1, p2 / politics)
(r / rule-03, frequency, c2 / collapse-01)
(r2 / rule-03, ARG0, c / country)
(r2 / rule-03, ARG2, i / install-01)
(s / save-02, ARG0, h / he)
(s / save-02, ARG1, c / country)

Decoded in 141,901 microseconds
Sentence: he also promised a new deal on environmental protection which was largely ignored under the national partys big development policies

Spans:
Span 1-2:  also => also
Span 17-18:  big => big
Span 5-6:  deal => deal-01
Span 18-19:  development => develop-02
Span 7-8:  environmental => environment
Span 0-1:  he => he
Span 12-13:  ignored => ignore-01
Span 11-12:  largely => large
Span 15-16:  national => nation
Span 4-5:  new => new
Span 19-20:  policies => policy
Span 2-3:  promised => promise-01
Span 8-9:  protection => protect-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),policies,policy,false), Span(18,19,List(1),development,develop-02,false), Span(17,18,List(2),big,big,false), Span(15,16,List(3),national,nation,false), Span(12,13,List(4),ignored,ignore-01,false), Span(11,12,List(5),largely,large,false), Span(8,9,List(6),protection,protect-01,false), Span(7,8,List(7),environmental,environment,false), Span(5,6,List(8),deal,deal-01,false), Span(4,5,List(9),new,new,false), Span(2,3,List(10),promised,promise-01,false), Span(1,2,List(11),also,also,false), Span(0,1,List(12),he,he,false)),Map(2 -> big, 5 -> large, 12 -> he, 8 -> deal-01, 7 -> environment, 1 -> develop-02, 4 -> ignore-01, 11 -> also, 6 -> protect-01, 0 -> policy, 9 -> new, 3 -> nation, 10 -> promise-01),Map(e -> environment, n -> nation, h -> he, b -> big, p2 -> protect-01, d -> develop-02, p -> policy, a -> also, d2 -> deal-01, i -> ignore-01, l -> large, p3 -> promise-01, n2 -> new))),[Ljava.lang.String;@792cc6d9,Annotation([Ljava.lang.String;@6ab30eb5,[Ljava.lang.String;@118ac3cd,[Ljava.lang.String;@2d3cd0ba),Annotation([Ljava.lang.String;@73ab7a89,[Ljava.lang.String;@7ef9f3b2,[Ledu.cmu.lti.nlp.amr.Dependency;@4bee6c3e),Annotation([Ljava.lang.String;@12048164,[Ljava.lang.String;@65cad579,[Ljava.lang.String;@67852f24),Annotation([Ljava.lang.String;@58da1994,[Ljava.lang.String;@56c5711e,[Ledu.cmu.lti.nlp.amr.Entity;@3c859513))
AMR:
(d2 / deal-01, mod, n2 / new)
(i / ignore-01, ARG0, p2 / protect-01)
(i / ignore-01, degree, l / large)
(i / ignore-01, duration, n / nation)
(p / policy, mod, b / big)
(p / policy, topic, d / develop-02)
(p2 / protect-01, ARG0, p / policy)
(p2 / protect-01, ARG1, e / environment)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, d2 / deal-01)
(p3 / promise-01, manner, p2 / protect-01)
(p3 / promise-01, mod, a / also)

Decoded in 137,277 microseconds
Sentence: if that doesnt attract you or youre not interested in the solitary life of home exercise you could instead try step reebok the latest buzzword in exercisetomusic which we used to call aerobics didnt we  this lowimpact high energy workout promises the aerobic equivalent of a seven mph run with the impact to the legs equivalent only of a three mph walk

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = if that doesnt attract you or youre not interested in the solitary life of home exercise you could instead try step reebok the latest buzzword in exercisetomusic which we used to call aerobics didnt we  this lowimpact high energy workout promises the aerobic equivalent of a seven mph run with the impact to the legs equivalent only of a three mph walk
myTokenized = if that doesnt attract you or youre not interested in the solitary life of home exercise you could instead try step reebok the latest buzzword in exercisetomusic which we used to call aerobics didnt we this lowimpact high energy workout promises the aerobic equivalent of a seven mph run with the impact to the legs equivalent only of a three mph walk
i = 35
prefix = List(if, that, doesnt, attract, you, or, youre, not, interested, in, the, solitary, life, of, home, exercise, you, could, instead, try, step, reebok, the, latest, buzzword, in, exercisetomusic, which, we, used, to, call, aerobics, didnt, we, this)
regexr = \Qi\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qd\E ?\Qo\E ?\Qe\E ?\Qs\E ?\Qn\E ?\Qt\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qc\E ?\Qt\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qo\E ?\Qr\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qe\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qe\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qo\E ?\Ql\E ?\Qi\E ?\Qt\E ?\Qa\E ?\Qr\E ?\Qy\E ?\Ql\E ?\Qi\E ?\Qf\E ?\Qe\E ?\Qo\E ?\Qf\E ?\Qh\E ?\Qo\E ?\Qm\E ?\Qe\E ?\Qe\E ?\Qx\E ?\Qe\E ?\Qr\E ?\Qc\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qc\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qs\E ?\Qt\E ?\Qe\E ?\Qa\E ?\Qd\E ?\Qt\E ?\Qr\E ?\Qy\E ?\Qs\E ?\Qt\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qe\E ?\Qe\E ?\Qb\E ?\Qo\E ?\Qk\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qb\E ?\Qu\E ?\Qz\E ?\Qz\E ?\Qw\E ?\Qo\E ?\Qr\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qe\E ?\Qx\E ?\Qe\E ?\Qr\E ?\Qc\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qm\E ?\Qu\E ?\Qs\E ?\Qi\E ?\Qc\E ?\Qw\E ?\Qh\E ?\Qi\E ?\Qc\E ?\Qh\E ?\Qw\E ?\Qe\E ?\Qu\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qc\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qa\E ?\Qe\E ?\Qr\E ?\Qo\E ?\Qb\E ?\Qi\E ?\Qc\E ?\Qs\E ?\Qd\E ?\Qi\E ?\Qd\E ?\Qn\E ?\Qt\E ?\Qw\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: like other companies thames promises a progressive dividend policy

Spans:
Span 2-3:  companies => company
Span 1-2:  other => other
Span 8-9:  policy => policy
Span 6-7:  progressive => progressive
Span 4-5:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),policy,policy,false), Span(6,7,List(1),progressive,progressive,false), Span(4,5,List(2),promises,promise-01,false), Span(2,3,List(3),companies,company,false), Span(1,2,List(4),other,other,false)),Map(2 -> promise-01, 1 -> progressive, 4 -> other, 0 -> policy, 3 -> company),Map(p2 -> progressive, p -> policy, c -> company, o -> other, p3 -> promise-01))),[Ljava.lang.String;@135fa2b9,Annotation([Ljava.lang.String;@6bb4299e,[Ljava.lang.String;@1187b50,[Ljava.lang.String;@6e47c1bf),Annotation([Ljava.lang.String;@29011b29,[Ljava.lang.String;@79e35c7,[Ledu.cmu.lti.nlp.amr.Dependency;@23dc9fb9),Annotation([Ljava.lang.String;@697a3d13,[Ljava.lang.String;@583fe07e,[Ljava.lang.String;@49ab9d75),Annotation([Ljava.lang.String;@21ee921c,[Ljava.lang.String;@35ba7dab,[Ledu.cmu.lti.nlp.amr.Entity;@6690811b))
AMR:
(c / company, mod, o / other)
(p / policy, mod, o / other)
(p / policy, mod, p2 / progressive)
(p3 / promise-01, ARG1, p / policy)

Decoded in 13,662 microseconds
Sentence: she would hold them up against the children not actually promising them anything because she felt that these pieces of silk were too special

Spans:
Span 9-10:  actually => actual
Span 12-13:  anything => anything
Span 13-14:  because => cause-01
Span 7-8:  children => child
Span 15-16:  felt => feel-01
Span 18-19:  pieces => piece
Span 10-11:  promising => promise-01
Span 14-15:  she => she
Span 0-1:  she => she
Span 23-24:  special => special
Span 22-23:  too => too

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),special,special,false), Span(22,23,List(1),too,too,false), Span(18,19,List(2),pieces,piece,false), Span(15,16,List(3),felt,feel-01,false), Span(14,15,List(4),she,she,false), Span(13,14,List(5),because,cause-01,false), Span(12,13,List(6),anything,anything,false), Span(10,11,List(7),promising,promise-01,false), Span(9,10,List(8),actually,actual,false), Span(7,8,List(9),children,child,false), Span(0,1,List(10),she,she,false)),Map(2 -> piece, 5 -> cause-01, 8 -> actual, 7 -> promise-01, 1 -> too, 4 -> she, 6 -> anything, 9 -> child, 0 -> special, 10 -> she, 3 -> feel-01),Map(s2 -> she, t -> too, p2 -> promise-01, s -> special, p -> piece, a -> anything, a2 -> actual, s3 -> she, c -> cause-01, f -> feel-01, c2 -> child))),[Ljava.lang.String;@190c4838,Annotation([Ljava.lang.String;@75596160,[Ljava.lang.String;@3f0821d0,[Ljava.lang.String;@2ee3ff04),Annotation([Ljava.lang.String;@7a7b77a8,[Ljava.lang.String;@3fecf56a,[Ledu.cmu.lti.nlp.amr.Dependency;@5de422ef),Annotation([Ljava.lang.String;@2cb1a911,[Ljava.lang.String;@43d2b203,[Ljava.lang.String;@3da505be),Annotation([Ljava.lang.String;@1d1c1c90,[Ljava.lang.String;@209740de,[Ledu.cmu.lti.nlp.amr.Entity;@2a23bf89))
AMR:
(c / cause-01, ARG0, f / feel-01)
(c / cause-01, ARG1, p2 / promise-01)
(f / feel-01, ARG0, s2 / she)
(f / feel-01, ARG1, s / special)
(p2 / promise-01, ARG0, c2 / child)
(p2 / promise-01, ARG1, a / anything)
(p2 / promise-01, mod, a2 / actual)
(s / special, degree, t / too)
(s / special, domain, p / piece)
(s3 / she, op, c / cause-01)

Decoded in 235,180 microseconds
Sentence: but here we are two years on reflecting on a summer of government disasters while we wait for what promises to be the bloodiest of mrs thatchers many cabinet reshuffles

Spans:
Span 23-24:  bloodiest => (bloody :degree most)
Span 0-1:  but => contrast-01
Span 28-29:  cabinet => cabinet
Span 13-14:  disasters => disaster
Span 1-2:  here => here
Span 27-28:  many => many
Span 19-20:  promises => promise-01
Span 7-8:  reflecting => reflect-01
Span 10-11:  summer => summer
Span 4-5:  two => 2
Span 16-17:  wait => wait-01
Span 15-16:  we => we
Span 2-3:  we => we
Span 5-6:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),cabinet,cabinet,false), Span(27,28,List(1),many,many,false), Span(23,24,List(3, 2),bloodiest,(bloody :degree most),false), Span(19,20,List(4),promises,promise-01,false), Span(16,17,List(5),wait,wait-01,false), Span(15,16,List(6),we,we,false), Span(13,14,List(7),disasters,disaster,false), Span(10,11,List(8),summer,summer,false), Span(7,8,List(9),reflecting,reflect-01,false), Span(5,6,List(11, 10),years,(temporal-quantity :unit year),false), Span(4,5,List(12),two,2,false), Span(2,3,List(13),we,we,false), Span(1,2,List(14),here,here,false), Span(0,1,List(15),but,contrast-01,false)),Map(2 -> bloody, 5 -> wait-01, 12 -> 2, 15 -> contrast-01, 8 -> summer, 7 -> disaster, 1 -> many, 4 -> promise-01, 11 -> year, 14 -> here, 6 -> we, 0 -> cabinet, 9 -> reflect-01, 3 -> most, 10 -> temporal-quantity, 13 -> we),Map(w -> wait-01, h -> here, 2 -> 2, b -> bloody, t -> temporal-quantity, m2 -> most, w3 -> we, s -> summer, m -> many, d -> disaster, p -> promise-01, y -> year, w2 -> we, r -> reflect-01, c -> cabinet, c2 -> contrast-01))),[Ljava.lang.String;@27c3aecb,Annotation([Ljava.lang.String;@2008a5d2,[Ljava.lang.String;@17be8e6c,[Ljava.lang.String;@5f7860a1),Annotation([Ljava.lang.String;@58101afe,[Ljava.lang.String;@95c46dd,[Ledu.cmu.lti.nlp.amr.Dependency;@9305bf8),Annotation([Ljava.lang.String;@45e5fb7e,[Ljava.lang.String;@7de2310b,[Ljava.lang.String;@d0209be),Annotation([Ljava.lang.String;@cd9f9e,[Ljava.lang.String;@3baa3e7b,[Ledu.cmu.lti.nlp.amr.Entity;@25ec1bd7))
AMR:
(b / bloody, degree, m2 / most)
(c2 / contrast-01, ARG2, t / temporal-quantity)
(p / promise-01, ARG0, m / many)
(p / promise-01, ARG1, b / bloody)
(r / reflect-01, ARG0, w3 / we)
(r / reflect-01, ARG1, c / cabinet)
(r / reflect-01, time, s / summer)
(r / reflect-01, time, w / wait-01)
(t / temporal-quantity, location, h / here)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(w / wait-01, ARG0, d / disaster)
(w / wait-01, ARG1, w2 / we)
(w / wait-01, ARG2, p / promise-01)
(y / year, purpose, r / reflect-01)

Decoded in 393,547 microseconds
Sentence: specialised materials which tootal promised would be an engine of growth has yet to prove its worth though continued heavy investment could be blamed for a 40 per cent fall in profits

Spans:
Span 26-27:  40 => 40
Span 23-24:  blamed => blame-01
Span 28-29:  cent => (monetary-quantity :unit cent)
Span 18-19:  continued => continue-01
Span 21-22:  could => possible
Span 8-9:  engine => engine
Span 10-11:  growth => grow-01
Span 19-20:  heavy => heavy
Span 20-21:  investment => invest-01
Span 1-2:  materials => material
Span 31-32:  profits => profit-01
Span 4-5:  promised => promise-01
Span 14-15:  prove => prove-01
Span 16-17:  worth => worth
Span 12-13:  yet => yet

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),profits,profit-01,false), Span(28,29,List(2, 1),cent,(monetary-quantity :unit cent),false), Span(26,27,List(3),40,40,false), Span(23,24,List(4),blamed,blame-01,false), Span(21,22,List(5),could,possible,false), Span(20,21,List(6),investment,invest-01,false), Span(19,20,List(7),heavy,heavy,false), Span(18,19,List(8),continued,continue-01,false), Span(16,17,List(9),worth,worth,false), Span(14,15,List(10),prove,prove-01,false), Span(12,13,List(11),yet,yet,false), Span(10,11,List(12),growth,grow-01,false), Span(8,9,List(13),engine,engine,false), Span(4,5,List(14),promised,promise-01,false), Span(1,2,List(15),materials,material,false)),Map(2 -> cent, 5 -> possible, 12 -> grow-01, 15 -> material, 8 -> continue-01, 7 -> heavy, 1 -> monetary-quantity, 4 -> blame-01, 11 -> yet, 14 -> promise-01, 6 -> invest-01, 0 -> profit-01, 9 -> worth, 3 -> 40, 10 -> prove-01, 13 -> engine),Map(e -> engine, w -> worth, h -> heavy, b -> blame-01, m2 -> material, p2 -> possible, m -> monetary-quantity, p -> profit-01, y -> yet, g -> grow-01, 4 -> 40, p4 -> promise-01, i -> invest-01, c -> cent, p3 -> prove-01, c2 -> continue-01))),[Ljava.lang.String;@3017d3b4,Annotation([Ljava.lang.String;@6c4be716,[Ljava.lang.String;@6b308ce5,[Ljava.lang.String;@4072455d),Annotation([Ljava.lang.String;@e27fdb9,[Ljava.lang.String;@638283f1,[Ledu.cmu.lti.nlp.amr.Dependency;@da47641),Annotation([Ljava.lang.String;@284fac66,[Ljava.lang.String;@6bf7137,[Ljava.lang.String;@2a1d557),Annotation([Ljava.lang.String;@4ebd441a,[Ljava.lang.String;@6bc22f58,[Ledu.cmu.lti.nlp.amr.Entity;@19b271ad))
AMR:
(b / blame-01, ARG1, i / invest-01)
(b / blame-01, ARG2, p / profit-01)
(c2 / continue-01, ARG1, g / grow-01)
(e / engine, topic, g / grow-01)
(g / grow-01, ARG1, p / profit-01)
(i / invest-01, ARG0, h / heavy)
(i / invest-01, ARG1, m / monetary-quantity)
(m / monetary-quantity, unit, c / cent)
(p2 / possible, domain, b / blame-01)
(p3 / prove-01, ARG0, m2 / material)
(p3 / prove-01, ARG1, w / worth)
(p3 / prove-01, condition, b / blame-01)
(p3 / prove-01, time, y / yet)
(p4 / promise-01, ARG0, 4 / 40)
(p4 / promise-01, ARG1, m2 / material)

Decoded in 247,508 microseconds
Sentence:   he confirmed that a party control commission would investigate allegations of corruption and abuse of office against deposed members of the old guard and promised free elections which would send our best people into parliament but remained vague as to precisely how free the elections would be

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   he confirmed that a party control commission would investigate allegations of corruption and abuse of office against deposed members of the old guard and promised free elections which would send our best people into parliament but remained vague as to precisely how free the elections would be
myTokenized = he confirmed that a party control commission would investigate allegations of corruption and abuse of office against deposed members of the old guard and promised free elections which would send our best people into parliament but remained vague as to precisely how free the elections would be
i = 0
prefix = List(he)
regexr = \Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he should be offered the choice of political asylum in the vatican on condition that he promises forthwith to enter a monastic order as a novice monk spending the rest of his life in abstinence and penitence or he should be allowed to walk out of the papal nuncios residence in panama whenever he wishes

NER Entity: (country :name (name :op "vatican"))
NER Entity: (country :name (name :op "panama"))
Spans:
Span 34-35:  abstinence => abstain-01
Span 41-42:  allowed => allow-01
Span 35-36:  and => and
Span 8-9:  asylum => asylum
Span 13-14:  condition => condition
Span 19-20:  enter => enter-01
Span 53-54:  he => he
Span 38-39:  he => he
Span 15-16:  he => he
Span 0-1:  he => he
Span 32-33:  life => life
Span 25-26:  novice => novice
Span 3-4:  offered => offer-01
Span 37-38:  or => or
Span 7-8:  political => politics
Span 16-17:  promises => promise-01
Span 49-50:  residence => reside-01
Span 29-30:  rest => rest
Span 39-40:  should => recommend-01
Span 1-2:  should => recommend-01
Span 27-28:  spending => spend-01
Span 43-44:  walk => walk-01
Span 52-53:  whenever => whenever
Span 54-55:  wishes => wish-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),wishes,wish-01,false), Span(53,54,List(1),he,he,false), Span(52,53,List(2),whenever,whenever,false), Span(49,50,List(3),residence,reside-01,false), Span(43,44,List(4),walk,walk-01,false), Span(41,42,List(5),allowed,allow-01,false), Span(39,40,List(6),should,recommend-01,false), Span(38,39,List(7),he,he,false), Span(37,38,List(8),or,or,false), Span(35,36,List(9),and,and,false), Span(34,35,List(10),abstinence,abstain-01,false), Span(32,33,List(11),life,life,false), Span(29,30,List(12),rest,rest,false), Span(27,28,List(13),spending,spend-01,false), Span(25,26,List(14),novice,novice,false), Span(19,20,List(15),enter,enter-01,false), Span(16,17,List(16),promises,promise-01,false), Span(15,16,List(17),he,he,false), Span(13,14,List(18),condition,condition,false), Span(8,9,List(19),asylum,asylum,false), Span(7,8,List(20),political,politics,false), Span(3,4,List(21),offered,offer-01,false), Span(1,2,List(22),should,recommend-01,false), Span(0,1,List(23),he,he,false)),Map(2 -> whenever, 5 -> allow-01, 12 -> rest, 15 -> enter-01, 8 -> or, 21 -> offer-01, 18 -> condition, 7 -> he, 17 -> he, 1 -> he, 23 -> he, 4 -> walk-01, 11 -> life, 14 -> novice, 20 -> politics, 6 -> recommend-01, 22 -> recommend-01, 0 -> wish-01, 9 -> and, 16 -> promise-01, 19 -> asylum, 3 -> reside-01, 10 -> abstain-01, 13 -> spend-01),Map(e -> enter-01, n -> novice, w -> wish-01, h -> he, r3 -> rest, h2 -> he, p2 -> politics, a3 -> abstain-01, s -> spend-01, w3 -> walk-01, h4 -> he, p -> promise-01, r2 -> recommend-01, a -> allow-01, o2 -> offer-01, w2 -> whenever, r4 -> recommend-01, r -> reside-01, a2 -> and, c -> condition, h3 -> he, l -> life, o -> or, a4 -> asylum))),[Ljava.lang.String;@31b4f6aa,Annotation([Ljava.lang.String;@5fae2c64,[Ljava.lang.String;@23e48a4f,[Ljava.lang.String;@71345af1),Annotation([Ljava.lang.String;@243ebe47,[Ljava.lang.String;@133e39e8,[Ledu.cmu.lti.nlp.amr.Dependency;@5a4bb836),Annotation([Ljava.lang.String;@212b0f8a,[Ljava.lang.String;@12093e09,[Ljava.lang.String;@1cc7ca1f),Annotation([Ljava.lang.String;@a6c7fc,[Ljava.lang.String;@459371b9,[Ledu.cmu.lti.nlp.amr.Entity;@530f4c5e))
AMR:
(a / allow-01, ARG1, w3 / walk-01)
(a2 / and, op, r2 / recommend-01)
(a4 / asylum, mod, p2 / politics)
(l / life, part, r3 / rest)
(o / or, op, a3 / abstain-01)
(o / or, op, r2 / recommend-01)
(o2 / offer-01, ARG0, h3 / he)
(o2 / offer-01, ARG1, h4 / he)
(p / promise-01, ARG0, h3 / he)
(p / promise-01, ARG1, a4 / asylum)
(p / promise-01, ARG2, e / enter-01)
(r2 / recommend-01, ARG0, h3 / he)
(r2 / recommend-01, ARG1, a / allow-01)
(r4 / recommend-01, ARG1, o2 / offer-01)
(r4 / recommend-01, location, c / condition)
(s / spend-01, ARG1, n / novice)
(s / spend-01, ARG2, a2 / and)
(s / spend-01, ARG3, r3 / rest)
(w / wish-01, ARG0, h / he)
(w3 / walk-01, ARG0, h2 / he)
(w3 / walk-01, ARG1, h / he)
(w3 / walk-01, ARG2, r / reside-01)
(w3 / walk-01, frequency, w2 / whenever)

Decoded in 989,289 microseconds
Sentence: he lounged over on the studio lot to deliver the not very perspicacious remark that he was glad to have heard khrushchev promise the russians would surpass the americans because competition was a capitalist idea

NER Entity: (thing :name (name :op "russians"))
NER Entity: (thing :name (name :op "americans"))
NER Entity: (thing :name (name :op "americans"))
Spans:
Span 28-29:  americans => (person :mod (country :name (name :op "America")))
Span 29-30:  because => cause-01
Span 33-34:  capitalist => capitalist
Span 30-31:  competition => compete-01
Span 8-9:  deliver => deliver-01
Span 17-18:  glad => glad
Span 15-16:  he => he
Span 0-1:  he => he
Span 20-21:  heard => hear-01
Span 34-35:  idea => idea
Span 6-7:  lot => lot
Span 22-23:  promise => promise-01
Span 13-14:  remark => remark-01
Span 26-27:  surpass => surpass-01
Span 11-12:  very => very

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),idea,idea,false), Span(33,34,List(1),capitalist,capitalist,false), Span(30,31,List(2),competition,compete-01,false), Span(29,30,List(3),because,cause-01,false), Span(28,29,List(7, 6, 5, 4),americans,(person :mod (country :name (name :op "America"))),false), Span(26,27,List(8),surpass,surpass-01,false), Span(22,23,List(9),promise,promise-01,false), Span(20,21,List(10),heard,hear-01,false), Span(17,18,List(11),glad,glad,false), Span(15,16,List(12),he,he,false), Span(13,14,List(13),remark,remark-01,false), Span(11,12,List(14),very,very,false), Span(8,9,List(15),deliver,deliver-01,false), Span(6,7,List(16),lot,lot,false), Span(0,1,List(17),he,he,false)),Map(2 -> compete-01, 5 -> country, 12 -> he, 15 -> deliver-01, 8 -> surpass-01, 7 -> "America", 17 -> he, 1 -> capitalist, 4 -> person, 11 -> glad, 14 -> very, 6 -> name, 0 -> idea, 9 -> promise-01, 16 -> lot, 3 -> cause-01, 10 -> hear-01, 13 -> remark-01),Map(n -> name, h -> hear-01, h2 -> he, p2 -> promise-01, c4 -> country, s -> surpass-01, v -> very, d -> deliver-01, p -> person, g -> glad, c3 -> cause-01, i -> idea, r -> remark-01, h3 -> he, c -> capitalist, l -> lot, c2 -> compete-01))),[Ljava.lang.String;@6a351ddc,Annotation([Ljava.lang.String;@453b8cfd,[Ljava.lang.String;@48a5598d,[Ljava.lang.String;@5f9a5d3d),Annotation([Ljava.lang.String;@f5f80d4,[Ljava.lang.String;@4702e62e,[Ledu.cmu.lti.nlp.amr.Dependency;@f55fa6e),Annotation([Ljava.lang.String;@55ac539f,[Ljava.lang.String;@24a617aa,[Ljava.lang.String;@145bacb2),Annotation([Ljava.lang.String;@ea6e48f,[Ljava.lang.String;@6ee76fcc,[Ledu.cmu.lti.nlp.amr.Entity;@1c5cf2f6))
AMR:
(c2 / compete-01, ARG1, v / very)
(c3 / cause-01, ARG1, s / surpass-01)
(c3 / cause-01, time, c2 / compete-01)
(c4 / country, name, n / name)
(d / deliver-01, ARG0, h3 / he)
(d / deliver-01, ARG1, g / glad)
(g / glad, domain, h2 / he)
(h / hear-01, ARG0, h2 / he)
(h / hear-01, ARG1, p2 / promise-01)
(i / idea, domain, c2 / compete-01)
(i / idea, mod, c / capitalist)
(l / lot, purpose, d / deliver-01)
(n / name, op, "America")
(p / person, mod, c4 / country)
(p2 / promise-01, ARG1, s / surpass-01)
(r / remark-01, ARG1, h3 / he)
(s / surpass-01, ARG1, p / person)

Decoded in 656,413 microseconds
Sentence: british gas yesterday claimed the issues are very complex but promised to agree changes by september

Spans:
Span 12-13:  agree => agree-01
Span 9-10:  but => contrast-01
Span 13-14:  changes => change-01
Span 3-4:  claimed => claim-01
Span 8-9:  complex => complex
Span 1-2:  gas => gas
Span 5-6:  issues => issue
Span 10-11:  promised => promise-01
Span 15-16:  september => (date-entity :month 9)
Span 7-8:  very => very
Span 2-3:  yesterday => yesterday

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),september,(date-entity :month 9),false), Span(13,14,List(2),changes,change-01,false), Span(12,13,List(3),agree,agree-01,false), Span(10,11,List(4),promised,promise-01,false), Span(9,10,List(5),but,contrast-01,false), Span(8,9,List(6),complex,complex,false), Span(7,8,List(7),very,very,false), Span(5,6,List(8),issues,issue,false), Span(3,4,List(9),claimed,claim-01,false), Span(2,3,List(10),yesterday,yesterday,false), Span(1,2,List(11),gas,gas,false)),Map(2 -> change-01, 5 -> contrast-01, 8 -> issue, 7 -> very, 1 -> 9, 11 -> gas, 4 -> promise-01, 6 -> complex, 9 -> claim-01, 0 -> date-entity, 10 -> yesterday, 3 -> agree-01),Map(c4 -> claim-01, v -> very, d -> date-entity, g -> gas, y -> yesterday, p -> promise-01, c3 -> complex, a -> agree-01, i -> issue, c -> change-01, 9 -> 9, c2 -> contrast-01))),[Ljava.lang.String;@1a530306,Annotation([Ljava.lang.String;@3feb8c6a,[Ljava.lang.String;@14fa3ef,[Ljava.lang.String;@1393a095),Annotation([Ljava.lang.String;@4113a03d,[Ljava.lang.String;@6f7d262b,[Ledu.cmu.lti.nlp.amr.Dependency;@1550a3c),Annotation([Ljava.lang.String;@7612e9d2,[Ljava.lang.String;@53b5168d,[Ljava.lang.String;@15dbadea),Annotation([Ljava.lang.String;@976e8dc,[Ljava.lang.String;@5db1c85e,[Ledu.cmu.lti.nlp.amr.Entity;@42d9c360))
AMR:
(a / agree-01, ARG1, c / change-01)
(a / agree-01, time, d / date-entity)
(c2 / contrast-01, ARG1, c3 / complex)
(c2 / contrast-01, ARG2, p / promise-01)
(c3 / complex, degree, v / very)
(c4 / claim-01, ARG1, c3 / complex)
(c4 / claim-01, time, y / yesterday)
(d / date-entity, month, 9 / 9)
(p / promise-01, ARG0, i / issue)
(p / promise-01, ARG1, g / gas)
(p / promise-01, ARG2, a / agree-01)

Decoded in 88,925 microseconds
Sentence: however employers have promised to improve their 5

Spans:
Span 7-8:  5 => 5
Span 5-6:  improve => improve-01
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),5,5,false), Span(5,6,List(1),improve,improve-01,false), Span(3,4,List(2),promised,promise-01,false)),Map(2 -> promise-01, 1 -> improve-01, 0 -> 5),Map(5 -> 5, p -> promise-01, i -> improve-01))),[Ljava.lang.String;@66a9f5e9,Annotation([Ljava.lang.String;@204fc8a7,[Ljava.lang.String;@55fe5c83,[Ljava.lang.String;@2e6bc890),Annotation([Ljava.lang.String;@263c7dbf,[Ljava.lang.String;@4d639a35,[Ledu.cmu.lti.nlp.amr.Dependency;@46213544),Annotation([Ljava.lang.String;@2e302754,[Ljava.lang.String;@5b66137c,[Ljava.lang.String;@a8960c5),Annotation([Ljava.lang.String;@41302aea,[Ljava.lang.String;@41518a15,[Ledu.cmu.lti.nlp.amr.Entity;@50408a33))
AMR:
(i / improve-01, ARG1, 5 / 5)
(p / promise-01, ARG2, i / improve-01)

Decoded in 8,315 microseconds
Sentence: referring to the declarations made by margaret thatcher at the last ec summit in spain he added im sure thats why the united kingdom promised in madrid last june to join when inflation starts going down

NER Entity: (person :name (name :op "margaret" :op "thatcher"))
NER Entity: (country :name (name :op "spain"))
NER Entity: (country :name (name :op "united" :op "kingdom"))
Spans:
Span 16-17:  added => add-01
Span 35-36:  down => down
Span 15-16:  he => he
Span 32-33:  inflation => inflation
Span 30-31:  join => join-01
Span 28-29:  june => (date-entity :month 6)
Span 27-28:  last => last
Span 10-11:  last => last
Span 6-8:  margaret thatcher => (person :name (name :op "margaret" :op "thatcher"))
Span 24-25:  promised => promise-01
Span 0-1:  referring => refer-01
Span 33-34:  starts => start-01
Span 12-13:  summit => summit
Span 19-20:  thats => that
Span 22-24:  united kingdom => (country :name (name :op "united" :op "kingdom"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),down,down,false), Span(33,34,List(1),starts,start-01,false), Span(32,33,List(2),inflation,inflation,false), Span(30,31,List(3),join,join-01,false), Span(28,29,List(5, 4),june,(date-entity :month 6),false), Span(27,28,List(6),last,last,false), Span(24,25,List(7),promised,promise-01,false), Span(22,24,List(11, 10, 9, 8),united kingdom,(country :name (name :op "united" :op "kingdom")),false), Span(19,20,List(12),thats,that,false), Span(16,17,List(13),added,add-01,false), Span(15,16,List(14),he,he,false), Span(12,13,List(15),summit,summit,false), Span(10,11,List(16),last,last,false), Span(6,8,List(20, 19, 18, 17),margaret thatcher,(person :name (name :op "margaret" :op "thatcher")),false), Span(0,1,List(21),referring,refer-01,false)),Map(2 -> inflation, 5 -> 6, 12 -> that, 15 -> summit, 8 -> country, 21 -> refer-01, 18 -> name, 7 -> promise-01, 17 -> person, 1 -> start-01, 4 -> date-entity, 11 -> "kingdom", 14 -> he, 20 -> "thatcher", 6 -> last, 0 -> down, 9 -> name, 16 -> last, 19 -> "margaret", 3 -> join-01, 10 -> "united", 13 -> add-01),Map(n -> name, h -> he, s2 -> summit, t -> that, p2 -> person, j -> join-01, s -> start-01, d -> down, p -> promise-01, a -> add-01, d2 -> date-entity, l2 -> last, r -> refer-01, i -> inflation, 6 -> 6, c -> country, l -> last, n2 -> name))),[Ljava.lang.String;@aa7f986,Annotation([Ljava.lang.String;@19eed1e1,[Ljava.lang.String;@e151814,[Ljava.lang.String;@adfd045),Annotation([Ljava.lang.String;@6be26796,[Ljava.lang.String;@5cfee02f,[Ledu.cmu.lti.nlp.amr.Dependency;@61305d5b),Annotation([Ljava.lang.String;@2e413336,[Ljava.lang.String;@3a8935f3,[Ljava.lang.String;@635028b),Annotation([Ljava.lang.String;@239f6dc,[Ljava.lang.String;@2b7de6a8,[Ledu.cmu.lti.nlp.amr.Entity;@56b235e6))
AMR:
(a / add-01, ARG0, h / he)
(a / add-01, ARG1, t / that)
(c / country, name, n / name)
(d2 / date-entity, mod, l / last)
(d2 / date-entity, month, 6 / 6)
(j / join-01, ARG0, p2 / person)
(j / join-01, ARG1, l2 / last)
(n / name, op, "kingdom")
(n / name, op, "united")
(n2 / name, op, "margaret")
(n2 / name, op, "thatcher")
(p / promise-01, ARG0, c / country)
(p / promise-01, ARG1, h / he)
(p / promise-01, ARG2, j / join-01)
(p / promise-01, condition, s / start-01)
(p / promise-01, time, d2 / date-entity)
(p2 / person, name, n2 / name)
(r / refer-01, ARG0, s2 / summit)
(r / refer-01, ARG1, p2 / person)
(s / start-01, ARG0, i / inflation)
(s / start-01, ARG1, d / down)

Decoded in 453,392 microseconds
Sentence: she did not actually promise him she would drop her inquiry her words were too vague for that but she did encourage him to hope she had been warned off

Spans:
Span 3-4:  actually => actual
Span 18-19:  but => contrast-01
Span 8-9:  drop => drop-01
Span 21-22:  encourage => encourage-01
Span 24-25:  hope => hope-01
Span 10-11:  inquiry => inquire-01
Span 29-30:  off => off
Span 4-5:  promise => promise-01
Span 25-26:  she => she
Span 19-20:  she => she
Span 6-7:  she => she
Span 0-1:  she => she
Span 14-15:  too => too
Span 15-16:  vague => vague
Span 28-29:  warned => warn-01
Span 12-13:  words => word

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),off,off,false), Span(28,29,List(1),warned,warn-01,false), Span(25,26,List(2),she,she,false), Span(24,25,List(3),hope,hope-01,false), Span(21,22,List(4),encourage,encourage-01,false), Span(19,20,List(5),she,she,false), Span(18,19,List(6),but,contrast-01,false), Span(15,16,List(7),vague,vague,false), Span(14,15,List(8),too,too,false), Span(12,13,List(9),words,word,false), Span(10,11,List(10),inquiry,inquire-01,false), Span(8,9,List(11),drop,drop-01,false), Span(6,7,List(12),she,she,false), Span(4,5,List(13),promise,promise-01,false), Span(3,4,List(14),actually,actual,false), Span(0,1,List(15),she,she,false)),Map(2 -> she, 5 -> she, 12 -> she, 15 -> she, 8 -> too, 7 -> vague, 1 -> warn-01, 4 -> encourage-01, 11 -> drop-01, 14 -> actual, 6 -> contrast-01, 0 -> off, 9 -> word, 3 -> hope-01, 10 -> inquire-01, 13 -> promise-01),Map(e -> encourage-01, w -> warn-01, h -> hope-01, s2 -> she, t -> too, s -> she, s4 -> she, v -> vague, d -> drop-01, p -> promise-01, a -> actual, w2 -> word, i -> inquire-01, c -> contrast-01, s3 -> she, o -> off))),[Ljava.lang.String;@4df0bb81,Annotation([Ljava.lang.String;@77a63a20,[Ljava.lang.String;@4232483e,[Ljava.lang.String;@73250065),Annotation([Ljava.lang.String;@23d21f2,[Ljava.lang.String;@7b7f9803,[Ledu.cmu.lti.nlp.amr.Dependency;@75d52c4c),Annotation([Ljava.lang.String;@7e4f6e03,[Ljava.lang.String;@10bfc7be,[Ljava.lang.String;@1ed29389),Annotation([Ljava.lang.String;@12d4172e,[Ljava.lang.String;@223dd6aa,[Ledu.cmu.lti.nlp.amr.Entity;@9d84476))
AMR:
(c / contrast-01, ARG1, v / vague)
(c / contrast-01, ARG2, e / encourage-01)
(d / drop-01, ARG0, s3 / she)
(d / drop-01, ARG1, i / inquire-01)
(e / encourage-01, ARG0, s2 / she)
(e / encourage-01, ARG1, i / inquire-01)
(h / hope-01, ARG0, s2 / she)
(h / hope-01, ARG1, w / warn-01)
(p / promise-01, ARG0, s4 / she)
(p / promise-01, ARG1, s3 / she)
(p / promise-01, mod, a / actual)
(v / vague, degree, t / too)
(v / vague, domain, w2 / word)
(w / warn-01, ARG1, s / she)
(w / warn-01, direction, o / off)

Decoded in 276,378 microseconds
Sentence: now 3com which has battled to sell os2 lan manager has promised 3open conection for netware

NER Entity: (organization :name (name :op "3com"))
Spans:
Span 9-10:  manager => manage-01
Span 0-1:  now => now
Span 11-12:  promised => promise-01
Span 6-7:  sell => sell-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promised,promise-01,false), Span(9,10,List(1),manager,manage-01,false), Span(6,7,List(2),sell,sell-01,false), Span(0,1,List(3),now,now,false)),Map(2 -> sell-01, 1 -> manage-01, 0 -> promise-01, 3 -> now),Map(n -> now, s -> sell-01, m -> manage-01, p -> promise-01))),[Ljava.lang.String;@5576a406,Annotation([Ljava.lang.String;@600ab1bf,[Ljava.lang.String;@5e1ba3db,[Ljava.lang.String;@68a2af21),Annotation([Ljava.lang.String;@1097d532,[Ljava.lang.String;@602dce20,[Ledu.cmu.lti.nlp.amr.Dependency;@5f37c834),Annotation([Ljava.lang.String;@4738fec2,[Ljava.lang.String;@6edd9715,[Ljava.lang.String;@15ea1c90),Annotation([Ljava.lang.String;@3cf93d2d,[Ljava.lang.String;@f1f74a1,[Ledu.cmu.lti.nlp.amr.Entity;@5a21fdc8))
AMR:
(p / promise-01, ARG0, m / manage-01)
(p / promise-01, ARG1, n / now)
(s / sell-01, ARG1, m / manage-01)

Decoded in 16,262 microseconds
Sentence:  he said that to her every night she went up behind pet and every night she promised she wouldnt

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  he said that to her every night she went up behind pet and every night she promised she wouldnt
myTokenized = he said that to her every night she went up behind pet and every night she promised she wouldnt
i = 0
prefix = List(he)
regexr = \Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: i promise you

Spans:
Span 0-1:  i => i
Span 1-2:  promise => promise-01
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),you,you,false), Span(1,2,List(1),promise,promise-01,false), Span(0,1,List(2),i,i,false)),Map(2 -> i, 1 -> promise-01, 0 -> you),Map(p -> promise-01, y -> you, i -> i))),[Ljava.lang.String;@3e8a5356,Annotation([Ljava.lang.String;@6b65532d,[Ljava.lang.String;@4937e670,[Ljava.lang.String;@74f9e89d),Annotation([Ljava.lang.String;@4316d76a,[Ljava.lang.String;@1098928f,[Ledu.cmu.lti.nlp.amr.Dependency;@10bdf2cc),Annotation([Ljava.lang.String;@268f37aa,[Ljava.lang.String;@48f8dad,[Ljava.lang.String;@6c9e5b31),Annotation([Ljava.lang.String;@107525ad,[Ljava.lang.String;@7afc894b,[Ledu.cmu.lti.nlp.amr.Entity;@5999da01))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, y / you)

Decoded in 4,995 microseconds
Sentence: with the teams lying first and third respectively in division 1 the game promised much although they had to contend with a strong and difficult wind

Spans:
Span 10-11:  1 => 1
Span 23-24:  and => and
Span 5-6:  and => and
Span 19-20:  contend => contend-01
Span 24-25:  difficult => difficult
Span 9-10:  division => division
Span 12-13:  game => game
Span 3-4:  lying => lie-01
Span 14-15:  much => much
Span 13-14:  promised => promise-01
Span 7-8:  respectively => respective
Span 22-23:  strong => strong
Span 2-3:  teams => team
Span 16-17:  they => they
Span 25-26:  wind => wind

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),wind,wind,false), Span(24,25,List(1),difficult,difficult,false), Span(23,24,List(2),and,and,false), Span(22,23,List(3),strong,strong,false), Span(19,20,List(4),contend,contend-01,false), Span(16,17,List(5),they,they,false), Span(14,15,List(6),much,much,false), Span(13,14,List(7),promised,promise-01,false), Span(12,13,List(8),game,game,false), Span(10,11,List(9),1,1,false), Span(9,10,List(10),division,division,false), Span(7,8,List(11),respectively,respective,false), Span(5,6,List(12),and,and,false), Span(3,4,List(13),lying,lie-01,false), Span(2,3,List(14),teams,team,false)),Map(2 -> and, 5 -> they, 12 -> and, 8 -> game, 7 -> promise-01, 1 -> difficult, 4 -> contend-01, 11 -> respective, 14 -> team, 6 -> much, 0 -> wind, 9 -> 1, 3 -> strong, 10 -> division, 13 -> lie-01),Map(w -> wind, t -> they, s -> strong, d -> difficult, m -> much, 1 -> 1, p -> promise-01, g -> game, a -> and, d2 -> division, t2 -> team, r -> respective, a2 -> and, c -> contend-01, l -> lie-01))),[Ljava.lang.String;@dd9a6ac,Annotation([Ljava.lang.String;@4c4d6d4e,[Ljava.lang.String;@6f434304,[Ljava.lang.String;@28e4f4ad),Annotation([Ljava.lang.String;@4f7b9ed4,[Ljava.lang.String;@3cf89910,[Ledu.cmu.lti.nlp.amr.Dependency;@650908b5),Annotation([Ljava.lang.String;@341ad6e5,[Ljava.lang.String;@4e126f1c,[Ljava.lang.String;@1c3cbf4f),Annotation([Ljava.lang.String;@5833ea04,[Ljava.lang.String;@3848d9d9,[Ledu.cmu.lti.nlp.amr.Entity;@36d6526d))
AMR:
(a / and, op, a2 / and)
(a / and, op, d / difficult)
(a / and, op, s / strong)
(a2 / and, op, l / lie-01)
(c / contend-01, ARG0, t / they)
(c / contend-01, ARG1, a / and)
(c / contend-01, ARG2, 1 / 1)
(l / lie-01, ARG1, t2 / team)
(l / lie-01, ARG2, d2 / division)
(l / lie-01, mod, r / respective)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, g / game)
(p / promise-01, concession, m / much)
(w / wind, mod, d / difficult)

Decoded in 589,608 microseconds
Sentence: a 12line three sentence denial of the charges made by the tabloid new york post failed to satisfy mr rathers critics who had been promised a pointbypoint rebuttal of the accusations

NER Entity: (country :name (name :op "york"))
Spans:
Span 30-31:  accusations => accuse-01
Span 20-21:  critics => critic
Span 15-16:  failed => fail-01
Span 12-13:  new => new
Span 14-15:  post => post
Span 24-25:  promised => promise-01
Span 27-28:  rebuttal => rebuttal
Span 17-18:  satisfy => satisfy-01
Span 3-4:  sentence => sentence-01
Span 11-12:  tabloid => tabloid
Span 2-3:  three => 3

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),accusations,accuse-01,false), Span(27,28,List(1),rebuttal,rebuttal,false), Span(24,25,List(2),promised,promise-01,false), Span(20,21,List(3),critics,critic,false), Span(17,18,List(4),satisfy,satisfy-01,false), Span(15,16,List(5),failed,fail-01,false), Span(14,15,List(6),post,post,false), Span(12,13,List(7),new,new,false), Span(11,12,List(8),tabloid,tabloid,false), Span(3,4,List(9),sentence,sentence-01,false), Span(2,3,List(10),three,3,false)),Map(2 -> promise-01, 5 -> fail-01, 8 -> tabloid, 7 -> new, 1 -> rebuttal, 4 -> satisfy-01, 6 -> post, 9 -> sentence-01, 0 -> accuse-01, 10 -> 3, 3 -> critic),Map(n -> new, s2 -> sentence-01, t -> tabloid, p2 -> post, s -> satisfy-01, p -> promise-01, a -> accuse-01, r -> rebuttal, c -> critic, f -> fail-01, 3 -> 3))),[Ljava.lang.String;@30bd8e3b,Annotation([Ljava.lang.String;@6cc4dc7c,[Ljava.lang.String;@706788ad,[Ljava.lang.String;@1d3e4f82),Annotation([Ljava.lang.String;@65d5eecd,[Ljava.lang.String;@403108f6,[Ledu.cmu.lti.nlp.amr.Dependency;@53436f66),Annotation([Ljava.lang.String;@7046bc3e,[Ljava.lang.String;@33f0c408,[Ljava.lang.String;@3d603dc),Annotation([Ljava.lang.String;@5797627b,[Ljava.lang.String;@13c2a62a,[Ledu.cmu.lti.nlp.amr.Entity;@502b1988))
AMR:
(f / fail-01, ARG1, p2 / post)
(f / fail-01, ARG2, s / satisfy-01)
(p / promise-01, ARG0, c / critic)
(p / promise-01, ARG1, r / rebuttal)
(p2 / post, mod, n / new)
(p2 / post, mod, t / tabloid)
(r / rebuttal, topic, a / accuse-01)
(s / satisfy-01, ARG1, c / critic)
(s2 / sentence-01, ARG1, p / promise-01)
(s2 / sentence-01, quant, 3 / 3)

Decoded in 74,669 microseconds
Sentence: even though this meant weaselingout of previous pledges to put a representative elected government into hong kong before 1997 and even though peking itself had promised a hong kong run by hong kong people

NER Entity: (country :name (name :op "hong" :op "kong"))
NER Entity: (country :name (name :op "hong" :op "kong"))
NER Entity: (country :name (name :op "hong" :op "kong"))
Spans:
Span 18-19:  1997 => (date-entity :year 1997)
Span 19-20:  and => and
Span 17-18:  before => before
Span 12-13:  elected => elect-01
Span 31-33:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 27-29:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 15-17:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 3-4:  meant => mean-01
Span 7-8:  pledges => pledge-01
Span 6-7:  previous => previous
Span 25-26:  promised => promise-01
Span 11-12:  representative => represent-01
Span 2-3:  this => this

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,33,List(3, 2, 1, 0),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(27,29,List(7, 6, 5, 4),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(25,26,List(8),promised,promise-01,false), Span(19,20,List(9),and,and,false), Span(18,19,List(11, 10),1997,(date-entity :year 1997),false), Span(17,18,List(12),before,before,false), Span(15,17,List(16, 15, 14, 13),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(12,13,List(17),elected,elect-01,false), Span(11,12,List(18),representative,represent-01,false), Span(7,8,List(19),pledges,pledge-01,false), Span(6,7,List(20),previous,previous,false), Span(3,4,List(21),meant,mean-01,false), Span(2,3,List(22),this,this,false)),Map(2 -> "hong", 5 -> name, 12 -> before, 15 -> "hong", 8 -> promise-01, 21 -> mean-01, 18 -> represent-01, 7 -> "kong", 17 -> elect-01, 1 -> name, 4 -> country, 11 -> 1997, 14 -> name, 20 -> previous, 6 -> "hong", 22 -> this, 0 -> country, 9 -> and, 16 -> "kong", 19 -> pledge-01, 3 -> "kong", 10 -> date-entity, 13 -> country),Map(e -> elect-01, n -> name, t -> this, b -> before, p2 -> pledge-01, m -> mean-01, d -> date-entity, 1 -> 1997, p -> promise-01, a -> and, c3 -> country, n3 -> name, r -> represent-01, c -> country, p3 -> previous, c2 -> country, n2 -> name))),[Ljava.lang.String;@3d9958d6,Annotation([Ljava.lang.String;@1e976932,[Ljava.lang.String;@667b614e,[Ljava.lang.String;@2e317c72),Annotation([Ljava.lang.String;@32e1380f,[Ljava.lang.String;@60277ae1,[Ledu.cmu.lti.nlp.amr.Dependency;@3ff47b18),Annotation([Ljava.lang.String;@4bbd8575,[Ljava.lang.String;@784eb2c,[Ljava.lang.String;@276b998f),Annotation([Ljava.lang.String;@92e8f81,[Ljava.lang.String;@4fcf62dc,[Ledu.cmu.lti.nlp.amr.Entity;@38638273))
AMR:
(a / and, op, m / mean-01)
(a / and, op, p / promise-01)
(b / before, op, d / date-entity)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c3 / country, time, b / before)
(d / date-entity, year, 1 / 1997)
(e / elect-01, ARG2, p / promise-01)
(m / mean-01, ARG0, t / this)
(m / mean-01, ARG1, p2 / pledge-01)
(n / name, op, "hong")
(n / name, op, "kong")
(n2 / name, op, "hong")
(n2 / name, op, "kong")
(n3 / name, op, "hong")
(n3 / name, op, "kong")
(p / promise-01, ARG0, c / country)
(p / promise-01, ARG2, c2 / country)
(p2 / pledge-01, time, p3 / previous)
(r / represent-01, ARG0, a / and)
(r / represent-01, ARG1, c3 / country)

Decoded in 228,052 microseconds
Sentence: now that east germany has promised its citizens unrestricted passage and free elections chancellor kohl can only fulfill his promise of substantial aid for the east german economy

NER Entity: (country :name (name :op "germany"))
NER Entity: (thing :name (name :op "german"))
Spans:
Span 22-23:  aid => aid-01
Span 10-11:  and => and
Span 15-16:  can => possible
Span 7-8:  citizens => citizen
Span 25-26:  east => east
Span 2-3:  east => east
Span 27-28:  economy => economy
Span 12-13:  elections => elect-01
Span 11-12:  free => free-41
Span 17-18:  fulfill => fulfill-01
Span 0-1:  now => now
Span 16-17:  only => only
Span 9-10:  passage => pass-01
Span 19-20:  promise => promise-01
Span 5-6:  promised => promise-01
Span 21-22:  substantial => substantial

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),economy,economy,false), Span(25,26,List(1),east,east,false), Span(22,23,List(2),aid,aid-01,false), Span(21,22,List(3),substantial,substantial,false), Span(19,20,List(4),promise,promise-01,false), Span(17,18,List(5),fulfill,fulfill-01,false), Span(16,17,List(6),only,only,false), Span(15,16,List(7),can,possible,false), Span(12,13,List(8),elections,elect-01,false), Span(11,12,List(9),free,free-41,false), Span(10,11,List(10),and,and,false), Span(9,10,List(11),passage,pass-01,false), Span(7,8,List(12),citizens,citizen,false), Span(5,6,List(13),promised,promise-01,false), Span(2,3,List(14),east,east,false), Span(0,1,List(15),now,now,false)),Map(2 -> aid-01, 5 -> fulfill-01, 12 -> citizen, 15 -> now, 8 -> elect-01, 7 -> possible, 1 -> east, 4 -> promise-01, 11 -> pass-01, 14 -> east, 6 -> only, 0 -> economy, 9 -> free-41, 3 -> substantial, 10 -> and, 13 -> promise-01),Map(e -> economy, n -> now, e2 -> east, p2 -> possible, s -> substantial, p -> promise-01, a -> aid-01, e4 -> east, p4 -> promise-01, a2 -> and, c -> citizen, f2 -> free-41, f -> fulfill-01, o -> only, e3 -> elect-01, p3 -> pass-01))),[Ljava.lang.String;@32cf63bb,Annotation([Ljava.lang.String;@4d9ca40c,[Ljava.lang.String;@66d637a2,[Ljava.lang.String;@79dea16c),Annotation([Ljava.lang.String;@737f7f6,[Ljava.lang.String;@6b783b2d,[Ledu.cmu.lti.nlp.amr.Dependency;@22753e7a),Annotation([Ljava.lang.String;@3f58cd42,[Ljava.lang.String;@5f0bc88b,[Ljava.lang.String;@7e9b4e6c),Annotation([Ljava.lang.String;@639d564,[Ljava.lang.String;@3ee89b6d,[Ledu.cmu.lti.nlp.amr.Entity;@1934315f))
AMR:
(a / aid-01, ARG0, e / economy)
(a / aid-01, ARG1, e4 / east)
(a / aid-01, mod, s / substantial)
(a2 / and, op, e3 / elect-01)
(a2 / and, op, p3 / pass-01)
(e / economy, mod, e2 / east)
(f / fulfill-01, ARG0, a2 / and)
(f / fulfill-01, ARG1, p / promise-01)
(f / fulfill-01, mod, o / only)
(f2 / free-41, ARG1, e3 / elect-01)
(p / promise-01, ARG1, a / aid-01)
(p2 / possible, domain, f / fulfill-01)
(p4 / promise-01, ARG1, c / citizen)
(p4 / promise-01, ARG2, a2 / and)
(p4 / promise-01, time, n / now)

Decoded in 324,537 microseconds
Sentence: similarly while all papers promise not to authorise payments to criminals only three could bring themselves to extend that pledge to their families or associates

Spans:
Span 2-3:  all => all
Span 14-15:  bring => bring-01
Span 13-14:  could => possible
Span 10-11:  criminals => criminal
Span 17-18:  extend => extend-01
Span 22-23:  families => family
Span 11-12:  only => only
Span 23-24:  or => or
Span 3-4:  papers => paper
Span 8-9:  payments => payment
Span 19-20:  pledge => pledge-01
Span 4-5:  promise => promise-01
Span 12-13:  three => 3

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),or,or,false), Span(22,23,List(1),families,family,false), Span(19,20,List(2),pledge,pledge-01,false), Span(17,18,List(3),extend,extend-01,false), Span(14,15,List(4),bring,bring-01,false), Span(13,14,List(5),could,possible,false), Span(12,13,List(6),three,3,false), Span(11,12,List(7),only,only,false), Span(10,11,List(8),criminals,criminal,false), Span(8,9,List(9),payments,payment,false), Span(4,5,List(10),promise,promise-01,false), Span(3,4,List(11),papers,paper,false), Span(2,3,List(12),all,all,false)),Map(2 -> pledge-01, 5 -> possible, 12 -> all, 8 -> criminal, 7 -> only, 1 -> family, 4 -> bring-01, 11 -> paper, 6 -> 3, 0 -> or, 9 -> payment, 3 -> extend-01, 10 -> promise-01),Map(e -> extend-01, p5 -> paper, b -> bring-01, p2 -> possible, p -> pledge-01, a -> all, p4 -> promise-01, o2 -> only, c -> criminal, f -> family, o -> or, 3 -> 3, p3 -> payment))),[Ljava.lang.String;@319560e6,Annotation([Ljava.lang.String;@460cb578,[Ljava.lang.String;@6c5dfd35,[Ljava.lang.String;@e9ada28),Annotation([Ljava.lang.String;@58687f95,[Ljava.lang.String;@34903c8b,[Ledu.cmu.lti.nlp.amr.Dependency;@6976e4a2),Annotation([Ljava.lang.String;@7c9c7dc5,[Ljava.lang.String;@605506d,[Ljava.lang.String;@46e32731),Annotation([Ljava.lang.String;@6b222652,[Ljava.lang.String;@f020871,[Ledu.cmu.lti.nlp.amr.Entity;@4e783a69))
AMR:
(b / bring-01, ARG0, 3 / 3)
(b / bring-01, ARG1, c / criminal)
(b / bring-01, ARG2, e / extend-01)
(b / bring-01, mod, p2 / possible)
(b / bring-01, time, o2 / only)
(b / bring-01, time, p4 / promise-01)
(e / extend-01, ARG1, p / pledge-01)
(o / or, op, f / family)
(p / pledge-01, ARG1, f / family)
(p4 / promise-01, ARG0, p5 / paper)
(p4 / promise-01, ARG1, p3 / payment)
(p5 / paper, quant, a / all)

Decoded in 177,201 microseconds
Sentence: having run out of money and not wanting to call david to ask for any angie got in touch with an english journalist in london saying she was ready to give her side of the story which led to the sunday mirror promising to send over cash with the reporter and photographer

NER Entity: (thing :name (name :op "english"))
NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
NER Entity: (thing :name (name :op "english"))
Spans:
Span 50-51:  and => and
Span 5-6:  and => and
Span 14-15:  any => any
Span 12-13:  ask => ask-01
Span 46-47:  cash => cash
Span 21-22:  english => (language :name (name :op "English"))
Span 30-31:  give => give-01
Span 22-23:  journalist => journalist
Span 37-38:  led => lead-02
Span 24-25:  london => (city :name (name :op "London"))
Span 41-42:  mirror => mirror
Span 4-5:  money => money
Span 42-43:  promising => promise-01
Span 28-29:  ready => ready-01
Span 49-50:  reporter => report-01
Span 25-26:  saying => say-01
Span 44-45:  send => send-01
Span 26-27:  she => she
Span 32-33:  side => side
Span 35-36:  story => story
Span 40-41:  sunday => sunday
Span 18-19:  touch => touch-01
Span 7-8:  wanting => want-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),and,and,false), Span(49,50,List(1),reporter,report-01,false), Span(46,47,List(2),cash,cash,false), Span(44,45,List(3),send,send-01,false), Span(42,43,List(4),promising,promise-01,false), Span(41,42,List(5),mirror,mirror,false), Span(40,41,List(6),sunday,sunday,false), Span(37,38,List(7),led,lead-02,false), Span(35,36,List(8),story,story,false), Span(32,33,List(9),side,side,false), Span(30,31,List(10),give,give-01,false), Span(28,29,List(11),ready,ready-01,false), Span(26,27,List(12),she,she,false), Span(25,26,List(13),saying,say-01,false), Span(24,25,List(16, 15, 14),london,(city :name (name :op "London")),false), Span(22,23,List(17),journalist,journalist,false), Span(21,22,List(20, 19, 18),english,(language :name (name :op "English")),false), Span(18,19,List(21),touch,touch-01,false), Span(14,15,List(22),any,any,false), Span(12,13,List(23),ask,ask-01,false), Span(7,8,List(24),wanting,want-01,false), Span(5,6,List(25),and,and,false), Span(4,5,List(26),money,money,false)),Map(2 -> cash, 5 -> mirror, 12 -> she, 8 -> story, 15 -> name, 21 -> touch-01, 18 -> language, 24 -> want-01, 7 -> lead-02, 1 -> report-01, 17 -> journalist, 23 -> ask-01, 26 -> money, 4 -> promise-01, 11 -> ready-01, 14 -> city, 20 -> "English", 6 -> sunday, 9 -> side, 0 -> and, 22 -> any, 16 -> "London", 19 -> name, 10 -> give-01, 3 -> send-01, 25 -> and, 13 -> say-01),Map(s5 -> she, n -> name, w -> want-01, s2 -> sunday, t -> touch-01, m2 -> money, j -> journalist, a3 -> ask-01, s -> send-01, s4 -> side, m -> mirror, r2 -> ready-01, g -> give-01, p -> promise-01, a -> and, l2 -> language, r -> report-01, a2 -> any, c -> cash, s3 -> story, l -> lead-02, s6 -> say-01, c2 -> city, n2 -> name, a4 -> and))),[Ljava.lang.String;@a83234a,Annotation([Ljava.lang.String;@2781d4aa,[Ljava.lang.String;@3cb0f929,[Ljava.lang.String;@6b611e0),Annotation([Ljava.lang.String;@1b4f8c91,[Ljava.lang.String;@3959199,[Ledu.cmu.lti.nlp.amr.Dependency;@5089d5a5),Annotation([Ljava.lang.String;@9296cf2,[Ljava.lang.String;@7eaf8890,[Ljava.lang.String;@362ee6ea),Annotation([Ljava.lang.String;@413a2870,[Ljava.lang.String;@5134f284,[Ledu.cmu.lti.nlp.amr.Entity;@6b1de1c2))
AMR:
(a / and, op, r / report-01)
(a3 / ask-01, ARG2, s6 / say-01)
(a4 / and, op, w / want-01)
(c2 / city, name, n / name)
(g / give-01, ARG1, s4 / side)
(j / journalist, location, c2 / city)
(j / journalist, mod, l2 / language)
(l / lead-02, ARG0, s3 / story)
(l / lead-02, ARG2, m / mirror)
(l2 / language, name, n2 / name)
(m / mirror, mod, s2 / sunday)
(n / name, op, "London")
(n2 / name, op, "English")
(p / promise-01, ARG2, s / send-01)
(r2 / ready-01, ARG0, a2 / any)
(r2 / ready-01, ARG1, s5 / she)
(r2 / ready-01, ARG2, g / give-01)
(s / send-01, ARG0, m / mirror)
(s / send-01, ARG1, c / cash)
(s / send-01, purpose, r / report-01)
(s4 / side, poss, s3 / story)
(s6 / say-01, ARG0, j / journalist)
(s6 / say-01, ARG1, r2 / ready-01)
(t / touch-01, ARG1, j / journalist)
(w / want-01, ARG0, s4 / side)
(w / want-01, ARG1, m2 / money)

Decoded in 752,910 microseconds
Sentence: offering mad go go dancers orange at choice 25 royal exchange square glasgow is a new night promising a live drag show featuring queen of queens shahbaz

Spans:
Span 8-9:  25 => 25
Span 4-5:  dancers => (person :ARG0-of dance-01)
Span 20-21:  drag => drag-01
Span 10-11:  exchange => exchange-01
Span 22-23:  featuring => feature-01
Span 19-20:  live => live-01
Span 1-2:  mad => mad
Span 15-16:  new => new
Span 16-17:  night => night
Span 0-1:  offering => offer-01
Span 5-6:  orange => orange
Span 17-18:  promising => promise-01
Span 9-10:  royal => royal
Span 21-22:  show => show-01
Span 11-12:  square => square

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),featuring,feature-01,false), Span(21,22,List(1),show,show-01,false), Span(20,21,List(2),drag,drag-01,false), Span(19,20,List(3),live,live-01,false), Span(17,18,List(4),promising,promise-01,false), Span(16,17,List(5),night,night,false), Span(15,16,List(6),new,new,false), Span(11,12,List(7),square,square,false), Span(10,11,List(8),exchange,exchange-01,false), Span(9,10,List(9),royal,royal,false), Span(8,9,List(10),25,25,false), Span(5,6,List(11),orange,orange,false), Span(4,5,List(13, 12),dancers,(person :ARG0-of dance-01),false), Span(1,2,List(14),mad,mad,false), Span(0,1,List(15),offering,offer-01,false)),Map(2 -> drag-01, 5 -> night, 12 -> person, 15 -> offer-01, 8 -> exchange-01, 7 -> square, 1 -> show-01, 4 -> promise-01, 11 -> orange, 14 -> mad, 6 -> new, 0 -> feature-01, 9 -> royal, 3 -> live-01, 10 -> 25, 13 -> dance-01),Map(e -> exchange-01, n -> night, 2 -> 25, s2 -> square, p2 -> person, s -> show-01, m -> mad, d -> drag-01, p -> promise-01, o2 -> offer-01, d2 -> dance-01, r -> royal, l -> live-01, f -> feature-01, o -> orange, n2 -> new))),[Ljava.lang.String;@76d0be7e,Annotation([Ljava.lang.String;@28a7f23,[Ljava.lang.String;@52a0d422,[Ljava.lang.String;@3cc72e8f),Annotation([Ljava.lang.String;@38c1cd75,[Ljava.lang.String;@3b97d96f,[Ledu.cmu.lti.nlp.amr.Dependency;@6e4424f9),Annotation([Ljava.lang.String;@3bd78ffd,[Ljava.lang.String;@452e49bc,[Ljava.lang.String;@61eaf91f),Annotation([Ljava.lang.String;@9899472,[Ljava.lang.String;@2770cd42,[Ledu.cmu.lti.nlp.amr.Entity;@5eb3bc48))
AMR:
(d / drag-01, ARG1, r / royal)
(d2 / dance-01, ARG0, p2 / person)
(d2 / dance-01, ARG1, o / orange)
(e / exchange-01, ARG0, s2 / square)
(e / exchange-01, ARG1, r / royal)
(f / feature-01, ARG0, s / show-01)
(f / feature-01, ARG1, o2 / offer-01)
(l / live-01, ARG1, s / show-01)
(n / night, mod, n2 / new)
(o2 / offer-01, ARG1, m / mad)
(o2 / offer-01, time, 2 / 25)
(p / promise-01, ARG1, n / night)
(p / promise-01, ARG2, s / show-01)
(s / show-01, ARG0, p2 / person)
(s / show-01, ARG1, d / drag-01)

Decoded in 385,781 microseconds
Sentence: bia said it was looking for a partner to inject fresh capital and promised further clarification

Spans:
Span 12-13:  and => and
Span 11-12:  capital => capital
Span 10-11:  fresh => fresh
Span 14-15:  further => further
Span 2-3:  it => it
Span 7-8:  partner => partner-01
Span 13-14:  promised => promise-01
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),further,further,false), Span(13,14,List(1),promised,promise-01,false), Span(12,13,List(2),and,and,false), Span(11,12,List(3),capital,capital,false), Span(10,11,List(4),fresh,fresh,false), Span(7,8,List(5),partner,partner-01,false), Span(2,3,List(6),it,it,false), Span(1,2,List(7),said,say-01,false)),Map(2 -> and, 5 -> partner-01, 7 -> say-01, 1 -> promise-01, 4 -> fresh, 6 -> it, 0 -> further, 3 -> capital),Map(p2 -> partner-01, s -> say-01, p -> promise-01, a -> and, i -> it, f2 -> fresh, c -> capital, f -> further))),[Ljava.lang.String;@6a0e4b8a,Annotation([Ljava.lang.String;@5081876b,[Ljava.lang.String;@67e1ab17,[Ljava.lang.String;@10a7a849),Annotation([Ljava.lang.String;@6f195929,[Ljava.lang.String;@692ccbba,[Ledu.cmu.lti.nlp.amr.Dependency;@7bf35647),Annotation([Ljava.lang.String;@24a58ee4,[Ljava.lang.String;@71482d87,[Ljava.lang.String;@39a5342b),Annotation([Ljava.lang.String;@d04109e,[Ljava.lang.String;@5defbbf,[Ledu.cmu.lti.nlp.amr.Entity;@7261bb9b))
AMR:
(a / and, op, c / capital)
(a / and, op, p / promise-01)
(c / capital, mod, f2 / fresh)
(c / capital, poss, i / it)
(p / promise-01, ARG1, f / further)
(p2 / partner-01, ARG1, i / it)
(s / say-01, ARG0, i / it)

Decoded in 31,800 microseconds
Sentence: in the same message he promised to end his assassination campaign against plo officials which began with the killing of the london representative said hammami in 1978

NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 26-27:  1978 => (date-entity :year 1978)
Span 9-10:  assassination => assassinate-01
Span 15-16:  began => begin-01
Span 10-11:  campaign => campaign-01
Span 4-5:  he => he
Span 18-19:  killing => kill-01
Span 21-22:  london => (city :name (name :op "London"))
Span 3-4:  message => message
Span 13-14:  officials => (have-org-role-91 :ARG2 official)
Span 5-6:  promised => promise-01
Span 22-23:  representative => represent-01
Span 23-24:  said => say-01
Span 2-3:  same => same-41

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(1, 0),1978,(date-entity :year 1978),false), Span(23,24,List(2),said,say-01,false), Span(22,23,List(3),representative,represent-01,false), Span(21,22,List(6, 5, 4),london,(city :name (name :op "London")),false), Span(18,19,List(7),killing,kill-01,false), Span(15,16,List(8),began,begin-01,false), Span(13,14,List(10, 9),officials,(have-org-role-91 :ARG2 official),false), Span(10,11,List(11),campaign,campaign-01,false), Span(9,10,List(12),assassination,assassinate-01,false), Span(5,6,List(13),promised,promise-01,false), Span(4,5,List(14),he,he,false), Span(3,4,List(15),message,message,false), Span(2,3,List(16),same,same-41,false)),Map(2 -> say-01, 5 -> name, 12 -> assassinate-01, 15 -> message, 8 -> begin-01, 7 -> kill-01, 1 -> 1978, 4 -> city, 11 -> campaign-01, 14 -> he, 6 -> "London", 0 -> date-entity, 9 -> have-org-role-91, 16 -> same-41, 3 -> represent-01, 10 -> official, 13 -> promise-01),Map(n -> name, h -> have-org-role-91, s2 -> same-41, h2 -> he, k -> kill-01, b -> begin-01, s -> say-01, m -> message, d -> date-entity, 1 -> 1978, p -> promise-01, a -> assassinate-01, r -> represent-01, c -> city, o -> official, c2 -> campaign-01))),[Ljava.lang.String;@6e63f7c7,Annotation([Ljava.lang.String;@6520626f,[Ljava.lang.String;@311e9947,[Ljava.lang.String;@4fe11d82),Annotation([Ljava.lang.String;@44586ac6,[Ljava.lang.String;@8ca1038,[Ledu.cmu.lti.nlp.amr.Dependency;@9eed10a),Annotation([Ljava.lang.String;@1dddec9e,[Ljava.lang.String;@54d98863,[Ljava.lang.String;@1589471a),Annotation([Ljava.lang.String;@679b0701,[Ljava.lang.String;@72e907ca,[Ledu.cmu.lti.nlp.amr.Entity;@20fe99b6))
AMR:
(a / assassinate-01, ARG1, h2 / he)
(b / begin-01, ARG1, c2 / campaign-01)
(b / begin-01, condition, s / say-01)
(c / city, name, n / name)
(c2 / campaign-01, ARG0, h2 / he)
(d / date-entity, year, 1 / 1978)
(h / have-org-role-91, ARG1, h2 / he)
(h / have-org-role-91, ARG2, o / official)
(k / kill-01, ARG1, r / represent-01)
(n / name, op, "London")
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, m / message)
(r / represent-01, ARG1, c / city)
(s / say-01, ARG0, k / kill-01)
(s / say-01, time, d / date-entity)
(s2 / same-41, ARG1, m / message)

Decoded in 101,053 microseconds
Sentence: democratic officials believe that president bush sliding on other conservative issues such as nicaragua star wars soviet relations and gun control feels he must deliver on his reaganesque campaign promise to cut capital gains taxes

NER Entity: (country :name (name :op "nicaragua"))
NER Entity: (country :name (name :op "soviet"))
Spans:
Span 18-19:  and => and
Span 2-3:  believe => believe-01
Span 5-6:  bush => bush-league
Span 28-29:  campaign => campaign-01
Span 32-33:  capital => capital
Span 9-10:  conservative => conservative
Span 20-21:  control => control-01
Span 24-25:  deliver => deliver-01
Span 0-1:  democratic => democracy
Span 19-20:  gun => gun
Span 22-23:  he => he
Span 10-11:  issues => issue
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 8-9:  other => other
Span 4-5:  president => (have-org-role-91 :ARG2 president)
Span 29-30:  promise => promise-01
Span 17-18:  relations => relation
Span 14-15:  star => star
Span 11-12:  such => such
Span 34-35:  taxes => tax-01
Span 15-16:  wars => war-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),taxes,tax-01,false), Span(32,33,List(1),capital,capital,false), Span(29,30,List(2),promise,promise-01,false), Span(28,29,List(3),campaign,campaign-01,false), Span(24,25,List(4),deliver,deliver-01,false), Span(22,23,List(5),he,he,false), Span(20,21,List(6),control,control-01,false), Span(19,20,List(7),gun,gun,false), Span(18,19,List(8),and,and,false), Span(17,18,List(9),relations,relation,false), Span(15,16,List(10),wars,war-01,false), Span(14,15,List(11),star,star,false), Span(11,12,List(12),such,such,false), Span(10,11,List(13),issues,issue,false), Span(9,10,List(14),conservative,conservative,false), Span(8,9,List(15),other,other,false), Span(5,6,List(16),bush,bush-league,false), Span(4,5,List(18, 17),president,(have-org-role-91 :ARG2 president),false), Span(2,3,List(19),believe,believe-01,false), Span(1,2,List(21, 20),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(22),democratic,democracy,false)),Map(2 -> promise-01, 5 -> he, 12 -> such, 15 -> other, 8 -> and, 21 -> official, 18 -> president, 7 -> gun, 17 -> have-org-role-91, 1 -> capital, 4 -> deliver-01, 11 -> star, 14 -> conservative, 20 -> have-org-role-91, 6 -> control-01, 22 -> democracy, 0 -> tax-01, 9 -> relation, 16 -> bush-league, 19 -> believe-01, 3 -> campaign-01, 10 -> war-01, 13 -> issue),Map(w -> war-01, h -> he, h2 -> have-org-role-91, s2 -> such, b -> bush-league, t -> tax-01, b2 -> believe-01, p2 -> president, c4 -> conservative, s -> star, d -> deliver-01, p -> promise-01, g -> gun, c3 -> control-01, a -> and, d2 -> democracy, o2 -> official, i -> issue, r -> relation, h3 -> have-org-role-91, c -> capital, o -> other, c2 -> campaign-01))),[Ljava.lang.String;@20fcfc67,Annotation([Ljava.lang.String;@411edf1c,[Ljava.lang.String;@51c9c8aa,[Ljava.lang.String;@16953ad9),Annotation([Ljava.lang.String;@1f4a8824,[Ljava.lang.String;@56300388,[Ledu.cmu.lti.nlp.amr.Dependency;@6a3801ec),Annotation([Ljava.lang.String;@306636f,[Ljava.lang.String;@186a0df6,[Ljava.lang.String;@5aba9dff),Annotation([Ljava.lang.String;@11dafee2,[Ljava.lang.String;@4093b096,[Ledu.cmu.lti.nlp.amr.Entity;@202e68f9))
AMR:
(a / and, op, c3 / control-01)
(a / and, op, d / deliver-01)
(a / and, op, r / relation)
(b2 / believe-01, ARG1, p / promise-01)
(c2 / campaign-01, ARG0, h / he)
(c2 / campaign-01, ARG1, t / tax-01)
(c3 / control-01, ARG1, g / gun)
(d / deliver-01, ARG0, h / he)
(d / deliver-01, ARG1, w / war-01)
(h2 / have-org-role-91, ARG0, b / bush-league)
(h2 / have-org-role-91, ARG2, p2 / president)
(h3 / have-org-role-91, ARG0, h / he)
(h3 / have-org-role-91, ARG2, o2 / official)
(i / issue, mod, c4 / conservative)
(i / issue, mod, o / other)
(o2 / official, mod, d2 / democracy)
(p / promise-01, ARG0, o / other)
(p / promise-01, ARG1, t / tax-01)
(t / tax-01, ARG0, b / bush-league)
(t / tax-01, ARG3, c / capital)
(w / war-01, ARG0, s2 / such)
(w / war-01, ARG1, s / star)

Decoded in 395,315 microseconds
Sentence: his mission had been planned two years ago when he worked well with stablemate balthus the 1987 cambridgeshire winner and glover promises he has something else in the yard to continue the trend in two years

Spans:
Span 16-17:  1987 => (date-entity :year 1987)
Span 19-20:  and => and
Span 30-31:  continue => continue-01
Span 25-26:  else => else
Span 22-23:  he => he
Span 9-10:  he => he
Span 1-2:  mission => mission
Span 4-5:  planned => plan-01
Span 21-22:  promises => promise-01
Span 24-25:  something => something
Span 32-33:  trend => trend-01
Span 34-35:  two => 2
Span 5-6:  two => 2
Span 11-12:  well => well
Span 10-11:  worked => work-01
Span 28-29:  yard => yard
Span 35-36:  years => (temporal-quantity :unit year)
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(1, 0),years,(temporal-quantity :unit year),false), Span(34,35,List(2),two,2,false), Span(32,33,List(3),trend,trend-01,false), Span(30,31,List(4),continue,continue-01,false), Span(28,29,List(5),yard,yard,false), Span(25,26,List(6),else,else,false), Span(24,25,List(7),something,something,false), Span(22,23,List(8),he,he,false), Span(21,22,List(9),promises,promise-01,false), Span(19,20,List(10),and,and,false), Span(16,17,List(12, 11),1987,(date-entity :year 1987),false), Span(11,12,List(13),well,well,false), Span(10,11,List(14),worked,work-01,false), Span(9,10,List(15),he,he,false), Span(6,7,List(17, 16),years,(temporal-quantity :unit year),false), Span(5,6,List(18),two,2,false), Span(4,5,List(19),planned,plan-01,false), Span(1,2,List(20),mission,mission,false)),Map(2 -> 2, 5 -> yard, 12 -> 1987, 15 -> he, 8 -> he, 18 -> 2, 7 -> something, 17 -> year, 1 -> year, 4 -> continue-01, 11 -> date-entity, 14 -> work-01, 20 -> mission, 6 -> else, 0 -> temporal-quantity, 9 -> promise-01, 16 -> temporal-quantity, 19 -> plan-01, 3 -> trend-01, 10 -> and, 13 -> well),Map(e -> else, w -> well, h -> he, 2 -> 2, h2 -> he, t -> temporal-quantity, p2 -> plan-01, s -> something, m -> mission, d -> date-entity, t3 -> temporal-quantity, 1 -> 1987, y -> year, p -> promise-01, a -> and, y3 -> year, t2 -> trend-01, w2 -> work-01, c -> continue-01, 22 -> 2, y2 -> yard))),[Ljava.lang.String;@782e439a,Annotation([Ljava.lang.String;@2558711a,[Ljava.lang.String;@5169751d,[Ljava.lang.String;@6287ecac),Annotation([Ljava.lang.String;@49c342bd,[Ljava.lang.String;@3252ac20,[Ledu.cmu.lti.nlp.amr.Dependency;@51a282af),Annotation([Ljava.lang.String;@431d908,[Ljava.lang.String;@649f9e5e,[Ljava.lang.String;@2b5660ee),Annotation([Ljava.lang.String;@33f5bf7c,[Ljava.lang.String;@4aee808a,[Ledu.cmu.lti.nlp.amr.Entity;@70390a74))
AMR:
(c / continue-01, ARG0, y2 / yard)
(c / continue-01, ARG1, t2 / trend-01)
(d / date-entity, year, 1 / 1987)
(e / else, purpose, c / continue-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, a / and)
(p2 / plan-01, ARG0, h2 / he)
(p2 / plan-01, ARG1, m / mission)
(s / something, mod, e / else)
(s / something, poss, h / he)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(t2 / trend-01, ARG0, d / date-entity)
(t2 / trend-01, ARG1, w2 / work-01)
(t2 / trend-01, ARG2, t / temporal-quantity)
(t3 / temporal-quantity, op, c / continue-01)
(t3 / temporal-quantity, quant, 22 / 2)
(t3 / temporal-quantity, unit, y3 / year)
(w2 / work-01, ARG0, h2 / he)
(w2 / work-01, ARG1, w / well)

Decoded in 711,666 microseconds
Sentence: they had to promise him that if there was trouble again they would give him every help to stay in dublin or to go to london

NER Entity: (country :name (name :op "dublin"))
NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 10-11:  again => again
Span 15-16:  every => every
Span 13-14:  give => give-01
Span 16-17:  help => help-01
Span 25-26:  london => (city :name (name :op "London"))
Span 21-22:  or => or
Span 3-4:  promise => promise-01
Span 18-19:  stay => stay-01
Span 11-12:  they => they
Span 0-1:  they => they
Span 9-10:  trouble => trouble-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(2, 1, 0),london,(city :name (name :op "London")),false), Span(21,22,List(3),or,or,false), Span(18,19,List(4),stay,stay-01,false), Span(16,17,List(5),help,help-01,false), Span(15,16,List(6),every,every,false), Span(13,14,List(7),give,give-01,false), Span(11,12,List(8),they,they,false), Span(10,11,List(9),again,again,false), Span(9,10,List(10),trouble,trouble-01,false), Span(3,4,List(11),promise,promise-01,false), Span(0,1,List(12),they,they,false)),Map(2 -> "London", 5 -> help-01, 12 -> they, 8 -> they, 7 -> give-01, 1 -> name, 4 -> stay-01, 11 -> promise-01, 6 -> every, 0 -> city, 9 -> again, 3 -> or, 10 -> trouble-01),Map(e -> every, n -> name, h -> help-01, t -> they, s -> stay-01, t3 -> they, p -> promise-01, g -> give-01, a -> again, t2 -> trouble-01, c -> city, o -> or))),[Ljava.lang.String;@30dd7f3b,Annotation([Ljava.lang.String;@1dcc138d,[Ljava.lang.String;@41179d43,[Ljava.lang.String;@7555bb17),Annotation([Ljava.lang.String;@4f6e1f2f,[Ljava.lang.String;@46c16f66,[Ledu.cmu.lti.nlp.amr.Dependency;@4578b5d4),Annotation([Ljava.lang.String;@77e994ed,[Ljava.lang.String;@830911c,[Ljava.lang.String;@2c86c977),Annotation([Ljava.lang.String;@4514ba77,[Ljava.lang.String;@53ddfe0f,[Ledu.cmu.lti.nlp.amr.Entity;@1352b5cd))
AMR:
(c / city, name, n / name)
(g / give-01, ARG0, t / they)
(g / give-01, ARG1, h / help-01)
(g / give-01, condition, t2 / trouble-01)
(h / help-01, mod, e / every)
(n / name, op, "London")
(o / or, op, s / stay-01)
(p / promise-01, ARG0, t3 / they)
(p / promise-01, ARG1, g / give-01)
(s / stay-01, ARG0, t / they)
(s / stay-01, ARG1, c / city)
(t2 / trouble-01, mod, a / again)

Decoded in 63,532 microseconds
Sentence:   she promised greater control over the recruitment and retention of staff and the provision of services for patients

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   she promised greater control over the recruitment and retention of staff and the provision of services for patients
myTokenized = she promised greater control over the recruitment and retention of staff and the provision of services for patients
i = 0
prefix = List(she)
regexr = \Qs\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: a donation has been promised from the robert daniel memorial fund and the way in which this will be spent will be discussed at the next committee meeting

Spans:
Span 11-12:  and => and
Span 26-27:  committee => committee
Span 22-23:  discussed => discuss-01
Span 1-2:  donation => donate-01
Span 10-11:  fund => fund-01
Span 27-28:  meeting => meet-03
Span 9-10:  memorial => memorial
Span 25-26:  next => next
Span 4-5:  promised => promise-01
Span 19-20:  spent => spend-01
Span 16-17:  this => this
Span 13-14:  way => way

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),meeting,meet-03,false), Span(26,27,List(1),committee,committee,false), Span(25,26,List(2),next,next,false), Span(22,23,List(3),discussed,discuss-01,false), Span(19,20,List(4),spent,spend-01,false), Span(16,17,List(5),this,this,false), Span(13,14,List(6),way,way,false), Span(11,12,List(7),and,and,false), Span(10,11,List(8),fund,fund-01,false), Span(9,10,List(9),memorial,memorial,false), Span(4,5,List(10),promised,promise-01,false), Span(1,2,List(11),donation,donate-01,false)),Map(2 -> next, 5 -> this, 8 -> fund-01, 7 -> and, 1 -> committee, 11 -> donate-01, 4 -> spend-01, 6 -> way, 9 -> memorial, 0 -> meet-03, 10 -> promise-01, 3 -> discuss-01),Map(w -> way, n -> next, t -> this, m2 -> memorial, s -> spend-01, d -> discuss-01, m -> meet-03, p -> promise-01, a -> and, d2 -> donate-01, c -> committee, f -> fund-01))),[Ljava.lang.String;@39f645e4,Annotation([Ljava.lang.String;@57669976,[Ljava.lang.String;@10e53ece,[Ljava.lang.String;@3a7e4f0c),Annotation([Ljava.lang.String;@3a77bad4,[Ljava.lang.String;@a8ad249,[Ledu.cmu.lti.nlp.amr.Dependency;@1ff3bc07),Annotation([Ljava.lang.String;@3abd7ff4,[Ljava.lang.String;@6f1b8a4c,[Ljava.lang.String;@7914bc90),Annotation([Ljava.lang.String;@4067d00a,[Ljava.lang.String;@5f8b618e,[Ledu.cmu.lti.nlp.amr.Entity;@37b1e2a3))
AMR:
(a / and, op, f / fund-01)
(a / and, op, w / way)
(d / discuss-01, ARG1, d2 / donate-01)
(d / discuss-01, time, m / meet-03)
(f / fund-01, ARG1, m2 / memorial)
(m / meet-03, ARG0, c / committee)
(m / meet-03, mod, n / next)
(p / promise-01, ARG1, d2 / donate-01)
(p / promise-01, ARG2, a / and)
(s / spend-01, ARG0, a / and)
(s / spend-01, ARG1, t / this)

Decoded in 148,169 microseconds
Sentence: president gorbachev promised better maternity and infant care and an improved lifestyle for women in the soviet union

NER Entity: (country :name (name :op "soviet"))
Spans:
Span 8-9:  and => and
Span 5-6:  and => and
Span 7-8:  care => care-01
Span 10-11:  improved => improve-01
Span 6-7:  infant => infant
Span 11-12:  lifestyle => lifestyle
Span 0-1:  president => (have-org-role-91 :ARG2 president)
Span 2-3:  promised => promise-01
Span 17-18:  union => union
Span 13-14:  women => woman

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),union,union,false), Span(13,14,List(1),women,woman,false), Span(11,12,List(2),lifestyle,lifestyle,false), Span(10,11,List(3),improved,improve-01,false), Span(8,9,List(4),and,and,false), Span(7,8,List(5),care,care-01,false), Span(6,7,List(6),infant,infant,false), Span(5,6,List(7),and,and,false), Span(2,3,List(8),promised,promise-01,false), Span(0,1,List(10, 9),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> lifestyle, 5 -> care-01, 8 -> promise-01, 7 -> and, 1 -> woman, 4 -> and, 6 -> infant, 9 -> have-org-role-91, 0 -> union, 10 -> president, 3 -> improve-01),Map(w -> woman, h -> have-org-role-91, p2 -> president, p -> promise-01, a -> and, i2 -> infant, a2 -> and, i -> improve-01, c -> care-01, l -> lifestyle, u -> union))),[Ljava.lang.String;@7f9657e5,Annotation([Ljava.lang.String;@6764bcd3,[Ljava.lang.String;@6a8f5ad,[Ljava.lang.String;@3e993445),Annotation([Ljava.lang.String;@3c36be1e,[Ljava.lang.String;@2dfbc274,[Ledu.cmu.lti.nlp.amr.Dependency;@6b9b6541),Annotation([Ljava.lang.String;@2714c598,[Ljava.lang.String;@44b89233,[Ljava.lang.String;@31867584),Annotation([Ljava.lang.String;@728d4682,[Ljava.lang.String;@19103b8f,[Ledu.cmu.lti.nlp.amr.Entity;@78b63623))
AMR:
(a / and, op, l / lifestyle)
(a2 / and, op, c / care-01)
(a2 / and, op, p / promise-01)
(a2 / and, op, w / woman)
(c / care-01, ARG1, i2 / infant)
(h / have-org-role-91, ARG1, p / promise-01)
(h / have-org-role-91, ARG2, p2 / president)
(i / improve-01, ARG1, l / lifestyle)
(p / promise-01, ARG1, a / and)
(w / woman, poss, u / union)

Decoded in 90,245 microseconds
Sentence: smith promises his crew are suitably fired up to prevent a hattrick

Spans:
Span 3-4:  crew => crew
Span 6-7:  fired => fire-01
Span 9-10:  prevent => prevent-01
Span 1-2:  promises => promise-01
Span 5-6:  suitably => suit-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),prevent,prevent-01,false), Span(6,7,List(1),fired,fire-01,false), Span(5,6,List(2),suitably,suit-01,false), Span(3,4,List(3),crew,crew,false), Span(1,2,List(4),promises,promise-01,false)),Map(2 -> suit-01, 1 -> fire-01, 4 -> promise-01, 0 -> prevent-01, 3 -> crew),Map(p2 -> promise-01, s -> suit-01, p -> prevent-01, c -> crew, f -> fire-01))),[Ljava.lang.String;@29c71bf,Annotation([Ljava.lang.String;@6cefb3ef,[Ljava.lang.String;@6d0e47c8,[Ljava.lang.String;@448ad367),Annotation([Ljava.lang.String;@763d3258,[Ljava.lang.String;@2bb46c0d,[Ledu.cmu.lti.nlp.amr.Dependency;@5221dfe5),Annotation([Ljava.lang.String;@2df25d83,[Ljava.lang.String;@2d95b06,[Ljava.lang.String;@be6e860),Annotation([Ljava.lang.String;@64a1fcba,[Ljava.lang.String;@46d74af3,[Ledu.cmu.lti.nlp.amr.Entity;@6079bbda))
AMR:
(f / fire-01, ARG1, c / crew)
(f / fire-01, purpose, p / prevent-01)
(p2 / promise-01, ARG1, f / fire-01)
(s / suit-01, ARG1, f / fire-01)

Decoded in 14,986 microseconds
Sentence: mr attali promised to hand copies of the toes final declaration to the g7 leaders dash

Spans:
Span 5-6:  copies => copy-01
Span 10-11:  declaration => declare-02
Span 9-10:  final => final
Span 4-5:  hand => hand
Span 14-15:  leaders => (person :ARG0-of lead-02)
Span 2-3:  promised => promise-01
Span 8-9:  toes => toe-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(1, 0),leaders,(person :ARG0-of lead-02),false), Span(10,11,List(2),declaration,declare-02,false), Span(9,10,List(3),final,final,false), Span(8,9,List(4),toes,toe-01,false), Span(5,6,List(5),copies,copy-01,false), Span(4,5,List(6),hand,hand,false), Span(2,3,List(7),promised,promise-01,false)),Map(2 -> declare-02, 5 -> copy-01, 7 -> promise-01, 1 -> lead-02, 4 -> toe-01, 6 -> hand, 0 -> person, 3 -> final),Map(h -> hand, t -> toe-01, p2 -> promise-01, d -> declare-02, p -> person, c -> copy-01, l -> lead-02, f -> final))),[Ljava.lang.String;@581c16b1,Annotation([Ljava.lang.String;@1c15eba8,[Ljava.lang.String;@632270ff,[Ljava.lang.String;@6a28a831),Annotation([Ljava.lang.String;@133a5f6a,[Ljava.lang.String;@5d4e3202,[Ledu.cmu.lti.nlp.amr.Dependency;@38b55129),Annotation([Ljava.lang.String;@7e377d5,[Ljava.lang.String;@66d044fe,[Ljava.lang.String;@7361b46d),Annotation([Ljava.lang.String;@138c9b49,[Ljava.lang.String;@7426dfa5,[Ledu.cmu.lti.nlp.amr.Entity;@24250536))
AMR:
(c / copy-01, ARG0, h / hand)
(c / copy-01, ARG1, d / declare-02)
(d / declare-02, ARG1, p / person)
(d / declare-02, mod, f / final)
(l / lead-02, ARG0, p / person)
(p2 / promise-01, ARG1, c / copy-01)
(t / toe-01, ARG1, d / declare-02)

Decoded in 63,834 microseconds
Sentence: as we now enter the new decade of the nineties which promises such a different world for us all he enters a personal decade which is certain to include some of the hardest changes and the most memorable pleasures of his life

Spans:
Span 18-19:  all => all
Span 34-35:  and => and
Span 26-27:  certain => certain
Span 33-34:  changes => change-01
Span 23-24:  decade => (temporal-quantity :unit decade)
Span 6-7:  decade => (temporal-quantity :unit decade)
Span 14-15:  different => differ-02
Span 3-4:  enter => enter-01
Span 20-21:  enters => enter-01
Span 32-33:  hardest => (hard :degree most)
Span 19-20:  he => he
Span 28-29:  include => include-01
Span 41-42:  life => life
Span 36-37:  most => most
Span 5-6:  new => new
Span 2-3:  now => now
Span 22-23:  personal => personal
Span 11-12:  promises => promise-01
Span 29-30:  some => some
Span 12-13:  such => such
Span 1-2:  we => we
Span 15-16:  world => world

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),life,life,false), Span(36,37,List(1),most,most,false), Span(34,35,List(2),and,and,false), Span(33,34,List(3),changes,change-01,false), Span(32,33,List(5, 4),hardest,(hard :degree most),false), Span(29,30,List(6),some,some,false), Span(28,29,List(7),include,include-01,false), Span(26,27,List(8),certain,certain,false), Span(23,24,List(10, 9),decade,(temporal-quantity :unit decade),false), Span(22,23,List(11),personal,personal,false), Span(20,21,List(12),enters,enter-01,false), Span(19,20,List(13),he,he,false), Span(18,19,List(14),all,all,false), Span(15,16,List(15),world,world,false), Span(14,15,List(16),different,differ-02,false), Span(12,13,List(17),such,such,false), Span(11,12,List(18),promises,promise-01,false), Span(6,7,List(20, 19),decade,(temporal-quantity :unit decade),false), Span(5,6,List(21),new,new,false), Span(3,4,List(22),enter,enter-01,false), Span(2,3,List(23),now,now,false), Span(1,2,List(24),we,we,false)),Map(2 -> and, 5 -> most, 12 -> enter-01, 8 -> certain, 15 -> world, 21 -> new, 18 -> promise-01, 24 -> we, 7 -> include-01, 1 -> most, 17 -> such, 23 -> now, 4 -> hard, 11 -> personal, 14 -> all, 20 -> decade, 6 -> some, 9 -> temporal-quantity, 0 -> life, 22 -> enter-01, 16 -> differ-02, 19 -> temporal-quantity, 10 -> decade, 3 -> change-01, 13 -> he),Map(e -> enter-01, w -> world, n -> new, h -> hard, h2 -> he, s2 -> such, t -> temporal-quantity, m2 -> most, d3 -> decade, p2 -> promise-01, e2 -> enter-01, s -> some, d -> decade, m -> most, p -> personal, a -> and, d2 -> differ-02, t2 -> temporal-quantity, w2 -> we, i -> include-01, a2 -> all, c -> change-01, l -> life, c2 -> certain, n2 -> now))),[Ljava.lang.String;@29ed4306,Annotation([Ljava.lang.String;@17cb546b,[Ljava.lang.String;@26134901,[Ljava.lang.String;@3c1df42e),Annotation([Ljava.lang.String;@528a16d7,[Ljava.lang.String;@67e1a796,[Ledu.cmu.lti.nlp.amr.Dependency;@fc19e22),Annotation([Ljava.lang.String;@7074d242,[Ljava.lang.String;@59824bc,[Ljava.lang.String;@4793b582),Annotation([Ljava.lang.String;@32718e84,[Ljava.lang.String;@3d4395fb,[Ledu.cmu.lti.nlp.amr.Entity;@202bb129))
AMR:
(a / and, op, c / change-01)
(a / and, op, i / include-01)
(a2 / all, mod, n / new)
(c / change-01, ARG1, l / life)
(c / change-01, mod, h / hard)
(c2 / certain, domain, i / include-01)
(d / decade, mod, p / personal)
(d2 / differ-02, ARG0, m / most)
(d2 / differ-02, ARG1, w / world)
(d2 / differ-02, degree, s2 / such)
(d3 / decade, mod, n / new)
(e / enter-01, ARG0, h2 / he)
(e / enter-01, ARG1, d / decade)
(e2 / enter-01, ARG0, w2 / we)
(e2 / enter-01, ARG1, d3 / decade)
(e2 / enter-01, time, n2 / now)
(h / hard, degree, m2 / most)
(i / include-01, ARG0, t / temporal-quantity)
(i / include-01, ARG1, s / some)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, w2 / we)
(p2 / promise-01, ARG2, w / world)
(t / temporal-quantity, unit, d / decade)
(t2 / temporal-quantity, unit, d3 / decade)

Decoded in 617,809 microseconds
Sentence: but what if it is taken together with the alleged allusion to democracy at argos  during the great scene in which the danaids supplicate the argive king pelasgus the king warns them that he cannot promise them support without the consent of the whole citizen body 3689

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = but what if it is taken together with the alleged allusion to democracy at argos  during the great scene in which the danaids supplicate the argive king pelasgus the king warns them that he cannot promise them support without the consent of the whole citizen body 3689
myTokenized = but what if it is taken together with the alleged allusion to democracy at argos during the great scene in which the danaids supplicate the argive king pelasgus the king warns them that he cannot promise them support without the consent of the whole citizen body 3689
i = 15
prefix = List(but, what, if, it, is, taken, together, with, the, alleged, allusion, to, democracy, at, argos, during)
regexr = \Qb\E ?\Qu\E ?\Qt\E ?\Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qf\E ?\Qi\E ?\Qt\E ?\Qi\E ?\Qs\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qo\E ?\Qg\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qw\E ?\Qi\E ?\Qt\E ?\Qh\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qe\E ?\Qg\E ?\Qe\E ?\Qd\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qu\E ?\Qs\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qo\E ?\Qd\E ?\Qe\E ?\Qm\E ?\Qo\E ?\Qc\E ?\Qr\E ?\Qa\E ?\Qc\E ?\Qy\E ?\Qa\E ?\Qt\E ?\Qa\E ?\Qr\E ?\Qg\E ?\Qo\E ?\Qs\E ?\Qd\E ?\Qu\E ?\Qr\E ?\Qi\E ?\Qn\E ?\Qg\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   but roger smith director of the legal action group said the bill promises more than it actually delivers

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   but roger smith director of the legal action group said the bill promises more than it actually delivers
myTokenized = but roger smith director of the legal action group said the bill promises more than it actually delivers
i = 0
prefix = List(but)
regexr = \Qb\E ?\Qu\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: a few months ago mrs thatcher promised us that no one would ever want to go private again

Spans:
Span 17-18:  again => again
Span 12-13:  ever => ever
Span 1-2:  few => few
Span 2-3:  months => (temporal-quantity :unit month)
Span 9-10:  no => -
Span 16-17:  private => private
Span 6-7:  promised => promise-01
Span 13-14:  want => want-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),again,again,false), Span(16,17,List(1),private,private,false), Span(13,14,List(2),want,want-01,false), Span(12,13,List(3),ever,ever,false), Span(9,10,List(4),no,-,false), Span(6,7,List(5),promised,promise-01,false), Span(2,3,List(7, 6),months,(temporal-quantity :unit month),false), Span(1,2,List(8),few,few,false)),Map(2 -> want-01, 5 -> promise-01, 8 -> few, 7 -> month, 1 -> private, 4 -> -, 6 -> temporal-quantity, 0 -> again, 3 -> ever),Map(e -> ever, w -> want-01, t -> temporal-quantity, p2 -> promise-01, m -> month, p -> private, a -> again, - -> -, f -> few))),[Ljava.lang.String;@3caea688,Annotation([Ljava.lang.String;@6e3749d7,[Ljava.lang.String;@6fd0fac8,[Ljava.lang.String;@10099d2),Annotation([Ljava.lang.String;@4e72aa81,[Ljava.lang.String;@4a182363,[Ledu.cmu.lti.nlp.amr.Dependency;@76bb5e95),Annotation([Ljava.lang.String;@73ec519,[Ljava.lang.String;@29fdf006,[Ljava.lang.String;@5e992f73),Annotation([Ljava.lang.String;@1afa578a,[Ljava.lang.String;@298932dc,[Ledu.cmu.lti.nlp.amr.Entity;@6e6a1ed1))
AMR:
(a / again, degree, p / private)
(f / few, op, t / temporal-quantity)
(p2 / promise-01, ARG0, t / temporal-quantity)
(p2 / promise-01, ARG1, w / want-01)
(t / temporal-quantity, unit, m / month)
(w / want-01, ARG1, p / private)
(w / want-01, polarity, - / -)
(w / want-01, time, e / ever)

Decoded in 99,987 microseconds
Sentence: the weekends solent points races promise a closefought admirals cup

Spans:
Span 9-10:  cup => cup
Span 3-4:  points => point
Span 5-6:  promise => promise-01
Span 4-5:  races => race
Span 1-2:  weekends => weekend

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),cup,cup,false), Span(5,6,List(1),promise,promise-01,false), Span(4,5,List(2),races,race,false), Span(3,4,List(3),points,point,false), Span(1,2,List(4),weekends,weekend,false)),Map(2 -> race, 1 -> promise-01, 4 -> weekend, 0 -> cup, 3 -> point),Map(w -> weekend, p2 -> point, p -> promise-01, r -> race, c -> cup))),[Ljava.lang.String;@790d63f8,Annotation([Ljava.lang.String;@5e1e6cde,[Ljava.lang.String;@1f7d9318,[Ljava.lang.String;@6d441cce),Annotation([Ljava.lang.String;@12bf506d,[Ljava.lang.String;@4e392db8,[Ledu.cmu.lti.nlp.amr.Dependency;@be8b327),Annotation([Ljava.lang.String;@5a49cb8c,[Ljava.lang.String;@22d282a3,[Ljava.lang.String;@2a7ead31),Annotation([Ljava.lang.String;@629c81c2,[Ljava.lang.String;@110b1a22,[Ledu.cmu.lti.nlp.amr.Entity;@6fe0b6eb))
AMR:
(p / promise-01, ARG0, r / race)
(p / promise-01, ARG1, c / cup)
(p / promise-01, time, w / weekend)
(p2 / point, purpose, p / promise-01)

Decoded in 51,344 microseconds
Sentence: mr bob morgan promised to call a meeting in may or june

Spans:
Span 11-12:  june => (date-entity :month 6)
Span 9-10:  may => (date-entity :month 5)
Span 7-8:  meeting => meet-03
Span 10-11:  or => or
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),june,(date-entity :month 6),false), Span(10,11,List(2),or,or,false), Span(9,10,List(4, 3),may,(date-entity :month 5),false), Span(7,8,List(5),meeting,meet-03,false), Span(3,4,List(6),promised,promise-01,false)),Map(2 -> or, 5 -> meet-03, 1 -> 6, 4 -> 5, 6 -> promise-01, 0 -> date-entity, 3 -> date-entity),Map(5 -> 5, m -> meet-03, d -> date-entity, p -> promise-01, d2 -> date-entity, 6 -> 6, o -> or))),[Ljava.lang.String;@a0937af,Annotation([Ljava.lang.String;@6326c74e,[Ljava.lang.String;@6e704bd,[Ljava.lang.String;@28e817d5),Annotation([Ljava.lang.String;@1d74b5ee,[Ljava.lang.String;@59542b5d,[Ledu.cmu.lti.nlp.amr.Dependency;@24eb147c),Annotation([Ljava.lang.String;@458debd3,[Ljava.lang.String;@68758d51,[Ljava.lang.String;@7d90f66a),Annotation([Ljava.lang.String;@3821e98d,[Ljava.lang.String;@3a6c44c5,[Ledu.cmu.lti.nlp.amr.Entity;@1a16ff7a))
AMR:
(d / date-entity, month, 6 / 6)
(d2 / date-entity, month, 5 / 5)
(m / meet-03, ARG0, o / or)
(o / or, op, d / date-entity)
(o / or, op, d2 / date-entity)
(p / promise-01, ARG1, m / meet-03)

Decoded in 20,967 microseconds
Sentence: for instance 2000 plants that promise to be valuable in treating cancer come from the rainforests

Spans:
Span 2-3:  2000 => (date-entity :year 2000)
Span 11-12:  cancer => cancer
Span 3-4:  plants => plant
Span 5-6:  promise => promise-01
Span 10-11:  treating => treat-03
Span 8-9:  valuable => value-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),cancer,cancer,false), Span(10,11,List(1),treating,treat-03,false), Span(8,9,List(2),valuable,value-01,false), Span(5,6,List(3),promise,promise-01,false), Span(3,4,List(4),plants,plant,false), Span(2,3,List(6, 5),2000,(date-entity :year 2000),false)),Map(2 -> value-01, 5 -> date-entity, 1 -> treat-03, 4 -> plant, 6 -> 2000, 0 -> cancer, 3 -> promise-01),Map(2 -> 2000, t -> treat-03, p2 -> plant, d -> date-entity, v -> value-01, p -> promise-01, c -> cancer))),[Ljava.lang.String;@5bdeaff7,Annotation([Ljava.lang.String;@78f2b03f,[Ljava.lang.String;@5113622,[Ljava.lang.String;@2cf8f4c7),Annotation([Ljava.lang.String;@c8e4be2,[Ljava.lang.String;@5217e8de,[Ledu.cmu.lti.nlp.amr.Dependency;@1fb970ed),Annotation([Ljava.lang.String;@47a4e7e0,[Ljava.lang.String;@1b7347df,[Ljava.lang.String;@2d738f8d),Annotation([Ljava.lang.String;@7dd5894a,[Ljava.lang.String;@4e2899d0,[Ledu.cmu.lti.nlp.amr.Entity;@4b8a4ec6))
AMR:
(d / date-entity, year, 2 / 2000)
(p / promise-01, ARG0, p2 / plant)
(p / promise-01, ARG1, v / value-01)
(t / treat-03, ARG0, d / date-entity)
(t / treat-03, ARG1, c / cancer)
(v / value-01, ARG1, t / treat-03)

Decoded in 57,977 microseconds
Sentence: like everything they touch the pet shop boys tour promises to be orchestrated with an imagination and attention to detail that makes most of their competitors look positively pedestrian

Spans:
Span 16-17:  and => and
Span 17-18:  attention => attention
Span 7-8:  boys => boy
Span 25-26:  competitors => company
Span 19-20:  detail => detail-01
Span 1-2:  everything => everything
Span 22-23:  most => most
Span 12-13:  orchestrated => orchestrate-01
Span 28-29:  pedestrian => pedestrian
Span 5-6:  pet => pet
Span 27-28:  positively => positive
Span 9-10:  promises => promise-01
Span 6-7:  shop => shop
Span 2-3:  they => they
Span 3-4:  touch => touch-01
Span 8-9:  tour => tour-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),pedestrian,pedestrian,false), Span(27,28,List(1),positively,positive,false), Span(25,26,List(2),competitors,company,false), Span(22,23,List(3),most,most,false), Span(19,20,List(4),detail,detail-01,false), Span(17,18,List(5),attention,attention,false), Span(16,17,List(6),and,and,false), Span(12,13,List(7),orchestrated,orchestrate-01,false), Span(9,10,List(8),promises,promise-01,false), Span(8,9,List(9),tour,tour-01,false), Span(7,8,List(10),boys,boy,false), Span(6,7,List(11),shop,shop,false), Span(5,6,List(12),pet,pet,false), Span(3,4,List(13),touch,touch-01,false), Span(2,3,List(14),they,they,false), Span(1,2,List(15),everything,everything,false)),Map(2 -> company, 5 -> attention, 12 -> pet, 15 -> everything, 8 -> promise-01, 7 -> orchestrate-01, 1 -> positive, 4 -> detail-01, 11 -> shop, 14 -> they, 6 -> and, 0 -> pedestrian, 9 -> tour-01, 3 -> most, 10 -> boy, 13 -> touch-01),Map(e -> everything, t -> tour-01, b -> boy, p2 -> positive, s -> shop, m -> most, d -> detail-01, t3 -> they, p -> pedestrian, a -> attention, p4 -> pet, t2 -> touch-01, a2 -> and, c -> company, o -> orchestrate-01, p3 -> promise-01))),[Ljava.lang.String;@6539cfe8,Annotation([Ljava.lang.String;@3680bc43,[Ljava.lang.String;@3dc7eea9,[Ljava.lang.String;@1105b8ef),Annotation([Ljava.lang.String;@eb05ba4,[Ljava.lang.String;@5c507384,[Ledu.cmu.lti.nlp.amr.Dependency;@25d00e75),Annotation([Ljava.lang.String;@7e6536b7,[Ljava.lang.String;@26eb6935,[Ljava.lang.String;@29482a89),Annotation([Ljava.lang.String;@40e09d8b,[Ljava.lang.String;@5a8731f3,[Ledu.cmu.lti.nlp.amr.Entity;@61e076f3))
AMR:
(a2 / and, op, a / attention)
(a2 / and, op, d / detail-01)
(a2 / and, op, p3 / promise-01)
(b / boy, mod, s / shop)
(c / company, quant, m / most)
(d / detail-01, ARG0, c / company)
(o / orchestrate-01, ARG0, t3 / they)
(p / pedestrian, mod, p2 / positive)
(p3 / promise-01, ARG0, t / tour-01)
(p3 / promise-01, ARG1, p / pedestrian)
(p3 / promise-01, ARG2, o / orchestrate-01)
(t / tour-01, ARG0, b / boy)
(t / tour-01, ARG1, p4 / pet)
(t2 / touch-01, ARG0, t3 / they)
(t2 / touch-01, ARG1, e / everything)

Decoded in 209,153 microseconds
Sentence: mr lula whose party is committed to declaring an immediate moratorium on brazils dollars 114bn foreign debt has promised to pick a fight of an international scale with our creditors

Spans:
Span 5-6:  committed => commit-01
Span 16-17:  debt => debt
Span 7-8:  declaring => declare-01
Span 13-14:  dollars => (monetary-quantity :unit dollar)
Span 22-23:  fight => fight-01
Span 15-16:  foreign => foreign
Span 9-10:  immediate => immediate
Span 25-26:  international => international
Span 10-11:  moratorium => moratorium
Span 3-4:  party => party
Span 20-21:  pick => pick-01
Span 18-19:  promised => promise-01
Span 26-27:  scale => scale

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),scale,scale,false), Span(25,26,List(1),international,international,false), Span(22,23,List(2),fight,fight-01,false), Span(20,21,List(3),pick,pick-01,false), Span(18,19,List(4),promised,promise-01,false), Span(16,17,List(5),debt,debt,false), Span(15,16,List(6),foreign,foreign,false), Span(13,14,List(8, 7),dollars,(monetary-quantity :unit dollar),false), Span(10,11,List(9),moratorium,moratorium,false), Span(9,10,List(10),immediate,immediate,false), Span(7,8,List(11),declaring,declare-01,false), Span(5,6,List(12),committed,commit-01,false), Span(3,4,List(13),party,party,false)),Map(2 -> fight-01, 5 -> debt, 12 -> commit-01, 8 -> dollar, 7 -> monetary-quantity, 1 -> international, 4 -> promise-01, 11 -> declare-01, 6 -> foreign, 0 -> scale, 9 -> moratorium, 3 -> pick-01, 10 -> immediate, 13 -> party),Map(m2 -> moratorium, d3 -> declare-01, p2 -> promise-01, s -> scale, d -> debt, m -> monetary-quantity, p -> pick-01, d2 -> dollar, i2 -> immediate, i -> international, c -> commit-01, f2 -> foreign, f -> fight-01, p3 -> party))),[Ljava.lang.String;@38d9e447,Annotation([Ljava.lang.String;@691a0e79,[Ljava.lang.String;@2dac5fd7,[Ljava.lang.String;@fc833ae),Annotation([Ljava.lang.String;@20b8ec9a,[Ljava.lang.String;@4cb5833e,[Ledu.cmu.lti.nlp.amr.Dependency;@20bb82ca),Annotation([Ljava.lang.String;@7687ac8f,[Ljava.lang.String;@45521d14,[Ljava.lang.String;@11f32f9a),Annotation([Ljava.lang.String;@74ba30aa,[Ljava.lang.String;@6bd124c4,[Ledu.cmu.lti.nlp.amr.Entity;@6fc4f728))
AMR:
(c / commit-01, ARG0, d / debt)
(c / commit-01, ARG1, p3 / party)
(c / commit-01, ARG2, d3 / declare-01)
(d / debt, mod, f2 / foreign)
(d3 / declare-01, ARG1, m2 / moratorium)
(f / fight-01, ARG1, s / scale)
(m / monetary-quantity, unit, d2 / dollar)
(m2 / moratorium, time, i2 / immediate)
(m2 / moratorium, topic, m / monetary-quantity)
(p / pick-01, ARG1, f / fight-01)
(p2 / promise-01, ARG1, d / debt)
(p2 / promise-01, ARG2, p / pick-01)
(s / scale, mod, i / international)

Decoded in 244,600 microseconds
Sentence: in the oresteia produced in 458 agamemnon rules not in mycenae as in homer nor in sparta or amyclae as in the lyric poets but in argos and orestes promises that argos will requite his acquittal by an athenian court by helping athens in time of war

NER Entity: (country :name (name :op "argos"))
NER Entity: (country :name (name :op "argos"))
NER Entity: (country :name (name :op "athens"))
NER Entity: (country :name (name :op "argos"))
NER Entity: (country :name (name :op "argos"))
Spans:
Span 27-28:  and => and
Span 31-32:  argos => (company :name (name :op "Argos"))
Span 26-27:  argos => (company :name (name :op "Argos"))
Span 24-25:  but => contrast-01
Span 39-40:  court => court
Span 41-42:  helping => help-01
Span 17-18:  or => or
Span 23-24:  poets => poet
Span 3-4:  produced => produce-01
Span 29-30:  promises => promise-01
Span 7-8:  rules => rule
Span 44-45:  time => time
Span 46-47:  war => war

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),war,war,false), Span(44,45,List(1),time,time,false), Span(41,42,List(2),helping,help-01,false), Span(39,40,List(3),court,court,false), Span(31,32,List(6, 5, 4),argos,(company :name (name :op "Argos")),false), Span(29,30,List(7),promises,promise-01,false), Span(27,28,List(8),and,and,false), Span(26,27,List(11, 10, 9),argos,(company :name (name :op "Argos")),false), Span(24,25,List(12),but,contrast-01,false), Span(23,24,List(13),poets,poet,false), Span(17,18,List(14),or,or,false), Span(7,8,List(15),rules,rule,false), Span(3,4,List(16),produced,produce-01,false)),Map(2 -> help-01, 5 -> name, 12 -> contrast-01, 15 -> rule, 8 -> and, 7 -> promise-01, 1 -> time, 4 -> company, 11 -> "Argos", 14 -> or, 6 -> "Argos", 0 -> war, 9 -> company, 16 -> produce-01, 3 -> court, 10 -> name, 13 -> poet),Map(w -> war, n -> name, h -> help-01, t -> time, p2 -> poet, c4 -> contrast-01, p -> promise-01, a -> and, c3 -> company, r -> rule, c -> court, o -> or, p3 -> produce-01, c2 -> company, n2 -> name))),[Ljava.lang.String;@6c3e9c6b,Annotation([Ljava.lang.String;@28f6c52,[Ljava.lang.String;@16107cce,[Ljava.lang.String;@1471c3b3),Annotation([Ljava.lang.String;@38e72741,[Ljava.lang.String;@4fc23996,[Ledu.cmu.lti.nlp.amr.Dependency;@5852cfc2),Annotation([Ljava.lang.String;@24c5f6db,[Ljava.lang.String;@40d1b6b9,[Ljava.lang.String;@8334cee),Annotation([Ljava.lang.String;@5fffa176,[Ljava.lang.String;@7c17b37,[Ledu.cmu.lti.nlp.amr.Entity;@2f805bdb))
AMR:
(a / and, op, c3 / company)
(a / and, op, p / promise-01)
(a / and, op, p2 / poet)
(c / court, topic, h / help-01)
(c2 / company, name, n / name)
(c3 / company, name, n2 / name)
(c4 / contrast-01, ARG1, a / and)
(h / help-01, ARG0, o / or)
(h / help-01, ARG1, t / time)
(n / name, op, "Argos")
(n2 / name, op, "Argos")
(p / promise-01, ARG0, c / court)
(p / promise-01, ARG1, c2 / company)
(p3 / produce-01, ARG0, c3 / company)
(p3 / produce-01, ARG1, r / rule)
(t / time, topic, w / war)

Decoded in 183,243 microseconds
Sentence: a cabinet reshuffle is expected soon in which she will dump some of her more incompetent ministers but include new ones who have been promised jobs if they deserted the opposition

Spans:
Span 17-18:  but => contrast-01
Span 1-2:  cabinet => cabinet
Span 28-29:  deserted => desert-01
Span 4-5:  expected => expect-01
Span 18-19:  include => include-01
Span 15-16:  incompetent => incompetence
Span 25-26:  jobs => job
Span 16-17:  ministers => (have-org-role-91 :ARG2 minister)
Span 19-20:  new => new
Span 20-21:  ones => one
Span 30-31:  opposition => oppose-01
Span 24-25:  promised => promise-01
Span 8-9:  she => she
Span 11-12:  some => some
Span 5-6:  soon => soon
Span 27-28:  they => they

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),opposition,oppose-01,false), Span(28,29,List(1),deserted,desert-01,false), Span(27,28,List(2),they,they,false), Span(25,26,List(3),jobs,job,false), Span(24,25,List(4),promised,promise-01,false), Span(20,21,List(5),ones,one,false), Span(19,20,List(6),new,new,false), Span(18,19,List(7),include,include-01,false), Span(17,18,List(8),but,contrast-01,false), Span(16,17,List(10, 9),ministers,(have-org-role-91 :ARG2 minister),false), Span(15,16,List(11),incompetent,incompetence,false), Span(11,12,List(12),some,some,false), Span(8,9,List(13),she,she,false), Span(5,6,List(14),soon,soon,false), Span(4,5,List(15),expected,expect-01,false), Span(1,2,List(16),cabinet,cabinet,false)),Map(2 -> they, 5 -> one, 12 -> some, 15 -> expect-01, 8 -> contrast-01, 7 -> include-01, 1 -> desert-01, 4 -> promise-01, 11 -> incompetence, 14 -> soon, 6 -> new, 0 -> oppose-01, 9 -> have-org-role-91, 16 -> cabinet, 3 -> job, 10 -> minister, 13 -> she),Map(e -> expect-01, n -> new, h -> have-org-role-91, s2 -> she, t -> they, j -> job, s -> some, d -> desert-01, m -> minister, p -> promise-01, o2 -> one, i2 -> incompetence, i -> include-01, s3 -> soon, c -> contrast-01, o -> oppose-01, c2 -> cabinet))),[Ljava.lang.String;@140e9f3a,Annotation([Ljava.lang.String;@4bf7a31f,[Ljava.lang.String;@6ef66f2f,[Ljava.lang.String;@74fdaf92),Annotation([Ljava.lang.String;@3b11d63f,[Ljava.lang.String;@1008e065,[Ledu.cmu.lti.nlp.amr.Dependency;@36c40f1c),Annotation([Ljava.lang.String;@1bc135b,[Ljava.lang.String;@629abc40,[Ljava.lang.String;@1cbd4053),Annotation([Ljava.lang.String;@4cca17e2,[Ljava.lang.String;@67e61dd0,[Ledu.cmu.lti.nlp.amr.Entity;@34af77fa))
AMR:
(c / contrast-01, ARG1, e / expect-01)
(c / contrast-01, ARG2, i / include-01)
(d / desert-01, ARG0, t / they)
(d / desert-01, ARG1, p / promise-01)
(e / expect-01, ARG0, s2 / she)
(e / expect-01, ARG1, s / some)
(e / expect-01, time, s3 / soon)
(h / have-org-role-91, ARG0, s2 / she)
(h / have-org-role-91, ARG1, c2 / cabinet)
(h / have-org-role-91, ARG2, m / minister)
(i / include-01, ARG1, o2 / one)
(m / minister, mod, i2 / incompetence)
(o / oppose-01, ARG1, t / they)
(o2 / one, mod, n / new)
(p / promise-01, ARG0, o2 / one)
(p / promise-01, ARG1, j / job)

Decoded in 178,960 microseconds
Sentence: people embraced and wept promising to stay in touch only to realise in some cases that they had no addresses to exchange

Spans:
Span 19-20:  addresses => address
Span 2-3:  and => and
Span 14-15:  cases => case
Span 21-22:  exchange => exchange-01
Span 18-19:  no => -
Span 9-10:  only => only
Span 4-5:  promising => promise-01
Span 11-12:  realise => realize-01
Span 13-14:  some => some
Span 6-7:  stay => stay-01
Span 16-17:  they => they
Span 8-9:  touch => touch-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),exchange,exchange-01,false), Span(19,20,List(1),addresses,address,false), Span(18,19,List(2),no,-,false), Span(16,17,List(3),they,they,false), Span(14,15,List(4),cases,case,false), Span(13,14,List(5),some,some,false), Span(11,12,List(6),realise,realize-01,false), Span(9,10,List(7),only,only,false), Span(8,9,List(8),touch,touch-01,false), Span(6,7,List(9),stay,stay-01,false), Span(4,5,List(10),promising,promise-01,false), Span(2,3,List(11),and,and,false)),Map(2 -> -, 5 -> some, 8 -> touch-01, 7 -> only, 1 -> address, 11 -> and, 4 -> case, 6 -> realize-01, 9 -> stay-01, 0 -> exchange-01, 10 -> promise-01, 3 -> they),Map(e -> exchange-01, s2 -> stay-01, t -> they, s -> some, p -> promise-01, a -> address, t2 -> touch-01, a2 -> and, r -> realize-01, - -> -, c -> case, o -> only))),[Ljava.lang.String;@6bedd91b,Annotation([Ljava.lang.String;@4c48b2f8,[Ljava.lang.String;@38dddee8,[Ljava.lang.String;@6e556e82),Annotation([Ljava.lang.String;@2aca5165,[Ljava.lang.String;@48a5d3d5,[Ledu.cmu.lti.nlp.amr.Dependency;@7ef66a35),Annotation([Ljava.lang.String;@63b6feb1,[Ljava.lang.String;@30b499c,[Ljava.lang.String;@5a0da253),Annotation([Ljava.lang.String;@351c2555,[Ljava.lang.String;@4ad70ab0,[Ledu.cmu.lti.nlp.amr.Entity;@6bfecf32))
AMR:
(a / address, polarity, - / -)
(c / case, poss, t / they)
(c / case, quant, s / some)
(e / exchange-01, ARG1, a / address)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, t2 / touch-01)
(p / promise-01, ARG2, s2 / stay-01)
(r / realize-01, ARG1, c / case)
(s2 / stay-01, ARG1, r / realize-01)
(s2 / stay-01, polarity, - / -)
(t2 / touch-01, ARG1, o / only)

Decoded in 83,763 microseconds
Sentence: chancellor helmut kohls coalition government is likely to announce later this week that it has accepted the bundesbank proposal which gives east germans a much less favourable exchange rate than they were promised during the election campaign

Spans:
Span 15-16:  accepted => accept-01
Span 8-9:  announce => announce-01
Span 36-37:  campaign => campaign-01
Span 3-4:  coalition => coalition
Span 21-22:  east => east
Span 35-36:  election => elect-01
Span 27-28:  exchange => exchange-01
Span 22-23:  germans => (person :mod (country :name (name :op "Germany")))
Span 20-21:  gives => give-01
Span 13-14:  it => it
Span 9-10:  later => late
Span 25-26:  less => less
Span 6-7:  likely => likely
Span 24-25:  much => much
Span 32-33:  promised => promise-01
Span 18-19:  proposal => propose-01
Span 28-29:  rate => rate
Span 30-31:  they => they
Span 10-11:  this => this
Span 11-12:  week => week

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),campaign,campaign-01,false), Span(35,36,List(1),election,elect-01,false), Span(32,33,List(2),promised,promise-01,false), Span(30,31,List(3),they,they,false), Span(28,29,List(4),rate,rate,false), Span(27,28,List(5),exchange,exchange-01,false), Span(25,26,List(6),less,less,false), Span(24,25,List(7),much,much,false), Span(22,23,List(11, 10, 9, 8),germans,(person :mod (country :name (name :op "Germany"))),false), Span(21,22,List(12),east,east,false), Span(20,21,List(13),gives,give-01,false), Span(18,19,List(14),proposal,propose-01,false), Span(15,16,List(15),accepted,accept-01,false), Span(13,14,List(16),it,it,false), Span(11,12,List(17),week,week,false), Span(10,11,List(18),this,this,false), Span(9,10,List(19),later,late,false), Span(8,9,List(20),announce,announce-01,false), Span(6,7,List(21),likely,likely,false), Span(3,4,List(22),coalition,coalition,false)),Map(2 -> promise-01, 5 -> exchange-01, 12 -> east, 15 -> accept-01, 8 -> person, 21 -> likely, 18 -> this, 7 -> much, 17 -> week, 1 -> elect-01, 4 -> rate, 11 -> "Germany", 14 -> propose-01, 20 -> announce-01, 6 -> less, 22 -> coalition, 0 -> campaign-01, 9 -> country, 16 -> it, 19 -> late, 3 -> they, 10 -> name, 13 -> give-01),Map(e -> elect-01, w -> week, n -> name, t -> they, e2 -> exchange-01, p2 -> person, l3 -> likely, m -> much, p -> promise-01, g -> give-01, c3 -> coalition, a -> accept-01, t2 -> this, l2 -> late, a2 -> announce-01, i -> it, r -> rate, c -> campaign-01, l -> less, p3 -> propose-01, e3 -> east, c2 -> country))),[Ljava.lang.String;@2d668cab,Annotation([Ljava.lang.String;@279d45d6,[Ljava.lang.String;@4653f8eb,[Ljava.lang.String;@32fb305f),Annotation([Ljava.lang.String;@924c71f,[Ljava.lang.String;@4d8cc8e9,[Ledu.cmu.lti.nlp.amr.Dependency;@55da60c5),Annotation([Ljava.lang.String;@7407518b,[Ljava.lang.String;@c7ab830,[Ljava.lang.String;@4cd25db6),Annotation([Ljava.lang.String;@7067f21,[Ljava.lang.String;@3b845321,[Ledu.cmu.lti.nlp.amr.Entity;@6c6dba0d))
AMR:
(a / accept-01, ARG0, i / it)
(a / accept-01, ARG1, p3 / propose-01)
(a2 / announce-01, ARG1, p3 / propose-01)
(a2 / announce-01, time, l2 / late)
(c / campaign-01, ARG1, e / elect-01)
(c2 / country, name, n / name)
(e2 / exchange-01, ARG0, c3 / coalition)
(e2 / exchange-01, ARG1, r / rate)
(g / give-01, ARG0, p3 / propose-01)
(g / give-01, ARG1, r / rate)
(g / give-01, ARG2, p2 / person)
(g / give-01, time, l / less)
(l / less, quant, m / much)
(l2 / late, op, w / week)
(l3 / likely, domain, a2 / announce-01)
(n / name, op, "Germany")
(p / promise-01, ARG0, r / rate)
(p / promise-01, ARG1, t / they)
(p / promise-01, ARG2, c / campaign-01)
(p2 / person, mod, c2 / country)
(p2 / person, mod, e3 / east)
(w / week, mod, t2 / this)

Decoded in 1,152,572 microseconds
Sentence:   according to health visitor and group leader ms frances davies were not promising a miracle cure but if people really want to stop smoking they may be able to manage it with the support of the group even though they failed on their own

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   according to health visitor and group leader ms frances davies were not promising a miracle cure but if people really want to stop smoking they may be able to manage it with the support of the group even though they failed on their own
myTokenized = according to health visitor and group leader ms frances davies were not promising a miracle cure but if people really want to stop smoking they may be able to manage it with the support of the group even though they failed on their own
i = 0
prefix = List(according)
regexr = \Qa\E ?\Qc\E ?\Qc\E ?\Qo\E ?\Qr\E ?\Qd\E ?\Qi\E ?\Qn\E ?\Qg\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: an exciting time is promised if theres a new romance

Spans:
Span 1-2:  exciting => excite-01
Span 8-9:  new => new
Span 4-5:  promised => promise-01
Span 2-3:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),new,new,false), Span(4,5,List(1),promised,promise-01,false), Span(2,3,List(2),time,time,false), Span(1,2,List(3),exciting,excite-01,false)),Map(2 -> time, 1 -> promise-01, 0 -> new, 3 -> excite-01),Map(e -> excite-01, n -> new, t -> time, p -> promise-01))),[Ljava.lang.String;@549448df,Annotation([Ljava.lang.String;@533c53da,[Ljava.lang.String;@1da537e7,[Ljava.lang.String;@49f92de5),Annotation([Ljava.lang.String;@6343b54,[Ljava.lang.String;@4f230afa,[Ledu.cmu.lti.nlp.amr.Dependency;@5a5cbad),Annotation([Ljava.lang.String;@47decdc0,[Ljava.lang.String;@74961d1c,[Ljava.lang.String;@2b515510),Annotation([Ljava.lang.String;@68a7a3a7,[Ljava.lang.String;@55e95e9e,[Ledu.cmu.lti.nlp.amr.Entity;@4c430322))
AMR:
(e / excite-01, ARG0, t / time)
(e / excite-01, ARG1, n / new)
(p / promise-01, ARG1, t / time)

Decoded in 10,513 microseconds
Sentence: peter dalembord who shared her fears had promised to restrain sharpe if he appeared

Spans:
Span 13-14:  appeared => appear-01
Span 5-6:  fears => fear-01
Span 12-13:  he => he
Span 7-8:  promised => promise-01
Span 9-10:  restrain => restrain-01
Span 3-4:  shared => share-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),appeared,appear-01,false), Span(12,13,List(1),he,he,false), Span(9,10,List(2),restrain,restrain-01,false), Span(7,8,List(3),promised,promise-01,false), Span(5,6,List(4),fears,fear-01,false), Span(3,4,List(5),shared,share-01,false)),Map(2 -> restrain-01, 5 -> share-01, 1 -> he, 4 -> fear-01, 0 -> appear-01, 3 -> promise-01),Map(h -> he, s -> share-01, p -> promise-01, a -> appear-01, r -> restrain-01, f -> fear-01))),[Ljava.lang.String;@4382d44b,Annotation([Ljava.lang.String;@423faa8d,[Ljava.lang.String;@61d630f5,[Ljava.lang.String;@35285701),Annotation([Ljava.lang.String;@6b681dea,[Ljava.lang.String;@8424bd,[Ledu.cmu.lti.nlp.amr.Dependency;@6387f48e),Annotation([Ljava.lang.String;@72c8c9ae,[Ljava.lang.String;@5c30f961,[Ljava.lang.String;@13447e90),Annotation([Ljava.lang.String;@75d129d1,[Ljava.lang.String;@771094c4,[Ledu.cmu.lti.nlp.amr.Entity;@61970ced))
AMR:
(a / appear-01, ARG0, h / he)
(a / appear-01, ARG1, r / restrain-01)
(p / promise-01, ARG0, f / fear-01)
(p / promise-01, ARG1, r / restrain-01)
(s / share-01, ARG1, p / promise-01)

Decoded in 45,032 microseconds
Sentence: but we can promise to have something ready to televise if you decide to come

Spans:
Span 0-1:  but => contrast-01
Span 2-3:  can => possible
Span 12-13:  decide => decide-01
Span 3-4:  promise => promise-01
Span 7-8:  ready => ready-01
Span 6-7:  something => something
Span 1-2:  we => we
Span 11-12:  you => you

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),decide,decide-01,false), Span(11,12,List(1),you,you,false), Span(7,8,List(2),ready,ready-01,false), Span(6,7,List(3),something,something,false), Span(3,4,List(4),promise,promise-01,false), Span(2,3,List(5),can,possible,false), Span(1,2,List(6),we,we,false), Span(0,1,List(7),but,contrast-01,false)),Map(2 -> ready-01, 5 -> possible, 7 -> contrast-01, 1 -> you, 4 -> promise-01, 6 -> we, 0 -> decide-01, 3 -> something),Map(w -> we, p2 -> possible, s -> something, d -> decide-01, p -> promise-01, y -> you, r -> ready-01, c -> contrast-01))),[Ljava.lang.String;@3d1cda9,Annotation([Ljava.lang.String;@43151434,[Ljava.lang.String;@1ce18454,[Ljava.lang.String;@19b6b59c),Annotation([Ljava.lang.String;@2a4d21f4,[Ljava.lang.String;@2df02fde,[Ledu.cmu.lti.nlp.amr.Dependency;@73d6af61),Annotation([Ljava.lang.String;@139444b1,[Ljava.lang.String;@6b29ca81,[Ljava.lang.String;@4ae121e),Annotation([Ljava.lang.String;@402771f8,[Ljava.lang.String;@5dab71af,[Ledu.cmu.lti.nlp.amr.Entity;@22b4c834))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, p2 / possible)
(d / decide-01, ARG0, y / you)
(p / promise-01, ARG0, w / we)
(p / promise-01, ARG1, s / something)
(r / ready-01, ARG1, s / something)
(r / ready-01, time, d / decide-01)

Decoded in 69,314 microseconds
Sentence: before president robert mugabes zimbabwe african national union zanupf government took power in 1980 promising land reform 6000 mostly white commercial farmers owned the best half of the countrys farming land while 800000 black families crowded into the remainder

NER Entity: (country :name (name :op "zimbabwe"))
mkDayMonthYear(800000,00,00,80)
mkDayMonthYear(800000,00,00,80)
Spans:
Span 13-14:  1980 => (date-entity :year 1980)
Span 17-18:  6000 => 6000
Span 32-33:  800000 => (date-entity :day 0 :month 0 :year 80)
Span 0-1:  before => before
Span 33-34:  black => black
Span 20-21:  commercial => commerce
Span 35-36:  crowded => crowd-01
Span 34-35:  families => family
Span 21-22:  farmers => (person :ARG0-of farm-01)
Span 29-30:  farming => farm-01
Span 25-26:  half => half
Span 30-31:  land => land
Span 15-16:  land => land
Span 18-19:  mostly => most
Span 6-7:  national => nation
Span 22-23:  owned => own-01
Span 11-12:  power => power
Span 1-2:  president => (have-org-role-91 :ARG2 president)
Span 14-15:  promising => promise-01
Span 16-17:  reform => reform-01
Span 38-39:  remainder => remainder
Span 7-8:  union => union
Span 19-20:  white => white

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),remainder,remainder,false), Span(35,36,List(1),crowded,crowd-01,false), Span(34,35,List(2),families,family,false), Span(33,34,List(3),black,black,false), Span(32,33,List(7, 6, 5, 4),800000,(date-entity :day 0 :month 0 :year 80),false), Span(30,31,List(8),land,land,false), Span(29,30,List(9),farming,farm-01,false), Span(25,26,List(10),half,half,false), Span(22,23,List(11),owned,own-01,false), Span(21,22,List(13, 12),farmers,(person :ARG0-of farm-01),false), Span(20,21,List(14),commercial,commerce,false), Span(19,20,List(15),white,white,false), Span(18,19,List(16),mostly,most,false), Span(17,18,List(17),6000,6000,false), Span(16,17,List(18),reform,reform-01,false), Span(15,16,List(19),land,land,false), Span(14,15,List(20),promising,promise-01,false), Span(13,14,List(22, 21),1980,(date-entity :year 1980),false), Span(11,12,List(23),power,power,false), Span(7,8,List(24),union,union,false), Span(6,7,List(25),national,nation,false), Span(1,2,List(27, 26),president,(have-org-role-91 :ARG2 president),false), Span(0,1,List(28),before,before,false)),Map(2 -> family, 5 -> 0, 27 -> president, 12 -> person, 8 -> land, 15 -> white, 21 -> date-entity, 18 -> reform-01, 24 -> union, 7 -> 80, 1 -> crowd-01, 17 -> 6000, 23 -> power, 26 -> have-org-role-91, 4 -> date-entity, 11 -> own-01, 14 -> commerce, 20 -> promise-01, 28 -> before, 6 -> 0, 9 -> farm-01, 0 -> remainder, 22 -> 1980, 16 -> most, 19 -> land, 10 -> half, 3 -> black, 25 -> nation, 13 -> farm-01),Map(n -> nation, w -> white, h -> half, h2 -> have-org-role-91, b -> black, b2 -> before, 8 -> 80, p2 -> promise-01, d -> date-entity, m -> most, 1 -> 1980, r2 -> reform-01, p -> person, p4 -> president, d2 -> date-entity, f3 -> farm-01, 02 -> 0, l2 -> land, r -> remainder, c -> crowd-01, 6 -> 6000, f2 -> farm-01, l -> land, u -> union, 0 -> 0, f -> family, o -> own-01, p3 -> power, c2 -> commerce))),[Ljava.lang.String;@4194f034,Annotation([Ljava.lang.String;@1926078f,[Ljava.lang.String;@fba4a2f,[Ljava.lang.String;@f5c5bba),Annotation([Ljava.lang.String;@788a1836,[Ljava.lang.String;@323bbf0d,[Ledu.cmu.lti.nlp.amr.Dependency;@707c083e),Annotation([Ljava.lang.String;@5f015823,[Ljava.lang.String;@5141928f,[Ljava.lang.String;@27fd13f6),Annotation([Ljava.lang.String;@58298ffc,[Ljava.lang.String;@10ac169c,[Ledu.cmu.lti.nlp.amr.Entity;@12006451))
AMR:
(b2 / before, op, h2 / have-org-role-91)
(c / crowd-01, ARG0, f / family)
(c / crowd-01, ARG1, l / land)
(c / crowd-01, ARG2, r / remainder)
(c / crowd-01, time, d / date-entity)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 8 / 80)
(d2 / date-entity, year, 1 / 1980)
(f / family, mod, b / black)
(f2 / farm-01, ARG1, w / white)
(f3 / farm-01, ARG0, p / person)
(f3 / farm-01, ARG1, c2 / commerce)
(f3 / farm-01, time, m / most)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, n / nation)
(h2 / have-org-role-91, ARG2, p4 / president)
(l / land, purpose, f2 / farm-01)
(o / own-01, ARG0, p / person)
(o / own-01, ARG1, h / half)
(o / own-01, purpose, c / crowd-01)
(p / person, quant, 6 / 6000)
(p2 / promise-01, ARG0, p / person)
(p2 / promise-01, ARG1, r2 / reform-01)
(p3 / power, purpose, r2 / reform-01)
(r2 / reform-01, ARG1, l2 / land)
(r2 / reform-01, time, d2 / date-entity)
(u / union, mod, n / nation)

Decoded in 1,272,336 microseconds
Sentence: she also warned that honest politicians could not promise the goods and services which only people could provide by adopting the spirit to succeed

Spans:
Span 19-20:  adopting => adopt-01
Span 1-2:  also => also
Span 11-12:  and => and
Span 16-17:  could => possible
Span 6-7:  could => possible
Span 10-11:  goods => good
Span 4-5:  honest => honest
Span 14-15:  only => only
Span 5-6:  politicians => politician
Span 8-9:  promise => promise-01
Span 17-18:  provide => provide-01
Span 12-13:  services => service
Span 0-1:  she => she
Span 21-22:  spirit => spirit
Span 23-24:  succeed => succeed-01
Span 2-3:  warned => warn-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),succeed,succeed-01,false), Span(21,22,List(1),spirit,spirit,false), Span(19,20,List(2),adopting,adopt-01,false), Span(17,18,List(3),provide,provide-01,false), Span(16,17,List(4),could,possible,false), Span(14,15,List(5),only,only,false), Span(12,13,List(6),services,service,false), Span(11,12,List(7),and,and,false), Span(10,11,List(8),goods,good,false), Span(8,9,List(9),promise,promise-01,false), Span(6,7,List(10),could,possible,false), Span(5,6,List(11),politicians,politician,false), Span(4,5,List(12),honest,honest,false), Span(2,3,List(13),warned,warn-01,false), Span(1,2,List(14),also,also,false), Span(0,1,List(15),she,she,false)),Map(2 -> adopt-01, 5 -> only, 12 -> honest, 15 -> she, 8 -> good, 7 -> and, 1 -> spirit, 4 -> possible, 11 -> politician, 14 -> also, 6 -> service, 0 -> succeed-01, 9 -> promise-01, 3 -> provide-01, 10 -> possible, 13 -> warn-01),Map(w -> warn-01, h -> honest, s2 -> spirit, p5 -> politician, p2 -> possible, a3 -> also, s -> succeed-01, s4 -> she, p -> provide-01, g -> good, a -> adopt-01, p4 -> possible, a2 -> and, s3 -> service, o -> only, p3 -> promise-01))),[Ljava.lang.String;@772cf7bc,Annotation([Ljava.lang.String;@293c94c4,[Ljava.lang.String;@484ae502,[Ljava.lang.String;@2d010b62),Annotation([Ljava.lang.String;@1f926603,[Ljava.lang.String;@44675f26,[Ledu.cmu.lti.nlp.amr.Dependency;@5e97dadf),Annotation([Ljava.lang.String;@43a296fd,[Ljava.lang.String;@6766debb,[Ljava.lang.String;@12a8fc06),Annotation([Ljava.lang.String;@1439f77c,[Ljava.lang.String;@69a6f843,[Ledu.cmu.lti.nlp.amr.Entity;@50f52ce5))
AMR:
(a / adopt-01, ARG1, s2 / spirit)
(a / adopt-01, mod, o / only)
(a / adopt-01, purpose, s / succeed-01)
(a2 / and, op, s3 / service)
(p / provide-01, ARG0, g / good)
(p / provide-01, ARG1, a / adopt-01)
(p / provide-01, mod, p2 / possible)
(p3 / promise-01, ARG0, p5 / politician)
(p3 / promise-01, ARG1, g / good)
(p3 / promise-01, ARG2, a2 / and)
(p4 / possible, domain, p3 / promise-01)
(p5 / politician, mod, h / honest)
(w / warn-01, ARG0, s4 / she)
(w / warn-01, ARG1, p3 / promise-01)
(w / warn-01, mod, a3 / also)

Decoded in 368,620 microseconds
Sentence:   apparently she was waiting for some show of defiance and when loring merely returned her look meekly she lost some of her asperity and said ill make enquiries but i cant promise anything

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   apparently she was waiting for some show of defiance and when loring merely returned her look meekly she lost some of her asperity and said ill make enquiries but i cant promise anything
myTokenized = apparently she was waiting for some show of defiance and when loring merely returned her look meekly she lost some of her asperity and said ill make enquiries but i cant promise anything
i = 0
prefix = List(apparently)
regexr = \Qa\E ?\Qp\E ?\Qp\E ?\Qa\E ?\Qr\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Ql\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: labour delegates were warned yesterday that the party would lack electoral credibilty if it promised increases in public spending which could only be met by higher borrowing or taxes

Spans:
Span 26-27:  borrowing => borrow-01
Span 20-21:  could => possible
Span 1-2:  delegates => (person :ARG2-of delegate-01)
Span 10-11:  electoral => elect-01
Span 25-26:  higher => high
Span 15-16:  increases => increase-01
Span 13-14:  it => it
Span 0-1:  labour => labour
Span 9-10:  lack => lack-01
Span 23-24:  met => meet-03
Span 21-22:  only => only
Span 27-28:  or => or
Span 7-8:  party => party
Span 14-15:  promised => promise-01
Span 17-18:  public => public
Span 18-19:  spending => spend-01
Span 28-29:  taxes => tax-01
Span 3-4:  warned => warn-01
Span 4-5:  yesterday => yesterday

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),taxes,tax-01,false), Span(27,28,List(1),or,or,false), Span(26,27,List(2),borrowing,borrow-01,false), Span(25,26,List(3),higher,high,false), Span(23,24,List(4),met,meet-03,false), Span(21,22,List(5),only,only,false), Span(20,21,List(6),could,possible,false), Span(18,19,List(7),spending,spend-01,false), Span(17,18,List(8),public,public,false), Span(15,16,List(9),increases,increase-01,false), Span(14,15,List(10),promised,promise-01,false), Span(13,14,List(11),it,it,false), Span(10,11,List(12),electoral,elect-01,false), Span(9,10,List(13),lack,lack-01,false), Span(7,8,List(14),party,party,false), Span(4,5,List(15),yesterday,yesterday,false), Span(3,4,List(16),warned,warn-01,false), Span(1,2,List(18, 17),delegates,(person :ARG2-of delegate-01),false), Span(0,1,List(19),labour,labour,false)),Map(2 -> borrow-01, 5 -> only, 12 -> elect-01, 15 -> yesterday, 8 -> public, 18 -> delegate-01, 7 -> spend-01, 17 -> person, 1 -> or, 4 -> meet-03, 11 -> it, 14 -> party, 6 -> possible, 0 -> tax-01, 9 -> increase-01, 16 -> warn-01, 19 -> labour, 3 -> high, 10 -> promise-01, 13 -> lack-01),Map(e -> elect-01, w -> warn-01, h -> high, p5 -> person, t -> tax-01, b -> borrow-01, p2 -> public, s -> spend-01, d -> delegate-01, m -> meet-03, y -> yesterday, p -> possible, p4 -> party, o2 -> only, i2 -> it, l2 -> labour, i -> increase-01, l -> lack-01, o -> or, p3 -> promise-01))),[Ljava.lang.String;@250f4a60,Annotation([Ljava.lang.String;@edbf7a2,[Ljava.lang.String;@b5eb44d,[Ljava.lang.String;@768f310f),Annotation([Ljava.lang.String;@32de0c98,[Ljava.lang.String;@100ce93f,[Ledu.cmu.lti.nlp.amr.Dependency;@3fa52f54),Annotation([Ljava.lang.String;@75c65470,[Ljava.lang.String;@2fd1c178,[Ljava.lang.String;@73f4c5ce),Annotation([Ljava.lang.String;@4ae692db,[Ljava.lang.String;@67b38e47,[Ledu.cmu.lti.nlp.amr.Entity;@3d420c81))
AMR:
(b / borrow-01, mod, h / high)
(d / delegate-01, ARG2, p5 / person)
(d / delegate-01, mod, l2 / labour)
(e / elect-01, ARG1, p5 / person)
(i / increase-01, ARG0, i2 / it)
(i / increase-01, ARG1, s / spend-01)
(l / lack-01, ARG0, p4 / party)
(m / meet-03, ARG0, p5 / person)
(m / meet-03, ARG1, b / borrow-01)
(m / meet-03, mod, o2 / only)
(o / or, op, b / borrow-01)
(o / or, op, t / tax-01)
(p / possible, domain, m / meet-03)
(p3 / promise-01, ARG0, i2 / it)
(p3 / promise-01, ARG1, l / lack-01)
(s / spend-01, mod, p2 / public)
(w / warn-01, ARG0, p5 / person)
(w / warn-01, ARG1, l / lack-01)
(w / warn-01, time, y / yesterday)

Decoded in 637,214 microseconds
Sentence: many said they couldnt see any sense in a sexually unstable world in promising to be faithful for life when life might mean 50 years

Spans:
Span 23-24:  50 => 50
Span 5-6:  any => any
Span 16-17:  faithful => faithful
Span 20-21:  life => life
Span 18-19:  life => life
Span 0-1:  many => many
Span 22-23:  mean => mean-01
Span 13-14:  promising => promise-01
Span 1-2:  said => say-01
Span 4-5:  see => see-01
Span 6-7:  sense => sense
Span 9-10:  sexually => sexual
Span 2-3:  they => they
Span 10-11:  unstable => (stable :polarity -)
Span 11-12:  world => world
Span 24-25:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),years,(temporal-quantity :unit year),false), Span(23,24,List(2),50,50,false), Span(22,23,List(3),mean,mean-01,false), Span(20,21,List(4),life,life,false), Span(18,19,List(5),life,life,false), Span(16,17,List(6),faithful,faithful,false), Span(13,14,List(7),promising,promise-01,false), Span(11,12,List(8),world,world,false), Span(10,11,List(10, 9),unstable,(stable :polarity -),false), Span(9,10,List(11),sexually,sexual,false), Span(6,7,List(12),sense,sense,false), Span(5,6,List(13),any,any,false), Span(4,5,List(14),see,see-01,false), Span(2,3,List(15),they,they,false), Span(1,2,List(16),said,say-01,false), Span(0,1,List(17),many,many,false)),Map(2 -> 50, 5 -> life, 12 -> sense, 15 -> they, 8 -> world, 7 -> promise-01, 17 -> many, 1 -> year, 4 -> life, 11 -> sexual, 14 -> see-01, 6 -> faithful, 0 -> temporal-quantity, 9 -> stable, 16 -> say-01, 3 -> mean-01, 10 -> -, 13 -> any),Map(s5 -> say-01, w -> world, 5 -> 50, s2 -> sexual, t -> temporal-quantity, m2 -> many, s -> stable, s4 -> see-01, m -> mean-01, y -> year, p -> promise-01, a -> any, t2 -> they, l2 -> life, s3 -> sense, l -> life, f -> faithful))),[Ljava.lang.String;@4be3b5e0,Annotation([Ljava.lang.String;@52b9ac0c,[Ljava.lang.String;@1bce7242,[Ljava.lang.String;@eaf5951),Annotation([Ljava.lang.String;@1a10dc5f,[Ljava.lang.String;@48f3ee57,[Ledu.cmu.lti.nlp.amr.Dependency;@6a4b72c),Annotation([Ljava.lang.String;@27f5ad1c,[Ljava.lang.String;@72381dc2,[Ljava.lang.String;@4229e623),Annotation([Ljava.lang.String;@4cc425c4,[Ljava.lang.String;@618b8e3b,[Ledu.cmu.lti.nlp.amr.Entity;@1126f585))
AMR:
(f / faithful, condition, m / mean-01)
(f / faithful, mod, l2 / life)
(m / mean-01, ARG0, l / life)
(m / mean-01, ARG1, t / temporal-quantity)
(p / promise-01, ARG0, w / world)
(p / promise-01, ARG1, f / faithful)
(s / stable, polarity, -)
(s3 / sense, mod, a / any)
(s4 / see-01, ARG0, t2 / they)
(s4 / see-01, ARG1, s3 / sense)
(s4 / see-01, manner, p / promise-01)
(s5 / say-01, ARG0, t2 / they)
(s5 / say-01, ARG1, m2 / many)
(t / temporal-quantity, quant, 5 / 50)
(t / temporal-quantity, unit, y / year)
(w / world, mod, s / stable)
(w / world, mod, s2 / sexual)

Decoded in 389,663 microseconds
Sentence: all it needs is to promise a highpowered investigation such as a royal commission into the practicalities of an alternative voting system surely justified by the intense public interest now abounding

Spans:
Span 0-1:  all => all
Span 19-20:  alternative => alternative
Span 13-14:  commission => commission
Span 26-27:  intense => intense
Span 28-29:  interest => interest-01
Span 8-9:  investigation => investigate-01
Span 1-2:  it => it
Span 23-24:  justified => justify-01
Span 2-3:  needs => need-01
Span 29-30:  now => now
Span 5-6:  promise => promise-01
Span 27-28:  public => public
Span 12-13:  royal => royal
Span 9-10:  such => such
Span 22-23:  surely => sure
Span 21-22:  system => system
Span 20-21:  voting => vote-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),now,now,false), Span(28,29,List(1),interest,interest-01,false), Span(27,28,List(2),public,public,false), Span(26,27,List(3),intense,intense,false), Span(23,24,List(4),justified,justify-01,false), Span(22,23,List(5),surely,sure,false), Span(21,22,List(6),system,system,false), Span(20,21,List(7),voting,vote-01,false), Span(19,20,List(8),alternative,alternative,false), Span(13,14,List(9),commission,commission,false), Span(12,13,List(10),royal,royal,false), Span(9,10,List(11),such,such,false), Span(8,9,List(12),investigation,investigate-01,false), Span(5,6,List(13),promise,promise-01,false), Span(2,3,List(14),needs,need-01,false), Span(1,2,List(15),it,it,false), Span(0,1,List(16),all,all,false)),Map(2 -> public, 5 -> sure, 12 -> investigate-01, 15 -> it, 8 -> alternative, 7 -> vote-01, 1 -> interest-01, 4 -> justify-01, 11 -> such, 14 -> need-01, 6 -> system, 0 -> now, 9 -> commission, 16 -> all, 3 -> intense, 10 -> royal, 13 -> promise-01),Map(n -> now, i4 -> it, s2 -> system, p2 -> promise-01, j -> justify-01, s -> sure, v -> vote-01, i3 -> investigate-01, p -> public, a -> alternative, i2 -> intense, a2 -> all, i -> interest-01, r -> royal, c -> commission, s3 -> such, n2 -> need-01))),[Ljava.lang.String;@14c0f78f,Annotation([Ljava.lang.String;@8bcd7ee,[Ljava.lang.String;@26044ebd,[Ljava.lang.String;@64cd6dca),Annotation([Ljava.lang.String;@6ae31c79,[Ljava.lang.String;@646282c1,[Ledu.cmu.lti.nlp.amr.Dependency;@7f768063),Annotation([Ljava.lang.String;@3ce724f5,[Ljava.lang.String;@6b2b700f,[Ljava.lang.String;@70ca1fc0),Annotation([Ljava.lang.String;@65eab019,[Ljava.lang.String;@12cf6d95,[Ledu.cmu.lti.nlp.amr.Entity;@70235ad8))
AMR:
(c / commission, mod, r / royal)
(i / interest-01, ARG1, p / public)
(i / interest-01, degree, i2 / intense)
(i3 / investigate-01, ARG0, n / now)
(i3 / investigate-01, ARG1, s3 / such)
(j / justify-01, ARG0, s2 / system)
(j / justify-01, ARG1, i / interest-01)
(n2 / need-01, ARG0, i4 / it)
(n2 / need-01, mod, a2 / all)
(p2 / promise-01, ARG0, i4 / it)
(p2 / promise-01, ARG1, c / commission)
(p2 / promise-01, ARG2, i3 / investigate-01)
(s / sure, domain, j / justify-01)
(v / vote-01, instrument, s2 / system)
(v / vote-01, mod, a / alternative)
(v / vote-01, mod, c / commission)

Decoded in 201,711 microseconds
Sentence: back in cairo the americans agreed not to insist on an operation in the indian ocean even though roosevelt had promised it to chiang kaishek now that they had got their way in regard to overlord

NER Entity: (country :name (name :op "cairo"))
Spans:
Span 5-6:  agreed => agree-01
Span 4-5:  americans => (person :mod (country :name (name :op "America")))
Span 0-1:  back => back
Span 14-16:  indian ocean => (ocean :name (name :op "Ocean" :op "Indian"))
Span 8-9:  insist => insist-01
Span 21-22:  it => it
Span 25-26:  now => now
Span 11-12:  operation => operation
Span 20-21:  promised => promise-01
Span 33-34:  regard => regard-01
Span 27-28:  they => they
Span 31-32:  way => way

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),regard,regard-01,false), Span(31,32,List(1),way,way,false), Span(27,28,List(2),they,they,false), Span(25,26,List(3),now,now,false), Span(21,22,List(4),it,it,false), Span(20,21,List(5),promised,promise-01,false), Span(14,16,List(9, 8, 7, 6),indian ocean,(ocean :name (name :op "Ocean" :op "Indian")),false), Span(11,12,List(10),operation,operation,false), Span(8,9,List(11),insist,insist-01,false), Span(5,6,List(12),agreed,agree-01,false), Span(4,5,List(16, 15, 14, 13),americans,(person :mod (country :name (name :op "America"))),false), Span(0,1,List(17),back,back,false)),Map(2 -> they, 5 -> promise-01, 12 -> agree-01, 15 -> name, 8 -> "Ocean", 7 -> name, 17 -> back, 1 -> way, 4 -> it, 11 -> insist-01, 14 -> country, 6 -> ocean, 0 -> regard-01, 9 -> "Indian", 16 -> "America", 3 -> now, 10 -> operation, 13 -> person),Map(w -> way, n -> now, b -> back, t -> they, p2 -> person, p -> promise-01, n3 -> name, a -> agree-01, o2 -> operation, i2 -> insist-01, r -> regard-01, i -> it, c -> country, o -> ocean, n2 -> name))),[Ljava.lang.String;@14248f34,Annotation([Ljava.lang.String;@6c35a940,[Ljava.lang.String;@36fae040,[Ljava.lang.String;@1098a5f3),Annotation([Ljava.lang.String;@15b6fd08,[Ljava.lang.String;@209e235b,[Ledu.cmu.lti.nlp.amr.Dependency;@6e233c17),Annotation([Ljava.lang.String;@4b3e427e,[Ljava.lang.String;@647f84c9,[Ljava.lang.String;@6fe6dbaa),Annotation([Ljava.lang.String;@1d5faf4b,[Ljava.lang.String;@74ed73fd,[Ledu.cmu.lti.nlp.amr.Entity;@115a2304))
AMR:
(a / agree-01, ARG0, p2 / person)
(c / country, name, n3 / name)
(i2 / insist-01, ARG0, p2 / person)
(i2 / insist-01, ARG1, o2 / operation)
(i2 / insist-01, purpose, p / promise-01)
(n2 / name, op, "Indian")
(n2 / name, op, "Ocean")
(n3 / name, op, "America")
(o / ocean, name, n2 / name)
(o2 / operation, mod, o / ocean)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, i / it)
(p / promise-01, time, n / now)
(p2 / person, mod, c / country)
(p2 / person, time, b / back)
(r / regard-01, ARG1, t / they)
(w / way, poss, t / they)

Decoded in 387,106 microseconds
Sentence: the equally earnest anglofrench declaration of 1918 promising the arabs of former ottoman colonies their independence if they supported the allies against the turks fell into much the same category although it was not a promise that was intended to be kept

NER Entity: (country :name (name :op "turks"))
Spans:
Span 6-7:  1918 => (date-entity :year 1918)
Span 20-21:  allies => ally-01
Span 29-30:  category => category
Span 13-14:  colonies => colony
Span 4-5:  declaration => declare-02
Span 1-2:  equally => equal
Span 24-25:  fell => fall-01
Span 11-12:  former => former
Span 15-16:  independence => (depend-01 :polarity -)
Span 38-39:  intended => intend-01
Span 31-32:  it => it
Span 41-42:  kept => keep-01
Span 26-27:  much => much
Span 35-36:  promise => promise-01
Span 7-8:  promising => promise-01
Span 28-29:  same => same-41
Span 18-19:  supported => support-01
Span 17-18:  they => they

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),kept,keep-01,false), Span(38,39,List(1),intended,intend-01,false), Span(35,36,List(2),promise,promise-01,false), Span(31,32,List(3),it,it,false), Span(29,30,List(4),category,category,false), Span(28,29,List(5),same,same-41,false), Span(26,27,List(6),much,much,false), Span(24,25,List(7),fell,fall-01,false), Span(20,21,List(8),allies,ally-01,false), Span(18,19,List(9),supported,support-01,false), Span(17,18,List(10),they,they,false), Span(15,16,List(12, 11),independence,(depend-01 :polarity -),false), Span(13,14,List(13),colonies,colony,false), Span(11,12,List(14),former,former,false), Span(7,8,List(15),promising,promise-01,false), Span(6,7,List(17, 16),1918,(date-entity :year 1918),false), Span(4,5,List(18),declaration,declare-02,false), Span(1,2,List(19),equally,equal,false)),Map(2 -> promise-01, 5 -> same-41, 12 -> -, 15 -> promise-01, 8 -> ally-01, 18 -> declare-02, 7 -> fall-01, 17 -> 1918, 1 -> intend-01, 4 -> category, 11 -> depend-01, 14 -> former, 6 -> much, 0 -> keep-01, 9 -> support-01, 16 -> date-entity, 19 -> equal, 3 -> it, 10 -> they, 13 -> colony),Map(e -> equal, s2 -> support-01, k -> keep-01, t -> they, d3 -> declare-02, p2 -> promise-01, s -> same-41, m -> much, d -> depend-01, 1 -> 1918, p -> promise-01, a -> ally-01, d2 -> date-entity, i2 -> it, i -> intend-01, c -> category, f2 -> former, f -> fall-01, c2 -> colony))),[Ljava.lang.String;@496a2dd4,Annotation([Ljava.lang.String;@59e6def3,[Ljava.lang.String;@443751a1,[Ljava.lang.String;@bd04404),Annotation([Ljava.lang.String;@162168ab,[Ljava.lang.String;@6b5ebde6,[Ledu.cmu.lti.nlp.amr.Dependency;@19057e1c),Annotation([Ljava.lang.String;@379a6d19,[Ljava.lang.String;@7b70a0d3,[Ljava.lang.String;@1f4ebbf5),Annotation([Ljava.lang.String;@6a15e1e1,[Ljava.lang.String;@42a0b130,[Ledu.cmu.lti.nlp.amr.Entity;@43d0e87c))
AMR:
(c / category, quant, m / much)
(c2 / colony, time, f2 / former)
(d / depend-01, ARG1, c2 / colony)
(d / depend-01, polarity, -)
(d2 / date-entity, year, 1 / 1918)
(d3 / declare-02, ARG1, e / equal)
(d3 / declare-02, time, d2 / date-entity)
(f / fall-01, ARG0, t / they)
(f / fall-01, ARG1, a / ally-01)
(f / fall-01, ARG4, c / category)
(i / intend-01, ARG0, t / they)
(i / intend-01, ARG1, k / keep-01)
(i / intend-01, ARG2, p / promise-01)
(p / promise-01, ARG1, i2 / it)
(p2 / promise-01, ARG0, t / they)
(p2 / promise-01, ARG1, d3 / declare-02)
(s / same-41, ARG1, c / category)
(s2 / support-01, ARG0, t / they)
(s2 / support-01, ARG1, d / depend-01)

Decoded in 988,658 microseconds
Sentence: law a canadian promised tranquillity  astor an american made the times once more respectable dash, politics after the fall of lloyd george seemed far from the tranquillity which law had promised

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = law a canadian promised tranquillity  astor an american made the times once more respectable dash, politics after the fall of lloyd george seemed far from the tranquillity which law had promised
myTokenized = law a canadian promised tranquillity astor an american made the times once more respectable dash , politics after the fall of lloyd george seemed far from the tranquillity which law had promised
i = 5
prefix = List(law, a, canadian, promised, tranquillity, astor)
regexr = \Ql\E ?\Qa\E ?\Qw\E ?\Qa\E ?\Qc\E ?\Qa\E ?\Qn\E ?\Qa\E ?\Qd\E ?\Qi\E ?\Qa\E ?\Qn\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qq\E ?\Qu\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qt\E ?\Qy\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: we do not want a level of taxation which is going to depress effort the labour leader said after promising an unsentimental approach to public spending

Spans:
Span 18-19:  after => after
Span 22-23:  approach => approach-02
Span 13-14:  effort => effort
Span 15-16:  labour => labour
Span 16-17:  leader => (person :ARG0-of lead-02)
Span 5-6:  level => level
Span 19-20:  promising => promise-01
Span 24-25:  public => public
Span 17-18:  said => say-01
Span 25-26:  spending => spend-01
Span 3-4:  want => want-01
Span 0-1:  we => we

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),spending,spend-01,false), Span(24,25,List(1),public,public,false), Span(22,23,List(2),approach,approach-02,false), Span(19,20,List(3),promising,promise-01,false), Span(18,19,List(4),after,after,false), Span(17,18,List(5),said,say-01,false), Span(16,17,List(7, 6),leader,(person :ARG0-of lead-02),false), Span(15,16,List(8),labour,labour,false), Span(13,14,List(9),effort,effort,false), Span(5,6,List(10),level,level,false), Span(3,4,List(11),want,want-01,false), Span(0,1,List(12),we,we,false)),Map(2 -> approach-02, 5 -> say-01, 12 -> we, 8 -> labour, 7 -> lead-02, 1 -> public, 4 -> after, 11 -> want-01, 6 -> person, 0 -> spend-01, 9 -> effort, 3 -> promise-01, 10 -> level),Map(e -> effort, w -> want-01, s2 -> say-01, p2 -> promise-01, l3 -> level, s -> spend-01, p -> public, a -> approach-02, l2 -> labour, w2 -> we, a2 -> after, l -> lead-02, p3 -> person))),[Ljava.lang.String;@4cea924a,Annotation([Ljava.lang.String;@3c2a5fb9,[Ljava.lang.String;@1f2898b,[Ljava.lang.String;@5a2405ac),Annotation([Ljava.lang.String;@72f08d6f,[Ljava.lang.String;@ed5ad5d,[Ledu.cmu.lti.nlp.amr.Dependency;@6e68bc46),Annotation([Ljava.lang.String;@1e20d04b,[Ljava.lang.String;@7c4afb60,[Ljava.lang.String;@1ebd9b60),Annotation([Ljava.lang.String;@3223cb64,[Ljava.lang.String;@4bfe2bf3,[Ledu.cmu.lti.nlp.amr.Entity;@1bf7857f))
AMR:
(a2 / after, op, p2 / promise-01)
(l / lead-02, ARG0, p3 / person)
(l / lead-02, ARG1, l2 / labour)
(p2 / promise-01, ARG1, a / approach-02)
(s / spend-01, ARG0, p3 / person)
(s / spend-01, mod, p / public)
(s2 / say-01, ARG0, p3 / person)
(s2 / say-01, ARG1, e / effort)
(s2 / say-01, time, a2 / after)
(w / want-01, ARG0, w2 / we)
(w / want-01, ARG1, l3 / level)
(w / want-01, ARG2, p2 / promise-01)

Decoded in 319,571 microseconds
Sentence: whilst we promise you a fair fight the defeat we are certain to inflict upon you will be so massive and crippling that you will not rise again he said

Spans:
Span 27-28:  again => again
Span 20-21:  and => and
Span 11-12:  certain => certain
Span 21-22:  crippling => cripple-01
Span 8-9:  defeat => defeat-01
Span 5-6:  fair => fair
Span 6-7:  fight => fight-01
Span 28-29:  he => he
Span 13-14:  inflict => inflict-01
Span 19-20:  massive => massive
Span 2-3:  promise => promise-01
Span 26-27:  rise => rise-01
Span 29-30:  said => say-01
Span 18-19:  so => so
Span 9-10:  we => we
Span 1-2:  we => we
Span 23-24:  you => you
Span 15-16:  you => you
Span 3-4:  you => you

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),said,say-01,false), Span(28,29,List(1),he,he,false), Span(27,28,List(2),again,again,false), Span(26,27,List(3),rise,rise-01,false), Span(23,24,List(4),you,you,false), Span(21,22,List(5),crippling,cripple-01,false), Span(20,21,List(6),and,and,false), Span(19,20,List(7),massive,massive,false), Span(18,19,List(8),so,so,false), Span(15,16,List(9),you,you,false), Span(13,14,List(10),inflict,inflict-01,false), Span(11,12,List(11),certain,certain,false), Span(9,10,List(12),we,we,false), Span(8,9,List(13),defeat,defeat-01,false), Span(6,7,List(14),fight,fight-01,false), Span(5,6,List(15),fair,fair,false), Span(3,4,List(16),you,you,false), Span(2,3,List(17),promise,promise-01,false), Span(1,2,List(18),we,we,false)),Map(2 -> again, 5 -> cripple-01, 12 -> we, 15 -> fair, 8 -> so, 18 -> we, 7 -> massive, 17 -> promise-01, 1 -> he, 4 -> you, 11 -> certain, 14 -> fight-01, 6 -> and, 0 -> say-01, 9 -> you, 16 -> you, 3 -> rise-01, 10 -> inflict-01, 13 -> defeat-01),Map(w -> we, h -> he, s2 -> so, s -> say-01, d -> defeat-01, m -> massive, p -> promise-01, y -> you, a -> again, y3 -> you, w2 -> we, r -> rise-01, a2 -> and, i -> inflict-01, c -> cripple-01, f2 -> fair, f -> fight-01, y2 -> you, c2 -> certain))),[Ljava.lang.String;@175d6331,Annotation([Ljava.lang.String;@741b31f2,[Ljava.lang.String;@256c426b,[Ljava.lang.String;@667c91fe),Annotation([Ljava.lang.String;@7c54ef42,[Ljava.lang.String;@2c2815d3,[Ledu.cmu.lti.nlp.amr.Dependency;@7bb0e64a),Annotation([Ljava.lang.String;@1adf43b7,[Ljava.lang.String;@37d6b129,[Ljava.lang.String;@70091762),Annotation([Ljava.lang.String;@64de5c64,[Ljava.lang.String;@4283dcf8,[Ledu.cmu.lti.nlp.amr.Entity;@5f203fe5))
AMR:
(a2 / and, op, c / cripple-01)
(a2 / and, op, m / massive)
(c / cripple-01, ARG1, y2 / you)
(c2 / certain, domain, i / inflict-01)
(d / defeat-01, ARG0, f2 / fair)
(f / fight-01, ARG0, w2 / we)
(f / fight-01, ARG1, c2 / certain)
(f / fight-01, ARG2, d / defeat-01)
(i / inflict-01, ARG0, w / we)
(i / inflict-01, ARG1, a2 / and)
(m / massive, degree, s2 / so)
(p / promise-01, ARG0, w2 / we)
(p / promise-01, ARG1, y3 / you)
(r / rise-01, ARG0, y / you)
(r / rise-01, ARG1, c / cripple-01)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, y2 / you)
(s / say-01, mod, a / again)

Decoded in 230,057 microseconds
Sentence: all of us can feel the tears of the many mothers and fathers he said promising to address the issues that had led to the exodus

Spans:
Span 17-18:  address => address-02
Span 0-1:  all => all
Span 11-12:  and => and
Span 3-4:  can => possible
Span 12-13:  fathers => father
Span 4-5:  feel => feel-01
Span 13-14:  he => he
Span 19-20:  issues => issue
Span 22-23:  led => lead-02
Span 9-10:  many => many
Span 10-11:  mothers => (have-rel-role-91 :ARG2 mother)
Span 15-16:  promising => promise-01
Span 14-15:  said => say-01
Span 6-7:  tears => tear

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),led,lead-02,false), Span(19,20,List(1),issues,issue,false), Span(17,18,List(2),address,address-02,false), Span(15,16,List(3),promising,promise-01,false), Span(14,15,List(4),said,say-01,false), Span(13,14,List(5),he,he,false), Span(12,13,List(6),fathers,father,false), Span(11,12,List(7),and,and,false), Span(10,11,List(9, 8),mothers,(have-rel-role-91 :ARG2 mother),false), Span(9,10,List(10),many,many,false), Span(6,7,List(11),tears,tear,false), Span(4,5,List(12),feel,feel-01,false), Span(3,4,List(13),can,possible,false), Span(0,1,List(14),all,all,false)),Map(2 -> address-02, 5 -> he, 12 -> feel-01, 8 -> have-rel-role-91, 7 -> and, 1 -> issue, 4 -> say-01, 11 -> tear, 14 -> all, 6 -> father, 0 -> lead-02, 9 -> mother, 3 -> promise-01, 10 -> many, 13 -> possible),Map(h -> he, h2 -> have-rel-role-91, t -> tear, m2 -> many, p2 -> possible, a3 -> all, s -> say-01, m -> mother, p -> promise-01, a -> address-02, i -> issue, a2 -> and, l -> lead-02, f2 -> feel-01, f -> father))),[Ljava.lang.String;@21c7464a,Annotation([Ljava.lang.String;@21d7b599,[Ljava.lang.String;@58d3612a,[Ljava.lang.String;@1d9039f5),Annotation([Ljava.lang.String;@67cd12fc,[Ljava.lang.String;@489993a1,[Ledu.cmu.lti.nlp.amr.Dependency;@5aab5443),Annotation([Ljava.lang.String;@26292936,[Ljava.lang.String;@5850abcc,[Ljava.lang.String;@183f0b60),Annotation([Ljava.lang.String;@5303d80f,[Ljava.lang.String;@215deb5d,[Ledu.cmu.lti.nlp.amr.Entity;@1d0737c8))
AMR:
(a / address-02, ARG0, h / he)
(a / address-02, ARG1, i / issue)
(a2 / and, op, f2 / feel-01)
(a2 / and, op, s / say-01)
(a2 / and, quant, m2 / many)
(a3 / all, op, l / lead-02)
(f2 / feel-01, ARG1, t / tear)
(h2 / have-rel-role-91, ARG2, m / mother)
(l / lead-02, ARG1, i / issue)
(p / promise-01, ARG1, h2 / have-rel-role-91)
(p / promise-01, ARG2, a / address-02)
(p2 / possible, domain, f2 / feel-01)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, f / father)

Decoded in 525,922 microseconds
Sentence: it is calling the range country house collection and promises an increased fabric selection

Spans:
Span 8-9:  and => and
Span 7-8:  collection => collect-01
Span 5-6:  country => country
Span 12-13:  fabric => fabric
Span 6-7:  house => house
Span 11-12:  increased => increase-01
Span 0-1:  it => it
Span 9-10:  promises => promise-01
Span 4-5:  range => range-01
Span 13-14:  selection => select-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),selection,select-01,false), Span(12,13,List(1),fabric,fabric,false), Span(11,12,List(2),increased,increase-01,false), Span(9,10,List(3),promises,promise-01,false), Span(8,9,List(4),and,and,false), Span(7,8,List(5),collection,collect-01,false), Span(6,7,List(6),house,house,false), Span(5,6,List(7),country,country,false), Span(4,5,List(8),range,range-01,false), Span(0,1,List(9),it,it,false)),Map(2 -> increase-01, 5 -> collect-01, 8 -> range-01, 7 -> country, 1 -> fabric, 4 -> and, 6 -> house, 9 -> it, 0 -> select-01, 3 -> promise-01),Map(h -> house, s -> select-01, p -> promise-01, a -> and, i2 -> it, r -> range-01, i -> increase-01, c -> collect-01, f -> fabric, c2 -> country))),[Ljava.lang.String;@44df3a5b,Annotation([Ljava.lang.String;@1b704fb0,[Ljava.lang.String;@6a7fb9e2,[Ljava.lang.String;@6784db0d),Annotation([Ljava.lang.String;@43496793,[Ljava.lang.String;@82f0668,[Ledu.cmu.lti.nlp.amr.Dependency;@474d9a0a),Annotation([Ljava.lang.String;@37bc2b18,[Ljava.lang.String;@22b1513e,[Ljava.lang.String;@274ccf3d),Annotation([Ljava.lang.String;@23b9c1f3,[Ljava.lang.String;@786c4ad7,[Ledu.cmu.lti.nlp.amr.Entity;@da5a705))
AMR:
(a / and, op, c / collect-01)
(a / and, op, p / promise-01)
(c / collect-01, ARG0, i2 / it)
(c / collect-01, ARG1, h / house)
(i / increase-01, ARG1, s / select-01)
(p / promise-01, ARG1, s / select-01)
(r / range-01, ARG0, c2 / country)
(r / range-01, ARG1, c / collect-01)
(s / select-01, ARG1, f / fabric)

Decoded in 82,605 microseconds
Sentence: most people end up relying upon the colourful packets tins and jars of commercial baby foods which at least promise lots of vitamins and no longer have added salt sugar colours or artificial flavours

Spans:
Span 27-28:  added => add-01
Span 23-24:  and => and
Span 10-11:  and => and
Span 32-33:  artificial => artificial
Span 14-15:  baby => baby
Span 30-31:  colours => color
Span 13-14:  commercial => commerce
Span 15-16:  foods => food
Span 25-26:  longer => long
Span 20-21:  lots => lot
Span 0-1:  most => most
Span 24-25:  no => -
Span 31-32:  or => or
Span 8-9:  packets => packet
Span 19-20:  promise => promise-01
Span 4-5:  relying => rely-01
Span 28-29:  salt => salt
Span 29-30:  sugar => sugar-cane
Span 22-23:  vitamins => vitamin

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),artificial,artificial,false), Span(31,32,List(1),or,or,false), Span(30,31,List(2),colours,color,false), Span(29,30,List(3),sugar,sugar-cane,false), Span(28,29,List(4),salt,salt,false), Span(27,28,List(5),added,add-01,false), Span(25,26,List(6),longer,long,false), Span(24,25,List(7),no,-,false), Span(23,24,List(8),and,and,false), Span(22,23,List(9),vitamins,vitamin,false), Span(20,21,List(10),lots,lot,false), Span(19,20,List(11),promise,promise-01,false), Span(15,16,List(12),foods,food,false), Span(14,15,List(13),baby,baby,false), Span(13,14,List(14),commercial,commerce,false), Span(10,11,List(15),and,and,false), Span(8,9,List(16),packets,packet,false), Span(4,5,List(17),relying,rely-01,false), Span(0,1,List(18),most,most,false)),Map(2 -> color, 5 -> add-01, 12 -> food, 15 -> and, 8 -> and, 18 -> most, 7 -> -, 17 -> rely-01, 1 -> or, 4 -> salt, 11 -> promise-01, 14 -> commerce, 6 -> long, 0 -> artificial, 9 -> vitamin, 16 -> packet, 3 -> sugar-cane, 10 -> lot, 13 -> baby),Map(s2 -> salt, b -> baby, p2 -> packet, a3 -> and, s -> sugar-cane, v -> vitamin, m -> most, p -> promise-01, a -> artificial, l2 -> lot, r -> rely-01, a2 -> add-01, - -> -, c -> color, l -> long, f -> food, o -> or, c2 -> commerce, a4 -> and))),[Ljava.lang.String;@50c2e9d1,Annotation([Ljava.lang.String;@2c84c1c3,[Ljava.lang.String;@3fcd000a,[Ljava.lang.String;@2bbdb13f),Annotation([Ljava.lang.String;@32bfb588,[Ljava.lang.String;@48270dbf,[Ledu.cmu.lti.nlp.amr.Dependency;@7bf79b9a),Annotation([Ljava.lang.String;@3d08db0b,[Ljava.lang.String;@1064ce7b,[Ljava.lang.String;@4a2ff5a5),Annotation([Ljava.lang.String;@12a849b0,[Ljava.lang.String;@667dcb61,[Ledu.cmu.lti.nlp.amr.Entity;@4cb381d8))
AMR:
(a2 / add-01, ARG0, o / or)
(a2 / add-01, ARG1, c / color)
(a2 / add-01, duration, l / long)
(a2 / add-01, polarity, - / -)
(a3 / and, op, a2 / add-01)
(a4 / and, op, a2 / add-01)
(c / color, mod, s / sugar-cane)
(f / food, mod, b / baby)
(f / food, mod, c2 / commerce)
(m / most, op, p / promise-01)
(o / or, op, a / artificial)
(p / promise-01, ARG0, a4 / and)
(p / promise-01, ARG1, f / food)
(p / promise-01, ARG2, l2 / lot)
(r / rely-01, ARG0, p2 / packet)
(r / rely-01, ARG1, a4 / and)
(s / sugar-cane, mod, s2 / salt)
(v / vitamin, quant, l2 / lot)

Decoded in 579,360 microseconds
Sentence: remind crew that they have promised to return later to meet the passengers and their relatives for an open evening and that tomorrow is the jumble sale to raise funds for the onboard computer

Spans:
Span 20-21:  and => and
Span 13-14:  and => and
Span 33-34:  computer => computer
Span 1-2:  crew => crew
Span 19-20:  evening => evening
Span 29-30:  funds => fund
Span 8-9:  later => late
Span 12-13:  passengers => passenger
Span 5-6:  promised => promise-01
Span 28-29:  raise => raise-01
Span 15-16:  relatives => (have-rel-role-91 :ARG2 relative)
Span 0-1:  remind => remind-01
Span 3-4:  they => they
Span 22-23:  tomorrow => tomorrow

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),computer,computer,false), Span(29,30,List(1),funds,fund,false), Span(28,29,List(2),raise,raise-01,false), Span(22,23,List(3),tomorrow,tomorrow,false), Span(20,21,List(4),and,and,false), Span(19,20,List(5),evening,evening,false), Span(15,16,List(7, 6),relatives,(have-rel-role-91 :ARG2 relative),false), Span(13,14,List(8),and,and,false), Span(12,13,List(9),passengers,passenger,false), Span(8,9,List(10),later,late,false), Span(5,6,List(11),promised,promise-01,false), Span(3,4,List(12),they,they,false), Span(1,2,List(13),crew,crew,false), Span(0,1,List(14),remind,remind-01,false)),Map(2 -> raise-01, 5 -> evening, 12 -> they, 8 -> and, 7 -> relative, 1 -> fund, 4 -> and, 11 -> promise-01, 14 -> remind-01, 6 -> have-rel-role-91, 0 -> computer, 9 -> passenger, 3 -> tomorrow, 10 -> late, 13 -> crew),Map(e -> evening, r3 -> remind-01, h -> have-rel-role-91, t -> tomorrow, p2 -> promise-01, r2 -> relative, p -> passenger, a -> and, t2 -> they, r -> raise-01, a2 -> and, c -> computer, l -> late, f -> fund, c2 -> crew))),[Ljava.lang.String;@1d11b33f,Annotation([Ljava.lang.String;@750efc01,[Ljava.lang.String;@2ac2e1b1,[Ljava.lang.String;@606f4165),Annotation([Ljava.lang.String;@282e7f59,[Ljava.lang.String;@4aac0ab,[Ledu.cmu.lti.nlp.amr.Dependency;@664f1cf1),Annotation([Ljava.lang.String;@53f546b0,[Ljava.lang.String;@bf3f7e0,[Ljava.lang.String;@3e169941),Annotation([Ljava.lang.String;@3da79a3f,[Ljava.lang.String;@467fbdb8,[Ledu.cmu.lti.nlp.amr.Entity;@6c809f30))
AMR:
(a / and, op, p2 / promise-01)
(a2 / and, op, p / passenger)
(a2 / and, op, p2 / promise-01)
(h / have-rel-role-91, ARG0, f / fund)
(h / have-rel-role-91, ARG1, p / passenger)
(h / have-rel-role-91, ARG2, r2 / relative)
(h / have-rel-role-91, location, e / evening)
(p2 / promise-01, ARG0, t2 / they)
(p2 / promise-01, ARG1, l / late)
(r / raise-01, ARG0, t / tomorrow)
(r / raise-01, ARG1, c / computer)
(r / raise-01, ARG2, f / fund)
(r3 / remind-01, ARG1, a / and)
(r3 / remind-01, ARG2, c2 / crew)

Decoded in 377,661 microseconds
Sentence: scott nisbet a central defender has rejected a move to the premier divisions bottom club although the midfield player ian mccall has promised to give dundee an answer shortly after discussing terms with their manager gordon wallace this afternoon

NER Entity: (person :name (name :op "ian" :op "mccall"))
Spans:
Span 29-30:  after => after
Span 38-39:  afternoon => afternoon
Span 27-28:  answer => answer-01
Span 13-14:  bottom => bottom
Span 3-4:  central => central
Span 14-15:  club => club
Span 4-5:  defender => defend-01
Span 30-31:  discussing => discuss-01
Span 12-13:  divisions => division
Span 24-25:  give => give-01
Span 19-21:  ian mccall => (person :name (name :op "ian" :op "mccall"))
Span 34-35:  manager => manage-01
Span 11-12:  premier => premier
Span 22-23:  promised => promise-01
Span 6-7:  rejected => reject-01
Span 28-29:  shortly => short
Span 31-32:  terms => term
Span 37-38:  this => this

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),afternoon,afternoon,false), Span(37,38,List(1),this,this,false), Span(34,35,List(2),manager,manage-01,false), Span(31,32,List(3),terms,term,false), Span(30,31,List(4),discussing,discuss-01,false), Span(29,30,List(5),after,after,false), Span(28,29,List(6),shortly,short,false), Span(27,28,List(7),answer,answer-01,false), Span(24,25,List(8),give,give-01,false), Span(22,23,List(9),promised,promise-01,false), Span(19,21,List(13, 12, 11, 10),ian mccall,(person :name (name :op "ian" :op "mccall")),false), Span(14,15,List(14),club,club,false), Span(13,14,List(15),bottom,bottom,false), Span(12,13,List(16),divisions,division,false), Span(11,12,List(17),premier,premier,false), Span(6,7,List(18),rejected,reject-01,false), Span(4,5,List(19),defender,defend-01,false), Span(3,4,List(20),central,central,false)),Map(2 -> manage-01, 5 -> after, 12 -> "ian", 15 -> bottom, 8 -> give-01, 18 -> reject-01, 7 -> answer-01, 17 -> premier, 1 -> this, 4 -> discuss-01, 11 -> name, 14 -> club, 20 -> central, 6 -> short, 0 -> afternoon, 9 -> promise-01, 16 -> division, 19 -> defend-01, 3 -> term, 10 -> person, 13 -> "mccall"),Map(n -> name, b -> bottom, t -> this, d3 -> defend-01, p2 -> person, a3 -> answer-01, s -> short, m -> manage-01, d -> discuss-01, g -> give-01, p -> promise-01, a -> afternoon, d2 -> division, t2 -> term, r -> reject-01, a2 -> after, c -> club, p3 -> premier, c2 -> central))),[Ljava.lang.String;@698c6916,Annotation([Ljava.lang.String;@147597d,[Ljava.lang.String;@73441e32,[Ljava.lang.String;@7d1a9fbc),Annotation([Ljava.lang.String;@5eed2fce,[Ljava.lang.String;@25ddae12,[Ledu.cmu.lti.nlp.amr.Dependency;@7ccf3329),Annotation([Ljava.lang.String;@72808c3,[Ljava.lang.String;@55573de0,[Ljava.lang.String;@529f68e5),Annotation([Ljava.lang.String;@5f9fbcc3,[Ljava.lang.String;@7021d740,[Ledu.cmu.lti.nlp.amr.Entity;@3dbae443))
AMR:
(a2 / after, mod, s / short)
(a2 / after, op, d / discuss-01)
(c / club, mod, b / bottom)
(c / club, mod, c2 / central)
(d / discuss-01, ARG0, p2 / person)
(d / discuss-01, ARG1, t2 / term)
(d / discuss-01, time, a / afternoon)
(d2 / division, mod, p3 / premier)
(g / give-01, ARG0, t / this)
(g / give-01, ARG1, a3 / answer-01)
(m / manage-01, ARG1, b / bottom)
(n / name, op, "ian")
(n / name, op, "mccall")
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, c / club)
(p / promise-01, ARG2, g / give-01)
(p2 / person, name, n / name)
(r / reject-01, ARG0, d3 / defend-01)
(r / reject-01, ARG1, a3 / answer-01)
(r / reject-01, ARG2, d2 / division)

Decoded in 421,989 microseconds
Sentence: it is conceivable that audiences at the ninehour live mahabharata did experience something of ganeshas promised transformation

Spans:
Span 4-5:  audiences => audience
Span 2-3:  conceivable => conceive-01
Span 11-12:  experience => experience-01
Span 0-1:  it => it
Span 8-9:  live => live-01
Span 15-16:  promised => promise-01
Span 12-13:  something => something
Span 16-17:  transformation => transform-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),transformation,transform-01,false), Span(15,16,List(1),promised,promise-01,false), Span(12,13,List(2),something,something,false), Span(11,12,List(3),experience,experience-01,false), Span(8,9,List(4),live,live-01,false), Span(4,5,List(5),audiences,audience,false), Span(2,3,List(6),conceivable,conceive-01,false), Span(0,1,List(7),it,it,false)),Map(2 -> something, 5 -> audience, 7 -> it, 1 -> promise-01, 4 -> live-01, 6 -> conceive-01, 0 -> transform-01, 3 -> experience-01),Map(e -> experience-01, t -> transform-01, s -> something, p -> promise-01, a -> audience, i -> it, c -> conceive-01, l -> live-01))),[Ljava.lang.String;@38e00a5e,Annotation([Ljava.lang.String;@7cc8be7d,[Ljava.lang.String;@5f52408b,[Ljava.lang.String;@110b9691),Annotation([Ljava.lang.String;@fca1255,[Ljava.lang.String;@1b79928c,[Ledu.cmu.lti.nlp.amr.Dependency;@4a84336b),Annotation([Ljava.lang.String;@2d4bdc05,[Ljava.lang.String;@4f59e37e,[Ljava.lang.String;@16668de5),Annotation([Ljava.lang.String;@26edc0e0,[Ljava.lang.String;@4311c617,[Ledu.cmu.lti.nlp.amr.Entity;@43e43267))
AMR:
(c / conceive-01, ARG1, i / it)
(e / experience-01, ARG1, s / something)
(l / live-01, ARG1, c / conceive-01)
(p / promise-01, ARG0, a / audience)
(p / promise-01, ARG1, s / something)
(p / promise-01, ARG2, t / transform-01)
(t / transform-01, ARG1, i / it)

Decoded in 53,192 microseconds
Sentence: when the campaign began just over a week ago it promised voters good profits and a long bull run which seemed a safe enough pledge

Spans:
Span 14-15:  and => and
Span 3-4:  began => begin-01
Span 17-18:  bull => bull
Span 2-3:  campaign => campaign-01
Span 23-24:  enough => enough
Span 12-13:  good => good
Span 9-10:  it => it
Span 4-5:  just => just
Span 24-25:  pledge => pledge-01
Span 13-14:  profits => profit-01
Span 10-11:  promised => promise-01
Span 22-23:  safe => safe-41
Span 20-21:  seemed => seem-01
Span 11-12:  voters => (person :ARG0-of vote-01)
Span 7-8:  week => week

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),pledge,pledge-01,false), Span(23,24,List(1),enough,enough,false), Span(22,23,List(2),safe,safe-41,false), Span(20,21,List(3),seemed,seem-01,false), Span(17,18,List(4),bull,bull,false), Span(14,15,List(5),and,and,false), Span(13,14,List(6),profits,profit-01,false), Span(12,13,List(7),good,good,false), Span(11,12,List(9, 8),voters,(person :ARG0-of vote-01),false), Span(10,11,List(10),promised,promise-01,false), Span(9,10,List(11),it,it,false), Span(7,8,List(12),week,week,false), Span(4,5,List(13),just,just,false), Span(3,4,List(14),began,begin-01,false), Span(2,3,List(15),campaign,campaign-01,false)),Map(2 -> safe-41, 5 -> and, 12 -> week, 15 -> campaign-01, 8 -> person, 7 -> good, 1 -> enough, 4 -> bull, 11 -> it, 14 -> begin-01, 6 -> profit-01, 0 -> pledge-01, 9 -> vote-01, 3 -> seem-01, 10 -> promise-01, 13 -> just),Map(e -> enough, w -> week, s2 -> seem-01, b -> bull, b2 -> begin-01, p2 -> profit-01, j -> just, s -> safe-41, v -> vote-01, p -> pledge-01, g -> good, a -> and, p4 -> promise-01, i -> it, c -> campaign-01, p3 -> person))),[Ljava.lang.String;@3aa92b03,Annotation([Ljava.lang.String;@3846f00b,[Ljava.lang.String;@39397f0a,[Ljava.lang.String;@6dc386df),Annotation([Ljava.lang.String;@3fcbd2c5,[Ljava.lang.String;@5e7aa43b,[Ledu.cmu.lti.nlp.amr.Dependency;@45b44df2),Annotation([Ljava.lang.String;@40696e9e,[Ljava.lang.String;@49dd681b,[Ljava.lang.String;@66ddea7f),Annotation([Ljava.lang.String;@734e6c9b,[Ljava.lang.String;@21bc6f41,[Ledu.cmu.lti.nlp.amr.Entity;@5a2c25b4))
AMR:
(a / and, op, p2 / profit-01)
(b2 / begin-01, ARG0, c / campaign-01)
(b2 / begin-01, ARG1, w / week)
(b2 / begin-01, mod, j / just)
(c / campaign-01, ARG1, p4 / promise-01)
(g / good, condition, p4 / promise-01)
(p / pledge-01, ARG0, p3 / person)
(p / pledge-01, quant, e / enough)
(p4 / promise-01, ARG0, i / it)
(p4 / promise-01, ARG1, a / and)
(p4 / promise-01, ARG2, p3 / person)
(s / safe-41, ARG0, b / bull)
(s / safe-41, ARG1, p / pledge-01)
(s2 / seem-01, ARG1, s / safe-41)
(v / vote-01, ARG0, p3 / person)

Decoded in 289,868 microseconds
Sentence: 2 million has been promised

Spans:
Span 0-1:  2 => 2
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),promised,promise-01,false), Span(0,1,List(1),2,2,false)),Map(1 -> 2, 0 -> promise-01),Map(2 -> 2, p -> promise-01))),[Ljava.lang.String;@85f7aac,Annotation([Ljava.lang.String;@346eb67f,[Ljava.lang.String;@508f66bd,[Ljava.lang.String;@76a22b9c),Annotation([Ljava.lang.String;@10dd4b9d,[Ljava.lang.String;@308f3911,[Ledu.cmu.lti.nlp.amr.Dependency;@aeba3ff),Annotation([Ljava.lang.String;@745bbff2,[Ljava.lang.String;@3396e48c,[Ljava.lang.String;@7776bdc9),Annotation([Ljava.lang.String;@14a61465,[Ljava.lang.String;@2384fd7a,[Ledu.cmu.lti.nlp.amr.Entity;@701d66cd))
AMR:
(p / promise-01, ARG1, 2 / 2)

Decoded in 4,248 microseconds
Sentence: with greeces general election on sunday promising either a very narrow overall majority for the new democracy conservatives or perhaps for a fragile leftwing alliance western diplomats have grown concerned by the countrys accumulation of pressing economic and foreign policy problems

Spans:
Span 24-25:  alliance => alliance
Span 37-38:  and => and
Span 29-30:  concerned => concern-01
Span 17-18:  conservatives => conservative
Span 16-17:  democracy => democracy
Span 26-27:  diplomats => (have-org-role-91 :ARG2 diplomat)
Span 36-37:  economic => economy
Span 7-8:  either => either
Span 3-4:  election => elect-01
Span 38-39:  foreign => foreign
Span 22-23:  fragile => fragile
Span 2-3:  general => general
Span 28-29:  grown => grow-03
Span 12-13:  majority => majority
Span 10-11:  narrow => narrow-01
Span 15-16:  new => new
Span 18-19:  or => or
Span 11-12:  overall => overall
Span 19-20:  perhaps => perhaps
Span 39-40:  policy => policy
Span 35-36:  pressing => press-01
Span 40-41:  problems => problem
Span 6-7:  promising => promise-01
Span 5-6:  sunday => sunday
Span 9-10:  very => very
Span 25-26:  western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),problems,problem,false), Span(39,40,List(1),policy,policy,false), Span(38,39,List(2),foreign,foreign,false), Span(37,38,List(3),and,and,false), Span(36,37,List(4),economic,economy,false), Span(35,36,List(5),pressing,press-01,false), Span(29,30,List(6),concerned,concern-01,false), Span(28,29,List(7),grown,grow-03,false), Span(26,27,List(9, 8),diplomats,(have-org-role-91 :ARG2 diplomat),false), Span(25,26,List(12, 11, 10),western,(world-region :name (name :op "West")),false), Span(24,25,List(13),alliance,alliance,false), Span(22,23,List(14),fragile,fragile,false), Span(19,20,List(15),perhaps,perhaps,false), Span(18,19,List(16),or,or,false), Span(17,18,List(17),conservatives,conservative,false), Span(16,17,List(18),democracy,democracy,false), Span(15,16,List(19),new,new,false), Span(12,13,List(20),majority,majority,false), Span(11,12,List(21),overall,overall,false), Span(10,11,List(22),narrow,narrow-01,false), Span(9,10,List(23),very,very,false), Span(7,8,List(24),either,either,false), Span(6,7,List(25),promising,promise-01,false), Span(5,6,List(26),sunday,sunday,false), Span(3,4,List(27),election,elect-01,false), Span(2,3,List(28),general,general,false)),Map(2 -> foreign, 5 -> press-01, 27 -> elect-01, 12 -> "West", 8 -> have-org-role-91, 15 -> perhaps, 21 -> overall, 18 -> democracy, 24 -> either, 7 -> grow-03, 1 -> policy, 17 -> conservative, 23 -> very, 26 -> sunday, 4 -> economy, 11 -> name, 14 -> fragile, 20 -> majority, 28 -> general, 6 -> concern-01, 9 -> diplomat, 0 -> problem, 22 -> narrow-01, 16 -> or, 19 -> new, 10 -> world-region, 3 -> and, 25 -> promise-01, 13 -> alliance),Map(e -> economy, n -> name, w -> world-region, h -> have-org-role-91, p5 -> promise-01, p2 -> policy, e2 -> either, s -> sunday, v -> very, d -> diplomat, m -> majority, g2 -> general, g -> grow-03, p -> problem, a -> and, n3 -> narrow-01, p4 -> perhaps, d2 -> democracy, o2 -> overall, a2 -> alliance, c -> concern-01, f2 -> fragile, f -> foreign, o -> or, e3 -> elect-01, p3 -> press-01, c2 -> conservative, n2 -> new))),[Ljava.lang.String;@7b3fce4d,Annotation([Ljava.lang.String;@1a016072,[Ljava.lang.String;@5062e9b4,[Ljava.lang.String;@ddd51a7),Annotation([Ljava.lang.String;@3d1bb20d,[Ljava.lang.String;@654692d2,[Ledu.cmu.lti.nlp.amr.Dependency;@7c514cef),Annotation([Ljava.lang.String;@3d921eac,[Ljava.lang.String;@441bcdc8,[Ljava.lang.String;@7d632866),Annotation([Ljava.lang.String;@78f180d9,[Ljava.lang.String;@37426497,[Ledu.cmu.lti.nlp.amr.Entity;@67da11d8))
AMR:
(a / and, op, f / foreign)
(a / and, op, p / problem)
(a2 / alliance, mod, f2 / fragile)
(c / concern-01, ARG1, p5 / promise-01)
(c2 / conservative, mod, d2 / democracy)
(c2 / conservative, mod, n2 / new)
(e3 / elect-01, ARG1, d2 / democracy)
(e3 / elect-01, mod, g2 / general)
(g / grow-03, ARG0, e2 / either)
(g / grow-03, ARG1, c / concern-01)
(g / grow-03, ARG2, h / have-org-role-91)
(h / have-org-role-91, ARG2, d / diplomat)
(m / majority, mod, o2 / overall)
(n / name, op, "West")
(n3 / narrow-01, ARG1, m / majority)
(n3 / narrow-01, degree, v / very)
(o / or, op, a2 / alliance)
(o / or, op, c2 / conservative)
(o / or, op, p4 / perhaps)
(o / or, op, w / world-region)
(p / problem, mod, p2 / policy)
(p2 / policy, mod, e / economy)
(p3 / press-01, ARG1, p / problem)
(p3 / press-01, condition, g / grow-03)
(p5 / promise-01, ARG0, e3 / elect-01)
(p5 / promise-01, ARG1, m / majority)
(p5 / promise-01, manner, s / sunday)
(w / world-region, name, n / name)

Decoded in 1,426,369 microseconds
Sentence: in front of the church of st maurice i met lenka a music student who had promised to show me what she described as the biggest organ in central europe all 2311 pipes of it the largest more than thirty feet tall the smallest eight millimetres of solid silver

Spans:
Span 31-32:  2311 => (date-entity :year 2311)
Span 30-31:  all => all
Span 25-26:  biggest => (big :degree most)
Span 28-29:  central => central
Span 4-5:  church => church
Span 22-23:  described => describe-01
Span 44-45:  eight => 8
Span 29-30:  europe => (continent :name (name :op "Europe"))
Span 40-41:  feet => foot
Span 1-2:  front => front
Span 8-9:  i => i
Span 34-35:  it => it
Span 36-37:  largest => (large :degree most)
Span 9-10:  met => meet-03
Span 12-13:  music => music
Span 26-27:  organ => organ
Span 16-17:  promised => promise-01
Span 21-22:  she => she
Span 18-19:  show => show-01
Span 48-49:  silver => silver
Span 43-44:  smallest => (small :degree most)
Span 47-48:  solid => solid
Span 13-14:  student => (person :ARG0-of study-01)
Span 41-42:  tall => tall

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),silver,silver,false), Span(47,48,List(1),solid,solid,false), Span(44,45,List(2),eight,8,false), Span(43,44,List(4, 3),smallest,(small :degree most),false), Span(41,42,List(5),tall,tall,false), Span(40,41,List(6),feet,foot,false), Span(36,37,List(8, 7),largest,(large :degree most),false), Span(34,35,List(9),it,it,false), Span(31,32,List(11, 10),2311,(date-entity :year 2311),false), Span(30,31,List(12),all,all,false), Span(29,30,List(15, 14, 13),europe,(continent :name (name :op "Europe")),false), Span(28,29,List(16),central,central,false), Span(26,27,List(17),organ,organ,false), Span(25,26,List(19, 18),biggest,(big :degree most),false), Span(22,23,List(20),described,describe-01,false), Span(21,22,List(21),she,she,false), Span(18,19,List(22),show,show-01,false), Span(16,17,List(23),promised,promise-01,false), Span(13,14,List(25, 24),student,(person :ARG0-of study-01),false), Span(12,13,List(26),music,music,false), Span(9,10,List(27),met,meet-03,false), Span(8,9,List(28),i,i,false), Span(4,5,List(29),church,church,false), Span(1,2,List(30),front,front,false)),Map(30 -> front, 2 -> 8, 5 -> tall, 27 -> meet-03, 12 -> all, 8 -> most, 15 -> "Europe", 21 -> she, 18 -> big, 24 -> person, 7 -> large, 1 -> solid, 17 -> organ, 23 -> promise-01, 26 -> music, 4 -> most, 11 -> 2311, 14 -> name, 29 -> church, 20 -> describe-01, 28 -> i, 6 -> foot, 9 -> it, 0 -> silver, 22 -> show-01, 16 -> central, 19 -> most, 10 -> date-entity, 3 -> small, 25 -> study-01, 13 -> continent),Map(m3 -> most, s5 -> show-01, n -> name, 2 -> 2311, s2 -> solid, t -> tall, b -> big, m2 -> most, 8 -> 8, m5 -> meet-03, p2 -> person, s -> silver, s4 -> she, d -> date-entity, m -> most, p -> promise-01, c3 -> church, a -> all, d2 -> describe-01, m4 -> music, i2 -> i, i -> it, c -> continent, s3 -> small, f2 -> front, l -> large, f -> foot, o -> organ, s6 -> study-01, c2 -> central))),[Ljava.lang.String;@7ff6c1c1,Annotation([Ljava.lang.String;@212aa789,[Ljava.lang.String;@775d2461,[Ljava.lang.String;@3ff9980),Annotation([Ljava.lang.String;@1b6a48d,[Ljava.lang.String;@7ded25db,[Ledu.cmu.lti.nlp.amr.Dependency;@5c508d73),Annotation([Ljava.lang.String;@2c76a85e,[Ljava.lang.String;@2227ca20,[Ljava.lang.String;@62470c64),Annotation([Ljava.lang.String;@267eaba4,[Ljava.lang.String;@4636afba,[Ledu.cmu.lti.nlp.amr.Entity;@304b0059))
AMR:
(a / all, op, d / date-entity)
(b / big, degree, m3 / most)
(c / continent, mod, c2 / central)
(c / continent, name, n / name)
(d / date-entity, year, 2 / 2311)
(d2 / describe-01, ARG0, s4 / she)
(d2 / describe-01, ARG1, s3 / small)
(d2 / describe-01, ARG2, o / organ)
(f / foot, op, p / promise-01)
(l / large, degree, m2 / most)
(m5 / meet-03, ARG0, p2 / person)
(m5 / meet-03, ARG1, i2 / i)
(m5 / meet-03, ARG2, c3 / church)
(m5 / meet-03, location, f2 / front)
(m5 / meet-03, time, d / date-entity)
(n / name, op, "Europe")
(o / organ, location, c / continent)
(o / organ, mod, b / big)
(p / promise-01, ARG0, l / large)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, ARG2, s5 / show-01)
(s / silver, mod, s2 / solid)
(s2 / solid, domain, s4 / she)
(s3 / small, degree, m / most)
(s3 / small, op, 8 / 8)
(s5 / show-01, ARG0, m4 / music)
(s5 / show-01, ARG1, d2 / describe-01)
(s6 / study-01, ARG0, p2 / person)
(s6 / study-01, ARG1, i / it)
(t / tall, domain, f / foot)

Decoded in 1,600,234 microseconds
Sentence: soviet russia promised to stay neutral if germany were involved in war there were also secret clauses limiting the gains which the germans could make in poland

NER Entity: (country :name (name :op "soviet"))
NER Entity: (country :name (name :op "russia"))
NER Entity: (country :name (name :op "germany"))
NER Entity: (country :name (name :op "poland"))
Spans:
Span 14-15:  also => also
Span 16-17:  clauses => clause
Span 23-24:  could => possible
Span 22-23:  germans => (person :mod (country :name (name :op "Germany")))
Span 9-10:  involved => involve-01
Span 17-18:  limiting => limit-01
Span 5-6:  neutral => neutral
Span 2-3:  promised => promise-01
Span 15-16:  secret => secret
Span 4-5:  stay => stay-01
Span 11-12:  war => war

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),could,possible,false), Span(22,23,List(4, 3, 2, 1),germans,(person :mod (country :name (name :op "Germany"))),false), Span(17,18,List(5),limiting,limit-01,false), Span(16,17,List(6),clauses,clause,false), Span(15,16,List(7),secret,secret,false), Span(14,15,List(8),also,also,false), Span(11,12,List(9),war,war,false), Span(9,10,List(10),involved,involve-01,false), Span(5,6,List(11),neutral,neutral,false), Span(4,5,List(12),stay,stay-01,false), Span(2,3,List(13),promised,promise-01,false)),Map(2 -> country, 5 -> limit-01, 12 -> stay-01, 8 -> also, 7 -> secret, 1 -> person, 4 -> "Germany", 11 -> neutral, 6 -> clause, 0 -> possible, 9 -> war, 3 -> name, 10 -> involve-01, 13 -> promise-01),Map(n -> name, w -> war, s2 -> stay-01, p2 -> person, s -> secret, p -> possible, a -> also, i -> involve-01, c -> country, l -> limit-01, p3 -> promise-01, c2 -> clause, n2 -> neutral))),[Ljava.lang.String;@c03ebd4,Annotation([Ljava.lang.String;@556fb175,[Ljava.lang.String;@17eba425,[Ljava.lang.String;@6f658567),Annotation([Ljava.lang.String;@72196653,[Ljava.lang.String;@618d0daa,[Ledu.cmu.lti.nlp.amr.Dependency;@737c45ee),Annotation([Ljava.lang.String;@63d3477d,[Ljava.lang.String;@43fa92be,[Ljava.lang.String;@77b81acf),Annotation([Ljava.lang.String;@57e84970,[Ljava.lang.String;@532d8526,[Ledu.cmu.lti.nlp.amr.Entity;@5180ac73))
AMR:
(c / country, name, n / name)
(c2 / clause, mod, s / secret)
(i / involve-01, ARG1, p2 / person)
(i / involve-01, ARG2, w / war)
(l / limit-01, ARG0, w / war)
(l / limit-01, ARG1, c2 / clause)
(n / name, op, "Germany")
(p2 / person, mod, c / country)
(p3 / promise-01, ARG0, p / possible)
(p3 / promise-01, ARG1, s2 / stay-01)
(s2 / stay-01, ARG0, a / also)
(s2 / stay-01, ARG3, n2 / neutral)
(s2 / stay-01, condition, i / involve-01)

Decoded in 131,639 microseconds
Sentence: how had a conservative government happened  where were the golden days which paris and chicago and grosvenor square had promised them

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = how had a conservative government happened  where were the golden days which paris and chicago and grosvenor square had promised them
myTokenized = how had a conservative government happened where were the golden days which paris and chicago and grosvenor square had promised them
i = 6
prefix = List(how, had, a, conservative, government, happened, where)
regexr = \Qh\E ?\Qo\E ?\Qw\E ?\Qh\E ?\Qa\E ?\Qd\E ?\Qa\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qs\E ?\Qe\E ?\Qr\E ?\Qv\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qg\E ?\Qo\E ?\Qv\E ?\Qe\E ?\Qr\E ?\Qn\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qp\E ?\Qp\E ?\Qe\E ?\Qn\E ?\Qe\E ?\Qd\E ?\Qw\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: my colleague on the independent has promised a drink in return for a favourable mention

Spans:
Span 8-9:  drink => drink-01
Span 4-5:  independent => (depend-01 :polarity -)
Span 14-15:  mention => mention-01
Span 6-7:  promised => promise-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),mention,mention-01,false), Span(8,9,List(1),drink,drink-01,false), Span(6,7,List(2),promised,promise-01,false), Span(4,5,List(4, 3),independent,(depend-01 :polarity -),false)),Map(2 -> promise-01, 1 -> drink-01, 4 -> -, 0 -> mention-01, 3 -> depend-01),Map(d -> drink-01, m -> mention-01, p -> promise-01, d2 -> depend-01))),[Ljava.lang.String;@440ee479,Annotation([Ljava.lang.String;@2db9e6d7,[Ljava.lang.String;@7e244b5,[Ljava.lang.String;@180ccb1e),Annotation([Ljava.lang.String;@6feb2ae7,[Ljava.lang.String;@384ddd18,[Ledu.cmu.lti.nlp.amr.Dependency;@7fee6f88),Annotation([Ljava.lang.String;@7edc8b55,[Ljava.lang.String;@413fba84,[Ljava.lang.String;@3eee5193),Annotation([Ljava.lang.String;@102daa2c,[Ljava.lang.String;@25ff3700,[Ledu.cmu.lti.nlp.amr.Entity;@1673f47d))
AMR:
(d2 / depend-01, ARG1, d / drink-01)
(d2 / depend-01, polarity, -)
(m / mention-01, ARG1, p / promise-01)
(p / promise-01, ARG1, d / drink-01)

Decoded in 37,696 microseconds
Sentence: she promised and delivered complete confidentiality

Spans:
Span 2-3:  and => and
Span 4-5:  complete => complete
Span 5-6:  confidentiality => confidentiality
Span 3-4:  delivered => deliver-01
Span 1-2:  promised => promise-01
Span 0-1:  she => she

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),confidentiality,confidentiality,false), Span(4,5,List(1),complete,complete,false), Span(3,4,List(2),delivered,deliver-01,false), Span(2,3,List(3),and,and,false), Span(1,2,List(4),promised,promise-01,false), Span(0,1,List(5),she,she,false)),Map(2 -> deliver-01, 5 -> she, 1 -> complete, 4 -> promise-01, 0 -> confidentiality, 3 -> and),Map(s -> she, d -> deliver-01, p -> promise-01, a -> and, c -> confidentiality, c2 -> complete))),[Ljava.lang.String;@16b8460f,Annotation([Ljava.lang.String;@1bff8e70,[Ljava.lang.String;@26e0696c,[Ljava.lang.String;@57294564),Annotation([Ljava.lang.String;@568ad4f0,[Ljava.lang.String;@34a204f3,[Ledu.cmu.lti.nlp.amr.Dependency;@78f30883),Annotation([Ljava.lang.String;@1bb40e7e,[Ljava.lang.String;@4a238067,[Ljava.lang.String;@60c31037),Annotation([Ljava.lang.String;@265dbc82,[Ljava.lang.String;@54030e7b,[Ledu.cmu.lti.nlp.amr.Entity;@14abd854))
AMR:
(a / and, op, p / promise-01)
(c / confidentiality, mod, c2 / complete)
(d / deliver-01, ARG0, s / she)
(d / deliver-01, ARG1, c / confidentiality)
(p / promise-01, ARG0, s / she)

Decoded in 16,862 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@1e077d66,Annotation([Ljava.lang.String;@7db9c2f0,[Ljava.lang.String;@2ead5b0c,[Ljava.lang.String;@773488c4),Annotation([Ljava.lang.String;@19ff3900,[Ljava.lang.String;@42f73c55,[Ledu.cmu.lti.nlp.amr.Dependency;@759a12cb),Annotation([Ljava.lang.String;@564809be,[Ljava.lang.String;@1377c533,[Ljava.lang.String;@1c33a141),Annotation([Ljava.lang.String;@19fc0de,[Ljava.lang.String;@1f2f2fa7,[Ledu.cmu.lti.nlp.amr.Entity;@52e18cef))
AMR:


Decoded in 1,956 microseconds
Sentence: so far we have discussed the right to promise

Spans:
Span 4-5:  discussed => discuss-01
Span 1-2:  far => far
Span 8-9:  promise => promise-01
Span 0-1:  so => so
Span 2-3:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promise,promise-01,false), Span(4,5,List(1),discussed,discuss-01,false), Span(2,3,List(2),we,we,false), Span(1,2,List(3),far,far,false), Span(0,1,List(4),so,so,false)),Map(2 -> we, 1 -> discuss-01, 4 -> so, 0 -> promise-01, 3 -> far),Map(w -> we, s -> so, d -> discuss-01, p -> promise-01, f -> far))),[Ljava.lang.String;@55ebc96b,Annotation([Ljava.lang.String;@6af4bbde,[Ljava.lang.String;@695a22ad,[Ljava.lang.String;@1c9ac1e4),Annotation([Ljava.lang.String;@742f6e67,[Ljava.lang.String;@55f967c8,[Ledu.cmu.lti.nlp.amr.Dependency;@690ca790),Annotation([Ljava.lang.String;@3dcd14d1,[Ljava.lang.String;@6311c509,[Ljava.lang.String;@239f04af),Annotation([Ljava.lang.String;@1cec8f6e,[Ljava.lang.String;@6ebc8d97,[Ledu.cmu.lti.nlp.amr.Entity;@1cf3ed4d))
AMR:
(d / discuss-01, ARG0, w / we)
(d / discuss-01, ARG2, p / promise-01)
(d / discuss-01, location, f / far)
(d / discuss-01, time, s / so)

Decoded in 15,699 microseconds
Sentence: has anything happened to it  before harry could understand this question they had arrived in the forecourt of the royal charitable hospital in five minutes just as howard had promised

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = has anything happened to it  before harry could understand this question they had arrived in the forecourt of the royal charitable hospital in five minutes just as howard had promised
myTokenized = has anything happened to it before harry could understand this question they had arrived in the forecourt of the royal charitable hospital in five minutes just as howard had promised
i = 5
prefix = List(has, anything, happened, to, it, before)
regexr = \Qh\E ?\Qa\E ?\Qs\E ?\Qa\E ?\Qn\E ?\Qy\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qh\E ?\Qa\E ?\Qp\E ?\Qp\E ?\Qe\E ?\Qn\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qi\E ?\Qt\E ?\Qb\E ?\Qe\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   mr forsyth yesterday met his new staff and promised to listen before acting

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   mr forsyth yesterday met his new staff and promised to listen before acting
myTokenized = mr forsyth yesterday met his new staff and promised to listen before acting
i = 0
prefix = List(mr)
regexr = \Qm\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: admittedly banque indosuez has promised not to bid for 12 months and insists it is looking to forge a friendly partnership

Spans:
Span 9-10:  12 => 12
Span 11-12:  and => and
Span 7-8:  bid => bid-01
Span 17-18:  forge => forge-02
Span 19-20:  friendly => friendly-41
Span 12-13:  insists => insist-01
Span 13-14:  it => it
Span 10-11:  months => (temporal-quantity :unit month)
Span 20-21:  partnership => partner-01
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),partnership,partner-01,false), Span(19,20,List(1),friendly,friendly-41,false), Span(17,18,List(2),forge,forge-02,false), Span(13,14,List(3),it,it,false), Span(12,13,List(4),insists,insist-01,false), Span(11,12,List(5),and,and,false), Span(10,11,List(7, 6),months,(temporal-quantity :unit month),false), Span(9,10,List(8),12,12,false), Span(7,8,List(9),bid,bid-01,false), Span(4,5,List(10),promised,promise-01,false)),Map(2 -> forge-02, 5 -> and, 8 -> 12, 7 -> month, 1 -> friendly-41, 4 -> insist-01, 6 -> temporal-quantity, 9 -> bid-01, 0 -> partner-01, 10 -> promise-01, 3 -> it),Map(b -> bid-01, t -> temporal-quantity, p2 -> promise-01, m -> month, 1 -> 12, p -> partner-01, a -> and, i2 -> insist-01, i -> it, f2 -> forge-02, f -> friendly-41))),[Ljava.lang.String;@61f6015,Annotation([Ljava.lang.String;@75dd05d6,[Ljava.lang.String;@1aa610e,[Ljava.lang.String;@58c9defc),Annotation([Ljava.lang.String;@2d4e9fee,[Ljava.lang.String;@4e5d97f,[Ledu.cmu.lti.nlp.amr.Dependency;@e2a235c),Annotation([Ljava.lang.String;@70777447,[Ljava.lang.String;@32731b00,[Ljava.lang.String;@22f1b6e0),Annotation([Ljava.lang.String;@2b1d3e0c,[Ljava.lang.String;@cd49bf1,[Ledu.cmu.lti.nlp.amr.Entity;@5a49f1cb))
AMR:
(a / and, op, f2 / forge-02)
(a / and, op, i2 / insist-01)
(a / and, op, p2 / promise-01)
(f / friendly-41, ARG1, p / partner-01)
(f2 / forge-02, ARG0, i / it)
(f2 / forge-02, ARG1, p / partner-01)
(i / it, part, t / temporal-quantity)
(p2 / promise-01, ARG2, b / bid-01)
(t / temporal-quantity, quant, 1 / 12)
(t / temporal-quantity, unit, m / month)

Decoded in 62,044 microseconds
Sentence: the mens quarterfinals promise to be more fiercely contested the holders malory facing the unpredictable speedwell rucanor in the tie of the round

Spans:
Span 8-9:  contested => contest-01
Span 12-13:  facing => face-01
Span 10-11:  holders => (person :ARG0-of hold-01)
Span 3-4:  promise => promise-01
Span 22-23:  round => round
Span 19-20:  tie => tie
Span 14-15:  unpredictable => predict-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),round,round,false), Span(19,20,List(1),tie,tie,false), Span(14,15,List(2),unpredictable,predict-01,false), Span(12,13,List(3),facing,face-01,false), Span(10,11,List(5, 4),holders,(person :ARG0-of hold-01),false), Span(8,9,List(6),contested,contest-01,false), Span(3,4,List(7),promise,promise-01,false)),Map(2 -> predict-01, 5 -> hold-01, 7 -> promise-01, 1 -> tie, 4 -> person, 6 -> contest-01, 0 -> round, 3 -> face-01),Map(h -> hold-01, t -> tie, p2 -> person, p -> predict-01, r -> round, c -> contest-01, f -> face-01, p3 -> promise-01))),[Ljava.lang.String;@2ca174bc,Annotation([Ljava.lang.String;@1bf6f988,[Ljava.lang.String;@73785e0f,[Ljava.lang.String;@63676602),Annotation([Ljava.lang.String;@195a404a,[Ljava.lang.String;@7432c746,[Ledu.cmu.lti.nlp.amr.Dependency;@31b90043),Annotation([Ljava.lang.String;@68c04835,[Ljava.lang.String;@27c4c54d,[Ljava.lang.String;@677556a0),Annotation([Ljava.lang.String;@488a5770,[Ljava.lang.String;@72729f44,[Ledu.cmu.lti.nlp.amr.Entity;@4336640f))
AMR:
(c / contest-01, ARG1, f / face-01)
(f / face-01, ARG0, p2 / person)
(f / face-01, ARG1, t / tie)
(h / hold-01, ARG0, p2 / person)
(p / predict-01, ARG1, t / tie)
(p3 / promise-01, ARG2, c / contest-01)
(t / tie, location, r / round)

Decoded in 61,454 microseconds
Sentence: ramona looks back on her highschool romance with ed specifically a saturday night years ago when she waited in tremulous anticipation for eds pickup to return im comin for you he promised lovers words that will later ring with menace

Spans:
Span 20-21:  anticipation => anticipate-01
Span 2-3:  back => back
Span 30-31:  he => he
Span 36-37:  later => late
Span 1-2:  looks => look-02
Span 32-33:  lovers => lover
Span 39-40:  menace => menace-01
Span 12-13:  night => night
Span 23-24:  pickup => pickup
Span 31-32:  promised => promise-01
Span 37-38:  ring => ring
Span 11-12:  saturday => saturday
Span 16-17:  she => she
Span 9-10:  specifically => specific
Span 17-18:  waited => wait-01
Span 33-34:  words => word
Span 13-14:  years => (temporal-quantity :unit year)
Span 29-30:  you => you

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),menace,menace-01,false), Span(37,38,List(1),ring,ring,false), Span(36,37,List(2),later,late,false), Span(33,34,List(3),words,word,false), Span(32,33,List(4),lovers,lover,false), Span(31,32,List(5),promised,promise-01,false), Span(30,31,List(6),he,he,false), Span(29,30,List(7),you,you,false), Span(23,24,List(8),pickup,pickup,false), Span(20,21,List(9),anticipation,anticipate-01,false), Span(17,18,List(10),waited,wait-01,false), Span(16,17,List(11),she,she,false), Span(13,14,List(13, 12),years,(temporal-quantity :unit year),false), Span(12,13,List(14),night,night,false), Span(11,12,List(15),saturday,saturday,false), Span(9,10,List(16),specifically,specific,false), Span(2,3,List(17),back,back,false), Span(1,2,List(18),looks,look-02,false)),Map(2 -> late, 5 -> promise-01, 12 -> temporal-quantity, 15 -> saturday, 8 -> pickup, 18 -> look-02, 7 -> you, 17 -> back, 1 -> ring, 4 -> lover, 11 -> she, 14 -> night, 6 -> he, 0 -> menace-01, 9 -> anticipate-01, 16 -> specific, 3 -> word, 10 -> wait-01, 13 -> year),Map(n -> night, w -> word, h -> he, s2 -> saturday, b -> back, t -> temporal-quantity, p2 -> pickup, l3 -> look-02, s -> she, m -> menace-01, p -> promise-01, y -> you, a -> anticipate-01, l2 -> lover, w2 -> wait-01, r -> ring, s3 -> specific, l -> late, y2 -> year))),[Ljava.lang.String;@3640e283,Annotation([Ljava.lang.String;@5dd72248,[Ljava.lang.String;@570bd519,[Ljava.lang.String;@49d388f4),Annotation([Ljava.lang.String;@5ec47109,[Ljava.lang.String;@32d9367a,[Ledu.cmu.lti.nlp.amr.Dependency;@52879daa),Annotation([Ljava.lang.String;@45802e3a,[Ljava.lang.String;@625b057b,[Ljava.lang.String;@45c500af),Annotation([Ljava.lang.String;@8b004f2,[Ljava.lang.String;@5c14b052,[Ledu.cmu.lti.nlp.amr.Entity;@524406b8))
AMR:
(a / anticipate-01, ARG1, p2 / pickup)
(l3 / look-02, ARG1, s2 / saturday)
(l3 / look-02, direction, b / back)
(l3 / look-02, time, w2 / wait-01)
(m / menace-01, ARG1, a / anticipate-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG2, l2 / lover)
(r / ring, source, m / menace-01)
(r / ring, source, w / word)
(r / ring, time, l / late)
(s3 / specific, op, p / promise-01)
(t / temporal-quantity, mod, n / night)
(t / temporal-quantity, unit, y2 / year)
(w / word, poss, h / he)
(w2 / wait-01, ARG0, s / she)
(w2 / wait-01, ARG1, y / you)
(w2 / wait-01, ARG2, l2 / lover)
(w2 / wait-01, duration, t / temporal-quantity)

Decoded in 549,157 microseconds
Sentence: declaring global warming caused by the build up of carbon dioxide and other gases to be the most worrisome of all environmental threats dr cunningham promised a major longterm programme of energy conservation

Spans:
Span 20-21:  all => all
Span 11-12:  and => and
Span 6-7:  build => build-01
Span 3-4:  caused => cause-01
Span 32-33:  conservation => conserve-01
Span 0-1:  declaring => declare-01
Span 31-32:  energy => energy
Span 21-22:  environmental => environment
Span 13-14:  gases => gas
Span 1-2:  global => globe
Span 27-28:  major => major
Span 17-18:  most => most
Span 12-13:  other => other
Span 29-30:  programme => program
Span 25-26:  promised => promise-01
Span 22-23:  threats => threaten-01
Span 2-3:  warming => warm-01
Span 18-19:  worrisome => worry-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),conservation,conserve-01,false), Span(31,32,List(1),energy,energy,false), Span(29,30,List(2),programme,program,false), Span(27,28,List(3),major,major,false), Span(25,26,List(4),promised,promise-01,false), Span(22,23,List(5),threats,threaten-01,false), Span(21,22,List(6),environmental,environment,false), Span(20,21,List(7),all,all,false), Span(18,19,List(8),worrisome,worry-01,false), Span(17,18,List(9),most,most,false), Span(13,14,List(10),gases,gas,false), Span(12,13,List(11),other,other,false), Span(11,12,List(12),and,and,false), Span(6,7,List(13),build,build-01,false), Span(3,4,List(14),caused,cause-01,false), Span(2,3,List(15),warming,warm-01,false), Span(1,2,List(16),global,globe,false), Span(0,1,List(17),declaring,declare-01,false)),Map(2 -> program, 5 -> threaten-01, 12 -> and, 15 -> warm-01, 8 -> worry-01, 7 -> all, 17 -> declare-01, 1 -> energy, 4 -> promise-01, 11 -> other, 14 -> cause-01, 6 -> environment, 0 -> conserve-01, 9 -> most, 16 -> globe, 3 -> major, 10 -> gas, 13 -> build-01),Map(e -> energy, w -> worry-01, b -> build-01, t -> threaten-01, m2 -> most, p2 -> promise-01, e2 -> environment, d -> declare-01, m -> major, g2 -> globe, p -> program, g -> gas, a -> all, w2 -> warm-01, a2 -> and, c -> conserve-01, o -> other, c2 -> cause-01))),[Ljava.lang.String;@70154439,Annotation([Ljava.lang.String;@43233ac,[Ljava.lang.String;@7bde635a,[Ljava.lang.String;@454ce93e),Annotation([Ljava.lang.String;@3c6508fd,[Ljava.lang.String;@d313905,[Ledu.cmu.lti.nlp.amr.Dependency;@1a967e07),Annotation([Ljava.lang.String;@e2c0b34,[Ljava.lang.String;@6d938a30,[Ljava.lang.String;@71558d83),Annotation([Ljava.lang.String;@27bdcd96,[Ljava.lang.String;@1e04473c,[Ledu.cmu.lti.nlp.amr.Entity;@2ae0c389))
AMR:
(a2 / and, op, d / declare-01)
(a2 / and, op, g / gas)
(b / build-01, ARG1, m / major)
(c / conserve-01, ARG1, e / energy)
(c / conserve-01, consist, p / program)
(c2 / cause-01, ARG0, p / program)
(c2 / cause-01, ARG1, w2 / warm-01)
(d / declare-01, ARG0, a / all)
(d / declare-01, ARG1, w2 / warm-01)
(g / gas, domain, w / worry-01)
(p / program, mod, m / major)
(p2 / promise-01, ARG1, p / program)
(t / threaten-01, ARG1, e2 / environment)
(w / worry-01, ARG1, o / other)
(w / worry-01, ARG2, t / threaten-01)
(w / worry-01, degree, m2 / most)
(w2 / warm-01, ARG1, g2 / globe)

Decoded in 493,586 microseconds
Sentence: he promised a british government report within the next few weeks quantifying how much damage could be expected in the uk

NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "uk"))
Spans:
Span 15-16:  could => possible
Span 14-15:  damage => damage-01
Span 17-18:  expected => expect-01
Span 9-10:  few => few
Span 0-1:  he => he
Span 13-14:  much => much
Span 8-9:  next => next
Span 1-2:  promised => promise-01
Span 5-6:  report => report
Span 10-11:  weeks => (temporal-quantity :unit week)
Span 6-7:  within => within

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),expected,expect-01,false), Span(15,16,List(1),could,possible,false), Span(14,15,List(2),damage,damage-01,false), Span(13,14,List(3),much,much,false), Span(10,11,List(5, 4),weeks,(temporal-quantity :unit week),false), Span(9,10,List(6),few,few,false), Span(8,9,List(7),next,next,false), Span(6,7,List(8),within,within,false), Span(5,6,List(9),report,report,false), Span(1,2,List(10),promised,promise-01,false), Span(0,1,List(11),he,he,false)),Map(2 -> damage-01, 5 -> week, 8 -> within, 7 -> next, 1 -> possible, 11 -> he, 4 -> temporal-quantity, 6 -> few, 9 -> report, 0 -> expect-01, 10 -> promise-01, 3 -> much),Map(n -> next, w -> week, e -> expect-01, h -> he, t -> temporal-quantity, p2 -> promise-01, m -> much, d -> damage-01, p -> possible, r -> report, w2 -> within, f -> few))),[Ljava.lang.String;@a456d5d,Annotation([Ljava.lang.String;@540ef9ef,[Ljava.lang.String;@233ae506,[Ljava.lang.String;@6f91fefb),Annotation([Ljava.lang.String;@59fb49f6,[Ljava.lang.String;@b4e3a1,[Ledu.cmu.lti.nlp.amr.Dependency;@63cc5f63),Annotation([Ljava.lang.String;@7e8a8fc4,[Ljava.lang.String;@3ae4cdc3,[Ljava.lang.String;@380db6a),Annotation([Ljava.lang.String;@c50df2,[Ljava.lang.String;@9168b43,[Ledu.cmu.lti.nlp.amr.Entity;@2710e05e))
AMR:
(d / damage-01, ARG1, m / much)
(e / expect-01, ARG1, d / damage-01)
(e / expect-01, time, p2 / promise-01)
(f / few, op, t / temporal-quantity)
(p / possible, domain, e / expect-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, r / report)
(p2 / promise-01, location, w2 / within)
(t / temporal-quantity, unit, w / week)
(w / week, mod, n / next)
(w2 / within, op, t / temporal-quantity)

Decoded in 57,539 microseconds
Sentence: with the local black market flooded with hundreds of gallons of cutprice vodka brought in by entrepreneurial poles it promises to be a spectacular bash

Spans:
Span 3-4:  black => black
Span 5-6:  flooded => flood-01
Span 9-10:  gallons => (volume-quantity :unit gallon)
Span 18-19:  it => it
Span 2-3:  local => local
Span 4-5:  market => market
Span 19-20:  promises => promise-01
Span 23-24:  spectacular => spectacular
Span 12-13:  vodka => vodka

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),spectacular,spectacular,false), Span(19,20,List(1),promises,promise-01,false), Span(18,19,List(2),it,it,false), Span(12,13,List(3),vodka,vodka,false), Span(9,10,List(5, 4),gallons,(volume-quantity :unit gallon),false), Span(5,6,List(6),flooded,flood-01,false), Span(4,5,List(7),market,market,false), Span(3,4,List(8),black,black,false), Span(2,3,List(9),local,local,false)),Map(2 -> it, 5 -> gallon, 8 -> black, 7 -> market, 1 -> promise-01, 4 -> volume-quantity, 6 -> flood-01, 9 -> local, 0 -> spectacular, 3 -> vodka),Map(v2 -> volume-quantity, b -> black, s -> spectacular, m -> market, v -> vodka, g -> gallon, p -> promise-01, i -> it, l -> local, f -> flood-01))),[Ljava.lang.String;@34c40ed6,Annotation([Ljava.lang.String;@33aa1eaa,[Ljava.lang.String;@65c34565,[Ljava.lang.String;@77011e14),Annotation([Ljava.lang.String;@6a5df015,[Ljava.lang.String;@3d3d2941,[Ledu.cmu.lti.nlp.amr.Dependency;@7a5f89cf),Annotation([Ljava.lang.String;@1650b3cd,[Ljava.lang.String;@c4c632d,[Ljava.lang.String;@6b0325a9),Annotation([Ljava.lang.String;@1b9db122,[Ljava.lang.String;@dd83d58,[Ledu.cmu.lti.nlp.amr.Entity;@6fa36381))
AMR:
(f / flood-01, ARG0, s / spectacular)
(f / flood-01, ARG1, m / market)
(f / flood-01, duration, v / vodka)
(m / market, mod, b / black)
(m / market, mod, l / local)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG2, f / flood-01)
(v / vodka, quant, v2 / volume-quantity)
(v2 / volume-quantity, unit, g / gallon)

Decoded in 209,486 microseconds
Sentence: salary is said to have been an initial sticking point but even promises that the new br chairman would get at least double the annual 92000 sir robert currently receives dash

Spans:
Span 10-11:  but => contrast-01
Span 17-18:  chairman => (have-org-role-91 :ARG2 chairman)
Span 28-29:  currently => current
Span 22-23:  double => double
Span 7-8:  initial => initial
Span 15-16:  new => new
Span 9-10:  point => point
Span 12-13:  promises => promise-01
Span 29-30:  receives => receive-01
Span 2-3:  said => say-01
Span 0-1:  salary => salary
Span 8-9:  sticking => stick-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),receives,receive-01,false), Span(28,29,List(1),currently,current,false), Span(22,23,List(2),double,double,false), Span(17,18,List(4, 3),chairman,(have-org-role-91 :ARG2 chairman),false), Span(15,16,List(5),new,new,false), Span(12,13,List(6),promises,promise-01,false), Span(10,11,List(7),but,contrast-01,false), Span(9,10,List(8),point,point,false), Span(8,9,List(9),sticking,stick-01,false), Span(7,8,List(10),initial,initial,false), Span(2,3,List(11),said,say-01,false), Span(0,1,List(12),salary,salary,false)),Map(2 -> double, 5 -> new, 12 -> salary, 8 -> point, 7 -> contrast-01, 1 -> current, 4 -> chairman, 11 -> say-01, 6 -> promise-01, 0 -> receive-01, 9 -> stick-01, 3 -> have-org-role-91, 10 -> initial),Map(n -> new, h -> have-org-role-91, s2 -> say-01, p2 -> point, s -> stick-01, d -> double, p -> promise-01, c3 -> contrast-01, r -> receive-01, i -> initial, c -> current, s3 -> salary, c2 -> chairman))),[Ljava.lang.String;@4fd9e369,Annotation([Ljava.lang.String;@69e12b73,[Ljava.lang.String;@3debc153,[Ljava.lang.String;@40e14fe7),Annotation([Ljava.lang.String;@844e7f8,[Ljava.lang.String;@63d94f05,[Ledu.cmu.lti.nlp.amr.Dependency;@4fd30479),Annotation([Ljava.lang.String;@26cacce0,[Ljava.lang.String;@4c509a05,[Ljava.lang.String;@3fafe567),Annotation([Ljava.lang.String;@34fdeddb,[Ljava.lang.String;@b0ae00b,[Ledu.cmu.lti.nlp.amr.Entity;@76faf7d6))
AMR:
(c3 / contrast-01, ARG1, s2 / say-01)
(c3 / contrast-01, ARG2, p / promise-01)
(h / have-org-role-91, ARG1, s2 / say-01)
(h / have-org-role-91, ARG2, c2 / chairman)
(p / promise-01, ARG0, s3 / salary)
(p / promise-01, ARG1, d / double)
(p2 / point, mod, i / initial)
(p2 / point, mod, s / stick-01)
(r / receive-01, ARG1, p / promise-01)
(r / receive-01, manner, c / current)
(s2 / say-01, ARG0, n / new)
(s2 / say-01, ARG1, p2 / point)

Decoded in 96,679 microseconds
Sentence: still next weeks finale of civilization promises to tell the tales of how slim became both a movie star and marvin gayes fatherinlaw

Spans:
Span 19-20:  and => and
Span 14-15:  became => become-01
Span 15-16:  both => both
Span 5-6:  civilization => civilization
Span 17-18:  movie => movie
Span 1-2:  next => next
Span 6-7:  promises => promise-01
Span 13-14:  slim => slim-02
Span 18-19:  star => star
Span 0-1:  still => still
Span 8-9:  tell => tell-01
Span 2-3:  weeks => (temporal-quantity :unit week)

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),and,and,false), Span(18,19,List(1),star,star,false), Span(17,18,List(2),movie,movie,false), Span(15,16,List(3),both,both,false), Span(14,15,List(4),became,become-01,false), Span(13,14,List(5),slim,slim-02,false), Span(8,9,List(6),tell,tell-01,false), Span(6,7,List(7),promises,promise-01,false), Span(5,6,List(8),civilization,civilization,false), Span(2,3,List(10, 9),weeks,(temporal-quantity :unit week),false), Span(1,2,List(11),next,next,false), Span(0,1,List(12),still,still,false)),Map(2 -> movie, 5 -> slim-02, 12 -> still, 8 -> civilization, 7 -> promise-01, 1 -> star, 4 -> become-01, 11 -> next, 6 -> tell-01, 0 -> and, 9 -> temporal-quantity, 3 -> both, 10 -> week),Map(w -> week, n -> next, s2 -> slim-02, b -> both, t -> tell-01, b2 -> become-01, s -> star, m -> movie, p -> promise-01, a -> and, t2 -> temporal-quantity, c -> civilization, s3 -> still))),[Ljava.lang.String;@56a53fa0,Annotation([Ljava.lang.String;@7af44dd0,[Ljava.lang.String;@3d20d1c0,[Ljava.lang.String;@35aab39a),Annotation([Ljava.lang.String;@59f55efc,[Ljava.lang.String;@7c2f2087,[Ledu.cmu.lti.nlp.amr.Dependency;@7a00bec2),Annotation([Ljava.lang.String;@46ebf121,[Ljava.lang.String;@2c23d1e7,[Ljava.lang.String;@63a9ab54),Annotation([Ljava.lang.String;@182f4aea,[Ljava.lang.String;@48df550d,[Ledu.cmu.lti.nlp.amr.Entity;@3e48eddb))
AMR:
(a / and, op, s / star)
(n / next, manner, s3 / still)
(p / promise-01, ARG0, s3 / still)
(p / promise-01, ARG1, t / tell-01)
(s / star, mod, b / both)
(s / star, mod, m / movie)
(s2 / slim-02, ARG1, b / both)
(s2 / slim-02, ARG2, b2 / become-01)
(t / tell-01, ARG0, c / civilization)
(t / tell-01, ARG1, t2 / temporal-quantity)
(t / tell-01, ARG2, b2 / become-01)
(t2 / temporal-quantity, unit, w / week)

Decoded in 146,327 microseconds
Sentence: elektrowatt has almost 30 per cent of unitech but has promised not to mount a bid unless a third party intervenes

Spans:
Span 3-4:  30 => 30
Span 2-3:  almost => almost
Span 15-16:  bid => bid-01
Span 8-9:  but => contrast-01
Span 5-6:  cent => (monetary-quantity :unit cent)
Span 13-14:  mount => mount-01
Span 19-20:  party => party
Span 10-11:  promised => promise-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),party,party,false), Span(15,16,List(1),bid,bid-01,false), Span(13,14,List(2),mount,mount-01,false), Span(10,11,List(3),promised,promise-01,false), Span(8,9,List(4),but,contrast-01,false), Span(5,6,List(6, 5),cent,(monetary-quantity :unit cent),false), Span(3,4,List(7),30,30,false), Span(2,3,List(8),almost,almost,false)),Map(2 -> mount-01, 5 -> monetary-quantity, 8 -> almost, 7 -> 30, 1 -> bid-01, 4 -> contrast-01, 6 -> cent, 0 -> party, 3 -> promise-01),Map(b -> bid-01, m2 -> monetary-quantity, p2 -> promise-01, m -> mount-01, p -> party, a -> almost, c -> contrast-01, 3 -> 30, c2 -> cent))),[Ljava.lang.String;@25f7e4cf,Annotation([Ljava.lang.String;@35cee582,[Ljava.lang.String;@223dd567,[Ljava.lang.String;@9856ec1),Annotation([Ljava.lang.String;@172a45c9,[Ljava.lang.String;@584b9b00,[Ledu.cmu.lti.nlp.amr.Dependency;@4bad4a49),Annotation([Ljava.lang.String;@5de8256f,[Ljava.lang.String;@33f1ca93,[Ljava.lang.String;@472a9389),Annotation([Ljava.lang.String;@3c3c2bdf,[Ljava.lang.String;@12645c5e,[Ledu.cmu.lti.nlp.amr.Entity;@7aec28c0))
AMR:
(b / bid-01, ARG0, p / party)
(c / contrast-01, ARG1, m2 / monetary-quantity)
(c / contrast-01, ARG2, p2 / promise-01)
(m / mount-01, ARG0, a / almost)
(m / mount-01, ARG1, b / bid-01)
(m2 / monetary-quantity, unit, c2 / cent)
(p2 / promise-01, ARG1, 3 / 30)
(p2 / promise-01, ARG2, m / mount-01)

Decoded in 62,907 microseconds
Sentence: but i suspect that the desire for instant gratification which the pass promises is also a factor

Spans:
Span 14-15:  also => also
Span 0-1:  but => contrast-01
Span 5-6:  desire => desire-01
Span 16-17:  factor => factor
Span 1-2:  i => i
Span 7-8:  instant => instant
Span 12-13:  promises => promise-01
Span 2-3:  suspect => suspect-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),factor,factor,false), Span(14,15,List(1),also,also,false), Span(12,13,List(2),promises,promise-01,false), Span(7,8,List(3),instant,instant,false), Span(5,6,List(4),desire,desire-01,false), Span(2,3,List(5),suspect,suspect-01,false), Span(1,2,List(6),i,i,false), Span(0,1,List(7),but,contrast-01,false)),Map(2 -> promise-01, 5 -> suspect-01, 7 -> contrast-01, 1 -> also, 4 -> desire-01, 6 -> i, 0 -> factor, 3 -> instant),Map(s -> suspect-01, d -> desire-01, p -> promise-01, a -> also, i2 -> i, i -> instant, c -> contrast-01, f -> factor))),[Ljava.lang.String;@2667944c,Annotation([Ljava.lang.String;@5a391d46,[Ljava.lang.String;@5bb10cf0,[Ljava.lang.String;@44c88f97),Annotation([Ljava.lang.String;@4b4b25c8,[Ljava.lang.String;@329d9416,[Ledu.cmu.lti.nlp.amr.Dependency;@7654a50),Annotation([Ljava.lang.String;@af1cdfb,[Ljava.lang.String;@90a1f5a,[Ljava.lang.String;@77905258),Annotation([Ljava.lang.String;@240e4cbb,[Ljava.lang.String;@26cf9b7b,[Ledu.cmu.lti.nlp.amr.Entity;@7e8bc25))
AMR:
(c / contrast-01, ARG1, i / instant)
(c / contrast-01, ARG2, s / suspect-01)
(f / factor, domain, d / desire-01)
(f / factor, mod, a / also)
(p / promise-01, ARG1, d / desire-01)
(s / suspect-01, ARG0, i2 / i)
(s / suspect-01, ARG1, f / factor)

Decoded in 107,668 microseconds
Sentence: seldom has royal ascot promised such exciting racing throughout the four days

Spans:
Span 11-12:  days => (temporal-quantity :unit day)
Span 6-7:  exciting => excite-01
Span 10-11:  four => 4
Span 4-5:  promised => promise-01
Span 7-8:  racing => race-01
Span 2-3:  royal => royal
Span 0-1:  seldom => seldom
Span 5-6:  such => such
Span 8-9:  throughout => throughout

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),days,(temporal-quantity :unit day),false), Span(10,11,List(2),four,4,false), Span(8,9,List(3),throughout,throughout,false), Span(7,8,List(4),racing,race-01,false), Span(6,7,List(5),exciting,excite-01,false), Span(5,6,List(6),such,such,false), Span(4,5,List(7),promised,promise-01,false), Span(2,3,List(8),royal,royal,false), Span(0,1,List(9),seldom,seldom,false)),Map(2 -> 4, 5 -> excite-01, 8 -> royal, 7 -> promise-01, 1 -> day, 4 -> race-01, 6 -> such, 9 -> seldom, 0 -> temporal-quantity, 3 -> throughout),Map(e -> excite-01, s2 -> seldom, t -> temporal-quantity, s -> such, d -> day, r2 -> royal, p -> promise-01, 4 -> 4, t2 -> throughout, r -> race-01))),[Ljava.lang.String;@40982531,Annotation([Ljava.lang.String;@44b1d518,[Ljava.lang.String;@771d3de3,[Ljava.lang.String;@20ca3f2d),Annotation([Ljava.lang.String;@3df9b42c,[Ljava.lang.String;@54a3d47d,[Ledu.cmu.lti.nlp.amr.Dependency;@4fd385f4),Annotation([Ljava.lang.String;@47ff7f1d,[Ljava.lang.String;@56f26dd8,[Ljava.lang.String;@4609ac80),Annotation([Ljava.lang.String;@251c2b6c,[Ljava.lang.String;@5c66d27c,[Ledu.cmu.lti.nlp.amr.Entity;@6284fa48))
AMR:
(e / excite-01, ARG0, t / temporal-quantity)
(e / excite-01, ARG1, r / race-01)
(p / promise-01, ARG1, r2 / royal)
(p / promise-01, ARG2, r / race-01)
(p / promise-01, time, s2 / seldom)
(r / race-01, ARG1, s / such)
(r / race-01, ARG2, t2 / throughout)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, d / day)

Decoded in 42,928 microseconds
Sentence: the classic procedure if the weather promises fair is to leave the refuge before daybreak in order to be on or close to the summit by sunrise

Spans:
Span 13-14:  before => before
Span 1-2:  classic => classic
Span 7-8:  fair => fair
Span 10-11:  leave => leave-01
Span 20-21:  or => or
Span 2-3:  procedure => procedure
Span 6-7:  promises => promise-01
Span 12-13:  refuge => refuge
Span 24-25:  summit => summit
Span 5-6:  weather => weather

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),summit,summit,false), Span(20,21,List(1),or,or,false), Span(13,14,List(2),before,before,false), Span(12,13,List(3),refuge,refuge,false), Span(10,11,List(4),leave,leave-01,false), Span(7,8,List(5),fair,fair,false), Span(6,7,List(6),promises,promise-01,false), Span(5,6,List(7),weather,weather,false), Span(2,3,List(8),procedure,procedure,false), Span(1,2,List(9),classic,classic,false)),Map(2 -> before, 5 -> fair, 8 -> procedure, 7 -> weather, 1 -> or, 4 -> leave-01, 6 -> promise-01, 9 -> classic, 0 -> summit, 3 -> refuge),Map(w -> weather, b -> before, p2 -> procedure, s -> summit, p -> promise-01, r -> refuge, c -> classic, l -> leave-01, f -> fair, o -> or))),[Ljava.lang.String;@84bbf80,Annotation([Ljava.lang.String;@250970c1,[Ljava.lang.String;@ec9a1e6,[Ljava.lang.String;@57a40a9f),Annotation([Ljava.lang.String;@52b579ac,[Ljava.lang.String;@84735a0,[Ledu.cmu.lti.nlp.amr.Dependency;@7b119f9e),Annotation([Ljava.lang.String;@42067d31,[Ljava.lang.String;@38053dd4,[Ljava.lang.String;@601e4607),Annotation([Ljava.lang.String;@6387a6dd,[Ljava.lang.String;@5edc2a37,[Ledu.cmu.lti.nlp.amr.Entity;@4857b188))
AMR:
(l / leave-01, ARG0, p2 / procedure)
(l / leave-01, ARG1, r / refuge)
(l / leave-01, time, b / before)
(l / leave-01, topic, s / summit)
(p / promise-01, ARG0, w / weather)
(p / promise-01, ARG1, p2 / procedure)
(p / promise-01, ARG2, f / fair)
(p / promise-01, ARG3, o / or)
(p2 / procedure, mod, c / classic)

Decoded in 152,202 microseconds
Sentence: the panos report points to some examples where biotechnology promises to help some of the poorest countries but it also highlights instances where it could actually be a disadvantage

Spans:
Span 25-26:  actually => actual
Span 19-20:  also => also
Span 8-9:  biotechnology => biotechnology
Span 17-18:  but => contrast-01
Span 24-25:  could => possible
Span 16-17:  countries => country
Span 28-29:  disadvantage => disadvantage-00
Span 6-7:  examples => example
Span 11-12:  help => help-01
Span 20-21:  highlights => highlight-01
Span 21-22:  instances => instance
Span 23-24:  it => it
Span 18-19:  it => it
Span 3-4:  points => point
Span 15-16:  poorest => (poor :degree most)
Span 9-10:  promises => promise-01
Span 2-3:  report => report
Span 12-13:  some => some
Span 5-6:  some => some

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),disadvantage,disadvantage-00,false), Span(25,26,List(1),actually,actual,false), Span(24,25,List(2),could,possible,false), Span(23,24,List(3),it,it,false), Span(21,22,List(4),instances,instance,false), Span(20,21,List(5),highlights,highlight-01,false), Span(19,20,List(6),also,also,false), Span(18,19,List(7),it,it,false), Span(17,18,List(8),but,contrast-01,false), Span(16,17,List(9),countries,country,false), Span(15,16,List(11, 10),poorest,(poor :degree most),false), Span(12,13,List(12),some,some,false), Span(11,12,List(13),help,help-01,false), Span(9,10,List(14),promises,promise-01,false), Span(8,9,List(15),biotechnology,biotechnology,false), Span(6,7,List(16),examples,example,false), Span(5,6,List(17),some,some,false), Span(3,4,List(18),points,point,false), Span(2,3,List(19),report,report,false)),Map(2 -> possible, 5 -> highlight-01, 12 -> some, 15 -> biotechnology, 8 -> contrast-01, 18 -> point, 7 -> it, 17 -> some, 1 -> actual, 4 -> instance, 11 -> most, 14 -> promise-01, 6 -> also, 0 -> disadvantage-00, 9 -> country, 16 -> example, 19 -> report, 3 -> it, 10 -> poor, 13 -> help-01),Map(e -> example, h -> highlight-01, s2 -> some, h2 -> help-01, b -> biotechnology, p2 -> poor, s -> some, d -> disadvantage-00, m -> most, i3 -> it, p -> possible, a -> actual, p4 -> point, i2 -> instance, r -> report, i -> it, a2 -> also, c -> contrast-01, p3 -> promise-01, c2 -> country))),[Ljava.lang.String;@5c7e707e,Annotation([Ljava.lang.String;@710b8fa2,[Ljava.lang.String;@2e030ea9,[Ljava.lang.String;@4ab790d8),Annotation([Ljava.lang.String;@59867b3a,[Ljava.lang.String;@c044ac1,[Ledu.cmu.lti.nlp.amr.Dependency;@6dc7cb10),Annotation([Ljava.lang.String;@57e4bfbe,[Ljava.lang.String;@6ae88006,[Ljava.lang.String;@462d40bf),Annotation([Ljava.lang.String;@44f5df97,[Ljava.lang.String;@6a2a55df,[Ledu.cmu.lti.nlp.amr.Entity;@16bd9ed))
AMR:
(c / contrast-01, ARG1, p3 / promise-01)
(c / contrast-01, ARG2, h / highlight-01)
(c2 / country, mod, p2 / poor)
(c2 / country, quant, s / some)
(d / disadvantage-00, ARG0, i2 / instance)
(d / disadvantage-00, domain, i / it)
(d / disadvantage-00, mod, a / actual)
(e / example, quant, s2 / some)
(h / highlight-01, ARG0, i3 / it)
(h / highlight-01, ARG1, i2 / instance)
(h / highlight-01, mod, a2 / also)
(h2 / help-01, ARG0, b / biotechnology)
(h2 / help-01, ARG1, s / some)
(h2 / help-01, location, e / example)
(p / possible, domain, d / disadvantage-00)
(p2 / poor, degree, m / most)
(p3 / promise-01, ARG1, p4 / point)
(p3 / promise-01, ARG2, h2 / help-01)
(p4 / point, mod, r / report)

Decoded in 358,771 microseconds
Sentence: he promised having spoken recently to both president bush and president gorbachev that over the next few months the arabs could expect a number of studied steps to reduce the impact of the arrival of soviet jews in israel

NER Entity: (country :name (name :op "soviet"))
NER Entity: (country :name (name :op "israel"))
NER Entity: (country :name (name :op "israel"))
Spans:
Span 9-10:  and => and
Span 33-34:  arrival => arrive-01
Span 6-7:  both => both
Span 8-9:  bush => bush-league
Span 20-21:  could => possible
Span 21-22:  expect => expect-01
Span 16-17:  few => few
Span 0-1:  he => he
Span 30-31:  impact => impact-01
Span 38-39:  israel => (country :name (name :op "Israel"))
Span 36-37:  jews => (ethnic-group :name (name :op "Jew"))
Span 17-18:  months => (temporal-quantity :unit month)
Span 15-16:  next => next
Span 23-24:  number => number
Span 10-11:  president => (have-org-role-91 :ARG2 president)
Span 7-8:  president => (have-org-role-91 :ARG2 president)
Span 1-2:  promised => promise-01
Span 4-5:  recently => recent
Span 28-29:  reduce => reduce-01
Span 3-4:  spoken => speak-01
Span 26-27:  steps => step-01
Span 25-26:  studied => study-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(2, 1, 0),israel,(country :name (name :op "Israel")),false), Span(36,37,List(5, 4, 3),jews,(ethnic-group :name (name :op "Jew")),false), Span(33,34,List(6),arrival,arrive-01,false), Span(30,31,List(7),impact,impact-01,false), Span(28,29,List(8),reduce,reduce-01,false), Span(26,27,List(9),steps,step-01,false), Span(25,26,List(10),studied,study-01,false), Span(23,24,List(11),number,number,false), Span(21,22,List(12),expect,expect-01,false), Span(20,21,List(13),could,possible,false), Span(17,18,List(15, 14),months,(temporal-quantity :unit month),false), Span(16,17,List(16),few,few,false), Span(15,16,List(17),next,next,false), Span(10,11,List(19, 18),president,(have-org-role-91 :ARG2 president),false), Span(9,10,List(20),and,and,false), Span(8,9,List(21),bush,bush-league,false), Span(7,8,List(23, 22),president,(have-org-role-91 :ARG2 president),false), Span(6,7,List(24),both,both,false), Span(4,5,List(25),recently,recent,false), Span(3,4,List(26),spoken,speak-01,false), Span(1,2,List(27),promised,promise-01,false), Span(0,1,List(28),he,he,false)),Map(2 -> "Israel", 5 -> "Jew", 27 -> promise-01, 12 -> expect-01, 8 -> reduce-01, 15 -> month, 21 -> bush-league, 18 -> have-org-role-91, 24 -> both, 7 -> impact-01, 1 -> name, 17 -> next, 23 -> president, 26 -> speak-01, 4 -> name, 11 -> number, 14 -> temporal-quantity, 20 -> and, 28 -> he, 6 -> arrive-01, 9 -> step-01, 0 -> country, 22 -> have-org-role-91, 16 -> few, 19 -> president, 10 -> study-01, 3 -> ethnic-group, 25 -> recent, 13 -> possible),Map(e -> ethnic-group, n -> name, h -> have-org-role-91, s2 -> study-01, h2 -> have-org-role-91, t -> temporal-quantity, b -> bush-league, b2 -> both, e2 -> expect-01, p2 -> president, n4 -> next, s -> step-01, m -> month, r2 -> recent, p -> possible, n3 -> number, a -> arrive-01, p4 -> promise-01, r -> reduce-01, i -> impact-01, a2 -> and, h3 -> he, c -> country, s3 -> speak-01, f -> few, p3 -> president, n2 -> name))),[Ljava.lang.String;@4fb05755,Annotation([Ljava.lang.String;@4235b652,[Ljava.lang.String;@5454e373,[Ljava.lang.String;@1120be46),Annotation([Ljava.lang.String;@7cabee72,[Ljava.lang.String;@7bb3be4f,[Ledu.cmu.lti.nlp.amr.Dependency;@559373fb),Annotation([Ljava.lang.String;@43a38fa1,[Ljava.lang.String;@272ab5b8,[Ljava.lang.String;@6500571e),Annotation([Ljava.lang.String;@7957a65f,[Ljava.lang.String;@696be535,[Ledu.cmu.lti.nlp.amr.Entity;@2a9530a5))
AMR:
(a / arrive-01, ARG1, e / ethnic-group)
(a2 / and, mod, b2 / both)
(c / country, name, n / name)
(e / ethnic-group, name, n2 / name)
(e2 / expect-01, ARG1, i / impact-01)
(e2 / expect-01, duration, f / few)
(f / few, op, t / temporal-quantity)
(h / have-org-role-91, ARG0, b / bush-league)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, b / bush-league)
(h2 / have-org-role-91, ARG2, p3 / president)
(i / impact-01, ARG0, a / arrive-01)
(i / impact-01, ARG1, c / country)
(m / month, mod, n4 / next)
(n / name, op, "Israel")
(n2 / name, op, "Jew")
(p / possible, domain, e2 / expect-01)
(p4 / promise-01, ARG0, h3 / he)
(p4 / promise-01, ARG2, s3 / speak-01)
(r / reduce-01, ARG1, i / impact-01)
(s / step-01, ARG1, r / reduce-01)
(s / step-01, mod, s2 / study-01)
(s / step-01, quant, n3 / number)
(s3 / speak-01, ARG0, a2 / and)
(s3 / speak-01, ARG1, p / possible)
(s3 / speak-01, ARG2, b / bush-league)
(s3 / speak-01, time, r2 / recent)
(t / temporal-quantity, unit, m / month)

Decoded in 275,537 microseconds
Sentence: it has also promised not to build any new hydroelectric dams the source of the rest of the countrys electricity

Spans:
Span 2-3:  also => also
Span 7-8:  any => any
Span 6-7:  build => build-01
Span 19-20:  electricity => electricity
Span 0-1:  it => it
Span 8-9:  new => new
Span 3-4:  promised => promise-01
Span 15-16:  rest => rest
Span 12-13:  source => source

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),electricity,electricity,false), Span(15,16,List(1),rest,rest,false), Span(12,13,List(2),source,source,false), Span(8,9,List(3),new,new,false), Span(7,8,List(4),any,any,false), Span(6,7,List(5),build,build-01,false), Span(3,4,List(6),promised,promise-01,false), Span(2,3,List(7),also,also,false), Span(0,1,List(8),it,it,false)),Map(2 -> source, 5 -> build-01, 8 -> it, 7 -> also, 1 -> rest, 4 -> any, 6 -> promise-01, 0 -> electricity, 3 -> new),Map(n -> new, e -> electricity, b -> build-01, s -> source, p -> promise-01, a -> any, i -> it, a2 -> also, r -> rest))),[Ljava.lang.String;@28acb67a,Annotation([Ljava.lang.String;@63001872,[Ljava.lang.String;@1b451725,[Ljava.lang.String;@54f28c1f),Annotation([Ljava.lang.String;@7fcd72ca,[Ljava.lang.String;@92b6d53,[Ledu.cmu.lti.nlp.amr.Dependency;@21668d9),Annotation([Ljava.lang.String;@d3d7fa1,[Ljava.lang.String;@408629d1,[Ljava.lang.String;@2823796f),Annotation([Ljava.lang.String;@30f97aff,[Ljava.lang.String;@4afa1477,[Ledu.cmu.lti.nlp.amr.Entity;@6855b715))
AMR:
(b / build-01, ARG0, i / it)
(b / build-01, ARG1, s / source)
(b / build-01, ARG4, n / new)
(b / build-01, location, r / rest)
(e / electricity, part, r / rest)
(p / promise-01, ARG0, a / any)
(p / promise-01, ARG2, b / build-01)
(p / promise-01, mod, a2 / also)

Decoded in 200,045 microseconds
Sentence: margaret gregory now poured out her woes to lady dunsany lady gregory had promised that when her son married yeats would cease to live at coole for most of the year he still occupied the master of the houses bedroom he was indifferent to lady gregorys opinion knowing she would always forgive him in the end and had no shame about staying on even though he knew robert and margaret disliked his presence

Spans:
Span 50-51:  always => always
Span 68-69:  and => and
Span 56-57:  and => and
Span 39-40:  bedroom => bedroom
Span 21-22:  cease => cease-01
Span 51-52:  forgive => forgive-01
Span 65-66:  he => he
Span 40-41:  he => he
Span 31-32:  he => he
Span 38-39:  houses => house
Span 66-67:  knew => know-01
Span 47-48:  knowing => know-01
Span 44-45:  lady => lady
Span 10-11:  lady => lady
Span 8-9:  lady => lady
Span 23-24:  live => live-01
Span 18-19:  married => marry-01
Span 35-36:  master => master
Span 27-28:  most => most
Span 58-59:  no => -
Span 2-3:  now => now
Span 33-34:  occupied => occupy-01
Span 46-47:  opinion => opine-01
Span 3-4:  poured => pour-01
Span 72-73:  presence => presence
Span 13-14:  promised => promise-01
Span 59-60:  shame => shame
Span 48-49:  she => she
Span 17-18:  son => (have-rel-role-91 :ARG2 son)
Span 61-62:  staying => stay-01
Span 32-33:  still => still
Span 30-31:  year => year

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(72,73,List(0),presence,presence,false), Span(68,69,List(1),and,and,false), Span(66,67,List(2),knew,know-01,false), Span(65,66,List(3),he,he,false), Span(61,62,List(4),staying,stay-01,false), Span(59,60,List(5),shame,shame,false), Span(58,59,List(6),no,-,false), Span(56,57,List(7),and,and,false), Span(51,52,List(8),forgive,forgive-01,false), Span(50,51,List(9),always,always,false), Span(48,49,List(10),she,she,false), Span(47,48,List(11),knowing,know-01,false), Span(46,47,List(12),opinion,opine-01,false), Span(44,45,List(13),lady,lady,false), Span(40,41,List(14),he,he,false), Span(39,40,List(15),bedroom,bedroom,false), Span(38,39,List(16),houses,house,false), Span(35,36,List(17),master,master,false), Span(33,34,List(18),occupied,occupy-01,false), Span(32,33,List(19),still,still,false), Span(31,32,List(20),he,he,false), Span(30,31,List(21),year,year,false), Span(27,28,List(22),most,most,false), Span(23,24,List(23),live,live-01,false), Span(21,22,List(24),cease,cease-01,false), Span(18,19,List(25),married,marry-01,false), Span(17,18,List(27, 26),son,(have-rel-role-91 :ARG2 son),false), Span(13,14,List(28),promised,promise-01,false), Span(10,11,List(29),lady,lady,false), Span(8,9,List(30),lady,lady,false), Span(3,4,List(31),poured,pour-01,false), Span(2,3,List(32),now,now,false)),Map(30 -> lady, 2 -> know-01, 5 -> shame, 27 -> son, 12 -> opine-01, 8 -> forgive-01, 15 -> bedroom, 21 -> year, 18 -> occupy-01, 24 -> cease-01, 7 -> and, 1 -> and, 17 -> master, 23 -> live-01, 26 -> have-rel-role-91, 4 -> stay-01, 11 -> know-01, 32 -> now, 14 -> he, 29 -> lady, 20 -> he, 28 -> promise-01, 6 -> -, 9 -> always, 0 -> presence, 22 -> most, 16 -> house, 19 -> still, 10 -> she, 3 -> he, 31 -> pour-01, 25 -> marry-01, 13 -> lady),Map(s5 -> son, h5 -> have-rel-role-91, m3 -> marry-01, n -> now, k2 -> know-01, h -> he, s2 -> shame, h2 -> he, k -> know-01, b -> bedroom, m2 -> most, p2 -> promise-01, l3 -> lady, a3 -> always, s -> stay-01, s4 -> still, h4 -> he, m -> master, y -> year, p -> presence, a -> and, o2 -> occupy-01, l2 -> live-01, a2 -> and, - -> -, h3 -> house, c -> cease-01, s3 -> she, l -> lady, f -> forgive-01, o -> opine-01, p3 -> pour-01, l4 -> lady))),[Ljava.lang.String;@6586f87,Annotation([Ljava.lang.String;@18020b52,[Ljava.lang.String;@2e3540ce,[Ljava.lang.String;@2a31ac15),Annotation([Ljava.lang.String;@2318ac57,[Ljava.lang.String;@28da95c1,[Ledu.cmu.lti.nlp.amr.Dependency;@269dc6db),Annotation([Ljava.lang.String;@406a67ab,[Ljava.lang.String;@9bc2c97,[Ljava.lang.String;@2113727f),Annotation([Ljava.lang.String;@3c200d0,[Ljava.lang.String;@35c3599d,[Ledu.cmu.lti.nlp.amr.Entity;@2c306dfe))
AMR:
(a / and, op, k / know-01)
(a2 / and, op, f / forgive-01)
(a2 / and, op, o2 / occupy-01)
(b / bedroom, mod, h3 / house)
(c / cease-01, ARG0, l3 / lady)
(c / cease-01, ARG1, l2 / live-01)
(f / forgive-01, ARG0, s3 / she)
(f / forgive-01, time, a3 / always)
(h5 / have-rel-role-91, ARG0, l4 / lady)
(h5 / have-rel-role-91, ARG1, h2 / he)
(h5 / have-rel-role-91, ARG2, s5 / son)
(k / know-01, ARG0, h / he)
(k2 / know-01, ARG0, s3 / she)
(k2 / know-01, ARG1, o / opine-01)
(m3 / marry-01, ARG0, h4 / he)
(m3 / marry-01, ARG1, c / cease-01)
(m3 / marry-01, ARG2, b / bedroom)
(o / opine-01, ARG1, l / lady)
(o2 / occupy-01, ARG0, h4 / he)
(o2 / occupy-01, ARG1, m / master)
(o2 / occupy-01, location, y / year)
(o2 / occupy-01, mod, s4 / still)
(p / presence, poss, a / and)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, o2 / occupy-01)
(p3 / pour-01, ARG1, o2 / occupy-01)
(p3 / pour-01, time, n / now)
(s / stay-01, ARG0, s2 / shame)
(s / stay-01, ARG1, h / he)
(s2 / shame, polarity, - / -)
(s2 / shame, poss, h4 / he)
(y / year, quant, m2 / most)

Decoded in 1,098,747 microseconds
Sentence: pensioners are at the mercy of unscrupulous financial advisers who promise a painless way to boost the elderlys meagre income by using their home as security

Spans:
Span 15-16:  boost => boost-01
Span 7-8:  financial => finance
Span 23-24:  home => home
Span 19-20:  income => income
Span 18-19:  meagre => meagre
Span 12-13:  painless => painless
Span 0-1:  pensioners => pensioner
Span 10-11:  promise => promise-01
Span 25-26:  security => security
Span 21-22:  using => use-01
Span 13-14:  way => way

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),security,security,false), Span(23,24,List(1),home,home,false), Span(21,22,List(2),using,use-01,false), Span(19,20,List(3),income,income,false), Span(18,19,List(4),meagre,meagre,false), Span(15,16,List(5),boost,boost-01,false), Span(13,14,List(6),way,way,false), Span(12,13,List(7),painless,painless,false), Span(10,11,List(8),promise,promise-01,false), Span(7,8,List(9),financial,finance,false), Span(0,1,List(10),pensioners,pensioner,false)),Map(2 -> use-01, 5 -> boost-01, 8 -> promise-01, 7 -> painless, 1 -> home, 4 -> meagre, 6 -> way, 9 -> finance, 0 -> security, 10 -> pensioner, 3 -> income),Map(w -> way, h -> home, b -> boost-01, p2 -> promise-01, s -> security, m -> meagre, p -> painless, i -> income, u -> use-01, f -> finance, p3 -> pensioner))),[Ljava.lang.String;@1f85555c,Annotation([Ljava.lang.String;@6aa71b2e,[Ljava.lang.String;@e99fb6,[Ljava.lang.String;@69f46631),Annotation([Ljava.lang.String;@2c61514f,[Ljava.lang.String;@2921304c,[Ledu.cmu.lti.nlp.amr.Dependency;@41e9e2ac),Annotation([Ljava.lang.String;@6220ac02,[Ljava.lang.String;@4efce9a2,[Ljava.lang.String;@3e4eb331),Annotation([Ljava.lang.String;@20d675ec,[Ljava.lang.String;@5fd7e9cb,[Ledu.cmu.lti.nlp.amr.Entity;@58363f95))
AMR:
(b / boost-01, ARG0, f / finance)
(b / boost-01, ARG1, i / income)
(b / boost-01, manner, u / use-01)
(i / income, mod, m / meagre)
(p2 / promise-01, ARG1, w / way)
(p2 / promise-01, ARG2, b / boost-01)
(p3 / pensioner, op, u / use-01)
(u / use-01, ARG1, h / home)
(u / use-01, ARG2, s / security)
(w / way, mod, p / painless)

Decoded in 124,715 microseconds
Sentence: is intrinsically flimsy and lacks the longterm corrosion resistance promised by its galvanised finish fig 22

Spans:
Span 15-16:  22 => 22
Span 3-4:  and => and
Span 13-14:  finish => finish-01
Span 1-2:  intrinsically => (intrinsic :polarity -)
Span 4-5:  lacks => lack-01
Span 9-10:  promised => promise-01
Span 8-9:  resistance => resist-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),22,22,false), Span(13,14,List(1),finish,finish-01,false), Span(9,10,List(2),promised,promise-01,false), Span(8,9,List(3),resistance,resist-01,false), Span(4,5,List(4),lacks,lack-01,false), Span(3,4,List(5),and,and,false), Span(1,2,List(7, 6),intrinsically,(intrinsic :polarity -),false)),Map(2 -> promise-01, 5 -> and, 7 -> -, 1 -> finish-01, 4 -> lack-01, 6 -> intrinsic, 0 -> 22, 3 -> resist-01),Map(2 -> 22, p -> promise-01, a -> and, i -> intrinsic, r -> resist-01, l -> lack-01, f -> finish-01))),[Ljava.lang.String;@51887c71,Annotation([Ljava.lang.String;@57a20888,[Ljava.lang.String;@4ede45aa,[Ljava.lang.String;@62afc459),Annotation([Ljava.lang.String;@183e1ad,[Ljava.lang.String;@795525a1,[Ledu.cmu.lti.nlp.amr.Dependency;@4519ab42),Annotation([Ljava.lang.String;@183a9d7f,[Ljava.lang.String;@303a0946,[Ljava.lang.String;@3236eb66),Annotation([Ljava.lang.String;@33988f4b,[Ljava.lang.String;@64e79f63,[Ledu.cmu.lti.nlp.amr.Entity;@22915056))
AMR:
(a / and, op, l / lack-01)
(f / finish-01, ARG1, r / resist-01)
(i / intrinsic, polarity, -)
(l / lack-01, ARG0, i / intrinsic)
(l / lack-01, ARG1, r / resist-01)
(p / promise-01, ARG1, r / resist-01)
(r / resist-01, ARG0, 2 / 22)

Decoded in 81,234 microseconds
Sentence: in two years everyone would have a proper home the soviet prime minister nikolai ryzhkov once promised

NER Entity: (country :name (name :op "soviet"))
Spans:
Span 3-4:  everyone => everyone
Span 8-9:  home => home
Span 12-13:  minister => (have-org-role-91 :ARG2 minister)
Span 15-16:  once => once
Span 11-12:  prime => prime
Span 16-17:  promised => promise-01
Span 7-8:  proper => proper
Span 1-2:  two => 2
Span 2-3:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),promised,promise-01,false), Span(15,16,List(1),once,once,false), Span(12,13,List(3, 2),minister,(have-org-role-91 :ARG2 minister),false), Span(11,12,List(4),prime,prime,false), Span(8,9,List(5),home,home,false), Span(7,8,List(6),proper,proper,false), Span(3,4,List(7),everyone,everyone,false), Span(2,3,List(9, 8),years,(temporal-quantity :unit year),false), Span(1,2,List(10),two,2,false)),Map(2 -> have-org-role-91, 5 -> home, 8 -> temporal-quantity, 7 -> everyone, 1 -> once, 4 -> prime, 6 -> proper, 9 -> year, 0 -> promise-01, 10 -> 2, 3 -> minister),Map(e -> everyone, 2 -> 2, h -> have-org-role-91, t -> temporal-quantity, h2 -> home, p2 -> prime, m -> minister, y -> year, p -> promise-01, o -> once, p3 -> proper))),[Ljava.lang.String;@72314fd4,Annotation([Ljava.lang.String;@37021de,[Ljava.lang.String;@36bf7795,[Ljava.lang.String;@5443f347),Annotation([Ljava.lang.String;@3918e589,[Ljava.lang.String;@1185a2a8,[Ledu.cmu.lti.nlp.amr.Dependency;@5c79cc94),Annotation([Ljava.lang.String;@406637fa,[Ljava.lang.String;@76e51f1d,[Ljava.lang.String;@3c5de5e6),Annotation([Ljava.lang.String;@38a07e00,[Ljava.lang.String;@30b04f0b,[Ledu.cmu.lti.nlp.amr.Entity;@7157426))
AMR:
(h / have-org-role-91, ARG0, e / everyone)
(h / have-org-role-91, ARG1, p3 / proper)
(h / have-org-role-91, ARG2, m / minister)
(h2 / home, mod, p3 / proper)
(m / minister, mod, p2 / prime)
(p / promise-01, ARG0, e / everyone)
(p / promise-01, ARG1, 2 / 2)
(p / promise-01, time, o / once)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)

Decoded in 56,293 microseconds
Sentence: he promised a dialogue of different opinions and that all suggestions would be assessed on their merits provided they did not challenge socialism itself or the leading role of the sed

Spans:
Span 9-10:  all => all
Span 7-8:  and => and
Span 21-22:  challenge => challenge-01
Span 3-4:  dialogue => dialogue
Span 5-6:  different => differ-02
Span 0-1:  he => he
Span 26-27:  leading => lead-01
Span 16-17:  merits => merit-01
Span 6-7:  opinions => opine-01
Span 24-25:  or => or
Span 1-2:  promised => promise-01
Span 17-18:  provided => provide-01
Span 27-28:  role => role
Span 22-23:  socialism => socialism
Span 10-11:  suggestions => suggest-01
Span 18-19:  they => they

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),role,role,false), Span(26,27,List(1),leading,lead-01,false), Span(24,25,List(2),or,or,false), Span(22,23,List(3),socialism,socialism,false), Span(21,22,List(4),challenge,challenge-01,false), Span(18,19,List(5),they,they,false), Span(17,18,List(6),provided,provide-01,false), Span(16,17,List(7),merits,merit-01,false), Span(10,11,List(8),suggestions,suggest-01,false), Span(9,10,List(9),all,all,false), Span(7,8,List(10),and,and,false), Span(6,7,List(11),opinions,opine-01,false), Span(5,6,List(12),different,differ-02,false), Span(3,4,List(13),dialogue,dialogue,false), Span(1,2,List(14),promised,promise-01,false), Span(0,1,List(15),he,he,false)),Map(2 -> or, 5 -> they, 12 -> differ-02, 15 -> he, 8 -> suggest-01, 7 -> merit-01, 1 -> lead-01, 4 -> challenge-01, 11 -> opine-01, 14 -> promise-01, 6 -> provide-01, 0 -> role, 9 -> all, 3 -> socialism, 10 -> and, 13 -> dialogue),Map(h -> he, s2 -> suggest-01, t -> they, p2 -> promise-01, s -> socialism, m -> merit-01, d -> differ-02, p -> provide-01, a -> all, d2 -> dialogue, o2 -> opine-01, r -> role, a2 -> and, c -> challenge-01, l -> lead-01, o -> or))),[Ljava.lang.String;@117c6e6c,Annotation([Ljava.lang.String;@357d6c,[Ljava.lang.String;@37bd3d8f,[Ljava.lang.String;@691493df),Annotation([Ljava.lang.String;@45f84b5e,[Ljava.lang.String;@301c2c35,[Ledu.cmu.lti.nlp.amr.Dependency;@99a6440),Annotation([Ljava.lang.String;@772baaac,[Ljava.lang.String;@53d23f53,[Ljava.lang.String;@103b8d23),Annotation([Ljava.lang.String;@35aefd28,[Ljava.lang.String;@736e68a0,[Ledu.cmu.lti.nlp.amr.Entity;@55971b94))
AMR:
(a2 / and, op, m / merit-01)
(a2 / and, op, p2 / promise-01)
(c / challenge-01, ARG0, t / they)
(c / challenge-01, ARG1, s / socialism)
(c / challenge-01, ARG2, o / or)
(d2 / dialogue, concession, o2 / opine-01)
(l / lead-01, ARG0, r / role)
(m / merit-01, ARG1, s2 / suggest-01)
(o / or, op, r / role)
(o2 / opine-01, ARG1, a / all)
(o2 / opine-01, manner, d / differ-02)
(p / provide-01, ARG0, t / they)
(p / provide-01, ARG1, p2 / promise-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, d2 / dialogue)

Decoded in 552,444 microseconds
Sentence: these landmark buildings promise to reduce the overall average height of the site by 11

Spans:
Span 14-15:  11 => 11
Span 2-3:  buildings => building
Span 1-2:  landmark => landmark
Span 7-8:  overall => overall
Span 3-4:  promise => promise-01
Span 5-6:  reduce => reduce-01
Span 12-13:  site => site

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),11,11,false), Span(12,13,List(1),site,site,false), Span(7,8,List(2),overall,overall,false), Span(5,6,List(3),reduce,reduce-01,false), Span(3,4,List(4),promise,promise-01,false), Span(2,3,List(5),buildings,building,false), Span(1,2,List(6),landmark,landmark,false)),Map(2 -> overall, 5 -> building, 1 -> site, 4 -> promise-01, 6 -> landmark, 0 -> 11, 3 -> reduce-01),Map(b -> building, s -> site, p -> promise-01, 1 -> 11, r -> reduce-01, l -> landmark, o -> overall))),[Ljava.lang.String;@3393bd72,Annotation([Ljava.lang.String;@287aa1d2,[Ljava.lang.String;@b15f6c1,[Ljava.lang.String;@4efafe96),Annotation([Ljava.lang.String;@4060525c,[Ljava.lang.String;@73bf3708,[Ledu.cmu.lti.nlp.amr.Dependency;@eb62996),Annotation([Ljava.lang.String;@59643e65,[Ljava.lang.String;@443c86bc,[Ljava.lang.String;@61b1c3a3),Annotation([Ljava.lang.String;@5da33470,[Ljava.lang.String;@5c7d517,[Ledu.cmu.lti.nlp.amr.Entity;@276dbf8))
AMR:
(p / promise-01, ARG0, b / building)
(p / promise-01, ARG1, 1 / 11)
(p / promise-01, ARG2, r / reduce-01)
(r / reduce-01, ARG0, l / landmark)
(r / reduce-01, ARG1, o / overall)
(r / reduce-01, location, s / site)

Decoded in 76,749 microseconds
Sentence: what can be done to give even a tenth of our people the opportunity to acquire a small stake in the land and to replace the missing bottom rungs in the farming ladder  the present climate is not promising

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = what can be done to give even a tenth of our people the opportunity to acquire a small stake in the land and to replace the missing bottom rungs in the farming ladder  the present climate is not promising
myTokenized = what can be done to give even a tenth of our people the opportunity to acquire a small stake in the land and to replace the missing bottom rungs in the farming ladder the present climate is not promising
i = 33
prefix = List(what, can, be, done, to, give, even, a, tenth, of, our, people, the, opportunity, to, acquire, a, small, stake, in, the, land, and, to, replace, the, missing, bottom, rungs, in, the, farming, ladder, the)
regexr = \Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qc\E ?\Qa\E ?\Qn\E ?\Qb\E ?\Qe\E ?\Qd\E ?\Qo\E ?\Qn\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qg\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qe\E ?\Qv\E ?\Qe\E ?\Qn\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qo\E ?\Qf\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qp\E ?\Qe\E ?\Qo\E ?\Qp\E ?\Ql\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qo\E ?\Qp\E ?\Qp\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qu\E ?\Qn\E ?\Qi\E ?\Qt\E ?\Qy\E ?\Qt\E ?\Qo\E ?\Qa\E ?\Qc\E ?\Qq\E ?\Qu\E ?\Qi\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qs\E ?\Qm\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qs\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qp\E ?\Ql\E ?\Qa\E ?\Qc\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qs\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qb\E ?\Qo\E ?\Qt\E ?\Qt\E ?\Qo\E ?\Qm\E ?\Qr\E ?\Qu\E ?\Qn\E ?\Qg\E ?\Qs\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qf\E ?\Qa\E ?\Qr\E ?\Qm\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Ql\E ?\Qa\E ?\Qd\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: having been promised that i could be a page or a herald depending on whether i could learn to play the trumpet and watch him come out on top of lincoln cathedral i was bitterly disappointed when my mother took his trousers away and called in the doctor

NER Entity: (country :name (name :op "lincoln"))
Spans:
Span 43-44:  and => and
Span 22-23:  and => and
Span 42-43:  away => away
Span 34-35:  bitterly => bitter
Span 16-17:  could => possible
Span 5-6:  could => possible
Span 12-13:  depending => depend-01
Span 35-36:  disappointed => disappoint-01
Span 47-48:  doctor => doctor
Span 11-12:  herald => herald-01
Span 32-33:  i => i
Span 15-16:  i => i
Span 4-5:  i => i
Span 17-18:  learn => learn-01
Span 38-39:  mother => (have-rel-role-91 :ARG2 mother)
Span 9-10:  or => or
Span 8-9:  page => page
Span 19-20:  play => play-01
Span 2-3:  promised => promise-01
Span 28-29:  top => top
Span 41-42:  trousers => trousers
Span 23-24:  watch => watch-01

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),doctor,doctor,false), Span(43,44,List(1),and,and,false), Span(42,43,List(2),away,away,false), Span(41,42,List(3),trousers,trousers,false), Span(38,39,List(5, 4),mother,(have-rel-role-91 :ARG2 mother),false), Span(35,36,List(6),disappointed,disappoint-01,false), Span(34,35,List(7),bitterly,bitter,false), Span(32,33,List(8),i,i,false), Span(28,29,List(9),top,top,false), Span(23,24,List(10),watch,watch-01,false), Span(22,23,List(11),and,and,false), Span(19,20,List(12),play,play-01,false), Span(17,18,List(13),learn,learn-01,false), Span(16,17,List(14),could,possible,false), Span(15,16,List(15),i,i,false), Span(12,13,List(16),depending,depend-01,false), Span(11,12,List(17),herald,herald-01,false), Span(9,10,List(18),or,or,false), Span(8,9,List(19),page,page,false), Span(5,6,List(20),could,possible,false), Span(4,5,List(21),i,i,false), Span(2,3,List(22),promised,promise-01,false)),Map(2 -> away, 5 -> mother, 12 -> play-01, 15 -> i, 8 -> i, 21 -> i, 18 -> or, 7 -> bitter, 17 -> herald-01, 1 -> and, 4 -> have-rel-role-91, 11 -> and, 14 -> possible, 20 -> possible, 6 -> disappoint-01, 22 -> promise-01, 0 -> doctor, 9 -> top, 16 -> depend-01, 19 -> page, 3 -> trousers, 10 -> watch-01, 13 -> learn-01),Map(w -> watch-01, h -> have-rel-role-91, p5 -> promise-01, h2 -> herald-01, t -> trousers, b -> bitter, d3 -> depend-01, p2 -> possible, a3 -> and, d -> doctor, m -> mother, i3 -> i, p -> play-01, a -> and, p4 -> possible, d2 -> disappoint-01, i2 -> i, t2 -> top, a2 -> away, i -> i, l -> learn-01, o -> or, p3 -> page))),[Ljava.lang.String;@6c872ba6,Annotation([Ljava.lang.String;@1e42d6f4,[Ljava.lang.String;@362e3cb1,[Ljava.lang.String;@1592a441),Annotation([Ljava.lang.String;@4e5db277,[Ljava.lang.String;@696fcad2,[Ledu.cmu.lti.nlp.amr.Dependency;@2a6cd712),Annotation([Ljava.lang.String;@4f9bf480,[Ljava.lang.String;@7d12855,[Ljava.lang.String;@34aee875),Annotation([Ljava.lang.String;@471f7458,[Ljava.lang.String;@620f61e2,[Ledu.cmu.lti.nlp.amr.Entity;@5fe36eb9))
AMR:
(a / and, op, d / doctor)
(a / and, op, p5 / promise-01)
(a3 / and, op, w / watch-01)
(d2 / disappoint-01, ARG1, i / i)
(d2 / disappoint-01, concession, a2 / away)
(d2 / disappoint-01, degree, b / bitter)
(d3 / depend-01, ARG0, o / or)
(d3 / depend-01, ARG1, l / learn-01)
(h / have-rel-role-91, ARG1, i2 / i)
(h / have-rel-role-91, ARG2, m / mother)
(l / learn-01, ARG0, i2 / i)
(l / learn-01, ARG2, p / play-01)
(l / learn-01, purpose, a3 / and)
(o / or, op, h2 / herald-01)
(o / or, op, p3 / page)
(p2 / possible, domain, l / learn-01)
(p3 / page, domain, i3 / i)
(p4 / possible, domain, p3 / page)
(p5 / promise-01, ARG0, p4 / possible)
(t / trousers, poss, h / have-rel-role-91)
(w / watch-01, ARG0, i / i)
(w / watch-01, ARG1, t2 / top)

Decoded in 1,628,569 microseconds
Sentence: as calls for an allout ambulance strike grew yesterday kenneth clarke secretary of state for health promised to listen carefully to peace proposals drawn up by a leading conservative backbencher

Spans:
Span 5-6:  ambulance => ambulance
Span 19-20:  carefully => careful
Span 28-29:  conservative => conservative
Span 7-8:  grew => grow-01
Span 15-16:  health => health
Span 27-28:  leading => lead-01
Span 18-19:  listen => listen-01
Span 21-22:  peace => peace
Span 16-17:  promised => promise-01
Span 22-23:  proposals => (thing :ARG1-of propose-01)
Span 11-12:  secretary => secretary
Span 13-14:  state => state
Span 6-7:  strike => strike-01
Span 8-9:  yesterday => yesterday

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),conservative,conservative,false), Span(27,28,List(1),leading,lead-01,false), Span(22,23,List(3, 2),proposals,(thing :ARG1-of propose-01),false), Span(21,22,List(4),peace,peace,false), Span(19,20,List(5),carefully,careful,false), Span(18,19,List(6),listen,listen-01,false), Span(16,17,List(7),promised,promise-01,false), Span(15,16,List(8),health,health,false), Span(13,14,List(9),state,state,false), Span(11,12,List(10),secretary,secretary,false), Span(8,9,List(11),yesterday,yesterday,false), Span(7,8,List(12),grew,grow-01,false), Span(6,7,List(13),strike,strike-01,false), Span(5,6,List(14),ambulance,ambulance,false)),Map(2 -> thing, 5 -> careful, 12 -> grow-01, 8 -> health, 7 -> promise-01, 1 -> lead-01, 4 -> peace, 11 -> yesterday, 14 -> ambulance, 6 -> listen-01, 0 -> conservative, 9 -> state, 3 -> propose-01, 10 -> secretary, 13 -> strike-01),Map(h -> health, s2 -> secretary, t -> thing, p2 -> peace, s -> state, p -> propose-01, y -> yesterday, g -> grow-01, a -> ambulance, l2 -> listen-01, s3 -> strike-01, c -> conservative, l -> lead-01, p3 -> promise-01, c2 -> careful))),[Ljava.lang.String;@77741064,Annotation([Ljava.lang.String;@64e05280,[Ljava.lang.String;@4348853d,[Ljava.lang.String;@4e238a4d),Annotation([Ljava.lang.String;@7f4ced4e,[Ljava.lang.String;@136fdd2d,[Ledu.cmu.lti.nlp.amr.Dependency;@1521bf53),Annotation([Ljava.lang.String;@5a97ecfb,[Ljava.lang.String;@2c478134,[Ljava.lang.String;@a7393a2),Annotation([Ljava.lang.String;@29e1760a,[Ljava.lang.String;@110ca001,[Ledu.cmu.lti.nlp.amr.Entity;@53dcaa65))
AMR:
(g / grow-01, ARG0, c / conservative)
(g / grow-01, ARG1, p3 / promise-01)
(g / grow-01, manner, s3 / strike-01)
(g / grow-01, time, y / yesterday)
(l / lead-01, ARG1, s3 / strike-01)
(l2 / listen-01, ARG0, s2 / secretary)
(l2 / listen-01, ARG1, t / thing)
(l2 / listen-01, manner, c2 / careful)
(p / propose-01, ARG1, t / thing)
(p3 / promise-01, ARG1, l2 / listen-01)
(s / state, mod, h / health)
(s2 / secretary, mod, s / state)
(s3 / strike-01, mod, a / ambulance)
(t / thing, mod, p2 / peace)

Decoded in 446,196 microseconds
Sentence:   the new offer will appeal to arbitrageurs believed to hold up to 30 per cent of sea containers common stock who invested heavily after mr sherwood promised his plan would give stockholders between dollars 70 and dollars 100 a share

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the new offer will appeal to arbitrageurs believed to hold up to 30 per cent of sea containers common stock who invested heavily after mr sherwood promised his plan would give stockholders between dollars 70 and dollars 100 a share
myTokenized = the new offer will appeal to arbitrageurs believed to hold up to 30 per cent of sea containers common stock who invested heavily after mr sherwood promised his plan would give stockholders between dollars 70 and dollars 100 a share
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: this friendly pension is owned and run by the burger family and all guests are promised a warm welcome

Spans:
Span 12-13:  all => all
Span 11-12:  and => and
Span 5-6:  and => and
Span 10-11:  family => family
Span 1-2:  friendly => friendly-41
Span 13-14:  guests => guest
Span 4-5:  owned => own-01
Span 2-3:  pension => pension
Span 15-16:  promised => promise-01
Span 0-1:  this => this
Span 17-18:  warm => warm
Span 18-19:  welcome => welcome-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),welcome,welcome-01,false), Span(17,18,List(1),warm,warm,false), Span(15,16,List(2),promised,promise-01,false), Span(13,14,List(3),guests,guest,false), Span(12,13,List(4),all,all,false), Span(11,12,List(5),and,and,false), Span(10,11,List(6),family,family,false), Span(5,6,List(7),and,and,false), Span(4,5,List(8),owned,own-01,false), Span(2,3,List(9),pension,pension,false), Span(1,2,List(10),friendly,friendly-41,false), Span(0,1,List(11),this,this,false)),Map(2 -> promise-01, 5 -> and, 8 -> own-01, 7 -> and, 1 -> warm, 11 -> this, 4 -> all, 6 -> family, 9 -> pension, 0 -> welcome-01, 10 -> friendly-41, 3 -> guest),Map(w -> welcome-01, t -> this, p2 -> pension, a3 -> and, g -> guest, p -> promise-01, a -> all, a2 -> and, w2 -> warm, f2 -> friendly-41, o -> own-01, f -> family))),[Ljava.lang.String;@3ccd3bec,Annotation([Ljava.lang.String;@46192223,[Ljava.lang.String;@1c104bc9,[Ljava.lang.String;@71df8783),Annotation([Ljava.lang.String;@a39e3dd,[Ljava.lang.String;@5e9ec769,[Ledu.cmu.lti.nlp.amr.Dependency;@a35ef07),Annotation([Ljava.lang.String;@5adfb9cd,[Ljava.lang.String;@161f7057,[Ljava.lang.String;@6a086b19),Annotation([Ljava.lang.String;@4eaf6cb1,[Ljava.lang.String;@5f0900d2,[Ledu.cmu.lti.nlp.amr.Entity;@48150bbc))
AMR:
(a2 / and, op, p / promise-01)
(a3 / and, op, o / own-01)
(a3 / and, op, p / promise-01)
(f2 / friendly-41, ARG1, p2 / pension)
(g / guest, quant, a / all)
(o / own-01, ARG0, f / family)
(o / own-01, ARG1, p2 / pension)
(p / promise-01, ARG1, g / guest)
(p2 / pension, mod, t / this)
(w / welcome-01, ARG0, g / guest)
(w / welcome-01, ARG1, w2 / warm)

Decoded in 148,010 microseconds
Sentence: but memories remain of the nkomati accord in 1984 when south africa promised to stop backing the mnr and instead stepped up support

NER Entity: (country :name (name :op "south" :op "africa"))
Spans:
Span 8-9:  1984 => (date-entity :year 1984)
Span 6-7:  accord => accord
Span 18-19:  and => and
Span 15-16:  backing => back-01
Span 0-1:  but => contrast-01
Span 19-20:  instead => instead
Span 1-2:  memories => memory
Span 12-13:  promised => promise-01
Span 2-3:  remain => remain-01
Span 10-12:  south africa => (country :name (name :op "south" :op "africa"))
Span 20-21:  stepped => step-02
Span 14-15:  stop => stop-01
Span 22-23:  support => support-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),support,support-01,false), Span(20,21,List(1),stepped,step-02,false), Span(19,20,List(2),instead,instead,false), Span(18,19,List(3),and,and,false), Span(15,16,List(4),backing,back-01,false), Span(14,15,List(5),stop,stop-01,false), Span(12,13,List(6),promised,promise-01,false), Span(10,12,List(10, 9, 8, 7),south africa,(country :name (name :op "south" :op "africa")),false), Span(8,9,List(12, 11),1984,(date-entity :year 1984),false), Span(6,7,List(13),accord,accord,false), Span(2,3,List(14),remain,remain-01,false), Span(1,2,List(15),memories,memory,false), Span(0,1,List(16),but,contrast-01,false)),Map(2 -> instead, 5 -> stop-01, 12 -> 1984, 15 -> memory, 8 -> name, 7 -> country, 1 -> step-02, 4 -> back-01, 11 -> date-entity, 14 -> remain-01, 6 -> promise-01, 0 -> support-01, 9 -> "south", 16 -> contrast-01, 3 -> and, 10 -> "africa", 13 -> accord),Map(n -> name, s2 -> step-02, b -> back-01, s -> support-01, m -> memory, d -> date-entity, 1 -> 1984, p -> promise-01, a -> and, i -> instead, a2 -> accord, r -> remain-01, s3 -> stop-01, c -> country, c2 -> contrast-01))),[Ljava.lang.String;@5db5889c,Annotation([Ljava.lang.String;@391be9d4,[Ljava.lang.String;@57947a96,[Ljava.lang.String;@54fc3ac5),Annotation([Ljava.lang.String;@7b768719,[Ljava.lang.String;@229fb9a2,[Ledu.cmu.lti.nlp.amr.Dependency;@24544c70),Annotation([Ljava.lang.String;@1a665fb2,[Ljava.lang.String;@3714aca8,[Ljava.lang.String;@2e5365d8),Annotation([Ljava.lang.String;@65435faa,[Ljava.lang.String;@2a3dc5d6,[Ledu.cmu.lti.nlp.amr.Entity;@3d877a44))
AMR:
(a / and, op, p / promise-01)
(c / country, name, n / name)
(c2 / contrast-01, ARG1, r / remain-01)
(d / date-entity, year, 1 / 1984)
(n / name, op, "africa")
(n / name, op, "south")
(p / promise-01, ARG0, c / country)
(p / promise-01, ARG1, s3 / stop-01)
(r / remain-01, ARG1, m / memory)
(r / remain-01, ARG3, a2 / accord)
(r / remain-01, condition, a / and)
(r / remain-01, time, d / date-entity)
(s2 / step-02, ARG0, c / country)
(s2 / step-02, ARG1, s / support-01)
(s2 / step-02, mod, i / instead)
(s3 / stop-01, ARG1, b / back-01)

Decoded in 170,363 microseconds
Sentence: fate had thrown us together  as he left clutching my documentation he said adrian during the week we are in moscow do you promise swear give me your word that you will not utter one word about the norwegian leather industry

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = fate had thrown us together  as he left clutching my documentation he said adrian during the week we are in moscow do you promise swear give me your word that you will not utter one word about the norwegian leather industry
myTokenized = fate had thrown us together as he left clutching my documentation he said adrian during the week we are in moscow do you promise swear give me your word that you will not utter one word about the norwegian leather industry
i = 5
prefix = List(fate, had, thrown, us, together, as)
regexr = \Qf\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qh\E ?\Qa\E ?\Qd\E ?\Qt\E ?\Qh\E ?\Qr\E ?\Qo\E ?\Qw\E ?\Qn\E ?\Qu\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qg\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: it follows that peoples interest in being able to bind themselves is the basis of a power to promise which they possess and of an obligation to keep promises they make, but neither the power nor the obligation point to a right to promise

Spans:
Span 7-8:  able => possible
Span 22-23:  and => and
Span 32-33:  but => contrast-01
Span 4-5:  interest => interest-01
Span 0-1:  it => it
Span 38-39:  obligation => obligate-01
Span 25-26:  obligation => obligate-01
Span 3-4:  peoples => people
Span 39-40:  point => point
Span 21-22:  possess => possess-01
Span 35-36:  power => power
Span 16-17:  power => power
Span 44-45:  promise => promise-01
Span 18-19:  promise => promise-01
Span 28-29:  promises => promise-01
Span 29-30:  they => they
Span 20-21:  they => they

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),promise,promise-01,false), Span(39,40,List(1),point,point,false), Span(38,39,List(2),obligation,obligate-01,false), Span(35,36,List(3),power,power,false), Span(32,33,List(4),but,contrast-01,false), Span(29,30,List(5),they,they,false), Span(28,29,List(6),promises,promise-01,false), Span(25,26,List(7),obligation,obligate-01,false), Span(22,23,List(8),and,and,false), Span(21,22,List(9),possess,possess-01,false), Span(20,21,List(10),they,they,false), Span(18,19,List(11),promise,promise-01,false), Span(16,17,List(12),power,power,false), Span(7,8,List(13),able,possible,false), Span(4,5,List(14),interest,interest-01,false), Span(3,4,List(15),peoples,people,false), Span(0,1,List(16),it,it,false)),Map(2 -> obligate-01, 5 -> they, 12 -> power, 15 -> people, 8 -> and, 7 -> obligate-01, 1 -> point, 4 -> contrast-01, 11 -> promise-01, 14 -> interest-01, 6 -> promise-01, 0 -> promise-01, 9 -> possess-01, 16 -> it, 3 -> power, 10 -> they, 13 -> possible),Map(p5 -> possess-01, t -> they, p8 -> possible, p2 -> point, p -> promise-01, a -> and, p4 -> promise-01, o2 -> obligate-01, p7 -> power, i2 -> it, t2 -> they, i -> interest-01, c -> contrast-01, p6 -> promise-01, p9 -> people, o -> obligate-01, p3 -> power))),[Ljava.lang.String;@2efe918f,Annotation([Ljava.lang.String;@4b065b63,[Ljava.lang.String;@e59e710,[Ljava.lang.String;@3050d2cc),Annotation([Ljava.lang.String;@a3f67dc,[Ljava.lang.String;@48bba1c5,[Ledu.cmu.lti.nlp.amr.Dependency;@1679b1d1),Annotation([Ljava.lang.String;@f891bde,[Ljava.lang.String;@728493c9,[Ljava.lang.String;@5e02abdb),Annotation([Ljava.lang.String;@160e715,[Ljava.lang.String;@e31468,[Ledu.cmu.lti.nlp.amr.Entity;@3c50b84c))
AMR:
(a / and, op, p5 / possess-01)
(c / contrast-01, ARG1, p4 / promise-01)
(c / contrast-01, ARG2, p2 / point)
(i / interest-01, ARG0, p8 / possible)
(i / interest-01, ARG1, p9 / people)
(o / obligate-01, ARG1, t2 / they)
(o2 / obligate-01, ARG1, i / interest-01)
(p / promise-01, ARG1, p3 / power)
(p / promise-01, ARG2, a / and)
(p2 / point, op, p / promise-01)
(p4 / promise-01, ARG0, t / they)
(p4 / promise-01, ARG1, o2 / obligate-01)
(p5 / possess-01, ARG0, t2 / they)
(p5 / possess-01, ARG1, i2 / it)
(p6 / promise-01, ARG0, p7 / power)
(p6 / promise-01, ARG1, p5 / possess-01)

Decoded in 610,107 microseconds
Sentence:   the east german government has promised to reduce sulphur dioxide emissions 30 per cent by 1993 and as part of the new glasnost sweeping the administration it now publishes air pollution figures in national newspapers

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the east german government has promised to reduce sulphur dioxide emissions 30 per cent by 1993 and as part of the new glasnost sweeping the administration it now publishes air pollution figures in national newspapers
myTokenized = the east german government has promised to reduce sulphur dioxide emissions 30 per cent by 1993 and as part of the new glasnost sweeping the administration it now publishes air pollution figures in national newspapers
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the tory manifesto of that general election year again promised action to enforce adequate procedure agreements in essential services but the idea was again shelved in favour of action on union democracy

Spans:
Span 28-29:  action => action
Span 10-11:  action => action
Span 13-14:  adequate => adequate
Span 23-24:  again => again
Span 8-9:  again => again
Span 15-16:  agreements => agree-01
Span 19-20:  but => contrast-01
Span 31-32:  democracy => democracy
Span 6-7:  election => elect-01
Span 12-13:  enforce => enforce-01
Span 17-18:  essential => essential
Span 26-27:  favour => favor-01
Span 5-6:  general => general
Span 21-22:  idea => idea
Span 14-15:  procedure => procedure
Span 9-10:  promised => promise-01
Span 18-19:  services => service
Span 24-25:  shelved => shelve-01
Span 1-2:  tory => (political-party :name (name :op "Tory"))
Span 30-31:  union => union
Span 7-8:  year => year

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),democracy,democracy,false), Span(30,31,List(1),union,union,false), Span(28,29,List(2),action,action,false), Span(26,27,List(3),favour,favor-01,false), Span(24,25,List(4),shelved,shelve-01,false), Span(23,24,List(5),again,again,false), Span(21,22,List(6),idea,idea,false), Span(19,20,List(7),but,contrast-01,false), Span(18,19,List(8),services,service,false), Span(17,18,List(9),essential,essential,false), Span(15,16,List(10),agreements,agree-01,false), Span(14,15,List(11),procedure,procedure,false), Span(13,14,List(12),adequate,adequate,false), Span(12,13,List(13),enforce,enforce-01,false), Span(10,11,List(14),action,action,false), Span(9,10,List(15),promised,promise-01,false), Span(8,9,List(16),again,again,false), Span(7,8,List(17),year,year,false), Span(6,7,List(18),election,elect-01,false), Span(5,6,List(19),general,general,false), Span(1,2,List(22, 21, 20),tory,(political-party :name (name :op "Tory")),false)),Map(2 -> action, 5 -> again, 12 -> adequate, 15 -> promise-01, 8 -> service, 21 -> name, 18 -> elect-01, 7 -> contrast-01, 17 -> year, 1 -> union, 4 -> shelve-01, 11 -> procedure, 14 -> action, 20 -> political-party, 6 -> idea, 22 -> "Tory", 0 -> democracy, 9 -> essential, 16 -> again, 19 -> general, 3 -> favor-01, 10 -> agree-01, 13 -> enforce-01),Map(e -> essential, n -> name, s2 -> service, p2 -> promise-01, e2 -> enforce-01, a3 -> agree-01, s -> shelve-01, a6 -> again, d -> democracy, g -> general, y -> year, p -> procedure, a -> action, a5 -> action, a2 -> again, i -> idea, c -> contrast-01, u -> union, f -> favor-01, p3 -> political-party, e3 -> elect-01, a4 -> adequate))),[Ljava.lang.String;@6935c14f,Annotation([Ljava.lang.String;@48265f7f,[Ljava.lang.String;@4f47afda,[Ljava.lang.String;@6b6a39df),Annotation([Ljava.lang.String;@afd9691,[Ljava.lang.String;@ea80f3a,[Ledu.cmu.lti.nlp.amr.Dependency;@3b7fb05a),Annotation([Ljava.lang.String;@3c13033a,[Ljava.lang.String;@438f3a6,[Ljava.lang.String;@37041974),Annotation([Ljava.lang.String;@6e232ae3,[Ljava.lang.String;@46d4d592,[Ledu.cmu.lti.nlp.amr.Entity;@3f118892))
AMR:
(a3 / agree-01, ARG0, p3 / political-party)
(a3 / agree-01, ARG1, p / procedure)
(a3 / agree-01, ARG2, s2 / service)
(a3 / agree-01, mod, a4 / adequate)
(a5 / action, purpose, e2 / enforce-01)
(c / contrast-01, ARG1, p2 / promise-01)
(c / contrast-01, ARG2, s / shelve-01)
(d / democracy, mod, u / union)
(e2 / enforce-01, ARG1, a3 / agree-01)
(e3 / elect-01, ARG1, c / contrast-01)
(e3 / elect-01, mod, g / general)
(f / favor-01, ARG1, a / action)
(n / name, op, "Tory")
(p2 / promise-01, ARG0, y / year)
(p2 / promise-01, ARG1, i / idea)
(p2 / promise-01, ARG2, e2 / enforce-01)
(p2 / promise-01, mod, a6 / again)
(p3 / political-party, name, n / name)
(s / shelve-01, ARG1, f / favor-01)
(s / shelve-01, ARG2, d / democracy)
(s / shelve-01, manner, a2 / again)
(s2 / service, mod, e / essential)

Decoded in 314,551 microseconds
Sentence: i promised to return on wednesday

Spans:
Span 0-1:  i => i
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),promised,promise-01,false), Span(0,1,List(1),i,i,false)),Map(1 -> i, 0 -> promise-01),Map(p -> promise-01, i -> i))),[Ljava.lang.String;@181d4997,Annotation([Ljava.lang.String;@2aca64df,[Ljava.lang.String;@4da4826b,[Ljava.lang.String;@6b6e669f),Annotation([Ljava.lang.String;@1d1387d3,[Ljava.lang.String;@6d3a3c8e,[Ledu.cmu.lti.nlp.amr.Dependency;@a5dc6a8),Annotation([Ljava.lang.String;@129d44e9,[Ljava.lang.String;@1317268b,[Ljava.lang.String;@54e37977),Annotation([Ljava.lang.String;@223b9f2b,[Ljava.lang.String;@784ed19b,[Ledu.cmu.lti.nlp.amr.Entity;@7ea354d1))
AMR:
(p / promise-01, ARG0, i / i)

Decoded in 4,341 microseconds
Sentence: that leaves virusbub which momentarily promises to perform minor miracles but ultimately comes across like a killing joke tribute to gregory isaacs

Spans:
Span 13-14:  across => across
Span 10-11:  but => contrast-01
Span 17-18:  joke => joke-01
Span 16-17:  killing => kill-01
Span 1-2:  leaves => leave-01
Span 8-9:  minor => minor
Span 9-10:  miracles => miracle
Span 7-8:  perform => perform-01
Span 5-6:  promises => promise-01
Span 18-19:  tribute => tribute
Span 11-12:  ultimately => ultimate

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),tribute,tribute,false), Span(17,18,List(1),joke,joke-01,false), Span(16,17,List(2),killing,kill-01,false), Span(13,14,List(3),across,across,false), Span(11,12,List(4),ultimately,ultimate,false), Span(10,11,List(5),but,contrast-01,false), Span(9,10,List(6),miracles,miracle,false), Span(8,9,List(7),minor,minor,false), Span(7,8,List(8),perform,perform-01,false), Span(5,6,List(9),promises,promise-01,false), Span(1,2,List(10),leaves,leave-01,false)),Map(2 -> kill-01, 5 -> contrast-01, 8 -> perform-01, 7 -> minor, 1 -> joke-01, 4 -> ultimate, 6 -> miracle, 9 -> promise-01, 0 -> tribute, 10 -> leave-01, 3 -> across),Map(k -> kill-01, t -> tribute, m2 -> minor, p2 -> promise-01, j -> joke-01, m -> miracle, p -> perform-01, a -> across, l -> leave-01, c -> contrast-01, u -> ultimate))),[Ljava.lang.String;@1515a64b,Annotation([Ljava.lang.String;@405890bd,[Ljava.lang.String;@7686894b,[Ljava.lang.String;@7a9fd7b7),Annotation([Ljava.lang.String;@140b6e46,[Ljava.lang.String;@7a74bff1,[Ledu.cmu.lti.nlp.amr.Dependency;@6e5a606),Annotation([Ljava.lang.String;@4ef6d773,[Ljava.lang.String;@2fbae785,[Ljava.lang.String;@17b5e53e),Annotation([Ljava.lang.String;@26dd559b,[Ljava.lang.String;@d1f470c,[Ledu.cmu.lti.nlp.amr.Entity;@716b8f))
AMR:
(c / contrast-01, ARG1, p / perform-01)
(j / joke-01, ARG0, t / tribute)
(j / joke-01, ARG1, p / perform-01)
(k / kill-01, ARG0, a / across)
(k / kill-01, ARG1, t / tribute)
(l / leave-01, ARG0, u / ultimate)
(l / leave-01, ARG1, p2 / promise-01)
(m / miracle, mod, m2 / minor)
(p / perform-01, ARG1, m / miracle)
(p2 / promise-01, ARG1, p / perform-01)

Decoded in 93,385 microseconds
Sentence: it promises more codsociology since it intends to look at what british films tell us about our society lifestyles and culture

NER Entity: (thing :name (name :op "british"))
Spans:
Span 19-20:  and => and
Span 20-21:  culture => culture
Span 12-13:  films => film
Span 6-7:  intends => intend-01
Span 5-6:  it => it
Span 0-1:  it => it
Span 18-19:  lifestyles => lifestyle
Span 1-2:  promises => promise-01
Span 4-5:  since => since
Span 17-18:  society => society
Span 13-14:  tell => tell-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),culture,culture,false), Span(19,20,List(1),and,and,false), Span(18,19,List(2),lifestyles,lifestyle,false), Span(17,18,List(3),society,society,false), Span(13,14,List(4),tell,tell-01,false), Span(12,13,List(5),films,film,false), Span(6,7,List(6),intends,intend-01,false), Span(5,6,List(7),it,it,false), Span(4,5,List(8),since,since,false), Span(1,2,List(9),promises,promise-01,false), Span(0,1,List(10),it,it,false)),Map(2 -> lifestyle, 5 -> film, 8 -> since, 7 -> it, 1 -> and, 4 -> tell-01, 6 -> intend-01, 9 -> promise-01, 0 -> culture, 10 -> it, 3 -> society),Map(s2 -> since, t -> tell-01, s -> society, i3 -> it, p -> promise-01, a -> and, i2 -> it, i -> intend-01, l -> lifestyle, c -> culture, f -> film))),[Ljava.lang.String;@17f6f3a3,Annotation([Ljava.lang.String;@55f55e9f,[Ljava.lang.String;@601744cf,[Ljava.lang.String;@17a6a352),Annotation([Ljava.lang.String;@3d2c689f,[Ljava.lang.String;@2e88be19,[Ledu.cmu.lti.nlp.amr.Dependency;@1378732d),Annotation([Ljava.lang.String;@48d19957,[Ljava.lang.String;@38aa441a,[Ljava.lang.String;@325d2406),Annotation([Ljava.lang.String;@e81fbf,[Ljava.lang.String;@77c3510,[Ledu.cmu.lti.nlp.amr.Entity;@6b7fb146))
AMR:
(a / and, op, c / culture)
(a / and, op, l / lifestyle)
(i / intend-01, ARG0, i2 / it)
(p / promise-01, ARG0, i3 / it)
(s / society, poss, f / film)
(s2 / since, op, i / intend-01)
(s2 / since, op, p / promise-01)
(t / tell-01, ARG0, i2 / it)
(t / tell-01, ARG1, f / film)
(t / tell-01, ARG2, a / and)

Decoded in 215,809 microseconds
Sentence: only newfoundland and new zealand promised support

NER Entity: (country :name (name :op "newfoundland"))
NER Entity: (country :name (name :op "new" :op "zealand"))
Spans:
Span 2-3:  and => and
Span 3-5:  new zealand => (country :name (name :op "new" :op "zealand"))
Span 0-1:  only => only
Span 5-6:  promised => promise-01
Span 6-7:  support => support-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),support,support-01,false), Span(5,6,List(1),promised,promise-01,false), Span(3,5,List(5, 4, 3, 2),new zealand,(country :name (name :op "new" :op "zealand")),false), Span(2,3,List(6),and,and,false), Span(0,1,List(7),only,only,false)),Map(2 -> country, 5 -> "zealand", 7 -> only, 1 -> promise-01, 4 -> "new", 6 -> and, 0 -> support-01, 3 -> name),Map(n -> name, s -> support-01, p -> promise-01, a -> and, c -> country, o -> only))),[Ljava.lang.String;@c4fa1cd,Annotation([Ljava.lang.String;@4007a00b,[Ljava.lang.String;@349c5304,[Ljava.lang.String;@30e4698),Annotation([Ljava.lang.String;@1e3ca6b9,[Ljava.lang.String;@1fe5cb31,[Ledu.cmu.lti.nlp.amr.Dependency;@277f0e53),Annotation([Ljava.lang.String;@6857f67,[Ljava.lang.String;@266f4689,[Ljava.lang.String;@537fe015),Annotation([Ljava.lang.String;@7050ad86,[Ljava.lang.String;@40b07205,[Ledu.cmu.lti.nlp.amr.Entity;@dc771))
AMR:
(c / country, name, n / name)
(n / name, op, "new")
(n / name, op, "zealand")
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, s / support-01)
(p / promise-01, instrument, c / country)
(s / support-01, ARG1, o / only)

Decoded in 124,997 microseconds
Sentence: the plans promise a painless way to provide a lump sum extra cash for school fees and home improvements or to boost the income of the retired but there is frequently a high price to pay

Spans:
Span 16-17:  and => and
Span 21-22:  boost => boost-01
Span 27-28:  but => contrast-01
Span 12-13:  cash => cash
Span 11-12:  extra => extra
Span 15-16:  fees => fee
Span 30-31:  frequently => frequent
Span 32-33:  high => high
Span 17-18:  home => home
Span 18-19:  improvements => improve-01
Span 23-24:  income => income
Span 9-10:  lump => lump-01
Span 19-20:  or => or
Span 4-5:  painless => painless
Span 35-36:  pay => pay-01
Span 1-2:  plans => plan-01
Span 33-34:  price => (thing :ARG2-of price-01)
Span 2-3:  promise => promise-01
Span 7-8:  provide => provide-01
Span 26-27:  retired => retire-01
Span 14-15:  school => school
Span 10-11:  sum => sum
Span 5-6:  way => way

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),pay,pay-01,false), Span(33,34,List(2, 1),price,(thing :ARG2-of price-01),false), Span(32,33,List(3),high,high,false), Span(30,31,List(4),frequently,frequent,false), Span(27,28,List(5),but,contrast-01,false), Span(26,27,List(6),retired,retire-01,false), Span(23,24,List(7),income,income,false), Span(21,22,List(8),boost,boost-01,false), Span(19,20,List(9),or,or,false), Span(18,19,List(10),improvements,improve-01,false), Span(17,18,List(11),home,home,false), Span(16,17,List(12),and,and,false), Span(15,16,List(13),fees,fee,false), Span(14,15,List(14),school,school,false), Span(12,13,List(15),cash,cash,false), Span(11,12,List(16),extra,extra,false), Span(10,11,List(17),sum,sum,false), Span(9,10,List(18),lump,lump-01,false), Span(7,8,List(19),provide,provide-01,false), Span(5,6,List(20),way,way,false), Span(4,5,List(21),painless,painless,false), Span(2,3,List(22),promise,promise-01,false), Span(1,2,List(23),plans,plan-01,false)),Map(2 -> price-01, 5 -> contrast-01, 12 -> and, 15 -> cash, 8 -> boost-01, 21 -> painless, 18 -> lump-01, 7 -> income, 17 -> sum, 1 -> thing, 23 -> plan-01, 4 -> frequent, 11 -> home, 14 -> school, 20 -> way, 6 -> retire-01, 22 -> promise-01, 0 -> pay-01, 9 -> or, 16 -> extra, 19 -> provide-01, 3 -> high, 10 -> improve-01, 13 -> fee),Map(e -> extra, w -> way, h -> high, p5 -> promise-01, s2 -> sum, h2 -> home, t -> thing, b -> boost-01, p2 -> price-01, s -> school, p -> pay-01, a -> and, p4 -> painless, i2 -> improve-01, r -> retire-01, i -> income, c -> contrast-01, p6 -> plan-01, l -> lump-01, f2 -> fee, f -> frequent, o -> or, p3 -> provide-01, c2 -> cash))),[Ljava.lang.String;@8a0cbbe,Annotation([Ljava.lang.String;@74a02b5e,[Ljava.lang.String;@3f7f6423,[Ljava.lang.String;@44875666),Annotation([Ljava.lang.String;@113965b0,[Ljava.lang.String;@4f430ea5,[Ledu.cmu.lti.nlp.amr.Dependency;@3b769b4a),Annotation([Ljava.lang.String;@67cd35c5,[Ljava.lang.String;@51854dc0,[Ljava.lang.String;@6b3a210),Annotation([Ljava.lang.String;@7b54cbdf,[Ljava.lang.String;@7c14dcba,[Ledu.cmu.lti.nlp.amr.Entity;@3da776fa))
AMR:
(a / and, op, f2 / fee)
(a / and, op, i2 / improve-01)
(b / boost-01, ARG0, s2 / sum)
(b / boost-01, ARG1, c / contrast-01)
(c / contrast-01, ARG1, r / retire-01)
(c2 / cash, mod, e / extra)
(f2 / fee, mod, s / school)
(i2 / improve-01, ARG1, h2 / home)
(l / lump-01, ARG1, f / frequent)
(o / or, consist, c2 / cash)
(o / or, op, b / boost-01)
(o / or, op, i / income)
(o / or, op, p3 / provide-01)
(p / pay-01, ARG3, a / and)
(p2 / price-01, ARG1, p / pay-01)
(p2 / price-01, ARG2, t / thing)
(p3 / provide-01, ARG0, a / and)
(p3 / provide-01, ARG1, w / way)
(p3 / provide-01, purpose, l / lump-01)
(p5 / promise-01, ARG0, p6 / plan-01)
(p5 / promise-01, ARG1, w / way)
(t / thing, mod, h / high)
(w / way, mod, p4 / painless)

Decoded in 618,928 microseconds
Sentence: even though the new series looks good with one of its highlights promising to be the smallscreen debut of paul whitehead and he has at least three other projects on the go harry enfield still hasnt figured out what it is that he does exactly

Spans:
Span 21-22:  and => and
Span 44-45:  exactly => exact
Span 36-37:  figured => figure-05
Span 6-7:  good => good
Span 42-43:  he => he
Span 22-23:  he => he
Span 11-12:  highlights => highlight-01
Span 39-40:  it => it
Span 5-6:  looks => look-02
Span 3-4:  new => new
Span 27-28:  other => other
Span 28-29:  projects => project
Span 12-13:  promising => promise-01
Span 4-5:  series => series
Span 34-35:  still => still
Span 26-27:  three => 3

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),exactly,exact,false), Span(42,43,List(1),he,he,false), Span(39,40,List(2),it,it,false), Span(36,37,List(3),figured,figure-05,false), Span(34,35,List(4),still,still,false), Span(28,29,List(5),projects,project,false), Span(27,28,List(6),other,other,false), Span(26,27,List(7),three,3,false), Span(22,23,List(8),he,he,false), Span(21,22,List(9),and,and,false), Span(12,13,List(10),promising,promise-01,false), Span(11,12,List(11),highlights,highlight-01,false), Span(6,7,List(12),good,good,false), Span(5,6,List(13),looks,look-02,false), Span(4,5,List(14),series,series,false), Span(3,4,List(15),new,new,false)),Map(2 -> it, 5 -> project, 12 -> good, 15 -> new, 8 -> he, 7 -> 3, 1 -> he, 4 -> still, 11 -> highlight-01, 14 -> series, 6 -> other, 0 -> exact, 9 -> and, 3 -> figure-05, 10 -> promise-01, 13 -> look-02),Map(e -> exact, n -> new, h -> he, s2 -> series, h2 -> he, p2 -> promise-01, s -> still, p -> project, g -> good, a -> and, i -> it, h3 -> highlight-01, l -> look-02, f -> figure-05, o -> other, 3 -> 3))),[Ljava.lang.String;@422fe3d3,Annotation([Ljava.lang.String;@56165397,[Ljava.lang.String;@53ca0aa8,[Ljava.lang.String;@7581c691),Annotation([Ljava.lang.String;@1b1395dc,[Ljava.lang.String;@22d3ac67,[Ledu.cmu.lti.nlp.amr.Dependency;@76dbb00d),Annotation([Ljava.lang.String;@51036271,[Ljava.lang.String;@35341244,[Ljava.lang.String;@6d9b49a5),Annotation([Ljava.lang.String;@6e0027da,[Ljava.lang.String;@4c3891a1,[Ledu.cmu.lti.nlp.amr.Entity;@15e1081f))
AMR:
(a / and, mod, e / exact)
(a / and, op, f / figure-05)
(a / and, op, h / he)
(f / figure-05, ARG0, h2 / he)
(f / figure-05, ARG1, i / it)
(f / figure-05, mod, s / still)
(l / look-02, ARG0, a / and)
(l / look-02, ARG1, g / good)
(l / look-02, ARG2, s2 / series)
(p / project, mod, o / other)
(p / project, poss, h2 / he)
(p / project, quant, 3 / 3)
(p2 / promise-01, ARG0, a / and)
(p2 / promise-01, ARG1, h3 / highlight-01)
(s2 / series, mod, n / new)

Decoded in 702,397 microseconds
Sentence: the vg deal is a step forward in the growth pattern he said pointing out that the group had promised it would enhance earnings with last years purchase of pennwalt and had exceeded that prediction

Spans:
Span 30-31:  and => and
Span 2-3:  deal => deal-01
Span 23-24:  earnings => earn-01
Span 22-23:  enhance => enhance-01
Span 32-33:  exceeded => exceed-01
Span 6-7:  forward => forward
Span 17-18:  group => group
Span 9-10:  growth => grow-01
Span 11-12:  he => he
Span 20-21:  it => it
Span 25-26:  last => last
Span 10-11:  pattern => pattern
Span 13-14:  pointing => point-02
Span 34-35:  prediction => predict-01
Span 19-20:  promised => promise-01
Span 27-28:  purchase => purchase-01
Span 12-13:  said => say-01
Span 26-27:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),prediction,predict-01,false), Span(32,33,List(1),exceeded,exceed-01,false), Span(30,31,List(2),and,and,false), Span(27,28,List(3),purchase,purchase-01,false), Span(26,27,List(5, 4),years,(temporal-quantity :unit year),false), Span(25,26,List(6),last,last,false), Span(23,24,List(7),earnings,earn-01,false), Span(22,23,List(8),enhance,enhance-01,false), Span(20,21,List(9),it,it,false), Span(19,20,List(10),promised,promise-01,false), Span(17,18,List(11),group,group,false), Span(13,14,List(12),pointing,point-02,false), Span(12,13,List(13),said,say-01,false), Span(11,12,List(14),he,he,false), Span(10,11,List(15),pattern,pattern,false), Span(9,10,List(16),growth,grow-01,false), Span(6,7,List(17),forward,forward,false), Span(2,3,List(18),deal,deal-01,false)),Map(2 -> and, 5 -> year, 12 -> point-02, 15 -> pattern, 8 -> enhance-01, 18 -> deal-01, 7 -> earn-01, 17 -> forward, 1 -> exceed-01, 4 -> temporal-quantity, 11 -> group, 14 -> he, 6 -> last, 0 -> predict-01, 9 -> it, 16 -> grow-01, 3 -> purchase-01, 10 -> promise-01, 13 -> say-01),Map(e -> exceed-01, h -> he, p5 -> pattern, t -> temporal-quantity, p2 -> purchase-01, e2 -> earn-01, s -> say-01, d -> deal-01, g2 -> grow-01, p -> predict-01, y -> year, g -> group, a -> and, p4 -> point-02, i -> it, l -> last, f -> forward, e3 -> enhance-01, p3 -> promise-01))),[Ljava.lang.String;@517a6a7f,Annotation([Ljava.lang.String;@3be5e1a3,[Ljava.lang.String;@7140b30d,[Ljava.lang.String;@4eab5491),Annotation([Ljava.lang.String;@523d23f0,[Ljava.lang.String;@2c028bbe,[Ledu.cmu.lti.nlp.amr.Dependency;@5b247d84),Annotation([Ljava.lang.String;@38ac93db,[Ljava.lang.String;@4a1f2bee,[Ljava.lang.String;@447d3c46),Annotation([Ljava.lang.String;@7a003aca,[Ljava.lang.String;@2513e259,[Ledu.cmu.lti.nlp.amr.Entity;@3c715413))
AMR:
(a / and, op, e / exceed-01)
(d / deal-01, ARG1, p2 / purchase-01)
(e / exceed-01, ARG0, h / he)
(e / exceed-01, ARG1, p / predict-01)
(e2 / earn-01, ARG0, i / it)
(e3 / enhance-01, ARG0, g / group)
(e3 / enhance-01, ARG1, i / it)
(f / forward, op, p5 / pattern)
(p2 / purchase-01, ARG0, a / and)
(p2 / purchase-01, ARG1, t / temporal-quantity)
(p2 / purchase-01, mod, l / last)
(p3 / promise-01, ARG0, g / group)
(p3 / promise-01, ARG2, a / and)
(p4 / point-02, ARG1, p5 / pattern)
(p5 / pattern, mod, g2 / grow-01)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, p4 / point-02)
(t / temporal-quantity, unit, y / year)

Decoded in 1,159,781 microseconds
Sentence: but ive promised to go horseriding and ill try my hand at minigolf

Spans:
Span 6-7:  and => and
Span 0-1:  but => contrast-01
Span 10-11:  hand => hand
Span 7-8:  ill => ill-41
Span 2-3:  promised => promise-01
Span 8-9:  try => try-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),hand,hand,false), Span(8,9,List(1),try,try-01,false), Span(7,8,List(2),ill,ill-41,false), Span(6,7,List(3),and,and,false), Span(2,3,List(4),promised,promise-01,false), Span(0,1,List(5),but,contrast-01,false)),Map(2 -> ill-41, 5 -> contrast-01, 1 -> try-01, 4 -> promise-01, 0 -> hand, 3 -> and),Map(h -> hand, t -> try-01, p -> promise-01, a -> and, i -> ill-41, c -> contrast-01))),[Ljava.lang.String;@3446ca65,Annotation([Ljava.lang.String;@1391c7b3,[Ljava.lang.String;@47cdc2ce,[Ljava.lang.String;@15b08736),Annotation([Ljava.lang.String;@787cf559,[Ljava.lang.String;@53cfe3db,[Ledu.cmu.lti.nlp.amr.Dependency;@757869d9),Annotation([Ljava.lang.String;@346d61cf,[Ljava.lang.String;@793077ec,[Ljava.lang.String;@5d11651c),Annotation([Ljava.lang.String;@21054100,[Ljava.lang.String;@5fee77ef,[Ledu.cmu.lti.nlp.amr.Entity;@21041d1d))
AMR:
(a / and, op, t / try-01)
(c / contrast-01, ARG1, p / promise-01)
(p / promise-01, ARG1, a / and)
(t / try-01, ARG1, h / hand)
(t / try-01, manner, i / ill-41)

Decoded in 17,538 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@15136bda,Annotation([Ljava.lang.String;@2e0dc005,[Ljava.lang.String;@8b99fe2,[Ljava.lang.String;@52afb2e7),Annotation([Ljava.lang.String;@d0a861a,[Ljava.lang.String;@2dea1ba6,[Ledu.cmu.lti.nlp.amr.Dependency;@64bd46d6),Annotation([Ljava.lang.String;@4675bf45,[Ljava.lang.String;@5c606f26,[Ljava.lang.String;@3f21572b),Annotation([Ljava.lang.String;@25e1e86e,[Ljava.lang.String;@1262a130,[Ledu.cmu.lti.nlp.amr.Entity;@9445fbe))
AMR:


Decoded in 1,564 microseconds
Sentence: it wouldnt she promised be a difficult decision

Spans:
Span 7-8:  decision => decide-01
Span 6-7:  difficult => difficult
Span 0-1:  it => it
Span 3-4:  promised => promise-01
Span 2-3:  she => she

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),decision,decide-01,false), Span(6,7,List(1),difficult,difficult,false), Span(3,4,List(2),promised,promise-01,false), Span(2,3,List(3),she,she,false), Span(0,1,List(4),it,it,false)),Map(2 -> promise-01, 1 -> difficult, 4 -> it, 0 -> decide-01, 3 -> she),Map(s -> she, d -> decide-01, p -> promise-01, d2 -> difficult, i -> it))),[Ljava.lang.String;@67e9b7b2,Annotation([Ljava.lang.String;@211b3c6a,[Ljava.lang.String;@31b6421,[Ljava.lang.String;@7b4ab41e),Annotation([Ljava.lang.String;@65775cce,[Ljava.lang.String;@7f6e0c6c,[Ledu.cmu.lti.nlp.amr.Dependency;@11f1c7d0),Annotation([Ljava.lang.String;@187531e4,[Ljava.lang.String;@361e7c47,[Ljava.lang.String;@b713513),Annotation([Ljava.lang.String;@35537843,[Ljava.lang.String;@7afc920e,[Ledu.cmu.lti.nlp.amr.Entity;@5bd91436))
AMR:
(d / decide-01, ARG0, s / she)
(d / decide-01, mod, d2 / difficult)
(p / promise-01, ARG0, s / she)
(p / promise-01, ARG1, i / it)

Decoded in 27,339 microseconds
Sentence: they also promised a simple answer to all problems with the slogan islam is the solution

Spans:
Span 7-8:  all => all
Span 1-2:  also => also
Span 5-6:  answer => answer-01
Span 12-13:  islam => (religious-group :name (name :op "Islam"))
Span 8-9:  problems => problem
Span 2-3:  promised => promise-01
Span 4-5:  simple => simple
Span 11-12:  slogan => slogan
Span 15-16:  solution => solution
Span 0-1:  they => they

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),solution,solution,false), Span(12,13,List(3, 2, 1),islam,(religious-group :name (name :op "Islam")),false), Span(11,12,List(4),slogan,slogan,false), Span(8,9,List(5),problems,problem,false), Span(7,8,List(6),all,all,false), Span(5,6,List(7),answer,answer-01,false), Span(4,5,List(8),simple,simple,false), Span(2,3,List(9),promised,promise-01,false), Span(1,2,List(10),also,also,false), Span(0,1,List(11),they,they,false)),Map(2 -> name, 5 -> problem, 8 -> simple, 7 -> answer-01, 1 -> religious-group, 11 -> they, 4 -> slogan, 6 -> all, 9 -> promise-01, 0 -> solution, 10 -> also, 3 -> "Islam"),Map(n -> name, t -> they, s2 -> slogan, p2 -> promise-01, a3 -> also, s -> solution, p -> problem, a -> all, a2 -> answer-01, r -> religious-group, s3 -> simple))),[Ljava.lang.String;@2c970551,Annotation([Ljava.lang.String;@6ede1fb5,[Ljava.lang.String;@38f3dcf0,[Ljava.lang.String;@122e2dc6),Annotation([Ljava.lang.String;@15bf2b7d,[Ljava.lang.String;@39c026b2,[Ledu.cmu.lti.nlp.amr.Dependency;@762c8dbc),Annotation([Ljava.lang.String;@670d6e40,[Ljava.lang.String;@22c1609b,[Ljava.lang.String;@45ad71f0),Annotation([Ljava.lang.String;@7e13674c,[Ljava.lang.String;@2be2ef3e,[Ledu.cmu.lti.nlp.amr.Entity;@3fc8e5f4))
AMR:
(a2 / answer-01, ARG0, r / religious-group)
(a2 / answer-01, ARG1, p / problem)
(a2 / answer-01, mod, s3 / simple)
(n / name, op, "Islam")
(p / problem, quant, a / all)
(p2 / promise-01, ARG0, t / they)
(p2 / promise-01, ARG1, s / solution)
(p2 / promise-01, ARG2, a2 / answer-01)
(p2 / promise-01, mod, a3 / also)
(r / religious-group, mod, s2 / slogan)
(r / religious-group, name, n / name)

Decoded in 148,664 microseconds
Sentence: one can waive ones rights by consenting but not by promising except in the special case in which the very undertaking of an obligation to act in a certain way terminates ones right not to do so

Spans:
Span 25-26:  act => act-02
Span 7-8:  but => contrast-01
Span 1-2:  can => possible
Span 15-16:  case => case
Span 28-29:  certain => certain
Span 6-7:  consenting => consent-01
Span 11-12:  except => except-00
Span 23-24:  obligation => obligate-01
Span 31-32:  ones => one
Span 3-4:  ones => one
Span 10-11:  promising => promise-01
Span 4-5:  rights => right
Span 36-37:  so => so
Span 14-15:  special => special
Span 20-21:  undertaking => undertake-01
Span 19-20:  very => very
Span 29-30:  way => way

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),so,so,false), Span(31,32,List(1),ones,one,false), Span(29,30,List(2),way,way,false), Span(28,29,List(3),certain,certain,false), Span(25,26,List(4),act,act-02,false), Span(23,24,List(5),obligation,obligate-01,false), Span(20,21,List(6),undertaking,undertake-01,false), Span(19,20,List(7),very,very,false), Span(15,16,List(8),case,case,false), Span(14,15,List(9),special,special,false), Span(11,12,List(10),except,except-00,false), Span(10,11,List(11),promising,promise-01,false), Span(7,8,List(12),but,contrast-01,false), Span(6,7,List(13),consenting,consent-01,false), Span(4,5,List(14),rights,right,false), Span(3,4,List(15),ones,one,false), Span(1,2,List(16),can,possible,false)),Map(2 -> way, 5 -> obligate-01, 12 -> contrast-01, 15 -> one, 8 -> case, 7 -> very, 1 -> one, 4 -> act-02, 11 -> promise-01, 14 -> right, 6 -> undertake-01, 0 -> so, 9 -> special, 16 -> possible, 3 -> certain, 10 -> except-00, 13 -> consent-01),Map(e -> except-00, w -> way, s2 -> special, o3 -> one, p2 -> possible, c4 -> consent-01, s -> so, v -> very, p -> promise-01, a -> act-02, c3 -> contrast-01, o2 -> obligate-01, r -> right, c -> certain, u -> undertake-01, o -> one, c2 -> case))),[Ljava.lang.String;@1e7116e3,Annotation([Ljava.lang.String;@1295a0b2,[Ljava.lang.String;@1d690fa6,[Ljava.lang.String;@5c826a5f),Annotation([Ljava.lang.String;@7615b26b,[Ljava.lang.String;@a74cb5e,[Ledu.cmu.lti.nlp.amr.Dependency;@79d38dae),Annotation([Ljava.lang.String;@2ffad8fe,[Ljava.lang.String;@7dbc244d,[Ljava.lang.String;@4af37bb8),Annotation([Ljava.lang.String;@373f9379,[Ljava.lang.String;@2eeb0945,[Ledu.cmu.lti.nlp.amr.Entity;@48ada913))
AMR:
(a / act-02, ARG1, o / one)
(a / act-02, manner, w / way)
(c2 / case, mod, s2 / special)
(c3 / contrast-01, ARG1, c / certain)
(c3 / contrast-01, ARG2, p2 / possible)
(c4 / consent-01, ARG0, r / right)
(e / except-00, ARG1, c2 / case)
(o2 / obligate-01, ARG1, a / act-02)
(p / promise-01, ARG0, o / one)
(p / promise-01, ARG1, e / except-00)
(p2 / possible, manner, c4 / consent-01)
(r / right, mod, o3 / one)
(u / undertake-01, ARG0, s / so)
(u / undertake-01, ARG1, o2 / obligate-01)
(u / undertake-01, mod, v / very)
(w / way, mod, c / certain)

Decoded in 277,328 microseconds
Sentence: the most optimistic prediction might be that a new multiparty system after the already promised free elections next year would delay for a few years dash

Spans:
Span 11-12:  after => after
Span 13-14:  already => already
Span 20-21:  delay => delay-01
Span 16-17:  elections => elect-01
Span 23-24:  few => few
Span 15-16:  free => free-41
Span 1-2:  most => most
Span 8-9:  new => new
Span 17-18:  next => next
Span 2-3:  optimistic => optimistic
Span 3-4:  prediction => predict-01
Span 14-15:  promised => promise-01
Span 10-11:  system => system
Span 18-19:  year => year
Span 24-25:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),years,(temporal-quantity :unit year),false), Span(23,24,List(2),few,few,false), Span(20,21,List(3),delay,delay-01,false), Span(18,19,List(4),year,year,false), Span(17,18,List(5),next,next,false), Span(16,17,List(6),elections,elect-01,false), Span(15,16,List(7),free,free-41,false), Span(14,15,List(8),promised,promise-01,false), Span(13,14,List(9),already,already,false), Span(11,12,List(10),after,after,false), Span(10,11,List(11),system,system,false), Span(8,9,List(12),new,new,false), Span(3,4,List(13),prediction,predict-01,false), Span(2,3,List(14),optimistic,optimistic,false), Span(1,2,List(15),most,most,false)),Map(2 -> few, 5 -> next, 12 -> new, 15 -> most, 8 -> promise-01, 7 -> free-41, 1 -> year, 4 -> year, 11 -> system, 14 -> optimistic, 6 -> elect-01, 0 -> temporal-quantity, 9 -> already, 3 -> delay-01, 10 -> after, 13 -> predict-01),Map(e -> elect-01, n -> next, t -> temporal-quantity, p2 -> predict-01, s -> system, m -> most, d -> delay-01, y -> year, p -> promise-01, a -> already, a2 -> after, f2 -> free-41, f -> few, o -> optimistic, y2 -> year, n2 -> new))),[Ljava.lang.String;@13743ac,Annotation([Ljava.lang.String;@533bd1d3,[Ljava.lang.String;@7c4c9e55,[Ljava.lang.String;@a2f1e34),Annotation([Ljava.lang.String;@1b67ed25,[Ljava.lang.String;@44022631,[Ledu.cmu.lti.nlp.amr.Dependency;@69197dd8),Annotation([Ljava.lang.String;@89525d0,[Ljava.lang.String;@77e57f16,[Ljava.lang.String;@7bfabad8),Annotation([Ljava.lang.String;@a00fa7f,[Ljava.lang.String;@463dacfa,[Ledu.cmu.lti.nlp.amr.Entity;@7b27751c))
AMR:
(a2 / after, op, p / promise-01)
(d / delay-01, ARG0, p / promise-01)
(d / delay-01, ARG1, m / most)
(e / elect-01, ARG1, n2 / new)
(f / few, op, t / temporal-quantity)
(f2 / free-41, ARG1, e / elect-01)
(o / optimistic, degree, m / most)
(p / promise-01, ARG1, s / system)
(p / promise-01, ARG2, e / elect-01)
(p / promise-01, time, a / already)
(p / promise-01, time, y2 / year)
(p2 / predict-01, ARG0, t / temporal-quantity)
(p2 / predict-01, ARG1, s / system)
(t / temporal-quantity, unit, y / year)
(y2 / year, mod, n / next)

Decoded in 130,707 microseconds
Sentence: but the writers patiently gathered in neville braybrookes seeds in the wind fully formed literary grownups have acquired retrospective childhoods their early writing promises a sneak preview of their more mature productions

Spans:
Span 17-18:  acquired => acquire-01
Span 0-1:  but => contrast-01
Span 21-22:  early => early
Span 13-14:  formed => form-01
Span 12-13:  fully => full
Span 4-5:  gathered => gather-01
Span 14-15:  literary => literary
Span 30-31:  mature => mature-01
Span 23-24:  promises => promise-01
Span 8-9:  seeds => seed
Span 25-26:  sneak => sneak-01
Span 11-12:  wind => wind
Span 2-3:  writers => (person :ARG0-of write-01)
Span 22-23:  writing => write-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),mature,mature-01,false), Span(25,26,List(1),sneak,sneak-01,false), Span(23,24,List(2),promises,promise-01,false), Span(22,23,List(3),writing,write-01,false), Span(21,22,List(4),early,early,false), Span(17,18,List(5),acquired,acquire-01,false), Span(14,15,List(6),literary,literary,false), Span(13,14,List(7),formed,form-01,false), Span(12,13,List(8),fully,full,false), Span(11,12,List(9),wind,wind,false), Span(8,9,List(10),seeds,seed,false), Span(4,5,List(11),gathered,gather-01,false), Span(2,3,List(13, 12),writers,(person :ARG0-of write-01),false), Span(0,1,List(14),but,contrast-01,false)),Map(2 -> promise-01, 5 -> acquire-01, 12 -> person, 8 -> full, 7 -> form-01, 1 -> sneak-01, 4 -> early, 11 -> gather-01, 14 -> contrast-01, 6 -> literary, 0 -> mature-01, 9 -> wind, 3 -> write-01, 10 -> seed, 13 -> write-01),Map(e -> early, w -> write-01, s2 -> seed, p2 -> person, w3 -> write-01, s -> sneak-01, m -> mature-01, p -> promise-01, g -> gather-01, a -> acquire-01, w2 -> wind, c -> contrast-01, l -> literary, f2 -> full, f -> form-01))),[Ljava.lang.String;@5b79c06e,Annotation([Ljava.lang.String;@1648a4ad,[Ljava.lang.String;@7b336548,[Ljava.lang.String;@6b3e9928),Annotation([Ljava.lang.String;@5ab94819,[Ljava.lang.String;@3a2c8fd7,[Ledu.cmu.lti.nlp.amr.Dependency;@43978a17),Annotation([Ljava.lang.String;@11eb0eac,[Ljava.lang.String;@5f104764,[Ljava.lang.String;@25bf26fe),Annotation([Ljava.lang.String;@2899010e,[Ljava.lang.String;@551452f4,[Ledu.cmu.lti.nlp.amr.Entity;@29523ccf))
AMR:
(a / acquire-01, ARG0, w2 / wind)
(a / acquire-01, ARG1, w / write-01)
(c / contrast-01, ARG2, g / gather-01)
(f / form-01, ARG0, w2 / wind)
(f / form-01, ARG1, l / literary)
(f / form-01, degree, f2 / full)
(g / gather-01, ARG0, p2 / person)
(g / gather-01, ARG1, s2 / seed)
(m / mature-01, ARG1, s2 / seed)
(p / promise-01, ARG0, w / write-01)
(p / promise-01, ARG1, p2 / person)
(s / sneak-01, ARG1, g / gather-01)
(w / write-01, time, e / early)
(w3 / write-01, ARG0, p2 / person)

Decoded in 205,258 microseconds
Sentence: if they were freemen they had to give up their right to  graze in port meadow because vocal soundum the hay was  to be grown there to be promised to his majesty

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = if they were freemen they had to give up their right to  graze in port meadow because vocal soundum the hay was  to be grown there to be promised to his majesty
myTokenized = if they were freemen they had to give up their right to graze in port meadow because vocal soundum the hay was to be grown there to be promised to his majesty
i = 12
prefix = List(if, they, were, freemen, they, had, to, give, up, their, right, to, graze)
regexr = \Qi\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qy\E ?\Qw\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qf\E ?\Qr\E ?\Qe\E ?\Qe\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qy\E ?\Qh\E ?\Qa\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qg\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qu\E ?\Qp\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qi\E ?\Qr\E ?\Qr\E ?\Qi\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qt\E ?\Qo\E ?\Qg\E ?\Qr\E ?\Qa\E ?\Qz\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the terms allow the uk group to launch up to 40 disney titles over the next year and pickwick is promising a heavyweight promotion campaign to support the launch of its products

NER Entity: (country :name (name :op "uk"))
Spans:
Span 10-11:  40 => 40
Span 2-3:  allow => allow-01
Span 17-18:  and => and
Span 24-25:  campaign => campaign-01
Span 5-6:  group => group
Span 22-23:  heavyweight => heavyweight
Span 28-29:  launch => launch-01
Span 7-8:  launch => launch-01
Span 15-16:  next => next
Span 31-32:  products => product
Span 20-21:  promising => promise-01
Span 23-24:  promotion => promote-02
Span 26-27:  support => support-01
Span 1-2:  terms => term
Span 12-13:  titles => title
Span 16-17:  year => year

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),products,product,false), Span(28,29,List(1),launch,launch-01,false), Span(26,27,List(2),support,support-01,false), Span(24,25,List(3),campaign,campaign-01,false), Span(23,24,List(4),promotion,promote-02,false), Span(22,23,List(5),heavyweight,heavyweight,false), Span(20,21,List(6),promising,promise-01,false), Span(17,18,List(7),and,and,false), Span(16,17,List(8),year,year,false), Span(15,16,List(9),next,next,false), Span(12,13,List(10),titles,title,false), Span(10,11,List(11),40,40,false), Span(7,8,List(12),launch,launch-01,false), Span(5,6,List(13),group,group,false), Span(2,3,List(14),allow,allow-01,false), Span(1,2,List(15),terms,term,false)),Map(2 -> support-01, 5 -> heavyweight, 12 -> launch-01, 15 -> term, 8 -> year, 7 -> and, 1 -> launch-01, 4 -> promote-02, 11 -> 40, 14 -> allow-01, 6 -> promise-01, 0 -> product, 9 -> next, 3 -> campaign-01, 10 -> title, 13 -> group),Map(n -> next, h -> heavyweight, t -> title, p2 -> promote-02, s -> support-01, g -> group, p -> product, y -> year, a -> and, 4 -> 40, t2 -> term, l2 -> launch-01, a2 -> allow-01, c -> campaign-01, l -> launch-01, p3 -> promise-01))),[Ljava.lang.String;@52ab94fd,Annotation([Ljava.lang.String;@7ec29871,[Ljava.lang.String;@19a663bb,[Ljava.lang.String;@7add9724),Annotation([Ljava.lang.String;@69edfb80,[Ljava.lang.String;@71ac6d5,[Ledu.cmu.lti.nlp.amr.Dependency;@6ef3cd97),Annotation([Ljava.lang.String;@483ead69,[Ljava.lang.String;@aeaed8d,[Ljava.lang.String;@4591c994),Annotation([Ljava.lang.String;@6649373a,[Ljava.lang.String;@50c8f54c,[Ledu.cmu.lti.nlp.amr.Entity;@39607a03))
AMR:
(a / and, op, p3 / promise-01)
(a / and, op, y / year)
(a2 / allow-01, ARG0, t2 / term)
(a2 / allow-01, ARG1, g / group)
(c / campaign-01, ARG1, p2 / promote-02)
(l / launch-01, ARG1, p / product)
(l2 / launch-01, ARG0, g / group)
(l2 / launch-01, ARG1, t / title)
(p2 / promote-02, ARG1, 4 / 40)
(p2 / promote-02, mod, h / heavyweight)
(p3 / promise-01, ARG0, g / group)
(p3 / promise-01, ARG1, c / campaign-01)
(p3 / promise-01, ARG2, s / support-01)
(s / support-01, ARG1, l / launch-01)
(y / year, mod, n / next)

Decoded in 116,128 microseconds
Sentence: at the end of it the boa treasurer robert watson promised the funds to set up a committee with competitors from every sport and to hold another conference for a much larger gathering than yesterdays before the end of the year

Spans:
Span 23-24:  and => and
Span 26-27:  another => another
Span 35-36:  before => before
Span 17-18:  committee => committee
Span 19-20:  competitors => company
Span 27-28:  conference => conference
Span 21-22:  every => every
Span 12-13:  funds => fund
Span 32-33:  gathering => gather-01
Span 4-5:  it => it
Span 31-32:  larger => large
Span 30-31:  much => much
Span 10-11:  promised => promise-01
Span 22-23:  sport => sport
Span 40-41:  year => year

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),year,year,false), Span(35,36,List(1),before,before,false), Span(32,33,List(2),gathering,gather-01,false), Span(31,32,List(3),larger,large,false), Span(30,31,List(4),much,much,false), Span(27,28,List(5),conference,conference,false), Span(26,27,List(6),another,another,false), Span(23,24,List(7),and,and,false), Span(22,23,List(8),sport,sport,false), Span(21,22,List(9),every,every,false), Span(19,20,List(10),competitors,company,false), Span(17,18,List(11),committee,committee,false), Span(12,13,List(12),funds,fund,false), Span(10,11,List(13),promised,promise-01,false), Span(4,5,List(14),it,it,false)),Map(2 -> gather-01, 5 -> conference, 12 -> fund, 8 -> sport, 7 -> and, 1 -> before, 4 -> much, 11 -> committee, 14 -> it, 6 -> another, 0 -> year, 9 -> every, 3 -> large, 10 -> company, 13 -> promise-01),Map(e -> every, b -> before, s -> sport, m -> much, p -> promise-01, y -> year, g -> gather-01, a -> another, c3 -> committee, i -> it, a2 -> and, c -> conference, l -> large, f -> fund, c2 -> company))),[Ljava.lang.String;@6cea7862,Annotation([Ljava.lang.String;@1585a1cb,[Ljava.lang.String;@78412176,[Ljava.lang.String;@7bfc07a7),Annotation([Ljava.lang.String;@5f5aa488,[Ljava.lang.String;@37e80da0,[Ledu.cmu.lti.nlp.amr.Dependency;@63d6a00c),Annotation([Ljava.lang.String;@1fa5a709,[Ljava.lang.String;@3479501a,[Ljava.lang.String;@879f5e0),Annotation([Ljava.lang.String;@7efd4978,[Ljava.lang.String;@26e2a66a,[Ledu.cmu.lti.nlp.amr.Entity;@6a1b8d17))
AMR:
(a2 / and, op, b / before)
(a2 / and, op, c / conference)
(a2 / and, op, c3 / committee)
(a2 / and, op, p / promise-01)
(a2 / and, op, s / sport)
(c / conference, mod, a / another)
(c2 / company, source, a2 / and)
(g / gather-01, ARG1, y / year)
(g / gather-01, mod, l / large)
(g / gather-01, time, b / before)
(p / promise-01, ARG0, m / much)
(p / promise-01, ARG1, i / it)
(p / promise-01, ARG2, f / fund)
(s / sport, mod, e / every)

Decoded in 159,237 microseconds
Sentence: he had just juggled the ball in front of the stretford end and promised to do the trick better than any other first division chairman

Spans:
Span 12-13:  and => and
Span 20-21:  any => any
Span 5-6:  ball => ball
Span 24-25:  chairman => (have-org-role-91 :ARG2 chairman)
Span 23-24:  division => division
Span 7-8:  front => front
Span 0-1:  he => he
Span 2-3:  just => just
Span 21-22:  other => other
Span 13-14:  promised => promise-01
Span 17-18:  trick => trick

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),chairman,(have-org-role-91 :ARG2 chairman),false), Span(23,24,List(2),division,division,false), Span(21,22,List(3),other,other,false), Span(20,21,List(4),any,any,false), Span(17,18,List(5),trick,trick,false), Span(13,14,List(6),promised,promise-01,false), Span(12,13,List(7),and,and,false), Span(7,8,List(8),front,front,false), Span(5,6,List(9),ball,ball,false), Span(2,3,List(10),just,just,false), Span(0,1,List(11),he,he,false)),Map(2 -> division, 5 -> trick, 8 -> front, 7 -> and, 1 -> chairman, 11 -> he, 4 -> any, 6 -> promise-01, 9 -> ball, 0 -> have-org-role-91, 10 -> just, 3 -> other),Map(h -> have-org-role-91, h2 -> he, b -> ball, t -> trick, j -> just, d -> division, p -> promise-01, a -> any, a2 -> and, c -> chairman, f -> front, o -> other))),[Ljava.lang.String;@3fc3f8fd,Annotation([Ljava.lang.String;@5b0fcabf,[Ljava.lang.String;@69c7f04d,[Ljava.lang.String;@4571857c),Annotation([Ljava.lang.String;@1ff2b382,[Ljava.lang.String;@76e72c30,[Ledu.cmu.lti.nlp.amr.Dependency;@4306404c),Annotation([Ljava.lang.String;@4f675ff4,[Ljava.lang.String;@bccb4e6,[Ljava.lang.String;@2c786e17),Annotation([Ljava.lang.String;@1683bed0,[Ljava.lang.String;@2364553c,[Ledu.cmu.lti.nlp.amr.Entity;@1017e84b))
AMR:
(a2 / and, op, b / ball)
(a2 / and, op, p / promise-01)
(b / ball, location, f / front)
(c / chairman, mod, a / any)
(h / have-org-role-91, ARG0, h2 / he)
(h / have-org-role-91, ARG1, d / division)
(h / have-org-role-91, ARG2, c / chairman)
(j / just, op, h / have-org-role-91)
(o / other, mod, a / any)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, t / trick)

Decoded in 143,248 microseconds
Sentence: put on to the defensive by sustained opposition attacks mr haughey agreed that calling another election would be a doomsday solution but after being berated by deputies for his anticoalition stance he promised as many discussions as possible

Spans:
Span 22-23:  after => after
Span 11-12:  agreed => agree-01
Span 14-15:  another => another
Span 8-9:  attacks => attack-01
Span 21-22:  but => contrast-01
Span 4-5:  defensive => defensive
Span 26-27:  deputies => (have-org-role-91 :ARG2 deputy)
Span 35-36:  discussions => discuss-01
Span 19-20:  doomsday => doomsday
Span 15-16:  election => elect-01
Span 31-32:  he => he
Span 34-35:  many => many
Span 7-8:  opposition => oppose-01
Span 37-38:  possible => possible
Span 32-33:  promised => promise-01
Span 20-21:  solution => solution
Span 30-31:  stance => stance
Span 6-7:  sustained => sustain-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),possible,possible,false), Span(35,36,List(1),discussions,discuss-01,false), Span(34,35,List(2),many,many,false), Span(32,33,List(3),promised,promise-01,false), Span(31,32,List(4),he,he,false), Span(30,31,List(5),stance,stance,false), Span(26,27,List(7, 6),deputies,(have-org-role-91 :ARG2 deputy),false), Span(22,23,List(8),after,after,false), Span(21,22,List(9),but,contrast-01,false), Span(20,21,List(10),solution,solution,false), Span(19,20,List(11),doomsday,doomsday,false), Span(15,16,List(12),election,elect-01,false), Span(14,15,List(13),another,another,false), Span(11,12,List(14),agreed,agree-01,false), Span(8,9,List(15),attacks,attack-01,false), Span(7,8,List(16),opposition,oppose-01,false), Span(6,7,List(17),sustained,sustain-01,false), Span(4,5,List(18),defensive,defensive,false)),Map(2 -> many, 5 -> stance, 12 -> elect-01, 15 -> attack-01, 8 -> after, 18 -> defensive, 7 -> deputy, 17 -> sustain-01, 1 -> discuss-01, 4 -> he, 11 -> doomsday, 14 -> agree-01, 6 -> have-org-role-91, 0 -> possible, 9 -> contrast-01, 16 -> oppose-01, 3 -> promise-01, 10 -> solution, 13 -> another),Map(e -> elect-01, h -> he, h2 -> have-org-role-91, s2 -> solution, d3 -> doomsday, p2 -> promise-01, a3 -> agree-01, s -> stance, d -> discuss-01, m -> many, p -> possible, a -> after, d2 -> deputy, a2 -> another, s3 -> sustain-01, c -> contrast-01, d4 -> defensive, o -> oppose-01, a4 -> attack-01))),[Ljava.lang.String;@11939c2e,Annotation([Ljava.lang.String;@71f29905,[Ljava.lang.String;@6e1c51b4,[Ljava.lang.String;@53838e6),Annotation([Ljava.lang.String;@2e1f86b7,[Ljava.lang.String;@17c57009,[Ledu.cmu.lti.nlp.amr.Dependency;@233e6b10),Annotation([Ljava.lang.String;@56e6f983,[Ljava.lang.String;@56073407,[Ljava.lang.String;@72e8e3b0),Annotation([Ljava.lang.String;@17bc72c0,[Ljava.lang.String;@5511a76c,[Ledu.cmu.lti.nlp.amr.Entity;@7a06cf15))
AMR:
(a3 / agree-01, ARG1, s2 / solution)
(c / contrast-01, ARG1, s2 / solution)
(c / contrast-01, ARG2, p2 / promise-01)
(d / discuss-01, quant, m / many)
(d4 / defensive, prep-with, a4 / attack-01)
(e / elect-01, ARG1, a3 / agree-01)
(e / elect-01, mod, a2 / another)
(h2 / have-org-role-91, ARG1, s / stance)
(h2 / have-org-role-91, ARG2, d2 / deputy)
(o / oppose-01, ARG0, s / stance)
(o / oppose-01, ARG1, a4 / attack-01)
(p / possible, domain, a4 / attack-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, s / stance)
(p2 / promise-01, purpose, d / discuss-01)
(p2 / promise-01, time, a / after)
(s2 / solution, mod, d3 / doomsday)
(s3 / sustain-01, ARG1, a4 / attack-01)

Decoded in 412,386 microseconds
Sentence: she promised to telephone imber as soon as there was any news at all

Spans:
Span 13-14:  all => all
Span 10-11:  any => any
Span 11-12:  news => news
Span 1-2:  promised => promise-01
Span 0-1:  she => she
Span 6-7:  soon => soon
Span 3-4:  telephone => telephone-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),all,all,false), Span(11,12,List(1),news,news,false), Span(10,11,List(2),any,any,false), Span(6,7,List(3),soon,soon,false), Span(3,4,List(4),telephone,telephone-01,false), Span(1,2,List(5),promised,promise-01,false), Span(0,1,List(6),she,she,false)),Map(2 -> any, 5 -> promise-01, 1 -> news, 4 -> telephone-01, 6 -> she, 0 -> all, 3 -> soon),Map(n -> news, s2 -> she, t -> telephone-01, s -> soon, p -> promise-01, a -> all, a2 -> any))),[Ljava.lang.String;@5505aa49,Annotation([Ljava.lang.String;@66eeca3a,[Ljava.lang.String;@471edaa1,[Ljava.lang.String;@3aa3a481),Annotation([Ljava.lang.String;@4d852f3a,[Ljava.lang.String;@62dfb098,[Ledu.cmu.lti.nlp.amr.Dependency;@4bc2fdde),Annotation([Ljava.lang.String;@6ea920ad,[Ljava.lang.String;@21a0769d,[Ljava.lang.String;@2dcb4eaa),Annotation([Ljava.lang.String;@7e999262,[Ljava.lang.String;@1459a0dd,[Ledu.cmu.lti.nlp.amr.Entity;@850179b))
AMR:
(n / news, prep-at, a / all)
(n / news, time, s / soon)
(p / promise-01, ARG2, t / telephone-01)
(t / telephone-01, ARG0, s2 / she)
(t / telephone-01, ARG1, a2 / any)
(t / telephone-01, time, s / soon)

Decoded in 21,339 microseconds
Sentence: you can have it all we were told even eternal life was promised

Spans:
Span 4-5:  all => all
Span 1-2:  can => possible
Span 9-10:  eternal => eternal
Span 3-4:  it => it
Span 10-11:  life => life
Span 12-13:  promised => promise-01
Span 7-8:  told => tell-01
Span 5-6:  we => we
Span 0-1:  you => you

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),promised,promise-01,false), Span(10,11,List(1),life,life,false), Span(9,10,List(2),eternal,eternal,false), Span(7,8,List(3),told,tell-01,false), Span(5,6,List(4),we,we,false), Span(4,5,List(5),all,all,false), Span(3,4,List(6),it,it,false), Span(1,2,List(7),can,possible,false), Span(0,1,List(8),you,you,false)),Map(2 -> eternal, 5 -> all, 8 -> you, 7 -> possible, 1 -> life, 4 -> we, 6 -> it, 0 -> promise-01, 3 -> tell-01),Map(w -> we, e -> eternal, t -> tell-01, p2 -> possible, y -> you, p -> promise-01, a -> all, i -> it, l -> life))),[Ljava.lang.String;@423dc560,Annotation([Ljava.lang.String;@65694399,[Ljava.lang.String;@61d525d2,[Ljava.lang.String;@70a6302b),Annotation([Ljava.lang.String;@2ea490d4,[Ljava.lang.String;@36206638,[Ledu.cmu.lti.nlp.amr.Dependency;@917024b),Annotation([Ljava.lang.String;@45978e96,[Ljava.lang.String;@61123d8b,[Ljava.lang.String;@7486a276),Annotation([Ljava.lang.String;@33142cbe,[Ljava.lang.String;@71858824,[Ledu.cmu.lti.nlp.amr.Entity;@75ad2db5))
AMR:
(i / it, quant, a / all)
(l / life, mod, e / eternal)
(p / promise-01, ARG0, p2 / possible)
(p / promise-01, ARG1, l / life)
(t / tell-01, ARG0, y / you)
(t / tell-01, ARG1, i / it)
(t / tell-01, ARG2, w / we)
(t / tell-01, purpose, p / promise-01)

Decoded in 214,025 microseconds
Sentence: we live in a terraced house with a fairly long narrow garden and the children say that they will promise to take the new dog on walks at least every day

Spans:
Span 12-13:  and => and
Span 14-15:  children => child
Span 30-31:  day => day
Span 24-25:  dog => dog
Span 29-30:  every => every
Span 8-9:  fairly => fair
Span 11-12:  garden => garden
Span 5-6:  house => house
Span 1-2:  live => live-01
Span 10-11:  narrow => narrow-01
Span 23-24:  new => new
Span 19-20:  promise => promise-01
Span 15-16:  say => say-01
Span 17-18:  they => they
Span 26-27:  walks => walk-01
Span 0-1:  we => we

Langrangian relaxation converged after 66 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),day,day,false), Span(29,30,List(1),every,every,false), Span(26,27,List(2),walks,walk-01,false), Span(24,25,List(3),dog,dog,false), Span(23,24,List(4),new,new,false), Span(19,20,List(5),promise,promise-01,false), Span(17,18,List(6),they,they,false), Span(15,16,List(7),say,say-01,false), Span(14,15,List(8),children,child,false), Span(12,13,List(9),and,and,false), Span(11,12,List(10),garden,garden,false), Span(10,11,List(11),narrow,narrow-01,false), Span(8,9,List(12),fairly,fair,false), Span(5,6,List(13),house,house,false), Span(1,2,List(14),live,live-01,false), Span(0,1,List(15),we,we,false)),Map(2 -> walk-01, 5 -> promise-01, 12 -> fair, 15 -> we, 8 -> child, 7 -> say-01, 1 -> every, 4 -> new, 11 -> narrow-01, 14 -> live-01, 6 -> they, 0 -> day, 9 -> and, 3 -> dog, 10 -> garden, 13 -> house),Map(e -> every, w -> walk-01, n -> new, h -> house, t -> they, s -> say-01, d -> day, p -> promise-01, g -> garden, a -> and, d2 -> dog, w2 -> we, c -> child, l -> live-01, f -> fair, n2 -> narrow-01))),[Ljava.lang.String;@7fcf1934,Annotation([Ljava.lang.String;@757fe679,[Ljava.lang.String;@1ff44e33,[Ljava.lang.String;@603a06a8),Annotation([Ljava.lang.String;@18b30f3,[Ljava.lang.String;@593aa24f,[Ledu.cmu.lti.nlp.amr.Dependency;@18761e4d),Annotation([Ljava.lang.String;@72bf5dc6,[Ljava.lang.String;@71a5ad04,[Ljava.lang.String;@34021be6),Annotation([Ljava.lang.String;@7675b3b6,[Ljava.lang.String;@2969ae7c,[Ledu.cmu.lti.nlp.amr.Entity;@593e6421))
AMR:
(a / and, op, g / garden)
(a / and, op, s / say-01)
(d / day, mod, e / every)
(h / house, poss, g / garden)
(l / live-01, ARG0, w2 / we)
(l / live-01, ARG1, n / new)
(l / live-01, location, h / house)
(n2 / narrow-01, ARG0, f / fair)
(n2 / narrow-01, ARG1, g / garden)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, d2 / dog)
(s / say-01, ARG0, c / child)
(s / say-01, ARG1, p / promise-01)
(w / walk-01, ARG0, d2 / dog)
(w / walk-01, time, d / day)

Decoded in 844,464 microseconds
Sentence: answering a suggestion that the president mr ranasinghe premadasa may face criticism for not upholding the freedom of the press as promised in his election manifesto mr wijeratne replied who cares what the critics say when subversives are trying to topple the government

Spans:
Span 0-1:  answering => answer-01
Span 30-31:  cares => care-01
Span 11-12:  criticism => criticize-01
Span 33-34:  critics => critic
Span 24-25:  election => elect-01
Span 10-11:  face => face-01
Span 16-17:  freedom => free-41
Span 9-10:  may => (date-entity :month 5)
Span 5-6:  president => (have-org-role-91 :ARG2 president)
Span 19-20:  press => press
Span 21-22:  promised => promise-01
Span 28-29:  replied => reply-01
Span 34-35:  say => say-01
Span 2-3:  suggestion => (thing :ARG1-of suggest-01)
Span 40-41:  topple => topple-01
Span 38-39:  trying => try-01
Span 14-15:  upholding => uphold-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),topple,topple-01,false), Span(38,39,List(1),trying,try-01,false), Span(34,35,List(2),say,say-01,false), Span(33,34,List(3),critics,critic,false), Span(30,31,List(4),cares,care-01,false), Span(28,29,List(5),replied,reply-01,false), Span(24,25,List(6),election,elect-01,false), Span(21,22,List(7),promised,promise-01,false), Span(19,20,List(8),press,press,false), Span(16,17,List(9),freedom,free-41,false), Span(14,15,List(10),upholding,uphold-01,false), Span(11,12,List(11),criticism,criticize-01,false), Span(10,11,List(12),face,face-01,false), Span(9,10,List(14, 13),may,(date-entity :month 5),false), Span(5,6,List(16, 15),president,(have-org-role-91 :ARG2 president),false), Span(2,3,List(18, 17),suggestion,(thing :ARG1-of suggest-01),false), Span(0,1,List(19),answering,answer-01,false)),Map(2 -> say-01, 5 -> reply-01, 12 -> face-01, 15 -> have-org-role-91, 8 -> press, 18 -> suggest-01, 7 -> promise-01, 17 -> thing, 1 -> try-01, 4 -> care-01, 11 -> criticize-01, 14 -> 5, 6 -> elect-01, 0 -> topple-01, 9 -> free-41, 16 -> president, 19 -> answer-01, 3 -> critic, 10 -> uphold-01, 13 -> date-entity),Map(e -> elect-01, h -> have-org-role-91, s2 -> suggest-01, 5 -> 5, t -> topple-01, p2 -> press, s -> say-01, d -> date-entity, t3 -> thing, p -> promise-01, a -> answer-01, c3 -> criticize-01, t2 -> try-01, r -> reply-01, c -> critic, u -> uphold-01, f2 -> face-01, f -> free-41, p3 -> president, c2 -> care-01))),[Ljava.lang.String;@482ee6c8,Annotation([Ljava.lang.String;@7f31797d,[Ljava.lang.String;@91f3ec8,[Ljava.lang.String;@6252c125),Annotation([Ljava.lang.String;@27069691,[Ljava.lang.String;@21871d9b,[Ledu.cmu.lti.nlp.amr.Dependency;@2da8bc4f),Annotation([Ljava.lang.String;@20e2fdf4,[Ljava.lang.String;@168eaf0a,[Ljava.lang.String;@7185c517),Annotation([Ljava.lang.String;@54ea33b,[Ljava.lang.String;@6dbe7935,[Ledu.cmu.lti.nlp.amr.Entity;@7407bedc))
AMR:
(a / answer-01, ARG1, t3 / thing)
(c3 / criticize-01, ARG2, u / uphold-01)
(d / date-entity, domain, f2 / face-01)
(d / date-entity, month, 5 / 5)
(e / elect-01, ARG1, f / free-41)
(f / free-41, ARG1, p2 / press)
(f2 / face-01, ARG0, t3 / thing)
(f2 / face-01, ARG1, c3 / criticize-01)
(h / have-org-role-91, ARG2, p3 / president)
(p / promise-01, ARG0, p2 / press)
(r / reply-01, ARG0, p / promise-01)
(r / reply-01, ARG1, c2 / care-01)
(s / say-01, ARG0, c / critic)
(s / say-01, ARG1, t / topple-01)
(s / say-01, ARG2, f2 / face-01)
(s2 / suggest-01, ARG1, t3 / thing)
(s2 / suggest-01, time, h / have-org-role-91)
(t2 / try-01, ARG1, t / topple-01)
(u / uphold-01, ARG1, f / free-41)

Decoded in 727,561 microseconds
Sentence: walking into what promises to be the last room of the show you encounter a cornucopian tradefair display of products made by a variety of fih subsidiaries including harkwell adhesive labels they do the labels for polyclens brush cleaner simply rinses paint away under the tap harkwell cartons the st bernard underwired top lace cup bra and pendy plastic products paco rabanne coathangers

Spans:
Span 56-57:  and => and
Span 42-43:  away => away
Span 37-38:  brush => brush
Span 38-39:  cleaner => clean-01
Span 54-55:  cup => cup
Span 17-18:  display => display-01
Span 13-14:  encounter => encounter-01
Span 34-35:  labels => label-01
Span 30-31:  labels => label-01
Span 53-54:  lace => lace
Span 7-8:  last => last
Span 41-42:  paint => paint
Span 58-59:  plastic => plastic
Span 59-60:  products => product
Span 19-20:  products => product
Span 3-4:  promises => promise-01
Span 8-9:  room => room
Span 11-12:  show => show-01
Span 39-40:  simply => simple
Span 26-27:  subsidiaries => subsidiary
Span 45-46:  tap => tap-03
Span 31-32:  they => they
Span 52-53:  top => top
Span 23-24:  variety => variety
Span 0-1:  walking => walk-01
Span 12-13:  you => you

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(59,60,List(0),products,product,false), Span(58,59,List(1),plastic,plastic,false), Span(56,57,List(2),and,and,false), Span(54,55,List(3),cup,cup,false), Span(53,54,List(4),lace,lace,false), Span(52,53,List(5),top,top,false), Span(45,46,List(6),tap,tap-03,false), Span(42,43,List(7),away,away,false), Span(41,42,List(8),paint,paint,false), Span(39,40,List(9),simply,simple,false), Span(38,39,List(10),cleaner,clean-01,false), Span(37,38,List(11),brush,brush,false), Span(34,35,List(12),labels,label-01,false), Span(31,32,List(13),they,they,false), Span(30,31,List(14),labels,label-01,false), Span(26,27,List(15),subsidiaries,subsidiary,false), Span(23,24,List(16),variety,variety,false), Span(19,20,List(17),products,product,false), Span(17,18,List(18),display,display-01,false), Span(13,14,List(19),encounter,encounter-01,false), Span(12,13,List(20),you,you,false), Span(11,12,List(21),show,show-01,false), Span(8,9,List(22),room,room,false), Span(7,8,List(23),last,last,false), Span(3,4,List(24),promises,promise-01,false), Span(0,1,List(25),walking,walk-01,false)),Map(2 -> and, 5 -> top, 12 -> label-01, 8 -> paint, 15 -> subsidiary, 21 -> show-01, 18 -> display-01, 24 -> promise-01, 7 -> away, 1 -> plastic, 17 -> product, 23 -> last, 4 -> lace, 11 -> brush, 14 -> label-01, 20 -> you, 6 -> tap-03, 9 -> simple, 0 -> product, 22 -> room, 16 -> variety, 19 -> encounter-01, 10 -> clean-01, 3 -> cup, 25 -> walk-01, 13 -> they),Map(e -> encounter-01, w -> walk-01, s2 -> subsidiary, p5 -> promise-01, t -> top, b -> brush, p2 -> plastic, l3 -> label-01, s -> simple, v -> variety, d -> display-01, t3 -> they, y -> you, p -> product, a -> and, p4 -> product, t2 -> tap-03, l2 -> label-01, a2 -> away, r -> room, c -> cup, s3 -> show-01, l -> lace, p3 -> paint, c2 -> clean-01, l4 -> last))),[Ljava.lang.String;@57b3af58,Annotation([Ljava.lang.String;@55bce763,[Ljava.lang.String;@64fb408e,[Ljava.lang.String;@2b4b5e6d),Annotation([Ljava.lang.String;@61245c4f,[Ljava.lang.String;@1a28785c,[Ledu.cmu.lti.nlp.amr.Dependency;@56f5ed6e),Annotation([Ljava.lang.String;@2bb6fd5c,[Ljava.lang.String;@7ab3b96f,[Ljava.lang.String;@2d536558),Annotation([Ljava.lang.String;@3e228ba7,[Ljava.lang.String;@4dfea0cf,[Ledu.cmu.lti.nlp.amr.Entity;@7ef9e0a))
AMR:
(c / cup, mod, l / lace)
(c2 / clean-01, ARG0, p / product)
(c2 / clean-01, ARG1, b / brush)
(d / display-01, ARG0, y / you)
(d / display-01, ARG1, p4 / product)
(e / encounter-01, ARG0, y / you)
(e / encounter-01, ARG1, s3 / show-01)
(l / lace, op, l3 / label-01)
(l2 / label-01, ARG0, t3 / they)
(l2 / label-01, ARG1, c2 / clean-01)
(l2 / label-01, mod, s3 / show-01)
(l2 / label-01, prep-in, p3 / paint)
(l2 / label-01, time, s / simple)
(l3 / label-01, ARG0, t3 / they)
(p / product, mod, p2 / plastic)
(p3 / paint, direction, a2 / away)
(p5 / promise-01, ARG1, r / room)
(r / room, mod, l4 / last)
(r / room, purpose, s3 / show-01)
(s2 / subsidiary, mod, s3 / show-01)
(s2 / subsidiary, mod, v / variety)
(t / top, op, l3 / label-01)
(t2 / tap-03, ARG1, v / variety)
(w / walk-01, ARG0, a / and)
(w / walk-01, ARG1, p5 / promise-01)

Decoded in 1,095,162 microseconds
Sentence: free elections are promised by april

Spans:
Span 5-6:  april => (date-entity :month 4)
Span 1-2:  elections => elect-01
Span 0-1:  free => free-41
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(1, 0),april,(date-entity :month 4),false), Span(3,4,List(2),promised,promise-01,false), Span(1,2,List(3),elections,elect-01,false), Span(0,1,List(4),free,free-41,false)),Map(2 -> promise-01, 1 -> 4, 4 -> free-41, 0 -> date-entity, 3 -> elect-01),Map(e -> elect-01, d -> date-entity, p -> promise-01, 4 -> 4, f -> free-41))),[Ljava.lang.String;@470a698,Annotation([Ljava.lang.String;@7fc9476e,[Ljava.lang.String;@7770c84c,[Ljava.lang.String;@d6e32d7),Annotation([Ljava.lang.String;@3dcbc824,[Ljava.lang.String;@dc0d32e,[Ledu.cmu.lti.nlp.amr.Dependency;@6e68780f),Annotation([Ljava.lang.String;@ca2596a,[Ljava.lang.String;@769c44a0,[Ljava.lang.String;@d5da136),Annotation([Ljava.lang.String;@7e02e714,[Ljava.lang.String;@709112ad,[Ledu.cmu.lti.nlp.amr.Entity;@44615597))
AMR:
(d / date-entity, month, 4 / 4)
(f / free-41, ARG1, e / elect-01)
(p / promise-01, ARG1, e / elect-01)
(p / promise-01, time, d / date-entity)

Decoded in 11,057 microseconds
Sentence: the choice for the electorate of 82 million was commendably clear on the centre right fernando collor de mello a charismatic sprig of the elite oligarchy committed to opening up the economy reducing state intervention and fighting corruption on the left luis inacio lula da silva a bearded trade unionist promising land reform a fairer distribution of wealth and strong central planning

Spans:
Span 6-7:  82 => 82
Span 58-59:  and => and
Span 35-36:  and => and
Span 47-48:  bearded => beard-02
Span 60-61:  central => central
Span 20-21:  charismatic => charisma
Span 10-11:  clear => clear
Span 26-27:  committed => commit-01
Span 37-38:  corruption => corrupt-01
Span 55-56:  distribution => distribute-01
Span 31-32:  economy => economy
Span 4-5:  electorate => electorate
Span 24-25:  elite => elite
Span 54-55:  fairer => fair
Span 36-37:  fighting => fight-01
Span 34-35:  intervention => intervene-01
Span 51-52:  land => land
Span 25-26:  oligarchy => oligarchy
Span 28-29:  opening => open-01
Span 61-62:  planning => plan-01
Span 50-51:  promising => promise-01
Span 32-33:  reducing => reduce-01
Span 52-53:  reform => reform-01
Span 33-34:  state => state
Span 59-60:  strong => strong
Span 48-49:  trade => trade-01
Span 49-50:  unionist => unionist
Span 57-58:  wealth => wealth

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(61,62,List(0),planning,plan-01,false), Span(60,61,List(1),central,central,false), Span(59,60,List(2),strong,strong,false), Span(58,59,List(3),and,and,false), Span(57,58,List(4),wealth,wealth,false), Span(55,56,List(5),distribution,distribute-01,false), Span(54,55,List(6),fairer,fair,false), Span(52,53,List(7),reform,reform-01,false), Span(51,52,List(8),land,land,false), Span(50,51,List(9),promising,promise-01,false), Span(49,50,List(10),unionist,unionist,false), Span(48,49,List(11),trade,trade-01,false), Span(47,48,List(12),bearded,beard-02,false), Span(37,38,List(13),corruption,corrupt-01,false), Span(36,37,List(14),fighting,fight-01,false), Span(35,36,List(15),and,and,false), Span(34,35,List(16),intervention,intervene-01,false), Span(33,34,List(17),state,state,false), Span(32,33,List(18),reducing,reduce-01,false), Span(31,32,List(19),economy,economy,false), Span(28,29,List(20),opening,open-01,false), Span(26,27,List(21),committed,commit-01,false), Span(25,26,List(22),oligarchy,oligarchy,false), Span(24,25,List(23),elite,elite,false), Span(20,21,List(24),charismatic,charisma,false), Span(10,11,List(25),clear,clear,false), Span(6,7,List(26),82,82,false), Span(4,5,List(27),electorate,electorate,false)),Map(2 -> strong, 5 -> distribute-01, 27 -> electorate, 12 -> beard-02, 8 -> land, 15 -> and, 21 -> commit-01, 18 -> reduce-01, 24 -> charisma, 7 -> reform-01, 1 -> central, 17 -> state, 23 -> elite, 26 -> 82, 4 -> wealth, 11 -> trade-01, 14 -> fight-01, 20 -> open-01, 6 -> fair, 9 -> promise-01, 0 -> plan-01, 22 -> oligarchy, 16 -> intervene-01, 19 -> economy, 10 -> unionist, 3 -> and, 25 -> clear, 13 -> corrupt-01),Map(e -> economy, w -> wealth, s2 -> state, t -> trade-01, b -> beard-02, 8 -> 82, p2 -> promise-01, e2 -> elite, c4 -> charisma, s -> strong, d -> distribute-01, r2 -> reduce-01, p -> plan-01, a -> and, c3 -> commit-01, o2 -> oligarchy, r -> reform-01, a2 -> and, i -> intervene-01, c -> central, f2 -> fight-01, u -> unionist, l -> land, f -> fair, o -> open-01, e3 -> electorate, c2 -> corrupt-01, c5 -> clear))),[Ljava.lang.String;@723e6611,Annotation([Ljava.lang.String;@5e9f20af,[Ljava.lang.String;@211af1b1,[Ljava.lang.String;@6ff1ac71),Annotation([Ljava.lang.String;@63706821,[Ljava.lang.String;@68c48187,[Ledu.cmu.lti.nlp.amr.Dependency;@3d13fbcd),Annotation([Ljava.lang.String;@6af86f0e,[Ljava.lang.String;@5c4336ff,[Ljava.lang.String;@40cfceab),Annotation([Ljava.lang.String;@b095dcb,[Ljava.lang.String;@13ecc016,[Ledu.cmu.lti.nlp.amr.Entity;@1c36ee92))
AMR:
(a / and, op, p / plan-01)
(a / and, op, w / wealth)
(a2 / and, op, o / open-01)
(a2 / and, op, u / unionist)
(b / beard-02, ARG1, u / unionist)
(c3 / commit-01, ARG0, e3 / electorate)
(c3 / commit-01, ARG1, o2 / oligarchy)
(c3 / commit-01, ARG2, o / open-01)
(c5 / clear, op, c3 / commit-01)
(d / distribute-01, ARG0, a / and)
(d / distribute-01, mod, f / fair)
(f2 / fight-01, ARG0, a2 / and)
(f2 / fight-01, ARG1, c2 / corrupt-01)
(i / intervene-01, ARG0, s2 / state)
(i / intervene-01, ARG1, c4 / charisma)
(o / open-01, ARG0, 8 / 82)
(o / open-01, ARG1, e / economy)
(o2 / oligarchy, mod, e2 / elite)
(p / plan-01, ARG1, a2 / and)
(p / plan-01, mod, c / central)
(p / plan-01, mod, s / strong)
(p2 / promise-01, ARG1, d / distribute-01)
(p2 / promise-01, ARG2, l / land)
(r / reform-01, ARG1, l / land)
(r2 / reduce-01, ARG0, e / economy)
(r2 / reduce-01, ARG1, i / intervene-01)
(u / unionist, mod, t / trade-01)

Decoded in 775,344 microseconds
Sentence: 6 per cent was far too high for a conservative government she promised it would be brought down again

Spans:
Span 0-1:  6 => 6
Span 18-19:  again => again
Span 2-3:  cent => (monetary-quantity :unit cent)
Span 9-10:  conservative => conservative
Span 17-18:  down => down
Span 4-5:  far => far
Span 6-7:  high => high
Span 13-14:  it => it
Span 12-13:  promised => promise-01
Span 11-12:  she => she
Span 5-6:  too => too

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),again,again,false), Span(17,18,List(1),down,down,false), Span(13,14,List(2),it,it,false), Span(12,13,List(3),promised,promise-01,false), Span(11,12,List(4),she,she,false), Span(9,10,List(5),conservative,conservative,false), Span(6,7,List(6),high,high,false), Span(5,6,List(7),too,too,false), Span(4,5,List(8),far,far,false), Span(2,3,List(10, 9),cent,(monetary-quantity :unit cent),false), Span(0,1,List(11),6,6,false)),Map(2 -> it, 5 -> conservative, 8 -> far, 7 -> too, 1 -> down, 11 -> 6, 4 -> she, 6 -> high, 9 -> monetary-quantity, 0 -> again, 10 -> cent, 3 -> promise-01),Map(h -> high, t -> too, s -> she, m -> monetary-quantity, d -> down, p -> promise-01, a -> again, i -> it, 6 -> 6, c -> conservative, f -> far, c2 -> cent))),[Ljava.lang.String;@5a68c1b6,Annotation([Ljava.lang.String;@1385c219,[Ljava.lang.String;@328a0152,[Ljava.lang.String;@25cc86a),Annotation([Ljava.lang.String;@1969a85c,[Ljava.lang.String;@67ac3d0c,[Ledu.cmu.lti.nlp.amr.Dependency;@5cdc1400),Annotation([Ljava.lang.String;@74a53ba0,[Ljava.lang.String;@bedc134,[Ljava.lang.String;@2627430a),Annotation([Ljava.lang.String;@5ba25917,[Ljava.lang.String;@7f872400,[Ledu.cmu.lti.nlp.amr.Entity;@14cbd69))
AMR:
(6 / 6, poss, c / conservative)
(d / down, op, a / again)
(d / down, op, p / promise-01)
(h / high, degree, t / too)
(h / high, domain, m / monetary-quantity)
(m / monetary-quantity, unit, c2 / cent)
(p / promise-01, ARG0, s / she)
(p / promise-01, ARG1, 6 / 6)
(p / promise-01, ARG2, i / it)
(p / promise-01, location, m / monetary-quantity)
(t / too, op, f / far)

Decoded in 132,863 microseconds
Sentence: new research at the university of oxford now promises to overcome this problem

NER Entity: (organization :name (name :op "university" :op "of" :op "oxford"))
Spans:
Span 0-1:  new => new
Span 7-8:  now => now
Span 10-11:  overcome => overcome-01
Span 12-13:  problem => problem
Span 8-9:  promises => promise-01
Span 1-2:  research => research-01
Span 11-12:  this => this
Span 4-7:  university of oxford => (organization :name (name :op "university" :op "of" :op "oxford"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),problem,problem,false), Span(11,12,List(1),this,this,false), Span(10,11,List(2),overcome,overcome-01,false), Span(8,9,List(3),promises,promise-01,false), Span(7,8,List(4),now,now,false), Span(4,7,List(9, 8, 7, 6, 5),university of oxford,(organization :name (name :op "university" :op "of" :op "oxford")),false), Span(1,2,List(10),research,research-01,false), Span(0,1,List(11),new,new,false)),Map(2 -> overcome-01, 5 -> organization, 8 -> "of", 7 -> "university", 1 -> this, 11 -> new, 4 -> now, 6 -> name, 9 -> "oxford", 0 -> problem, 10 -> research-01, 3 -> promise-01),Map(n -> now, t -> this, p2 -> promise-01, p -> problem, n3 -> new, o2 -> organization, r -> research-01, o -> overcome-01, n2 -> name))),[Ljava.lang.String;@55273929,Annotation([Ljava.lang.String;@219de6c,[Ljava.lang.String;@70598587,[Ljava.lang.String;@54d9bb1),Annotation([Ljava.lang.String;@2a28842f,[Ljava.lang.String;@49fe3f48,[Ledu.cmu.lti.nlp.amr.Dependency;@52ecb5eb),Annotation([Ljava.lang.String;@329b81d5,[Ljava.lang.String;@7f68e0e7,[Ljava.lang.String;@3e859f0a),Annotation([Ljava.lang.String;@368c6997,[Ljava.lang.String;@3c68547b,[Ledu.cmu.lti.nlp.amr.Entity;@65827638))
AMR:
(n2 / name, op, "of")
(n2 / name, op, "oxford")
(n2 / name, op, "university")
(o / overcome-01, ARG1, p / problem)
(o2 / organization, name, n2 / name)
(p / problem, mod, t / this)
(p2 / promise-01, ARG0, r / research-01)
(p2 / promise-01, ARG1, o / overcome-01)
(p2 / promise-01, time, n / now)
(r / research-01, ARG1, o2 / organization)
(r / research-01, mod, n3 / new)

Decoded in 30,865 microseconds
Sentence: chancellor kohl had promised to investigate the matter earlier this year

Spans:
Span 8-9:  earlier => early
Span 5-6:  investigate => investigate-01
Span 7-8:  matter => matter
Span 3-4:  promised => promise-01
Span 9-10:  this => this
Span 10-11:  year => year

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),year,year,false), Span(9,10,List(1),this,this,false), Span(8,9,List(2),earlier,early,false), Span(7,8,List(3),matter,matter,false), Span(5,6,List(4),investigate,investigate-01,false), Span(3,4,List(5),promised,promise-01,false)),Map(2 -> early, 5 -> promise-01, 1 -> this, 4 -> investigate-01, 0 -> year, 3 -> matter),Map(e -> early, t -> this, m -> matter, p -> promise-01, y -> year, i -> investigate-01))),[Ljava.lang.String;@581f8a98,Annotation([Ljava.lang.String;@7ec42e5a,[Ljava.lang.String;@1bf57bb,[Ljava.lang.String;@3918b6e2),Annotation([Ljava.lang.String;@58eccb7,[Ljava.lang.String;@6222053a,[Ledu.cmu.lti.nlp.amr.Dependency;@2785552b),Annotation([Ljava.lang.String;@229a8e52,[Ljava.lang.String;@50f5bb3d,[Ljava.lang.String;@34d7cb51),Annotation([Ljava.lang.String;@43654df1,[Ljava.lang.String;@2fe02bc8,[Ledu.cmu.lti.nlp.amr.Entity;@265a7006))
AMR:
(e / early, mod, t / this)
(i / investigate-01, ARG1, m / matter)
(i / investigate-01, time, e / early)
(p / promise-01, ARG1, i / investigate-01)
(y / year, degree, e / early)

Decoded in 17,126 microseconds
Sentence: he promised to stand by asquith and then abandoned him

Spans:
Span 8-9:  abandoned => abandon-01
Span 6-7:  and => and
Span 0-1:  he => he
Span 1-2:  promised => promise-01
Span 7-8:  then => then

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),abandoned,abandon-01,false), Span(7,8,List(1),then,then,false), Span(6,7,List(2),and,and,false), Span(1,2,List(3),promised,promise-01,false), Span(0,1,List(4),he,he,false)),Map(2 -> and, 1 -> then, 4 -> he, 0 -> abandon-01, 3 -> promise-01),Map(h -> he, t -> then, p -> promise-01, a -> abandon-01, a2 -> and))),[Ljava.lang.String;@7b70ad95,Annotation([Ljava.lang.String;@22945083,[Ljava.lang.String;@3731da31,[Ljava.lang.String;@29ebe346),Annotation([Ljava.lang.String;@3d961e2a,[Ljava.lang.String;@4a9676fc,[Ledu.cmu.lti.nlp.amr.Dependency;@5c5dc0a5),Annotation([Ljava.lang.String;@f12c003,[Ljava.lang.String;@17fc0cb0,[Ljava.lang.String;@24a5031d),Annotation([Ljava.lang.String;@4d6f77b6,[Ljava.lang.String;@511c7571,[Ledu.cmu.lti.nlp.amr.Entity;@23627751))
AMR:
(a / abandon-01, time, t / then)
(a2 / and, op, a / abandon-01)
(a2 / and, op, p / promise-01)
(p / promise-01, ARG0, h / he)

Decoded in 12,649 microseconds
Sentence: itll not exactly be standing still when june 16 comes round promised andy

Spans:
Span 8-9:  16 => 16
Span 2-3:  exactly => exact
Span 7-8:  june => (date-entity :month 6)
Span 11-12:  promised => promise-01
Span 10-11:  round => round
Span 5-6:  still => still

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promised,promise-01,false), Span(10,11,List(1),round,round,false), Span(8,9,List(2),16,16,false), Span(7,8,List(4, 3),june,(date-entity :month 6),false), Span(5,6,List(5),still,still,false), Span(2,3,List(6),exactly,exact,false)),Map(2 -> 16, 5 -> still, 1 -> round, 4 -> 6, 6 -> exact, 0 -> promise-01, 3 -> date-entity),Map(e -> exact, s -> still, d -> date-entity, 1 -> 16, p -> promise-01, r -> round, 6 -> 6))),[Ljava.lang.String;@158778fd,Annotation([Ljava.lang.String;@71183515,[Ljava.lang.String;@6c452fb4,[Ljava.lang.String;@323f09f4),Annotation([Ljava.lang.String;@48a68bf1,[Ljava.lang.String;@2e2da07a,[Ledu.cmu.lti.nlp.amr.Dependency;@3582c145),Annotation([Ljava.lang.String;@1b5eb475,[Ljava.lang.String;@66997b5c,[Ljava.lang.String;@667209a3),Annotation([Ljava.lang.String;@48d6e0e0,[Ljava.lang.String;@1345b77c,[Ledu.cmu.lti.nlp.amr.Entity;@461137c6))
AMR:
(d / date-entity, month, 6 / 6)
(e / exact, op, p / promise-01)
(p / promise-01, ARG0, s / still)
(p / promise-01, ARG1, r / round)
(p / promise-01, ARG2, 1 / 16)
(r / round, poss, d / date-entity)

Decoded in 41,014 microseconds
Sentence: three and a half million animals are experimented to death so we promise to try and cut the wastage its more costeffective too

Spans:
Span 15-16:  and => and
Span 1-2:  and => and
Span 5-6:  animals => animal
Span 9-10:  death => die-01
Span 3-4:  half => half
Span 12-13:  promise => promise-01
Span 10-11:  so => so
Span 0-1:  three => 3
Span 22-23:  too => too
Span 14-15:  try => try-01
Span 11-12:  we => we

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),too,too,false), Span(15,16,List(1),and,and,false), Span(14,15,List(2),try,try-01,false), Span(12,13,List(3),promise,promise-01,false), Span(11,12,List(4),we,we,false), Span(10,11,List(5),so,so,false), Span(9,10,List(6),death,die-01,false), Span(5,6,List(7),animals,animal,false), Span(3,4,List(8),half,half,false), Span(1,2,List(9),and,and,false), Span(0,1,List(10),three,3,false)),Map(2 -> try-01, 5 -> so, 8 -> half, 7 -> animal, 1 -> and, 4 -> we, 6 -> die-01, 9 -> and, 0 -> too, 10 -> 3, 3 -> promise-01),Map(w -> we, h -> half, t -> too, a3 -> and, s -> so, d -> die-01, p -> promise-01, a -> and, t2 -> try-01, a2 -> animal, 3 -> 3))),[Ljava.lang.String;@1464cc1a,Annotation([Ljava.lang.String;@6593c96b,[Ljava.lang.String;@498cc3e6,[Ljava.lang.String;@389156c3),Annotation([Ljava.lang.String;@4dd73938,[Ljava.lang.String;@6cedb374,[Ledu.cmu.lti.nlp.amr.Dependency;@69a0bc8a),Annotation([Ljava.lang.String;@37ba3e33,[Ljava.lang.String;@2449a2da,[Ljava.lang.String;@5e62a8d2),Annotation([Ljava.lang.String;@1f39a367,[Ljava.lang.String;@116cf35,[Ledu.cmu.lti.nlp.amr.Entity;@7da122))
AMR:
(a2 / animal, quant, h / half)
(d / die-01, ARG0, 3 / 3)
(d / die-01, ARG1, a3 / and)
(p / promise-01, ARG0, t / too)
(p / promise-01, ARG1, t2 / try-01)
(p / promise-01, ARG2, a / and)
(s / so, op, p / promise-01)
(t2 / try-01, ARG0, w / we)
(t2 / try-01, ARG1, a2 / animal)
(t2 / try-01, ARG3, d / die-01)

Decoded in 97,284 microseconds
Sentence: the tories at the 1979 general election promised that industrial action in essential services would be restricted but a subsequent green paper killed the idea saying that existing legal provisions such as the 1875 conspiracy act had been little used and that workers in most key industries had exercised restraint and pleading difficulties in defining the relevant groups of workers

Spans:
Span 33-34:  1875 => (date-entity :year 1875)
Span 4-5:  1979 => (date-entity :year 1979)
Span 35-36:  act => act-02
Span 10-11:  action => action
Span 50-51:  and => and
Span 40-41:  and => and
Span 17-18:  but => contrast-01
Span 52-53:  difficulties => difficulty
Span 6-7:  election => elect-01
Span 12-13:  essential => essential
Span 48-49:  exercised => exercise-01
Span 27-28:  existing => exist-01
Span 5-6:  general => general
Span 20-21:  green => green
Span 57-58:  groups => group
Span 24-25:  idea => idea
Span 9-10:  industrial => industry
Span 46-47:  industries => industry
Span 45-46:  key => key
Span 22-23:  killed => kill-01
Span 28-29:  legal => legal
Span 38-39:  little => little
Span 44-45:  most => most
Span 21-22:  paper => paper
Span 51-52:  pleading => plead-01
Span 7-8:  promised => promise-01
Span 29-30:  provisions => provision
Span 56-57:  relevant => relevant-41
Span 16-17:  restricted => restrict-01
Span 25-26:  saying => say-01
Span 13-14:  services => service
Span 19-20:  subsequent => subsequent
Span 30-31:  such => such
Span 39-40:  used => use-01
Span 59-60:  workers => (person :ARG0-of work-01)
Span 42-43:  workers => (person :ARG0-of work-01)

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(59,60,List(1, 0),workers,(person :ARG0-of work-01),false), Span(57,58,List(2),groups,group,false), Span(56,57,List(3),relevant,relevant-41,false), Span(52,53,List(4),difficulties,difficulty,false), Span(51,52,List(5),pleading,plead-01,false), Span(50,51,List(6),and,and,false), Span(48,49,List(7),exercised,exercise-01,false), Span(46,47,List(8),industries,industry,false), Span(45,46,List(9),key,key,false), Span(44,45,List(10),most,most,false), Span(42,43,List(12, 11),workers,(person :ARG0-of work-01),false), Span(40,41,List(13),and,and,false), Span(39,40,List(14),used,use-01,false), Span(38,39,List(15),little,little,false), Span(35,36,List(16),act,act-02,false), Span(33,34,List(18, 17),1875,(date-entity :year 1875),false), Span(30,31,List(19),such,such,false), Span(29,30,List(20),provisions,provision,false), Span(28,29,List(21),legal,legal,false), Span(27,28,List(22),existing,exist-01,false), Span(25,26,List(23),saying,say-01,false), Span(24,25,List(24),idea,idea,false), Span(22,23,List(25),killed,kill-01,false), Span(21,22,List(26),paper,paper,false), Span(20,21,List(27),green,green,false), Span(19,20,List(28),subsequent,subsequent,false), Span(17,18,List(29),but,contrast-01,false), Span(16,17,List(30),restricted,restrict-01,false), Span(13,14,List(31),services,service,false), Span(12,13,List(32),essential,essential,false), Span(10,11,List(33),action,action,false), Span(9,10,List(34),industrial,industry,false), Span(7,8,List(35),promised,promise-01,false), Span(6,7,List(36),election,elect-01,false), Span(5,6,List(37),general,general,false), Span(4,5,List(39, 38),1979,(date-entity :year 1979),false)),Map(39 -> 1979, 30 -> restrict-01, 2 -> group, 5 -> plead-01, 33 -> action, 27 -> green, 12 -> work-01, 8 -> industry, 15 -> little, 36 -> elect-01, 21 -> legal, 18 -> 1875, 24 -> idea, 35 -> promise-01, 7 -> exercise-01, 1 -> work-01, 17 -> date-entity, 23 -> say-01, 38 -> date-entity, 26 -> paper, 4 -> difficulty, 11 -> person, 32 -> essential, 14 -> use-01, 29 -> contrast-01, 20 -> provision, 34 -> industry, 28 -> subsequent, 6 -> and, 9 -> key, 0 -> person, 22 -> exist-01, 16 -> act-02, 37 -> general, 19 -> such, 10 -> most, 3 -> relevant-41, 31 -> service, 25 -> kill-01, 13 -> and),Map(e -> exercise-01, w -> work-01, k2 -> kill-01, g3 -> general, p5 -> paper, s2 -> say-01, 12 -> 1979, k -> key, d3 -> date-entity, p2 -> plead-01, e2 -> exist-01, a3 -> act-02, s -> such, s4 -> service, m -> most, d -> difficulty, g2 -> green, 1 -> 1875, i3 -> industry, r2 -> restrict-01, g -> group, p -> person, a -> and, p4 -> provision, e4 -> elect-01, d2 -> date-entity, i2 -> idea, w2 -> work-01, l2 -> legal, i -> industry, r -> relevant-41, a2 -> and, c -> contrast-01, s3 -> subsequent, p6 -> promise-01, u -> use-01, l -> little, e3 -> essential, p3 -> person, a4 -> action))),[Ljava.lang.String;@6dc00fa9,Annotation([Ljava.lang.String;@5c445889,[Ljava.lang.String;@b10b9b2,[Ljava.lang.String;@770f5aca),Annotation([Ljava.lang.String;@1111c0d7,[Ljava.lang.String;@248b6c02,[Ledu.cmu.lti.nlp.amr.Dependency;@3d600a0c),Annotation([Ljava.lang.String;@6c33b94e,[Ljava.lang.String;@37cae761,[Ljava.lang.String;@6a1cade4),Annotation([Ljava.lang.String;@dc8a29,[Ljava.lang.String;@ef28a30,[Ledu.cmu.lti.nlp.amr.Entity;@554e5cfa))
AMR:
(a / and, op, p2 / plead-01)
(a / and, op, u / use-01)
(a2 / and, op, e / exercise-01)
(a2 / and, op, u / use-01)
(a3 / act-02, ARG0, i2 / idea)
(a3 / act-02, ARG1, s / such)
(a4 / action, mod, i3 / industry)
(c / contrast-01, ARG0, s4 / service)
(c / contrast-01, ARG1, k2 / kill-01)
(c / contrast-01, ARG2, r2 / restrict-01)
(d2 / date-entity, year, 1 / 1875)
(d3 / date-entity, year, 12 / 1979)
(e / exercise-01, ARG0, p3 / person)
(e / exercise-01, ARG1, p4 / provision)
(e2 / exist-01, ARG1, p4 / provision)
(e4 / elect-01, mod, g3 / general)
(e4 / elect-01, time, d2 / date-entity)
(e4 / elect-01, time, d3 / date-entity)
(i / industry, mod, k / key)
(k / key, degree, m / most)
(k2 / kill-01, ARG0, p5 / paper)
(k2 / kill-01, ARG1, i2 / idea)
(p / person, consist, g / group)
(p2 / plead-01, ARG0, i / industry)
(p2 / plead-01, ARG1, d / difficulty)
(p4 / provision, mod, l2 / legal)
(p5 / paper, mod, g2 / green)
(p5 / paper, mod, s3 / subsequent)
(p6 / promise-01, ARG0, e4 / elect-01)
(p6 / promise-01, ARG1, a4 / action)
(r / relevant-41, ARG1, g / group)
(r / relevant-41, ARG2, d / difficulty)
(r2 / restrict-01, ARG1, a4 / action)
(s2 / say-01, ARG0, i2 / idea)
(s2 / say-01, ARG1, a2 / and)
(s4 / service, mod, e3 / essential)
(u / use-01, manner, l / little)
(w / work-01, ARG0, p / person)
(w2 / work-01, ARG0, p3 / person)

Decoded in 1,786,853 microseconds
Sentence: some labour men including arthur henderson maybe took this promise seriously

Spans:
Span 1-2:  labour => labour
Span 6-7:  maybe => maybe
Span 2-3:  men => man
Span 9-10:  promise => promise-01
Span 10-11:  seriously => serious
Span 0-1:  some => some
Span 8-9:  this => this

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),seriously,serious,false), Span(9,10,List(1),promise,promise-01,false), Span(8,9,List(2),this,this,false), Span(6,7,List(3),maybe,maybe,false), Span(2,3,List(4),men,man,false), Span(1,2,List(5),labour,labour,false), Span(0,1,List(6),some,some,false)),Map(2 -> this, 5 -> labour, 1 -> promise-01, 4 -> man, 6 -> some, 0 -> serious, 3 -> maybe),Map(s2 -> some, t -> this, m2 -> man, s -> serious, m -> maybe, p -> promise-01, l -> labour))),[Ljava.lang.String;@bba4cd7,Annotation([Ljava.lang.String;@740abd44,[Ljava.lang.String;@6d0ff6e0,[Ljava.lang.String;@33192410),Annotation([Ljava.lang.String;@378eb0a5,[Ljava.lang.String;@78ef3d21,[Ledu.cmu.lti.nlp.amr.Dependency;@22967f8e),Annotation([Ljava.lang.String;@4690555f,[Ljava.lang.String;@2dd4f42a,[Ljava.lang.String;@77ea08e7),Annotation([Ljava.lang.String;@25eeb332,[Ljava.lang.String;@5a36ab12,[Ledu.cmu.lti.nlp.amr.Entity;@3b195903))
AMR:
(m2 / man, mod, l / labour)
(m2 / man, mod, s2 / some)
(p / promise-01, ARG0, m2 / man)
(p / promise-01, direction, s / serious)
(p / promise-01, manner, m / maybe)
(p / promise-01, mod, t / this)

Decoded in 27,744 microseconds
Sentence: you can take your time honey she syllabled droopy with promise in the drawl

Spans:
Span 1-2:  can => possible
Span 10-11:  promise => promise-01
Span 6-7:  she => she
Span 4-5:  time => time
Span 0-1:  you => you

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),promise,promise-01,false), Span(6,7,List(1),she,she,false), Span(4,5,List(2),time,time,false), Span(1,2,List(3),can,possible,false), Span(0,1,List(4),you,you,false)),Map(2 -> time, 1 -> she, 4 -> you, 0 -> promise-01, 3 -> possible),Map(t -> time, p2 -> possible, s -> she, y -> you, p -> promise-01))),[Ljava.lang.String;@14f8e8b,Annotation([Ljava.lang.String;@e174859,[Ljava.lang.String;@1a8ed249,[Ljava.lang.String;@168fc43e),Annotation([Ljava.lang.String;@389cce04,[Ljava.lang.String;@3e9985a5,[Ledu.cmu.lti.nlp.amr.Dependency;@511533be),Annotation([Ljava.lang.String;@46f82888,[Ljava.lang.String;@4e2d1d1e,[Ljava.lang.String;@73d2c4aa),Annotation([Ljava.lang.String;@126db04e,[Ljava.lang.String;@5f51da55,[Ledu.cmu.lti.nlp.amr.Entity;@76d53356))
AMR:
(p / promise-01, ARG0, s / she)
(p / promise-01, ARG1, y / you)
(p2 / possible, op, p / promise-01)
(t / time, poss, y / you)

Decoded in 54,561 microseconds
Sentence: roosevelt without warning his shipping authorities promised to transfer some american shipping from the pacific to the british

NER Entity: (thing :name (name :op "american"))
NER Entity: (thing :name (name :op "british"))
NER Entity: (thing :name (name :op "american"))
Spans:
Span 10-11:  american => (country :name (name :op "America"))
Span 5-6:  authorities => authority
Span 6-7:  promised => promise-01
Span 11-12:  shipping => ship-01
Span 4-5:  shipping => ship-01
Span 9-10:  some => some
Span 8-9:  transfer => transfer-01
Span 2-3:  warning => warn-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),shipping,ship-01,false), Span(10,11,List(3, 2, 1),american,(country :name (name :op "America")),false), Span(9,10,List(4),some,some,false), Span(8,9,List(5),transfer,transfer-01,false), Span(6,7,List(6),promised,promise-01,false), Span(5,6,List(7),authorities,authority,false), Span(4,5,List(8),shipping,ship-01,false), Span(2,3,List(9),warning,warn-01,false)),Map(2 -> name, 5 -> transfer-01, 8 -> ship-01, 7 -> authority, 1 -> country, 4 -> some, 6 -> promise-01, 9 -> warn-01, 0 -> ship-01, 3 -> "America"),Map(w -> warn-01, n -> name, t -> transfer-01, s2 -> some, s -> ship-01, p -> promise-01, a -> authority, s3 -> ship-01, c -> country))),[Ljava.lang.String;@271d900d,Annotation([Ljava.lang.String;@5dc598b,[Ljava.lang.String;@457ab7ae,[Ljava.lang.String;@7bb12424),Annotation([Ljava.lang.String;@2abbf6ed,[Ljava.lang.String;@1a505786,[Ledu.cmu.lti.nlp.amr.Dependency;@10a22be9),Annotation([Ljava.lang.String;@6f0d687,[Ljava.lang.String;@2d943ca0,[Ljava.lang.String;@5f1843c0),Annotation([Ljava.lang.String;@32082306,[Ljava.lang.String;@34337893,[Ledu.cmu.lti.nlp.amr.Entity;@1f3115ab))
AMR:
(c / country, name, n / name)
(n / name, op, "America")
(p / promise-01, ARG1, t / transfer-01)
(s / ship-01, ARG1, c / country)
(s / ship-01, quant, s2 / some)
(s3 / ship-01, ARG1, t / transfer-01)
(t / transfer-01, ARG0, a / authority)
(t / transfer-01, ARG1, s / ship-01)
(w / warn-01, ARG1, a / authority)

Decoded in 38,621 microseconds
Sentence: the labour leader signed the coalition agreements necessary to form a government but was robbed of power by the lastminute defection of religious mps who had earlier promised to back him

Spans:
Span 6-7:  agreements => agree-01
Span 29-30:  back => back
Span 12-13:  but => contrast-01
Span 5-6:  coalition => coalition
Span 26-27:  earlier => early
Span 9-10:  form => form
Span 1-2:  labour => labour
Span 2-3:  leader => (person :ARG0-of lead-02)
Span 16-17:  power => power
Span 27-28:  promised => promise-01
Span 14-15:  robbed => rob-01
Span 3-4:  signed => sign-02

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),back,back,false), Span(27,28,List(1),promised,promise-01,false), Span(26,27,List(2),earlier,early,false), Span(16,17,List(3),power,power,false), Span(14,15,List(4),robbed,rob-01,false), Span(12,13,List(5),but,contrast-01,false), Span(9,10,List(6),form,form,false), Span(6,7,List(7),agreements,agree-01,false), Span(5,6,List(8),coalition,coalition,false), Span(3,4,List(9),signed,sign-02,false), Span(2,3,List(11, 10),leader,(person :ARG0-of lead-02),false), Span(1,2,List(12),labour,labour,false)),Map(2 -> early, 5 -> contrast-01, 12 -> labour, 8 -> coalition, 7 -> agree-01, 1 -> promise-01, 4 -> rob-01, 11 -> lead-02, 6 -> form, 0 -> back, 9 -> sign-02, 3 -> power, 10 -> person),Map(e -> early, b -> back, p2 -> power, s -> sign-02, p -> promise-01, a -> agree-01, l2 -> labour, r -> rob-01, c -> contrast-01, l -> lead-02, f -> form, p3 -> person, c2 -> coalition))),[Ljava.lang.String;@4f859d8c,Annotation([Ljava.lang.String;@4d2a7b1d,[Ljava.lang.String;@1ff8d47f,[Ljava.lang.String;@946ee3f),Annotation([Ljava.lang.String;@fc36edb,[Ljava.lang.String;@67a2f3f2,[Ledu.cmu.lti.nlp.amr.Dependency;@7b3dca05),Annotation([Ljava.lang.String;@159a4d79,[Ljava.lang.String;@45544e03,[Ljava.lang.String;@21cdca84),Annotation([Ljava.lang.String;@4daab172,[Ljava.lang.String;@167db34,[Ledu.cmu.lti.nlp.amr.Entity;@496833a4))
AMR:
(a / agree-01, ARG1, c2 / coalition)
(c / contrast-01, ARG1, f / form)
(c / contrast-01, ARG2, r / rob-01)
(l / lead-02, ARG0, p3 / person)
(l / lead-02, ARG1, l2 / labour)
(p / promise-01, ARG1, p3 / person)
(p / promise-01, ARG2, b / back)
(p / promise-01, time, e / early)
(r / rob-01, ARG0, p3 / person)
(r / rob-01, ARG1, p2 / power)
(s / sign-02, ARG0, p3 / person)
(s / sign-02, ARG1, a / agree-01)

Decoded in 90,229 microseconds
Sentence: of course property men have for some years been alighting upon clubs promising redevelopment and departing when authority stood in their way their motives have not always been admirable and the public has needed protection

Spans:
Span 28-29:  admirable => admirable
Span 26-27:  always => always
Span 29-30:  and => and
Span 14-15:  and => and
Span 17-18:  authority => authority
Span 11-12:  clubs => club
Span 15-16:  departing => depart-01
Span 3-4:  men => man
Span 23-24:  motives => motive
Span 33-34:  needed => need-01
Span 12-13:  promising => promise-01
Span 2-3:  property => property
Span 34-35:  protection => protect-01
Span 31-32:  public => public
Span 6-7:  some => some
Span 18-19:  stood => stand-01
Span 21-22:  way => way
Span 7-8:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),protection,protect-01,false), Span(33,34,List(1),needed,need-01,false), Span(31,32,List(2),public,public,false), Span(29,30,List(3),and,and,false), Span(28,29,List(4),admirable,admirable,false), Span(26,27,List(5),always,always,false), Span(23,24,List(6),motives,motive,false), Span(21,22,List(7),way,way,false), Span(18,19,List(8),stood,stand-01,false), Span(17,18,List(9),authority,authority,false), Span(15,16,List(10),departing,depart-01,false), Span(14,15,List(11),and,and,false), Span(12,13,List(12),promising,promise-01,false), Span(11,12,List(13),clubs,club,false), Span(7,8,List(15, 14),years,(temporal-quantity :unit year),false), Span(6,7,List(16),some,some,false), Span(3,4,List(17),men,man,false), Span(2,3,List(18),property,property,false)),Map(2 -> public, 5 -> always, 12 -> promise-01, 15 -> year, 8 -> stand-01, 18 -> property, 7 -> way, 17 -> man, 1 -> need-01, 4 -> admirable, 11 -> and, 14 -> temporal-quantity, 6 -> motive, 0 -> protect-01, 9 -> authority, 16 -> some, 3 -> and, 10 -> depart-01, 13 -> club),Map(n -> need-01, w -> way, s2 -> some, t -> temporal-quantity, m2 -> man, p2 -> public, a3 -> always, s -> stand-01, m -> motive, d -> depart-01, y -> year, p -> protect-01, a -> and, p4 -> property, a5 -> and, a2 -> admirable, c -> club, p3 -> promise-01, a4 -> authority))),[Ljava.lang.String;@581679a2,Annotation([Ljava.lang.String;@2b8ba7dc,[Ljava.lang.String;@5db972d9,[Ljava.lang.String;@3a2334a1),Annotation([Ljava.lang.String;@5d5453d8,[Ljava.lang.String;@4b4cb9c6,[Ledu.cmu.lti.nlp.amr.Dependency;@1a389cc9),Annotation([Ljava.lang.String;@7abd5d91,[Ljava.lang.String;@264a198b,[Ljava.lang.String;@4ad30850),Annotation([Ljava.lang.String;@64c6e290,[Ljava.lang.String;@3d448fa0,[Ledu.cmu.lti.nlp.amr.Entity;@603170cc))
AMR:
(a / and, op, a2 / admirable)
(a / and, op, n / need-01)
(a2 / admirable, domain, m / motive)
(a2 / admirable, time, a3 / always)
(a5 / and, op, d / depart-01)
(d / depart-01, ARG0, p4 / property)
(d / depart-01, ARG1, t / temporal-quantity)
(n / need-01, ARG0, p2 / public)
(n / need-01, ARG1, s / stand-01)
(p / protect-01, ARG1, p2 / public)
(p3 / promise-01, ARG0, c / club)
(p3 / promise-01, ARG1, m2 / man)
(p3 / promise-01, ARG2, a5 / and)
(s / stand-01, ARG0, a5 / and)
(s / stand-01, ARG1, a4 / authority)
(t / temporal-quantity, mod, s2 / some)
(t / temporal-quantity, unit, y / year)
(w / way, poss, a4 / authority)

Decoded in 634,230 microseconds
Sentence: mr vargas llosa promises to restructure the state privatise all state companies take personal charge of the antisubversive war and bring inflation down to 10 per cent within a year

Spans:
Span 24-25:  10 => 10
Span 9-10:  all => all
Span 19-20:  and => and
Span 20-21:  bring => bring-01
Span 26-27:  cent => (monetary-quantity :unit cent)
Span 11-12:  companies => company
Span 22-23:  down => down
Span 21-22:  inflation => inflation
Span 13-14:  personal => personal
Span 3-4:  promises => promise-01
Span 10-11:  state => state
Span 7-8:  state => state
Span 18-19:  war => war
Span 27-28:  within => within
Span 29-30:  year => year

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),year,year,false), Span(27,28,List(1),within,within,false), Span(26,27,List(3, 2),cent,(monetary-quantity :unit cent),false), Span(24,25,List(4),10,10,false), Span(22,23,List(5),down,down,false), Span(21,22,List(6),inflation,inflation,false), Span(20,21,List(7),bring,bring-01,false), Span(19,20,List(8),and,and,false), Span(18,19,List(9),war,war,false), Span(13,14,List(10),personal,personal,false), Span(11,12,List(11),companies,company,false), Span(10,11,List(12),state,state,false), Span(9,10,List(13),all,all,false), Span(7,8,List(14),state,state,false), Span(3,4,List(15),promises,promise-01,false)),Map(2 -> monetary-quantity, 5 -> down, 12 -> state, 15 -> promise-01, 8 -> and, 7 -> bring-01, 1 -> within, 4 -> 10, 11 -> company, 14 -> state, 6 -> inflation, 0 -> year, 9 -> war, 3 -> cent, 10 -> personal, 13 -> all),Map(w -> within, s2 -> state, b -> bring-01, p2 -> promise-01, s -> state, m -> monetary-quantity, d -> down, 1 -> 10, y -> year, p -> personal, a -> and, w2 -> war, a2 -> all, i -> inflation, c -> cent, c2 -> company))),[Ljava.lang.String;@59489519,Annotation([Ljava.lang.String;@2c34ca1a,[Ljava.lang.String;@3dc087a2,[Ljava.lang.String;@2b08bc5a),Annotation([Ljava.lang.String;@4a85cec8,[Ljava.lang.String;@16cad2b1,[Ledu.cmu.lti.nlp.amr.Dependency;@5dce6e27),Annotation([Ljava.lang.String;@1ba1f28e,[Ljava.lang.String;@253b56ce,[Ljava.lang.String;@5ac0017a),Annotation([Ljava.lang.String;@73a11f21,[Ljava.lang.String;@5702ead5,[Ledu.cmu.lti.nlp.amr.Entity;@877294))
AMR:
(1 / 10, op, p2 / promise-01)
(a / and, op, b / bring-01)
(a / and, op, s2 / state)
(a / and, op, w2 / war)
(b / bring-01, ARG0, c2 / company)
(b / bring-01, ARG1, i / inflation)
(b / bring-01, ARG2, d / down)
(c2 / company, mod, s / state)
(c2 / company, quant, a2 / all)
(m / monetary-quantity, op, p2 / promise-01)
(m / monetary-quantity, time, y / year)
(m / monetary-quantity, unit, c / cent)
(p2 / promise-01, ARG0, s2 / state)
(p2 / promise-01, ARG1, p / personal)
(w / within, op, y / year)

Decoded in 240,236 microseconds
Sentence:   she promised me that she would come

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   she promised me that she would come
myTokenized = she promised me that she would come
i = 0
prefix = List(she)
regexr = \Qs\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: and then hangs himself from a bloody chandelier  over the next few minutes rain outlined what she knew about alf wilson and she promised to tell his cousin anything else she learned

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = and then hangs himself from a bloody chandelier  over the next few minutes rain outlined what she knew about alf wilson and she promised to tell his cousin anything else she learned
myTokenized = and then hangs himself from a bloody chandelier over the next few minutes rain outlined what she knew about alf wilson and she promised to tell his cousin anything else she learned
i = 8
prefix = List(and, then, hangs, himself, from, a, bloody, chandelier, over)
regexr = \Qa\E ?\Qn\E ?\Qd\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qn\E ?\Qh\E ?\Qa\E ?\Qn\E ?\Qg\E ?\Qs\E ?\Qh\E ?\Qi\E ?\Qm\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qf\E ?\Qf\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qa\E ?\Qb\E ?\Ql\E ?\Qo\E ?\Qo\E ?\Qd\E ?\Qy\E ?\Qc\E ?\Qh\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Ql\E ?\Qi\E ?\Qe\E ?\Qr\E ?\Qo\E ?\Qv\E ?\Qe\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: they promise an honest to goodness family holiday in the sun and thats exactly what we got

Spans:
Span 11-12:  and => and
Span 13-14:  exactly => exact
Span 6-7:  family => family
Span 7-8:  holiday => holiday
Span 3-4:  honest => honest
Span 1-2:  promise => promise-01
Span 10-11:  sun => sun
Span 12-13:  thats => that
Span 0-1:  they => they
Span 15-16:  we => we

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),we,we,false), Span(13,14,List(1),exactly,exact,false), Span(12,13,List(2),thats,that,false), Span(11,12,List(3),and,and,false), Span(10,11,List(4),sun,sun,false), Span(7,8,List(5),holiday,holiday,false), Span(6,7,List(6),family,family,false), Span(3,4,List(7),honest,honest,false), Span(1,2,List(8),promise,promise-01,false), Span(0,1,List(9),they,they,false)),Map(2 -> that, 5 -> holiday, 8 -> promise-01, 7 -> honest, 1 -> exact, 4 -> sun, 6 -> family, 9 -> they, 0 -> we, 3 -> and),Map(e -> exact, w -> we, h -> holiday, h2 -> honest, t -> that, s -> sun, p -> promise-01, a -> and, t2 -> they, f -> family))),[Ljava.lang.String;@5bfde7bf,Annotation([Ljava.lang.String;@7a79dbc7,[Ljava.lang.String;@564c24a2,[Ljava.lang.String;@20f933f1),Annotation([Ljava.lang.String;@48c12420,[Ljava.lang.String;@2ad631,[Ledu.cmu.lti.nlp.amr.Dependency;@7c542b0c),Annotation([Ljava.lang.String;@79d66098,[Ljava.lang.String;@695fd9a5,[Ljava.lang.String;@13ca15af),Annotation([Ljava.lang.String;@38559e4f,[Ljava.lang.String;@7d0c716d,[Ledu.cmu.lti.nlp.amr.Entity;@3beaeb3e))
AMR:
(a / and, mod, f / family)
(a / and, op, p / promise-01)
(a / and, op, t / that)
(h / holiday, location, s / sun)
(h / holiday, mod, h2 / honest)
(h / holiday, poss, t2 / they)
(p / promise-01, ARG0, t2 / they)
(p / promise-01, ARG1, w / we)
(t / that, manner, e / exact)

Decoded in 71,208 microseconds
Sentence: the girls mother patricia kent told the court how mr hammond had promised the two eldest of his three children sweets if they spelt their names

Spans:
Span 19-20:  children => child
Span 7-8:  court => court
Span 1-2:  girls => girl
Span 2-3:  mother => (have-rel-role-91 :ARG2 mother)
Span 25-26:  names => name
Span 12-13:  promised => promise-01
Span 22-23:  they => they
Span 18-19:  three => 3
Span 5-6:  told => tell-01
Span 14-15:  two => 2

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),names,name,false), Span(22,23,List(1),they,they,false), Span(19,20,List(2),children,child,false), Span(18,19,List(3),three,3,false), Span(14,15,List(4),two,2,false), Span(12,13,List(5),promised,promise-01,false), Span(7,8,List(6),court,court,false), Span(5,6,List(7),told,tell-01,false), Span(2,3,List(9, 8),mother,(have-rel-role-91 :ARG2 mother),false), Span(1,2,List(10),girls,girl,false)),Map(2 -> child, 5 -> promise-01, 8 -> have-rel-role-91, 7 -> tell-01, 1 -> they, 4 -> 2, 6 -> court, 9 -> mother, 0 -> name, 10 -> girl, 3 -> 3),Map(n -> name, h -> have-rel-role-91, 2 -> 2, t -> they, m -> mother, g -> girl, p -> promise-01, t2 -> tell-01, c -> child, c2 -> court, 3 -> 3))),[Ljava.lang.String;@3bfa522d,Annotation([Ljava.lang.String;@2f29271e,[Ljava.lang.String;@36c73ac2,[Ljava.lang.String;@51e2b2a6),Annotation([Ljava.lang.String;@7a3eda49,[Ljava.lang.String;@346d2d52,[Ledu.cmu.lti.nlp.amr.Dependency;@6bba7d61),Annotation([Ljava.lang.String;@207da288,[Ljava.lang.String;@18399f62,[Ljava.lang.String;@6f0ee75a),Annotation([Ljava.lang.String;@3b76feac,[Ljava.lang.String;@149ecb4,[Ledu.cmu.lti.nlp.amr.Entity;@1c531e15))
AMR:
(h / have-rel-role-91, ARG0, c2 / court)
(h / have-rel-role-91, ARG1, g / girl)
(h / have-rel-role-91, ARG2, m / mother)
(n / name, poss, t / they)
(p / promise-01, ARG0, 3 / 3)
(p / promise-01, ARG1, 2 / 2)
(p / promise-01, ARG2, n / name)
(t2 / tell-01, ARG0, c / child)
(t2 / tell-01, ARG1, p / promise-01)
(t2 / tell-01, ARG2, c2 / court)

Decoded in 196,183 microseconds
Sentence: easier travel direct to west germany promised soon will allow even more east germans pessimistic about the chances of real change to leave for good

NER Entity: (country :name (name :op "germany"))
Spans:
Span 9-10:  allow => allow-01
Span 17-18:  chances => chance-01
Span 20-21:  change => change-01
Span 2-3:  direct => direct
Span 0-1:  easier => easy
Span 12-13:  east => east
Span 13-14:  germans => (person :mod (country :name (name :op "Germany")))
Span 24-25:  good => good
Span 22-23:  leave => leave-01
Span 6-7:  promised => promise-01
Span 19-20:  real => real
Span 7-8:  soon => soon
Span 1-2:  travel => travel-01
Span 4-5:  west => west

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),good,good,false), Span(22,23,List(1),leave,leave-01,false), Span(20,21,List(2),change,change-01,false), Span(19,20,List(3),real,real,false), Span(17,18,List(4),chances,chance-01,false), Span(13,14,List(8, 7, 6, 5),germans,(person :mod (country :name (name :op "Germany"))),false), Span(12,13,List(9),east,east,false), Span(9,10,List(10),allow,allow-01,false), Span(7,8,List(11),soon,soon,false), Span(6,7,List(12),promised,promise-01,false), Span(4,5,List(13),west,west,false), Span(2,3,List(14),direct,direct,false), Span(1,2,List(15),travel,travel-01,false), Span(0,1,List(16),easier,easy,false)),Map(2 -> change-01, 5 -> person, 12 -> promise-01, 15 -> travel-01, 8 -> "Germany", 7 -> name, 1 -> leave-01, 4 -> chance-01, 11 -> soon, 14 -> direct, 6 -> country, 0 -> good, 9 -> east, 16 -> easy, 3 -> real, 10 -> allow-01, 13 -> west),Map(e -> east, n -> name, w -> west, t -> travel-01, e2 -> easy, p2 -> promise-01, s -> soon, d -> direct, g -> good, p -> person, c3 -> country, a -> allow-01, r -> real, c -> change-01, l -> leave-01, c2 -> chance-01))),[Ljava.lang.String;@14dc033a,Annotation([Ljava.lang.String;@7857df88,[Ljava.lang.String;@51149771,[Ljava.lang.String;@1ee2a54d),Annotation([Ljava.lang.String;@31d27212,[Ljava.lang.String;@6f3f154b,[Ledu.cmu.lti.nlp.amr.Dependency;@168f27fc),Annotation([Ljava.lang.String;@108a1cf6,[Ljava.lang.String;@5b7362f5,[Ljava.lang.String;@7465f1ba),Annotation([Ljava.lang.String;@50e12609,[Ljava.lang.String;@6d88425a,[Ledu.cmu.lti.nlp.amr.Entity;@cbc5ae4))
AMR:
(a / allow-01, ARG1, l / leave-01)
(c / change-01, ARG1, l / leave-01)
(c / change-01, mod, r / real)
(c2 / chance-01, ARG1, w / west)
(c2 / chance-01, purpose, l / leave-01)
(c3 / country, name, n / name)
(l / leave-01, ARG0, p / person)
(l / leave-01, ARG1, t / travel-01)
(l / leave-01, ARG2, g / good)
(n / name, op, "Germany")
(p / person, mod, c3 / country)
(p / person, mod, e / east)
(p2 / promise-01, ARG1, p / person)
(p2 / promise-01, time, s / soon)
(t / travel-01, manner, d / direct)
(t / travel-01, mod, e2 / easy)

Decoded in 304,733 microseconds
Sentence: she had already promised herself she wouldnt tell him till after christmas

Spans:
Span 10-11:  after => after
Span 2-3:  already => already
Span 3-4:  promised => promise-01
Span 5-6:  she => she
Span 0-1:  she => she
Span 7-8:  tell => tell-01
Span 9-10:  till => till

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),after,after,false), Span(9,10,List(1),till,till,false), Span(7,8,List(2),tell,tell-01,false), Span(5,6,List(3),she,she,false), Span(3,4,List(4),promised,promise-01,false), Span(2,3,List(5),already,already,false), Span(0,1,List(6),she,she,false)),Map(2 -> tell-01, 5 -> already, 1 -> till, 4 -> promise-01, 6 -> she, 0 -> after, 3 -> she),Map(s2 -> she, t -> till, s -> she, p -> promise-01, a -> after, t2 -> tell-01, a2 -> already))),[Ljava.lang.String;@21f33544,Annotation([Ljava.lang.String;@662e14c5,[Ljava.lang.String;@5b55c5eb,[Ljava.lang.String;@5c34f625),Annotation([Ljava.lang.String;@190c266e,[Ljava.lang.String;@6caf0c9a,[Ledu.cmu.lti.nlp.amr.Dependency;@58648a34),Annotation([Ljava.lang.String;@30ad8942,[Ljava.lang.String;@510e6505,[Ljava.lang.String;@80a54d6),Annotation([Ljava.lang.String;@5e47b1b9,[Ljava.lang.String;@34e5190a,[Ledu.cmu.lti.nlp.amr.Entity;@2ccefaa7))
AMR:
(p / promise-01, ARG0, s2 / she)
(p / promise-01, time, a2 / already)
(t / till, op, a / after)
(t2 / tell-01, ARG0, s / she)
(t2 / tell-01, ARG1, t / till)
(t2 / tell-01, ARG2, s2 / she)

Decoded in 83,179 microseconds
Sentence: mr cheney promised that the united states would consult its allies before making reductions in its forces based in europe

NER Entity: (country :name (name :op "united" :op "states"))
Spans:
Span 10-11:  allies => ally-01
Span 17-18:  based => base-01
Span 11-12:  before => before
Span 8-9:  consult => consult-01
Span 19-20:  europe => (continent :name (name :op "Europe"))
Span 16-17:  forces => force
Span 2-3:  promised => promise-01
Span 13-14:  reductions => reduce-01
Span 5-7:  united states => (country :name (name :op "united" :op "states"))

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(2, 1, 0),europe,(continent :name (name :op "Europe")),false), Span(17,18,List(3),based,base-01,false), Span(16,17,List(4),forces,force,false), Span(13,14,List(5),reductions,reduce-01,false), Span(11,12,List(6),before,before,false), Span(10,11,List(7),allies,ally-01,false), Span(8,9,List(8),consult,consult-01,false), Span(5,7,List(12, 11, 10, 9),united states,(country :name (name :op "united" :op "states")),false), Span(2,3,List(13),promised,promise-01,false)),Map(2 -> "Europe", 5 -> reduce-01, 12 -> "states", 8 -> consult-01, 7 -> ally-01, 1 -> name, 4 -> force, 11 -> "united", 6 -> before, 0 -> continent, 9 -> country, 3 -> base-01, 10 -> name, 13 -> promise-01),Map(n -> name, b -> base-01, b2 -> before, p -> promise-01, c3 -> country, a -> ally-01, r -> reduce-01, c -> continent, f -> force, n2 -> name, c2 -> consult-01))),[Ljava.lang.String;@48aa00ec,Annotation([Ljava.lang.String;@1122ab39,[Ljava.lang.String;@7b1733f8,[Ljava.lang.String;@30551dea),Annotation([Ljava.lang.String;@241f0670,[Ljava.lang.String;@70dfb596,[Ledu.cmu.lti.nlp.amr.Dependency;@6f0ac4be),Annotation([Ljava.lang.String;@2bfacee6,[Ljava.lang.String;@5f257498,[Ljava.lang.String;@1409d7f5),Annotation([Ljava.lang.String;@1241201a,[Ljava.lang.String;@71a29452,[Ledu.cmu.lti.nlp.amr.Entity;@68b7cdc6))
AMR:
(b / base-01, ARG1, r / reduce-01)
(c / continent, name, n / name)
(c / continent, poss, a / ally-01)
(c2 / consult-01, ARG0, c3 / country)
(c2 / consult-01, ARG1, a / ally-01)
(c2 / consult-01, ARG4, b2 / before)
(c3 / country, name, n2 / name)
(f / force, poss, a / ally-01)
(n / name, op, "Europe")
(n2 / name, op, "states")
(n2 / name, op, "united")
(p / promise-01, ARG1, c2 / consult-01)
(r / reduce-01, ARG1, f / force)

Decoded in 84,323 microseconds
Sentence: this had been allowed by the oxfordshire county councils highways department and dr ware promised to look into the matter

Spans:
Span 3-4:  allowed => allow-01
Span 11-12:  and => and
Span 8-9:  councils => council
Span 7-8:  county => county
Span 10-11:  department => department
Span 9-10:  highways => highway
Span 19-20:  matter => matter
Span 14-15:  promised => promise-01
Span 0-1:  this => this

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),matter,matter,false), Span(14,15,List(1),promised,promise-01,false), Span(11,12,List(2),and,and,false), Span(10,11,List(3),department,department,false), Span(9,10,List(4),highways,highway,false), Span(8,9,List(5),councils,council,false), Span(7,8,List(6),county,county,false), Span(3,4,List(7),allowed,allow-01,false), Span(0,1,List(8),this,this,false)),Map(2 -> and, 5 -> council, 8 -> this, 7 -> allow-01, 1 -> promise-01, 4 -> highway, 6 -> county, 0 -> matter, 3 -> department),Map(h -> highway, t -> this, d -> department, m -> matter, p -> promise-01, a -> and, a2 -> allow-01, c -> council, c2 -> county))),[Ljava.lang.String;@7b26b7df,Annotation([Ljava.lang.String;@2af1d0a3,[Ljava.lang.String;@69b8935b,[Ljava.lang.String;@54d27196),Annotation([Ljava.lang.String;@441f5a5b,[Ljava.lang.String;@66652f4d,[Ledu.cmu.lti.nlp.amr.Dependency;@7d049cbf),Annotation([Ljava.lang.String;@39ceffb8,[Ljava.lang.String;@44f6a6ae,[Ljava.lang.String;@1d390ce1),Annotation([Ljava.lang.String;@c7c96c4,[Ljava.lang.String;@478e2443,[Ledu.cmu.lti.nlp.amr.Entity;@44eecf68))
AMR:
(a / and, op, a2 / allow-01)
(a / and, op, d / department)
(a2 / allow-01, ARG1, t / this)
(a2 / allow-01, destination, h / highway)
(c / council, mod, c2 / county)
(h / highway, mod, c / council)
(p / promise-01, ARG0, m / matter)
(p / promise-01, ARG1, a / and)

Decoded in 114,106 microseconds
Sentence: i want everyone to know that we are well on the way to reaching our target of 10550 and with the finance already promised we are now in a position to order the equipment

Spans:
Span 22-23:  already => already
Span 18-19:  and => and
Span 33-34:  equipment => equipment
Span 2-3:  everyone => everyone
Span 21-22:  finance => finance-01
Span 0-1:  i => i
Span 4-5:  know => know-01
Span 26-27:  now => now
Span 29-30:  position => position
Span 23-24:  promised => promise-01
Span 13-14:  reaching => reach-01
Span 15-16:  target => target-01
Span 1-2:  want => want-01
Span 11-12:  way => way
Span 24-25:  we => we
Span 6-7:  we => we
Span 8-9:  well => well

Langrangian relaxation converged after 70 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),equipment,equipment,false), Span(29,30,List(1),position,position,false), Span(26,27,List(2),now,now,false), Span(24,25,List(3),we,we,false), Span(23,24,List(4),promised,promise-01,false), Span(22,23,List(5),already,already,false), Span(21,22,List(6),finance,finance-01,false), Span(18,19,List(7),and,and,false), Span(15,16,List(8),target,target-01,false), Span(13,14,List(9),reaching,reach-01,false), Span(11,12,List(10),way,way,false), Span(8,9,List(11),well,well,false), Span(6,7,List(12),we,we,false), Span(4,5,List(13),know,know-01,false), Span(2,3,List(14),everyone,everyone,false), Span(1,2,List(15),want,want-01,false), Span(0,1,List(16),i,i,false)),Map(2 -> now, 5 -> already, 12 -> we, 15 -> want-01, 8 -> target-01, 7 -> and, 1 -> position, 4 -> promise-01, 11 -> well, 14 -> everyone, 6 -> finance-01, 0 -> equipment, 9 -> reach-01, 16 -> i, 3 -> we, 10 -> way, 13 -> know-01),Map(e -> equipment, n -> now, w -> we, k -> know-01, t -> target-01, e2 -> everyone, p2 -> promise-01, w3 -> well, p -> position, a -> already, w5 -> want-01, w2 -> way, i -> i, a2 -> and, r -> reach-01, f -> finance-01, w4 -> we))),[Ljava.lang.String;@5935b538,Annotation([Ljava.lang.String;@550c9d49,[Ljava.lang.String;@2f2a4f3e,[Ljava.lang.String;@2b887a3),Annotation([Ljava.lang.String;@20d0dfba,[Ljava.lang.String;@71103d2a,[Ledu.cmu.lti.nlp.amr.Dependency;@611fca63),Annotation([Ljava.lang.String;@6e205b65,[Ljava.lang.String;@e507c5f,[Ljava.lang.String;@46154850),Annotation([Ljava.lang.String;@1f3ea022,[Ljava.lang.String;@48832834,[Ledu.cmu.lti.nlp.amr.Entity;@1ac4931d))
AMR:
(a2 / and, op, p2 / promise-01)
(e / equipment, poss, w / we)
(f / finance-01, ARG1, w / we)
(k / know-01, ARG0, e2 / everyone)
(k / know-01, ARG1, a2 / and)
(p2 / promise-01, ARG0, f / finance-01)
(p2 / promise-01, ARG3, n / now)
(p2 / promise-01, domain, w4 / we)
(p2 / promise-01, time, a / already)
(r / reach-01, ARG1, t / target-01)
(t / target-01, ARG1, p / position)
(t / target-01, mod, f / finance-01)
(w2 / way, purpose, r / reach-01)
(w3 / well, purpose, r / reach-01)
(w5 / want-01, ARG0, i / i)
(w5 / want-01, ARG1, k / know-01)

Decoded in 1,108,029 microseconds
Sentence: how will the fiftythousandandfirst person in that queue feel  mr kaufman repeatedly cheered by tory backbenchers promised if the scheme was embodied in an act an incoming labour government would examine how far it had gone and how it was working

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = how will the fiftythousandandfirst person in that queue feel  mr kaufman repeatedly cheered by tory backbenchers promised if the scheme was embodied in an act an incoming labour government would examine how far it had gone and how it was working
myTokenized = how will the fiftythousandandfirst person in that queue feel mr kaufman repeatedly cheered by tory backbenchers promised if the scheme was embodied in an act an incoming labour government would examine how far it had gone and how it was working
i = 9
prefix = List(how, will, the, fiftythousandandfirst, person, in, that, queue, feel, mr)
regexr = \Qh\E ?\Qo\E ?\Qw\E ?\Qw\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qf\E ?\Qi\E ?\Qf\E ?\Qt\E ?\Qy\E ?\Qt\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Qs\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qf\E ?\Qi\E ?\Qr\E ?\Qs\E ?\Qt\E ?\Qp\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qo\E ?\Qn\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qq\E ?\Qu\E ?\Qe\E ?\Qu\E ?\Qe\E ?\Qf\E ?\Qe\E ?\Qe\E ?\Ql\E ?\Qm\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: theyve promised to do so as soon as a new constitution has been written but western diplomats say that could take up to two years

Spans:
Span 14-15:  but => contrast-01
Span 10-11:  constitution => constitution
Span 19-20:  could => possible
Span 16-17:  diplomats => (have-org-role-91 :ARG2 diplomat)
Span 9-10:  new => new
Span 1-2:  promised => promise-01
Span 17-18:  say => say-01
Span 4-5:  so => so
Span 6-7:  soon => soon
Span 23-24:  two => 2
Span 15-16:  western => (world-region :name (name :op "West"))
Span 13-14:  written => write-01
Span 24-25:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),years,(temporal-quantity :unit year),false), Span(23,24,List(2),two,2,false), Span(19,20,List(3),could,possible,false), Span(17,18,List(4),say,say-01,false), Span(16,17,List(6, 5),diplomats,(have-org-role-91 :ARG2 diplomat),false), Span(15,16,List(9, 8, 7),western,(world-region :name (name :op "West")),false), Span(14,15,List(10),but,contrast-01,false), Span(13,14,List(11),written,write-01,false), Span(10,11,List(12),constitution,constitution,false), Span(9,10,List(13),new,new,false), Span(6,7,List(14),soon,soon,false), Span(4,5,List(15),so,so,false), Span(1,2,List(16),promised,promise-01,false)),Map(2 -> 2, 5 -> have-org-role-91, 12 -> constitution, 15 -> so, 8 -> name, 7 -> world-region, 1 -> year, 4 -> say-01, 11 -> write-01, 14 -> soon, 6 -> diplomat, 0 -> temporal-quantity, 9 -> "West", 16 -> promise-01, 3 -> possible, 10 -> contrast-01, 13 -> new),Map(w -> world-region, n -> name, h -> have-org-role-91, 2 -> 2, s2 -> soon, t -> temporal-quantity, p2 -> promise-01, s -> say-01, d -> diplomat, y -> year, p -> possible, w2 -> write-01, s3 -> so, c -> contrast-01, c2 -> constitution, n2 -> new))),[Ljava.lang.String;@a266faa,Annotation([Ljava.lang.String;@616d071a,[Ljava.lang.String;@3ced6dee,[Ljava.lang.String;@7cc4382),Annotation([Ljava.lang.String;@73640fcd,[Ljava.lang.String;@2e4996ea,[Ledu.cmu.lti.nlp.amr.Dependency;@6152f463),Annotation([Ljava.lang.String;@d2ac180,[Ljava.lang.String;@7205c140,[Ljava.lang.String;@57d28b3b),Annotation([Ljava.lang.String;@3fb2fb88,[Ljava.lang.String;@7f9fbe63,[Ledu.cmu.lti.nlp.amr.Entity;@508c970a))
AMR:
(c / contrast-01, ARG0, s3 / so)
(c / contrast-01, ARG1, w2 / write-01)
(c / contrast-01, ARG2, s / say-01)
(c2 / constitution, mod, n2 / new)
(h / have-org-role-91, ARG1, w / world-region)
(h / have-org-role-91, ARG2, d / diplomat)
(n / name, op, "West")
(p2 / promise-01, ARG1, 2 / 2)
(p2 / promise-01, condition, w2 / write-01)
(s / say-01, ARG1, p / possible)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(w / world-region, name, n / name)
(w2 / write-01, ARG0, h / have-org-role-91)
(w2 / write-01, ARG1, c2 / constitution)
(w2 / write-01, time, s2 / soon)

Decoded in 527,023 microseconds
Sentence: lord mackay said that county courts in particular in the southeast had faced staff turnover problems but he promised improvements

Spans:
Span 16-17:  but => contrast-01
Span 4-5:  county => county
Span 5-6:  courts => court
Span 12-13:  faced => face-01
Span 17-18:  he => he
Span 19-20:  improvements => improve-01
Span 0-1:  lord => lord
Span 7-8:  particular => particular
Span 15-16:  problems => problem
Span 18-19:  promised => promise-01
Span 2-3:  said => say-01
Span 10-11:  southeast => southeast
Span 13-14:  staff => (person :ARG2-of staff-01)
Span 14-15:  turnover => turnover

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),improvements,improve-01,false), Span(18,19,List(1),promised,promise-01,false), Span(17,18,List(2),he,he,false), Span(16,17,List(3),but,contrast-01,false), Span(15,16,List(4),problems,problem,false), Span(14,15,List(5),turnover,turnover,false), Span(13,14,List(7, 6),staff,(person :ARG2-of staff-01),false), Span(12,13,List(8),faced,face-01,false), Span(10,11,List(9),southeast,southeast,false), Span(7,8,List(10),particular,particular,false), Span(5,6,List(11),courts,court,false), Span(4,5,List(12),county,county,false), Span(2,3,List(13),said,say-01,false), Span(0,1,List(14),lord,lord,false)),Map(2 -> he, 5 -> turnover, 12 -> county, 8 -> face-01, 7 -> staff-01, 1 -> promise-01, 4 -> problem, 11 -> court, 14 -> lord, 6 -> person, 0 -> improve-01, 9 -> southeast, 3 -> contrast-01, 10 -> particular, 13 -> say-01),Map(h -> he, s2 -> southeast, t -> turnover, p2 -> problem, s -> staff-01, p -> promise-01, c3 -> county, p4 -> particular, i -> improve-01, s3 -> say-01, c -> contrast-01, l -> lord, f -> face-01, p3 -> person, c2 -> court))),[Ljava.lang.String;@3e103ad6,Annotation([Ljava.lang.String;@1b86d76f,[Ljava.lang.String;@31a9c687,[Ljava.lang.String;@128e28a),Annotation([Ljava.lang.String;@2330d29e,[Ljava.lang.String;@5a53951e,[Ledu.cmu.lti.nlp.amr.Dependency;@256312e6),Annotation([Ljava.lang.String;@b6dcd37,[Ljava.lang.String;@55bbdbbd,[Ljava.lang.String;@20578144),Annotation([Ljava.lang.String;@50e7a7f2,[Ljava.lang.String;@18c32a5d,[Ledu.cmu.lti.nlp.amr.Entity;@35124c5e))
AMR:
(c / contrast-01, ARG1, p2 / problem)
(c / contrast-01, ARG2, p / promise-01)
(c2 / court, mod, c3 / county)
(f / face-01, ARG0, c2 / court)
(f / face-01, ARG1, p2 / problem)
(f / face-01, ARG2, s2 / southeast)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, p3 / person)
(p / promise-01, ARG2, i / improve-01)
(p2 / problem, mod, t / turnover)
(p4 / particular, compared-to, s2 / southeast)
(s / staff-01, ARG2, p3 / person)
(s3 / say-01, ARG0, l / lord)
(s3 / say-01, ARG1, f / face-01)

Decoded in 384,538 microseconds
Sentence: but mr gratwick promised that there would be no dramatic moves

Spans:
Span 0-1:  but => contrast-01
Span 9-10:  dramatic => dramatic
Span 10-11:  moves => move-02
Span 8-9:  no => -
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),moves,move-02,false), Span(9,10,List(1),dramatic,dramatic,false), Span(8,9,List(2),no,-,false), Span(3,4,List(3),promised,promise-01,false), Span(0,1,List(4),but,contrast-01,false)),Map(2 -> -, 1 -> dramatic, 4 -> contrast-01, 0 -> move-02, 3 -> promise-01),Map(d -> dramatic, m -> move-02, p -> promise-01, - -> -, c -> contrast-01))),[Ljava.lang.String;@4453ca8a,Annotation([Ljava.lang.String;@59164d11,[Ljava.lang.String;@471dc4c8,[Ljava.lang.String;@73624af1),Annotation([Ljava.lang.String;@3a264f65,[Ljava.lang.String;@29268db6,[Ledu.cmu.lti.nlp.amr.Dependency;@2221bcd5),Annotation([Ljava.lang.String;@54f45574,[Ljava.lang.String;@75165e3e,[Ljava.lang.String;@f857480),Annotation([Ljava.lang.String;@2a38776,[Ljava.lang.String;@3e125554,[Ledu.cmu.lti.nlp.amr.Entity;@25a01da2))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(m / move-02, manner, d / dramatic)
(m / move-02, polarity, - / -)
(p / promise-01, ARG1, m / move-02)

Decoded in 17,038 microseconds
Sentence: mr gandhi has also been promising greater devolution of power to the villages

Spans:
Span 3-4:  also => also
Span 6-7:  greater => great
Span 9-10:  power => power
Span 5-6:  promising => promise-01
Span 12-13:  villages => village

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),villages,village,false), Span(9,10,List(1),power,power,false), Span(6,7,List(2),greater,great,false), Span(5,6,List(3),promising,promise-01,false), Span(3,4,List(4),also,also,false)),Map(2 -> great, 1 -> power, 4 -> also, 0 -> village, 3 -> promise-01),Map(p2 -> promise-01, v -> village, g -> great, p -> power, a -> also))),[Ljava.lang.String;@32f989fa,Annotation([Ljava.lang.String;@1cd1963b,[Ljava.lang.String;@3de0a45,[Ljava.lang.String;@667439fe),Annotation([Ljava.lang.String;@588b873e,[Ljava.lang.String;@305c24dc,[Ledu.cmu.lti.nlp.amr.Dependency;@71780051),Annotation([Ljava.lang.String;@7d5d0009,[Ljava.lang.String;@64ad8f2b,[Ljava.lang.String;@3e9283b0),Annotation([Ljava.lang.String;@503b7e8,[Ljava.lang.String;@371ee2ea,[Ledu.cmu.lti.nlp.amr.Entity;@4cc38ceb))
AMR:
(p / power, mod, g / great)
(p2 / promise-01, ARG1, p / power)
(p2 / promise-01, ARG2, v / village)
(p2 / promise-01, mod, a / also)

Decoded in 29,673 microseconds
Sentence: he promised to put the sleeping policeman idea to the county council

Spans:
Span 11-12:  council => council
Span 10-11:  county => county
Span 0-1:  he => he
Span 7-8:  idea => idea
Span 6-7:  policeman => policeman
Span 1-2:  promised => promise-01
Span 5-6:  sleeping => sleep-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),council,council,false), Span(10,11,List(1),county,county,false), Span(7,8,List(2),idea,idea,false), Span(6,7,List(3),policeman,policeman,false), Span(5,6,List(4),sleeping,sleep-01,false), Span(1,2,List(5),promised,promise-01,false), Span(0,1,List(6),he,he,false)),Map(2 -> idea, 5 -> promise-01, 1 -> county, 4 -> sleep-01, 6 -> he, 0 -> council, 3 -> policeman),Map(h -> he, p2 -> promise-01, s -> sleep-01, p -> policeman, i -> idea, c -> council, c2 -> county))),[Ljava.lang.String;@460c5239,Annotation([Ljava.lang.String;@52ea401c,[Ljava.lang.String;@111718cb,[Ljava.lang.String;@35cc031),Annotation([Ljava.lang.String;@3e4dd2b0,[Ljava.lang.String;@674340c4,[Ledu.cmu.lti.nlp.amr.Dependency;@705138d2),Annotation([Ljava.lang.String;@64699c99,[Ljava.lang.String;@51a8344f,[Ljava.lang.String;@7a02586a),Annotation([Ljava.lang.String;@2ffad5ba,[Ljava.lang.String;@7ce5bef1,[Ledu.cmu.lti.nlp.amr.Entity;@4f5b0046))
AMR:
(c / council, mod, c2 / county)
(c2 / county, op, p2 / promise-01)
(i / idea, mod, p / policeman)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, i / idea)
(s / sleep-01, ARG1, i / idea)

Decoded in 83,095 microseconds
Sentence: it wont be for long i promise ellip

Spans:
Span 5-6:  i => i
Span 0-1:  it => it
Span 6-7:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),promise,promise-01,false), Span(5,6,List(1),i,i,false), Span(0,1,List(2),it,it,false)),Map(2 -> it, 1 -> i, 0 -> promise-01),Map(p -> promise-01, i2 -> it, i -> i))),[Ljava.lang.String;@5f6f1c5d,Annotation([Ljava.lang.String;@77af4e9d,[Ljava.lang.String;@165262ce,[Ljava.lang.String;@7ad4cdd4),Annotation([Ljava.lang.String;@2915584c,[Ljava.lang.String;@3857faa6,[Ledu.cmu.lti.nlp.amr.Dependency;@1808c530),Annotation([Ljava.lang.String;@67c9dea3,[Ljava.lang.String;@7637d490,[Ljava.lang.String;@4b647692),Annotation([Ljava.lang.String;@30a491e9,[Ljava.lang.String;@46770f2,[Ledu.cmu.lti.nlp.amr.Entity;@23282220))
AMR:
(i2 / it, op, p / promise-01)
(p / promise-01, ARG0, i / i)

Decoded in 6,434 microseconds
Sentence: theres even the blinding firework display the count promises at the end to send everybody especially the producer peter hall who in 1973 had to make do with sparklers away joyful

Spans:
Span 22-23:  1973 => (date-entity :year 1973)
Span 29-30:  away => away
Span 7-8:  count => count-01
Span 5-6:  display => display-01
Span 15-16:  especially => especially
Span 14-15:  everybody => everybody
Span 19-20:  hall => hall
Span 30-31:  joyful => joyful
Span 17-18:  producer => produce-01
Span 8-9:  promises => promise-01
Span 13-14:  send => send-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),joyful,joyful,false), Span(29,30,List(1),away,away,false), Span(22,23,List(3, 2),1973,(date-entity :year 1973),false), Span(19,20,List(4),hall,hall,false), Span(17,18,List(5),producer,produce-01,false), Span(15,16,List(6),especially,especially,false), Span(14,15,List(7),everybody,everybody,false), Span(13,14,List(8),send,send-01,false), Span(8,9,List(9),promises,promise-01,false), Span(7,8,List(10),count,count-01,false), Span(5,6,List(11),display,display-01,false)),Map(2 -> date-entity, 5 -> produce-01, 8 -> send-01, 7 -> everybody, 1 -> away, 11 -> display-01, 4 -> hall, 6 -> especially, 9 -> promise-01, 0 -> joyful, 10 -> count-01, 3 -> 1973),Map(e -> especially, h -> hall, p2 -> promise-01, e2 -> everybody, s -> send-01, j -> joyful, d -> date-entity, p -> produce-01, 1 -> 1973, a -> away, d2 -> display-01, c -> count-01))),[Ljava.lang.String;@1fd874e8,Annotation([Ljava.lang.String;@3be33bad,[Ljava.lang.String;@4362f992,[Ljava.lang.String;@16ef02ce),Annotation([Ljava.lang.String;@25a12e25,[Ljava.lang.String;@78dc926f,[Ledu.cmu.lti.nlp.amr.Dependency;@5911f366),Annotation([Ljava.lang.String;@2982db39,[Ljava.lang.String;@4e069079,[Ljava.lang.String;@10f71ff4),Annotation([Ljava.lang.String;@5052d4df,[Ljava.lang.String;@6e15a5ab,[Ledu.cmu.lti.nlp.amr.Entity;@4f2fb603))
AMR:
(d / date-entity, year, 1 / 1973)
(d2 / display-01, ARG0, h / hall)
(d2 / display-01, ARG1, p2 / promise-01)
(j / joyful, degree, a / away)
(p / produce-01, ARG1, h / hall)
(p2 / promise-01, ARG0, c / count-01)
(p2 / promise-01, ARG1, a / away)
(s / send-01, ARG0, c / count-01)
(s / send-01, ARG1, e2 / everybody)
(s / send-01, mod, e / especially)
(s / send-01, time, d / date-entity)

Decoded in 82,676 microseconds
Sentence: it would also appear to promise that all effective sanctions will be removed which impose on unions an incentive to obey the law

Spans:
Span 7-8:  all => all
Span 2-3:  also => also
Span 3-4:  appear => appear-02
Span 8-9:  effective => effective
Span 14-15:  impose => impose-01
Span 18-19:  incentive => incentivize-01
Span 0-1:  it => it
Span 22-23:  law => law
Span 5-6:  promise => promise-01
Span 12-13:  removed => remove-01
Span 9-10:  sanctions => sanction-02
Span 16-17:  unions => union

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),law,law,false), Span(18,19,List(1),incentive,incentivize-01,false), Span(16,17,List(2),unions,union,false), Span(14,15,List(3),impose,impose-01,false), Span(12,13,List(4),removed,remove-01,false), Span(9,10,List(5),sanctions,sanction-02,false), Span(8,9,List(6),effective,effective,false), Span(7,8,List(7),all,all,false), Span(5,6,List(8),promise,promise-01,false), Span(3,4,List(9),appear,appear-02,false), Span(2,3,List(10),also,also,false), Span(0,1,List(11),it,it,false)),Map(2 -> union, 5 -> sanction-02, 8 -> promise-01, 7 -> all, 1 -> incentivize-01, 11 -> it, 4 -> remove-01, 6 -> effective, 9 -> appear-02, 0 -> law, 10 -> also, 3 -> impose-01),Map(e -> effective, a3 -> also, s -> sanction-02, i3 -> it, p -> promise-01, a -> all, i2 -> impose-01, a2 -> appear-02, r -> remove-01, i -> incentivize-01, u -> union, l -> law))),[Ljava.lang.String;@4556a792,Annotation([Ljava.lang.String;@3c1385ce,[Ljava.lang.String;@25b5b632,[Ljava.lang.String;@3ccc9ff5),Annotation([Ljava.lang.String;@1e19ad02,[Ljava.lang.String;@27ad6dbe,[Ledu.cmu.lti.nlp.amr.Dependency;@6affe94b),Annotation([Ljava.lang.String;@472d71ce,[Ljava.lang.String;@788aafe3,[Ljava.lang.String;@59219de8),Annotation([Ljava.lang.String;@2e06180f,[Ljava.lang.String;@12159864,[Ledu.cmu.lti.nlp.amr.Entity;@47c7d682))
AMR:
(a2 / appear-02, ARG1, p / promise-01)
(a2 / appear-02, mod, a3 / also)
(i / incentivize-01, ARG2, l / law)
(i2 / impose-01, ARG0, r / remove-01)
(i2 / impose-01, ARG2, u / union)
(i2 / impose-01, purpose, l / law)
(p / promise-01, ARG0, i3 / it)
(p / promise-01, ARG1, r / remove-01)
(r / remove-01, ARG1, s / sanction-02)
(s / sanction-02, mod, e / effective)
(s / sanction-02, quant, a / all)

Decoded in 257,667 microseconds
Sentence: the open residential or free settlement areas will lay the foundation the government plans for the new political dispensation mr de klerk persistently promises

Spans:
Span 6-7:  areas => area
Span 10-11:  foundation => foundation
Span 4-5:  free => free-41
Span 8-9:  lay => lay-01
Span 16-17:  new => new
Span 3-4:  or => or
Span 13-14:  plans => plan-01
Span 17-18:  political => politics
Span 23-24:  promises => promise-01
Span 5-6:  settlement => settle-02

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),promises,promise-01,false), Span(17,18,List(1),political,politics,false), Span(16,17,List(2),new,new,false), Span(13,14,List(3),plans,plan-01,false), Span(10,11,List(4),foundation,foundation,false), Span(8,9,List(5),lay,lay-01,false), Span(6,7,List(6),areas,area,false), Span(5,6,List(7),settlement,settle-02,false), Span(4,5,List(8),free,free-41,false), Span(3,4,List(9),or,or,false)),Map(2 -> new, 5 -> lay-01, 8 -> free-41, 7 -> settle-02, 1 -> politics, 4 -> foundation, 6 -> area, 9 -> or, 0 -> promise-01, 3 -> plan-01),Map(n -> new, p2 -> politics, s -> settle-02, p -> promise-01, a -> area, f2 -> free-41, l -> lay-01, o -> or, f -> foundation, p3 -> plan-01))),[Ljava.lang.String;@10d4159f,Annotation([Ljava.lang.String;@53d7825a,[Ljava.lang.String;@69af0db6,[Ljava.lang.String;@63ad5dee),Annotation([Ljava.lang.String;@af1e762,[Ljava.lang.String;@f8dd88b,[Ledu.cmu.lti.nlp.amr.Dependency;@298395a7),Annotation([Ljava.lang.String;@7dd61c3b,[Ljava.lang.String;@73d7a607,[Ljava.lang.String;@52d550fb),Annotation([Ljava.lang.String;@32b7b939,[Ljava.lang.String;@3be16732,[Ledu.cmu.lti.nlp.amr.Entity;@4b3e2254))
AMR:
(f2 / free-41, ARG0, p2 / politics)
(f2 / free-41, ARG1, s / settle-02)
(l / lay-01, ARG0, a / area)
(l / lay-01, ARG1, f / foundation)
(o / or, op, l / lay-01)
(p / promise-01, ARG1, a / area)
(p3 / plan-01, ARG1, f / foundation)
(s / settle-02, ARG0, n / new)
(s / settle-02, ARG1, o / or)

Decoded in 88,247 microseconds
Sentence:   violation of the duty not to interfere with a persons promising will frustrate his right to promise and the interest on which it is base either by preventing the person from exercising his rights or by perverting the considerations on which he decides whether to promise or not, the fact that such interferences with the right are infrequent is reflected by the fact that the right to promise is rarely invoked in ordinary practical discourse

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   violation of the duty not to interfere with a persons promising will frustrate his right to promise and the interest on which it is base either by preventing the person from exercising his rights or by perverting the considerations on which he decides whether to promise or not, the fact that such interferences with the right are infrequent is reflected by the fact that the right to promise is rarely invoked in ordinary practical discourse
myTokenized = violation of the duty not to interfere with a persons promising will frustrate his right to promise and the interest on which it is base either by preventing the person from exercising his rights or by perverting the considerations on which he decides whether to promise or not , the fact that such interferences with the right are infrequent is reflected by the fact that the right to promise is rarely invoked in ordinary practical discourse
i = 0
prefix = List(violation)
regexr = \Qv\E ?\Qi\E ?\Qo\E ?\Ql\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: iraq yesterday promised to allow british officials in baghdad to visit farzad bazoft the observer journalist arrested on 15 september after trying to investigate the mystery explosion at an arms factory which killed hundreds

NER Entity: (country :name (name :op "iraq"))
NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "baghdad"))
Spans:
Span 18-19:  15 => 15
Span 20-21:  after => after
Span 4-5:  allow => allow-01
Span 29-30:  arms => arm
Span 16-17:  arrested => arrest-01
Span 26-27:  explosion => explode-01
Span 30-31:  factory => factory
Span 23-24:  investigate => investigate-01
Span 15-16:  journalist => journalist
Span 32-33:  killed => kill-01
Span 25-26:  mystery => mystery
Span 14-15:  observer => observe-01
Span 6-7:  officials => (have-org-role-91 :ARG2 official)
Span 2-3:  promised => promise-01
Span 19-20:  september => (date-entity :month 9)
Span 21-22:  trying => try-01
Span 10-11:  visit => visit-01
Span 1-2:  yesterday => yesterday

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),killed,kill-01,false), Span(30,31,List(1),factory,factory,false), Span(29,30,List(2),arms,arm,false), Span(26,27,List(3),explosion,explode-01,false), Span(25,26,List(4),mystery,mystery,false), Span(23,24,List(5),investigate,investigate-01,false), Span(21,22,List(6),trying,try-01,false), Span(20,21,List(7),after,after,false), Span(19,20,List(9, 8),september,(date-entity :month 9),false), Span(18,19,List(10),15,15,false), Span(16,17,List(11),arrested,arrest-01,false), Span(15,16,List(12),journalist,journalist,false), Span(14,15,List(13),observer,observe-01,false), Span(10,11,List(14),visit,visit-01,false), Span(6,7,List(16, 15),officials,(have-org-role-91 :ARG2 official),false), Span(4,5,List(17),allow,allow-01,false), Span(2,3,List(18),promised,promise-01,false), Span(1,2,List(19),yesterday,yesterday,false)),Map(2 -> arm, 5 -> investigate-01, 12 -> journalist, 15 -> have-org-role-91, 8 -> date-entity, 18 -> promise-01, 7 -> after, 17 -> allow-01, 1 -> factory, 4 -> mystery, 11 -> arrest-01, 14 -> visit-01, 6 -> try-01, 0 -> kill-01, 9 -> 9, 16 -> official, 19 -> yesterday, 3 -> explode-01, 10 -> 15, 13 -> observe-01),Map(e -> explode-01, h -> have-org-role-91, k -> kill-01, t -> try-01, a3 -> arrest-01, j -> journalist, v -> visit-01, m -> mystery, d -> date-entity, 1 -> 15, y -> yesterday, p -> promise-01, a -> arm, o2 -> official, i -> investigate-01, a2 -> after, f -> factory, 9 -> 9, o -> observe-01, a4 -> allow-01))),[Ljava.lang.String;@65630be5,Annotation([Ljava.lang.String;@49a21b63,[Ljava.lang.String;@31b42659,[Ljava.lang.String;@2a41b68d),Annotation([Ljava.lang.String;@4037f8a7,[Ljava.lang.String;@1aa5bce1,[Ledu.cmu.lti.nlp.amr.Dependency;@77136571),Annotation([Ljava.lang.String;@1a691aca,[Ljava.lang.String;@6a5dd151,[Ljava.lang.String;@35595365),Annotation([Ljava.lang.String;@7b72273f,[Ljava.lang.String;@36ed86a,[Ledu.cmu.lti.nlp.amr.Entity;@624218e8))
AMR:
(a2 / after, op, t / try-01)
(a3 / arrest-01, ARG1, j / journalist)
(a3 / arrest-01, time, a2 / after)
(a3 / arrest-01, time, d / date-entity)
(a4 / allow-01, ARG0, y / yesterday)
(a4 / allow-01, ARG1, v / visit-01)
(d / date-entity, month, 9 / 9)
(d / date-entity, quant, 1 / 15)
(e / explode-01, ARG1, m / mystery)
(f / factory, mod, a / arm)
(h / have-org-role-91, ARG1, v / visit-01)
(h / have-org-role-91, ARG2, o2 / official)
(i / investigate-01, ARG1, e / explode-01)
(k / kill-01, ARG0, e / explode-01)
(k / kill-01, ARG1, f / factory)
(o / observe-01, ARG0, j / journalist)
(p / promise-01, ARG0, j / journalist)
(p / promise-01, ARG1, a4 / allow-01)
(t / try-01, ARG1, i / investigate-01)

Decoded in 472,715 microseconds
Sentence: he promised bemused correspondents that he would return within a year shake off his heavy security and don high heels and a wig to visit the barrios unobserved

Spans:
Span 20-21:  and => and
Span 16-17:  and => and
Span 5-6:  he => he
Span 0-1:  he => he
Span 14-15:  heavy => heavy
Span 18-19:  high => high
Span 12-13:  off => off
Span 1-2:  promised => promise-01
Span 15-16:  security => security
Span 11-12:  shake => shake-01
Span 24-25:  visit => visit-01
Span 22-23:  wig => wig
Span 8-9:  within => within
Span 10-11:  year => year

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),visit,visit-01,false), Span(22,23,List(1),wig,wig,false), Span(20,21,List(2),and,and,false), Span(18,19,List(3),high,high,false), Span(16,17,List(4),and,and,false), Span(15,16,List(5),security,security,false), Span(14,15,List(6),heavy,heavy,false), Span(12,13,List(7),off,off,false), Span(11,12,List(8),shake,shake-01,false), Span(10,11,List(9),year,year,false), Span(8,9,List(10),within,within,false), Span(5,6,List(11),he,he,false), Span(1,2,List(12),promised,promise-01,false), Span(0,1,List(13),he,he,false)),Map(2 -> and, 5 -> security, 12 -> promise-01, 8 -> shake-01, 7 -> off, 1 -> wig, 4 -> and, 11 -> he, 6 -> heavy, 0 -> visit-01, 9 -> year, 3 -> high, 10 -> within, 13 -> he),Map(w -> wig, h -> high, h2 -> heavy, s2 -> shake-01, s -> security, h4 -> he, v -> visit-01, y -> year, p -> promise-01, a -> and, w2 -> within, a2 -> and, h3 -> he, o -> off))),[Ljava.lang.String;@58bab945,Annotation([Ljava.lang.String;@4ad98e85,[Ljava.lang.String;@111be427,[Ljava.lang.String;@3e1fc537),Annotation([Ljava.lang.String;@17ccbdbe,[Ljava.lang.String;@2bd1127,[Ledu.cmu.lti.nlp.amr.Dependency;@4ab118d8),Annotation([Ljava.lang.String;@30d63337,[Ljava.lang.String;@3ebc78ed,[Ljava.lang.String;@47a72fc8),Annotation([Ljava.lang.String;@31321838,[Ljava.lang.String;@4fd41dc3,[Ledu.cmu.lti.nlp.amr.Entity;@6eee1626))
AMR:
(a / and, mod, h / high)
(a / and, op, w / wig)
(a2 / and, op, a / and)
(a2 / and, op, s2 / shake-01)
(p / promise-01, ARG0, h4 / he)
(p / promise-01, ARG1, a2 / and)
(s / security, mod, h2 / heavy)
(s2 / shake-01, ARG0, h3 / he)
(s2 / shake-01, ARG1, s / security)
(s2 / shake-01, direction, o / off)
(v / visit-01, ARG0, h3 / he)
(w2 / within, domain, s2 / shake-01)
(w2 / within, op, y / year)

Decoded in 245,206 microseconds
Sentence: by leading him to the altar of television you will be consecrating his loss and promising him redemption from his unworthiness

Spans:
Span 14-15:  and => and
Span 1-2:  leading => lead-01
Span 15-16:  promising => promise-01
Span 17-18:  redemption => redemption
Span 7-8:  television => television
Span 8-9:  you => you

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),redemption,redemption,false), Span(15,16,List(1),promising,promise-01,false), Span(14,15,List(2),and,and,false), Span(8,9,List(3),you,you,false), Span(7,8,List(4),television,television,false), Span(1,2,List(5),leading,lead-01,false)),Map(2 -> and, 5 -> lead-01, 1 -> promise-01, 4 -> television, 0 -> redemption, 3 -> you),Map(t -> television, y -> you, p -> promise-01, a -> and, r -> redemption, l -> lead-01))),[Ljava.lang.String;@50f051af,Annotation([Ljava.lang.String;@5182e1ac,[Ljava.lang.String;@67ae0d02,[Ljava.lang.String;@53d8337b),Annotation([Ljava.lang.String;@171bfb3e,[Ljava.lang.String;@2e0baf4c,[Ledu.cmu.lti.nlp.amr.Dependency;@121be32),Annotation([Ljava.lang.String;@4e4dc532,[Ljava.lang.String;@53cd7dc7,[Ljava.lang.String;@57fcbecc),Annotation([Ljava.lang.String;@12527035,[Ljava.lang.String;@6244b0f8,[Ledu.cmu.lti.nlp.amr.Entity;@bbe9c2f))
AMR:
(a / and, op, p / promise-01)
(l / lead-01, ARG0, y / you)
(l / lead-01, ARG1, a / and)
(p / promise-01, ARG0, t / television)
(p / promise-01, ARG1, r / redemption)

Decoded in 36,594 microseconds
Sentence: the attorneygeneral had promised to take the matter to cabinet his lawyers said

Spans:
Span 9-10:  cabinet => cabinet
Span 11-12:  lawyers => lawyer
Span 7-8:  matter => matter
Span 3-4:  promised => promise-01
Span 12-13:  said => say-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),said,say-01,false), Span(11,12,List(1),lawyers,lawyer,false), Span(9,10,List(2),cabinet,cabinet,false), Span(7,8,List(3),matter,matter,false), Span(3,4,List(4),promised,promise-01,false)),Map(2 -> cabinet, 1 -> lawyer, 4 -> promise-01, 0 -> say-01, 3 -> matter),Map(s -> say-01, m -> matter, p -> promise-01, c -> cabinet, l -> lawyer))),[Ljava.lang.String;@effd7af,Annotation([Ljava.lang.String;@3ea929da,[Ljava.lang.String;@53fac759,[Ljava.lang.String;@7535cf21),Annotation([Ljava.lang.String;@1fb1bba5,[Ljava.lang.String;@4d965de4,[Ledu.cmu.lti.nlp.amr.Dependency;@4aee4b87),Annotation([Ljava.lang.String;@62a0b27f,[Ljava.lang.String;@2426e26f,[Ljava.lang.String;@74dbf7f3),Annotation([Ljava.lang.String;@1573ae75,[Ljava.lang.String;@5dc28e53,[Ledu.cmu.lti.nlp.amr.Entity;@100e1b3c))
AMR:
(p / promise-01, ARG1, m / matter)
(s / say-01, ARG0, l / lawyer)
(s / say-01, ARG1, c / cabinet)
(s / say-01, time, p / promise-01)

Decoded in 59,064 microseconds
Sentence: 2bn last year and promised a similar return next time

Spans:
Span 3-4:  and => and
Span 1-2:  last => last
Span 8-9:  next => next
Span 4-5:  promised => promise-01
Span 9-10:  time => time
Span 2-3:  year => year

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),time,time,false), Span(8,9,List(1),next,next,false), Span(4,5,List(2),promised,promise-01,false), Span(3,4,List(3),and,and,false), Span(2,3,List(4),year,year,false), Span(1,2,List(5),last,last,false)),Map(2 -> promise-01, 5 -> last, 1 -> next, 4 -> year, 0 -> time, 3 -> and),Map(n -> next, t -> time, y -> year, p -> promise-01, a -> and, l -> last))),[Ljava.lang.String;@e1e0860,Annotation([Ljava.lang.String;@55b7dddd,[Ljava.lang.String;@1a470422,[Ljava.lang.String;@2c6061a8),Annotation([Ljava.lang.String;@6bab735a,[Ljava.lang.String;@452250ef,[Ledu.cmu.lti.nlp.amr.Dependency;@4fef9e5e),Annotation([Ljava.lang.String;@7c865651,[Ljava.lang.String;@578d1fb5,[Ljava.lang.String;@721cd0fa),Annotation([Ljava.lang.String;@41dc079d,[Ljava.lang.String;@5477f632,[Ledu.cmu.lti.nlp.amr.Entity;@fc477f1))
AMR:
(a / and, op, p / promise-01)
(p / promise-01, ARG0, y / year)
(p / promise-01, ARG1, t / time)
(t / time, mod, n / next)
(y / year, mod, l / last)

Decoded in 28,256 microseconds
Sentence: a motorist who promised a friend he would get to the station on time drove down a platform and crashed into a train teesside magistrates were told yesterday

Spans:
Span 18-19:  and => and
Span 19-20:  crashed => crash-01
Span 15-16:  down => down
Span 14-15:  drove => drive-02
Span 5-6:  friend => (have-rel-role-91 :ARG2 friend)
Span 6-7:  he => he
Span 17-18:  platform => platform
Span 3-4:  promised => promise-01
Span 11-12:  station => station
Span 13-14:  time => time
Span 26-27:  told => tell-01
Span 22-23:  train => train
Span 27-28:  yesterday => yesterday

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),yesterday,yesterday,false), Span(26,27,List(1),told,tell-01,false), Span(22,23,List(2),train,train,false), Span(19,20,List(3),crashed,crash-01,false), Span(18,19,List(4),and,and,false), Span(17,18,List(5),platform,platform,false), Span(15,16,List(6),down,down,false), Span(14,15,List(7),drove,drive-02,false), Span(13,14,List(8),time,time,false), Span(11,12,List(9),station,station,false), Span(6,7,List(10),he,he,false), Span(5,6,List(12, 11),friend,(have-rel-role-91 :ARG2 friend),false), Span(3,4,List(13),promised,promise-01,false)),Map(2 -> train, 5 -> platform, 12 -> friend, 8 -> time, 7 -> drive-02, 1 -> tell-01, 4 -> and, 11 -> have-rel-role-91, 6 -> down, 0 -> yesterday, 9 -> station, 3 -> crash-01, 10 -> he, 13 -> promise-01),Map(h -> he, h2 -> have-rel-role-91, t -> tell-01, p2 -> promise-01, s -> station, d -> down, t3 -> time, y -> yesterday, p -> platform, a -> and, d2 -> drive-02, t2 -> train, c -> crash-01, f -> friend))),[Ljava.lang.String;@2b9e774d,Annotation([Ljava.lang.String;@30aa769a,[Ljava.lang.String;@750916c,[Ljava.lang.String;@3a7b4d34),Annotation([Ljava.lang.String;@7509aeea,[Ljava.lang.String;@4ebac0ad,[Ledu.cmu.lti.nlp.amr.Dependency;@46bfc63c),Annotation([Ljava.lang.String;@586fb16d,[Ljava.lang.String;@ce99877,[Ljava.lang.String;@3c18b340),Annotation([Ljava.lang.String;@79a04d92,[Ljava.lang.String;@b44eaa0,[Ledu.cmu.lti.nlp.amr.Entity;@5987b427))
AMR:
(a / and, op, c / crash-01)
(a / and, op, d2 / drive-02)
(c / crash-01, ARG1, t2 / train)
(d2 / drive-02, ARG0, t3 / time)
(d2 / drive-02, ARG1, p / platform)
(d2 / drive-02, ARG2, d / down)
(h2 / have-rel-role-91, ARG0, h / he)
(h2 / have-rel-role-91, ARG2, f / friend)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, d2 / drive-02)
(s / station, mod, t3 / time)
(t / tell-01, ARG1, t2 / train)
(t / tell-01, time, y / yesterday)

Decoded in 123,154 microseconds
Sentence: as some 3000 east german wouldbe emigrants poured into west germanys embassy in prague yesterday the east germans apparently furious at the latest development accused west germany of gross breach of trust claiming that bonn had promised to stop the flow

NER Entity: (thing :name (name :op "german"))
NER Entity: (country :name (name :op "germany"))
Spans:
Span 2-3:  3000 => (date-entity :year 3000)
Span 24-25:  accused => accuse-01
Span 18-19:  apparently => apparent
Span 29-30:  breach => breach-01
Span 32-33:  claiming => claim-01
Span 23-24:  development => develop-02
Span 16-17:  east => east
Span 3-4:  east => east
Span 11-12:  embassy => embassy
Span 40-41:  flow => flow-01
Span 19-20:  furious => furious
Span 17-18:  germans => (person :mod (country :name (name :op "Germany")))
Span 28-29:  gross => gross
Span 22-23:  latest => (late :degree most)
Span 7-8:  poured => pour-01
Span 36-37:  promised => promise-01
Span 1-2:  some => some
Span 38-39:  stop => stop-01
Span 31-32:  trust => trust-01
Span 25-26:  west => west
Span 9-10:  west => west
Span 14-15:  yesterday => yesterday

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),flow,flow-01,false), Span(38,39,List(1),stop,stop-01,false), Span(36,37,List(2),promised,promise-01,false), Span(32,33,List(3),claiming,claim-01,false), Span(31,32,List(4),trust,trust-01,false), Span(29,30,List(5),breach,breach-01,false), Span(28,29,List(6),gross,gross,false), Span(25,26,List(7),west,west,false), Span(24,25,List(8),accused,accuse-01,false), Span(23,24,List(9),development,develop-02,false), Span(22,23,List(11, 10),latest,(late :degree most),false), Span(19,20,List(12),furious,furious,false), Span(18,19,List(13),apparently,apparent,false), Span(17,18,List(17, 16, 15, 14),germans,(person :mod (country :name (name :op "Germany"))),false), Span(16,17,List(18),east,east,false), Span(14,15,List(19),yesterday,yesterday,false), Span(11,12,List(20),embassy,embassy,false), Span(9,10,List(21),west,west,false), Span(7,8,List(22),poured,pour-01,false), Span(3,4,List(23),east,east,false), Span(2,3,List(25, 24),3000,(date-entity :year 3000),false), Span(1,2,List(26),some,some,false)),Map(2 -> promise-01, 5 -> breach-01, 12 -> furious, 8 -> accuse-01, 15 -> country, 21 -> west, 18 -> east, 24 -> date-entity, 7 -> west, 1 -> stop-01, 17 -> "Germany", 23 -> east, 26 -> some, 4 -> trust-01, 11 -> most, 14 -> person, 20 -> embassy, 6 -> gross, 9 -> develop-02, 0 -> flow-01, 22 -> pour-01, 16 -> name, 19 -> yesterday, 10 -> late, 3 -> claim-01, 25 -> 3000, 13 -> apparent),Map(e -> east, w -> west, n -> name, s2 -> some, t -> trust-01, b -> breach-01, p2 -> person, e2 -> embassy, s -> stop-01, m -> most, d -> develop-02, y -> yesterday, g -> gross, p -> promise-01, a -> accuse-01, d2 -> date-entity, w2 -> west, a2 -> apparent, c -> claim-01, f2 -> furious, l -> late, f -> flow-01, p3 -> pour-01, e3 -> east, 3 -> 3000, c2 -> country))),[Ljava.lang.String;@3c992916,Annotation([Ljava.lang.String;@6b58826e,[Ljava.lang.String;@7fdb3ad0,[Ljava.lang.String;@11f26f44),Annotation([Ljava.lang.String;@4366e290,[Ljava.lang.String;@17a47e82,[Ledu.cmu.lti.nlp.amr.Dependency;@306d94ee),Annotation([Ljava.lang.String;@6a4cae18,[Ljava.lang.String;@5039e02d,[Ljava.lang.String;@7acd381),Annotation([Ljava.lang.String;@6371be16,[Ljava.lang.String;@4076c95b,[Ledu.cmu.lti.nlp.amr.Entity;@369d966d))
AMR:
(a / accuse-01, ARG0, e3 / east)
(a / accuse-01, ARG1, d / develop-02)
(a / accuse-01, ARG2, b / breach-01)
(b / breach-01, ARG1, t / trust-01)
(b / breach-01, mod, g / gross)
(c / claim-01, ARG0, d / develop-02)
(c / claim-01, ARG1, p / promise-01)
(c2 / country, name, n / name)
(d / develop-02, ARG1, s2 / some)
(d / develop-02, time, l / late)
(d2 / date-entity, year, 3 / 3000)
(e2 / embassy, poss, p2 / person)
(e2 / embassy, topic, y / yesterday)
(f / flow-01, ARG1, w / west)
(f2 / furious, mod, a2 / apparent)
(f2 / furious, purpose, d / develop-02)
(l / late, degree, m / most)
(l / late, op, d2 / date-entity)
(n / name, op, "Germany")
(p / promise-01, ARG1, s / stop-01)
(p2 / person, mod, c2 / country)
(p2 / person, mod, e / east)
(p2 / person, mod, f2 / furious)
(p3 / pour-01, ARG0, p2 / person)
(p3 / pour-01, ARG1, w2 / west)
(s / stop-01, ARG1, f / flow-01)

Decoded in 868,959 microseconds
Sentence: cable and wireless mercurys parent has been virtually promised a licence and one or two more will be granted by the government by the beginning of next year

Spans:
Span 11-12:  and => and
Span 1-2:  and => and
Span 24-25:  beginning => begin-01
Span 0-1:  cable => cable
Span 18-19:  granted => grant-01
Span 10-11:  licence => licence
Span 26-27:  next => next
Span 13-14:  or => or
Span 4-5:  parent => parent
Span 8-9:  promised => promise-01
Span 14-15:  two => 2
Span 7-8:  virtually => virtual
Span 2-3:  wireless => wireless
Span 27-28:  year => year

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),year,year,false), Span(26,27,List(1),next,next,false), Span(24,25,List(2),beginning,begin-01,false), Span(18,19,List(3),granted,grant-01,false), Span(14,15,List(4),two,2,false), Span(13,14,List(5),or,or,false), Span(11,12,List(6),and,and,false), Span(10,11,List(7),licence,licence,false), Span(8,9,List(8),promised,promise-01,false), Span(7,8,List(9),virtually,virtual,false), Span(4,5,List(10),parent,parent,false), Span(2,3,List(11),wireless,wireless,false), Span(1,2,List(12),and,and,false), Span(0,1,List(13),cable,cable,false)),Map(2 -> begin-01, 5 -> or, 12 -> and, 8 -> promise-01, 7 -> licence, 1 -> next, 4 -> 2, 11 -> wireless, 6 -> and, 0 -> year, 9 -> virtual, 3 -> grant-01, 10 -> parent, 13 -> cable),Map(n -> next, w -> wireless, 2 -> 2, b -> begin-01, p2 -> parent, v -> virtual, y -> year, g -> grant-01, p -> promise-01, a -> and, a2 -> and, c -> cable, l -> licence, o -> or))),[Ljava.lang.String;@23feea1e,Annotation([Ljava.lang.String;@34bc6a08,[Ljava.lang.String;@3dd54e44,[Ljava.lang.String;@7f057212),Annotation([Ljava.lang.String;@3e843ce4,[Ljava.lang.String;@5bb9bccc,[Ledu.cmu.lti.nlp.amr.Dependency;@7f1a241f),Annotation([Ljava.lang.String;@d39b06a,[Ljava.lang.String;@466d05ee,[Ljava.lang.String;@1fa07061),Annotation([Ljava.lang.String;@5e32007f,[Ljava.lang.String;@24bec229,[Ledu.cmu.lti.nlp.amr.Entity;@67bd2497))
AMR:
(a2 / and, op, b / begin-01)
(a2 / and, op, c / cable)
(a2 / and, op, w / wireless)
(b / begin-01, ARG1, y / year)
(g / grant-01, ARG1, 2 / 2)
(g / grant-01, time, b / begin-01)
(o / or, op, l / licence)
(p / promise-01, ARG0, l / licence)
(p / promise-01, ARG1, p2 / parent)
(p / promise-01, ARG2, a2 / and)
(p / promise-01, ARG3, a / and)
(p / promise-01, time, v / virtual)
(y / year, mod, n / next)

Decoded in 520,105 microseconds
Sentence: furthermore if it is not permissible to have bonds based on immorality ones right to promise does not include the right to promise to perform immoral acts

Spans:
Span 9-10:  based => base-01
Span 8-9:  bonds => bond
Span 25-26:  immoral => immoral
Span 18-19:  include => include-01
Span 2-3:  it => it
Span 12-13:  ones => one
Span 24-25:  perform => perform-01
Span 5-6:  permissible => permit-01
Span 22-23:  promise => promise-01
Span 15-16:  promise => promise-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),immoral,immoral,false), Span(24,25,List(1),perform,perform-01,false), Span(22,23,List(2),promise,promise-01,false), Span(18,19,List(3),include,include-01,false), Span(15,16,List(4),promise,promise-01,false), Span(12,13,List(5),ones,one,false), Span(9,10,List(6),based,base-01,false), Span(8,9,List(7),bonds,bond,false), Span(5,6,List(8),permissible,permit-01,false), Span(2,3,List(9),it,it,false)),Map(2 -> promise-01, 5 -> one, 8 -> permit-01, 7 -> bond, 1 -> perform-01, 4 -> promise-01, 6 -> base-01, 9 -> it, 0 -> immoral, 3 -> include-01),Map(b -> base-01, b2 -> bond, p2 -> promise-01, i3 -> it, p -> perform-01, p4 -> permit-01, i2 -> include-01, i -> immoral, o -> one, p3 -> promise-01))),[Ljava.lang.String;@32ad6ab6,Annotation([Ljava.lang.String;@1738ecb8,[Ljava.lang.String;@1a3d2ff1,[Ljava.lang.String;@271684ac),Annotation([Ljava.lang.String;@37604c40,[Ljava.lang.String;@132e1a27,[Ledu.cmu.lti.nlp.amr.Dependency;@37b70047),Annotation([Ljava.lang.String;@4f7351e4,[Ljava.lang.String;@1c05787c,[Ljava.lang.String;@2b292343),Annotation([Ljava.lang.String;@19ca19d8,[Ljava.lang.String;@2366c122,[Ledu.cmu.lti.nlp.amr.Entity;@2f11b156))
AMR:
(b / base-01, ARG0, i / immoral)
(b / base-01, ARG1, b2 / bond)
(b / base-01, location, o / one)
(i2 / include-01, ARG0, o / one)
(i2 / include-01, ARG1, p2 / promise-01)
(p2 / promise-01, ARG1, p / perform-01)
(p3 / promise-01, ARG0, o / one)
(p4 / permit-01, ARG0, i3 / it)
(p4 / permit-01, ARG1, b2 / bond)

Decoded in 176,704 microseconds
Sentence: hrer has decided upon the extermination of jewry and promised it

Spans:
Span 8-9:  and => and
Span 2-3:  decided => decide-01
Span 10-11:  it => it
Span 9-10:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),it,it,false), Span(9,10,List(1),promised,promise-01,false), Span(8,9,List(2),and,and,false), Span(2,3,List(3),decided,decide-01,false)),Map(2 -> and, 1 -> promise-01, 0 -> it, 3 -> decide-01),Map(d -> decide-01, p -> promise-01, a -> and, i -> it))),[Ljava.lang.String;@32919d3e,Annotation([Ljava.lang.String;@75ea6b61,[Ljava.lang.String;@712fe9c1,[Ljava.lang.String;@9bb7f5),Annotation([Ljava.lang.String;@6f4a3622,[Ljava.lang.String;@71282b42,[Ledu.cmu.lti.nlp.amr.Dependency;@4303418),Annotation([Ljava.lang.String;@78ac15cd,[Ljava.lang.String;@69cb839f,[Ljava.lang.String;@302e71fc),Annotation([Ljava.lang.String;@393d701a,[Ljava.lang.String;@708ad851,[Ledu.cmu.lti.nlp.amr.Entity;@2b7fe790))
AMR:
(a / and, op, d / decide-01)
(a / and, op, p / promise-01)
(p / promise-01, ARG1, i / it)

Decoded in 12,527 microseconds
Sentence: on the other hand since i have promised my neighbour to saw off a branch overhanging a corner of his garden this week i have a duty and therefore i ought to do so

Spans:
Span 27-28:  and => and
Span 14-15:  branch => branch
Span 17-18:  corner => corner
Span 26-27:  duty => duty
Span 20-21:  garden => garden
Span 3-4:  hand => hand
Span 29-30:  i => i
Span 23-24:  i => i
Span 5-6:  i => i
Span 9-10:  neighbour => neighbor-01
Span 12-13:  off => off
Span 2-3:  other => other
Span 7-8:  promised => promise-01
Span 11-12:  saw => see-01
Span 4-5:  since => since
Span 33-34:  so => so
Span 21-22:  this => this
Span 22-23:  week => week

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),so,so,false), Span(29,30,List(1),i,i,false), Span(27,28,List(2),and,and,false), Span(26,27,List(3),duty,duty,false), Span(23,24,List(4),i,i,false), Span(22,23,List(5),week,week,false), Span(21,22,List(6),this,this,false), Span(20,21,List(7),garden,garden,false), Span(17,18,List(8),corner,corner,false), Span(14,15,List(9),branch,branch,false), Span(12,13,List(10),off,off,false), Span(11,12,List(11),saw,see-01,false), Span(9,10,List(12),neighbour,neighbor-01,false), Span(7,8,List(13),promised,promise-01,false), Span(5,6,List(14),i,i,false), Span(4,5,List(15),since,since,false), Span(3,4,List(16),hand,hand,false), Span(2,3,List(17),other,other,false)),Map(2 -> and, 5 -> week, 12 -> neighbor-01, 15 -> since, 8 -> corner, 7 -> garden, 17 -> other, 1 -> i, 4 -> i, 11 -> see-01, 14 -> i, 6 -> this, 0 -> so, 9 -> branch, 16 -> hand, 3 -> duty, 10 -> off, 13 -> promise-01),Map(w -> week, n -> neighbor-01, h -> hand, s2 -> see-01, t -> this, b -> branch, s -> so, d -> duty, i3 -> i, p -> promise-01, g -> garden, a -> and, o2 -> other, i2 -> i, i -> i, s3 -> since, c -> corner, o -> off))),[Ljava.lang.String;@5f86961,Annotation([Ljava.lang.String;@77ce6256,[Ljava.lang.String;@e9a398d,[Ljava.lang.String;@2f385f78),Annotation([Ljava.lang.String;@1e03d780,[Ljava.lang.String;@e3923e5,[Ledu.cmu.lti.nlp.amr.Dependency;@496396ae),Annotation([Ljava.lang.String;@29399f26,[Ljava.lang.String;@5ff8cef,[Ljava.lang.String;@4c7da1fc),Annotation([Ljava.lang.String;@4c15ce9f,[Ljava.lang.String;@2bb04fbf,[Ledu.cmu.lti.nlp.amr.Entity;@44439b01))
AMR:
(a / and, op, d / duty)
(a / and, op, w / week)
(b / branch, poss, w / week)
(d / duty, example, i2 / i)
(g / garden, part, c / corner)
(g / garden, poss, b / branch)
(h / hand, mod, o2 / other)
(n / neighbor-01, ARG1, s2 / see-01)
(p / promise-01, ARG0, i3 / i)
(p / promise-01, ARG1, n / neighbor-01)
(s2 / see-01, ARG0, i / i)
(s2 / see-01, ARG1, b / branch)
(s2 / see-01, location, o / off)
(s2 / see-01, mod, s / so)
(s3 / since, op, p / promise-01)
(s3 / since, quant, h / hand)
(w / week, mod, t / this)

Decoded in 444,620 microseconds
Sentence: however though promised no coffee appeared in fact nothing appeared so we trooped back inside for the final session of that day

Spans:
Span 9-10:  appeared => appear-01
Span 5-6:  appeared => appear-01
Span 13-14:  back => back
Span 4-5:  coffee => coffee
Span 21-22:  day => day
Span 7-8:  fact => fact
Span 17-18:  final => final
Span 14-15:  inside => inside
Span 3-4:  no => -
Span 8-9:  nothing => nothing
Span 2-3:  promised => promise-01
Span 18-19:  session => session
Span 10-11:  so => so
Span 11-12:  we => we

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),day,day,false), Span(18,19,List(1),session,session,false), Span(17,18,List(2),final,final,false), Span(14,15,List(3),inside,inside,false), Span(13,14,List(4),back,back,false), Span(11,12,List(5),we,we,false), Span(10,11,List(6),so,so,false), Span(9,10,List(7),appeared,appear-01,false), Span(8,9,List(8),nothing,nothing,false), Span(7,8,List(9),fact,fact,false), Span(5,6,List(10),appeared,appear-01,false), Span(4,5,List(11),coffee,coffee,false), Span(3,4,List(12),no,-,false), Span(2,3,List(13),promised,promise-01,false)),Map(2 -> final, 5 -> we, 12 -> -, 8 -> nothing, 7 -> appear-01, 1 -> session, 4 -> back, 11 -> coffee, 6 -> so, 0 -> day, 9 -> fact, 3 -> inside, 10 -> appear-01, 13 -> promise-01),Map(w -> we, n -> nothing, s2 -> so, b -> back, s -> session, d -> day, p -> promise-01, a -> appear-01, i -> inside, a2 -> appear-01, - -> -, c -> coffee, f2 -> fact, f -> final))),[Ljava.lang.String;@327581aa,Annotation([Ljava.lang.String;@4093d9c7,[Ljava.lang.String;@2abeb8f0,[Ljava.lang.String;@4f5faa7c),Annotation([Ljava.lang.String;@11b1db9a,[Ljava.lang.String;@33c86489,[Ledu.cmu.lti.nlp.amr.Dependency;@294078ee),Annotation([Ljava.lang.String;@47c3666a,[Ljava.lang.String;@6d78ddf4,[Ljava.lang.String;@1a33f652),Annotation([Ljava.lang.String;@49708eee,[Ljava.lang.String;@7cb7d0ec,[Ledu.cmu.lti.nlp.amr.Entity;@7f575ec))
AMR:
(a / appear-01, ARG0, c / coffee)
(a / appear-01, ARG1, n / nothing)
(a / appear-01, manner, s2 / so)
(a2 / appear-01, ARG1, a / appear-01)
(c / coffee, polarity, - / -)
(i / inside, mod, b / back)
(n / nothing, mod, f2 / fact)
(p / promise-01, ARG0, w / we)
(p / promise-01, ARG1, a2 / appear-01)
(s / session, mod, f / final)
(s / session, time, d / day)
(s2 / so, op, i / inside)
(w / we, prep-in, s / session)

Decoded in 336,163 microseconds
Sentence: he argues that a vote for the coalition of the left in cephalonia is effectively a vote for new democracy and stresses mr papandreou has promised to act as a responsible greek dash

NER Entity: (thing :name (name :op "greek"))
Spans:
Span 27-28:  act => act-02
Span 20-21:  and => and
Span 1-2:  argues => argue-01
Span 7-8:  coalition => coalition
Span 19-20:  democracy => democracy
Span 14-15:  effectively => effective
Span 0-1:  he => he
Span 18-19:  new => new
Span 25-26:  promised => promise-01
Span 30-31:  responsible => responsible-41
Span 21-22:  stresses => stress-01
Span 16-17:  vote => vote-01
Span 4-5:  vote => vote-01

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),responsible,responsible-41,false), Span(27,28,List(1),act,act-02,false), Span(25,26,List(2),promised,promise-01,false), Span(21,22,List(3),stresses,stress-01,false), Span(20,21,List(4),and,and,false), Span(19,20,List(5),democracy,democracy,false), Span(18,19,List(6),new,new,false), Span(16,17,List(7),vote,vote-01,false), Span(14,15,List(8),effectively,effective,false), Span(7,8,List(9),coalition,coalition,false), Span(4,5,List(10),vote,vote-01,false), Span(1,2,List(11),argues,argue-01,false), Span(0,1,List(12),he,he,false)),Map(2 -> promise-01, 5 -> democracy, 12 -> he, 8 -> effective, 7 -> vote-01, 1 -> act-02, 4 -> and, 11 -> argue-01, 6 -> new, 0 -> responsible-41, 9 -> coalition, 3 -> stress-01, 10 -> vote-01),Map(e -> effective, n -> new, v2 -> vote-01, h -> he, a3 -> argue-01, s -> stress-01, v -> vote-01, d -> democracy, p -> promise-01, a -> act-02, r -> responsible-41, a2 -> and, c -> coalition))),[Ljava.lang.String;@7c03092a,Annotation([Ljava.lang.String;@2b4ee401,[Ljava.lang.String;@485b13dd,[Ljava.lang.String;@53753747),Annotation([Ljava.lang.String;@3480411f,[Ljava.lang.String;@50337526,[Ledu.cmu.lti.nlp.amr.Dependency;@62503aec),Annotation([Ljava.lang.String;@14c8e61,[Ljava.lang.String;@491782f1,[Ljava.lang.String;@2695c1b4),Annotation([Ljava.lang.String;@31e02436,[Ljava.lang.String;@72696ece,[Ledu.cmu.lti.nlp.amr.Entity;@67e9d110))
AMR:
(a2 / and, op, p / promise-01)
(a2 / and, op, r / responsible-41)
(a2 / and, op, s / stress-01)
(a3 / argue-01, ARG0, h / he)
(d / democracy, mod, n / new)
(p / promise-01, ARG1, e / effective)
(p / promise-01, ARG2, a / act-02)
(s / stress-01, ARG0, h / he)
(v / vote-01, ARG0, h / he)
(v / vote-01, ARG1, d / democracy)
(v / vote-01, ARG2, v2 / vote-01)
(v2 / vote-01, ARG1, c / coalition)

Decoded in 471,179 microseconds
Sentence: he promised similar proposals next spring for lorries

Spans:
Span 0-1:  he => he
Span 4-5:  next => next
Span 1-2:  promised => promise-01
Span 3-4:  proposals => (thing :ARG1-of propose-01)
Span 5-6:  spring => spring

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),spring,spring,false), Span(4,5,List(1),next,next,false), Span(3,4,List(3, 2),proposals,(thing :ARG1-of propose-01),false), Span(1,2,List(4),promised,promise-01,false), Span(0,1,List(5),he,he,false)),Map(2 -> thing, 5 -> he, 1 -> next, 4 -> promise-01, 0 -> spring, 3 -> propose-01),Map(n -> next, h -> he, t -> thing, p2 -> promise-01, s -> spring, p -> propose-01))),[Ljava.lang.String;@279ca6bc,Annotation([Ljava.lang.String;@1d8694f5,[Ljava.lang.String;@6e9d6ff7,[Ljava.lang.String;@2221f9dd),Annotation([Ljava.lang.String;@649b2dac,[Ljava.lang.String;@7d3aace,[Ledu.cmu.lti.nlp.amr.Dependency;@5972be65),Annotation([Ljava.lang.String;@7c3206c3,[Ljava.lang.String;@385a2be8,[Ljava.lang.String;@27f8a93f),Annotation([Ljava.lang.String;@362f7b99,[Ljava.lang.String;@675b9599,[Ledu.cmu.lti.nlp.amr.Entity;@2dbaa4d2))
AMR:
(p / propose-01, ARG1, t / thing)
(p / propose-01, time, s / spring)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, t / thing)
(s / spring, mod, n / next)

Decoded in 14,452 microseconds
Sentence: she promised that nothing would change that she would come home every friday night that she loved him as she had before yet they both knew she was kidding herself

Spans:
Span 21-22:  before => before
Span 24-25:  both => both
Span 5-6:  change => change-01
Span 11-12:  every => every
Span 12-13:  friday => friday
Span 10-11:  home => home
Span 28-29:  kidding => kid-01
Span 25-26:  knew => know-01
Span 16-17:  loved => love-01
Span 13-14:  night => night
Span 3-4:  nothing => nothing
Span 1-2:  promised => promise-01
Span 26-27:  she => she
Span 19-20:  she => she
Span 15-16:  she => she
Span 7-8:  she => she
Span 0-1:  she => she
Span 23-24:  they => they
Span 22-23:  yet => yet

Langrangian relaxation converged after 89 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),kidding,kid-01,false), Span(26,27,List(1),she,she,false), Span(25,26,List(2),knew,know-01,false), Span(24,25,List(3),both,both,false), Span(23,24,List(4),they,they,false), Span(22,23,List(5),yet,yet,false), Span(21,22,List(6),before,before,false), Span(19,20,List(7),she,she,false), Span(16,17,List(8),loved,love-01,false), Span(15,16,List(9),she,she,false), Span(13,14,List(10),night,night,false), Span(12,13,List(11),friday,friday,false), Span(11,12,List(12),every,every,false), Span(10,11,List(13),home,home,false), Span(7,8,List(14),she,she,false), Span(5,6,List(15),change,change-01,false), Span(3,4,List(16),nothing,nothing,false), Span(1,2,List(17),promised,promise-01,false), Span(0,1,List(18),she,she,false)),Map(2 -> know-01, 5 -> yet, 12 -> every, 15 -> change-01, 8 -> love-01, 18 -> she, 7 -> she, 17 -> promise-01, 1 -> she, 4 -> they, 11 -> friday, 14 -> she, 6 -> before, 0 -> kid-01, 9 -> she, 16 -> nothing, 3 -> both, 10 -> night, 13 -> home),Map(s5 -> she, e -> every, k2 -> know-01, n -> night, h -> home, s2 -> she, k -> kid-01, b -> both, t -> they, b2 -> before, s -> she, s4 -> she, p -> promise-01, y -> yet, c -> change-01, s3 -> she, l -> love-01, f -> friday, n2 -> nothing))),[Ljava.lang.String;@439c9b66,Annotation([Ljava.lang.String;@5e9e6837,[Ljava.lang.String;@71cc2368,[Ljava.lang.String;@1128bb36),Annotation([Ljava.lang.String;@91adf07,[Ljava.lang.String;@4328493c,[Ledu.cmu.lti.nlp.amr.Dependency;@9e02496),Annotation([Ljava.lang.String;@5a81f8ea,[Ljava.lang.String;@afcf912,[Ljava.lang.String;@66441260),Annotation([Ljava.lang.String;@7f129113,[Ljava.lang.String;@1bf2b792,[Ledu.cmu.lti.nlp.amr.Entity;@5bf1e093))
AMR:
(c / change-01, ARG0, s5 / she)
(c / change-01, ARG1, n2 / nothing)
(c / change-01, ARG2, s4 / she)
(h / home, poss, s2 / she)
(k / kid-01, ARG0, t / they)
(k / kid-01, ARG1, s / she)
(k2 / know-01, ARG0, s2 / she)
(k2 / know-01, ARG1, k / kid-01)
(k2 / know-01, mod, y / yet)
(k2 / know-01, time, b2 / before)
(l / love-01, ARG0, s4 / she)
(l / love-01, ARG1, s2 / she)
(l / love-01, ARG2, s3 / she)
(n / night, beneficiary, s2 / she)
(n / night, mod, e / every)
(p / promise-01, ARG0, s5 / she)
(p / promise-01, ARG1, f / friday)
(t / they, mod, b / both)

Decoded in 1,640,942 microseconds
Sentence: at the end of this year as long since promised we shall commence a 31 2 year programme of professional explanation and demonstration of the safety of our shuttle system

Spans:
Span 15-16:  2 => 2
Span 21-22:  and => and
Span 12-13:  commence => commence-01
Span 22-23:  demonstration => demonstrate-01
Span 20-21:  explanation => explain-01
Span 19-20:  professional => professional
Span 17-18:  programme => program
Span 9-10:  promised => promise-01
Span 25-26:  safety => safe-41
Span 28-29:  shuttle => shuttle
Span 8-9:  since => since
Span 29-30:  system => system
Span 4-5:  this => this
Span 10-11:  we => we
Span 16-17:  year => year
Span 5-6:  year => year

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),system,system,false), Span(28,29,List(1),shuttle,shuttle,false), Span(25,26,List(2),safety,safe-41,false), Span(22,23,List(3),demonstration,demonstrate-01,false), Span(21,22,List(4),and,and,false), Span(20,21,List(5),explanation,explain-01,false), Span(19,20,List(6),professional,professional,false), Span(17,18,List(7),programme,program,false), Span(16,17,List(8),year,year,false), Span(15,16,List(9),2,2,false), Span(12,13,List(10),commence,commence-01,false), Span(10,11,List(11),we,we,false), Span(9,10,List(12),promised,promise-01,false), Span(8,9,List(13),since,since,false), Span(5,6,List(14),year,year,false), Span(4,5,List(15),this,this,false)),Map(2 -> safe-41, 5 -> explain-01, 12 -> promise-01, 15 -> this, 8 -> year, 7 -> program, 1 -> shuttle, 4 -> and, 11 -> we, 14 -> year, 6 -> professional, 0 -> system, 9 -> 2, 3 -> demonstrate-01, 10 -> commence-01, 13 -> since),Map(e -> explain-01, w -> we, 2 -> 2, s2 -> shuttle, t -> this, p2 -> program, s -> system, s4 -> since, d -> demonstrate-01, p -> professional, y -> year, a -> and, s3 -> safe-41, c -> commence-01, p3 -> promise-01, y2 -> year))),[Ljava.lang.String;@64cf020d,Annotation([Ljava.lang.String;@528fd72f,[Ljava.lang.String;@61787901,[Ljava.lang.String;@2c5062a5),Annotation([Ljava.lang.String;@517c555d,[Ljava.lang.String;@39c87676,[Ledu.cmu.lti.nlp.amr.Dependency;@17d95a9d),Annotation([Ljava.lang.String;@3ecc05a6,[Ljava.lang.String;@4486f57f,[Ljava.lang.String;@785f87fe),Annotation([Ljava.lang.String;@47d9726f,[Ljava.lang.String;@14e7fa43,[Ledu.cmu.lti.nlp.amr.Entity;@9df4f6e))
AMR:
(a / and, op, d / demonstrate-01)
(c / commence-01, ARG0, w / we)
(c / commence-01, ARG1, p2 / program)
(d / demonstrate-01, ARG0, 2 / 2)
(d / demonstrate-01, ARG1, s3 / safe-41)
(e / explain-01, ARG1, a / and)
(e / explain-01, mod, p / professional)
(p2 / program, mod, y / year)
(p2 / program, purpose, e / explain-01)
(p3 / promise-01, ARG0, y2 / year)
(p3 / promise-01, ARG1, c / commence-01)
(s / system, mod, s2 / shuttle)
(s3 / safe-41, ARG1, s / system)
(s4 / since, op, p3 / promise-01)
(y2 / year, mod, t / this)

Decoded in 215,517 microseconds
Sentence: furthermore if it is not permissible to have bonds based on immorality ones right to promise does not include the right to promise to perform immoral acts, the right to promise is no doubt further qualified

Spans:
Span 9-10:  based => base-01
Span 8-9:  bonds => bond
Span 34-35:  doubt => doubt-01
Span 35-36:  further => further
Span 25-26:  immoral => immoral
Span 18-19:  include => include-01
Span 2-3:  it => it
Span 33-34:  no => -
Span 12-13:  ones => one
Span 24-25:  perform => perform-01
Span 5-6:  permissible => permit-01
Span 31-32:  promise => promise-01
Span 22-23:  promise => promise-01
Span 15-16:  promise => promise-01
Span 36-37:  qualified => qualify-02

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),qualified,qualify-02,false), Span(35,36,List(1),further,further,false), Span(34,35,List(2),doubt,doubt-01,false), Span(33,34,List(3),no,-,false), Span(31,32,List(4),promise,promise-01,false), Span(25,26,List(5),immoral,immoral,false), Span(24,25,List(6),perform,perform-01,false), Span(22,23,List(7),promise,promise-01,false), Span(18,19,List(8),include,include-01,false), Span(15,16,List(9),promise,promise-01,false), Span(12,13,List(10),ones,one,false), Span(9,10,List(11),based,base-01,false), Span(8,9,List(12),bonds,bond,false), Span(5,6,List(13),permissible,permit-01,false), Span(2,3,List(14),it,it,false)),Map(2 -> doubt-01, 5 -> immoral, 12 -> bond, 8 -> include-01, 7 -> promise-01, 1 -> further, 4 -> promise-01, 11 -> base-01, 14 -> it, 6 -> perform-01, 0 -> qualify-02, 9 -> promise-01, 3 -> -, 10 -> one, 13 -> permit-01),Map(q -> qualify-02, p5 -> permit-01, b -> base-01, b2 -> bond, p2 -> perform-01, d -> doubt-01, i3 -> it, p -> promise-01, p4 -> promise-01, i2 -> include-01, i -> immoral, - -> -, f -> further, o -> one, p3 -> promise-01))),[Ljava.lang.String;@2a792260,Annotation([Ljava.lang.String;@76bfe268,[Ljava.lang.String;@2fa956c0,[Ljava.lang.String;@167e6fb2),Annotation([Ljava.lang.String;@46d71aa7,[Ljava.lang.String;@5416ee46,[Ledu.cmu.lti.nlp.amr.Dependency;@2d7560cb),Annotation([Ljava.lang.String;@7525c6bd,[Ljava.lang.String;@31ade61,[Ljava.lang.String;@58fdb3de),Annotation([Ljava.lang.String;@782be176,[Ljava.lang.String;@8df479d,[Ledu.cmu.lti.nlp.amr.Entity;@7ad698f7))
AMR:
(b / base-01, ARG1, b2 / bond)
(b / base-01, location, o / one)
(d / doubt-01, ARG1, q / qualify-02)
(d / doubt-01, polarity, - / -)
(i2 / include-01, ARG0, o / one)
(i2 / include-01, ARG1, p3 / promise-01)
(p / promise-01, ARG1, i / immoral)
(p3 / promise-01, ARG1, p2 / perform-01)
(p4 / promise-01, ARG0, o / one)
(p4 / promise-01, ARG1, q / qualify-02)
(p5 / permit-01, ARG0, i3 / it)
(p5 / permit-01, ARG1, b2 / bond)
(q / qualify-02, ARG1, p / promise-01)
(q / qualify-02, degree, f / further)

Decoded in 381,035 microseconds
Sentence: you know ellip   she introduced the two bolivians and after a few minutes of awkward small talk patrick and his partner returned to the ballroom for what they promised was one last dance

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = you know ellip   she introduced the two bolivians and after a few minutes of awkward small talk patrick and his partner returned to the ballroom for what they promised was one last dance
myTokenized = you know ellip she introduced the two bolivians and after a few minutes of awkward small talk patrick and his partner returned to the ballroom for what they promised was one last dance
i = 3
prefix = List(you, know, ellip, she)
regexr = \Qy\E ?\Qo\E ?\Qu\E ?\Qk\E ?\Qn\E ?\Qo\E ?\Qw\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qp\E ?\Qs\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the social democrats called a general strike in protest denounced by the leadership of the petrograd soviet as mob rule which the russian governor general banned promising to put down all disorders by force

NER Entity: (country :name (name :op "petrograd"))
NER Entity: (country :name (name :op "soviet"))
NER Entity: (thing :name (name :op "russian"))
Spans:
Span 30-31:  all => all
Span 25-26:  banned => ban-01
Span 2-3:  democrats => democrat
Span 9-10:  denounced => denounce-01
Span 29-30:  down => down
Span 33-34:  force => force
Span 24-25:  general => general
Span 5-6:  general => general
Span 23-24:  governor => (have-org-role-91 :ARG2 governor)
Span 18-19:  mob => mob
Span 26-27:  promising => promise-01
Span 8-9:  protest => protest-01
Span 19-20:  rule => rule-03
Span 1-2:  social => society
Span 6-7:  strike => strike-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),force,force,false), Span(30,31,List(1),all,all,false), Span(29,30,List(2),down,down,false), Span(26,27,List(3),promising,promise-01,false), Span(25,26,List(4),banned,ban-01,false), Span(24,25,List(5),general,general,false), Span(23,24,List(7, 6),governor,(have-org-role-91 :ARG2 governor),false), Span(19,20,List(8),rule,rule-03,false), Span(18,19,List(9),mob,mob,false), Span(9,10,List(10),denounced,denounce-01,false), Span(8,9,List(11),protest,protest-01,false), Span(6,7,List(12),strike,strike-01,false), Span(5,6,List(13),general,general,false), Span(2,3,List(14),democrats,democrat,false), Span(1,2,List(15),social,society,false)),Map(2 -> down, 5 -> general, 12 -> strike-01, 15 -> society, 8 -> rule-03, 7 -> governor, 1 -> all, 4 -> ban-01, 11 -> protest-01, 14 -> democrat, 6 -> have-org-role-91, 0 -> force, 9 -> mob, 3 -> promise-01, 10 -> denounce-01, 13 -> general),Map(g3 -> general, h -> have-org-role-91, s2 -> society, b -> ban-01, d3 -> democrat, p2 -> protest-01, s -> strike-01, d -> down, m -> mob, g2 -> governor, p -> promise-01, g -> general, a -> all, d2 -> denounce-01, r -> rule-03, f -> force))),[Ljava.lang.String;@215060fe,Annotation([Ljava.lang.String;@240fd4c8,[Ljava.lang.String;@b5aa8f7,[Ljava.lang.String;@6d0af5f3),Annotation([Ljava.lang.String;@6a995c72,[Ljava.lang.String;@7a84770a,[Ledu.cmu.lti.nlp.amr.Dependency;@ea3705d),Annotation([Ljava.lang.String;@c25f12d,[Ljava.lang.String;@efcc796,[Ljava.lang.String;@75935089),Annotation([Ljava.lang.String;@1a8c8ead,[Ljava.lang.String;@1eb0d79,[Ledu.cmu.lti.nlp.amr.Entity;@6ec183ea))
AMR:
(b / ban-01, ARG1, p / promise-01)
(d2 / denounce-01, ARG0, s / strike-01)
(d2 / denounce-01, ARG1, b / ban-01)
(d3 / democrat, mod, s2 / society)
(h / have-org-role-91, ARG1, f / force)
(h / have-org-role-91, ARG2, g2 / governor)
(h / have-org-role-91, mod, g / general)
(p / promise-01, ARG0, g / general)
(p / promise-01, ARG1, d / down)
(p2 / protest-01, ARG0, d3 / democrat)
(p2 / protest-01, ARG1, a / all)
(r / rule-03, ARG0, d3 / democrat)
(r / rule-03, ARG1, m / mob)
(s / strike-01, ARG1, p2 / protest-01)
(s / strike-01, mod, g3 / general)

Decoded in 330,237 microseconds
Sentence: shes so convincing that coproducer alex cutler promises  shell break your heart

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = shes so convincing that coproducer alex cutler promises  shell break your heart
myTokenized = shes so convincing that coproducer alex cutler promises shell break your heart
i = 8
prefix = List(shes, so, convincing, that, coproducer, alex, cutler, promises, shell)
regexr = \Qs\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qs\E ?\Qo\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qv\E ?\Qi\E ?\Qn\E ?\Qc\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qc\E ?\Qo\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qd\E ?\Qu\E ?\Qc\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Ql\E ?\Qe\E ?\Qx\E ?\Qc\E ?\Qu\E ?\Qt\E ?\Ql\E ?\Qe\E ?\Qr\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qs\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: meanwhile the massive technological spinoff from the space programmes promises to change our social and working lives completely during the next two decades

Spans:
Span 14-15:  and => and
Span 11-12:  change => change-01
Span 17-18:  completely => complete
Span 22-23:  decades => (temporal-quantity :unit decade)
Span 16-17:  lives => life
Span 2-3:  massive => massive
Span 0-1:  meanwhile => meanwhile
Span 20-21:  next => next
Span 8-9:  programmes => program
Span 9-10:  promises => promise-01
Span 13-14:  social => society
Span 7-8:  space => space
Span 3-4:  technological => technology
Span 21-22:  two => 2
Span 15-16:  working => work-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),decades,(temporal-quantity :unit decade),false), Span(21,22,List(2),two,2,false), Span(20,21,List(3),next,next,false), Span(17,18,List(4),completely,complete,false), Span(16,17,List(5),lives,life,false), Span(15,16,List(6),working,work-01,false), Span(14,15,List(7),and,and,false), Span(13,14,List(8),social,society,false), Span(11,12,List(9),change,change-01,false), Span(9,10,List(10),promises,promise-01,false), Span(8,9,List(11),programmes,program,false), Span(7,8,List(12),space,space,false), Span(3,4,List(13),technological,technology,false), Span(2,3,List(14),massive,massive,false), Span(0,1,List(15),meanwhile,meanwhile,false)),Map(2 -> 2, 5 -> life, 12 -> space, 15 -> meanwhile, 8 -> society, 7 -> and, 1 -> decade, 4 -> complete, 11 -> program, 14 -> massive, 6 -> work-01, 0 -> temporal-quantity, 9 -> change-01, 3 -> next, 10 -> promise-01, 13 -> technology),Map(n -> next, w -> work-01, 2 -> 2, s2 -> space, t -> temporal-quantity, m2 -> meanwhile, p2 -> program, s -> society, m -> massive, d -> decade, p -> promise-01, a -> and, t2 -> technology, c -> complete, l -> life, c2 -> change-01))),[Ljava.lang.String;@103dc250,Annotation([Ljava.lang.String;@46a01a84,[Ljava.lang.String;@392cf455,[Ljava.lang.String;@365d15c6),Annotation([Ljava.lang.String;@1940960c,[Ljava.lang.String;@5f3afac7,[Ledu.cmu.lti.nlp.amr.Dependency;@19264fa9),Annotation([Ljava.lang.String;@2237ed25,[Ljava.lang.String;@5b229b0,[Ljava.lang.String;@73cee4bb),Annotation([Ljava.lang.String;@140aec63,[Ljava.lang.String;@592561dc,[Ledu.cmu.lti.nlp.amr.Entity;@253be03d))
AMR:
(a / and, op, l / life)
(a / and, op, t2 / technology)
(c2 / change-01, ARG0, m2 / meanwhile)
(c2 / change-01, ARG1, a / and)
(c2 / change-01, ARG2, s / society)
(c2 / change-01, manner, c / complete)
(n / next, op, t / temporal-quantity)
(p / promise-01, ARG0, p2 / program)
(p / promise-01, ARG1, s2 / space)
(p / promise-01, ARG2, c2 / change-01)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, d / decade)
(t2 / technology, mod, m / massive)
(w / work-01, ARG0, l / life)
(w / work-01, ARG1, n / next)

Decoded in 335,326 microseconds
Sentence: pensioners are at the mercy of unscrupulous financial advisers who promise a painless way to boost the elderlys meagre income by using their home as security, the elderly are particularly easy prey to smoothtalking financial salesmen who promise an end to their financial worries

Spans:
Span 15-16:  boost => boost-01
Span 31-32:  easy => easy
Span 28-29:  elderly => elderly
Span 43-44:  financial => finance
Span 35-36:  financial => finance
Span 7-8:  financial => finance
Span 23-24:  home => home
Span 19-20:  income => income
Span 18-19:  meagre => meagre
Span 12-13:  painless => painless
Span 30-31:  particularly => particular
Span 0-1:  pensioners => pensioner
Span 32-33:  prey => prey
Span 38-39:  promise => promise-01
Span 10-11:  promise => promise-01
Span 25-26:  security => security
Span 21-22:  using => use-01
Span 13-14:  way => way
Span 44-45:  worries => worry-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),worries,worry-01,false), Span(43,44,List(1),financial,finance,false), Span(38,39,List(2),promise,promise-01,false), Span(35,36,List(3),financial,finance,false), Span(32,33,List(4),prey,prey,false), Span(31,32,List(5),easy,easy,false), Span(30,31,List(6),particularly,particular,false), Span(28,29,List(7),elderly,elderly,false), Span(25,26,List(8),security,security,false), Span(23,24,List(9),home,home,false), Span(21,22,List(10),using,use-01,false), Span(19,20,List(11),income,income,false), Span(18,19,List(12),meagre,meagre,false), Span(15,16,List(13),boost,boost-01,false), Span(13,14,List(14),way,way,false), Span(12,13,List(15),painless,painless,false), Span(10,11,List(16),promise,promise-01,false), Span(7,8,List(17),financial,finance,false), Span(0,1,List(18),pensioners,pensioner,false)),Map(2 -> promise-01, 5 -> easy, 12 -> meagre, 15 -> painless, 8 -> security, 18 -> pensioner, 7 -> elderly, 17 -> finance, 1 -> finance, 4 -> prey, 11 -> income, 14 -> way, 6 -> particular, 0 -> worry-01, 9 -> home, 16 -> promise-01, 3 -> finance, 10 -> use-01, 13 -> boost-01),Map(e -> easy, w -> worry-01, h -> home, p5 -> promise-01, b -> boost-01, p2 -> prey, e2 -> elderly, s -> security, m -> meagre, p -> promise-01, p4 -> painless, f3 -> finance, w2 -> way, i -> income, p6 -> pensioner, f2 -> finance, u -> use-01, f -> finance, p3 -> particular))),[Ljava.lang.String;@660fb8b4,Annotation([Ljava.lang.String;@122765c5,[Ljava.lang.String;@588a71d2,[Ljava.lang.String;@6936bf67),Annotation([Ljava.lang.String;@9503928,[Ljava.lang.String;@71d875de,[Ledu.cmu.lti.nlp.amr.Dependency;@3a227c36),Annotation([Ljava.lang.String;@2e08db0b,[Ljava.lang.String;@4764c6c9,[Ljava.lang.String;@2936dabd),Annotation([Ljava.lang.String;@5052c36e,[Ljava.lang.String;@699c93f4,[Ledu.cmu.lti.nlp.amr.Entity;@26b5ae57))
AMR:
(b / boost-01, ARG1, i / income)
(b / boost-01, manner, e / easy)
(b / boost-01, manner, u / use-01)
(e / easy, mod, p3 / particular)
(f3 / finance, op, u / use-01)
(i / income, mod, m / meagre)
(p / promise-01, ARG1, e2 / elderly)
(p / promise-01, ARG2, w / worry-01)
(p2 / prey, op, e / easy)
(p5 / promise-01, ARG0, f2 / finance)
(p5 / promise-01, ARG1, w2 / way)
(p5 / promise-01, ARG2, b / boost-01)
(p6 / pensioner, op, u / use-01)
(u / use-01, ARG1, h / home)
(u / use-01, ARG2, s / security)
(w / worry-01, ARG1, u / use-01)
(w / worry-01, mod, f / finance)
(w2 / way, mod, p4 / painless)

Decoded in 406,003 microseconds
Sentence:   mr louisdreyfus who graduated from harvard with an mba promised to tighten budgetary control throughout the group

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   mr louisdreyfus who graduated from harvard with an mba promised to tighten budgetary control throughout the group
myTokenized = mr louisdreyfus who graduated from harvard with an mba promised to tighten budgetary control throughout the group
i = 0
prefix = List(mr)
regexr = \Qm\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the french had promised independence to lebanon but dash

NER Entity: (country :name (name :op "lebanon"))
Spans:
Span 7-8:  but => contrast-01
Span 1-2:  french => (country :name (name :op "France"))
Span 4-5:  independence => (depend-01 :polarity -)
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),but,contrast-01,false), Span(4,5,List(2, 1),independence,(depend-01 :polarity -),false), Span(3,4,List(3),promised,promise-01,false), Span(1,2,List(6, 5, 4),french,(country :name (name :op "France")),false)),Map(2 -> -, 5 -> name, 1 -> depend-01, 4 -> country, 6 -> "France", 0 -> contrast-01, 3 -> promise-01),Map(n -> name, d -> depend-01, p -> promise-01, c -> contrast-01, c2 -> country))),[Ljava.lang.String;@4c5a5544,Annotation([Ljava.lang.String;@3e940a85,[Ljava.lang.String;@693ec1db,[Ljava.lang.String;@172946d8),Annotation([Ljava.lang.String;@16ea1ac9,[Ljava.lang.String;@63848ddf,[Ledu.cmu.lti.nlp.amr.Dependency;@137e5e84),Annotation([Ljava.lang.String;@4d6f361b,[Ljava.lang.String;@40494e54,[Ljava.lang.String;@cb58dc5),Annotation([Ljava.lang.String;@636e8707,[Ljava.lang.String;@6d630f90,[Ledu.cmu.lti.nlp.amr.Entity;@292ef0b))
AMR:
(c / contrast-01, ARG1, d / depend-01)
(c2 / country, name, n / name)
(d / depend-01, polarity, -)
(n / name, op, "France")
(p / promise-01, ARG0, c2 / country)
(p / promise-01, ARG1, d / depend-01)

Decoded in 13,385 microseconds
Sentence: meanwhile mr yeltsin promised on saturday to pursue an economic reform programme which unlike the government plan would not lower living standards

Spans:
Span 9-10:  economic => economy
Span 20-21:  living => live-01
Span 19-20:  lower => low
Span 0-1:  meanwhile => meanwhile
Span 16-17:  plan => plan-01
Span 11-12:  programme => program
Span 3-4:  promised => promise-01
Span 7-8:  pursue => pursue-01
Span 10-11:  reform => reform-01
Span 5-6:  saturday => saturday
Span 21-22:  standards => standard

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),standards,standard,false), Span(20,21,List(1),living,live-01,false), Span(19,20,List(2),lower,low,false), Span(16,17,List(3),plan,plan-01,false), Span(11,12,List(4),programme,program,false), Span(10,11,List(5),reform,reform-01,false), Span(9,10,List(6),economic,economy,false), Span(7,8,List(7),pursue,pursue-01,false), Span(5,6,List(8),saturday,saturday,false), Span(3,4,List(9),promised,promise-01,false), Span(0,1,List(10),meanwhile,meanwhile,false)),Map(2 -> low, 5 -> reform-01, 8 -> saturday, 7 -> pursue-01, 1 -> live-01, 4 -> program, 6 -> economy, 9 -> promise-01, 0 -> standard, 10 -> meanwhile, 3 -> plan-01),Map(e -> economy, s2 -> saturday, p2 -> program, s -> standard, m -> meanwhile, p -> plan-01, p4 -> promise-01, r -> reform-01, l2 -> low, l -> live-01, p3 -> pursue-01))),[Ljava.lang.String;@7c8bbc7e,Annotation([Ljava.lang.String;@3a043413,[Ljava.lang.String;@69f6e926,[Ljava.lang.String;@5144f423),Annotation([Ljava.lang.String;@5f84f84,[Ljava.lang.String;@712c662b,[Ledu.cmu.lti.nlp.amr.Dependency;@19e7cb19),Annotation([Ljava.lang.String;@40c6e398,[Ljava.lang.String;@41883161,[Ljava.lang.String;@5461f8e3),Annotation([Ljava.lang.String;@6c1b2a5c,[Ljava.lang.String;@6b7a3576,[Ledu.cmu.lti.nlp.amr.Entity;@244c0d1a))
AMR:
(l2 / low, concession, p / plan-01)
(p / plan-01, ARG0, s / standard)
(p / plan-01, ARG1, p2 / program)
(p2 / program, mod, r / reform-01)
(p3 / pursue-01, ARG0, s2 / saturday)
(p3 / pursue-01, ARG1, p2 / program)
(p4 / promise-01, ARG1, m / meanwhile)
(p4 / promise-01, ARG2, p3 / pursue-01)
(r / reform-01, ARG1, e / economy)
(s / standard, mod, l / live-01)

Decoded in 78,238 microseconds
Sentence: but unlike mr nixon who had sharp words for his host mr kissinger praised mr deng as one of the few statesmen who have always done more than promised

Spans:
Span 24-25:  always => always
Span 0-1:  but => contrast-01
Span 20-21:  few => few
Span 10-11:  host => host-01
Span 13-14:  praised => praise-01
Span 28-29:  promised => promise-01
Span 6-7:  sharp => sharp
Span 7-8:  words => word

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),promised,promise-01,false), Span(24,25,List(1),always,always,false), Span(20,21,List(2),few,few,false), Span(13,14,List(3),praised,praise-01,false), Span(10,11,List(4),host,host-01,false), Span(7,8,List(5),words,word,false), Span(6,7,List(6),sharp,sharp,false), Span(0,1,List(7),but,contrast-01,false)),Map(2 -> few, 5 -> word, 7 -> contrast-01, 1 -> always, 4 -> host-01, 6 -> sharp, 0 -> promise-01, 3 -> praise-01),Map(w -> word, h -> host-01, p2 -> praise-01, s -> sharp, p -> promise-01, a -> always, c -> contrast-01, f -> few))),[Ljava.lang.String;@7cf03893,Annotation([Ljava.lang.String;@7f127af9,[Ljava.lang.String;@1647b29c,[Ljava.lang.String;@3d1f2b31),Annotation([Ljava.lang.String;@494cbd50,[Ljava.lang.String;@4d20f4c8,[Ledu.cmu.lti.nlp.amr.Dependency;@2ea69e07),Annotation([Ljava.lang.String;@3cd0f57e,[Ljava.lang.String;@3aa54263,[Ljava.lang.String;@37a98fa9),Annotation([Ljava.lang.String;@5d16bccb,[Ljava.lang.String;@7fc4e32b,[Ledu.cmu.lti.nlp.amr.Entity;@571e5d95))
AMR:
(c / contrast-01, ARG1, p2 / praise-01)
(h / host-01, ARG0, f / few)
(h / host-01, ARG1, w / word)
(p / promise-01, ARG1, a / always)
(p2 / praise-01, ARG1, w / word)
(p2 / praise-01, condition, p / promise-01)
(w / word, mod, s / sharp)

Decoded in 76,430 microseconds
Sentence: press officer glyn shailes is assembling a number of former british alltime greats who have represented england over the last 40 years and it promises to be a great night

NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "england"))
Spans:
Span 20-21:  40 => 40
Span 22-23:  and => and
Span 5-6:  assembling => assemble-01
Span 16-17:  england => (country :name (name :op "England"))
Span 9-10:  former => former
Span 28-29:  great => great
Span 23-24:  it => it
Span 19-20:  last => last
Span 29-30:  night => night
Span 7-8:  number => number
Span 1-2:  officer => officer
Span 0-1:  press => press
Span 24-25:  promises => promise-01
Span 15-16:  represented => represent-01
Span 21-22:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),night,night,false), Span(28,29,List(1),great,great,false), Span(24,25,List(2),promises,promise-01,false), Span(23,24,List(3),it,it,false), Span(22,23,List(4),and,and,false), Span(21,22,List(6, 5),years,(temporal-quantity :unit year),false), Span(20,21,List(7),40,40,false), Span(19,20,List(8),last,last,false), Span(16,17,List(11, 10, 9),england,(country :name (name :op "England")),false), Span(15,16,List(12),represented,represent-01,false), Span(9,10,List(13),former,former,false), Span(7,8,List(14),number,number,false), Span(5,6,List(15),assembling,assemble-01,false), Span(1,2,List(16),officer,officer,false), Span(0,1,List(17),press,press,false)),Map(2 -> promise-01, 5 -> temporal-quantity, 12 -> represent-01, 15 -> assemble-01, 8 -> last, 7 -> 40, 17 -> press, 1 -> great, 4 -> and, 11 -> "England", 14 -> number, 6 -> year, 0 -> night, 9 -> country, 16 -> officer, 3 -> it, 10 -> name, 13 -> former),Map(n -> night, t -> temporal-quantity, p2 -> press, g -> great, p -> promise-01, y -> year, n3 -> number, a -> and, 4 -> 40, a2 -> assemble-01, i -> it, r -> represent-01, c -> country, l -> last, f -> former, o -> officer, n2 -> name))),[Ljava.lang.String;@a920de2,Annotation([Ljava.lang.String;@7acd75d9,[Ljava.lang.String;@46f4388b,[Ljava.lang.String;@4bac5211),Annotation([Ljava.lang.String;@1e4000e7,[Ljava.lang.String;@7bfb4d34,[Ledu.cmu.lti.nlp.amr.Dependency;@2f89d083),Annotation([Ljava.lang.String;@d860d7,[Ljava.lang.String;@7dbdc3af,[Ljava.lang.String;@357a56a7),Annotation([Ljava.lang.String;@72cf095e,[Ljava.lang.String;@76703534,[Ledu.cmu.lti.nlp.amr.Entity;@40b525ab))
AMR:
(a / and, op, a2 / assemble-01)
(a / and, op, p / promise-01)
(a / and, op, p2 / press)
(a2 / assemble-01, ARG0, o / officer)
(a2 / assemble-01, ARG1, n3 / number)
(c / country, name, n2 / name)
(f / former, op, p / promise-01)
(n / night, mod, g / great)
(n2 / name, op, "England")
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, n / night)
(r / represent-01, ARG0, n3 / number)
(r / represent-01, ARG1, c / country)
(t / temporal-quantity, op, a2 / assemble-01)
(t / temporal-quantity, quant, 4 / 40)
(t / temporal-quantity, unit, y / year)
(y / year, mod, l / last)

Decoded in 600,553 microseconds
Sentence: the right exists because the very same interest on which the power to promise and the duty to keep promises are based is also the ground for holding others to be subject to a duty not to interfere with ones promising, it also requires one not to force people to promise nor to induce them improperly to promise or not to promise

Spans:
Span 43-44:  also => also
Span 23-24:  also => also
Span 14-15:  and => and
Span 21-22:  based => base-01
Span 3-4:  because => cause-01
Span 34-35:  duty => duty
Span 16-17:  duty => duty
Span 2-3:  exists => exist-01
Span 48-49:  force => force
Span 25-26:  ground => ground
Span 27-28:  holding => hold-01
Span 54-55:  induce => induce-01
Span 7-8:  interest => interest-01
Span 37-38:  interfere => interfere-01
Span 42-43:  it => it
Span 39-40:  ones => one
Span 59-60:  or => or
Span 28-29:  others => other
Span 11-12:  power => power
Span 62-63:  promise => promise-01
Span 58-59:  promise => promise-01
Span 51-52:  promise => promise-01
Span 13-14:  promise => promise-01
Span 19-20:  promises => promise-01
Span 40-41:  promising => promise-01
Span 44-45:  requires => require-01
Span 6-7:  same => same-41
Span 31-32:  subject => subject
Span 5-6:  very => very

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(62,63,List(0),promise,promise-01,false), Span(59,60,List(1),or,or,false), Span(58,59,List(2),promise,promise-01,false), Span(54,55,List(3),induce,induce-01,false), Span(51,52,List(4),promise,promise-01,false), Span(48,49,List(5),force,force,false), Span(44,45,List(6),requires,require-01,false), Span(43,44,List(7),also,also,false), Span(42,43,List(8),it,it,false), Span(40,41,List(9),promising,promise-01,false), Span(39,40,List(10),ones,one,false), Span(37,38,List(11),interfere,interfere-01,false), Span(34,35,List(12),duty,duty,false), Span(31,32,List(13),subject,subject,false), Span(28,29,List(14),others,other,false), Span(27,28,List(15),holding,hold-01,false), Span(25,26,List(16),ground,ground,false), Span(23,24,List(17),also,also,false), Span(21,22,List(18),based,base-01,false), Span(19,20,List(19),promises,promise-01,false), Span(16,17,List(20),duty,duty,false), Span(14,15,List(21),and,and,false), Span(13,14,List(22),promise,promise-01,false), Span(11,12,List(23),power,power,false), Span(7,8,List(24),interest,interest-01,false), Span(6,7,List(25),same,same-41,false), Span(5,6,List(26),very,very,false), Span(3,4,List(27),because,cause-01,false), Span(2,3,List(28),exists,exist-01,false)),Map(2 -> promise-01, 5 -> force, 27 -> cause-01, 12 -> duty, 8 -> it, 15 -> hold-01, 21 -> and, 18 -> base-01, 24 -> interest-01, 7 -> also, 1 -> or, 17 -> also, 23 -> power, 26 -> very, 4 -> promise-01, 11 -> interfere-01, 14 -> other, 20 -> duty, 28 -> exist-01, 6 -> require-01, 9 -> promise-01, 0 -> promise-01, 22 -> promise-01, 16 -> ground, 19 -> promise-01, 10 -> one, 3 -> induce-01, 25 -> same-41, 13 -> subject),Map(e -> exist-01, h -> hold-01, i4 -> interest-01, s2 -> same-41, p5 -> promise-01, b -> base-01, o3 -> other, p2 -> promise-01, a3 -> and, s -> subject, v -> very, d -> duty, i3 -> interfere-01, p -> promise-01, g -> ground, a -> also, p4 -> promise-01, o2 -> one, d2 -> duty, p7 -> power, i2 -> it, r -> require-01, i -> induce-01, a2 -> also, c -> cause-01, p6 -> promise-01, f -> force, o -> or, p3 -> promise-01))),[Ljava.lang.String;@1e1ebbf6,Annotation([Ljava.lang.String;@73c622ec,[Ljava.lang.String;@551eef55,[Ljava.lang.String;@61f2e11b),Annotation([Ljava.lang.String;@1098e5da,[Ljava.lang.String;@261a53b9,[Ledu.cmu.lti.nlp.amr.Dependency;@a6eaa3a),Annotation([Ljava.lang.String;@6769cb2f,[Ljava.lang.String;@529aafb3,[Ljava.lang.String;@29853b23),Annotation([Ljava.lang.String;@69ed8c20,[Ljava.lang.String;@6a8abf34,[Ledu.cmu.lti.nlp.amr.Entity;@3b0f2591))
AMR:
(a3 / and, op, d2 / duty)
(a3 / and, op, p6 / promise-01)
(a3 / and, op, p7 / power)
(b / base-01, ARG0, g / ground)
(b / base-01, ARG1, a3 / and)
(c / cause-01, ARG0, i4 / interest-01)
(c / cause-01, ARG1, e / exist-01)
(f / force, purpose, p3 / promise-01)
(g / ground, topic, h / hold-01)
(h / hold-01, ARG0, a2 / also)
(h / hold-01, ARG1, o3 / other)
(h / hold-01, purpose, i3 / interfere-01)
(i / induce-01, ARG2, p2 / promise-01)
(i3 / interfere-01, ARG0, d / duty)
(i3 / interfere-01, ARG1, o2 / one)
(i4 / interest-01, ARG1, p7 / power)
(o / or, op, i / induce-01)
(o / or, op, p / promise-01)
(p3 / promise-01, ARG1, o / or)
(p4 / promise-01, ARG1, o2 / one)
(p5 / promise-01, ARG1, d2 / duty)
(r / require-01, ARG0, i2 / it)
(r / require-01, ARG1, f / force)
(r / require-01, condition, p4 / promise-01)
(r / require-01, mod, a / also)
(s / subject, prep-to, d / duty)
(s2 / same-41, ARG1, i4 / interest-01)
(s2 / same-41, degree, v / very)

Decoded in 1,322,840 microseconds
Sentence: in the 1950s willie had watched ben hogan practising for the open and he had promised himself he was going to carry for someone like him

Spans:
Span 2-3:  1950s => 1950
Span 12-13:  and => and
Span 17-18:  he => he
Span 13-14:  he => he
Span 15-16:  promised => promise-01
Span 23-24:  someone => someone
Span 5-6:  watched => watch-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),someone,someone,false), Span(17,18,List(1),he,he,false), Span(15,16,List(2),promised,promise-01,false), Span(13,14,List(3),he,he,false), Span(12,13,List(4),and,and,false), Span(5,6,List(5),watched,watch-01,false), Span(2,3,List(6),1950s,1950,false)),Map(2 -> promise-01, 5 -> watch-01, 1 -> he, 4 -> and, 6 -> 1950, 0 -> someone, 3 -> he),Map(w -> watch-01, h -> he, h2 -> he, s -> someone, 1 -> 1950, p -> promise-01, a -> and))),[Ljava.lang.String;@5f6b70e1,Annotation([Ljava.lang.String;@6bff4b8,[Ljava.lang.String;@245b5f7e,[Ljava.lang.String;@6ada5bd7),Annotation([Ljava.lang.String;@25c3b70f,[Ljava.lang.String;@54274d27,[Ledu.cmu.lti.nlp.amr.Dependency;@603a669a),Annotation([Ljava.lang.String;@1a2639d1,[Ljava.lang.String;@439dd5c0,[Ljava.lang.String;@2f3c52ee),Annotation([Ljava.lang.String;@21689f7c,[Ljava.lang.String;@5bbe9706,[Ledu.cmu.lti.nlp.amr.Entity;@3dad39f8))
AMR:
(a / and, op, p / promise-01)
(a / and, op, w / watch-01)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, 1 / 1950)
(p / promise-01, ARG2, h / he)
(s / someone, poss, h / he)

Decoded in 45,302 microseconds
Sentence: we did not expect to have so many voters on the first day he said and promised that the un and the administratorgenerals office were dealing with the shortages at the polling stations

Spans:
Span 20-21:  and => and
Span 15-16:  and => and
Span 12-13:  day => day
Span 25-26:  dealing => deal-01
Span 3-4:  expect => expect-01
Span 13-14:  he => he
Span 7-8:  many => many
Span 23-24:  office => office
Span 16-17:  promised => promise-01
Span 14-15:  said => say-01
Span 28-29:  shortages => short-41
Span 6-7:  so => so
Span 32-33:  stations => station
Span 8-9:  voters => (person :ARG0-of vote-01)
Span 0-1:  we => we

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),stations,station,false), Span(28,29,List(1),shortages,short-41,false), Span(25,26,List(2),dealing,deal-01,false), Span(23,24,List(3),office,office,false), Span(20,21,List(4),and,and,false), Span(16,17,List(5),promised,promise-01,false), Span(15,16,List(6),and,and,false), Span(14,15,List(7),said,say-01,false), Span(13,14,List(8),he,he,false), Span(12,13,List(9),day,day,false), Span(8,9,List(11, 10),voters,(person :ARG0-of vote-01),false), Span(7,8,List(12),many,many,false), Span(6,7,List(13),so,so,false), Span(3,4,List(14),expect,expect-01,false), Span(0,1,List(15),we,we,false)),Map(2 -> deal-01, 5 -> promise-01, 12 -> many, 15 -> we, 8 -> he, 7 -> say-01, 1 -> short-41, 4 -> and, 11 -> vote-01, 14 -> expect-01, 6 -> and, 0 -> station, 9 -> day, 3 -> office, 10 -> person, 13 -> so),Map(e -> expect-01, w -> we, h -> he, s2 -> short-41, p2 -> person, s -> station, s4 -> so, v -> vote-01, d -> deal-01, m -> many, p -> promise-01, a -> and, d2 -> day, a2 -> and, s3 -> say-01, o -> office))),[Ljava.lang.String;@37b8e86a,Annotation([Ljava.lang.String;@4ca2a3ba,[Ljava.lang.String;@49ab2fa4,[Ljava.lang.String;@5c4ddc5),Annotation([Ljava.lang.String;@3fbbb378,[Ljava.lang.String;@3c03abf8,[Ledu.cmu.lti.nlp.amr.Dependency;@150f4590),Annotation([Ljava.lang.String;@1d9ffbbd,[Ljava.lang.String;@7248447c,[Ljava.lang.String;@66886381),Annotation([Ljava.lang.String;@43cdebe,[Ljava.lang.String;@38438e1e,[Ledu.cmu.lti.nlp.amr.Entity;@5b27706d))
AMR:
(a / and, op, o / office)
(a2 / and, op, d / deal-01)
(a2 / and, op, p / promise-01)
(d / deal-01, ARG0, a / and)
(d / deal-01, ARG1, s2 / short-41)
(e / expect-01, ARG0, w / we)
(m / many, degree, s4 / so)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, d2 / day)
(p2 / person, quant, m / many)
(s2 / short-41, ARG2, s / station)
(s3 / say-01, ARG0, h / he)
(s3 / say-01, ARG1, e / expect-01)
(v / vote-01, ARG0, p2 / person)
(v / vote-01, ARG1, d2 / day)

Decoded in 284,370 microseconds
Sentence: the developers are promising 1000 to anyone who recommends a friend to them provided that the friend reserves and buys a wates house before december 31

Spans:
Span 4-5:  1000 => (date-entity :year 1000)
Span 18-19:  and => and
Span 6-7:  anyone => anyone
Span 23-24:  before => before
Span 19-20:  buys => buy-01
Span 24-25:  december => (date-entity :month 12)
Span 1-2:  developers => (person :ARG0-of develop-02)
Span 16-17:  friend => (have-rel-role-91 :ARG2 friend)
Span 10-11:  friend => (have-rel-role-91 :ARG2 friend)
Span 22-23:  house => house
Span 3-4:  promising => promise-01
Span 13-14:  provided => provide-01
Span 8-9:  recommends => recommend-01
Span 17-18:  reserves => reserve-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),december,(date-entity :month 12),false), Span(23,24,List(2),before,before,false), Span(22,23,List(3),house,house,false), Span(19,20,List(4),buys,buy-01,false), Span(18,19,List(5),and,and,false), Span(17,18,List(6),reserves,reserve-01,false), Span(16,17,List(8, 7),friend,(have-rel-role-91 :ARG2 friend),false), Span(13,14,List(9),provided,provide-01,false), Span(10,11,List(11, 10),friend,(have-rel-role-91 :ARG2 friend),false), Span(8,9,List(12),recommends,recommend-01,false), Span(6,7,List(13),anyone,anyone,false), Span(4,5,List(15, 14),1000,(date-entity :year 1000),false), Span(3,4,List(16),promising,promise-01,false), Span(1,2,List(18, 17),developers,(person :ARG0-of develop-02),false)),Map(2 -> before, 5 -> and, 12 -> recommend-01, 15 -> 1000, 8 -> friend, 18 -> develop-02, 7 -> have-rel-role-91, 17 -> person, 1 -> 12, 4 -> buy-01, 11 -> friend, 14 -> date-entity, 6 -> reserve-01, 0 -> date-entity, 9 -> provide-01, 16 -> promise-01, 3 -> house, 10 -> have-rel-role-91, 13 -> anyone),Map(h -> house, h2 -> have-rel-role-91, 12 -> 1000, b -> before, d3 -> develop-02, b2 -> buy-01, p2 -> promise-01, d -> date-entity, 1 -> 12, p -> provide-01, r2 -> recommend-01, a -> and, d2 -> date-entity, a2 -> anyone, r -> reserve-01, h3 -> have-rel-role-91, f2 -> friend, f -> friend, p3 -> person))),[Ljava.lang.String;@16b50694,Annotation([Ljava.lang.String;@46c2ea31,[Ljava.lang.String;@269d5b42,[Ljava.lang.String;@24d25ddc),Annotation([Ljava.lang.String;@6f102966,[Ljava.lang.String;@e0e2081,[Ledu.cmu.lti.nlp.amr.Dependency;@4177fc5c),Annotation([Ljava.lang.String;@2c591d98,[Ljava.lang.String;@ea5fce7,[Ljava.lang.String;@337ea934),Annotation([Ljava.lang.String;@4096af55,[Ljava.lang.String;@64d11693,[Ledu.cmu.lti.nlp.amr.Entity;@5b21409a))
AMR:
(a / and, op, b2 / buy-01)
(a / and, op, r / reserve-01)
(b / before, op, d / date-entity)
(b2 / buy-01, ARG0, h2 / have-rel-role-91)
(b2 / buy-01, ARG1, h / house)
(b2 / buy-01, ARG2, h3 / have-rel-role-91)
(d / date-entity, month, 1 / 12)
(d2 / date-entity, year, 12 / 1000)
(d3 / develop-02, ARG0, p3 / person)
(h2 / have-rel-role-91, ARG1, p3 / person)
(h2 / have-rel-role-91, ARG2, f / friend)
(h3 / have-rel-role-91, ARG2, f2 / friend)
(p / provide-01, ARG1, a / and)
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, time, d2 / date-entity)
(r / reserve-01, time, b / before)
(r2 / recommend-01, ARG0, a2 / anyone)
(r2 / recommend-01, ARG1, p / provide-01)

Decoded in 389,840 microseconds
Sentence: the balance of payments will improve over the same period halving as a proportion of gdp but reductions in the rate of inflation promise only to be slight it adds

Spans:
Span 29-30:  adds => add-03
Span 1-2:  balance => balance-01
Span 16-17:  but => contrast-01
Span 15-16:  gdp => (thing :name (name :op "Gdp"))
Span 5-6:  improve => improve-01
Span 22-23:  inflation => inflation
Span 28-29:  it => it
Span 24-25:  only => only
Span 3-4:  payments => payment
Span 9-10:  period => period
Span 23-24:  promise => promise-01
Span 13-14:  proportion => proportion
Span 20-21:  rate => rate
Span 17-18:  reductions => reduce-01
Span 8-9:  same => same-41
Span 27-28:  slight => slight

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),adds,add-03,false), Span(28,29,List(1),it,it,false), Span(27,28,List(2),slight,slight,false), Span(24,25,List(3),only,only,false), Span(23,24,List(4),promise,promise-01,false), Span(22,23,List(5),inflation,inflation,false), Span(20,21,List(6),rate,rate,false), Span(17,18,List(7),reductions,reduce-01,false), Span(16,17,List(8),but,contrast-01,false), Span(15,16,List(11, 10, 9),gdp,(thing :name (name :op "Gdp")),false), Span(13,14,List(12),proportion,proportion,false), Span(9,10,List(13),period,period,false), Span(8,9,List(14),same,same-41,false), Span(5,6,List(15),improve,improve-01,false), Span(3,4,List(16),payments,payment,false), Span(1,2,List(17),balance,balance-01,false)),Map(2 -> slight, 5 -> inflation, 12 -> proportion, 15 -> improve-01, 8 -> contrast-01, 7 -> reduce-01, 17 -> balance-01, 1 -> it, 4 -> promise-01, 11 -> "Gdp", 14 -> same-41, 6 -> rate, 0 -> add-03, 9 -> thing, 16 -> payment, 3 -> only, 10 -> name, 13 -> period),Map(n -> name, s2 -> same-41, b -> balance-01, t -> thing, p2 -> proportion, s -> slight, i3 -> improve-01, p -> promise-01, r2 -> reduce-01, a -> add-03, p4 -> payment, i2 -> inflation, i -> it, r -> rate, c -> contrast-01, o -> only, p3 -> period))),[Ljava.lang.String;@64186d33,Annotation([Ljava.lang.String;@7fa9629b,[Ljava.lang.String;@4988ef97,[Ljava.lang.String;@3d29c838),Annotation([Ljava.lang.String;@217f3e7,[Ljava.lang.String;@728dc3c3,[Ledu.cmu.lti.nlp.amr.Dependency;@392f71f6),Annotation([Ljava.lang.String;@59e2eace,[Ljava.lang.String;@40a5a87c,[Ljava.lang.String;@3bd8860c),Annotation([Ljava.lang.String;@4489c86,[Ljava.lang.String;@3b1c239c,[Ledu.cmu.lti.nlp.amr.Entity;@3465f515))
AMR:
(a / add-03, ARG0, p2 / proportion)
(a / add-03, ARG1, i / it)
(b / balance-01, ARG1, p4 / payment)
(c / contrast-01, ARG1, t / thing)
(c / contrast-01, ARG2, r2 / reduce-01)
(c / contrast-01, mod, o / only)
(i3 / improve-01, ARG0, b / balance-01)
(i3 / improve-01, ARG1, p3 / period)
(n / name, op, "Gdp")
(p / promise-01, ARG0, i2 / inflation)
(p / promise-01, ARG1, b / balance-01)
(r2 / reduce-01, ARG1, r / rate)
(r2 / reduce-01, ARG2, p / promise-01)
(s / slight, domain, a / add-03)
(s2 / same-41, ARG1, p3 / period)
(t / thing, name, n / name)
(t / thing, quant, p2 / proportion)

Decoded in 421,705 microseconds
Sentence: count tolstoy had promised nigel watts he would admit his authorship and he voluntarily joined the defence

Spans:
Span 8-9:  admit => admit-01
Span 11-12:  and => and
Span 0-1:  count => count-01
Span 16-17:  defence => defend-01
Span 12-13:  he => he
Span 6-7:  he => he
Span 14-15:  joined => join-01
Span 3-4:  promised => promise-01
Span 13-14:  voluntarily => volunteer-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),defence,defend-01,false), Span(14,15,List(1),joined,join-01,false), Span(13,14,List(2),voluntarily,volunteer-01,false), Span(12,13,List(3),he,he,false), Span(11,12,List(4),and,and,false), Span(8,9,List(5),admit,admit-01,false), Span(6,7,List(6),he,he,false), Span(3,4,List(7),promised,promise-01,false), Span(0,1,List(8),count,count-01,false)),Map(2 -> volunteer-01, 5 -> admit-01, 8 -> count-01, 7 -> promise-01, 1 -> join-01, 4 -> and, 6 -> he, 0 -> defend-01, 3 -> he),Map(h -> he, h2 -> he, j -> join-01, v -> volunteer-01, d -> defend-01, p -> promise-01, a -> and, a2 -> admit-01, c -> count-01))),[Ljava.lang.String;@11bd5093,Annotation([Ljava.lang.String;@23f4ebfe,[Ljava.lang.String;@24b18323,[Ljava.lang.String;@21881a7),Annotation([Ljava.lang.String;@16e7fc04,[Ljava.lang.String;@5852765b,[Ledu.cmu.lti.nlp.amr.Dependency;@dd87daa),Annotation([Ljava.lang.String;@222b00,[Ljava.lang.String;@43350d11,[Ljava.lang.String;@4fecf98f),Annotation([Ljava.lang.String;@4ef44447,[Ljava.lang.String;@6aeb9d0,[Ledu.cmu.lti.nlp.amr.Entity;@39290a1d))
AMR:
(a / and, op, j / join-01)
(a / and, op, p / promise-01)
(a2 / admit-01, ARG0, h2 / he)
(a2 / admit-01, ARG1, a / and)
(j / join-01, ARG0, h / he)
(j / join-01, ARG1, d / defend-01)
(p / promise-01, ARG1, c / count-01)
(v / volunteer-01, ARG1, j / join-01)

Decoded in 60,775 microseconds
Sentence: the gravel supplied by rayners ltd of east hagbourne was promised at even greater discount in return for publicity

Spans:
Span 14-15:  discount => discount-02
Span 7-8:  east => east
Span 1-2:  gravel => gravel
Span 13-14:  greater => great
Span 10-11:  promised => promise-01
Span 18-19:  publicity => publicity
Span 2-3:  supplied => supply-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),publicity,publicity,false), Span(14,15,List(1),discount,discount-02,false), Span(13,14,List(2),greater,great,false), Span(10,11,List(3),promised,promise-01,false), Span(7,8,List(4),east,east,false), Span(2,3,List(5),supplied,supply-01,false), Span(1,2,List(6),gravel,gravel,false)),Map(2 -> great, 5 -> supply-01, 1 -> discount-02, 4 -> east, 6 -> gravel, 0 -> publicity, 3 -> promise-01),Map(e -> east, p2 -> promise-01, s -> supply-01, d -> discount-02, g2 -> gravel, g -> great, p -> publicity))),[Ljava.lang.String;@3557133c,Annotation([Ljava.lang.String;@67afe37f,[Ljava.lang.String;@4c80dc07,[Ljava.lang.String;@1fed76ce),Annotation([Ljava.lang.String;@1f12dec2,[Ljava.lang.String;@fdea27e,[Ledu.cmu.lti.nlp.amr.Dependency;@617e0655),Annotation([Ljava.lang.String;@18d1e874,[Ljava.lang.String;@7cf42466,[Ljava.lang.String;@81e4a1),Annotation([Ljava.lang.String;@4fc90649,[Ljava.lang.String;@16bbcb8b,[Ledu.cmu.lti.nlp.amr.Entity;@3301e56))
AMR:
(d / discount-02, ARG0, p / publicity)
(d / discount-02, ARG1, e / east)
(d / discount-02, mod, g / great)
(p2 / promise-01, ARG1, g2 / gravel)
(p2 / promise-01, ARG2, d / discount-02)
(s / supply-01, ARG1, g2 / gravel)

Decoded in 57,456 microseconds
Sentence: the right to prosecute in the crown court had promised to boost the services attractions and ease recruitment problems

Spans:
Span 15-16:  and => and
Span 14-15:  attractions => (thing :ARG0-of attract-01)
Span 11-12:  boost => boost-01
Span 7-8:  court => court
Span 6-7:  crown => crown-01
Span 16-17:  ease => ease-02
Span 18-19:  problems => problem
Span 9-10:  promised => promise-01
Span 3-4:  prosecute => prosecute-01
Span 17-18:  recruitment => recruit-01
Span 13-14:  services => service

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),problems,problem,false), Span(17,18,List(1),recruitment,recruit-01,false), Span(16,17,List(2),ease,ease-02,false), Span(15,16,List(3),and,and,false), Span(14,15,List(5, 4),attractions,(thing :ARG0-of attract-01),false), Span(13,14,List(6),services,service,false), Span(11,12,List(7),boost,boost-01,false), Span(9,10,List(8),promised,promise-01,false), Span(7,8,List(9),court,court,false), Span(6,7,List(10),crown,crown-01,false), Span(3,4,List(11),prosecute,prosecute-01,false)),Map(2 -> ease-02, 5 -> attract-01, 8 -> promise-01, 7 -> boost-01, 1 -> recruit-01, 11 -> prosecute-01, 4 -> thing, 6 -> service, 9 -> court, 0 -> problem, 10 -> crown-01, 3 -> and),Map(e -> ease-02, b -> boost-01, t -> thing, p2 -> promise-01, s -> service, p -> problem, a -> and, a2 -> attract-01, r -> recruit-01, c -> court, p3 -> prosecute-01, c2 -> crown-01))),[Ljava.lang.String;@4c17a1bc,Annotation([Ljava.lang.String;@237b64ab,[Ljava.lang.String;@7a0e28bf,[Ljava.lang.String;@37955233),Annotation([Ljava.lang.String;@2c47aec7,[Ljava.lang.String;@1623a187,[Ledu.cmu.lti.nlp.amr.Dependency;@7d41b16b),Annotation([Ljava.lang.String;@63e7280b,[Ljava.lang.String;@5cf61d6a,[Ljava.lang.String;@220549d4),Annotation([Ljava.lang.String;@9320ebf,[Ljava.lang.String;@35662250,[Ledu.cmu.lti.nlp.amr.Entity;@4456cd93))
AMR:
(a / and, op, e / ease-02)
(a2 / attract-01, ARG0, t / thing)
(a2 / attract-01, ARG1, s / service)
(b / boost-01, ARG0, c / court)
(b / boost-01, ARG1, t / thing)
(c2 / crown-01, ARG1, c / court)
(e / ease-02, ARG1, p / problem)
(p / problem, mod, r / recruit-01)
(p2 / promise-01, ARG1, a / and)
(p2 / promise-01, ARG2, b / boost-01)
(p3 / prosecute-01, location, c / court)

Decoded in 136,312 microseconds
Sentence:   there will be no pointers to the tiresome truth i promise

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   there will be no pointers to the tiresome truth i promise
myTokenized = there will be no pointers to the tiresome truth i promise
i = 0
prefix = List(there)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the banks start promising to look after you much better than ever before and to shower you with presents

Spans:
Span 6-7:  after => after
Span 13-14:  and => and
Span 1-2:  banks => bank
Span 12-13:  before => before
Span 11-12:  ever => ever
Span 8-9:  much => much
Span 18-19:  presents => present-01
Span 3-4:  promising => promise-01
Span 15-16:  shower => shower-01
Span 2-3:  start => start-01
Span 16-17:  you => you
Span 7-8:  you => you

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),presents,present-01,false), Span(16,17,List(1),you,you,false), Span(15,16,List(2),shower,shower-01,false), Span(13,14,List(3),and,and,false), Span(12,13,List(4),before,before,false), Span(11,12,List(5),ever,ever,false), Span(8,9,List(6),much,much,false), Span(7,8,List(7),you,you,false), Span(6,7,List(8),after,after,false), Span(3,4,List(9),promising,promise-01,false), Span(2,3,List(10),start,start-01,false), Span(1,2,List(11),banks,bank,false)),Map(2 -> shower-01, 5 -> ever, 8 -> after, 7 -> you, 1 -> you, 11 -> bank, 4 -> before, 6 -> much, 9 -> promise-01, 0 -> present-01, 10 -> start-01, 3 -> and),Map(e -> ever, s2 -> start-01, b -> before, b2 -> bank, p2 -> promise-01, s -> shower-01, m -> much, y -> you, p -> present-01, a -> and, a2 -> after, y2 -> you))),[Ljava.lang.String;@122a0fad,Annotation([Ljava.lang.String;@76b302c,[Ljava.lang.String;@e279c82,[Ljava.lang.String;@4a942210),Annotation([Ljava.lang.String;@43486eb0,[Ljava.lang.String;@485b0752,[Ledu.cmu.lti.nlp.amr.Dependency;@503dbd9a),Annotation([Ljava.lang.String;@56af29e,[Ljava.lang.String;@305e65d9,[Ljava.lang.String;@570a25e),Annotation([Ljava.lang.String;@25b3cc1c,[Ljava.lang.String;@3f1d559a,[Ledu.cmu.lti.nlp.amr.Entity;@1edf11d5))
AMR:
(a / and, op, e / ever)
(a / and, op, s / shower-01)
(a2 / after, op, y2 / you)
(b / before, mod, e / ever)
(p / present-01, ARG0, y / you)
(p / present-01, ARG1, m / much)
(p2 / promise-01, ARG0, a2 / after)
(p2 / promise-01, ARG1, a / and)
(s / shower-01, ARG1, y / you)
(s2 / start-01, ARG0, b2 / bank)
(s2 / start-01, ARG1, p2 / promise-01)

Decoded in 93,329 microseconds
Sentence: the bec promises to put faults right immediately if the customer is dissatisfied or if the builder defaults in any way on the contract by going bust for example

Spans:
Span 19-20:  any => any
Span 26-27:  bust => bust-01
Span 23-24:  contract => contract-02
Span 10-11:  customer => customer
Span 28-29:  example => example
Span 7-8:  immediately => immediate
Span 13-14:  or => or
Span 2-3:  promises => promise-01
Span 20-21:  way => way

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),example,example,false), Span(26,27,List(1),bust,bust-01,false), Span(23,24,List(2),contract,contract-02,false), Span(20,21,List(3),way,way,false), Span(19,20,List(4),any,any,false), Span(13,14,List(5),or,or,false), Span(10,11,List(6),customer,customer,false), Span(7,8,List(7),immediately,immediate,false), Span(2,3,List(8),promises,promise-01,false)),Map(2 -> contract-02, 5 -> or, 8 -> promise-01, 7 -> immediate, 1 -> bust-01, 4 -> any, 6 -> customer, 0 -> example, 3 -> way),Map(w -> way, e -> example, b -> bust-01, p -> promise-01, a -> any, i -> immediate, c -> contract-02, o -> or, c2 -> customer))),[Ljava.lang.String;@41a7d388,Annotation([Ljava.lang.String;@7130a764,[Ljava.lang.String;@313dd04a,[Ljava.lang.String;@5135c387),Annotation([Ljava.lang.String;@20b7fdb8,[Ljava.lang.String;@f724bd0,[Ledu.cmu.lti.nlp.amr.Dependency;@18cf4c9c),Annotation([Ljava.lang.String;@51aea27d,[Ljava.lang.String;@202de670,[Ljava.lang.String;@2573d391),Annotation([Ljava.lang.String;@5746e7cc,[Ljava.lang.String;@701c2ed7,[Ledu.cmu.lti.nlp.amr.Entity;@4a475ec1))
AMR:
(b / bust-01, ARG1, e / example)
(c / contract-02, ARG1, p / promise-01)
(c / contract-02, ARG2, b / bust-01)
(o / or, op, b / bust-01)
(p / promise-01, ARG0, c2 / customer)
(p / promise-01, ARG1, i / immediate)
(w / way, mod, a / any)
(w / way, mod, c / contract-02)

Decoded in 81,914 microseconds
Sentence: john prescott labours transport spokesman made a blistering attack on the governments underinvestment in rail and promised that labours transport policies would be geared to preventing environmental damage

Spans:
Span 15-16:  and => and
Span 8-9:  attack => attack-01
Span 27-28:  damage => damage-01
Span 26-27:  environmental => environment
Span 23-24:  geared => gear-01
Span 11-12:  governments => (government-organization :ARG0-of govern-01)
Span 20-21:  policies => policy
Span 25-26:  preventing => prevent-01
Span 16-17:  promised => promise-01
Span 14-15:  rail => rail
Span 4-5:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 19-20:  transport => transport-01
Span 3-4:  transport => transport-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),damage,damage-01,false), Span(26,27,List(1),environmental,environment,false), Span(25,26,List(2),preventing,prevent-01,false), Span(23,24,List(3),geared,gear-01,false), Span(20,21,List(4),policies,policy,false), Span(19,20,List(5),transport,transport-01,false), Span(16,17,List(6),promised,promise-01,false), Span(15,16,List(7),and,and,false), Span(14,15,List(8),rail,rail,false), Span(11,12,List(10, 9),governments,(government-organization :ARG0-of govern-01),false), Span(8,9,List(11),attack,attack-01,false), Span(4,5,List(13, 12),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(3,4,List(14),transport,transport-01,false)),Map(2 -> prevent-01, 5 -> transport-01, 12 -> have-org-role-91, 8 -> rail, 7 -> and, 1 -> environment, 4 -> policy, 11 -> attack-01, 14 -> transport-01, 6 -> promise-01, 0 -> damage-01, 9 -> government-organization, 3 -> gear-01, 10 -> govern-01, 13 -> spokesman),Map(e -> environment, g3 -> govern-01, h -> have-org-role-91, t -> transport-01, p2 -> policy, s -> spokesman, d -> damage-01, g2 -> government-organization, p -> prevent-01, g -> gear-01, a -> and, t2 -> transport-01, r -> rail, a2 -> attack-01, p3 -> promise-01))),[Ljava.lang.String;@139df700,Annotation([Ljava.lang.String;@67c32b0f,[Ljava.lang.String;@3e401b01,[Ljava.lang.String;@62acfe94),Annotation([Ljava.lang.String;@4b7dd928,[Ljava.lang.String;@333bf7d0,[Ledu.cmu.lti.nlp.amr.Dependency;@260a92f7),Annotation([Ljava.lang.String;@36a9a4,[Ljava.lang.String;@4bb4e18,[Ljava.lang.String;@25040c15),Annotation([Ljava.lang.String;@2cb549af,[Ljava.lang.String;@31f89717,[Ledu.cmu.lti.nlp.amr.Entity;@378780a2))
AMR:
(a / and, op, a2 / attack-01)
(a / and, op, g / gear-01)
(a / and, op, p3 / promise-01)
(a2 / attack-01, location, g2 / government-organization)
(d / damage-01, ARG1, e / environment)
(g / gear-01, ARG1, p2 / policy)
(g / gear-01, ARG2, p / prevent-01)
(g3 / govern-01, ARG0, g2 / government-organization)
(h / have-org-role-91, ARG1, t2 / transport-01)
(h / have-org-role-91, ARG2, s / spokesman)
(p / prevent-01, ARG1, d / damage-01)
(p2 / policy, topic, t / transport-01)
(p3 / promise-01, ARG0, s / spokesman)
(p3 / promise-01, ARG1, r / rail)

Decoded in 181,707 microseconds
Sentence: polanski still wanted to do the film for one thing he needed the money and evans had promised him plenty

Spans:
Span 14-15:  and => and
Span 6-7:  film => film
Span 10-11:  he => he
Span 13-14:  money => money
Span 11-12:  needed => need-01
Span 19-20:  plenty => plenty
Span 17-18:  promised => promise-01
Span 1-2:  still => still
Span 9-10:  thing => thing
Span 2-3:  wanted => want-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),plenty,plenty,false), Span(17,18,List(1),promised,promise-01,false), Span(14,15,List(2),and,and,false), Span(13,14,List(3),money,money,false), Span(11,12,List(4),needed,need-01,false), Span(10,11,List(5),he,he,false), Span(9,10,List(6),thing,thing,false), Span(6,7,List(7),film,film,false), Span(2,3,List(8),wanted,want-01,false), Span(1,2,List(9),still,still,false)),Map(2 -> and, 5 -> he, 8 -> want-01, 7 -> film, 1 -> promise-01, 4 -> need-01, 6 -> thing, 9 -> still, 0 -> plenty, 3 -> money),Map(w -> want-01, n -> need-01, h -> he, t -> thing, p2 -> promise-01, s -> still, m -> money, p -> plenty, a -> and, f -> film))),[Ljava.lang.String;@210e2829,Annotation([Ljava.lang.String;@286eacb3,[Ljava.lang.String;@7a0c3081,[Ljava.lang.String;@3644a3c0),Annotation([Ljava.lang.String;@545aae15,[Ljava.lang.String;@d5b0ff7,[Ledu.cmu.lti.nlp.amr.Dependency;@557527fa),Annotation([Ljava.lang.String;@7e93b9ea,[Ljava.lang.String;@1492f292,[Ljava.lang.String;@3b7359cb),Annotation([Ljava.lang.String;@120c3ceb,[Ljava.lang.String;@6173718e,[Ledu.cmu.lti.nlp.amr.Entity;@6224539d))
AMR:
(a / and, op, n / need-01)
(n / need-01, ARG0, h / he)
(n / need-01, ARG1, t / thing)
(p / plenty, op, w / want-01)
(p2 / promise-01, ARG0, a / and)
(p2 / promise-01, ARG1, m / money)
(w / want-01, ARG1, f / film)
(w / want-01, duration, t / thing)
(w / want-01, mod, s / still)

Decoded in 147,378 microseconds
Sentence: his family from tyneside persuaded him to throw at the gateshead meeting rather than on the continent he has also promised the sponsor a world record

Spans:
Span 19-20:  also => also
Span 16-17:  continent => continent
Span 1-2:  family => family
Span 17-18:  he => he
Span 11-12:  meeting => meet-03
Span 4-5:  persuaded => persuade-01
Span 20-21:  promised => promise-01
Span 25-26:  record => record
Span 22-23:  sponsor => sponsor-01
Span 7-8:  throw => throw-01
Span 24-25:  world => world

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),record,record,false), Span(24,25,List(1),world,world,false), Span(22,23,List(2),sponsor,sponsor-01,false), Span(20,21,List(3),promised,promise-01,false), Span(19,20,List(4),also,also,false), Span(17,18,List(5),he,he,false), Span(16,17,List(6),continent,continent,false), Span(11,12,List(7),meeting,meet-03,false), Span(7,8,List(8),throw,throw-01,false), Span(4,5,List(9),persuaded,persuade-01,false), Span(1,2,List(10),family,family,false)),Map(2 -> sponsor-01, 5 -> he, 8 -> throw-01, 7 -> meet-03, 1 -> world, 4 -> also, 6 -> continent, 9 -> persuade-01, 0 -> record, 10 -> family, 3 -> promise-01),Map(w -> world, h -> he, t -> throw-01, p2 -> persuade-01, s -> sponsor-01, m -> meet-03, p -> promise-01, a -> also, r -> record, c -> continent, f -> family))),[Ljava.lang.String;@3eed9ac1,Annotation([Ljava.lang.String;@614b152d,[Ljava.lang.String;@85b6f42,[Ljava.lang.String;@2ae55a57),Annotation([Ljava.lang.String;@378e1bc1,[Ljava.lang.String;@52c03865,[Ledu.cmu.lti.nlp.amr.Dependency;@49b69954),Annotation([Ljava.lang.String;@730c7f9a,[Ljava.lang.String;@398d9278,[Ljava.lang.String;@7d8b21cc),Annotation([Ljava.lang.String;@39581878,[Ljava.lang.String;@46ae8bb1,[Ledu.cmu.lti.nlp.amr.Entity;@6d5535b7))
AMR:
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, s / sponsor-01)
(p / promise-01, mod, a / also)
(p / promise-01, time, c / continent)
(p2 / persuade-01, ARG0, f / family)
(p2 / persuade-01, ARG1, p / promise-01)
(p2 / persuade-01, ARG2, t / throw-01)
(r / record, mod, w / world)
(r / record, poss, h / he)
(t / throw-01, time, m / meet-03)

Decoded in 96,421 microseconds
Sentence: local authority employers have promised to improve their 5

Spans:
Span 8-9:  5 => 5
Span 1-2:  authority => authority
Span 6-7:  improve => improve-01
Span 0-1:  local => local
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),5,5,false), Span(6,7,List(1),improve,improve-01,false), Span(4,5,List(2),promised,promise-01,false), Span(1,2,List(3),authority,authority,false), Span(0,1,List(4),local,local,false)),Map(2 -> promise-01, 1 -> improve-01, 4 -> local, 0 -> 5, 3 -> authority),Map(5 -> 5, p -> promise-01, a -> authority, i -> improve-01, l -> local))),[Ljava.lang.String;@7539b974,Annotation([Ljava.lang.String;@20beaacc,[Ljava.lang.String;@45bf47df,[Ljava.lang.String;@1107a53f),Annotation([Ljava.lang.String;@cf1d3d5,[Ljava.lang.String;@588a4b96,[Ledu.cmu.lti.nlp.amr.Dependency;@5f689243),Annotation([Ljava.lang.String;@4a5a9da4,[Ljava.lang.String;@323a01f,[Ljava.lang.String;@17e554d5),Annotation([Ljava.lang.String;@51247834,[Ljava.lang.String;@314fc78a,[Ledu.cmu.lti.nlp.amr.Entity;@6cb54e50))
AMR:
(a / authority, mod, l / local)
(i / improve-01, ARG1, 5 / 5)
(p / promise-01, ARG1, a / authority)
(p / promise-01, ARG2, i / improve-01)

Decoded in 19,275 microseconds
Sentence: more important still he secured an expansion of the building industry by promising that the scheme would operate steadily for fifteen years

Spans:
Span 9-10:  building => build-01
Span 6-7:  expansion => expand-01
Span 3-4:  he => he
Span 1-2:  important => important
Span 10-11:  industry => industry
Span 17-18:  operate => operate-01
Span 12-13:  promising => promise-01
Span 15-16:  scheme => scheme
Span 4-5:  secured => secure-01
Span 18-19:  steadily => steady
Span 2-3:  still => still
Span 21-22:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(1, 0),years,(temporal-quantity :unit year),false), Span(18,19,List(2),steadily,steady,false), Span(17,18,List(3),operate,operate-01,false), Span(15,16,List(4),scheme,scheme,false), Span(12,13,List(5),promising,promise-01,false), Span(10,11,List(6),industry,industry,false), Span(9,10,List(7),building,build-01,false), Span(6,7,List(8),expansion,expand-01,false), Span(4,5,List(9),secured,secure-01,false), Span(3,4,List(10),he,he,false), Span(2,3,List(11),still,still,false), Span(1,2,List(12),important,important,false)),Map(2 -> steady, 5 -> promise-01, 12 -> important, 8 -> expand-01, 7 -> build-01, 1 -> year, 4 -> scheme, 11 -> still, 6 -> industry, 0 -> temporal-quantity, 9 -> secure-01, 3 -> operate-01, 10 -> he),Map(e -> expand-01, h -> he, s2 -> scheme, t -> temporal-quantity, b -> build-01, s -> steady, s4 -> still, y -> year, p -> promise-01, i2 -> important, i -> industry, s3 -> secure-01, o -> operate-01))),[Ljava.lang.String;@73289df1,Annotation([Ljava.lang.String;@6f997447,[Ljava.lang.String;@43a11a8e,[Ljava.lang.String;@5d68352),Annotation([Ljava.lang.String;@46477f7c,[Ljava.lang.String;@2c9f0,[Ledu.cmu.lti.nlp.amr.Dependency;@3717ab91),Annotation([Ljava.lang.String;@7300d8d8,[Ljava.lang.String;@3c9c87e4,[Ljava.lang.String;@489da8d2),Annotation([Ljava.lang.String;@66b6983c,[Ljava.lang.String;@5dc4bfd2,[Ledu.cmu.lti.nlp.amr.Entity;@200da416))
AMR:
(b / build-01, ARG0, t / temporal-quantity)
(e / expand-01, ARG1, i / industry)
(i / industry, mod, b / build-01)
(o / operate-01, ARG0, i2 / important)
(o / operate-01, ARG1, s2 / scheme)
(o / operate-01, manner, s / steady)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, o / operate-01)
(s3 / secure-01, ARG0, h / he)
(s3 / secure-01, ARG1, e / expand-01)
(s3 / secure-01, mod, s4 / still)
(t / temporal-quantity, unit, y / year)

Decoded in 107,643 microseconds
Sentence: but the threeweek drive of courage clubs championship activity which begins in england today promises to settle more issues

NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "england"))
Spans:
Span 8-9:  activity => activity
Span 10-11:  begins => begin-01
Span 0-1:  but => contrast-01
Span 6-7:  clubs => club
Span 5-6:  courage => courage
Span 3-4:  drive => drive-01
Span 12-13:  england => (country :name (name :op "England"))
Span 18-19:  issues => issue
Span 14-15:  promises => promise-01
Span 16-17:  settle => settle-02
Span 13-14:  today => today

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),issues,issue,false), Span(16,17,List(1),settle,settle-02,false), Span(14,15,List(2),promises,promise-01,false), Span(13,14,List(3),today,today,false), Span(12,13,List(6, 5, 4),england,(country :name (name :op "England")),false), Span(10,11,List(7),begins,begin-01,false), Span(8,9,List(8),activity,activity,false), Span(6,7,List(9),clubs,club,false), Span(5,6,List(10),courage,courage,false), Span(3,4,List(11),drive,drive-01,false), Span(0,1,List(12),but,contrast-01,false)),Map(2 -> promise-01, 5 -> name, 12 -> contrast-01, 8 -> activity, 7 -> begin-01, 1 -> settle-02, 4 -> country, 11 -> drive-01, 6 -> "England", 0 -> issue, 9 -> club, 3 -> today, 10 -> courage),Map(n -> name, b -> begin-01, t -> today, c4 -> contrast-01, s -> settle-02, d -> drive-01, p -> promise-01, c3 -> courage, a -> activity, i -> issue, c -> country, c2 -> club))),[Ljava.lang.String;@5f8fb0ca,Annotation([Ljava.lang.String;@529fcec9,[Ljava.lang.String;@79c1187f,[Ljava.lang.String;@742f784b),Annotation([Ljava.lang.String;@5882bf84,[Ljava.lang.String;@6feba081,[Ledu.cmu.lti.nlp.amr.Dependency;@5676ae8e),Annotation([Ljava.lang.String;@9be18fb,[Ljava.lang.String;@1f5a0bbc,[Ljava.lang.String;@50b873b8),Annotation([Ljava.lang.String;@7db55e6e,[Ljava.lang.String;@e4ac83c,[Ledu.cmu.lti.nlp.amr.Entity;@4f9fe278))
AMR:
(b / begin-01, ARG1, a / activity)
(b / begin-01, purpose, s / settle-02)
(c / country, name, n / name)
(c2 / club, mod, c3 / courage)
(c4 / contrast-01, ARG1, d / drive-01)
(d / drive-01, ARG0, a / activity)
(d / drive-01, ARG1, c2 / club)
(n / name, op, "England")
(p / promise-01, ARG0, c / country)
(p / promise-01, ARG1, s / settle-02)
(p / promise-01, time, t / today)
(s / settle-02, ARG1, i / issue)

Decoded in 146,499 microseconds
Sentence: king hussein earlier inaugurated parliament with an address to the elected lower house and the royally appointed senate in which he promised political and economic reforms and hinted that he might lift martial law imposed 22 years ago

Spans:
Span 35-36:  22 => 22
Span 7-8:  address => address-02
Span 26-27:  and => and
Span 23-24:  and => and
Span 13-14:  and => and
Span 16-17:  appointed => appoint-01
Span 2-3:  earlier => early
Span 24-25:  economic => economy
Span 10-11:  elected => elect-01
Span 29-30:  he => he
Span 20-21:  he => he
Span 27-28:  hinted => hint-01
Span 34-35:  imposed => impose-01
Span 3-4:  inaugurated => inaugurate-02
Span 0-1:  king => king
Span 33-34:  law => law
Span 31-32:  lift => lift-01
Span 11-13:  lower house => (name :op "House" :op "Lower")
Span 32-33:  martial => martial
Span 4-5:  parliament => (government-organization :name (name :op "Parliament"))
Span 22-23:  political => politics
Span 21-22:  promised => promise-01
Span 25-26:  reforms => reform-01
Span 17-18:  senate => senate
Span 36-37:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(1, 0),years,(temporal-quantity :unit year),false), Span(35,36,List(2),22,22,false), Span(34,35,List(3),imposed,impose-01,false), Span(33,34,List(4),law,law,false), Span(32,33,List(5),martial,martial,false), Span(31,32,List(6),lift,lift-01,false), Span(29,30,List(7),he,he,false), Span(27,28,List(8),hinted,hint-01,false), Span(26,27,List(9),and,and,false), Span(25,26,List(10),reforms,reform-01,false), Span(24,25,List(11),economic,economy,false), Span(23,24,List(12),and,and,false), Span(22,23,List(13),political,politics,false), Span(21,22,List(14),promised,promise-01,false), Span(20,21,List(15),he,he,false), Span(17,18,List(16),senate,senate,false), Span(16,17,List(17),appointed,appoint-01,false), Span(13,14,List(18),and,and,false), Span(11,13,List(21, 20, 19),lower house,(name :op "House" :op "Lower"),false), Span(10,11,List(22),elected,elect-01,false), Span(7,8,List(23),address,address-02,false), Span(4,5,List(26, 25, 24),parliament,(government-organization :name (name :op "Parliament")),false), Span(3,4,List(27),inaugurated,inaugurate-02,false), Span(2,3,List(28),earlier,early,false), Span(0,1,List(29),king,king,false)),Map(2 -> 22, 5 -> martial, 27 -> inaugurate-02, 12 -> and, 8 -> hint-01, 15 -> he, 21 -> "Lower", 18 -> and, 24 -> government-organization, 7 -> he, 1 -> year, 17 -> appoint-01, 23 -> address-02, 26 -> "Parliament", 4 -> law, 11 -> economy, 14 -> promise-01, 29 -> king, 20 -> "House", 28 -> early, 6 -> lift-01, 9 -> and, 0 -> temporal-quantity, 22 -> elect-01, 16 -> senate, 19 -> name, 10 -> reform-01, 3 -> impose-01, 25 -> name, 13 -> politics),Map(e -> economy, n -> name, h -> he, 2 -> 22, h2 -> hint-01, t -> temporal-quantity, k -> king, p2 -> promise-01, e2 -> elect-01, a3 -> appoint-01, s -> senate, m -> martial, y -> year, p -> politics, g -> government-organization, a -> and, a5 -> address-02, i2 -> inaugurate-02, l2 -> lift-01, a2 -> and, r -> reform-01, i -> impose-01, h3 -> he, l -> law, e3 -> early, n2 -> name, a4 -> and))),[Ljava.lang.String;@aa1c3ae,Annotation([Ljava.lang.String;@235d9f6,[Ljava.lang.String;@1d78a69c,[Ljava.lang.String;@5c025ae1),Annotation([Ljava.lang.String;@1e9c98f8,[Ljava.lang.String;@3afed17b,[Ledu.cmu.lti.nlp.amr.Dependency;@2f6b007f),Annotation([Ljava.lang.String;@19edaa2b,[Ljava.lang.String;@423efa59,[Ljava.lang.String;@34a60b09),Annotation([Ljava.lang.String;@11e96e0,[Ljava.lang.String;@7f434cb2,[Ledu.cmu.lti.nlp.amr.Entity;@1b607b64))
AMR:
(a / and, op, h2 / hint-01)
(a / and, op, p / politics)
(a / and, op, p2 / promise-01)
(a2 / and, op, r / reform-01)
(a3 / appoint-01, ARG1, s / senate)
(a4 / and, op, a3 / appoint-01)
(a4 / and, op, p2 / promise-01)
(e2 / elect-01, ARG0, 2 / 22)
(g / government-organization, mod, e2 / elect-01)
(g / government-organization, name, n2 / name)
(g / government-organization, time, a5 / address-02)
(g / government-organization, time, e3 / early)
(h2 / hint-01, ARG0, h / he)
(h2 / hint-01, ARG1, n / name)
(i / impose-01, ARG1, l / law)
(i2 / inaugurate-02, ARG0, k / king)
(i2 / inaugurate-02, ARG1, g / government-organization)
(l / law, mod, m / martial)
(l2 / lift-01, ARG0, h / he)
(l2 / lift-01, ARG1, l / law)
(n / name, op, "House")
(n / name, op, "Lower")
(n2 / name, op, "Parliament")
(p2 / promise-01, ARG0, h3 / he)
(p2 / promise-01, ARG1, g / government-organization)
(r / reform-01, ARG0, h3 / he)
(r / reform-01, ARG1, e / economy)
(t / temporal-quantity, quant, 2 / 22)
(t / temporal-quantity, unit, y / year)

Decoded in 1,287,734 microseconds
Sentence: he promised to come and

Spans:
Span 4-5:  and => and
Span 0-1:  he => he
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),and,and,false), Span(1,2,List(1),promised,promise-01,false), Span(0,1,List(2),he,he,false)),Map(2 -> he, 1 -> promise-01, 0 -> and),Map(h -> he, p -> promise-01, a -> and))),[Ljava.lang.String;@5b44f046,Annotation([Ljava.lang.String;@afab27a,[Ljava.lang.String;@50db6d37,[Ljava.lang.String;@75df5f59),Annotation([Ljava.lang.String;@1bed0884,[Ljava.lang.String;@66ca206e,[Ledu.cmu.lti.nlp.amr.Dependency;@60174a7a),Annotation([Ljava.lang.String;@191ac0df,[Ljava.lang.String;@2b6c7d59,[Ljava.lang.String;@5f997454),Annotation([Ljava.lang.String;@53a467d4,[Ljava.lang.String;@4e9cba32,[Ledu.cmu.lti.nlp.amr.Entity;@138450f0))
AMR:
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, a / and)

Decoded in 5,356 microseconds
Sentence: will the radical review of natos doctrines and strategies which it promises aimed at adjusting to the new political situation in europe produce real changes such as abandonment of the first strike doctrine and of the strategy of flexible response

Spans:
Span 27-28:  abandonment => abandon-03
Span 14-15:  adjusting => adjust-01
Span 12-13:  aimed => aim-02
Span 33-34:  and => and
Span 7-8:  and => and
Span 24-25:  changes => change-01
Span 32-33:  doctrine => doctrine
Span 21-22:  europe => (continent :name (name :op "Europe"))
Span 38-39:  flexible => flexible
Span 10-11:  it => it
Span 17-18:  new => new
Span 18-19:  political => politics
Span 22-23:  produce => produce-01
Span 11-12:  promises => promise-01
Span 2-3:  radical => radical
Span 23-24:  real => real
Span 39-40:  response => respond-01
Span 3-4:  review => review-01
Span 19-20:  situation => situation
Span 8-9:  strategies => strategy
Span 36-37:  strategy => strategy
Span 31-32:  strike => strike-01
Span 25-26:  such => such

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),response,respond-01,false), Span(38,39,List(1),flexible,flexible,false), Span(36,37,List(2),strategy,strategy,false), Span(33,34,List(3),and,and,false), Span(32,33,List(4),doctrine,doctrine,false), Span(31,32,List(5),strike,strike-01,false), Span(27,28,List(6),abandonment,abandon-03,false), Span(25,26,List(7),such,such,false), Span(24,25,List(8),changes,change-01,false), Span(23,24,List(9),real,real,false), Span(22,23,List(10),produce,produce-01,false), Span(21,22,List(13, 12, 11),europe,(continent :name (name :op "Europe")),false), Span(19,20,List(14),situation,situation,false), Span(18,19,List(15),political,politics,false), Span(17,18,List(16),new,new,false), Span(14,15,List(17),adjusting,adjust-01,false), Span(12,13,List(18),aimed,aim-02,false), Span(11,12,List(19),promises,promise-01,false), Span(10,11,List(20),it,it,false), Span(8,9,List(21),strategies,strategy,false), Span(7,8,List(22),and,and,false), Span(3,4,List(23),review,review-01,false), Span(2,3,List(24),radical,radical,false)),Map(2 -> strategy, 5 -> strike-01, 12 -> name, 8 -> change-01, 15 -> politics, 21 -> strategy, 18 -> aim-02, 24 -> radical, 7 -> such, 1 -> flexible, 17 -> adjust-01, 23 -> review-01, 4 -> doctrine, 11 -> continent, 14 -> situation, 20 -> it, 6 -> abandon-03, 9 -> real, 0 -> respond-01, 22 -> and, 16 -> new, 19 -> promise-01, 10 -> produce-01, 3 -> and, 13 -> "Europe"),Map(s5 -> strategy, n -> name, r3 -> review-01, s2 -> strike-01, p2 -> politics, a3 -> adjust-01, s -> strategy, s4 -> situation, d -> doctrine, r2 -> real, p -> produce-01, a -> and, a5 -> and, r4 -> radical, i -> it, r -> respond-01, a2 -> abandon-03, s3 -> such, c -> change-01, f -> flexible, p3 -> promise-01, n2 -> new, c2 -> continent, a4 -> aim-02))),[Ljava.lang.String;@517c642,Annotation([Ljava.lang.String;@5bd919aa,[Ljava.lang.String;@a241702,[Ljava.lang.String;@47628981),Annotation([Ljava.lang.String;@163198c4,[Ljava.lang.String;@1224773e,[Ledu.cmu.lti.nlp.amr.Dependency;@181090c0),Annotation([Ljava.lang.String;@678f3997,[Ljava.lang.String;@6c0e1d9e,[Ljava.lang.String;@12baa77e),Annotation([Ljava.lang.String;@1c4a4acd,[Ljava.lang.String;@5174e73d,[Ledu.cmu.lti.nlp.amr.Entity;@51f97f92))
AMR:
(a / and, domain, c2 / continent)
(a / and, op, a2 / abandon-03)
(a / and, op, p / produce-01)
(a2 / abandon-03, ARG1, d / doctrine)
(a3 / adjust-01, ARG1, s4 / situation)
(a4 / aim-02, ARG2, a3 / adjust-01)
(a5 / and, op, s5 / strategy)
(c / change-01, ARG1, s3 / such)
(c / change-01, mod, r2 / real)
(c2 / continent, name, n / name)
(n / name, op, "Europe")
(p / produce-01, ARG1, c / change-01)
(p3 / promise-01, ARG0, i / it)
(p3 / promise-01, ARG1, a4 / aim-02)
(p3 / promise-01, ARG2, a5 / and)
(r / respond-01, ARG0, c2 / continent)
(r / respond-01, ARG1, s / strategy)
(r / respond-01, mod, f / flexible)
(r3 / review-01, ARG1, a5 / and)
(r3 / review-01, mod, r4 / radical)
(s2 / strike-01, ARG0, d / doctrine)
(s4 / situation, location, c2 / continent)
(s4 / situation, mod, n2 / new)
(s4 / situation, mod, p2 / politics)

Decoded in 1,122,225 microseconds
Sentence: he has shown as he promised he would at the start of the student unrest that china would not follow eastern europe on the path to democratic change

NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "china"))
Spans:
Span 27-28:  change => change-01
Span 16-17:  china => (country :name (name :op "China"))
Span 26-27:  democratic => democracy
Span 20-21:  eastern => east
Span 21-22:  europe => (continent :name (name :op "Europe"))
Span 19-20:  follow => follow-02
Span 6-7:  he => he
Span 4-5:  he => he
Span 0-1:  he => he
Span 24-25:  path => path
Span 5-6:  promised => promise-01
Span 2-3:  shown => show-01
Span 10-11:  start => start-01
Span 13-14:  student => (person :ARG0-of study-01)
Span 14-15:  unrest => unrest

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),change,change-01,false), Span(26,27,List(1),democratic,democracy,false), Span(24,25,List(2),path,path,false), Span(21,22,List(5, 4, 3),europe,(continent :name (name :op "Europe")),false), Span(20,21,List(6),eastern,east,false), Span(19,20,List(7),follow,follow-02,false), Span(16,17,List(10, 9, 8),china,(country :name (name :op "China")),false), Span(14,15,List(11),unrest,unrest,false), Span(13,14,List(13, 12),student,(person :ARG0-of study-01),false), Span(10,11,List(14),start,start-01,false), Span(6,7,List(15),he,he,false), Span(5,6,List(16),promised,promise-01,false), Span(4,5,List(17),he,he,false), Span(2,3,List(18),shown,show-01,false), Span(0,1,List(19),he,he,false)),Map(2 -> path, 5 -> "Europe", 12 -> person, 15 -> he, 8 -> country, 18 -> show-01, 7 -> follow-02, 17 -> he, 1 -> democracy, 4 -> name, 11 -> unrest, 14 -> start-01, 6 -> east, 0 -> change-01, 9 -> name, 16 -> promise-01, 19 -> he, 3 -> continent, 10 -> "China", 13 -> study-01),Map(e -> east, n -> name, h -> he, h2 -> he, s2 -> start-01, p2 -> person, s -> study-01, d -> democracy, p -> path, c3 -> country, h3 -> he, s3 -> show-01, c -> change-01, u -> unrest, f -> follow-02, p3 -> promise-01, c2 -> continent, n2 -> name))),[Ljava.lang.String;@19c8f45,Annotation([Ljava.lang.String;@4d81fbd6,[Ljava.lang.String;@10bcc65b,[Ljava.lang.String;@598288f2),Annotation([Ljava.lang.String;@8ecf5c7,[Ljava.lang.String;@7cfbe064,[Ledu.cmu.lti.nlp.amr.Dependency;@7c490556),Annotation([Ljava.lang.String;@1dfd90d9,[Ljava.lang.String;@7230a5f0,[Ljava.lang.String;@57de6a21),Annotation([Ljava.lang.String;@4b09c998,[Ljava.lang.String;@6f9240a4,[Ledu.cmu.lti.nlp.amr.Entity;@6ad20835))
AMR:
(c / change-01, ARG1, c2 / continent)
(c / change-01, mod, d / democracy)
(c2 / continent, mod, e / east)
(c2 / continent, name, n / name)
(c3 / country, name, n2 / name)
(f / follow-02, ARG0, c3 / country)
(f / follow-02, ARG1, c2 / continent)
(f / follow-02, manner, p / path)
(n / name, op, "Europe")
(n2 / name, op, "China")
(p3 / promise-01, ARG0, h2 / he)
(p3 / promise-01, ARG1, s2 / start-01)
(s / study-01, ARG0, p2 / person)
(s2 / start-01, ARG0, h / he)
(s2 / start-01, ARG1, f / follow-02)
(s2 / start-01, ARG2, u / unrest)
(s3 / show-01, ARG0, h3 / he)
(s3 / show-01, ARG1, p3 / promise-01)
(u / unrest, mod, p2 / person)

Decoded in 892,745 microseconds
Sentence: who else 64 but ronald reagan would have the folie de grandeur to promise to invite the steel and oil industries to rewrite the environmental protection agencys regulations

NER Entity: (person :name (name :op "ronald" :op "reagan"))
Spans:
Span 2-3:  64 => 64
Span 18-19:  and => and
Span 3-4:  but => contrast-01
Span 1-2:  else => else
Span 24-25:  environmental => environment
Span 20-21:  industries => industry
Span 15-16:  invite => invite-01
Span 19-20:  oil => oil
Span 13-14:  promise => promise-01
Span 25-26:  protection => protect-01
Span 27-28:  regulations => regulate-01
Span 4-6:  ronald reagan => (person :name (name :op "ronald" :op "reagan"))
Span 17-18:  steel => steel

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),regulations,regulate-01,false), Span(25,26,List(1),protection,protect-01,false), Span(24,25,List(2),environmental,environment,false), Span(20,21,List(3),industries,industry,false), Span(19,20,List(4),oil,oil,false), Span(18,19,List(5),and,and,false), Span(17,18,List(6),steel,steel,false), Span(15,16,List(7),invite,invite-01,false), Span(13,14,List(8),promise,promise-01,false), Span(4,6,List(12, 11, 10, 9),ronald reagan,(person :name (name :op "ronald" :op "reagan")),false), Span(3,4,List(13),but,contrast-01,false), Span(2,3,List(14),64,64,false), Span(1,2,List(15),else,else,false)),Map(2 -> environment, 5 -> and, 12 -> "reagan", 15 -> else, 8 -> promise-01, 7 -> invite-01, 1 -> protect-01, 4 -> oil, 11 -> "ronald", 14 -> 64, 6 -> steel, 0 -> regulate-01, 9 -> person, 3 -> industry, 10 -> name, 13 -> contrast-01),Map(e -> environment, n -> name, e2 -> else, p2 -> promise-01, s -> steel, p -> protect-01, a -> and, i2 -> invite-01, r -> regulate-01, i -> industry, c -> contrast-01, 6 -> 64, o -> oil, p3 -> person))),[Ljava.lang.String;@319065d,Annotation([Ljava.lang.String;@5ff0c541,[Ljava.lang.String;@38265f9c,[Ljava.lang.String;@5f4f1790),Annotation([Ljava.lang.String;@41941fd2,[Ljava.lang.String;@63b535a0,[Ledu.cmu.lti.nlp.amr.Dependency;@dd3ce84),Annotation([Ljava.lang.String;@4c9b4333,[Ljava.lang.String;@6558f08f,[Ljava.lang.String;@32197044),Annotation([Ljava.lang.String;@24199a0e,[Ljava.lang.String;@cd11fa6,[Ledu.cmu.lti.nlp.amr.Entity;@7574d1dc))
AMR:
(a / and, consist, i / industry)
(a / and, op, o / oil)
(a / and, op, s / steel)
(c / contrast-01, ARG0, e2 / else)
(c / contrast-01, ARG1, 6 / 64)
(c / contrast-01, ARG2, p3 / person)
(i2 / invite-01, ARG1, p3 / person)
(n / name, op, "reagan")
(n / name, op, "ronald")
(p / protect-01, ARG0, r / regulate-01)
(p / protect-01, ARG1, e / environment)
(p2 / promise-01, ARG1, a / and)
(p2 / promise-01, ARG2, i2 / invite-01)
(p3 / person, name, n / name)
(r / regulate-01, ARG1, i / industry)

Decoded in 163,927 microseconds
Sentence: i cannot promise to make you into a world authority on ingredients but i do hope to share my passion for good food with you and to inspire you to try a different type of tea or a new way of serving pasta

Spans:
Span 25-26:  and => and
Span 9-10:  authority => authority
Span 12-13:  but => contrast-01
Span 32-33:  different => differ-02
Span 22-23:  food => food
Span 21-22:  good => good
Span 15-16:  hope => hope-01
Span 13-14:  i => i
Span 0-1:  i => i
Span 11-12:  ingredients => ingredient
Span 27-28:  inspire => inspire-01
Span 38-39:  new => new
Span 36-37:  or => or
Span 19-20:  passion => passion
Span 2-3:  promise => promise-01
Span 41-42:  serving => serve-01
Span 17-18:  share => share-01
Span 35-36:  tea => tea
Span 30-31:  try => try-01
Span 33-34:  type => type
Span 39-40:  way => way
Span 8-9:  world => world
Span 28-29:  you => you
Span 24-25:  you => you
Span 5-6:  you => you

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),serving,serve-01,false), Span(39,40,List(1),way,way,false), Span(38,39,List(2),new,new,false), Span(36,37,List(3),or,or,false), Span(35,36,List(4),tea,tea,false), Span(33,34,List(5),type,type,false), Span(32,33,List(6),different,differ-02,false), Span(30,31,List(7),try,try-01,false), Span(28,29,List(8),you,you,false), Span(27,28,List(9),inspire,inspire-01,false), Span(25,26,List(10),and,and,false), Span(24,25,List(11),you,you,false), Span(22,23,List(12),food,food,false), Span(21,22,List(13),good,good,false), Span(19,20,List(14),passion,passion,false), Span(17,18,List(15),share,share-01,false), Span(15,16,List(16),hope,hope-01,false), Span(13,14,List(17),i,i,false), Span(12,13,List(18),but,contrast-01,false), Span(11,12,List(19),ingredients,ingredient,false), Span(9,10,List(20),authority,authority,false), Span(8,9,List(21),world,world,false), Span(5,6,List(22),you,you,false), Span(2,3,List(23),promise,promise-01,false), Span(0,1,List(24),i,i,false)),Map(2 -> new, 5 -> type, 12 -> food, 8 -> you, 15 -> share-01, 21 -> world, 18 -> contrast-01, 24 -> i, 7 -> try-01, 1 -> way, 17 -> i, 23 -> promise-01, 4 -> tea, 11 -> you, 14 -> passion, 20 -> authority, 6 -> differ-02, 9 -> inspire-01, 0 -> serve-01, 22 -> you, 16 -> hope-01, 19 -> ingredient, 10 -> and, 3 -> or, 13 -> good),Map(n -> new, w -> way, h -> hope-01, i4 -> i, s2 -> share-01, t -> tea, p2 -> promise-01, s -> serve-01, d -> differ-02, t3 -> try-01, i3 -> ingredient, y -> you, g -> good, p -> passion, a -> and, y3 -> you, t2 -> type, i2 -> i, w2 -> world, i -> inspire-01, a2 -> authority, c -> contrast-01, f -> food, o -> or, y2 -> you))),[Ljava.lang.String;@6a09dc81,Annotation([Ljava.lang.String;@2d6bcf8a,[Ljava.lang.String;@1068452,[Ljava.lang.String;@52d92404),Annotation([Ljava.lang.String;@2dcbad1a,[Ljava.lang.String;@16d19d73,[Ledu.cmu.lti.nlp.amr.Dependency;@1bb7f4b9),Annotation([Ljava.lang.String;@4a23abe6,[Ljava.lang.String;@6beaaf10,[Ljava.lang.String;@7c8b7ac9),Annotation([Ljava.lang.String;@292a6200,[Ljava.lang.String;@1d88031d,[Ledu.cmu.lti.nlp.amr.Entity;@4c847410))
AMR:
(a / and, op, i / inspire-01)
(a2 / authority, mod, w2 / world)
(a2 / authority, poss, i3 / ingredient)
(c / contrast-01, ARG1, a2 / authority)
(c / contrast-01, ARG2, h / hope-01)
(d / differ-02, ARG1, t2 / type)
(f / food, mod, g / good)
(h / hope-01, ARG0, i2 / i)
(h / hope-01, ARG1, s2 / share-01)
(i / inspire-01, ARG0, y2 / you)
(i / inspire-01, ARG1, t3 / try-01)
(i / inspire-01, ARG2, t2 / type)
(o / or, op, w / way)
(p2 / promise-01, ARG0, i4 / i)
(p2 / promise-01, ARG1, c / contrast-01)
(p2 / promise-01, ARG2, y3 / you)
(s / serve-01, instrument, w / way)
(s2 / share-01, ARG0, a / and)
(s2 / share-01, ARG1, p / passion)
(s2 / share-01, ARG2, f / food)
(t / tea, mod, t2 / type)
(t3 / try-01, ARG0, y / you)
(t3 / try-01, ARG1, o / or)
(w / way, mod, n / new)

Decoded in 1,303,016 microseconds
Sentence: if the market in its superior wisdom kindly provides a fall in the exchange rate why does mr major not just relax and enjoy it  after all it promises to boost output and help close the current account deficit which he is believed to take more seriously than did his predecessor

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = if the market in its superior wisdom kindly provides a fall in the exchange rate why does mr major not just relax and enjoy it  after all it promises to boost output and help close the current account deficit which he is believed to take more seriously than did his predecessor
myTokenized = if the market in its superior wisdom kindly provides a fall in the exchange rate why does mr major not just relax and enjoy it after all it promises to boost output and help close the current account deficit which he is believed to take more seriously than did his predecessor
i = 25
prefix = List(if, the, market, in, its, superior, wisdom, kindly, provides, a, fall, in, the, exchange, rate, why, does, mr, major, not, just, relax, and, enjoy, it, after)
regexr = \Qi\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qm\E ?\Qa\E ?\Qr\E ?\Qk\E ?\Qe\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qi\E ?\Qt\E ?\Qs\E ?\Qs\E ?\Qu\E ?\Qp\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qo\E ?\Qr\E ?\Qw\E ?\Qi\E ?\Qs\E ?\Qd\E ?\Qo\E ?\Qm\E ?\Qk\E ?\Qi\E ?\Qn\E ?\Qd\E ?\Ql\E ?\Qy\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qv\E ?\Qi\E ?\Qd\E ?\Qe\E ?\Qs\E ?\Qa\E ?\Qf\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qe\E ?\Qx\E ?\Qc\E ?\Qh\E ?\Qa\E ?\Qn\E ?\Qg\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qw\E ?\Qh\E ?\Qy\E ?\Qd\E ?\Qo\E ?\Qe\E ?\Qs\E ?\Qm\E ?\Qr\E ?\Qm\E ?\Qa\E ?\Qj\E ?\Qo\E ?\Qr\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qj\E ?\Qu\E ?\Qs\E ?\Qt\E ?\Qr\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qx\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Qn\E ?\Qj\E ?\Qo\E ?\Qy\E ?\Qi\E ?\Qt\E ?\Qa\E ?\Qf\E ?\Qt\E ?\Qe\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: mercury has already been promised a stake in the latest portable telephone round leaving gecplessey to compete for up to two other licences on offer

Spans:
Span 2-3:  already => already
Span 16-17:  compete => compete-01
Span 9-10:  latest => (late :degree most)
Span 13-14:  leaving => leave-01
Span 0-1:  mercury => mercury
Span 24-25:  offer => offer-01
Span 21-22:  other => other
Span 10-11:  portable => portable
Span 4-5:  promised => promise-01
Span 12-13:  round => round
Span 6-7:  stake => stake
Span 11-12:  telephone => telephone-01
Span 20-21:  two => 2

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),offer,offer-01,false), Span(21,22,List(1),other,other,false), Span(20,21,List(2),two,2,false), Span(16,17,List(3),compete,compete-01,false), Span(13,14,List(4),leaving,leave-01,false), Span(12,13,List(5),round,round,false), Span(11,12,List(6),telephone,telephone-01,false), Span(10,11,List(7),portable,portable,false), Span(9,10,List(9, 8),latest,(late :degree most),false), Span(6,7,List(10),stake,stake,false), Span(4,5,List(11),promised,promise-01,false), Span(2,3,List(12),already,already,false), Span(0,1,List(13),mercury,mercury,false)),Map(2 -> 2, 5 -> round, 12 -> already, 8 -> late, 7 -> portable, 1 -> other, 4 -> leave-01, 11 -> promise-01, 6 -> telephone-01, 0 -> offer-01, 9 -> most, 3 -> compete-01, 10 -> stake, 13 -> mercury),Map(2 -> 2, t -> telephone-01, m2 -> mercury, p2 -> promise-01, s -> stake, m -> most, p -> portable, a -> already, o2 -> other, l2 -> late, r -> round, c -> compete-01, l -> leave-01, o -> offer-01))),[Ljava.lang.String;@159409c9,Annotation([Ljava.lang.String;@2a0e7630,[Ljava.lang.String;@1b715ee2,[Ljava.lang.String;@300c5581),Annotation([Ljava.lang.String;@79c1a0cb,[Ljava.lang.String;@1723ade0,[Ledu.cmu.lti.nlp.amr.Dependency;@276c58fe),Annotation([Ljava.lang.String;@3a469fea,[Ljava.lang.String;@72acd989,[Ljava.lang.String;@31fdec30),Annotation([Ljava.lang.String;@159d5cf4,[Ljava.lang.String;@e41a242,[Ledu.cmu.lti.nlp.amr.Entity;@7703a25d))
AMR:
(c / compete-01, ARG1, r / round)
(l / leave-01, ARG1, c / compete-01)
(l2 / late, degree, m / most)
(o / offer-01, ARG1, a / already)
(p2 / promise-01, ARG1, m2 / mercury)
(p2 / promise-01, ARG2, s / stake)
(p2 / promise-01, time, a / already)
(r / round, mod, p / portable)
(r / round, mod, t / telephone-01)
(r / round, time, l2 / late)
(s / stake, op, t / telephone-01)
(t / telephone-01, ARG0, 2 / 2)
(t / telephone-01, ARG1, o2 / other)

Decoded in 303,350 microseconds
Sentence:   we recognise the importance of the sport and i can promise you it is a very faithful connection between the north and south

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   we recognise the importance of the sport and i can promise you it is a very faithful connection between the north and south
myTokenized = we recognise the importance of the sport and i can promise you it is a very faithful connection between the north and south
i = 0
prefix = List(we)
regexr = \Qw\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: mr boston discovering that his literary invention has been borrowed has demanded and been promised an apology

Spans:
Span 12-13:  and => and
Span 16-17:  apology => apologize-01
Span 9-10:  borrowed => borrow-01
Span 11-12:  demanded => demand-01
Span 2-3:  discovering => discover-01
Span 6-7:  invention => invent-01
Span 5-6:  literary => literary
Span 14-15:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),apology,apologize-01,false), Span(14,15,List(1),promised,promise-01,false), Span(12,13,List(2),and,and,false), Span(11,12,List(3),demanded,demand-01,false), Span(9,10,List(4),borrowed,borrow-01,false), Span(6,7,List(5),invention,invent-01,false), Span(5,6,List(6),literary,literary,false), Span(2,3,List(7),discovering,discover-01,false)),Map(2 -> and, 5 -> invent-01, 7 -> discover-01, 1 -> promise-01, 4 -> borrow-01, 6 -> literary, 0 -> apologize-01, 3 -> demand-01),Map(b -> borrow-01, d -> demand-01, p -> promise-01, a -> apologize-01, d2 -> discover-01, i -> invent-01, a2 -> and, l -> literary))),[Ljava.lang.String;@769a90b9,Annotation([Ljava.lang.String;@1d939e84,[Ljava.lang.String;@468bfb47,[Ljava.lang.String;@101e1680),Annotation([Ljava.lang.String;@275735c4,[Ljava.lang.String;@4e8aeb09,[Ledu.cmu.lti.nlp.amr.Dependency;@24cc428),Annotation([Ljava.lang.String;@7de21f45,[Ljava.lang.String;@8732b94,[Ljava.lang.String;@413205e1),Annotation([Ljava.lang.String;@3b201837,[Ljava.lang.String;@3815e134,[Ledu.cmu.lti.nlp.amr.Entity;@247439b0))
AMR:
(a2 / and, op, d / demand-01)
(a2 / and, op, p / promise-01)
(b / borrow-01, ARG1, i / invent-01)
(b / borrow-01, ARG2, p / promise-01)
(d2 / discover-01, ARG1, i / invent-01)
(i / invent-01, mod, l / literary)
(p / promise-01, ARG1, a / apologize-01)

Decoded in 30,437 microseconds
Sentence: like a good commander he said he was only concerned for his men and very grateful that the americans have promised there will be no reprisals against the troops

Spans:
Span 18-19:  americans => (person :mod (country :name (name :op "America")))
Span 13-14:  and => and
Span 3-4:  commander => (have-org-role-91 :ARG2 commander)
Span 9-10:  concerned => concern-01
Span 2-3:  good => good
Span 6-7:  he => he
Span 4-5:  he => he
Span 12-13:  men => man
Span 24-25:  no => -
Span 8-9:  only => only
Span 20-21:  promised => promise-01
Span 25-26:  reprisals => reprisal
Span 5-6:  said => say-01
Span 28-29:  troops => troop
Span 14-15:  very => very

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),troops,troop,false), Span(25,26,List(1),reprisals,reprisal,false), Span(24,25,List(2),no,-,false), Span(20,21,List(3),promised,promise-01,false), Span(18,19,List(7, 6, 5, 4),americans,(person :mod (country :name (name :op "America"))),false), Span(14,15,List(8),very,very,false), Span(13,14,List(9),and,and,false), Span(12,13,List(10),men,man,false), Span(9,10,List(11),concerned,concern-01,false), Span(8,9,List(12),only,only,false), Span(6,7,List(13),he,he,false), Span(5,6,List(14),said,say-01,false), Span(4,5,List(15),he,he,false), Span(3,4,List(17, 16),commander,(have-org-role-91 :ARG2 commander),false), Span(2,3,List(18),good,good,false)),Map(2 -> -, 5 -> country, 12 -> only, 15 -> he, 8 -> very, 18 -> good, 7 -> "America", 17 -> commander, 1 -> reprisal, 4 -> person, 11 -> concern-01, 14 -> say-01, 6 -> name, 0 -> troop, 9 -> and, 16 -> have-org-role-91, 3 -> promise-01, 10 -> man, 13 -> he),Map(n -> name, h -> he, h2 -> he, t -> troop, p2 -> person, s -> say-01, v -> very, m -> man, g -> good, p -> promise-01, c3 -> commander, a -> and, r -> reprisal, - -> -, h3 -> have-org-role-91, c -> country, o -> only, c2 -> concern-01))),[Ljava.lang.String;@4a776482,Annotation([Ljava.lang.String;@6467b8ff,[Ljava.lang.String;@55a2a0d8,[Ljava.lang.String;@27edf0d4),Annotation([Ljava.lang.String;@765e02c6,[Ljava.lang.String;@160851e0,[Ledu.cmu.lti.nlp.amr.Dependency;@7c37546c),Annotation([Ljava.lang.String;@1487be2a,[Ljava.lang.String;@5bd5c1ed,[Ljava.lang.String;@2eaeddb5),Annotation([Ljava.lang.String;@5a5dae04,[Ljava.lang.String;@3c4bb6f5,[Ledu.cmu.lti.nlp.amr.Entity;@ed8adc0))
AMR:
(a / and, op, c2 / concern-01)
(a / and, op, p / promise-01)
(c / country, name, n / name)
(c2 / concern-01, ARG0, m / man)
(c2 / concern-01, ARG1, h / he)
(c2 / concern-01, mod, o / only)
(c3 / commander, mod, g / good)
(h3 / have-org-role-91, ARG0, h / he)
(h3 / have-org-role-91, ARG1, v / very)
(h3 / have-org-role-91, ARG2, c3 / commander)
(n / name, op, "America")
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, r / reprisal)
(p2 / person, mod, c / country)
(r / reprisal, polarity, - / -)
(s / say-01, ARG0, h2 / he)
(s / say-01, ARG1, c2 / concern-01)
(t / troop, subevent, r / reprisal)

Decoded in 722,079 microseconds
Sentence: the king wrote to his bridetobe i promise to take you as my only lover banishing from my mind and heart all others and serving only you

Spans:
Span 21-22:  all => all
Span 23-24:  and => and
Span 19-20:  and => and
Span 20-21:  heart => heart
Span 6-7:  i => i
Span 1-2:  king => king
Span 18-19:  mind => mind
Span 25-26:  only => only
Span 13-14:  only => only
Span 22-23:  others => other
Span 7-8:  promise => promise-01
Span 24-25:  serving => serve-01
Span 2-3:  wrote => write-01
Span 26-27:  you => you
Span 10-11:  you => you

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),you,you,false), Span(25,26,List(1),only,only,false), Span(24,25,List(2),serving,serve-01,false), Span(23,24,List(3),and,and,false), Span(22,23,List(4),others,other,false), Span(21,22,List(5),all,all,false), Span(20,21,List(6),heart,heart,false), Span(19,20,List(7),and,and,false), Span(18,19,List(8),mind,mind,false), Span(13,14,List(9),only,only,false), Span(10,11,List(10),you,you,false), Span(7,8,List(11),promise,promise-01,false), Span(6,7,List(12),i,i,false), Span(2,3,List(13),wrote,write-01,false), Span(1,2,List(14),king,king,false)),Map(2 -> serve-01, 5 -> all, 12 -> i, 8 -> mind, 7 -> and, 1 -> only, 4 -> other, 11 -> promise-01, 14 -> king, 6 -> heart, 0 -> you, 9 -> only, 3 -> and, 10 -> you, 13 -> write-01),Map(w -> write-01, h -> heart, k -> king, o3 -> only, a3 -> and, s -> serve-01, m -> mind, y -> you, p -> promise-01, a -> and, o2 -> other, a2 -> all, i -> i, o -> only, y2 -> you))),[Ljava.lang.String;@51cd0090,Annotation([Ljava.lang.String;@69e017e4,[Ljava.lang.String;@7740b009,[Ljava.lang.String;@37e55c09),Annotation([Ljava.lang.String;@32fd6f8a,[Ljava.lang.String;@1ca5e72d,[Ledu.cmu.lti.nlp.amr.Dependency;@4fec4a0c),Annotation([Ljava.lang.String;@21f182d2,[Ljava.lang.String;@76c3ba66,[Ljava.lang.String;@2c02bb74),Annotation([Ljava.lang.String;@6760d33e,[Ljava.lang.String;@5ccc078,[Ledu.cmu.lti.nlp.amr.Entity;@45700941))
AMR:
(a / and, op, s / serve-01)
(a3 / and, op, h / heart)
(a3 / and, op, m / mind)
(a3 / and, op, s / serve-01)
(m / mind, poss, i / i)
(m / mind, poss, o3 / only)
(o2 / other, quant, a2 / all)
(p / promise-01, ARG0, k / king)
(p / promise-01, mod, i / i)
(s / serve-01, ARG0, o2 / other)
(s / serve-01, ARG1, y / you)
(w / write-01, ARG0, y2 / you)
(w / write-01, ARG1, k / king)
(y / you, mod, o / only)

Decoded in 209,317 microseconds
Sentence: but hardly had he promised a derisory 100 lei  7 wage increase across the board than members of the crowd began shouting down with ceausescu

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = but hardly had he promised a derisory 100 lei  7 wage increase across the board than members of the crowd began shouting down with ceausescu
myTokenized = but hardly had he promised a derisory 100 lei 7 wage increase across the board than members of the crowd began shouting down with ceausescu
i = 9
prefix = List(but, hardly, had, he, promised, a, derisory, 100, lei, 7)
regexr = \Qb\E ?\Qu\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qr\E ?\Qd\E ?\Ql\E ?\Qy\E ?\Qh\E ?\Qa\E ?\Qd\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qa\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qs\E ?\Qo\E ?\Qr\E ?\Qy\E ?\Q1\E ?\Q0\E ?\Q0\E ?\Ql\E ?\Qe\E ?\Qi\E ?\Q7\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: we promised coventry well have a look at the stretch again before the zander spawn in april

Spans:
Span 10-11:  again => again
Span 16-17:  april => (date-entity :month 4)
Span 11-12:  before => before
Span 1-2:  promised => promise-01
Span 9-10:  stretch => (thing :ARG1-of stretch-01)
Span 0-1:  we => we
Span 3-4:  well => well

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),april,(date-entity :month 4),false), Span(11,12,List(2),before,before,false), Span(10,11,List(3),again,again,false), Span(9,10,List(5, 4),stretch,(thing :ARG1-of stretch-01),false), Span(3,4,List(6),well,well,false), Span(1,2,List(7),promised,promise-01,false), Span(0,1,List(8),we,we,false)),Map(2 -> before, 5 -> stretch-01, 8 -> we, 7 -> promise-01, 1 -> 4, 4 -> thing, 6 -> well, 0 -> date-entity, 3 -> again),Map(w -> well, t -> thing, b -> before, s -> stretch-01, d -> date-entity, p -> promise-01, a -> again, 4 -> 4, w2 -> we))),[Ljava.lang.String;@1609a8a2,Annotation([Ljava.lang.String;@541e2efb,[Ljava.lang.String;@99e8be2,[Ljava.lang.String;@7f1a75d),Annotation([Ljava.lang.String;@a22cebe,[Ljava.lang.String;@73332124,[Ledu.cmu.lti.nlp.amr.Dependency;@21c4fd92),Annotation([Ljava.lang.String;@be38d90,[Ljava.lang.String;@862ef09,[Ljava.lang.String;@173b3c2c),Annotation([Ljava.lang.String;@31eb789e,[Ljava.lang.String;@5a3be6ac,[Ledu.cmu.lti.nlp.amr.Entity;@12a5547c))
AMR:
(a / again, op, b / before)
(b / before, op, d / date-entity)
(d / date-entity, month, 4 / 4)
(p / promise-01, ARG0, w2 / we)
(p / promise-01, ARG1, w / well)
(p / promise-01, ARG2, d / date-entity)
(s / stretch-01, ARG1, t / thing)
(s / stretch-01, time, b / before)

Decoded in 75,112 microseconds
Sentence: the organisers had already begun to promise a strong local bill topped by the two biggest attractions in manchester at the time the chameleons and of course the smiths

NER Entity: (country :name (name :op "manchester"))
NER Entity: (country :name (name :op "manchester"))
Spans:
Span 3-4:  already => already
Span 24-25:  and => and
Span 16-17:  attractions => (thing :ARG0-of attract-01)
Span 4-5:  begun => begin-01
Span 15-16:  biggest => (big :degree most)
Span 10-11:  bill => bill
Span 9-10:  local => local
Span 18-19:  manchester => (city :name (name :op "Manchester"))
Span 6-7:  promise => promise-01
Span 8-9:  strong => strong
Span 21-22:  time => time
Span 11-12:  topped => top-02
Span 14-15:  two => 2

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),and,and,false), Span(21,22,List(1),time,time,false), Span(18,19,List(4, 3, 2),manchester,(city :name (name :op "Manchester")),false), Span(16,17,List(6, 5),attractions,(thing :ARG0-of attract-01),false), Span(15,16,List(8, 7),biggest,(big :degree most),false), Span(14,15,List(9),two,2,false), Span(11,12,List(10),topped,top-02,false), Span(10,11,List(11),bill,bill,false), Span(9,10,List(12),local,local,false), Span(8,9,List(13),strong,strong,false), Span(6,7,List(14),promise,promise-01,false), Span(4,5,List(15),begun,begin-01,false), Span(3,4,List(16),already,already,false)),Map(2 -> city, 5 -> thing, 12 -> local, 15 -> begin-01, 8 -> most, 7 -> big, 1 -> time, 4 -> "Manchester", 11 -> bill, 14 -> promise-01, 6 -> attract-01, 0 -> and, 9 -> 2, 16 -> already, 3 -> name, 10 -> top-02, 13 -> strong),Map(b3 -> begin-01, n -> name, 2 -> 2, t -> time, b -> big, b2 -> bill, a3 -> already, s -> strong, m -> most, t3 -> top-02, p -> promise-01, a -> and, t2 -> thing, a2 -> attract-01, c -> city, l -> local))),[Ljava.lang.String;@244da274,Annotation([Ljava.lang.String;@64e4804a,[Ljava.lang.String;@55a2ae05,[Ljava.lang.String;@2b4ef62f),Annotation([Ljava.lang.String;@4d049ddf,[Ljava.lang.String;@6a18c2f9,[Ledu.cmu.lti.nlp.amr.Dependency;@7fa89fd9),Annotation([Ljava.lang.String;@1796a109,[Ljava.lang.String;@222661f8,[Ljava.lang.String;@5e9f24c),Annotation([Ljava.lang.String;@42225e9c,[Ljava.lang.String;@5e7175af,[Ledu.cmu.lti.nlp.amr.Entity;@6ae56499))
AMR:
(a / and, op, c / city)
(a / and, op, p / promise-01)
(a2 / attract-01, ARG0, t2 / thing)
(a2 / attract-01, ARG1, t / time)
(b / big, degree, m / most)
(b2 / bill, mod, l / local)
(b2 / bill, mod, s / strong)
(b3 / begin-01, ARG1, p / promise-01)
(b3 / begin-01, time, a3 / already)
(c / city, name, n / name)
(n / name, op, "Manchester")
(p / promise-01, ARG1, t3 / top-02)
(p / promise-01, ARG2, b2 / bill)
(t2 / thing, mod, b / big)
(t2 / thing, quant, 2 / 2)
(t3 / top-02, ARG1, b / big)

Decoded in 299,493 microseconds
Sentence: he got the students to leave the memorial hall by promising a national affairs conference to reach a consensus on issues such as constitutional reform and mainland china policy

NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "china"))
Spans:
Span 13-14:  affairs => affair
Span 25-26:  and => and
Span 27-28:  china => (country :name (name :op "China"))
Span 14-15:  conference => conference
Span 18-19:  consensus => consensus
Span 23-24:  constitutional => constitution
Span 8-9:  hall => hall
Span 0-1:  he => he
Span 20-21:  issues => issue
Span 5-6:  leave => leave-01
Span 26-27:  mainland => mainland
Span 7-8:  memorial => memorial
Span 12-13:  national => nation
Span 28-29:  policy => policy
Span 10-11:  promising => promise-01
Span 16-17:  reach => reach-01
Span 24-25:  reform => reform-01
Span 3-4:  students => (person :ARG0-of study-01)
Span 21-22:  such => such

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),policy,policy,false), Span(27,28,List(3, 2, 1),china,(country :name (name :op "China")),false), Span(26,27,List(4),mainland,mainland,false), Span(25,26,List(5),and,and,false), Span(24,25,List(6),reform,reform-01,false), Span(23,24,List(7),constitutional,constitution,false), Span(21,22,List(8),such,such,false), Span(20,21,List(9),issues,issue,false), Span(18,19,List(10),consensus,consensus,false), Span(16,17,List(11),reach,reach-01,false), Span(14,15,List(12),conference,conference,false), Span(13,14,List(13),affairs,affair,false), Span(12,13,List(14),national,nation,false), Span(10,11,List(15),promising,promise-01,false), Span(8,9,List(16),hall,hall,false), Span(7,8,List(17),memorial,memorial,false), Span(5,6,List(18),leave,leave-01,false), Span(3,4,List(20, 19),students,(person :ARG0-of study-01),false), Span(0,1,List(21),he,he,false)),Map(2 -> name, 5 -> and, 12 -> conference, 15 -> promise-01, 8 -> such, 21 -> he, 18 -> leave-01, 7 -> constitution, 17 -> memorial, 1 -> country, 4 -> mainland, 11 -> reach-01, 14 -> nation, 20 -> study-01, 6 -> reform-01, 0 -> policy, 9 -> issue, 16 -> hall, 19 -> person, 3 -> "China", 10 -> consensus, 13 -> affair),Map(n -> name, h -> hall, h2 -> he, s2 -> study-01, m2 -> memorial, p2 -> promise-01, c4 -> conference, s -> such, m -> mainland, p -> policy, r2 -> reach-01, a -> and, c3 -> consensus, r -> reform-01, i -> issue, a2 -> affair, c -> country, l -> leave-01, p3 -> person, n2 -> nation, c2 -> constitution))),[Ljava.lang.String;@50b3f359,Annotation([Ljava.lang.String;@562d8173,[Ljava.lang.String;@458dd138,[Ljava.lang.String;@61a2d734),Annotation([Ljava.lang.String;@9dec900,[Ljava.lang.String;@15e2410,[Ledu.cmu.lti.nlp.amr.Dependency;@4b919723),Annotation([Ljava.lang.String;@4359a197,[Ljava.lang.String;@317fe30c,[Ljava.lang.String;@43134237),Annotation([Ljava.lang.String;@25604b48,[Ljava.lang.String;@54ee7723,[Ledu.cmu.lti.nlp.amr.Entity;@73cfc664))
AMR:
(a / and, op, p / policy)
(a / and, op, r / reform-01)
(a2 / affair, mod, n2 / nation)
(c / country, name, n / name)
(c3 / consensus, topic, i / issue)
(h / hall, mod, m2 / memorial)
(i / issue, topic, a / and)
(l / leave-01, ARG0, p3 / person)
(l / leave-01, ARG1, h / hall)
(l / leave-01, manner, p2 / promise-01)
(m / mainland, op, c / country)
(n / name, op, "China")
(p / policy, mod, c / country)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, c4 / conference)
(p2 / promise-01, ARG2, r2 / reach-01)
(r / reform-01, ARG0, s / such)
(r / reform-01, ARG1, c2 / constitution)
(r2 / reach-01, ARG0, a2 / affair)
(r2 / reach-01, ARG1, c3 / consensus)
(s2 / study-01, ARG0, p3 / person)

Decoded in 612,966 microseconds
Sentence: he had been promised recovery and he waited for it

Spans:
Span 5-6:  and => and
Span 6-7:  he => he
Span 0-1:  he => he
Span 9-10:  it => it
Span 3-4:  promised => promise-01
Span 4-5:  recovery => recover-01
Span 7-8:  waited => wait-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),it,it,false), Span(7,8,List(1),waited,wait-01,false), Span(6,7,List(2),he,he,false), Span(5,6,List(3),and,and,false), Span(4,5,List(4),recovery,recover-01,false), Span(3,4,List(5),promised,promise-01,false), Span(0,1,List(6),he,he,false)),Map(2 -> he, 5 -> promise-01, 1 -> wait-01, 4 -> recover-01, 6 -> he, 0 -> it, 3 -> and),Map(w -> wait-01, h -> he, h2 -> he, p -> promise-01, a -> and, r -> recover-01, i -> it))),[Ljava.lang.String;@4dea0aa2,Annotation([Ljava.lang.String;@406039a4,[Ljava.lang.String;@6d685f00,[Ljava.lang.String;@5f35311d),Annotation([Ljava.lang.String;@1d2b97c0,[Ljava.lang.String;@18f7cd36,[Ledu.cmu.lti.nlp.amr.Dependency;@34c1a108),Annotation([Ljava.lang.String;@14332f47,[Ljava.lang.String;@2c64e8ad,[Ljava.lang.String;@14e7cca0),Annotation([Ljava.lang.String;@7e2b2718,[Ljava.lang.String;@4313d95e,[Ledu.cmu.lti.nlp.amr.Entity;@4c23ccb9))
AMR:
(a / and, op, p / promise-01)
(p / promise-01, ARG0, h2 / he)
(r / recover-01, ARG1, h / he)
(w / wait-01, ARG0, h / he)
(w / wait-01, ARG1, h2 / he)
(w / wait-01, ARG2, i / it)

Decoded in 36,340 microseconds
Sentence: a buying boom in chemists shops for those overthecounter remedies which promise relief from the alltoofamiliar symptoms

Spans:
Span 2-3:  boom => boom-02
Span 1-2:  buying => buy-01
Span 11-12:  promise => promise-01
Span 12-13:  relief => relieve-01
Span 5-6:  shops => shop
Span 16-17:  symptoms => symptom

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),symptoms,symptom,false), Span(12,13,List(1),relief,relieve-01,false), Span(11,12,List(2),promise,promise-01,false), Span(5,6,List(3),shops,shop,false), Span(2,3,List(4),boom,boom-02,false), Span(1,2,List(5),buying,buy-01,false)),Map(2 -> promise-01, 5 -> buy-01, 1 -> relieve-01, 4 -> boom-02, 0 -> symptom, 3 -> shop),Map(b -> boom-02, s2 -> shop, b2 -> buy-01, s -> symptom, p -> promise-01, r -> relieve-01))),[Ljava.lang.String;@4255acbc,Annotation([Ljava.lang.String;@6bf8caa,[Ljava.lang.String;@9abf05c,[Ljava.lang.String;@77312cf9),Annotation([Ljava.lang.String;@3d7fcc91,[Ljava.lang.String;@114f6322,[Ledu.cmu.lti.nlp.amr.Dependency;@72f5560e),Annotation([Ljava.lang.String;@48e4ec18,[Ljava.lang.String;@2d48410b,[Ljava.lang.String;@62a65066),Annotation([Ljava.lang.String;@14e88b23,[Ljava.lang.String;@2f06b18e,[Ledu.cmu.lti.nlp.amr.Entity;@6072f9c0))
AMR:
(b / boom-02, ARG1, s2 / shop)
(b2 / buy-01, ARG1, b / boom-02)
(p / promise-01, ARG0, s2 / shop)
(p / promise-01, ARG1, r / relieve-01)
(r / relieve-01, ARG1, s / symptom)

Decoded in 33,370 microseconds
Sentence: he has promised to break off with this woman and i must play fair too

Spans:
Span 9-10:  and => and
Span 13-14:  fair => fair
Span 0-1:  he => he
Span 10-11:  i => i
Span 5-6:  off => off
Span 12-13:  play => play-01
Span 2-3:  promised => promise-01
Span 7-8:  this => this
Span 14-15:  too => too
Span 8-9:  woman => woman

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),too,too,false), Span(13,14,List(1),fair,fair,false), Span(12,13,List(2),play,play-01,false), Span(10,11,List(3),i,i,false), Span(9,10,List(4),and,and,false), Span(8,9,List(5),woman,woman,false), Span(7,8,List(6),this,this,false), Span(5,6,List(7),off,off,false), Span(2,3,List(8),promised,promise-01,false), Span(0,1,List(9),he,he,false)),Map(2 -> play-01, 5 -> woman, 8 -> promise-01, 7 -> off, 1 -> fair, 4 -> and, 6 -> this, 9 -> he, 0 -> too, 3 -> i),Map(w -> woman, h -> he, t -> too, p2 -> promise-01, p -> play-01, a -> and, t2 -> this, i -> i, o -> off, f -> fair))),[Ljava.lang.String;@1c6addb8,Annotation([Ljava.lang.String;@2c02699b,[Ljava.lang.String;@526355af,[Ljava.lang.String;@778e7e6a),Annotation([Ljava.lang.String;@2c0d9e78,[Ljava.lang.String;@321eeee0,[Ledu.cmu.lti.nlp.amr.Dependency;@cd4cdd5),Annotation([Ljava.lang.String;@67156187,[Ljava.lang.String;@2cb61af0,[Ljava.lang.String;@67a2997e),Annotation([Ljava.lang.String;@640b5459,[Ljava.lang.String;@23ced25f,[Ledu.cmu.lti.nlp.amr.Entity;@5f556d56))
AMR:
(a / and, op, p / play-01)
(a / and, op, w / woman)
(p / play-01, ARG0, h / he)
(p / play-01, ARG1, f / fair)
(p / play-01, ARG2, i / i)
(p / play-01, mod, t / too)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, o / off)
(w / woman, mod, t2 / this)

Decoded in 101,132 microseconds
Sentence: president daniel ortega of nicaragua promised to hold free fair and democratic elections next year but defended his decision to end a 19month ceasefire with usbacked rebels

NER Entity: (person :name (name :op "daniel" :op "ortega"))
NER Entity: (country :name (name :op "nicaragua"))
Spans:
Span 10-11:  and => and
Span 15-16:  but => contrast-01
Span 23-24:  ceasefire => cease-01
Span 1-3:  daniel ortega => (person :name (name :op "daniel" :op "ortega"))
Span 18-19:  decision => decide-01
Span 16-17:  defended => defend-01
Span 11-12:  democratic => democracy
Span 12-13:  elections => elect-01
Span 9-10:  fair => fair
Span 8-9:  free => free-41
Span 13-14:  next => next
Span 0-1:  president => (have-org-role-91 :ARG2 president)
Span 5-6:  promised => promise-01
Span 26-27:  rebels => (person :ARG0-of rebel-01)
Span 14-15:  year => year

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(1, 0),rebels,(person :ARG0-of rebel-01),false), Span(23,24,List(2),ceasefire,cease-01,false), Span(18,19,List(3),decision,decide-01,false), Span(16,17,List(4),defended,defend-01,false), Span(15,16,List(5),but,contrast-01,false), Span(14,15,List(6),year,year,false), Span(13,14,List(7),next,next,false), Span(12,13,List(8),elections,elect-01,false), Span(11,12,List(9),democratic,democracy,false), Span(10,11,List(10),and,and,false), Span(9,10,List(11),fair,fair,false), Span(8,9,List(12),free,free-41,false), Span(5,6,List(13),promised,promise-01,false), Span(1,3,List(17, 16, 15, 14),daniel ortega,(person :name (name :op "daniel" :op "ortega")),false), Span(0,1,List(19, 18),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> cease-01, 5 -> contrast-01, 12 -> free-41, 15 -> name, 8 -> elect-01, 18 -> have-org-role-91, 7 -> next, 17 -> "ortega", 1 -> rebel-01, 4 -> defend-01, 11 -> fair, 14 -> person, 6 -> year, 0 -> person, 9 -> democracy, 16 -> "daniel", 19 -> president, 3 -> decide-01, 10 -> and, 13 -> promise-01),Map(e -> elect-01, n -> next, h -> have-org-role-91, d3 -> democracy, p2 -> promise-01, d -> decide-01, p -> person, y -> year, a -> and, p4 -> president, d2 -> defend-01, r -> rebel-01, c -> cease-01, f2 -> free-41, f -> fair, p3 -> person, n2 -> name, c2 -> contrast-01))),[Ljava.lang.String;@617d59ff,Annotation([Ljava.lang.String;@6c9fa659,[Ljava.lang.String;@656254c5,[Ljava.lang.String;@1aab8583),Annotation([Ljava.lang.String;@72ca6922,[Ljava.lang.String;@46bc720e,[Ledu.cmu.lti.nlp.amr.Dependency;@7de41969),Annotation([Ljava.lang.String;@a407d11,[Ljava.lang.String;@fd2ec59,[Ljava.lang.String;@609acf2c),Annotation([Ljava.lang.String;@53978340,[Ljava.lang.String;@2a09a0,[Ledu.cmu.lti.nlp.amr.Entity;@47dde775))
AMR:
(c / cease-01, ARG0, p / person)
(c / cease-01, ARG1, d / decide-01)
(c2 / contrast-01, ARG1, a / and)
(c2 / contrast-01, ARG2, d2 / defend-01)
(d2 / defend-01, ARG0, p3 / person)
(d2 / defend-01, ARG1, d / decide-01)
(e / elect-01, ARG0, a / and)
(e / elect-01, ARG1, y / year)
(e / elect-01, mod, d3 / democracy)
(e / elect-01, time, f2 / free-41)
(f2 / free-41, ARG1, f / fair)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG2, p4 / president)
(n2 / name, op, "daniel")
(n2 / name, op, "ortega")
(p2 / promise-01, ARG0, p3 / person)
(p3 / person, name, n2 / name)
(r / rebel-01, ARG0, p / person)
(y / year, mod, n / next)

Decoded in 281,556 microseconds
Sentence: i spent the next day at the falls which were even more spectacular than the photographs had promised

Spans:
Span 4-5:  day => day
Span 0-1:  i => i
Span 3-4:  next => next
Span 15-16:  photographs => photograph-01
Span 17-18:  promised => promise-01
Span 12-13:  spectacular => spectacular
Span 1-2:  spent => spend-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),promised,promise-01,false), Span(15,16,List(1),photographs,photograph-01,false), Span(12,13,List(2),spectacular,spectacular,false), Span(4,5,List(3),day,day,false), Span(3,4,List(4),next,next,false), Span(1,2,List(5),spent,spend-01,false), Span(0,1,List(6),i,i,false)),Map(2 -> spectacular, 5 -> spend-01, 1 -> photograph-01, 4 -> next, 6 -> i, 0 -> promise-01, 3 -> day),Map(n -> next, s2 -> spend-01, p2 -> photograph-01, s -> spectacular, d -> day, p -> promise-01, i -> i))),[Ljava.lang.String;@3986d72f,Annotation([Ljava.lang.String;@43996c2a,[Ljava.lang.String;@d8c5c12,[Ljava.lang.String;@79f0a8b0),Annotation([Ljava.lang.String;@26d2f95b,[Ljava.lang.String;@64f0d946,[Ledu.cmu.lti.nlp.amr.Dependency;@48b670),Annotation([Ljava.lang.String;@25c17335,[Ljava.lang.String;@3f72aff0,[Ljava.lang.String;@27cd61b),Annotation([Ljava.lang.String;@51cc87e3,[Ljava.lang.String;@4aed7209,[Ledu.cmu.lti.nlp.amr.Entity;@2ad9d34d))
AMR:
(d / day, mod, n / next)
(p / promise-01, ARG0, p2 / photograph-01)
(p / promise-01, ARG1, s2 / spend-01)
(p2 / photograph-01, ARG0, s / spectacular)
(s2 / spend-01, ARG0, i / i)
(s2 / spend-01, ARG1, d / day)

Decoded in 27,739 microseconds
Sentence: great okay nick thanks for that well come back to you in just a moment but i did promise a racing competition

Spans:
Span 8-9:  back => back
Span 15-16:  but => contrast-01
Span 21-22:  competition => compete-01
Span 0-1:  great => great
Span 16-17:  i => i
Span 12-13:  just => just
Span 14-15:  moment => moment
Span 1-2:  okay => okay-01
Span 18-19:  promise => promise-01
Span 20-21:  racing => race-01
Span 3-4:  thanks => thank-01
Span 6-7:  well => well
Span 10-11:  you => you

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),competition,compete-01,false), Span(20,21,List(1),racing,race-01,false), Span(18,19,List(2),promise,promise-01,false), Span(16,17,List(3),i,i,false), Span(15,16,List(4),but,contrast-01,false), Span(14,15,List(5),moment,moment,false), Span(12,13,List(6),just,just,false), Span(10,11,List(7),you,you,false), Span(8,9,List(8),back,back,false), Span(6,7,List(9),well,well,false), Span(3,4,List(10),thanks,thank-01,false), Span(1,2,List(11),okay,okay-01,false), Span(0,1,List(12),great,great,false)),Map(2 -> promise-01, 5 -> moment, 12 -> great, 8 -> back, 7 -> you, 1 -> race-01, 4 -> contrast-01, 11 -> okay-01, 6 -> just, 0 -> compete-01, 9 -> well, 3 -> i, 10 -> thank-01),Map(w -> well, b -> back, t -> thank-01, j -> just, m -> moment, p -> promise-01, y -> you, g -> great, r -> race-01, i -> i, c -> compete-01, o -> okay-01, c2 -> contrast-01))),[Ljava.lang.String;@42bf7a35,Annotation([Ljava.lang.String;@28f04fcf,[Ljava.lang.String;@3907b408,[Ljava.lang.String;@28bc9678),Annotation([Ljava.lang.String;@753ab52c,[Ljava.lang.String;@614c97d4,[Ledu.cmu.lti.nlp.amr.Dependency;@6b841133),Annotation([Ljava.lang.String;@2b85626a,[Ljava.lang.String;@42003378,[Ljava.lang.String;@1b332d22),Annotation([Ljava.lang.String;@3cd82121,[Ljava.lang.String;@11671cbc,[Ledu.cmu.lti.nlp.amr.Entity;@88f8391))
AMR:
(c / compete-01, ARG0, i / i)
(c / compete-01, ARG1, b / back)
(c2 / contrast-01, ARG0, w / well)
(c2 / contrast-01, ARG1, m / moment)
(i / i, topic, c2 / contrast-01)
(m / moment, mod, j / just)
(o / okay-01, ARG1, t / thank-01)
(p / promise-01, ARG0, t / thank-01)
(p / promise-01, ARG1, c / compete-01)
(r / race-01, ARG1, c / compete-01)
(t / thank-01, ARG1, y / you)
(t / thank-01, mod, g / great)

Decoded in 242,526 microseconds
Sentence: devi lal for instance seems obsessed with appeasing the farmers and has rashly promised to write off their massive loans to the government

Spans:
Span 10-11:  and => and
Span 9-10:  farmers => (person :ARG0-of farm-01)
Span 19-20:  loans => loan-01
Span 18-19:  massive => massive
Span 5-6:  obsessed => obsess-01
Span 16-17:  off => off
Span 13-14:  promised => promise-01
Span 4-5:  seems => seem-01
Span 15-16:  write => write-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),loans,loan-01,false), Span(18,19,List(1),massive,massive,false), Span(16,17,List(2),off,off,false), Span(15,16,List(3),write,write-01,false), Span(13,14,List(4),promised,promise-01,false), Span(10,11,List(5),and,and,false), Span(9,10,List(7, 6),farmers,(person :ARG0-of farm-01),false), Span(5,6,List(8),obsessed,obsess-01,false), Span(4,5,List(9),seems,seem-01,false)),Map(2 -> off, 5 -> and, 8 -> obsess-01, 7 -> farm-01, 1 -> massive, 4 -> promise-01, 6 -> person, 9 -> seem-01, 0 -> loan-01, 3 -> write-01),Map(w -> write-01, p2 -> person, s -> seem-01, m -> massive, p -> promise-01, a -> and, o2 -> obsess-01, l -> loan-01, f -> farm-01, o -> off))),[Ljava.lang.String;@606a8fb,Annotation([Ljava.lang.String;@1f3ff9d4,[Ljava.lang.String;@212add53,[Ljava.lang.String;@5288528),Annotation([Ljava.lang.String;@273e07bd,[Ljava.lang.String;@596e1d6b,[Ledu.cmu.lti.nlp.amr.Dependency;@4c4d89ab),Annotation([Ljava.lang.String;@768960af,[Ljava.lang.String;@352abdf5,[Ljava.lang.String;@91d3b18),Annotation([Ljava.lang.String;@5e12a954,[Ljava.lang.String;@1b2afa0c,[Ledu.cmu.lti.nlp.amr.Entity;@228637c3))
AMR:
(a / and, op, o2 / obsess-01)
(a / and, op, p / promise-01)
(f / farm-01, ARG0, p2 / person)
(l / loan-01, mod, m / massive)
(o2 / obsess-01, ARG0, p2 / person)
(p / promise-01, ARG1, w / write-01)
(s / seem-01, ARG2, o2 / obsess-01)
(w / write-01, ARG1, l / loan-01)
(w / write-01, direction, o / off)

Decoded in 48,115 microseconds
Sentence: gerrard went on i was promised it would keep the head out of the water

Spans:
Span 10-11:  head => head-01
Span 3-4:  i => i
Span 6-7:  it => it
Span 5-6:  promised => promise-01
Span 14-15:  water => water

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),water,water,false), Span(10,11,List(1),head,head-01,false), Span(6,7,List(2),it,it,false), Span(5,6,List(3),promised,promise-01,false), Span(3,4,List(4),i,i,false)),Map(2 -> it, 1 -> head-01, 4 -> i, 0 -> water, 3 -> promise-01),Map(w -> water, h -> head-01, p -> promise-01, i2 -> i, i -> it))),[Ljava.lang.String;@19b6f4ea,Annotation([Ljava.lang.String;@3a893bd6,[Ljava.lang.String;@7b77ca0,[Ljava.lang.String;@1f56f055),Annotation([Ljava.lang.String;@4bc6c86,[Ljava.lang.String;@6e78d3d7,[Ledu.cmu.lti.nlp.amr.Dependency;@3e9c00ea),Annotation([Ljava.lang.String;@740022c2,[Ljava.lang.String;@34ea2a0d,[Ljava.lang.String;@796ed69e),Annotation([Ljava.lang.String;@5bcc5d5a,[Ljava.lang.String;@4604eecb,[Ledu.cmu.lti.nlp.amr.Entity;@6dd97556))
AMR:
(h / head-01, ARG0, i / it)
(h / head-01, source, w / water)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, h / head-01)

Decoded in 15,726 microseconds
Sentence: with ceausescu dead and free elections promised for april the elderly militant and his friends dream of gathering enough supporters to present a candidate

Spans:
Span 12-13:  and => and
Span 3-4:  and => and
Span 8-9:  april => (date-entity :month 4)
Span 23-24:  candidate => candidate
Span 15-16:  dream => dream-01
Span 10-11:  elderly => elderly
Span 5-6:  elections => elect-01
Span 18-19:  enough => enough
Span 4-5:  free => free-41
Span 14-15:  friends => (have-rel-role-91 :ARG2 friend)
Span 17-18:  gathering => gather-01
Span 11-12:  militant => militant
Span 21-22:  present => present
Span 6-7:  promised => promise-01
Span 19-20:  supporters => (person :ARG0-of support-01)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),candidate,candidate,false), Span(21,22,List(1),present,present,false), Span(19,20,List(3, 2),supporters,(person :ARG0-of support-01),false), Span(18,19,List(4),enough,enough,false), Span(17,18,List(5),gathering,gather-01,false), Span(15,16,List(6),dream,dream-01,false), Span(14,15,List(8, 7),friends,(have-rel-role-91 :ARG2 friend),false), Span(12,13,List(9),and,and,false), Span(11,12,List(10),militant,militant,false), Span(10,11,List(11),elderly,elderly,false), Span(8,9,List(13, 12),april,(date-entity :month 4),false), Span(6,7,List(14),promised,promise-01,false), Span(5,6,List(15),elections,elect-01,false), Span(4,5,List(16),free,free-41,false), Span(3,4,List(17),and,and,false)),Map(2 -> person, 5 -> gather-01, 12 -> date-entity, 15 -> elect-01, 8 -> friend, 7 -> have-rel-role-91, 17 -> and, 1 -> present, 4 -> enough, 11 -> elderly, 14 -> promise-01, 6 -> dream-01, 0 -> candidate, 9 -> and, 16 -> free-41, 3 -> support-01, 10 -> militant, 13 -> 4),Map(e -> enough, h -> have-rel-role-91, p2 -> person, e2 -> elderly, s -> support-01, d -> dream-01, m -> militant, p -> present, g -> gather-01, 4 -> 4, a -> and, d2 -> date-entity, a2 -> and, c -> candidate, f2 -> free-41, f -> friend, e3 -> elect-01, p3 -> promise-01))),[Ljava.lang.String;@32a3fac6,Annotation([Ljava.lang.String;@2ba4f723,[Ljava.lang.String;@5b5d3137,[Ljava.lang.String;@434a40bd),Annotation([Ljava.lang.String;@3fe05ace,[Ljava.lang.String;@2269ab25,[Ledu.cmu.lti.nlp.amr.Dependency;@47631bc9),Annotation([Ljava.lang.String;@3bb54dbc,[Ljava.lang.String;@7c029043,[Ljava.lang.String;@c4d5e50),Annotation([Ljava.lang.String;@2b6adc7f,[Ljava.lang.String;@74b22c1d,[Ledu.cmu.lti.nlp.amr.Entity;@5d6e5fc5))
AMR:
(a / and, mod, e2 / elderly)
(a / and, op, d / dream-01)
(a / and, op, p3 / promise-01)
(d / dream-01, ARG1, g / gather-01)
(d2 / date-entity, month, 4 / 4)
(f2 / free-41, ARG1, e3 / elect-01)
(g / gather-01, ARG1, p2 / person)
(h / have-rel-role-91, ARG1, m / militant)
(h / have-rel-role-91, ARG2, f / friend)
(p / present, mod, c / candidate)
(p2 / person, quant, e / enough)
(p3 / promise-01, ARG0, m / militant)
(p3 / promise-01, ARG1, a2 / and)
(p3 / promise-01, manner, e3 / elect-01)
(p3 / promise-01, time, d2 / date-entity)
(s / support-01, ARG0, p2 / person)
(s / support-01, ARG1, p / present)

Decoded in 330,049 microseconds
Sentence:   he promised labour would introduce new railway legislation to lay down in law the broad policy objectives that the party would expect from br

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   he promised labour would introduce new railway legislation to lay down in law the broad policy objectives that the party would expect from br
myTokenized = he promised labour would introduce new railway legislation to lay down in law the broad policy objectives that the party would expect from br
i = 0
prefix = List(he)
regexr = \Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: berkshire motor caravans promise one of the countrys biggest selection of new motor caravans from autohomes autosleeper autotrial and richard holdsworth together with dozens of used vehicles

Spans:
Span 18-19:  and => and
Span 8-9:  biggest => (big :degree most)
Span 12-13:  motor => motorcycle
Span 1-2:  motor => motorcycle
Span 11-12:  new => new
Span 3-4:  promise => promise-01
Span 9-10:  selection => select-01
Span 21-22:  together => together
Span 25-26:  used => use-01
Span 26-27:  vehicles => vehicle

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),vehicles,vehicle,false), Span(25,26,List(1),used,use-01,false), Span(21,22,List(2),together,together,false), Span(18,19,List(3),and,and,false), Span(12,13,List(4),motor,motorcycle,false), Span(11,12,List(5),new,new,false), Span(9,10,List(6),selection,select-01,false), Span(8,9,List(8, 7),biggest,(big :degree most),false), Span(3,4,List(9),promise,promise-01,false), Span(1,2,List(10),motor,motorcycle,false)),Map(2 -> together, 5 -> new, 8 -> most, 7 -> big, 1 -> use-01, 4 -> motorcycle, 6 -> select-01, 9 -> promise-01, 0 -> vehicle, 10 -> motorcycle, 3 -> and),Map(m3 -> motorcycle, n -> new, b -> big, t -> together, m2 -> most, s -> select-01, m -> motorcycle, v -> vehicle, p -> promise-01, a -> and, u -> use-01))),[Ljava.lang.String;@6192f5fb,Annotation([Ljava.lang.String;@775363c8,[Ljava.lang.String;@3bc1cac,[Ljava.lang.String;@32fe621e),Annotation([Ljava.lang.String;@5adbb9b9,[Ljava.lang.String;@f7e4f49,[Ledu.cmu.lti.nlp.amr.Dependency;@2d874991),Annotation([Ljava.lang.String;@ceee5f1,[Ljava.lang.String;@183a37d9,[Ljava.lang.String;@162893fc),Annotation([Ljava.lang.String;@420b90c1,[Ljava.lang.String;@54c90c7,[Ledu.cmu.lti.nlp.amr.Entity;@65b4fb88))
AMR:
(a / and, op, m / motorcycle)
(b / big, degree, m2 / most)
(b / big, domain, s / select-01)
(p / promise-01, ARG0, m3 / motorcycle)
(p / promise-01, ARG1, s / select-01)
(p / promise-01, ARG2, u / use-01)
(s / select-01, ARG1, a / and)
(u / use-01, ARG0, n / new)
(u / use-01, ARG1, v / vehicle)
(v / vehicle, mod, t / together)

Decoded in 82,773 microseconds
Sentence: urging the crowd to elect a worker to the presidency for the first time ever lula promised that once elected he would declare an immediate debt moratorium and start carving up large agricultural estates

Spans:
Span 32-33:  agricultural => agriculture
Span 27-28:  and => and
Span 2-3:  crowd => crowd
Span 25-26:  debt => debt
Span 22-23:  declare => declare-02
Span 4-5:  elect => elect-01
Span 19-20:  elected => elect-01
Span 33-34:  estates => estate
Span 14-15:  ever => ever
Span 20-21:  he => he
Span 24-25:  immediate => immediate
Span 31-32:  large => large
Span 26-27:  moratorium => moratorium
Span 18-19:  once => once
Span 16-17:  promised => promise-01
Span 28-29:  start => start-01
Span 13-14:  time => time
Span 0-1:  urging => urge-01
Span 6-7:  worker => (person :ARG0-of work-01)

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),estates,estate,false), Span(32,33,List(1),agricultural,agriculture,false), Span(31,32,List(2),large,large,false), Span(28,29,List(3),start,start-01,false), Span(27,28,List(4),and,and,false), Span(26,27,List(5),moratorium,moratorium,false), Span(25,26,List(6),debt,debt,false), Span(24,25,List(7),immediate,immediate,false), Span(22,23,List(8),declare,declare-02,false), Span(20,21,List(9),he,he,false), Span(19,20,List(10),elected,elect-01,false), Span(18,19,List(11),once,once,false), Span(16,17,List(12),promised,promise-01,false), Span(14,15,List(13),ever,ever,false), Span(13,14,List(14),time,time,false), Span(6,7,List(16, 15),worker,(person :ARG0-of work-01),false), Span(4,5,List(17),elect,elect-01,false), Span(2,3,List(18),crowd,crowd,false), Span(0,1,List(19),urging,urge-01,false)),Map(2 -> large, 5 -> moratorium, 12 -> promise-01, 15 -> person, 8 -> declare-02, 18 -> crowd, 7 -> immediate, 17 -> elect-01, 1 -> agriculture, 4 -> and, 11 -> once, 14 -> time, 6 -> debt, 0 -> estate, 9 -> he, 16 -> work-01, 19 -> urge-01, 3 -> start-01, 10 -> elect-01, 13 -> ever),Map(e -> estate, w -> work-01, h -> he, t -> time, p2 -> person, e2 -> elect-01, s -> start-01, m -> moratorium, d -> debt, p -> promise-01, a -> agriculture, e4 -> elect-01, d2 -> declare-02, a2 -> and, i -> immediate, c -> crowd, u -> urge-01, l -> large, o -> once, e3 -> ever))),[Ljava.lang.String;@116e73e3,Annotation([Ljava.lang.String;@6a7a4505,[Ljava.lang.String;@14981e0,[Ljava.lang.String;@ed99c9),Annotation([Ljava.lang.String;@6f0b5b98,[Ljava.lang.String;@52aa911c,[Ledu.cmu.lti.nlp.amr.Dependency;@3c1cefaa),Annotation([Ljava.lang.String;@fbaa0bb,[Ljava.lang.String;@258e5d0e,[Ljava.lang.String;@257f5565),Annotation([Ljava.lang.String;@4abf6d1e,[Ljava.lang.String;@5d94f2e8,[Ledu.cmu.lti.nlp.amr.Entity;@5dd78d57))
AMR:
(a2 / and, op, e / estate)
(a2 / and, op, p2 / person)
(a2 / and, op, s / start-01)
(d2 / declare-02, ARG0, h / he)
(d2 / declare-02, ARG1, m / moratorium)
(e / estate, mod, a / agriculture)
(e / estate, mod, l / large)
(e2 / elect-01, ARG1, d2 / declare-02)
(e2 / elect-01, time, o / once)
(e4 / elect-01, ARG1, p2 / person)
(m / moratorium, time, i / immediate)
(p / promise-01, ARG0, t / time)
(p / promise-01, ARG1, e2 / elect-01)
(p / promise-01, time, e3 / ever)
(s / start-01, ARG0, h / he)
(s / start-01, ARG1, d / debt)
(u / urge-01, ARG1, e4 / elect-01)
(u / urge-01, ARG2, c / crowd)
(w / work-01, ARG0, p2 / person)

Decoded in 1,354,392 microseconds
Sentence: they were never promised that they could stay for ever he said

Spans:
Span 6-7:  could => possible
Span 9-10:  ever => ever
Span 10-11:  he => he
Span 3-4:  promised => promise-01
Span 11-12:  said => say-01
Span 7-8:  stay => stay-01
Span 5-6:  they => they
Span 0-1:  they => they

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),said,say-01,false), Span(10,11,List(1),he,he,false), Span(9,10,List(2),ever,ever,false), Span(7,8,List(3),stay,stay-01,false), Span(6,7,List(4),could,possible,false), Span(5,6,List(5),they,they,false), Span(3,4,List(6),promised,promise-01,false), Span(0,1,List(7),they,they,false)),Map(2 -> ever, 5 -> they, 7 -> they, 1 -> he, 4 -> possible, 6 -> promise-01, 0 -> say-01, 3 -> stay-01),Map(e -> ever, h -> he, t -> they, s2 -> stay-01, p2 -> promise-01, s -> say-01, p -> possible, t2 -> they))),[Ljava.lang.String;@72807ae2,Annotation([Ljava.lang.String;@5103c628,[Ljava.lang.String;@4ec695a5,[Ljava.lang.String;@4f8aac0a),Annotation([Ljava.lang.String;@1924ed52,[Ljava.lang.String;@4758af63,[Ledu.cmu.lti.nlp.amr.Dependency;@f62b12d),Annotation([Ljava.lang.String;@185e093f,[Ljava.lang.String;@45b11398,[Ljava.lang.String;@6c7d83e6),Annotation([Ljava.lang.String;@245ea8af,[Ljava.lang.String;@42948bd0,[Ledu.cmu.lti.nlp.amr.Entity;@266726d6))
AMR:
(p / possible, domain, s2 / stay-01)
(p2 / promise-01, ARG0, t2 / they)
(p2 / promise-01, ARG1, s2 / stay-01)
(s / say-01, ARG0, h / he)
(s / say-01, time, e / ever)
(s2 / stay-01, ARG0, t / they)
(s2 / stay-01, ARG1, h / he)

Decoded in 108,313 microseconds
Sentence: a cast list boasting characters called hesione hushabye and lady ariadne utterword does not promise an evening of undertones

Spans:
Span 8-9:  and => and
Span 1-2:  cast => cast-01
Span 4-5:  characters => character
Span 16-17:  evening => evening
Span 9-10:  lady => lady
Span 2-3:  list => list-01
Span 14-15:  promise => promise-01
Span 18-19:  undertones => undertone

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),undertones,undertone,false), Span(16,17,List(1),evening,evening,false), Span(14,15,List(2),promise,promise-01,false), Span(9,10,List(3),lady,lady,false), Span(8,9,List(4),and,and,false), Span(4,5,List(5),characters,character,false), Span(2,3,List(6),list,list-01,false), Span(1,2,List(7),cast,cast-01,false)),Map(2 -> promise-01, 5 -> character, 7 -> cast-01, 1 -> evening, 4 -> and, 6 -> list-01, 0 -> undertone, 3 -> lady),Map(e -> evening, p -> promise-01, a -> and, l2 -> list-01, c -> character, l -> lady, u -> undertone, c2 -> cast-01))),[Ljava.lang.String;@3e26bf4c,Annotation([Ljava.lang.String;@61d93674,[Ljava.lang.String;@7b862bdb,[Ljava.lang.String;@25a97638),Annotation([Ljava.lang.String;@189069d9,[Ljava.lang.String;@31153228,[Ledu.cmu.lti.nlp.amr.Dependency;@668ff944),Annotation([Ljava.lang.String;@763613f6,[Ljava.lang.String;@5858b81b,[Ljava.lang.String;@289f21ed),Annotation([Ljava.lang.String;@676c6370,[Ljava.lang.String;@7cf4831b,[Ledu.cmu.lti.nlp.amr.Entity;@18cba1b4))
AMR:
(a / and, op, c2 / cast-01)
(c2 / cast-01, ARG1, l / lady)
(l2 / list-01, ARG1, c / character)
(l2 / list-01, ARG2, c2 / cast-01)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, u / undertone)
(p / promise-01, ARG2, e / evening)

Decoded in 84,791 microseconds
Sentence: in the meanwhile it has promised to leave general portfolio intact

Spans:
Span 8-9:  general => general
Span 10-11:  intact => intact
Span 3-4:  it => it
Span 7-8:  leave => leave-01
Span 2-3:  meanwhile => meanwhile
Span 5-6:  promised => promise-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),intact,intact,false), Span(8,9,List(1),general,general,false), Span(7,8,List(2),leave,leave-01,false), Span(5,6,List(3),promised,promise-01,false), Span(3,4,List(4),it,it,false), Span(2,3,List(5),meanwhile,meanwhile,false)),Map(2 -> leave-01, 5 -> meanwhile, 1 -> general, 4 -> it, 0 -> intact, 3 -> promise-01),Map(m -> meanwhile, p -> promise-01, g -> general, i2 -> it, i -> intact, l -> leave-01))),[Ljava.lang.String;@60e53d23,Annotation([Ljava.lang.String;@6a10f687,[Ljava.lang.String;@7fa94f77,[Ljava.lang.String;@44a04f1b),Annotation([Ljava.lang.String;@78a998cf,[Ljava.lang.String;@466f7bec,[Ledu.cmu.lti.nlp.amr.Dependency;@4130e714),Annotation([Ljava.lang.String;@7192f37b,[Ljava.lang.String;@66af4a7d,[Ljava.lang.String;@7e438935),Annotation([Ljava.lang.String;@3e53756,[Ljava.lang.String;@3d93f119,[Ledu.cmu.lti.nlp.amr.Entity;@3bb9bfe4))
AMR:
(g / general, op, i2 / it)
(l / leave-01, ARG0, i2 / it)
(l / leave-01, ARG1, i / intact)
(p / promise-01, ARG1, m / meanwhile)
(p / promise-01, ARG2, l / leave-01)

Decoded in 19,523 microseconds
Sentence: we had this lot round last weekend and he promised us solemnly that hed have enough police here to stop it happening again

Spans:
Span 22-23:  again => again
Span 7-8:  and => and
Span 15-16:  enough => enough
Span 21-22:  happening => happen-01
Span 8-9:  he => he
Span 17-18:  here => here
Span 20-21:  it => it
Span 5-6:  last => last
Span 3-4:  lot => lot
Span 16-17:  police => police
Span 9-10:  promised => promise-01
Span 4-5:  round => round
Span 11-12:  solemnly => solemn
Span 19-20:  stop => stop-01
Span 2-3:  this => this
Span 0-1:  we => we
Span 6-7:  weekend => weekend

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),again,again,false), Span(21,22,List(1),happening,happen-01,false), Span(20,21,List(2),it,it,false), Span(19,20,List(3),stop,stop-01,false), Span(17,18,List(4),here,here,false), Span(16,17,List(5),police,police,false), Span(15,16,List(6),enough,enough,false), Span(11,12,List(7),solemnly,solemn,false), Span(9,10,List(8),promised,promise-01,false), Span(8,9,List(9),he,he,false), Span(7,8,List(10),and,and,false), Span(6,7,List(11),weekend,weekend,false), Span(5,6,List(12),last,last,false), Span(4,5,List(13),round,round,false), Span(3,4,List(14),lot,lot,false), Span(2,3,List(15),this,this,false), Span(0,1,List(16),we,we,false)),Map(2 -> it, 5 -> police, 12 -> last, 15 -> this, 8 -> promise-01, 7 -> solemn, 1 -> happen-01, 4 -> here, 11 -> weekend, 14 -> lot, 6 -> enough, 0 -> again, 9 -> he, 16 -> we, 3 -> stop-01, 10 -> and, 13 -> round),Map(e -> enough, w -> weekend, h -> happen-01, h2 -> here, s2 -> solemn, t -> this, p2 -> promise-01, s -> stop-01, p -> police, a -> again, w2 -> we, l2 -> lot, r -> round, i -> it, a2 -> and, h3 -> he, l -> last))),[Ljava.lang.String;@7fca7bad,Annotation([Ljava.lang.String;@467ddc66,[Ljava.lang.String;@7110d0b1,[Ljava.lang.String;@6f54e75),Annotation([Ljava.lang.String;@52f1e6e4,[Ljava.lang.String;@76dad47,[Ledu.cmu.lti.nlp.amr.Dependency;@318b1420),Annotation([Ljava.lang.String;@21d65a49,[Ljava.lang.String;@7fc17ff9,[Ljava.lang.String;@78b8f5f5),Annotation([Ljava.lang.String;@371be5be,[Ljava.lang.String;@8883936,[Ledu.cmu.lti.nlp.amr.Entity;@27640c9a))
AMR:
(a2 / and, op, p2 / promise-01)
(a2 / and, op, r / round)
(h / happen-01, ARG1, i / it)
(h / happen-01, mod, a / again)
(l2 / lot, mod, t / this)
(p / police, location, h2 / here)
(p / police, quant, e / enough)
(p2 / promise-01, ARG0, h3 / he)
(p2 / promise-01, ARG1, w / weekend)
(p2 / promise-01, ARG2, w2 / we)
(p2 / promise-01, instrument, l2 / lot)
(p2 / promise-01, time, s2 / solemn)
(s / stop-01, ARG0, h3 / he)
(s / stop-01, ARG1, h / happen-01)
(s / stop-01, mod, h2 / here)
(w / weekend, mod, l / last)

Decoded in 686,563 microseconds
Sentence: the ministry officials were hopeful that a national debate promised by premier gorbachev into the whole nuclear issue will eventually come down in their favour

Spans:
Span 8-9:  debate => debate-01
Span 21-22:  down => down
Span 19-20:  eventually => eventual
Span 24-25:  favour => favor-01
Span 4-5:  hopeful => hope-01
Span 17-18:  issue => issue
Span 1-2:  ministry => ministry
Span 7-8:  national => nation
Span 16-17:  nuclear => nucleus
Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Span 11-12:  premier => premier
Span 9-10:  promised => promise-01
Span 15-16:  whole => whole

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),favour,favor-01,false), Span(21,22,List(1),down,down,false), Span(19,20,List(2),eventually,eventual,false), Span(17,18,List(3),issue,issue,false), Span(16,17,List(4),nuclear,nucleus,false), Span(15,16,List(5),whole,whole,false), Span(11,12,List(6),premier,premier,false), Span(9,10,List(7),promised,promise-01,false), Span(8,9,List(8),debate,debate-01,false), Span(7,8,List(9),national,nation,false), Span(4,5,List(10),hopeful,hope-01,false), Span(2,3,List(12, 11),officials,(have-org-role-91 :ARG2 official),false), Span(1,2,List(13),ministry,ministry,false)),Map(2 -> eventual, 5 -> whole, 12 -> official, 8 -> debate-01, 7 -> promise-01, 1 -> down, 4 -> nucleus, 11 -> have-org-role-91, 6 -> premier, 0 -> favor-01, 9 -> nation, 3 -> issue, 10 -> hope-01, 13 -> ministry),Map(e -> eventual, n -> nucleus, w -> whole, h -> hope-01, h2 -> have-org-role-91, p2 -> promise-01, m -> ministry, d -> down, p -> premier, d2 -> debate-01, i -> issue, f -> favor-01, o -> official, n2 -> nation))),[Ljava.lang.String;@197766aa,Annotation([Ljava.lang.String;@6df52ff5,[Ljava.lang.String;@7c1fb638,[Ljava.lang.String;@5f45632),Annotation([Ljava.lang.String;@6c46efab,[Ljava.lang.String;@2520fb16,[Ledu.cmu.lti.nlp.amr.Dependency;@18447465),Annotation([Ljava.lang.String;@36359f55,[Ljava.lang.String;@7a6fa140,[Ljava.lang.String;@36c3af8c),Annotation([Ljava.lang.String;@693a2c6a,[Ljava.lang.String;@6a3a191e,[Ledu.cmu.lti.nlp.amr.Entity;@c47370e))
AMR:
(d2 / debate-01, mod, n2 / nation)
(f / favor-01, ARG0, d2 / debate-01)
(f / favor-01, degree, e / eventual)
(h / hope-01, ARG0, h2 / have-org-role-91)
(h / hope-01, ARG2, f / favor-01)
(h / hope-01, topic, p / premier)
(h / hope-01, topic, w / whole)
(h2 / have-org-role-91, ARG0, d / down)
(h2 / have-org-role-91, ARG1, m / ministry)
(h2 / have-org-role-91, ARG2, o / official)
(i / issue, mod, n / nucleus)
(i / issue, mod, w / whole)
(p2 / promise-01, ARG1, d2 / debate-01)

Decoded in 294,073 microseconds
Sentence: promising differs from consenting in two respects, first while promising always purports to impose obligations on the promisor consenting does not always do so

Spans:
Span 22-23:  always => always
Span 11-12:  always => always
Span 19-20:  consenting => consent-01
Span 3-4:  consenting => consent-01
Span 14-15:  impose => impose-01
Span 15-16:  obligations => obligate-01
Span 10-11:  promising => promise-01
Span 0-1:  promising => promise-01
Span 12-13:  purports => purport-01
Span 24-25:  so => so
Span 5-6:  two => 2

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),so,so,false), Span(22,23,List(1),always,always,false), Span(19,20,List(2),consenting,consent-01,false), Span(15,16,List(3),obligations,obligate-01,false), Span(14,15,List(4),impose,impose-01,false), Span(12,13,List(5),purports,purport-01,false), Span(11,12,List(6),always,always,false), Span(10,11,List(7),promising,promise-01,false), Span(5,6,List(8),two,2,false), Span(3,4,List(9),consenting,consent-01,false), Span(0,1,List(10),promising,promise-01,false)),Map(2 -> consent-01, 5 -> purport-01, 8 -> 2, 7 -> promise-01, 1 -> always, 4 -> impose-01, 6 -> always, 9 -> consent-01, 0 -> so, 10 -> promise-01, 3 -> obligate-01),Map(2 -> 2, p2 -> promise-01, s -> so, p -> purport-01, a -> always, a2 -> always, i -> impose-01, c -> consent-01, o -> obligate-01, p3 -> promise-01, c2 -> consent-01))),[Ljava.lang.String;@176f7e6e,Annotation([Ljava.lang.String;@18d573c7,[Ljava.lang.String;@65a41a8d,[Ljava.lang.String;@78cb531c),Annotation([Ljava.lang.String;@6cbd9138,[Ljava.lang.String;@11892b4e,[Ledu.cmu.lti.nlp.amr.Dependency;@447a16e0),Annotation([Ljava.lang.String;@2b73ef3f,[Ljava.lang.String;@48602762,[Ljava.lang.String;@20b9b80d),Annotation([Ljava.lang.String;@e26e44,[Ljava.lang.String;@11b532d0,[Ledu.cmu.lti.nlp.amr.Entity;@f1afec5))
AMR:
(c / consent-01, ARG1, o / obligate-01)
(c2 / consent-01, ARG0, a / always)
(c2 / consent-01, ARG1, s / so)
(c2 / consent-01, condition, p / purport-01)
(i / impose-01, ARG1, o / obligate-01)
(o / obligate-01, ARG1, 2 / 2)
(p / purport-01, ARG0, p2 / promise-01)
(p / purport-01, ARG1, i / impose-01)
(p / purport-01, mod, a2 / always)
(p3 / promise-01, ARG1, p / purport-01)

Decoded in 76,875 microseconds
Sentence: mrs thatcher was a notable absentee from this years welsh tory conference but representatives were promised a visit before christmas

Spans:
Span 18-19:  before => before
Span 12-13:  but => contrast-01
Span 11-12:  conference => conference
Span 15-16:  promised => promise-01
Span 13-14:  representatives => (person :ARG0-of represent-01)
Span 7-8:  this => this
Span 10-11:  tory => (political-party :name (name :op "Tory"))
Span 17-18:  visit => visit-01
Span 8-9:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),before,before,false), Span(17,18,List(1),visit,visit-01,false), Span(15,16,List(2),promised,promise-01,false), Span(13,14,List(4, 3),representatives,(person :ARG0-of represent-01),false), Span(12,13,List(5),but,contrast-01,false), Span(11,12,List(6),conference,conference,false), Span(10,11,List(9, 8, 7),tory,(political-party :name (name :op "Tory")),false), Span(8,9,List(11, 10),years,(temporal-quantity :unit year),false), Span(7,8,List(12),this,this,false)),Map(2 -> promise-01, 5 -> contrast-01, 12 -> this, 8 -> name, 7 -> political-party, 1 -> visit-01, 4 -> represent-01, 11 -> year, 6 -> conference, 0 -> before, 9 -> "Tory", 3 -> person, 10 -> temporal-quantity),Map(n -> name, t -> temporal-quantity, b -> before, p2 -> person, v -> visit-01, y -> year, p -> promise-01, t2 -> this, r -> represent-01, c -> contrast-01, p3 -> political-party, c2 -> conference))),[Ljava.lang.String;@354c3f42,Annotation([Ljava.lang.String;@20cd2164,[Ljava.lang.String;@7b4b3d0e,[Ljava.lang.String;@895a15f),Annotation([Ljava.lang.String;@17956860,[Ljava.lang.String;@51f782b8,[Ledu.cmu.lti.nlp.amr.Dependency;@50a72812),Annotation([Ljava.lang.String;@e37df1c,[Ljava.lang.String;@7618ae8e,[Ljava.lang.String;@4e6c2934),Annotation([Ljava.lang.String;@1f053d25,[Ljava.lang.String;@10f1580c,[Ledu.cmu.lti.nlp.amr.Entity;@54cb8484))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c2 / conference, duration, t / temporal-quantity)
(c2 / conference, mod, p3 / political-party)
(c2 / conference, mod, t2 / this)
(n / name, op, "Tory")
(p / promise-01, ARG1, p2 / person)
(p / promise-01, time, b / before)
(p3 / political-party, name, n / name)
(r / represent-01, ARG0, p2 / person)
(r / represent-01, ARG1, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)
(v / visit-01, ARG0, p2 / person)

Decoded in 156,967 microseconds
Sentence: every winter heralds the arrival of a new batch of products which give comfort and promise quick relief

Spans:
Span 14-15:  and => and
Span 4-5:  arrival => arrive-01
Span 8-9:  batch => (person :source batch)
Span 13-14:  comfort => comfort-01
Span 0-1:  every => every
Span 12-13:  give => give-01
Span 7-8:  new => new
Span 10-11:  products => product
Span 15-16:  promise => promise-01
Span 16-17:  quick => quick
Span 17-18:  relief => relieve-01
Span 1-2:  winter => winter

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),relief,relieve-01,false), Span(16,17,List(1),quick,quick,false), Span(15,16,List(2),promise,promise-01,false), Span(14,15,List(3),and,and,false), Span(13,14,List(4),comfort,comfort-01,false), Span(12,13,List(5),give,give-01,false), Span(10,11,List(6),products,product,false), Span(8,9,List(8, 7),batch,(person :source batch),false), Span(7,8,List(9),new,new,false), Span(4,5,List(10),arrival,arrive-01,false), Span(1,2,List(11),winter,winter,false), Span(0,1,List(12),every,every,false)),Map(2 -> promise-01, 5 -> give-01, 12 -> every, 8 -> batch, 7 -> person, 1 -> quick, 4 -> comfort-01, 11 -> winter, 6 -> product, 0 -> relieve-01, 9 -> new, 3 -> and, 10 -> arrive-01),Map(e -> every, n -> new, w -> winter, q -> quick, b -> batch, p2 -> product, p -> promise-01, g -> give-01, a -> and, r -> relieve-01, a2 -> arrive-01, c -> comfort-01, p3 -> person))),[Ljava.lang.String;@17fa54c0,Annotation([Ljava.lang.String;@33d2158c,[Ljava.lang.String;@2584b4e8,[Ljava.lang.String;@2b80fe96),Annotation([Ljava.lang.String;@21ca402a,[Ljava.lang.String;@653a96ba,[Ledu.cmu.lti.nlp.amr.Dependency;@697dc141),Annotation([Ljava.lang.String;@3f1ac882,[Ljava.lang.String;@7761ef2b,[Ljava.lang.String;@3e9d2d48),Annotation([Ljava.lang.String;@4107f215,[Ljava.lang.String;@70a6620d,[Ledu.cmu.lti.nlp.amr.Entity;@3b6f7d42))
AMR:
(a / and, op, p / promise-01)
(a2 / arrive-01, ARG0, w / winter)
(a2 / arrive-01, ARG1, p3 / person)
(c / comfort-01, ARG1, r / relieve-01)
(g / give-01, ARG0, p2 / product)
(g / give-01, ARG1, a / and)
(g / give-01, ARG2, c / comfort-01)
(p / promise-01, ARG1, p3 / person)
(p3 / person, mod, n / new)
(p3 / person, source, b / batch)
(r / relieve-01, mod, q / quick)
(w / winter, mod, e / every)

Decoded in 456,538 microseconds
Sentence: friends had provided 15000 in help after promising 1m

Spans:
Span 3-4:  15000 => 15000
Span 6-7:  after => after
Span 0-1:  friends => (have-rel-role-91 :ARG2 friend)
Span 5-6:  help => help-01
Span 7-8:  promising => promise-01
Span 2-3:  provided => provide-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),promising,promise-01,false), Span(6,7,List(1),after,after,false), Span(5,6,List(2),help,help-01,false), Span(3,4,List(3),15000,15000,false), Span(2,3,List(4),provided,provide-01,false), Span(0,1,List(6, 5),friends,(have-rel-role-91 :ARG2 friend),false)),Map(2 -> help-01, 5 -> have-rel-role-91, 1 -> after, 4 -> provide-01, 6 -> friend, 0 -> promise-01, 3 -> 15000),Map(h -> help-01, h2 -> have-rel-role-91, p2 -> provide-01, 1 -> 15000, p -> promise-01, a -> after, f -> friend))),[Ljava.lang.String;@1488968a,Annotation([Ljava.lang.String;@1353488e,[Ljava.lang.String;@40c06c8b,[Ljava.lang.String;@19163ae3),Annotation([Ljava.lang.String;@27419f3,[Ljava.lang.String;@1453a1c7,[Ledu.cmu.lti.nlp.amr.Dependency;@7ea21a3d),Annotation([Ljava.lang.String;@4468dbbe,[Ljava.lang.String;@4032ba08,[Ljava.lang.String;@42538425),Annotation([Ljava.lang.String;@7908bb27,[Ljava.lang.String;@2c373b85,[Ledu.cmu.lti.nlp.amr.Entity;@5e24af70))
AMR:
(h / help-01, time, a / after)
(h2 / have-rel-role-91, ARG2, f / friend)
(p / promise-01, ARG1, h2 / have-rel-role-91)
(p2 / provide-01, ARG0, h2 / have-rel-role-91)
(p2 / provide-01, ARG1, 1 / 15000)
(p2 / provide-01, time, a / after)

Decoded in 55,265 microseconds
Sentence: it promises to be a hot and gruelling day

Spans:
Span 6-7:  and => and
Span 8-9:  day => day
Span 5-6:  hot => hot
Span 0-1:  it => it
Span 1-2:  promises => promise-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),day,day,false), Span(6,7,List(1),and,and,false), Span(5,6,List(2),hot,hot,false), Span(1,2,List(3),promises,promise-01,false), Span(0,1,List(4),it,it,false)),Map(2 -> hot, 1 -> and, 4 -> it, 0 -> day, 3 -> promise-01),Map(h -> hot, d -> day, p -> promise-01, a -> and, i -> it))),[Ljava.lang.String;@3a7a1259,Annotation([Ljava.lang.String;@244aaf0d,[Ljava.lang.String;@232a9118,[Ljava.lang.String;@3f9bd0b1),Annotation([Ljava.lang.String;@ea23517,[Ljava.lang.String;@3b4b8082,[Ledu.cmu.lti.nlp.amr.Dependency;@59e1f537),Annotation([Ljava.lang.String;@1aa1bfb,[Ljava.lang.String;@4712fc97,[Ljava.lang.String;@2f8541f5),Annotation([Ljava.lang.String;@55ad5432,[Ljava.lang.String;@6672ca8f,[Ledu.cmu.lti.nlp.amr.Entity;@7a50a6d4))
AMR:
(a / and, op, h / hot)
(d / day, domain, i / it)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, a / and)

Decoded in 45,432 microseconds
Sentence: fish fingers ellip  if youd like to help the desperate plight of east germany send as much money as you can to tim chubbley and he promises to shut up

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = fish fingers ellip  if youd like to help the desperate plight of east germany send as much money as you can to tim chubbley and he promises to shut up
myTokenized = fish fingers ellip if youd like to help the desperate plight of east germany send as much money as you can to tim chubbley and he promises to shut up
i = 3
prefix = List(fish, fingers, ellip, if)
regexr = \Qf\E ?\Qi\E ?\Qs\E ?\Qh\E ?\Qf\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qp\E ?\Qi\E ?\Qf\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the meeting promised an eventual rerun of the selection contest

Spans:
Span 9-10:  contest => contest-00
Span 4-5:  eventual => eventual
Span 1-2:  meeting => meet-03
Span 2-3:  promised => promise-01
Span 8-9:  selection => select-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),contest,contest-00,false), Span(8,9,List(1),selection,select-01,false), Span(4,5,List(2),eventual,eventual,false), Span(2,3,List(3),promised,promise-01,false), Span(1,2,List(4),meeting,meet-03,false)),Map(2 -> eventual, 1 -> select-01, 4 -> meet-03, 0 -> contest-00, 3 -> promise-01),Map(e -> eventual, s -> select-01, m -> meet-03, p -> promise-01, c -> contest-00))),[Ljava.lang.String;@3107e198,Annotation([Ljava.lang.String;@7c6bdb4d,[Ljava.lang.String;@d0adc0c,[Ljava.lang.String;@43f49e84),Annotation([Ljava.lang.String;@70d30ef6,[Ljava.lang.String;@307b7258,[Ledu.cmu.lti.nlp.amr.Dependency;@78900845),Annotation([Ljava.lang.String;@380f27d9,[Ljava.lang.String;@6b01344f,[Ljava.lang.String;@1c11656b),Annotation([Ljava.lang.String;@3a196232,[Ljava.lang.String;@587dde6a,[Ledu.cmu.lti.nlp.amr.Entity;@2f952e89))
AMR:
(c / contest-00, ARG1, s / select-01)
(p / promise-01, ARG0, m / meet-03)
(p / promise-01, ARG1, e / eventual)
(s / select-01, ARG1, m / meet-03)

Decoded in 21,320 microseconds
Sentence: the hindu promised fresh disclosures the next day but wednesdays paper contained no more reports

Spans:
Span 8-9:  but => contrast-01
Span 11-12:  contained => contain-01
Span 7-8:  day => day
Span 3-4:  fresh => fresh
Span 6-7:  next => next
Span 12-13:  no => -
Span 10-11:  paper => paper
Span 2-3:  promised => promise-01
Span 14-15:  reports => report-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),reports,report-01,false), Span(12,13,List(1),no,-,false), Span(11,12,List(2),contained,contain-01,false), Span(10,11,List(3),paper,paper,false), Span(8,9,List(4),but,contrast-01,false), Span(7,8,List(5),day,day,false), Span(6,7,List(6),next,next,false), Span(3,4,List(7),fresh,fresh,false), Span(2,3,List(8),promised,promise-01,false)),Map(2 -> contain-01, 5 -> day, 8 -> promise-01, 7 -> fresh, 1 -> -, 4 -> contrast-01, 6 -> next, 0 -> report-01, 3 -> paper),Map(n -> next, p2 -> promise-01, d -> day, p -> paper, r -> report-01, - -> -, c -> contain-01, f -> fresh, c2 -> contrast-01))),[Ljava.lang.String;@6b223cc6,Annotation([Ljava.lang.String;@14c4221d,[Ljava.lang.String;@589ba891,[Ljava.lang.String;@5357f509),Annotation([Ljava.lang.String;@33984c9e,[Ljava.lang.String;@53ce3388,[Ledu.cmu.lti.nlp.amr.Dependency;@69950b4),Annotation([Ljava.lang.String;@3b815cce,[Ljava.lang.String;@29f3f6e7,[Ljava.lang.String;@4fd6cd35),Annotation([Ljava.lang.String;@1f3a7b86,[Ljava.lang.String;@3883aa6e,[Ledu.cmu.lti.nlp.amr.Entity;@4c2a38be))
AMR:
(c / contain-01, ARG0, p / paper)
(c / contain-01, ARG1, r / report-01)
(c / contain-01, polarity, - / -)
(c2 / contrast-01, ARG1, p2 / promise-01)
(c2 / contrast-01, ARG2, c / contain-01)
(d / day, mod, n / next)
(p2 / promise-01, time, d / day)
(r / report-01, ARG1, f / fresh)

Decoded in 37,183 microseconds
Sentence: do we have a chance of beating the soviets the president inquires by putting a laboratory in space or by a trip around the moon or by a rocket to land on the moon or by a rocket to go to the moon and back with a man was there any other space effort which promises dramatic results in which we could win the president further instructed johnson to find out whether work was going on 24 hours day and if not why not

Spans:
Span 76-77:  24 => 24
Span 79-80:  and => and
Span 43-44:  and => and
Span 50-51:  any => any
Span 22-23:  around => around
Span 44-45:  back => back
Span 6-7:  beating => beat-01
Span 4-5:  chance => chance
Span 61-62:  could => possible
Span 78-79:  day => day
Span 56-57:  dramatic => dramatic
Span 53-54:  effort => effort
Span 65-66:  further => further
Span 77-78:  hours => (temporal-quantity :unit hour)
Span 66-67:  instructed => instruct-01
Span 15-16:  laboratory => laboratory
Span 30-31:  land => land
Span 47-48:  man => man
Span 42-43:  moon => moon
Span 33-34:  moon => moon
Span 24-25:  moon => moon
Span 34-35:  or => or
Span 25-26:  or => or
Span 18-19:  or => or
Span 51-52:  other => other
Span 64-65:  president => (have-org-role-91 :ARG2 president)
Span 10-11:  president => (have-org-role-91 :ARG2 president)
Span 55-56:  promises => promise-01
Span 13-14:  putting => put-01
Span 57-58:  results => result-01
Span 37-38:  rocket => rocket
Span 28-29:  rocket => rocket
Span 52-53:  space => space
Span 17-18:  space => space
Span 21-22:  trip => trip-01
Span 60-61:  we => we
Span 1-2:  we => we
Span 62-63:  win => win-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(79,80,List(0),and,and,false), Span(78,79,List(1),day,day,false), Span(77,78,List(3, 2),hours,(temporal-quantity :unit hour),false), Span(76,77,List(4),24,24,false), Span(66,67,List(5),instructed,instruct-01,false), Span(65,66,List(6),further,further,false), Span(64,65,List(8, 7),president,(have-org-role-91 :ARG2 president),false), Span(62,63,List(9),win,win-01,false), Span(61,62,List(10),could,possible,false), Span(60,61,List(11),we,we,false), Span(57,58,List(12),results,result-01,false), Span(56,57,List(13),dramatic,dramatic,false), Span(55,56,List(14),promises,promise-01,false), Span(53,54,List(15),effort,effort,false), Span(52,53,List(16),space,space,false), Span(51,52,List(17),other,other,false), Span(50,51,List(18),any,any,false), Span(47,48,List(19),man,man,false), Span(44,45,List(20),back,back,false), Span(43,44,List(21),and,and,false), Span(42,43,List(22),moon,moon,false), Span(37,38,List(23),rocket,rocket,false), Span(34,35,List(24),or,or,false), Span(33,34,List(25),moon,moon,false), Span(30,31,List(26),land,land,false), Span(28,29,List(27),rocket,rocket,false), Span(25,26,List(28),or,or,false), Span(24,25,List(29),moon,moon,false), Span(22,23,List(30),around,around,false), Span(21,22,List(31),trip,trip-01,false), Span(18,19,List(32),or,or,false), Span(17,18,List(33),space,space,false), Span(15,16,List(34),laboratory,laboratory,false), Span(13,14,List(35),putting,put-01,false), Span(10,11,List(37, 36),president,(have-org-role-91 :ARG2 president),false), Span(6,7,List(38),beating,beat-01,false), Span(4,5,List(39),chance,chance,false), Span(1,2,List(40),we,we,false)),Map(39 -> chance, 30 -> around, 2 -> temporal-quantity, 5 -> instruct-01, 33 -> space, 27 -> rocket, 12 -> result-01, 8 -> president, 15 -> effort, 36 -> have-org-role-91, 21 -> and, 18 -> any, 24 -> or, 35 -> put-01, 7 -> have-org-role-91, 1 -> day, 17 -> other, 23 -> rocket, 38 -> beat-01, 26 -> land, 4 -> 24, 11 -> we, 32 -> or, 14 -> promise-01, 29 -> moon, 20 -> back, 34 -> laboratory, 28 -> or, 6 -> further, 40 -> we, 9 -> win-01, 0 -> and, 22 -> moon, 16 -> space, 37 -> president, 19 -> man, 10 -> possible, 3 -> hour, 31 -> trip-01, 25 -> moon, 13 -> dramatic),Map(m3 -> moon, e -> effort, w -> win-01, r3 -> rocket, h -> hour, 2 -> 24, p5 -> president, s2 -> space, h2 -> have-org-role-91, t -> temporal-quantity, b -> back, b2 -> beat-01, m2 -> moon, o3 -> or, p2 -> possible, a3 -> and, w3 -> we, s -> space, d -> day, m -> man, r2 -> rocket, p -> president, a -> and, p4 -> put-01, d2 -> dramatic, o2 -> or, m4 -> moon, t2 -> trip-01, l2 -> laboratory, w2 -> we, r -> result-01, i -> instruct-01, a2 -> any, c -> chance, h3 -> have-org-role-91, l -> land, f -> further, o -> other, o4 -> or, p3 -> promise-01, a4 -> around))),[Ljava.lang.String;@58f2a5fc,Annotation([Ljava.lang.String;@226f7103,[Ljava.lang.String;@42648d9e,[Ljava.lang.String;@578da21f),Annotation([Ljava.lang.String;@138ece21,[Ljava.lang.String;@47ee28f,[Ledu.cmu.lti.nlp.amr.Dependency;@264c1c97),Annotation([Ljava.lang.String;@4ee91125,[Ljava.lang.String;@2764bc9c,[Ljava.lang.String;@469ab9f8),Annotation([Ljava.lang.String;@58276cfe,[Ljava.lang.String;@464c4e9,[Ledu.cmu.lti.nlp.amr.Entity;@73bb9f3f))
AMR:
(a3 / and, op, b2 / beat-01)
(a3 / and, op, m / man)
(a3 / and, op, m2 / moon)
(a3 / and, op, p4 / put-01)
(a4 / around, op, m4 / moon)
(b2 / beat-01, ARG0, w3 / we)
(b2 / beat-01, condition, h3 / have-org-role-91)
(c / chance, mod, b2 / beat-01)
(e / effort, domain, m / man)
(e / effort, mod, a2 / any)
(e / effort, mod, o / other)
(e / effort, mod, s / space)
(h2 / have-org-role-91, ARG1, 2 / 24)
(h2 / have-org-role-91, ARG2, p / president)
(h3 / have-org-role-91, ARG2, p5 / president)
(i / instruct-01, ARG0, w2 / we)
(i / instruct-01, ARG1, a / and)
(i / instruct-01, degree, f / further)
(m3 / moon, op, h3 / have-org-role-91)
(o2 / or, op, r2 / rocket)
(o3 / or, op, r2 / rocket)
(o3 / or, op, r3 / rocket)
(o4 / or, op, t2 / trip-01)
(p2 / possible, domain, w / win-01)
(p3 / promise-01, ARG0, e / effort)
(p3 / promise-01, ARG1, r / result-01)
(p4 / put-01, ARG0, o4 / or)
(p4 / put-01, ARG1, l2 / laboratory)
(p4 / put-01, ARG2, s2 / space)
(r / result-01, ARG0, w2 / we)
(r / result-01, ARG1, d / day)
(r / result-01, manner, d2 / dramatic)
(r3 / rocket, mod, l / land)
(t / temporal-quantity, quant, 2 / 24)
(t / temporal-quantity, unit, h / hour)
(t2 / trip-01, ARG0, b / back)
(t2 / trip-01, ARG1, o3 / or)
(t2 / trip-01, location, a4 / around)
(w / win-01, ARG0, w2 / we)
(w / win-01, ARG1, p / president)

Decoded in 2,726,982 microseconds
Sentence: i promised genevieve trevaunce id check on her sister

Spans:
Span 0-1:  i => i
Span 4-5:  id => id
Span 1-2:  promised => promise-01
Span 8-9:  sister => (have-rel-role-91 :ARG2 sister)

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(1, 0),sister,(have-rel-role-91 :ARG2 sister),false), Span(4,5,List(2),id,id,false), Span(1,2,List(3),promised,promise-01,false), Span(0,1,List(4),i,i,false)),Map(2 -> id, 1 -> sister, 4 -> i, 0 -> have-rel-role-91, 3 -> promise-01),Map(h -> have-rel-role-91, s -> sister, p -> promise-01, i2 -> i, i -> id))),[Ljava.lang.String;@22d41c75,Annotation([Ljava.lang.String;@13985730,[Ljava.lang.String;@76841a5c,[Ljava.lang.String;@5adecacd),Annotation([Ljava.lang.String;@58d48756,[Ljava.lang.String;@69014ca9,[Ledu.cmu.lti.nlp.amr.Dependency;@5450211a),Annotation([Ljava.lang.String;@58ad5d34,[Ljava.lang.String;@5dc22e67,[Ljava.lang.String;@77749c47),Annotation([Ljava.lang.String;@8c03696,[Ljava.lang.String;@33fb657,[Ledu.cmu.lti.nlp.amr.Entity;@4bdc0b6b))
AMR:
(h / have-rel-role-91, ARG2, s / sister)
(i / id, purpose, h / have-rel-role-91)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, i / id)

Decoded in 30,948 microseconds
Sentence: mr mladenov 53 who took over from todor zhivkov on friday promised sweeping reforms in bulgarias centralised economic structure and more say for ordinary people in public affairs within the framework of socialism

Spans:
Span 2-3:  53 => 53
Span 27-28:  affairs => affair
Span 19-20:  and => and
Span 17-18:  economic => economy
Span 30-31:  framework => framework
Span 10-11:  friday => friday
Span 23-24:  ordinary => ordinary
Span 11-12:  promised => promise-01
Span 26-27:  public => public
Span 13-14:  reforms => reform-01
Span 21-22:  say => say-01
Span 32-33:  socialism => socialism
Span 18-19:  structure => structure
Span 12-13:  sweeping => sweep-01
Span 28-29:  within => within

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),socialism,socialism,false), Span(30,31,List(1),framework,framework,false), Span(28,29,List(2),within,within,false), Span(27,28,List(3),affairs,affair,false), Span(26,27,List(4),public,public,false), Span(23,24,List(5),ordinary,ordinary,false), Span(21,22,List(6),say,say-01,false), Span(19,20,List(7),and,and,false), Span(18,19,List(8),structure,structure,false), Span(17,18,List(9),economic,economy,false), Span(13,14,List(10),reforms,reform-01,false), Span(12,13,List(11),sweeping,sweep-01,false), Span(11,12,List(12),promised,promise-01,false), Span(10,11,List(13),friday,friday,false), Span(2,3,List(14),53,53,false)),Map(2 -> within, 5 -> ordinary, 12 -> promise-01, 8 -> structure, 7 -> and, 1 -> framework, 4 -> public, 11 -> sweep-01, 14 -> 53, 6 -> say-01, 0 -> socialism, 9 -> economy, 3 -> affair, 10 -> reform-01, 13 -> friday),Map(e -> economy, w -> within, 5 -> 53, s2 -> say-01, p2 -> promise-01, s -> socialism, s4 -> sweep-01, p -> public, a -> affair, a2 -> and, r -> reform-01, s3 -> structure, f2 -> friday, f -> framework, o -> ordinary))),[Ljava.lang.String;@5b71c4b5,Annotation([Ljava.lang.String;@a2975fa,[Ljava.lang.String;@2800754c,[Ljava.lang.String;@3614e518),Annotation([Ljava.lang.String;@15cca665,[Ljava.lang.String;@2ec03c11,[Ledu.cmu.lti.nlp.amr.Dependency;@4ea79811),Annotation([Ljava.lang.String;@5cf0ac6e,[Ljava.lang.String;@3cc8996d,[Ljava.lang.String;@15d0e248),Annotation([Ljava.lang.String;@44b7f028,[Ljava.lang.String;@7f7f557,[Ledu.cmu.lti.nlp.amr.Entity;@280c26d7))
AMR:
(a / affair, location, f / framework)
(a / affair, mod, p / public)
(f / framework, poss, s / socialism)
(p2 / promise-01, ARG0, a2 / and)
(p2 / promise-01, ARG1, f2 / friday)
(p2 / promise-01, ARG2, r / reform-01)
(r / reform-01, ARG1, e / economy)
(s2 / say-01, ARG0, 5 / 53)
(s2 / say-01, ARG1, a2 / and)
(s2 / say-01, purpose, a / affair)
(s3 / structure, mod, e / economy)
(s4 / sweep-01, ARG0, o / ordinary)
(s4 / sweep-01, ARG1, r / reform-01)
(w / within, op, f / framework)

Decoded in 304,994 microseconds
Sentence: all i can promise you is a spectacle

Spans:
Span 0-1:  all => all
Span 2-3:  can => possible
Span 1-2:  i => i
Span 3-4:  promise => promise-01
Span 7-8:  spectacle => spectacle
Span 4-5:  you => you

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),spectacle,spectacle,false), Span(4,5,List(1),you,you,false), Span(3,4,List(2),promise,promise-01,false), Span(2,3,List(3),can,possible,false), Span(1,2,List(4),i,i,false), Span(0,1,List(5),all,all,false)),Map(2 -> promise-01, 5 -> all, 1 -> you, 4 -> i, 0 -> spectacle, 3 -> possible),Map(p2 -> possible, s -> spectacle, p -> promise-01, y -> you, a -> all, i -> i))),[Ljava.lang.String;@35ca01cb,Annotation([Ljava.lang.String;@613bd203,[Ljava.lang.String;@1e58f4d4,[Ljava.lang.String;@623199dc),Annotation([Ljava.lang.String;@266c6ce1,[Ljava.lang.String;@18603b7c,[Ledu.cmu.lti.nlp.amr.Dependency;@55e15664),Annotation([Ljava.lang.String;@3ceeeb48,[Ljava.lang.String;@6998e338,[Ljava.lang.String;@346da7b1),Annotation([Ljava.lang.String;@b1c705b,[Ljava.lang.String;@78146c0f,[Ledu.cmu.lti.nlp.amr.Entity;@4c28a60))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, a / all)
(p / promise-01, concession, s / spectacle)
(p / promise-01, mod, p2 / possible)
(s / spectacle, domain, y / you)

Decoded in 87,751 microseconds
Sentence:   dr kavanagh who is a director of the goldsmith press promises to be in dublin to fight his sacred keepers corner in court

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   dr kavanagh who is a director of the goldsmith press promises to be in dublin to fight his sacred keepers corner in court
myTokenized = dr kavanagh who is a director of the goldsmith press promises to be in dublin to fight his sacred keepers corner in court
i = 0
prefix = List(dr)
regexr = \Qd\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the forecasts promised several days of hot weather and because he had help in the house moran decided to cut all the meadows

Spans:
Span 20-21:  all => all
Span 8-9:  and => and
Span 9-10:  because => cause-01
Span 4-5:  days => (temporal-quantity :unit day)
Span 17-18:  decided => decide-01
Span 1-2:  forecasts => forecast-01
Span 10-11:  he => he
Span 12-13:  help => help-01
Span 6-7:  hot => hot
Span 15-16:  house => house
Span 2-3:  promised => promise-01
Span 3-4:  several => several
Span 7-8:  weather => weather

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),all,all,false), Span(17,18,List(1),decided,decide-01,false), Span(15,16,List(2),house,house,false), Span(12,13,List(3),help,help-01,false), Span(10,11,List(4),he,he,false), Span(9,10,List(5),because,cause-01,false), Span(8,9,List(6),and,and,false), Span(7,8,List(7),weather,weather,false), Span(6,7,List(8),hot,hot,false), Span(4,5,List(10, 9),days,(temporal-quantity :unit day),false), Span(3,4,List(11),several,several,false), Span(2,3,List(12),promised,promise-01,false), Span(1,2,List(13),forecasts,forecast-01,false)),Map(2 -> house, 5 -> cause-01, 12 -> promise-01, 8 -> hot, 7 -> weather, 1 -> decide-01, 4 -> he, 11 -> several, 6 -> and, 0 -> all, 9 -> temporal-quantity, 3 -> help-01, 10 -> day, 13 -> forecast-01),Map(w -> weather, h -> house, h2 -> help-01, t -> temporal-quantity, s -> several, h4 -> hot, d -> decide-01, p -> promise-01, a -> all, d2 -> day, a2 -> and, h3 -> he, c -> cause-01, f -> forecast-01))),[Ljava.lang.String;@7e7615fe,Annotation([Ljava.lang.String;@7a9e178e,[Ljava.lang.String;@211caa86,[Ljava.lang.String;@60ff5465),Annotation([Ljava.lang.String;@1afde4a3,[Ljava.lang.String;@12ad972d,[Ledu.cmu.lti.nlp.amr.Dependency;@42a014ef),Annotation([Ljava.lang.String;@1bbe7915,[Ljava.lang.String;@75ff5fed,[Ljava.lang.String;@50f2fd20),Annotation([Ljava.lang.String;@c86965,[Ljava.lang.String;@657f6649,[Ledu.cmu.lti.nlp.amr.Entity;@f1476ae))
AMR:
(a2 / and, op, w / weather)
(c / cause-01, ARG0, h2 / help-01)
(d / decide-01, ARG1, h2 / help-01)
(f / forecast-01, ARG1, a / all)
(h2 / help-01, ARG0, h3 / he)
(h2 / help-01, ARG1, h / house)
(p / promise-01, ARG0, h3 / he)
(p / promise-01, ARG1, f / forecast-01)
(p / promise-01, ARG2, t / temporal-quantity)
(s / several, op, t / temporal-quantity)
(t / temporal-quantity, topic, a2 / and)
(t / temporal-quantity, unit, d2 / day)
(w / weather, mod, h4 / hot)

Decoded in 242,281 microseconds
Sentence: as a result kuwait and the united arab emirates the other big overproducer were forced to promise to be good in future dash, although in the case of the emirates the promise is fairly hollow as the two main oilproducing components of that unlikely country abu dhabi and dubai are frequently at odds with each other

NER Entity: (country :name (name :op "kuwait"))
NER Entity: (country :name (name :op "united" :op "arab" :op "emirates"))
Spans:
Span 48-49:  and => and
Span 4-5:  and => and
Span 11-12:  big => big
Span 27-28:  case => case
Span 41-42:  components => component
Span 45-46:  country => country
Span 55-56:  each => each
Span 34-35:  fairly => fair
Span 14-15:  forced => force-01
Span 51-52:  frequently => frequent
Span 21-22:  future => future
Span 19-20:  good => good
Span 35-36:  hollow => hollow
Span 39-40:  main => main
Span 53-54:  odds => odds
Span 56-57:  other => other
Span 10-11:  other => other
Span 32-33:  promise => promise-01
Span 16-17:  promise => promise-01
Span 2-3:  result => result-01
Span 38-39:  two => 2
Span 6-9:  united arab emirates => (country :name (name :op "united" :op "arab" :op "emirates"))
Span 44-45:  unlikely => (likely :polarity -)

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(56,57,List(0),other,other,false), Span(55,56,List(1),each,each,false), Span(53,54,List(2),odds,odds,false), Span(51,52,List(3),frequently,frequent,false), Span(48,49,List(4),and,and,false), Span(45,46,List(5),country,country,false), Span(44,45,List(7, 6),unlikely,(likely :polarity -),false), Span(41,42,List(8),components,component,false), Span(39,40,List(9),main,main,false), Span(38,39,List(10),two,2,false), Span(35,36,List(11),hollow,hollow,false), Span(34,35,List(12),fairly,fair,false), Span(32,33,List(13),promise,promise-01,false), Span(27,28,List(14),case,case,false), Span(21,22,List(15),future,future,false), Span(19,20,List(16),good,good,false), Span(16,17,List(17),promise,promise-01,false), Span(14,15,List(18),forced,force-01,false), Span(11,12,List(19),big,big,false), Span(10,11,List(20),other,other,false), Span(6,9,List(25, 24, 23, 22, 21),united arab emirates,(country :name (name :op "united" :op "arab" :op "emirates")),false), Span(4,5,List(26),and,and,false), Span(2,3,List(27),result,result-01,false)),Map(2 -> odds, 5 -> country, 27 -> result-01, 12 -> fair, 8 -> component, 15 -> future, 21 -> country, 18 -> force-01, 24 -> "arab", 7 -> -, 1 -> each, 17 -> promise-01, 23 -> "united", 26 -> and, 4 -> and, 11 -> hollow, 14 -> case, 20 -> other, 6 -> likely, 9 -> main, 0 -> other, 22 -> name, 16 -> good, 19 -> big, 10 -> 2, 3 -> frequent, 25 -> "emirates", 13 -> promise-01),Map(e -> each, n -> name, h -> hollow, 2 -> 2, b -> big, o3 -> other, f4 -> force-01, p2 -> promise-01, c4 -> country, m -> main, g -> good, p -> promise-01, c3 -> case, a -> and, o2 -> odds, f3 -> future, r -> result-01, a2 -> and, c -> country, l -> likely, f2 -> fair, f -> frequent, o -> other, c2 -> component))),[Ljava.lang.String;@87ba13e,Annotation([Ljava.lang.String;@6c96f1cb,[Ljava.lang.String;@29dc7e1f,[Ljava.lang.String;@4adc3ab1),Annotation([Ljava.lang.String;@409160dc,[Ljava.lang.String;@86e2ca2,[Ledu.cmu.lti.nlp.amr.Dependency;@79344400),Annotation([Ljava.lang.String;@565c9a2a,[Ljava.lang.String;@598d67b1,[Ljava.lang.String;@5292c365),Annotation([Ljava.lang.String;@215a463d,[Ljava.lang.String;@2db95fe6,[Ledu.cmu.lti.nlp.amr.Entity;@65470c7d))
AMR:
(a / and, op, f / frequent)
(a2 / and, op, f4 / force-01)
(b / big, op, p / promise-01)
(c / country, mod, l / likely)
(c2 / component, mod, m / main)
(c2 / component, quant, 2 / 2)
(c3 / case, time, p / promise-01)
(c4 / country, name, n / name)
(e / each, op, p / promise-01)
(f4 / force-01, ARG0, c4 / country)
(f4 / force-01, ARG1, h / hollow)
(f4 / force-01, ARG2, p2 / promise-01)
(h / hollow, condition, c2 / component)
(h / hollow, degree, f2 / fair)
(h / hollow, domain, p / promise-01)
(l / likely, polarity, -)
(n / name, op, "arab")
(n / name, op, "emirates")
(n / name, op, "united")
(o / other, mod, e / each)
(o2 / odds, op, p / promise-01)
(o3 / other, op, p / promise-01)
(p / promise-01, ARG2, a / and)
(p2 / promise-01, ARG0, c / country)
(p2 / promise-01, ARG1, g / good)
(r / result-01, ARG0, f3 / future)
(r / result-01, ARG1, a2 / and)

Decoded in 450,994 microseconds
Sentence: the scotland manager was furious when nicol and gillespie failed to appear for last months trip to genoa and promised to give preferential treatment to those players who did turn up

Spans:
Span 18-19:  and => and
Span 7-8:  and => and
Span 11-12:  appear => appear-02
Span 9-10:  failed => fail-01
Span 4-5:  furious => furious
Span 21-22:  give => give-01
Span 13-14:  last => last
Span 2-3:  manager => manage-01
Span 14-15:  months => (temporal-quantity :unit month)
Span 26-27:  players => (person :ARG0-of play-01)
Span 22-23:  preferential => prefer-01
Span 19-20:  promised => promise-01
Span 1-2:  scotland => (country :name (name :op "Scotland"))
Span 23-24:  treatment => treat-03
Span 15-16:  trip => trip-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(1, 0),players,(person :ARG0-of play-01),false), Span(23,24,List(2),treatment,treat-03,false), Span(22,23,List(3),preferential,prefer-01,false), Span(21,22,List(4),give,give-01,false), Span(19,20,List(5),promised,promise-01,false), Span(18,19,List(6),and,and,false), Span(15,16,List(7),trip,trip-01,false), Span(14,15,List(9, 8),months,(temporal-quantity :unit month),false), Span(13,14,List(10),last,last,false), Span(11,12,List(11),appear,appear-02,false), Span(9,10,List(12),failed,fail-01,false), Span(7,8,List(13),and,and,false), Span(4,5,List(14),furious,furious,false), Span(2,3,List(15),manager,manage-01,false), Span(1,2,List(18, 17, 16),scotland,(country :name (name :op "Scotland")),false)),Map(2 -> treat-03, 5 -> promise-01, 12 -> fail-01, 15 -> manage-01, 8 -> temporal-quantity, 18 -> "Scotland", 7 -> trip-01, 17 -> name, 1 -> play-01, 4 -> give-01, 11 -> appear-02, 14 -> furious, 6 -> and, 0 -> person, 9 -> month, 16 -> country, 3 -> prefer-01, 10 -> last, 13 -> and),Map(n -> name, t -> treat-03, m2 -> manage-01, p2 -> play-01, a3 -> and, m -> month, t3 -> temporal-quantity, p -> person, g -> give-01, a -> and, p4 -> promise-01, t2 -> trip-01, a2 -> appear-02, c -> country, f2 -> furious, l -> last, f -> fail-01, p3 -> prefer-01))),[Ljava.lang.String;@1b85167d,Annotation([Ljava.lang.String;@3e8776a8,[Ljava.lang.String;@2f7f2faa,[Ljava.lang.String;@47125a42),Annotation([Ljava.lang.String;@5e3c782,[Ljava.lang.String;@2d3f2ad3,[Ledu.cmu.lti.nlp.amr.Dependency;@e1499da),Annotation([Ljava.lang.String;@6a80be6e,[Ljava.lang.String;@2a565e62,[Ljava.lang.String;@c4e89a5),Annotation([Ljava.lang.String;@782eb5f2,[Ljava.lang.String;@42ab6082,[Ledu.cmu.lti.nlp.amr.Entity;@14d1900))
AMR:
(a / and, op, f / fail-01)
(a / and, op, p4 / promise-01)
(a2 / appear-02, ARG1, t2 / trip-01)
(c / country, name, n / name)
(f / fail-01, ARG0, a3 / and)
(f / fail-01, ARG1, m2 / manage-01)
(f / fail-01, ARG2, a2 / appear-02)
(f2 / furious, domain, m2 / manage-01)
(g / give-01, ARG1, t / treat-03)
(g / give-01, ARG2, p / person)
(m2 / manage-01, ARG1, c / country)
(n / name, op, "Scotland")
(p2 / play-01, ARG0, p / person)
(p4 / promise-01, ARG2, g / give-01)
(t / treat-03, ARG1, l / last)
(t / treat-03, mod, p3 / prefer-01)
(t2 / trip-01, ARG1, t3 / temporal-quantity)
(t3 / temporal-quantity, unit, m / month)

Decoded in 189,161 microseconds
Sentence: tickets for the opens are 10 with entry 30 for the bigmoney classic which promises 1500 to the winner down to 100 for seventh and 16 50 section prizes

Spans:
Span 5-6:  10 => 10
Span 21-22:  100 => 100
Span 15-16:  1500 => (date-entity :year 1500)
Span 25-26:  16 => 16
Span 8-9:  30 => 30
Span 26-27:  50 => 50
Span 24-25:  and => and
Span 12-13:  classic => classic
Span 19-20:  down => down
Span 3-4:  opens => open-01
Span 14-15:  promises => promise-01
Span 27-28:  section => section
Span 0-1:  tickets => ticket

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),section,section,false), Span(26,27,List(1),50,50,false), Span(25,26,List(2),16,16,false), Span(24,25,List(3),and,and,false), Span(21,22,List(4),100,100,false), Span(19,20,List(5),down,down,false), Span(15,16,List(7, 6),1500,(date-entity :year 1500),false), Span(14,15,List(8),promises,promise-01,false), Span(12,13,List(9),classic,classic,false), Span(8,9,List(10),30,30,false), Span(5,6,List(11),10,10,false), Span(3,4,List(12),opens,open-01,false), Span(0,1,List(13),tickets,ticket,false)),Map(2 -> 16, 5 -> down, 12 -> open-01, 8 -> promise-01, 7 -> 1500, 1 -> 50, 4 -> 100, 11 -> 10, 6 -> date-entity, 0 -> section, 9 -> classic, 3 -> and, 10 -> 30, 13 -> ticket),Map(5 -> 50, t -> ticket, 12 -> 100, s -> section, d -> down, 1 -> 16, p -> promise-01, a -> and, d2 -> date-entity, 14 -> 10, c -> classic, o -> open-01, 3 -> 30, 13 -> 1500))),[Ljava.lang.String;@6ca44faa,Annotation([Ljava.lang.String;@176a599f,[Ljava.lang.String;@4721e1bb,[Ljava.lang.String;@16ae079),Annotation([Ljava.lang.String;@fb728a9,[Ljava.lang.String;@41ce774e,[Ledu.cmu.lti.nlp.amr.Dependency;@59fac3a2),Annotation([Ljava.lang.String;@5e41eed4,[Ljava.lang.String;@3aa6d0a4,[Ljava.lang.String;@1dcbdd11),Annotation([Ljava.lang.String;@331e965f,[Ljava.lang.String;@1d225131,[Ledu.cmu.lti.nlp.amr.Entity;@380076e8))
AMR:
(1 / 16, op, o / open-01)
(12 / 100, mod, d / down)
(5 / 50, op, o / open-01)
(5 / 50, poss, 14 / 10)
(a / and, op, o / open-01)
(a / and, op, p / promise-01)
(d2 / date-entity, year, 13 / 1500)
(o / open-01, ARG1, s / section)
(o / open-01, ARG2, 3 / 30)
(p / promise-01, ARG0, c / classic)
(p / promise-01, ARG2, d / down)
(p / promise-01, time, d2 / date-entity)
(t / ticket, topic, o / open-01)

Decoded in 155,866 microseconds
Sentence: he has spent two years on a shoestring budget developing what promises to be the ski accessory this winter

Spans:
Span 16-17:  accessory => accessory
Span 8-9:  budget => budget
Span 9-10:  developing => develop-02
Span 0-1:  he => he
Span 11-12:  promises => promise-01
Span 2-3:  spent => spend-01
Span 17-18:  this => this
Span 3-4:  two => 2
Span 18-19:  winter => winter
Span 4-5:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),winter,winter,false), Span(17,18,List(1),this,this,false), Span(16,17,List(2),accessory,accessory,false), Span(11,12,List(3),promises,promise-01,false), Span(9,10,List(4),developing,develop-02,false), Span(8,9,List(5),budget,budget,false), Span(4,5,List(7, 6),years,(temporal-quantity :unit year),false), Span(3,4,List(8),two,2,false), Span(2,3,List(9),spent,spend-01,false), Span(0,1,List(10),he,he,false)),Map(2 -> accessory, 5 -> budget, 8 -> 2, 7 -> year, 1 -> this, 4 -> develop-02, 6 -> temporal-quantity, 9 -> spend-01, 0 -> winter, 10 -> he, 3 -> promise-01),Map(w -> winter, h -> he, 2 -> 2, b -> budget, t -> this, s -> spend-01, d -> develop-02, y -> year, p -> promise-01, a -> accessory, t2 -> temporal-quantity))),[Ljava.lang.String;@7271601f,Annotation([Ljava.lang.String;@715dcdeb,[Ljava.lang.String;@457a3972,[Ljava.lang.String;@5b518f00),Annotation([Ljava.lang.String;@478377d6,[Ljava.lang.String;@830a748,[Ledu.cmu.lti.nlp.amr.Dependency;@32366c2b),Annotation([Ljava.lang.String;@12f794ce,[Ljava.lang.String;@3c4a6a1c,[Ljava.lang.String;@397c7330),Annotation([Ljava.lang.String;@196e71cc,[Ljava.lang.String;@21f1151f,[Ledu.cmu.lti.nlp.amr.Entity;@5aa1b7a1))
AMR:
(d / develop-02, ARG0, b / budget)
(d / develop-02, ARG1, p / promise-01)
(p / promise-01, ARG0, w / winter)
(p / promise-01, ARG1, a / accessory)
(s / spend-01, ARG0, h / he)
(s / spend-01, ARG1, t2 / temporal-quantity)
(s / spend-01, purpose, d / develop-02)
(t2 / temporal-quantity, quant, 2 / 2)
(t2 / temporal-quantity, unit, y / year)
(w / winter, mod, t / this)

Decoded in 168,676 microseconds
Sentence: but it is only chapter one in what promises to be a long saga

Spans:
Span 0-1:  but => contrast-01
Span 4-5:  chapter => chapter
Span 1-2:  it => it
Span 3-4:  only => only
Span 8-9:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promises,promise-01,false), Span(4,5,List(1),chapter,chapter,false), Span(3,4,List(2),only,only,false), Span(1,2,List(3),it,it,false), Span(0,1,List(4),but,contrast-01,false)),Map(2 -> only, 1 -> chapter, 4 -> contrast-01, 0 -> promise-01, 3 -> it),Map(p -> promise-01, i -> it, c -> chapter, o -> only, c2 -> contrast-01))),[Ljava.lang.String;@2f1ed983,Annotation([Ljava.lang.String;@125a3fa0,[Ljava.lang.String;@63072ac9,[Ljava.lang.String;@6b8a24e9),Annotation([Ljava.lang.String;@3a7d7427,[Ljava.lang.String;@254ca71,[Ledu.cmu.lti.nlp.amr.Dependency;@cb6c1e9),Annotation([Ljava.lang.String;@3274ae84,[Ljava.lang.String;@a6d75fd,[Ljava.lang.String;@185d3a64),Annotation([Ljava.lang.String;@10a487bb,[Ljava.lang.String;@21cb0e86,[Ledu.cmu.lti.nlp.amr.Entity;@1a2690bf))
AMR:
(c / chapter, mod, o / only)
(c2 / contrast-01, ARG1, c / chapter)
(c2 / contrast-01, ARG2, i / it)
(p / promise-01, ARG1, c / chapter)

Decoded in 16,221 microseconds
Sentence: does it mean that electricity workers could strike in support of miners because they have a genuine interest in the impact that the price of coal has on the demand for electricity  second mr meacher has promised to make it impossible for an employer to get an injunction to stop an unlawful strike

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = does it mean that electricity workers could strike in support of miners because they have a genuine interest in the impact that the price of coal has on the demand for electricity  second mr meacher has promised to make it impossible for an employer to get an injunction to stop an unlawful strike
myTokenized = does it mean that electricity workers could strike in support of miners because they have a genuine interest in the impact that the price of coal has on the demand for electricity second mr meacher has promised to make it impossible for an employer to get an injunction to stop an unlawful strike
i = 32
prefix = List(does, it, mean, that, electricity, workers, could, strike, in, support, of, miners, because, they, have, a, genuine, interest, in, the, impact, that, the, price, of, coal, has, on, the, demand, for, electricity, second)
regexr = \Qd\E ?\Qo\E ?\Qe\E ?\Qs\E ?\Qi\E ?\Qt\E ?\Qm\E ?\Qe\E ?\Qa\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Ql\E ?\Qe\E ?\Qc\E ?\Qt\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qi\E ?\Qt\E ?\Qy\E ?\Qw\E ?\Qo\E ?\Qr\E ?\Qk\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qc\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qs\E ?\Qt\E ?\Qr\E ?\Qi\E ?\Qk\E ?\Qe\E ?\Qi\E ?\Qn\E ?\Qs\E ?\Qu\E ?\Qp\E ?\Qp\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qm\E ?\Qi\E ?\Qn\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qb\E ?\Qe\E ?\Qc\E ?\Qa\E ?\Qu\E ?\Qs\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qy\E ?\Qh\E ?\Qa\E ?\Qv\E ?\Qe\E ?\Qa\E ?\Qg\E ?\Qe\E ?\Qn\E ?\Qu\E ?\Qi\E ?\Qn\E ?\Qe\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qi\E ?\Qm\E ?\Qp\E ?\Qa\E ?\Qc\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qe\E ?\Qo\E ?\Qf\E ?\Qc\E ?\Qo\E ?\Qa\E ?\Ql\E ?\Qh\E ?\Qa\E ?\Qs\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qd\E ?\Qe\E ?\Qm\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Ql\E ?\Qe\E ?\Qc\E ?\Qt\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qi\E ?\Qt\E ?\Qy\E ?\Qs\E ?\Qe\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: but the new healthier breed of rabbit is proving no joke for farmers and rabbits are now beginning to take a big bite out of cereal profit margins in what is already promising to be a difficult year

Spans:
Span 31-32:  already => already
Span 13-14:  and => and
Span 17-18:  beginning => begin-01
Span 21-22:  big => big
Span 22-23:  bite => bite
Span 4-5:  breed => breed-01
Span 0-1:  but => contrast-01
Span 36-37:  difficult => difficult
Span 12-13:  farmers => (person :ARG0-of farm-01)
Span 10-11:  joke => joke-01
Span 27-28:  margins => margin
Span 2-3:  new => new
Span 9-10:  no => -
Span 16-17:  now => now
Span 26-27:  profit => profit-01
Span 32-33:  promising => promise-01
Span 8-9:  proving => prove-01
Span 37-38:  year => year

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),year,year,false), Span(36,37,List(1),difficult,difficult,false), Span(32,33,List(2),promising,promise-01,false), Span(31,32,List(3),already,already,false), Span(27,28,List(4),margins,margin,false), Span(26,27,List(5),profit,profit-01,false), Span(22,23,List(6),bite,bite,false), Span(21,22,List(7),big,big,false), Span(17,18,List(8),beginning,begin-01,false), Span(16,17,List(9),now,now,false), Span(13,14,List(10),and,and,false), Span(12,13,List(12, 11),farmers,(person :ARG0-of farm-01),false), Span(10,11,List(13),joke,joke-01,false), Span(9,10,List(14),no,-,false), Span(8,9,List(15),proving,prove-01,false), Span(4,5,List(16),breed,breed-01,false), Span(2,3,List(17),new,new,false), Span(0,1,List(18),but,contrast-01,false)),Map(2 -> promise-01, 5 -> profit-01, 12 -> farm-01, 15 -> prove-01, 8 -> begin-01, 18 -> contrast-01, 7 -> big, 17 -> new, 1 -> difficult, 4 -> margin, 11 -> person, 14 -> -, 6 -> bite, 0 -> year, 9 -> now, 16 -> breed-01, 3 -> already, 10 -> and, 13 -> joke-01),Map(b3 -> begin-01, n -> now, b -> bite, b2 -> big, p2 -> profit-01, j -> joke-01, d -> difficult, m -> margin, y -> year, p -> promise-01, a -> already, p4 -> prove-01, b4 -> breed-01, a2 -> and, - -> -, c -> contrast-01, f -> farm-01, p3 -> person, n2 -> new))),[Ljava.lang.String;@4e34206b,Annotation([Ljava.lang.String;@403c78e9,[Ljava.lang.String;@422629f1,[Ljava.lang.String;@578baf24),Annotation([Ljava.lang.String;@13979163,[Ljava.lang.String;@43ca04a1,[Ledu.cmu.lti.nlp.amr.Dependency;@3f608cc),Annotation([Ljava.lang.String;@dbb8b1c,[Ljava.lang.String;@13a9e24f,[Ljava.lang.String;@7648ba9e),Annotation([Ljava.lang.String;@20d417bd,[Ljava.lang.String;@44628a21,[Ledu.cmu.lti.nlp.amr.Entity;@215a9f9a))
AMR:
(a2 / and, op, b3 / begin-01)
(a2 / and, op, p3 / person)
(b / bite, mod, b2 / big)
(b3 / begin-01, ARG0, m / margin)
(b3 / begin-01, ARG1, b / bite)
(b3 / begin-01, time, n / now)
(b4 / breed-01, ARG1, p4 / prove-01)
(b4 / breed-01, mod, n2 / new)
(c / contrast-01, ARG2, b4 / breed-01)
(f / farm-01, ARG0, p3 / person)
(j / joke-01, polarity, - / -)
(m / margin, mod, p2 / profit-01)
(p / promise-01, ARG1, y / year)
(p / promise-01, time, a / already)
(p2 / profit-01, ARG1, p / promise-01)
(p4 / prove-01, ARG0, b / bite)
(p4 / prove-01, ARG1, j / joke-01)
(y / year, mod, d / difficult)

Decoded in 719,826 microseconds
Sentence: it has promised 90000 over three years towards running costs and installed dr roscoe howells as chairman

Spans:
Span 3-4:  90000 => 90000
Span 10-11:  and => and
Span 16-17:  chairman => (have-org-role-91 :ARG2 chairman)
Span 9-10:  costs => cost-01
Span 11-12:  installed => install-01
Span 0-1:  it => it
Span 2-3:  promised => promise-01
Span 5-6:  three => 3
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),chairman,(have-org-role-91 :ARG2 chairman),false), Span(11,12,List(2),installed,install-01,false), Span(10,11,List(3),and,and,false), Span(9,10,List(4),costs,cost-01,false), Span(6,7,List(6, 5),years,(temporal-quantity :unit year),false), Span(5,6,List(7),three,3,false), Span(3,4,List(8),90000,90000,false), Span(2,3,List(9),promised,promise-01,false), Span(0,1,List(10),it,it,false)),Map(2 -> install-01, 5 -> temporal-quantity, 8 -> 90000, 7 -> 3, 1 -> chairman, 4 -> cost-01, 6 -> year, 9 -> promise-01, 0 -> have-org-role-91, 10 -> it, 3 -> and),Map(h -> have-org-role-91, t -> temporal-quantity, p -> promise-01, y -> year, a -> and, i2 -> it, i -> install-01, c -> chairman, 9 -> 90000, 3 -> 3, c2 -> cost-01))),[Ljava.lang.String;@44a44891,Annotation([Ljava.lang.String;@7d984acb,[Ljava.lang.String;@195695d8,[Ljava.lang.String;@387a4e7),Annotation([Ljava.lang.String;@3e5b3b80,[Ljava.lang.String;@579f707b,[Ledu.cmu.lti.nlp.amr.Dependency;@2491c82e),Annotation([Ljava.lang.String;@5eed56c3,[Ljava.lang.String;@2fdb4ce5,[Ljava.lang.String;@669566ee),Annotation([Ljava.lang.String;@5a98c7df,[Ljava.lang.String;@646a2ff0,[Ledu.cmu.lti.nlp.amr.Entity;@77716910))
AMR:
(a / and, op, i / install-01)
(a / and, op, p / promise-01)
(c2 / cost-01, ARG1, i2 / it)
(h / have-org-role-91, ARG0, t / temporal-quantity)
(h / have-org-role-91, ARG1, 9 / 90000)
(h / have-org-role-91, ARG2, c / chairman)
(p / promise-01, ARG0, i2 / it)
(p / promise-01, ARG1, t / temporal-quantity)
(t / temporal-quantity, quant, 3 / 3)
(t / temporal-quantity, unit, y / year)

Decoded in 64,671 microseconds
Sentence: no i wont i promise

Spans:
Span 3-4:  i => i
Span 1-2:  i => i
Span 0-1:  no => -
Span 4-5:  promise => promise-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),promise,promise-01,false), Span(3,4,List(1),i,i,false), Span(1,2,List(2),i,i,false), Span(0,1,List(3),no,-,false)),Map(2 -> i, 1 -> i, 0 -> promise-01, 3 -> -),Map(p -> promise-01, i2 -> i, i -> i, - -> -))),[Ljava.lang.String;@36a8d6b3,Annotation([Ljava.lang.String;@6a79dce,[Ljava.lang.String;@666942cb,[Ljava.lang.String;@8a051f4),Annotation([Ljava.lang.String;@55646e98,[Ljava.lang.String;@3498e8f4,[Ledu.cmu.lti.nlp.amr.Dependency;@22e60626),Annotation([Ljava.lang.String;@2b9dbab0,[Ljava.lang.String;@4b8f2f,[Ljava.lang.String;@60a556cf),Annotation([Ljava.lang.String;@6e6619b,[Ljava.lang.String;@7f120aa6,[Ledu.cmu.lti.nlp.amr.Entity;@79795976))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, - / -)
(p / promise-01, ARG2, i2 / i)

Decoded in 49,386 microseconds
Sentence: hes going to have to hold down tremendous expectations and it wont be long before people ask whats democracy doing for me   mindful of the business leaders and the generals mr aylwin has repeatedly promised to build on the past maintaining an open and competitive economy with clear rules and stability

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = hes going to have to hold down tremendous expectations and it wont be long before people ask whats democracy doing for me   mindful of the business leaders and the generals mr aylwin has repeatedly promised to build on the past maintaining an open and competitive economy with clear rules and stability
myTokenized = hes going to have to hold down tremendous expectations and it wont be long before people ask whats democracy doing for me mindful of the business leaders and the generals mr aylwin has repeatedly promised to build on the past maintaining an open and competitive economy with clear rules and stability
i = 22
prefix = List(hes, going, to, have, to, hold, down, tremendous, expectations, and, it, wont, be, long, before, people, ask, whats, democracy, doing, for, me, mindful)
regexr = \Qh\E ?\Qe\E ?\Qs\E ?\Qg\E ?\Qo\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qt\E ?\Qo\E ?\Qh\E ?\Qa\E ?\Qv\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qh\E ?\Qo\E ?\Ql\E ?\Qd\E ?\Qd\E ?\Qo\E ?\Qw\E ?\Qn\E ?\Qt\E ?\Qr\E ?\Qe\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qd\E ?\Qo\E ?\Qu\E ?\Qs\E ?\Qe\E ?\Qx\E ?\Qp\E ?\Qe\E ?\Qc\E ?\Qt\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qs\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qi\E ?\Qt\E ?\Qw\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qb\E ?\Qe\E ?\Ql\E ?\Qo\E ?\Qn\E ?\Qg\E ?\Qb\E ?\Qe\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qp\E ?\Qe\E ?\Qo\E ?\Qp\E ?\Ql\E ?\Qe\E ?\Qa\E ?\Qs\E ?\Qk\E ?\Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qs\E ?\Qd\E ?\Qe\E ?\Qm\E ?\Qo\E ?\Qc\E ?\Qr\E ?\Qa\E ?\Qc\E ?\Qy\E ?\Qd\E ?\Qo\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qm\E ?\Qe\E ?\Qm\E ?\Qi\E ?\Qn\E ?\Qd\E ?\Qf\E ?\Qu\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the new state premier is wayne goss 38 a liberal lawyer who led the queensland labour party to its first victory in 32 years and promised a new society free from the corruption and political scandals which have afflicted queensland for almost a generation

NER Entity: (person :name (name :op "wayne" :op "goss"))
Spans:
Span 22-23:  32 => 32
Span 7-8:  38 => 38
Span 41-42:  almost => almost
Span 33-34:  and => and
Span 24-25:  and => and
Span 32-33:  corruption => corrupt-01
Span 29-30:  free => free-41
Span 43-44:  generation => generation
Span 15-16:  labour => labour
Span 10-11:  lawyer => lawyer
Span 12-13:  led => lead-02
Span 9-10:  liberal => liberal
Span 27-28:  new => new
Span 1-2:  new => new
Span 16-17:  party => party
Span 34-35:  political => politics
Span 3-4:  premier => premier
Span 25-26:  promised => promise-01
Span 28-29:  society => society
Span 2-3:  state => state
Span 5-7:  wayne goss => (person :name (name :op "wayne" :op "goss"))
Span 23-24:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),generation,generation,false), Span(41,42,List(1),almost,almost,false), Span(34,35,List(2),political,politics,false), Span(33,34,List(3),and,and,false), Span(32,33,List(4),corruption,corrupt-01,false), Span(29,30,List(5),free,free-41,false), Span(28,29,List(6),society,society,false), Span(27,28,List(7),new,new,false), Span(25,26,List(8),promised,promise-01,false), Span(24,25,List(9),and,and,false), Span(23,24,List(11, 10),years,(temporal-quantity :unit year),false), Span(22,23,List(12),32,32,false), Span(16,17,List(13),party,party,false), Span(15,16,List(14),labour,labour,false), Span(12,13,List(15),led,lead-02,false), Span(10,11,List(16),lawyer,lawyer,false), Span(9,10,List(17),liberal,liberal,false), Span(7,8,List(18),38,38,false), Span(5,7,List(22, 21, 20, 19),wayne goss,(person :name (name :op "wayne" :op "goss")),false), Span(3,4,List(23),premier,premier,false), Span(2,3,List(24),state,state,false), Span(1,2,List(25),new,new,false)),Map(2 -> politics, 5 -> free-41, 12 -> 32, 8 -> promise-01, 15 -> lead-02, 21 -> "wayne", 18 -> 38, 24 -> state, 7 -> new, 1 -> almost, 17 -> liberal, 23 -> premier, 4 -> corrupt-01, 11 -> year, 14 -> labour, 20 -> name, 6 -> society, 9 -> and, 0 -> generation, 22 -> "goss", 16 -> lawyer, 19 -> person, 10 -> temporal-quantity, 3 -> and, 25 -> new, 13 -> party),Map(n -> new, s2 -> state, p5 -> premier, t -> temporal-quantity, p2 -> promise-01, l3 -> lawyer, a3 -> and, s -> society, g -> generation, p -> politics, y -> year, n3 -> new, a -> almost, p4 -> person, 32 -> 38, l2 -> lead-02, a2 -> and, c -> corrupt-01, l -> labour, f -> free-41, p3 -> party, 3 -> 32, n2 -> name, l4 -> liberal))),[Ljava.lang.String;@5707e60e,Annotation([Ljava.lang.String;@4790cdc5,[Ljava.lang.String;@73b56537,[Ljava.lang.String;@a08393a),Annotation([Ljava.lang.String;@21e513fb,[Ljava.lang.String;@4682d51f,[Ledu.cmu.lti.nlp.amr.Dependency;@37760a63),Annotation([Ljava.lang.String;@26a40607,[Ljava.lang.String;@5a87c962,[Ljava.lang.String;@8b66f5d),Annotation([Ljava.lang.String;@1494723,[Ljava.lang.String;@71dd4b7d,[Ledu.cmu.lti.nlp.amr.Entity;@778735f1))
AMR:
(a2 / and, op, c / corrupt-01)
(a2 / and, op, p4 / person)
(a3 / and, op, l2 / lead-02)
(a3 / and, op, p2 / promise-01)
(f / free-41, ARG0, a / almost)
(f / free-41, ARG1, s / society)
(f / free-41, ARG2, c / corrupt-01)
(g / generation, mod, n / new)
(l2 / lead-02, ARG0, l3 / lawyer)
(l2 / lead-02, ARG1, p3 / party)
(l2 / lead-02, mod, p / politics)
(l3 / lawyer, mod, l4 / liberal)
(n2 / name, op, "goss")
(n2 / name, op, "wayne")
(p2 / promise-01, ARG0, t / temporal-quantity)
(p2 / promise-01, ARG2, s / society)
(p3 / party, mod, l / labour)
(p4 / person, domain, p5 / premier)
(p4 / person, name, n2 / name)
(p4 / person, time, 32 / 38)
(p5 / premier, mod, n3 / new)
(p5 / premier, mod, s2 / state)
(s / society, mod, n / new)
(t / temporal-quantity, quant, 3 / 32)
(t / temporal-quantity, unit, y / year)

Decoded in 1,707,032 microseconds
Sentence: he signed the despatch with his name and rank then handed it to blasendorf who promised it would be delivered as swiftly as his horses could cross country

Spans:
Span 7-8:  and => and
Span 25-26:  could => possible
Span 27-28:  country => country
Span 26-27:  cross => cross-02
Span 19-20:  delivered => deliver-01
Span 10-11:  handed => hand-02
Span 0-1:  he => he
Span 24-25:  horses => horse
Span 16-17:  it => it
Span 11-12:  it => it
Span 15-16:  promised => promise-01
Span 1-2:  signed => sign-02
Span 21-22:  swiftly => swift
Span 9-10:  then => then

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),country,country,false), Span(26,27,List(1),cross,cross-02,false), Span(25,26,List(2),could,possible,false), Span(24,25,List(3),horses,horse,false), Span(21,22,List(4),swiftly,swift,false), Span(19,20,List(5),delivered,deliver-01,false), Span(16,17,List(6),it,it,false), Span(15,16,List(7),promised,promise-01,false), Span(11,12,List(8),it,it,false), Span(10,11,List(9),handed,hand-02,false), Span(9,10,List(10),then,then,false), Span(7,8,List(11),and,and,false), Span(1,2,List(12),signed,sign-02,false), Span(0,1,List(13),he,he,false)),Map(2 -> possible, 5 -> deliver-01, 12 -> sign-02, 8 -> it, 7 -> promise-01, 1 -> cross-02, 4 -> swift, 11 -> and, 6 -> it, 0 -> country, 9 -> hand-02, 3 -> horse, 10 -> then, 13 -> he),Map(h -> horse, h2 -> hand-02, s2 -> sign-02, t -> then, p2 -> promise-01, s -> swift, d -> deliver-01, p -> possible, a -> and, i2 -> it, i -> it, h3 -> he, c -> country, c2 -> cross-02))),[Ljava.lang.String;@4de69e85,Annotation([Ljava.lang.String;@5fb155b7,[Ljava.lang.String;@73729275,[Ljava.lang.String;@66ed7a89),Annotation([Ljava.lang.String;@7107ed29,[Ljava.lang.String;@3f6358b8,[Ledu.cmu.lti.nlp.amr.Dependency;@1355b88b),Annotation([Ljava.lang.String;@60c6b797,[Ljava.lang.String;@163f4c24,[Ljava.lang.String;@159fdae5),Annotation([Ljava.lang.String;@31dbfb7a,[Ljava.lang.String;@615b2028,[Ledu.cmu.lti.nlp.amr.Entity;@259c5407))
AMR:
(a / and, op, s2 / sign-02)
(c2 / cross-02, ARG0, h / horse)
(c2 / cross-02, ARG1, c / country)
(d / deliver-01, ARG0, c / country)
(d / deliver-01, ARG1, i / it)
(d / deliver-01, mod, s / swift)
(h2 / hand-02, ARG0, h3 / he)
(h2 / hand-02, ARG1, i2 / it)
(h2 / hand-02, time, t / then)
(p / possible, domain, c2 / cross-02)
(p2 / promise-01, ARG0, h3 / he)
(p2 / promise-01, ARG1, d / deliver-01)
(s2 / sign-02, ARG0, h3 / he)

Decoded in 283,537 microseconds
Sentence: she also mounted a strong attack on the claws campaigners who had failed she claimed to deliver the petition they had promised to back their demand

Spans:
Span 1-2:  also => also
Span 5-6:  attack => attack-01
Span 23-24:  back => back
Span 9-10:  campaigners => (person :ARG0-of campaign-01)
Span 14-15:  claimed => claim-01
Span 8-9:  claws => claw
Span 16-17:  deliver => deliver-01
Span 25-26:  demand => demand-01
Span 12-13:  failed => fail-01
Span 18-19:  petition => petition-01
Span 21-22:  promised => promise-01
Span 13-14:  she => she
Span 0-1:  she => she
Span 4-5:  strong => strong
Span 19-20:  they => they

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),demand,demand-01,false), Span(23,24,List(1),back,back,false), Span(21,22,List(2),promised,promise-01,false), Span(19,20,List(3),they,they,false), Span(18,19,List(4),petition,petition-01,false), Span(16,17,List(5),deliver,deliver-01,false), Span(14,15,List(6),claimed,claim-01,false), Span(13,14,List(7),she,she,false), Span(12,13,List(8),failed,fail-01,false), Span(9,10,List(10, 9),campaigners,(person :ARG0-of campaign-01),false), Span(8,9,List(11),claws,claw,false), Span(5,6,List(12),attack,attack-01,false), Span(4,5,List(13),strong,strong,false), Span(1,2,List(14),also,also,false), Span(0,1,List(15),she,she,false)),Map(2 -> promise-01, 5 -> deliver-01, 12 -> attack-01, 15 -> she, 8 -> fail-01, 7 -> she, 1 -> back, 4 -> petition-01, 11 -> claw, 14 -> also, 6 -> claim-01, 0 -> demand-01, 9 -> person, 3 -> they, 10 -> campaign-01, 13 -> strong),Map(s2 -> strong, b -> back, t -> they, p2 -> petition-01, s -> she, d -> demand-01, p -> promise-01, c3 -> claw, a -> attack-01, d2 -> deliver-01, a2 -> also, s3 -> she, c -> claim-01, f -> fail-01, p3 -> person, c2 -> campaign-01))),[Ljava.lang.String;@fc925db,Annotation([Ljava.lang.String;@5ed454f5,[Ljava.lang.String;@4615d176,[Ljava.lang.String;@426abdec),Annotation([Ljava.lang.String;@6ddaf304,[Ljava.lang.String;@4188c3f4,[Ledu.cmu.lti.nlp.amr.Dependency;@79f8e9c8),Annotation([Ljava.lang.String;@44bc8807,[Ljava.lang.String;@3586a6d2,[Ljava.lang.String;@1b324072),Annotation([Ljava.lang.String;@250a51,[Ljava.lang.String;@7fc84be9,[Ledu.cmu.lti.nlp.amr.Entity;@36efef89))
AMR:
(a / attack-01, ARG0, s3 / she)
(a / attack-01, ARG1, p3 / person)
(a / attack-01, mod, a2 / also)
(a / attack-01, mod, s2 / strong)
(b / back, part, d / demand-01)
(c / claim-01, ARG1, d2 / deliver-01)
(c / claim-01, concession, f / fail-01)
(c2 / campaign-01, ARG0, p3 / person)
(d2 / deliver-01, ARG0, s / she)
(d2 / deliver-01, ARG1, p2 / petition-01)
(f / fail-01, ARG1, p3 / person)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, p2 / petition-01)
(p / promise-01, ARG2, b / back)
(p3 / person, mod, c3 / claw)

Decoded in 582,590 microseconds
Sentence: mr lee chinghua secretarygeneral of taiwans olympic committee said on monday his mainland counterpart had sent a cable promising early release for mr huang because we cherish the easing of tension and have fully considered the wishes of taiwans leaders

Spans:
Span 31-32:  and => and
Span 24-25:  because => cause-01
Span 17-18:  cable => cable
Span 7-8:  committee => committee
Span 34-35:  considered => consider-01
Span 13-14:  counterpart => country
Span 19-20:  early => early
Span 33-34:  fully => full
Span 39-40:  leaders => (person :ARG0-of lead-02)
Span 12-13:  mainland => mainland
Span 18-19:  promising => promise-01
Span 20-21:  release => release-01
Span 8-9:  said => say-01
Span 15-16:  sent => send-01
Span 30-31:  tension => tension
Span 25-26:  we => we
Span 36-37:  wishes => wish-01

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(1, 0),leaders,(person :ARG0-of lead-02),false), Span(36,37,List(2),wishes,wish-01,false), Span(34,35,List(3),considered,consider-01,false), Span(33,34,List(4),fully,full,false), Span(31,32,List(5),and,and,false), Span(30,31,List(6),tension,tension,false), Span(25,26,List(7),we,we,false), Span(24,25,List(8),because,cause-01,false), Span(20,21,List(9),release,release-01,false), Span(19,20,List(10),early,early,false), Span(18,19,List(11),promising,promise-01,false), Span(17,18,List(12),cable,cable,false), Span(15,16,List(13),sent,send-01,false), Span(13,14,List(14),counterpart,country,false), Span(12,13,List(15),mainland,mainland,false), Span(8,9,List(16),said,say-01,false), Span(7,8,List(17),committee,committee,false)),Map(2 -> wish-01, 5 -> and, 12 -> cable, 15 -> mainland, 8 -> cause-01, 7 -> we, 17 -> committee, 1 -> lead-02, 4 -> full, 11 -> promise-01, 14 -> country, 6 -> tension, 0 -> person, 9 -> release-01, 16 -> say-01, 3 -> consider-01, 10 -> early, 13 -> send-01),Map(e -> early, w -> wish-01, s2 -> say-01, t -> tension, p2 -> promise-01, c4 -> country, s -> send-01, m -> mainland, p -> person, a -> and, c3 -> cable, w2 -> we, r -> release-01, c -> consider-01, l -> lead-02, f -> full, c2 -> cause-01, c5 -> committee))),[Ljava.lang.String;@67e57a5a,Annotation([Ljava.lang.String;@ac3e000,[Ljava.lang.String;@41a72585,[Ljava.lang.String;@4490606f),Annotation([Ljava.lang.String;@62ab3a93,[Ljava.lang.String;@5792bb80,[Ledu.cmu.lti.nlp.amr.Dependency;@6253fd6a),Annotation([Ljava.lang.String;@78226c94,[Ljava.lang.String;@1c06a62a,[Ljava.lang.String;@78871dc5),Annotation([Ljava.lang.String;@6eb3ae54,[Ljava.lang.String;@567a4593,[Ledu.cmu.lti.nlp.amr.Entity;@756de23f))
AMR:
(a / and, op, c / consider-01)
(c / consider-01, ARG0, w2 / we)
(c / consider-01, ARG1, w / wish-01)
(c / consider-01, degree, f / full)
(c2 / cause-01, ARG0, a / and)
(c2 / cause-01, ARG1, c5 / committee)
(c4 / country, mod, m / mainland)
(l / lead-02, ARG0, p / person)
(p2 / promise-01, ARG1, r / release-01)
(r / release-01, ARG1, p / person)
(r / release-01, time, e / early)
(s / send-01, ARG0, c4 / country)
(s / send-01, ARG1, r / release-01)
(s / send-01, ARG2, c3 / cable)
(s2 / say-01, ARG0, t / tension)
(s2 / say-01, ARG1, s / send-01)
(w / wish-01, ARG0, p / person)

Decoded in 1,050,582 microseconds
Sentence: yesterday the miners in prokopyevsk were promised an increase in food supplies by 20 to 30 per cent longer vacations and more soap and washing powder

NER Entity: (country :name (name :op "prokopyevsk"))
Spans:
Span 13-14:  20 => 20
Span 15-16:  30 => 30
Span 23-24:  and => and
Span 20-21:  and => and
Span 17-18:  cent => (monetary-quantity :unit cent)
Span 10-11:  food => food
Span 8-9:  increase => increase-01
Span 18-19:  longer => long
Span 2-3:  miners => (person :ARG0-of mine-01)
Span 25-26:  powder => powder-01
Span 6-7:  promised => promise-01
Span 22-23:  soap => soap
Span 11-12:  supplies => supply-01
Span 24-25:  washing => wash-01
Span 0-1:  yesterday => yesterday

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),powder,powder-01,false), Span(24,25,List(1),washing,wash-01,false), Span(23,24,List(2),and,and,false), Span(22,23,List(3),soap,soap,false), Span(20,21,List(4),and,and,false), Span(18,19,List(5),longer,long,false), Span(17,18,List(7, 6),cent,(monetary-quantity :unit cent),false), Span(15,16,List(8),30,30,false), Span(13,14,List(9),20,20,false), Span(11,12,List(10),supplies,supply-01,false), Span(10,11,List(11),food,food,false), Span(8,9,List(12),increase,increase-01,false), Span(6,7,List(13),promised,promise-01,false), Span(2,3,List(15, 14),miners,(person :ARG0-of mine-01),false), Span(0,1,List(16),yesterday,yesterday,false)),Map(2 -> and, 5 -> long, 12 -> increase-01, 15 -> mine-01, 8 -> 30, 7 -> cent, 1 -> wash-01, 4 -> and, 11 -> food, 14 -> person, 6 -> monetary-quantity, 0 -> powder-01, 9 -> 20, 16 -> yesterday, 3 -> soap, 10 -> supply-01, 13 -> promise-01),Map(w -> wash-01, 2 -> 20, s2 -> supply-01, m2 -> mine-01, p2 -> promise-01, s -> soap, m -> monetary-quantity, y -> yesterday, p -> powder-01, a -> and, a2 -> and, i -> increase-01, c -> cent, l -> long, f -> food, p3 -> person, 3 -> 30))),[Ljava.lang.String;@11eb06c3,Annotation([Ljava.lang.String;@5d08f565,[Ljava.lang.String;@7726e99a,[Ljava.lang.String;@1bb2ba93),Annotation([Ljava.lang.String;@72f71719,[Ljava.lang.String;@3c0da546,[Ledu.cmu.lti.nlp.amr.Dependency;@23ddb577),Annotation([Ljava.lang.String;@30b4aa06,[Ljava.lang.String;@250688e5,[Ljava.lang.String;@50058560),Annotation([Ljava.lang.String;@1a778aab,[Ljava.lang.String;@1e30ee20,[Ledu.cmu.lti.nlp.amr.Entity;@1e61865c))
AMR:
(a / and, op, p / powder-01)
(a / and, op, s / soap)
(a2 / and, op, p2 / promise-01)
(a2 / and, op, s / soap)
(i / increase-01, ARG1, s2 / supply-01)
(i / increase-01, ARG3, m / monetary-quantity)
(m / monetary-quantity, unit, c / cent)
(m2 / mine-01, ARG0, p3 / person)
(p / powder-01, ARG0, 3 / 30)
(p / powder-01, ARG1, w / wash-01)
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, ARG1, i / increase-01)
(p2 / promise-01, time, y / yesterday)
(s / soap, degree, l / long)
(s2 / supply-01, ARG1, f / food)
(w / wash-01, ARG1, 2 / 20)

Decoded in 440,065 microseconds
Sentence: noise baffles have been promised but their success elsewhere is still a debatable matter

Spans:
Span 1-2:  baffles => baffle-01
Span 5-6:  but => contrast-01
Span 8-9:  elsewhere => elsewhere
Span 13-14:  matter => matter
Span 0-1:  noise => noise
Span 4-5:  promised => promise-01
Span 10-11:  still => still
Span 7-8:  success => succeed-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),matter,matter,false), Span(10,11,List(1),still,still,false), Span(8,9,List(2),elsewhere,elsewhere,false), Span(7,8,List(3),success,succeed-01,false), Span(5,6,List(4),but,contrast-01,false), Span(4,5,List(5),promised,promise-01,false), Span(1,2,List(6),baffles,baffle-01,false), Span(0,1,List(7),noise,noise,false)),Map(2 -> elsewhere, 5 -> promise-01, 7 -> noise, 1 -> still, 4 -> contrast-01, 6 -> baffle-01, 0 -> matter, 3 -> succeed-01),Map(n -> noise, e -> elsewhere, b -> baffle-01, s2 -> succeed-01, s -> still, m -> matter, p -> promise-01, c -> contrast-01))),[Ljava.lang.String;@14bc1199,Annotation([Ljava.lang.String;@47275e71,[Ljava.lang.String;@69a97135,[Ljava.lang.String;@734784c4),Annotation([Ljava.lang.String;@5c5d9afc,[Ljava.lang.String;@56a45c4,[Ledu.cmu.lti.nlp.amr.Dependency;@40a49a3),Annotation([Ljava.lang.String;@3f686e67,[Ljava.lang.String;@61284cb6,[Ljava.lang.String;@1cc4728f),Annotation([Ljava.lang.String;@253d190a,[Ljava.lang.String;@4e36f29f,[Ledu.cmu.lti.nlp.amr.Entity;@7972ccd6))
AMR:
(b / baffle-01, ARG1, n / noise)
(c / contrast-01, ARG1, m / matter)
(c / contrast-01, ARG2, s2 / succeed-01)
(c / contrast-01, ARG4, p / promise-01)
(e / elsewhere, condition, c / contrast-01)
(m / matter, mod, s / still)
(p / promise-01, ARG1, b / baffle-01)

Decoded in 122,583 microseconds
Sentence: men who had promised so much and could not now deliver the goods just like her father five years before

Spans:
Span 6-7:  and => and
Span 19-20:  before => before
Span 7-8:  could => possible
Span 10-11:  deliver => deliver-01
Span 16-17:  father => (have-rel-role-91 :ARG2 father)
Span 17-18:  five => 5
Span 12-13:  goods => good
Span 13-14:  just => just
Span 0-1:  men => man
Span 5-6:  much => much
Span 9-10:  now => now
Span 3-4:  promised => promise-01
Span 4-5:  so => so
Span 18-19:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),before,before,false), Span(18,19,List(2, 1),years,(temporal-quantity :unit year),false), Span(17,18,List(3),five,5,false), Span(16,17,List(5, 4),father,(have-rel-role-91 :ARG2 father),false), Span(13,14,List(6),just,just,false), Span(12,13,List(7),goods,good,false), Span(10,11,List(8),deliver,deliver-01,false), Span(9,10,List(9),now,now,false), Span(7,8,List(10),could,possible,false), Span(6,7,List(11),and,and,false), Span(5,6,List(12),much,much,false), Span(4,5,List(13),so,so,false), Span(3,4,List(14),promised,promise-01,false), Span(0,1,List(15),men,man,false)),Map(2 -> year, 5 -> father, 12 -> much, 15 -> man, 8 -> deliver-01, 7 -> good, 1 -> temporal-quantity, 4 -> have-rel-role-91, 11 -> and, 14 -> promise-01, 6 -> just, 0 -> before, 9 -> now, 3 -> 5, 10 -> possible, 13 -> so),Map(n -> now, h -> have-rel-role-91, 5 -> 5, b -> before, t -> temporal-quantity, m2 -> man, p2 -> promise-01, j -> just, s -> so, d -> deliver-01, m -> much, y -> year, g -> good, p -> possible, a -> and, f -> father))),[Ljava.lang.String;@5fe633e4,Annotation([Ljava.lang.String;@258eeec,[Ljava.lang.String;@1cadc928,[Ljava.lang.String;@55716fcd),Annotation([Ljava.lang.String;@a63278e,[Ljava.lang.String;@73b9e0f5,[Ledu.cmu.lti.nlp.amr.Dependency;@3060302e),Annotation([Ljava.lang.String;@7afb34d1,[Ljava.lang.String;@248c46b,[Ljava.lang.String;@77574df8),Annotation([Ljava.lang.String;@4c011fe,[Ljava.lang.String;@5ddd3d21,[Ledu.cmu.lti.nlp.amr.Entity;@67d871ab))
AMR:
(a / and, op, p / possible)
(a / and, op, p2 / promise-01)
(d / deliver-01, ARG1, g / good)
(d / deliver-01, ARG2, h / have-rel-role-91)
(d / deliver-01, mod, j / just)
(d / deliver-01, mod, p / possible)
(h / have-rel-role-91, ARG0, b / before)
(h / have-rel-role-91, ARG2, f / father)
(m / much, degree, s / so)
(p / possible, time, n / now)
(p2 / promise-01, ARG0, 5 / 5)
(p2 / promise-01, ARG1, m2 / man)
(p2 / promise-01, mod, m / much)
(t / temporal-quantity, quant, 5 / 5)
(t / temporal-quantity, unit, y / year)

Decoded in 170,893 microseconds
Sentence: and she had promised that tomorrow she would tell her detective that the man at butlers was not john gower and she would send him to search elsewhere

NER Entity: (person :name (name :op "john" :op "gower"))
Spans:
Span 20-21:  and => and
Span 0-1:  and => and
Span 10-11:  detective => detective
Span 27-28:  elsewhere => elsewhere
Span 18-20:  john gower => (person :name (name :op "john" :op "gower"))
Span 13-14:  man => man
Span 3-4:  promised => promise-01
Span 26-27:  search => search-01
Span 23-24:  send => send-01
Span 21-22:  she => she
Span 6-7:  she => she
Span 1-2:  she => she
Span 8-9:  tell => tell-01
Span 5-6:  tomorrow => tomorrow

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),elsewhere,elsewhere,false), Span(26,27,List(1),search,search-01,false), Span(23,24,List(2),send,send-01,false), Span(21,22,List(3),she,she,false), Span(20,21,List(4),and,and,false), Span(18,20,List(8, 7, 6, 5),john gower,(person :name (name :op "john" :op "gower")),false), Span(13,14,List(9),man,man,false), Span(10,11,List(10),detective,detective,false), Span(8,9,List(11),tell,tell-01,false), Span(6,7,List(12),she,she,false), Span(5,6,List(13),tomorrow,tomorrow,false), Span(3,4,List(14),promised,promise-01,false), Span(1,2,List(15),she,she,false), Span(0,1,List(16),and,and,false)),Map(2 -> send-01, 5 -> person, 12 -> she, 15 -> she, 8 -> "gower", 7 -> "john", 1 -> search-01, 4 -> and, 11 -> tell-01, 14 -> promise-01, 6 -> name, 0 -> elsewhere, 9 -> man, 16 -> and, 3 -> she, 10 -> detective, 13 -> tomorrow),Map(s5 -> she, e -> elsewhere, n -> name, s2 -> send-01, t -> tell-01, p2 -> promise-01, s -> search-01, s4 -> she, m -> man, d -> detective, p -> person, a -> and, t2 -> tomorrow, a2 -> and, s3 -> she))),[Ljava.lang.String;@330ec6d0,Annotation([Ljava.lang.String;@f1e9be0,[Ljava.lang.String;@228b96e1,[Ljava.lang.String;@7a5e9f7e),Annotation([Ljava.lang.String;@5a3947f5,[Ljava.lang.String;@66a35419,[Ledu.cmu.lti.nlp.amr.Dependency;@6ce669f3),Annotation([Ljava.lang.String;@b360860,[Ljava.lang.String;@85fdc60,[Ljava.lang.String;@4d7d26eb),Annotation([Ljava.lang.String;@5386360b,[Ljava.lang.String;@10463704,[Ledu.cmu.lti.nlp.amr.Entity;@71c5eff4))
AMR:
(a / and, op, p / person)
(a / and, op, s2 / send-01)
(a2 / and, op, m / man)
(a2 / and, op, p2 / promise-01)
(a2 / and, op, t / tell-01)
(n / name, op, "gower")
(n / name, op, "john")
(p / person, name, n / name)
(p2 / promise-01, ARG0, s5 / she)
(s / search-01, ARG0, s4 / she)
(s / search-01, ARG1, e / elsewhere)
(s2 / send-01, ARG0, s3 / she)
(s2 / send-01, ARG2, s / search-01)
(t / tell-01, ARG0, s4 / she)
(t / tell-01, ARG1, d / detective)
(t / tell-01, time, t2 / tomorrow)

Decoded in 323,940 microseconds
Sentence: in puritania religion had been the stuff of cant of laws of promised punishments for behaviour which the pilgrims inner conscience could not condemn, which he had glimpsed through a hole in the wall and which promised all the things which lewis and greeves had come to label it or joy

Spans:
Span 38-39:  all => all
Span 43-44:  and => and
Span 35-36:  and => and
Span 15-16:  behaviour => behave-01
Span 23-24:  condemn => condemn-01
Span 20-21:  conscience => conscience
Span 21-22:  could => possible
Span 26-27:  he => he
Span 31-32:  hole => hole
Span 19-20:  inner => inner
Span 49-50:  it => it
Span 51-52:  joy => joy
Span 48-49:  label => label
Span 10-11:  laws => law
Span 50-51:  or => or
Span 37-38:  promised => promise-01
Span 12-13:  promised => promise-01
Span 13-14:  punishments => punish-01
Span 2-3:  religion => religion
Span 6-7:  stuff => stuff
Span 40-41:  things => thing
Span 34-35:  wall => wall

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),joy,joy,false), Span(50,51,List(1),or,or,false), Span(49,50,List(2),it,it,false), Span(48,49,List(3),label,label,false), Span(43,44,List(4),and,and,false), Span(40,41,List(5),things,thing,false), Span(38,39,List(6),all,all,false), Span(37,38,List(7),promised,promise-01,false), Span(35,36,List(8),and,and,false), Span(34,35,List(9),wall,wall,false), Span(31,32,List(10),hole,hole,false), Span(26,27,List(11),he,he,false), Span(23,24,List(12),condemn,condemn-01,false), Span(21,22,List(13),could,possible,false), Span(20,21,List(14),conscience,conscience,false), Span(19,20,List(15),inner,inner,false), Span(15,16,List(16),behaviour,behave-01,false), Span(13,14,List(17),punishments,punish-01,false), Span(12,13,List(18),promised,promise-01,false), Span(10,11,List(19),laws,law,false), Span(6,7,List(20),stuff,stuff,false), Span(2,3,List(21),religion,religion,false)),Map(2 -> it, 5 -> thing, 12 -> condemn-01, 15 -> inner, 8 -> and, 21 -> religion, 18 -> promise-01, 7 -> promise-01, 17 -> punish-01, 1 -> or, 4 -> and, 11 -> he, 14 -> conscience, 20 -> stuff, 6 -> all, 0 -> joy, 9 -> wall, 16 -> behave-01, 19 -> law, 3 -> label, 10 -> hole, 13 -> possible),Map(w -> wall, h -> hole, h2 -> he, b -> behave-01, t -> thing, p2 -> possible, j -> joy, a3 -> and, s -> stuff, p -> promise-01, a -> and, p4 -> promise-01, i2 -> inner, l2 -> law, r -> religion, i -> it, a2 -> all, c -> condemn-01, l -> label, o -> or, p3 -> punish-01, c2 -> conscience))),[Ljava.lang.String;@7a0cb686,Annotation([Ljava.lang.String;@58a35603,[Ljava.lang.String;@4b640c6b,[Ljava.lang.String;@156b6b78),Annotation([Ljava.lang.String;@3f5c9e44,[Ljava.lang.String;@599aa2db,[Ledu.cmu.lti.nlp.amr.Dependency;@373a05d2),Annotation([Ljava.lang.String;@42543a51,[Ljava.lang.String;@27c0bddc,[Ljava.lang.String;@5ef0cae7),Annotation([Ljava.lang.String;@12993463,[Ljava.lang.String;@83e591f,[Ledu.cmu.lti.nlp.amr.Entity;@354d0673))
AMR:
(a / and, op, l / label)
(a3 / and, op, c / condemn-01)
(a3 / and, op, h / hole)
(a3 / and, op, p / promise-01)
(a3 / and, op, w / wall)
(b / behave-01, ARG0, s / stuff)
(c / condemn-01, ARG0, h2 / he)
(c / condemn-01, ARG1, r / religion)
(c2 / conscience, mod, i2 / inner)
(l / label, degree, i / it)
(l / label, quant, a2 / all)
(l2 / law, topic, p3 / punish-01)
(o / or, op, j / joy)
(o / or, op, t / thing)
(p / promise-01, ARG0, c2 / conscience)
(p2 / possible, domain, c / condemn-01)
(p3 / punish-01, ARG1, b / behave-01)
(p4 / promise-01, ARG0, h2 / he)
(p4 / promise-01, ARG1, p3 / punish-01)
(t / thing, domain, a2 / all)
(t / thing, domain, a3 / and)

Decoded in 335,983 microseconds
Sentence: mr de klerk also promised that legislative amendments would be tabled at the beginning of the next session of parliament next year

Spans:
Span 3-4:  also => also
Span 7-8:  amendments => amend-01
Span 13-14:  beginning => begin-01
Span 6-7:  legislative => legislate-01
Span 20-21:  next => next
Span 16-17:  next => next
Span 19-20:  parliament => (government-organization :name (name :op "Parliament"))
Span 4-5:  promised => promise-01
Span 17-18:  session => session
Span 21-22:  year => year

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),year,year,false), Span(20,21,List(1),next,next,false), Span(19,20,List(4, 3, 2),parliament,(government-organization :name (name :op "Parliament")),false), Span(17,18,List(5),session,session,false), Span(16,17,List(6),next,next,false), Span(13,14,List(7),beginning,begin-01,false), Span(7,8,List(8),amendments,amend-01,false), Span(6,7,List(9),legislative,legislate-01,false), Span(4,5,List(10),promised,promise-01,false), Span(3,4,List(11),also,also,false)),Map(2 -> government-organization, 5 -> session, 8 -> amend-01, 7 -> begin-01, 1 -> next, 11 -> also, 4 -> "Parliament", 6 -> next, 9 -> legislate-01, 0 -> year, 10 -> promise-01, 3 -> name),Map(n -> next, b -> begin-01, s -> session, p -> promise-01, g -> government-organization, y -> year, a -> amend-01, n3 -> next, a2 -> also, l -> legislate-01, n2 -> name))),[Ljava.lang.String;@10b1bdc6,Annotation([Ljava.lang.String;@5221aba,[Ljava.lang.String;@208abf8,[Ljava.lang.String;@75227d3),Annotation([Ljava.lang.String;@22b49166,[Ljava.lang.String;@7cb5d156,[Ledu.cmu.lti.nlp.amr.Dependency;@4c2a511),Annotation([Ljava.lang.String;@6e30188,[Ljava.lang.String;@21798b40,[Ljava.lang.String;@32a527eb),Annotation([Ljava.lang.String;@78dfcf46,[Ljava.lang.String;@2da13aa9,[Ledu.cmu.lti.nlp.amr.Entity;@341244a6))
AMR:
(b / begin-01, ARG0, a / amend-01)
(b / begin-01, ARG1, s / session)
(b / begin-01, time, y / year)
(g / government-organization, name, n2 / name)
(l / legislate-01, ARG0, a / amend-01)
(n2 / name, op, "Parliament")
(p / promise-01, ARG1, a / amend-01)
(p / promise-01, mod, a2 / also)
(s / session, mod, n3 / next)
(s / session, poss, g / government-organization)
(y / year, mod, n / next)

Decoded in 123,273 microseconds
Sentence: a voice from the landing above said sister marrow i did promise ellip

Spans:
Span 5-6:  above => above
Span 9-10:  i => i
Span 4-5:  landing => land-01
Span 11-12:  promise => promise-01
Span 6-7:  said => say-01
Span 7-8:  sister => (have-rel-role-91 :ARG2 sister)
Span 1-2:  voice => voice

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promise,promise-01,false), Span(9,10,List(1),i,i,false), Span(7,8,List(3, 2),sister,(have-rel-role-91 :ARG2 sister),false), Span(6,7,List(4),said,say-01,false), Span(5,6,List(5),above,above,false), Span(4,5,List(6),landing,land-01,false), Span(1,2,List(7),voice,voice,false)),Map(2 -> have-rel-role-91, 5 -> above, 7 -> voice, 1 -> i, 4 -> say-01, 6 -> land-01, 0 -> promise-01, 3 -> sister),Map(h -> have-rel-role-91, s2 -> say-01, s -> sister, v -> voice, p -> promise-01, a -> above, i -> i, l -> land-01))),[Ljava.lang.String;@1b5908ff,Annotation([Ljava.lang.String;@725dab5f,[Ljava.lang.String;@639e24a1,[Ljava.lang.String;@2376f91f),Annotation([Ljava.lang.String;@57dd7469,[Ljava.lang.String;@c05c690,[Ledu.cmu.lti.nlp.amr.Dependency;@4f2f1e1a),Annotation([Ljava.lang.String;@1e616593,[Ljava.lang.String;@c53a57a,[Ljava.lang.String;@4794f2e8),Annotation([Ljava.lang.String;@3d7820f,[Ljava.lang.String;@399ba8c1,[Ledu.cmu.lti.nlp.amr.Entity;@1a643473))
AMR:
(h / have-rel-role-91, ARG0, l / land-01)
(h / have-rel-role-91, ARG2, s / sister)
(p / promise-01, ARG0, i / i)
(s2 / say-01, ARG0, i / i)
(s2 / say-01, ARG1, l / land-01)
(s2 / say-01, mod, a / above)
(v / voice, poss, l / land-01)

Decoded in 26,568 microseconds
Sentence:   just to round the day off the mayor of los angeles norris poulson told khrushchev at the banquet in his honour that he was wellknown to americans as the man who had promised to bury them

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   just to round the day off the mayor of los angeles norris poulson told khrushchev at the banquet in his honour that he was wellknown to americans as the man who had promised to bury them
myTokenized = just to round the day off the mayor of los angeles norris poulson told khrushchev at the banquet in his honour that he was wellknown to americans as the man who had promised to bury them
i = 0
prefix = List(just)
regexr = \Qj\E ?\Qu\E ?\Qs\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: weeping piteously ensnarled in the sheets hedda promised to return as soon as she knew that her father was safe

Spans:
Span 17-18:  father => (have-rel-role-91 :ARG2 father)
Span 14-15:  knew => know-01
Span 7-8:  promised => promise-01
Span 19-20:  safe => safe-41
Span 13-14:  she => she
Span 5-6:  sheets => sheet
Span 11-12:  soon => soon
Span 0-1:  weeping => weep-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),safe,safe-41,false), Span(17,18,List(2, 1),father,(have-rel-role-91 :ARG2 father),false), Span(14,15,List(3),knew,know-01,false), Span(13,14,List(4),she,she,false), Span(11,12,List(5),soon,soon,false), Span(7,8,List(6),promised,promise-01,false), Span(5,6,List(7),sheets,sheet,false), Span(0,1,List(8),weeping,weep-01,false)),Map(2 -> father, 5 -> soon, 8 -> weep-01, 7 -> sheet, 1 -> have-rel-role-91, 4 -> she, 6 -> promise-01, 0 -> safe-41, 3 -> know-01),Map(w -> weep-01, h -> have-rel-role-91, s2 -> she, k -> know-01, s -> safe-41, s4 -> sheet, p -> promise-01, s3 -> soon, f -> father))),[Ljava.lang.String;@17d22080,Annotation([Ljava.lang.String;@6453bfb7,[Ljava.lang.String;@364fbad6,[Ljava.lang.String;@2c735375),Annotation([Ljava.lang.String;@476c3d1f,[Ljava.lang.String;@1320e2db,[Ledu.cmu.lti.nlp.amr.Dependency;@540da1ac),Annotation([Ljava.lang.String;@4af14e50,[Ljava.lang.String;@284c8ca0,[Ljava.lang.String;@39a4710b),Annotation([Ljava.lang.String;@5af9a6bd,[Ljava.lang.String;@3c31f0f4,[Ledu.cmu.lti.nlp.amr.Entity;@72c2420b))
AMR:
(h / have-rel-role-91, ARG2, f / father)
(k / know-01, ARG0, s2 / she)
(k / know-01, ARG1, s / safe-41)
(p / promise-01, ARG1, w / weep-01)
(p / promise-01, time, s3 / soon)
(s / safe-41, ARG1, h / have-rel-role-91)
(s3 / soon, concession, s / safe-41)
(w / weep-01, ARG1, s4 / sheet)

Decoded in 56,564 microseconds
Sentence: you sip your tea gratefully and leave promising to return when you have more time more money and a new found interest in carpets

Spans:
Span 17-18:  and => and
Span 5-6:  and => and
Span 23-24:  carpets => carpet
Span 20-21:  found => find-01
Span 4-5:  gratefully => grateful
Span 21-22:  interest => interest-01
Span 6-7:  leave => leave-01
Span 16-17:  money => money
Span 19-20:  new => new
Span 7-8:  promising => promise-01
Span 3-4:  tea => tea
Span 14-15:  time => time
Span 11-12:  you => you
Span 0-1:  you => you

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),carpets,carpet,false), Span(21,22,List(1),interest,interest-01,false), Span(20,21,List(2),found,find-01,false), Span(19,20,List(3),new,new,false), Span(17,18,List(4),and,and,false), Span(16,17,List(5),money,money,false), Span(14,15,List(6),time,time,false), Span(11,12,List(7),you,you,false), Span(7,8,List(8),promising,promise-01,false), Span(6,7,List(9),leave,leave-01,false), Span(5,6,List(10),and,and,false), Span(4,5,List(11),gratefully,grateful,false), Span(3,4,List(12),tea,tea,false), Span(0,1,List(13),you,you,false)),Map(2 -> find-01, 5 -> money, 12 -> tea, 8 -> promise-01, 7 -> you, 1 -> interest-01, 4 -> and, 11 -> grateful, 6 -> time, 0 -> carpet, 9 -> leave-01, 3 -> new, 10 -> and, 13 -> you),Map(n -> new, t -> time, m -> money, y -> you, p -> promise-01, g -> grateful, a -> and, t2 -> tea, i -> interest-01, a2 -> and, c -> carpet, l -> leave-01, f -> find-01, y2 -> you))),[Ljava.lang.String;@2f7e1b09,Annotation([Ljava.lang.String;@21043b,[Ljava.lang.String;@779cbd8d,[Ljava.lang.String;@5360b154),Annotation([Ljava.lang.String;@711a2c8f,[Ljava.lang.String;@6d639a4b,[Ledu.cmu.lti.nlp.amr.Dependency;@2626ea08),Annotation([Ljava.lang.String;@44cec6c9,[Ljava.lang.String;@635cd969,[Ljava.lang.String;@64c5af75),Annotation([Ljava.lang.String;@6e825e02,[Ljava.lang.String;@30ea0dfc,[Ledu.cmu.lti.nlp.amr.Entity;@563c347a))
AMR:
(a / and, op, m / money)
(a / and, op, n / new)
(a2 / and, op, l / leave-01)
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, i / interest-01)
(f / find-01, time, t / time)
(g / grateful, poss, y2 / you)
(i / interest-01, ARG1, a / and)
(i / interest-01, ARG2, c / carpet)
(l / leave-01, ARG0, y2 / you)
(l / leave-01, ARG1, y / you)
(l / leave-01, purpose, p / promise-01)
(t2 / tea, poss, y2 / you)

Decoded in 520,813 microseconds
Sentence: the prime minister promising an allparty conference said he wanted to move fast towards a solution

Spans:
Span 6-7:  conference => conference
Span 12-13:  fast => fast
Span 8-9:  he => he
Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Span 1-2:  prime => prime
Span 3-4:  promising => promise-01
Span 7-8:  said => say-01
Span 15-16:  solution => solution
Span 9-10:  wanted => want-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),solution,solution,false), Span(12,13,List(1),fast,fast,false), Span(9,10,List(2),wanted,want-01,false), Span(8,9,List(3),he,he,false), Span(7,8,List(4),said,say-01,false), Span(6,7,List(5),conference,conference,false), Span(3,4,List(6),promising,promise-01,false), Span(2,3,List(8, 7),minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(9),prime,prime,false)),Map(2 -> want-01, 5 -> conference, 8 -> minister, 7 -> have-org-role-91, 1 -> fast, 4 -> say-01, 6 -> promise-01, 9 -> prime, 0 -> solution, 3 -> he),Map(w -> want-01, h -> he, h2 -> have-org-role-91, s2 -> say-01, p2 -> prime, s -> solution, m -> minister, p -> promise-01, c -> conference, f -> fast))),[Ljava.lang.String;@a9961d1,Annotation([Ljava.lang.String;@5be4e5c6,[Ljava.lang.String;@10a9594c,[Ljava.lang.String;@5e25951f),Annotation([Ljava.lang.String;@75615682,[Ljava.lang.String;@4976ad02,[Ledu.cmu.lti.nlp.amr.Dependency;@e5883fc),Annotation([Ljava.lang.String;@55411cbf,[Ljava.lang.String;@25c66b53,[Ljava.lang.String;@5b02985),Annotation([Ljava.lang.String;@7075ddad,[Ljava.lang.String;@4a2cc289,[Ledu.cmu.lti.nlp.amr.Entity;@4097d66a))
AMR:
(h2 / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(p / promise-01, ARG1, m / minister)
(p / promise-01, ARG2, c / conference)
(s / solution, poss, h / he)
(s2 / say-01, ARG0, c / conference)
(s2 / say-01, ARG1, w / want-01)
(w / want-01, ARG0, h / he)
(w / want-01, ARG1, f / fast)

Decoded in 166,547 microseconds
Sentence: early reliability figures however are promising

Spans:
Span 0-1:  early => early
Span 2-3:  figures => figure
Span 5-6:  promising => promise-01
Span 1-2:  reliability => reliable

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),promising,promise-01,false), Span(2,3,List(1),figures,figure,false), Span(1,2,List(2),reliability,reliable,false), Span(0,1,List(3),early,early,false)),Map(2 -> reliable, 1 -> figure, 0 -> promise-01, 3 -> early),Map(e -> early, p -> promise-01, r -> reliable, f -> figure))),[Ljava.lang.String;@307dea47,Annotation([Ljava.lang.String;@1a9ff430,[Ljava.lang.String;@7b5888f7,[Ljava.lang.String;@71884f64),Annotation([Ljava.lang.String;@2c146877,[Ljava.lang.String;@6fd6733c,[Ledu.cmu.lti.nlp.amr.Dependency;@6827a180),Annotation([Ljava.lang.String;@1dc0fec,[Ljava.lang.String;@16994fe8,[Ljava.lang.String;@2b4d13ef),Annotation([Ljava.lang.String;@5157c61e,[Ljava.lang.String;@5990054a,[Ledu.cmu.lti.nlp.amr.Entity;@7e4b6b35))
AMR:
(e / early, op, f / figure)
(f / figure, mod, r / reliable)
(p / promise-01, ARG1, f / figure)

Decoded in 9,500 microseconds
Sentence: bobby robson was keen enough on the 25yearold south african to promise him a place in his next b team if he would renounce his commitment to the americans with whom he hopes to fulfil his world cup ambitions next summer

NER Entity: (thing :name (name :op "americans"))
NER Entity: (thing :name (name :op "americans"))
Spans:
Span 38-39:  ambitions => ambition
Span 28-29:  americans => (person :mod (country :name (name :op "America")))
Span 18-19:  b => b
Span 0-1:  bobby => bobby
Span 25-26:  commitment => commit-01
Span 37-38:  cup => cup
Span 4-5:  enough => enough
Span 34-35:  fulfil => fulfill-01
Span 31-32:  he => he
Span 21-22:  he => he
Span 32-33:  hopes => hope-01
Span 3-4:  keen => keen-41
Span 39-40:  next => next
Span 17-18:  next => next
Span 14-15:  place => place
Span 11-12:  promise => promise-01
Span 23-24:  renounce => renounce-01
Span 8-9:  south => south
Span 40-41:  summer => summer
Span 19-20:  team => team
Span 36-37:  world => world

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),summer,summer,false), Span(39,40,List(1),next,next,false), Span(38,39,List(2),ambitions,ambition,false), Span(37,38,List(3),cup,cup,false), Span(36,37,List(4),world,world,false), Span(34,35,List(5),fulfil,fulfill-01,false), Span(32,33,List(6),hopes,hope-01,false), Span(31,32,List(7),he,he,false), Span(28,29,List(11, 10, 9, 8),americans,(person :mod (country :name (name :op "America"))),false), Span(25,26,List(12),commitment,commit-01,false), Span(23,24,List(13),renounce,renounce-01,false), Span(21,22,List(14),he,he,false), Span(19,20,List(15),team,team,false), Span(18,19,List(16),b,b,false), Span(17,18,List(17),next,next,false), Span(14,15,List(18),place,place,false), Span(11,12,List(19),promise,promise-01,false), Span(8,9,List(20),south,south,false), Span(4,5,List(21),enough,enough,false), Span(3,4,List(22),keen,keen-41,false), Span(0,1,List(23),bobby,bobby,false)),Map(2 -> ambition, 5 -> fulfill-01, 12 -> commit-01, 15 -> team, 8 -> person, 21 -> enough, 18 -> place, 7 -> he, 17 -> next, 1 -> next, 23 -> bobby, 4 -> world, 11 -> "America", 14 -> he, 20 -> south, 6 -> hope-01, 22 -> keen-41, 0 -> summer, 9 -> country, 16 -> b, 19 -> promise-01, 3 -> cup, 10 -> name, 13 -> renounce-01),Map(e -> enough, n -> next, w -> world, h -> hope-01, s2 -> south, h2 -> he, k -> keen-41, b -> b, t -> team, b2 -> bobby, p2 -> place, s -> summer, p -> person, n3 -> next, a -> ambition, c3 -> commit-01, r -> renounce-01, h3 -> he, c -> cup, f -> fulfill-01, p3 -> promise-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@7a34bc8a,Annotation([Ljava.lang.String;@1c4646b4,[Ljava.lang.String;@49cbe1ec,[Ljava.lang.String;@685d72cd),Annotation([Ljava.lang.String;@4f1c2642,[Ljava.lang.String;@4113dfa1,[Ledu.cmu.lti.nlp.amr.Dependency;@7fbee467),Annotation([Ljava.lang.String;@4d8567b6,[Ljava.lang.String;@715c057c,[Ljava.lang.String;@506c4a08),Annotation([Ljava.lang.String;@75707c77,[Ljava.lang.String;@2bfba4dd,[Ledu.cmu.lti.nlp.amr.Entity;@1604bfba))
AMR:
(a / ambition, mod, c / cup)
(c2 / country, name, n2 / name)
(c3 / commit-01, ARG0, b2 / bobby)
(c3 / commit-01, ARG1, p / person)
(f / fulfill-01, ARG0, h2 / he)
(f / fulfill-01, ARG1, a / ambition)
(h / hope-01, ARG0, h3 / he)
(h / hope-01, ARG1, f / fulfill-01)
(h2 / he, part, w / world)
(k / keen-41, ARG2, p3 / promise-01)
(k / keen-41, degree, e / enough)
(n / next, op, r / renounce-01)
(n2 / name, op, "America")
(p / person, mod, c2 / country)
(p3 / promise-01, ARG0, s2 / south)
(p3 / promise-01, ARG1, t / team)
(p3 / promise-01, ARG2, p2 / place)
(r / renounce-01, ARG0, h3 / he)
(r / renounce-01, ARG1, c3 / commit-01)
(s / summer, op, c3 / commit-01)
(t / team, mod, b / b)
(t / team, mod, n3 / next)
(t / team, mod, r / renounce-01)

Decoded in 813,699 microseconds
Sentence: just damn you because you could have been more generous because you promised me you would be you promised me that you wanted a colleague not a housewife that work was the centre of love and you did not keep your word

Spans:
Span 35-36:  and => and
Span 10-11:  because => cause-01
Span 3-4:  because => cause-01
Span 5-6:  could => possible
Span 1-2:  damn => damn
Span 9-10:  generous => generous-41
Span 0-1:  just => just
Span 34-35:  love => love-01
Span 18-19:  promised => promise-01
Span 12-13:  promised => promise-01
Span 22-23:  wanted => want-01
Span 41-42:  word => word
Span 36-37:  you => you
Span 21-22:  you => you
Span 17-18:  you => you
Span 14-15:  you => you
Span 11-12:  you => you
Span 4-5:  you => you
Span 2-3:  you => you

Langrangian relaxation converged after 82 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),word,word,false), Span(36,37,List(1),you,you,false), Span(35,36,List(2),and,and,false), Span(34,35,List(3),love,love-01,false), Span(22,23,List(4),wanted,want-01,false), Span(21,22,List(5),you,you,false), Span(18,19,List(6),promised,promise-01,false), Span(17,18,List(7),you,you,false), Span(14,15,List(8),you,you,false), Span(12,13,List(9),promised,promise-01,false), Span(11,12,List(10),you,you,false), Span(10,11,List(11),because,cause-01,false), Span(9,10,List(12),generous,generous-41,false), Span(5,6,List(13),could,possible,false), Span(4,5,List(14),you,you,false), Span(3,4,List(15),because,cause-01,false), Span(2,3,List(16),you,you,false), Span(1,2,List(17),damn,damn,false), Span(0,1,List(18),just,just,false)),Map(2 -> and, 5 -> you, 12 -> generous-41, 15 -> cause-01, 8 -> you, 18 -> just, 7 -> you, 17 -> damn, 1 -> you, 4 -> want-01, 11 -> cause-01, 14 -> you, 6 -> promise-01, 0 -> word, 9 -> promise-01, 16 -> you, 3 -> love-01, 10 -> you, 13 -> possible),Map(w -> word, y4 -> you, y7 -> you, p2 -> promise-01, j -> just, d -> damn, y -> you, p -> promise-01, g -> generous-41, a -> and, y3 -> you, y6 -> you, w2 -> want-01, c -> cause-01, l -> love-01, p3 -> possible, c2 -> cause-01, y2 -> you, y5 -> you))),[Ljava.lang.String;@1a28651c,Annotation([Ljava.lang.String;@52061eae,[Ljava.lang.String;@fc85b94,[Ljava.lang.String;@2af459a4),Annotation([Ljava.lang.String;@10293404,[Ljava.lang.String;@115fae6,[Ledu.cmu.lti.nlp.amr.Dependency;@4a0b1298),Annotation([Ljava.lang.String;@1cf1df22,[Ljava.lang.String;@4b704006,[Ljava.lang.String;@367b709b),Annotation([Ljava.lang.String;@621dec0e,[Ljava.lang.String;@1a74bd75,[Ledu.cmu.lti.nlp.amr.Entity;@664259e4))
AMR:
(a / and, op, l / love-01)
(a / and, op, p / promise-01)
(c / cause-01, ARG0, p2 / promise-01)
(c / cause-01, ARG1, g / generous-41)
(c2 / cause-01, ARG0, p3 / possible)
(c2 / cause-01, ARG1, d / damn)
(c2 / cause-01, condition, g / generous-41)
(d / damn, degree, y7 / you)
(g / generous-41, ARG0, y6 / you)
(p / promise-01, ARG0, y3 / you)
(p / promise-01, ARG1, w2 / want-01)
(p / promise-01, ARG2, y4 / you)
(p2 / promise-01, ARG0, y5 / you)
(p2 / promise-01, ARG1, y4 / you)
(w / word, poss, y / you)
(w2 / want-01, ARG0, y2 / you)
(w2 / want-01, ARG1, w / word)
(y7 / you, mod, j / just)

Decoded in 1,686,703 microseconds
Sentence: michael promised he would hold out and went to bed feeling much better

Spans:
Span 6-7:  and => and
Span 9-10:  bed => bed
Span 10-11:  feeling => feel-01
Span 2-3:  he => he
Span 11-12:  much => much
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),much,much,false), Span(10,11,List(1),feeling,feel-01,false), Span(9,10,List(2),bed,bed,false), Span(6,7,List(3),and,and,false), Span(2,3,List(4),he,he,false), Span(1,2,List(5),promised,promise-01,false)),Map(2 -> bed, 5 -> promise-01, 1 -> feel-01, 4 -> he, 0 -> much, 3 -> and),Map(h -> he, b -> bed, m -> much, p -> promise-01, a -> and, f -> feel-01))),[Ljava.lang.String;@e1bbc2f,Annotation([Ljava.lang.String;@3edfb8e5,[Ljava.lang.String;@51e3e2a2,[Ljava.lang.String;@483423ae),Annotation([Ljava.lang.String;@5712998a,[Ljava.lang.String;@61e5faf,[Ledu.cmu.lti.nlp.amr.Dependency;@341bdd4c),Annotation([Ljava.lang.String;@115dc34e,[Ljava.lang.String;@22c13eca,[Ljava.lang.String;@3d015199),Annotation([Ljava.lang.String;@21943319,[Ljava.lang.String;@8a6bf88,[Ledu.cmu.lti.nlp.amr.Entity;@7b687e27))
AMR:
(a / and, op, p / promise-01)
(f / feel-01, ARG0, a / and)
(f / feel-01, ARG1, b / bed)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, m / much)

Decoded in 24,209 microseconds
Sentence: mercury has promised to use the opportunity to develop the first mobile phone affordable by the general public

Spans:
Span 13-14:  affordable => afford-01
Span 8-9:  develop => develop-02
Span 16-17:  general => general
Span 0-1:  mercury => mercury
Span 11-12:  mobile => mobile
Span 6-7:  opportunity => opportunity
Span 12-13:  phone => phone
Span 2-3:  promised => promise-01
Span 17-18:  public => public
Span 4-5:  use => use-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),public,public,false), Span(16,17,List(1),general,general,false), Span(13,14,List(2),affordable,afford-01,false), Span(12,13,List(3),phone,phone,false), Span(11,12,List(4),mobile,mobile,false), Span(8,9,List(5),develop,develop-02,false), Span(6,7,List(6),opportunity,opportunity,false), Span(4,5,List(7),use,use-01,false), Span(2,3,List(8),promised,promise-01,false), Span(0,1,List(9),mercury,mercury,false)),Map(2 -> afford-01, 5 -> develop-02, 8 -> promise-01, 7 -> use-01, 1 -> general, 4 -> mobile, 6 -> opportunity, 9 -> mercury, 0 -> public, 3 -> phone),Map(m2 -> mercury, p2 -> phone, d -> develop-02, m -> mobile, g -> general, p -> public, a -> afford-01, u -> use-01, o -> opportunity, p3 -> promise-01))),[Ljava.lang.String;@93271bd,Annotation([Ljava.lang.String;@4ec93402,[Ljava.lang.String;@7b7597b6,[Ljava.lang.String;@653b6d0c),Annotation([Ljava.lang.String;@207462c0,[Ljava.lang.String;@38ff3be5,[Ledu.cmu.lti.nlp.amr.Dependency;@7cb5549e),Annotation([Ljava.lang.String;@64c69108,[Ljava.lang.String;@285bd7e8,[Ljava.lang.String;@25bbd50b),Annotation([Ljava.lang.String;@4e9fd887,[Ljava.lang.String;@6040af64,[Ledu.cmu.lti.nlp.amr.Entity;@36baff9a))
AMR:
(a / afford-01, ARG1, p2 / phone)
(a / afford-01, ARG2, p / public)
(d / develop-02, ARG1, p2 / phone)
(o / opportunity, purpose, d / develop-02)
(p / public, mod, g / general)
(p2 / phone, mod, m / mobile)
(p3 / promise-01, ARG1, u / use-01)
(u / use-01, ARG0, m2 / mercury)
(u / use-01, ARG1, o / opportunity)

Decoded in 40,180 microseconds
Sentence: hans modrow the prime minister has downgraded it from a ministry to an office and its new head wolfgang schwanitz has promised it will no longer be a tool of political oppression

NER Entity: (person :name (name :op "hans" :op "modrow"))
Spans:
Span 14-15:  and => and
Span 0-2:  hans modrow => (person :name (name :op "hans" :op "modrow"))
Span 17-18:  head => head-01
Span 22-23:  it => it
Span 7-8:  it => it
Span 25-26:  longer => long
Span 4-5:  minister => (have-org-role-91 :ARG2 minister)
Span 10-11:  ministry => ministry
Span 16-17:  new => new
Span 24-25:  no => -
Span 13-14:  office => office
Span 31-32:  oppression => oppress-01
Span 30-31:  political => politics
Span 3-4:  prime => prime
Span 21-22:  promised => promise-01
Span 28-29:  tool => tool

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),oppression,oppress-01,false), Span(30,31,List(1),political,politics,false), Span(28,29,List(2),tool,tool,false), Span(25,26,List(3),longer,long,false), Span(24,25,List(4),no,-,false), Span(22,23,List(5),it,it,false), Span(21,22,List(6),promised,promise-01,false), Span(17,18,List(7),head,head-01,false), Span(16,17,List(8),new,new,false), Span(14,15,List(9),and,and,false), Span(13,14,List(10),office,office,false), Span(10,11,List(11),ministry,ministry,false), Span(7,8,List(12),it,it,false), Span(4,5,List(14, 13),minister,(have-org-role-91 :ARG2 minister),false), Span(3,4,List(15),prime,prime,false), Span(0,2,List(19, 18, 17, 16),hans modrow,(person :name (name :op "hans" :op "modrow")),false)),Map(2 -> tool, 5 -> it, 12 -> it, 15 -> prime, 8 -> new, 18 -> "hans", 7 -> head-01, 17 -> name, 1 -> politics, 4 -> -, 11 -> ministry, 14 -> minister, 6 -> promise-01, 0 -> oppress-01, 9 -> and, 16 -> person, 19 -> "modrow", 3 -> long, 10 -> office, 13 -> have-org-role-91),Map(n -> new, h -> head-01, h2 -> have-org-role-91, t -> tool, m2 -> minister, p2 -> promise-01, m -> ministry, p -> politics, a -> and, p4 -> person, o2 -> office, i2 -> it, i -> it, - -> -, l -> long, o -> oppress-01, p3 -> prime, n2 -> name))),[Ljava.lang.String;@2ee2f388,Annotation([Ljava.lang.String;@35e27dc4,[Ljava.lang.String;@28aeea7f,[Ljava.lang.String;@73a54cb6),Annotation([Ljava.lang.String;@694f7c0a,[Ljava.lang.String;@6158aa89,[Ledu.cmu.lti.nlp.amr.Dependency;@4243a4d),Annotation([Ljava.lang.String;@666f975a,[Ljava.lang.String;@2839ca40,[Ljava.lang.String;@6a0d4461),Annotation([Ljava.lang.String;@d0472ac,[Ljava.lang.String;@1f0480e1,[Ledu.cmu.lti.nlp.amr.Entity;@60a943af))
AMR:
(a / and, op, p2 / promise-01)
(a / and, op, p4 / person)
(h / head-01, ARG0, p4 / person)
(h / head-01, poss, o2 / office)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG2, m2 / minister)
(m2 / minister, mod, p3 / prime)
(n2 / name, op, "hans")
(n2 / name, op, "modrow")
(o / oppress-01, ARG0, n / new)
(o / oppress-01, ARG1, t / tool)
(o / oppress-01, mod, p / politics)
(p2 / promise-01, ARG0, i / it)
(p2 / promise-01, ARG1, i2 / it)
(p2 / promise-01, location, m / ministry)
(p4 / person, name, n2 / name)
(t / tool, domain, i / it)
(t / tool, mod, l / long)
(t / tool, polarity, - / -)

Decoded in 1,912,060 microseconds
Sentence: he opened the berlin wall and the border to let his people travel he promised free multiparty elections and eventually agreed to abolish the communists constitutional right to political control

NER Entity: (country :name (name :op "berlin"))
Spans:
Span 22-23:  abolish => abolish-01
Span 20-21:  agreed => agree-01
Span 18-19:  and => and
Span 5-6:  and => and
Span 7-8:  border => border-01
Span 24-25:  communists => communism
Span 25-26:  constitutional => constitution
Span 29-30:  control => control-01
Span 17-18:  elections => elect-01
Span 19-20:  eventually => eventual
Span 15-16:  free => free-41
Span 13-14:  he => he
Span 0-1:  he => he
Span 9-10:  let => let-01
Span 1-2:  opened => open-01
Span 28-29:  political => politics
Span 14-15:  promised => promise-01
Span 12-13:  travel => travel-01
Span 4-5:  wall => wall

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),control,control-01,false), Span(28,29,List(1),political,politics,false), Span(25,26,List(2),constitutional,constitution,false), Span(24,25,List(3),communists,communism,false), Span(22,23,List(4),abolish,abolish-01,false), Span(20,21,List(5),agreed,agree-01,false), Span(19,20,List(6),eventually,eventual,false), Span(18,19,List(7),and,and,false), Span(17,18,List(8),elections,elect-01,false), Span(15,16,List(9),free,free-41,false), Span(14,15,List(10),promised,promise-01,false), Span(13,14,List(11),he,he,false), Span(12,13,List(12),travel,travel-01,false), Span(9,10,List(13),let,let-01,false), Span(7,8,List(14),border,border-01,false), Span(5,6,List(15),and,and,false), Span(4,5,List(16),wall,wall,false), Span(1,2,List(17),opened,open-01,false), Span(0,1,List(18),he,he,false)),Map(2 -> constitution, 5 -> agree-01, 12 -> travel-01, 15 -> and, 8 -> elect-01, 18 -> he, 7 -> and, 17 -> open-01, 1 -> politics, 4 -> abolish-01, 11 -> he, 14 -> border-01, 6 -> eventual, 0 -> control-01, 9 -> free-41, 16 -> wall, 3 -> communism, 10 -> promise-01, 13 -> let-01),Map(e -> eventual, w -> wall, h -> he, h2 -> he, b -> border-01, t -> travel-01, e2 -> elect-01, p2 -> promise-01, a3 -> and, p -> politics, c3 -> communism, a -> abolish-01, a2 -> agree-01, c -> control-01, l -> let-01, f -> free-41, o -> open-01, c2 -> constitution, a4 -> and))),[Ljava.lang.String;@7801b9ea,Annotation([Ljava.lang.String;@3954ef33,[Ljava.lang.String;@77241aac,[Ljava.lang.String;@63534f4f),Annotation([Ljava.lang.String;@727bfe7a,[Ljava.lang.String;@2a80364e,[Ledu.cmu.lti.nlp.amr.Dependency;@476d50ae),Annotation([Ljava.lang.String;@59cbf424,[Ljava.lang.String;@5d09958a,[Ljava.lang.String;@2038c6be),Annotation([Ljava.lang.String;@6f7ff478,[Ljava.lang.String;@398b2b78,[Ledu.cmu.lti.nlp.amr.Entity;@5fd2f0cb))
AMR:
(a / abolish-01, ARG1, c / control-01)
(a2 / agree-01, ARG0, h / he)
(a2 / agree-01, ARG1, a / abolish-01)
(a2 / agree-01, time, e / eventual)
(a3 / and, op, p2 / promise-01)
(a4 / and, op, b / border-01)
(b / border-01, ARG1, l / let-01)
(c / control-01, ARG1, p / politics)
(e2 / elect-01, ARG1, c3 / communism)
(f / free-41, ARG0, c2 / constitution)
(f / free-41, ARG1, e2 / elect-01)
(l / let-01, ARG0, h2 / he)
(o / open-01, ARG0, h2 / he)
(o / open-01, ARG1, w / wall)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG2, e2 / elect-01)
(t / travel-01, ARG0, a4 / and)
(t / travel-01, ARG1, p2 / promise-01)

Decoded in 365,103 microseconds
Sentence: the crew had removed most of the roof promising faithfully to replace all the glass and tiles

Spans:
Span 12-13:  all => all
Span 15-16:  and => and
Span 1-2:  crew => crew
Span 14-15:  glass => glass
Span 4-5:  most => most
Span 8-9:  promising => promise-01
Span 3-4:  removed => remove-01
Span 11-12:  replace => replace-01
Span 7-8:  roof => roof

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),and,and,false), Span(14,15,List(1),glass,glass,false), Span(12,13,List(2),all,all,false), Span(11,12,List(3),replace,replace-01,false), Span(8,9,List(4),promising,promise-01,false), Span(7,8,List(5),roof,roof,false), Span(4,5,List(6),most,most,false), Span(3,4,List(7),removed,remove-01,false), Span(1,2,List(8),crew,crew,false)),Map(2 -> all, 5 -> roof, 8 -> crew, 7 -> remove-01, 1 -> glass, 4 -> promise-01, 6 -> most, 0 -> and, 3 -> replace-01),Map(r3 -> remove-01, m -> most, r2 -> roof, p -> promise-01, g -> glass, a -> and, r -> replace-01, a2 -> all, c -> crew))),[Ljava.lang.String;@11bed093,Annotation([Ljava.lang.String;@66f6bff,[Ljava.lang.String;@7d1b35a5,[Ljava.lang.String;@55f23ce),Annotation([Ljava.lang.String;@2927ac23,[Ljava.lang.String;@6b9642f0,[Ledu.cmu.lti.nlp.amr.Dependency;@5604d1be),Annotation([Ljava.lang.String;@56663d10,[Ljava.lang.String;@523311c0,[Ljava.lang.String;@16d27e69),Annotation([Ljava.lang.String;@55692b33,[Ljava.lang.String;@6b934d13,[Ledu.cmu.lti.nlp.amr.Entity;@13a95192))
AMR:
(a / and, op, r3 / remove-01)
(g / glass, quant, a2 / all)
(p / promise-01, ARG1, r2 / roof)
(p / promise-01, ARG2, r / replace-01)
(r / replace-01, ARG1, a / and)
(r / replace-01, ARG2, g / glass)
(r3 / remove-01, ARG0, c / crew)
(r3 / remove-01, ARG1, m / most)

Decoded in 624,005 microseconds
Sentence: i cant promise it will be like that for the rest of the journey

Spans:
Span 0-1:  i => i
Span 3-4:  it => it
Span 13-14:  journey => journey-01
Span 2-3:  promise => promise-01
Span 10-11:  rest => rest

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),journey,journey-01,false), Span(10,11,List(1),rest,rest,false), Span(3,4,List(2),it,it,false), Span(2,3,List(3),promise,promise-01,false), Span(0,1,List(4),i,i,false)),Map(2 -> it, 1 -> rest, 4 -> i, 0 -> journey-01, 3 -> promise-01),Map(j -> journey-01, p -> promise-01, i2 -> i, i -> it, r -> rest))),[Ljava.lang.String;@512a5253,Annotation([Ljava.lang.String;@3182f0c6,[Ljava.lang.String;@b8d708f,[Ljava.lang.String;@72d8c235),Annotation([Ljava.lang.String;@74b6607a,[Ljava.lang.String;@71782572,[Ledu.cmu.lti.nlp.amr.Dependency;@6e29991),Annotation([Ljava.lang.String;@6d0021f,[Ljava.lang.String;@423b44b7,[Ljava.lang.String;@411c6c59),Annotation([Ljava.lang.String;@310d6874,[Ljava.lang.String;@6744b0d4,[Ledu.cmu.lti.nlp.amr.Entity;@4eb56343))
AMR:
(j / journey-01, part, r / rest)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, j / journey-01)
(p / promise-01, ARG2, i / it)

Decoded in 32,393 microseconds
Sentence: an oxford firm at the centre of a row about the smell around its woodstock road site for the past 16 years has promised to clean up its act

Spans:
Span 20-21:  16 => 16
Span 28-29:  act => act-02
Span 12-13:  around => around
Span 25-26:  clean => clean
Span 2-3:  firm => firm
Span 19-20:  past => past
Span 23-24:  promised => promise-01
Span 15-16:  road => road
Span 8-9:  row => row
Span 16-17:  site => site
Span 11-12:  smell => smell-01
Span 21-22:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),act,act-02,false), Span(25,26,List(1),clean,clean,false), Span(23,24,List(2),promised,promise-01,false), Span(21,22,List(4, 3),years,(temporal-quantity :unit year),false), Span(20,21,List(5),16,16,false), Span(19,20,List(6),past,past,false), Span(16,17,List(7),site,site,false), Span(15,16,List(8),road,road,false), Span(12,13,List(9),around,around,false), Span(11,12,List(10),smell,smell-01,false), Span(8,9,List(11),row,row,false), Span(2,3,List(12),firm,firm,false)),Map(2 -> promise-01, 5 -> 16, 12 -> firm, 8 -> road, 7 -> site, 1 -> clean, 4 -> year, 11 -> row, 6 -> past, 0 -> act-02, 9 -> around, 3 -> temporal-quantity, 10 -> smell-01),Map(s2 -> smell-01, t -> temporal-quantity, p2 -> past, s -> site, 1 -> 16, p -> promise-01, y -> year, r2 -> row, a -> act-02, r -> road, a2 -> around, c -> clean, f -> firm))),[Ljava.lang.String;@6687ec13,Annotation([Ljava.lang.String;@659c07fb,[Ljava.lang.String;@66d023da,[Ljava.lang.String;@6ae1f1f1),Annotation([Ljava.lang.String;@17d33c09,[Ljava.lang.String;@2d0a7f17,[Ledu.cmu.lti.nlp.amr.Dependency;@c1dd61b),Annotation([Ljava.lang.String;@7ad38cd3,[Ljava.lang.String;@56c2afa4,[Ljava.lang.String;@799647c),Annotation([Ljava.lang.String;@67940cc9,[Ljava.lang.String;@28d3953f,[Ledu.cmu.lti.nlp.amr.Entity;@5aeb7009))
AMR:
(a / act-02, ARG0, c / clean)
(a / act-02, ARG1, s2 / smell-01)
(a2 / around, op, s / site)
(p / promise-01, ARG0, f / firm)
(p / promise-01, ARG1, p2 / past)
(p / promise-01, ARG2, c / clean)
(p2 / past, op, t / temporal-quantity)
(s / site, mod, r / road)
(s2 / smell-01, ARG0, r2 / row)
(s2 / smell-01, ARG1, s / site)
(t / temporal-quantity, quant, 1 / 16)
(t / temporal-quantity, unit, y / year)

Decoded in 122,485 microseconds
Sentence: the tenth he promises will reflect how lucky he feels to be alive when in 1984 the doctors gave him only two years to live

Spans:
Span 15-16:  1984 => (date-entity :year 1984)
Span 17-18:  doctors => doctor
Span 8-9:  he => he
Span 2-3:  he => he
Span 24-25:  live => live-01
Span 7-8:  lucky => lucky
Span 20-21:  only => only
Span 3-4:  promises => promise-01
Span 5-6:  reflect => reflect-01
Span 21-22:  two => 2
Span 22-23:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),live,live-01,false), Span(22,23,List(2, 1),years,(temporal-quantity :unit year),false), Span(21,22,List(3),two,2,false), Span(20,21,List(4),only,only,false), Span(17,18,List(5),doctors,doctor,false), Span(15,16,List(7, 6),1984,(date-entity :year 1984),false), Span(8,9,List(8),he,he,false), Span(7,8,List(9),lucky,lucky,false), Span(5,6,List(10),reflect,reflect-01,false), Span(3,4,List(11),promises,promise-01,false), Span(2,3,List(12),he,he,false)),Map(2 -> year, 5 -> doctor, 12 -> he, 8 -> he, 7 -> 1984, 1 -> temporal-quantity, 4 -> only, 11 -> promise-01, 6 -> date-entity, 0 -> live-01, 9 -> lucky, 3 -> 2, 10 -> reflect-01),Map(h -> he, 2 -> 2, h2 -> he, t -> temporal-quantity, d -> doctor, 1 -> 1984, y -> year, p -> promise-01, d2 -> date-entity, l2 -> lucky, r -> reflect-01, l -> live-01, o -> only))),[Ljava.lang.String;@17088d81,Annotation([Ljava.lang.String;@32821bf7,[Ljava.lang.String;@7bfa0f08,[Ljava.lang.String;@5df115ce),Annotation([Ljava.lang.String;@7eceb790,[Ljava.lang.String;@35758ffa,[Ledu.cmu.lti.nlp.amr.Dependency;@393f8181),Annotation([Ljava.lang.String;@784f5983,[Ljava.lang.String;@217de52a,[Ljava.lang.String;@50503993),Annotation([Ljava.lang.String;@42f40b16,[Ljava.lang.String;@2403f3b1,[Ledu.cmu.lti.nlp.amr.Entity;@7f73fbef))
AMR:
(d2 / date-entity, year, 1 / 1984)
(l / live-01, ARG0, d / doctor)
(l / live-01, ARG1, p / promise-01)
(l / live-01, duration, t / temporal-quantity)
(l2 / lucky, domain, h / he)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, r / reflect-01)
(r / reflect-01, ARG0, d2 / date-entity)
(r / reflect-01, ARG1, l2 / lucky)
(t / temporal-quantity, mod, o / only)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)

Decoded in 107,450 microseconds
Sentence: despite the seriousness of the affair most of the 150 people arrested have since been released and the former commander of the revolutionary guards mohsen rafiqdost who was called to the scene promised the demonstrators that the complaints of the people would be reported to the government

Spans:
Span 9-10:  150 => 150
Span 5-6:  affair => affair
Span 16-17:  and => and
Span 11-12:  arrested => arrest-01
Span 19-20:  commander => (have-org-role-91 :ARG2 commander)
Span 37-38:  complaints => complain-01
Span 34-35:  demonstrators => (person :ARG0-of demonstrate-01)
Span 18-19:  former => former
Span 23-24:  guards => (person :ARG0-of guard-01)
Span 6-7:  most => most
Span 32-33:  promised => promise-01
Span 15-16:  released => release-01
Span 43-44:  reported => report-01
Span 22-23:  revolutionary => revolution
Span 31-32:  scene => scene
Span 2-3:  seriousness => serious-41
Span 13-14:  since => since

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),reported,report-01,false), Span(37,38,List(1),complaints,complain-01,false), Span(34,35,List(3, 2),demonstrators,(person :ARG0-of demonstrate-01),false), Span(32,33,List(4),promised,promise-01,false), Span(31,32,List(5),scene,scene,false), Span(23,24,List(7, 6),guards,(person :ARG0-of guard-01),false), Span(22,23,List(8),revolutionary,revolution,false), Span(19,20,List(10, 9),commander,(have-org-role-91 :ARG2 commander),false), Span(18,19,List(11),former,former,false), Span(16,17,List(12),and,and,false), Span(15,16,List(13),released,release-01,false), Span(13,14,List(14),since,since,false), Span(11,12,List(15),arrested,arrest-01,false), Span(9,10,List(16),150,150,false), Span(6,7,List(17),most,most,false), Span(5,6,List(18),affair,affair,false), Span(2,3,List(19),seriousness,serious-41,false)),Map(2 -> person, 5 -> scene, 12 -> and, 15 -> arrest-01, 8 -> revolution, 18 -> affair, 7 -> guard-01, 17 -> most, 1 -> complain-01, 4 -> promise-01, 11 -> former, 14 -> since, 6 -> person, 0 -> report-01, 9 -> have-org-role-91, 16 -> 150, 19 -> serious-41, 3 -> demonstrate-01, 10 -> commander, 13 -> release-01),Map(r3 -> release-01, h -> have-org-role-91, s2 -> since, p2 -> promise-01, a3 -> affair, s -> scene, m -> most, d -> demonstrate-01, 1 -> 150, p -> person, g -> guard-01, r2 -> revolution, a -> and, a2 -> arrest-01, r -> report-01, s3 -> serious-41, c -> complain-01, f -> former, p3 -> person, c2 -> commander))),[Ljava.lang.String;@59465d7d,Annotation([Ljava.lang.String;@1aa3e755,[Ljava.lang.String;@7ea88b1c,[Ljava.lang.String;@6b451c3a),Annotation([Ljava.lang.String;@6405adb,[Ljava.lang.String;@6b0ce311,[Ledu.cmu.lti.nlp.amr.Dependency;@1b0fa7ff),Annotation([Ljava.lang.String;@20de643a,[Ljava.lang.String;@68862cb1,[Ljava.lang.String;@40e04e13),Annotation([Ljava.lang.String;@4625e2ab,[Ljava.lang.String;@61446c87,[Ledu.cmu.lti.nlp.amr.Entity;@533144f4))
AMR:
(a / and, op, p2 / promise-01)
(a / and, op, r / report-01)
(a / and, op, r3 / release-01)
(a2 / arrest-01, ARG1, p / person)
(a3 / affair, mod, m / most)
(d / demonstrate-01, ARG0, p / person)
(g / guard-01, ARG0, p3 / person)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, 1 / 150)
(h / have-org-role-91, ARG2, c2 / commander)
(h / have-org-role-91, time, f / former)
(p2 / promise-01, ARG0, c2 / commander)
(p2 / promise-01, ARG1, p / person)
(p2 / promise-01, time, s / scene)
(p3 / person, mod, r2 / revolution)
(r / report-01, ARG1, c / complain-01)
(r3 / release-01, ARG0, a3 / affair)
(r3 / release-01, time, s2 / since)
(s3 / serious-41, ARG2, a3 / affair)

Decoded in 548,394 microseconds
Sentence: inspired by their octogenarian leaders nostalgia fashion designers are promising a return to the austere clothing of the 1950s now hailed as the highwater mark of the revolutionary tradition of bitter struggle and hard living

Spans:
Span 18-19:  1950s => 1950
Span 32-33:  and => and
Span 14-15:  austere => austere
Span 30-31:  bitter => bitter
Span 15-16:  clothing => clothing
Span 6-7:  fashion => fashion
Span 20-21:  hailed => hail-02
Span 33-34:  hard => hard
Span 0-1:  inspired => inspire-01
Span 4-5:  leaders => (person :ARG0-of lead-02)
Span 34-35:  living => live-01
Span 24-25:  mark => mark-01
Span 19-20:  now => now
Span 9-10:  promising => promise-01
Span 27-28:  revolutionary => revolution
Span 31-32:  struggle => struggle-01
Span 28-29:  tradition => tradition

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),living,live-01,false), Span(33,34,List(1),hard,hard,false), Span(32,33,List(2),and,and,false), Span(31,32,List(3),struggle,struggle-01,false), Span(30,31,List(4),bitter,bitter,false), Span(28,29,List(5),tradition,tradition,false), Span(27,28,List(6),revolutionary,revolution,false), Span(24,25,List(7),mark,mark-01,false), Span(20,21,List(8),hailed,hail-02,false), Span(19,20,List(9),now,now,false), Span(18,19,List(10),1950s,1950,false), Span(15,16,List(11),clothing,clothing,false), Span(14,15,List(12),austere,austere,false), Span(9,10,List(13),promising,promise-01,false), Span(6,7,List(14),fashion,fashion,false), Span(4,5,List(16, 15),leaders,(person :ARG0-of lead-02),false), Span(0,1,List(17),inspired,inspire-01,false)),Map(2 -> and, 5 -> tradition, 12 -> austere, 15 -> person, 8 -> hail-02, 7 -> mark-01, 17 -> inspire-01, 1 -> hard, 4 -> bitter, 11 -> clothing, 14 -> fashion, 6 -> revolution, 0 -> live-01, 9 -> now, 16 -> lead-02, 3 -> struggle-01, 10 -> 1950, 13 -> promise-01),Map(n -> now, h -> hard, h2 -> hail-02, b -> bitter, t -> tradition, p2 -> person, s -> struggle-01, m -> mark-01, 1 -> 1950, p -> promise-01, a -> and, l2 -> lead-02, i -> inspire-01, r -> revolution, a2 -> austere, c -> clothing, l -> live-01, f -> fashion))),[Ljava.lang.String;@47a619d7,Annotation([Ljava.lang.String;@69ea9700,[Ljava.lang.String;@285fb753,[Ljava.lang.String;@23fcbeda),Annotation([Ljava.lang.String;@2655ecab,[Ljava.lang.String;@5324e236,[Ledu.cmu.lti.nlp.amr.Dependency;@1a7f71df),Annotation([Ljava.lang.String;@250cf510,[Ljava.lang.String;@75ad0070,[Ljava.lang.String;@30f7f56b),Annotation([Ljava.lang.String;@67115cea,[Ljava.lang.String;@24eb3b83,[Ledu.cmu.lti.nlp.amr.Entity;@4f902864))
AMR:
(a / and, op, i / inspire-01)
(a / and, op, l / live-01)
(c / clothing, mod, a2 / austere)
(h2 / hail-02, ARG1, 1 / 1950)
(h2 / hail-02, ARG2, m / mark-01)
(h2 / hail-02, time, n / now)
(i / inspire-01, ARG0, p2 / person)
(i / inspire-01, ARG1, f / fashion)
(l / live-01, ARG1, h / hard)
(l2 / lead-02, ARG0, p2 / person)
(m / mark-01, ARG1, t / tradition)
(p / promise-01, ARG0, c / clothing)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, ARG3, 1 / 1950)
(s / struggle-01, mod, b / bitter)
(t / tradition, mod, r / revolution)
(t / tradition, topic, s / struggle-01)

Decoded in 339,791 microseconds
Sentence: iraq yesterday promised to allow british officials in baghdad to visit farzad bazoft the observer journalist arrested on 15 september after trying to investigate the mystery explosion at an arms factory which killed hundreds, iraq also promised to allow consular access very soon to a british nurse daphne parish arrested at the same time as mr bazoft

NER Entity: (country :name (name :op "iraq"))
NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "baghdad"))
NER Entity: (country :name (name :op "iraq"))
NER Entity: (thing :name (name :op "british"))
Spans:
Span 18-19:  15 => 15
Span 41-42:  access => access-01
Span 20-21:  after => after
Span 39-40:  allow => allow-01
Span 4-5:  allow => allow-01
Span 36-37:  also => also
Span 29-30:  arms => arm
Span 50-51:  arrested => arrest-01
Span 16-17:  arrested => arrest-01
Span 26-27:  explosion => explode-01
Span 30-31:  factory => factory
Span 23-24:  investigate => investigate-01
Span 15-16:  journalist => journalist
Span 32-33:  killed => kill-01
Span 25-26:  mystery => mystery
Span 47-48:  nurse => (have-org-role-91 :ARG2 nurse)
Span 14-15:  observer => observe-01
Span 6-7:  officials => (have-org-role-91 :ARG2 official)
Span 37-38:  promised => promise-01
Span 2-3:  promised => promise-01
Span 53-54:  same => same-41
Span 19-20:  september => (date-entity :month 9)
Span 43-44:  soon => soon
Span 54-55:  time => time
Span 21-22:  trying => try-01
Span 42-43:  very => very
Span 10-11:  visit => visit-01
Span 1-2:  yesterday => yesterday

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),time,time,false), Span(53,54,List(1),same,same-41,false), Span(50,51,List(2),arrested,arrest-01,false), Span(47,48,List(4, 3),nurse,(have-org-role-91 :ARG2 nurse),false), Span(43,44,List(5),soon,soon,false), Span(42,43,List(6),very,very,false), Span(41,42,List(7),access,access-01,false), Span(39,40,List(8),allow,allow-01,false), Span(37,38,List(9),promised,promise-01,false), Span(36,37,List(10),also,also,false), Span(32,33,List(11),killed,kill-01,false), Span(30,31,List(12),factory,factory,false), Span(29,30,List(13),arms,arm,false), Span(26,27,List(14),explosion,explode-01,false), Span(25,26,List(15),mystery,mystery,false), Span(23,24,List(16),investigate,investigate-01,false), Span(21,22,List(17),trying,try-01,false), Span(20,21,List(18),after,after,false), Span(19,20,List(20, 19),september,(date-entity :month 9),false), Span(18,19,List(21),15,15,false), Span(16,17,List(22),arrested,arrest-01,false), Span(15,16,List(23),journalist,journalist,false), Span(14,15,List(24),observer,observe-01,false), Span(10,11,List(25),visit,visit-01,false), Span(6,7,List(27, 26),officials,(have-org-role-91 :ARG2 official),false), Span(4,5,List(28),allow,allow-01,false), Span(2,3,List(29),promised,promise-01,false), Span(1,2,List(30),yesterday,yesterday,false)),Map(30 -> yesterday, 2 -> arrest-01, 5 -> soon, 27 -> official, 12 -> factory, 8 -> allow-01, 15 -> mystery, 21 -> 15, 18 -> after, 24 -> observe-01, 7 -> access-01, 1 -> same-41, 17 -> try-01, 23 -> journalist, 26 -> have-org-role-91, 4 -> nurse, 11 -> kill-01, 14 -> explode-01, 29 -> promise-01, 20 -> 9, 28 -> allow-01, 6 -> very, 9 -> promise-01, 0 -> time, 22 -> arrest-01, 16 -> investigate-01, 19 -> date-entity, 10 -> also, 3 -> have-org-role-91, 25 -> visit-01, 13 -> arm),Map(e -> explode-01, a7 -> arrest-01, n -> nurse, v2 -> visit-01, h -> have-org-role-91, h2 -> have-org-role-91, s2 -> soon, t -> time, k -> kill-01, p2 -> promise-01, a3 -> allow-01, j -> journalist, s -> same-41, a6 -> after, v -> very, m -> mystery, d -> date-entity, 1 -> 15, y -> yesterday, p -> promise-01, a -> arrest-01, o2 -> official, a5 -> arm, a8 -> allow-01, t2 -> try-01, a2 -> access-01, i -> investigate-01, 9 -> 9, f -> factory, o -> observe-01, a4 -> also))),[Ljava.lang.String;@67efb699,Annotation([Ljava.lang.String;@2abd2c1e,[Ljava.lang.String;@699b7b7d,[Ljava.lang.String;@5ec881b5),Annotation([Ljava.lang.String;@3dbbc2b0,[Ljava.lang.String;@71ead079,[Ledu.cmu.lti.nlp.amr.Dependency;@6f1cf25c),Annotation([Ljava.lang.String;@556baf01,[Ljava.lang.String;@10ae9677,[Ljava.lang.String;@3618672f),Annotation([Ljava.lang.String;@7c1e5a67,[Ljava.lang.String;@2cc15fda,[Ledu.cmu.lti.nlp.amr.Entity;@4b7bf82a))
AMR:
(a / arrest-01, ARG1, h / have-org-role-91)
(a / arrest-01, time, t / time)
(a3 / allow-01, ARG0, 1 / 15)
(a3 / allow-01, ARG1, a2 / access-01)
(a3 / allow-01, time, s2 / soon)
(a6 / after, op, t2 / try-01)
(a7 / arrest-01, ARG1, j / journalist)
(a7 / arrest-01, time, a6 / after)
(a7 / arrest-01, time, d / date-entity)
(a8 / allow-01, ARG0, y / yesterday)
(a8 / allow-01, ARG1, v2 / visit-01)
(d / date-entity, month, 9 / 9)
(e / explode-01, ARG1, m / mystery)
(f / factory, mod, a5 / arm)
(h / have-org-role-91, ARG1, e / explode-01)
(h / have-org-role-91, ARG2, n / nurse)
(h2 / have-org-role-91, ARG1, v2 / visit-01)
(h2 / have-org-role-91, ARG2, o2 / official)
(i / investigate-01, ARG1, e / explode-01)
(k / kill-01, ARG0, e / explode-01)
(k / kill-01, ARG1, f / factory)
(o / observe-01, ARG0, j / journalist)
(p / promise-01, ARG1, k / kill-01)
(p / promise-01, ARG2, a3 / allow-01)
(p / promise-01, mod, a4 / also)
(p2 / promise-01, ARG0, j / journalist)
(p2 / promise-01, ARG1, a8 / allow-01)
(s / same-41, ARG1, t / time)
(s2 / soon, degree, v / very)
(t2 / try-01, ARG1, i / investigate-01)

Decoded in 1,072,577 microseconds
Sentence: but the young royals he had been promised had let him down

Spans:
Span 0-1:  but => contrast-01
Span 11-12:  down => down
Span 4-5:  he => he
Span 9-10:  let => let-01
Span 7-8:  promised => promise-01
Span 2-3:  young => young

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),down,down,false), Span(9,10,List(1),let,let-01,false), Span(7,8,List(2),promised,promise-01,false), Span(4,5,List(3),he,he,false), Span(2,3,List(4),young,young,false), Span(0,1,List(5),but,contrast-01,false)),Map(2 -> promise-01, 5 -> contrast-01, 1 -> let-01, 4 -> young, 0 -> down, 3 -> he),Map(h -> he, d -> down, y -> young, p -> promise-01, c -> contrast-01, l -> let-01))),[Ljava.lang.String;@37e1b41d,Annotation([Ljava.lang.String;@42f7f894,[Ljava.lang.String;@25e0dee5,[Ljava.lang.String;@4e499fd0),Annotation([Ljava.lang.String;@439b38d7,[Ljava.lang.String;@3b0cdee,[Ledu.cmu.lti.nlp.amr.Dependency;@4c9fc626),Annotation([Ljava.lang.String;@d8a1017,[Ljava.lang.String;@63265cf2,[Ljava.lang.String;@6ba046b8),Annotation([Ljava.lang.String;@6783113b,[Ljava.lang.String;@4de06d94,[Ledu.cmu.lti.nlp.amr.Entity;@493a377d))
AMR:
(c / contrast-01, ARG2, p / promise-01)
(l / let-01, ARG0, h / he)
(l / let-01, ARG1, d / down)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, y / young)

Decoded in 16,150 microseconds
Sentence: tony newton secretary of state for social security won support in the commons in october by promising the 100m increase in benefits

Spans:
Span 21-22:  benefits => benefit-01
Span 12-13:  commons => (government-organization :name (name :op "Commons"))
Span 19-20:  increase => increase-01
Span 14-15:  october => (date-entity :month 10)
Span 16-17:  promising => promise-01
Span 2-3:  secretary => secretary
Span 7-8:  security => security
Span 6-7:  social => society
Span 4-5:  state => state
Span 9-10:  support => support-01
Span 8-9:  won => win-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),benefits,benefit-01,false), Span(19,20,List(1),increase,increase-01,false), Span(16,17,List(2),promising,promise-01,false), Span(14,15,List(4, 3),october,(date-entity :month 10),false), Span(12,13,List(7, 6, 5),commons,(government-organization :name (name :op "Commons")),false), Span(9,10,List(8),support,support-01,false), Span(8,9,List(9),won,win-01,false), Span(7,8,List(10),security,security,false), Span(6,7,List(11),social,society,false), Span(4,5,List(12),state,state,false), Span(2,3,List(13),secretary,secretary,false)),Map(2 -> promise-01, 5 -> government-organization, 12 -> state, 8 -> support-01, 7 -> "Commons", 1 -> increase-01, 4 -> 10, 11 -> society, 6 -> name, 0 -> benefit-01, 9 -> win-01, 3 -> date-entity, 10 -> security, 13 -> secretary),Map(s5 -> secretary, n -> name, w -> win-01, s2 -> security, b -> benefit-01, s -> support-01, s4 -> state, d -> date-entity, 1 -> 10, p -> promise-01, g -> government-organization, i -> increase-01, s3 -> society))),[Ljava.lang.String;@d11151a,Annotation([Ljava.lang.String;@5c8064a9,[Ljava.lang.String;@7150c2b0,[Ljava.lang.String;@6d1deaee),Annotation([Ljava.lang.String;@472ae739,[Ljava.lang.String;@51b273af,[Ledu.cmu.lti.nlp.amr.Dependency;@1ac91010),Annotation([Ljava.lang.String;@63d982d,[Ljava.lang.String;@35d1b58e,[Ljava.lang.String;@5ae6993c),Annotation([Ljava.lang.String;@595660c3,[Ljava.lang.String;@35ead007,[Ledu.cmu.lti.nlp.amr.Entity;@4aff9738))
AMR:
(b / benefit-01, ARG0, d / date-entity)
(d / date-entity, month, 1 / 10)
(g / government-organization, name, n / name)
(n / name, op, "Commons")
(p / promise-01, ARG1, b / benefit-01)
(p / promise-01, ARG2, i / increase-01)
(s / support-01, ARG0, g / government-organization)
(s / support-01, ARG1, p / promise-01)
(s4 / state, poss, s3 / society)
(s4 / state, purpose, s2 / security)
(s5 / secretary, mod, s4 / state)
(w / win-01, ARG0, s5 / secretary)
(w / win-01, ARG1, s / support-01)

Decoded in 97,976 microseconds
Sentence: if the people involved could be tracked down promised a man from the current czech administration they would be sent to jail

Spans:
Span 15-16:  administration => administrate-01
Span 4-5:  could => possible
Span 13-14:  current => current
Span 7-8:  down => down
Span 3-4:  involved => involve-01
Span 21-22:  jail => jail
Span 10-11:  man => man
Span 8-9:  promised => promise-01
Span 19-20:  sent => send-01
Span 16-17:  they => they

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),jail,jail,false), Span(19,20,List(1),sent,send-01,false), Span(16,17,List(2),they,they,false), Span(15,16,List(3),administration,administrate-01,false), Span(13,14,List(4),current,current,false), Span(10,11,List(5),man,man,false), Span(8,9,List(6),promised,promise-01,false), Span(7,8,List(7),down,down,false), Span(4,5,List(8),could,possible,false), Span(3,4,List(9),involved,involve-01,false)),Map(2 -> they, 5 -> man, 8 -> possible, 7 -> down, 1 -> send-01, 4 -> current, 6 -> promise-01, 9 -> involve-01, 0 -> jail, 3 -> administrate-01),Map(t -> they, p2 -> possible, s -> send-01, j -> jail, d -> down, m -> man, p -> promise-01, a -> administrate-01, i -> involve-01, c -> current))),[Ljava.lang.String;@522103ff,Annotation([Ljava.lang.String;@758d8478,[Ljava.lang.String;@1df41e93,[Ljava.lang.String;@6035442),Annotation([Ljava.lang.String;@4490bc23,[Ljava.lang.String;@7a2fc0ff,[Ledu.cmu.lti.nlp.amr.Dependency;@5527e404),Annotation([Ljava.lang.String;@2deaee49,[Ljava.lang.String;@1ac2122c,[Ljava.lang.String;@3b37146d),Annotation([Ljava.lang.String;@1d1e1e7a,[Ljava.lang.String;@2462ea85,[Ledu.cmu.lti.nlp.amr.Entity;@5a12d46c))
AMR:
(a / administrate-01, ARG1, t / they)
(a / administrate-01, time, c / current)
(i / involve-01, ARG1, m / man)
(p / promise-01, ARG0, d / down)
(p / promise-01, ARG1, m / man)
(p2 / possible, domain, p / promise-01)
(s / send-01, ARG0, m / man)
(s / send-01, ARG1, t / they)
(s / send-01, ARG2, j / jail)

Decoded in 305,626 microseconds
Sentence: even south africa seemed to have buried the hatchet with swapo and president f w de klerk promised his cooperation in a spirit of goodneighbourliness

NER Entity: (country :name (name :op "south" :op "africa"))
Spans:
Span 11-12:  and => and
Span 6-7:  buried => bury-01
Span 19-20:  cooperation => cooperate-01
Span 13-14:  f => f
Span 12-13:  president => (have-org-role-91 :ARG2 president)
Span 17-18:  promised => promise-01
Span 3-4:  seemed => seem-01
Span 1-3:  south africa => (country :name (name :op "south" :op "africa"))
Span 22-23:  spirit => spirit

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),spirit,spirit,false), Span(19,20,List(1),cooperation,cooperate-01,false), Span(17,18,List(2),promised,promise-01,false), Span(13,14,List(3),f,f,false), Span(12,13,List(5, 4),president,(have-org-role-91 :ARG2 president),false), Span(11,12,List(6),and,and,false), Span(6,7,List(7),buried,bury-01,false), Span(3,4,List(8),seemed,seem-01,false), Span(1,3,List(12, 11, 10, 9),south africa,(country :name (name :op "south" :op "africa")),false)),Map(2 -> promise-01, 5 -> president, 12 -> "africa", 8 -> seem-01, 7 -> bury-01, 1 -> cooperate-01, 4 -> have-org-role-91, 11 -> "south", 6 -> and, 0 -> spirit, 9 -> country, 3 -> f, 10 -> name),Map(n -> name, h -> have-org-role-91, s2 -> seem-01, b -> bury-01, p2 -> president, s -> spirit, p -> promise-01, a -> and, c -> cooperate-01, f -> f, c2 -> country))),[Ljava.lang.String;@1df1ff6b,Annotation([Ljava.lang.String;@7ab7d928,[Ljava.lang.String;@3c121009,[Ljava.lang.String;@45daddae),Annotation([Ljava.lang.String;@240fee56,[Ljava.lang.String;@11e86299,[Ledu.cmu.lti.nlp.amr.Dependency;@2fa133fe),Annotation([Ljava.lang.String;@5c8120,[Ljava.lang.String;@39215c0f,[Ljava.lang.String;@3d22fa16),Annotation([Ljava.lang.String;@4350d9b5,[Ljava.lang.String;@71051c99,[Ledu.cmu.lti.nlp.amr.Entity;@698bac7))
AMR:
(b / bury-01, ARG1, a / and)
(c / cooperate-01, ARG0, c2 / country)
(c / cooperate-01, ARG1, s / spirit)
(c2 / country, name, n / name)
(h / have-org-role-91, ARG1, f / f)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "africa")
(n / name, op, "south")
(p / promise-01, ARG0, f / f)
(p / promise-01, ARG1, c / cooperate-01)
(s2 / seem-01, ARG1, b / bury-01)
(s2 / seem-01, mod, c2 / country)

Decoded in 306,972 microseconds
Sentence: and vietnam has promised everyone that it will do all it can to stop people leaving

NER Entity: (country :name (name :op "vietnam"))
Spans:
Span 9-10:  all => all
Span 0-1:  and => and
Span 11-12:  can => possible
Span 4-5:  everyone => everyone
Span 10-11:  it => it
Span 6-7:  it => it
Span 15-16:  leaving => leave-01
Span 3-4:  promised => promise-01
Span 13-14:  stop => stop-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),leaving,leave-01,false), Span(13,14,List(1),stop,stop-01,false), Span(11,12,List(2),can,possible,false), Span(10,11,List(3),it,it,false), Span(9,10,List(4),all,all,false), Span(6,7,List(5),it,it,false), Span(4,5,List(6),everyone,everyone,false), Span(3,4,List(7),promised,promise-01,false), Span(0,1,List(8),and,and,false)),Map(2 -> possible, 5 -> it, 8 -> and, 7 -> promise-01, 1 -> stop-01, 4 -> all, 6 -> everyone, 0 -> leave-01, 3 -> it),Map(e -> everyone, p2 -> promise-01, s -> stop-01, p -> possible, a -> all, i2 -> it, a2 -> and, i -> it, l -> leave-01))),[Ljava.lang.String;@150e6233,Annotation([Ljava.lang.String;@63510d11,[Ljava.lang.String;@5e310a07,[Ljava.lang.String;@658981e0),Annotation([Ljava.lang.String;@26adcd34,[Ljava.lang.String;@5c7b24c2,[Ledu.cmu.lti.nlp.amr.Dependency;@18aa6bfd),Annotation([Ljava.lang.String;@5c97bbb1,[Ljava.lang.String;@6da390f4,[Ljava.lang.String;@d81bb68),Annotation([Ljava.lang.String;@4036afc5,[Ljava.lang.String;@464dcf72,[Ledu.cmu.lti.nlp.amr.Entity;@1e6e696d))
AMR:
(l / leave-01, ARG0, a2 / and)
(p / possible, domain, i / it)
(p2 / promise-01, ARG0, a2 / and)
(p2 / promise-01, ARG1, i2 / it)
(p2 / promise-01, ARG2, e / everyone)
(s / stop-01, ARG0, i / it)
(s / stop-01, ARG1, l / leave-01)
(s / stop-01, ARG2, a / all)

Decoded in 127,067 microseconds
Sentence: bnl reforms the board of italys banca nazionale del lavoro promised concrete reforms within a fortnight in response to criticisms of the bank in the wake of alleged unauthorised loans to iraq

NER Entity: (country :name (name :op "iraq"))
Spans:
Span 27-28:  alleged => allege-01
Span 22-23:  bank => bank
Span 11-12:  concrete => concrete
Span 19-20:  criticisms => criticism
Span 29-30:  loans => loan-01
Span 10-11:  promised => promise-01
Span 12-13:  reforms => reform-01
Span 1-2:  reforms => reform-01
Span 17-18:  response => respond-01
Span 25-26:  wake => wake-02
Span 13-14:  within => within

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),loans,loan-01,false), Span(27,28,List(1),alleged,allege-01,false), Span(25,26,List(2),wake,wake-02,false), Span(22,23,List(3),bank,bank,false), Span(19,20,List(4),criticisms,criticism,false), Span(17,18,List(5),response,respond-01,false), Span(13,14,List(6),within,within,false), Span(12,13,List(7),reforms,reform-01,false), Span(11,12,List(8),concrete,concrete,false), Span(10,11,List(9),promised,promise-01,false), Span(1,2,List(10),reforms,reform-01,false)),Map(2 -> wake-02, 5 -> respond-01, 8 -> concrete, 7 -> reform-01, 1 -> allege-01, 4 -> criticism, 6 -> within, 9 -> promise-01, 0 -> loan-01, 10 -> reform-01, 3 -> bank),Map(w -> wake-02, r3 -> reform-01, b -> bank, p -> promise-01, r2 -> reform-01, a -> allege-01, w2 -> within, r -> respond-01, c -> criticism, l -> loan-01, c2 -> concrete))),[Ljava.lang.String;@62cb82b6,Annotation([Ljava.lang.String;@1ef2ad66,[Ljava.lang.String;@4e561369,[Ljava.lang.String;@75147aac),Annotation([Ljava.lang.String;@1381ee41,[Ljava.lang.String;@3740f768,[Ledu.cmu.lti.nlp.amr.Dependency;@a32e92f),Annotation([Ljava.lang.String;@146b11e4,[Ljava.lang.String;@1639a35,[Ljava.lang.String;@32210e49),Annotation([Ljava.lang.String;@1830f455,[Ljava.lang.String;@35f904db,[Ledu.cmu.lti.nlp.amr.Entity;@6fade18b))
AMR:
(a / allege-01, ARG1, l / loan-01)
(l / loan-01, ARG0, b / bank)
(p / promise-01, ARG2, r2 / reform-01)
(p / promise-01, time, w2 / within)
(r / respond-01, ARG1, c / criticism)
(r2 / reform-01, ARG1, c2 / concrete)
(r2 / reform-01, ARG2, w / wake-02)
(r3 / reform-01, ARG1, c / criticism)
(w / wake-02, ARG1, a / allege-01)
(w2 / within, op, r / respond-01)

Decoded in 252,286 microseconds
Sentence: a proud john broome showed off his new baby boldly promising that the battersea would open at 2

NER Entity: (person :name (name :op "john"))
Spans:
Span 17-18:  2 => 2
Span 8-9:  baby => baby
Span 9-10:  boldly => bold
Span 7-8:  new => new
Span 5-6:  off => off
Span 10-11:  promising => promise-01
Span 1-2:  proud => proud-41
Span 4-5:  showed => show-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),2,2,false), Span(10,11,List(1),promising,promise-01,false), Span(9,10,List(2),boldly,bold,false), Span(8,9,List(3),baby,baby,false), Span(7,8,List(4),new,new,false), Span(5,6,List(5),off,off,false), Span(4,5,List(6),showed,show-01,false), Span(1,2,List(7),proud,proud-41,false)),Map(2 -> bold, 5 -> off, 7 -> proud-41, 1 -> promise-01, 4 -> new, 6 -> show-01, 0 -> 2, 3 -> baby),Map(n -> new, 2 -> 2, b -> bold, b2 -> baby, p2 -> proud-41, s -> show-01, p -> promise-01, o -> off))),[Ljava.lang.String;@b2a5f5,Annotation([Ljava.lang.String;@50ad782e,[Ljava.lang.String;@2cad3d63,[Ljava.lang.String;@2199457f),Annotation([Ljava.lang.String;@55a1a614,[Ljava.lang.String;@679e96f7,[Ledu.cmu.lti.nlp.amr.Dependency;@5cc96746),Annotation([Ljava.lang.String;@2a9b5441,[Ljava.lang.String;@3bb88d41,[Ljava.lang.String;@5141c508),Annotation([Ljava.lang.String;@34eeb9e5,[Ljava.lang.String;@24ee8489,[Ledu.cmu.lti.nlp.amr.Entity;@273f5150))
AMR:
(b2 / baby, mod, n / new)
(p / promise-01, ARG0, b2 / baby)
(p / promise-01, degree, b / bold)
(p2 / proud-41, ARG1, o / off)
(s / show-01, ARG0, 2 / 2)
(s / show-01, ARG1, b2 / baby)
(s / show-01, direction, o / off)

Decoded in 38,313 microseconds
Sentence:  book publishers like in fact need to hype up their products and rugby union has had a long line of ghosted autobiographies which have promised more than they have fulfilled

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  book publishers like in fact need to hype up their products and rugby union has had a long line of ghosted autobiographies which have promised more than they have fulfilled
myTokenized = book publishers like in fact need to hype up their products and rugby union has had a long line of ghosted autobiographies which have promised more than they have fulfilled
i = 0
prefix = List(book)
regexr = \Qb\E ?\Qo\E ?\Qo\E ?\Qk\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: i cannot promise you riches although i have 139

Spans:
Span 6-7:  i => i
Span 0-1:  i => i
Span 2-3:  promise => promise-01
Span 4-5:  riches => riches
Span 3-4:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),i,i,false), Span(4,5,List(1),riches,riches,false), Span(3,4,List(2),you,you,false), Span(2,3,List(3),promise,promise-01,false), Span(0,1,List(4),i,i,false)),Map(2 -> you, 1 -> riches, 4 -> i, 0 -> i, 3 -> promise-01),Map(p -> promise-01, y -> you, i2 -> i, r -> riches, i -> i))),[Ljava.lang.String;@49114668,Annotation([Ljava.lang.String;@d257b52,[Ljava.lang.String;@17c34b3c,[Ljava.lang.String;@16805c54),Annotation([Ljava.lang.String;@452d9a56,[Ljava.lang.String;@34efa795,[Ledu.cmu.lti.nlp.amr.Dependency;@61e34259),Annotation([Ljava.lang.String;@f191344,[Ljava.lang.String;@373fdd1a,[Ljava.lang.String;@41ccf24c),Annotation([Ljava.lang.String;@76377d53,[Ljava.lang.String;@350510c7,[Ledu.cmu.lti.nlp.amr.Entity;@5f909402))
AMR:
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, r / riches)
(r / riches, mod, y / you)
(r / riches, poss, i / i)

Decoded in 11,574 microseconds
Sentence: the map of the ghetto shows the maze of small streets and promises a claustrophobic perspective but this is never properly realised

Spans:
Span 11-12:  and => and
Span 16-17:  but => contrast-01
Span 1-2:  map => map
Span 15-16:  perspective => perspective
Span 12-13:  promises => promise-01
Span 20-21:  properly => proper
Span 21-22:  realised => realize-01
Span 5-6:  shows => show-01
Span 9-10:  small => small
Span 10-11:  streets => street
Span 17-18:  this => this

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),realised,realize-01,false), Span(20,21,List(1),properly,proper,false), Span(17,18,List(2),this,this,false), Span(16,17,List(3),but,contrast-01,false), Span(15,16,List(4),perspective,perspective,false), Span(12,13,List(5),promises,promise-01,false), Span(11,12,List(6),and,and,false), Span(10,11,List(7),streets,street,false), Span(9,10,List(8),small,small,false), Span(5,6,List(9),shows,show-01,false), Span(1,2,List(10),map,map,false)),Map(2 -> this, 5 -> promise-01, 8 -> small, 7 -> street, 1 -> proper, 4 -> perspective, 6 -> and, 9 -> show-01, 0 -> realize-01, 10 -> map, 3 -> contrast-01),Map(s2 -> small, t -> this, p2 -> perspective, s -> street, m -> map, p -> proper, a -> and, r -> realize-01, s3 -> show-01, c -> contrast-01, p3 -> promise-01))),[Ljava.lang.String;@ce54052,Annotation([Ljava.lang.String;@1ee1ce1b,[Ljava.lang.String;@7aa25e73,[Ljava.lang.String;@39e70eeb),Annotation([Ljava.lang.String;@708483ff,[Ljava.lang.String;@bf6140f,[Ledu.cmu.lti.nlp.amr.Dependency;@489eeaeb),Annotation([Ljava.lang.String;@39510f8c,[Ljava.lang.String;@78d3cdb9,[Ljava.lang.String;@19676aa8),Annotation([Ljava.lang.String;@548b489f,[Ljava.lang.String;@44cea16,[Ledu.cmu.lti.nlp.amr.Entity;@559c4c8e))
AMR:
(a / and, op, p3 / promise-01)
(a / and, op, r / realize-01)
(a / and, op, s3 / show-01)
(c / contrast-01, ARG1, r / realize-01)
(p3 / promise-01, ARG0, m / map)
(p3 / promise-01, ARG1, p2 / perspective)
(r / realize-01, ARG1, t / this)
(r / realize-01, manner, p / proper)
(s / street, mod, s2 / small)
(s3 / show-01, ARG1, s / street)

Decoded in 258,562 microseconds
Sentence: along with three friends and a totally unconnected young man of eighteen who had been visiting a caretaker living in the grounds naturally caused polanski extreme mental torture made worse by the knowledge that he had promised to return to the house himself and had not made it in time

Spans:
Span 0-1:  along => along
Span 43-44:  and => and
Span 4-5:  and => and
Span 23-24:  caused => cause-01
Span 25-26:  extreme => extreme
Span 3-4:  friends => (have-rel-role-91 :ARG2 friend)
Span 21-22:  grounds => ground
Span 34-35:  he => he
Span 41-42:  house => house
Span 47-48:  it => it
Span 32-33:  knowledge => knowledge
Span 18-19:  living => live-01
Span 9-10:  man => man
Span 26-27:  mental => mental
Span 22-23:  naturally => natural
Span 36-37:  promised => promise-01
Span 2-3:  three => 3
Span 49-50:  time => time
Span 27-28:  torture => torture-01
Span 6-7:  totally => total
Span 15-16:  visiting => visit-01
Span 29-30:  worse => bad
Span 8-9:  young => young

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),time,time,false), Span(47,48,List(1),it,it,false), Span(43,44,List(2),and,and,false), Span(41,42,List(3),house,house,false), Span(36,37,List(4),promised,promise-01,false), Span(34,35,List(5),he,he,false), Span(32,33,List(6),knowledge,knowledge,false), Span(29,30,List(7),worse,bad,false), Span(27,28,List(8),torture,torture-01,false), Span(26,27,List(9),mental,mental,false), Span(25,26,List(10),extreme,extreme,false), Span(23,24,List(11),caused,cause-01,false), Span(22,23,List(12),naturally,natural,false), Span(21,22,List(13),grounds,ground,false), Span(18,19,List(14),living,live-01,false), Span(15,16,List(15),visiting,visit-01,false), Span(9,10,List(16),man,man,false), Span(8,9,List(17),young,young,false), Span(6,7,List(18),totally,total,false), Span(4,5,List(19),and,and,false), Span(3,4,List(21, 20),friends,(have-rel-role-91 :ARG2 friend),false), Span(2,3,List(22),three,3,false), Span(0,1,List(23),along,along,false)),Map(2 -> and, 5 -> he, 12 -> natural, 15 -> visit-01, 8 -> torture-01, 21 -> friend, 18 -> total, 7 -> bad, 17 -> young, 1 -> it, 23 -> along, 4 -> promise-01, 11 -> cause-01, 14 -> live-01, 20 -> have-rel-role-91, 6 -> knowledge, 22 -> 3, 0 -> time, 9 -> mental, 16 -> man, 19 -> and, 3 -> house, 10 -> extreme, 13 -> ground),Map(e -> extreme, n -> natural, h -> house, h2 -> he, t -> time, k -> knowledge, b -> bad, m2 -> man, a3 -> along, v -> visit-01, m -> mental, t3 -> total, y -> young, g -> ground, p -> promise-01, a -> and, t2 -> torture-01, a2 -> and, i -> it, h3 -> have-rel-role-91, c -> cause-01, l -> live-01, f -> friend, 3 -> 3))),[Ljava.lang.String;@6b730ffb,Annotation([Ljava.lang.String;@4f1e5ed9,[Ljava.lang.String;@52e52123,[Ljava.lang.String;@40e2ab59),Annotation([Ljava.lang.String;@615f8156,[Ljava.lang.String;@4524670b,[Ledu.cmu.lti.nlp.amr.Dependency;@58e926a3),Annotation([Ljava.lang.String;@32e7c4ef,[Ljava.lang.String;@e324105,[Ljava.lang.String;@54ab68b),Annotation([Ljava.lang.String;@6c166263,[Ljava.lang.String;@31958905,[Ledu.cmu.lti.nlp.amr.Entity;@5056c0b1))
AMR:
(a / and, op, c / cause-01)
(a / and, op, p / promise-01)
(a2 / and, op, m2 / man)
(c / cause-01, ARG0, t2 / torture-01)
(c / cause-01, ARG1, a2 / and)
(c / cause-01, mod, n / natural)
(h3 / have-rel-role-91, ARG0, a3 / along)
(h3 / have-rel-role-91, ARG1, t2 / torture-01)
(h3 / have-rel-role-91, ARG2, f / friend)
(i / it, topic, t / time)
(l / live-01, ARG0, 3 / 3)
(l / live-01, ARG1, g / ground)
(l / live-01, location, h / house)
(m2 / man, mod, y / young)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, i / it)
(p / promise-01, prep-on, k / knowledge)
(t2 / torture-01, ARG0, b / bad)
(t2 / torture-01, ARG1, t3 / total)
(t2 / torture-01, manner, m / mental)
(t2 / torture-01, mod, e / extreme)
(v / visit-01, ARG0, m2 / man)
(v / visit-01, ARG1, l / live-01)

Decoded in 583,337 microseconds
Sentence: he also promised that any agreement would have to be sanctioned by them and the partys national executive

Spans:
Span 5-6:  agreement => agree-01
Span 1-2:  also => also
Span 13-14:  and => and
Span 4-5:  any => any
Span 17-18:  executive => executive
Span 0-1:  he => he
Span 16-17:  national => nation
Span 2-3:  promised => promise-01
Span 10-11:  sanctioned => sanction-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),executive,executive,false), Span(16,17,List(1),national,nation,false), Span(13,14,List(2),and,and,false), Span(10,11,List(3),sanctioned,sanction-01,false), Span(5,6,List(4),agreement,agree-01,false), Span(4,5,List(5),any,any,false), Span(2,3,List(6),promised,promise-01,false), Span(1,2,List(7),also,also,false), Span(0,1,List(8),he,he,false)),Map(2 -> and, 5 -> any, 8 -> he, 7 -> also, 1 -> nation, 4 -> agree-01, 6 -> promise-01, 0 -> executive, 3 -> sanction-01),Map(n -> nation, e -> executive, h -> he, a3 -> any, s -> sanction-01, p -> promise-01, a -> and, a2 -> agree-01, a4 -> also))),[Ljava.lang.String;@6f84cdab,Annotation([Ljava.lang.String;@77dacebf,[Ljava.lang.String;@3e3b9b12,[Ljava.lang.String;@3b41daa9),Annotation([Ljava.lang.String;@607aaba3,[Ljava.lang.String;@159a8bd1,[Ledu.cmu.lti.nlp.amr.Dependency;@5551516b),Annotation([Ljava.lang.String;@4db8738f,[Ljava.lang.String;@8aad926,[Ljava.lang.String;@896523c),Annotation([Ljava.lang.String;@44f0e58b,[Ljava.lang.String;@236e2c09,[Ledu.cmu.lti.nlp.amr.Entity;@160d150b))
AMR:
(a / and, op, e / executive)
(a2 / agree-01, ARG0, n / nation)
(a2 / agree-01, mod, a3 / any)
(p / promise-01, ARG0, h / he)
(p / promise-01, mod, a4 / also)
(s / sanction-01, ARG0, h / he)
(s / sanction-01, ARG1, a2 / agree-01)
(s / sanction-01, ARG2, a / and)

Decoded in 59,787 microseconds
Sentence: my mother used to din into me greater is he that ruleth his spirit than he that taketh a city and various treats conditionally promised were withheld because i had yielded to the devils seduction into my besetting sin

Spans:
Span 20-21:  and => and
Span 27-28:  because => cause-01
Span 19-20:  city => city
Span 7-8:  greater => great
Span 15-16:  he => he
Span 9-10:  he => he
Span 28-29:  i => i
Span 1-2:  mother => (have-rel-role-91 :ARG2 mother)
Span 24-25:  promised => promise-01
Span 38-39:  sin => sin-01
Span 13-14:  spirit => spirit
Span 2-3:  used => use-01
Span 21-22:  various => various
Span 30-31:  yielded => yield-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),sin,sin-01,false), Span(30,31,List(1),yielded,yield-01,false), Span(28,29,List(2),i,i,false), Span(27,28,List(3),because,cause-01,false), Span(24,25,List(4),promised,promise-01,false), Span(21,22,List(5),various,various,false), Span(20,21,List(6),and,and,false), Span(19,20,List(7),city,city,false), Span(15,16,List(8),he,he,false), Span(13,14,List(9),spirit,spirit,false), Span(9,10,List(10),he,he,false), Span(7,8,List(11),greater,great,false), Span(2,3,List(12),used,use-01,false), Span(1,2,List(14, 13),mother,(have-rel-role-91 :ARG2 mother),false)),Map(2 -> i, 5 -> various, 12 -> use-01, 8 -> he, 7 -> city, 1 -> yield-01, 4 -> promise-01, 11 -> great, 14 -> mother, 6 -> and, 0 -> sin-01, 9 -> spirit, 3 -> cause-01, 10 -> he, 13 -> have-rel-role-91),Map(h -> he, s2 -> spirit, h2 -> he, s -> sin-01, v -> various, m -> mother, y -> yield-01, p -> promise-01, g -> great, a -> and, i -> i, h3 -> have-rel-role-91, c -> cause-01, u -> use-01, c2 -> city))),[Ljava.lang.String;@34e0907c,Annotation([Ljava.lang.String;@32dd803,[Ljava.lang.String;@36c0ae96,[Ljava.lang.String;@240615ef),Annotation([Ljava.lang.String;@b8a1063,[Ljava.lang.String;@1539d980,[Ledu.cmu.lti.nlp.amr.Dependency;@8f66d63),Annotation([Ljava.lang.String;@6a87832d,[Ljava.lang.String;@66b535fe,[Ljava.lang.String;@2ebeb60),Annotation([Ljava.lang.String;@4ea9ed1f,[Ljava.lang.String;@760eb691,[Ledu.cmu.lti.nlp.amr.Entity;@3ff42624))
AMR:
(c / cause-01, ARG0, y / yield-01)
(c / cause-01, ARG1, a / and)
(c2 / city, op, h / he)
(h3 / have-rel-role-91, ARG0, v / various)
(h3 / have-rel-role-91, ARG1, h2 / he)
(h3 / have-rel-role-91, ARG2, m / mother)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG2, a / and)
(s / sin-01, ARG1, y / yield-01)
(s2 / spirit, poss, h / he)
(u / use-01, ARG0, i / i)
(u / use-01, ARG1, h3 / have-rel-role-91)
(y / yield-01, ARG0, i / i)
(y / yield-01, ARG1, g / great)

Decoded in 188,616 microseconds
Sentence: the national nuclear corporation has recently been called in to sort out the a90 project and promises to have it in production by 1992

Spans:
Span 23-24:  1992 => (date-entity :year 1992)
Span 15-16:  and => and
Span 3-4:  corporation => corporation
Span 19-20:  it => it
Span 1-2:  national => nation
Span 2-3:  nuclear => nucleus
Span 21-22:  production => produce-01
Span 14-15:  project => project
Span 16-17:  promises => promise-01
Span 5-6:  recently => recent
Span 10-11:  sort => sort

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),1992,(date-entity :year 1992),false), Span(21,22,List(2),production,produce-01,false), Span(19,20,List(3),it,it,false), Span(16,17,List(4),promises,promise-01,false), Span(15,16,List(5),and,and,false), Span(14,15,List(6),project,project,false), Span(10,11,List(7),sort,sort,false), Span(5,6,List(8),recently,recent,false), Span(3,4,List(9),corporation,corporation,false), Span(2,3,List(10),nuclear,nucleus,false), Span(1,2,List(11),national,nation,false)),Map(2 -> produce-01, 5 -> and, 8 -> recent, 7 -> sort, 1 -> 1992, 11 -> nation, 4 -> promise-01, 6 -> project, 9 -> corporation, 0 -> date-entity, 10 -> nucleus, 3 -> it),Map(n -> nucleus, p2 -> promise-01, s -> sort, d -> date-entity, p -> produce-01, 1 -> 1992, a -> and, r -> recent, i -> it, c -> corporation, n2 -> nation, p3 -> project))),[Ljava.lang.String;@35f42649,Annotation([Ljava.lang.String;@2ffd9e4b,[Ljava.lang.String;@33a3668a,[Ljava.lang.String;@2ca10882),Annotation([Ljava.lang.String;@35a5b2,[Ljava.lang.String;@42114939,[Ledu.cmu.lti.nlp.amr.Dependency;@7cde5f11),Annotation([Ljava.lang.String;@6b339522,[Ljava.lang.String;@784222a,[Ljava.lang.String;@73def740),Annotation([Ljava.lang.String;@333ac62e,[Ljava.lang.String;@57a91048,[Ledu.cmu.lti.nlp.amr.Entity;@1c6c13ee))
AMR:
(a / and, op, p2 / promise-01)
(a / and, op, p3 / project)
(a / and, op, s / sort)
(a / and, time, r / recent)
(c / corporation, mod, n2 / nation)
(d / date-entity, year, 1 / 1992)
(p / produce-01, ARG0, i / it)
(p / produce-01, ARG1, n / nucleus)
(p2 / promise-01, ARG0, c / corporation)
(p2 / promise-01, ARG1, p / produce-01)
(p2 / promise-01, time, d / date-entity)

Decoded in 225,034 microseconds
Sentence: if i cant make it ill get a message to the box office for you he had promised

Spans:
Span 11-12:  box => box
Span 15-16:  he => he
Span 1-2:  i => i
Span 5-6:  ill => ill-41
Span 4-5:  it => it
Span 8-9:  message => message
Span 12-13:  office => office
Span 17-18:  promised => promise-01
Span 14-15:  you => you

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),promised,promise-01,false), Span(15,16,List(1),he,he,false), Span(14,15,List(2),you,you,false), Span(12,13,List(3),office,office,false), Span(11,12,List(4),box,box,false), Span(8,9,List(5),message,message,false), Span(5,6,List(6),ill,ill-41,false), Span(4,5,List(7),it,it,false), Span(1,2,List(8),i,i,false)),Map(2 -> you, 5 -> message, 8 -> i, 7 -> it, 1 -> he, 4 -> box, 6 -> ill-41, 0 -> promise-01, 3 -> office),Map(h -> he, b -> box, m -> message, i3 -> i, y -> you, p -> promise-01, i2 -> it, i -> ill-41, o -> office))),[Ljava.lang.String;@499ca496,Annotation([Ljava.lang.String;@4af9999b,[Ljava.lang.String;@48d3b591,[Ljava.lang.String;@433567f1),Annotation([Ljava.lang.String;@673b21af,[Ljava.lang.String;@5b209d1b,[Ledu.cmu.lti.nlp.amr.Dependency;@3a2a865a),Annotation([Ljava.lang.String;@3dda9c8b,[Ljava.lang.String;@5b5b8966,[Ljava.lang.String;@5699b665),Annotation([Ljava.lang.String;@595cd4e,[Ljava.lang.String;@2dd9bebf,[Ledu.cmu.lti.nlp.amr.Entity;@327a051d))
AMR:
(i / ill-41, ARG0, m / message)
(i / ill-41, ARG1, i2 / it)
(i / ill-41, ARG2, i3 / i)
(o / office, beneficiary, y / you)
(o / office, mod, b / box)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, i2 / it)
(p / promise-01, ARG2, o / office)

Decoded in 159,648 microseconds
Sentence: veyrat promises that by the time the first of 20 40000 sports cars are built by june 1001 weight will still be under 2000lb and acceleration electrifying

Spans:
Span 9-10:  20 => 20
Span 10-11:  40000 => 40000
Span 25-26:  acceleration => accelerate-01
Span 24-25:  and => and
Span 14-15:  built => build-01
Span 12-13:  cars => car
Span 16-18:  june 1001 => (date-entity :month 6 :year 1001)
Span 1-2:  promises => promise-01
Span 11-12:  sports => sport
Span 20-21:  still => still
Span 5-6:  time => time
Span 18-19:  weight => weight

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),acceleration,accelerate-01,false), Span(24,25,List(1),and,and,false), Span(20,21,List(2),still,still,false), Span(18,19,List(3),weight,weight,false), Span(16,18,List(6, 5, 4),june 1001,(date-entity :month 6 :year 1001),false), Span(14,15,List(7),built,build-01,false), Span(12,13,List(8),cars,car,false), Span(11,12,List(9),sports,sport,false), Span(10,11,List(10),40000,40000,false), Span(9,10,List(11),20,20,false), Span(5,6,List(12),time,time,false), Span(1,2,List(13),promises,promise-01,false)),Map(2 -> still, 5 -> 6, 12 -> time, 8 -> car, 7 -> build-01, 1 -> and, 4 -> date-entity, 11 -> 20, 6 -> 1001, 0 -> accelerate-01, 9 -> sport, 3 -> weight, 10 -> 40000, 13 -> promise-01),Map(w -> weight, 2 -> 20, s2 -> sport, b -> build-01, t -> time, s -> still, d -> date-entity, 1 -> 1001, p -> promise-01, a -> accelerate-01, 4 -> 40000, a2 -> and, 6 -> 6, c -> car))),[Ljava.lang.String;@68e5ccce,Annotation([Ljava.lang.String;@46e91e2f,[Ljava.lang.String;@72bcc407,[Ljava.lang.String;@46e9e26a),Annotation([Ljava.lang.String;@250fc185,[Ljava.lang.String;@2d6a15c5,[Ledu.cmu.lti.nlp.amr.Dependency;@fbb4fce),Annotation([Ljava.lang.String;@52746573,[Ljava.lang.String;@57b08b4f,[Ljava.lang.String;@78a1c83),Annotation([Ljava.lang.String;@7c55e052,[Ljava.lang.String;@69fa6743,[Ledu.cmu.lti.nlp.amr.Entity;@36919610))
AMR:
(2 / 20, op, a / accelerate-01)
(a / accelerate-01, ARG1, s / still)
(a2 / and, op, a / accelerate-01)
(b / build-01, ARG0, d / date-entity)
(b / build-01, ARG1, c / car)
(b / build-01, manner, s2 / sport)
(b / build-01, manner, w / weight)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 1 / 1001)
(p / promise-01, ARG0, s2 / sport)
(p / promise-01, ARG1, a2 / and)
(p / promise-01, location, t / time)
(s2 / sport, quant, 4 / 40000)

Decoded in 404,450 microseconds
Sentence: it promises to a baptism of fire

Spans:
Span 4-5:  baptism => baptize-01
Span 0-1:  it => it
Span 1-2:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),baptism,baptize-01,false), Span(1,2,List(1),promises,promise-01,false), Span(0,1,List(2),it,it,false)),Map(2 -> it, 1 -> promise-01, 0 -> baptize-01),Map(b -> baptize-01, p -> promise-01, i -> it))),[Ljava.lang.String;@1013106d,Annotation([Ljava.lang.String;@539b6c59,[Ljava.lang.String;@e671f1,[Ljava.lang.String;@194285ad),Annotation([Ljava.lang.String;@5e562dcf,[Ljava.lang.String;@6bd9a16b,[Ledu.cmu.lti.nlp.amr.Dependency;@1cf4af1e),Annotation([Ljava.lang.String;@414e96c,[Ljava.lang.String;@78e8b38b,[Ljava.lang.String;@7563a8b0),Annotation([Ljava.lang.String;@61d7f705,[Ljava.lang.String;@299a9b72,[Ledu.cmu.lti.nlp.amr.Entity;@65536eb4))
AMR:
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG2, b / baptize-01)

Decoded in 6,282 microseconds
Sentence: the government promised that no ratepayer would have to pay more than 3 per week extra under the poll tax

Spans:
Span 12-13:  3 => 3
Span 15-16:  extra => extra
Span 4-5:  no => -
Span 9-10:  pay => pay-01
Span 18-19:  poll => poll-01
Span 2-3:  promised => promise-01
Span 19-20:  tax => tax-01
Span 14-15:  week => week

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),tax,tax-01,false), Span(18,19,List(1),poll,poll-01,false), Span(15,16,List(2),extra,extra,false), Span(14,15,List(3),week,week,false), Span(12,13,List(4),3,3,false), Span(9,10,List(5),pay,pay-01,false), Span(4,5,List(6),no,-,false), Span(2,3,List(7),promised,promise-01,false)),Map(2 -> extra, 5 -> pay-01, 7 -> promise-01, 1 -> poll-01, 4 -> 3, 6 -> -, 0 -> tax-01, 3 -> week),Map(w -> week, e -> extra, t -> tax-01, p2 -> pay-01, p -> poll-01, - -> -, p3 -> promise-01, 3 -> 3))),[Ljava.lang.String;@48891f64,Annotation([Ljava.lang.String;@226c0370,[Ljava.lang.String;@6155bfb7,[Ljava.lang.String;@449db94d),Annotation([Ljava.lang.String;@4ef0916c,[Ljava.lang.String;@13db71f1,[Ledu.cmu.lti.nlp.amr.Dependency;@2c158f66),Annotation([Ljava.lang.String;@3b798826,[Ljava.lang.String;@27d9954b,[Ljava.lang.String;@3dd8835d),Annotation([Ljava.lang.String;@51986e63,[Ljava.lang.String;@6e774f6e,[Ledu.cmu.lti.nlp.amr.Entity;@5afff76a))
AMR:
(p / poll-01, ARG1, p3 / promise-01)
(p / poll-01, location, e / extra)
(p2 / pay-01, ARG3, t / tax-01)
(p2 / pay-01, polarity, - / -)
(p3 / promise-01, ARG1, 3 / 3)
(t / tax-01, ARG1, p / poll-01)
(w / week, mod, e / extra)

Decoded in 37,058 microseconds
Sentence: but details of the location promised for after midnight failed to materialise

Spans:
Span 7-8:  after => after
Span 0-1:  but => contrast-01
Span 1-2:  details => detail-01
Span 9-10:  failed => fail-01
Span 4-5:  location => location
Span 8-9:  midnight => midnight
Span 5-6:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),failed,fail-01,false), Span(8,9,List(1),midnight,midnight,false), Span(7,8,List(2),after,after,false), Span(5,6,List(3),promised,promise-01,false), Span(4,5,List(4),location,location,false), Span(1,2,List(5),details,detail-01,false), Span(0,1,List(6),but,contrast-01,false)),Map(2 -> after, 5 -> detail-01, 1 -> midnight, 4 -> location, 6 -> contrast-01, 0 -> fail-01, 3 -> promise-01),Map(d -> detail-01, m -> midnight, p -> promise-01, a -> after, c -> contrast-01, l -> location, f -> fail-01))),[Ljava.lang.String;@5acc7ed2,Annotation([Ljava.lang.String;@279a3b90,[Ljava.lang.String;@7ebc7f3f,[Ljava.lang.String;@946421a),Annotation([Ljava.lang.String;@639dbdb7,[Ljava.lang.String;@9126c79,[Ledu.cmu.lti.nlp.amr.Dependency;@188f8096),Annotation([Ljava.lang.String;@75430472,[Ljava.lang.String;@2d91483,[Ljava.lang.String;@79d1a5ea),Annotation([Ljava.lang.String;@32e3e421,[Ljava.lang.String;@f964ca1,[Ledu.cmu.lti.nlp.amr.Entity;@5480e605))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, d / detail-01)
(d / detail-01, ARG1, l / location)
(f / fail-01, ARG1, m / midnight)
(p / promise-01, ARG1, f / fail-01)
(p / promise-01, time, a / after)

Decoded in 20,499 microseconds
Sentence: a stopgap measure was conceived to entice them to settle instead in amazonia where they were promised a better future and title to land

NER Entity: (country :name (name :op "amazonia"))
Spans:
Span 20-21:  and => and
Span 4-5:  conceived => conceive-01
Span 19-20:  future => future
Span 10-11:  instead => instead
Span 23-24:  land => land
Span 2-3:  measure => measure
Span 16-17:  promised => promise-01
Span 9-10:  settle => settle-02
Span 14-15:  they => they
Span 21-22:  title => title

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),land,land,false), Span(21,22,List(1),title,title,false), Span(20,21,List(2),and,and,false), Span(19,20,List(3),future,future,false), Span(16,17,List(4),promised,promise-01,false), Span(14,15,List(5),they,they,false), Span(10,11,List(6),instead,instead,false), Span(9,10,List(7),settle,settle-02,false), Span(4,5,List(8),conceived,conceive-01,false), Span(2,3,List(9),measure,measure,false)),Map(2 -> and, 5 -> they, 8 -> conceive-01, 7 -> settle-02, 1 -> title, 4 -> promise-01, 6 -> instead, 9 -> measure, 0 -> land, 3 -> future),Map(t -> title, s -> settle-02, m -> measure, p -> promise-01, a -> and, t2 -> they, i -> instead, c -> conceive-01, l -> land, f -> future))),[Ljava.lang.String;@5a7d7d9a,Annotation([Ljava.lang.String;@64c137df,[Ljava.lang.String;@493b4526,[Ljava.lang.String;@5238e759),Annotation([Ljava.lang.String;@15dcae3b,[Ljava.lang.String;@4b32aeb3,[Ledu.cmu.lti.nlp.amr.Dependency;@6c6b9056),Annotation([Ljava.lang.String;@9d135b6,[Ljava.lang.String;@61d44c3,[Ljava.lang.String;@6b8d6157),Annotation([Ljava.lang.String;@ef1cdeb,[Ljava.lang.String;@250606f7,[Ledu.cmu.lti.nlp.amr.Entity;@2eb3551e))
AMR:
(a / and, op, f / future)
(a / and, op, l / land)
(a / and, op, t / title)
(c / conceive-01, ARG1, m / measure)
(p / promise-01, ARG1, t2 / they)
(p / promise-01, ARG2, a / and)
(s / settle-02, ARG0, m / measure)
(s / settle-02, ARG1, a / and)
(s / settle-02, mod, i / instead)

Decoded in 112,410 microseconds
Sentence: for nearly halfanhour belgium outnumbering england in midfield because robson had reverted to the sweeper system he had introduced in the goalless draw against holland promised to make telling use of the advantage

NER Entity: (country :name (name :op "belgium"))
NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "holland"))
NER Entity: (country :name (name :op "england"))
Spans:
Span 32-33:  advantage => advantage
Span 8-9:  because => cause-01
Span 22-23:  draw => draw-02
Span 5-6:  england => (country :name (name :op "England"))
Span 16-17:  he => he
Span 18-19:  introduced => introduce-02
Span 1-2:  nearly => nearly
Span 25-26:  promised => promise-01
Span 15-16:  system => system
Span 28-29:  telling => tell-01
Span 29-30:  use => use-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),advantage,advantage,false), Span(29,30,List(1),use,use-01,false), Span(28,29,List(2),telling,tell-01,false), Span(25,26,List(3),promised,promise-01,false), Span(22,23,List(4),draw,draw-02,false), Span(18,19,List(5),introduced,introduce-02,false), Span(16,17,List(6),he,he,false), Span(15,16,List(7),system,system,false), Span(8,9,List(8),because,cause-01,false), Span(5,6,List(11, 10, 9),england,(country :name (name :op "England")),false), Span(1,2,List(12),nearly,nearly,false)),Map(2 -> tell-01, 5 -> introduce-02, 12 -> nearly, 8 -> cause-01, 7 -> system, 1 -> use-01, 4 -> draw-02, 11 -> "England", 6 -> he, 0 -> advantage, 9 -> country, 3 -> promise-01, 10 -> name),Map(n -> name, h -> he, t -> tell-01, s -> system, d -> draw-02, p -> promise-01, a -> advantage, i -> introduce-02, c -> cause-01, u -> use-01, n2 -> nearly, c2 -> country))),[Ljava.lang.String;@7f993c85,Annotation([Ljava.lang.String;@25548135,[Ljava.lang.String;@4eeed1b8,[Ljava.lang.String;@210aaf84),Annotation([Ljava.lang.String;@4489140e,[Ljava.lang.String;@383c649,[Ledu.cmu.lti.nlp.amr.Dependency;@404ee46c),Annotation([Ljava.lang.String;@7b768f6f,[Ljava.lang.String;@24c2ffbc,[Ljava.lang.String;@7e23a27e),Annotation([Ljava.lang.String;@55813ee4,[Ljava.lang.String;@18481697,[Ledu.cmu.lti.nlp.amr.Entity;@24c31ff5))
AMR:
(c / cause-01, ARG1, u / use-01)
(c2 / country, mod, n2 / nearly)
(c2 / country, name, n / name)
(d / draw-02, ARG0, c2 / country)
(i / introduce-02, ARG0, h / he)
(i / introduce-02, ARG1, s / system)
(i / introduce-02, ARG2, d / draw-02)
(n / name, op, "England")
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG2, t / tell-01)
(t / tell-01, ARG1, u / use-01)
(u / use-01, ARG1, a / advantage)

Decoded in 102,764 microseconds
Sentence: he is still prominent on the partys list but the new candidate mr martinez maldonado is a quiet lawyer who promises pluralism and a reduced role for the state

Spans:
Span 22-23:  and => and
Span 8-9:  but => contrast-01
Span 11-12:  candidate => candidate
Span 0-1:  he => he
Span 18-19:  lawyer => lawyer
Span 7-8:  list => list-01
Span 10-11:  new => new
Span 3-4:  prominent => prominent
Span 20-21:  promises => promise-01
Span 17-18:  quiet => quiet-41
Span 24-25:  reduced => reduce-01
Span 25-26:  role => role
Span 28-29:  state => state
Span 2-3:  still => still

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),state,state,false), Span(25,26,List(1),role,role,false), Span(24,25,List(2),reduced,reduce-01,false), Span(22,23,List(3),and,and,false), Span(20,21,List(4),promises,promise-01,false), Span(18,19,List(5),lawyer,lawyer,false), Span(17,18,List(6),quiet,quiet-41,false), Span(11,12,List(7),candidate,candidate,false), Span(10,11,List(8),new,new,false), Span(8,9,List(9),but,contrast-01,false), Span(7,8,List(10),list,list-01,false), Span(3,4,List(11),prominent,prominent,false), Span(2,3,List(12),still,still,false), Span(0,1,List(13),he,he,false)),Map(2 -> reduce-01, 5 -> lawyer, 12 -> still, 8 -> new, 7 -> candidate, 1 -> role, 4 -> promise-01, 11 -> prominent, 6 -> quiet-41, 0 -> state, 9 -> contrast-01, 3 -> and, 10 -> list-01, 13 -> he),Map(n -> new, h -> he, q -> quiet-41, s2 -> still, p2 -> prominent, s -> state, r2 -> reduce-01, p -> promise-01, a -> and, l2 -> list-01, r -> role, c -> candidate, l -> lawyer, c2 -> contrast-01))),[Ljava.lang.String;@5c9282ca,Annotation([Ljava.lang.String;@16c8cb41,[Ljava.lang.String;@58982416,[Ljava.lang.String;@6c694dca),Annotation([Ljava.lang.String;@75724060,[Ljava.lang.String;@1fe09add,[Ledu.cmu.lti.nlp.amr.Dependency;@52d73384),Annotation([Ljava.lang.String;@2e774999,[Ljava.lang.String;@1980f3a4,[Ljava.lang.String;@60fba110),Annotation([Ljava.lang.String;@280b532e,[Ljava.lang.String;@7f82058b,[Ledu.cmu.lti.nlp.amr.Entity;@313a2a13))
AMR:
(a / and, op, r / role)
(c2 / contrast-01, ARG1, l / lawyer)
(c2 / contrast-01, ARG2, n / new)
(l2 / list-01, ARG0, h / he)
(l2 / list-01, ARG1, s / state)
(l2 / list-01, mod, c / candidate)
(p / promise-01, ARG0, l / lawyer)
(p / promise-01, ARG1, a / and)
(p2 / prominent, domain, h / he)
(p2 / prominent, mod, s2 / still)
(q / quiet-41, ARG1, l / lawyer)
(r / role, poss, s / state)
(r2 / reduce-01, ARG0, r / role)

Decoded in 200,807 microseconds
Sentence: pravda said he promised the city party plenum which elected him unanimously to take an active part in the further democratisation of our society

Spans:
Span 15-16:  active => active
Span 5-6:  city => city
Span 9-10:  elected => elect-01
Span 19-20:  further => further
Span 2-3:  he => he
Span 6-7:  party => party
Span 3-4:  promised => promise-01
Span 1-2:  said => say-01
Span 23-24:  society => society
Span 11-12:  unanimously => unanimous

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),society,society,false), Span(19,20,List(1),further,further,false), Span(15,16,List(2),active,active,false), Span(11,12,List(3),unanimously,unanimous,false), Span(9,10,List(4),elected,elect-01,false), Span(6,7,List(5),party,party,false), Span(5,6,List(6),city,city,false), Span(3,4,List(7),promised,promise-01,false), Span(2,3,List(8),he,he,false), Span(1,2,List(9),said,say-01,false)),Map(2 -> active, 5 -> party, 8 -> he, 7 -> promise-01, 1 -> further, 4 -> elect-01, 6 -> city, 9 -> say-01, 0 -> society, 3 -> unanimous),Map(e -> elect-01, h -> he, s2 -> say-01, p2 -> promise-01, s -> society, p -> party, a -> active, c -> city, u -> unanimous, f -> further))),[Ljava.lang.String;@61a05ea4,Annotation([Ljava.lang.String;@67a5930e,[Ljava.lang.String;@2759b14b,[Ljava.lang.String;@7186c71b),Annotation([Ljava.lang.String;@4779f7d7,[Ljava.lang.String;@187e68ea,[Ledu.cmu.lti.nlp.amr.Dependency;@1319e736),Annotation([Ljava.lang.String;@99a9406,[Ljava.lang.String;@36c1ad7,[Ljava.lang.String;@2e561b02),Annotation([Ljava.lang.String;@17073812,[Ljava.lang.String;@5af2318d,[Ledu.cmu.lti.nlp.amr.Entity;@52934ea0))
AMR:
(a / active, op, s2 / say-01)
(e / elect-01, ARG0, h / he)
(e / elect-01, ARG1, f / further)
(e / elect-01, ARG2, u / unanimous)
(p / party, mod, c / city)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, c / city)
(s / society, op, s2 / say-01)
(s2 / say-01, ARG1, p2 / promise-01)

Decoded in 142,186 microseconds
Sentence: italy has promised dollars 400m  255m in export credits

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = italy has promised dollars 400m  255m in export credits
myTokenized = italy has promised dollars 400m 255m in export credits
i = 5
prefix = List(italy, has, promised, dollars, 400m, 255m)
regexr = \Qi\E ?\Qt\E ?\Qa\E ?\Ql\E ?\Qy\E ?\Qh\E ?\Qa\E ?\Qs\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qd\E ?\Qo\E ?\Ql\E ?\Ql\E ?\Qa\E ?\Qr\E ?\Qs\E ?\Q4\E ?\Q0\E ?\Q0\E ?\Qm\E ?\Q2\E ?\Q5\E ?\Q5\E ?\Qm\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: for those with more specific euromemories the gem of dejavu is the recollection that in 1979 mrs thatcher attending her first european summit in strasbourg promised that britain would join european monetary system when the time was right

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 15-16:  1979 => (date-entity :year 1979)
Span 18-19:  attending => attend-01
Span 27-28:  britain => (country :name (name :op "Britain"))
Span 30-31:  european => (continent :name (name :op "Europe"))
Span 21-22:  european => (continent :name (name :op "Europe"))
Span 29-30:  join => join-01
Span 31-32:  monetary => money
Span 25-26:  promised => promise-01
Span 4-5:  specific => specific
Span 22-23:  summit => summit
Span 32-33:  system => system
Span 35-36:  time => time

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),time,time,false), Span(32,33,List(1),system,system,false), Span(31,32,List(2),monetary,money,false), Span(30,31,List(5, 4, 3),european,(continent :name (name :op "Europe")),false), Span(29,30,List(6),join,join-01,false), Span(27,28,List(9, 8, 7),britain,(country :name (name :op "Britain")),false), Span(25,26,List(10),promised,promise-01,false), Span(22,23,List(11),summit,summit,false), Span(21,22,List(14, 13, 12),european,(continent :name (name :op "Europe")),false), Span(18,19,List(15),attending,attend-01,false), Span(15,16,List(17, 16),1979,(date-entity :year 1979),false), Span(4,5,List(18),specific,specific,false)),Map(2 -> money, 5 -> "Europe", 12 -> continent, 15 -> attend-01, 8 -> name, 18 -> specific, 7 -> country, 17 -> 1979, 1 -> system, 4 -> name, 11 -> summit, 14 -> "Europe", 6 -> join-01, 0 -> time, 9 -> "Britain", 16 -> date-entity, 3 -> continent, 10 -> promise-01, 13 -> name),Map(n -> name, s2 -> summit, t -> time, j -> join-01, s -> system, d -> date-entity, m -> money, 1 -> 1979, p -> promise-01, c3 -> continent, n3 -> name, a -> attend-01, s3 -> specific, c -> continent, c2 -> country, n2 -> name))),[Ljava.lang.String;@6119e2c1,Annotation([Ljava.lang.String;@6a761eb4,[Ljava.lang.String;@70d9f206,[Ljava.lang.String;@74a0a1cb),Annotation([Ljava.lang.String;@5dde523e,[Ljava.lang.String;@2ee99497,[Ledu.cmu.lti.nlp.amr.Dependency;@691a5d90),Annotation([Ljava.lang.String;@41f4ced8,[Ljava.lang.String;@2f37e8bc,[Ljava.lang.String;@7f90a6db),Annotation([Ljava.lang.String;@71bab54a,[Ljava.lang.String;@18d4479b,[Ledu.cmu.lti.nlp.amr.Entity;@18a91dd9))
AMR:
(a / attend-01, ARG0, t / time)
(a / attend-01, ARG1, s2 / summit)
(c / continent, name, n / name)
(c2 / country, name, n2 / name)
(c3 / continent, name, n3 / name)
(d / date-entity, year, 1 / 1979)
(j / join-01, ARG0, c2 / country)
(j / join-01, ARG1, c / continent)
(j / join-01, time, d / date-entity)
(n / name, op, "Europe")
(n2 / name, op, "Britain")
(n3 / name, op, "Europe")
(p / promise-01, ARG0, s / system)
(p / promise-01, ARG1, s3 / specific)
(p / promise-01, ARG2, s2 / summit)
(s / system, mod, c2 / country)
(s / system, topic, m / money)
(s2 / summit, mod, c3 / continent)

Decoded in 268,626 microseconds
Sentence: it is interesting to note that despite being promised job security the majority of ncc staff in scotland are against the split

Spans:
Span 2-3:  interesting => interesting
Span 0-1:  it => it
Span 9-10:  job => job
Span 12-13:  majority => majority
Span 4-5:  note => note
Span 8-9:  promised => promise-01
Span 17-18:  scotland => (country :name (name :op "Scotland"))
Span 10-11:  security => security
Span 21-22:  split => split-01
Span 15-16:  staff => (person :ARG2-of staff-01)

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),split,split-01,false), Span(17,18,List(3, 2, 1),scotland,(country :name (name :op "Scotland")),false), Span(15,16,List(5, 4),staff,(person :ARG2-of staff-01),false), Span(12,13,List(6),majority,majority,false), Span(10,11,List(7),security,security,false), Span(9,10,List(8),job,job,false), Span(8,9,List(9),promised,promise-01,false), Span(4,5,List(10),note,note,false), Span(2,3,List(11),interesting,interesting,false), Span(0,1,List(12),it,it,false)),Map(2 -> name, 5 -> staff-01, 12 -> it, 8 -> job, 7 -> security, 1 -> country, 4 -> person, 11 -> interesting, 6 -> majority, 0 -> split-01, 9 -> promise-01, 3 -> "Scotland", 10 -> note),Map(n -> name, s2 -> staff-01, p2 -> promise-01, j -> job, s -> split-01, m -> majority, p -> person, i2 -> it, i -> interesting, s3 -> security, c -> country, n2 -> note))),[Ljava.lang.String;@6e69e35,Annotation([Ljava.lang.String;@e9cad1d,[Ljava.lang.String;@50295269,[Ljava.lang.String;@48e1949c),Annotation([Ljava.lang.String;@51e3b325,[Ljava.lang.String;@3c066c23,[Ledu.cmu.lti.nlp.amr.Dependency;@49a58c9e),Annotation([Ljava.lang.String;@13b2fed8,[Ljava.lang.String;@4c792102,[Ljava.lang.String;@24663187),Annotation([Ljava.lang.String;@313da8bc,[Ljava.lang.String;@4710e7e5,[Ledu.cmu.lti.nlp.amr.Entity;@26e88fd6))
AMR:
(c / country, name, n / name)
(i / interesting, domain, n2 / note)
(i2 / it, mod, i / interesting)
(m / majority, topic, c / country)
(n / name, op, "Scotland")
(p / person, quant, m / majority)
(p2 / promise-01, ARG0, s3 / security)
(p2 / promise-01, ARG1, m / majority)
(s / split-01, ARG0, p / person)
(s / split-01, ARG1, i2 / it)
(s2 / staff-01, ARG2, p / person)
(s3 / security, mod, j / job)

Decoded in 196,174 microseconds
Sentence: the council promised its support

Spans:
Span 1-2:  council => council
Span 2-3:  promised => promise-01
Span 4-5:  support => support-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),support,support-01,false), Span(2,3,List(1),promised,promise-01,false), Span(1,2,List(2),council,council,false)),Map(2 -> council, 1 -> promise-01, 0 -> support-01),Map(s -> support-01, p -> promise-01, c -> council))),[Ljava.lang.String;@6e3b3e8e,Annotation([Ljava.lang.String;@7388152b,[Ljava.lang.String;@6b25f54e,[Ljava.lang.String;@90c0ad7),Annotation([Ljava.lang.String;@759bade4,[Ljava.lang.String;@3fb5900e,[Ledu.cmu.lti.nlp.amr.Dependency;@2904a7cf),Annotation([Ljava.lang.String;@70a51c12,[Ljava.lang.String;@67d61b84,[Ljava.lang.String;@19a8ac5e),Annotation([Ljava.lang.String;@10cc5c7b,[Ljava.lang.String;@58cb97da,[Ledu.cmu.lti.nlp.amr.Entity;@1e5e96c1))
AMR:
(p / promise-01, ARG0, c / council)
(s / support-01, ARG1, c / council)

Decoded in 5,612 microseconds
Sentence: id always promised myself a smart jersey dash

NER Entity: (country :name (name :op "jersey"))
Spans:
Span 1-2:  always => always
Span 0-1:  id => id
Span 2-3:  promised => promise-01
Span 5-6:  smart => smart

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),smart,smart,false), Span(2,3,List(1),promised,promise-01,false), Span(1,2,List(2),always,always,false), Span(0,1,List(3),id,id,false)),Map(2 -> always, 1 -> promise-01, 0 -> smart, 3 -> id),Map(s -> smart, p -> promise-01, a -> always, i -> id))),[Ljava.lang.String;@53fb687a,Annotation([Ljava.lang.String;@1e884ca9,[Ljava.lang.String;@660fae8,[Ljava.lang.String;@48f8989d),Annotation([Ljava.lang.String;@38eb90d8,[Ljava.lang.String;@71727219,[Ledu.cmu.lti.nlp.amr.Dependency;@10a1017f),Annotation([Ljava.lang.String;@3a694160,[Ljava.lang.String;@54432395,[Ljava.lang.String;@3d5366b),Annotation([Ljava.lang.String;@22e7acc4,[Ljava.lang.String;@17ff89c3,[Ledu.cmu.lti.nlp.amr.Entity;@9ad6d84))
AMR:
(p / promise-01, ARG0, i / id)
(p / promise-01, ARG1, s / smart)
(p / promise-01, time, a / always)

Decoded in 8,548 microseconds
Sentence: he took her to a pompous oyster bar around the corner as he had promised

Spans:
Span 8-9:  around => around
Span 7-8:  bar => bar-01
Span 10-11:  corner => corner
Span 12-13:  he => he
Span 0-1:  he => he
Span 14-15:  promised => promise-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),promised,promise-01,false), Span(12,13,List(1),he,he,false), Span(10,11,List(2),corner,corner,false), Span(8,9,List(3),around,around,false), Span(7,8,List(4),bar,bar-01,false), Span(0,1,List(5),he,he,false)),Map(2 -> corner, 5 -> he, 1 -> he, 4 -> bar-01, 0 -> promise-01, 3 -> around),Map(h -> he, h2 -> he, b -> bar-01, p -> promise-01, a -> around, c -> corner))),[Ljava.lang.String;@58f0fa12,Annotation([Ljava.lang.String;@34b1e15c,[Ljava.lang.String;@a427a0b,[Ljava.lang.String;@125a6d70),Annotation([Ljava.lang.String;@6ec6dd79,[Ljava.lang.String;@41f66bc0,[Ledu.cmu.lti.nlp.amr.Dependency;@191c2c15),Annotation([Ljava.lang.String;@8922394,[Ljava.lang.String;@325dcdf1,[Ljava.lang.String;@2c7ba30c),Annotation([Ljava.lang.String;@690d7fa4,[Ljava.lang.String;@75371ddd,[Ledu.cmu.lti.nlp.amr.Entity;@7589d449))
AMR:
(a / around, op, c / corner)
(b / bar-01, ARG1, h2 / he)
(b / bar-01, location, a / around)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, h2 / he)

Decoded in 81,349 microseconds
Sentence: no murky ending is what president george bush promised the us public in a nationally televised speech on november 29 1990 to whip up support for operation desert shield later renamed operation desert storm washingtons latest middle east military adventure

mkDayMonthYear(november	29	1990,29,november,1990)
mkDayMonthYear(29	1990,90,19,29)
Spans:
Span 7-8:  bush => bush-league
Span 32-33:  desert => desert
Span 27-28:  desert => desert
Span 37-38:  east => east
Span 2-3:  ending => end-01
Span 29-30:  later => late
Span 35-36:  latest => (late :degree most)
Span 36-37:  middle => middle
Span 38-39:  military => military
Span 0-1:  no => -
Span 18-21:  november 29 1990 => (date-entity :day 29 :month 11 :year 1990)
Span 31-32:  operation => operation
Span 26-27:  operation => operation
Span 5-6:  president => (have-org-role-91 :ARG2 president)
Span 8-9:  promised => promise-01
Span 11-12:  public => public
Span 28-29:  shield => shield
Span 16-17:  speech => speech
Span 33-34:  storm => storm
Span 24-25:  support => support-01
Span 15-16:  televised => televise-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),military,military,false), Span(37,38,List(1),east,east,false), Span(36,37,List(2),middle,middle,false), Span(35,36,List(4, 3),latest,(late :degree most),false), Span(33,34,List(5),storm,storm,false), Span(32,33,List(6),desert,desert,false), Span(31,32,List(7),operation,operation,false), Span(29,30,List(8),later,late,false), Span(28,29,List(9),shield,shield,false), Span(27,28,List(10),desert,desert,false), Span(26,27,List(11),operation,operation,false), Span(24,25,List(12),support,support-01,false), Span(18,21,List(16, 15, 14, 13),november 29 1990,(date-entity :day 29 :month 11 :year 1990),false), Span(16,17,List(17),speech,speech,false), Span(15,16,List(18),televised,televise-01,false), Span(11,12,List(19),public,public,false), Span(8,9,List(20),promised,promise-01,false), Span(7,8,List(21),bush,bush-league,false), Span(5,6,List(23, 22),president,(have-org-role-91 :ARG2 president),false), Span(2,3,List(24),ending,end-01,false), Span(0,1,List(25),no,-,false)),Map(2 -> middle, 5 -> storm, 12 -> support-01, 8 -> late, 15 -> 11, 21 -> bush-league, 18 -> televise-01, 24 -> end-01, 7 -> operation, 1 -> east, 17 -> speech, 23 -> president, 4 -> most, 11 -> operation, 14 -> 29, 20 -> promise-01, 6 -> desert, 9 -> shield, 0 -> military, 22 -> have-org-role-91, 16 -> 1990, 19 -> public, 10 -> desert, 3 -> late, 25 -> -, 13 -> date-entity),Map(m3 -> most, e -> east, h -> have-org-role-91, 2 -> 29, s2 -> shield, 12 -> 1990, t -> televise-01, b -> bush-league, m2 -> middle, d3 -> date-entity, p2 -> promise-01, e2 -> end-01, s -> storm, s4 -> speech, d -> desert, m -> military, 1 -> 11, p -> public, o2 -> operation, d2 -> desert, l2 -> late, - -> -, s3 -> support-01, l -> late, o -> operation, p3 -> president))),[Ljava.lang.String;@357506de,Annotation([Ljava.lang.String;@1615f43d,[Ljava.lang.String;@7b55dc1e,[Ljava.lang.String;@41e674d4),Annotation([Ljava.lang.String;@1002c19,[Ljava.lang.String;@324f1dd2,[Ledu.cmu.lti.nlp.amr.Dependency;@682edfcb),Annotation([Ljava.lang.String;@5d66bddc,[Ljava.lang.String;@43ae66c,[Ljava.lang.String;@36edbe9f),Annotation([Ljava.lang.String;@327dd4e5,[Ljava.lang.String;@63242048,[Ledu.cmu.lti.nlp.amr.Entity;@58c389d1))
AMR:
(d / desert, mod, o / operation)
(d3 / date-entity, day, 2 / 29)
(d3 / date-entity, month, 1 / 11)
(d3 / date-entity, year, 12 / 1990)
(e / east, mod, m2 / middle)
(e2 / end-01, ARG1, d3 / date-entity)
(e2 / end-01, polarity, - / -)
(h / have-org-role-91, ARG0, b / bush-league)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, p3 / president)
(l / late, degree, m3 / most)
(l / late, op, d3 / date-entity)
(l2 / late, op, s3 / support-01)
(o / operation, mod, m2 / middle)
(p2 / promise-01, ARG0, b / bush-league)
(p2 / promise-01, ARG1, e2 / end-01)
(p2 / promise-01, ARG2, p / public)
(s / storm, mod, d / desert)
(s2 / shield, mod, d2 / desert)
(s2 / shield, mod, o2 / operation)
(s3 / support-01, ARG0, b / bush-league)
(s3 / support-01, ARG1, s2 / shield)
(t / televise-01, ARG0, m2 / middle)
(t / televise-01, ARG1, s4 / speech)
(t / televise-01, time, d3 / date-entity)

Decoded in 1,244,048 microseconds
Sentence: he has already promised them to the secretary michael bonallack

NER Entity: (person :name (name :op "michael" :op "bonallack"))
Spans:
Span 2-3:  already => already
Span 0-1:  he => he
Span 8-10:  michael bonallack => (person :name (name :op "michael" :op "bonallack"))
Span 3-4:  promised => promise-01
Span 7-8:  secretary => secretary

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,10,List(3, 2, 1, 0),michael bonallack,(person :name (name :op "michael" :op "bonallack")),false), Span(7,8,List(4),secretary,secretary,false), Span(3,4,List(5),promised,promise-01,false), Span(2,3,List(6),already,already,false), Span(0,1,List(7),he,he,false)),Map(2 -> "michael", 5 -> promise-01, 7 -> he, 1 -> name, 4 -> secretary, 6 -> already, 0 -> person, 3 -> "bonallack"),Map(n -> name, h -> he, p2 -> promise-01, s -> secretary, p -> person, a -> already))),[Ljava.lang.String;@d8d25de,Annotation([Ljava.lang.String;@2db118c5,[Ljava.lang.String;@45d144f2,[Ljava.lang.String;@2e058fad),Annotation([Ljava.lang.String;@6f1bbe75,[Ljava.lang.String;@6752c50,[Ledu.cmu.lti.nlp.amr.Dependency;@76b03b7f),Annotation([Ljava.lang.String;@2c124bb9,[Ljava.lang.String;@65297549,[Ljava.lang.String;@4d33f82),Annotation([Ljava.lang.String;@48ee7247,[Ljava.lang.String;@1e90b8b9,[Ledu.cmu.lti.nlp.amr.Entity;@2f4f895c))
AMR:
(n / name, op, "bonallack")
(n / name, op, "michael")
(p / person, mod, s / secretary)
(p / person, name, n / name)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG2, p / person)
(p2 / promise-01, time, a / already)

Decoded in 16,344 microseconds
Sentence: the mini master with the 582 promises a takeoff roll of 650 ft landing roll of 520 ft and a range of 575 miles without reserve at a 75 per cent cruise of 110 mph

Spans:
Span 33-34:  110 => 110
Span 28-29:  75 => 75
Span 18-19:  and => and
Span 30-31:  cent => (monetary-quantity :unit cent)
Span 31-32:  cruise => cruise
Span 13-14:  landing => land-01
Span 2-3:  master => master
Span 23-24:  miles => (distance-quantity :unit mile)
Span 1-2:  mini => mini-vassal
Span 6-7:  promises => promise-01
Span 20-21:  range => range-01
Span 25-26:  reserve => reserve-01
Span 14-15:  roll => roll
Span 9-10:  roll => roll
Span 8-9:  takeoff => take-08

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),110,110,false), Span(31,32,List(1),cruise,cruise,false), Span(30,31,List(3, 2),cent,(monetary-quantity :unit cent),false), Span(28,29,List(4),75,75,false), Span(25,26,List(5),reserve,reserve-01,false), Span(23,24,List(7, 6),miles,(distance-quantity :unit mile),false), Span(20,21,List(8),range,range-01,false), Span(18,19,List(9),and,and,false), Span(14,15,List(10),roll,roll,false), Span(13,14,List(11),landing,land-01,false), Span(9,10,List(12),roll,roll,false), Span(8,9,List(13),takeoff,take-08,false), Span(6,7,List(14),promises,promise-01,false), Span(2,3,List(15),master,master,false), Span(1,2,List(16),mini,mini-vassal,false)),Map(2 -> monetary-quantity, 5 -> reserve-01, 12 -> roll, 15 -> master, 8 -> range-01, 7 -> mile, 1 -> cruise, 4 -> 75, 11 -> land-01, 14 -> promise-01, 6 -> distance-quantity, 0 -> 110, 9 -> and, 16 -> mini-vassal, 3 -> cent, 10 -> roll, 13 -> take-08),Map(m3 -> master, r3 -> roll, t -> take-08, m2 -> mile, m -> monetary-quantity, 7 -> 75, d -> distance-quantity, 1 -> 110, p -> promise-01, r2 -> range-01, a -> and, m4 -> mini-vassal, r -> reserve-01, r4 -> roll, c -> cruise, l -> land-01, c2 -> cent))),[Ljava.lang.String;@ec30f48,Annotation([Ljava.lang.String;@2820478a,[Ljava.lang.String;@5f38c99a,[Ljava.lang.String;@93bce4d),Annotation([Ljava.lang.String;@356525f7,[Ljava.lang.String;@39f9684,[Ledu.cmu.lti.nlp.amr.Dependency;@6252b5f7),Annotation([Ljava.lang.String;@24289d8f,[Ljava.lang.String;@668029d4,[Ljava.lang.String;@683a51de),Annotation([Ljava.lang.String;@4cd4fb47,[Ljava.lang.String;@32bd19b9,[Ledu.cmu.lti.nlp.amr.Entity;@1ce3dab5))
AMR:
(a / and, op, l / land-01)
(a / and, op, p / promise-01)
(a / and, op, r2 / range-01)
(a / and, op, r3 / roll)
(c / cruise, mod, m / monetary-quantity)
(d / distance-quantity, unit, m2 / mile)
(l / land-01, ARG1, 1 / 110)
(m / monetary-quantity, unit, c2 / cent)
(m3 / master, mod, m4 / mini-vassal)
(p / promise-01, ARG0, m3 / master)
(p / promise-01, ARG1, r4 / roll)
(r / reserve-01, ARG0, m3 / master)
(r2 / range-01, ARG4, d / distance-quantity)
(r4 / roll, mod, t / take-08)
(t / take-08, ARG0, 7 / 75)
(t / take-08, ARG1, m / monetary-quantity)

Decoded in 296,341 microseconds
Sentence: the communist party has said it will renounce its leading role in government and has promised free elections but many of bulgarias burgeoning opposition groups say these pledges do not go far enough

Spans:
Span 13-14:  and => and
Span 22-23:  burgeoning => burgeon-01
Span 18-19:  but => contrast-01
Span 1-3:  communist party => (political-party :name (name :op "Party" :op "Communist"))
Span 17-18:  elections => elect-01
Span 32-33:  enough => enough
Span 31-32:  far => far
Span 16-17:  free => free-41
Span 24-25:  groups => group
Span 5-6:  it => it
Span 9-10:  leading => lead-01
Span 19-20:  many => many
Span 23-24:  opposition => oppose-01
Span 27-28:  pledges => pledge-01
Span 15-16:  promised => promise-01
Span 7-8:  renounce => renounce-01
Span 10-11:  role => role
Span 4-5:  said => say-01
Span 25-26:  say => say-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),enough,enough,false), Span(31,32,List(1),far,far,false), Span(27,28,List(2),pledges,pledge-01,false), Span(25,26,List(3),say,say-01,false), Span(24,25,List(4),groups,group,false), Span(23,24,List(5),opposition,oppose-01,false), Span(22,23,List(6),burgeoning,burgeon-01,false), Span(19,20,List(7),many,many,false), Span(18,19,List(8),but,contrast-01,false), Span(17,18,List(9),elections,elect-01,false), Span(16,17,List(10),free,free-41,false), Span(15,16,List(11),promised,promise-01,false), Span(13,14,List(12),and,and,false), Span(10,11,List(13),role,role,false), Span(9,10,List(14),leading,lead-01,false), Span(7,8,List(15),renounce,renounce-01,false), Span(5,6,List(16),it,it,false), Span(4,5,List(17),said,say-01,false), Span(1,3,List(21, 20, 19, 18),communist party,(political-party :name (name :op "Party" :op "Communist")),false)),Map(2 -> pledge-01, 5 -> oppose-01, 12 -> and, 15 -> renounce-01, 8 -> contrast-01, 21 -> "Communist", 18 -> political-party, 7 -> many, 17 -> say-01, 1 -> far, 4 -> group, 11 -> promise-01, 14 -> lead-01, 20 -> "Party", 6 -> burgeon-01, 0 -> enough, 9 -> elect-01, 16 -> it, 19 -> name, 3 -> say-01, 10 -> free-41, 13 -> role),Map(e -> enough, n -> name, s2 -> say-01, b -> burgeon-01, e2 -> elect-01, p2 -> promise-01, s -> say-01, m -> many, r2 -> renounce-01, p -> pledge-01, g -> group, a -> and, i -> it, r -> role, c -> contrast-01, l -> lead-01, f2 -> free-41, f -> far, o -> oppose-01, p3 -> political-party))),[Ljava.lang.String;@7928bbfa,Annotation([Ljava.lang.String;@614d583a,[Ljava.lang.String;@1cdb79be,[Ljava.lang.String;@d15b7bf),Annotation([Ljava.lang.String;@cd2634f,[Ljava.lang.String;@4875de1c,[Ledu.cmu.lti.nlp.amr.Dependency;@3249256e),Annotation([Ljava.lang.String;@6038728c,[Ljava.lang.String;@19e876ae,[Ljava.lang.String;@6cc7a6cb),Annotation([Ljava.lang.String;@27979138,[Ljava.lang.String;@4fbf07d6,[Ledu.cmu.lti.nlp.amr.Entity;@69b9b81))
AMR:
(a / and, op, p2 / promise-01)
(b / burgeon-01, ARG1, g / group)
(c / contrast-01, ARG1, m / many)
(f / far, degree, e / enough)
(f2 / free-41, ARG1, e2 / elect-01)
(l / lead-01, ARG0, r / role)
(l / lead-01, ARG1, f / far)
(n / name, op, "Communist")
(n / name, op, "Party")
(o / oppose-01, ARG0, g / group)
(p2 / promise-01, ARG0, p3 / political-party)
(p2 / promise-01, ARG1, c / contrast-01)
(p2 / promise-01, ARG2, e2 / elect-01)
(p3 / political-party, name, n / name)
(r2 / renounce-01, ARG0, i / it)
(r2 / renounce-01, ARG1, r / role)
(s / say-01, ARG0, g / group)
(s / say-01, ARG1, p / pledge-01)
(s / say-01, mod, m / many)
(s2 / say-01, ARG0, p3 / political-party)
(s2 / say-01, ARG1, r2 / renounce-01)

Decoded in 589,409 microseconds
Sentence: there are a limited number of places available for what promises to be an enormously enjoyable occasion so tickets at 15

Spans:
Span 20-21:  15 => 15
Span 7-8:  available => available
Span 14-15:  enormously => enormous
Span 3-4:  limited => limit-01
Span 4-5:  number => number
Span 16-17:  occasion => occasion
Span 6-7:  places => place
Span 10-11:  promises => promise-01
Span 17-18:  so => so
Span 18-19:  tickets => ticket

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),15,15,false), Span(18,19,List(1),tickets,ticket,false), Span(17,18,List(2),so,so,false), Span(16,17,List(3),occasion,occasion,false), Span(14,15,List(4),enormously,enormous,false), Span(10,11,List(5),promises,promise-01,false), Span(7,8,List(6),available,available,false), Span(6,7,List(7),places,place,false), Span(4,5,List(8),number,number,false), Span(3,4,List(9),limited,limit-01,false)),Map(2 -> so, 5 -> promise-01, 8 -> number, 7 -> place, 1 -> ticket, 4 -> enormous, 6 -> available, 9 -> limit-01, 0 -> 15, 3 -> occasion),Map(n -> number, e -> enormous, t -> ticket, p2 -> place, s -> so, p -> promise-01, 1 -> 15, a -> available, l -> limit-01, o -> occasion))),[Ljava.lang.String;@51fe358a,Annotation([Ljava.lang.String;@86d2114,[Ljava.lang.String;@3496ac5e,[Ljava.lang.String;@100e6a4b),Annotation([Ljava.lang.String;@22646a29,[Ljava.lang.String;@6e75bb62,[Ledu.cmu.lti.nlp.amr.Dependency;@73615795),Annotation([Ljava.lang.String;@7bbd3260,[Ljava.lang.String;@42367c17,[Ljava.lang.String;@70cebf7),Annotation([Ljava.lang.String;@6157a8be,[Ljava.lang.String;@420783df,[Ledu.cmu.lti.nlp.amr.Entity;@7b62c756))
AMR:
(a / available, compared-to, p / promise-01)
(l / limit-01, ARG0, e / enormous)
(l / limit-01, ARG1, n / number)
(p / promise-01, ARG0, 1 / 15)
(p / promise-01, ARG1, o / occasion)
(p / promise-01, manner, l / limit-01)
(p2 / place, quant, n / number)
(s / so, op, 1 / 15)
(t / ticket, mod, s / so)

Decoded in 87,340 microseconds
Sentence: hammersmith in west london home of some all too visible faceless architecture has been chosen as the site of what promises to be one of britains most remarkable buildings an enormous office block designed on natural lines by the royal gold medallist ralph erskine jonathan glancey writes

Spans:
Span 7-8:  all => all
Span 32-33:  block => block-01
Span 28-29:  buildings => building
Span 14-15:  chosen => choose-01
Span 33-34:  designed => design-01
Span 30-31:  enormous => enormous
Span 40-41:  gold => gold
Span 4-5:  home => home
Span 36-37:  lines => line
Span 3-4:  london => (city :name (name :op "London"))
Span 26-27:  most => most
Span 35-36:  natural => natural
Span 31-32:  office => office
Span 20-21:  promises => promise-01
Span 27-28:  remarkable => remarkable
Span 39-40:  royal => royal
Span 17-18:  site => site
Span 6-7:  some => some
Span 8-9:  too => too
Span 9-10:  visible => visible
Span 2-3:  west => west
Span 46-47:  writes => write-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),writes,write-01,false), Span(40,41,List(1),gold,gold,false), Span(39,40,List(2),royal,royal,false), Span(36,37,List(3),lines,line,false), Span(35,36,List(4),natural,natural,false), Span(33,34,List(5),designed,design-01,false), Span(32,33,List(6),block,block-01,false), Span(31,32,List(7),office,office,false), Span(30,31,List(8),enormous,enormous,false), Span(28,29,List(9),buildings,building,false), Span(27,28,List(10),remarkable,remarkable,false), Span(26,27,List(11),most,most,false), Span(20,21,List(12),promises,promise-01,false), Span(17,18,List(13),site,site,false), Span(14,15,List(14),chosen,choose-01,false), Span(9,10,List(15),visible,visible,false), Span(8,9,List(16),too,too,false), Span(7,8,List(17),all,all,false), Span(6,7,List(18),some,some,false), Span(4,5,List(19),home,home,false), Span(3,4,List(22, 21, 20),london,(city :name (name :op "London")),false), Span(2,3,List(23),west,west,false)),Map(2 -> royal, 5 -> design-01, 12 -> promise-01, 15 -> visible, 8 -> enormous, 21 -> name, 18 -> some, 7 -> office, 17 -> all, 1 -> gold, 23 -> west, 4 -> natural, 11 -> most, 14 -> choose-01, 20 -> city, 6 -> block-01, 22 -> "London", 0 -> write-01, 9 -> building, 16 -> too, 19 -> home, 3 -> line, 10 -> remarkable, 13 -> site),Map(e -> enormous, w -> write-01, n -> natural, h -> home, s2 -> some, t -> too, b -> block-01, b2 -> building, s -> site, v -> visible, d -> design-01, m -> most, g -> gold, r2 -> remarkable, p -> promise-01, a -> all, w2 -> west, r -> royal, c -> choose-01, l -> line, o -> office, n2 -> name, c2 -> city))),[Ljava.lang.String;@1b45fed7,Annotation([Ljava.lang.String;@105de33e,[Ljava.lang.String;@3f203d7,[Ljava.lang.String;@5da1a47),Annotation([Ljava.lang.String;@31f32e51,[Ljava.lang.String;@5465e175,[Ledu.cmu.lti.nlp.amr.Dependency;@6cb4f39c),Annotation([Ljava.lang.String;@5be5be85,[Ljava.lang.String;@483f3ce5,[Ljava.lang.String;@2fb70371),Annotation([Ljava.lang.String;@18430830,[Ljava.lang.String;@58ce93c1,[Ledu.cmu.lti.nlp.amr.Entity;@62469173))
AMR:
(a / all, op, b / block-01)
(b / block-01, ARG1, o / office)
(b / block-01, location, l / line)
(b / block-01, mod, e / enormous)
(b2 / building, mod, r2 / remarkable)
(c / choose-01, ARG0, n / natural)
(c / choose-01, ARG1, h / home)
(c / choose-01, location, s / site)
(c2 / city, name, n2 / name)
(d / design-01, ARG1, b / block-01)
(d / design-01, ARG3, b2 / building)
(g / gold, mod, r / royal)
(h / home, location, c2 / city)
(h / home, mod, w2 / west)
(l / line, location, g / gold)
(n2 / name, op, "London")
(p / promise-01, ARG1, s2 / some)
(r2 / remarkable, degree, m / most)
(s / site, beneficiary, p / promise-01)
(v / visible, degree, t / too)
(v / visible, op, b / block-01)
(w / write-01, ARG0, d / design-01)
(w / write-01, ARG1, p / promise-01)

Decoded in 945,365 microseconds
Sentence: the economic crisis faced by third world debtors was set yesterday to become a key issue of the annual economic summit as japan promised new proposals for debt relief and third world leaders stepped up the pressure for more help

NER Entity: (country :name (name :op "japan"))
Spans:
Span 29-30:  and => and
Span 12-13:  become => become-01
Span 2-3:  crisis => crisis
Span 27-28:  debt => debt
Span 7-8:  debtors => debtor
Span 19-20:  economic => economy
Span 1-2:  economic => economy
Span 3-4:  faced => face-01
Span 39-40:  help => help-01
Span 15-16:  issue => issue
Span 14-15:  key => key
Span 32-33:  leaders => (person :ARG0-of lead-02)
Span 24-25:  new => new
Span 36-37:  pressure => pressure-01
Span 23-24:  promised => promise-01
Span 25-26:  proposals => (thing :ARG1-of propose-01)
Span 28-29:  relief => relieve-01
Span 33-34:  stepped => step-02
Span 20-21:  summit => summit
Span 31-32:  world => world
Span 6-7:  world => world
Span 10-11:  yesterday => yesterday

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),help,help-01,false), Span(36,37,List(1),pressure,pressure-01,false), Span(33,34,List(2),stepped,step-02,false), Span(32,33,List(4, 3),leaders,(person :ARG0-of lead-02),false), Span(31,32,List(5),world,world,false), Span(29,30,List(6),and,and,false), Span(28,29,List(7),relief,relieve-01,false), Span(27,28,List(8),debt,debt,false), Span(25,26,List(10, 9),proposals,(thing :ARG1-of propose-01),false), Span(24,25,List(11),new,new,false), Span(23,24,List(12),promised,promise-01,false), Span(20,21,List(13),summit,summit,false), Span(19,20,List(14),economic,economy,false), Span(15,16,List(15),issue,issue,false), Span(14,15,List(16),key,key,false), Span(12,13,List(17),become,become-01,false), Span(10,11,List(18),yesterday,yesterday,false), Span(7,8,List(19),debtors,debtor,false), Span(6,7,List(20),world,world,false), Span(3,4,List(21),faced,face-01,false), Span(2,3,List(22),crisis,crisis,false), Span(1,2,List(23),economic,economy,false)),Map(2 -> step-02, 5 -> world, 12 -> promise-01, 15 -> issue, 8 -> debt, 21 -> face-01, 18 -> yesterday, 7 -> relieve-01, 17 -> become-01, 1 -> pressure-01, 23 -> economy, 4 -> lead-02, 11 -> new, 14 -> economy, 20 -> world, 6 -> and, 22 -> crisis, 0 -> help-01, 9 -> thing, 16 -> key, 19 -> debtor, 3 -> person, 10 -> propose-01, 13 -> summit),Map(e -> economy, w -> world, n -> new, h -> help-01, s2 -> summit, b -> become-01, k -> key, t -> thing, e2 -> economy, p2 -> person, s -> step-02, d -> debt, y -> yesterday, p -> pressure-01, a -> and, p4 -> promise-01, d2 -> debtor, w2 -> world, i -> issue, r -> relieve-01, c -> crisis, l -> lead-02, f -> face-01, p3 -> propose-01))),[Ljava.lang.String;@547248ad,Annotation([Ljava.lang.String;@1b01812b,[Ljava.lang.String;@7fc73be6,[Ljava.lang.String;@712dba93),Annotation([Ljava.lang.String;@713442f1,[Ljava.lang.String;@1e171647,[Ledu.cmu.lti.nlp.amr.Dependency;@7db79ebf),Annotation([Ljava.lang.String;@22174e14,[Ljava.lang.String;@28071488,[Ljava.lang.String;@68d5013f),Annotation([Ljava.lang.String;@784504dd,[Ljava.lang.String;@7b4286da,[Ledu.cmu.lti.nlp.amr.Entity;@4ca3916e))
AMR:
(a / and, op, b / become-01)
(a / and, op, p2 / person)
(b / become-01, ARG1, c / crisis)
(b / become-01, ARG2, i / issue)
(b / become-01, time, p4 / promise-01)
(c / crisis, mod, e2 / economy)
(d2 / debtor, mod, w2 / world)
(f / face-01, ARG0, d2 / debtor)
(f / face-01, ARG1, c / crisis)
(i / issue, mod, k / key)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, w / world)
(p / pressure-01, ARG1, t / thing)
(p / pressure-01, ARG2, h / help-01)
(p3 / propose-01, ARG1, t / thing)
(p3 / propose-01, ARG2, r / relieve-01)
(p4 / promise-01, ARG1, s / step-02)
(p4 / promise-01, prep-with, d / debt)
(s / step-02, ARG0, y / yesterday)
(s / step-02, ARG1, p / pressure-01)
(s / step-02, ARG2, s2 / summit)
(s2 / summit, mod, e / economy)
(t / thing, mod, n / new)

Decoded in 1,136,801 microseconds
Sentence: the electricity supply industry will be privatised as promised

Spans:
Span 1-2:  electricity => electricity
Span 3-4:  industry => industry
Span 8-9:  promised => promise-01
Span 2-3:  supply => supply-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promised,promise-01,false), Span(3,4,List(1),industry,industry,false), Span(2,3,List(2),supply,supply-01,false), Span(1,2,List(3),electricity,electricity,false)),Map(2 -> supply-01, 1 -> industry, 0 -> promise-01, 3 -> electricity),Map(e -> electricity, s -> supply-01, p -> promise-01, i -> industry))),[Ljava.lang.String;@6a0f411,Annotation([Ljava.lang.String;@30f78b7d,[Ljava.lang.String;@4be6d4a8,[Ljava.lang.String;@1f938886),Annotation([Ljava.lang.String;@ee8259c,[Ljava.lang.String;@2afd2c69,[Ledu.cmu.lti.nlp.amr.Dependency;@536eb78b),Annotation([Ljava.lang.String;@9d43178,[Ljava.lang.String;@49fbc252,[Ljava.lang.String;@2f92bb70),Annotation([Ljava.lang.String;@4a4fce76,[Ljava.lang.String;@3d7bcb17,[Ledu.cmu.lti.nlp.amr.Entity;@a52728a))
AMR:
(p / promise-01, ARG1, s / supply-01)
(s / supply-01, ARG0, i / industry)
(s / supply-01, ARG1, e / electricity)

Decoded in 60,618 microseconds
Sentence: i cant see much harm in what you propose just so long as you promise me not to let it go further

Spans:
Span 21-22:  further => further
Span 4-5:  harm => harm-01
Span 0-1:  i => i
Span 19-20:  it => it
Span 9-10:  just => just
Span 18-19:  let => let-01
Span 3-4:  much => much
Span 14-15:  promise => promise-01
Span 8-9:  propose => propose-01
Span 2-3:  see => see-01
Span 10-11:  so => so
Span 13-14:  you => you
Span 7-8:  you => you

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),further,further,false), Span(19,20,List(1),it,it,false), Span(18,19,List(2),let,let-01,false), Span(14,15,List(3),promise,promise-01,false), Span(13,14,List(4),you,you,false), Span(10,11,List(5),so,so,false), Span(9,10,List(6),just,just,false), Span(8,9,List(7),propose,propose-01,false), Span(7,8,List(8),you,you,false), Span(4,5,List(9),harm,harm-01,false), Span(3,4,List(10),much,much,false), Span(2,3,List(11),see,see-01,false), Span(0,1,List(12),i,i,false)),Map(2 -> let-01, 5 -> so, 12 -> i, 8 -> you, 7 -> propose-01, 1 -> it, 4 -> you, 11 -> see-01, 6 -> just, 0 -> further, 9 -> harm-01, 3 -> promise-01, 10 -> much),Map(h -> harm-01, s2 -> see-01, p2 -> propose-01, j -> just, s -> so, m -> much, p -> promise-01, y -> you, i2 -> i, i -> it, l -> let-01, f -> further, y2 -> you))),[Ljava.lang.String;@2addc751,Annotation([Ljava.lang.String;@4648acd3,[Ljava.lang.String;@4d4a74b1,[Ljava.lang.String;@5333381b),Annotation([Ljava.lang.String;@47a89f49,[Ljava.lang.String;@f719660,[Ledu.cmu.lti.nlp.amr.Dependency;@6a47808b),Annotation([Ljava.lang.String;@7c485c2f,[Ljava.lang.String;@729c5167,[Ljava.lang.String;@74a47bf9),Annotation([Ljava.lang.String;@5ac75442,[Ljava.lang.String;@546ce79d,[Ledu.cmu.lti.nlp.amr.Entity;@39da1fb8))
AMR:
(h / harm-01, ARG1, y / you)
(h / harm-01, quant, m / much)
(l / let-01, ARG0, f / further)
(l / let-01, ARG1, i / it)
(p / promise-01, ARG0, y / you)
(p / promise-01, ARG4, l / let-01)
(p2 / propose-01, ARG0, y / you)
(p2 / propose-01, ARG1, y2 / you)
(p2 / propose-01, ARG2, s / so)
(p2 / propose-01, concession, j / just)
(s2 / see-01, ARG0, i2 / i)
(s2 / see-01, ARG1, h / harm-01)

Decoded in 433,234 microseconds
Sentence: the national covenant had already been weakened by chamouns decision to accept the eisenhower doctrine under which the united states promised to use its forces to help any nation which requested assistance against aggressors controlled by international communism

NER Entity: (country :name (name :op "united" :op "states"))
Spans:
Span 11-12:  accept => accept-01
Span 33-34:  aggressors => aggressor
Span 4-5:  already => already
Span 27-28:  any => any
Span 31-32:  assistance => assist-01
Span 37-38:  communism => communism
Span 34-35:  controlled => control-01
Span 9-10:  decision => decide-01
Span 14-15:  doctrine => doctrine
Span 24-25:  forces => force
Span 26-27:  help => help-01
Span 36-37:  international => international
Span 28-29:  nation => nation
Span 1-2:  national => nation
Span 20-21:  promised => promise-01
Span 30-31:  requested => request-01
Span 18-20:  united states => (country :name (name :op "united" :op "states"))
Span 22-23:  use => use-01
Span 6-7:  weakened => weaken-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),communism,communism,false), Span(36,37,List(1),international,international,false), Span(34,35,List(2),controlled,control-01,false), Span(33,34,List(3),aggressors,aggressor,false), Span(31,32,List(4),assistance,assist-01,false), Span(30,31,List(5),requested,request-01,false), Span(28,29,List(6),nation,nation,false), Span(27,28,List(7),any,any,false), Span(26,27,List(8),help,help-01,false), Span(24,25,List(9),forces,force,false), Span(22,23,List(10),use,use-01,false), Span(20,21,List(11),promised,promise-01,false), Span(18,20,List(15, 14, 13, 12),united states,(country :name (name :op "united" :op "states")),false), Span(14,15,List(16),doctrine,doctrine,false), Span(11,12,List(17),accept,accept-01,false), Span(9,10,List(18),decision,decide-01,false), Span(6,7,List(19),weakened,weaken-01,false), Span(4,5,List(20),already,already,false), Span(1,2,List(21),national,nation,false)),Map(2 -> control-01, 5 -> request-01, 12 -> country, 15 -> "states", 8 -> help-01, 21 -> nation, 18 -> decide-01, 7 -> any, 17 -> accept-01, 1 -> international, 4 -> assist-01, 11 -> promise-01, 14 -> "united", 20 -> already, 6 -> nation, 0 -> communism, 9 -> force, 16 -> doctrine, 19 -> weaken-01, 3 -> aggressor, 10 -> use-01, 13 -> name),Map(w -> weaken-01, n -> nation, h -> help-01, a3 -> any, d -> doctrine, p -> promise-01, n3 -> nation, a -> aggressor, c3 -> country, a5 -> already, d2 -> decide-01, i -> international, a2 -> assist-01, r -> request-01, c -> communism, u -> use-01, f -> force, n2 -> name, c2 -> control-01, a4 -> accept-01))),[Ljava.lang.String;@6f731eba,Annotation([Ljava.lang.String;@6ee67e7f,[Ljava.lang.String;@5e7afcba,[Ljava.lang.String;@5c6647cb),Annotation([Ljava.lang.String;@3ef38fd1,[Ljava.lang.String;@686702a0,[Ledu.cmu.lti.nlp.amr.Dependency;@42dd8bec),Annotation([Ljava.lang.String;@5f0d553f,[Ljava.lang.String;@6457cbd9,[Ljava.lang.String;@40084706),Annotation([Ljava.lang.String;@5f6efbc1,[Ljava.lang.String;@6f526cd9,[Ledu.cmu.lti.nlp.amr.Entity;@c6853a8))
AMR:
(a2 / assist-01, ARG1, c2 / control-01)
(a4 / accept-01, ARG1, d / doctrine)
(a4 / accept-01, condition, u / use-01)
(c / communism, mod, i / international)
(c2 / control-01, ARG0, c / communism)
(c2 / control-01, ARG1, a / aggressor)
(c3 / country, name, n2 / name)
(h / help-01, ARG1, n / nation)
(n / nation, mod, a3 / any)
(n2 / name, op, "states")
(n2 / name, op, "united")
(p / promise-01, ARG0, c3 / country)
(p / promise-01, ARG1, u / use-01)
(r / request-01, ARG0, n / nation)
(r / request-01, ARG1, a2 / assist-01)
(u / use-01, ARG0, n3 / nation)
(u / use-01, ARG1, f / force)
(u / use-01, ARG2, h / help-01)
(w / weaken-01, ARG0, d2 / decide-01)
(w / weaken-01, purpose, a4 / accept-01)
(w / weaken-01, time, a5 / already)

Decoded in 990,843 microseconds
Sentence: promising a better yesterday

Spans:
Span 0-1:  promising => promise-01
Span 3-4:  yesterday => yesterday

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),yesterday,yesterday,false), Span(0,1,List(1),promising,promise-01,false)),Map(1 -> promise-01, 0 -> yesterday),Map(p -> promise-01, y -> yesterday))),[Ljava.lang.String;@154c40f5,Annotation([Ljava.lang.String;@413c9fbf,[Ljava.lang.String;@731bd60e,[Ljava.lang.String;@28826c2c),Annotation([Ljava.lang.String;@a8bd17b,[Ljava.lang.String;@6165e7a5,[Ledu.cmu.lti.nlp.amr.Dependency;@694b3397),Annotation([Ljava.lang.String;@48283482,[Ljava.lang.String;@478f67d0,[Ljava.lang.String;@17e8ad64),Annotation([Ljava.lang.String;@2ccf8c7f,[Ljava.lang.String;@6e10fcd4,[Ledu.cmu.lti.nlp.amr.Entity;@1d46fac0))
AMR:
(p / promise-01, time, y / yesterday)

Decoded in 3,669 microseconds
Sentence: the last time the maronites promised reforms dash

Spans:
Span 1-2:  last => last
Span 5-6:  promised => promise-01
Span 6-7:  reforms => reform-01
Span 2-3:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),reforms,reform-01,false), Span(5,6,List(1),promised,promise-01,false), Span(2,3,List(2),time,time,false), Span(1,2,List(3),last,last,false)),Map(2 -> time, 1 -> promise-01, 0 -> reform-01, 3 -> last),Map(t -> time, p -> promise-01, r -> reform-01, l -> last))),[Ljava.lang.String;@1ef86244,Annotation([Ljava.lang.String;@44fb6e3e,[Ljava.lang.String;@5702cbd3,[Ljava.lang.String;@7893b645),Annotation([Ljava.lang.String;@29a3a9db,[Ljava.lang.String;@37e47e38,[Ledu.cmu.lti.nlp.amr.Dependency;@7a1aab32),Annotation([Ljava.lang.String;@6cdd9e3e,[Ljava.lang.String;@49c03048,[Ljava.lang.String;@68a1eccb),Annotation([Ljava.lang.String;@5ec13917,[Ljava.lang.String;@5f8b459a,[Ledu.cmu.lti.nlp.amr.Entity;@3086b277))
AMR:
(p / promise-01, ARG0, t / time)
(p / promise-01, ARG1, r / reform-01)
(t / time, mod, l / last)

Decoded in 8,663 microseconds
Sentence: he pazzi does not favour it but has promised to consider it and the matter is still under discussion

Spans:
Span 12-13:  and => and
Span 6-7:  but => contrast-01
Span 10-11:  consider => consider-02
Span 18-19:  discussion => discuss-01
Span 4-5:  favour => favor-01
Span 0-1:  he => he
Span 11-12:  it => it
Span 5-6:  it => it
Span 14-15:  matter => matter
Span 8-9:  promised => promise-01
Span 16-17:  still => still

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),discussion,discuss-01,false), Span(16,17,List(1),still,still,false), Span(14,15,List(2),matter,matter,false), Span(12,13,List(3),and,and,false), Span(11,12,List(4),it,it,false), Span(10,11,List(5),consider,consider-02,false), Span(8,9,List(6),promised,promise-01,false), Span(6,7,List(7),but,contrast-01,false), Span(5,6,List(8),it,it,false), Span(4,5,List(9),favour,favor-01,false), Span(0,1,List(10),he,he,false)),Map(2 -> matter, 5 -> consider-02, 8 -> it, 7 -> contrast-01, 1 -> still, 4 -> it, 6 -> promise-01, 9 -> favor-01, 0 -> discuss-01, 10 -> he, 3 -> and),Map(h -> he, s -> still, m -> matter, d -> discuss-01, p -> promise-01, a -> and, i2 -> it, i -> it, c -> consider-02, f -> favor-01, c2 -> contrast-01))),[Ljava.lang.String;@5b2ebb84,Annotation([Ljava.lang.String;@591905e0,[Ljava.lang.String;@79d0e2d2,[Ljava.lang.String;@db8779),Annotation([Ljava.lang.String;@4c9b195f,[Ljava.lang.String;@5a9ed343,[Ledu.cmu.lti.nlp.amr.Dependency;@7140022f),Annotation([Ljava.lang.String;@214f95bf,[Ljava.lang.String;@6ff03fae,[Ljava.lang.String;@5e4f1ec),Annotation([Ljava.lang.String;@79c6bff9,[Ljava.lang.String;@6765b2e4,[Ledu.cmu.lti.nlp.amr.Entity;@45c3cbc4))
AMR:
(a / and, op, m / matter)
(a / and, op, p / promise-01)
(c / consider-02, ARG1, i / it)
(c2 / contrast-01, ARG2, p / promise-01)
(d / discuss-01, ARG1, a / and)
(d / discuss-01, manner, s / still)
(f / favor-01, ARG0, h / he)
(f / favor-01, ARG1, i2 / it)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, c / consider-02)

Decoded in 46,622 microseconds
Sentence: was shakespeare in fact an arab  a muslim magazine launched today promises to tackle such topics with irreverent humour and muslim selfconfidence writes jack osullivan

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = was shakespeare in fact an arab  a muslim magazine launched today promises to tackle such topics with irreverent humour and muslim selfconfidence writes jack osullivan
myTokenized = was shakespeare in fact an arab a muslim magazine launched today promises to tackle such topics with irreverent humour and muslim selfconfidence writes jack osullivan
i = 6
prefix = List(was, shakespeare, in, fact, an, arab, a)
regexr = \Qw\E ?\Qa\E ?\Qs\E ?\Qs\E ?\Qh\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qs\E ?\Qp\E ?\Qe\E ?\Qa\E ?\Qr\E ?\Qe\E ?\Qi\E ?\Qn\E ?\Qf\E ?\Qa\E ?\Qc\E ?\Qt\E ?\Qa\E ?\Qn\E ?\Qa\E ?\Qr\E ?\Qa\E ?\Qb\E ?\Qa\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: hospital chiefs have launched an inquiry and promised to tighten security

Spans:
Span 6-7:  and => and
Span 1-2:  chiefs => (have-org-role-91 :ARG2 chief)
Span 0-1:  hospital => hospital
Span 5-6:  inquiry => inquire-01
Span 3-4:  launched => launch-01
Span 7-8:  promised => promise-01
Span 10-11:  security => security
Span 9-10:  tighten => tighten-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),security,security,false), Span(9,10,List(1),tighten,tighten-01,false), Span(7,8,List(2),promised,promise-01,false), Span(6,7,List(3),and,and,false), Span(5,6,List(4),inquiry,inquire-01,false), Span(3,4,List(5),launched,launch-01,false), Span(1,2,List(7, 6),chiefs,(have-org-role-91 :ARG2 chief),false), Span(0,1,List(8),hospital,hospital,false)),Map(2 -> promise-01, 5 -> launch-01, 8 -> hospital, 7 -> chief, 1 -> tighten-01, 4 -> inquire-01, 6 -> have-org-role-91, 0 -> security, 3 -> and),Map(h -> have-org-role-91, h2 -> hospital, t -> tighten-01, s -> security, p -> promise-01, a -> and, i -> inquire-01, c -> chief, l -> launch-01))),[Ljava.lang.String;@28827875,Annotation([Ljava.lang.String;@db25e1a,[Ljava.lang.String;@394003fc,[Ljava.lang.String;@19c5b2c1),Annotation([Ljava.lang.String;@25aaa1f,[Ljava.lang.String;@e56da6e,[Ledu.cmu.lti.nlp.amr.Dependency;@681e731c),Annotation([Ljava.lang.String;@271768ab,[Ljava.lang.String;@71d8c699,[Ljava.lang.String;@4ed6a133),Annotation([Ljava.lang.String;@6cf143b4,[Ljava.lang.String;@5394164c,[Ledu.cmu.lti.nlp.amr.Entity;@1f440272))
AMR:
(a / and, op, l / launch-01)
(a / and, op, p / promise-01)
(h / have-org-role-91, ARG1, h2 / hospital)
(h / have-org-role-91, ARG2, c / chief)
(l / launch-01, ARG1, i / inquire-01)
(p / promise-01, ARG0, c / chief)
(p / promise-01, ARG2, t / tighten-01)
(t / tighten-01, ARG1, s / security)

Decoded in 28,261 microseconds
Sentence: treasury officials emphasised that nigel lawson the chancellor has never promised a soft landing in which inflation abates but growth continues moderately

Spans:
Span 18-19:  but => contrast-01
Span 20-21:  continues => continue-01
Span 19-20:  growth => grow-01
Span 16-17:  inflation => inflation
Span 13-14:  landing => land-01
Span 21-22:  moderately => moderate
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 10-11:  promised => promise-01
Span 12-13:  soft => soft
Span 0-1:  treasury => treasury

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),moderately,moderate,false), Span(20,21,List(1),continues,continue-01,false), Span(19,20,List(2),growth,grow-01,false), Span(18,19,List(3),but,contrast-01,false), Span(16,17,List(4),inflation,inflation,false), Span(13,14,List(5),landing,land-01,false), Span(12,13,List(6),soft,soft,false), Span(10,11,List(7),promised,promise-01,false), Span(1,2,List(9, 8),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(10),treasury,treasury,false)),Map(2 -> grow-01, 5 -> land-01, 8 -> have-org-role-91, 7 -> promise-01, 1 -> continue-01, 4 -> inflation, 6 -> soft, 9 -> official, 0 -> moderate, 10 -> treasury, 3 -> contrast-01),Map(h -> have-org-role-91, t -> treasury, s -> soft, m -> moderate, p -> promise-01, g -> grow-01, i -> inflation, l -> land-01, c -> continue-01, o -> official, c2 -> contrast-01))),[Ljava.lang.String;@29fc9a67,Annotation([Ljava.lang.String;@6fcf5ba,[Ljava.lang.String;@496889eb,[Ljava.lang.String;@6e36c8f3),Annotation([Ljava.lang.String;@4ec3020c,[Ljava.lang.String;@64bb8a39,[Ledu.cmu.lti.nlp.amr.Dependency;@546fd7d9),Annotation([Ljava.lang.String;@7ac412dd,[Ljava.lang.String;@5eb2aa22,[Ljava.lang.String;@23bfcec0),Annotation([Ljava.lang.String;@59eb196,[Ljava.lang.String;@759cf1bb,[Ledu.cmu.lti.nlp.amr.Entity;@12c26850))
AMR:
(c / continue-01, ARG0, l / land-01)
(c / continue-01, ARG1, g / grow-01)
(c2 / contrast-01, ARG1, c / continue-01)
(c2 / contrast-01, ARG2, m / moderate)
(g / grow-01, ARG1, i / inflation)
(h / have-org-role-91, ARG1, t / treasury)
(h / have-org-role-91, ARG2, o / official)
(l / land-01, ARG1, t / treasury)
(l / land-01, manner, s / soft)
(p / promise-01, ARG1, l / land-01)

Decoded in 134,971 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@194e65cf,Annotation([Ljava.lang.String;@69fe0603,[Ljava.lang.String;@243ce552,[Ljava.lang.String;@19f37d14),Annotation([Ljava.lang.String;@4098b95b,[Ljava.lang.String;@6ab1267e,[Ledu.cmu.lti.nlp.amr.Dependency;@145650eb),Annotation([Ljava.lang.String;@2eda7ebb,[Ljava.lang.String;@ab63f05,[Ljava.lang.String;@42e366c1),Annotation([Ljava.lang.String;@5f6f2b35,[Ljava.lang.String;@7b7dd585,[Ledu.cmu.lti.nlp.amr.Entity;@24d4e1a))
AMR:


Decoded in 49,182 microseconds
Sentence: in the first place mr meacher has promised that a labour government would allow sympathy strikes dash

Spans:
Span 13-14:  allow => allow-01
Span 10-11:  labour => labour
Span 3-4:  place => place
Span 7-8:  promised => promise-01
Span 15-16:  strikes => strike-01
Span 14-15:  sympathy => sympathy

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),strikes,strike-01,false), Span(14,15,List(1),sympathy,sympathy,false), Span(13,14,List(2),allow,allow-01,false), Span(10,11,List(3),labour,labour,false), Span(7,8,List(4),promised,promise-01,false), Span(3,4,List(5),place,place,false)),Map(2 -> allow-01, 5 -> place, 1 -> sympathy, 4 -> promise-01, 0 -> strike-01, 3 -> labour),Map(s2 -> sympathy, p2 -> place, s -> strike-01, p -> promise-01, a -> allow-01, l -> labour))),[Ljava.lang.String;@21428e24,Annotation([Ljava.lang.String;@1881ee8b,[Ljava.lang.String;@7a53f43e,[Ljava.lang.String;@1dc85130),Annotation([Ljava.lang.String;@4a4a3596,[Ljava.lang.String;@4e0430f4,[Ledu.cmu.lti.nlp.amr.Dependency;@752a0b2f),Annotation([Ljava.lang.String;@1b4476c1,[Ljava.lang.String;@2bd086e3,[Ljava.lang.String;@747b78e),Annotation([Ljava.lang.String;@7563cf5d,[Ljava.lang.String;@6bc31ee0,[Ledu.cmu.lti.nlp.amr.Entity;@57203b65))
AMR:
(a / allow-01, ARG0, l / labour)
(a / allow-01, ARG1, s / strike-01)
(p / promise-01, ARG1, a / allow-01)
(s / strike-01, ARG0, p2 / place)
(s / strike-01, ARG1, s2 / sympathy)

Decoded in 30,799 microseconds
Sentence: for a year the chancellor has promised that inflation is a temporary blip on the road to zero inflation

Spans:
Span 18-19:  inflation => inflation
Span 8-9:  inflation => inflation
Span 6-7:  promised => promise-01
Span 15-16:  road => road
Span 11-12:  temporary => temporary
Span 2-3:  year => year
Span 17-18:  zero => zero

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),inflation,inflation,false), Span(17,18,List(1),zero,zero,false), Span(15,16,List(2),road,road,false), Span(11,12,List(3),temporary,temporary,false), Span(8,9,List(4),inflation,inflation,false), Span(6,7,List(5),promised,promise-01,false), Span(2,3,List(6),year,year,false)),Map(2 -> road, 5 -> promise-01, 1 -> zero, 4 -> inflation, 6 -> year, 0 -> inflation, 3 -> temporary),Map(z -> zero, t -> temporary, y -> year, p -> promise-01, i2 -> inflation, r -> road, i -> inflation))),[Ljava.lang.String;@54b0a583,Annotation([Ljava.lang.String;@194266e5,[Ljava.lang.String;@56715157,[Ljava.lang.String;@29935317),Annotation([Ljava.lang.String;@7342054,[Ljava.lang.String;@6f366e7d,[Ledu.cmu.lti.nlp.amr.Dependency;@5e900995),Annotation([Ljava.lang.String;@426545b3,[Ljava.lang.String;@6c30cd3,[Ljava.lang.String;@6f7ef41c),Annotation([Ljava.lang.String;@77cc9373,[Ljava.lang.String;@17e4a077,[Ledu.cmu.lti.nlp.amr.Entity;@22e2f0e2))
AMR:
(i / inflation, mod, t / temporary)
(i / inflation, mod, z / zero)
(p / promise-01, ARG0, z / zero)
(p / promise-01, ARG1, i2 / inflation)
(p / promise-01, duration, y / year)
(r / road, mod, z / zero)

Decoded in 111,857 microseconds
Sentence: harry tisch the national trade union leader went as promised to be replaced by annelis kimmel

Spans:
Span 6-7:  leader => (person :ARG0-of lead-02)
Span 3-4:  national => nation
Span 9-10:  promised => promise-01
Span 12-13:  replaced => replace-01
Span 4-5:  trade => trade-01
Span 5-6:  union => union

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),replaced,replace-01,false), Span(9,10,List(1),promised,promise-01,false), Span(6,7,List(3, 2),leader,(person :ARG0-of lead-02),false), Span(5,6,List(4),union,union,false), Span(4,5,List(5),trade,trade-01,false), Span(3,4,List(6),national,nation,false)),Map(2 -> person, 5 -> trade-01, 1 -> promise-01, 4 -> union, 6 -> nation, 0 -> replace-01, 3 -> lead-02),Map(n -> nation, t -> trade-01, p2 -> person, p -> promise-01, r -> replace-01, u -> union, l -> lead-02))),[Ljava.lang.String;@61349752,Annotation([Ljava.lang.String;@43baba59,[Ljava.lang.String;@18204bcc,[Ljava.lang.String;@70504a73),Annotation([Ljava.lang.String;@2747fda0,[Ljava.lang.String;@675c2785,[Ledu.cmu.lti.nlp.amr.Dependency;@5326c1c6),Annotation([Ljava.lang.String;@157bd8d0,[Ljava.lang.String;@75d74ab4,[Ljava.lang.String;@969abdd),Annotation([Ljava.lang.String;@78923efe,[Ljava.lang.String;@4965d389,[Ledu.cmu.lti.nlp.amr.Entity;@3c22ed04))
AMR:
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, u / union)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, ARG2, r / replace-01)
(p2 / person, mod, n / nation)
(u / union, mod, t / trade-01)

Decoded in 38,486 microseconds
Sentence: in her turn she promises to follow him to the ends of the earth with her dresses her black eyes her violin and her folly

Spans:
Span 22-23:  and => and
Span 18-19:  black => black
Span 13-14:  earth => earth
Span 10-11:  ends => end-01
Span 19-20:  eyes => eye
Span 6-7:  follow => follow-02
Span 4-5:  promises => promise-01
Span 3-4:  she => she

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),and,and,false), Span(19,20,List(1),eyes,eye,false), Span(18,19,List(2),black,black,false), Span(13,14,List(3),earth,earth,false), Span(10,11,List(4),ends,end-01,false), Span(6,7,List(5),follow,follow-02,false), Span(4,5,List(6),promises,promise-01,false), Span(3,4,List(7),she,she,false)),Map(2 -> black, 5 -> follow-02, 7 -> she, 1 -> eye, 4 -> end-01, 6 -> promise-01, 0 -> and, 3 -> earth),Map(e -> eye, b -> black, e2 -> earth, s -> she, p -> promise-01, a -> and, f -> follow-02, e3 -> end-01))),[Ljava.lang.String;@18f6c074,Annotation([Ljava.lang.String;@6fd50c79,[Ljava.lang.String;@c26154b,[Ljava.lang.String;@183ff528),Annotation([Ljava.lang.String;@ef82188,[Ljava.lang.String;@44616f65,[Ledu.cmu.lti.nlp.amr.Dependency;@58d872f5),Annotation([Ljava.lang.String;@6a636064,[Ljava.lang.String;@224d7bcd,[Ljava.lang.String;@cfae153),Annotation([Ljava.lang.String;@2adf16cd,[Ljava.lang.String;@1c5202b8,[Ledu.cmu.lti.nlp.amr.Entity;@4c308c8e))
AMR:
(a / and, op, e / eye)
(e / eye, mod, b / black)
(e3 / end-01, ARG0, e2 / earth)
(e3 / end-01, ARG1, a / and)
(f / follow-02, ARG0, s / she)
(f / follow-02, ARG2, e3 / end-01)
(p / promise-01, ARG1, f / follow-02)

Decoded in 87,015 microseconds
Sentence: i think i can promise you that

Spans:
Span 3-4:  can => possible
Span 2-3:  i => i
Span 0-1:  i => i
Span 4-5:  promise => promise-01
Span 1-2:  think => think-01
Span 5-6:  you => you

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),you,you,false), Span(4,5,List(1),promise,promise-01,false), Span(3,4,List(2),can,possible,false), Span(2,3,List(3),i,i,false), Span(1,2,List(4),think,think-01,false), Span(0,1,List(5),i,i,false)),Map(2 -> possible, 5 -> i, 1 -> promise-01, 4 -> think-01, 0 -> you, 3 -> i),Map(t -> think-01, p2 -> possible, p -> promise-01, y -> you, i2 -> i, i -> i))),[Ljava.lang.String;@75be5b6,Annotation([Ljava.lang.String;@22461380,[Ljava.lang.String;@26aa4a14,[Ljava.lang.String;@75e57ae0),Annotation([Ljava.lang.String;@2ce64498,[Ljava.lang.String;@41a16e2f,[Ledu.cmu.lti.nlp.amr.Dependency;@4d48f152),Annotation([Ljava.lang.String;@6fdb6621,[Ljava.lang.String;@2d0e39e6,[Ljava.lang.String;@fb4226),Annotation([Ljava.lang.String;@6fb3cd4a,[Ljava.lang.String;@56aee91,[Ledu.cmu.lti.nlp.amr.Entity;@2f54745e))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG2, y / you)
(p / promise-01, mod, p2 / possible)
(t / think-01, ARG0, i2 / i)
(t / think-01, ARG1, p2 / possible)

Decoded in 118,979 microseconds
Sentence: but the minister promised tough new legal penalties for all polluters

Spans:
Span 9-10:  all => all
Span 0-1:  but => contrast-01
Span 6-7:  legal => legal
Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Span 5-6:  new => new
Span 7-8:  penalties => penalize-01
Span 3-4:  promised => promise-01
Span 4-5:  tough => tough

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),all,all,false), Span(7,8,List(1),penalties,penalize-01,false), Span(6,7,List(2),legal,legal,false), Span(5,6,List(3),new,new,false), Span(4,5,List(4),tough,tough,false), Span(3,4,List(5),promised,promise-01,false), Span(2,3,List(7, 6),minister,(have-org-role-91 :ARG2 minister),false), Span(0,1,List(8),but,contrast-01,false)),Map(2 -> legal, 5 -> promise-01, 8 -> contrast-01, 7 -> minister, 1 -> penalize-01, 4 -> tough, 6 -> have-org-role-91, 0 -> all, 3 -> new),Map(n -> new, h -> have-org-role-91, t -> tough, p2 -> promise-01, m -> minister, p -> penalize-01, a -> all, c -> contrast-01, l -> legal))),[Ljava.lang.String;@51a3df98,Annotation([Ljava.lang.String;@5dac9e07,[Ljava.lang.String;@6fbb0d9c,[Ljava.lang.String;@617ab612),Annotation([Ljava.lang.String;@3f4789bd,[Ljava.lang.String;@71a3f7bf,[Ledu.cmu.lti.nlp.amr.Dependency;@43de56e2),Annotation([Ljava.lang.String;@3a1a323d,[Ljava.lang.String;@dd86098,[Ljava.lang.String;@78ada241),Annotation([Ljava.lang.String;@4f77974c,[Ljava.lang.String;@346e2756,[Ledu.cmu.lti.nlp.amr.Entity;@2bd899fe))
AMR:
(c / contrast-01, ARG1, p2 / promise-01)
(h / have-org-role-91, ARG2, m / minister)
(p / penalize-01, manner, t / tough)
(p / penalize-01, mod, l / legal)
(p / penalize-01, mod, n / new)
(p2 / promise-01, ARG0, a / all)
(p2 / promise-01, ARG1, m / minister)
(p2 / promise-01, ARG2, p / penalize-01)

Decoded in 40,013 microseconds
Sentence: the riches of mount kare and porgera together with extraordinary discoveries elsewhere of copper oil gold and silver promise to transform this third world country

Spans:
Span 16-17:  and => and
Span 5-6:  and => and
Span 13-14:  copper => copper
Span 24-25:  country => country
Span 10-11:  discoveries => discover-01
Span 11-12:  elsewhere => elsewhere
Span 9-10:  extraordinary => extraordinary
Span 15-16:  gold => gold
Span 3-4:  mount => mount-01
Span 14-15:  oil => oil
Span 18-19:  promise => promise-01
Span 1-2:  riches => riches
Span 17-18:  silver => silver
Span 21-22:  this => this
Span 7-8:  together => together
Span 20-21:  transform => transform-01
Span 23-24:  world => world

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),country,country,false), Span(23,24,List(1),world,world,false), Span(21,22,List(2),this,this,false), Span(20,21,List(3),transform,transform-01,false), Span(18,19,List(4),promise,promise-01,false), Span(17,18,List(5),silver,silver,false), Span(16,17,List(6),and,and,false), Span(15,16,List(7),gold,gold,false), Span(14,15,List(8),oil,oil,false), Span(13,14,List(9),copper,copper,false), Span(11,12,List(10),elsewhere,elsewhere,false), Span(10,11,List(11),discoveries,discover-01,false), Span(9,10,List(12),extraordinary,extraordinary,false), Span(7,8,List(13),together,together,false), Span(5,6,List(14),and,and,false), Span(3,4,List(15),mount,mount-01,false), Span(1,2,List(16),riches,riches,false)),Map(2 -> this, 5 -> silver, 12 -> extraordinary, 15 -> mount-01, 8 -> oil, 7 -> gold, 1 -> world, 4 -> promise-01, 11 -> discover-01, 14 -> and, 6 -> and, 0 -> country, 9 -> copper, 16 -> riches, 3 -> transform-01, 10 -> elsewhere, 13 -> together),Map(e -> elsewhere, w -> world, t -> this, e2 -> extraordinary, s -> silver, m -> mount-01, d -> discover-01, t3 -> together, p -> promise-01, g -> gold, a -> and, t2 -> transform-01, r -> riches, a2 -> and, c -> country, o -> oil, c2 -> copper))),[Ljava.lang.String;@1966092f,Annotation([Ljava.lang.String;@79e4f9af,[Ljava.lang.String;@27c48eae,[Ljava.lang.String;@597355e7),Annotation([Ljava.lang.String;@230cde92,[Ljava.lang.String;@21e85538,[Ledu.cmu.lti.nlp.amr.Dependency;@1c32e0ec),Annotation([Ljava.lang.String;@504cb46a,[Ljava.lang.String;@5bd8c455,[Ljava.lang.String;@7441d78e),Annotation([Ljava.lang.String;@eaee743,[Ljava.lang.String;@7cd0e73c,[Ledu.cmu.lti.nlp.amr.Entity;@76fd5428))
AMR:
(a / and, op, g / gold)
(a / and, op, p / promise-01)
(a2 / and, op, p / promise-01)
(c / country, mod, t / this)
(d / discover-01, ARG0, t2 / transform-01)
(d / discover-01, ARG1, t3 / together)
(g / gold, mod, o / oil)
(m / mount-01, ARG0, e2 / extraordinary)
(m / mount-01, ARG1, a2 / and)
(o / oil, mod, c2 / copper)
(p / promise-01, ARG1, t2 / transform-01)
(p / promise-01, mod, s / silver)
(r / riches, topic, a2 / and)
(t2 / transform-01, ARG0, e / elsewhere)
(t2 / transform-01, ARG1, c / country)
(w / world, op, p / promise-01)

Decoded in 211,569 microseconds
Sentence: at an emergency session of the central committee on 11 december he promised to hold free multiparty elections by next may and to abolish the partys leading role

Spans:
Span 9-10:  11 => 11
Span 23-24:  abolish => abolish-01
Span 21-22:  and => and
Span 6-7:  central => central
Span 7-8:  committee => committee
Span 10-11:  december => (date-entity :month 12)
Span 17-18:  elections => elect-01
Span 2-3:  emergency => emergency
Span 15-16:  free => free-41
Span 11-12:  he => he
Span 26-27:  leading => lead-01
Span 20-21:  may => (date-entity :month 5)
Span 19-20:  next => next
Span 12-13:  promised => promise-01
Span 27-28:  role => role
Span 3-4:  session => session

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),role,role,false), Span(26,27,List(1),leading,lead-01,false), Span(23,24,List(2),abolish,abolish-01,false), Span(21,22,List(3),and,and,false), Span(20,21,List(5, 4),may,(date-entity :month 5),false), Span(19,20,List(6),next,next,false), Span(17,18,List(7),elections,elect-01,false), Span(15,16,List(8),free,free-41,false), Span(12,13,List(9),promised,promise-01,false), Span(11,12,List(10),he,he,false), Span(10,11,List(12, 11),december,(date-entity :month 12),false), Span(9,10,List(13),11,11,false), Span(7,8,List(14),committee,committee,false), Span(6,7,List(15),central,central,false), Span(3,4,List(16),session,session,false), Span(2,3,List(17),emergency,emergency,false)),Map(2 -> abolish-01, 5 -> 5, 12 -> 12, 15 -> central, 8 -> free-41, 7 -> elect-01, 17 -> emergency, 1 -> lead-01, 4 -> date-entity, 11 -> date-entity, 14 -> committee, 6 -> next, 0 -> role, 9 -> promise-01, 16 -> session, 3 -> and, 10 -> he, 13 -> 11),Map(e -> elect-01, n -> next, h -> he, 5 -> 5, 12 -> 11, e2 -> emergency, s -> session, d -> date-entity, 1 -> 12, p -> promise-01, a -> abolish-01, d2 -> date-entity, r -> role, a2 -> and, c -> committee, l -> lead-01, f -> free-41, c2 -> central))),[Ljava.lang.String;@71a04b1f,Annotation([Ljava.lang.String;@52a41a80,[Ljava.lang.String;@13c7f3e3,[Ljava.lang.String;@2c5cc63a),Annotation([Ljava.lang.String;@7eda2096,[Ljava.lang.String;@229198ea,[Ledu.cmu.lti.nlp.amr.Dependency;@4ce3c61),Annotation([Ljava.lang.String;@7fde06bd,[Ljava.lang.String;@498ca3e0,[Ljava.lang.String;@305aecd9),Annotation([Ljava.lang.String;@2173b35c,[Ljava.lang.String;@33046e2c,[Ledu.cmu.lti.nlp.amr.Entity;@67dd24de))
AMR:
(a / abolish-01, ARG0, h / he)
(a / abolish-01, ARG1, r / role)
(a2 / and, op, a / abolish-01)
(a2 / and, op, d / date-entity)
(a2 / and, op, e / elect-01)
(c / committee, mod, c2 / central)
(c / committee, time, 12 / 11)
(d / date-entity, month, 5 / 5)
(d2 / date-entity, month, 1 / 12)
(f / free-41, ARG1, e / elect-01)
(l / lead-01, ARG0, r / role)
(n / next, mod, d / date-entity)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, d2 / date-entity)
(s / session, mod, e2 / emergency)
(s / session, poss, c / committee)
(s / session, poss, h / he)

Decoded in 283,999 microseconds
Sentence: the biff promised diced beef fillet in a sauce of sauteed onions and mustard and delivered not so much dice as cubes of beef which were nevertheless tender enough for someone undergoing a crowns renewal course

Spans:
Span 14-15:  and => and
Span 12-13:  and => and
Span 23-24:  beef => beef
Span 4-5:  beef => beef
Span 15-16:  delivered => deliver-01
Span 28-29:  enough => enough
Span 18-19:  much => much
Span 2-3:  promised => promise-01
Span 17-18:  so => so
Span 30-31:  someone => someone
Span 27-28:  tender => tender

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),someone,someone,false), Span(28,29,List(1),enough,enough,false), Span(27,28,List(2),tender,tender,false), Span(23,24,List(3),beef,beef,false), Span(18,19,List(4),much,much,false), Span(17,18,List(5),so,so,false), Span(15,16,List(6),delivered,deliver-01,false), Span(14,15,List(7),and,and,false), Span(12,13,List(8),and,and,false), Span(4,5,List(9),beef,beef,false), Span(2,3,List(10),promised,promise-01,false)),Map(2 -> tender, 5 -> so, 8 -> and, 7 -> and, 1 -> enough, 4 -> much, 6 -> deliver-01, 9 -> beef, 0 -> someone, 10 -> promise-01, 3 -> beef),Map(e -> enough, s2 -> so, b -> beef, t -> tender, b2 -> beef, s -> someone, d -> deliver-01, m -> much, p -> promise-01, a -> and, a2 -> and))),[Ljava.lang.String;@679fa017,Annotation([Ljava.lang.String;@20c77b27,[Ljava.lang.String;@8664e41,[Ljava.lang.String;@749b91b5),Annotation([Ljava.lang.String;@117b3de2,[Ljava.lang.String;@321bc965,[Ledu.cmu.lti.nlp.amr.Dependency;@3e431f96),Annotation([Ljava.lang.String;@28ced0c9,[Ljava.lang.String;@21ed510d,[Ljava.lang.String;@63643de1),Annotation([Ljava.lang.String;@4a1ab1c1,[Ljava.lang.String;@1e8c1be9,[Ledu.cmu.lti.nlp.amr.Entity;@7c6daa))
AMR:
(a / and, op, d / deliver-01)
(a / and, op, p / promise-01)
(a2 / and, op, d / deliver-01)
(b / beef, op, p / promise-01)
(d / deliver-01, ARG0, e / enough)
(d / deliver-01, ARG1, s2 / so)
(m / much, degree, s2 / so)
(p / promise-01, ARG0, s / someone)
(p / promise-01, ARG1, b2 / beef)
(t / tender, domain, d / deliver-01)

Decoded in 159,904 microseconds
Sentence:  and such now promises to be the immediate outcome of an affair which justifiably has become a cause celebre

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  and such now promises to be the immediate outcome of an affair which justifiably has become a cause celebre
myTokenized = and such now promises to be the immediate outcome of an affair which justifiably has become a cause celebre
i = 0
prefix = List(and)
regexr = \Qa\E ?\Qn\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: this latest encounter between the two sides promises to be more exciting than ever before

Spans:
Span 14-15:  before => before
Span 3-4:  between => between
Span 2-3:  encounter => encounter-01
Span 13-14:  ever => ever
Span 11-12:  exciting => excite-01
Span 1-2:  latest => (late :degree most)
Span 7-8:  promises => promise-01
Span 6-7:  sides => side
Span 0-1:  this => this
Span 5-6:  two => 2

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),before,before,false), Span(13,14,List(1),ever,ever,false), Span(11,12,List(2),exciting,excite-01,false), Span(7,8,List(3),promises,promise-01,false), Span(6,7,List(4),sides,side,false), Span(5,6,List(5),two,2,false), Span(3,4,List(6),between,between,false), Span(2,3,List(7),encounter,encounter-01,false), Span(1,2,List(9, 8),latest,(late :degree most),false), Span(0,1,List(10),this,this,false)),Map(2 -> excite-01, 5 -> 2, 8 -> late, 7 -> encounter-01, 1 -> ever, 4 -> side, 6 -> between, 9 -> most, 0 -> before, 10 -> this, 3 -> promise-01),Map(e -> ever, 2 -> 2, t -> this, b -> before, b2 -> between, e2 -> excite-01, s -> side, m -> most, p -> promise-01, l -> late, e3 -> encounter-01))),[Ljava.lang.String;@72281eff,Annotation([Ljava.lang.String;@280b31e6,[Ljava.lang.String;@76f90793,[Ljava.lang.String;@576080ea),Annotation([Ljava.lang.String;@afaf77,[Ljava.lang.String;@e28adfb,[Ledu.cmu.lti.nlp.amr.Dependency;@10b64100),Annotation([Ljava.lang.String;@2d656f92,[Ljava.lang.String;@5e7ff186,[Ljava.lang.String;@21c9c4e2),Annotation([Ljava.lang.String;@459ce2c2,[Ljava.lang.String;@3eeb5242,[Ledu.cmu.lti.nlp.amr.Entity;@4b658b53))
AMR:
(b2 / between, op, s / side)
(e2 / excite-01, ARG1, e / ever)
(e2 / excite-01, mod, b / before)
(e3 / encounter-01, ARG1, b2 / between)
(e3 / encounter-01, mod, t / this)
(e3 / encounter-01, time, l / late)
(l / late, degree, m / most)
(p / promise-01, ARG0, e3 / encounter-01)
(p / promise-01, ARG1, e2 / excite-01)
(s / side, quant, 2 / 2)

Decoded in 85,110 microseconds
Sentence: we have got a strong mandate to continue with what we promised

Spans:
Span 7-8:  continue => continue-01
Span 5-6:  mandate => mandate
Span 11-12:  promised => promise-01
Span 4-5:  strong => strong
Span 10-11:  we => we
Span 0-1:  we => we

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promised,promise-01,false), Span(10,11,List(1),we,we,false), Span(7,8,List(2),continue,continue-01,false), Span(5,6,List(3),mandate,mandate,false), Span(4,5,List(4),strong,strong,false), Span(0,1,List(5),we,we,false)),Map(2 -> continue-01, 5 -> we, 1 -> we, 4 -> strong, 0 -> promise-01, 3 -> mandate),Map(w -> we, s -> strong, m -> mandate, p -> promise-01, w2 -> we, c -> continue-01))),[Ljava.lang.String;@2d75d90a,Annotation([Ljava.lang.String;@13fc36d7,[Ljava.lang.String;@13746781,[Ljava.lang.String;@3f375021),Annotation([Ljava.lang.String;@486dc6f3,[Ljava.lang.String;@1f20a0ab,[Ledu.cmu.lti.nlp.amr.Dependency;@17144a84),Annotation([Ljava.lang.String;@35282bf2,[Ljava.lang.String;@605d3821,[Ljava.lang.String;@8102ff4),Annotation([Ljava.lang.String;@5ebc404e,[Ljava.lang.String;@1921f179,[Ledu.cmu.lti.nlp.amr.Entity;@3744bd3))
AMR:
(c / continue-01, ARG0, w2 / we)
(c / continue-01, ARG1, m / mandate)
(m / mandate, mod, s / strong)
(p / promise-01, ARG0, w2 / we)
(p / promise-01, ARG1, w / we)

Decoded in 101,573 microseconds
Sentence: his performance was intended as a celebration of that renaissance and also of the prospects for world peace for in moscow comrade gorbachev and president reagan were holding a summit meeting which promised to bear fruit in disarmament

NER Entity: (country :name (name :op "moscow"))
NER Entity: (person :name (name :op "reagan"))
Spans:
Span 11-12:  also => also
Span 23-24:  and => and
Span 10-11:  and => and
Span 34-35:  bear => bear-02
Span 6-7:  celebration => celebrate-02
Span 37-38:  disarmament => disarm-01
Span 35-36:  fruit => fruit
Span 27-28:  holding => hold-01
Span 3-4:  intended => intend-01
Span 30-31:  meeting => meet-03
Span 17-18:  peace => peace
Span 1-2:  performance => perform-01
Span 24-25:  president => (have-org-role-91 :ARG2 president)
Span 32-33:  promised => promise-01
Span 14-15:  prospects => prospect
Span 9-10:  renaissance => renaissance
Span 29-30:  summit => summit
Span 16-17:  world => world

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),disarmament,disarm-01,false), Span(35,36,List(1),fruit,fruit,false), Span(34,35,List(2),bear,bear-02,false), Span(32,33,List(3),promised,promise-01,false), Span(30,31,List(4),meeting,meet-03,false), Span(29,30,List(5),summit,summit,false), Span(27,28,List(6),holding,hold-01,false), Span(24,25,List(8, 7),president,(have-org-role-91 :ARG2 president),false), Span(23,24,List(9),and,and,false), Span(17,18,List(10),peace,peace,false), Span(16,17,List(11),world,world,false), Span(14,15,List(12),prospects,prospect,false), Span(11,12,List(13),also,also,false), Span(10,11,List(14),and,and,false), Span(9,10,List(15),renaissance,renaissance,false), Span(6,7,List(16),celebration,celebrate-02,false), Span(3,4,List(17),intended,intend-01,false), Span(1,2,List(18),performance,perform-01,false)),Map(2 -> bear-02, 5 -> summit, 12 -> prospect, 15 -> renaissance, 8 -> president, 18 -> perform-01, 7 -> have-org-role-91, 17 -> intend-01, 1 -> fruit, 4 -> meet-03, 11 -> world, 14 -> and, 6 -> hold-01, 0 -> disarm-01, 9 -> and, 16 -> celebrate-02, 3 -> promise-01, 10 -> peace, 13 -> also),Map(w -> world, h -> hold-01, p5 -> perform-01, h2 -> have-org-role-91, b -> bear-02, p2 -> president, a3 -> and, s -> summit, d -> disarm-01, m -> meet-03, p -> promise-01, a -> and, p4 -> prospect, i -> intend-01, r -> renaissance, a2 -> also, c -> celebrate-02, f -> fruit, p3 -> peace))),[Ljava.lang.String;@481e0b6a,Annotation([Ljava.lang.String;@2c7f8123,[Ljava.lang.String;@66f737a7,[Ljava.lang.String;@7066e9c0),Annotation([Ljava.lang.String;@747c75e6,[Ljava.lang.String;@17208ac9,[Ledu.cmu.lti.nlp.amr.Dependency;@59779dfb),Annotation([Ljava.lang.String;@3c24f7a0,[Ljava.lang.String;@1efd4839,[Ljava.lang.String;@690a614),Annotation([Ljava.lang.String;@2876e6a,[Ljava.lang.String;@961f272,[Ledu.cmu.lti.nlp.amr.Entity;@7d741f2d))
AMR:
(a / and, mod, a2 / also)
(b / bear-02, ARG0, m / meet-03)
(b / bear-02, ARG1, f / fruit)
(c / celebrate-02, ARG1, r / renaissance)
(f / fruit, prep-in, d / disarm-01)
(h / hold-01, ARG0, a / and)
(h / hold-01, ARG1, m / meet-03)
(h2 / have-org-role-91, ARG0, p4 / prospect)
(h2 / have-org-role-91, ARG2, p2 / president)
(i / intend-01, ARG0, a3 / and)
(i / intend-01, ARG1, p5 / perform-01)
(i / intend-01, ARG2, p4 / prospect)
(i / intend-01, time, c / celebrate-02)
(m / meet-03, mod, s / summit)
(p / promise-01, ARG2, b / bear-02)
(p3 / peace, mod, w / world)
(p4 / prospect, poss, p3 / peace)
(p5 / perform-01, ARG0, a / and)

Decoded in 395,758 microseconds
Sentence: but im not promising youll find the golden moment youre looking for among todays events and happenings

Spans:
Span 12-13:  among => among
Span 15-16:  and => and
Span 0-1:  but => contrast-01
Span 14-15:  events => event
Span 7-8:  golden => gold
Span 8-9:  moment => moment
Span 3-4:  promising => promise-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),and,and,false), Span(14,15,List(1),events,event,false), Span(12,13,List(2),among,among,false), Span(8,9,List(3),moment,moment,false), Span(7,8,List(4),golden,gold,false), Span(3,4,List(5),promising,promise-01,false), Span(0,1,List(6),but,contrast-01,false)),Map(2 -> among, 5 -> promise-01, 1 -> event, 4 -> gold, 6 -> contrast-01, 0 -> and, 3 -> moment),Map(e -> event, m -> moment, p -> promise-01, g -> gold, a -> and, a2 -> among, c -> contrast-01))),[Ljava.lang.String;@52ab03b3,Annotation([Ljava.lang.String;@5980072b,[Ljava.lang.String;@6456c5f4,[Ljava.lang.String;@7cde49a2),Annotation([Ljava.lang.String;@65b46ab9,[Ljava.lang.String;@27cacbd9,[Ledu.cmu.lti.nlp.amr.Dependency;@730d27f7),Annotation([Ljava.lang.String;@64bb0423,[Ljava.lang.String;@320cc97f,[Ljava.lang.String;@6580ca84),Annotation([Ljava.lang.String;@6a6fd42b,[Ljava.lang.String;@53d289a4,[Ledu.cmu.lti.nlp.amr.Entity;@234a98fa))
AMR:
(a / and, op, e / event)
(a2 / among, op, e / event)
(c / contrast-01, ARG1, m / moment)
(c / contrast-01, ARG2, a / and)
(p / promise-01, ARG1, g / gold)
(p / promise-01, ARG2, a / and)

Decoded in 27,724 microseconds
Sentence: a new political party for west germanys older generation the greys was born yesterday promising to fight for pensioners rights and greater social acceptance of the increasing numbers of oversixties anna tomforde writes from bonn

Spans:
Span 23-24:  acceptance => accept-01
Span 20-21:  and => and
Span 12-13:  born => bear-02
Span 16-17:  fight => fight-01
Span 8-9:  generation => generation
Span 21-22:  greater => great
Span 26-27:  increasing => increase-01
Span 1-2:  new => new
Span 27-28:  numbers => number
Span 7-8:  older => old
Span 3-4:  party => party
Span 18-19:  pensioners => pensioner
Span 2-3:  political => politics
Span 14-15:  promising => promise-01
Span 19-20:  rights => right
Span 22-23:  social => society
Span 5-6:  west => west
Span 32-33:  writes => write-01
Span 13-14:  yesterday => yesterday

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),writes,write-01,false), Span(27,28,List(1),numbers,number,false), Span(26,27,List(2),increasing,increase-01,false), Span(23,24,List(3),acceptance,accept-01,false), Span(22,23,List(4),social,society,false), Span(21,22,List(5),greater,great,false), Span(20,21,List(6),and,and,false), Span(19,20,List(7),rights,right,false), Span(18,19,List(8),pensioners,pensioner,false), Span(16,17,List(9),fight,fight-01,false), Span(14,15,List(10),promising,promise-01,false), Span(13,14,List(11),yesterday,yesterday,false), Span(12,13,List(12),born,bear-02,false), Span(8,9,List(13),generation,generation,false), Span(7,8,List(14),older,old,false), Span(5,6,List(15),west,west,false), Span(3,4,List(16),party,party,false), Span(2,3,List(17),political,politics,false), Span(1,2,List(18),new,new,false)),Map(2 -> increase-01, 5 -> great, 12 -> bear-02, 15 -> west, 8 -> pensioner, 18 -> new, 7 -> right, 17 -> politics, 1 -> number, 4 -> society, 11 -> yesterday, 14 -> old, 6 -> and, 0 -> write-01, 9 -> fight-01, 16 -> party, 3 -> accept-01, 10 -> promise-01, 13 -> generation),Map(w -> write-01, n -> number, b -> bear-02, p2 -> promise-01, s -> society, g2 -> generation, g -> great, p -> pensioner, y -> yesterday, a -> accept-01, p4 -> politics, w2 -> west, i -> increase-01, a2 -> and, r -> right, f -> fight-01, o -> old, p3 -> party, n2 -> new))),[Ljava.lang.String;@7681572f,Annotation([Ljava.lang.String;@25830b71,[Ljava.lang.String;@3e643af4,[Ljava.lang.String;@265a892c),Annotation([Ljava.lang.String;@1e3bb60,[Ljava.lang.String;@e229c98,[Ledu.cmu.lti.nlp.amr.Dependency;@256c668),Annotation([Ljava.lang.String;@efbd70b,[Ljava.lang.String;@37e31adc,[Ljava.lang.String;@1ef87e2e),Annotation([Ljava.lang.String;@4c240de4,[Ljava.lang.String;@530c1ac9,[Ledu.cmu.lti.nlp.amr.Entity;@3fb2acb7))
AMR:
(a / accept-01, ARG1, s / society)
(a2 / and, op, b / bear-02)
(a2 / and, op, w / write-01)
(b / bear-02, ARG0, p3 / party)
(b / bear-02, ARG1, p2 / promise-01)
(f / fight-01, ARG0, y / yesterday)
(f / fight-01, purpose, r / right)
(g2 / generation, mod, o / old)
(i / increase-01, ARG0, w2 / west)
(i / increase-01, ARG1, n / number)
(p2 / promise-01, ARG1, g2 / generation)
(p2 / promise-01, ARG2, f / fight-01)
(p3 / party, mod, n2 / new)
(p3 / party, mod, p4 / politics)
(r / right, mod, p / pensioner)
(r / right, quant, g / great)
(w / write-01, ARG1, a / accept-01)
(w / write-01, ARG2, i / increase-01)

Decoded in 207,015 microseconds
Sentence: john gummer minister for agriculture and fisheries promised in the commons to fight for the best deal possible for britains fishing industry in next weeks ec negotiations to agree catch quotas for 1990

Spans:
Span 32-33:  1990 => (date-entity :year 1990)
Span 28-29:  agree => agree-01
Span 4-5:  agriculture => agriculture
Span 5-6:  and => and
Span 10-11:  commons => (government-organization :name (name :op "Commons"))
Span 16-17:  deal => deal-01
Span 12-13:  fight => fight-01
Span 20-21:  fishing => fish-01
Span 21-22:  industry => industry
Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Span 26-27:  negotiations => negotiate-01
Span 23-24:  next => next
Span 17-18:  possible => possible
Span 7-8:  promised => promise-01
Span 30-31:  quotas => quota
Span 24-25:  weeks => (temporal-quantity :unit week)

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(1, 0),1990,(date-entity :year 1990),false), Span(30,31,List(2),quotas,quota,false), Span(28,29,List(3),agree,agree-01,false), Span(26,27,List(4),negotiations,negotiate-01,false), Span(24,25,List(6, 5),weeks,(temporal-quantity :unit week),false), Span(23,24,List(7),next,next,false), Span(21,22,List(8),industry,industry,false), Span(20,21,List(9),fishing,fish-01,false), Span(17,18,List(10),possible,possible,false), Span(16,17,List(11),deal,deal-01,false), Span(12,13,List(12),fight,fight-01,false), Span(10,11,List(15, 14, 13),commons,(government-organization :name (name :op "Commons")),false), Span(7,8,List(16),promised,promise-01,false), Span(5,6,List(17),and,and,false), Span(4,5,List(18),agriculture,agriculture,false), Span(2,3,List(20, 19),minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> quota, 5 -> temporal-quantity, 12 -> fight-01, 15 -> "Commons", 8 -> industry, 18 -> agriculture, 7 -> next, 17 -> and, 1 -> 1990, 4 -> negotiate-01, 11 -> deal-01, 14 -> name, 20 -> minister, 6 -> week, 0 -> date-entity, 9 -> fish-01, 16 -> promise-01, 19 -> have-org-role-91, 3 -> agree-01, 10 -> possible, 13 -> government-organization),Map(n -> negotiate-01, w -> week, h -> have-org-role-91, q -> quota, t -> temporal-quantity, p2 -> promise-01, a3 -> agriculture, m -> minister, d -> date-entity, 1 -> 1990, g -> government-organization, p -> possible, n3 -> name, a -> agree-01, d2 -> deal-01, a2 -> and, i -> industry, f2 -> fight-01, f -> fish-01, n2 -> next))),[Ljava.lang.String;@6b69430c,Annotation([Ljava.lang.String;@4bb0ffeb,[Ljava.lang.String;@5171c41f,[Ljava.lang.String;@402f8ff),Annotation([Ljava.lang.String;@5f292f67,[Ljava.lang.String;@8e74400,[Ledu.cmu.lti.nlp.amr.Dependency;@7216091),Annotation([Ljava.lang.String;@204ad33f,[Ljava.lang.String;@1072dda9,[Ljava.lang.String;@65368aae),Annotation([Ljava.lang.String;@5fcad96b,[Ljava.lang.String;@7e8830ee,[Ledu.cmu.lti.nlp.amr.Entity;@1f449a28))
AMR:
(a / agree-01, ARG0, i / industry)
(a / agree-01, ARG1, q / quota)
(a / agree-01, time, d / date-entity)
(a2 / and, op, a3 / agriculture)
(a2 / and, op, p / possible)
(d / date-entity, year, 1 / 1990)
(f2 / fight-01, ARG0, a2 / and)
(f2 / fight-01, ARG2, d2 / deal-01)
(g / government-organization, name, n3 / name)
(h / have-org-role-91, ARG1, a3 / agriculture)
(h / have-org-role-91, ARG2, m / minister)
(i / industry, mod, f / fish-01)
(n / negotiate-01, ARG1, d2 / deal-01)
(n / negotiate-01, ARG2, a / agree-01)
(n / negotiate-01, mod, n2 / next)
(n3 / name, op, "Commons")
(p2 / promise-01, ARG0, g / government-organization)
(p2 / promise-01, ARG2, f2 / fight-01)
(t / temporal-quantity, unit, w / week)
(w / week, mod, n2 / next)

Decoded in 256,423 microseconds
Sentence: dora promised that she would go to the station before lunch and fetch the case

Spans:
Span 11-12:  and => and
Span 9-10:  before => before
Span 14-15:  case => case
Span 10-11:  lunch => lunch-01
Span 1-2:  promised => promise-01
Span 3-4:  she => she
Span 8-9:  station => station

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),case,case,false), Span(11,12,List(1),and,and,false), Span(10,11,List(2),lunch,lunch-01,false), Span(9,10,List(3),before,before,false), Span(8,9,List(4),station,station,false), Span(3,4,List(5),she,she,false), Span(1,2,List(6),promised,promise-01,false)),Map(2 -> lunch-01, 5 -> she, 1 -> and, 4 -> station, 6 -> promise-01, 0 -> case, 3 -> before),Map(s2 -> she, b -> before, s -> station, p -> promise-01, a -> and, l -> lunch-01, c -> case))),[Ljava.lang.String;@50e4c821,Annotation([Ljava.lang.String;@5c0f1804,[Ljava.lang.String;@62f1ddd3,[Ljava.lang.String;@751a7a64),Annotation([Ljava.lang.String;@1d59774c,[Ljava.lang.String;@5ca72da1,[Ledu.cmu.lti.nlp.amr.Dependency;@63a4d48c),Annotation([Ljava.lang.String;@5a7e666f,[Ljava.lang.String;@20772fd3,[Ljava.lang.String;@70e4d64b),Annotation([Ljava.lang.String;@3fb10fd4,[Ljava.lang.String;@18647f7,[Ledu.cmu.lti.nlp.amr.Entity;@16dea9e9))
AMR:
(a / and, op, s / station)
(a / and, time, b / before)
(b / before, op, l / lunch-01)
(c / case, poss, s2 / she)
(p / promise-01, ARG0, s2 / she)
(p / promise-01, ARG1, a / and)

Decoded in 22,745 microseconds
Sentence: and mark my words oxford united will be at the top half of the of the division by christmas i promise you once they get it sorted out theres not one side in the second division who are better than oxford

Spans:
Span 0-1:  and => and
Span 35-36:  division => division
Span 16-17:  division => division
Span 11-12:  half => half
Span 19-20:  i => i
Span 25-26:  it => it
Span 1-2:  mark => mark-01
Span 22-23:  once => once
Span 20-21:  promise => promise-01
Span 31-32:  side => side
Span 26-27:  sorted => sort-02
Span 23-24:  they => they
Span 10-11:  top => top
Span 5-6:  united => unite-01
Span 3-4:  words => word
Span 21-22:  you => you

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),division,division,false), Span(31,32,List(1),side,side,false), Span(26,27,List(2),sorted,sort-02,false), Span(25,26,List(3),it,it,false), Span(23,24,List(4),they,they,false), Span(22,23,List(5),once,once,false), Span(21,22,List(6),you,you,false), Span(20,21,List(7),promise,promise-01,false), Span(19,20,List(8),i,i,false), Span(16,17,List(9),division,division,false), Span(11,12,List(10),half,half,false), Span(10,11,List(11),top,top,false), Span(5,6,List(12),united,unite-01,false), Span(3,4,List(13),words,word,false), Span(1,2,List(14),mark,mark-01,false), Span(0,1,List(15),and,and,false)),Map(2 -> sort-02, 5 -> once, 12 -> unite-01, 15 -> and, 8 -> i, 7 -> promise-01, 1 -> side, 4 -> they, 11 -> top, 14 -> mark-01, 6 -> you, 0 -> division, 9 -> division, 3 -> it, 10 -> half, 13 -> word),Map(w -> word, h -> half, s2 -> sort-02, t -> they, s -> side, m -> mark-01, d -> division, y -> you, p -> promise-01, a -> and, d2 -> division, i2 -> i, t2 -> top, i -> it, u -> unite-01, o -> once))),[Ljava.lang.String;@26b90a40,Annotation([Ljava.lang.String;@3e50039c,[Ljava.lang.String;@771d16b9,[Ljava.lang.String;@16bf08c7),Annotation([Ljava.lang.String;@57d94c7b,[Ljava.lang.String;@7b2c4c4b,[Ledu.cmu.lti.nlp.amr.Dependency;@19450f1a),Annotation([Ljava.lang.String;@4e280ec,[Ljava.lang.String;@327e0875,[Ljava.lang.String;@705d5338),Annotation([Ljava.lang.String;@7f02bb29,[Ljava.lang.String;@c4dc1e4,[Ledu.cmu.lti.nlp.amr.Entity;@44f4660b))
AMR:
(a / and, op, m / mark-01)
(d / division, op, p / promise-01)
(h / half, mod, t2 / top)
(h / half, poss, a / and)
(m / mark-01, ARG0, d2 / division)
(m / mark-01, ARG1, w / word)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, y / you)
(p / promise-01, ARG2, t / they)
(p / promise-01, time, o / once)
(s / side, location, d / division)
(s2 / sort-02, ARG0, i / it)
(s2 / sort-02, ARG1, t / they)
(s2 / sort-02, ARG2, u / unite-01)
(u / unite-01, ARG0, w / word)

Decoded in 352,502 microseconds
Sentence: time was when the studio logo did the job promising a distinctive house style stars and creative personnel but given the vagaries of dealmaking in modern hollywood these packages cannot be counted on any more

Spans:
Span 15-16:  and => and
Span 33-34:  any => any
Span 18-19:  but => contrast-01
Span 31-32:  counted => count-02
Span 19-20:  given => give-01
Span 26-27:  hollywood => (organization :name (name :op "Hollywood"))
Span 12-13:  house => house
Span 8-9:  job => job
Span 5-6:  logo => logo
Span 25-26:  modern => modern
Span 28-29:  packages => (thing :ARG1-of package-01)
Span 17-18:  personnel => personnel
Span 9-10:  promising => promise-01
Span 14-15:  stars => star
Span 13-14:  style => style
Span 0-1:  time => time

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),any,any,false), Span(31,32,List(1),counted,count-02,false), Span(28,29,List(3, 2),packages,(thing :ARG1-of package-01),false), Span(26,27,List(6, 5, 4),hollywood,(organization :name (name :op "Hollywood")),false), Span(25,26,List(7),modern,modern,false), Span(19,20,List(8),given,give-01,false), Span(18,19,List(9),but,contrast-01,false), Span(17,18,List(10),personnel,personnel,false), Span(15,16,List(11),and,and,false), Span(14,15,List(12),stars,star,false), Span(13,14,List(13),style,style,false), Span(12,13,List(14),house,house,false), Span(9,10,List(15),promising,promise-01,false), Span(8,9,List(16),job,job,false), Span(5,6,List(17),logo,logo,false), Span(0,1,List(18),time,time,false)),Map(2 -> thing, 5 -> name, 12 -> star, 15 -> promise-01, 8 -> give-01, 18 -> time, 7 -> modern, 17 -> logo, 1 -> count-02, 4 -> organization, 11 -> and, 14 -> house, 6 -> "Hollywood", 0 -> any, 9 -> contrast-01, 16 -> job, 3 -> package-01, 10 -> personnel, 13 -> style),Map(n -> name, h -> house, s2 -> style, t -> thing, p2 -> personnel, j -> job, s -> star, m -> modern, p -> package-01, g -> give-01, a -> any, t2 -> time, a2 -> and, c -> count-02, l -> logo, o -> organization, p3 -> promise-01, c2 -> contrast-01))),[Ljava.lang.String;@9577f8b,Annotation([Ljava.lang.String;@4f768377,[Ljava.lang.String;@6db12262,[Ljava.lang.String;@8488831),Annotation([Ljava.lang.String;@51e54d36,[Ljava.lang.String;@25303e3b,[Ledu.cmu.lti.nlp.amr.Dependency;@245a690),Annotation([Ljava.lang.String;@2aba391a,[Ljava.lang.String;@27faefe0,[Ljava.lang.String;@4b9a6fa1),Annotation([Ljava.lang.String;@816d9ce,[Ljava.lang.String;@14356788,[Ledu.cmu.lti.nlp.amr.Entity;@3e201c15))
AMR:
(a / any, op, p3 / promise-01)
(a2 / and, op, p2 / personnel)
(c / count-02, ARG0, o / organization)
(c / count-02, ARG1, t / thing)
(c2 / contrast-01, ARG0, t2 / time)
(c2 / contrast-01, ARG1, p3 / promise-01)
(c2 / contrast-01, ARG2, g / give-01)
(g / give-01, ARG0, m / modern)
(g / give-01, ARG1, a2 / and)
(h / house, domain, l / logo)
(n / name, op, "Hollywood")
(o / organization, name, n / name)
(p / package-01, ARG1, t / thing)
(p / package-01, topic, c2 / contrast-01)
(p3 / promise-01, ARG0, j / job)
(p3 / promise-01, ARG1, s2 / style)
(p3 / promise-01, ARG2, s / star)
(s2 / style, mod, h / house)

Decoded in 406,381 microseconds
Sentence: mr gould promised the party would restore the great utilities to public ownership and insist on higher standards of regulation than those which had prevailed under the conservatives

Spans:
Span 13-14:  and => and
Span 27-28:  conservatives => conservative
Span 8-9:  great => great
Span 16-17:  higher => high
Span 14-15:  insist => insist-01
Span 12-13:  ownership => ownership
Span 4-5:  party => party
Span 24-25:  prevailed => prevail-01
Span 2-3:  promised => promise-01
Span 11-12:  public => public
Span 19-20:  regulation => regulate-01
Span 6-7:  restore => restore-01
Span 17-18:  standards => standard

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),conservatives,conservative,false), Span(24,25,List(1),prevailed,prevail-01,false), Span(19,20,List(2),regulation,regulate-01,false), Span(17,18,List(3),standards,standard,false), Span(16,17,List(4),higher,high,false), Span(14,15,List(5),insist,insist-01,false), Span(13,14,List(6),and,and,false), Span(12,13,List(7),ownership,ownership,false), Span(11,12,List(8),public,public,false), Span(8,9,List(9),great,great,false), Span(6,7,List(10),restore,restore-01,false), Span(4,5,List(11),party,party,false), Span(2,3,List(12),promised,promise-01,false)),Map(2 -> regulate-01, 5 -> insist-01, 12 -> promise-01, 8 -> public, 7 -> ownership, 1 -> prevail-01, 4 -> high, 11 -> party, 6 -> and, 0 -> conservative, 9 -> great, 3 -> standard, 10 -> restore-01),Map(h -> high, p2 -> public, s -> standard, p -> prevail-01, g -> great, r2 -> restore-01, a -> and, p4 -> promise-01, r -> regulate-01, i -> insist-01, c -> conservative, o -> ownership, p3 -> party))),[Ljava.lang.String;@2e13c690,Annotation([Ljava.lang.String;@14512f92,[Ljava.lang.String;@5e0a24a9,[Ljava.lang.String;@6bed037a),Annotation([Ljava.lang.String;@157f75f1,[Ljava.lang.String;@63182c3d,[Ledu.cmu.lti.nlp.amr.Dependency;@48008b9e),Annotation([Ljava.lang.String;@1bce5700,[Ljava.lang.String;@7b1cf43,[Ljava.lang.String;@2a9e3ba7),Annotation([Ljava.lang.String;@7a5e66cc,[Ljava.lang.String;@4baf19d7,[Ledu.cmu.lti.nlp.amr.Entity;@54c99912))
AMR:
(a / and, op, i / insist-01)
(i / insist-01, ARG0, p3 / party)
(i / insist-01, ARG1, s / standard)
(i / insist-01, ARG2, p / prevail-01)
(i / insist-01, ARG3, o / ownership)
(o / ownership, mod, p2 / public)
(p / prevail-01, ARG1, c / conservative)
(p4 / promise-01, ARG1, r2 / restore-01)
(r / regulate-01, ARG1, g / great)
(r2 / restore-01, ARG0, p3 / party)
(s / standard, mod, h / high)
(s / standard, mod, r / regulate-01)

Decoded in 140,756 microseconds
Sentence: some day ill live in the countryside ive promised myself that

Spans:
Span 6-7:  countryside => countryside
Span 1-2:  day => day
Span 2-3:  ill => ill-41
Span 3-4:  live => live-01
Span 8-9:  promised => promise-01
Span 0-1:  some => some

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promised,promise-01,false), Span(6,7,List(1),countryside,countryside,false), Span(3,4,List(2),live,live-01,false), Span(2,3,List(3),ill,ill-41,false), Span(1,2,List(4),day,day,false), Span(0,1,List(5),some,some,false)),Map(2 -> live-01, 5 -> some, 1 -> countryside, 4 -> day, 0 -> promise-01, 3 -> ill-41),Map(s -> some, d -> day, p -> promise-01, i -> ill-41, l -> live-01, c -> countryside))),[Ljava.lang.String;@7f60983a,Annotation([Ljava.lang.String;@1eaa492b,[Ljava.lang.String;@3da9b5c7,[Ljava.lang.String;@50dd3b71),Annotation([Ljava.lang.String;@6c69a130,[Ljava.lang.String;@ad58deb,[Ledu.cmu.lti.nlp.amr.Dependency;@4a5844db),Annotation([Ljava.lang.String;@6910abfe,[Ljava.lang.String;@458be695,[Ljava.lang.String;@63cf63de),Annotation([Ljava.lang.String;@44a5b703,[Ljava.lang.String;@5b92492a,[Ledu.cmu.lti.nlp.amr.Entity;@6101935d))
AMR:
(d / day, quant, s / some)
(i / ill-41, ARG0, d / day)
(l / live-01, ARG1, p / promise-01)
(l / live-01, manner, i / ill-41)
(p / promise-01, ARG1, c / countryside)

Decoded in 21,800 microseconds
Sentence: perhaps the outcome of tomorrows draw will explain their change of heart they are rumoured to have been promised a base near genoa

Spans:
Span 20-21:  base => base
Span 9-10:  change => change-01
Span 5-6:  draw => draw-02
Span 7-8:  explain => explain-01
Span 11-12:  heart => heart
Span 21-22:  near => near
Span 2-3:  outcome => outcome
Span 0-1:  perhaps => perhaps
Span 18-19:  promised => promise-01
Span 12-13:  they => they

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),near,near,false), Span(20,21,List(1),base,base,false), Span(18,19,List(2),promised,promise-01,false), Span(12,13,List(3),they,they,false), Span(11,12,List(4),heart,heart,false), Span(9,10,List(5),change,change-01,false), Span(7,8,List(6),explain,explain-01,false), Span(5,6,List(7),draw,draw-02,false), Span(2,3,List(8),outcome,outcome,false), Span(0,1,List(9),perhaps,perhaps,false)),Map(2 -> promise-01, 5 -> change-01, 8 -> outcome, 7 -> draw-02, 1 -> base, 4 -> heart, 6 -> explain-01, 9 -> perhaps, 0 -> near, 3 -> they),Map(e -> explain-01, n -> near, h -> heart, t -> they, b -> base, p2 -> perhaps, d -> draw-02, p -> promise-01, c -> change-01, o -> outcome))),[Ljava.lang.String;@4a1fc79a,Annotation([Ljava.lang.String;@6c69757a,[Ljava.lang.String;@7f9fd430,[Ljava.lang.String;@5623dcc5),Annotation([Ljava.lang.String;@4c7335b1,[Ljava.lang.String;@1fca1ead,[Ledu.cmu.lti.nlp.amr.Dependency;@ea40029),Annotation([Ljava.lang.String;@31068b41,[Ljava.lang.String;@24a0718c,[Ljava.lang.String;@217eb11d),Annotation([Ljava.lang.String;@49df819,[Ljava.lang.String;@1f0b33ad,[Ledu.cmu.lti.nlp.amr.Entity;@186db2c7))
AMR:
(b / base, location, n / near)
(c / change-01, ARG0, d / draw-02)
(c / change-01, ARG1, t / they)
(c / change-01, location, h / heart)
(e / explain-01, ARG0, o / outcome)
(e / explain-01, ARG1, c / change-01)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, b / base)
(p2 / perhaps, op, p / promise-01)

Decoded in 165,925 microseconds
Sentence: we promise to give up opening articles with the words it cannot have escaped your attention that ellip

Spans:
Span 6-7:  articles => article
Span 15-16:  attention => attention
Span 13-14:  escaped => escape-01
Span 3-4:  give => give-01
Span 10-11:  it => it
Span 5-6:  opening => open-01
Span 1-2:  promise => promise-01
Span 0-1:  we => we
Span 9-10:  words => word

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),attention,attention,false), Span(13,14,List(1),escaped,escape-01,false), Span(10,11,List(2),it,it,false), Span(9,10,List(3),words,word,false), Span(6,7,List(4),articles,article,false), Span(5,6,List(5),opening,open-01,false), Span(3,4,List(6),give,give-01,false), Span(1,2,List(7),promise,promise-01,false), Span(0,1,List(8),we,we,false)),Map(2 -> it, 5 -> open-01, 8 -> we, 7 -> promise-01, 1 -> escape-01, 4 -> article, 6 -> give-01, 0 -> attention, 3 -> word),Map(w -> word, e -> escape-01, p -> promise-01, g -> give-01, a -> attention, w2 -> we, a2 -> article, i -> it, o -> open-01))),[Ljava.lang.String;@49f43358,Annotation([Ljava.lang.String;@3f56fc56,[Ljava.lang.String;@67d09296,[Ljava.lang.String;@2e47eb19),Annotation([Ljava.lang.String;@739bce0b,[Ljava.lang.String;@79f46f78,[Ledu.cmu.lti.nlp.amr.Dependency;@1ec26dd5),Annotation([Ljava.lang.String;@6eb8cab9,[Ljava.lang.String;@26057079,[Ljava.lang.String;@2f1b2b6f),Annotation([Ljava.lang.String;@20c09c92,[Ljava.lang.String;@4567460a,[Ledu.cmu.lti.nlp.amr.Entity;@7f275e1e))
AMR:
(a2 / article, location, w / word)
(e / escape-01, ARG0, i / it)
(e / escape-01, ARG1, a / attention)
(e / escape-01, ARG2, w / word)
(g / give-01, ARG0, w2 / we)
(g / give-01, ARG1, a2 / article)
(o / open-01, ARG1, a2 / article)
(p / promise-01, ARG2, g / give-01)

Decoded in 101,097 microseconds
Sentence: the university has promised to review its recruitment practice and promotion procedures

Spans:
Span 9-10:  and => and
Span 8-9:  practice => practice-01
Span 11-12:  procedures => procedure
Span 3-4:  promised => promise-01
Span 10-11:  promotion => promote-02
Span 7-8:  recruitment => recruit-01
Span 5-6:  review => review-01
Span 1-2:  university => university

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),procedures,procedure,false), Span(10,11,List(1),promotion,promote-02,false), Span(9,10,List(2),and,and,false), Span(8,9,List(3),practice,practice-01,false), Span(7,8,List(4),recruitment,recruit-01,false), Span(5,6,List(5),review,review-01,false), Span(3,4,List(6),promised,promise-01,false), Span(1,2,List(7),university,university,false)),Map(2 -> and, 5 -> review-01, 7 -> university, 1 -> promote-02, 4 -> recruit-01, 6 -> promise-01, 0 -> procedure, 3 -> practice-01),Map(p2 -> promote-02, r2 -> review-01, p -> procedure, p4 -> promise-01, a -> and, r -> recruit-01, u -> university, p3 -> practice-01))),[Ljava.lang.String;@719444c9,Annotation([Ljava.lang.String;@3d302260,[Ljava.lang.String;@2320ec02,[Ljava.lang.String;@46668952),Annotation([Ljava.lang.String;@75c18a99,[Ljava.lang.String;@75727f34,[Ledu.cmu.lti.nlp.amr.Dependency;@2ffd6b29),Annotation([Ljava.lang.String;@2686695c,[Ljava.lang.String;@426f2ac6,[Ljava.lang.String;@10614f3d),Annotation([Ljava.lang.String;@64993631,[Ljava.lang.String;@6b4fe90,[Ledu.cmu.lti.nlp.amr.Entity;@54b4a360))
AMR:
(a / and, op, p / procedure)
(p2 / promote-02, ARG1, p / procedure)
(p3 / practice-01, ARG1, r / recruit-01)
(p4 / promise-01, ARG0, u / university)
(p4 / promise-01, ARG2, r2 / review-01)
(r2 / review-01, ARG0, a / and)
(r2 / review-01, ARG1, p3 / practice-01)

Decoded in 170,964 microseconds
Sentence: he was less happy with the conduct of some of his players and promised an internal inquiry

Spans:
Span 12-13:  and => and
Span 6-7:  conduct => conduct-01
Span 3-4:  happy => happy
Span 0-1:  he => he
Span 16-17:  inquiry => inquire-01
Span 15-16:  internal => internal
Span 2-3:  less => less
Span 11-12:  players => (person :ARG0-of play-01)
Span 13-14:  promised => promise-01
Span 8-9:  some => some

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),inquiry,inquire-01,false), Span(15,16,List(1),internal,internal,false), Span(13,14,List(2),promised,promise-01,false), Span(12,13,List(3),and,and,false), Span(11,12,List(5, 4),players,(person :ARG0-of play-01),false), Span(8,9,List(6),some,some,false), Span(6,7,List(7),conduct,conduct-01,false), Span(3,4,List(8),happy,happy,false), Span(2,3,List(9),less,less,false), Span(0,1,List(10),he,he,false)),Map(2 -> promise-01, 5 -> play-01, 8 -> happy, 7 -> conduct-01, 1 -> internal, 4 -> person, 6 -> some, 9 -> less, 0 -> inquire-01, 10 -> he, 3 -> and),Map(h -> happy, h2 -> he, p2 -> person, s -> some, p -> promise-01, a -> and, i2 -> internal, i -> inquire-01, l -> less, c -> conduct-01, p3 -> play-01))),[Ljava.lang.String;@1f521f12,Annotation([Ljava.lang.String;@4875e6ce,[Ljava.lang.String;@3484038c,[Ljava.lang.String;@4704f743),Annotation([Ljava.lang.String;@17057422,[Ljava.lang.String;@670b6ffc,[Ledu.cmu.lti.nlp.amr.Dependency;@1fe53e3e),Annotation([Ljava.lang.String;@35968ce,[Ljava.lang.String;@62efae19,[Ljava.lang.String;@658f1e0d),Annotation([Ljava.lang.String;@16fe1b92,[Ljava.lang.String;@4c41a09,[Ledu.cmu.lti.nlp.amr.Entity;@66894750))
AMR:
(a / and, op, p / promise-01)
(a / and, op, p2 / person)
(c / conduct-01, ARG1, p2 / person)
(h / happy, degree, l / less)
(h / happy, domain, h2 / he)
(i / inquire-01, mod, i2 / internal)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, i / inquire-01)
(p2 / person, quant, s / some)
(p3 / play-01, ARG0, p2 / person)

Decoded in 71,515 microseconds
Sentence: hitler in the part of the speech which attracted most attention demanded full powers to act immediately and ruthlessly independent of person and status where anyone was found not to be fulfilling his duties to the peoples community and failing in the war effort and promised an inexorable challenge to every form of corruption and omission of duty

Spans:
Span 15-16:  act => act-02
Span 54-55:  and => and
Span 44-45:  and => and
Span 38-39:  and => and
Span 22-23:  and => and
Span 17-18:  and => and
Span 25-26:  anyone => anyone
Span 10-11:  attention => attention
Span 8-9:  attracted => attract-01
Span 48-49:  challenge => challenge-01
Span 37-38:  community => community
Span 53-54:  corruption => corrupt-01
Span 11-12:  demanded => demand-01
Span 33-34:  duties => duty
Span 57-58:  duty => duty
Span 43-44:  effort => effort
Span 50-51:  every => every
Span 39-40:  failing => fail-01
Span 51-52:  form => form
Span 27-28:  found => find-01
Span 31-32:  fulfilling => fulfill-01
Span 12-13:  full => full
Span 16-17:  immediately => immediate
Span 19-20:  independent => (depend-01 :polarity -)
Span 9-10:  most => most
Span 36-37:  peoples => people
Span 21-22:  person => person
Span 13-14:  powers => power
Span 45-46:  promised => promise-01
Span 18-19:  ruthlessly => ruthless
Span 6-7:  speech => speech
Span 23-24:  status => status
Span 42-43:  war => war

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(57,58,List(0),duty,duty,false), Span(54,55,List(1),and,and,false), Span(53,54,List(2),corruption,corrupt-01,false), Span(51,52,List(3),form,form,false), Span(50,51,List(4),every,every,false), Span(48,49,List(5),challenge,challenge-01,false), Span(45,46,List(6),promised,promise-01,false), Span(44,45,List(7),and,and,false), Span(43,44,List(8),effort,effort,false), Span(42,43,List(9),war,war,false), Span(39,40,List(10),failing,fail-01,false), Span(38,39,List(11),and,and,false), Span(37,38,List(12),community,community,false), Span(36,37,List(13),peoples,people,false), Span(33,34,List(14),duties,duty,false), Span(31,32,List(15),fulfilling,fulfill-01,false), Span(27,28,List(16),found,find-01,false), Span(25,26,List(17),anyone,anyone,false), Span(23,24,List(18),status,status,false), Span(22,23,List(19),and,and,false), Span(21,22,List(20),person,person,false), Span(19,20,List(22, 21),independent,(depend-01 :polarity -),false), Span(18,19,List(23),ruthlessly,ruthless,false), Span(17,18,List(24),and,and,false), Span(16,17,List(25),immediately,immediate,false), Span(15,16,List(26),act,act-02,false), Span(13,14,List(27),powers,power,false), Span(12,13,List(28),full,full,false), Span(11,12,List(29),demanded,demand-01,false), Span(10,11,List(30),attention,attention,false), Span(9,10,List(31),most,most,false), Span(8,9,List(32),attracted,attract-01,false), Span(6,7,List(33),speech,speech,false)),Map(30 -> attention, 2 -> corrupt-01, 5 -> challenge-01, 33 -> speech, 27 -> power, 12 -> community, 8 -> effort, 15 -> fulfill-01, 21 -> depend-01, 18 -> status, 24 -> and, 7 -> and, 1 -> and, 17 -> anyone, 23 -> ruthless, 26 -> act-02, 4 -> every, 11 -> and, 32 -> attract-01, 14 -> duty, 29 -> demand-01, 20 -> person, 28 -> full, 6 -> promise-01, 9 -> war, 0 -> duty, 22 -> -, 16 -> find-01, 19 -> and, 10 -> fail-01, 3 -> form, 31 -> most, 25 -> immediate, 13 -> people),Map(a7 -> act-02, e -> every, w -> war, s2 -> speech, d3 -> depend-01, f4 -> find-01, a9 -> attract-01, e2 -> effort, p2 -> people, a3 -> and, s -> status, a6 -> and, m -> most, d -> duty, p -> promise-01, c3 -> community, a -> and, p4 -> power, d2 -> duty, a5 -> and, f3 -> fulfill-01, a8 -> attention, a2 -> and, r -> ruthless, i -> immediate, c -> corrupt-01, f2 -> fail-01, d4 -> demand-01, f -> form, f5 -> full, p3 -> person, c2 -> challenge-01, a4 -> anyone))),[Ljava.lang.String;@4bc107f4,Annotation([Ljava.lang.String;@6df14b06,[Ljava.lang.String;@7c74af4d,[Ljava.lang.String;@50a12810),Annotation([Ljava.lang.String;@44d5bcb,[Ljava.lang.String;@72c56ea1,[Ledu.cmu.lti.nlp.amr.Dependency;@7fe246e4),Annotation([Ljava.lang.String;@609c6453,[Ljava.lang.String;@3b7eb6b2,[Ljava.lang.String;@7c0c7ea1),Annotation([Ljava.lang.String;@184dbba7,[Ljava.lang.String;@175add68,[Ledu.cmu.lti.nlp.amr.Entity;@4e7de2d2))
AMR:
(a / and, op, c / corrupt-01)
(a2 / and, op, f2 / fail-01)
(a2 / and, op, p / promise-01)
(a3 / and, op, f2 / fail-01)
(a3 / and, op, f3 / fulfill-01)
(a5 / and, op, d3 / depend-01)
(a5 / and, op, p3 / person)
(a5 / and, op, s / status)
(a6 / and, op, d3 / depend-01)
(a6 / and, op, d4 / demand-01)
(a6 / and, op, p / promise-01)
(a7 / act-02, ARG1, a8 / attention)
(a7 / act-02, time, i / immediate)
(a9 / attract-01, ARG0, s2 / speech)
(a9 / attract-01, ARG1, a6 / and)
(c / corrupt-01, ARG1, d / duty)
(c2 / challenge-01, ARG1, f / form)
(d3 / depend-01, degree, r / ruthless)
(d3 / depend-01, polarity, -)
(d4 / demand-01, ARG0, m / most)
(d4 / demand-01, ARG1, a8 / attention)
(e2 / effort, mod, w / war)
(f / form, mod, e / every)
(f / form, topic, c / corrupt-01)
(f2 / fail-01, ARG1, e2 / effort)
(f3 / fulfill-01, ARG1, d2 / duty)
(f3 / fulfill-01, ARG2, c3 / community)
(f3 / fulfill-01, destination, p2 / people)
(f4 / find-01, ARG0, a3 / and)
(f4 / find-01, ARG1, a4 / anyone)
(p / promise-01, ARG1, c2 / challenge-01)
(p4 / power, mod, f5 / full)
(p4 / power, purpose, a7 / act-02)

Decoded in 1,127,861 microseconds
Sentence: 3 million adults receiving income support will lose out under the poll tax next year despite government promises to protect their income michael meacher labours social security spokesman said yesterday writes john pienaar

Spans:
Span 0-1:  3 => 3
Span 2-3:  adults => adult
Span 21-22:  income => income
Span 4-5:  income => income
Span 7-8:  lose => lose-02
Span 13-14:  next => next
Span 11-12:  poll => poll-01
Span 17-18:  promises => promise-01
Span 19-20:  protect => protect-01
Span 3-4:  receiving => receive-01
Span 28-29:  said => say-01
Span 26-27:  security => security
Span 25-26:  social => society
Span 27-28:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 5-6:  support => support-01
Span 12-13:  tax => tax-01
Span 30-31:  writes => write-01
Span 14-15:  year => year
Span 29-30:  yesterday => yesterday

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),writes,write-01,false), Span(29,30,List(1),yesterday,yesterday,false), Span(28,29,List(2),said,say-01,false), Span(27,28,List(4, 3),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(26,27,List(5),security,security,false), Span(25,26,List(6),social,society,false), Span(21,22,List(7),income,income,false), Span(19,20,List(8),protect,protect-01,false), Span(17,18,List(9),promises,promise-01,false), Span(14,15,List(10),year,year,false), Span(13,14,List(11),next,next,false), Span(12,13,List(12),tax,tax-01,false), Span(11,12,List(13),poll,poll-01,false), Span(7,8,List(14),lose,lose-02,false), Span(5,6,List(15),support,support-01,false), Span(4,5,List(16),income,income,false), Span(3,4,List(17),receiving,receive-01,false), Span(2,3,List(18),adults,adult,false), Span(0,1,List(19),3,3,false)),Map(2 -> say-01, 5 -> security, 12 -> tax-01, 15 -> support-01, 8 -> protect-01, 18 -> adult, 7 -> income, 17 -> receive-01, 1 -> yesterday, 4 -> spokesman, 11 -> next, 14 -> lose-02, 6 -> society, 0 -> write-01, 9 -> promise-01, 16 -> income, 19 -> 3, 3 -> have-org-role-91, 10 -> year, 13 -> poll-01),Map(s5 -> support-01, w -> write-01, n -> next, h -> have-org-role-91, s2 -> spokesman, t -> tax-01, p2 -> promise-01, s -> say-01, s4 -> society, y -> yesterday, p -> protect-01, a -> adult, i2 -> income, r -> receive-01, i -> income, s3 -> security, l -> lose-02, 3 -> 3, p3 -> poll-01, y2 -> year))),[Ljava.lang.String;@2fc536a8,Annotation([Ljava.lang.String;@3c876818,[Ljava.lang.String;@5dc31eb3,[Ljava.lang.String;@3514a9dc),Annotation([Ljava.lang.String;@5f9bc5bd,[Ljava.lang.String;@6bd32c54,[Ledu.cmu.lti.nlp.amr.Dependency;@75037619),Annotation([Ljava.lang.String;@363e9f53,[Ljava.lang.String;@494e1df7,[Ljava.lang.String;@279168ba),Annotation([Ljava.lang.String;@3b729fa1,[Ljava.lang.String;@624e2184,[Ledu.cmu.lti.nlp.amr.Entity;@777a9387))
AMR:
(h / have-org-role-91, ARG1, s3 / security)
(h / have-org-role-91, ARG2, s2 / spokesman)
(l / lose-02, ARG0, a / adult)
(l / lose-02, ARG1, p / protect-01)
(p / protect-01, ARG0, y2 / year)
(p / protect-01, ARG1, s / say-01)
(p / protect-01, concession, h / have-org-role-91)
(p2 / promise-01, ARG1, p / protect-01)
(p2 / promise-01, part, i / income)
(r / receive-01, ARG0, a / adult)
(r / receive-01, ARG1, s5 / support-01)
(s / say-01, ARG1, w / write-01)
(s3 / security, mod, s4 / society)
(s5 / support-01, ARG0, 3 / 3)
(s5 / support-01, ARG1, i2 / income)
(t / tax-01, ARG1, y2 / year)
(t / tax-01, ARG3, p3 / poll-01)
(w / write-01, ARG1, y / yesterday)
(y2 / year, mod, n / next)

Decoded in 687,999 microseconds
Sentence: the councils recreation and amenities committee has promised the proposal will be after a petition calling for the park was received by the committee chairman mr dave cowan

Spans:
Span 12-13:  after => after
Span 4-5:  amenities => amenity
Span 3-4:  and => and
Span 24-25:  chairman => (have-org-role-91 :ARG2 chairman)
Span 23-24:  committee => committee
Span 5-6:  committee => committee
Span 1-2:  councils => council
Span 18-19:  park => park
Span 14-15:  petition => petition-01
Span 7-8:  promised => promise-01
Span 9-10:  proposal => propose-01
Span 20-21:  received => receive-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),chairman,(have-org-role-91 :ARG2 chairman),false), Span(23,24,List(2),committee,committee,false), Span(20,21,List(3),received,receive-01,false), Span(18,19,List(4),park,park,false), Span(14,15,List(5),petition,petition-01,false), Span(12,13,List(6),after,after,false), Span(9,10,List(7),proposal,propose-01,false), Span(7,8,List(8),promised,promise-01,false), Span(5,6,List(9),committee,committee,false), Span(4,5,List(10),amenities,amenity,false), Span(3,4,List(11),and,and,false), Span(1,2,List(12),councils,council,false)),Map(2 -> committee, 5 -> petition-01, 12 -> council, 8 -> promise-01, 7 -> propose-01, 1 -> chairman, 4 -> park, 11 -> and, 6 -> after, 0 -> have-org-role-91, 9 -> committee, 3 -> receive-01, 10 -> amenity),Map(h -> have-org-role-91, p2 -> petition-01, a3 -> and, c4 -> council, p -> park, a -> after, c3 -> committee, p4 -> promise-01, r -> receive-01, a2 -> amenity, c -> chairman, p3 -> propose-01, c2 -> committee))),[Ljava.lang.String;@106bc159,Annotation([Ljava.lang.String;@1262c27b,[Ljava.lang.String;@11ce22ab,[Ljava.lang.String;@744611ae),Annotation([Ljava.lang.String;@2432f225,[Ljava.lang.String;@cb76db4,[Ledu.cmu.lti.nlp.amr.Dependency;@5e834af1),Annotation([Ljava.lang.String;@7dad44b0,[Ljava.lang.String;@7a78bf45,[Ljava.lang.String;@d5589d4),Annotation([Ljava.lang.String;@6acbc422,[Ljava.lang.String;@67b9caf4,[Ledu.cmu.lti.nlp.amr.Entity;@56bb8e5f))
AMR:
(a / after, op, r / receive-01)
(a3 / and, op, c3 / committee)
(c3 / committee, mod, a2 / amenity)
(h / have-org-role-91, ARG0, a / after)
(h / have-org-role-91, ARG1, c2 / committee)
(h / have-org-role-91, ARG2, c / chairman)
(p2 / petition-01, ARG0, p / park)
(p3 / propose-01, ARG0, c4 / council)
(p4 / promise-01, ARG0, a3 / and)
(p4 / promise-01, ARG1, p3 / propose-01)
(r / receive-01, ARG0, p3 / propose-01)
(r / receive-01, ARG1, p2 / petition-01)

Decoded in 239,758 microseconds
Sentence: we are as distressed as anybody when things go wrong sometimes under intolerable pressure and i can promise patients that despite mr richardsons views to the contrary they can continue to put their trust in us

Spans:
Span 14-15:  and => and
Span 5-6:  anybody => anybody
Span 28-29:  can => possible
Span 16-17:  can => possible
Span 29-30:  continue => continue-01
Span 26-27:  contrary => contrary-41
Span 15-16:  i => i
Span 18-19:  patients => (have-rel-role-91 :ARG2 patient)
Span 13-14:  pressure => pressure-01
Span 17-18:  promise => promise-01
Span 10-11:  sometimes => sometimes
Span 27-28:  they => they
Span 7-8:  things => thing
Span 33-34:  trust => trust-01
Span 0-1:  we => we
Span 9-10:  wrong => wrong-41

Langrangian relaxation converged after 62 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),trust,trust-01,false), Span(29,30,List(1),continue,continue-01,false), Span(28,29,List(2),can,possible,false), Span(27,28,List(3),they,they,false), Span(26,27,List(4),contrary,contrary-41,false), Span(18,19,List(6, 5),patients,(have-rel-role-91 :ARG2 patient),false), Span(17,18,List(7),promise,promise-01,false), Span(16,17,List(8),can,possible,false), Span(15,16,List(9),i,i,false), Span(14,15,List(10),and,and,false), Span(13,14,List(11),pressure,pressure-01,false), Span(10,11,List(12),sometimes,sometimes,false), Span(9,10,List(13),wrong,wrong-41,false), Span(7,8,List(14),things,thing,false), Span(5,6,List(15),anybody,anybody,false), Span(0,1,List(16),we,we,false)),Map(2 -> possible, 5 -> have-rel-role-91, 12 -> sometimes, 15 -> anybody, 8 -> possible, 7 -> promise-01, 1 -> continue-01, 4 -> contrary-41, 11 -> pressure-01, 14 -> thing, 6 -> patient, 0 -> trust-01, 9 -> i, 16 -> we, 3 -> they, 10 -> and, 13 -> wrong-41),Map(w -> wrong-41, h -> have-rel-role-91, p5 -> pressure-01, t -> trust-01, p2 -> patient, s -> sometimes, t3 -> thing, p -> possible, a -> and, p4 -> possible, t2 -> they, w2 -> we, a2 -> anybody, i -> i, c -> continue-01, p3 -> promise-01, c2 -> contrary-41))),[Ljava.lang.String;@23a528bd,Annotation([Ljava.lang.String;@3015a293,[Ljava.lang.String;@5c64798e,[Ljava.lang.String;@48688905),Annotation([Ljava.lang.String;@46fbcc66,[Ljava.lang.String;@3d2860f2,[Ledu.cmu.lti.nlp.amr.Dependency;@25f4cf3c),Annotation([Ljava.lang.String;@6b517f9b,[Ljava.lang.String;@3390d028,[Ljava.lang.String;@68520c8a),Annotation([Ljava.lang.String;@62b56d87,[Ljava.lang.String;@7529ecb1,[Ledu.cmu.lti.nlp.amr.Entity;@1372948f))
AMR:
(a / and, op, c / continue-01)
(a / and, op, p3 / promise-01)
(a / and, op, p4 / possible)
(a / and, op, s / sometimes)
(c / continue-01, ARG0, t2 / they)
(c / continue-01, ARG1, c2 / contrary-41)
(h / have-rel-role-91, ARG0, w2 / we)
(h / have-rel-role-91, ARG1, i / i)
(h / have-rel-role-91, ARG2, p2 / patient)
(p / possible, domain, c / continue-01)
(p3 / promise-01, ARG0, i / i)
(p3 / promise-01, ARG1, t3 / thing)
(p5 / pressure-01, manner, w / wrong-41)
(t / trust-01, poss, t2 / they)
(w / wrong-41, ARG0, a2 / anybody)
(w / wrong-41, ARG1, t3 / thing)

Decoded in 999,256 microseconds
Sentence: to finance a dollars 94bn social spending programme promised during the campaign the new administration plans to increase taxes by about 65 per cent while economists expect a sharp recession next year

Spans:
Span 21-22:  65 => 65
Span 14-15:  administration => administrate-01
Span 11-12:  campaign => campaign-01
Span 23-24:  cent => (monetary-quantity :unit cent)
Span 3-4:  dollars => (monetary-quantity :unit dollar)
Span 25-26:  economists => economy
Span 26-27:  expect => expect-01
Span 1-2:  finance => finance-01
Span 17-18:  increase => increase-01
Span 13-14:  new => new
Span 30-31:  next => next
Span 15-16:  plans => plan-01
Span 7-8:  programme => program
Span 8-9:  promised => promise-01
Span 29-30:  recession => recession
Span 28-29:  sharp => sharp
Span 5-6:  social => society
Span 6-7:  spending => spend-01
Span 18-19:  taxes => tax-01
Span 31-32:  year => year

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),year,year,false), Span(30,31,List(1),next,next,false), Span(29,30,List(2),recession,recession,false), Span(28,29,List(3),sharp,sharp,false), Span(26,27,List(4),expect,expect-01,false), Span(25,26,List(5),economists,economy,false), Span(23,24,List(7, 6),cent,(monetary-quantity :unit cent),false), Span(21,22,List(8),65,65,false), Span(18,19,List(9),taxes,tax-01,false), Span(17,18,List(10),increase,increase-01,false), Span(15,16,List(11),plans,plan-01,false), Span(14,15,List(12),administration,administrate-01,false), Span(13,14,List(13),new,new,false), Span(11,12,List(14),campaign,campaign-01,false), Span(8,9,List(15),promised,promise-01,false), Span(7,8,List(16),programme,program,false), Span(6,7,List(17),spending,spend-01,false), Span(5,6,List(18),social,society,false), Span(3,4,List(20, 19),dollars,(monetary-quantity :unit dollar),false), Span(1,2,List(21),finance,finance-01,false)),Map(2 -> recession, 5 -> economy, 12 -> administrate-01, 15 -> promise-01, 8 -> 65, 21 -> finance-01, 18 -> society, 7 -> cent, 17 -> spend-01, 1 -> next, 4 -> expect-01, 11 -> plan-01, 14 -> campaign-01, 20 -> dollar, 6 -> monetary-quantity, 0 -> year, 9 -> tax-01, 16 -> program, 19 -> monetary-quantity, 3 -> sharp, 10 -> increase-01, 13 -> new),Map(e -> expect-01, n -> next, s2 -> spend-01, t -> tax-01, m2 -> monetary-quantity, p2 -> promise-01, e2 -> economy, s -> sharp, d -> dollar, m -> monetary-quantity, y -> year, p -> plan-01, a -> administrate-01, r -> recession, i -> increase-01, s3 -> society, c -> cent, 6 -> 65, f -> finance-01, p3 -> program, c2 -> campaign-01, n2 -> new))),[Ljava.lang.String;@669f1fb5,Annotation([Ljava.lang.String;@58dad8b5,[Ljava.lang.String;@7c980a6,[Ljava.lang.String;@3e1d1648),Annotation([Ljava.lang.String;@67a1f0d3,[Ljava.lang.String;@38c9e1cc,[Ledu.cmu.lti.nlp.amr.Dependency;@4e073534),Annotation([Ljava.lang.String;@3b3610f1,[Ljava.lang.String;@5a925c95,[Ljava.lang.String;@3efc68a7),Annotation([Ljava.lang.String;@2d3acc3f,[Ljava.lang.String;@6f37534b,[Ledu.cmu.lti.nlp.amr.Entity;@193d99f8))
AMR:
(c2 / campaign-01, ARG1, 6 / 65)
(e / expect-01, ARG0, e2 / economy)
(e / expect-01, ARG1, r / recession)
(e / expect-01, time, y / year)
(f / finance-01, ARG0, n2 / new)
(f / finance-01, ARG1, m2 / monetary-quantity)
(f / finance-01, condition, a / administrate-01)
(i / increase-01, ARG0, a / administrate-01)
(i / increase-01, ARG1, t / tax-01)
(m / monetary-quantity, unit, c / cent)
(m2 / monetary-quantity, unit, d / dollar)
(p / plan-01, ARG1, i / increase-01)
(p / plan-01, purpose, e / expect-01)
(p2 / promise-01, ARG0, p3 / program)
(p2 / promise-01, ARG2, c2 / campaign-01)
(p3 / program, mod, s2 / spend-01)
(r / recession, mod, s / sharp)
(s2 / spend-01, ARG0, s3 / society)
(s2 / spend-01, ARG1, t / tax-01)
(t / tax-01, ARG1, m / monetary-quantity)
(y / year, mod, n / next)

Decoded in 778,500 microseconds
Sentence: in february 1989 greenwich promised in its development plan to maintain existing crossboundary arrangements

Spans:
Span 13-14:  arrangements => arrange-01
Span 7-8:  development => develop-02
Span 11-12:  existing => exist-01
Span 1-3:  february 1989 => (date-entity :month 2 :year 1989)
Span 10-11:  maintain => maintain-01
Span 8-9:  plan => plan-01
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),arrangements,arrange-01,false), Span(11,12,List(1),existing,exist-01,false), Span(10,11,List(2),maintain,maintain-01,false), Span(8,9,List(3),plan,plan-01,false), Span(7,8,List(4),development,develop-02,false), Span(4,5,List(5),promised,promise-01,false), Span(1,3,List(8, 7, 6),february 1989,(date-entity :month 2 :year 1989),false)),Map(2 -> maintain-01, 5 -> promise-01, 8 -> 1989, 7 -> 2, 1 -> exist-01, 4 -> develop-02, 6 -> date-entity, 0 -> arrange-01, 3 -> plan-01),Map(e -> exist-01, 2 -> 2, p2 -> promise-01, d -> develop-02, m -> maintain-01, 1 -> 1989, p -> plan-01, a -> arrange-01, d2 -> date-entity))),[Ljava.lang.String;@1b4775ba,Annotation([Ljava.lang.String;@70821453,[Ljava.lang.String;@6c048ed9,[Ljava.lang.String;@1f3e7ff6),Annotation([Ljava.lang.String;@4042ff80,[Ljava.lang.String;@6e944d75,[Ledu.cmu.lti.nlp.amr.Dependency;@4a69750a),Annotation([Ljava.lang.String;@518309b0,[Ljava.lang.String;@71f12b9e,[Ljava.lang.String;@1066cc83),Annotation([Ljava.lang.String;@4cfcb4de,[Ljava.lang.String;@62c6824e,[Ledu.cmu.lti.nlp.amr.Entity;@5695018b))
AMR:
(d2 / date-entity, month, 2 / 2)
(d2 / date-entity, year, 1 / 1989)
(e / exist-01, ARG1, p / plan-01)
(m / maintain-01, ARG1, a / arrange-01)
(p / plan-01, ARG1, d / develop-02)
(p2 / promise-01, ARG1, p / plan-01)
(p2 / promise-01, ARG2, m / maintain-01)
(p2 / promise-01, time, d2 / date-entity)

Decoded in 74,663 microseconds
Sentence:   he promised that anyone who had been treated unjustly or humiliated could resort to law

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   he promised that anyone who had been treated unjustly or humiliated could resort to law
myTokenized = he promised that anyone who had been treated unjustly or humiliated could resort to law
i = 0
prefix = List(he)
regexr = \Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he can promise you a seat in the cabinet

Spans:
Span 8-9:  cabinet => cabinet
Span 1-2:  can => possible
Span 0-1:  he => he
Span 2-3:  promise => promise-01
Span 5-6:  seat => seat
Span 3-4:  you => you

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),cabinet,cabinet,false), Span(5,6,List(1),seat,seat,false), Span(3,4,List(2),you,you,false), Span(2,3,List(3),promise,promise-01,false), Span(1,2,List(4),can,possible,false), Span(0,1,List(5),he,he,false)),Map(2 -> you, 5 -> he, 1 -> seat, 4 -> possible, 0 -> cabinet, 3 -> promise-01),Map(h -> he, p2 -> possible, s -> seat, p -> promise-01, y -> you, c -> cabinet))),[Ljava.lang.String;@4a357b09,Annotation([Ljava.lang.String;@7d20b1ee,[Ljava.lang.String;@6d81c06f,[Ljava.lang.String;@6180ef93),Annotation([Ljava.lang.String;@57f0cde7,[Ljava.lang.String;@25e25cc,[Ledu.cmu.lti.nlp.amr.Dependency;@7303754a),Annotation([Ljava.lang.String;@68098843,[Ljava.lang.String;@49d11c11,[Ljava.lang.String;@3f89c5f3),Annotation([Ljava.lang.String;@6e22f51b,[Ljava.lang.String;@3909f81a,[Ledu.cmu.lti.nlp.amr.Entity;@3d7f9037))
AMR:
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, c / cabinet)
(p / promise-01, ARG2, y / you)
(p / promise-01, mod, p2 / possible)
(s / seat, poss, h / he)

Decoded in 36,327 microseconds
Sentence: in 1985 and 1986 with major landdrainage grants cut and the price of wheat  promising to fall some farmers were still carrying out land drainage to promote  cereal production which with the enforcement of dairy quotas continued at  least for the time being to offer a good return

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = in 1985 and 1986 with major landdrainage grants cut and the price of wheat  promising to fall some farmers were still carrying out land drainage to promote  cereal production which with the enforcement of dairy quotas continued at  least for the time being to offer a good return
myTokenized = in 1985 and 1986 with major landdrainage grants cut and the price of wheat promising to fall some farmers were still carrying out land drainage to promote cereal production which with the enforcement of dairy quotas continued at least for the time being to offer a good return
i = 14
prefix = List(in, 1985, and, 1986, with, major, landdrainage, grants, cut, and, the, price, of, wheat, promising)
regexr = \Qi\E ?\Qn\E ?\Q1\E ?\Q9\E ?\Q8\E ?\Q5\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Q1\E ?\Q9\E ?\Q8\E ?\Q6\E ?\Qw\E ?\Qi\E ?\Qt\E ?\Qh\E ?\Qm\E ?\Qa\E ?\Qj\E ?\Qo\E ?\Qr\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qd\E ?\Qr\E ?\Qa\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qg\E ?\Qe\E ?\Qg\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qt\E ?\Qs\E ?\Qc\E ?\Qu\E ?\Qt\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qe\E ?\Qo\E ?\Qf\E ?\Qw\E ?\Qh\E ?\Qe\E ?\Qa\E ?\Qt\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qn\E ?\Qg\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: those who assign sufficient importance to the interest people have in being able to impose on themselves obligations to other people as a means of creating special bonds with other people believe in a right to promise

Spans:
Span 12-13:  able => possible
Span 2-3:  assign => assign-01
Span 31-32:  believe => believe-01
Span 27-28:  bonds => bond
Span 25-26:  creating => create-01
Span 4-5:  importance => important
Span 14-15:  impose => impose-01
Span 7-8:  interest => interest-01
Span 23-24:  means => mean-01
Span 17-18:  obligations => obligate-01
Span 29-30:  other => other
Span 19-20:  other => other
Span 36-37:  promise => promise-01
Span 26-27:  special => special
Span 3-4:  sufficient => suffice-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),promise,promise-01,false), Span(31,32,List(1),believe,believe-01,false), Span(29,30,List(2),other,other,false), Span(27,28,List(3),bonds,bond,false), Span(26,27,List(4),special,special,false), Span(25,26,List(5),creating,create-01,false), Span(23,24,List(6),means,mean-01,false), Span(19,20,List(7),other,other,false), Span(17,18,List(8),obligations,obligate-01,false), Span(14,15,List(9),impose,impose-01,false), Span(12,13,List(10),able,possible,false), Span(7,8,List(11),interest,interest-01,false), Span(4,5,List(12),importance,important,false), Span(3,4,List(13),sufficient,suffice-01,false), Span(2,3,List(14),assign,assign-01,false)),Map(2 -> other, 5 -> create-01, 12 -> important, 8 -> obligate-01, 7 -> other, 1 -> believe-01, 4 -> special, 11 -> interest-01, 14 -> assign-01, 6 -> mean-01, 0 -> promise-01, 9 -> impose-01, 3 -> bond, 10 -> possible, 13 -> suffice-01),Map(s2 -> suffice-01, b -> believe-01, b2 -> bond, o3 -> obligate-01, p2 -> possible, s -> special, m -> mean-01, i3 -> important, p -> promise-01, a -> assign-01, o2 -> other, i2 -> interest-01, i -> impose-01, c -> create-01, o -> other))),[Ljava.lang.String;@51d41964,Annotation([Ljava.lang.String;@3bcf1e34,[Ljava.lang.String;@1ac80699,[Ljava.lang.String;@4229348b),Annotation([Ljava.lang.String;@1f38b39c,[Ljava.lang.String;@4397d6c7,[Ledu.cmu.lti.nlp.amr.Dependency;@2595c57c),Annotation([Ljava.lang.String;@bd8632b,[Ljava.lang.String;@2b56a220,[Ljava.lang.String;@44adf91a),Annotation([Ljava.lang.String;@79bd3d2f,[Ljava.lang.String;@76fc1719,[Ledu.cmu.lti.nlp.amr.Entity;@2050a756))
AMR:
(a / assign-01, ARG1, i3 / important)
(b / believe-01, ARG0, o2 / other)
(b / believe-01, ARG1, s / special)
(c / create-01, ARG1, b2 / bond)
(i / impose-01, ARG1, i2 / interest-01)
(i / impose-01, ARG2, o3 / obligate-01)
(i / impose-01, purpose, b / believe-01)
(i2 / interest-01, ARG0, o / other)
(i2 / interest-01, ARG1, i3 / important)
(m / mean-01, ARG1, b / believe-01)
(m / mean-01, ARG2, c / create-01)
(p / promise-01, ARG1, m / mean-01)
(p2 / possible, domain, i / impose-01)
(s2 / suffice-01, ARG0, i3 / important)

Decoded in 214,483 microseconds
Sentence: in their declaration on liberated europe the three leaders promised to help the peoples freed from the domination of nazi germany to solve by democratic means their pressing political and economic problems

NER Entity: (country :name (name :op "germany"))
Spans:
Span 29-30:  and => and
Span 2-3:  declaration => declare-02
Span 24-25:  democratic => democracy
Span 30-31:  economic => economy
Span 5-6:  europe => (continent :name (name :op "Europe"))
Span 14-15:  freed => free-01
Span 11-12:  help => help-01
Span 8-9:  leaders => (person :ARG0-of lead-02)
Span 25-26:  means => mean-01
Span 19-20:  nazi => nazi
Span 13-14:  peoples => people
Span 28-29:  political => politics
Span 27-28:  pressing => press-01
Span 31-32:  problems => problem
Span 9-10:  promised => promise-01
Span 22-23:  solve => solve-01
Span 7-8:  three => 3

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),problems,problem,false), Span(30,31,List(1),economic,economy,false), Span(29,30,List(2),and,and,false), Span(28,29,List(3),political,politics,false), Span(27,28,List(4),pressing,press-01,false), Span(25,26,List(5),means,mean-01,false), Span(24,25,List(6),democratic,democracy,false), Span(22,23,List(7),solve,solve-01,false), Span(19,20,List(8),nazi,nazi,false), Span(14,15,List(9),freed,free-01,false), Span(13,14,List(10),peoples,people,false), Span(11,12,List(11),help,help-01,false), Span(9,10,List(12),promised,promise-01,false), Span(8,9,List(14, 13),leaders,(person :ARG0-of lead-02),false), Span(7,8,List(15),three,3,false), Span(5,6,List(18, 17, 16),europe,(continent :name (name :op "Europe")),false), Span(2,3,List(19),declaration,declare-02,false)),Map(2 -> and, 5 -> mean-01, 12 -> promise-01, 15 -> 3, 8 -> nazi, 18 -> "Europe", 7 -> solve-01, 17 -> name, 1 -> economy, 4 -> press-01, 11 -> help-01, 14 -> lead-02, 6 -> democracy, 0 -> problem, 9 -> free-01, 16 -> continent, 19 -> declare-02, 3 -> politics, 10 -> people, 13 -> person),Map(e -> economy, n -> nazi, h -> help-01, p5 -> promise-01, p2 -> politics, s -> solve-01, m -> mean-01, d -> democracy, p -> problem, a -> and, p4 -> people, d2 -> declare-02, c -> continent, l -> lead-02, p6 -> person, f -> free-01, 3 -> 3, p3 -> press-01, n2 -> name))),[Ljava.lang.String;@77fb2e99,Annotation([Ljava.lang.String;@bb07c59,[Ljava.lang.String;@6fb3bd0d,[Ljava.lang.String;@140d9c6),Annotation([Ljava.lang.String;@489956ce,[Ljava.lang.String;@4b12139e,[Ledu.cmu.lti.nlp.amr.Dependency;@fc61093),Annotation([Ljava.lang.String;@146a2afc,[Ljava.lang.String;@462c10dc,[Ljava.lang.String;@7706ff81),Annotation([Ljava.lang.String;@6c70ab33,[Ljava.lang.String;@58f7d8e3,[Ledu.cmu.lti.nlp.amr.Entity;@77c04cb6))
AMR:
(a / and, op, p / problem)
(c / continent, name, n2 / name)
(d2 / declare-02, ARG0, c / continent)
(f / free-01, ARG1, p4 / people)
(f / free-01, purpose, s / solve-01)
(h / help-01, ARG0, p6 / person)
(h / help-01, ARG1, p4 / people)
(l / lead-02, ARG0, p6 / person)
(m / mean-01, mod, d / democracy)
(n2 / name, op, "Europe")
(p / problem, mod, e / economy)
(p3 / press-01, ARG0, p2 / politics)
(p3 / press-01, ARG1, a / and)
(p5 / promise-01, ARG0, p6 / person)
(p5 / promise-01, ARG1, d2 / declare-02)
(p6 / person, quant, 3 / 3)
(s / solve-01, ARG0, n / nazi)
(s / solve-01, ARG1, a / and)
(s / solve-01, ARG2, m / mean-01)

Decoded in 498,900 microseconds
Sentence: his performance was intended as a celebration of that renaissance and also of the prospects for world peace for in moscow comrade gorbachev and president reagan were holding a summit meeting which promised to bear fruit in disarmament, celebratory events were taking place all over the soviet union but none was more extraordinary in its modest way than charskys promised to be

NER Entity: (country :name (name :op "moscow"))
NER Entity: (person :name (name :op "reagan"))
NER Entity: (country :name (name :op "soviet"))
Spans:
Span 44-45:  all => all
Span 11-12:  also => also
Span 23-24:  and => and
Span 10-11:  and => and
Span 34-35:  bear => bear-02
Span 49-50:  but => contrast-01
Span 6-7:  celebration => celebrate-02
Span 37-38:  disarmament => disarm-01
Span 40-41:  events => event
Span 53-54:  extraordinary => extraordinary
Span 35-36:  fruit => fruit
Span 27-28:  holding => hold-01
Span 3-4:  intended => intend-01
Span 30-31:  meeting => meet-03
Span 56-57:  modest => modest
Span 50-51:  none => none
Span 17-18:  peace => peace
Span 1-2:  performance => perform-01
Span 43-44:  place => place
Span 24-25:  president => (have-org-role-91 :ARG2 president)
Span 60-61:  promised => promise-01
Span 32-33:  promised => promise-01
Span 14-15:  prospects => prospect
Span 9-10:  renaissance => renaissance
Span 29-30:  summit => summit
Span 48-49:  union => union
Span 57-58:  way => way
Span 16-17:  world => world

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(60,61,List(0),promised,promise-01,false), Span(57,58,List(1),way,way,false), Span(56,57,List(2),modest,modest,false), Span(53,54,List(3),extraordinary,extraordinary,false), Span(50,51,List(4),none,none,false), Span(49,50,List(5),but,contrast-01,false), Span(48,49,List(6),union,union,false), Span(44,45,List(7),all,all,false), Span(43,44,List(8),place,place,false), Span(40,41,List(9),events,event,false), Span(37,38,List(10),disarmament,disarm-01,false), Span(35,36,List(11),fruit,fruit,false), Span(34,35,List(12),bear,bear-02,false), Span(32,33,List(13),promised,promise-01,false), Span(30,31,List(14),meeting,meet-03,false), Span(29,30,List(15),summit,summit,false), Span(27,28,List(16),holding,hold-01,false), Span(24,25,List(18, 17),president,(have-org-role-91 :ARG2 president),false), Span(23,24,List(19),and,and,false), Span(17,18,List(20),peace,peace,false), Span(16,17,List(21),world,world,false), Span(14,15,List(22),prospects,prospect,false), Span(11,12,List(23),also,also,false), Span(10,11,List(24),and,and,false), Span(9,10,List(25),renaissance,renaissance,false), Span(6,7,List(26),celebration,celebrate-02,false), Span(3,4,List(27),intended,intend-01,false), Span(1,2,List(28),performance,perform-01,false)),Map(2 -> modest, 5 -> contrast-01, 27 -> intend-01, 12 -> bear-02, 8 -> place, 15 -> summit, 21 -> world, 18 -> president, 24 -> and, 7 -> all, 1 -> way, 17 -> have-org-role-91, 23 -> also, 26 -> celebrate-02, 4 -> none, 11 -> fruit, 14 -> meet-03, 20 -> peace, 28 -> perform-01, 6 -> union, 9 -> event, 0 -> promise-01, 22 -> prospect, 16 -> hold-01, 19 -> and, 10 -> disarm-01, 3 -> extraordinary, 25 -> renaissance, 13 -> promise-01),Map(e -> extraordinary, n -> none, w -> way, h -> hold-01, h2 -> have-org-role-91, p5 -> peace, b -> bear-02, m2 -> meet-03, e2 -> event, p2 -> place, a3 -> also, s -> summit, d -> disarm-01, m -> modest, p -> promise-01, a -> all, p4 -> president, p7 -> perform-01, w2 -> world, i -> intend-01, r -> renaissance, a2 -> and, c -> contrast-01, p6 -> prospect, u -> union, f -> fruit, p3 -> promise-01, c2 -> celebrate-02, a4 -> and))),[Ljava.lang.String;@26215e72,Annotation([Ljava.lang.String;@58bfa1ec,[Ljava.lang.String;@d1fba79,[Ljava.lang.String;@1e0b64aa),Annotation([Ljava.lang.String;@7dfde44e,[Ljava.lang.String;@2797fd81,[Ledu.cmu.lti.nlp.amr.Dependency;@6b843475),Annotation([Ljava.lang.String;@34902478,[Ljava.lang.String;@634a5d3d,[Ljava.lang.String;@272f82b8),Annotation([Ljava.lang.String;@202f1221,[Ljava.lang.String;@724f4508,[Ledu.cmu.lti.nlp.amr.Entity;@323d4ad9))
AMR:
(a2 / and, mod, a3 / also)
(a2 / and, op, h / hold-01)
(a4 / and, op, h / hold-01)
(b / bear-02, ARG0, m2 / meet-03)
(b / bear-02, ARG1, f / fruit)
(c / contrast-01, ARG1, e / extraordinary)
(c / contrast-01, ARG2, h / hold-01)
(c2 / celebrate-02, ARG1, r / renaissance)
(d / disarm-01, ARG0, e2 / event)
(d / disarm-01, ARG1, a / all)
(e / extraordinary, domain, n / none)
(e / extraordinary, time, w / way)
(f / fruit, prep-in, d / disarm-01)
(h / hold-01, ARG0, w2 / world)
(h / hold-01, ARG1, m2 / meet-03)
(h2 / have-org-role-91, ARG1, u / union)
(h2 / have-org-role-91, ARG2, p4 / president)
(i / intend-01, ARG1, a2 / and)
(i / intend-01, ARG2, p7 / perform-01)
(i / intend-01, time, c2 / celebrate-02)
(m2 / meet-03, mod, s / summit)
(p / promise-01, ARG1, n / none)
(p2 / place, poss, a2 / and)
(p3 / promise-01, ARG2, b / bear-02)
(p5 / peace, mod, w2 / world)
(p6 / prospect, poss, p5 / peace)
(p7 / perform-01, ARG1, h2 / have-org-role-91)
(w / way, mod, m / modest)

Decoded in 2,138,422 microseconds
Sentence: miss ashbrook explained the law for common land was promised in the conservative partys 1987 election manifesto but we are still waiting

Spans:
Span 14-15:  1987 => (date-entity :year 1987)
Span 17-18:  but => contrast-01
Span 6-7:  common => common
Span 12-13:  conservative => conservative
Span 15-16:  election => elect-01
Span 2-3:  explained => explain-01
Span 7-8:  land => land
Span 4-5:  law => law
Span 9-10:  promised => promise-01
Span 20-21:  still => still
Span 21-22:  waiting => wait-01
Span 18-19:  we => we

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),waiting,wait-01,false), Span(20,21,List(1),still,still,false), Span(18,19,List(2),we,we,false), Span(17,18,List(3),but,contrast-01,false), Span(15,16,List(4),election,elect-01,false), Span(14,15,List(6, 5),1987,(date-entity :year 1987),false), Span(12,13,List(7),conservative,conservative,false), Span(9,10,List(8),promised,promise-01,false), Span(7,8,List(9),land,land,false), Span(6,7,List(10),common,common,false), Span(4,5,List(11),law,law,false), Span(2,3,List(12),explained,explain-01,false)),Map(2 -> we, 5 -> date-entity, 12 -> explain-01, 8 -> promise-01, 7 -> conservative, 1 -> still, 4 -> elect-01, 11 -> law, 6 -> 1987, 0 -> wait-01, 9 -> land, 3 -> contrast-01, 10 -> common),Map(e -> elect-01, w -> wait-01, e2 -> explain-01, s -> still, d -> date-entity, 1 -> 1987, p -> promise-01, c3 -> common, w2 -> we, l2 -> law, c -> contrast-01, l -> land, c2 -> conservative))),[Ljava.lang.String;@55fd0653,Annotation([Ljava.lang.String;@56aa5f3f,[Ljava.lang.String;@4b534d8c,[Ljava.lang.String;@4a0848f6),Annotation([Ljava.lang.String;@65ee3472,[Ljava.lang.String;@79b55ca5,[Ledu.cmu.lti.nlp.amr.Dependency;@71d5930f),Annotation([Ljava.lang.String;@7ca9f82b,[Ljava.lang.String;@7ae40efd,[Ljava.lang.String;@12944313),Annotation([Ljava.lang.String;@43bf9dec,[Ljava.lang.String;@591913b3,[Ledu.cmu.lti.nlp.amr.Entity;@7d5c7a77))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, w / wait-01)
(d / date-entity, year, 1 / 1987)
(e / elect-01, ARG1, e2 / explain-01)
(e / elect-01, ARG2, c2 / conservative)
(e2 / explain-01, ARG0, d / date-entity)
(e2 / explain-01, ARG1, p / promise-01)
(l / land, mod, c3 / common)
(l / land, quant, l2 / law)
(w / wait-01, ARG0, l2 / law)
(w / wait-01, ARG1, w2 / we)
(w / wait-01, mod, s / still)

Decoded in 272,008 microseconds
Sentence: the patriarch escorted to the airport terminal by lebanese troops and the same syrian soldiers general aoun once promised to throw out of lebanon then drove to east beirut where he was expected to hold talks with the general

NER Entity: (thing :name (name :op "lebanese"))
NER Entity: (thing :name (name :op "syrian"))
NER Entity: (country :name (name :op "lebanon"))
Spans:
Span 5-6:  airport => airport
Span 10-11:  and => and
Span 25-26:  drove => drive-02
Span 27-28:  east => east
Span 32-33:  expected => expect-01
Span 38-39:  general => general
Span 15-16:  general => general
Span 30-31:  he => he
Span 17-18:  once => once
Span 18-19:  promised => promise-01
Span 12-13:  same => same-41
Span 14-15:  soldiers => soldier
Span 35-36:  talks => talk-01
Span 6-7:  terminal => terminal
Span 24-25:  then => then
Span 20-21:  throw => throw-01
Span 9-10:  troops => troop

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),general,general,false), Span(35,36,List(1),talks,talk-01,false), Span(32,33,List(2),expected,expect-01,false), Span(30,31,List(3),he,he,false), Span(27,28,List(4),east,east,false), Span(25,26,List(5),drove,drive-02,false), Span(24,25,List(6),then,then,false), Span(20,21,List(7),throw,throw-01,false), Span(18,19,List(8),promised,promise-01,false), Span(17,18,List(9),once,once,false), Span(15,16,List(10),general,general,false), Span(14,15,List(11),soldiers,soldier,false), Span(12,13,List(12),same,same-41,false), Span(10,11,List(13),and,and,false), Span(9,10,List(14),troops,troop,false), Span(6,7,List(15),terminal,terminal,false), Span(5,6,List(16),airport,airport,false)),Map(2 -> expect-01, 5 -> drive-02, 12 -> same-41, 15 -> terminal, 8 -> promise-01, 7 -> throw-01, 1 -> talk-01, 4 -> east, 11 -> soldier, 14 -> troop, 6 -> then, 0 -> general, 9 -> once, 16 -> airport, 3 -> he, 10 -> general, 13 -> and),Map(e -> expect-01, t4 -> troop, h -> he, s2 -> same-41, t -> talk-01, e2 -> east, s -> soldier, d -> drive-02, t3 -> throw-01, g2 -> general, g -> general, p -> promise-01, a -> and, t2 -> then, t5 -> terminal, a2 -> airport, o -> once))),[Ljava.lang.String;@426c5aed,Annotation([Ljava.lang.String;@57c59fac,[Ljava.lang.String;@6f760238,[Ljava.lang.String;@2c8be3b3),Annotation([Ljava.lang.String;@1412139e,[Ljava.lang.String;@2ec5f45d,[Ledu.cmu.lti.nlp.amr.Dependency;@462e1da8),Annotation([Ljava.lang.String;@7d9d2496,[Ljava.lang.String;@57cd3447,[Ljava.lang.String;@61234e59),Annotation([Ljava.lang.String;@54ece6e1,[Ljava.lang.String;@d29e956,[Ledu.cmu.lti.nlp.amr.Entity;@3a9613da))
AMR:
(a / and, op, a2 / airport)
(a / and, op, t4 / troop)
(d / drive-02, ARG1, e2 / east)
(d / drive-02, condition, e / expect-01)
(d / drive-02, time, t2 / then)
(e / expect-01, ARG0, h / he)
(e / expect-01, ARG1, g / general)
(g2 / general, mod, s / soldier)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, g2 / general)
(p / promise-01, ARG2, t3 / throw-01)
(p / promise-01, time, o / once)
(s2 / same-41, ARG2, t4 / troop)
(t / talk-01, ARG0, h / he)
(t3 / throw-01, ARG1, s2 / same-41)
(t5 / terminal, mod, a2 / airport)

Decoded in 465,929 microseconds
Sentence: he promised labour cooperation with a bill paving the way for the line provided the scheme answered the environmental concerns of the south with a government grant and the strategic needs of the north

Spans:
Span 27-28:  and => and
Span 16-17:  answered => answer-01
Span 6-7:  bill => bill
Span 19-20:  concerns => concern-01
Span 3-4:  cooperation => cooperate-01
Span 18-19:  environmental => environment
Span 26-27:  grant => grant-01
Span 0-1:  he => he
Span 2-3:  labour => labour
Span 12-13:  line => line
Span 30-31:  needs => need-01
Span 33-34:  north => north
Span 1-2:  promised => promise-01
Span 13-14:  provided => provide-01
Span 15-16:  scheme => scheme
Span 22-23:  south => south
Span 29-30:  strategic => strategy
Span 9-10:  way => way

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),north,north,false), Span(30,31,List(1),needs,need-01,false), Span(29,30,List(2),strategic,strategy,false), Span(27,28,List(3),and,and,false), Span(26,27,List(4),grant,grant-01,false), Span(22,23,List(5),south,south,false), Span(19,20,List(6),concerns,concern-01,false), Span(18,19,List(7),environmental,environment,false), Span(16,17,List(8),answered,answer-01,false), Span(15,16,List(9),scheme,scheme,false), Span(13,14,List(10),provided,provide-01,false), Span(12,13,List(11),line,line,false), Span(9,10,List(12),way,way,false), Span(6,7,List(13),bill,bill,false), Span(3,4,List(14),cooperation,cooperate-01,false), Span(2,3,List(15),labour,labour,false), Span(1,2,List(16),promised,promise-01,false), Span(0,1,List(17),he,he,false)),Map(2 -> strategy, 5 -> south, 12 -> way, 15 -> labour, 8 -> answer-01, 7 -> environment, 17 -> he, 1 -> need-01, 4 -> grant-01, 11 -> line, 14 -> cooperate-01, 6 -> concern-01, 0 -> north, 9 -> scheme, 16 -> promise-01, 3 -> and, 10 -> provide-01, 13 -> bill),Map(e -> environment, n -> north, w -> way, h -> he, s2 -> south, b -> bill, p2 -> promise-01, s -> strategy, g -> grant-01, p -> provide-01, a -> and, l2 -> labour, a2 -> answer-01, c -> concern-01, s3 -> scheme, l -> line, c2 -> cooperate-01, n2 -> need-01))),[Ljava.lang.String;@67b8e498,Annotation([Ljava.lang.String;@1ba7ec5b,[Ljava.lang.String;@2d8e588c,[Ljava.lang.String;@5c5766b1),Annotation([Ljava.lang.String;@6e171dd3,[Ljava.lang.String;@2fa7401c,[Ledu.cmu.lti.nlp.amr.Dependency;@d6206b5),Annotation([Ljava.lang.String;@1ea65bf0,[Ljava.lang.String;@3bddf948,[Ljava.lang.String;@6a1904ac),Annotation([Ljava.lang.String;@1081ee9f,[Ljava.lang.String;@42591130,[Ledu.cmu.lti.nlp.amr.Entity;@65778857))
AMR:
(a / and, op, n2 / need-01)
(a2 / answer-01, ARG0, s3 / scheme)
(a2 / answer-01, ARG1, c / concern-01)
(c / concern-01, ARG0, a / and)
(c / concern-01, location, s2 / south)
(c / concern-01, mod, e / environment)
(c2 / cooperate-01, ARG0, h / he)
(c2 / cooperate-01, ARG1, p / provide-01)
(c2 / cooperate-01, ARG2, w / way)
(g / grant-01, ARG1, s2 / south)
(n2 / need-01, ARG1, n / north)
(n2 / need-01, mod, s / strategy)
(p / provide-01, ARG1, s3 / scheme)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, l2 / labour)
(p2 / promise-01, ARG2, b / bill)
(w / way, mod, l / line)

Decoded in 326,723 microseconds
Sentence: although he promised to promote hungarys claims at this weekends economic summit in paris his support package for the country totalled 36

NER Entity: (country :name (name :op "paris"))
Spans:
Span 21-22:  36 => 36
Span 6-7:  claims => claim-01
Span 19-20:  country => country
Span 10-11:  economic => economy
Span 1-2:  he => he
Span 16-17:  package => package
Span 2-3:  promised => promise-01
Span 4-5:  promote => promote-02
Span 11-12:  summit => summit
Span 15-16:  support => support-01
Span 8-9:  this => this
Span 9-10:  weekends => weekend

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),36,36,false), Span(19,20,List(1),country,country,false), Span(16,17,List(2),package,package,false), Span(15,16,List(3),support,support-01,false), Span(11,12,List(4),summit,summit,false), Span(10,11,List(5),economic,economy,false), Span(9,10,List(6),weekends,weekend,false), Span(8,9,List(7),this,this,false), Span(6,7,List(8),claims,claim-01,false), Span(4,5,List(9),promote,promote-02,false), Span(2,3,List(10),promised,promise-01,false), Span(1,2,List(11),he,he,false)),Map(2 -> package, 5 -> economy, 8 -> claim-01, 7 -> this, 1 -> country, 11 -> he, 4 -> summit, 6 -> weekend, 9 -> promote-02, 0 -> 36, 10 -> promise-01, 3 -> support-01),Map(w -> weekend, e -> economy, h -> he, t -> this, s2 -> summit, p2 -> promote-02, s -> support-01, p -> package, c -> country, p3 -> promise-01, c2 -> claim-01, 3 -> 36))),[Ljava.lang.String;@a983bcc,Annotation([Ljava.lang.String;@107dd383,[Ljava.lang.String;@34c945ea,[Ljava.lang.String;@a0d20b9),Annotation([Ljava.lang.String;@63df56d6,[Ljava.lang.String;@5bbe2ed3,[Ledu.cmu.lti.nlp.amr.Dependency;@22f44db3),Annotation([Ljava.lang.String;@551934b2,[Ljava.lang.String;@69d2bdc3,[Ljava.lang.String;@aa8837c),Annotation([Ljava.lang.String;@3d50475b,[Ljava.lang.String;@617cc6cf,[Ledu.cmu.lti.nlp.amr.Entity;@46e07209))
AMR:
(c2 / claim-01, ARG0, c / country)
(c2 / claim-01, ARG1, s2 / summit)
(p2 / promote-02, ARG0, h / he)
(p2 / promote-02, ARG1, c2 / claim-01)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, 3 / 36)
(s / support-01, ARG0, p / package)
(s / support-01, ARG1, c / country)
(s2 / summit, mod, e / economy)
(s2 / summit, mod, t / this)
(s2 / summit, mod, w / weekend)

Decoded in 97,369 microseconds
Sentence: hed just promised them a house early in the new year

Spans:
Span 6-7:  early => early
Span 5-6:  house => house
Span 1-2:  just => just
Span 9-10:  new => new
Span 2-3:  promised => promise-01
Span 10-11:  year => year

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),year,year,false), Span(9,10,List(1),new,new,false), Span(6,7,List(2),early,early,false), Span(5,6,List(3),house,house,false), Span(2,3,List(4),promised,promise-01,false), Span(1,2,List(5),just,just,false)),Map(2 -> early, 5 -> just, 1 -> new, 4 -> promise-01, 0 -> year, 3 -> house),Map(e -> early, n -> new, h -> house, j -> just, p -> promise-01, y -> year))),[Ljava.lang.String;@395ed139,Annotation([Ljava.lang.String;@7ffa129b,[Ljava.lang.String;@7adbbfc0,[Ljava.lang.String;@710a1543),Annotation([Ljava.lang.String;@4cfa1baf,[Ljava.lang.String;@382fa5a4,[Ledu.cmu.lti.nlp.amr.Dependency;@4023cecd),Annotation([Ljava.lang.String;@6ede15a0,[Ljava.lang.String;@365df43d,[Ljava.lang.String;@524decad),Annotation([Ljava.lang.String;@79ed7c11,[Ljava.lang.String;@566c7ea0,[Ledu.cmu.lti.nlp.amr.Entity;@6ced66b3))
AMR:
(p / promise-01, ARG1, h / house)
(p / promise-01, mod, j / just)
(p / promise-01, time, e / early)
(p / promise-01, time, y / year)
(y / year, mod, n / new)

Decoded in 19,384 microseconds
Sentence: he is thought to have promised to look at the situation of solicitors in rural areas which was concerning some mps

Spans:
Span 15-16:  areas => area
Span 18-19:  concerning => concern-02
Span 0-1:  he => he
Span 5-6:  promised => promise-01
Span 14-15:  rural => rural
Span 10-11:  situation => situation
Span 19-20:  some => some
Span 2-3:  thought => think-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),some,some,false), Span(18,19,List(1),concerning,concern-02,false), Span(15,16,List(2),areas,area,false), Span(14,15,List(3),rural,rural,false), Span(10,11,List(4),situation,situation,false), Span(5,6,List(5),promised,promise-01,false), Span(2,3,List(6),thought,think-01,false), Span(0,1,List(7),he,he,false)),Map(2 -> area, 5 -> promise-01, 7 -> he, 1 -> concern-02, 4 -> situation, 6 -> think-01, 0 -> some, 3 -> rural),Map(h -> he, t -> think-01, s2 -> situation, s -> some, p -> promise-01, a -> area, r -> rural, c -> concern-02))),[Ljava.lang.String;@55f1a9a3,Annotation([Ljava.lang.String;@6cb83869,[Ljava.lang.String;@327fad42,[Ljava.lang.String;@5c47e1f4),Annotation([Ljava.lang.String;@73438980,[Ljava.lang.String;@56f86d9e,[Ledu.cmu.lti.nlp.amr.Dependency;@4fe4ccad),Annotation([Ljava.lang.String;@36399ad5,[Ljava.lang.String;@7fe431c2,[Ljava.lang.String;@5e7ef926),Annotation([Ljava.lang.String;@62175e41,[Ljava.lang.String;@6c2d2fb6,[Ledu.cmu.lti.nlp.amr.Entity;@a978d36))
AMR:
(a / area, mod, r / rural)
(c / concern-02, ARG0, a / area)
(c / concern-02, ARG1, s2 / situation)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, s2 / situation)
(t / think-01, ARG0, s / some)
(t / think-01, ARG1, p / promise-01)

Decoded in 42,603 microseconds
Sentence: while the pair promise an exhilarating hour and a half with costume changes rising into double figures and a deluge of dancing framed against jarmans cinematic responses to the songs it is their own reaction to the spectacle and the audience that may provide the most intriguing aspect of the shows

Spans:
Span 38-39:  and => and
Span 17-18:  and => and
Span 7-8:  and => and
Span 47-48:  aspect => aspect
Span 40-41:  audience => audience
Span 12-13:  changes => change-01
Span 25-26:  cinematic => cinema
Span 11-12:  costume => costume-01
Span 15-16:  double => double
Span 16-17:  figures => figure
Span 22-23:  framed => frame-06
Span 9-10:  half => half
Span 6-7:  hour => (temporal-quantity :unit hour)
Span 46-47:  intriguing => intrigue-01
Span 30-31:  it => it
Span 42-43:  may => (date-entity :month 5)
Span 45-46:  most => most
Span 3-4:  promise => promise-01
Span 43-44:  provide => provide-01
Span 34-35:  reaction => react-01
Span 26-27:  responses => respond-01
Span 13-14:  rising => rise-01
Span 50-51:  shows => show-01
Span 29-30:  songs => song
Span 37-38:  spectacle => spectacle

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),shows,show-01,false), Span(47,48,List(1),aspect,aspect,false), Span(46,47,List(2),intriguing,intrigue-01,false), Span(45,46,List(3),most,most,false), Span(43,44,List(4),provide,provide-01,false), Span(42,43,List(6, 5),may,(date-entity :month 5),false), Span(40,41,List(7),audience,audience,false), Span(38,39,List(8),and,and,false), Span(37,38,List(9),spectacle,spectacle,false), Span(34,35,List(10),reaction,react-01,false), Span(30,31,List(11),it,it,false), Span(29,30,List(12),songs,song,false), Span(26,27,List(13),responses,respond-01,false), Span(25,26,List(14),cinematic,cinema,false), Span(22,23,List(15),framed,frame-06,false), Span(17,18,List(16),and,and,false), Span(16,17,List(17),figures,figure,false), Span(15,16,List(18),double,double,false), Span(13,14,List(19),rising,rise-01,false), Span(12,13,List(20),changes,change-01,false), Span(11,12,List(21),costume,costume-01,false), Span(9,10,List(22),half,half,false), Span(7,8,List(23),and,and,false), Span(6,7,List(25, 24),hour,(temporal-quantity :unit hour),false), Span(3,4,List(26),promise,promise-01,false)),Map(2 -> intrigue-01, 5 -> date-entity, 12 -> song, 8 -> and, 15 -> frame-06, 21 -> costume-01, 18 -> double, 24 -> temporal-quantity, 7 -> audience, 1 -> aspect, 17 -> figure, 23 -> and, 26 -> promise-01, 4 -> provide-01, 11 -> it, 14 -> cinema, 20 -> change-01, 6 -> 5, 9 -> spectacle, 0 -> show-01, 22 -> half, 16 -> and, 19 -> rise-01, 10 -> react-01, 3 -> most, 25 -> hour, 13 -> respond-01),Map(r3 -> rise-01, h -> half, 5 -> 5, h2 -> hour, s2 -> spectacle, t -> temporal-quantity, p2 -> promise-01, a3 -> and, s -> show-01, d -> date-entity, m -> most, r2 -> respond-01, p -> provide-01, a -> aspect, c3 -> costume-01, d2 -> double, a5 -> and, i2 -> it, r -> react-01, a2 -> audience, i -> intrigue-01, c -> cinema, s3 -> song, f2 -> figure, f -> frame-06, c2 -> change-01, a4 -> and))),[Ljava.lang.String;@3b32d7bd,Annotation([Ljava.lang.String;@6f1d7a8,[Ljava.lang.String;@6f855a27,[Ljava.lang.String;@1be1efa4),Annotation([Ljava.lang.String;@e3c0649,[Ljava.lang.String;@6c0a9ec,[Ledu.cmu.lti.nlp.amr.Dependency;@52d3c86a),Annotation([Ljava.lang.String;@4e0ad1a1,[Ljava.lang.String;@2848c90e,[Ljava.lang.String;@4287cacb),Annotation([Ljava.lang.String;@6112f78c,[Ljava.lang.String;@243a3a1e,[Ledu.cmu.lti.nlp.amr.Entity;@6abd9a26))
AMR:
(a / aspect, domain, s / show-01)
(a3 / and, op, a2 / audience)
(a4 / and, op, a3 / and)
(a4 / and, op, r3 / rise-01)
(a5 / and, op, h / half)
(a5 / and, op, r2 / respond-01)
(c3 / costume-01, ARG1, c2 / change-01)
(d / date-entity, month, 5 / 5)
(f / frame-06, ARG1, r2 / respond-01)
(f2 / figure, mod, d2 / double)
(i / intrigue-01, ARG1, a / aspect)
(i / intrigue-01, degree, m / most)
(p / provide-01, ARG0, a2 / audience)
(p / provide-01, ARG1, a / aspect)
(p / provide-01, mod, d / date-entity)
(p2 / promise-01, ARG1, a5 / and)
(p2 / promise-01, ARG2, t / temporal-quantity)
(p2 / promise-01, time, r3 / rise-01)
(r / react-01, ARG0, i2 / it)
(r / react-01, ARG1, s2 / spectacle)
(r / react-01, prep-to, a3 / and)
(r2 / respond-01, ARG1, s3 / song)
(r2 / respond-01, manner, c / cinema)
(r3 / rise-01, ARG1, c2 / change-01)
(r3 / rise-01, location, f2 / figure)
(t / temporal-quantity, unit, h2 / hour)

Decoded in 872,038 microseconds
Sentence: his hope was to push that moment off as long as possible to maintain a suffering silence which the face promised was deep and awful, this promise is what attracted me to len and the attraction ended the moment i penetrated the sad little secret

Spans:
Span 34-35:  and => and
Span 23-24:  and => and
Span 30-31:  attracted => attract-01
Span 36-37:  attraction => attract-01
Span 24-25:  awful => awful
Span 22-23:  deep => deep
Span 37-38:  ended => end-01
Span 19-20:  face => face-01
Span 1-2:  hope => hope-01
Span 40-41:  i => i
Span 44-45:  little => little
Span 13-14:  maintain => maintain-01
Span 39-40:  moment => moment
Span 6-7:  moment => moment
Span 7-8:  off => off
Span 41-42:  penetrated => penetrate-01
Span 11-12:  possible => possible
Span 27-28:  promise => promise-01
Span 20-21:  promised => promise-01
Span 4-5:  push => push-02
Span 43-44:  sad => sad
Span 45-46:  secret => secret
Span 16-17:  silence => silence-01
Span 15-16:  suffering => suffer-01
Span 26-27:  this => this

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),secret,secret,false), Span(44,45,List(1),little,little,false), Span(43,44,List(2),sad,sad,false), Span(41,42,List(3),penetrated,penetrate-01,false), Span(40,41,List(4),i,i,false), Span(39,40,List(5),moment,moment,false), Span(37,38,List(6),ended,end-01,false), Span(36,37,List(7),attraction,attract-01,false), Span(34,35,List(8),and,and,false), Span(30,31,List(9),attracted,attract-01,false), Span(27,28,List(10),promise,promise-01,false), Span(26,27,List(11),this,this,false), Span(24,25,List(12),awful,awful,false), Span(23,24,List(13),and,and,false), Span(22,23,List(14),deep,deep,false), Span(20,21,List(15),promised,promise-01,false), Span(19,20,List(16),face,face-01,false), Span(16,17,List(17),silence,silence-01,false), Span(15,16,List(18),suffering,suffer-01,false), Span(13,14,List(19),maintain,maintain-01,false), Span(11,12,List(20),possible,possible,false), Span(7,8,List(21),off,off,false), Span(6,7,List(22),moment,moment,false), Span(4,5,List(23),push,push-02,false), Span(1,2,List(24),hope,hope-01,false)),Map(2 -> sad, 5 -> moment, 12 -> awful, 8 -> and, 15 -> promise-01, 21 -> off, 18 -> suffer-01, 24 -> hope-01, 7 -> attract-01, 1 -> little, 17 -> silence-01, 23 -> push-02, 4 -> i, 11 -> this, 14 -> deep, 20 -> possible, 6 -> end-01, 9 -> attract-01, 0 -> secret, 22 -> moment, 16 -> face-01, 19 -> maintain-01, 10 -> promise-01, 3 -> penetrate-01, 13 -> and),Map(e -> end-01, m3 -> moment, h -> hope-01, s2 -> sad, p5 -> push-02, t -> this, m2 -> maintain-01, p2 -> promise-01, a3 -> attract-01, s -> secret, s4 -> suffer-01, m -> moment, d -> deep, p -> penetrate-01, a -> attract-01, p4 -> possible, a5 -> and, a2 -> and, i -> i, s3 -> silence-01, l -> little, f -> face-01, o -> off, p3 -> promise-01, a4 -> awful))),[Ljava.lang.String;@3b39132f,Annotation([Ljava.lang.String;@201a9109,[Ljava.lang.String;@3027f656,[Ljava.lang.String;@f9da0cd),Annotation([Ljava.lang.String;@35a7fabd,[Ljava.lang.String;@273ea9d0,[Ledu.cmu.lti.nlp.amr.Dependency;@2feaad1),Annotation([Ljava.lang.String;@1d8080e0,[Ljava.lang.String;@5f8d0141,[Ljava.lang.String;@224d8369),Annotation([Ljava.lang.String;@eee7417,[Ljava.lang.String;@490799a9,[Ledu.cmu.lti.nlp.amr.Entity;@11f94bb4))
AMR:
(a2 / and, op, a3 / attract-01)
(a2 / and, op, e / end-01)
(a3 / attract-01, ARG1, p2 / promise-01)
(a5 / and, op, a4 / awful)
(a5 / and, op, d / deep)
(a5 / and, op, p3 / promise-01)
(e / end-01, ARG0, h / hope-01)
(e / end-01, ARG1, i / i)
(e / end-01, ARG2, a / attract-01)
(h / hope-01, ARG1, a5 / and)
(m / moment, poss, i / i)
(m2 / maintain-01, ARG1, s3 / silence-01)
(p / penetrate-01, ARG0, i / i)
(p / penetrate-01, ARG1, s / secret)
(p2 / promise-01, mod, t / this)
(p3 / promise-01, ARG0, f / face-01)
(p3 / promise-01, ARG1, s3 / silence-01)
(p4 / possible, domain, m2 / maintain-01)
(p5 / push-02, ARG0, h / hope-01)
(p5 / push-02, ARG1, m3 / moment)
(p5 / push-02, ARG3, o / off)
(s / secret, degree, l / little)
(s / secret, mod, s2 / sad)
(s4 / suffer-01, ARG0, s3 / silence-01)

Decoded in 839,712 microseconds
Sentence: earlier mr taylor had announced the formation of a new government with himself at its head and promised to capture mr doe and put him on trial

Spans:
Span 22-23:  and => and
Span 16-17:  and => and
Span 4-5:  announced => announce-01
Span 19-20:  capture => capture-01
Span 0-1:  earlier => early
Span 6-7:  formation => form-01
Span 15-16:  head => head-01
Span 9-10:  new => new
Span 17-18:  promised => promise-01
Span 26-27:  trial => trial

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),trial,trial,false), Span(22,23,List(1),and,and,false), Span(19,20,List(2),capture,capture-01,false), Span(17,18,List(3),promised,promise-01,false), Span(16,17,List(4),and,and,false), Span(15,16,List(5),head,head-01,false), Span(9,10,List(6),new,new,false), Span(6,7,List(7),formation,form-01,false), Span(4,5,List(8),announced,announce-01,false), Span(0,1,List(9),earlier,early,false)),Map(2 -> capture-01, 5 -> head-01, 8 -> announce-01, 7 -> form-01, 1 -> and, 4 -> and, 6 -> new, 9 -> early, 0 -> trial, 3 -> promise-01),Map(e -> early, n -> new, h -> head-01, t -> trial, a3 -> announce-01, p -> promise-01, a -> and, a2 -> and, c -> capture-01, f -> form-01))),[Ljava.lang.String;@5d91fa4,Annotation([Ljava.lang.String;@71ac4afb,[Ljava.lang.String;@666edf0a,[Ljava.lang.String;@78f53e0f),Annotation([Ljava.lang.String;@2cbd88d3,[Ljava.lang.String;@4f61eb97,[Ledu.cmu.lti.nlp.amr.Dependency;@25b22f38),Annotation([Ljava.lang.String;@553a18dd,[Ljava.lang.String;@593680e1,[Ljava.lang.String;@9476189),Annotation([Ljava.lang.String;@2d546e21,[Ljava.lang.String;@20a4fc7,[Ledu.cmu.lti.nlp.amr.Entity;@72fb92dc))
AMR:
(a2 / and, op, a3 / announce-01)
(a2 / and, op, p / promise-01)
(a3 / announce-01, ARG0, e / early)
(a3 / announce-01, ARG1, f / form-01)
(c / capture-01, ARG1, t / trial)
(h / head-01, ARG1, n / new)
(p / promise-01, ARG0, h / head-01)
(p / promise-01, ARG1, a / and)
(p / promise-01, ARG2, c / capture-01)

Decoded in 114,882 microseconds
Sentence: i promise not to look or phone the police

Spans:
Span 0-1:  i => i
Span 5-6:  or => or
Span 6-7:  phone => phone
Span 8-9:  police => police
Span 1-2:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),police,police,false), Span(6,7,List(1),phone,phone,false), Span(5,6,List(2),or,or,false), Span(1,2,List(3),promise,promise-01,false), Span(0,1,List(4),i,i,false)),Map(2 -> or, 1 -> phone, 4 -> i, 0 -> police, 3 -> promise-01),Map(p2 -> phone, p -> police, i -> i, o -> or, p3 -> promise-01))),[Ljava.lang.String;@6266e47d,Annotation([Ljava.lang.String;@5122fd03,[Ljava.lang.String;@5010f992,[Ljava.lang.String;@a71094f),Annotation([Ljava.lang.String;@31a26e4,[Ljava.lang.String;@29ef4453,[Ledu.cmu.lti.nlp.amr.Dependency;@1b6ebaa7),Annotation([Ljava.lang.String;@2a03803,[Ljava.lang.String;@64bd4e4d,[Ljava.lang.String;@485fd4e6),Annotation([Ljava.lang.String;@b926d29,[Ljava.lang.String;@3a3ca4ae,[Ledu.cmu.lti.nlp.amr.Entity;@635fb960))
AMR:
(o / or, op, p2 / phone)
(p2 / phone, mod, p / police)
(p3 / promise-01, ARG0, i / i)
(p3 / promise-01, ARG1, o / or)

Decoded in 11,498 microseconds
Sentence: the analogy with promising can serve here as well

Spans:
Span 1-2:  analogy => analogy
Span 4-5:  can => possible
Span 6-7:  here => here
Span 3-4:  promising => promise-01
Span 5-6:  serve => serve-01
Span 8-9:  well => well

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),well,well,false), Span(6,7,List(1),here,here,false), Span(5,6,List(2),serve,serve-01,false), Span(4,5,List(3),can,possible,false), Span(3,4,List(4),promising,promise-01,false), Span(1,2,List(5),analogy,analogy,false)),Map(2 -> serve-01, 5 -> analogy, 1 -> here, 4 -> promise-01, 0 -> well, 3 -> possible),Map(w -> well, h -> here, p2 -> promise-01, s -> serve-01, p -> possible, a -> analogy))),[Ljava.lang.String;@21838098,Annotation([Ljava.lang.String;@406f8c58,[Ljava.lang.String;@5b670674,[Ljava.lang.String;@48d8d88d),Annotation([Ljava.lang.String;@14713658,[Ljava.lang.String;@14a6d5e4,[Ledu.cmu.lti.nlp.amr.Dependency;@55247653),Annotation([Ljava.lang.String;@4cd46ed0,[Ljava.lang.String;@eb74118,[Ljava.lang.String;@21129634),Annotation([Ljava.lang.String;@4b4340e2,[Ljava.lang.String;@2c58dc08,[Ledu.cmu.lti.nlp.amr.Entity;@7dd5a7f6))
AMR:
(p / possible, domain, s / serve-01)
(p2 / promise-01, ARG0, a / analogy)
(p2 / promise-01, ARG1, s / serve-01)
(s / serve-01, location, h / here)
(s / serve-01, mod, w / well)

Decoded in 21,515 microseconds
Sentence: youve to promise to look after them and let me have them back when i come up next

Spans:
Span 5-6:  after => after
Span 7-8:  and => and
Span 12-13:  back => back
Span 14-15:  i => i
Span 8-9:  let => let-01
Span 17-18:  next => next
Span 2-3:  promise => promise-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),next,next,false), Span(14,15,List(1),i,i,false), Span(12,13,List(2),back,back,false), Span(8,9,List(3),let,let-01,false), Span(7,8,List(4),and,and,false), Span(5,6,List(5),after,after,false), Span(2,3,List(6),promise,promise-01,false)),Map(2 -> back, 5 -> after, 1 -> i, 4 -> and, 6 -> promise-01, 0 -> next, 3 -> let-01),Map(n -> next, b -> back, p -> promise-01, a -> and, a2 -> after, i -> i, l -> let-01))),[Ljava.lang.String;@56064804,Annotation([Ljava.lang.String;@36622abb,[Ljava.lang.String;@66e376e1,[Ljava.lang.String;@5f91e28c),Annotation([Ljava.lang.String;@62b08658,[Ljava.lang.String;@33442e06,[Ledu.cmu.lti.nlp.amr.Dependency;@4129a635),Annotation([Ljava.lang.String;@155f02ff,[Ljava.lang.String;@10bdbe4f,[Ljava.lang.String;@19193d1f),Annotation([Ljava.lang.String;@47fbcb18,[Ljava.lang.String;@63d2b993,[Ledu.cmu.lti.nlp.amr.Entity;@1f959518))
AMR:
(a / and, op, l / let-01)
(a / and, op, p / promise-01)
(l / let-01, ARG0, i / i)
(l / let-01, ARG1, b / back)
(p / promise-01, ARG0, n / next)
(p / promise-01, ARG1, a2 / after)

Decoded in 66,214 microseconds
Sentence: she promised to hide in the cellar

Spans:
Span 3-4:  hide => hide-01
Span 1-2:  promised => promise-01
Span 0-1:  she => she

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),hide,hide-01,false), Span(1,2,List(1),promised,promise-01,false), Span(0,1,List(2),she,she,false)),Map(2 -> she, 1 -> promise-01, 0 -> hide-01),Map(h -> hide-01, s -> she, p -> promise-01))),[Ljava.lang.String;@156f6adb,Annotation([Ljava.lang.String;@45d05adb,[Ljava.lang.String;@71fd03ab,[Ljava.lang.String;@19fc0a04),Annotation([Ljava.lang.String;@71f599ef,[Ljava.lang.String;@334d545c,[Ledu.cmu.lti.nlp.amr.Dependency;@19dd7e54),Annotation([Ljava.lang.String;@1c90ca10,[Ljava.lang.String;@65c1ef16,[Ljava.lang.String;@1f37c18b),Annotation([Ljava.lang.String;@5839cb0,[Ljava.lang.String;@3a3e9a4,[Ledu.cmu.lti.nlp.amr.Entity;@7e400fd9))
AMR:
(h / hide-01, ARG0, s / she)
(p / promise-01, ARG2, h / hide-01)

Decoded in 6,503 microseconds
Sentence: leo july 24aug 23 why not take a leaf out of a buddys book and adopt a more speculative approach to your future financial strategies  youll be encouraged and enthused by a pals plans for making money and therell rarely be a better time for chancing your luck and investing in a scheme that promises rich pickings

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = leo july 24aug 23 why not take a leaf out of a buddys book and adopt a more speculative approach to your future financial strategies  youll be encouraged and enthused by a pals plans for making money and therell rarely be a better time for chancing your luck and investing in a scheme that promises rich pickings
myTokenized = leo july 24aug 23 why not take a leaf out of a buddys book and adopt a more speculative approach to your future financial strategies youll be encouraged and enthused by a pals plans for making money and therell rarely be a better time for chancing your luck and investing in a scheme that promises rich pickings
i = 25
prefix = List(leo, july, 24aug, 23, why, not, take, a, leaf, out, of, a, buddys, book, and, adopt, a, more, speculative, approach, to, your, future, financial, strategies, youll)
regexr = \Ql\E ?\Qe\E ?\Qo\E ?\Qj\E ?\Qu\E ?\Ql\E ?\Qy\E ?\Q2\E ?\Q4\E ?\Qa\E ?\Qu\E ?\Qg\E ?\Q2\E ?\Q3\E ?\Qw\E ?\Qh\E ?\Qy\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qa\E ?\Ql\E ?\Qe\E ?\Qa\E ?\Qf\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qa\E ?\Qb\E ?\Qu\E ?\Qd\E ?\Qd\E ?\Qy\E ?\Qs\E ?\Qb\E ?\Qo\E ?\Qo\E ?\Qk\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qa\E ?\Qd\E ?\Qo\E ?\Qp\E ?\Qt\E ?\Qa\E ?\Qm\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qs\E ?\Qp\E ?\Qe\E ?\Qc\E ?\Qu\E ?\Ql\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qa\E ?\Qp\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qa\E ?\Qc\E ?\Qh\E ?\Qt\E ?\Qo\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qf\E ?\Qu\E ?\Qt\E ?\Qu\E ?\Qr\E ?\Qe\E ?\Qf\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qn\E ?\Qc\E ?\Qi\E ?\Qa\E ?\Ql\E ?\Qs\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qg\E ?\Qi\E ?\Qe\E ?\Qs\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the chief architects of wellingtons win on wednesday the loose forward mike kuiti and scrumhalf geoffrey tangira play in a maori side that promises a tough game which a week before the second test is what britain need and want

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 38-39:  and => and
Span 13-14:  and => and
Span 30-31:  before => before
Span 36-37:  britain => (country :name (name :op "Britain"))
Span 1-2:  chief => (have-org-role-91 :ARG2 chief)
Span 10-11:  forward => forward
Span 26-27:  game => game
Span 9-10:  loose => loose-01
Span 37-38:  need => need-01
Span 17-18:  play => play-01
Span 23-24:  promises => promise-01
Span 21-22:  side => side
Span 33-34:  test => test-01
Span 25-26:  tough => tough
Span 39-40:  want => want-01
Span 29-30:  week => week
Span 5-6:  win => win-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),want,want-01,false), Span(38,39,List(1),and,and,false), Span(37,38,List(2),need,need-01,false), Span(36,37,List(5, 4, 3),britain,(country :name (name :op "Britain")),false), Span(33,34,List(6),test,test-01,false), Span(30,31,List(7),before,before,false), Span(29,30,List(8),week,week,false), Span(26,27,List(9),game,game,false), Span(25,26,List(10),tough,tough,false), Span(23,24,List(11),promises,promise-01,false), Span(21,22,List(12),side,side,false), Span(17,18,List(13),play,play-01,false), Span(13,14,List(14),and,and,false), Span(10,11,List(15),forward,forward,false), Span(9,10,List(16),loose,loose-01,false), Span(5,6,List(17),win,win-01,false), Span(1,2,List(19, 18),chief,(have-org-role-91 :ARG2 chief),false)),Map(2 -> need-01, 5 -> "Britain", 12 -> side, 15 -> forward, 8 -> week, 18 -> have-org-role-91, 7 -> before, 17 -> win-01, 1 -> and, 4 -> name, 11 -> promise-01, 14 -> and, 6 -> test-01, 0 -> want-01, 9 -> game, 16 -> loose-01, 19 -> chief, 3 -> country, 10 -> tough, 13 -> play-01),Map(w -> want-01, n -> need-01, h -> have-org-role-91, t -> test-01, b -> before, p2 -> play-01, w3 -> win-01, s -> side, g -> game, p -> promise-01, a -> and, t2 -> tough, w2 -> week, a2 -> and, c -> country, l -> loose-01, f -> forward, c2 -> chief, n2 -> name))),[Ljava.lang.String;@3de76481,Annotation([Ljava.lang.String;@227770e7,[Ljava.lang.String;@4f955f5e,[Ljava.lang.String;@57a83d23),Annotation([Ljava.lang.String;@6645f1ca,[Ljava.lang.String;@7a05393a,[Ledu.cmu.lti.nlp.amr.Dependency;@6cf04d6b),Annotation([Ljava.lang.String;@146ae3ad,[Ljava.lang.String;@75897d53,[Ljava.lang.String;@1583106e),Annotation([Ljava.lang.String;@4fabb0ca,[Ljava.lang.String;@10e3c6a3,[Ledu.cmu.lti.nlp.amr.Entity;@5a05fffe))
AMR:
(a / and, op, w / want-01)
(b / before, op, t / test-01)
(c / country, name, n2 / name)
(g / game, mod, t2 / tough)
(g / game, purpose, a / and)
(h / have-org-role-91, ARG1, p / promise-01)
(h / have-org-role-91, ARG2, c2 / chief)
(l / loose-01, ARG1, g / game)
(n / need-01, ARG0, c / country)
(n / need-01, ARG1, t / test-01)
(n2 / name, op, "Britain")
(p / promise-01, ARG0, s / side)
(p / promise-01, ARG1, g / game)
(p2 / play-01, ARG0, a2 / and)
(p2 / play-01, ARG1, s / side)
(t / test-01, ARG1, f / forward)
(w / want-01, ARG0, c / country)
(w / want-01, ARG1, w2 / week)
(w3 / win-01, ARG1, p2 / play-01)

Decoded in 547,546 microseconds
Sentence: mr field last night promised to stand by the result of a second selection contest rather than resign and force a byelection

Spans:
Span 18-19:  and => and
Span 14-15:  contest => contest-00
Span 1-2:  field => field
Span 19-20:  force => force
Span 2-3:  last => last
Span 3-4:  night => night
Span 4-5:  promised => promise-01
Span 17-18:  resign => resign-01
Span 9-10:  result => result-01
Span 13-14:  selection => select-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),force,force,false), Span(18,19,List(1),and,and,false), Span(17,18,List(2),resign,resign-01,false), Span(14,15,List(3),contest,contest-00,false), Span(13,14,List(4),selection,select-01,false), Span(9,10,List(5),result,result-01,false), Span(4,5,List(6),promised,promise-01,false), Span(3,4,List(7),night,night,false), Span(2,3,List(8),last,last,false), Span(1,2,List(9),field,field,false)),Map(2 -> resign-01, 5 -> result-01, 8 -> last, 7 -> night, 1 -> and, 4 -> select-01, 6 -> promise-01, 9 -> field, 0 -> force, 3 -> contest-00),Map(n -> night, s -> select-01, p -> promise-01, r2 -> result-01, a -> and, r -> resign-01, f2 -> field, l -> last, c -> contest-00, f -> force))),[Ljava.lang.String;@3fe9aade,Annotation([Ljava.lang.String;@5d0f59a,[Ljava.lang.String;@59ac5471,[Ljava.lang.String;@40dbf4b5),Annotation([Ljava.lang.String;@289eb857,[Ljava.lang.String;@4c586c96,[Ledu.cmu.lti.nlp.amr.Dependency;@41411302),Annotation([Ljava.lang.String;@174709c6,[Ljava.lang.String;@38d2b21a,[Ljava.lang.String;@10aae61b),Annotation([Ljava.lang.String;@43e8ff29,[Ljava.lang.String;@75c7ff93,[Ledu.cmu.lti.nlp.amr.Entity;@1d5c484e))
AMR:
(a / and, op, f / force)
(a / and, op, r / resign-01)
(c / contest-00, ARG1, s / select-01)
(n / night, mod, l / last)
(p / promise-01, ARG0, f2 / field)
(p / promise-01, ARG1, r2 / result-01)
(p / promise-01, time, n / night)
(r / resign-01, ARG0, f2 / field)
(r2 / result-01, ARG1, c / contest-00)

Decoded in 44,608 microseconds
Sentence: where milton promises his lycidas a joyous immortality with all kinds of saintly company kleins poet can barely achieve an evanescent lonely glow at the bottom of the sea

Spans:
Span 18-19:  achieve => achieve-01
Span 9-10:  all => all
Span 17-18:  barely => barely
Span 25-26:  bottom => bottom
Span 16-17:  can => possible
Span 13-14:  company => company
Span 22-23:  glow => glow-01
Span 10-11:  kinds => kind
Span 15-16:  poet => poet
Span 2-3:  promises => promise-01
Span 28-29:  sea => sea

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),sea,sea,false), Span(25,26,List(1),bottom,bottom,false), Span(22,23,List(2),glow,glow-01,false), Span(18,19,List(3),achieve,achieve-01,false), Span(17,18,List(4),barely,barely,false), Span(16,17,List(5),can,possible,false), Span(15,16,List(6),poet,poet,false), Span(13,14,List(7),company,company,false), Span(10,11,List(8),kinds,kind,false), Span(9,10,List(9),all,all,false), Span(2,3,List(10),promises,promise-01,false)),Map(2 -> glow-01, 5 -> possible, 8 -> kind, 7 -> company, 1 -> bottom, 4 -> barely, 6 -> poet, 9 -> all, 0 -> sea, 10 -> promise-01, 3 -> achieve-01),Map(k -> kind, b -> bottom, b2 -> barely, p2 -> poet, s -> sea, p -> possible, g -> glow-01, a -> achieve-01, a2 -> all, c -> company, p3 -> promise-01))),[Ljava.lang.String;@61526a45,Annotation([Ljava.lang.String;@69bf09ed,[Ljava.lang.String;@7d24dcd7,[Ljava.lang.String;@7f1ee770),Annotation([Ljava.lang.String;@45ecab43,[Ljava.lang.String;@34dfdf92,[Ledu.cmu.lti.nlp.amr.Dependency;@55cf055c),Annotation([Ljava.lang.String;@a690707,[Ljava.lang.String;@754c61e7,[Ljava.lang.String;@69afc0da),Annotation([Ljava.lang.String;@119e5e6b,[Ljava.lang.String;@3448cbd6,[Ledu.cmu.lti.nlp.amr.Entity;@173e696b))
AMR:
(a / achieve-01, ARG0, p2 / poet)
(a / achieve-01, ARG1, g / glow-01)
(a / achieve-01, mod, b2 / barely)
(b / bottom, location, s / sea)
(g / glow-01, ARG0, k / kind)
(g / glow-01, ARG1, b / bottom)
(k / kind, quant, a2 / all)
(p / possible, domain, a / achieve-01)
(p3 / promise-01, ARG0, c / company)
(p3 / promise-01, ARG1, k / kind)

Decoded in 194,537 microseconds
Sentence: clips of his greatest hits various filmed interviews and the odd surprise guest are promised followed by both taking questions from the floor

Spans:
Span 8-9:  and => and
Span 17-18:  both => both
Span 0-1:  clips => clip
Span 22-23:  floor => floor
Span 15-16:  followed => follow-01
Span 3-4:  greatest => (great :degree most)
Span 12-13:  guest => guest
Span 4-5:  hits => hit-01
Span 7-8:  interviews => interview-01
Span 10-11:  odd => odd
Span 14-15:  promised => promise-01
Span 19-20:  questions => question-01
Span 11-12:  surprise => surprise-01
Span 5-6:  various => various

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),floor,floor,false), Span(19,20,List(1),questions,question-01,false), Span(17,18,List(2),both,both,false), Span(15,16,List(3),followed,follow-01,false), Span(14,15,List(4),promised,promise-01,false), Span(12,13,List(5),guest,guest,false), Span(11,12,List(6),surprise,surprise-01,false), Span(10,11,List(7),odd,odd,false), Span(8,9,List(8),and,and,false), Span(7,8,List(9),interviews,interview-01,false), Span(5,6,List(10),various,various,false), Span(4,5,List(11),hits,hit-01,false), Span(3,4,List(13, 12),greatest,(great :degree most),false), Span(0,1,List(14),clips,clip,false)),Map(2 -> both, 5 -> guest, 12 -> great, 8 -> and, 7 -> odd, 1 -> question-01, 4 -> promise-01, 11 -> hit-01, 14 -> clip, 6 -> surprise-01, 0 -> floor, 9 -> interview-01, 3 -> follow-01, 10 -> various, 13 -> most),Map(h -> hit-01, q -> question-01, b -> both, s -> surprise-01, v -> various, m -> most, g2 -> great, p -> promise-01, g -> guest, a -> and, i -> interview-01, c -> clip, f2 -> follow-01, f -> floor, o -> odd))),[Ljava.lang.String;@2fc86961,Annotation([Ljava.lang.String;@e7e77c9,[Ljava.lang.String;@10ea348e,[Ljava.lang.String;@205f4f),Annotation([Ljava.lang.String;@4d513b99,[Ljava.lang.String;@101fe177,[Ledu.cmu.lti.nlp.amr.Dependency;@1d0b53e6),Annotation([Ljava.lang.String;@52b12fef,[Ljava.lang.String;@6ec21e52,[Ljava.lang.String;@a54d24d),Annotation([Ljava.lang.String;@46bac287,[Ljava.lang.String;@f395158,[Ledu.cmu.lti.nlp.amr.Entity;@7c0b7036))
AMR:
(a / and, mod, v / various)
(a / and, op, f2 / follow-01)
(a / and, op, i / interview-01)
(f2 / follow-01, ARG1, p / promise-01)
(g / guest, mod, o / odd)
(g2 / great, degree, m / most)
(h / hit-01, ARG0, i / interview-01)
(h / hit-01, ARG1, g / guest)
(h / hit-01, ARG2, g2 / great)
(i / interview-01, ARG1, q / question-01)
(p / promise-01, ARG1, c / clip)
(q / question-01, ARG0, b / both)
(q / question-01, ARG1, f / floor)
(s / surprise-01, ARG0, g / guest)

Decoded in 104,809 microseconds
Sentence: we will cosset you with fluffy towelling bathrobes fresh flowers a glossy magazine and a chilled bottle of champagne with breakfast promises the brochure

Spans:
Span 13-14:  and => and
Span 16-17:  bottle => bottle
Span 18-19:  champagne => champagne
Span 15-16:  chilled => chill-01
Span 9-10:  flowers => flower
Span 8-9:  fresh => fresh
Span 11-12:  glossy => glossy
Span 12-13:  magazine => magazine
Span 21-22:  promises => promise-01
Span 0-1:  we => we
Span 3-4:  you => you

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),promises,promise-01,false), Span(18,19,List(1),champagne,champagne,false), Span(16,17,List(2),bottle,bottle,false), Span(15,16,List(3),chilled,chill-01,false), Span(13,14,List(4),and,and,false), Span(12,13,List(5),magazine,magazine,false), Span(11,12,List(6),glossy,glossy,false), Span(9,10,List(7),flowers,flower,false), Span(8,9,List(8),fresh,fresh,false), Span(3,4,List(9),you,you,false), Span(0,1,List(10),we,we,false)),Map(2 -> bottle, 5 -> magazine, 8 -> fresh, 7 -> flower, 1 -> champagne, 4 -> and, 6 -> glossy, 9 -> you, 0 -> promise-01, 10 -> we, 3 -> chill-01),Map(w -> we, b -> bottle, m -> magazine, y -> you, g -> glossy, p -> promise-01, a -> and, f2 -> fresh, c -> champagne, f -> flower, c2 -> chill-01))),[Ljava.lang.String;@52f428d9,Annotation([Ljava.lang.String;@1ba5e91b,[Ljava.lang.String;@296af9cb,[Ljava.lang.String;@2e3593ab),Annotation([Ljava.lang.String;@3f71d740,[Ljava.lang.String;@4aeacb4a,[Ledu.cmu.lti.nlp.amr.Dependency;@7cc88db2),Annotation([Ljava.lang.String;@52cee11e,[Ljava.lang.String;@c1da30b,[Ljava.lang.String;@6dbb2d63),Annotation([Ljava.lang.String;@1ba0f6dd,[Ljava.lang.String;@64af3556,[Ledu.cmu.lti.nlp.amr.Entity;@2ad6d4be))
AMR:
(a / and, op, b / bottle)
(a / and, op, f / flower)
(a / and, op, m / magazine)
(c / champagne, quant, b / bottle)
(c2 / chill-01, ARG0, y / you)
(c2 / chill-01, ARG1, b / bottle)
(f / flower, mod, f2 / fresh)
(m / magazine, mod, g / glossy)
(p / promise-01, ARG0, c / champagne)
(p / promise-01, ARG1, w / we)

Decoded in 118,354 microseconds
Sentence: by promising that palestine should become a national home for the jews

NER Entity: (country :name (name :op "palestine"))
Spans:
Span 5-6:  become => become-01
Span 8-9:  home => home
Span 11-12:  jews => (ethnic-group :name (name :op "Jew"))
Span 7-8:  national => nation
Span 1-2:  promising => promise-01
Span 4-5:  should => recommend-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),jews,(ethnic-group :name (name :op "Jew")),false), Span(8,9,List(3),home,home,false), Span(7,8,List(4),national,nation,false), Span(5,6,List(5),become,become-01,false), Span(4,5,List(6),should,recommend-01,false), Span(1,2,List(7),promising,promise-01,false)),Map(2 -> "Jew", 5 -> become-01, 7 -> promise-01, 1 -> name, 4 -> nation, 6 -> recommend-01, 0 -> ethnic-group, 3 -> home),Map(n -> name, e -> ethnic-group, h -> home, b -> become-01, p -> promise-01, r -> recommend-01, n2 -> nation))),[Ljava.lang.String;@7e291bea,Annotation([Ljava.lang.String;@3ce7e05b,[Ljava.lang.String;@1b3a959a,[Ljava.lang.String;@2333bf6d),Annotation([Ljava.lang.String;@1a5c9f29,[Ljava.lang.String;@36d54a44,[Ledu.cmu.lti.nlp.amr.Dependency;@6cfed27b),Annotation([Ljava.lang.String;@4dacc124,[Ljava.lang.String;@8bc4a53,[Ljava.lang.String;@1b393a0),Annotation([Ljava.lang.String;@34a0ee3f,[Ljava.lang.String;@31798517,[Ledu.cmu.lti.nlp.amr.Entity;@2110c261))
AMR:
(b / become-01, ARG2, h / home)
(e / ethnic-group, name, n / name)
(h / home, location, e / ethnic-group)
(h / home, mod, n2 / nation)
(n / name, op, "Jew")
(p / promise-01, ARG1, r / recommend-01)
(r / recommend-01, ARG1, b / become-01)

Decoded in 36,232 microseconds
Sentence:   rain laughed with her promising her it was going to be far more like the boring doorstepping that journalists indulged in than like any thriller pat had ever read

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   rain laughed with her promising her it was going to be far more like the boring doorstepping that journalists indulged in than like any thriller pat had ever read
myTokenized = rain laughed with her promising her it was going to be far more like the boring doorstepping that journalists indulged in than like any thriller pat had ever read
i = 0
prefix = List(rain)
regexr = \Qr\E ?\Qa\E ?\Qi\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the british government did not underwrite the french claim to alsace and lorraine until october 1917 and the secret treaties except for the treaty of london which promised unconditionally what italy will receive  were attempts to avoid conflict between the allies after victory not definitions of the objects for which the war was being fought

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = the british government did not underwrite the french claim to alsace and lorraine until october 1917 and the secret treaties except for the treaty of london which promised unconditionally what italy will receive  were attempts to avoid conflict between the allies after victory not definitions of the objects for which the war was being fought
myTokenized = the british government did not underwrite the french claim to alsace and lorraine until october 1917 and the secret treaties except for the treaty of london which promised unconditionally what italy will receive were attempts to avoid conflict between the allies after victory not definitions of the objects for which the war was being fought
i = 33
prefix = List(the, british, government, did, not, underwrite, the, french, claim, to, alsace, and, lorraine, until, october, 1917, and, the, secret, treaties, except, for, the, treaty, of, london, which, promised, unconditionally, what, italy, will, receive, were)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qb\E ?\Qr\E ?\Qi\E ?\Qt\E ?\Qi\E ?\Qs\E ?\Qh\E ?\Qg\E ?\Qo\E ?\Qv\E ?\Qe\E ?\Qr\E ?\Qn\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qd\E ?\Qi\E ?\Qd\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qu\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qw\E ?\Qr\E ?\Qi\E ?\Qt\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qf\E ?\Qr\E ?\Qe\E ?\Qn\E ?\Qc\E ?\Qh\E ?\Qc\E ?\Ql\E ?\Qa\E ?\Qi\E ?\Qm\E ?\Qt\E ?\Qo\E ?\Qa\E ?\Ql\E ?\Qs\E ?\Qa\E ?\Qc\E ?\Qe\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Ql\E ?\Qo\E ?\Qr\E ?\Qr\E ?\Qa\E ?\Qi\E ?\Qn\E ?\Qe\E ?\Qu\E ?\Qn\E ?\Qt\E ?\Qi\E ?\Ql\E ?\Qo\E ?\Qc\E ?\Qt\E ?\Qo\E ?\Qb\E ?\Qe\E ?\Qr\E ?\Q1\E ?\Q9\E ?\Q1\E ?\Q7\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qe\E ?\Qc\E ?\Qr\E ?\Qe\E ?\Qt\E ?\Qt\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qe\E ?\Qs\E ?\Qe\E ?\Qx\E ?\Qc\E ?\Qe\E ?\Qp\E ?\Qt\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qt\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qt\E ?\Qy\E ?\Qo\E ?\Qf\E ?\Ql\E ?\Qo\E ?\Qn\E ?\Qd\E ?\Qo\E ?\Qn\E ?\Qw\E ?\Qh\E ?\Qi\E ?\Qc\E ?\Qh\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qu\E ?\Qn\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qd\E ?\Qi\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qy\E ?\Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qt\E ?\Qa\E ?\Ql\E ?\Qy\E ?\Qw\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qr\E ?\Qe\E ?\Qc\E ?\Qe\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qw\E ?\Qe\E ?\Qr\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in their introductory verses berlin and his contemporaries always promised to teach you the new dance sensation but ended up just enthusing over it

Spans:
Span 8-9:  always => always
Span 5-6:  and => and
Span 17-18:  but => contrast-01
Span 15-16:  dance => dance-01
Span 18-19:  ended => end-01
Span 23-24:  it => it
Span 20-21:  just => just
Span 14-15:  new => new
Span 9-10:  promised => promise-01
Span 16-17:  sensation => sensation
Span 11-12:  teach => teach-01
Span 12-13:  you => you

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),it,it,false), Span(20,21,List(1),just,just,false), Span(18,19,List(2),ended,end-01,false), Span(17,18,List(3),but,contrast-01,false), Span(16,17,List(4),sensation,sensation,false), Span(15,16,List(5),dance,dance-01,false), Span(14,15,List(6),new,new,false), Span(12,13,List(7),you,you,false), Span(11,12,List(8),teach,teach-01,false), Span(9,10,List(9),promised,promise-01,false), Span(8,9,List(10),always,always,false), Span(5,6,List(11),and,and,false)),Map(2 -> end-01, 5 -> dance-01, 8 -> teach-01, 7 -> you, 1 -> just, 11 -> and, 4 -> sensation, 6 -> new, 9 -> promise-01, 0 -> it, 10 -> always, 3 -> contrast-01),Map(n -> new, e -> end-01, t -> teach-01, s -> sensation, j -> just, d -> dance-01, p -> promise-01, y -> you, a -> always, a2 -> and, i -> it, c -> contrast-01))),[Ljava.lang.String;@3620f49e,Annotation([Ljava.lang.String;@2d9bccd5,[Ljava.lang.String;@4fa4cb57,[Ljava.lang.String;@4c21e59a),Annotation([Ljava.lang.String;@45690882,[Ljava.lang.String;@72adb267,[Ledu.cmu.lti.nlp.amr.Dependency;@699bc302),Annotation([Ljava.lang.String;@711fee78,[Ljava.lang.String;@6761424d,[Ljava.lang.String;@22480241),Annotation([Ljava.lang.String;@258c0afc,[Ljava.lang.String;@d2539a6,[Ledu.cmu.lti.nlp.amr.Entity;@6ebc808))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, e / end-01)
(e / end-01, ARG1, a2 / and)
(e / end-01, mod, j / just)
(p / promise-01, ARG2, t / teach-01)
(p / promise-01, time, a / always)
(s / sensation, mod, d / dance-01)
(s / sensation, mod, n / new)
(t / teach-01, ARG0, i / it)
(t / teach-01, ARG1, s / sensation)
(t / teach-01, ARG2, y / you)

Decoded in 81,491 microseconds
Sentence: at the same time the americans would move forward in the pacific and the british promised to undertake an offensive in burma also dash

NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "burma"))
Spans:
Span 22-23:  also => also
Span 5-6:  americans => (person :mod (country :name (name :op "America")))
Span 12-13:  and => and
Span 8-9:  forward => forward
Span 19-20:  offensive => offensive
Span 15-16:  promised => promise-01
Span 2-3:  same => same-41
Span 3-4:  time => time
Span 17-18:  undertake => undertake-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),also,also,false), Span(19,20,List(1),offensive,offensive,false), Span(17,18,List(2),undertake,undertake-01,false), Span(15,16,List(3),promised,promise-01,false), Span(12,13,List(4),and,and,false), Span(8,9,List(5),forward,forward,false), Span(5,6,List(9, 8, 7, 6),americans,(person :mod (country :name (name :op "America"))),false), Span(3,4,List(10),time,time,false), Span(2,3,List(11),same,same-41,false)),Map(2 -> undertake-01, 5 -> forward, 8 -> name, 7 -> country, 1 -> offensive, 11 -> same-41, 4 -> and, 6 -> person, 9 -> "America", 0 -> also, 10 -> time, 3 -> promise-01),Map(n -> name, t -> time, p2 -> person, s -> same-41, p -> promise-01, a -> also, a2 -> and, c -> country, u -> undertake-01, f -> forward, o -> offensive))),[Ljava.lang.String;@619988c4,Annotation([Ljava.lang.String;@26e22deb,[Ljava.lang.String;@4b34b33e,[Ljava.lang.String;@70e3d204),Annotation([Ljava.lang.String;@7cf13e82,[Ljava.lang.String;@423f08e3,[Ledu.cmu.lti.nlp.amr.Dependency;@3860910f),Annotation([Ljava.lang.String;@4bd38cb3,[Ljava.lang.String;@2dba62a9,[Ljava.lang.String;@27a35cb3),Annotation([Ljava.lang.String;@561b0019,[Ljava.lang.String;@6a39579,[Ledu.cmu.lti.nlp.amr.Entity;@5daa3e56))
AMR:
(c / country, name, n / name)
(n / name, op, "America")
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, ARG2, u / undertake-01)
(p2 / person, mod, c / country)
(s / same-41, ARG0, a / also)
(s / same-41, ARG1, t / time)
(s / same-41, ARG2, p / promise-01)
(u / undertake-01, ARG0, f / forward)
(u / undertake-01, ARG1, o / offensive)

Decoded in 117,832 microseconds
Sentence: the basic law will still be enacted promising a panoply of rights and freedoms for 50 years beyond 1997

Spans:
Span 18-19:  1997 => (date-entity :year 1997)
Span 15-16:  50 => 50
Span 12-13:  and => and
Span 1-2:  basic => basic
Span 17-18:  beyond => beyond
Span 6-7:  enacted => enact-01
Span 13-14:  freedoms => free-41
Span 2-3:  law => law
Span 7-8:  promising => promise-01
Span 11-12:  rights => right
Span 4-5:  still => still
Span 16-17:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),1997,(date-entity :year 1997),false), Span(17,18,List(2),beyond,beyond,false), Span(16,17,List(4, 3),years,(temporal-quantity :unit year),false), Span(15,16,List(5),50,50,false), Span(13,14,List(6),freedoms,free-41,false), Span(12,13,List(7),and,and,false), Span(11,12,List(8),rights,right,false), Span(7,8,List(9),promising,promise-01,false), Span(6,7,List(10),enacted,enact-01,false), Span(4,5,List(11),still,still,false), Span(2,3,List(12),law,law,false), Span(1,2,List(13),basic,basic,false)),Map(2 -> beyond, 5 -> 50, 12 -> law, 8 -> right, 7 -> and, 1 -> 1997, 4 -> year, 11 -> still, 6 -> free-41, 0 -> date-entity, 9 -> promise-01, 3 -> temporal-quantity, 10 -> enact-01, 13 -> basic),Map(e -> enact-01, 5 -> 50, b -> beyond, t -> temporal-quantity, b2 -> basic, s -> still, d -> date-entity, 1 -> 1997, y -> year, p -> promise-01, a -> and, r -> right, l -> law, f -> free-41))),[Ljava.lang.String;@53e2b024,Annotation([Ljava.lang.String;@479a3682,[Ljava.lang.String;@5d70b587,[Ljava.lang.String;@129de1fe),Annotation([Ljava.lang.String;@3b5ff43e,[Ljava.lang.String;@189c30e6,[Ledu.cmu.lti.nlp.amr.Dependency;@364e58a9),Annotation([Ljava.lang.String;@519edb19,[Ljava.lang.String;@1442702c,[Ljava.lang.String;@15d26318),Annotation([Ljava.lang.String;@2767c7d9,[Ljava.lang.String;@e718bc5,[Ledu.cmu.lti.nlp.amr.Entity;@408f39eb))
AMR:
(a / and, op, f / free-41)
(a / and, op, r / right)
(b / beyond, op, d / date-entity)
(d / date-entity, year, 1 / 1997)
(e / enact-01, ARG1, p / promise-01)
(e / enact-01, mod, s / still)
(e / enact-01, time, b / beyond)
(f / free-41, duration, t / temporal-quantity)
(l / law, mod, b2 / basic)
(p / promise-01, ARG0, l / law)
(p / promise-01, ARG1, a / and)
(t / temporal-quantity, quant, 5 / 50)
(t / temporal-quantity, unit, y / year)

Decoded in 410,875 microseconds
Sentence: feel that a reform programme promised by mr federico mayor unescos directorgeneral has taken too long to implement

Spans:
Span 0-1:  feel => feel-01
Span 17-18:  implement => implement-01
Span 9-10:  mayor => (have-org-role-91 :ARG2 mayor)
Span 4-5:  programme => program
Span 5-6:  promised => promise-01
Span 3-4:  reform => reform-01
Span 14-15:  too => too

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),implement,implement-01,false), Span(14,15,List(1),too,too,false), Span(9,10,List(3, 2),mayor,(have-org-role-91 :ARG2 mayor),false), Span(5,6,List(4),promised,promise-01,false), Span(4,5,List(5),programme,program,false), Span(3,4,List(6),reform,reform-01,false), Span(0,1,List(7),feel,feel-01,false)),Map(2 -> have-org-role-91, 5 -> program, 7 -> feel-01, 1 -> too, 4 -> promise-01, 6 -> reform-01, 0 -> implement-01, 3 -> mayor),Map(h -> have-org-role-91, t -> too, p2 -> program, m -> mayor, p -> promise-01, r -> reform-01, i -> implement-01, f -> feel-01))),[Ljava.lang.String;@7b239469,Annotation([Ljava.lang.String;@5ce4b8a7,[Ljava.lang.String;@2c170b96,[Ljava.lang.String;@1cf9bb77),Annotation([Ljava.lang.String;@4f82907d,[Ljava.lang.String;@4dc2753,[Ledu.cmu.lti.nlp.amr.Dependency;@1199bca3),Annotation([Ljava.lang.String;@42f7a5c,[Ljava.lang.String;@490a3029,[Ljava.lang.String;@3bdff935),Annotation([Ljava.lang.String;@6d622548,[Ljava.lang.String;@467dd212,[Ledu.cmu.lti.nlp.amr.Entity;@6e6abfe5))
AMR:
(f / feel-01, ARG1, r / reform-01)
(h / have-org-role-91, ARG2, m / mayor)
(i / implement-01, ARG1, p2 / program)
(p / promise-01, ARG1, p2 / program)
(p2 / program, mod, r / reform-01)
(r / reform-01, ARG0, t / too)
(r / reform-01, ARG1, h / have-org-role-91)

Decoded in 63,148 microseconds
Sentence: but why is it a right  the interest on which it is based validates the promising principle namely if a person communicates an intention to undertake by that very act of communication a certain obligation then he has that obligation, the promising principle establishes that if we promise we are obligated to act as we promised

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = but why is it a right  the interest on which it is based validates the promising principle namely if a person communicates an intention to undertake by that very act of communication a certain obligation then he has that obligation, the promising principle establishes that if we promise we are obligated to act as we promised
myTokenized = but why is it a right the interest on which it is based validates the promising principle namely if a person communicates an intention to undertake by that very act of communication a certain obligation then he has that obligation , the promising principle establishes that if we promise we are obligated to act as we promised
i = 6
prefix = List(but, why, is, it, a, right, the)
regexr = \Qb\E ?\Qu\E ?\Qt\E ?\Qw\E ?\Qh\E ?\Qy\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qt\E ?\Qa\E ?\Qr\E ?\Qi\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   holly promised she was sworn to secrecy

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   holly promised she was sworn to secrecy
myTokenized = holly promised she was sworn to secrecy
i = 0
prefix = List(holly)
regexr = \Qh\E ?\Qo\E ?\Ql\E ?\Ql\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the area of dispute which promises to occupy all of a meeting of ec finance ministers in luxembourg today is over the commissions proposal that the current system of exporting goods free of vat be abandoned and that after 1992 the tax should be levied in the country of origin before export

NER Entity: (country :name (name :op "luxembourg"))
Spans:
Span 39-40:  1992 => (date-entity :year 1992)
Span 35-36:  abandoned => abandon-01
Span 38-39:  after => after
Span 8-9:  all => all
Span 36-37:  and => and
Span 1-2:  area => area
Span 50-51:  before => before
Span 22-23:  commissions => commission
Span 47-48:  country => country
Span 26-27:  current => current
Span 3-4:  dispute => dispute-01
Span 51-52:  export => export-01
Span 29-30:  exporting => export-01
Span 14-15:  finance => finance-01
Span 31-32:  free => free-41
Span 30-31:  goods => good
Span 44-45:  levied => levy-01
Span 11-12:  meeting => meet-03
Span 15-16:  ministers => (have-org-role-91 :ARG2 minister)
Span 7-8:  occupy => occupy-01
Span 49-50:  origin => originate-01
Span 5-6:  promises => promise-01
Span 23-24:  proposal => propose-01
Span 42-43:  should => recommend-01
Span 27-28:  system => system
Span 41-42:  tax => tax-01
Span 18-19:  today => today
Span 33-34:  vat => vat

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),export,export-01,false), Span(50,51,List(1),before,before,false), Span(49,50,List(2),origin,originate-01,false), Span(47,48,List(3),country,country,false), Span(44,45,List(4),levied,levy-01,false), Span(42,43,List(5),should,recommend-01,false), Span(41,42,List(6),tax,tax-01,false), Span(39,40,List(8, 7),1992,(date-entity :year 1992),false), Span(38,39,List(9),after,after,false), Span(36,37,List(10),and,and,false), Span(35,36,List(11),abandoned,abandon-01,false), Span(33,34,List(12),vat,vat,false), Span(31,32,List(13),free,free-41,false), Span(30,31,List(14),goods,good,false), Span(29,30,List(15),exporting,export-01,false), Span(27,28,List(16),system,system,false), Span(26,27,List(17),current,current,false), Span(23,24,List(18),proposal,propose-01,false), Span(22,23,List(19),commissions,commission,false), Span(18,19,List(20),today,today,false), Span(15,16,List(22, 21),ministers,(have-org-role-91 :ARG2 minister),false), Span(14,15,List(23),finance,finance-01,false), Span(11,12,List(24),meeting,meet-03,false), Span(8,9,List(25),all,all,false), Span(7,8,List(26),occupy,occupy-01,false), Span(5,6,List(27),promises,promise-01,false), Span(3,4,List(28),dispute,dispute-01,false), Span(1,2,List(29),area,area,false)),Map(2 -> originate-01, 5 -> recommend-01, 27 -> promise-01, 12 -> vat, 8 -> 1992, 15 -> export-01, 21 -> have-org-role-91, 18 -> propose-01, 24 -> meet-03, 7 -> date-entity, 1 -> before, 17 -> current, 23 -> finance-01, 26 -> occupy-01, 4 -> levy-01, 11 -> abandon-01, 14 -> good, 29 -> area, 20 -> today, 28 -> dispute-01, 6 -> tax-01, 9 -> after, 0 -> export-01, 22 -> minister, 16 -> system, 19 -> commission, 10 -> and, 3 -> country, 25 -> all, 13 -> free-41),Map(e -> export-01, h -> have-org-role-91, t -> tax-01, b -> before, m2 -> meet-03, p2 -> promise-01, e2 -> export-01, a3 -> abandon-01, s -> system, v -> vat, d -> date-entity, m -> minister, 1 -> 1992, g -> good, p -> propose-01, a -> after, c3 -> commission, a5 -> area, d2 -> dispute-01, o2 -> occupy-01, t2 -> today, a2 -> and, r -> recommend-01, c -> country, f2 -> finance-01, l -> levy-01, f -> free-41, o -> originate-01, c2 -> current, a4 -> all))),[Ljava.lang.String;@4e5a309d,Annotation([Ljava.lang.String;@32dbb9b,[Ljava.lang.String;@2f77bebe,[Ljava.lang.String;@5e8bc44a),Annotation([Ljava.lang.String;@2a0406c4,[Ljava.lang.String;@6e584368,[Ledu.cmu.lti.nlp.amr.Dependency;@64b19970),Annotation([Ljava.lang.String;@47d0bbb5,[Ljava.lang.String;@58d38ce8,[Ljava.lang.String;@28c800e7),Annotation([Ljava.lang.String;@62b3529b,[Ljava.lang.String;@6af470bc,[Ledu.cmu.lti.nlp.amr.Entity;@56157d7f))
AMR:
(a / after, op, d / date-entity)
(a2 / and, op, a3 / abandon-01)
(a2 / and, op, p / propose-01)
(a2 / and, op, r / recommend-01)
(a3 / abandon-01, ARG1, s / system)
(a3 / abandon-01, ARG2, f2 / finance-01)
(b / before, op, e / export-01)
(d / date-entity, year, 1 / 1992)
(e2 / export-01, ARG1, g / good)
(f / free-41, ARG1, g / good)
(f / free-41, ARG2, v / vat)
(h / have-org-role-91, ARG1, f2 / finance-01)
(h / have-org-role-91, ARG2, m / minister)
(h / have-org-role-91, prep-with, t2 / today)
(l / levy-01, ARG0, c / country)
(l / levy-01, ARG1, t / tax-01)
(l / levy-01, time, a / after)
(l / levy-01, time, b / before)
(m2 / meet-03, ARG0, a2 / and)
(m2 / meet-03, quant, a4 / all)
(o / originate-01, ARG1, c / country)
(o2 / occupy-01, ARG0, d2 / dispute-01)
(o2 / occupy-01, ARG1, a5 / area)
(p / propose-01, ARG0, a5 / area)
(p / propose-01, ARG1, c3 / commission)
(p2 / promise-01, ARG1, o2 / occupy-01)
(r / recommend-01, ARG1, l / levy-01)
(s / system, location, g / good)
(s / system, time, c2 / current)

Decoded in 1,709,633 microseconds
Sentence: shell take one look at us and revise her itinerary immediately sheldon promised confidently adjusting his shirtcuffs and settling his tie

Spans:
Span 14-15:  adjusting => adjust-01
Span 17-18:  and => and
Span 6-7:  and => and
Span 10-11:  immediately => immediate
Span 9-10:  itinerary => itinerary
Span 12-13:  promised => promise-01
Span 7-8:  revise => revise-01
Span 18-19:  settling => settle-03
Span 0-1:  shell => shell
Span 20-21:  tie => tie

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),tie,tie,false), Span(18,19,List(1),settling,settle-03,false), Span(17,18,List(2),and,and,false), Span(14,15,List(3),adjusting,adjust-01,false), Span(12,13,List(4),promised,promise-01,false), Span(10,11,List(5),immediately,immediate,false), Span(9,10,List(6),itinerary,itinerary,false), Span(7,8,List(7),revise,revise-01,false), Span(6,7,List(8),and,and,false), Span(0,1,List(9),shell,shell,false)),Map(2 -> and, 5 -> immediate, 8 -> and, 7 -> revise-01, 1 -> settle-03, 4 -> promise-01, 6 -> itinerary, 9 -> shell, 0 -> tie, 3 -> adjust-01),Map(s2 -> shell, t -> tie, a3 -> and, s -> settle-03, p -> promise-01, a -> and, i2 -> itinerary, r -> revise-01, i -> immediate, a2 -> adjust-01))),[Ljava.lang.String;@1ce24900,Annotation([Ljava.lang.String;@4c26add0,[Ljava.lang.String;@7f5d59be,[Ljava.lang.String;@49af0a45),Annotation([Ljava.lang.String;@2cb5dce,[Ljava.lang.String;@757b80d0,[Ledu.cmu.lti.nlp.amr.Dependency;@7f4613f1),Annotation([Ljava.lang.String;@51c7747e,[Ljava.lang.String;@7db12623,[Ljava.lang.String;@793f044c),Annotation([Ljava.lang.String;@183357c4,[Ljava.lang.String;@52c71145,[Ledu.cmu.lti.nlp.amr.Entity;@b3ef378))
AMR:
(a / and, op, s / settle-03)
(a2 / adjust-01, ARG1, a / and)
(a2 / adjust-01, time, i / immediate)
(a3 / and, op, r / revise-01)
(a3 / and, op, s2 / shell)
(p / promise-01, ARG0, i2 / itinerary)
(p / promise-01, ARG1, a / and)
(r / revise-01, ARG1, i2 / itinerary)
(s / settle-03, ARG1, t / tie)

Decoded in 66,533 microseconds
Sentence: today promises to be hectic in the markets

Spans:
Span 7-8:  markets => market
Span 1-2:  promises => promise-01
Span 0-1:  today => today

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),markets,market,false), Span(1,2,List(1),promises,promise-01,false), Span(0,1,List(2),today,today,false)),Map(2 -> today, 1 -> promise-01, 0 -> market),Map(t -> today, m -> market, p -> promise-01))),[Ljava.lang.String;@51e2510c,Annotation([Ljava.lang.String;@613714d3,[Ljava.lang.String;@67385a81,[Ljava.lang.String;@24be0018),Annotation([Ljava.lang.String;@35f83a80,[Ljava.lang.String;@3bc8c52e,[Ledu.cmu.lti.nlp.amr.Dependency;@7a096dab),Annotation([Ljava.lang.String;@ff3425,[Ljava.lang.String;@72b869a5,[Ljava.lang.String;@29200a7a),Annotation([Ljava.lang.String;@768fe4ad,[Ljava.lang.String;@60ee56aa,[Ledu.cmu.lti.nlp.amr.Entity;@3f7be49d))
AMR:
(p / promise-01, ARG0, t / today)
(p / promise-01, ARG1, m / market)

Decoded in 6,782 microseconds
Sentence: in vain did she promise to choose a suitable play an educational play shakespeare

Spans:
Span 6-7:  choose => choose-01
Span 11-12:  educational => educate-01
Span 12-13:  play => play-01
Span 9-10:  play => play-01
Span 4-5:  promise => promise-01
Span 3-4:  she => she
Span 8-9:  suitable => suit-01
Span 1-2:  vain => vain

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),play,play-01,false), Span(11,12,List(1),educational,educate-01,false), Span(9,10,List(2),play,play-01,false), Span(8,9,List(3),suitable,suit-01,false), Span(6,7,List(4),choose,choose-01,false), Span(4,5,List(5),promise,promise-01,false), Span(3,4,List(6),she,she,false), Span(1,2,List(7),vain,vain,false)),Map(2 -> play-01, 5 -> promise-01, 7 -> vain, 1 -> educate-01, 4 -> choose-01, 6 -> she, 0 -> play-01, 3 -> suit-01),Map(e -> educate-01, s2 -> she, p2 -> play-01, s -> suit-01, v -> vain, p -> play-01, c -> choose-01, p3 -> promise-01))),[Ljava.lang.String;@5ede1ffa,Annotation([Ljava.lang.String;@490586be,[Ljava.lang.String;@9d14966,[Ljava.lang.String;@b29cc93),Annotation([Ljava.lang.String;@6535cc9e,[Ljava.lang.String;@2f0cccfb,[Ledu.cmu.lti.nlp.amr.Dependency;@71658ade),Annotation([Ljava.lang.String;@41802efb,[Ljava.lang.String;@468c8255,[Ljava.lang.String;@32c0bea2),Annotation([Ljava.lang.String;@c2397b6,[Ljava.lang.String;@74bd33f3,[Ledu.cmu.lti.nlp.amr.Entity;@319dd265))
AMR:
(c / choose-01, ARG0, s2 / she)
(c / choose-01, ARG1, p2 / play-01)
(e / educate-01, ARG0, p2 / play-01)
(e / educate-01, ARG1, p / play-01)
(p3 / promise-01, ARG1, v / vain)
(p3 / promise-01, ARG2, c / choose-01)
(s / suit-01, ARG2, p2 / play-01)

Decoded in 60,317 microseconds
Sentence: when a big tree falls the earth beneath it shakes he said though earlier this year he promised that everybody will be brought to book through the legal system

Spans:
Span 7-8:  beneath => beneath
Span 2-3:  big => big
Span 24-25:  book => book
Span 13-14:  earlier => early
Span 6-7:  earth => earth
Span 19-20:  everybody => everybody
Span 16-17:  he => he
Span 10-11:  he => he
Span 8-9:  it => it
Span 27-28:  legal => legal
Span 17-18:  promised => promise-01
Span 11-12:  said => say-01
Span 28-29:  system => system
Span 14-15:  this => this
Span 3-4:  tree => tree
Span 15-16:  year => year

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),system,system,false), Span(27,28,List(1),legal,legal,false), Span(24,25,List(2),book,book,false), Span(19,20,List(3),everybody,everybody,false), Span(17,18,List(4),promised,promise-01,false), Span(16,17,List(5),he,he,false), Span(15,16,List(6),year,year,false), Span(14,15,List(7),this,this,false), Span(13,14,List(8),earlier,early,false), Span(11,12,List(9),said,say-01,false), Span(10,11,List(10),he,he,false), Span(8,9,List(11),it,it,false), Span(7,8,List(12),beneath,beneath,false), Span(6,7,List(13),earth,earth,false), Span(3,4,List(14),tree,tree,false), Span(2,3,List(15),big,big,false)),Map(2 -> book, 5 -> he, 12 -> beneath, 15 -> big, 8 -> early, 7 -> this, 1 -> legal, 4 -> promise-01, 11 -> it, 14 -> tree, 6 -> year, 0 -> system, 9 -> say-01, 3 -> everybody, 10 -> he, 13 -> earth),Map(e -> everybody, b3 -> big, h -> he, s2 -> say-01, h2 -> he, b -> book, t -> this, b2 -> beneath, e2 -> early, s -> system, p -> promise-01, y -> year, t2 -> tree, i -> it, l -> legal, e3 -> earth))),[Ljava.lang.String;@2e32b816,Annotation([Ljava.lang.String;@3d3c40c,[Ljava.lang.String;@43ebf1ca,[Ljava.lang.String;@374f279c),Annotation([Ljava.lang.String;@2db18f22,[Ljava.lang.String;@642c189d,[Ledu.cmu.lti.nlp.amr.Dependency;@b041ecc),Annotation([Ljava.lang.String;@3b81e8ba,[Ljava.lang.String;@4dd629db,[Ljava.lang.String;@275610c9),Annotation([Ljava.lang.String;@368104c,[Ljava.lang.String;@2505ef53,[Ledu.cmu.lti.nlp.amr.Entity;@28a34522))
AMR:
(b / book, location, s / system)
(b2 / beneath, op, i / it)
(e2 / early, mod, t / this)
(l / legal, op, s2 / say-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, e / everybody)
(p / promise-01, time, e2 / early)
(p / promise-01, time, y / year)
(s / system, mod, l / legal)
(s2 / say-01, ARG0, h2 / he)
(s2 / say-01, ARG1, i / it)
(s2 / say-01, ARG2, t2 / tree)
(s2 / say-01, domain, e3 / earth)
(s2 / say-01, time, p / promise-01)
(t2 / tree, mod, b3 / big)

Decoded in 502,876 microseconds
Sentence: when we got married i promised id give you everything you want and so i will

Spans:
Span 12-13:  and => and
Span 9-10:  everything => everything
Span 7-8:  give => give-01
Span 14-15:  i => i
Span 4-5:  i => i
Span 6-7:  id => id
Span 3-4:  married => marry-01
Span 5-6:  promised => promise-01
Span 13-14:  so => so
Span 11-12:  want => want-01
Span 1-2:  we => we
Span 10-11:  you => you
Span 8-9:  you => you

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),i,i,false), Span(13,14,List(1),so,so,false), Span(12,13,List(2),and,and,false), Span(11,12,List(3),want,want-01,false), Span(10,11,List(4),you,you,false), Span(9,10,List(5),everything,everything,false), Span(8,9,List(6),you,you,false), Span(7,8,List(7),give,give-01,false), Span(6,7,List(8),id,id,false), Span(5,6,List(9),promised,promise-01,false), Span(4,5,List(10),i,i,false), Span(3,4,List(11),married,marry-01,false), Span(1,2,List(12),we,we,false)),Map(2 -> and, 5 -> everything, 12 -> we, 8 -> id, 7 -> give-01, 1 -> so, 4 -> you, 11 -> marry-01, 6 -> you, 0 -> i, 9 -> promise-01, 3 -> want-01, 10 -> i),Map(e -> everything, w -> want-01, s -> so, m -> marry-01, i3 -> i, y -> you, g -> give-01, p -> promise-01, a -> and, i2 -> id, w2 -> we, i -> i, y2 -> you))),[Ljava.lang.String;@770fd005,Annotation([Ljava.lang.String;@2f223554,[Ljava.lang.String;@6edb35f8,[Ljava.lang.String;@79b465a3),Annotation([Ljava.lang.String;@327ceec1,[Ljava.lang.String;@281edacc,[Ledu.cmu.lti.nlp.amr.Dependency;@1ae9ba8),Annotation([Ljava.lang.String;@6e6d3374,[Ljava.lang.String;@434d3d4f,[Ljava.lang.String;@3f4300e),Annotation([Ljava.lang.String;@147ee929,[Ljava.lang.String;@17fd8d42,[Ledu.cmu.lti.nlp.amr.Entity;@744f45c))
AMR:
(a / and, op, w / want-01)
(g / give-01, ARG0, i2 / id)
(g / give-01, ARG1, e / everything)
(g / give-01, ARG2, y2 / you)
(i / i, mod, s / so)
(m / marry-01, ARG0, w2 / we)
(m / marry-01, ARG1, i3 / i)
(p / promise-01, ARG0, i3 / i)
(p / promise-01, ARG1, g / give-01)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, e / everything)
(w / want-01, ARG2, s / so)

Decoded in 273,821 microseconds
Sentence: we know that vocal soundum sixteen schools at least are taking part at the cotswold wildlife park vocal soundum we know of at least ten at the walk at broughton park vocal soundum weve got vocal soundum students from polytechnics brownies guides headington slimmers magazine club have registered a team the advisory centre for multicultural education oxford city courier newspaper are promising to send teams

Spans:
Span 51-52:  advisory => advise-01
Span 57-58:  city => city
Span 45-46:  club => club
Span 55-56:  education => educate-01
Span 41-42:  guides => guide-01
Span 20-21:  know => know-01
Span 1-2:  know => know-01
Span 44-45:  magazine => magazine
Span 54-55:  multicultural => multicultural
Span 59-60:  newspaper => newspaper
Span 30-31:  park => park
Span 16-17:  park => park
Span 61-62:  promising => promise-01
Span 47-48:  registered => register-02
Span 6-7:  schools => school
Span 63-64:  send => send-01
Span 37-38:  students => (person :ARG0-of study-01)
Span 49-50:  team => team
Span 64-65:  teams => team
Span 35-36:  vocal => vocal
Span 31-32:  vocal => vocal
Span 17-18:  vocal => vocal
Span 3-4:  vocal => vocal
Span 27-28:  walk => walk-01
Span 19-20:  we => we
Span 0-1:  we => we
Span 15-16:  wildlife => wildlife

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(64,65,List(0),teams,team,false), Span(63,64,List(1),send,send-01,false), Span(61,62,List(2),promising,promise-01,false), Span(59,60,List(3),newspaper,newspaper,false), Span(57,58,List(4),city,city,false), Span(55,56,List(5),education,educate-01,false), Span(54,55,List(6),multicultural,multicultural,false), Span(51,52,List(7),advisory,advise-01,false), Span(49,50,List(8),team,team,false), Span(47,48,List(9),registered,register-02,false), Span(45,46,List(10),club,club,false), Span(44,45,List(11),magazine,magazine,false), Span(41,42,List(12),guides,guide-01,false), Span(37,38,List(14, 13),students,(person :ARG0-of study-01),false), Span(35,36,List(15),vocal,vocal,false), Span(31,32,List(16),vocal,vocal,false), Span(30,31,List(17),park,park,false), Span(27,28,List(18),walk,walk-01,false), Span(20,21,List(19),know,know-01,false), Span(19,20,List(20),we,we,false), Span(17,18,List(21),vocal,vocal,false), Span(16,17,List(22),park,park,false), Span(15,16,List(23),wildlife,wildlife,false), Span(6,7,List(24),schools,school,false), Span(3,4,List(25),vocal,vocal,false), Span(1,2,List(26),know,know-01,false), Span(0,1,List(27),we,we,false)),Map(2 -> promise-01, 5 -> educate-01, 27 -> we, 12 -> guide-01, 8 -> team, 15 -> vocal, 21 -> vocal, 18 -> walk-01, 24 -> school, 7 -> advise-01, 1 -> send-01, 17 -> park, 23 -> wildlife, 26 -> know-01, 4 -> city, 11 -> magazine, 14 -> study-01, 20 -> we, 6 -> multicultural, 9 -> register-02, 0 -> team, 22 -> park, 16 -> vocal, 19 -> know-01, 10 -> club, 3 -> newspaper, 25 -> vocal, 13 -> person),Map(e -> educate-01, n -> newspaper, w -> walk-01, k2 -> know-01, v2 -> vocal, s2 -> study-01, t -> team, k -> know-01, m2 -> magazine, v4 -> vocal, p2 -> person, w3 -> wildlife, s -> send-01, v -> vocal, m -> multicultural, g -> guide-01, p -> promise-01, a -> advise-01, p4 -> park, v3 -> vocal, t2 -> team, w2 -> we, r -> register-02, c -> city, s3 -> school, p3 -> park, c2 -> club, w4 -> we))),[Ljava.lang.String;@d25ee04,Annotation([Ljava.lang.String;@352d4f5a,[Ljava.lang.String;@31b4b8fc,[Ljava.lang.String;@4fdcc1e2),Annotation([Ljava.lang.String;@263d0564,[Ljava.lang.String;@702cfbd8,[Ledu.cmu.lti.nlp.amr.Dependency;@194a5b71),Annotation([Ljava.lang.String;@60b964af,[Ljava.lang.String;@2b814ec5,[Ljava.lang.String;@365a7dd3),Annotation([Ljava.lang.String;@6efac385,[Ljava.lang.String;@113a89af,[Ledu.cmu.lti.nlp.amr.Entity;@1a2548ff))
AMR:
(a / advise-01, ARG0, t2 / team)
(a / advise-01, ARG1, p3 / park)
(c2 / club, poss, p2 / person)
(e / educate-01, ARG1, n / newspaper)
(e / educate-01, mod, m / multicultural)
(g / guide-01, ARG0, p2 / person)
(g / guide-01, ARG1, v3 / vocal)
(g / guide-01, mod, v2 / vocal)
(k / know-01, ARG0, w2 / we)
(k / know-01, ARG1, w / walk-01)
(k2 / know-01, ARG0, w4 / we)
(k2 / know-01, ARG1, s3 / school)
(p / promise-01, ARG0, c / city)
(p / promise-01, ARG1, n / newspaper)
(p / promise-01, ARG2, s / send-01)
(p2 / person, mod, v / vocal)
(p4 / park, domain, p2 / person)
(p4 / park, mod, w3 / wildlife)
(r / register-02, ARG0, c2 / club)
(r / register-02, ARG1, t2 / team)
(s / send-01, ARG1, t / team)
(s2 / study-01, ARG0, p2 / person)
(s3 / school, mod, v4 / vocal)
(t / team, mod, g / guide-01)
(t / team, mod, m2 / magazine)
(w / walk-01, ARG0, s3 / school)
(w / walk-01, ARG1, t2 / team)

Decoded in 1,383,803 microseconds
Sentence: kitchener went for a walk with joffre and promised not to oppose an offensive in the autumn if hamiltons further attack at gallipoli were allowed to take place first

NER Entity: (country :name (name :op "gallipoli"))
Spans:
Span 24-25:  allowed => allow-01
Span 7-8:  and => and
Span 20-21:  attack => attack-01
Span 19-20:  further => further
Span 13-14:  offensive => offensive
Span 11-12:  oppose => oppose-01
Span 27-28:  place => place
Span 8-9:  promised => promise-01
Span 4-5:  walk => walk-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),place,place,false), Span(24,25,List(1),allowed,allow-01,false), Span(20,21,List(2),attack,attack-01,false), Span(19,20,List(3),further,further,false), Span(13,14,List(4),offensive,offensive,false), Span(11,12,List(5),oppose,oppose-01,false), Span(8,9,List(6),promised,promise-01,false), Span(7,8,List(7),and,and,false), Span(4,5,List(8),walk,walk-01,false)),Map(2 -> attack-01, 5 -> oppose-01, 8 -> walk-01, 7 -> and, 1 -> allow-01, 4 -> offensive, 6 -> promise-01, 0 -> place, 3 -> further),Map(w -> walk-01, p2 -> promise-01, a3 -> and, p -> place, a -> allow-01, o2 -> oppose-01, a2 -> attack-01, o -> offensive, f -> further))),[Ljava.lang.String;@5db6ac2,Annotation([Ljava.lang.String;@83de98f,[Ljava.lang.String;@18b0af83,[Ljava.lang.String;@77d2ce1e),Annotation([Ljava.lang.String;@30da5107,[Ljava.lang.String;@4cfdbb9f,[Ledu.cmu.lti.nlp.amr.Dependency;@2628eb36),Annotation([Ljava.lang.String;@486a39cc,[Ljava.lang.String;@35f8a538,[Ljava.lang.String;@57271b36),Annotation([Ljava.lang.String;@486ba2ed,[Ljava.lang.String;@12959ac0,[Ledu.cmu.lti.nlp.amr.Entity;@1be2bcc8))
AMR:
(a / allow-01, ARG1, p / place)
(a / allow-01, ARG2, a2 / attack-01)
(a2 / attack-01, mod, f / further)
(a3 / and, op, p2 / promise-01)
(o2 / oppose-01, ARG1, o / offensive)
(o2 / oppose-01, condition, a / allow-01)
(p2 / promise-01, ARG2, o2 / oppose-01)
(w / walk-01, ARG0, a3 / and)

Decoded in 54,488 microseconds
Sentence: an urgent inquiry into allegations that some credit reference agencies are supplying dangerous and misleading information to lenders was promised by a government minister in the commons yesterday

Spans:
Span 9-10:  agencies => agency
Span 4-5:  allegations => allege-01
Span 13-14:  and => and
Span 26-27:  commons => (government-organization :name (name :op "Commons"))
Span 7-8:  credit => credit-02
Span 12-13:  dangerous => dangerous
Span 15-16:  information => information
Span 2-3:  inquiry => inquire-01
Span 17-18:  lenders => lend-01
Span 23-24:  minister => (have-org-role-91 :ARG2 minister)
Span 14-15:  misleading => mislead-02
Span 19-20:  promised => promise-01
Span 8-9:  reference => reference-01
Span 6-7:  some => some
Span 11-12:  supplying => supply-01
Span 1-2:  urgent => urgent
Span 27-28:  yesterday => yesterday

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),yesterday,yesterday,false), Span(26,27,List(3, 2, 1),commons,(government-organization :name (name :op "Commons")),false), Span(23,24,List(5, 4),minister,(have-org-role-91 :ARG2 minister),false), Span(19,20,List(6),promised,promise-01,false), Span(17,18,List(7),lenders,lend-01,false), Span(15,16,List(8),information,information,false), Span(14,15,List(9),misleading,mislead-02,false), Span(13,14,List(10),and,and,false), Span(12,13,List(11),dangerous,dangerous,false), Span(11,12,List(12),supplying,supply-01,false), Span(9,10,List(13),agencies,agency,false), Span(8,9,List(14),reference,reference-01,false), Span(7,8,List(15),credit,credit-02,false), Span(6,7,List(16),some,some,false), Span(4,5,List(17),allegations,allege-01,false), Span(2,3,List(18),inquiry,inquire-01,false), Span(1,2,List(19),urgent,urgent,false)),Map(2 -> name, 5 -> minister, 12 -> supply-01, 15 -> credit-02, 8 -> information, 18 -> inquire-01, 7 -> lend-01, 17 -> allege-01, 1 -> government-organization, 4 -> have-org-role-91, 11 -> dangerous, 14 -> reference-01, 6 -> promise-01, 0 -> yesterday, 9 -> mislead-02, 16 -> some, 19 -> urgent, 3 -> "Commons", 10 -> and, 13 -> agency),Map(n -> name, h -> have-org-role-91, s2 -> some, m2 -> mislead-02, a3 -> allege-01, s -> supply-01, m -> minister, d -> dangerous, y -> yesterday, g -> government-organization, p -> promise-01, a -> and, i2 -> inquire-01, r -> reference-01, i -> information, a2 -> agency, c -> credit-02, u -> urgent, l -> lend-01))),[Ljava.lang.String;@42d7fcc5,Annotation([Ljava.lang.String;@72140bcb,[Ljava.lang.String;@21276f0,[Ljava.lang.String;@a3e87a0),Annotation([Ljava.lang.String;@f3a1ea1,[Ljava.lang.String;@30b0e3d6,[Ledu.cmu.lti.nlp.amr.Dependency;@2d3e0f93),Annotation([Ljava.lang.String;@45709319,[Ljava.lang.String;@61c971ec,[Ljava.lang.String;@70566f1b),Annotation([Ljava.lang.String;@3a988f3b,[Ljava.lang.String;@75e3888a,[Ledu.cmu.lti.nlp.amr.Entity;@2d19587d))
AMR:
(a / and, op, d / dangerous)
(a3 / allege-01, ARG1, s / supply-01)
(c / credit-02, ARG1, a2 / agency)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, m / minister)
(h / have-org-role-91, time, y / yesterday)
(i2 / inquire-01, ARG1, a3 / allege-01)
(i2 / inquire-01, mod, u / urgent)
(l / lend-01, ARG1, s2 / some)
(m2 / mislead-02, ARG0, a2 / agency)
(m2 / mislead-02, ARG1, i / information)
(n / name, op, "Commons")
(p / promise-01, ARG0, i / information)
(p / promise-01, ARG1, l / lend-01)
(p / promise-01, time, y / yesterday)
(r / reference-01, ARG1, a2 / agency)
(s / supply-01, ARG0, a2 / agency)
(s / supply-01, ARG1, a / and)

Decoded in 305,436 microseconds
Sentence: given that the company still has to deliver the goods promised in its restructuring programme and continues to face the prospect of another bid from sir james this could prove beneficial

Spans:
Span 15-16:  and => and
Span 22-23:  another => another
Span 30-31:  beneficial => benefit-01
Span 23-24:  bid => bid-01
Span 3-4:  company => company
Span 16-17:  continues => continue-01
Span 28-29:  could => possible
Span 7-8:  deliver => deliver-01
Span 18-19:  face => face-01
Span 0-1:  given => give-01
Span 9-10:  goods => good
Span 14-15:  programme => program
Span 10-11:  promised => promise-01
Span 20-21:  prospect => prospect
Span 29-30:  prove => prove-01
Span 13-14:  restructuring => restructure-01
Span 4-5:  still => still
Span 27-28:  this => this

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),beneficial,benefit-01,false), Span(29,30,List(1),prove,prove-01,false), Span(28,29,List(2),could,possible,false), Span(27,28,List(3),this,this,false), Span(23,24,List(4),bid,bid-01,false), Span(22,23,List(5),another,another,false), Span(20,21,List(6),prospect,prospect,false), Span(18,19,List(7),face,face-01,false), Span(16,17,List(8),continues,continue-01,false), Span(15,16,List(9),and,and,false), Span(14,15,List(10),programme,program,false), Span(13,14,List(11),restructuring,restructure-01,false), Span(10,11,List(12),promised,promise-01,false), Span(9,10,List(13),goods,good,false), Span(7,8,List(14),deliver,deliver-01,false), Span(4,5,List(15),still,still,false), Span(3,4,List(16),company,company,false), Span(0,1,List(17),given,give-01,false)),Map(2 -> possible, 5 -> another, 12 -> promise-01, 15 -> still, 8 -> continue-01, 7 -> face-01, 17 -> give-01, 1 -> prove-01, 4 -> bid-01, 11 -> restructure-01, 14 -> deliver-01, 6 -> prospect, 0 -> benefit-01, 9 -> and, 16 -> company, 3 -> this, 10 -> program, 13 -> good),Map(p5 -> promise-01, b -> benefit-01, t -> this, b2 -> bid-01, p2 -> possible, s -> still, d -> deliver-01, g2 -> give-01, g -> good, p -> prove-01, a -> another, p4 -> program, a2 -> and, r -> restructure-01, c -> continue-01, f -> face-01, p3 -> prospect, c2 -> company))),[Ljava.lang.String;@5b008dac,Annotation([Ljava.lang.String;@15545e1,[Ljava.lang.String;@55eb776,[Ljava.lang.String;@d5ea6bb),Annotation([Ljava.lang.String;@411445d8,[Ljava.lang.String;@19f58949,[Ledu.cmu.lti.nlp.amr.Dependency;@470824ef),Annotation([Ljava.lang.String;@67b0eb57,[Ljava.lang.String;@102ad1f0,[Ljava.lang.String;@6b3cebda),Annotation([Ljava.lang.String;@6ca06c36,[Ljava.lang.String;@182084f1,[Ledu.cmu.lti.nlp.amr.Entity;@7ef7f696))
AMR:
(a2 / and, op, c / continue-01)
(a2 / and, op, g2 / give-01)
(a2 / and, op, p5 / promise-01)
(b / benefit-01, ARG0, a2 / and)
(b / benefit-01, ARG1, t / this)
(b2 / bid-01, mod, a / another)
(c / continue-01, ARG1, s / still)
(d / deliver-01, ARG0, c2 / company)
(d / deliver-01, ARG1, a2 / and)
(f / face-01, ARG0, c2 / company)
(f / face-01, ARG1, p3 / prospect)
(p / prove-01, ARG1, b / benefit-01)
(p / prove-01, mod, p2 / possible)
(p3 / prospect, domain, b2 / bid-01)
(p4 / program, mod, r / restructure-01)
(p5 / promise-01, ARG0, g / good)
(p5 / promise-01, ARG2, p4 / program)

Decoded in 348,169 microseconds
Sentence: the next sunday preaching in the town bulley promised that it would rise like a phoenix from its ashes

Spans:
Span 10-11:  it => it
Span 1-2:  next => next
Span 3-4:  preaching => preach-01
Span 8-9:  promised => promise-01
Span 12-13:  rise => rise-01
Span 2-3:  sunday => sunday
Span 6-7:  town => town

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),rise,rise-01,false), Span(10,11,List(1),it,it,false), Span(8,9,List(2),promised,promise-01,false), Span(6,7,List(3),town,town,false), Span(3,4,List(4),preaching,preach-01,false), Span(2,3,List(5),sunday,sunday,false), Span(1,2,List(6),next,next,false)),Map(2 -> promise-01, 5 -> sunday, 1 -> it, 4 -> preach-01, 6 -> next, 0 -> rise-01, 3 -> town),Map(n -> next, t -> town, p2 -> preach-01, s -> sunday, p -> promise-01, i -> it, r -> rise-01))),[Ljava.lang.String;@47649f10,Annotation([Ljava.lang.String;@1f06f80e,[Ljava.lang.String;@2876f0c,[Ljava.lang.String;@98b7e20),Annotation([Ljava.lang.String;@25056bc5,[Ljava.lang.String;@6e66580,[Ledu.cmu.lti.nlp.amr.Dependency;@11ba0a),Annotation([Ljava.lang.String;@bcce68f,[Ljava.lang.String;@3934bc56,[Ljava.lang.String;@3538cf71),Annotation([Ljava.lang.String;@24bb1f03,[Ljava.lang.String;@78f110cb,[Ledu.cmu.lti.nlp.amr.Entity;@1a85bd75))
AMR:
(p / promise-01, ARG0, p2 / preach-01)
(p / promise-01, ARG1, r / rise-01)
(p2 / preach-01, ARG1, s / sunday)
(p2 / preach-01, mod, n / next)
(p2 / preach-01, time, t / town)
(r / rise-01, ARG0, i / it)

Decoded in 105,199 microseconds
Sentence: like all these technical innovations that promise to improve the profitability of an enterprise if you dont take advantage of them you get left behind in what is a competitive world

Spans:
Span 18-19:  advantage => advantage
Span 1-2:  all => all
Span 24-25:  behind => behind
Span 29-30:  competitive => compete-01
Span 13-14:  enterprise => enterprise
Span 8-9:  improve => improve-01
Span 4-5:  innovations => innovate-01
Span 6-7:  promise => promise-01
Span 3-4:  technical => technical
Span 30-31:  world => world
Span 21-22:  you => you
Span 15-16:  you => you

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),world,world,false), Span(29,30,List(1),competitive,compete-01,false), Span(24,25,List(2),behind,behind,false), Span(21,22,List(3),you,you,false), Span(18,19,List(4),advantage,advantage,false), Span(15,16,List(5),you,you,false), Span(13,14,List(6),enterprise,enterprise,false), Span(8,9,List(7),improve,improve-01,false), Span(6,7,List(8),promise,promise-01,false), Span(4,5,List(9),innovations,innovate-01,false), Span(3,4,List(10),technical,technical,false), Span(1,2,List(11),all,all,false)),Map(2 -> behind, 5 -> you, 8 -> promise-01, 7 -> improve-01, 1 -> compete-01, 11 -> all, 4 -> advantage, 6 -> enterprise, 9 -> innovate-01, 0 -> world, 10 -> technical, 3 -> you),Map(e -> enterprise, w -> world, t -> technical, b -> behind, p -> promise-01, y -> you, a -> advantage, i2 -> innovate-01, a2 -> all, i -> improve-01, c -> compete-01, y2 -> you))),[Ljava.lang.String;@425959ed,Annotation([Ljava.lang.String;@781ef8a2,[Ljava.lang.String;@3955914a,[Ljava.lang.String;@20b5aeae),Annotation([Ljava.lang.String;@77df3248,[Ljava.lang.String;@5e5e5273,[Ledu.cmu.lti.nlp.amr.Dependency;@2772c6c),Annotation([Ljava.lang.String;@5e0567b7,[Ljava.lang.String;@34dc4f9a,[Ljava.lang.String;@6bee2292),Annotation([Ljava.lang.String;@5f1fd699,[Ljava.lang.String;@23420799,[Ledu.cmu.lti.nlp.amr.Entity;@4400dfe4))
AMR:
(a / advantage, poss, y / you)
(a / advantage, poss, y2 / you)
(c / compete-01, ARG0, e / enterprise)
(c / compete-01, ARG1, w / world)
(i / improve-01, ARG0, y2 / you)
(i / improve-01, ARG1, e / enterprise)
(i2 / innovate-01, ARG1, b / behind)
(i2 / innovate-01, mod, t / technical)
(i2 / innovate-01, quant, a2 / all)
(p / promise-01, ARG1, i2 / innovate-01)
(p / promise-01, ARG2, i / improve-01)

Decoded in 138,177 microseconds
Sentence: to be sure he specifically repudiated monnets notion of the united states of europe promising there is no plot against the nation state no one is being asked to renounce a legitimate patriotism

NER Entity: (country :name (name :op "united" :op "states"))
Spans:
Span 27-28:  asked => ask-02
Span 13-14:  europe => (continent :name (name :op "Europe"))
Span 3-4:  he => he
Span 31-32:  legitimate => legitimate
Span 21-22:  nation => nation
Span 23-24:  no => -
Span 17-18:  no => -
Span 7-8:  notion => notion
Span 32-33:  patriotism => patriotism
Span 18-19:  plot => plot-01
Span 14-15:  promising => promise-01
Span 29-30:  renounce => renounce-01
Span 4-5:  specifically => specific
Span 22-23:  state => state
Span 10-12:  united states => (country :name (name :op "united" :op "states"))

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),patriotism,patriotism,false), Span(31,32,List(1),legitimate,legitimate,false), Span(29,30,List(2),renounce,renounce-01,false), Span(27,28,List(3),asked,ask-02,false), Span(23,24,List(4),no,-,false), Span(22,23,List(5),state,state,false), Span(21,22,List(6),nation,nation,false), Span(18,19,List(7),plot,plot-01,false), Span(17,18,List(8),no,-,false), Span(14,15,List(9),promising,promise-01,false), Span(13,14,List(12, 11, 10),europe,(continent :name (name :op "Europe")),false), Span(10,12,List(16, 15, 14, 13),united states,(country :name (name :op "united" :op "states")),false), Span(7,8,List(17),notion,notion,false), Span(4,5,List(18),specifically,specific,false), Span(3,4,List(19),he,he,false)),Map(2 -> renounce-01, 5 -> state, 12 -> "Europe", 15 -> "united", 8 -> -, 18 -> specific, 7 -> plot-01, 17 -> notion, 1 -> legitimate, 4 -> -, 11 -> name, 14 -> name, 6 -> nation, 0 -> patriotism, 9 -> promise-01, 16 -> "states", 19 -> he, 3 -> ask-02, 10 -> continent, 13 -> country),Map(n -> nation, h -> he, s2 -> specific, p2 -> plot-01, n4 -> notion, s -> state, p -> patriotism, a -> ask-02, n3 -> name, r -> renounce-01, -2 -> -, - -> -, c -> continent, l -> legitimate, p3 -> promise-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@29165a67,Annotation([Ljava.lang.String;@7a893543,[Ljava.lang.String;@4608008e,[Ljava.lang.String;@375c8e8d),Annotation([Ljava.lang.String;@1d92e760,[Ljava.lang.String;@17945ecb,[Ledu.cmu.lti.nlp.amr.Dependency;@ddb6d85),Annotation([Ljava.lang.String;@40f33dde,[Ljava.lang.String;@2162db22,[Ljava.lang.String;@6120a64d),Annotation([Ljava.lang.String;@26863b0c,[Ljava.lang.String;@368ea496,[Ledu.cmu.lti.nlp.amr.Entity;@4ed78fd5))
AMR:
(a / ask-02, ARG0, p2 / plot-01)
(a / ask-02, ARG1, r / renounce-01)
(a / ask-02, polarity, - / -)
(c / continent, name, n2 / name)
(c2 / country, name, n3 / name)
(n2 / name, op, "Europe")
(n3 / name, op, "states")
(n3 / name, op, "united")
(n4 / notion, location, c2 / country)
(n4 / notion, poss, h / he)
(p / patriotism, mod, l / legitimate)
(p2 / plot-01, ARG0, s2 / specific)
(p2 / plot-01, ARG1, s / state)
(p2 / plot-01, polarity, -2 / -)
(p3 / promise-01, ARG1, c / continent)
(p3 / promise-01, ARG2, p2 / plot-01)
(r / renounce-01, ARG0, c2 / country)
(r / renounce-01, ARG1, p / patriotism)
(s / state, mod, n / nation)

Decoded in 907,085 microseconds
Sentence: yesterdays newspaper columns on the election were devoted to mr dinkins promises to defend jewish interests in the same way that mayor ed koch did for the past 12 years

Spans:
Span 28-29:  12 => 12
Span 2-3:  columns => column
Span 13-14:  defend => defend-01
Span 7-8:  devoted => devote-01
Span 5-6:  election => elect-01
Span 15-16:  interests => interest
Span 14-15:  jewish => (ethnic-group :name (name :op "Jew"))
Span 21-22:  mayor => (have-org-role-91 :ARG2 mayor)
Span 1-2:  newspaper => newspaper
Span 27-28:  past => past
Span 11-12:  promises => promise-01
Span 18-19:  same => same-41
Span 19-20:  way => way
Span 29-30:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(1, 0),years,(temporal-quantity :unit year),false), Span(28,29,List(2),12,12,false), Span(27,28,List(3),past,past,false), Span(21,22,List(5, 4),mayor,(have-org-role-91 :ARG2 mayor),false), Span(19,20,List(6),way,way,false), Span(18,19,List(7),same,same-41,false), Span(15,16,List(8),interests,interest,false), Span(14,15,List(11, 10, 9),jewish,(ethnic-group :name (name :op "Jew")),false), Span(13,14,List(12),defend,defend-01,false), Span(11,12,List(13),promises,promise-01,false), Span(7,8,List(14),devoted,devote-01,false), Span(5,6,List(15),election,elect-01,false), Span(2,3,List(16),columns,column,false), Span(1,2,List(17),newspaper,newspaper,false)),Map(2 -> 12, 5 -> mayor, 12 -> defend-01, 15 -> elect-01, 8 -> interest, 7 -> same-41, 17 -> newspaper, 1 -> year, 4 -> have-org-role-91, 11 -> "Jew", 14 -> devote-01, 6 -> way, 0 -> temporal-quantity, 9 -> ethnic-group, 16 -> column, 3 -> past, 10 -> name, 13 -> promise-01),Map(e -> ethnic-group, w -> way, n -> name, h -> have-org-role-91, t -> temporal-quantity, e2 -> elect-01, p2 -> promise-01, s -> same-41, m -> mayor, d -> defend-01, 1 -> 12, y -> year, p -> past, d2 -> devote-01, i -> interest, c -> column, n2 -> newspaper))),[Ljava.lang.String;@2a241163,Annotation([Ljava.lang.String;@25f19032,[Ljava.lang.String;@1631d614,[Ljava.lang.String;@21ddc66e),Annotation([Ljava.lang.String;@670e7120,[Ljava.lang.String;@652520bb,[Ledu.cmu.lti.nlp.amr.Dependency;@688808dd),Annotation([Ljava.lang.String;@3afe1ac8,[Ljava.lang.String;@905eba,[Ljava.lang.String;@63b05a0),Annotation([Ljava.lang.String;@cee4e92,[Ljava.lang.String;@716859df,[Ledu.cmu.lti.nlp.amr.Entity;@79e479a3))
AMR:
(c / column, mod, n2 / newspaper)
(d / defend-01, ARG0, c / column)
(d / defend-01, ARG1, i / interest)
(d / defend-01, manner, w / way)
(d2 / devote-01, ARG1, c / column)
(e / ethnic-group, name, n / name)
(e2 / elect-01, ARG1, p / past)
(h / have-org-role-91, ARG1, d / defend-01)
(h / have-org-role-91, ARG2, m / mayor)
(i / interest, mod, e / ethnic-group)
(n / name, op, "Jew")
(p / past, op, t / temporal-quantity)
(p2 / promise-01, ARG1, e2 / elect-01)
(p2 / promise-01, ARG2, d / defend-01)
(s / same-41, ARG1, w / way)
(t / temporal-quantity, quant, 1 / 12)
(t / temporal-quantity, unit, y / year)

Decoded in 289,872 microseconds
Sentence: its raising to 15 was often promised and as often postponed

Spans:
Span 3-4:  15 => 15
Span 7-8:  and => and
Span 9-10:  often => often
Span 5-6:  often => often
Span 10-11:  postponed => postpone-01
Span 6-7:  promised => promise-01
Span 1-2:  raising => raise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),postponed,postpone-01,false), Span(9,10,List(1),often,often,false), Span(7,8,List(2),and,and,false), Span(6,7,List(3),promised,promise-01,false), Span(5,6,List(4),often,often,false), Span(3,4,List(5),15,15,false), Span(1,2,List(6),raising,raise-01,false)),Map(2 -> and, 5 -> 15, 1 -> often, 4 -> often, 6 -> raise-01, 0 -> postpone-01, 3 -> promise-01),Map(p2 -> promise-01, 1 -> 15, p -> postpone-01, a -> and, o2 -> often, r -> raise-01, o -> often))),[Ljava.lang.String;@6edfada,Annotation([Ljava.lang.String;@71f001c3,[Ljava.lang.String;@4403e3a5,[Ljava.lang.String;@5b568885),Annotation([Ljava.lang.String;@e1d029c,[Ljava.lang.String;@12965701,[Ledu.cmu.lti.nlp.amr.Dependency;@4c2a0c2f),Annotation([Ljava.lang.String;@5c8608b9,[Ljava.lang.String;@63a6d923,[Ljava.lang.String;@5ef9bbf1),Annotation([Ljava.lang.String;@5da1fbed,[Ljava.lang.String;@35a2b4a1,[Ledu.cmu.lti.nlp.amr.Entity;@4d00d189))
AMR:
(a / and, frequency, o2 / often)
(a / and, op, p / postpone-01)
(a / and, op, p2 / promise-01)
(p / postpone-01, ARG1, r / raise-01)
(p / postpone-01, frequency, o / often)
(r / raise-01, ARG1, 1 / 15)

Decoded in 18,628 microseconds
Sentence: he promised that the government would fight to keep finland

NER Entity: (country :name (name :op "finland"))
Spans:
Span 6-7:  fight => fight-01
Span 0-1:  he => he
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),fight,fight-01,false), Span(1,2,List(1),promised,promise-01,false), Span(0,1,List(2),he,he,false)),Map(2 -> he, 1 -> promise-01, 0 -> fight-01),Map(h -> he, p -> promise-01, f -> fight-01))),[Ljava.lang.String;@70bca0dd,Annotation([Ljava.lang.String;@6fe546fd,[Ljava.lang.String;@3597c56f,[Ljava.lang.String;@7f2315e5),Annotation([Ljava.lang.String;@5872ae98,[Ljava.lang.String;@5124aa85,[Ledu.cmu.lti.nlp.amr.Dependency;@3e372b61),Annotation([Ljava.lang.String;@18010d30,[Ljava.lang.String;@6d08d69f,[Ljava.lang.String;@5f4298a5),Annotation([Ljava.lang.String;@d33a97f,[Ljava.lang.String;@3abcd79e,[Ledu.cmu.lti.nlp.amr.Entity;@43efe432))
AMR:
(f / fight-01, ARG0, h / he)
(p / promise-01, ARG0, h / he)

Decoded in 8,926 microseconds
Sentence: gill promises a friendly informal talk with plenty of time for questions

Spans:
Span 3-4:  friendly => friendly-41
Span 0-1:  gill => (person :name (name :op "Gill"))
Span 4-5:  informal => (formal :polarity -)
Span 7-8:  plenty => plenty
Span 1-2:  promises => promise-01
Span 11-12:  questions => question-01
Span 5-6:  talk => talk-01
Span 9-10:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),questions,question-01,false), Span(9,10,List(1),time,time,false), Span(7,8,List(2),plenty,plenty,false), Span(5,6,List(3),talk,talk-01,false), Span(4,5,List(5, 4),informal,(formal :polarity -),false), Span(3,4,List(6),friendly,friendly-41,false), Span(1,2,List(7),promises,promise-01,false), Span(0,1,List(10, 9, 8),gill,(person :name (name :op "Gill")),false)),Map(2 -> plenty, 5 -> -, 8 -> person, 7 -> promise-01, 1 -> time, 4 -> formal, 6 -> friendly-41, 9 -> name, 0 -> question-01, 10 -> "Gill", 3 -> talk-01),Map(n -> name, q -> question-01, t -> time, p2 -> promise-01, p -> plenty, t2 -> talk-01, f2 -> friendly-41, f -> formal, p3 -> person))),[Ljava.lang.String;@3a6eb176,Annotation([Ljava.lang.String;@3944d7f2,[Ljava.lang.String;@56bd6e3d,[Ljava.lang.String;@2e909348),Annotation([Ljava.lang.String;@15b573da,[Ljava.lang.String;@3bc8f858,[Ledu.cmu.lti.nlp.amr.Dependency;@7287812),Annotation([Ljava.lang.String;@71e2e969,[Ljava.lang.String;@684a26e8,[Ljava.lang.String;@5c407ed5),Annotation([Ljava.lang.String;@e470144,[Ljava.lang.String;@57a41eae,[Ledu.cmu.lti.nlp.amr.Entity;@57da5e75))
AMR:
(f / formal, polarity, -)
(f2 / friendly-41, ARG1, t2 / talk-01)
(n / name, op, "Gill")
(p2 / promise-01, ARG1, t2 / talk-01)
(p3 / person, name, n / name)
(q / question-01, ARG1, t / time)
(t / time, quant, p / plenty)
(t2 / talk-01, ARG0, p3 / person)
(t2 / talk-01, ARG1, q / question-01)
(t2 / talk-01, manner, f / formal)

Decoded in 29,780 microseconds
Sentence: with much better weather now promised a colourful second week looms

Spans:
Span 1-2:  much => much
Span 4-5:  now => now
Span 5-6:  promised => promise-01
Span 3-4:  weather => weather
Span 9-10:  week => week

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),week,week,false), Span(5,6,List(1),promised,promise-01,false), Span(4,5,List(2),now,now,false), Span(3,4,List(3),weather,weather,false), Span(1,2,List(4),much,much,false)),Map(2 -> now, 1 -> promise-01, 4 -> much, 0 -> week, 3 -> weather),Map(n -> now, w -> week, m -> much, p -> promise-01, w2 -> weather))),[Ljava.lang.String;@416f8062,Annotation([Ljava.lang.String;@7f55c37d,[Ljava.lang.String;@579584da,[Ljava.lang.String;@19453122),Annotation([Ljava.lang.String;@d9cbc24,[Ljava.lang.String;@2d03e677,[Ledu.cmu.lti.nlp.amr.Dependency;@5b0fa5b7),Annotation([Ljava.lang.String;@6048c015,[Ljava.lang.String;@483ad415,[Ljava.lang.String;@e39d3bf),Annotation([Ljava.lang.String;@767ca7e4,[Ljava.lang.String;@71f2a681,[Ledu.cmu.lti.nlp.amr.Entity;@71919998))
AMR:
(p / promise-01, ARG0, w2 / weather)
(p / promise-01, ARG1, w / week)
(p / promise-01, time, n / now)
(w2 / weather, quant, m / much)

Decoded in 12,949 microseconds
Sentence: hrer had always promised them when the sun would shine again

Spans:
Span 10-11:  again => again
Span 2-3:  always => always
Span 3-4:  promised => promise-01
Span 9-10:  shine => shine-01
Span 7-8:  sun => sun

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),again,again,false), Span(9,10,List(1),shine,shine-01,false), Span(7,8,List(2),sun,sun,false), Span(3,4,List(3),promised,promise-01,false), Span(2,3,List(4),always,always,false)),Map(2 -> sun, 1 -> shine-01, 4 -> always, 0 -> again, 3 -> promise-01),Map(s2 -> sun, s -> shine-01, p -> promise-01, a -> again, a2 -> always))),[Ljava.lang.String;@dfb0468,Annotation([Ljava.lang.String;@5ade4f03,[Ljava.lang.String;@39157c90,[Ljava.lang.String;@31a4ef37),Annotation([Ljava.lang.String;@43551d57,[Ljava.lang.String;@8f95d4a,[Ledu.cmu.lti.nlp.amr.Dependency;@2b5ba9e0),Annotation([Ljava.lang.String;@eedc75d,[Ljava.lang.String;@1cbbb253,[Ljava.lang.String;@66b875e1),Annotation([Ljava.lang.String;@58433b76,[Ljava.lang.String;@25f4ed3f,[Ledu.cmu.lti.nlp.amr.Entity;@7303d690))
AMR:
(p / promise-01, condition, s / shine-01)
(p / promise-01, time, a2 / always)
(s / shine-01, ARG0, s2 / sun)
(s / shine-01, mod, a / again)

Decoded in 12,870 microseconds
Sentence: nevertheless the scenario at yearend remains breathtaking vaclav havel as czechoslovak president and alexander dubcek as speaker of parliament the berlin wall breached ceausescu executed and free elections promised everywhere except albania and of course the soviet union

NER Entity: (country :name (name :op "albania"))
NER Entity: (country :name (name :op "soviet"))
Spans:
Span 32-33:  and => and
Span 25-26:  and => and
Span 12-13:  and => and
Span 22-23:  breached => breach-01
Span 27-28:  elections => elect-01
Span 29-30:  everywhere => everywhere
Span 30-31:  except => except-00
Span 24-25:  executed => execute-01
Span 26-27:  free => free-41
Span 18-19:  parliament => (government-organization :name (name :op "Parliament"))
Span 11-12:  president => (have-org-role-91 :ARG2 president)
Span 28-29:  promised => promise-01
Span 5-6:  remains => remain-01
Span 2-3:  scenario => scenario
Span 16-17:  speaker => (person :ARG0-of speak-01)
Span 37-38:  union => union
Span 21-22:  wall => wall

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),union,union,false), Span(32,33,List(1),and,and,false), Span(30,31,List(2),except,except-00,false), Span(29,30,List(3),everywhere,everywhere,false), Span(28,29,List(4),promised,promise-01,false), Span(27,28,List(5),elections,elect-01,false), Span(26,27,List(6),free,free-41,false), Span(25,26,List(7),and,and,false), Span(24,25,List(8),executed,execute-01,false), Span(22,23,List(9),breached,breach-01,false), Span(21,22,List(10),wall,wall,false), Span(18,19,List(13, 12, 11),parliament,(government-organization :name (name :op "Parliament")),false), Span(16,17,List(15, 14),speaker,(person :ARG0-of speak-01),false), Span(12,13,List(16),and,and,false), Span(11,12,List(18, 17),president,(have-org-role-91 :ARG2 president),false), Span(5,6,List(19),remains,remain-01,false), Span(2,3,List(20),scenario,scenario,false)),Map(2 -> except-00, 5 -> elect-01, 12 -> name, 15 -> speak-01, 8 -> execute-01, 18 -> president, 7 -> and, 17 -> have-org-role-91, 1 -> and, 4 -> promise-01, 11 -> government-organization, 14 -> person, 20 -> scenario, 6 -> free-41, 0 -> union, 9 -> breach-01, 16 -> and, 19 -> remain-01, 3 -> everywhere, 10 -> wall, 13 -> "Parliament"),Map(e -> except-00, w -> wall, n -> name, h -> have-org-role-91, s2 -> scenario, b -> breach-01, p2 -> person, e2 -> everywhere, a3 -> and, s -> speak-01, p -> promise-01, g -> government-organization, a -> and, e4 -> execute-01, r -> remain-01, a2 -> and, u -> union, f -> free-41, p3 -> president, e3 -> elect-01))),[Ljava.lang.String;@10ba97c3,Annotation([Ljava.lang.String;@4a418bc9,[Ljava.lang.String;@15405f35,[Ljava.lang.String;@352a9b79),Annotation([Ljava.lang.String;@454034,[Ljava.lang.String;@427a160f,[Ledu.cmu.lti.nlp.amr.Dependency;@5d3e54e1),Annotation([Ljava.lang.String;@2736af9a,[Ljava.lang.String;@7742bb92,[Ljava.lang.String;@3e28ab69),Annotation([Ljava.lang.String;@600d9a60,[Ljava.lang.String;@1d1245e4,[Ledu.cmu.lti.nlp.amr.Entity;@1aaa8aa5))
AMR:
(a / and, op, p / promise-01)
(a / and, op, u / union)
(a2 / and, op, e3 / elect-01)
(a2 / and, op, e4 / execute-01)
(a2 / and, op, p2 / person)
(a3 / and, op, e3 / elect-01)
(b / breach-01, ARG1, w / wall)
(e / except-00, ARG1, a / and)
(e4 / execute-01, ARG1, w / wall)
(f / free-41, ARG1, e3 / elect-01)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, p3 / president)
(n / name, op, "Parliament")
(p / promise-01, ARG0, a2 / and)
(p / promise-01, location, e2 / everywhere)
(r / remain-01, ARG1, a3 / and)
(s / speak-01, ARG0, p2 / person)
(s2 / scenario, poss, a2 / and)

Decoded in 843,694 microseconds
Sentence: tre of the gcse has at the same time been answered in a different way which may in the end prove embarrassing to the des and the sec and may seem to promise yet another shift of power

Spans:
Span 28-29:  and => and
Span 25-26:  and => and
Span 34-35:  another => another
Span 10-11:  answered => answer-01
Span 13-14:  different => differ-02
Span 29-30:  may => (date-entity :month 5)
Span 16-17:  may => (date-entity :month 5)
Span 37-38:  power => power
Span 32-33:  promise => promise-01
Span 20-21:  prove => prove-01
Span 7-8:  same => same-41
Span 30-31:  seem => seem-01
Span 35-36:  shift => shift-01
Span 8-9:  time => time
Span 14-15:  way => way
Span 33-34:  yet => yet

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),power,power,false), Span(35,36,List(1),shift,shift-01,false), Span(34,35,List(2),another,another,false), Span(33,34,List(3),yet,yet,false), Span(32,33,List(4),promise,promise-01,false), Span(30,31,List(5),seem,seem-01,false), Span(29,30,List(7, 6),may,(date-entity :month 5),false), Span(28,29,List(8),and,and,false), Span(25,26,List(9),and,and,false), Span(20,21,List(10),prove,prove-01,false), Span(16,17,List(12, 11),may,(date-entity :month 5),false), Span(14,15,List(13),way,way,false), Span(13,14,List(14),different,differ-02,false), Span(10,11,List(15),answered,answer-01,false), Span(8,9,List(16),time,time,false), Span(7,8,List(17),same,same-41,false)),Map(2 -> another, 5 -> seem-01, 12 -> 5, 15 -> answer-01, 8 -> and, 7 -> 5, 17 -> same-41, 1 -> shift-01, 4 -> promise-01, 11 -> date-entity, 14 -> differ-02, 6 -> date-entity, 0 -> power, 9 -> and, 16 -> time, 3 -> yet, 10 -> prove-01, 13 -> way),Map(w -> way, s2 -> seem-01, 5 -> 5, t -> time, d3 -> differ-02, p2 -> promise-01, a3 -> and, s -> shift-01, d -> date-entity, p -> power, y -> yet, a -> another, d2 -> date-entity, a2 -> and, 52 -> 5, s3 -> same-41, p3 -> prove-01, a4 -> answer-01))),[Ljava.lang.String;@32746450,Annotation([Ljava.lang.String;@7765da10,[Ljava.lang.String;@3fcf8dad,[Ljava.lang.String;@535e7995),Annotation([Ljava.lang.String;@5f804ff5,[Ljava.lang.String;@61018ece,[Ledu.cmu.lti.nlp.amr.Dependency;@2d46a823),Annotation([Ljava.lang.String;@79c8a90d,[Ljava.lang.String;@64d2d2f1,[Ljava.lang.String;@4d16ffed),Annotation([Ljava.lang.String;@20fc4825,[Ljava.lang.String;@12e4860e,[Ledu.cmu.lti.nlp.amr.Entity;@591d0ad2))
AMR:
(a2 / and, op, a3 / and)
(a2 / and, op, p2 / promise-01)
(a2 / and, op, p3 / prove-01)
(a2 / and, op, s2 / seem-01)
(a4 / answer-01, ARG1, w / way)
(a4 / answer-01, time, t / time)
(d / date-entity, month, 5 / 5)
(d2 / date-entity, month, 52 / 5)
(d3 / differ-02, ARG1, w / way)
(p2 / promise-01, ARG0, w / way)
(p2 / promise-01, ARG1, s / shift-01)
(p2 / promise-01, time, y / yet)
(s / shift-01, ARG1, p / power)
(s / shift-01, mod, a / another)
(s2 / seem-01, ARG1, d2 / date-entity)
(s2 / seem-01, mod, d / date-entity)
(s3 / same-41, ARG1, t / time)

Decoded in 299,397 microseconds
Sentence: ring back people when you promise to

Spans:
Span 1-2:  back => back
Span 5-6:  promise => promise-01
Span 0-1:  ring => ring
Span 4-5:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),promise,promise-01,false), Span(4,5,List(1),you,you,false), Span(1,2,List(2),back,back,false), Span(0,1,List(3),ring,ring,false)),Map(2 -> back, 1 -> you, 0 -> promise-01, 3 -> ring),Map(b -> back, y -> you, p -> promise-01, r -> ring))),[Ljava.lang.String;@1b18eb3,Annotation([Ljava.lang.String;@300f8aa3,[Ljava.lang.String;@4c56ebfb,[Ljava.lang.String;@5e9ed2e4),Annotation([Ljava.lang.String;@d27a744,[Ljava.lang.String;@2656681b,[Ledu.cmu.lti.nlp.amr.Dependency;@72ccd846),Annotation([Ljava.lang.String;@668b168b,[Ljava.lang.String;@35753445,[Ljava.lang.String;@21bab96e),Annotation([Ljava.lang.String;@69e3f60e,[Ljava.lang.String;@752f4771,[Ledu.cmu.lti.nlp.amr.Entity;@72fb87d1))
AMR:
(p / promise-01, ARG0, y / you)
(p / promise-01, ARG1, b / back)
(r / ring, direction, b / back)

Decoded in 7,849 microseconds
Sentence: where he promised to be kinder education the environment social policy he has been inactive or even cruel

Spans:
Span 17-18:  cruel => cruel
Span 6-7:  education => educate-01
Span 8-9:  environment => environment
Span 11-12:  he => he
Span 1-2:  he => he
Span 15-16:  or => or
Span 10-11:  policy => policy
Span 2-3:  promised => promise-01
Span 9-10:  social => society

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),cruel,cruel,false), Span(15,16,List(1),or,or,false), Span(11,12,List(2),he,he,false), Span(10,11,List(3),policy,policy,false), Span(9,10,List(4),social,society,false), Span(8,9,List(5),environment,environment,false), Span(6,7,List(6),education,educate-01,false), Span(2,3,List(7),promised,promise-01,false), Span(1,2,List(8),he,he,false)),Map(2 -> he, 5 -> environment, 8 -> he, 7 -> promise-01, 1 -> or, 4 -> society, 6 -> educate-01, 0 -> cruel, 3 -> policy),Map(e -> environment, h -> he, h2 -> he, p2 -> promise-01, e2 -> educate-01, s -> society, p -> policy, c -> cruel, o -> or))),[Ljava.lang.String;@5f91e550,Annotation([Ljava.lang.String;@63661834,[Ljava.lang.String;@43bf30e7,[Ljava.lang.String;@3d23b070),Annotation([Ljava.lang.String;@7214a86b,[Ljava.lang.String;@2a3d4350,[Ledu.cmu.lti.nlp.amr.Dependency;@1c0e4eda),Annotation([Ljava.lang.String;@6f5ad899,[Ljava.lang.String;@35425dec,[Ljava.lang.String;@18244c45),Annotation([Ljava.lang.String;@770b5264,[Ljava.lang.String;@84e604b,[Ledu.cmu.lti.nlp.amr.Entity;@5193e02f))
AMR:
(c / cruel, domain, h / he)
(e2 / educate-01, ARG0, c / cruel)
(e2 / educate-01, ARG1, e / environment)
(e2 / educate-01, ARG2, s / society)
(o / or, op, c / cruel)
(p / policy, poss, e / environment)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, e2 / educate-01)

Decoded in 104,739 microseconds
Sentence: but 1982 promised more than financial riches

Spans:
Span 1-2:  1982 => (date-entity :year 1982)
Span 0-1:  but => contrast-01
Span 5-6:  financial => finance
Span 2-3:  promised => promise-01
Span 6-7:  riches => riches

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),riches,riches,false), Span(5,6,List(1),financial,finance,false), Span(2,3,List(2),promised,promise-01,false), Span(1,2,List(4, 3),1982,(date-entity :year 1982),false), Span(0,1,List(5),but,contrast-01,false)),Map(2 -> promise-01, 5 -> contrast-01, 1 -> finance, 4 -> 1982, 0 -> riches, 3 -> date-entity),Map(d -> date-entity, 1 -> 1982, p -> promise-01, r -> riches, c -> contrast-01, f -> finance))),[Ljava.lang.String;@43635780,Annotation([Ljava.lang.String;@2f05b710,[Ljava.lang.String;@2035938e,[Ljava.lang.String;@1d6a6027),Annotation([Ljava.lang.String;@32ceaf87,[Ljava.lang.String;@1f65e220,[Ledu.cmu.lti.nlp.amr.Dependency;@59e0b2fa),Annotation([Ljava.lang.String;@2f06692f,[Ljava.lang.String;@4de3a4c7,[Ljava.lang.String;@1c572cc4),Annotation([Ljava.lang.String;@1f3c0665,[Ljava.lang.String;@1dc7e0e8,[Ledu.cmu.lti.nlp.amr.Entity;@2d7eae9e))
AMR:
(c / contrast-01, ARG0, r / riches)
(c / contrast-01, ARG1, p / promise-01)
(d / date-entity, year, 1 / 1982)
(p / promise-01, time, d / date-entity)
(r / riches, mod, f / finance)

Decoded in 12,905 microseconds
Sentence: so much for the professional tightlyrun business that was promised when the new regime took over at spurs in 1983

Spans:
Span 19-20:  1983 => (date-entity :year 1983)
Span 6-7:  business => business
Span 1-2:  much => much
Span 12-13:  new => new
Span 4-5:  professional => professional
Span 9-10:  promised => promise-01
Span 13-14:  regime => regime
Span 0-1:  so => so

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),1983,(date-entity :year 1983),false), Span(13,14,List(2),regime,regime,false), Span(12,13,List(3),new,new,false), Span(9,10,List(4),promised,promise-01,false), Span(6,7,List(5),business,business,false), Span(4,5,List(6),professional,professional,false), Span(1,2,List(7),much,much,false), Span(0,1,List(8),so,so,false)),Map(2 -> regime, 5 -> business, 8 -> so, 7 -> much, 1 -> 1983, 4 -> promise-01, 6 -> professional, 0 -> date-entity, 3 -> new),Map(n -> new, b -> business, p2 -> professional, s -> so, m -> much, d -> date-entity, p -> promise-01, 1 -> 1983, r -> regime))),[Ljava.lang.String;@57fa1e67,Annotation([Ljava.lang.String;@65e22950,[Ljava.lang.String;@63067771,[Ljava.lang.String;@3d8bce81),Annotation([Ljava.lang.String;@25a296b8,[Ljava.lang.String;@55551d55,[Ledu.cmu.lti.nlp.amr.Dependency;@46f8e337),Annotation([Ljava.lang.String;@7e0d5447,[Ljava.lang.String;@1d1841f8,[Ljava.lang.String;@23930fb4),Annotation([Ljava.lang.String;@bec04ab,[Ljava.lang.String;@34267caa,[Ledu.cmu.lti.nlp.amr.Entity;@4ac297a5))
AMR:
(b / business, mod, m / much)
(b / business, mod, p2 / professional)
(d / date-entity, year, 1 / 1983)
(m / much, degree, s / so)
(p / promise-01, ARG0, r / regime)
(p / promise-01, ARG1, b / business)
(p2 / professional, poss, d / date-entity)
(r / regime, mod, n / new)

Decoded in 46,138 microseconds
Sentence: in the end hitler promised not to act before 1 october before which in any case his military plans would not mature

Spans:
Span 9-10:  1 => 1
Span 7-8:  act => act-02
Span 14-15:  any => any
Span 11-12:  before => before
Span 8-9:  before => before
Span 15-16:  case => case
Span 21-22:  mature => mature-01
Span 17-18:  military => military
Span 10-11:  october => (date-entity :month 10)
Span 18-19:  plans => plan-01
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),mature,mature-01,false), Span(18,19,List(1),plans,plan-01,false), Span(17,18,List(2),military,military,false), Span(15,16,List(3),case,case,false), Span(14,15,List(4),any,any,false), Span(11,12,List(5),before,before,false), Span(10,11,List(7, 6),october,(date-entity :month 10),false), Span(9,10,List(8),1,1,false), Span(8,9,List(9),before,before,false), Span(7,8,List(10),act,act-02,false), Span(4,5,List(11),promised,promise-01,false)),Map(2 -> military, 5 -> before, 8 -> 1, 7 -> 10, 1 -> plan-01, 11 -> promise-01, 4 -> any, 6 -> date-entity, 9 -> before, 0 -> mature-01, 10 -> act-02, 3 -> case),Map(12 -> 1, b -> before, b2 -> before, m2 -> military, p2 -> promise-01, d -> date-entity, m -> mature-01, 1 -> 10, p -> plan-01, a -> any, a2 -> act-02, c -> case))),[Ljava.lang.String;@2d71f7fb,Annotation([Ljava.lang.String;@154f970c,[Ljava.lang.String;@1c459fc2,[Ljava.lang.String;@1efb880e),Annotation([Ljava.lang.String;@13a15f06,[Ljava.lang.String;@47658cfb,[Ledu.cmu.lti.nlp.amr.Dependency;@5c0ad75b),Annotation([Ljava.lang.String;@4bc0c692,[Ljava.lang.String;@5d2cc218,[Ljava.lang.String;@257ae572),Annotation([Ljava.lang.String;@276db297,[Ljava.lang.String;@12e7ebba,[Ledu.cmu.lti.nlp.amr.Entity;@38250a08))
AMR:
(a2 / act-02, time, b2 / before)
(b / before, op, m / mature-01)
(c / case, mod, a / any)
(d / date-entity, month, 1 / 10)
(m / mature-01, ARG0, p / plan-01)
(m / mature-01, ARG1, 12 / 1)
(m / mature-01, time, c / case)
(p / plan-01, ARG0, m2 / military)
(p2 / promise-01, ARG0, d / date-entity)
(p2 / promise-01, ARG1, b / before)
(p2 / promise-01, ARG2, a2 / act-02)

Decoded in 94,743 microseconds
Sentence: he condemned the disgraceful criminal behaviour and promised that the police would make every effort to bring to justice those who committed these appalling crimes

Spans:
Span 6-7:  and => and
Span 23-24:  appalling => appall-01
Span 5-6:  behaviour => behave-01
Span 16-17:  bring => bring-01
Span 21-22:  committed => commit-01
Span 1-2:  condemned => condemn-01
Span 24-25:  crimes => crime
Span 4-5:  criminal => crime
Span 3-4:  disgraceful => disgrace-01
Span 14-15:  effort => effort
Span 13-14:  every => every
Span 0-1:  he => he
Span 18-19:  justice => justice
Span 10-11:  police => police
Span 7-8:  promised => promise-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),crimes,crime,false), Span(23,24,List(1),appalling,appall-01,false), Span(21,22,List(2),committed,commit-01,false), Span(18,19,List(3),justice,justice,false), Span(16,17,List(4),bring,bring-01,false), Span(14,15,List(5),effort,effort,false), Span(13,14,List(6),every,every,false), Span(10,11,List(7),police,police,false), Span(7,8,List(8),promised,promise-01,false), Span(6,7,List(9),and,and,false), Span(5,6,List(10),behaviour,behave-01,false), Span(4,5,List(11),criminal,crime,false), Span(3,4,List(12),disgraceful,disgrace-01,false), Span(1,2,List(13),condemned,condemn-01,false), Span(0,1,List(14),he,he,false)),Map(2 -> commit-01, 5 -> effort, 12 -> disgrace-01, 8 -> promise-01, 7 -> police, 1 -> appall-01, 4 -> bring-01, 11 -> crime, 14 -> he, 6 -> every, 0 -> crime, 9 -> and, 3 -> justice, 10 -> behave-01, 13 -> condemn-01),Map(e -> effort, h -> he, b -> bring-01, b2 -> behave-01, e2 -> every, p2 -> promise-01, c4 -> condemn-01, j -> justice, d -> disgrace-01, p -> police, a -> appall-01, c3 -> crime, a2 -> and, c -> crime, c2 -> commit-01))),[Ljava.lang.String;@2936da90,Annotation([Ljava.lang.String;@50473913,[Ljava.lang.String;@73f43791,[Ljava.lang.String;@266c4c10),Annotation([Ljava.lang.String;@ff5c225,[Ljava.lang.String;@4f9d1352,[Ledu.cmu.lti.nlp.amr.Dependency;@515f9553),Annotation([Ljava.lang.String;@5a44a5e1,[Ljava.lang.String;@50e68513,[Ljava.lang.String;@4e2acbe3),Annotation([Ljava.lang.String;@5bafcc2c,[Ljava.lang.String;@72858bba,[Ledu.cmu.lti.nlp.amr.Entity;@1d989b13))
AMR:
(a / appall-01, ARG1, c / crime)
(a2 / and, op, c4 / condemn-01)
(a2 / and, op, p2 / promise-01)
(b / bring-01, ARG1, p / police)
(b / bring-01, ARG2, j / justice)
(b2 / behave-01, ARG1, c3 / crime)
(c2 / commit-01, ARG0, h / he)
(c2 / commit-01, ARG1, c / crime)
(c4 / condemn-01, ARG0, h / he)
(c4 / condemn-01, ARG1, b2 / behave-01)
(d / disgrace-01, ARG1, b2 / behave-01)
(e / effort, mod, e2 / every)
(e / effort, purpose, b / bring-01)
(p2 / promise-01, ARG0, p / police)

Decoded in 230,727 microseconds
Sentence: investors have argued that the involvement of the french government which provided cheap land and finance for and is promising a rail link to the project is seen as an insurance project

Spans:
Span 17-18:  and => and
Span 14-15:  and => and
Span 2-3:  argued => argue-01
Span 12-13:  cheap => cheap
Span 15-16:  finance => finance-01
Span 8-9:  french => (country :name (name :op "France"))
Span 30-31:  insurance => insure-02
Span 0-1:  investors => (person :ARG0-of invest-01)
Span 5-6:  involvement => involve-01
Span 13-14:  land => land
Span 22-23:  link => link-01
Span 31-32:  project => project
Span 25-26:  project => project
Span 19-20:  promising => promise-01
Span 11-12:  provided => provide-01
Span 21-22:  rail => rail
Span 27-28:  seen => see-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),project,project,false), Span(30,31,List(1),insurance,insure-02,false), Span(27,28,List(2),seen,see-01,false), Span(25,26,List(3),project,project,false), Span(22,23,List(4),link,link-01,false), Span(21,22,List(5),rail,rail,false), Span(19,20,List(6),promising,promise-01,false), Span(17,18,List(7),and,and,false), Span(15,16,List(8),finance,finance-01,false), Span(14,15,List(9),and,and,false), Span(13,14,List(10),land,land,false), Span(12,13,List(11),cheap,cheap,false), Span(11,12,List(12),provided,provide-01,false), Span(8,9,List(15, 14, 13),french,(country :name (name :op "France")),false), Span(5,6,List(16),involvement,involve-01,false), Span(2,3,List(17),argued,argue-01,false), Span(0,1,List(19, 18),investors,(person :ARG0-of invest-01),false)),Map(2 -> see-01, 5 -> rail, 12 -> provide-01, 15 -> "France", 8 -> finance-01, 18 -> person, 7 -> and, 17 -> argue-01, 1 -> insure-02, 4 -> link-01, 11 -> cheap, 14 -> name, 6 -> promise-01, 0 -> project, 9 -> and, 16 -> involve-01, 19 -> invest-01, 3 -> project, 10 -> land, 13 -> country),Map(n -> name, p5 -> person, p2 -> project, a3 -> argue-01, s -> see-01, i3 -> invest-01, p -> project, a -> and, p4 -> provide-01, i2 -> involve-01, l2 -> land, i -> insure-02, r -> rail, a2 -> and, c -> cheap, l -> link-01, f -> finance-01, p3 -> promise-01, c2 -> country))),[Ljava.lang.String;@ded0b93,Annotation([Ljava.lang.String;@4592e709,[Ljava.lang.String;@2f7e238e,[Ljava.lang.String;@25057fe),Annotation([Ljava.lang.String;@68c0e5e1,[Ljava.lang.String;@50344c81,[Ledu.cmu.lti.nlp.amr.Dependency;@198ad24a),Annotation([Ljava.lang.String;@68f4055f,[Ljava.lang.String;@6c8cd5cd,[Ljava.lang.String;@1228bd68),Annotation([Ljava.lang.String;@30ab0028,[Ljava.lang.String;@2a975b0e,[Ledu.cmu.lti.nlp.amr.Entity;@36db09fa))
AMR:
(a / and, op, l2 / land)
(a / and, op, p3 / promise-01)
(a / and, op, p4 / provide-01)
(a2 / and, op, f / finance-01)
(a3 / argue-01, ARG0, p5 / person)
(a3 / argue-01, ARG1, i2 / involve-01)
(c2 / country, name, n / name)
(i2 / involve-01, ARG1, a / and)
(i3 / invest-01, ARG0, p5 / person)
(l / link-01, ARG1, p2 / project)
(l / link-01, ARG2, r / rail)
(l2 / land, mod, c / cheap)
(n / name, op, "France")
(p / project, mod, i / insure-02)
(p3 / promise-01, ARG0, c2 / country)
(p3 / promise-01, ARG1, r / rail)
(p4 / provide-01, ARG1, a2 / and)
(s / see-01, ARG0, p5 / person)
(s / see-01, ARG2, p / project)

Decoded in 449,583 microseconds
Sentence: in short after promising to hit the ground running people wonder why the president has become the leader of the slow is beautiful movement

Spans:
Span 2-3:  after => after
Span 22-23:  beautiful => beautiful
Span 15-16:  become => become-01
Span 7-8:  ground => ground
Span 5-6:  hit => hit-01
Span 17-18:  leader => (person :ARG0-of lead-02)
Span 23-24:  movement => movement
Span 13-14:  president => (have-org-role-91 :ARG2 president)
Span 3-4:  promising => promise-01
Span 1-2:  short => short
Span 10-11:  wonder => wonder-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),movement,movement,false), Span(22,23,List(1),beautiful,beautiful,false), Span(17,18,List(3, 2),leader,(person :ARG0-of lead-02),false), Span(15,16,List(4),become,become-01,false), Span(13,14,List(6, 5),president,(have-org-role-91 :ARG2 president),false), Span(10,11,List(7),wonder,wonder-01,false), Span(7,8,List(8),ground,ground,false), Span(5,6,List(9),hit,hit-01,false), Span(3,4,List(10),promising,promise-01,false), Span(2,3,List(11),after,after,false), Span(1,2,List(12),short,short,false)),Map(2 -> person, 5 -> have-org-role-91, 12 -> short, 8 -> ground, 7 -> wonder-01, 1 -> beautiful, 4 -> become-01, 11 -> after, 6 -> president, 0 -> movement, 9 -> hit-01, 3 -> lead-02, 10 -> promise-01),Map(w -> wonder-01, h -> have-org-role-91, h2 -> hit-01, b -> beautiful, b2 -> become-01, p2 -> president, s -> short, m -> movement, p -> person, g -> ground, a -> after, l -> lead-02, p3 -> promise-01))),[Ljava.lang.String;@666c1838,Annotation([Ljava.lang.String;@42aa3910,[Ljava.lang.String;@35886ba1,[Ljava.lang.String;@f52327c),Annotation([Ljava.lang.String;@5d7072bf,[Ljava.lang.String;@17d8986,[Ledu.cmu.lti.nlp.amr.Dependency;@58cfbd2d),Annotation([Ljava.lang.String;@2e8d02e8,[Ljava.lang.String;@2bb9e538,[Ljava.lang.String;@3977d5f5),Annotation([Ljava.lang.String;@6a7fe54c,[Ljava.lang.String;@72a71733,[Ledu.cmu.lti.nlp.amr.Entity;@37e45013))
AMR:
(a / after, op, p3 / promise-01)
(b2 / become-01, ARG1, p / person)
(h / have-org-role-91, ARG1, p3 / promise-01)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / hit-01, ARG1, g / ground)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, m / movement)
(m / movement, mod, b / beautiful)
(p3 / promise-01, ARG1, h2 / hit-01)
(s / short, time, a / after)
(w / wonder-01, ARG0, p / person)
(w / wonder-01, ARG1, h2 / hit-01)

Decoded in 75,138 microseconds
Sentence: during the negotiations the bush administration reportedly promised to drop the indictment of noriega and even wrote out a draft court order dismissing the charges

Spans:
Span 5-6:  administration => administrate-01
Span 14-15:  and => and
Span 4-5:  bush => bush-league
Span 20-21:  court => court
Span 22-23:  dismissing => dismiss-02
Span 19-20:  draft => draft-01
Span 9-10:  drop => drop-01
Span 11-12:  indictment => indict-01
Span 2-3:  negotiations => negotiate-01
Span 7-8:  promised => promise-01
Span 6-7:  reportedly => report-01
Span 16-17:  wrote => write-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),dismissing,dismiss-02,false), Span(20,21,List(1),court,court,false), Span(19,20,List(2),draft,draft-01,false), Span(16,17,List(3),wrote,write-01,false), Span(14,15,List(4),and,and,false), Span(11,12,List(5),indictment,indict-01,false), Span(9,10,List(6),drop,drop-01,false), Span(7,8,List(7),promised,promise-01,false), Span(6,7,List(8),reportedly,report-01,false), Span(5,6,List(9),administration,administrate-01,false), Span(4,5,List(10),bush,bush-league,false), Span(2,3,List(11),negotiations,negotiate-01,false)),Map(2 -> draft-01, 5 -> indict-01, 8 -> report-01, 7 -> promise-01, 1 -> court, 11 -> negotiate-01, 4 -> and, 6 -> drop-01, 9 -> administrate-01, 0 -> dismiss-02, 10 -> bush-league, 3 -> write-01),Map(n -> negotiate-01, w -> write-01, b -> bush-league, d3 -> drop-01, d -> dismiss-02, p -> promise-01, a -> and, d2 -> draft-01, a2 -> administrate-01, r -> report-01, i -> indict-01, c -> court))),[Ljava.lang.String;@6e452c0f,Annotation([Ljava.lang.String;@7f4fc557,[Ljava.lang.String;@4e25140d,[Ljava.lang.String;@6447898f),Annotation([Ljava.lang.String;@14983eb8,[Ljava.lang.String;@173dac98,[Ledu.cmu.lti.nlp.amr.Dependency;@520e3b13),Annotation([Ljava.lang.String;@2448867b,[Ljava.lang.String;@157507d9,[Ljava.lang.String;@36564290),Annotation([Ljava.lang.String;@592c17ce,[Ljava.lang.String;@5dcf031e,[Ledu.cmu.lti.nlp.amr.Entity;@41d5d6af))
AMR:
(a / and, op, p / promise-01)
(a / and, op, w / write-01)
(a2 / administrate-01, mod, b / bush-league)
(c / court, mod, d2 / draft-01)
(d2 / draft-01, ARG1, r / report-01)
(d3 / drop-01, ARG0, a2 / administrate-01)
(d3 / drop-01, ARG1, i / indict-01)
(p / promise-01, ARG1, n / negotiate-01)
(p / promise-01, ARG2, d3 / drop-01)
(r / report-01, ARG1, p / promise-01)
(w / write-01, ARG1, d / dismiss-02)

Decoded in 205,909 microseconds
Sentence: it is an affair which promises to endear the trainer to the nations punters for another season

Spans:
Span 3-4:  affair => affair
Span 15-16:  another => another
Span 0-1:  it => it
Span 12-13:  nations => nation
Span 5-6:  promises => promise-01
Span 16-17:  season => season
Span 9-10:  trainer => train-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),season,season,false), Span(15,16,List(1),another,another,false), Span(12,13,List(2),nations,nation,false), Span(9,10,List(3),trainer,train-01,false), Span(5,6,List(4),promises,promise-01,false), Span(3,4,List(5),affair,affair,false), Span(0,1,List(6),it,it,false)),Map(2 -> nation, 5 -> affair, 1 -> another, 4 -> promise-01, 6 -> it, 0 -> season, 3 -> train-01),Map(n -> nation, t -> train-01, s -> season, p -> promise-01, a -> another, i -> it, a2 -> affair))),[Ljava.lang.String;@3e019ced,Annotation([Ljava.lang.String;@5be5ab68,[Ljava.lang.String;@435867fa,[Ljava.lang.String;@611270a0),Annotation([Ljava.lang.String;@1a04a2a,[Ljava.lang.String;@42650c3b,[Ledu.cmu.lti.nlp.amr.Dependency;@7806178a),Annotation([Ljava.lang.String;@57f3a295,[Ljava.lang.String;@3c37114f,[Ljava.lang.String;@4351786b),Annotation([Ljava.lang.String;@19b8db54,[Ljava.lang.String;@374774fd,[Ledu.cmu.lti.nlp.amr.Entity;@3451aa65))
AMR:
(a2 / affair, domain, i / it)
(p / promise-01, ARG0, a2 / affair)
(p / promise-01, ARG1, t / train-01)
(s / season, mod, a / another)
(t / train-01, ARG0, a / another)
(t / train-01, ARG1, n / nation)

Decoded in 40,286 microseconds
Sentence: ah this damned war walid promised that all displaced christian civilians would be allowed to return to their homes with appropriate compensation

Spans:
Span 0-1:  ah => ah
Span 7-8:  all => all
Span 13-14:  allowed => allow-01
Span 20-21:  appropriate => appropriate
Span 9-10:  christian => (religious-group :name (name :op "Christian"))
Span 10-11:  civilians => civilian
Span 21-22:  compensation => compensate-01
Span 2-3:  damned => damn-01
Span 8-9:  displaced => (person :ARG1-of displace-01)
Span 18-19:  homes => home
Span 5-6:  promised => promise-01
Span 1-2:  this => this
Span 3-4:  war => war

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),compensation,compensate-01,false), Span(20,21,List(1),appropriate,appropriate,false), Span(18,19,List(2),homes,home,false), Span(13,14,List(3),allowed,allow-01,false), Span(10,11,List(4),civilians,civilian,false), Span(9,10,List(7, 6, 5),christian,(religious-group :name (name :op "Christian")),false), Span(8,9,List(9, 8),displaced,(person :ARG1-of displace-01),false), Span(7,8,List(10),all,all,false), Span(5,6,List(11),promised,promise-01,false), Span(3,4,List(12),war,war,false), Span(2,3,List(13),damned,damn-01,false), Span(1,2,List(14),this,this,false), Span(0,1,List(15),ah,ah,false)),Map(2 -> home, 5 -> religious-group, 12 -> war, 15 -> ah, 8 -> person, 7 -> "Christian", 1 -> appropriate, 4 -> civilian, 11 -> promise-01, 14 -> this, 6 -> name, 0 -> compensate-01, 9 -> displace-01, 3 -> allow-01, 10 -> all, 13 -> damn-01),Map(n -> name, w -> war, h -> home, t -> this, p2 -> promise-01, a3 -> all, d -> displace-01, p -> person, a -> appropriate, d2 -> damn-01, a2 -> allow-01, r -> religious-group, c -> compensate-01, c2 -> civilian, a4 -> ah))),[Ljava.lang.String;@8cc1102,Annotation([Ljava.lang.String;@d709ed1,[Ljava.lang.String;@5ccab23b,[Ljava.lang.String;@7f7b6f14),Annotation([Ljava.lang.String;@b9cb6f,[Ljava.lang.String;@25dae4c8,[Ledu.cmu.lti.nlp.amr.Dependency;@45e219e2),Annotation([Ljava.lang.String;@7f116845,[Ljava.lang.String;@4fd4cb2f,[Ljava.lang.String;@1b67a39b),Annotation([Ljava.lang.String;@3126232b,[Ljava.lang.String;@3ecef542,[Ledu.cmu.lti.nlp.amr.Entity;@547e045))
AMR:
(a2 / allow-01, ARG0, a4 / ah)
(a2 / allow-01, ARG1, c2 / civilian)
(c / compensate-01, ARG0, a3 / all)
(c / compensate-01, ARG2, p / person)
(c / compensate-01, mod, a / appropriate)
(c2 / civilian, mod, r / religious-group)
(d / displace-01, ARG0, c2 / civilian)
(d / displace-01, ARG1, p / person)
(d2 / damn-01, ARG1, w / war)
(h / home, op, c2 / civilian)
(n / name, op, "Christian")
(p2 / promise-01, ARG0, w / war)
(p2 / promise-01, ARG1, a2 / allow-01)
(r / religious-group, name, n / name)
(t / this, op, c / compensate-01)

Decoded in 517,881 microseconds
Sentence: not surprisingly a box number has to be written to for a course in witchcraft promising tuition by the worlds foremost witches

Spans:
Span 3-4:  box => box
Span 20-21:  foremost => foremost
Span 4-5:  number => number
Span 15-16:  promising => promise-01
Span 1-2:  surprisingly => surprise-01
Span 16-17:  tuition => tuition
Span 19-20:  worlds => world
Span 8-9:  written => write-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),foremost,foremost,false), Span(19,20,List(1),worlds,world,false), Span(16,17,List(2),tuition,tuition,false), Span(15,16,List(3),promising,promise-01,false), Span(8,9,List(4),written,write-01,false), Span(4,5,List(5),number,number,false), Span(3,4,List(6),box,box,false), Span(1,2,List(7),surprisingly,surprise-01,false)),Map(2 -> tuition, 5 -> number, 7 -> surprise-01, 1 -> world, 4 -> write-01, 6 -> box, 0 -> foremost, 3 -> promise-01),Map(n -> number, w -> world, b -> box, t -> tuition, s -> surprise-01, p -> promise-01, w2 -> write-01, f -> foremost))),[Ljava.lang.String;@31d4d4b8,Annotation([Ljava.lang.String;@bd99597,[Ljava.lang.String;@79ebf294,[Ljava.lang.String;@71831114),Annotation([Ljava.lang.String;@53d67244,[Ljava.lang.String;@23e7f95c,[Ledu.cmu.lti.nlp.amr.Dependency;@52a4196e),Annotation([Ljava.lang.String;@1381af25,[Ljava.lang.String;@2711b024,[Ljava.lang.String;@7a431f85),Annotation([Ljava.lang.String;@4cca9378,[Ljava.lang.String;@797d2ab,[Ledu.cmu.lti.nlp.amr.Entity;@87dc72))
AMR:
(n / number, mod, b / box)
(n / number, time, s / surprise-01)
(p / promise-01, ARG0, n / number)
(p / promise-01, ARG1, t / tuition)
(s / surprise-01, ARG0, f / foremost)
(s / surprise-01, ARG1, w / world)
(w2 / write-01, ARG1, n / number)

Decoded in 48,118 microseconds
Sentence: while it is possible to buy the original artwork for an illustration by contacting a cartoonist through a publication the cartoon gallery promises to shorten the process by doing that for you

Spans:
Span 5-6:  buy => buy-01
Span 20-21:  cartoon => cartoon
Span 13-14:  contacting => contact-01
Span 28-29:  doing => do-02
Span 11-12:  illustration => illustrate-01
Span 1-2:  it => it
Span 7-8:  original => original
Span 3-4:  possible => possible
Span 26-27:  process => process
Span 22-23:  promises => promise-01
Span 18-19:  publication => publication
Span 31-32:  you => you

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),you,you,false), Span(28,29,List(1),doing,do-02,false), Span(26,27,List(2),process,process,false), Span(22,23,List(3),promises,promise-01,false), Span(20,21,List(4),cartoon,cartoon,false), Span(18,19,List(5),publication,publication,false), Span(13,14,List(6),contacting,contact-01,false), Span(11,12,List(7),illustration,illustrate-01,false), Span(7,8,List(8),original,original,false), Span(5,6,List(9),buy,buy-01,false), Span(3,4,List(10),possible,possible,false), Span(1,2,List(11),it,it,false)),Map(2 -> process, 5 -> publication, 8 -> original, 7 -> illustrate-01, 1 -> do-02, 11 -> it, 4 -> cartoon, 6 -> contact-01, 9 -> buy-01, 0 -> you, 10 -> possible, 3 -> promise-01),Map(b -> buy-01, p2 -> promise-01, d -> do-02, p -> process, y -> you, p4 -> possible, i2 -> it, i -> illustrate-01, c -> cartoon, o -> original, c2 -> contact-01, p3 -> publication))),[Ljava.lang.String;@5799c0a3,Annotation([Ljava.lang.String;@2f363a43,[Ljava.lang.String;@112b1cec,[Ljava.lang.String;@2577d2c2),Annotation([Ljava.lang.String;@5dadd1c5,[Ljava.lang.String;@3ea70c8f,[Ledu.cmu.lti.nlp.amr.Dependency;@4929a06b),Annotation([Ljava.lang.String;@4be2f653,[Ljava.lang.String;@2199ea11,[Ljava.lang.String;@7fd61352),Annotation([Ljava.lang.String;@3f8eae0f,[Ljava.lang.String;@30457b62,[Ledu.cmu.lti.nlp.amr.Entity;@21a777b0))
AMR:
(b / buy-01, ARG0, i2 / it)
(b / buy-01, ARG2, c2 / contact-01)
(c2 / contact-01, ARG0, y / you)
(c2 / contact-01, ARG1, p3 / publication)
(d / do-02, ARG0, p / process)
(i / illustrate-01, ARG1, c2 / contact-01)
(o / original, op, d / do-02)
(p2 / promise-01, ARG0, c / cartoon)
(p2 / promise-01, ARG1, p / process)
(p2 / promise-01, time, p3 / publication)
(p4 / possible, domain, b / buy-01)

Decoded in 240,873 microseconds
Sentence: yet consenting and promising while overlapping are not the same, according to simmons consenting differs from promising in two ways first consent in the strict sense is always given to the actions of other persons

Spans:
Span 32-33:  actions => action
Span 28-29:  always => always
Span 2-3:  and => and
Span 22-23:  consent => consent-01
Span 14-15:  consenting => consent-01
Span 1-2:  consenting => consent-01
Span 29-30:  given => give-01
Span 34-35:  other => other
Span 35-36:  persons => person
Span 17-18:  promising => promise-01
Span 3-4:  promising => promise-01
Span 9-10:  same => same-41
Span 26-27:  sense => sense
Span 25-26:  strict => strict
Span 19-20:  two => 2
Span 20-21:  ways => way
Span 0-1:  yet => yet

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),persons,person,false), Span(34,35,List(1),other,other,false), Span(32,33,List(2),actions,action,false), Span(29,30,List(3),given,give-01,false), Span(28,29,List(4),always,always,false), Span(26,27,List(5),sense,sense,false), Span(25,26,List(6),strict,strict,false), Span(22,23,List(7),consent,consent-01,false), Span(20,21,List(8),ways,way,false), Span(19,20,List(9),two,2,false), Span(17,18,List(10),promising,promise-01,false), Span(14,15,List(11),consenting,consent-01,false), Span(9,10,List(12),same,same-41,false), Span(3,4,List(13),promising,promise-01,false), Span(2,3,List(14),and,and,false), Span(1,2,List(15),consenting,consent-01,false), Span(0,1,List(16),yet,yet,false)),Map(2 -> action, 5 -> sense, 12 -> same-41, 15 -> consent-01, 8 -> way, 7 -> consent-01, 1 -> other, 4 -> always, 11 -> consent-01, 14 -> and, 6 -> strict, 0 -> person, 9 -> 2, 16 -> yet, 3 -> give-01, 10 -> promise-01, 13 -> promise-01),Map(w -> way, 2 -> 2, s2 -> strict, p2 -> promise-01, a3 -> and, s -> sense, y -> yet, p -> person, g -> give-01, c3 -> consent-01, a -> action, a2 -> always, c -> consent-01, s3 -> same-41, o -> other, p3 -> promise-01, c2 -> consent-01))),[Ljava.lang.String;@3152cf21,Annotation([Ljava.lang.String;@339c98d3,[Ljava.lang.String;@6df55f1d,[Ljava.lang.String;@837a151),Annotation([Ljava.lang.String;@7c3fd10d,[Ljava.lang.String;@41b5ec35,[Ledu.cmu.lti.nlp.amr.Dependency;@ea6ad47),Annotation([Ljava.lang.String;@60ba17d4,[Ljava.lang.String;@597290e8,[Ljava.lang.String;@70879d38),Annotation([Ljava.lang.String;@5763013f,[Ljava.lang.String;@24e6fbeb,[Ledu.cmu.lti.nlp.amr.Entity;@38a5143a))
AMR:
(a / action, poss, p / person)
(a3 / and, op, c3 / consent-01)
(a3 / and, op, p3 / promise-01)
(a3 / and, op, s3 / same-41)
(c / consent-01, ARG0, s / sense)
(c3 / consent-01, time, y / yet)
(g / give-01, ARG1, s / sense)
(g / give-01, ARG2, a / action)
(g / give-01, time, a2 / always)
(p / person, mod, o / other)
(p2 / promise-01, ARG0, c2 / consent-01)
(p2 / promise-01, ARG1, c3 / consent-01)
(p2 / promise-01, ARG2, w / way)
(p3 / promise-01, ARG0, c / consent-01)
(s / sense, mod, s2 / strict)
(w / way, quant, 2 / 2)

Decoded in 326,482 microseconds
Sentence: this year trading conditions promise to be no less difficult but the board expects all its companies to operate creditably

Spans:
Span 14-15:  all => all
Span 10-11:  but => contrast-01
Span 16-17:  companies => company
Span 3-4:  conditions => condition
Span 9-10:  difficult => difficult
Span 13-14:  expects => expect-01
Span 8-9:  less => less
Span 7-8:  no => -
Span 18-19:  operate => operate-01
Span 4-5:  promise => promise-01
Span 0-1:  this => this
Span 2-3:  trading => trade-01
Span 1-2:  year => year

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),operate,operate-01,false), Span(16,17,List(1),companies,company,false), Span(14,15,List(2),all,all,false), Span(13,14,List(3),expects,expect-01,false), Span(10,11,List(4),but,contrast-01,false), Span(9,10,List(5),difficult,difficult,false), Span(8,9,List(6),less,less,false), Span(7,8,List(7),no,-,false), Span(4,5,List(8),promise,promise-01,false), Span(3,4,List(9),conditions,condition,false), Span(2,3,List(10),trading,trade-01,false), Span(1,2,List(11),year,year,false), Span(0,1,List(12),this,this,false)),Map(2 -> all, 5 -> difficult, 12 -> this, 8 -> promise-01, 7 -> -, 1 -> company, 4 -> contrast-01, 11 -> year, 6 -> less, 0 -> operate-01, 9 -> condition, 3 -> expect-01, 10 -> trade-01),Map(e -> expect-01, t -> trade-01, d -> difficult, p -> promise-01, y -> year, a -> all, c3 -> condition, t2 -> this, c -> company, - -> -, l -> less, o -> operate-01, c2 -> contrast-01))),[Ljava.lang.String;@5dd308e3,Annotation([Ljava.lang.String;@49ec9f34,[Ljava.lang.String;@4dc834d6,[Ljava.lang.String;@1304f57f),Annotation([Ljava.lang.String;@2a916e9a,[Ljava.lang.String;@31f4564b,[Ledu.cmu.lti.nlp.amr.Dependency;@204d6f8c),Annotation([Ljava.lang.String;@3bd660e5,[Ljava.lang.String;@77737913,[Ljava.lang.String;@3e120ba9),Annotation([Ljava.lang.String;@12bba415,[Ljava.lang.String;@5d11684e,[Ledu.cmu.lti.nlp.amr.Entity;@21d7089e))
AMR:
(c / company, quant, a / all)
(c2 / contrast-01, ARG1, d / difficult)
(c2 / contrast-01, ARG2, e / expect-01)
(c3 / condition, mod, t / trade-01)
(c3 / condition, mod, t2 / this)
(d / difficult, degree, l / less)
(e / expect-01, ARG1, c / company)
(l / less, polarity, - / -)
(o / operate-01, ARG0, c / company)
(p / promise-01, ARG0, c3 / condition)
(p / promise-01, ARG1, d / difficult)
(y / year, mod, t2 / this)

Decoded in 151,383 microseconds
Sentence: his style as a charismatic evangelical who emphasises personal conversion promises to be very different from that of his predecessor dr robert runcie a liberal anglocatholic

Spans:
Span 4-5:  charismatic => charisma
Span 9-10:  conversion => convert-01
Span 14-15:  different => differ-02
Span 5-6:  evangelical => evangelical
Span 24-25:  liberal => liberal
Span 8-9:  personal => personal
Span 10-11:  promises => promise-01
Span 1-2:  style => style
Span 13-14:  very => very

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),liberal,liberal,false), Span(14,15,List(1),different,differ-02,false), Span(13,14,List(2),very,very,false), Span(10,11,List(3),promises,promise-01,false), Span(9,10,List(4),conversion,convert-01,false), Span(8,9,List(5),personal,personal,false), Span(5,6,List(6),evangelical,evangelical,false), Span(4,5,List(7),charismatic,charisma,false), Span(1,2,List(8),style,style,false)),Map(2 -> very, 5 -> personal, 8 -> style, 7 -> charisma, 1 -> differ-02, 4 -> convert-01, 6 -> evangelical, 0 -> liberal, 3 -> promise-01),Map(e -> evangelical, p2 -> personal, s -> style, v -> very, d -> differ-02, p -> promise-01, c -> convert-01, l -> liberal, c2 -> charisma))),[Ljava.lang.String;@2c76ce6d,Annotation([Ljava.lang.String;@2bea6ce9,[Ljava.lang.String;@2b944b85,[Ljava.lang.String;@14ea1f1d),Annotation([Ljava.lang.String;@16a0b3a5,[Ljava.lang.String;@1072213e,[Ledu.cmu.lti.nlp.amr.Dependency;@34e475e1),Annotation([Ljava.lang.String;@2f721e8,[Ljava.lang.String;@2ed307dd,[Ljava.lang.String;@20a9562f),Annotation([Ljava.lang.String;@4d593869,[Ljava.lang.String;@1c869d2b,[Ledu.cmu.lti.nlp.amr.Entity;@49b880ae))
AMR:
(c / convert-01, mod, p2 / personal)
(d / differ-02, ARG0, e / evangelical)
(d / differ-02, ARG1, p / promise-01)
(d / differ-02, degree, v / very)
(e / evangelical, mod, c2 / charisma)
(p / promise-01, ARG1, l / liberal)
(p / promise-01, time, c / convert-01)
(s / style, poss, e / evangelical)

Decoded in 52,166 microseconds
Sentence:   violation of the duty not to interfere with a persons promising will frustrate his right to promise and the interest on which it is base either by preventing the person from exercising his rights or by perverting the considerations on which he decides whether to promise or not

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   violation of the duty not to interfere with a persons promising will frustrate his right to promise and the interest on which it is base either by preventing the person from exercising his rights or by perverting the considerations on which he decides whether to promise or not
myTokenized = violation of the duty not to interfere with a persons promising will frustrate his right to promise and the interest on which it is base either by preventing the person from exercising his rights or by perverting the considerations on which he decides whether to promise or not
i = 0
prefix = List(violation)
regexr = \Qv\E ?\Qi\E ?\Qo\E ?\Ql\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: indosuez has conditionally promised not to do this for 12 months

Spans:
Span 9-10:  12 => 12
Span 10-11:  months => (temporal-quantity :unit month)
Span 3-4:  promised => promise-01
Span 7-8:  this => this

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),months,(temporal-quantity :unit month),false), Span(9,10,List(2),12,12,false), Span(7,8,List(3),this,this,false), Span(3,4,List(4),promised,promise-01,false)),Map(2 -> 12, 1 -> month, 4 -> promise-01, 0 -> temporal-quantity, 3 -> this),Map(t -> temporal-quantity, m -> month, p -> promise-01, 1 -> 12, t2 -> this))),[Ljava.lang.String;@2eff024d,Annotation([Ljava.lang.String;@67f02555,[Ljava.lang.String;@472324c2,[Ljava.lang.String;@5442610a),Annotation([Ljava.lang.String;@51f102bd,[Ljava.lang.String;@25eaf052,[Ledu.cmu.lti.nlp.amr.Dependency;@6347aaf0),Annotation([Ljava.lang.String;@7627a57b,[Ljava.lang.String;@24e16ad7,[Ljava.lang.String;@4b2d5c2b),Annotation([Ljava.lang.String;@efe319c,[Ljava.lang.String;@526b0074,[Ledu.cmu.lti.nlp.amr.Entity;@6eeae9f1))
AMR:
(p / promise-01, ARG0, t / temporal-quantity)
(p / promise-01, ARG1, t2 / this)
(t / temporal-quantity, quant, 1 / 12)
(t / temporal-quantity, unit, m / month)

Decoded in 16,904 microseconds
Sentence:   the tories had promised bigger incomes and delivered bigger debts

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the tories had promised bigger incomes and delivered bigger debts
myTokenized = the tories had promised bigger incomes and delivered bigger debts
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in the course of 1970s leftist guerrillas filtered into the region and promised to help the indians in their struggle against local landlords for land and respect for their traditions

Spans:
Span 4-5:  1970s => 1970
Span 25-26:  and => and
Span 11-12:  and => and
Span 7-8:  filtered => filter-02
Span 6-7:  guerrillas => guerrilla
Span 14-15:  help => help-01
Span 24-25:  land => land
Span 5-6:  leftist => leftist
Span 21-22:  local => local
Span 12-13:  promised => promise-01
Span 10-11:  region => region
Span 26-27:  respect => respect-01
Span 19-20:  struggle => struggle-01
Span 29-30:  traditions => tradition

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),traditions,tradition,false), Span(26,27,List(1),respect,respect-01,false), Span(25,26,List(2),and,and,false), Span(24,25,List(3),land,land,false), Span(21,22,List(4),local,local,false), Span(19,20,List(5),struggle,struggle-01,false), Span(14,15,List(6),help,help-01,false), Span(12,13,List(7),promised,promise-01,false), Span(11,12,List(8),and,and,false), Span(10,11,List(9),region,region,false), Span(7,8,List(10),filtered,filter-02,false), Span(6,7,List(11),guerrillas,guerrilla,false), Span(5,6,List(12),leftist,leftist,false), Span(4,5,List(13),1970s,1970,false)),Map(2 -> and, 5 -> struggle-01, 12 -> leftist, 8 -> and, 7 -> promise-01, 1 -> respect-01, 4 -> local, 11 -> guerrilla, 6 -> help-01, 0 -> tradition, 9 -> region, 3 -> land, 10 -> filter-02, 13 -> 1970),Map(h -> help-01, t -> tradition, l3 -> leftist, s -> struggle-01, 1 -> 1970, p -> promise-01, r2 -> region, g -> guerrilla, a -> and, l2 -> local, r -> respect-01, a2 -> and, l -> land, f -> filter-02))),[Ljava.lang.String;@5233d6f1,Annotation([Ljava.lang.String;@49649260,[Ljava.lang.String;@69c60244,[Ljava.lang.String;@46bef49c),Annotation([Ljava.lang.String;@22ad520d,[Ljava.lang.String;@20e5e544,[Ledu.cmu.lti.nlp.amr.Dependency;@552ee43b),Annotation([Ljava.lang.String;@798a092d,[Ljava.lang.String;@5560a7b1,[Ljava.lang.String;@3ca18141),Annotation([Ljava.lang.String;@f2cf180,[Ljava.lang.String;@4fa31248,[Ledu.cmu.lti.nlp.amr.Entity;@5b055dd0))
AMR:
(a / and, mod, t / tradition)
(a / and, op, r / respect-01)
(a2 / and, op, p / promise-01)
(f / filter-02, ARG0, r2 / region)
(f / filter-02, ARG1, g / guerrilla)
(g / guerrilla, mod, l3 / leftist)
(h / help-01, ARG1, g / guerrilla)
(h / help-01, ARG2, s / struggle-01)
(p / promise-01, ARG1, h / help-01)
(r / respect-01, ARG1, 1 / 1970)
(s / struggle-01, ARG1, a / and)
(s / struggle-01, location, l / land)
(s / struggle-01, location, l2 / local)

Decoded in 137,351 microseconds
Sentence: the identity card scheme for football fans will not be implemented until the government is satisfied that the turnstile technology is workable efficient and safe the minister for sport promised last night

Spans:
Span 23-24:  and => and
Span 2-3:  card => card
Span 22-23:  efficient => efficiency
Span 6-7:  fans => fan
Span 5-6:  football => football
Span 1-2:  identity => identity
Span 10-11:  implemented => implement-01
Span 30-31:  last => last
Span 26-27:  minister => (have-org-role-91 :ARG2 minister)
Span 31-32:  night => night
Span 29-30:  promised => promise-01
Span 24-25:  safe => safe-41
Span 15-16:  satisfied => satisfy-01
Span 3-4:  scheme => scheme
Span 28-29:  sport => sport
Span 19-20:  technology => technology
Span 11-12:  until => until

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),night,night,false), Span(30,31,List(1),last,last,false), Span(29,30,List(2),promised,promise-01,false), Span(28,29,List(3),sport,sport,false), Span(26,27,List(5, 4),minister,(have-org-role-91 :ARG2 minister),false), Span(24,25,List(6),safe,safe-41,false), Span(23,24,List(7),and,and,false), Span(22,23,List(8),efficient,efficiency,false), Span(19,20,List(9),technology,technology,false), Span(15,16,List(10),satisfied,satisfy-01,false), Span(11,12,List(11),until,until,false), Span(10,11,List(12),implemented,implement-01,false), Span(6,7,List(13),fans,fan,false), Span(5,6,List(14),football,football,false), Span(3,4,List(15),scheme,scheme,false), Span(2,3,List(16),card,card,false), Span(1,2,List(17),identity,identity,false)),Map(2 -> promise-01, 5 -> minister, 12 -> implement-01, 15 -> scheme, 8 -> efficiency, 7 -> and, 17 -> identity, 1 -> last, 4 -> have-org-role-91, 11 -> until, 14 -> football, 6 -> safe-41, 0 -> night, 9 -> technology, 16 -> card, 3 -> sport, 10 -> satisfy-01, 13 -> fan),Map(e -> efficiency, n -> night, h -> have-org-role-91, s2 -> safe-41, t -> technology, s -> sport, s4 -> scheme, m -> minister, p -> promise-01, a -> and, i2 -> identity, i -> implement-01, c -> card, s3 -> satisfy-01, f2 -> football, l -> last, u -> until, f -> fan))),[Ljava.lang.String;@3d52315f,Annotation([Ljava.lang.String;@5f27736c,[Ljava.lang.String;@170ae842,[Ljava.lang.String;@4d1650df),Annotation([Ljava.lang.String;@74178802,[Ljava.lang.String;@34e276d9,[Ledu.cmu.lti.nlp.amr.Dependency;@7fe8bbae),Annotation([Ljava.lang.String;@879de1d,[Ljava.lang.String;@78e54643,[Ljava.lang.String;@146816b7),Annotation([Ljava.lang.String;@3dab52d8,[Ljava.lang.String;@3acc0289,[Ledu.cmu.lti.nlp.amr.Entity;@27ba8e87))
AMR:
(a / and, op, e / efficiency)
(a / and, op, s2 / safe-41)
(c / card, mod, i2 / identity)
(f / fan, mod, f2 / football)
(h / have-org-role-91, ARG2, m / minister)
(i / implement-01, ARG0, n / night)
(i / implement-01, ARG1, s4 / scheme)
(i / implement-01, ARG2, f / fan)
(i / implement-01, time, u / until)
(n / night, mod, l / last)
(p / promise-01, ARG0, s / sport)
(p / promise-01, ARG1, m / minister)
(p / promise-01, time, n / night)
(s2 / safe-41, ARG0, t / technology)
(s2 / safe-41, ARG1, s / sport)
(s3 / satisfy-01, ARG1, s4 / scheme)
(s4 / scheme, mod, c / card)

Decoded in 304,201 microseconds
Sentence: the government promised to take action to prevent police officers avoiding disciplinary charges by retiring prematurely on medical grounds

Spans:
Span 5-6:  action => action
Span 10-11:  avoiding => avoid-01
Span 11-12:  disciplinary => discipline
Span 18-19:  grounds => ground
Span 17-18:  medical => medicine
Span 9-10:  officers => (have-org-role-91 :ARG2 officer)
Span 8-9:  police => police
Span 15-16:  prematurely => premature
Span 7-8:  prevent => prevent-01
Span 2-3:  promised => promise-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),grounds,ground,false), Span(17,18,List(1),medical,medicine,false), Span(15,16,List(2),prematurely,premature,false), Span(11,12,List(3),disciplinary,discipline,false), Span(10,11,List(4),avoiding,avoid-01,false), Span(9,10,List(6, 5),officers,(have-org-role-91 :ARG2 officer),false), Span(8,9,List(7),police,police,false), Span(7,8,List(8),prevent,prevent-01,false), Span(5,6,List(9),action,action,false), Span(2,3,List(10),promised,promise-01,false)),Map(2 -> premature, 5 -> have-org-role-91, 8 -> prevent-01, 7 -> police, 1 -> medicine, 4 -> avoid-01, 6 -> officer, 9 -> action, 0 -> ground, 10 -> promise-01, 3 -> discipline),Map(h -> have-org-role-91, p2 -> police, d -> discipline, m -> medicine, p -> premature, g -> ground, p4 -> promise-01, a -> avoid-01, a2 -> action, o -> officer, p3 -> prevent-01))),[Ljava.lang.String;@48e35571,Annotation([Ljava.lang.String;@44fe9319,[Ljava.lang.String;@256b71b2,[Ljava.lang.String;@30f5704f),Annotation([Ljava.lang.String;@41a06ba5,[Ljava.lang.String;@afb3f4c,[Ledu.cmu.lti.nlp.amr.Dependency;@74f89c35),Annotation([Ljava.lang.String;@6dd79791,[Ljava.lang.String;@651fe8ed,[Ljava.lang.String;@11f55379),Annotation([Ljava.lang.String;@13b3625,[Ljava.lang.String;@565fb7c4,[Ledu.cmu.lti.nlp.amr.Entity;@2619d129))
AMR:
(a / avoid-01, ARG1, o / officer)
(a2 / action, purpose, p3 / prevent-01)
(d / discipline, domain, p3 / prevent-01)
(g / ground, mod, m / medicine)
(h / have-org-role-91, ARG0, g / ground)
(h / have-org-role-91, ARG1, p2 / police)
(h / have-org-role-91, ARG2, o / officer)
(p3 / prevent-01, ARG0, p / premature)
(p3 / prevent-01, ARG1, a / avoid-01)
(p4 / promise-01, ARG1, a2 / action)

Decoded in 77,492 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@68f2ee49,Annotation([Ljava.lang.String;@24fa3073,[Ljava.lang.String;@2582e0fc,[Ljava.lang.String;@3380d3a1),Annotation([Ljava.lang.String;@4ec60971,[Ljava.lang.String;@2b96021e,[Ledu.cmu.lti.nlp.amr.Dependency;@56515ed),Annotation([Ljava.lang.String;@2f827d5f,[Ljava.lang.String;@1ff50057,[Ljava.lang.String;@de96025),Annotation([Ljava.lang.String;@54a72445,[Ljava.lang.String;@293e596e,[Ledu.cmu.lti.nlp.amr.Entity;@3c6159e9))
AMR:


Decoded in 1,269 microseconds
Sentence: so i promised i wouldnt go out with him again

Spans:
Span 9-10:  again => again
Span 3-4:  i => i
Span 1-2:  i => i
Span 2-3:  promised => promise-01
Span 0-1:  so => so

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),again,again,false), Span(3,4,List(1),i,i,false), Span(2,3,List(2),promised,promise-01,false), Span(1,2,List(3),i,i,false), Span(0,1,List(4),so,so,false)),Map(2 -> promise-01, 1 -> i, 4 -> so, 0 -> again, 3 -> i),Map(s -> so, p -> promise-01, a -> again, i2 -> i, i -> i))),[Ljava.lang.String;@1b55eef7,Annotation([Ljava.lang.String;@26bba826,[Ljava.lang.String;@6a1c6aa7,[Ljava.lang.String;@6f9e305d),Annotation([Ljava.lang.String;@7a7962ea,[Ljava.lang.String;@374d2f77,[Ledu.cmu.lti.nlp.amr.Dependency;@2c6749fe),Annotation([Ljava.lang.String;@312ad978,[Ljava.lang.String;@742b6e7f,[Ljava.lang.String;@4f638f6e),Annotation([Ljava.lang.String;@115da77a,[Ljava.lang.String;@1b9e437e,[Ledu.cmu.lti.nlp.amr.Entity;@3361135c))
AMR:
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG2, s / so)
(p / promise-01, instrument, i / i)
(p / promise-01, manner, a / again)

Decoded in 39,194 microseconds
Sentence: more details of this are promised later this summer

Spans:
Span 1-2:  details => detail-01
Span 6-7:  later => late
Span 5-6:  promised => promise-01
Span 8-9:  summer => summer
Span 7-8:  this => this
Span 3-4:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),summer,summer,false), Span(7,8,List(1),this,this,false), Span(6,7,List(2),later,late,false), Span(5,6,List(3),promised,promise-01,false), Span(3,4,List(4),this,this,false), Span(1,2,List(5),details,detail-01,false)),Map(2 -> late, 5 -> detail-01, 1 -> this, 4 -> this, 0 -> summer, 3 -> promise-01),Map(t -> this, s -> summer, d -> detail-01, p -> promise-01, t2 -> this, l -> late))),[Ljava.lang.String;@2a3e175e,Annotation([Ljava.lang.String;@527031fc,[Ljava.lang.String;@43e1c1ac,[Ljava.lang.String;@1a722605),Annotation([Ljava.lang.String;@3c1e1fd3,[Ljava.lang.String;@5dbb747a,[Ledu.cmu.lti.nlp.amr.Dependency;@3ddc25a9),Annotation([Ljava.lang.String;@402c99f9,[Ljava.lang.String;@3030cb59,[Ljava.lang.String;@537658c6),Annotation([Ljava.lang.String;@7ebe59f8,[Ljava.lang.String;@304e9ca,[Ledu.cmu.lti.nlp.amr.Entity;@3790ce52))
AMR:
(d / detail-01, ARG1, t2 / this)
(l / late, op, s / summer)
(p / promise-01, ARG1, d / detail-01)
(p / promise-01, time, l / late)
(s / summer, mod, t / this)

Decoded in 13,748 microseconds
Sentence: we are dedicated to the exportoriented economy promised wu binghui the director of the provincial capitals commission for foreign economic relations and trade

Spans:
Span 21-22:  and => and
Span 16-17:  commission => commission
Span 2-3:  dedicated => dedicate-01
Span 11-12:  director => (have-org-role-91 :ARG2 director)
Span 19-20:  economic => economy
Span 6-7:  economy => economy
Span 18-19:  foreign => foreign
Span 7-8:  promised => promise-01
Span 14-15:  provincial => province
Span 20-21:  relations => relation
Span 22-23:  trade => trade-01
Span 0-1:  we => we

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),trade,trade-01,false), Span(21,22,List(1),and,and,false), Span(20,21,List(2),relations,relation,false), Span(19,20,List(3),economic,economy,false), Span(18,19,List(4),foreign,foreign,false), Span(16,17,List(5),commission,commission,false), Span(14,15,List(6),provincial,province,false), Span(11,12,List(8, 7),director,(have-org-role-91 :ARG2 director),false), Span(7,8,List(9),promised,promise-01,false), Span(6,7,List(10),economy,economy,false), Span(2,3,List(11),dedicated,dedicate-01,false), Span(0,1,List(12),we,we,false)),Map(2 -> relation, 5 -> commission, 12 -> we, 8 -> director, 7 -> have-org-role-91, 1 -> and, 4 -> foreign, 11 -> dedicate-01, 6 -> province, 0 -> trade-01, 9 -> promise-01, 3 -> economy, 10 -> economy),Map(e -> economy, w -> we, h -> have-org-role-91, t -> trade-01, p2 -> promise-01, e2 -> economy, d -> director, p -> province, a -> and, d2 -> dedicate-01, r -> relation, c -> commission, f -> foreign))),[Ljava.lang.String;@4af8524f,Annotation([Ljava.lang.String;@74e3e6fc,[Ljava.lang.String;@1e51e658,[Ljava.lang.String;@12e9aaf5),Annotation([Ljava.lang.String;@2ad6c486,[Ljava.lang.String;@7a004f62,[Ledu.cmu.lti.nlp.amr.Dependency;@2a5be981),Annotation([Ljava.lang.String;@783f29e0,[Ljava.lang.String;@7ad66ecc,[Ljava.lang.String;@14045215),Annotation([Ljava.lang.String;@27a8eaf7,[Ljava.lang.String;@42da1278,[Ledu.cmu.lti.nlp.amr.Entity;@7af2a691))
AMR:
(a / and, op, r / relation)
(a / and, op, t / trade-01)
(c / commission, mod, p / province)
(c / commission, topic, r / relation)
(d2 / dedicate-01, ARG0, w / we)
(d2 / dedicate-01, ARG2, e2 / economy)
(h / have-org-role-91, ARG1, c / commission)
(h / have-org-role-91, ARG2, d / director)
(p2 / promise-01, ARG1, e2 / economy)
(r / relation, mod, e / economy)
(t / trade-01, ARG0, w / we)
(t / trade-01, mod, f / foreign)

Decoded in 398,036 microseconds
Sentence: reflection on the analogous case of promises dispels this impression, there are times when making a certain promise say to look after a friends child if the friend dies before the child comes of age are morally worthwhile but where one does not have an obligation to make them remember that in this example too one may find other adequate ways to help ones friend, certainly one is not under an obligation to look after the child if one did not promise to do so just because it would have been a good thing to promise

Spans:
Span 60-61:  adequate => adequate
Span 76-77:  after => after
Span 22-23:  after => after
Span 35-36:  age => age-01
Span 88-89:  because => cause-01
Span 30-31:  before => before
Span 39-40:  but => contrast-01
Span 4-5:  case => case
Span 17-18:  certain => certain
Span 67-68:  certainly => certain
Span 78-79:  child => child
Span 32-33:  child => child
Span 25-26:  child => child
Span 29-30:  dies => die-01
Span 54-55:  example => example
Span 65-66:  friend => (have-rel-role-91 :ARG2 friend)
Span 28-29:  friend => (have-rel-role-91 :ARG2 friend)
Span 24-25:  friends => (have-rel-role-91 :ARG2 friend)
Span 94-95:  good => good
Span 63-64:  help => help-01
Span 9-10:  impression => impression
Span 89-90:  it => it
Span 87-88:  just => just
Span 57-58:  may => (date-entity :month 5)
Span 37-38:  morally => moral
Span 73-74:  obligation => obligate-01
Span 46-47:  obligation => obligate-01
Span 64-65:  ones => one
Span 59-60:  other => other
Span 97-98:  promise => promise-01
Span 83-84:  promise => promise-01
Span 18-19:  promise => promise-01
Span 6-7:  promises => promise-01
Span 0-1:  reflection => reflect-01
Span 50-51:  remember => remember-01
Span 19-20:  say => say-01
Span 86-87:  so => so
Span 95-96:  thing => thing
Span 53-54:  this => this
Span 8-9:  this => this
Span 55-56:  too => too
Span 61-62:  ways => way
Span 38-39:  worthwhile => worthwhile

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(97,98,List(0),promise,promise-01,false), Span(95,96,List(1),thing,thing,false), Span(94,95,List(2),good,good,false), Span(89,90,List(3),it,it,false), Span(88,89,List(4),because,cause-01,false), Span(87,88,List(5),just,just,false), Span(86,87,List(6),so,so,false), Span(83,84,List(7),promise,promise-01,false), Span(78,79,List(8),child,child,false), Span(76,77,List(9),after,after,false), Span(73,74,List(10),obligation,obligate-01,false), Span(67,68,List(11),certainly,certain,false), Span(65,66,List(13, 12),friend,(have-rel-role-91 :ARG2 friend),false), Span(64,65,List(14),ones,one,false), Span(63,64,List(15),help,help-01,false), Span(61,62,List(16),ways,way,false), Span(60,61,List(17),adequate,adequate,false), Span(59,60,List(18),other,other,false), Span(57,58,List(20, 19),may,(date-entity :month 5),false), Span(55,56,List(21),too,too,false), Span(54,55,List(22),example,example,false), Span(53,54,List(23),this,this,false), Span(50,51,List(24),remember,remember-01,false), Span(46,47,List(25),obligation,obligate-01,false), Span(39,40,List(26),but,contrast-01,false), Span(38,39,List(27),worthwhile,worthwhile,false), Span(37,38,List(28),morally,moral,false), Span(35,36,List(29),age,age-01,false), Span(32,33,List(30),child,child,false), Span(30,31,List(31),before,before,false), Span(29,30,List(32),dies,die-01,false), Span(28,29,List(34, 33),friend,(have-rel-role-91 :ARG2 friend),false), Span(25,26,List(35),child,child,false), Span(24,25,List(37, 36),friends,(have-rel-role-91 :ARG2 friend),false), Span(22,23,List(38),after,after,false), Span(19,20,List(39),say,say-01,false), Span(18,19,List(40),promise,promise-01,false), Span(17,18,List(41),certain,certain,false), Span(9,10,List(42),impression,impression,false), Span(8,9,List(43),this,this,false), Span(6,7,List(44),promises,promise-01,false), Span(4,5,List(45),case,case,false), Span(0,1,List(46),reflection,reflect-01,false)),Map(45 -> case, 39 -> say-01, 30 -> child, 2 -> good, 5 -> just, 33 -> have-rel-role-91, 27 -> worthwhile, 12 -> have-rel-role-91, 8 -> child, 15 -> help-01, 42 -> impression, 36 -> have-rel-role-91, 21 -> too, 18 -> other, 24 -> remember-01, 41 -> certain, 35 -> child, 7 -> promise-01, 1 -> thing, 17 -> adequate, 44 -> promise-01, 23 -> this, 38 -> after, 26 -> contrast-01, 4 -> cause-01, 11 -> certain, 32 -> die-01, 14 -> one, 29 -> age-01, 20 -> 5, 46 -> reflect-01, 34 -> friend, 28 -> moral, 6 -> so, 40 -> promise-01, 43 -> this, 9 -> after, 0 -> promise-01, 22 -> example, 16 -> way, 37 -> friend, 19 -> date-entity, 10 -> obligate-01, 3 -> it, 31 -> before, 25 -> obligate-01, 13 -> friend),Map(e -> example, w -> way, c8 -> case, h -> have-rel-role-91, t4 -> this, 5 -> 5, s2 -> say-01, h2 -> help-01, t -> thing, b -> before, o3 -> other, c7 -> certain, p2 -> promise-01, a3 -> age-01, c4 -> contrast-01, j -> just, s -> so, h4 -> have-rel-role-91, m -> moral, d -> date-entity, t3 -> this, r2 -> reflect-01, g -> good, p -> promise-01, c3 -> certain, a -> after, p4 -> promise-01, d2 -> die-01, o2 -> one, f3 -> friend, c6 -> child, i2 -> impression, t2 -> too, w2 -> worthwhile, i -> it, a2 -> adequate, r -> remember-01, h3 -> have-rel-role-91, c -> cause-01, f2 -> friend, f -> friend, o -> obligate-01, o4 -> obligate-01, p3 -> promise-01, c2 -> child, a4 -> after, c5 -> child))),[Ljava.lang.String;@dbb453d,Annotation([Ljava.lang.String;@1beaed6,[Ljava.lang.String;@dc8647f,[Ljava.lang.String;@5f3dd4ea),Annotation([Ljava.lang.String;@54657f7f,[Ljava.lang.String;@53959622,[Ledu.cmu.lti.nlp.amr.Dependency;@1b3bd0d),Annotation([Ljava.lang.String;@3f40a15a,[Ljava.lang.String;@2c213c27,[Ljava.lang.String;@39f43b13),Annotation([Ljava.lang.String;@51527a1e,[Ljava.lang.String;@7dcf7147,[Ledu.cmu.lti.nlp.amr.Entity;@3e162cd8))
AMR:
(a / after, op, c2 / child)
(a3 / age-01, ARG0, t2 / too)
(a3 / age-01, ARG1, c5 / child)
(a4 / after, op, c6 / child)
(c / cause-01, ARG1, i / it)
(c / cause-01, mod, j / just)
(c4 / contrast-01, ARG0, w2 / worthwhile)
(c4 / contrast-01, ARG1, i2 / impression)
(c8 / case, topic, p4 / promise-01)
(d / date-entity, month, 5 / 5)
(d2 / die-01, ARG1, c5 / child)
(d2 / die-01, time, b / before)
(e / example, mod, t3 / this)
(h / have-rel-role-91, ARG0, e / example)
(h / have-rel-role-91, ARG1, c2 / child)
(h / have-rel-role-91, ARG2, f / friend)
(h / have-rel-role-91, location, o2 / one)
(h2 / help-01, ARG0, d / date-entity)
(h2 / help-01, ARG1, o2 / one)
(h2 / help-01, instrument, w / way)
(h3 / have-rel-role-91, ARG1, w2 / worthwhile)
(h3 / have-rel-role-91, ARG2, f2 / friend)
(h3 / have-rel-role-91, time, b / before)
(h4 / have-rel-role-91, ARG0, c6 / child)
(h4 / have-rel-role-91, ARG1, o4 / obligate-01)
(h4 / have-rel-role-91, ARG2, f3 / friend)
(i2 / impression, mod, t4 / this)
(j / just, degree, s / so)
(o / obligate-01, ARG0, c2 / child)
(o / obligate-01, ARG1, g / good)
(o / obligate-01, manner, c3 / certain)
(o4 / obligate-01, ARG1, r / remember-01)
(p / promise-01, ARG1, t / thing)
(p2 / promise-01, ARG0, c2 / child)
(p2 / promise-01, ARG1, j / just)
(p3 / promise-01, ARG2, c7 / certain)
(p4 / promise-01, ARG1, h3 / have-rel-role-91)
(r / remember-01, ARG1, d / date-entity)
(r2 / reflect-01, ARG1, c8 / case)
(s2 / say-01, ARG1, p3 / promise-01)
(s2 / say-01, time, a4 / after)
(s2 / say-01, time, b / before)
(t / thing, mod, g / good)
(w / way, mod, a2 / adequate)
(w / way, mod, o3 / other)
(w2 / worthwhile, mod, m / moral)

Decoded in 2,468,594 microseconds
Sentence: however privatization now promises to change the ground rules whereby land drainage remains within the water authorities at all

Spans:
Span 18-19:  all => all
Span 16-17:  authorities => authority
Span 5-6:  change => change-01
Span 7-8:  ground => ground
Span 10-11:  land => land
Span 2-3:  now => now
Span 1-2:  privatization => privatize-01
Span 3-4:  promises => promise-01
Span 12-13:  remains => remain-01
Span 8-9:  rules => rule
Span 15-16:  water => water
Span 13-14:  within => within

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),all,all,false), Span(16,17,List(1),authorities,authority,false), Span(15,16,List(2),water,water,false), Span(13,14,List(3),within,within,false), Span(12,13,List(4),remains,remain-01,false), Span(10,11,List(5),land,land,false), Span(8,9,List(6),rules,rule,false), Span(7,8,List(7),ground,ground,false), Span(5,6,List(8),change,change-01,false), Span(3,4,List(9),promises,promise-01,false), Span(2,3,List(10),now,now,false), Span(1,2,List(11),privatization,privatize-01,false)),Map(2 -> water, 5 -> land, 8 -> change-01, 7 -> ground, 1 -> authority, 11 -> privatize-01, 4 -> remain-01, 6 -> rule, 9 -> promise-01, 0 -> all, 10 -> now, 3 -> within),Map(n -> now, w -> water, p2 -> privatize-01, p -> promise-01, g -> ground, r2 -> rule, a -> all, r -> remain-01, w2 -> within, a2 -> authority, c -> change-01, l -> land))),[Ljava.lang.String;@21da38c0,Annotation([Ljava.lang.String;@7dc3d69c,[Ljava.lang.String;@443edc45,[Ljava.lang.String;@7aef5903),Annotation([Ljava.lang.String;@77bd1302,[Ljava.lang.String;@1e2b25b8,[Ledu.cmu.lti.nlp.amr.Dependency;@22b96281),Annotation([Ljava.lang.String;@38f214f6,[Ljava.lang.String;@1d3e3faf,[Ljava.lang.String;@61c70928),Annotation([Ljava.lang.String;@522a533e,[Ljava.lang.String;@58bf3596,[Ledu.cmu.lti.nlp.amr.Entity;@7157385e))
AMR:
(a2 / authority, mod, w / water)
(c / change-01, ARG1, r2 / rule)
(c / change-01, time, r / remain-01)
(p / promise-01, ARG0, p2 / privatize-01)
(p / promise-01, ARG1, c / change-01)
(p / promise-01, time, n / now)
(r / remain-01, ARG0, l / land)
(r / remain-01, ARG1, a / all)
(r / remain-01, time, w2 / within)
(r2 / rule, location, g / ground)
(w2 / within, op, a2 / authority)

Decoded in 96,500 microseconds
Sentence: pete waterman had once promised his prodigy that one day he  would transform her into the madonna

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = pete waterman had once promised his prodigy that one day he  would transform her into the madonna
myTokenized = pete waterman had once promised his prodigy that one day he would transform her into the madonna
i = 11
prefix = List(pete, waterman, had, once, promised, his, prodigy, that, one, day, he, would)
regexr = \Qp\E ?\Qe\E ?\Qt\E ?\Qe\E ?\Qw\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qm\E ?\Qa\E ?\Qn\E ?\Qh\E ?\Qa\E ?\Qd\E ?\Qo\E ?\Qn\E ?\Qc\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qd\E ?\Qi\E ?\Qg\E ?\Qy\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qo\E ?\Qn\E ?\Qe\E ?\Qd\E ?\Qa\E ?\Qy\E ?\Qh\E ?\Qe\E ?\Qw\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he promised to resign as chairman of the central electricity generating board if the public inquiry into the building of the sizewell nuclear station went against him and later if the lights had gone out during the miners strike

Spans:
Span 27-28:  and => and
Span 18-19:  building => build-01
Span 8-9:  central => central
Span 5-6:  chairman => (have-org-role-91 :ARG2 chairman)
Span 9-10:  electricity => electricity
Span 10-11:  generating => generate-01
Span 0-1:  he => he
Span 15-16:  inquiry => inquire-01
Span 28-29:  later => late
Span 31-32:  lights => light
Span 37-38:  miners => (person :ARG0-of mine-01)
Span 22-23:  nuclear => nucleus
Span 1-2:  promised => promise-01
Span 14-15:  public => public
Span 3-4:  resign => resign-01
Span 23-24:  station => station
Span 38-39:  strike => strike-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),strike,strike-01,false), Span(37,38,List(2, 1),miners,(person :ARG0-of mine-01),false), Span(31,32,List(3),lights,light,false), Span(28,29,List(4),later,late,false), Span(27,28,List(5),and,and,false), Span(23,24,List(6),station,station,false), Span(22,23,List(7),nuclear,nucleus,false), Span(18,19,List(8),building,build-01,false), Span(15,16,List(9),inquiry,inquire-01,false), Span(14,15,List(10),public,public,false), Span(10,11,List(11),generating,generate-01,false), Span(9,10,List(12),electricity,electricity,false), Span(8,9,List(13),central,central,false), Span(5,6,List(15, 14),chairman,(have-org-role-91 :ARG2 chairman),false), Span(3,4,List(16),resign,resign-01,false), Span(1,2,List(17),promised,promise-01,false), Span(0,1,List(18),he,he,false)),Map(2 -> mine-01, 5 -> and, 12 -> electricity, 15 -> chairman, 8 -> build-01, 18 -> he, 7 -> nucleus, 17 -> promise-01, 1 -> person, 4 -> late, 11 -> generate-01, 14 -> have-org-role-91, 6 -> station, 0 -> strike-01, 9 -> inquire-01, 16 -> resign-01, 3 -> light, 10 -> public, 13 -> central),Map(e -> electricity, n -> nucleus, h -> have-org-role-91, h2 -> he, s2 -> station, b -> build-01, p2 -> public, s -> strike-01, m -> mine-01, p -> person, g -> generate-01, a -> and, l2 -> late, r -> resign-01, i -> inquire-01, c -> central, l -> light, p3 -> promise-01, c2 -> chairman))),[Ljava.lang.String;@35df58d,Annotation([Ljava.lang.String;@da3fdb5,[Ljava.lang.String;@9657d12,[Ljava.lang.String;@65f62d8f),Annotation([Ljava.lang.String;@5293b95,[Ljava.lang.String;@5606b5d8,[Ledu.cmu.lti.nlp.amr.Dependency;@528ca407),Annotation([Ljava.lang.String;@f64f1e8,[Ljava.lang.String;@2c45be3d,[Ljava.lang.String;@16ccad80),Annotation([Ljava.lang.String;@5792ba31,[Ljava.lang.String;@61fe13e1,[Ledu.cmu.lti.nlp.amr.Entity;@6fcb4b09))
AMR:
(a / and, op, l / light)
(a / and, op, s2 / station)
(b / build-01, ARG1, c / central)
(b / build-01, ARG2, s2 / station)
(g / generate-01, ARG1, e / electricity)
(h / have-org-role-91, ARG0, h2 / he)
(h / have-org-role-91, ARG1, g / generate-01)
(h / have-org-role-91, ARG2, c2 / chairman)
(i / inquire-01, ARG0, l2 / late)
(i / inquire-01, ARG1, b / build-01)
(i / inquire-01, mod, p2 / public)
(m / mine-01, ARG0, p / person)
(p3 / promise-01, ARG0, h2 / he)
(p3 / promise-01, ARG1, a / and)
(p3 / promise-01, ARG2, r / resign-01)
(s / strike-01, ARG0, p / person)
(s / strike-01, ARG1, a / and)
(s2 / station, mod, n / nucleus)

Decoded in 285,520 microseconds
Sentence: afghans he went on had been optimistic when miss bhutto came to power but she had betrayed all her promises to settle the afghan conflict

NER Entity: (thing :name (name :op "afghan"))
NER Entity: (thing :name (name :op "afghan"))
Spans:
Span 23-24:  afghan => (country :name (name :op "Afghanistan"))
Span 17-18:  all => all
Span 13-14:  but => contrast-01
Span 24-25:  conflict => conflict-01
Span 1-2:  he => he
Span 6-7:  optimistic => optimistic
Span 12-13:  power => power
Span 19-20:  promises => promise-01
Span 21-22:  settle => settle-02
Span 14-15:  she => she

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),conflict,conflict-01,false), Span(23,24,List(3, 2, 1),afghan,(country :name (name :op "Afghanistan")),false), Span(21,22,List(4),settle,settle-02,false), Span(19,20,List(5),promises,promise-01,false), Span(17,18,List(6),all,all,false), Span(14,15,List(7),she,she,false), Span(13,14,List(8),but,contrast-01,false), Span(12,13,List(9),power,power,false), Span(6,7,List(10),optimistic,optimistic,false), Span(1,2,List(11),he,he,false)),Map(2 -> name, 5 -> promise-01, 8 -> contrast-01, 7 -> she, 1 -> country, 11 -> he, 4 -> settle-02, 6 -> all, 9 -> power, 0 -> conflict-01, 10 -> optimistic, 3 -> "Afghanistan"),Map(n -> name, h -> he, s2 -> she, p2 -> power, s -> settle-02, p -> promise-01, c3 -> contrast-01, a -> all, c -> conflict-01, o -> optimistic, c2 -> country))),[Ljava.lang.String;@bab7536,Annotation([Ljava.lang.String;@259c3236,[Ljava.lang.String;@31a48a84,[Ljava.lang.String;@2981f992),Annotation([Ljava.lang.String;@1427f588,[Ljava.lang.String;@4b68be0e,[Ledu.cmu.lti.nlp.amr.Dependency;@4995afcf),Annotation([Ljava.lang.String;@24964c7,[Ljava.lang.String;@207745fd,[Ljava.lang.String;@7693f5b1),Annotation([Ljava.lang.String;@6be77448,[Ljava.lang.String;@28835a50,[Ledu.cmu.lti.nlp.amr.Entity;@479e4ef7))
AMR:
(c / conflict-01, ARG1, o / optimistic)
(c / conflict-01, mod, c2 / country)
(c2 / country, name, n / name)
(c3 / contrast-01, ARG1, p2 / power)
(c3 / contrast-01, ARG2, p / promise-01)
(n / name, op, "Afghanistan")
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, s / settle-02)
(p / promise-01, quant, a / all)
(s / settle-02, ARG0, s2 / she)
(s / settle-02, ARG1, c / conflict-01)

Decoded in 72,879 microseconds
Sentence: he has promised to tighten budgetary control throughout the group

Spans:
Span 5-6:  budgetary => budget-01
Span 6-7:  control => control-01
Span 9-10:  group => group
Span 0-1:  he => he
Span 2-3:  promised => promise-01
Span 7-8:  throughout => throughout
Span 4-5:  tighten => tighten-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),group,group,false), Span(7,8,List(1),throughout,throughout,false), Span(6,7,List(2),control,control-01,false), Span(5,6,List(3),budgetary,budget-01,false), Span(4,5,List(4),tighten,tighten-01,false), Span(2,3,List(5),promised,promise-01,false), Span(0,1,List(6),he,he,false)),Map(2 -> control-01, 5 -> promise-01, 1 -> throughout, 4 -> tighten-01, 6 -> he, 0 -> group, 3 -> budget-01),Map(h -> he, b -> budget-01, t -> throughout, p -> promise-01, g -> group, t2 -> tighten-01, c -> control-01))),[Ljava.lang.String;@6a525edc,Annotation([Ljava.lang.String;@45d1f40c,[Ljava.lang.String;@5aed63a3,[Ljava.lang.String;@172890f8),Annotation([Ljava.lang.String;@684595a8,[Ljava.lang.String;@30647e13,[Ledu.cmu.lti.nlp.amr.Dependency;@15912a37),Annotation([Ljava.lang.String;@6d6a8bf0,[Ljava.lang.String;@6e0971ae,[Ljava.lang.String;@2e068ef2),Annotation([Ljava.lang.String;@3092c979,[Ljava.lang.String;@74e93fd8,[Ledu.cmu.lti.nlp.amr.Entity;@7d5eb9de))
AMR:
(b / budget-01, ARG1, h / he)
(c / control-01, ARG1, g / group)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG2, t2 / tighten-01)
(t / throughout, op, g / group)
(t2 / tighten-01, ARG1, c / control-01)

Decoded in 18,373 microseconds
Sentence: laws election manifesto sturdily promised negations

Spans:
Span 1-2:  election => elect-01
Span 0-1:  laws => law
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),promised,promise-01,false), Span(1,2,List(1),election,elect-01,false), Span(0,1,List(2),laws,law,false)),Map(2 -> law, 1 -> elect-01, 0 -> promise-01),Map(e -> elect-01, p -> promise-01, l -> law))),[Ljava.lang.String;@55fcde1f,Annotation([Ljava.lang.String;@4c5af153,[Ljava.lang.String;@6699a74e,[Ljava.lang.String;@71b72681),Annotation([Ljava.lang.String;@2f41197a,[Ljava.lang.String;@5aefb0d2,[Ledu.cmu.lti.nlp.amr.Dependency;@2e41d9a2),Annotation([Ljava.lang.String;@65373267,[Ljava.lang.String;@ace3c1b,[Ljava.lang.String;@69cc1627),Annotation([Ljava.lang.String;@55c290b4,[Ljava.lang.String;@58aa4568,[Ledu.cmu.lti.nlp.amr.Entity;@12b2dc52))
AMR:
(e / elect-01, ARG1, l / law)
(p / promise-01, ARG0, l / law)

Decoded in 5,890 microseconds
Sentence: money guardian is edited by personal finance editor margaret hughes  direct line the royal bank of scotland offshoot has thrown down another gauntlet in the household insurance battlefield with a promise to cut 20 per cent off some insurance bills

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = money guardian is edited by personal finance editor margaret hughes  direct line the royal bank of scotland offshoot has thrown down another gauntlet in the household insurance battlefield with a promise to cut 20 per cent off some insurance bills
myTokenized = money guardian is edited by personal finance editor margaret hughes direct line the royal bank of scotland offshoot has thrown down another gauntlet in the household insurance battlefield with a promise to cut 20 per cent off some insurance bills
i = 10
prefix = List(money, guardian, is, edited, by, personal, finance, editor, margaret, hughes, direct)
regexr = \Qm\E ?\Qo\E ?\Qn\E ?\Qe\E ?\Qy\E ?\Qg\E ?\Qu\E ?\Qa\E ?\Qr\E ?\Qd\E ?\Qi\E ?\Qa\E ?\Qn\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qi\E ?\Qt\E ?\Qe\E ?\Qd\E ?\Qb\E ?\Qy\E ?\Qp\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Ql\E ?\Qf\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qn\E ?\Qc\E ?\Qe\E ?\Qe\E ?\Qd\E ?\Qi\E ?\Qt\E ?\Qo\E ?\Qr\E ?\Qm\E ?\Qa\E ?\Qr\E ?\Qg\E ?\Qa\E ?\Qr\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qd\E ?\Qi\E ?\Qr\E ?\Qe\E ?\Qc\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: mr bush has promised that malta will not be yalta

NER Entity: (country :name (name :op "malta"))
Spans:
Span 1-2:  bush => bush-league
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),promised,promise-01,false), Span(1,2,List(1),bush,bush-league,false)),Map(1 -> bush-league, 0 -> promise-01),Map(b -> bush-league, p -> promise-01))),[Ljava.lang.String;@6f4da460,Annotation([Ljava.lang.String;@5262d3b6,[Ljava.lang.String;@56397bfb,[Ljava.lang.String;@57fac7f6),Annotation([Ljava.lang.String;@115e149a,[Ljava.lang.String;@379a935e,[Ledu.cmu.lti.nlp.amr.Dependency;@5411cd7),Annotation([Ljava.lang.String;@75cc69f2,[Ljava.lang.String;@3f3fcb49,[Ljava.lang.String;@753b460f),Annotation([Ljava.lang.String;@674beea,[Ljava.lang.String;@5aa1f7f5,[Ledu.cmu.lti.nlp.amr.Entity;@3f9e244f))
AMR:
(p / promise-01, ARG0, b / bush-league)

Decoded in 6,136 microseconds
Sentence: mr jospin has promised to announce plans shortly for an ambitious building and repair programme which includes several new university departments both in and out of paris

NER Entity: (country :name (name :op "paris"))
Spans:
Span 10-11:  ambitious => ambitious
Span 23-24:  and => and
Span 12-13:  and => and
Span 5-6:  announce => announce-01
Span 21-22:  both => both
Span 11-12:  building => build-01
Span 20-21:  departments => department
Span 16-17:  includes => include-01
Span 18-19:  new => new
Span 6-7:  plans => plan-01
Span 14-15:  programme => program
Span 3-4:  promised => promise-01
Span 13-14:  repair => repair-01
Span 17-18:  several => several
Span 7-8:  shortly => short
Span 19-20:  university => university

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),and,and,false), Span(21,22,List(1),both,both,false), Span(20,21,List(2),departments,department,false), Span(19,20,List(3),university,university,false), Span(18,19,List(4),new,new,false), Span(17,18,List(5),several,several,false), Span(16,17,List(6),includes,include-01,false), Span(14,15,List(7),programme,program,false), Span(13,14,List(8),repair,repair-01,false), Span(12,13,List(9),and,and,false), Span(11,12,List(10),building,build-01,false), Span(10,11,List(11),ambitious,ambitious,false), Span(7,8,List(12),shortly,short,false), Span(6,7,List(13),plans,plan-01,false), Span(5,6,List(14),announce,announce-01,false), Span(3,4,List(15),promised,promise-01,false)),Map(2 -> department, 5 -> several, 12 -> short, 15 -> promise-01, 8 -> repair-01, 7 -> program, 1 -> both, 4 -> new, 11 -> ambitious, 14 -> announce-01, 6 -> include-01, 0 -> and, 9 -> and, 3 -> university, 10 -> build-01, 13 -> plan-01),Map(n -> new, s2 -> short, b -> both, b2 -> build-01, p2 -> plan-01, a3 -> ambitious, s -> several, d -> department, p -> program, a -> and, i -> include-01, r -> repair-01, a2 -> and, u -> university, p3 -> promise-01, a4 -> announce-01))),[Ljava.lang.String;@71fcc032,Annotation([Ljava.lang.String;@8ae4d15,[Ljava.lang.String;@6b46a226,[Ljava.lang.String;@6a3fa3cf),Annotation([Ljava.lang.String;@781ba187,[Ljava.lang.String;@5e09e3ab,[Ledu.cmu.lti.nlp.amr.Dependency;@5b421fc8),Annotation([Ljava.lang.String;@5234b246,[Ljava.lang.String;@1a43bd4,[Ljava.lang.String;@4553dc23),Annotation([Ljava.lang.String;@499a164,[Ljava.lang.String;@232ae98,[Ledu.cmu.lti.nlp.amr.Entity;@4d647e48))
AMR:
(a2 / and, op, b2 / build-01)
(a2 / and, op, p / program)
(a4 / announce-01, ARG0, u / university)
(a4 / announce-01, ARG1, p2 / plan-01)
(b2 / build-01, mod, a3 / ambitious)
(d / department, mod, n / new)
(d / department, quant, s / several)
(i / include-01, ARG0, b / both)
(i / include-01, ARG1, b2 / build-01)
(i / include-01, ARG2, a / and)
(p / program, mod, r / repair-01)
(p2 / plan-01, ARG1, a2 / and)
(p3 / promise-01, ARG2, a4 / announce-01)
(r / repair-01, mod, s2 / short)
(u / university, part, d / department)

Decoded in 243,924 microseconds
Sentence: but he perked up quickly and promised we will keep up the argument

Spans:
Span 5-6:  and => and
Span 12-13:  argument => argue-01
Span 0-1:  but => contrast-01
Span 1-2:  he => he
Span 6-7:  promised => promise-01
Span 4-5:  quickly => quick
Span 7-8:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),argument,argue-01,false), Span(7,8,List(1),we,we,false), Span(6,7,List(2),promised,promise-01,false), Span(5,6,List(3),and,and,false), Span(4,5,List(4),quickly,quick,false), Span(1,2,List(5),he,he,false), Span(0,1,List(6),but,contrast-01,false)),Map(2 -> promise-01, 5 -> he, 1 -> we, 4 -> quick, 6 -> contrast-01, 0 -> argue-01, 3 -> and),Map(w -> we, h -> he, q -> quick, p -> promise-01, a -> argue-01, a2 -> and, c -> contrast-01))),[Ljava.lang.String;@9ed0aa,Annotation([Ljava.lang.String;@3a954937,[Ljava.lang.String;@1ef9d7ed,[Ljava.lang.String;@24cf187e),Annotation([Ljava.lang.String;@18510b13,[Ljava.lang.String;@70ae18dd,[Ledu.cmu.lti.nlp.amr.Dependency;@35e28ef6),Annotation([Ljava.lang.String;@2d17d41d,[Ljava.lang.String;@7766d30b,[Ljava.lang.String;@7fa9b46a),Annotation([Ljava.lang.String;@5e83dca0,[Ljava.lang.String;@2309bcda,[Ledu.cmu.lti.nlp.amr.Entity;@544d9e2e))
AMR:
(a / argue-01, ARG0, w / we)
(a2 / and, op, p / promise-01)
(a2 / and, op, q / quick)
(c / contrast-01, ARG2, a2 / and)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, a / argue-01)

Decoded in 19,590 microseconds
Sentence:  comedy real pain and even rational intelligence glimmer fitfully in his speech promise the great human achievement coherence only to see them seconds later gutter out in the wind and the rain that blew through his skull

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  comedy real pain and even rational intelligence glimmer fitfully in his speech promise the great human achievement coherence only to see them seconds later gutter out in the wind and the rain that blew through his skull
myTokenized = comedy real pain and even rational intelligence glimmer fitfully in his speech promise the great human achievement coherence only to see them seconds later gutter out in the wind and the rain that blew through his skull
i = 0
prefix = List(comedy)
regexr = \Qc\E ?\Qo\E ?\Qm\E ?\Qe\E ?\Qd\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in what follows however he engagingly halfcontradicts himself  he urges her to verse promising to guard her good name and ending with an echo of coleridges frost at midnight

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = in what follows however he engagingly halfcontradicts himself  he urges her to verse promising to guard her good name and ending with an echo of coleridges frost at midnight
myTokenized = in what follows however he engagingly halfcontradicts himself he urges her to verse promising to guard her good name and ending with an echo of coleridges frost at midnight
i = 8
prefix = List(in, what, follows, however, he, engagingly, halfcontradicts, himself, he)
regexr = \Qi\E ?\Qn\E ?\Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qf\E ?\Qo\E ?\Ql\E ?\Ql\E ?\Qo\E ?\Qw\E ?\Qs\E ?\Qh\E ?\Qo\E ?\Qw\E ?\Qe\E ?\Qv\E ?\Qe\E ?\Qr\E ?\Qh\E ?\Qe\E ?\Qe\E ?\Qn\E ?\Qg\E ?\Qa\E ?\Qg\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Ql\E ?\Qy\E ?\Qh\E ?\Qa\E ?\Ql\E ?\Qf\E ?\Qc\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qd\E ?\Qi\E ?\Qc\E ?\Qt\E ?\Qs\E ?\Qh\E ?\Qi\E ?\Qm\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qf\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: at least dollars 50000 went directly to rafael angel calderon the opposition social christian candidate who described president ariass peace plan as a defamation of masculine values and promised to back us policy in central america

NER Entity: (country :name (name :op "america"))
NER Entity: (country :name (name :op "america"))
Spans:
Span 3-4:  50000 => 50000
Span 35-36:  america => (country :name (name :op "America"))
Span 27-28:  and => and
Span 30-31:  back => back
Span 14-15:  candidate => candidate
Span 34-35:  central => central
Span 13-14:  christian => (religious-group :name (name :op "Christian"))
Span 23-24:  defamation => defame-01
Span 16-17:  described => describe-01
Span 5-6:  directly => direct
Span 2-3:  dollars => (monetary-quantity :unit dollar)
Span 11-12:  opposition => oppose-01
Span 19-20:  peace => peace
Span 20-21:  plan => plan-01
Span 32-33:  policy => policy
Span 17-18:  president => (have-org-role-91 :ARG2 president)
Span 28-29:  promised => promise-01
Span 12-13:  social => society
Span 26-27:  values => value

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(2, 1, 0),america,(country :name (name :op "America")),false), Span(34,35,List(3),central,central,false), Span(32,33,List(4),policy,policy,false), Span(30,31,List(5),back,back,false), Span(28,29,List(6),promised,promise-01,false), Span(27,28,List(7),and,and,false), Span(26,27,List(8),values,value,false), Span(23,24,List(9),defamation,defame-01,false), Span(20,21,List(10),plan,plan-01,false), Span(19,20,List(11),peace,peace,false), Span(17,18,List(13, 12),president,(have-org-role-91 :ARG2 president),false), Span(16,17,List(14),described,describe-01,false), Span(14,15,List(15),candidate,candidate,false), Span(13,14,List(18, 17, 16),christian,(religious-group :name (name :op "Christian")),false), Span(12,13,List(19),social,society,false), Span(11,12,List(20),opposition,oppose-01,false), Span(5,6,List(21),directly,direct,false), Span(3,4,List(22),50000,50000,false), Span(2,3,List(24, 23),dollars,(monetary-quantity :unit dollar),false)),Map(2 -> "America", 5 -> back, 12 -> have-org-role-91, 8 -> value, 15 -> candidate, 21 -> direct, 18 -> "Christian", 24 -> dollar, 7 -> and, 1 -> name, 17 -> name, 23 -> monetary-quantity, 4 -> policy, 11 -> peace, 14 -> describe-01, 20 -> oppose-01, 6 -> promise-01, 9 -> defame-01, 0 -> country, 22 -> 50000, 16 -> religious-group, 19 -> society, 10 -> plan-01, 3 -> central, 13 -> president),Map(n -> name, h -> have-org-role-91, 5 -> 50000, p5 -> president, b -> back, d3 -> direct, p2 -> promise-01, s -> society, v -> value, m -> monetary-quantity, d -> defame-01, p -> policy, c3 -> candidate, a -> and, p4 -> peace, d2 -> describe-01, r -> religious-group, c -> country, d4 -> dollar, o -> oppose-01, p3 -> plan-01, n2 -> name, c2 -> central))),[Ljava.lang.String;@2ea72c70,Annotation([Ljava.lang.String;@615684fd,[Ljava.lang.String;@77352ff7,[Ljava.lang.String;@44e03e45),Annotation([Ljava.lang.String;@5e184756,[Ljava.lang.String;@bf38f5d,[Ledu.cmu.lti.nlp.amr.Dependency;@234928cc),Annotation([Ljava.lang.String;@18157b2d,[Ljava.lang.String;@2a49d3b5,[Ljava.lang.String;@54ea25c3),Annotation([Ljava.lang.String;@585550c2,[Ljava.lang.String;@49291ddc,[Ledu.cmu.lti.nlp.amr.Entity;@2a677c0a))
AMR:
(a / and, op, p2 / promise-01)
(a / and, op, p3 / plan-01)
(b / back, quant, p / policy)
(c / country, mod, c2 / central)
(c / country, name, n / name)
(c3 / candidate, mod, r / religious-group)
(d / defame-01, ARG1, v / value)
(d2 / describe-01, ARG0, c3 / candidate)
(d2 / describe-01, ARG1, p3 / plan-01)
(d2 / describe-01, ARG2, h / have-org-role-91)
(h / have-org-role-91, ARG0, s / society)
(h / have-org-role-91, ARG1, d3 / direct)
(h / have-org-role-91, ARG2, p5 / president)
(m / monetary-quantity, unit, d4 / dollar)
(n / name, op, "America")
(n2 / name, op, "Christian")
(o / oppose-01, ARG0, c3 / candidate)
(o / oppose-01, ARG1, 5 / 50000)
(p2 / promise-01, ARG0, m / monetary-quantity)
(p2 / promise-01, ARG2, b / back)
(p3 / plan-01, ARG0, c / country)
(p3 / plan-01, ARG1, p4 / peace)
(p3 / plan-01, time, d / defame-01)
(r / religious-group, name, n2 / name)

Decoded in 516,654 microseconds
Sentence: whatever the mortgage rates their support would be promised as readily as jumble for the cobham village fete

Spans:
Span 2-3:  mortgage => mortgage-01
Span 8-9:  promised => promise-01
Span 3-4:  rates => rate
Span 10-11:  readily => ready
Span 5-6:  support => support-01
Span 16-17:  village => village
Span 0-1:  whatever => whatever

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),village,village,false), Span(10,11,List(1),readily,ready,false), Span(8,9,List(2),promised,promise-01,false), Span(5,6,List(3),support,support-01,false), Span(3,4,List(4),rates,rate,false), Span(2,3,List(5),mortgage,mortgage-01,false), Span(0,1,List(6),whatever,whatever,false)),Map(2 -> promise-01, 5 -> mortgage-01, 1 -> ready, 4 -> rate, 6 -> whatever, 0 -> village, 3 -> support-01),Map(w -> whatever, s -> support-01, m -> mortgage-01, v -> village, r2 -> rate, p -> promise-01, r -> ready))),[Ljava.lang.String;@70008a45,Annotation([Ljava.lang.String;@3375f175,[Ljava.lang.String;@43f52b8,[Ljava.lang.String;@594fb035),Annotation([Ljava.lang.String;@7eb99561,[Ljava.lang.String;@49fe5446,[Ledu.cmu.lti.nlp.amr.Dependency;@584ee59d),Annotation([Ljava.lang.String;@23c4d3b6,[Ljava.lang.String;@4f276412,[Ljava.lang.String;@231b0257),Annotation([Ljava.lang.String;@4236afc2,[Ljava.lang.String;@144d0b84,[Ledu.cmu.lti.nlp.amr.Entity;@4e2f1185))
AMR:
(m / mortgage-01, ARG1, w / whatever)
(p / promise-01, ARG0, m / mortgage-01)
(p / promise-01, ARG1, s / support-01)
(p / promise-01, manner, r / ready)
(r2 / rate, mod, m / mortgage-01)
(s / support-01, ARG1, v / village)

Decoded in 27,957 microseconds
Sentence: four months after the royal ordnance purchase was completed he is seen as the architect of the plant closure and redevelopment plans which promise to allow bae to recoup the 190m purchase price many times over

Spans:
Span 2-3:  after => after
Span 25-26:  allow => allow-01
Span 19-20:  and => and
Span 8-9:  completed => complete-01
Span 0-1:  four => 4
Span 9-10:  he => he
Span 33-34:  many => many
Span 1-2:  months => (temporal-quantity :unit month)
Span 21-22:  plans => plan-01
Span 17-18:  plant => plant
Span 32-33:  price => (thing :ARG2-of price-01)
Span 23-24:  promise => promise-01
Span 31-32:  purchase => purchase-01
Span 6-7:  purchase => purchase-01
Span 4-5:  royal => royal
Span 11-12:  seen => see-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),many,many,false), Span(32,33,List(2, 1),price,(thing :ARG2-of price-01),false), Span(31,32,List(3),purchase,purchase-01,false), Span(25,26,List(4),allow,allow-01,false), Span(23,24,List(5),promise,promise-01,false), Span(21,22,List(6),plans,plan-01,false), Span(19,20,List(7),and,and,false), Span(17,18,List(8),plant,plant,false), Span(11,12,List(9),seen,see-01,false), Span(9,10,List(10),he,he,false), Span(8,9,List(11),completed,complete-01,false), Span(6,7,List(12),purchase,purchase-01,false), Span(4,5,List(13),royal,royal,false), Span(2,3,List(14),after,after,false), Span(1,2,List(16, 15),months,(temporal-quantity :unit month),false), Span(0,1,List(17),four,4,false)),Map(2 -> price-01, 5 -> promise-01, 12 -> purchase-01, 15 -> temporal-quantity, 8 -> plant, 7 -> and, 17 -> 4, 1 -> thing, 4 -> allow-01, 11 -> complete-01, 14 -> after, 6 -> plan-01, 0 -> many, 9 -> see-01, 16 -> month, 3 -> purchase-01, 10 -> he, 13 -> royal),Map(h -> he, p5 -> plant, t -> thing, m2 -> month, p2 -> purchase-01, a3 -> after, s -> see-01, m -> many, p -> price-01, 4 -> 4, a -> allow-01, p4 -> plan-01, t2 -> temporal-quantity, r -> royal, a2 -> and, c -> complete-01, p6 -> purchase-01, p3 -> promise-01))),[Ljava.lang.String;@6d1b3c0,Annotation([Ljava.lang.String;@317005bf,[Ljava.lang.String;@318957f4,[Ljava.lang.String;@2fed6d94),Annotation([Ljava.lang.String;@cb52821,[Ljava.lang.String;@495d950b,[Ledu.cmu.lti.nlp.amr.Dependency;@1ee42ace),Annotation([Ljava.lang.String;@15b64a3a,[Ljava.lang.String;@72c330f8,[Ljava.lang.String;@6cc424a4),Annotation([Ljava.lang.String;@4141c2c5,[Ljava.lang.String;@445a34fb,[Ledu.cmu.lti.nlp.amr.Entity;@7e4c6dcb))
AMR:
(a / allow-01, ARG0, p4 / plan-01)
(a / allow-01, ARG1, t / thing)
(a2 / and, op, p4 / plan-01)
(a3 / after, op, c / complete-01)
(a3 / after, quant, t2 / temporal-quantity)
(c / complete-01, ARG1, s / see-01)
(c / complete-01, ARG2, p6 / purchase-01)
(p / price-01, ARG2, t / thing)
(p2 / purchase-01, ARG0, t / thing)
(p2 / purchase-01, ARG1, m / many)
(p3 / promise-01, ARG1, a / allow-01)
(p6 / purchase-01, ARG1, p5 / plant)
(p6 / purchase-01, ARG4, r / royal)
(s / see-01, ARG0, h / he)
(s / see-01, ARG1, a2 / and)
(t2 / temporal-quantity, quant, 4 / 4)
(t2 / temporal-quantity, unit, m2 / month)

Decoded in 825,330 microseconds
Sentence: to make swifter unity on west german terms more attractive to east germans mr kohl has all but promised that their savings will be converted over time from monopolymoney ostmarks into rockribbed dmarks at the ridiculously unrealistic rate of 11

NER Entity: (thing :name (name :op "german"))
Spans:
Span 39-40:  11 => 11
Span 16-17:  all => all
Span 9-10:  attractive => attract-01
Span 17-18:  but => contrast-01
Span 24-25:  converted => convert-01
Span 11-12:  east => east
Span 12-13:  germans => (person :mod (country :name (name :op "Germany")))
Span 18-19:  promised => promise-01
Span 37-38:  rate => rate
Span 35-36:  ridiculously => ridiculous
Span 7-8:  terms => term
Span 26-27:  time => time
Span 3-4:  unity => (name :op "Unity")
Span 36-37:  unrealistic => realistic
Span 5-6:  west => west

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),11,11,false), Span(37,38,List(1),rate,rate,false), Span(36,37,List(2),unrealistic,realistic,false), Span(35,36,List(3),ridiculously,ridiculous,false), Span(26,27,List(4),time,time,false), Span(24,25,List(5),converted,convert-01,false), Span(18,19,List(6),promised,promise-01,false), Span(17,18,List(7),but,contrast-01,false), Span(16,17,List(8),all,all,false), Span(12,13,List(12, 11, 10, 9),germans,(person :mod (country :name (name :op "Germany"))),false), Span(11,12,List(13),east,east,false), Span(9,10,List(14),attractive,attract-01,false), Span(7,8,List(15),terms,term,false), Span(5,6,List(16),west,west,false), Span(3,4,List(18, 17),unity,(name :op "Unity"),false)),Map(2 -> realistic, 5 -> convert-01, 12 -> "Germany", 15 -> term, 8 -> all, 18 -> "Unity", 7 -> contrast-01, 17 -> name, 1 -> rate, 4 -> time, 11 -> name, 14 -> attract-01, 6 -> promise-01, 0 -> 11, 9 -> person, 16 -> west, 3 -> ridiculous, 10 -> country, 13 -> east),Map(e -> east, w -> west, n -> name, r3 -> ridiculous, t -> time, p2 -> person, 1 -> 11, r2 -> realistic, p -> promise-01, a -> all, c3 -> country, t2 -> term, a2 -> attract-01, r -> rate, c -> convert-01, n2 -> name, c2 -> contrast-01))),[Ljava.lang.String;@4bbc6b34,Annotation([Ljava.lang.String;@3f2249c4,[Ljava.lang.String;@6419033d,[Ljava.lang.String;@2623cd22),Annotation([Ljava.lang.String;@787086bd,[Ljava.lang.String;@239e2011,[Ledu.cmu.lti.nlp.amr.Dependency;@624b4e5b),Annotation([Ljava.lang.String;@3e056ac7,[Ljava.lang.String;@55a54ea0,[Ljava.lang.String;@57cd164d),Annotation([Ljava.lang.String;@59734643,[Ljava.lang.String;@1f0a0696,[Ledu.cmu.lti.nlp.amr.Entity;@4b3671c5))
AMR:
(a2 / attract-01, ARG1, p2 / person)
(a2 / attract-01, ARG2, t2 / term)
(c / convert-01, ARG1, n2 / name)
(c / convert-01, ARG2, t / time)
(c2 / contrast-01, ARG0, 1 / 11)
(c2 / contrast-01, ARG1, a / all)
(c2 / contrast-01, ARG2, p / promise-01)
(c3 / country, name, n / name)
(n / name, op, "Germany")
(n2 / name, op, "Unity")
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, c / convert-01)
(p2 / person, mod, c3 / country)
(p2 / person, mod, e / east)
(r / rate, mod, r2 / realistic)
(r / rate, time, 1 / 11)
(r2 / realistic, mod, r3 / ridiculous)
(t2 / term, mod, w / west)

Decoded in 399,840 microseconds
Sentence: tomas brolin who may be too young to know better also promises a lack of inhibition

Spans:
Span 10-11:  also => also
Span 8-9:  know => know-01
Span 13-14:  lack => lack-01
Span 3-4:  may => (date-entity :month 5)
Span 11-12:  promises => promise-01
Span 5-6:  too => too
Span 6-7:  young => young

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),lack,lack-01,false), Span(11,12,List(1),promises,promise-01,false), Span(10,11,List(2),also,also,false), Span(8,9,List(3),know,know-01,false), Span(6,7,List(4),young,young,false), Span(5,6,List(5),too,too,false), Span(3,4,List(7, 6),may,(date-entity :month 5),false)),Map(2 -> also, 5 -> too, 7 -> 5, 1 -> promise-01, 4 -> young, 6 -> date-entity, 0 -> lack-01, 3 -> know-01),Map(5 -> 5, t -> too, k -> know-01, d -> date-entity, y -> young, p -> promise-01, a -> also, l -> lack-01))),[Ljava.lang.String;@63676316,Annotation([Ljava.lang.String;@189a6c56,[Ljava.lang.String;@423e8eb8,[Ljava.lang.String;@190bf402),Annotation([Ljava.lang.String;@5fc0bc26,[Ljava.lang.String;@668093e6,[Ledu.cmu.lti.nlp.amr.Dependency;@36e159d),Annotation([Ljava.lang.String;@304cf82d,[Ljava.lang.String;@d396b21,[Ljava.lang.String;@34a84a4f),Annotation([Ljava.lang.String;@14a6a38b,[Ljava.lang.String;@483b0544,[Ledu.cmu.lti.nlp.amr.Entity;@1ad6d868))
AMR:
(d / date-entity, domain, y / young)
(d / date-entity, month, 5 / 5)
(k / know-01, mod, a / also)
(p / promise-01, ARG1, l / lack-01)
(p / promise-01, manner, a / also)
(y / young, degree, t / too)
(y / young, domain, k / know-01)

Decoded in 26,513 microseconds
Sentence: reforms were promised to remove persisting inequities

Spans:
Span 5-6:  persisting => persist-01
Span 2-3:  promised => promise-01
Span 0-1:  reforms => reform-01
Span 4-5:  remove => remove-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),persisting,persist-01,false), Span(4,5,List(1),remove,remove-01,false), Span(2,3,List(2),promised,promise-01,false), Span(0,1,List(3),reforms,reform-01,false)),Map(2 -> promise-01, 1 -> remove-01, 0 -> persist-01, 3 -> reform-01),Map(p2 -> promise-01, r2 -> reform-01, p -> persist-01, r -> remove-01))),[Ljava.lang.String;@173bb17a,Annotation([Ljava.lang.String;@5000cc80,[Ljava.lang.String;@64721088,[Ljava.lang.String;@7c9b843c),Annotation([Ljava.lang.String;@4606bf0d,[Ljava.lang.String;@64e91265,[Ledu.cmu.lti.nlp.amr.Dependency;@1b6d8a5),Annotation([Ljava.lang.String;@b493984,[Ljava.lang.String;@745f0ee5,[Ljava.lang.String;@ccb1813),Annotation([Ljava.lang.String;@69998df4,[Ljava.lang.String;@6036c455,[Ledu.cmu.lti.nlp.amr.Entity;@2b93d9cc))
AMR:
(p2 / promise-01, ARG1, r2 / reform-01)
(p2 / promise-01, ARG2, r / remove-01)
(r / remove-01, ARG1, p / persist-01)

Decoded in 21,448 microseconds
Sentence: in todays mood of widespread resentment against the press they prudently did not want to be caught out promising more than they could deliver

Spans:
Span 22-23:  could => possible
Span 23-24:  deliver => deliver-01
Span 2-3:  mood => mood
Span 8-9:  press => press
Span 18-19:  promising => promise-01
Span 5-6:  resentment => resent-01
Span 21-22:  they => they
Span 9-10:  they => they
Span 13-14:  want => want-01
Span 4-5:  widespread => wide

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),deliver,deliver-01,false), Span(22,23,List(1),could,possible,false), Span(21,22,List(2),they,they,false), Span(18,19,List(3),promising,promise-01,false), Span(13,14,List(4),want,want-01,false), Span(9,10,List(5),they,they,false), Span(8,9,List(6),press,press,false), Span(5,6,List(7),resentment,resent-01,false), Span(4,5,List(8),widespread,wide,false), Span(2,3,List(9),mood,mood,false)),Map(2 -> they, 5 -> they, 8 -> wide, 7 -> resent-01, 1 -> possible, 4 -> want-01, 6 -> press, 9 -> mood, 0 -> deliver-01, 3 -> promise-01),Map(w -> want-01, t -> they, p2 -> promise-01, m -> mood, d -> deliver-01, p -> possible, t2 -> they, w2 -> wide, r -> resent-01, p3 -> press))),[Ljava.lang.String;@77bff66d,Annotation([Ljava.lang.String;@5bcbab86,[Ljava.lang.String;@186a197f,[Ljava.lang.String;@5dafed5e),Annotation([Ljava.lang.String;@4908e65f,[Ljava.lang.String;@674c8c6e,[Ledu.cmu.lti.nlp.amr.Dependency;@5297bebd),Annotation([Ljava.lang.String;@686b94a7,[Ljava.lang.String;@6eec957f,[Ljava.lang.String;@6e4afdbd),Annotation([Ljava.lang.String;@7d58bbdc,[Ljava.lang.String;@4c95a8ce,[Ledu.cmu.lti.nlp.amr.Entity;@757d93a9))
AMR:
(d / deliver-01, ARG0, t / they)
(d / deliver-01, mod, p / possible)
(p2 / promise-01, ARG0, t / they)
(p2 / promise-01, ARG1, w / want-01)
(r / resent-01, ARG0, p3 / press)
(r / resent-01, ARG1, m / mood)
(r / resent-01, mod, w2 / wide)
(w / want-01, ARG0, t2 / they)
(w / want-01, ARG1, p3 / press)

Decoded in 240,298 microseconds
Sentence: new years eve promises to be one immense berlin wall party with millions of east berliners joining the fun dash

NER Entity: (country :name (name :op "berlin"))
Spans:
Span 14-15:  east => east
Span 2-3:  eve => eve
Span 18-19:  fun => fun
Span 7-8:  immense => immense
Span 16-17:  joining => join-01
Span 0-1:  new => new
Span 10-11:  party => party
Span 3-4:  promises => promise-01
Span 9-10:  wall => wall
Span 1-2:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),fun,fun,false), Span(16,17,List(1),joining,join-01,false), Span(14,15,List(2),east,east,false), Span(10,11,List(3),party,party,false), Span(9,10,List(4),wall,wall,false), Span(7,8,List(5),immense,immense,false), Span(3,4,List(6),promises,promise-01,false), Span(2,3,List(7),eve,eve,false), Span(1,2,List(9, 8),years,(temporal-quantity :unit year),false), Span(0,1,List(10),new,new,false)),Map(2 -> east, 5 -> immense, 8 -> temporal-quantity, 7 -> eve, 1 -> join-01, 4 -> wall, 6 -> promise-01, 9 -> year, 0 -> fun, 10 -> new, 3 -> party),Map(n -> new, w -> wall, e -> east, t -> temporal-quantity, e2 -> eve, p2 -> promise-01, j -> join-01, y -> year, p -> party, i -> immense, f -> fun))),[Ljava.lang.String;@7697882,Annotation([Ljava.lang.String;@1d66a29b,[Ljava.lang.String;@3d3d7d31,[Ljava.lang.String;@fe63b60),Annotation([Ljava.lang.String;@544423c7,[Ljava.lang.String;@45890909,[Ledu.cmu.lti.nlp.amr.Dependency;@27b05189),Annotation([Ljava.lang.String;@28b90dba,[Ljava.lang.String;@d344339,[Ljava.lang.String;@622959f4),Annotation([Ljava.lang.String;@8d0d485,[Ljava.lang.String;@46306c48,[Ledu.cmu.lti.nlp.amr.Entity;@15150ef8))
AMR:
(e / east, op, p2 / promise-01)
(e2 / eve, duration, t / temporal-quantity)
(e2 / eve, mod, n / new)
(j / join-01, ARG1, f / fun)
(p / party, mod, i / immense)
(p / party, mod, w / wall)
(p2 / promise-01, ARG0, e2 / eve)
(p2 / promise-01, ARG1, p / party)
(p2 / promise-01, ARG2, j / join-01)
(t / temporal-quantity, unit, y / year)

Decoded in 111,941 microseconds
Sentence: for a bike that promised to be boring hondas pacific coast was surprisingly good fun to ride and its comfort and luggage space were welcome

Spans:
Span 20-21:  and => and
Span 17-18:  and => and
Span 2-3:  bike => bike
Span 7-8:  boring => bore-02
Span 10-11:  coast => coast
Span 19-20:  comfort => comfort-01
Span 14-15:  fun => fun
Span 13-14:  good => good
Span 21-22:  luggage => luggage
Span 4-5:  promised => promise-01
Span 16-17:  ride => ride-01
Span 22-23:  space => space
Span 12-13:  surprisingly => surprise-01
Span 24-25:  welcome => welcome-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),welcome,welcome-01,false), Span(22,23,List(1),space,space,false), Span(21,22,List(2),luggage,luggage,false), Span(20,21,List(3),and,and,false), Span(19,20,List(4),comfort,comfort-01,false), Span(17,18,List(5),and,and,false), Span(16,17,List(6),ride,ride-01,false), Span(14,15,List(7),fun,fun,false), Span(13,14,List(8),good,good,false), Span(12,13,List(9),surprisingly,surprise-01,false), Span(10,11,List(10),coast,coast,false), Span(7,8,List(11),boring,bore-02,false), Span(4,5,List(12),promised,promise-01,false), Span(2,3,List(13),bike,bike,false)),Map(2 -> luggage, 5 -> and, 12 -> promise-01, 8 -> good, 7 -> fun, 1 -> space, 4 -> comfort-01, 11 -> bore-02, 6 -> ride-01, 0 -> welcome-01, 9 -> surprise-01, 3 -> and, 10 -> coast, 13 -> bike),Map(w -> welcome-01, s2 -> surprise-01, b -> bore-02, b2 -> bike, s -> space, g -> good, p -> promise-01, a -> and, a2 -> and, r -> ride-01, c -> comfort-01, l -> luggage, f -> fun, c2 -> coast))),[Ljava.lang.String;@1989c698,Annotation([Ljava.lang.String;@244d3241,[Ljava.lang.String;@481e5c05,[Ljava.lang.String;@412b7140),Annotation([Ljava.lang.String;@b18422d,[Ljava.lang.String;@65a09e0b,[Ledu.cmu.lti.nlp.amr.Dependency;@13e8184d),Annotation([Ljava.lang.String;@6a937170,[Ljava.lang.String;@75fca6b9,[Ljava.lang.String;@1e25f833),Annotation([Ljava.lang.String;@4ec9ebbb,[Ljava.lang.String;@2a936a66,[Ledu.cmu.lti.nlp.amr.Entity;@342e6460))
AMR:
(a / and, op, c / comfort-01)
(a / and, op, s / space)
(a2 / and, op, f / fun)
(a2 / and, op, w / welcome-01)
(b / bore-02, ARG1, b2 / bike)
(f / fun, mod, g / good)
(p / promise-01, ARG2, b / bore-02)
(r / ride-01, ARG0, f / fun)
(r / ride-01, ARG1, c2 / coast)
(s / space, mod, l / luggage)
(s2 / surprise-01, ARG1, p / promise-01)
(w / welcome-01, ARG0, b2 / bike)
(w / welcome-01, ARG1, a / and)

Decoded in 173,067 microseconds
Sentence: although graciela winkelreid was keifetzs only child by his second wife neither father nor daughter had acknowledged each other since gracielas fourteenth birthday when keifetz had given her a mercedesbenz when he knew well that it was an astonmartin he had promised her

Spans:
Span 16-17:  acknowledged => acknowledge-01
Span 22-23:  birthday => birthday
Span 6-7:  child => child
Span 14-15:  daughter => (have-rel-role-91 :ARG2 daughter)
Span 17-18:  each => each
Span 12-13:  father => (have-rel-role-91 :ARG2 father)
Span 26-27:  given => give-01
Span 39-40:  he => he
Span 31-32:  he => he
Span 35-36:  it => it
Span 32-33:  knew => know-01
Span 5-6:  only => only
Span 18-19:  other => other
Span 41-42:  promised => promise-01
Span 19-20:  since => since
Span 33-34:  well => well
Span 10-11:  wife => (have-rel-role-91 :ARG2 wife)

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),promised,promise-01,false), Span(39,40,List(1),he,he,false), Span(35,36,List(2),it,it,false), Span(33,34,List(3),well,well,false), Span(32,33,List(4),knew,know-01,false), Span(31,32,List(5),he,he,false), Span(26,27,List(6),given,give-01,false), Span(22,23,List(7),birthday,birthday,false), Span(19,20,List(8),since,since,false), Span(18,19,List(9),other,other,false), Span(17,18,List(10),each,each,false), Span(16,17,List(11),acknowledged,acknowledge-01,false), Span(14,15,List(13, 12),daughter,(have-rel-role-91 :ARG2 daughter),false), Span(12,13,List(15, 14),father,(have-rel-role-91 :ARG2 father),false), Span(10,11,List(17, 16),wife,(have-rel-role-91 :ARG2 wife),false), Span(6,7,List(18),child,child,false), Span(5,6,List(19),only,only,false)),Map(2 -> it, 5 -> he, 12 -> have-rel-role-91, 15 -> father, 8 -> since, 18 -> child, 7 -> birthday, 17 -> wife, 1 -> he, 4 -> know-01, 11 -> acknowledge-01, 14 -> have-rel-role-91, 6 -> give-01, 0 -> promise-01, 9 -> other, 16 -> have-rel-role-91, 19 -> only, 3 -> well, 10 -> each, 13 -> daughter),Map(h5 -> have-rel-role-91, e -> each, w -> well, h -> he, h2 -> he, k -> know-01, b -> birthday, s -> since, h4 -> have-rel-role-91, d -> daughter, p -> promise-01, g -> give-01, a -> acknowledge-01, o2 -> only, w2 -> wife, i -> it, c -> child, h3 -> have-rel-role-91, f -> father, o -> other))),[Ljava.lang.String;@4ed14172,Annotation([Ljava.lang.String;@c1fcbcb,[Ljava.lang.String;@7b7c82a4,[Ljava.lang.String;@2b651c52),Annotation([Ljava.lang.String;@7b2661bf,[Ljava.lang.String;@14db81c3,[Ledu.cmu.lti.nlp.amr.Dependency;@572433e7),Annotation([Ljava.lang.String;@9cbaf63,[Ljava.lang.String;@1b67919b,[Ljava.lang.String;@2c88652b),Annotation([Ljava.lang.String;@2eaa00e4,[Ljava.lang.String;@1b2090ab,[Ledu.cmu.lti.nlp.amr.Entity;@76f9d876))
AMR:
(a / acknowledge-01, ARG0, i / it)
(a / acknowledge-01, ARG1, c / child)
(a / acknowledge-01, time, g / give-01)
(c / child, mod, o2 / only)
(g / give-01, ARG0, h2 / he)
(g / give-01, ARG1, b / birthday)
(h3 / have-rel-role-91, ARG1, h / he)
(h3 / have-rel-role-91, ARG2, d / daughter)
(h4 / have-rel-role-91, ARG1, h2 / he)
(h4 / have-rel-role-91, ARG2, f / father)
(h5 / have-rel-role-91, ARG1, h2 / he)
(h5 / have-rel-role-91, ARG2, w2 / wife)
(k / know-01, ARG0, h2 / he)
(k / know-01, ARG1, p / promise-01)
(k / know-01, manner, w / well)
(o / other, mod, e / each)
(o / other, time, s / since)
(p / promise-01, ARG0, h / he)
(s / since, op, b / birthday)

Decoded in 911,339 microseconds
Sentence: and the fears were not lessened by comments in recent hitler speeches hinting at a hard year of struggle ahead and promising better weapons for the wehrmacht next year

Spans:
Span 19-20:  ahead => ahead
Span 20-21:  and => and
Span 0-1:  and => and
Span 7-8:  comments => comment-01
Span 2-3:  fears => fear-01
Span 15-16:  hard => hard
Span 5-6:  lessened => lessen-01
Span 27-28:  next => next
Span 21-22:  promising => promise-01
Span 9-10:  recent => recent
Span 11-12:  speeches => speech
Span 18-19:  struggle => struggle-01
Span 23-24:  weapons => weapon
Span 28-29:  year => year
Span 16-17:  year => year

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),year,year,false), Span(27,28,List(1),next,next,false), Span(23,24,List(2),weapons,weapon,false), Span(21,22,List(3),promising,promise-01,false), Span(20,21,List(4),and,and,false), Span(19,20,List(5),ahead,ahead,false), Span(18,19,List(6),struggle,struggle-01,false), Span(16,17,List(7),year,year,false), Span(15,16,List(8),hard,hard,false), Span(11,12,List(9),speeches,speech,false), Span(9,10,List(10),recent,recent,false), Span(7,8,List(11),comments,comment-01,false), Span(5,6,List(12),lessened,lessen-01,false), Span(2,3,List(13),fears,fear-01,false), Span(0,1,List(14),and,and,false)),Map(2 -> weapon, 5 -> ahead, 12 -> lessen-01, 8 -> hard, 7 -> year, 1 -> next, 4 -> and, 11 -> comment-01, 14 -> and, 6 -> struggle-01, 0 -> year, 9 -> speech, 3 -> promise-01, 10 -> recent, 13 -> fear-01),Map(n -> next, w -> weapon, h -> hard, s2 -> speech, a3 -> and, s -> struggle-01, y -> year, p -> promise-01, a -> and, a2 -> ahead, r -> recent, c -> comment-01, l -> lessen-01, f -> fear-01, y2 -> year))),[Ljava.lang.String;@cf26800,Annotation([Ljava.lang.String;@7e89dea3,[Ljava.lang.String;@d77e03c,[Ljava.lang.String;@39228a0c),Annotation([Ljava.lang.String;@a953722,[Ljava.lang.String;@4a569e9b,[Ledu.cmu.lti.nlp.amr.Dependency;@7cc6f83d),Annotation([Ljava.lang.String;@6ad3acca,[Ljava.lang.String;@6ef53890,[Ljava.lang.String;@2554aed9),Annotation([Ljava.lang.String;@5aa33bb4,[Ljava.lang.String;@12a4d4e9,[Ledu.cmu.lti.nlp.amr.Entity;@396168f))
AMR:
(a / and, op, p / promise-01)
(a3 / and, op, l / lessen-01)
(c / comment-01, ARG1, s2 / speech)
(f / fear-01, ARG0, a2 / ahead)
(f / fear-01, ARG1, a / and)
(l / lessen-01, ARG1, f / fear-01)
(l / lessen-01, purpose, c / comment-01)
(p / promise-01, ARG1, s / struggle-01)
(p / promise-01, ARG3, w / weapon)
(p / promise-01, time, y / year)
(s / struggle-01, time, y2 / year)
(s2 / speech, time, r / recent)
(y / year, mod, n / next)
(y2 / year, mod, h / hard)

Decoded in 138,967 microseconds
Sentence: the bjp extends chauvinism to economics promising to keep multinationals at bay and an industrial policy that is strongly nationalistic in approach and content

Spans:
Span 22-23:  and => and
Span 12-13:  and => and
Span 21-22:  approach => approach-02
Span 23-24:  content => content
Span 5-6:  economics => economics
Span 2-3:  extends => extend-01
Span 14-15:  industrial => industry
Span 19-20:  nationalistic => nationalism
Span 15-16:  policy => policy
Span 6-7:  promising => promise-01
Span 18-19:  strongly => strong

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),content,content,false), Span(22,23,List(1),and,and,false), Span(21,22,List(2),approach,approach-02,false), Span(19,20,List(3),nationalistic,nationalism,false), Span(18,19,List(4),strongly,strong,false), Span(15,16,List(5),policy,policy,false), Span(14,15,List(6),industrial,industry,false), Span(12,13,List(7),and,and,false), Span(6,7,List(8),promising,promise-01,false), Span(5,6,List(9),economics,economics,false), Span(2,3,List(10),extends,extend-01,false)),Map(2 -> approach-02, 5 -> policy, 8 -> promise-01, 7 -> and, 1 -> and, 4 -> strong, 6 -> industry, 9 -> economics, 0 -> content, 10 -> extend-01, 3 -> nationalism),Map(e -> economics, n -> nationalism, e2 -> extend-01, p2 -> promise-01, a3 -> and, s -> strong, p -> policy, a -> and, i -> industry, a2 -> approach-02, c -> content))),[Ljava.lang.String;@72a3081f,Annotation([Ljava.lang.String;@2d6a6605,[Ljava.lang.String;@244fe98e,[Ljava.lang.String;@7a6e7c41),Annotation([Ljava.lang.String;@6b9fce32,[Ljava.lang.String;@489a6bd1,[Ledu.cmu.lti.nlp.amr.Dependency;@121c8b94),Annotation([Ljava.lang.String;@100faad6,[Ljava.lang.String;@7498cfd6,[Ljava.lang.String;@5c752667),Annotation([Ljava.lang.String;@f2c639d,[Ljava.lang.String;@2b3fe033,[Ledu.cmu.lti.nlp.amr.Entity;@6e984a73))
AMR:
(a / and, op, a2 / approach-02)
(a / and, op, c / content)
(a / and, op, n / nationalism)
(a3 / and, op, p / policy)
(a3 / and, op, p2 / promise-01)
(e2 / extend-01, ARG1, p2 / promise-01)
(n / nationalism, degree, s / strong)
(p / policy, mod, i / industry)
(p / policy, mod, n / nationalism)
(p2 / promise-01, ARG1, e / economics)

Decoded in 54,977 microseconds
Sentence: for them japan was a magnet promising them wages many times what they could earn at home but according to one pakistani worker who yesterday decided to speak out publicly the reality was very different

NER Entity: (country :name (name :op "japan"))
Spans:
Span 17-18:  but => contrast-01
Span 13-14:  could => possible
Span 25-26:  decided => decide-01
Span 34-35:  different => differ-02
Span 14-15:  earn => earn-01
Span 16-17:  home => home
Span 9-10:  many => many
Span 6-7:  promising => promise-01
Span 29-30:  publicly => public
Span 31-32:  reality => reality
Span 27-28:  speak => speak-01
Span 12-13:  they => they
Span 33-34:  very => very
Span 8-9:  wages => wage
Span 22-23:  worker => (person :ARG0-of work-01)
Span 24-25:  yesterday => yesterday

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),different,differ-02,false), Span(33,34,List(1),very,very,false), Span(31,32,List(2),reality,reality,false), Span(29,30,List(3),publicly,public,false), Span(27,28,List(4),speak,speak-01,false), Span(25,26,List(5),decided,decide-01,false), Span(24,25,List(6),yesterday,yesterday,false), Span(22,23,List(8, 7),worker,(person :ARG0-of work-01),false), Span(17,18,List(9),but,contrast-01,false), Span(16,17,List(10),home,home,false), Span(14,15,List(11),earn,earn-01,false), Span(13,14,List(12),could,possible,false), Span(12,13,List(13),they,they,false), Span(9,10,List(14),many,many,false), Span(8,9,List(15),wages,wage,false), Span(6,7,List(16),promising,promise-01,false)),Map(2 -> reality, 5 -> decide-01, 12 -> possible, 15 -> wage, 8 -> work-01, 7 -> person, 1 -> very, 4 -> speak-01, 11 -> earn-01, 14 -> many, 6 -> yesterday, 0 -> differ-02, 9 -> contrast-01, 16 -> promise-01, 3 -> public, 10 -> home, 13 -> they),Map(e -> earn-01, w -> work-01, h -> home, t -> they, p2 -> person, s -> speak-01, v -> very, m -> many, d -> differ-02, p -> public, y -> yesterday, p4 -> promise-01, d2 -> decide-01, w2 -> wage, r -> reality, c -> contrast-01, p3 -> possible))),[Ljava.lang.String;@18ea471b,Annotation([Ljava.lang.String;@3ce24a64,[Ljava.lang.String;@2c820a76,[Ljava.lang.String;@d7cdfce),Annotation([Ljava.lang.String;@149544d,[Ljava.lang.String;@753d8be3,[Ledu.cmu.lti.nlp.amr.Dependency;@1bab2037),Annotation([Ljava.lang.String;@7fd00911,[Ljava.lang.String;@33037ca5,[Ljava.lang.String;@29ec4ecd),Annotation([Ljava.lang.String;@59298a3b,[Ljava.lang.String;@36325538,[Ledu.cmu.lti.nlp.amr.Entity;@2278eb54))
AMR:
(c / contrast-01, ARG1, h / home)
(d / differ-02, ARG0, p3 / possible)
(d / differ-02, ARG1, r / reality)
(d / differ-02, degree, v / very)
(d2 / decide-01, ARG0, p2 / person)
(d2 / decide-01, ARG1, s / speak-01)
(e / earn-01, ARG0, t / they)
(e / earn-01, ARG1, m / many)
(e / earn-01, ARG2, c / contrast-01)
(p3 / possible, domain, e / earn-01)
(p4 / promise-01, ARG0, p2 / person)
(p4 / promise-01, ARG1, w2 / wage)
(s / speak-01, ARG0, y / yesterday)
(s / speak-01, ARG1, r / reality)
(s / speak-01, manner, p / public)
(w / work-01, ARG0, p2 / person)

Decoded in 676,314 microseconds
Sentence: the deal comes at a time when chiltern is planning a stock market flotation a move it promised to shareholders at the time of its defence against crown

Spans:
Span 27-28:  crown => crown-01
Span 1-2:  deal => deal-01
Span 25-26:  defence => defend-01
Span 16-17:  it => it
Span 12-13:  market => market
Span 9-10:  planning => plan-01
Span 17-18:  promised => promise-01
Span 11-12:  stock => stock
Span 22-23:  time => time
Span 5-6:  time => time

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),crown,crown-01,false), Span(25,26,List(1),defence,defend-01,false), Span(22,23,List(2),time,time,false), Span(17,18,List(3),promised,promise-01,false), Span(16,17,List(4),it,it,false), Span(12,13,List(5),market,market,false), Span(11,12,List(6),stock,stock,false), Span(9,10,List(7),planning,plan-01,false), Span(5,6,List(8),time,time,false), Span(1,2,List(9),deal,deal-01,false)),Map(2 -> time, 5 -> market, 8 -> time, 7 -> plan-01, 1 -> defend-01, 4 -> it, 6 -> stock, 9 -> deal-01, 0 -> crown-01, 3 -> promise-01),Map(t -> time, p2 -> plan-01, s -> stock, m -> market, d -> defend-01, p -> promise-01, d2 -> deal-01, t2 -> time, i -> it, c -> crown-01))),[Ljava.lang.String;@30a1e97a,Annotation([Ljava.lang.String;@55e76187,[Ljava.lang.String;@49b41220,[Ljava.lang.String;@4d1218ad),Annotation([Ljava.lang.String;@5f122d62,[Ljava.lang.String;@2261adb1,[Ledu.cmu.lti.nlp.amr.Dependency;@3ad25119),Annotation([Ljava.lang.String;@45ca5e7a,[Ljava.lang.String;@6900bf61,[Ljava.lang.String;@3014af22),Annotation([Ljava.lang.String;@1df5f9d7,[Ljava.lang.String;@7fe5a19e,[Ledu.cmu.lti.nlp.amr.Entity;@3cd5cdab))
AMR:
(c / crown-01, ARG0, t / time)
(d / defend-01, ARG1, c / crown-01)
(d2 / deal-01, ARG1, i / it)
(d2 / deal-01, location, t2 / time)
(m / market, mod, s / stock)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG2, t / time)
(p2 / plan-01, ARG1, m / market)
(t2 / time, time, p2 / plan-01)

Decoded in 134,579 microseconds
Sentence: three days after the coup the provisional picture which has emerged from carefully phrased official clarifications and unofficial leaks is that the bush administration did not initiate the rebellion but knew about it at least two days in advance and had promised or at least hinted at limited support

Spans:
Span 23-24:  administration => administrate-01
Span 38-39:  advance => advance-01
Span 2-3:  after => after
Span 39-40:  and => and
Span 16-17:  and => and
Span 22-23:  bush => bush-league
Span 29-30:  but => contrast-01
Span 12-13:  carefully => careful
Span 4-5:  coup => coup
Span 36-37:  days => (temporal-quantity :unit day)
Span 1-2:  days => (temporal-quantity :unit day)
Span 10-11:  emerged => emerge-02
Span 45-46:  hinted => hint-01
Span 26-27:  initiate => initiate-01
Span 32-33:  it => it
Span 30-31:  knew => know-01
Span 18-19:  leaks => leak-01
Span 47-48:  limited => limit-01
Span 14-15:  official => (have-org-role-91 :ARG2 official)
Span 42-43:  or => or
Span 7-8:  picture => picture
Span 41-42:  promised => promise-01
Span 6-7:  provisional => provisional
Span 28-29:  rebellion => rebel-01
Span 48-49:  support => support-01
Span 0-1:  three => 3
Span 35-36:  two => 2

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),support,support-01,false), Span(47,48,List(1),limited,limit-01,false), Span(45,46,List(2),hinted,hint-01,false), Span(42,43,List(3),or,or,false), Span(41,42,List(4),promised,promise-01,false), Span(39,40,List(5),and,and,false), Span(38,39,List(6),advance,advance-01,false), Span(36,37,List(8, 7),days,(temporal-quantity :unit day),false), Span(35,36,List(9),two,2,false), Span(32,33,List(10),it,it,false), Span(30,31,List(11),knew,know-01,false), Span(29,30,List(12),but,contrast-01,false), Span(28,29,List(13),rebellion,rebel-01,false), Span(26,27,List(14),initiate,initiate-01,false), Span(23,24,List(15),administration,administrate-01,false), Span(22,23,List(16),bush,bush-league,false), Span(18,19,List(17),leaks,leak-01,false), Span(16,17,List(18),and,and,false), Span(14,15,List(20, 19),official,(have-org-role-91 :ARG2 official),false), Span(12,13,List(21),carefully,careful,false), Span(10,11,List(22),emerged,emerge-02,false), Span(7,8,List(23),picture,picture,false), Span(6,7,List(24),provisional,provisional,false), Span(4,5,List(25),coup,coup,false), Span(2,3,List(26),after,after,false), Span(1,2,List(28, 27),days,(temporal-quantity :unit day),false), Span(0,1,List(29),three,3,false)),Map(2 -> hint-01, 5 -> and, 27 -> temporal-quantity, 12 -> contrast-01, 8 -> day, 15 -> administrate-01, 21 -> careful, 18 -> and, 24 -> provisional, 7 -> temporal-quantity, 1 -> limit-01, 17 -> leak-01, 23 -> picture, 26 -> after, 4 -> promise-01, 11 -> know-01, 14 -> initiate-01, 29 -> 3, 20 -> official, 28 -> day, 6 -> advance-01, 9 -> 2, 0 -> support-01, 22 -> emerge-02, 16 -> bush-league, 19 -> have-org-role-91, 10 -> it, 3 -> or, 25 -> coup, 13 -> rebel-01),Map(e -> emerge-02, h -> hint-01, 2 -> 2, h2 -> have-org-role-91, t -> temporal-quantity, k -> know-01, b -> bush-league, p2 -> picture, a3 -> administrate-01, s -> support-01, d -> day, p -> promise-01, c3 -> coup, a -> and, d2 -> day, a5 -> after, o2 -> official, t2 -> temporal-quantity, i2 -> initiate-01, l2 -> leak-01, i -> it, a2 -> advance-01, r -> rebel-01, c -> contrast-01, l -> limit-01, o -> or, p3 -> provisional, 3 -> 3, c2 -> careful, a4 -> and))),[Ljava.lang.String;@5ad1e727,Annotation([Ljava.lang.String;@a9ee006,[Ljava.lang.String;@4485af5c,[Ljava.lang.String;@24bbe429),Annotation([Ljava.lang.String;@2b805296,[Ljava.lang.String;@75ae0c29,[Ledu.cmu.lti.nlp.amr.Dependency;@75a0941a),Annotation([Ljava.lang.String;@15b734b,[Ljava.lang.String;@1aee419f,[Ljava.lang.String;@10163b89),Annotation([Ljava.lang.String;@239ea79f,[Ljava.lang.String;@50ec9fe,[Ledu.cmu.lti.nlp.amr.Entity;@def454a))
AMR:
(a / and, op, k / know-01)
(a / and, op, o / or)
(a3 / administrate-01, ARG1, c2 / careful)
(a3 / administrate-01, mod, b / bush-league)
(a4 / and, op, l2 / leak-01)
(a5 / after, op, k / know-01)
(a5 / after, quant, t2 / temporal-quantity)
(c / contrast-01, ARG1, i2 / initiate-01)
(c / contrast-01, ARG2, k / know-01)
(e / emerge-02, ARG1, p2 / picture)
(h / hint-01, ARG2, s / support-01)
(h2 / have-org-role-91, ARG0, l2 / leak-01)
(h2 / have-org-role-91, ARG2, o2 / official)
(i2 / initiate-01, ARG1, r / rebel-01)
(k / know-01, ARG1, i / it)
(k / know-01, manner, a2 / advance-01)
(l / limit-01, ARG1, s / support-01)
(l2 / leak-01, ARG0, p2 / picture)
(o / or, op, h / hint-01)
(o / or, op, p / promise-01)
(p / promise-01, ARG0, c3 / coup)
(p / promise-01, ARG1, t / temporal-quantity)
(p2 / picture, mod, p3 / provisional)
(r / rebel-01, ARG0, p2 / picture)
(r / rebel-01, ARG2, a3 / administrate-01)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, d / day)
(t2 / temporal-quantity, quant, 3 / 3)
(t2 / temporal-quantity, unit, d2 / day)

Decoded in 705,649 microseconds
Sentence: the korean government has promised to remove quotas on whisky from 1 january 1990 but no one in scotland is holding his breath

NER Entity: (thing :name (name :op "korean"))
mkDayMonthYear(1	january	1990,1,january,1990)
NER Entity: (country :name (name :op "scotland"))
NER Entity: (country :name (name :op "scotland"))
Spans:
Span 11-14:  1 january 1990 => (date-entity :day 1 :month 1 :year 1990)
Span 22-23:  breath => breathe-01
Span 14-15:  but => contrast-01
Span 20-21:  holding => hold-01
Span 15-16:  no => -
Span 4-5:  promised => promise-01
Span 7-8:  quotas => quota
Span 6-7:  remove => remove-01
Span 18-19:  scotland => (country :name (name :op "Scotland"))

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),breath,breathe-01,false), Span(20,21,List(1),holding,hold-01,false), Span(18,19,List(4, 3, 2),scotland,(country :name (name :op "Scotland")),false), Span(15,16,List(5),no,-,false), Span(14,15,List(6),but,contrast-01,false), Span(11,14,List(10, 9, 8, 7),1 january 1990,(date-entity :day 1 :month 1 :year 1990),false), Span(7,8,List(11),quotas,quota,false), Span(6,7,List(12),remove,remove-01,false), Span(4,5,List(13),promised,promise-01,false)),Map(2 -> country, 5 -> -, 12 -> remove-01, 8 -> 1, 7 -> date-entity, 1 -> hold-01, 4 -> "Scotland", 11 -> quota, 6 -> contrast-01, 0 -> breathe-01, 9 -> 1, 3 -> name, 10 -> 1990, 13 -> promise-01),Map(n -> name, h -> hold-01, q -> quota, b -> breathe-01, 12 -> 1, d -> date-entity, 1 -> 1, p -> promise-01, r -> remove-01, c -> country, - -> -, c2 -> contrast-01, 13 -> 1990))),[Ljava.lang.String;@57ae046b,Annotation([Ljava.lang.String;@61a439c5,[Ljava.lang.String;@64cce697,[Ljava.lang.String;@4836f734),Annotation([Ljava.lang.String;@109f9bf6,[Ljava.lang.String;@5eb83c00,[Ledu.cmu.lti.nlp.amr.Dependency;@116b5495),Annotation([Ljava.lang.String;@1d7e0b22,[Ljava.lang.String;@3e0cf44e,[Ljava.lang.String;@447b4cb5),Annotation([Ljava.lang.String;@7ae92232,[Ljava.lang.String;@5fc43fa8,[Ledu.cmu.lti.nlp.amr.Entity;@4d2f5fb6))
AMR:
(c / country, name, n / name)
(c2 / contrast-01, ARG1, p / promise-01)
(c2 / contrast-01, ARG2, h / hold-01)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 12 / 1)
(d / date-entity, year, 13 / 1990)
(h / hold-01, ARG1, b / breathe-01)
(h / hold-01, time, - / -)
(n / name, op, "Scotland")
(p / promise-01, ARG0, c / country)
(p / promise-01, ARG1, q / quota)
(p / promise-01, ARG2, r / remove-01)
(r / remove-01, time, d / date-entity)

Decoded in 91,724 microseconds
Sentence: rob said john i promise you this lady lacks nothing

Spans:
Span 3-4:  i => i
Span 8-9:  lacks => lack-01
Span 7-8:  lady => lady
Span 9-10:  nothing => nothing
Span 4-5:  promise => promise-01
Span 1-2:  said => say-01
Span 6-7:  this => this
Span 5-6:  you => you

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),nothing,nothing,false), Span(8,9,List(1),lacks,lack-01,false), Span(7,8,List(2),lady,lady,false), Span(6,7,List(3),this,this,false), Span(5,6,List(4),you,you,false), Span(4,5,List(5),promise,promise-01,false), Span(3,4,List(6),i,i,false), Span(1,2,List(7),said,say-01,false)),Map(2 -> lady, 5 -> promise-01, 7 -> say-01, 1 -> lack-01, 4 -> you, 6 -> i, 0 -> nothing, 3 -> this),Map(n -> nothing, t -> this, s -> say-01, p -> promise-01, y -> you, i -> i, l2 -> lady, l -> lack-01))),[Ljava.lang.String;@6134cd50,Annotation([Ljava.lang.String;@5193710b,[Ljava.lang.String;@26e2b304,[Ljava.lang.String;@6d56df8d),Annotation([Ljava.lang.String;@626eda0f,[Ljava.lang.String;@5bae4145,[Ledu.cmu.lti.nlp.amr.Dependency;@d3f4809),Annotation([Ljava.lang.String;@35924daa,[Ljava.lang.String;@1828ef60,[Ljava.lang.String;@277b9404),Annotation([Ljava.lang.String;@2232a6dc,[Ljava.lang.String;@2b68c70e,[Ledu.cmu.lti.nlp.amr.Entity;@6be47e65))
AMR:
(l / lack-01, ARG0, l2 / lady)
(l / lack-01, ARG1, n / nothing)
(l / lack-01, ARG2, y / you)
(l2 / lady, mod, t / this)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, y / you)
(s / say-01, ARG1, p / promise-01)

Decoded in 215,930 microseconds
Sentence: murray who won the 3000m here last year was promised a pacemaker

Spans:
Span 5-6:  here => here
Span 6-7:  last => last
Span 9-10:  promised => promise-01
Span 2-3:  won => win-01
Span 7-8:  year => year

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),promised,promise-01,false), Span(7,8,List(1),year,year,false), Span(6,7,List(2),last,last,false), Span(5,6,List(3),here,here,false), Span(2,3,List(4),won,win-01,false)),Map(2 -> last, 1 -> year, 4 -> win-01, 0 -> promise-01, 3 -> here),Map(w -> win-01, h -> here, y -> year, p -> promise-01, l -> last))),[Ljava.lang.String;@66265039,Annotation([Ljava.lang.String;@5d5d0293,[Ljava.lang.String;@55430c8,[Ljava.lang.String;@5a4e9d33),Annotation([Ljava.lang.String;@5f32ad96,[Ljava.lang.String;@782283ad,[Ledu.cmu.lti.nlp.amr.Dependency;@21f31079),Annotation([Ljava.lang.String;@5cbe8958,[Ljava.lang.String;@612b1ff9,[Ljava.lang.String;@56404645),Annotation([Ljava.lang.String;@15c58840,[Ljava.lang.String;@5b742cea,[Ledu.cmu.lti.nlp.amr.Entity;@2830e58e))
AMR:
(p / promise-01, ARG0, h / here)
(p / promise-01, time, y / year)
(w / win-01, ARG1, p / promise-01)
(y / year, mod, l / last)

Decoded in 13,437 microseconds
Sentence: while a big northwesterly made a spectacular start for the 126 yachts leaving sydney harbour it soon turned into the south increased to between 30 and 40 knots and promised a rugged opening night

NER Entity: (country :name (name :op "sydney"))
Spans:
Span 24-25:  30 => 30
Span 26-27:  40 => 40
Span 28-29:  and => and
Span 25-26:  and => and
Span 23-24:  between => between
Span 2-3:  big => big
Span 14-15:  harbour => harbour
Span 21-22:  increased => increase-01
Span 15-16:  it => it
Span 12-13:  leaving => leave-01
Span 33-34:  night => night
Span 32-33:  opening => open-01
Span 29-30:  promised => promise-01
Span 31-32:  rugged => rugged
Span 16-17:  soon => soon
Span 20-21:  south => south
Span 6-7:  spectacular => spectacular
Span 7-8:  start => start-01
Span 11-12:  yachts => yacht

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),night,night,false), Span(32,33,List(1),opening,open-01,false), Span(31,32,List(2),rugged,rugged,false), Span(29,30,List(3),promised,promise-01,false), Span(28,29,List(4),and,and,false), Span(26,27,List(5),40,40,false), Span(25,26,List(6),and,and,false), Span(24,25,List(7),30,30,false), Span(23,24,List(8),between,between,false), Span(21,22,List(9),increased,increase-01,false), Span(20,21,List(10),south,south,false), Span(16,17,List(11),soon,soon,false), Span(15,16,List(12),it,it,false), Span(14,15,List(13),harbour,harbour,false), Span(12,13,List(14),leaving,leave-01,false), Span(11,12,List(15),yachts,yacht,false), Span(7,8,List(16),start,start-01,false), Span(6,7,List(17),spectacular,spectacular,false), Span(2,3,List(18),big,big,false)),Map(2 -> rugged, 5 -> 40, 12 -> it, 15 -> yacht, 8 -> between, 18 -> big, 7 -> 30, 17 -> spectacular, 1 -> open-01, 4 -> and, 11 -> soon, 14 -> leave-01, 6 -> and, 0 -> night, 9 -> increase-01, 16 -> start-01, 3 -> promise-01, 10 -> south, 13 -> harbour),Map(n -> night, h -> harbour, s2 -> soon, b -> between, b2 -> big, s -> south, s4 -> spectacular, y -> yacht, p -> promise-01, a -> and, 4 -> 40, i2 -> it, r -> rugged, a2 -> and, i -> increase-01, s3 -> start-01, l -> leave-01, o -> open-01, 3 -> 30))),[Ljava.lang.String;@628e55b6,Annotation([Ljava.lang.String;@6e9d5246,[Ljava.lang.String;@1a84aa66,[Ljava.lang.String;@7bcf1c23),Annotation([Ljava.lang.String;@5a407d55,[Ljava.lang.String;@3fe485bd,[Ledu.cmu.lti.nlp.amr.Dependency;@34085c10),Annotation([Ljava.lang.String;@10d43920,[Ljava.lang.String;@5cf26c81,[Ljava.lang.String;@2fb1b8d3),Annotation([Ljava.lang.String;@3cdd3d1b,[Ljava.lang.String;@60d6d6d4,[Ledu.cmu.lti.nlp.amr.Entity;@38b229f7))
AMR:
(a / and, op, h / harbour)
(a / and, op, p / promise-01)
(a / and, op, s3 / start-01)
(a2 / and, op, l / leave-01)
(h / harbour, mod, s2 / soon)
(i / increase-01, ARG0, 4 / 40)
(i / increase-01, ARG1, s / south)
(l / leave-01, ARG0, b2 / big)
(l / leave-01, ARG1, y / yacht)
(o / open-01, ARG1, 3 / 30)
(o / open-01, mod, r / rugged)
(p / promise-01, ARG0, s / south)
(p / promise-01, ARG1, i2 / it)
(p / promise-01, ARG2, o / open-01)
(p / promise-01, time, n / night)
(s3 / start-01, ARG0, b / between)
(s3 / start-01, ARG1, y / yacht)
(s3 / start-01, mod, s4 / spectacular)

Decoded in 592,850 microseconds
Sentence:  mr clarke kept trying to push him off promising him a white paper in the autumn but mr cook went on chasing

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  mr clarke kept trying to push him off promising him a white paper in the autumn but mr cook went on chasing
myTokenized = mr clarke kept trying to push him off promising him a white paper in the autumn but mr cook went on chasing
i = 0
prefix = List(mr)
regexr = \Qm\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: run away on to the streets  but shes promised father not to run away hasnt she

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = run away on to the streets  but shes promised father not to run away hasnt she
myTokenized = run away on to the streets but shes promised father not to run away hasnt she
i = 6
prefix = List(run, away, on, to, the, streets, but)
regexr = \Qr\E ?\Qu\E ?\Qn\E ?\Qa\E ?\Qw\E ?\Qa\E ?\Qy\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qo\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qr\E ?\Qe\E ?\Qe\E ?\Qt\E ?\Qs\E ?\Qb\E ?\Qu\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: sir paul girolami glaxo chairman and a member of ambrosettis advisory board in the uk has promised a warts and all session

NER Entity: (country :name (name :op "uk"))
Spans:
Span 10-11:  advisory => advise-01
Span 20-21:  all => all
Span 19-20:  and => and
Span 5-6:  and => and
Span 4-5:  chairman => (have-org-role-91 :ARG2 chairman)
Span 7-8:  member => (have-org-role-91 :ARG2 member)
Span 16-17:  promised => promise-01
Span 21-22:  session => session

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),session,session,false), Span(20,21,List(1),all,all,false), Span(19,20,List(2),and,and,false), Span(16,17,List(3),promised,promise-01,false), Span(10,11,List(4),advisory,advise-01,false), Span(7,8,List(6, 5),member,(have-org-role-91 :ARG2 member),false), Span(5,6,List(7),and,and,false), Span(4,5,List(9, 8),chairman,(have-org-role-91 :ARG2 chairman),false)),Map(2 -> and, 5 -> have-org-role-91, 8 -> have-org-role-91, 7 -> and, 1 -> all, 4 -> advise-01, 6 -> member, 9 -> chairman, 0 -> session, 3 -> promise-01),Map(h -> have-org-role-91, h2 -> have-org-role-91, a3 -> advise-01, s -> session, m -> member, p -> promise-01, a -> all, a2 -> and, c -> chairman, a4 -> and))),[Ljava.lang.String;@d9f8120,Annotation([Ljava.lang.String;@62d662dc,[Ljava.lang.String;@68f48c35,[Ljava.lang.String;@f212168),Annotation([Ljava.lang.String;@48183a9a,[Ljava.lang.String;@2eaf7970,[Ledu.cmu.lti.nlp.amr.Dependency;@24dc002),Annotation([Ljava.lang.String;@3e78c47c,[Ljava.lang.String;@6aabc8ee,[Ljava.lang.String;@3414b7f8),Annotation([Ljava.lang.String;@3c3a157e,[Ljava.lang.String;@9592216,[Ledu.cmu.lti.nlp.amr.Entity;@3accd725))
AMR:
(a4 / and, op, h / have-org-role-91)
(a4 / and, op, p / promise-01)
(a4 / and, op, s / session)
(h / have-org-role-91, ARG2, m / member)
(h2 / have-org-role-91, ARG2, c / chairman)
(p / promise-01, ARG0, c / chairman)
(p / promise-01, ARG1, a2 / and)
(p / promise-01, ARG2, a3 / advise-01)
(s / session, mod, a / all)

Decoded in 179,050 microseconds
Sentence:   a vital new part in the complex structure required to win an olympic medal was promised yesterday by the british olympic association dash

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   a vital new part in the complex structure required to win an olympic medal was promised yesterday by the british olympic association dash
myTokenized = a vital new part in the complex structure required to win an olympic medal was promised yesterday by the british olympic association dash
i = 0
prefix = List(a)
regexr = \Qa\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: foster plans to commission a group of distinguished european architects the quality of the architecture promises to be very high

Spans:
Span 3-4:  commission => commission
Span 7-8:  distinguished => distinguish-01
Span 8-9:  european => (continent :name (name :op "Europe"))
Span 0-1:  foster => foster
Span 5-6:  group => group
Span 19-20:  high => high
Span 1-2:  plans => plan-01
Span 15-16:  promises => promise-01
Span 11-12:  quality => quality
Span 18-19:  very => very

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),high,high,false), Span(18,19,List(1),very,very,false), Span(15,16,List(2),promises,promise-01,false), Span(11,12,List(3),quality,quality,false), Span(8,9,List(6, 5, 4),european,(continent :name (name :op "Europe")),false), Span(7,8,List(7),distinguished,distinguish-01,false), Span(5,6,List(8),group,group,false), Span(3,4,List(9),commission,commission,false), Span(1,2,List(10),plans,plan-01,false), Span(0,1,List(11),foster,foster,false)),Map(2 -> promise-01, 5 -> name, 8 -> group, 7 -> distinguish-01, 1 -> very, 11 -> foster, 4 -> continent, 6 -> "Europe", 9 -> commission, 0 -> high, 10 -> plan-01, 3 -> quality),Map(n -> name, q -> quality, h -> high, p2 -> plan-01, d -> distinguish-01, v -> very, g -> group, p -> promise-01, c -> continent, f -> foster, c2 -> commission))),[Ljava.lang.String;@743ef044,Annotation([Ljava.lang.String;@50103bfb,[Ljava.lang.String;@59d204cd,[Ljava.lang.String;@6b395ccc),Annotation([Ljava.lang.String;@2fb8c13,[Ljava.lang.String;@50a934ec,[Ledu.cmu.lti.nlp.amr.Dependency;@14d19b53),Annotation([Ljava.lang.String;@4d2c70d2,[Ljava.lang.String;@20a31293,[Ljava.lang.String;@321881a2),Annotation([Ljava.lang.String;@66e6cc5f,[Ljava.lang.String;@3a73a5c0,[Ledu.cmu.lti.nlp.amr.Entity;@7e86fe3a))
AMR:
(c / continent, name, n / name)
(c2 / commission, mod, g / group)
(d / distinguish-01, ARG1, c / continent)
(d / distinguish-01, ARG2, p2 / plan-01)
(f / foster, purpose, c2 / commission)
(h / high, degree, v / very)
(n / name, op, "Europe")
(p / promise-01, ARG0, q / quality)
(p / promise-01, ARG1, h / high)
(p / promise-01, source, g / group)
(p2 / plan-01, ARG1, c2 / commission)

Decoded in 427,815 microseconds
Sentence: that is why if the stock exchange had built taurus many years ago as promised it could also have ensured the earlier abolition of stamp duty

Spans:
Span 22-23:  abolition => abolish-01
Span 17-18:  also => also
Span 8-9:  built => build-01
Span 16-17:  could => possible
Span 25-26:  duty => duty
Span 21-22:  earlier => early
Span 19-20:  ensured => ensure-01
Span 6-7:  exchange => exchange-01
Span 15-16:  it => it
Span 10-11:  many => many
Span 14-15:  promised => promise-01
Span 24-25:  stamp => stamp-05
Span 5-6:  stock => stock
Span 11-12:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),duty,duty,false), Span(24,25,List(1),stamp,stamp-05,false), Span(22,23,List(2),abolition,abolish-01,false), Span(21,22,List(3),earlier,early,false), Span(19,20,List(4),ensured,ensure-01,false), Span(17,18,List(5),also,also,false), Span(16,17,List(6),could,possible,false), Span(15,16,List(7),it,it,false), Span(14,15,List(8),promised,promise-01,false), Span(11,12,List(10, 9),years,(temporal-quantity :unit year),false), Span(10,11,List(11),many,many,false), Span(8,9,List(12),built,build-01,false), Span(6,7,List(13),exchange,exchange-01,false), Span(5,6,List(14),stock,stock,false)),Map(2 -> abolish-01, 5 -> also, 12 -> build-01, 8 -> promise-01, 7 -> it, 1 -> stamp-05, 4 -> ensure-01, 11 -> many, 14 -> stock, 6 -> possible, 0 -> duty, 9 -> temporal-quantity, 3 -> early, 10 -> year, 13 -> exchange-01),Map(e -> early, s2 -> stock, t -> temporal-quantity, b -> build-01, e2 -> ensure-01, p2 -> promise-01, s -> stamp-05, d -> duty, m -> many, p -> possible, y -> year, a -> abolish-01, a2 -> also, i -> it, e3 -> exchange-01))),[Ljava.lang.String;@509cd2bb,Annotation([Ljava.lang.String;@67cf1c55,[Ljava.lang.String;@4e4d45b1,[Ljava.lang.String;@331a8fa0),Annotation([Ljava.lang.String;@14cb6b96,[Ljava.lang.String;@37044f84,[Ledu.cmu.lti.nlp.amr.Dependency;@7c007f53),Annotation([Ljava.lang.String;@4a761bf,[Ljava.lang.String;@90244fc,[Ljava.lang.String;@73ff0102),Annotation([Ljava.lang.String;@6a9b65cc,[Ljava.lang.String;@386ac2,[Ledu.cmu.lti.nlp.amr.Entity;@77e8e6aa))
AMR:
(a / abolish-01, ARG1, d / duty)
(a / abolish-01, mod, e / early)
(b / build-01, ARG0, e3 / exchange-01)
(b / build-01, ARG1, p2 / promise-01)
(d / duty, topic, s / stamp-05)
(e2 / ensure-01, ARG0, i / it)
(e2 / ensure-01, ARG1, a / abolish-01)
(e3 / exchange-01, ARG1, s2 / stock)
(m / many, op, t / temporal-quantity)
(p / possible, domain, e2 / ensure-01)
(p / possible, mod, a2 / also)
(p2 / promise-01, ARG0, t / temporal-quantity)
(p2 / promise-01, ARG1, p / possible)
(t / temporal-quantity, unit, y / year)

Decoded in 87,787 microseconds
Sentence: for it had been organized in aid of some religious charity and promised to be more decorous than a fair should be

Spans:
Span 6-7:  aid => aid-01
Span 11-12:  and => and
Span 10-11:  charity => charity
Span 19-20:  fair => fair
Span 1-2:  it => it
Span 4-5:  organized => organize-01
Span 12-13:  promised => promise-01
Span 20-21:  should => recommend-01
Span 8-9:  some => some

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),should,recommend-01,false), Span(19,20,List(1),fair,fair,false), Span(12,13,List(2),promised,promise-01,false), Span(11,12,List(3),and,and,false), Span(10,11,List(4),charity,charity,false), Span(8,9,List(5),some,some,false), Span(6,7,List(6),aid,aid-01,false), Span(4,5,List(7),organized,organize-01,false), Span(1,2,List(8),it,it,false)),Map(2 -> promise-01, 5 -> some, 8 -> it, 7 -> organize-01, 1 -> fair, 4 -> charity, 6 -> aid-01, 0 -> recommend-01, 3 -> and),Map(s -> some, p -> promise-01, a -> and, i -> it, a2 -> aid-01, r -> recommend-01, c -> charity, o -> organize-01, f -> fair))),[Ljava.lang.String;@1d867c00,Annotation([Ljava.lang.String;@6836f324,[Ljava.lang.String;@6f94f5ef,[Ljava.lang.String;@1c9e5724),Annotation([Ljava.lang.String;@5f6b0b29,[Ljava.lang.String;@6ca9e1af,[Ledu.cmu.lti.nlp.amr.Dependency;@51fdfe5),Annotation([Ljava.lang.String;@6fa43603,[Ljava.lang.String;@5d63838,[Ljava.lang.String;@3304e786),Annotation([Ljava.lang.String;@6fc2895,[Ljava.lang.String;@14cc51c8,[Ledu.cmu.lti.nlp.amr.Entity;@720d2c22))
AMR:
(a / and, op, o / organize-01)
(a / and, op, p / promise-01)
(a / and, op, r / recommend-01)
(a2 / aid-01, ARG0, i / it)
(a2 / aid-01, ARG1, c / charity)
(c / charity, mod, s / some)
(o / organize-01, ARG1, i / it)
(r / recommend-01, ARG1, f / fair)

Decoded in 71,977 microseconds
Sentence: subsequently he can claim credit for being on the side of common sense in opposing the poll tax which promises to be an awful liability for the government

Spans:
Span 23-24:  awful => awful
Span 2-3:  can => possible
Span 3-4:  claim => claim-01
Span 11-12:  common => common
Span 4-5:  credit => credit-02
Span 1-2:  he => he
Span 24-25:  liability => liability
Span 14-15:  opposing => oppose-01
Span 16-17:  poll => poll-01
Span 19-20:  promises => promise-01
Span 12-13:  sense => sense
Span 9-10:  side => side
Span 0-1:  subsequently => subsequent
Span 17-18:  tax => tax-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),liability,liability,false), Span(23,24,List(1),awful,awful,false), Span(19,20,List(2),promises,promise-01,false), Span(17,18,List(3),tax,tax-01,false), Span(16,17,List(4),poll,poll-01,false), Span(14,15,List(5),opposing,oppose-01,false), Span(12,13,List(6),sense,sense,false), Span(11,12,List(7),common,common,false), Span(9,10,List(8),side,side,false), Span(4,5,List(9),credit,credit-02,false), Span(3,4,List(10),claim,claim-01,false), Span(2,3,List(11),can,possible,false), Span(1,2,List(12),he,he,false), Span(0,1,List(13),subsequently,subsequent,false)),Map(2 -> promise-01, 5 -> oppose-01, 12 -> he, 8 -> side, 7 -> common, 1 -> awful, 4 -> poll-01, 11 -> possible, 6 -> sense, 0 -> liability, 9 -> credit-02, 3 -> tax-01, 10 -> claim-01, 13 -> subsequent),Map(h -> he, s2 -> side, t -> tax-01, p2 -> poll-01, s -> sense, p -> promise-01, a -> awful, c3 -> claim-01, s3 -> subsequent, c -> common, l -> liability, o -> oppose-01, p3 -> possible, c2 -> credit-02))),[Ljava.lang.String;@3ecca6ad,Annotation([Ljava.lang.String;@6dd2c810,[Ljava.lang.String;@294ccac4,[Ljava.lang.String;@70941f0a),Annotation([Ljava.lang.String;@c820344,[Ljava.lang.String;@2ba46bc6,[Ledu.cmu.lti.nlp.amr.Dependency;@379faa8c),Annotation([Ljava.lang.String;@5375e9db,[Ljava.lang.String;@624c53ab,[Ljava.lang.String;@10931f8),Annotation([Ljava.lang.String;@2af9150,[Ljava.lang.String;@546d1c90,[Ledu.cmu.lti.nlp.amr.Entity;@476e5d3d))
AMR:
(c3 / claim-01, ARG0, h / he)
(c3 / claim-01, ARG1, c2 / credit-02)
(c3 / claim-01, manner, s3 / subsequent)
(l / liability, degree, a / awful)
(o / oppose-01, ARG0, s / sense)
(o / oppose-01, ARG1, t / tax-01)
(p / promise-01, ARG0, t / tax-01)
(p / promise-01, ARG1, l / liability)
(p3 / possible, domain, c3 / claim-01)
(s / sense, mod, c / common)
(s2 / side, mod, s / sense)
(t / tax-01, ARG0, h / he)
(t / tax-01, ARG1, p2 / poll-01)

Decoded in 293,216 microseconds
Sentence: perhaps the most positive feature of yesterdays session was the gungho contribution of the captain finlay calder who promised intense allround commitment at ballymore

NER Entity: (person :name (name :op "finlay" :op "calder"))
Spans:
Span 14-15:  captain => (have-org-role-91 :ARG2 captain)
Span 21-22:  commitment => commit-01
Span 11-12:  contribution => contribute-01
Span 4-5:  feature => feature-01
Span 15-17:  finlay calder => (person :name (name :op "finlay" :op "calder"))
Span 19-20:  intense => intense
Span 2-3:  most => most
Span 0-1:  perhaps => perhaps
Span 3-4:  positive => positive
Span 18-19:  promised => promise-01
Span 7-8:  session => session

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),commitment,commit-01,false), Span(19,20,List(1),intense,intense,false), Span(18,19,List(2),promised,promise-01,false), Span(15,17,List(6, 5, 4, 3),finlay calder,(person :name (name :op "finlay" :op "calder")),false), Span(14,15,List(8, 7),captain,(have-org-role-91 :ARG2 captain),false), Span(11,12,List(9),contribution,contribute-01,false), Span(7,8,List(10),session,session,false), Span(4,5,List(11),feature,feature-01,false), Span(3,4,List(12),positive,positive,false), Span(2,3,List(13),most,most,false), Span(0,1,List(14),perhaps,perhaps,false)),Map(2 -> promise-01, 5 -> "finlay", 12 -> positive, 8 -> captain, 7 -> have-org-role-91, 1 -> intense, 4 -> name, 11 -> feature-01, 14 -> perhaps, 6 -> "calder", 0 -> commit-01, 9 -> contribute-01, 3 -> person, 10 -> session, 13 -> most),Map(n -> name, h -> have-org-role-91, p2 -> person, s -> session, m -> most, p -> promise-01, c3 -> contribute-01, p4 -> perhaps, i -> intense, c -> commit-01, f -> feature-01, p3 -> positive, c2 -> captain))),[Ljava.lang.String;@1eab746e,Annotation([Ljava.lang.String;@a68f17d,[Ljava.lang.String;@6fc64ae1,[Ljava.lang.String;@435e331b),Annotation([Ljava.lang.String;@5d6d542a,[Ljava.lang.String;@34b0c151,[Ledu.cmu.lti.nlp.amr.Dependency;@4063c7dd),Annotation([Ljava.lang.String;@56d69f31,[Ljava.lang.String;@246d7681,[Ljava.lang.String;@e7f21d6),Annotation([Ljava.lang.String;@3c867009,[Ljava.lang.String;@1e257dea,[Ledu.cmu.lti.nlp.amr.Entity;@2f6d9d1c))
AMR:
(c / commit-01, mod, i / intense)
(c3 / contribute-01, ARG0, p2 / person)
(f / feature-01, ARG1, s / session)
(f / feature-01, mod, p3 / positive)
(f / feature-01, mod, p4 / perhaps)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, s / session)
(h / have-org-role-91, ARG2, c2 / captain)
(n / name, op, "calder")
(n / name, op, "finlay")
(p / promise-01, ARG0, c3 / contribute-01)
(p / promise-01, ARG1, c / commit-01)
(p2 / person, name, n / name)
(p3 / positive, degree, m / most)

Decoded in 111,670 microseconds
Sentence: to bring him once and for all to his senses was like faroff thunder that could promise any sort of weather

Spans:
Span 6-7:  all => all
Span 4-5:  and => and
Span 17-18:  any => any
Span 1-2:  bring => bring-01
Span 15-16:  could => possible
Span 3-4:  once => once
Span 16-17:  promise => promise-01
Span 9-10:  senses => sense
Span 18-19:  sort => sort
Span 20-21:  weather => weather

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),weather,weather,false), Span(18,19,List(1),sort,sort,false), Span(17,18,List(2),any,any,false), Span(16,17,List(3),promise,promise-01,false), Span(15,16,List(4),could,possible,false), Span(9,10,List(5),senses,sense,false), Span(6,7,List(6),all,all,false), Span(4,5,List(7),and,and,false), Span(3,4,List(8),once,once,false), Span(1,2,List(9),bring,bring-01,false)),Map(2 -> any, 5 -> sense, 8 -> once, 7 -> and, 1 -> sort, 4 -> possible, 6 -> all, 9 -> bring-01, 0 -> weather, 3 -> promise-01),Map(w -> weather, b -> bring-01, s2 -> sense, p2 -> possible, a3 -> and, s -> sort, p -> promise-01, a -> any, a2 -> all, o -> once))),[Ljava.lang.String;@4565b197,Annotation([Ljava.lang.String;@176e5419,[Ljava.lang.String;@4c534153,[Ljava.lang.String;@6de5d74a),Annotation([Ljava.lang.String;@c9973a4,[Ljava.lang.String;@2e771a72,[Ledu.cmu.lti.nlp.amr.Dependency;@d694a33),Annotation([Ljava.lang.String;@7b866125,[Ljava.lang.String;@3354037e,[Ljava.lang.String;@50b15f85),Annotation([Ljava.lang.String;@2cf63e26,[Ljava.lang.String;@5a6a47d9,[Ledu.cmu.lti.nlp.amr.Entity;@779325ee))
AMR:
(b / bring-01, ARG0, s2 / sense)
(b / bring-01, ARG1, a2 / all)
(b / bring-01, ARG2, a3 / and)
(b / bring-01, direction, o / once)
(p / promise-01, ARG1, w / weather)
(p / promise-01, ARG2, a3 / and)
(p / promise-01, mod, p2 / possible)
(p2 / possible, domain, s / sort)
(s / sort, mod, a / any)

Decoded in 74,529 microseconds
Sentence: the films highly misleading poster all sassy sixtiesstyle graphics and buzzwords promises an upbeat yoof movie but amiss sour little story translates badly to the screen

Spans:
Span 5-6:  all => all
Span 9-10:  and => and
Span 16-17:  but => contrast-01
Span 1-2:  films => film
Span 2-3:  highly => high
Span 19-20:  little => little
Span 3-4:  misleading => mislead-02
Span 15-16:  movie => movie
Span 4-5:  poster => poster
Span 11-12:  promises => promise-01
Span 25-26:  screen => screen
Span 20-21:  story => story

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),screen,screen,false), Span(20,21,List(1),story,story,false), Span(19,20,List(2),little,little,false), Span(16,17,List(3),but,contrast-01,false), Span(15,16,List(4),movie,movie,false), Span(11,12,List(5),promises,promise-01,false), Span(9,10,List(6),and,and,false), Span(5,6,List(7),all,all,false), Span(4,5,List(8),poster,poster,false), Span(3,4,List(9),misleading,mislead-02,false), Span(2,3,List(10),highly,high,false), Span(1,2,List(11),films,film,false)),Map(2 -> little, 5 -> promise-01, 8 -> poster, 7 -> all, 1 -> story, 11 -> film, 4 -> movie, 6 -> and, 9 -> mislead-02, 0 -> screen, 10 -> high, 3 -> contrast-01),Map(h -> high, s2 -> story, m2 -> mislead-02, p2 -> poster, s -> screen, m -> movie, p -> promise-01, a -> and, a2 -> all, c -> contrast-01, l -> little, f -> film))),[Ljava.lang.String;@5d9f6996,Annotation([Ljava.lang.String;@ccd26df,[Ljava.lang.String;@70b30109,[Ljava.lang.String;@78092fac),Annotation([Ljava.lang.String;@231902c5,[Ljava.lang.String;@3f04e583,[Ledu.cmu.lti.nlp.amr.Dependency;@5a781bc7),Annotation([Ljava.lang.String;@367d438,[Ljava.lang.String;@159daa47,[Ljava.lang.String;@22162667),Annotation([Ljava.lang.String;@5c3345ac,[Ljava.lang.String;@2a234e7e,[Ledu.cmu.lti.nlp.amr.Entity;@73f647ce))
AMR:
(a / and, op, p2 / poster)
(a / and, quant, a2 / all)
(c / contrast-01, ARG1, m / movie)
(m2 / mislead-02, ARG0, s / screen)
(m2 / mislead-02, ARG1, p2 / poster)
(m2 / mislead-02, ARG2, f / film)
(m2 / mislead-02, degree, h / high)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, m / movie)
(s2 / story, mod, h / high)
(s2 / story, mod, l / little)

Decoded in 257,875 microseconds
Sentence: freer travel has been promised but free elections dash

Spans:
Span 5-6:  but => contrast-01
Span 7-8:  elections => elect-01
Span 6-7:  free => free-41
Span 4-5:  promised => promise-01
Span 1-2:  travel => travel-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),elections,elect-01,false), Span(6,7,List(1),free,free-41,false), Span(5,6,List(2),but,contrast-01,false), Span(4,5,List(3),promised,promise-01,false), Span(1,2,List(4),travel,travel-01,false)),Map(2 -> contrast-01, 1 -> free-41, 4 -> travel-01, 0 -> elect-01, 3 -> promise-01),Map(e -> elect-01, t -> travel-01, p -> promise-01, c -> contrast-01, f -> free-41))),[Ljava.lang.String;@2de460dc,Annotation([Ljava.lang.String;@6c93230d,[Ljava.lang.String;@2fe2622b,[Ljava.lang.String;@379b0d9c),Annotation([Ljava.lang.String;@249a9949,[Ljava.lang.String;@21c59a65,[Ledu.cmu.lti.nlp.amr.Dependency;@341b6e35),Annotation([Ljava.lang.String;@74e0744c,[Ljava.lang.String;@3bf36586,[Ljava.lang.String;@688e5f29),Annotation([Ljava.lang.String;@5b09b25f,[Ljava.lang.String;@599da9aa,[Ledu.cmu.lti.nlp.amr.Entity;@7dee05dc))
AMR:
(c / contrast-01, ARG1, t / travel-01)
(e / elect-01, ARG2, c / contrast-01)
(f / free-41, ARG1, e / elect-01)
(p / promise-01, ARG1, t / travel-01)

Decoded in 36,372 microseconds
Sentence: the rest of the meeting promises as much

Spans:
Span 4-5:  meeting => meet-03
Span 7-8:  much => much
Span 5-6:  promises => promise-01
Span 1-2:  rest => rest

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),much,much,false), Span(5,6,List(1),promises,promise-01,false), Span(4,5,List(2),meeting,meet-03,false), Span(1,2,List(3),rest,rest,false)),Map(2 -> meet-03, 1 -> promise-01, 0 -> much, 3 -> rest),Map(m2 -> meet-03, m -> much, p -> promise-01, r -> rest))),[Ljava.lang.String;@15c2ef1b,Annotation([Ljava.lang.String;@30dfe0c6,[Ljava.lang.String;@3a1e003b,[Ljava.lang.String;@7a13f4c),Annotation([Ljava.lang.String;@6b429a7d,[Ljava.lang.String;@61acbb8e,[Ledu.cmu.lti.nlp.amr.Dependency;@134d99bb),Annotation([Ljava.lang.String;@4ba7cde3,[Ljava.lang.String;@75be18e2,[Ljava.lang.String;@1353d9d2),Annotation([Ljava.lang.String;@660173e7,[Ljava.lang.String;@69607702,[Ledu.cmu.lti.nlp.amr.Entity;@3c255a5a))
AMR:
(m2 / meet-03, part, r / rest)
(p / promise-01, ARG0, r / rest)
(p / promise-01, mod, m / much)

Decoded in 8,121 microseconds
Sentence: in his speech mr krenz also promised deep reforms in the economy education and the constitution and appealed to east germans not to join the human tide of emigration from the country

Spans:
Span 5-6:  also => also
Span 16-17:  and => and
Span 13-14:  and => and
Span 17-18:  appealed => appeal-02
Span 15-16:  constitution => constitution
Span 31-32:  country => country
Span 7-8:  deep => deep
Span 19-20:  east => east
Span 11-12:  economy => economy
Span 12-13:  education => educate-01
Span 20-21:  germans => (person :mod (country :name (name :op "Germany")))
Span 25-26:  human => human
Span 23-24:  join => join-01
Span 6-7:  promised => promise-01
Span 8-9:  reforms => reform-01
Span 2-3:  speech => speech
Span 26-27:  tide => tide

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),country,country,false), Span(26,27,List(1),tide,tide,false), Span(25,26,List(2),human,human,false), Span(23,24,List(3),join,join-01,false), Span(20,21,List(7, 6, 5, 4),germans,(person :mod (country :name (name :op "Germany"))),false), Span(19,20,List(8),east,east,false), Span(17,18,List(9),appealed,appeal-02,false), Span(16,17,List(10),and,and,false), Span(15,16,List(11),constitution,constitution,false), Span(13,14,List(12),and,and,false), Span(12,13,List(13),education,educate-01,false), Span(11,12,List(14),economy,economy,false), Span(8,9,List(15),reforms,reform-01,false), Span(7,8,List(16),deep,deep,false), Span(6,7,List(17),promised,promise-01,false), Span(5,6,List(18),also,also,false), Span(2,3,List(19),speech,speech,false)),Map(2 -> human, 5 -> country, 12 -> and, 15 -> reform-01, 8 -> east, 18 -> also, 7 -> "Germany", 17 -> promise-01, 1 -> tide, 4 -> person, 11 -> constitution, 14 -> economy, 6 -> name, 0 -> country, 9 -> appeal-02, 16 -> deep, 19 -> speech, 3 -> join-01, 10 -> and, 13 -> educate-01),Map(e -> east, n -> name, h -> human, t -> tide, p2 -> promise-01, e2 -> educate-01, j -> join-01, a3 -> and, s -> speech, d -> deep, p -> person, a -> appeal-02, c3 -> constitution, r -> reform-01, a2 -> and, c -> country, e3 -> economy, c2 -> country, a4 -> also))),[Ljava.lang.String;@182660ad,Annotation([Ljava.lang.String;@7f950a3d,[Ljava.lang.String;@11d36c3b,[Ljava.lang.String;@4f669ea1),Annotation([Ljava.lang.String;@5a3884c0,[Ljava.lang.String;@34938786,[Ledu.cmu.lti.nlp.amr.Dependency;@41a68961),Annotation([Ljava.lang.String;@1c8560f3,[Ljava.lang.String;@78a00025,[Ljava.lang.String;@5069bb01),Annotation([Ljava.lang.String;@4d7467e5,[Ljava.lang.String;@1551131d,[Ledu.cmu.lti.nlp.amr.Entity;@7dbddfd9))
AMR:
(a / appeal-02, ARG1, p / person)
(a / appeal-02, ARG2, j / join-01)
(a2 / and, op, a / appeal-02)
(a3 / and, op, a / appeal-02)
(a3 / and, op, c3 / constitution)
(a3 / and, op, e2 / educate-01)
(c2 / country, name, n / name)
(e2 / educate-01, mod, e3 / economy)
(j / join-01, ARG0, s / speech)
(j / join-01, ARG1, t / tide)
(n / name, op, "Germany")
(p / person, mod, c2 / country)
(p / person, mod, e / east)
(p2 / promise-01, ARG1, r / reform-01)
(p2 / promise-01, mod, a4 / also)
(r / reform-01, ARG0, c / country)
(r / reform-01, ARG1, d / deep)
(r / reform-01, example, a3 / and)
(t / tide, mod, h / human)

Decoded in 362,441 microseconds
Sentence: a kind of son of ellip   rather than a straight second series it promises to have learned the lessons of the past

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = a kind of son of ellip   rather than a straight second series it promises to have learned the lessons of the past
myTokenized = a kind of son of ellip rather than a straight second series it promises to have learned the lessons of the past
i = 6
prefix = List(a, kind, of, son, of, ellip, rather)
regexr = \Qa\E ?\Qk\E ?\Qi\E ?\Qn\E ?\Qd\E ?\Qo\E ?\Qf\E ?\Qs\E ?\Qo\E ?\Qn\E ?\Qo\E ?\Qf\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qp\E ?\Qr\E ?\Qa\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: two dishes had come down and one man had promised to remove his

Spans:
Span 5-6:  and => and
Span 4-5:  down => down
Span 7-8:  man => man
Span 9-10:  promised => promise-01
Span 11-12:  remove => remove-01
Span 0-1:  two => 2

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),remove,remove-01,false), Span(9,10,List(1),promised,promise-01,false), Span(7,8,List(2),man,man,false), Span(5,6,List(3),and,and,false), Span(4,5,List(4),down,down,false), Span(0,1,List(5),two,2,false)),Map(2 -> man, 5 -> 2, 1 -> promise-01, 4 -> down, 0 -> remove-01, 3 -> and),Map(2 -> 2, d -> down, m -> man, p -> promise-01, a -> and, r -> remove-01))),[Ljava.lang.String;@2467149d,Annotation([Ljava.lang.String;@6b7a6216,[Ljava.lang.String;@2fbdc97a,[Ljava.lang.String;@54f68112),Annotation([Ljava.lang.String;@393f052,[Ljava.lang.String;@65869953,[Ledu.cmu.lti.nlp.amr.Dependency;@67bc4c37),Annotation([Ljava.lang.String;@7b2fe415,[Ljava.lang.String;@5275de2,[Ljava.lang.String;@5b84a312),Annotation([Ljava.lang.String;@60ee21ae,[Ljava.lang.String;@31e55839,[Ledu.cmu.lti.nlp.amr.Entity;@48031fc6))
AMR:
(a / and, direction, d / down)
(a / and, op, p / promise-01)
(p / promise-01, ARG0, m / man)
(p / promise-01, ARG2, r / remove-01)
(r / remove-01, ARG1, 2 / 2)

Decoded in 16,490 microseconds
Sentence: when her complaint was passed on to the west oxfordshire councils chief executive he promised immediate action and commented i can understand how upsetting it is

Spans:
Span 16-17:  action => action
Span 17-18:  and => and
Span 20-21:  can => possible
Span 11-12:  chief => (have-org-role-91 :ARG2 chief)
Span 18-19:  commented => comment-01
Span 2-3:  complaint => complain-01
Span 10-11:  councils => council
Span 12-13:  executive => executive
Span 13-14:  he => he
Span 19-20:  i => i
Span 15-16:  immediate => immediate
Span 24-25:  it => it
Span 14-15:  promised => promise-01
Span 21-22:  understand => understand-01
Span 23-24:  upsetting => upset-01
Span 8-9:  west => west

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),it,it,false), Span(23,24,List(1),upsetting,upset-01,false), Span(21,22,List(2),understand,understand-01,false), Span(20,21,List(3),can,possible,false), Span(19,20,List(4),i,i,false), Span(18,19,List(5),commented,comment-01,false), Span(17,18,List(6),and,and,false), Span(16,17,List(7),action,action,false), Span(15,16,List(8),immediate,immediate,false), Span(14,15,List(9),promised,promise-01,false), Span(13,14,List(10),he,he,false), Span(12,13,List(11),executive,executive,false), Span(11,12,List(13, 12),chief,(have-org-role-91 :ARG2 chief),false), Span(10,11,List(14),councils,council,false), Span(8,9,List(15),west,west,false), Span(2,3,List(16),complaint,complain-01,false)),Map(2 -> understand-01, 5 -> comment-01, 12 -> have-org-role-91, 15 -> west, 8 -> immediate, 7 -> action, 1 -> upset-01, 4 -> i, 11 -> executive, 14 -> council, 6 -> and, 0 -> it, 9 -> promise-01, 16 -> complain-01, 3 -> possible, 10 -> he, 13 -> chief),Map(e -> executive, w -> west, h -> he, h2 -> have-org-role-91, p2 -> promise-01, c4 -> complain-01, u2 -> understand-01, i3 -> immediate, p -> possible, c3 -> council, a -> and, i2 -> i, i -> it, a2 -> action, c -> comment-01, u -> upset-01, c2 -> chief))),[Ljava.lang.String;@451b2519,Annotation([Ljava.lang.String;@7920afc0,[Ljava.lang.String;@50f2a460,[Ljava.lang.String;@6a05c424),Annotation([Ljava.lang.String;@20904ddd,[Ljava.lang.String;@61e7f8de,[Ledu.cmu.lti.nlp.amr.Dependency;@4483e909),Annotation([Ljava.lang.String;@30387103,[Ljava.lang.String;@498394b0,[Ljava.lang.String;@5d96d484),Annotation([Ljava.lang.String;@595a561c,[Ljava.lang.String;@39cb7618,[Ledu.cmu.lti.nlp.amr.Entity;@5cb63f4c))
AMR:
(a / and, op, c / comment-01)
(a / and, op, p2 / promise-01)
(a2 / action, time, i3 / immediate)
(c / comment-01, ARG1, u2 / understand-01)
(c4 / complain-01, ARG1, u / upset-01)
(h2 / have-org-role-91, ARG0, e / executive)
(h2 / have-org-role-91, ARG1, c3 / council)
(h2 / have-org-role-91, ARG2, c2 / chief)
(h2 / have-org-role-91, time, w / west)
(p / possible, domain, u2 / understand-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, e / executive)
(p2 / promise-01, ARG2, a2 / action)
(u / upset-01, ARG1, i / it)
(u2 / understand-01, ARG0, i2 / i)
(u2 / understand-01, ARG1, u / upset-01)

Decoded in 441,631 microseconds
Sentence:  i promised both clubs a decision when i returned from holiday

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  i promised both clubs a decision when i returned from holiday
myTokenized = i promised both clubs a decision when i returned from holiday
i = 0
prefix = List(i)
regexr = \Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: ill get you some sensible clothes martha promised noticing that grime had already attached itself to the hem of the dress

Spans:
Span 12-13:  already => already
Span 13-14:  attached => attach-01
Span 5-6:  clothes => clothes
Span 20-21:  dress => dress
Span 0-1:  ill => ill-41
Span 7-8:  promised => promise-01
Span 4-5:  sensible => sensible
Span 3-4:  some => some
Span 2-3:  you => you

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),dress,dress,false), Span(13,14,List(1),attached,attach-01,false), Span(12,13,List(2),already,already,false), Span(7,8,List(3),promised,promise-01,false), Span(5,6,List(4),clothes,clothes,false), Span(4,5,List(5),sensible,sensible,false), Span(3,4,List(6),some,some,false), Span(2,3,List(7),you,you,false), Span(0,1,List(8),ill,ill-41,false)),Map(2 -> already, 5 -> sensible, 8 -> ill-41, 7 -> you, 1 -> attach-01, 4 -> clothes, 6 -> some, 0 -> dress, 3 -> promise-01),Map(s2 -> some, s -> sensible, d -> dress, y -> you, p -> promise-01, a -> attach-01, i -> ill-41, a2 -> already, c -> clothes))),[Ljava.lang.String;@47a2c1d8,Annotation([Ljava.lang.String;@e6470a6,[Ljava.lang.String;@641fa9ab,[Ljava.lang.String;@5abc4ce7),Annotation([Ljava.lang.String;@5d003b,[Ljava.lang.String;@59ba21ac,[Ledu.cmu.lti.nlp.amr.Dependency;@4af8d139),Annotation([Ljava.lang.String;@15701ba3,[Ljava.lang.String;@73267553,[Ljava.lang.String;@61e0d734),Annotation([Ljava.lang.String;@7050c91f,[Ljava.lang.String;@47c44bd4,[Ledu.cmu.lti.nlp.amr.Entity;@284e701b))
AMR:
(a / attach-01, ARG1, p / promise-01)
(a / attach-01, time, a2 / already)
(i / ill-41, ARG0, d / dress)
(i / ill-41, ARG1, s / sensible)
(p / promise-01, ARG0, c / clothes)
(p / promise-01, ARG1, y / you)
(y / you, mod, i / ill-41)
(y / you, quant, s2 / some)

Decoded in 52,283 microseconds
Sentence: the allrounder said my new contract was for less money than i had been promised for 1990

Spans:
Span 16-17:  1990 => (date-entity :year 1990)
Span 5-6:  contract => contract-02
Span 11-12:  i => i
Span 8-9:  less => less
Span 9-10:  money => money
Span 4-5:  new => new
Span 14-15:  promised => promise-01
Span 2-3:  said => say-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),1990,(date-entity :year 1990),false), Span(14,15,List(2),promised,promise-01,false), Span(11,12,List(3),i,i,false), Span(9,10,List(4),money,money,false), Span(8,9,List(5),less,less,false), Span(5,6,List(6),contract,contract-02,false), Span(4,5,List(7),new,new,false), Span(2,3,List(8),said,say-01,false)),Map(2 -> promise-01, 5 -> less, 8 -> say-01, 7 -> new, 1 -> 1990, 4 -> money, 6 -> contract-02, 0 -> date-entity, 3 -> i),Map(n -> new, s -> say-01, m -> money, d -> date-entity, p -> promise-01, 1 -> 1990, i -> i, c -> contract-02, l -> less))),[Ljava.lang.String;@35a21149,Annotation([Ljava.lang.String;@231ceb21,[Ljava.lang.String;@3f90d589,[Ljava.lang.String;@3db335f9),Annotation([Ljava.lang.String;@409c8e14,[Ljava.lang.String;@6633e42f,[Ledu.cmu.lti.nlp.amr.Dependency;@58c9fe14),Annotation([Ljava.lang.String;@35480096,[Ljava.lang.String;@a1e932e,[Ljava.lang.String;@5d50b632),Annotation([Ljava.lang.String;@5de9bc7a,[Ljava.lang.String;@1c551dc1,[Ledu.cmu.lti.nlp.amr.Entity;@1814786f))
AMR:
(c / contract-02, mod, n / new)
(d / date-entity, year, 1 / 1990)
(m / money, poss, i / i)
(p / promise-01, ARG0, c / contract-02)
(p / promise-01, ARG1, i / i)
(p / promise-01, time, d / date-entity)
(s / say-01, ARG0, l / less)
(s / say-01, ARG1, c / contract-02)

Decoded in 45,606 microseconds
Sentence: at the outset of a season which promises much for his hampshire yard baldings slight preference is for the champion

Spans:
Span 19-20:  champion => champion
Span 8-9:  much => much
Span 2-3:  outset => outset
Span 15-16:  preference => prefer-01
Span 7-8:  promises => promise-01
Span 5-6:  season => season
Span 14-15:  slight => slight
Span 12-13:  yard => yard

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),champion,champion,false), Span(15,16,List(1),preference,prefer-01,false), Span(14,15,List(2),slight,slight,false), Span(12,13,List(3),yard,yard,false), Span(8,9,List(4),much,much,false), Span(7,8,List(5),promises,promise-01,false), Span(5,6,List(6),season,season,false), Span(2,3,List(7),outset,outset,false)),Map(2 -> slight, 5 -> promise-01, 7 -> outset, 1 -> prefer-01, 4 -> much, 6 -> season, 0 -> champion, 3 -> yard),Map(s2 -> season, p2 -> promise-01, s -> slight, m -> much, y -> yard, p -> prefer-01, c -> champion, o -> outset))),[Ljava.lang.String;@67eecbc2,Annotation([Ljava.lang.String;@6e8362dc,[Ljava.lang.String;@73cf9232,[Ljava.lang.String;@40874c04),Annotation([Ljava.lang.String;@728fbbb4,[Ljava.lang.String;@3a6c612e,[Ledu.cmu.lti.nlp.amr.Dependency;@216030f9),Annotation([Ljava.lang.String;@322f3c8d,[Ljava.lang.String;@3b3066b8,[Ljava.lang.String;@66a7d863),Annotation([Ljava.lang.String;@156f803c,[Ljava.lang.String;@4b4bee22,[Ledu.cmu.lti.nlp.amr.Entity;@65ff20cc))
AMR:
(o / outset, location, s2 / season)
(p / prefer-01, ARG0, c / champion)
(p / prefer-01, ARG1, y / yard)
(p / prefer-01, mod, s / slight)
(p2 / promise-01, ARG0, s2 / season)
(p2 / promise-01, ARG1, p / prefer-01)
(p2 / promise-01, concession, m / much)

Decoded in 38,394 microseconds
Sentence: we will be much more visible promised brett yesterday

Spans:
Span 3-4:  much => much
Span 6-7:  promised => promise-01
Span 5-6:  visible => visible
Span 0-1:  we => we
Span 8-9:  yesterday => yesterday

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),yesterday,yesterday,false), Span(6,7,List(1),promised,promise-01,false), Span(5,6,List(2),visible,visible,false), Span(3,4,List(3),much,much,false), Span(0,1,List(4),we,we,false)),Map(2 -> visible, 1 -> promise-01, 4 -> we, 0 -> yesterday, 3 -> much),Map(w -> we, m -> much, v -> visible, p -> promise-01, y -> yesterday))),[Ljava.lang.String;@50c26564,Annotation([Ljava.lang.String;@a8eb1a8,[Ljava.lang.String;@1e319202,[Ljava.lang.String;@4868d0ca),Annotation([Ljava.lang.String;@5963a2e9,[Ljava.lang.String;@1c5c9cd8,[Ledu.cmu.lti.nlp.amr.Dependency;@43d3774),Annotation([Ljava.lang.String;@4f03a2d8,[Ljava.lang.String;@77b83b6e,[Ljava.lang.String;@6045f029),Annotation([Ljava.lang.String;@f9a4520,[Ljava.lang.String;@59303fe0,[Ledu.cmu.lti.nlp.amr.Entity;@6eb1b8de))
AMR:
(p / promise-01, ARG0, m / much)
(p / promise-01, ARG1, y / yesterday)
(v / visible, domain, w / we)
(v / visible, time, p / promise-01)

Decoded in 36,848 microseconds
Sentence: a thorough review of brs industrial tactics is promised after the strike

Spans:
Span 9-10:  after => after
Span 5-6:  industrial => industry
Span 8-9:  promised => promise-01
Span 2-3:  review => review-01
Span 11-12:  strike => strike-01
Span 6-7:  tactics => tactic
Span 1-2:  thorough => thorough

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),strike,strike-01,false), Span(9,10,List(1),after,after,false), Span(8,9,List(2),promised,promise-01,false), Span(6,7,List(3),tactics,tactic,false), Span(5,6,List(4),industrial,industry,false), Span(2,3,List(5),review,review-01,false), Span(1,2,List(6),thorough,thorough,false)),Map(2 -> promise-01, 5 -> review-01, 1 -> after, 4 -> industry, 6 -> thorough, 0 -> strike-01, 3 -> tactic),Map(t -> tactic, s -> strike-01, p -> promise-01, a -> after, t2 -> thorough, r -> review-01, i -> industry))),[Ljava.lang.String;@55e02f98,Annotation([Ljava.lang.String;@7154d033,[Ljava.lang.String;@7730fe65,[Ljava.lang.String;@318dd605),Annotation([Ljava.lang.String;@56ddfbad,[Ljava.lang.String;@7b64769,[Ledu.cmu.lti.nlp.amr.Dependency;@500a4273),Annotation([Ljava.lang.String;@5190b512,[Ljava.lang.String;@735fda93,[Ljava.lang.String;@1a072412),Annotation([Ljava.lang.String;@4ad12717,[Ljava.lang.String;@695d7d60,[Ledu.cmu.lti.nlp.amr.Entity;@78d25faa))
AMR:
(a / after, op, s / strike-01)
(p / promise-01, ARG1, r / review-01)
(p / promise-01, time, a / after)
(r / review-01, ARG1, t / tactic)
(r / review-01, manner, t2 / thorough)
(t / tactic, mod, i / industry)

Decoded in 19,543 microseconds
Sentence: the somerset levels esa promises to absorb 1

Spans:
Span 7-8:  1 => 1
Span 6-7:  absorb => absorb-01
Span 2-3:  levels => level
Span 4-5:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),1,1,false), Span(6,7,List(1),absorb,absorb-01,false), Span(4,5,List(2),promises,promise-01,false), Span(2,3,List(3),levels,level,false)),Map(2 -> promise-01, 1 -> absorb-01, 0 -> 1, 3 -> level),Map(p -> promise-01, 1 -> 1, a -> absorb-01, l -> level))),[Ljava.lang.String;@3b86cfde,Annotation([Ljava.lang.String;@fb9165a,[Ljava.lang.String;@406a76c6,[Ljava.lang.String;@d9be234),Annotation([Ljava.lang.String;@751fcae6,[Ljava.lang.String;@7a41fe1c,[Ledu.cmu.lti.nlp.amr.Dependency;@2921ef9),Annotation([Ljava.lang.String;@472f6ec0,[Ljava.lang.String;@7b1023c2,[Ljava.lang.String;@609bd4ac),Annotation([Ljava.lang.String;@16a799c1,[Ljava.lang.String;@555f5985,[Ledu.cmu.lti.nlp.amr.Entity;@66ee568c))
AMR:
(p / promise-01, ARG1, l / level)
(p / promise-01, ARG2, a / absorb-01)
(p / promise-01, ARG3, 1 / 1)

Decoded in 8,270 microseconds
Sentence: cheeks glazed with tears he promised her that now that his rank had been increased he would be able to increase the amount of money he had been sending to her in order to make up from what he would be costing them by refusing to resign from the army and sign with the morris office

Spans:
Span 18-19:  able => possible
Span 22-23:  amount => amount
Span 50-51:  and => and
Span 49-50:  army => army
Span 41-42:  costing => cost-01
Span 38-39:  he => he
Span 25-26:  he => he
Span 15-16:  he => he
Span 4-5:  he => he
Span 20-21:  increase => increase-01
Span 14-15:  increased => increase-01
Span 24-25:  money => money
Span 8-9:  now => now
Span 55-56:  office => office
Span 5-6:  promised => promise-01
Span 44-45:  refusing => refuse-01
Span 46-47:  resign => resign-01
Span 28-29:  sending => send-01
Span 3-4:  tears => tear

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(55,56,List(0),office,office,false), Span(50,51,List(1),and,and,false), Span(49,50,List(2),army,army,false), Span(46,47,List(3),resign,resign-01,false), Span(44,45,List(4),refusing,refuse-01,false), Span(41,42,List(5),costing,cost-01,false), Span(38,39,List(6),he,he,false), Span(28,29,List(7),sending,send-01,false), Span(25,26,List(8),he,he,false), Span(24,25,List(9),money,money,false), Span(22,23,List(10),amount,amount,false), Span(20,21,List(11),increase,increase-01,false), Span(18,19,List(12),able,possible,false), Span(15,16,List(13),he,he,false), Span(14,15,List(14),increased,increase-01,false), Span(8,9,List(15),now,now,false), Span(5,6,List(16),promised,promise-01,false), Span(4,5,List(17),he,he,false), Span(3,4,List(18),tears,tear,false)),Map(2 -> army, 5 -> cost-01, 12 -> possible, 15 -> now, 8 -> he, 18 -> tear, 7 -> send-01, 17 -> he, 1 -> and, 4 -> refuse-01, 11 -> increase-01, 14 -> increase-01, 6 -> he, 0 -> office, 9 -> money, 16 -> promise-01, 3 -> resign-01, 10 -> amount, 13 -> he),Map(n -> now, h -> he, h2 -> he, t -> tear, p2 -> promise-01, a3 -> amount, s -> send-01, h4 -> he, m -> money, r2 -> refuse-01, p -> possible, a -> and, i2 -> increase-01, a2 -> army, r -> resign-01, i -> increase-01, h3 -> he, c -> cost-01, o -> office))),[Ljava.lang.String;@e07e154,Annotation([Ljava.lang.String;@275a58fe,[Ljava.lang.String;@1c889fe1,[Ljava.lang.String;@4db87b69),Annotation([Ljava.lang.String;@aae525c,[Ljava.lang.String;@3aa11b7e,[Ledu.cmu.lti.nlp.amr.Dependency;@27140b44),Annotation([Ljava.lang.String;@14efb167,[Ljava.lang.String;@467ebee,[Ljava.lang.String;@42b25884),Annotation([Ljava.lang.String;@4ad16451,[Ljava.lang.String;@79112836,[Ledu.cmu.lti.nlp.amr.Entity;@55672f52))
AMR:
(a / and, op, r / resign-01)
(a / and, op, s / send-01)
(c / cost-01, ARG0, h / he)
(c / cost-01, ARG1, r2 / refuse-01)
(i / increase-01, ARG0, h3 / he)
(i / increase-01, ARG1, a3 / amount)
(i2 / increase-01, ARG0, h4 / he)
(i2 / increase-01, ARG1, h2 / he)
(m / money, quant, a3 / amount)
(p / possible, domain, i / increase-01)
(p2 / promise-01, ARG0, h4 / he)
(p2 / promise-01, ARG1, t / tear)
(p2 / promise-01, degree, n / now)
(r / resign-01, ARG0, a2 / army)
(r2 / refuse-01, ARG0, o / office)
(r2 / refuse-01, ARG1, r / resign-01)
(s / send-01, ARG0, h2 / he)
(s / send-01, ARG1, m / money)

Decoded in 414,379 microseconds
Sentence: delegates to the conference promised to set up a survey on antarctica which by virtue of its isolation is one of the purest research environments from which to study the ozone hole and its impact on atmospheric change

NER Entity: (country :name (name :op "antarctica"))
Spans:
Span 32-33:  and => and
Span 36-37:  atmospheric => atmosphere
Span 37-38:  change => change-01
Span 3-4:  conference => conference
Span 0-1:  delegates => (person :ARG2-of delegate-01)
Span 24-25:  environments => environment
Span 31-32:  hole => hole
Span 34-35:  impact => impact-01
Span 17-18:  isolation => isolate-01
Span 30-31:  ozone => ozone
Span 4-5:  promised => promise-01
Span 23-24:  research => research-01
Span 28-29:  study => study-01
Span 9-10:  survey => survey-01
Span 14-15:  virtue => virtue

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),change,change-01,false), Span(36,37,List(1),atmospheric,atmosphere,false), Span(34,35,List(2),impact,impact-01,false), Span(32,33,List(3),and,and,false), Span(31,32,List(4),hole,hole,false), Span(30,31,List(5),ozone,ozone,false), Span(28,29,List(6),study,study-01,false), Span(24,25,List(7),environments,environment,false), Span(23,24,List(8),research,research-01,false), Span(17,18,List(9),isolation,isolate-01,false), Span(14,15,List(10),virtue,virtue,false), Span(9,10,List(11),survey,survey-01,false), Span(4,5,List(12),promised,promise-01,false), Span(3,4,List(13),conference,conference,false), Span(0,1,List(15, 14),delegates,(person :ARG2-of delegate-01),false)),Map(2 -> impact-01, 5 -> ozone, 12 -> promise-01, 15 -> delegate-01, 8 -> research-01, 7 -> environment, 1 -> atmosphere, 4 -> hole, 11 -> survey-01, 14 -> person, 6 -> study-01, 0 -> change-01, 9 -> isolate-01, 3 -> and, 10 -> virtue, 13 -> conference),Map(e -> environment, h -> hole, s2 -> survey-01, p2 -> person, s -> study-01, v -> virtue, d -> delegate-01, p -> promise-01, a -> atmosphere, i2 -> isolate-01, i -> impact-01, a2 -> and, r -> research-01, c -> change-01, o -> ozone, c2 -> conference))),[Ljava.lang.String;@6953dc4b,Annotation([Ljava.lang.String;@a3f5f3,[Ljava.lang.String;@c6824d9,[Ljava.lang.String;@94b28ec),Annotation([Ljava.lang.String;@256ba2b8,[Ljava.lang.String;@3d87f139,[Ledu.cmu.lti.nlp.amr.Dependency;@27edf4be),Annotation([Ljava.lang.String;@775efa6c,[Ljava.lang.String;@7c8b05ad,[Ljava.lang.String;@b21e0bc),Annotation([Ljava.lang.String;@5d295c59,[Ljava.lang.String;@466e06d7,[Ledu.cmu.lti.nlp.amr.Entity;@61833160))
AMR:
(a2 / and, op, i / impact-01)
(c / change-01, mod, a / atmosphere)
(d / delegate-01, ARG2, p2 / person)
(d / delegate-01, location, c2 / conference)
(e / environment, mod, r / research-01)
(e / environment, purpose, s / study-01)
(i / impact-01, ARG0, h / hole)
(i / impact-01, ARG1, o / ozone)
(i2 / isolate-01, ARG1, v / virtue)
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG2, s / study-01)
(s / study-01, ARG1, a2 / and)
(s / study-01, ARG2, c / change-01)
(s2 / survey-01, ARG0, p2 / person)
(s2 / survey-01, ARG1, v / virtue)

Decoded in 335,736 microseconds
Sentence: indeed promising to do something and failing will further undermine public trust already hard hit this autumn by a series of scandals

Spans:
Span 12-13:  already => already
Span 5-6:  and => and
Span 6-7:  failing => fail-01
Span 8-9:  further => further
Span 13-14:  hard => hard
Span 14-15:  hit => hit-01
Span 0-1:  indeed => indeed
Span 1-2:  promising => promise-01
Span 10-11:  public => public
Span 19-20:  series => series
Span 4-5:  something => something
Span 15-16:  this => this
Span 11-12:  trust => trust-01
Span 9-10:  undermine => undermine-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),series,series,false), Span(15,16,List(1),this,this,false), Span(14,15,List(2),hit,hit-01,false), Span(13,14,List(3),hard,hard,false), Span(12,13,List(4),already,already,false), Span(11,12,List(5),trust,trust-01,false), Span(10,11,List(6),public,public,false), Span(9,10,List(7),undermine,undermine-01,false), Span(8,9,List(8),further,further,false), Span(6,7,List(9),failing,fail-01,false), Span(5,6,List(10),and,and,false), Span(4,5,List(11),something,something,false), Span(1,2,List(12),promising,promise-01,false), Span(0,1,List(13),indeed,indeed,false)),Map(2 -> hit-01, 5 -> trust-01, 12 -> promise-01, 8 -> further, 7 -> undermine-01, 1 -> this, 4 -> already, 11 -> something, 6 -> public, 0 -> series, 9 -> fail-01, 3 -> hard, 10 -> and, 13 -> indeed),Map(h -> hit-01, h2 -> hard, s2 -> something, t -> this, p2 -> promise-01, s -> series, p -> public, a -> already, t2 -> trust-01, i -> indeed, a2 -> and, u -> undermine-01, f2 -> fail-01, f -> further))),[Ljava.lang.String;@62afaca6,Annotation([Ljava.lang.String;@7b6ff8e7,[Ljava.lang.String;@743e4500,[Ljava.lang.String;@24243e9f),Annotation([Ljava.lang.String;@478b4b42,[Ljava.lang.String;@9f9fec0,[Ledu.cmu.lti.nlp.amr.Dependency;@7bc3f45d),Annotation([Ljava.lang.String;@7de04525,[Ljava.lang.String;@edbc0b3,[Ljava.lang.String;@7d482f63),Annotation([Ljava.lang.String;@e1f4cd7,[Ljava.lang.String;@28edbe7f,[Ledu.cmu.lti.nlp.amr.Entity;@107598d7))
AMR:
(a2 / and, op, f2 / fail-01)
(a2 / and, op, p2 / promise-01)
(f2 / fail-01, ARG0, h2 / hard)
(f2 / fail-01, ARG1, u / undermine-01)
(h / hit-01, ARG1, s / series)
(h / hit-01, mod, h2 / hard)
(p2 / promise-01, ARG0, t / this)
(p2 / promise-01, ARG1, s2 / something)
(p2 / promise-01, mod, i / indeed)
(t2 / trust-01, mod, p / public)
(u / undermine-01, ARG1, t2 / trust-01)
(u / undermine-01, degree, f / further)
(u / undermine-01, time, a / already)

Decoded in 287,420 microseconds
Sentence: qpr v liverpool trevor francis is promising a new formation

Spans:
Span 9-10:  formation => form-01
Span 8-9:  new => new
Span 6-7:  promising => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),formation,form-01,false), Span(8,9,List(1),new,new,false), Span(6,7,List(2),promising,promise-01,false)),Map(2 -> promise-01, 1 -> new, 0 -> form-01),Map(n -> new, p -> promise-01, f -> form-01))),[Ljava.lang.String;@188553b2,Annotation([Ljava.lang.String;@5939d7b1,[Ljava.lang.String;@647fd33a,[Ljava.lang.String;@404b862),Annotation([Ljava.lang.String;@51e52bfd,[Ljava.lang.String;@1cab190c,[Ledu.cmu.lti.nlp.amr.Dependency;@24f97188),Annotation([Ljava.lang.String;@748caaae,[Ljava.lang.String;@3f19c149,[Ljava.lang.String;@33e0bffc),Annotation([Ljava.lang.String;@685c53ff,[Ljava.lang.String;@58ebfe0,[Ledu.cmu.lti.nlp.amr.Entity;@5ed70df9))
AMR:
(f / form-01, mod, n / new)
(p / promise-01, ARG1, f / form-01)

Decoded in 7,729 microseconds
Sentence: he virtuously promised reform and a committee of elder statesmen was set up to scrutinize future recommendations dash

Spans:
Span 4-5:  and => and
Span 6-7:  committee => committee
Span 8-9:  elder => elder
Span 15-16:  future => future
Span 0-1:  he => he
Span 2-3:  promised => promise-01
Span 16-17:  recommendations => recommend-01
Span 3-4:  reform => reform-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),recommendations,recommend-01,false), Span(15,16,List(1),future,future,false), Span(8,9,List(2),elder,elder,false), Span(6,7,List(3),committee,committee,false), Span(4,5,List(4),and,and,false), Span(3,4,List(5),reform,reform-01,false), Span(2,3,List(6),promised,promise-01,false), Span(0,1,List(7),he,he,false)),Map(2 -> elder, 5 -> reform-01, 7 -> he, 1 -> future, 4 -> and, 6 -> promise-01, 0 -> recommend-01, 3 -> committee),Map(e -> elder, h -> he, p -> promise-01, r2 -> reform-01, a -> and, r -> recommend-01, c -> committee, f -> future))),[Ljava.lang.String;@78d68713,Annotation([Ljava.lang.String;@4c3e2e5f,[Ljava.lang.String;@6568614,[Ljava.lang.String;@1a7c8e4c),Annotation([Ljava.lang.String;@67622d29,[Ljava.lang.String;@5e8313c5,[Ledu.cmu.lti.nlp.amr.Dependency;@6f871afc),Annotation([Ljava.lang.String;@efccf98,[Ljava.lang.String;@77a10bd7,[Ljava.lang.String;@6e108d9c),Annotation([Ljava.lang.String;@c13538,[Ljava.lang.String;@c8cefeb,[Ledu.cmu.lti.nlp.amr.Entity;@78db33bc))
AMR:
(a / and, op, c / committee)
(a / and, op, r2 / reform-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, f / future)
(p / promise-01, ARG2, r2 / reform-01)
(r / recommend-01, ARG1, a / and)
(r2 / reform-01, ARG1, e / elder)

Decoded in 36,290 microseconds
Sentence: john major the foreign secretary promised to keep the lebanon hostages high on the public agenda after attending a memorial service for the mother of the missing british journalist john mccarthy

NER Entity: (country :name (name :op "lebanon"))
NER Entity: (thing :name (name :op "british"))
Spans:
Span 16-17:  after => after
Span 15-16:  agenda => agenda
Span 17-18:  attending => attend-01
Span 3-4:  foreign => foreign
Span 11-12:  high => high
Span 10-11:  hostages => hostage
Span 28-29:  journalist => journalist
Span 1-2:  major => major
Span 19-20:  memorial => memorial
Span 26-27:  missing => miss-01
Span 23-24:  mother => (have-rel-role-91 :ARG2 mother)
Span 5-6:  promised => promise-01
Span 14-15:  public => public
Span 4-5:  secretary => secretary

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),journalist,journalist,false), Span(26,27,List(1),missing,miss-01,false), Span(23,24,List(3, 2),mother,(have-rel-role-91 :ARG2 mother),false), Span(19,20,List(4),memorial,memorial,false), Span(17,18,List(5),attending,attend-01,false), Span(16,17,List(6),after,after,false), Span(15,16,List(7),agenda,agenda,false), Span(14,15,List(8),public,public,false), Span(11,12,List(9),high,high,false), Span(10,11,List(10),hostages,hostage,false), Span(5,6,List(11),promised,promise-01,false), Span(4,5,List(12),secretary,secretary,false), Span(3,4,List(13),foreign,foreign,false), Span(1,2,List(14),major,major,false)),Map(2 -> have-rel-role-91, 5 -> attend-01, 12 -> secretary, 8 -> public, 7 -> agenda, 1 -> miss-01, 4 -> memorial, 11 -> promise-01, 14 -> major, 6 -> after, 0 -> journalist, 9 -> high, 3 -> mother, 10 -> hostage, 13 -> foreign),Map(m3 -> memorial, h -> have-rel-role-91, h2 -> high, m2 -> mother, p2 -> promise-01, j -> journalist, a3 -> agenda, s -> secretary, m -> miss-01, p -> public, a -> attend-01, m4 -> major, a2 -> after, h3 -> hostage, f -> foreign))),[Ljava.lang.String;@7f21b9a0,Annotation([Ljava.lang.String;@7f21f894,[Ljava.lang.String;@f46fdc1,[Ljava.lang.String;@7dbd91bc),Annotation([Ljava.lang.String;@28ab0e22,[Ljava.lang.String;@762cef09,[Ledu.cmu.lti.nlp.amr.Dependency;@1747c),Annotation([Ljava.lang.String;@5f8678e4,[Ljava.lang.String;@756af1ba,[Ljava.lang.String;@4024268f),Annotation([Ljava.lang.String;@55f972f,[Ljava.lang.String;@46be916a,[Ledu.cmu.lti.nlp.amr.Entity;@93cea6f))
AMR:
(a / attend-01, ARG0, h3 / hostage)
(a / attend-01, ARG1, m3 / memorial)
(a2 / after, op, a / attend-01)
(a3 / agenda, mod, p / public)
(a3 / agenda, topic, a / attend-01)
(h / have-rel-role-91, ARG0, m4 / major)
(h / have-rel-role-91, ARG1, j / journalist)
(h / have-rel-role-91, ARG2, m2 / mother)
(h2 / high, location, a3 / agenda)
(m / miss-01, ARG0, j / journalist)
(m / miss-01, ARG1, p2 / promise-01)
(p2 / promise-01, ARG0, s / secretary)
(p2 / promise-01, ARG1, h3 / hostage)
(s / secretary, mod, f / foreign)

Decoded in 306,460 microseconds
Sentence: even the bush administration which has rejected the targeted industrybyindustry response advocated by many in the us congress has promised to produce its own competitiveness agenda following realese of the presidents new budget in january

Spans:
Span 3-4:  administration => administrate-01
Span 11-12:  advocated => advocate-01
Span 25-26:  agenda => agenda
Span 32-33:  budget => budget
Span 2-3:  bush => bush-league
Span 24-25:  competitiveness => competitiveness
Span 17-18:  congress => (government-organization :name (name :op "Congress"))
Span 34-35:  january => (date-entity :month 1)
Span 13-14:  many => many
Span 31-32:  new => new
Span 30-31:  presidents => president
Span 21-22:  produce => produce-01
Span 19-20:  promised => promise-01
Span 6-7:  rejected => reject-01
Span 10-11:  response => respond-01
Span 8-9:  targeted => target-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(1, 0),january,(date-entity :month 1),false), Span(32,33,List(2),budget,budget,false), Span(31,32,List(3),new,new,false), Span(30,31,List(4),presidents,president,false), Span(25,26,List(5),agenda,agenda,false), Span(24,25,List(6),competitiveness,competitiveness,false), Span(21,22,List(7),produce,produce-01,false), Span(19,20,List(8),promised,promise-01,false), Span(17,18,List(11, 10, 9),congress,(government-organization :name (name :op "Congress")),false), Span(13,14,List(12),many,many,false), Span(11,12,List(13),advocated,advocate-01,false), Span(10,11,List(14),response,respond-01,false), Span(8,9,List(15),targeted,target-01,false), Span(6,7,List(16),rejected,reject-01,false), Span(3,4,List(17),administration,administrate-01,false), Span(2,3,List(18),bush,bush-league,false)),Map(2 -> budget, 5 -> agenda, 12 -> many, 15 -> target-01, 8 -> promise-01, 18 -> bush-league, 7 -> produce-01, 17 -> administrate-01, 1 -> 1, 4 -> president, 11 -> "Congress", 14 -> respond-01, 6 -> competitiveness, 0 -> date-entity, 9 -> government-organization, 16 -> reject-01, 3 -> new, 10 -> name, 13 -> advocate-01),Map(n -> new, t -> target-01, b -> budget, b2 -> bush-league, p2 -> produce-01, a3 -> administrate-01, d -> date-entity, m -> many, 1 -> 1, r2 -> reject-01, p -> president, g -> government-organization, a -> agenda, r -> respond-01, a2 -> advocate-01, c -> competitiveness, p3 -> promise-01, n2 -> name))),[Ljava.lang.String;@7e432225,Annotation([Ljava.lang.String;@6976ebe5,[Ljava.lang.String;@7e793d7a,[Ljava.lang.String;@49b35574),Annotation([Ljava.lang.String;@1caf5879,[Ljava.lang.String;@3bd97ea5,[Ledu.cmu.lti.nlp.amr.Dependency;@4409a155),Annotation([Ljava.lang.String;@543ef658,[Ljava.lang.String;@719f369d,[Ljava.lang.String;@bbab7b2),Annotation([Ljava.lang.String;@f720d22,[Ljava.lang.String;@8bc3b1a,[Ledu.cmu.lti.nlp.amr.Entity;@7dcc2c70))
AMR:
(a / agenda, domain, a3 / administrate-01)
(a / agenda, mod, c / competitiveness)
(a2 / advocate-01, ARG0, g / government-organization)
(a2 / advocate-01, ARG1, r / respond-01)
(a3 / administrate-01, ARG1, m / many)
(a3 / administrate-01, mod, b2 / bush-league)
(b / budget, mod, n / new)
(b / budget, poss, d / date-entity)
(c / competitiveness, poss, g / government-organization)
(d / date-entity, month, 1 / 1)
(g / government-organization, name, n2 / name)
(n2 / name, op, "Congress")
(p2 / produce-01, ARG1, a / agenda)
(p3 / promise-01, ARG1, p2 / produce-01)
(r / respond-01, ARG1, n / new)
(r2 / reject-01, ARG1, r / respond-01)
(t / target-01, ARG0, p / president)
(t / target-01, ARG1, r / respond-01)

Decoded in 424,390 microseconds
Sentence: the greek people are promised another election in the autumn to sort out the leftright thing

NER Entity: (thing :name (name :op "greek"))
Spans:
Span 5-6:  another => another
Span 6-7:  election => elect-01
Span 4-5:  promised => promise-01
Span 11-12:  sort => sort
Span 15-16:  thing => thing

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),thing,thing,false), Span(11,12,List(1),sort,sort,false), Span(6,7,List(2),election,elect-01,false), Span(5,6,List(3),another,another,false), Span(4,5,List(4),promised,promise-01,false)),Map(2 -> elect-01, 1 -> sort, 4 -> promise-01, 0 -> thing, 3 -> another),Map(e -> elect-01, t -> thing, s -> sort, p -> promise-01, a -> another))),[Ljava.lang.String;@6779ad95,Annotation([Ljava.lang.String;@65734645,[Ljava.lang.String;@730a900b,[Ljava.lang.String;@3a76fd2e),Annotation([Ljava.lang.String;@59e7f4fe,[Ljava.lang.String;@b857dcf,[Ledu.cmu.lti.nlp.amr.Dependency;@6906a6f1),Annotation([Ljava.lang.String;@33ba4e15,[Ljava.lang.String;@c5c5f3b,[Ljava.lang.String;@47020d4),Annotation([Ljava.lang.String;@5d7b4092,[Ljava.lang.String;@46cc6130,[Ledu.cmu.lti.nlp.amr.Entity;@1400baa0))
AMR:
(e / elect-01, mod, a / another)
(p / promise-01, ARG2, e / elect-01)
(p / promise-01, purpose, s / sort)
(s / sort, path, t / thing)

Decoded in 17,372 microseconds
Sentence: consumer goods output next year would rise by 66bn roubles mr ryzhkov promised compared with the recent average of 17bn

Spans:
Span 13-14:  compared => compare-01
Span 0-1:  consumer => consume-01
Span 1-2:  goods => good
Span 3-4:  next => next
Span 2-3:  output => output
Span 12-13:  promised => promise-01
Span 16-17:  recent => recent
Span 6-7:  rise => rise-01
Span 4-5:  year => year

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),recent,recent,false), Span(13,14,List(1),compared,compare-01,false), Span(12,13,List(2),promised,promise-01,false), Span(6,7,List(3),rise,rise-01,false), Span(4,5,List(4),year,year,false), Span(3,4,List(5),next,next,false), Span(2,3,List(6),output,output,false), Span(1,2,List(7),goods,good,false), Span(0,1,List(8),consumer,consume-01,false)),Map(2 -> promise-01, 5 -> next, 8 -> consume-01, 7 -> good, 1 -> compare-01, 4 -> year, 6 -> output, 0 -> recent, 3 -> rise-01),Map(n -> next, g -> good, y -> year, r2 -> rise-01, p -> promise-01, r -> recent, c -> compare-01, o -> output, c2 -> consume-01))),[Ljava.lang.String;@697ef1a5,Annotation([Ljava.lang.String;@d2abdbf,[Ljava.lang.String;@710f4d59,[Ljava.lang.String;@239f480c),Annotation([Ljava.lang.String;@2e331e19,[Ljava.lang.String;@1dfd1301,[Ledu.cmu.lti.nlp.amr.Dependency;@51eab608),Annotation([Ljava.lang.String;@854f13c,[Ljava.lang.String;@a99e6a,[Ljava.lang.String;@7fdf417c),Annotation([Ljava.lang.String;@1a44757a,[Ljava.lang.String;@47caa0f,[Ledu.cmu.lti.nlp.amr.Entity;@1480c116))
AMR:
(c / compare-01, ARG1, p / promise-01)
(c2 / consume-01, ARG0, r / recent)
(c2 / consume-01, ARG1, o / output)
(o / output, mod, g / good)
(p / promise-01, ARG1, o / output)
(r2 / rise-01, ARG1, p / promise-01)
(r2 / rise-01, time, y / year)
(y / year, mod, n / next)

Decoded in 60,744 microseconds
Sentence:   this caring image is based on performance in that the oxfordshire labour party in both the 1985 and 1989 election manifestos promised a countywide bus pass scheme and the labour transport spokesperson initiated such a scheme in 1987 on the basis of a shared cost with the district councils

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   this caring image is based on performance in that the oxfordshire labour party in both the 1985 and 1989 election manifestos promised a countywide bus pass scheme and the labour transport spokesperson initiated such a scheme in 1987 on the basis of a shared cost with the district councils
myTokenized = this caring image is based on performance in that the oxfordshire labour party in both the 1985 and 1989 election manifestos promised a countywide bus pass scheme and the labour transport spokesperson initiated such a scheme in 1987 on the basis of a shared cost with the district councils
i = 0
prefix = List(this)
regexr = \Qt\E ?\Qh\E ?\Qi\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: yesterday afternoon was hot enough for the beach and the weather forecast promised more of the same

Spans:
Span 1-2:  afternoon => afternoon
Span 8-9:  and => and
Span 4-5:  enough => enough
Span 11-12:  forecast => forecast-01
Span 3-4:  hot => hot
Span 12-13:  promised => promise-01
Span 16-17:  same => same-41
Span 10-11:  weather => weather
Span 0-1:  yesterday => yesterday

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),same,same-41,false), Span(12,13,List(1),promised,promise-01,false), Span(11,12,List(2),forecast,forecast-01,false), Span(10,11,List(3),weather,weather,false), Span(8,9,List(4),and,and,false), Span(4,5,List(5),enough,enough,false), Span(3,4,List(6),hot,hot,false), Span(1,2,List(7),afternoon,afternoon,false), Span(0,1,List(8),yesterday,yesterday,false)),Map(2 -> forecast-01, 5 -> enough, 8 -> yesterday, 7 -> afternoon, 1 -> promise-01, 4 -> and, 6 -> hot, 0 -> same-41, 3 -> weather),Map(e -> enough, w -> weather, h -> hot, s -> same-41, y -> yesterday, p -> promise-01, a -> and, a2 -> afternoon, f -> forecast-01))),[Ljava.lang.String;@440b2a8c,Annotation([Ljava.lang.String;@3916703a,[Ljava.lang.String;@70220d1d,[Ljava.lang.String;@4b8b246e),Annotation([Ljava.lang.String;@1c04d881,[Ljava.lang.String;@2220b86,[Ledu.cmu.lti.nlp.amr.Dependency;@9228b82),Annotation([Ljava.lang.String;@3af5087d,[Ljava.lang.String;@2d0064c8,[Ljava.lang.String;@74d89d8c),Annotation([Ljava.lang.String;@394f8e42,[Ljava.lang.String;@1604ac73,[Ledu.cmu.lti.nlp.amr.Entity;@cd5bd50))
AMR:
(a / and, op, f / forecast-01)
(f / forecast-01, ARG1, w / weather)
(h / hot, degree, e / enough)
(h / hot, domain, a2 / afternoon)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, a2 / afternoon)
(s / same-41, ARG1, p / promise-01)
(y / yesterday, part, a2 / afternoon)

Decoded in 36,817 microseconds
Sentence: in 1955 former nightclub hostess ruth ellis went to the gallows for killing david blakely a man whose wealthy origins and good looks had seemed to promise her a rise up the social scale

NER Entity: (person :name (name :op "ruth" :op "ellis"))
Spans:
Span 1-2:  1955 => (date-entity :year 1955)
Span 20-21:  and => and
Span 2-3:  former => former
Span 21-22:  good => good
Span 12-13:  killing => kill-01
Span 22-23:  looks => look-02
Span 16-17:  man => man
Span 3-4:  nightclub => night
Span 26-27:  promise => promise-01
Span 29-30:  rise => rise-01
Span 5-7:  ruth ellis => (person :name (name :op "ruth" :op "ellis"))
Span 33-34:  scale => scale
Span 24-25:  seemed => seem-01
Span 32-33:  social => society
Span 18-19:  wealthy => wealth

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),scale,scale,false), Span(32,33,List(1),social,society,false), Span(29,30,List(2),rise,rise-01,false), Span(26,27,List(3),promise,promise-01,false), Span(24,25,List(4),seemed,seem-01,false), Span(22,23,List(5),looks,look-02,false), Span(21,22,List(6),good,good,false), Span(20,21,List(7),and,and,false), Span(18,19,List(8),wealthy,wealth,false), Span(16,17,List(9),man,man,false), Span(12,13,List(10),killing,kill-01,false), Span(5,7,List(14, 13, 12, 11),ruth ellis,(person :name (name :op "ruth" :op "ellis")),false), Span(3,4,List(15),nightclub,night,false), Span(2,3,List(16),former,former,false), Span(1,2,List(18, 17),1955,(date-entity :year 1955),false)),Map(2 -> rise-01, 5 -> look-02, 12 -> name, 15 -> night, 8 -> wealth, 18 -> 1955, 7 -> and, 17 -> date-entity, 1 -> society, 4 -> seem-01, 11 -> person, 14 -> "ellis", 6 -> good, 0 -> scale, 9 -> man, 16 -> former, 3 -> promise-01, 10 -> kill-01, 13 -> "ruth"),Map(w -> wealth, n -> name, s2 -> society, k -> kill-01, p2 -> person, s -> scale, d -> date-entity, m -> man, 1 -> 1955, p -> promise-01, g -> good, a -> and, r -> rise-01, s3 -> seem-01, l -> look-02, f -> former, n2 -> night))),[Ljava.lang.String;@247fd5c5,Annotation([Ljava.lang.String;@44ab8b3b,[Ljava.lang.String;@5a41f1b5,[Ljava.lang.String;@1f63d05e),Annotation([Ljava.lang.String;@5204db6b,[Ljava.lang.String;@3ce177de,[Ledu.cmu.lti.nlp.amr.Dependency;@7684af0b),Annotation([Ljava.lang.String;@10037f7,[Ljava.lang.String;@355a39a4,[Ljava.lang.String;@367e5959),Annotation([Ljava.lang.String;@211bfe02,[Ljava.lang.String;@34c14649,[Ledu.cmu.lti.nlp.amr.Entity;@7ced7dad))
AMR:
(a / and, op, l / look-02)
(a / and, op, m / man)
(a / and, op, w / wealth)
(d / date-entity, year, 1 / 1955)
(f / former, op, s3 / seem-01)
(k / kill-01, ARG0, p2 / person)
(l / look-02, ARG0, p2 / person)
(l / look-02, ARG1, d / date-entity)
(l / look-02, mod, g / good)
(n / name, op, "ellis")
(n / name, op, "ruth")
(n2 / night, op, s3 / seem-01)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, r / rise-01)
(p2 / person, name, n / name)
(r / rise-01, ARG1, s / scale)
(s2 / society, op, k / kill-01)
(s3 / seem-01, ARG1, p / promise-01)

Decoded in 392,172 microseconds
Sentence: belford made his presentation to union leaders and family members promising a 5 million tv movie that would be delivered within 18 months

Spans:
Span 21-22:  18 => 18
Span 12-13:  5 => 5
Span 7-8:  and => and
Span 19-20:  delivered => deliver-01
Span 8-9:  family => family
Span 6-7:  leaders => (person :ARG0-of lead-02)
Span 9-10:  members => (have-org-role-91 :ARG2 member)
Span 22-23:  months => (temporal-quantity :unit month)
Span 15-16:  movie => movie
Span 3-4:  presentation => presentation
Span 10-11:  promising => promise-01
Span 5-6:  union => union
Span 20-21:  within => within

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),months,(temporal-quantity :unit month),false), Span(21,22,List(2),18,18,false), Span(20,21,List(3),within,within,false), Span(19,20,List(4),delivered,deliver-01,false), Span(15,16,List(5),movie,movie,false), Span(12,13,List(6),5,5,false), Span(10,11,List(7),promising,promise-01,false), Span(9,10,List(9, 8),members,(have-org-role-91 :ARG2 member),false), Span(8,9,List(10),family,family,false), Span(7,8,List(11),and,and,false), Span(6,7,List(13, 12),leaders,(person :ARG0-of lead-02),false), Span(5,6,List(14),union,union,false), Span(3,4,List(15),presentation,presentation,false)),Map(2 -> 18, 5 -> movie, 12 -> person, 15 -> presentation, 8 -> have-org-role-91, 7 -> promise-01, 1 -> month, 4 -> deliver-01, 11 -> and, 14 -> union, 6 -> 5, 0 -> temporal-quantity, 9 -> member, 3 -> within, 10 -> family, 13 -> lead-02),Map(m3 -> member, w -> within, h -> have-org-role-91, 5 -> 5, t -> temporal-quantity, m2 -> movie, p2 -> person, m -> month, d -> deliver-01, 1 -> 18, p -> promise-01, a -> and, u -> union, l -> lead-02, f -> family, p3 -> presentation))),[Ljava.lang.String;@4bd628ee,Annotation([Ljava.lang.String;@59194827,[Ljava.lang.String;@ad02624,[Ljava.lang.String;@67780b07),Annotation([Ljava.lang.String;@7a1c2da2,[Ljava.lang.String;@4ff8254f,[Ledu.cmu.lti.nlp.amr.Dependency;@2c598e8d),Annotation([Ljava.lang.String;@2b9de1ba,[Ljava.lang.String;@a4e90b5,[Ljava.lang.String;@2bfe605c),Annotation([Ljava.lang.String;@49684e94,[Ljava.lang.String;@5efefc32,[Ledu.cmu.lti.nlp.amr.Entity;@365f6757))
AMR:
(a / and, op, p2 / person)
(d / deliver-01, ARG0, p2 / person)
(d / deliver-01, ARG1, m2 / movie)
(d / deliver-01, ARG2, 5 / 5)
(d / deliver-01, time, w / within)
(h / have-org-role-91, ARG1, f / family)
(h / have-org-role-91, ARG2, m3 / member)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, u / union)
(m2 / movie, op, h / have-org-role-91)
(p / promise-01, ARG2, m2 / movie)
(p2 / person, mod, p3 / presentation)
(t / temporal-quantity, quant, 1 / 18)
(t / temporal-quantity, unit, m / month)
(w / within, op, t / temporal-quantity)

Decoded in 380,268 microseconds
Sentence: like all of the marcos affairs the trial promises to be complex

Spans:
Span 5-6:  affairs => affair
Span 1-2:  all => all
Span 11-12:  complex => complex
Span 8-9:  promises => promise-01
Span 7-8:  trial => trial

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),complex,complex,false), Span(8,9,List(1),promises,promise-01,false), Span(7,8,List(2),trial,trial,false), Span(5,6,List(3),affairs,affair,false), Span(1,2,List(4),all,all,false)),Map(2 -> trial, 1 -> promise-01, 4 -> all, 0 -> complex, 3 -> affair),Map(t -> trial, p -> promise-01, a -> affair, a2 -> all, c -> complex))),[Ljava.lang.String;@31799ca4,Annotation([Ljava.lang.String;@271aec5c,[Ljava.lang.String;@5893a012,[Ljava.lang.String;@43f22b2c),Annotation([Ljava.lang.String;@4ff0788d,[Ljava.lang.String;@347a99fb,[Ledu.cmu.lti.nlp.amr.Dependency;@5d1348a7),Annotation([Ljava.lang.String;@1d06fbae,[Ljava.lang.String;@35756b65,[Ljava.lang.String;@2fddcf4e),Annotation([Ljava.lang.String;@b55226f,[Ljava.lang.String;@247ab39,[Ledu.cmu.lti.nlp.amr.Entity;@2f3a2c5a))
AMR:
(a / affair, quant, a2 / all)
(p / promise-01, ARG0, t / trial)
(p / promise-01, ARG1, c / complex)
(p / promise-01, location, a / affair)

Decoded in 21,899 microseconds
Sentence: in saddam they see a strong leader who for once puts into action what he promises

Spans:
Span 12-13:  action => action
Span 14-15:  he => he
Span 6-7:  leader => (person :ARG0-of lead-02)
Span 9-10:  once => once
Span 15-16:  promises => promise-01
Span 10-11:  puts => put-01
Span 1-2:  saddam => (person :name (name :op "Saddam"))
Span 3-4:  see => see-01
Span 5-6:  strong => strong
Span 2-3:  they => they

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),promises,promise-01,false), Span(14,15,List(1),he,he,false), Span(12,13,List(2),action,action,false), Span(10,11,List(3),puts,put-01,false), Span(9,10,List(4),once,once,false), Span(6,7,List(6, 5),leader,(person :ARG0-of lead-02),false), Span(5,6,List(7),strong,strong,false), Span(3,4,List(8),see,see-01,false), Span(2,3,List(9),they,they,false), Span(1,2,List(12, 11, 10),saddam,(person :name (name :op "Saddam")),false)),Map(2 -> action, 5 -> person, 12 -> "Saddam", 8 -> see-01, 7 -> strong, 1 -> he, 4 -> once, 11 -> name, 6 -> lead-02, 0 -> promise-01, 9 -> they, 3 -> put-01, 10 -> person),Map(n -> name, h -> he, t -> they, s2 -> see-01, p2 -> put-01, s -> strong, p -> promise-01, p4 -> person, a -> action, l -> lead-02, o -> once, p3 -> person))),[Ljava.lang.String;@5d427546,Annotation([Ljava.lang.String;@3621767f,[Ljava.lang.String;@4eeaa79c,[Ljava.lang.String;@fa21b3e),Annotation([Ljava.lang.String;@5baa8b76,[Ljava.lang.String;@19aa1efe,[Ledu.cmu.lti.nlp.amr.Dependency;@6fd8c2db),Annotation([Ljava.lang.String;@7fe0f13a,[Ljava.lang.String;@8fd586d,[Ljava.lang.String;@30b860b7),Annotation([Ljava.lang.String;@18d5a75e,[Ljava.lang.String;@72df190e,[Ledu.cmu.lti.nlp.amr.Entity;@14e6210d))
AMR:
(l / lead-02, ARG0, p3 / person)
(l / lead-02, mod, s / strong)
(n / name, op, "Saddam")
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, a / action)
(p2 / put-01, ARG1, p3 / person)
(p2 / put-01, ARG2, a / action)
(p2 / put-01, time, o / once)
(p4 / person, name, n / name)
(s2 / see-01, ARG0, t / they)
(s2 / see-01, ARG1, p3 / person)
(s2 / see-01, time, p4 / person)

Decoded in 282,812 microseconds
Sentence: but sweden has also promised that in 20 years its emissions of carbon dioxide subscript baseco sub2 the main greenhouse gas will have dropped to 1986 levels

NER Entity: (country :name (name :op "sweden"))
Spans:
Span 25-26:  1986 => (date-entity :year 1986)
Span 7-8:  20 => 20
Span 3-4:  also => also
Span 0-1:  but => contrast-01
Span 23-24:  dropped => drop-01
Span 20-21:  gas => gas
Span 19-20:  greenhouse => greenhouse
Span 26-27:  levels => level
Span 18-19:  main => main
Span 4-5:  promised => promise-01
Span 8-9:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),levels,level,false), Span(25,26,List(2, 1),1986,(date-entity :year 1986),false), Span(23,24,List(3),dropped,drop-01,false), Span(20,21,List(4),gas,gas,false), Span(19,20,List(5),greenhouse,greenhouse,false), Span(18,19,List(6),main,main,false), Span(8,9,List(8, 7),years,(temporal-quantity :unit year),false), Span(7,8,List(9),20,20,false), Span(4,5,List(10),promised,promise-01,false), Span(3,4,List(11),also,also,false), Span(0,1,List(12),but,contrast-01,false)),Map(2 -> 1986, 5 -> greenhouse, 12 -> contrast-01, 8 -> year, 7 -> temporal-quantity, 1 -> date-entity, 4 -> gas, 11 -> also, 6 -> main, 0 -> level, 9 -> 20, 3 -> drop-01, 10 -> promise-01),Map(2 -> 20, t -> temporal-quantity, d -> date-entity, m -> main, 1 -> 1986, g2 -> greenhouse, g -> gas, y -> year, p -> promise-01, a -> also, d2 -> drop-01, c -> contrast-01, l -> level))),[Ljava.lang.String;@1083e733,Annotation([Ljava.lang.String;@43bfcdbd,[Ljava.lang.String;@655c560a,[Ljava.lang.String;@1114de83),Annotation([Ljava.lang.String;@711c7337,[Ljava.lang.String;@2d059e5,[Ledu.cmu.lti.nlp.amr.Dependency;@3cbdcad4),Annotation([Ljava.lang.String;@504f4373,[Ljava.lang.String;@3d55c36,[Ljava.lang.String;@2c98df31),Annotation([Ljava.lang.String;@686520d6,[Ljava.lang.String;@474ef725,[Ledu.cmu.lti.nlp.amr.Entity;@1143c2b6))
AMR:
(c / contrast-01, ARG1, d2 / drop-01)
(c / contrast-01, ARG2, p / promise-01)
(d / date-entity, year, 1 / 1986)
(d2 / drop-01, ARG0, g / gas)
(d2 / drop-01, ARG1, 2 / 20)
(g / gas, mod, g2 / greenhouse)
(g2 / greenhouse, mod, m / main)
(l / level, mod, d / date-entity)
(p / promise-01, ARG1, d / date-entity)
(p / promise-01, mod, a / also)
(t / temporal-quantity, quant, 2 / 20)
(t / temporal-quantity, unit, y / year)

Decoded in 194,087 microseconds
Sentence: ive talked to chaps in my regiment whore in northern ireland and ellip   if you lived in beirut i promise you it would start to seem perfectly logical

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = ive talked to chaps in my regiment whore in northern ireland and ellip   if you lived in beirut i promise you it would start to seem perfectly logical
myTokenized = ive talked to chaps in my regiment whore in northern ireland and ellip if you lived in beirut i promise you it would start to seem perfectly logical
i = 13
prefix = List(ive, talked, to, chaps, in, my, regiment, whore, in, northern, ireland, and, ellip, if)
regexr = \Qi\E ?\Qv\E ?\Qe\E ?\Qt\E ?\Qa\E ?\Ql\E ?\Qk\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qc\E ?\Qh\E ?\Qa\E ?\Qp\E ?\Qs\E ?\Qi\E ?\Qn\E ?\Qm\E ?\Qy\E ?\Qr\E ?\Qe\E ?\Qg\E ?\Qi\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qw\E ?\Qh\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qi\E ?\Qn\E ?\Qn\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qn\E ?\Qi\E ?\Qr\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qp\E ?\Qi\E ?\Qf\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: shareholders and analysts who have long been hardened to the succession of nasties to emerge from the nonedible operations stemming from an irresistible urge to makes deals will also be grateful if berisford as promised decides to concentrate on its bristar food business

Spans:
Span 28-29:  also => also
Span 2-3:  analysts => (person :ARG0-of analyze-01)
Span 1-2:  and => and
Span 42-43:  business => business
Span 37-38:  concentrate => concentrate-01
Span 26-27:  deals => deal-01
Span 35-36:  decides => decide-01
Span 14-15:  emerge => emerge-01
Span 41-42:  food => food
Span 18-19:  operations => operation
Span 34-35:  promised => promise-01
Span 19-20:  stemming => stem-02
Span 10-11:  succession => succeed-03
Span 23-24:  urge => urge-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),business,business,false), Span(41,42,List(1),food,food,false), Span(37,38,List(2),concentrate,concentrate-01,false), Span(35,36,List(3),decides,decide-01,false), Span(34,35,List(4),promised,promise-01,false), Span(28,29,List(5),also,also,false), Span(26,27,List(6),deals,deal-01,false), Span(23,24,List(7),urge,urge-01,false), Span(19,20,List(8),stemming,stem-02,false), Span(18,19,List(9),operations,operation,false), Span(14,15,List(10),emerge,emerge-01,false), Span(10,11,List(11),succession,succeed-03,false), Span(2,3,List(13, 12),analysts,(person :ARG0-of analyze-01),false), Span(1,2,List(14),and,and,false)),Map(2 -> concentrate-01, 5 -> also, 12 -> person, 8 -> stem-02, 7 -> urge-01, 1 -> food, 4 -> promise-01, 11 -> succeed-03, 14 -> and, 6 -> deal-01, 0 -> business, 9 -> operation, 3 -> decide-01, 10 -> emerge-01, 13 -> analyze-01),Map(e -> emerge-01, s2 -> succeed-03, b -> business, p2 -> person, a3 -> and, s -> stem-02, d -> decide-01, p -> promise-01, a -> also, d2 -> deal-01, a2 -> analyze-01, c -> concentrate-01, u -> urge-01, f -> food, o -> operation))),[Ljava.lang.String;@4150e6e9,Annotation([Ljava.lang.String;@2667ec7f,[Ljava.lang.String;@70d7998b,[Ljava.lang.String;@5aa1ae8d),Annotation([Ljava.lang.String;@2ccad977,[Ljava.lang.String;@398b2a9a,[Ledu.cmu.lti.nlp.amr.Dependency;@5f9a01f9),Annotation([Ljava.lang.String;@77f7b377,[Ljava.lang.String;@27278729,[Ljava.lang.String;@141aa8d4),Annotation([Ljava.lang.String;@6242009b,[Ljava.lang.String;@5b35f282,[Ledu.cmu.lti.nlp.amr.Entity;@32c46396))
AMR:
(a2 / analyze-01, ARG0, p2 / person)
(a3 / and, op, p2 / person)
(b / business, topic, f / food)
(c / concentrate-01, ARG0, b / business)
(c / concentrate-01, ARG1, e / emerge-01)
(d / decide-01, ARG1, c / concentrate-01)
(d2 / deal-01, ARG2, s2 / succeed-03)
(e / emerge-01, ARG2, o / operation)
(p / promise-01, ARG0, a / also)
(p / promise-01, ARG1, d / decide-01)
(s / stem-02, ARG0, o / operation)
(s / stem-02, ARG1, u / urge-01)
(s2 / succeed-03, ARG1, e / emerge-01)
(u / urge-01, ARG1, p2 / person)

Decoded in 216,082 microseconds
Sentence: he blamed the teachers industrial action three years ago for contributing to a decline in school sports matches and said the party would talk to teachers organisations to find ways of reinstituting outofschool activities without promising extra payments for overtime

Spans:
Span 5-6:  action => action
Span 33-34:  activities => activity
Span 18-19:  and => and
Span 1-2:  blamed => blame-01
Span 10-11:  contributing => contribute-01
Span 13-14:  decline => decline-01
Span 36-37:  extra => extra
Span 0-1:  he => he
Span 4-5:  industrial => industry
Span 17-18:  matches => match
Span 26-27:  organisations => organization
Span 39-40:  overtime => overtime
Span 21-22:  party => party
Span 37-38:  payments => payment
Span 35-36:  promising => promise-01
Span 19-20:  said => say-01
Span 15-16:  school => school
Span 16-17:  sports => sport
Span 23-24:  talk => talk-01
Span 25-26:  teachers => (person :ARG0-of teach-01)
Span 3-4:  teachers => (person :ARG0-of teach-01)
Span 6-7:  three => 3
Span 29-30:  ways => way
Span 7-8:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),overtime,overtime,false), Span(37,38,List(1),payments,payment,false), Span(36,37,List(2),extra,extra,false), Span(35,36,List(3),promising,promise-01,false), Span(33,34,List(4),activities,activity,false), Span(29,30,List(5),ways,way,false), Span(26,27,List(6),organisations,organization,false), Span(25,26,List(8, 7),teachers,(person :ARG0-of teach-01),false), Span(23,24,List(9),talk,talk-01,false), Span(21,22,List(10),party,party,false), Span(19,20,List(11),said,say-01,false), Span(18,19,List(12),and,and,false), Span(17,18,List(13),matches,match,false), Span(16,17,List(14),sports,sport,false), Span(15,16,List(15),school,school,false), Span(13,14,List(16),decline,decline-01,false), Span(10,11,List(17),contributing,contribute-01,false), Span(7,8,List(19, 18),years,(temporal-quantity :unit year),false), Span(6,7,List(20),three,3,false), Span(5,6,List(21),action,action,false), Span(4,5,List(22),industrial,industry,false), Span(3,4,List(24, 23),teachers,(person :ARG0-of teach-01),false), Span(1,2,List(25),blamed,blame-01,false), Span(0,1,List(26),he,he,false)),Map(2 -> extra, 5 -> way, 12 -> and, 8 -> teach-01, 15 -> school, 21 -> action, 18 -> temporal-quantity, 24 -> teach-01, 7 -> person, 1 -> payment, 17 -> contribute-01, 23 -> person, 26 -> he, 4 -> activity, 11 -> say-01, 14 -> sport, 20 -> 3, 6 -> organization, 9 -> talk-01, 0 -> overtime, 22 -> industry, 16 -> decline-01, 19 -> year, 10 -> party, 3 -> promise-01, 25 -> blame-01, 13 -> match),Map(e -> extra, w -> way, h -> he, t4 -> teach-01, s2 -> sport, p5 -> person, t -> teach-01, b -> blame-01, p2 -> promise-01, a3 -> action, s -> say-01, m -> match, d -> decline-01, t3 -> temporal-quantity, y -> year, p -> payment, a -> activity, p4 -> party, o2 -> organization, t2 -> talk-01, a2 -> and, i -> industry, c -> contribute-01, s3 -> school, o -> overtime, p3 -> person, 3 -> 3))),[Ljava.lang.String;@2dacd90a,Annotation([Ljava.lang.String;@2edd36f3,[Ljava.lang.String;@3d42a38e,[Ljava.lang.String;@61ffdf0d),Annotation([Ljava.lang.String;@658d00be,[Ljava.lang.String;@c2bee08,[Ledu.cmu.lti.nlp.amr.Dependency;@18185576),Annotation([Ljava.lang.String;@6592c255,[Ljava.lang.String;@6148e8c,[Ljava.lang.String;@2f9a8c72),Annotation([Ljava.lang.String;@4b7aa8c8,[Ljava.lang.String;@61df092e,[Ledu.cmu.lti.nlp.amr.Entity;@79d3dd34))
AMR:
(a2 / and, op, m / match)
(a2 / and, op, s / say-01)
(a2 / and, op, s3 / school)
(a3 / action, mod, i / industry)
(b / blame-01, ARG0, h / he)
(b / blame-01, ARG1, a3 / action)
(c / contribute-01, ARG0, h / he)
(c / contribute-01, ARG1, 3 / 3)
(c / contribute-01, ARG2, d / decline-01)
(c / contribute-01, condition, a2 / and)
(o2 / organization, mod, p3 / person)
(p / payment, mod, e / extra)
(p2 / promise-01, ARG0, w / way)
(p2 / promise-01, ARG1, a / activity)
(p2 / promise-01, ARG2, p / payment)
(p2 / promise-01, time, o / overtime)
(s / say-01, ARG0, s2 / sport)
(s / say-01, ARG1, t2 / talk-01)
(t / teach-01, ARG0, p3 / person)
(t2 / talk-01, ARG0, p4 / party)
(t2 / talk-01, ARG1, o2 / organization)
(t3 / temporal-quantity, quant, 3 / 3)
(t3 / temporal-quantity, unit, y / year)
(t4 / teach-01, ARG0, p5 / person)
(t4 / teach-01, ARG1, a3 / action)
(w / way, poss, p4 / party)

Decoded in 1,430,890 microseconds
Sentence: if this is true history has been wickedly distorted sir arthur gold author of the boards history who promised to investigate said

Spans:
Span 12-13:  author => (person :ARG0-of author-01)
Span 8-9:  distorted => distort-01
Span 11-12:  gold => gold
Span 16-17:  history => history
Span 4-5:  history => history
Span 20-21:  investigate => investigate-01
Span 18-19:  promised => promise-01
Span 21-22:  said => say-01
Span 1-2:  this => this
Span 3-4:  true => true

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),said,say-01,false), Span(20,21,List(1),investigate,investigate-01,false), Span(18,19,List(2),promised,promise-01,false), Span(16,17,List(3),history,history,false), Span(12,13,List(5, 4),author,(person :ARG0-of author-01),false), Span(11,12,List(6),gold,gold,false), Span(8,9,List(7),distorted,distort-01,false), Span(4,5,List(8),history,history,false), Span(3,4,List(9),true,true,false), Span(1,2,List(10),this,this,false)),Map(2 -> promise-01, 5 -> author-01, 8 -> history, 7 -> distort-01, 1 -> investigate-01, 4 -> person, 6 -> gold, 9 -> true, 0 -> say-01, 10 -> this, 3 -> history),Map(h -> history, t -> true, h2 -> history, p2 -> person, s -> say-01, d -> distort-01, g -> gold, p -> promise-01, a -> author-01, t2 -> this, i -> investigate-01))),[Ljava.lang.String;@445fbf68,Annotation([Ljava.lang.String;@6a0f67e9,[Ljava.lang.String;@196f2865,[Ljava.lang.String;@50c50bee),Annotation([Ljava.lang.String;@38925faf,[Ljava.lang.String;@11c7f72d,[Ledu.cmu.lti.nlp.amr.Dependency;@5f34b479),Annotation([Ljava.lang.String;@7d34a4c3,[Ljava.lang.String;@b2d3e6d,[Ljava.lang.String;@475d6bd6),Annotation([Ljava.lang.String;@4652d334,[Ljava.lang.String;@67a81efd,[Ledu.cmu.lti.nlp.amr.Entity;@4e8aa935))
AMR:
(a / author-01, ARG0, p2 / person)
(a / author-01, ARG1, g / gold)
(d / distort-01, ARG0, g / gold)
(d / distort-01, ARG1, h2 / history)
(h2 / history, mod, t / true)
(i / investigate-01, ARG1, s / say-01)
(p / promise-01, ARG0, h / history)
(p / promise-01, ARG1, i / investigate-01)
(s / say-01, ARG0, p2 / person)
(t / true, domain, t2 / this)

Decoded in 166,355 microseconds
Sentence: during the inquiry lord romsey promised he would spend 9m on urgent restoration work on his estate but that the income from visitors to broadlands was insufficient to carry out the renovations

Spans:
Span 17-18:  but => contrast-01
Span 16-17:  estate => estate
Span 6-7:  he => he
Span 20-21:  income => income
Span 2-3:  inquiry => inquire-01
Span 26-27:  insufficient => (suffice-01 :polarity -)
Span 3-4:  lord => lord
Span 5-6:  promised => promise-01
Span 12-13:  restoration => restore-01
Span 8-9:  spend => spend-01
Span 11-12:  urgent => urgent
Span 22-23:  visitors => (person :ARG0-of visit-01)

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(1, 0),insufficient,(suffice-01 :polarity -),false), Span(22,23,List(3, 2),visitors,(person :ARG0-of visit-01),false), Span(20,21,List(4),income,income,false), Span(17,18,List(5),but,contrast-01,false), Span(16,17,List(6),estate,estate,false), Span(12,13,List(7),restoration,restore-01,false), Span(11,12,List(8),urgent,urgent,false), Span(8,9,List(9),spend,spend-01,false), Span(6,7,List(10),he,he,false), Span(5,6,List(11),promised,promise-01,false), Span(3,4,List(12),lord,lord,false), Span(2,3,List(13),inquiry,inquire-01,false)),Map(2 -> person, 5 -> contrast-01, 12 -> lord, 8 -> urgent, 7 -> restore-01, 1 -> -, 4 -> income, 11 -> promise-01, 6 -> estate, 0 -> suffice-01, 9 -> spend-01, 3 -> visit-01, 10 -> he, 13 -> inquire-01),Map(e -> estate, h -> he, s2 -> spend-01, p2 -> promise-01, s -> suffice-01, v -> visit-01, p -> person, i2 -> inquire-01, i -> income, r -> restore-01, c -> contrast-01, u -> urgent, l -> lord))),[Ljava.lang.String;@716afedb,Annotation([Ljava.lang.String;@27821609,[Ljava.lang.String;@4d74bd22,[Ljava.lang.String;@2b2d2ae8),Annotation([Ljava.lang.String;@225bfb7d,[Ljava.lang.String;@44dbdd2a,[Ledu.cmu.lti.nlp.amr.Dependency;@3e9513b7),Annotation([Ljava.lang.String;@2d41737a,[Ljava.lang.String;@240465cc,[Ljava.lang.String;@1cb7468d),Annotation([Ljava.lang.String;@4478e1b5,[Ljava.lang.String;@5c2a5531,[Ledu.cmu.lti.nlp.amr.Entity;@5f3f333c))
AMR:
(c / contrast-01, ARG1, p2 / promise-01)
(c / contrast-01, ARG2, s / suffice-01)
(p2 / promise-01, ARG0, i2 / inquire-01)
(p2 / promise-01, ARG1, s2 / spend-01)
(r / restore-01, ARG0, p / person)
(r / restore-01, ARG1, c / contrast-01)
(r / restore-01, ARG2, e / estate)
(r / restore-01, mod, u / urgent)
(s / suffice-01, ARG1, i / income)
(s / suffice-01, polarity, -)
(s2 / spend-01, ARG0, h / he)
(s2 / spend-01, ARG1, l / lord)
(v / visit-01, ARG0, p / person)

Decoded in 476,639 microseconds
Sentence: they are going to get it he promises in much better shape for the second year

Spans:
Span 6-7:  he => he
Span 5-6:  it => it
Span 9-10:  much => much
Span 7-8:  promises => promise-01
Span 11-12:  shape => shape-01
Span 0-1:  they => they
Span 15-16:  year => year

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),year,year,false), Span(11,12,List(1),shape,shape-01,false), Span(9,10,List(2),much,much,false), Span(7,8,List(3),promises,promise-01,false), Span(6,7,List(4),he,he,false), Span(5,6,List(5),it,it,false), Span(0,1,List(6),they,they,false)),Map(2 -> much, 5 -> it, 1 -> shape-01, 4 -> he, 6 -> they, 0 -> year, 3 -> promise-01),Map(h -> he, t -> they, s -> shape-01, m -> much, p -> promise-01, y -> year, i -> it))),[Ljava.lang.String;@2e3cd8fe,Annotation([Ljava.lang.String;@1cca2369,[Ljava.lang.String;@1adad143,[Ljava.lang.String;@13e0937b),Annotation([Ljava.lang.String;@7cf27a6e,[Ljava.lang.String;@13440bd8,[Ledu.cmu.lti.nlp.amr.Dependency;@58659bc9),Annotation([Ljava.lang.String;@76d6d675,[Ljava.lang.String;@1299d847,[Ljava.lang.String;@324626db),Annotation([Ljava.lang.String;@1ba10da6,[Ljava.lang.String;@6a871b75,[Ledu.cmu.lti.nlp.amr.Entity;@4c1bd4f6))
AMR:
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, i / it)
(p / promise-01, ARG2, s / shape-01)
(s / shape-01, ARG0, m / much)
(s / shape-01, ARG1, t / they)
(s / shape-01, ARG2, y / year)

Decoded in 82,479 microseconds
Sentence: he promised an abundance of news in the coming months

Spans:
Span 3-4:  abundance => abundance
Span 0-1:  he => he
Span 9-10:  months => (temporal-quantity :unit month)
Span 5-6:  news => news
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(1, 0),months,(temporal-quantity :unit month),false), Span(5,6,List(2),news,news,false), Span(3,4,List(3),abundance,abundance,false), Span(1,2,List(4),promised,promise-01,false), Span(0,1,List(5),he,he,false)),Map(2 -> news, 5 -> he, 1 -> month, 4 -> promise-01, 0 -> temporal-quantity, 3 -> abundance),Map(n -> news, h -> he, t -> temporal-quantity, m -> month, p -> promise-01, a -> abundance))),[Ljava.lang.String;@373a8983,Annotation([Ljava.lang.String;@641a13c8,[Ljava.lang.String;@6c08e2cf,[Ljava.lang.String;@3b62bb72),Annotation([Ljava.lang.String;@4f0057d3,[Ljava.lang.String;@1f86062a,[Ledu.cmu.lti.nlp.amr.Dependency;@17febf91),Annotation([Ljava.lang.String;@55d2d4e5,[Ljava.lang.String;@4973268,[Ljava.lang.String;@626e4c32),Annotation([Ljava.lang.String;@374c991a,[Ljava.lang.String;@5d79653,[Ledu.cmu.lti.nlp.amr.Entity;@cce2624))
AMR:
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, n / news)
(p / promise-01, ARG2, a / abundance)
(t / temporal-quantity, part, n / news)
(t / temporal-quantity, unit, m / month)

Decoded in 51,631 microseconds
Sentence: mark reefer who makes the first defence of his commonwealth superfeatherweight title tonight has been promised a shot at the european crown held by frenchman daniel londas at the international centre brentwood on 14 february

Spans:
Span 33-34:  14 => 14
Span 21-22:  crown => crown-01
Span 6-7:  defence => defend-01
Span 20-21:  european => (continent :name (name :op "Europe"))
Span 34-35:  february => (date-entity :month 2)
Span 29-30:  international => international
Span 0-1:  mark => mark-01
Span 15-16:  promised => promise-01
Span 17-18:  shot => shoot-02
Span 11-12:  title => title
Span 12-13:  tonight => tonight

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(1, 0),february,(date-entity :month 2),false), Span(33,34,List(2),14,14,false), Span(29,30,List(3),international,international,false), Span(21,22,List(4),crown,crown-01,false), Span(20,21,List(7, 6, 5),european,(continent :name (name :op "Europe")),false), Span(17,18,List(8),shot,shoot-02,false), Span(15,16,List(9),promised,promise-01,false), Span(12,13,List(10),tonight,tonight,false), Span(11,12,List(11),title,title,false), Span(6,7,List(12),defence,defend-01,false), Span(0,1,List(13),mark,mark-01,false)),Map(2 -> 14, 5 -> continent, 12 -> defend-01, 8 -> shoot-02, 7 -> "Europe", 1 -> 2, 4 -> crown-01, 11 -> title, 6 -> name, 0 -> date-entity, 9 -> promise-01, 3 -> international, 10 -> tonight, 13 -> mark-01),Map(n -> name, 2 -> 2, t -> tonight, s -> shoot-02, d -> date-entity, m -> mark-01, 1 -> 14, p -> promise-01, d2 -> defend-01, t2 -> title, i -> international, c -> crown-01, c2 -> continent))),[Ljava.lang.String;@667d4335,Annotation([Ljava.lang.String;@29c78124,[Ljava.lang.String;@68ef77e9,[Ljava.lang.String;@41a997d1),Annotation([Ljava.lang.String;@652e3c04,[Ljava.lang.String;@3e665e81,[Ledu.cmu.lti.nlp.amr.Dependency;@32c68728),Annotation([Ljava.lang.String;@7d36d23,[Ljava.lang.String;@49a218d8,[Ljava.lang.String;@310d32ac),Annotation([Ljava.lang.String;@5979d35c,[Ljava.lang.String;@4d236ae8,[Ledu.cmu.lti.nlp.amr.Entity;@503fcce8))
AMR:
(c / crown-01, ARG0, c2 / continent)
(c / crown-01, ARG1, d2 / defend-01)
(c2 / continent, name, n / name)
(d / date-entity, month, 2 / 2)
(d / date-entity, op, c / crown-01)
(d / date-entity, quant, 1 / 14)
(d2 / defend-01, ARG1, t2 / title)
(m / mark-01, ARG1, d2 / defend-01)
(n / name, op, "Europe")
(p / promise-01, ARG1, s / shoot-02)
(s / shoot-02, ARG0, t / tonight)
(s / shoot-02, ARG1, d2 / defend-01)
(s / shoot-02, manner, i / international)

Decoded in 165,749 microseconds
Sentence: the arts council has already been promised 160m for next year and 168m for the year after

Spans:
Span 16-17:  after => after
Span 4-5:  already => already
Span 11-12:  and => and
Span 1-2:  arts => art
Span 2-3:  council => council
Span 9-10:  next => next
Span 6-7:  promised => promise-01
Span 15-16:  year => year
Span 10-11:  year => year

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),after,after,false), Span(15,16,List(1),year,year,false), Span(11,12,List(2),and,and,false), Span(10,11,List(3),year,year,false), Span(9,10,List(4),next,next,false), Span(6,7,List(5),promised,promise-01,false), Span(4,5,List(6),already,already,false), Span(2,3,List(7),council,council,false), Span(1,2,List(8),arts,art,false)),Map(2 -> and, 5 -> promise-01, 8 -> art, 7 -> council, 1 -> year, 4 -> next, 6 -> already, 0 -> after, 3 -> year),Map(n -> next, a3 -> already, p -> promise-01, y -> year, a -> after, a2 -> and, c -> council, y2 -> year, a4 -> art))),[Ljava.lang.String;@ca5bc81,Annotation([Ljava.lang.String;@54fabfa3,[Ljava.lang.String;@1a3b91eb,[Ljava.lang.String;@3ce8e8c1),Annotation([Ljava.lang.String;@5f08f624,[Ljava.lang.String;@4557e63a,[Ledu.cmu.lti.nlp.amr.Dependency;@dcc0d67),Annotation([Ljava.lang.String;@4f83ec44,[Ljava.lang.String;@5e0c8d24,[Ljava.lang.String;@a0666b9),Annotation([Ljava.lang.String;@2a4200d3,[Ljava.lang.String;@53443251,[Ledu.cmu.lti.nlp.amr.Entity;@22438e8c))
AMR:
(a2 / and, op, y2 / year)
(c / council, mod, a4 / art)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, c / council)
(p / promise-01, time, a / after)
(p / promise-01, time, a3 / already)
(y / year, time, a / after)
(y2 / year, mod, n / next)

Decoded in 31,853 microseconds
Sentence: hence perhaps the indecisive outcome that promises a bumpy ride to parliamentary democracy

Spans:
Span 12-13:  democracy => democracy
Span 4-5:  outcome => outcome
Span 1-2:  perhaps => perhaps
Span 6-7:  promises => promise-01
Span 9-10:  ride => ride-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),democracy,democracy,false), Span(9,10,List(1),ride,ride-01,false), Span(6,7,List(2),promises,promise-01,false), Span(4,5,List(3),outcome,outcome,false), Span(1,2,List(4),perhaps,perhaps,false)),Map(2 -> promise-01, 1 -> ride-01, 4 -> perhaps, 0 -> democracy, 3 -> outcome),Map(p2 -> perhaps, d -> democracy, p -> promise-01, r -> ride-01, o -> outcome))),[Ljava.lang.String;@1439ae7,Annotation([Ljava.lang.String;@7d6eb456,[Ljava.lang.String;@6f01ba6f,[Ljava.lang.String;@5a770658),Annotation([Ljava.lang.String;@3c41a9ce,[Ljava.lang.String;@7af33249,[Ledu.cmu.lti.nlp.amr.Dependency;@746a95ae),Annotation([Ljava.lang.String;@1890e38,[Ljava.lang.String;@4d047f51,[Ljava.lang.String;@6242c657),Annotation([Ljava.lang.String;@debac27,[Ljava.lang.String;@6b733b94,[Ledu.cmu.lti.nlp.amr.Entity;@5a4ca8a8))
AMR:
(p / promise-01, ARG0, o / outcome)
(p / promise-01, ARG1, r / ride-01)
(r / ride-01, ARG0, p2 / perhaps)
(r / ride-01, ARG1, d / democracy)

Decoded in 17,935 microseconds
Sentence: it promises not a bedrock to philosophy and lifestyle but a feast of weird explanations a mental trip

Spans:
Span 7-8:  and => and
Span 9-10:  but => contrast-01
Span 14-15:  explanations => explain-01
Span 0-1:  it => it
Span 8-9:  lifestyle => lifestyle
Span 16-17:  mental => mental
Span 6-7:  philosophy => philosophy
Span 1-2:  promises => promise-01
Span 17-18:  trip => trip-01
Span 13-14:  weird => weird

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),trip,trip-01,false), Span(16,17,List(1),mental,mental,false), Span(14,15,List(2),explanations,explain-01,false), Span(13,14,List(3),weird,weird,false), Span(9,10,List(4),but,contrast-01,false), Span(8,9,List(5),lifestyle,lifestyle,false), Span(7,8,List(6),and,and,false), Span(6,7,List(7),philosophy,philosophy,false), Span(1,2,List(8),promises,promise-01,false), Span(0,1,List(9),it,it,false)),Map(2 -> explain-01, 5 -> lifestyle, 8 -> promise-01, 7 -> philosophy, 1 -> mental, 4 -> contrast-01, 6 -> and, 9 -> it, 0 -> trip-01, 3 -> weird),Map(w -> weird, e -> explain-01, t -> trip-01, p2 -> promise-01, m -> mental, p -> philosophy, a -> and, i -> it, l -> lifestyle, c -> contrast-01))),[Ljava.lang.String;@5ed4dbe8,Annotation([Ljava.lang.String;@68b18cfb,[Ljava.lang.String;@609ee86f,[Ljava.lang.String;@60ae00f7),Annotation([Ljava.lang.String;@3fc189b7,[Ljava.lang.String;@3b386e14,[Ledu.cmu.lti.nlp.amr.Dependency;@75c3016b),Annotation([Ljava.lang.String;@55925433,[Ljava.lang.String;@79d60c28,[Ljava.lang.String;@53b85495),Annotation([Ljava.lang.String;@6ab92d23,[Ljava.lang.String;@23428b92,[Ledu.cmu.lti.nlp.amr.Entity;@65d93053))
AMR:
(a / and, op, l / lifestyle)
(a / and, op, p / philosophy)
(c / contrast-01, ARG1, l / lifestyle)
(c / contrast-01, ARG2, e / explain-01)
(e / explain-01, ARG1, t / trip-01)
(e / explain-01, mod, w / weird)
(p2 / promise-01, ARG0, i / it)
(t / trip-01, ARG0, i / it)
(t / trip-01, manner, m / mental)

Decoded in 62,995 microseconds
Sentence: as well the allies bribed italy into the war by the treaty of london 26 april 1915 which promised her tyrol istria and north dalmatia without fiume rijeka

NER Entity: (country :name (name :op "italy"))
NER Entity: (country :name (name :op "london"))
mkDayMonthYear(26	april	1915,26,april,1915)
NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "italy"))
Spans:
Span 14-17:  26 april 1915 => (date-entity :day 26 :month 4 :year 1915)
Span 3-4:  allies => ally-01
Span 22-23:  and => and
Span 4-5:  bribed => bribe-01
Span 5-6:  italy => (country :name (name :op "Italy"))
Span 13-14:  london => (city :name (name :op "London"))
Span 23-24:  north => north
Span 18-19:  promised => promise-01
Span 11-12:  treaty => treaty
Span 8-9:  war => war
Span 1-2:  well => well

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),north,north,false), Span(22,23,List(1),and,and,false), Span(18,19,List(2),promised,promise-01,false), Span(14,17,List(6, 5, 4, 3),26 april 1915,(date-entity :day 26 :month 4 :year 1915),false), Span(13,14,List(9, 8, 7),london,(city :name (name :op "London")),false), Span(11,12,List(10),treaty,treaty,false), Span(8,9,List(11),war,war,false), Span(5,6,List(14, 13, 12),italy,(country :name (name :op "Italy")),false), Span(4,5,List(15),bribed,bribe-01,false), Span(3,4,List(16),allies,ally-01,false), Span(1,2,List(17),well,well,false)),Map(2 -> promise-01, 5 -> 4, 12 -> country, 15 -> bribe-01, 8 -> name, 7 -> city, 17 -> well, 1 -> and, 4 -> 26, 11 -> war, 14 -> "Italy", 6 -> 1915, 0 -> north, 9 -> "London", 16 -> ally-01, 3 -> date-entity, 10 -> treaty, 13 -> name),Map(n -> north, w -> war, 2 -> 26, b -> bribe-01, t -> treaty, d -> date-entity, 1 -> 1915, p -> promise-01, a -> and, 4 -> 4, n3 -> name, w2 -> well, a2 -> ally-01, c -> city, n2 -> name, c2 -> country))),[Ljava.lang.String;@15f3cd62,Annotation([Ljava.lang.String;@3930e830,[Ljava.lang.String;@39dbc4a5,[Ljava.lang.String;@b4b4a50),Annotation([Ljava.lang.String;@7bfbcffa,[Ljava.lang.String;@511365ad,[Ledu.cmu.lti.nlp.amr.Dependency;@50786a70),Annotation([Ljava.lang.String;@11940856,[Ljava.lang.String;@daf4f1e,[Ljava.lang.String;@70734196),Annotation([Ljava.lang.String;@1ed71887,[Ljava.lang.String;@3b8b56e2,[Ledu.cmu.lti.nlp.amr.Entity;@38f52df8))
AMR:
(a2 / ally-01, mod, w2 / well)
(b / bribe-01, ARG0, a2 / ally-01)
(b / bribe-01, ARG1, p / promise-01)
(b / bribe-01, ARG2, t / treaty)
(b / bribe-01, manner, c2 / country)
(b / bribe-01, time, w / war)
(c / city, name, n2 / name)
(c2 / country, name, n3 / name)
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 1 / 1915)
(n2 / name, op, "London")
(n3 / name, op, "Italy")
(p / promise-01, ARG0, n / north)
(p / promise-01, ARG1, a / and)
(t / treaty, location, c / city)
(t / treaty, time, d / date-entity)

Decoded in 242,991 microseconds
Sentence: mr hinchliffe promised that wilkes would reveal today how large a profit it had made on its shareholding in neill

Spans:
Span 12-13:  it => it
Span 9-10:  large => large
Span 11-12:  profit => profit-01
Span 2-3:  promised => promise-01
Span 6-7:  reveal => reveal-01
Span 7-8:  today => today

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),it,it,false), Span(11,12,List(1),profit,profit-01,false), Span(9,10,List(2),large,large,false), Span(7,8,List(3),today,today,false), Span(6,7,List(4),reveal,reveal-01,false), Span(2,3,List(5),promised,promise-01,false)),Map(2 -> large, 5 -> promise-01, 1 -> profit-01, 4 -> reveal-01, 0 -> it, 3 -> today),Map(t -> today, p2 -> promise-01, p -> profit-01, r -> reveal-01, i -> it, l -> large))),[Ljava.lang.String;@689d11fe,Annotation([Ljava.lang.String;@2008705a,[Ljava.lang.String;@a083524,[Ljava.lang.String;@20d8d3a1),Annotation([Ljava.lang.String;@7b2dffdf,[Ljava.lang.String;@8f9c8a7,[Ledu.cmu.lti.nlp.amr.Dependency;@46e4508b),Annotation([Ljava.lang.String;@3763fa09,[Ljava.lang.String;@4b48148,[Ljava.lang.String;@6693a061),Annotation([Ljava.lang.String;@660674e3,[Ljava.lang.String;@31e41769,[Ledu.cmu.lti.nlp.amr.Entity;@75bd0815))
AMR:
(p / profit-01, ARG0, i / it)
(p2 / promise-01, ARG1, r / reveal-01)
(r / reveal-01, ARG0, i / it)
(r / reveal-01, ARG1, l / large)
(r / reveal-01, time, t / today)

Decoded in 35,364 microseconds
Sentence: well i promise i wont keep them more than that but this coming from a party thats brought about that and then being critical of others and the lack of intent i think the ellip

Spans:
Span 26-27:  and => and
Span 20-21:  and => and
Span 10-11:  but => contrast-01
Span 23-24:  critical => critical
Span 31-32:  i => i
Span 3-4:  i => i
Span 1-2:  i => i
Span 30-31:  intent => intend-01
Span 28-29:  lack => lack-01
Span 25-26:  others => other
Span 15-16:  party => party
Span 2-3:  promise => promise-01
Span 16-17:  thats => that
Span 21-22:  then => then
Span 32-33:  think => think-01
Span 11-12:  this => this
Span 0-1:  well => well

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),think,think-01,false), Span(31,32,List(1),i,i,false), Span(30,31,List(2),intent,intend-01,false), Span(28,29,List(3),lack,lack-01,false), Span(26,27,List(4),and,and,false), Span(25,26,List(5),others,other,false), Span(23,24,List(6),critical,critical,false), Span(21,22,List(7),then,then,false), Span(20,21,List(8),and,and,false), Span(16,17,List(9),thats,that,false), Span(15,16,List(10),party,party,false), Span(11,12,List(11),this,this,false), Span(10,11,List(12),but,contrast-01,false), Span(3,4,List(13),i,i,false), Span(2,3,List(14),promise,promise-01,false), Span(1,2,List(15),i,i,false), Span(0,1,List(16),well,well,false)),Map(2 -> intend-01, 5 -> other, 12 -> contrast-01, 15 -> i, 8 -> and, 7 -> then, 1 -> i, 4 -> and, 11 -> this, 14 -> promise-01, 6 -> critical, 0 -> think-01, 9 -> that, 16 -> well, 3 -> lack-01, 10 -> party, 13 -> i),Map(w -> well, i4 -> i, t4 -> this, t -> think-01, p2 -> promise-01, i3 -> i, t3 -> that, p -> party, a -> and, i2 -> intend-01, t2 -> then, i -> i, a2 -> and, c -> critical, l -> lack-01, o -> other, c2 -> contrast-01))),[Ljava.lang.String;@4d5dd716,Annotation([Ljava.lang.String;@4bd40d08,[Ljava.lang.String;@4ea3af1c,[Ljava.lang.String;@5c3d7f99),Annotation([Ljava.lang.String;@4984451e,[Ljava.lang.String;@ad5da47,[Ledu.cmu.lti.nlp.amr.Dependency;@5ded70df),Annotation([Ljava.lang.String;@f8d70a6,[Ljava.lang.String;@edeaa44,[Ljava.lang.String;@3c7c5dfc),Annotation([Ljava.lang.String;@8fe6a6a,[Ljava.lang.String;@76fc59c2,[Ledu.cmu.lti.nlp.amr.Entity;@31690c95))
AMR:
(a / and, op, c / critical)
(a2 / and, op, c / critical)
(a2 / and, op, t / think-01)
(c / critical, compared-to, o / other)
(c / critical, time, t2 / then)
(c2 / contrast-01, ARG2, t / think-01)
(i2 / intend-01, ARG0, i / i)
(i2 / intend-01, ARG1, t4 / this)
(l / lack-01, ARG0, i3 / i)
(l / lack-01, ARG1, i / i)
(p2 / promise-01, ARG0, i4 / i)
(p2 / promise-01, ARG1, i3 / i)
(p2 / promise-01, ARG2, w / well)
(t / think-01, ARG0, l / lack-01)
(t / think-01, ARG1, t3 / that)
(t3 / that, mod, p / party)

Decoded in 457,929 microseconds
Sentence: bernard schwartz the chairman of loral has been widely quoted here as saying the heavy selloff is an overreaction to events and promising an acquisition in the near future

Spans:
Span 24-25:  acquisition => acquire-01
Span 21-22:  and => and
Span 3-4:  chairman => (have-org-role-91 :ARG2 chairman)
Span 20-21:  events => event
Span 28-29:  future => future
Span 14-15:  heavy => heavy
Span 10-11:  here => here
Span 27-28:  near => near
Span 22-23:  promising => promise-01
Span 9-10:  quoted => quote-01
Span 12-13:  saying => say-01
Span 8-9:  widely => wide

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),future,future,false), Span(27,28,List(1),near,near,false), Span(24,25,List(2),acquisition,acquire-01,false), Span(22,23,List(3),promising,promise-01,false), Span(21,22,List(4),and,and,false), Span(20,21,List(5),events,event,false), Span(14,15,List(6),heavy,heavy,false), Span(12,13,List(7),saying,say-01,false), Span(10,11,List(8),here,here,false), Span(9,10,List(9),quoted,quote-01,false), Span(8,9,List(10),widely,wide,false), Span(3,4,List(12, 11),chairman,(have-org-role-91 :ARG2 chairman),false)),Map(2 -> acquire-01, 5 -> event, 12 -> chairman, 8 -> here, 7 -> say-01, 1 -> near, 4 -> and, 11 -> have-org-role-91, 6 -> heavy, 0 -> future, 9 -> quote-01, 3 -> promise-01, 10 -> wide),Map(e -> event, n -> near, w -> wide, h -> heavy, q -> quote-01, h2 -> here, s -> say-01, p -> promise-01, a -> acquire-01, a2 -> and, h3 -> have-org-role-91, c -> chairman, f -> future))),[Ljava.lang.String;@2bcc6e39,Annotation([Ljava.lang.String;@7a5876a5,[Ljava.lang.String;@45d58963,[Ljava.lang.String;@462ee666),Annotation([Ljava.lang.String;@31185689,[Ljava.lang.String;@34d9558d,[Ledu.cmu.lti.nlp.amr.Dependency;@287fb716),Annotation([Ljava.lang.String;@58cd1a1f,[Ljava.lang.String;@16e16c5,[Ljava.lang.String;@6298e03e),Annotation([Ljava.lang.String;@22aa3904,[Ljava.lang.String;@55854763,[Ledu.cmu.lti.nlp.amr.Entity;@2111e072))
AMR:
(a / acquire-01, ARG1, h / heavy)
(a2 / and, op, e / event)
(f / future, mod, n / near)
(h3 / have-org-role-91, ARG2, c / chairman)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, a / acquire-01)
(p / promise-01, ARG2, f / future)
(q / quote-01, ARG1, a2 / and)
(q / quote-01, ARG2, s / say-01)
(q / quote-01, degree, w / wide)
(q / quote-01, location, h2 / here)
(s / say-01, ARG1, h3 / have-org-role-91)

Decoded in 217,449 microseconds
Sentence: research at oxford university promises to reduce considerably the volume of mathematics generated

Spans:
Span 7-8:  considerably => considerable
Span 12-13:  generated => generate-01
Span 11-12:  mathematics => mathematics
Span 4-5:  promises => promise-01
Span 6-7:  reduce => reduce-01
Span 0-1:  research => research-01
Span 3-4:  university => university
Span 9-10:  volume => volume

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),generated,generate-01,false), Span(11,12,List(1),mathematics,mathematics,false), Span(9,10,List(2),volume,volume,false), Span(7,8,List(3),considerably,considerable,false), Span(6,7,List(4),reduce,reduce-01,false), Span(4,5,List(5),promises,promise-01,false), Span(3,4,List(6),university,university,false), Span(0,1,List(7),research,research-01,false)),Map(2 -> volume, 5 -> promise-01, 7 -> research-01, 1 -> mathematics, 4 -> reduce-01, 6 -> university, 0 -> generate-01, 3 -> considerable),Map(v -> volume, m -> mathematics, r2 -> research-01, p -> promise-01, g -> generate-01, r -> reduce-01, u -> university, c -> considerable))),[Ljava.lang.String;@1ca66d54,Annotation([Ljava.lang.String;@7253b47d,[Ljava.lang.String;@556eb52e,[Ljava.lang.String;@57390ad3),Annotation([Ljava.lang.String;@61f5cf61,[Ljava.lang.String;@51021b85,[Ledu.cmu.lti.nlp.amr.Dependency;@615ce24f),Annotation([Ljava.lang.String;@190de279,[Ljava.lang.String;@5e8f82c8,[Ljava.lang.String;@1fd348f8),Annotation([Ljava.lang.String;@685ba21a,[Ljava.lang.String;@57ef8e7c,[Ledu.cmu.lti.nlp.amr.Entity;@30739bfe))
AMR:
(g / generate-01, ARG0, v / volume)
(g / generate-01, ARG1, m / mathematics)
(p / promise-01, ARG0, u / university)
(p / promise-01, ARG1, r / reduce-01)
(r / reduce-01, ARG1, v / volume)
(r / reduce-01, manner, c / considerable)
(r2 / research-01, ARG1, r / reduce-01)

Decoded in 49,110 microseconds
Sentence: nonpolitical onlookers have reason to be concerned at the damage the nation may suffer if it is to be subjected for two more years to the whims of a prime minister who constantly promises to remain out of step with the rest of the world

Spans:
Span 6-7:  concerned => concern-01
Span 32-33:  constantly => constant
Span 9-10:  damage => damage-01
Span 15-16:  it => it
Span 12-13:  may => (date-entity :month 5)
Span 30-31:  minister => (have-org-role-91 :ARG2 minister)
Span 11-12:  nation => nation
Span 29-30:  prime => prime
Span 33-34:  promises => promise-01
Span 3-4:  reason => reason
Span 35-36:  remain => remain-01
Span 41-42:  rest => rest
Span 19-20:  subjected => subject-01
Span 13-14:  suffer => suffer-01
Span 21-22:  two => 2
Span 26-27:  whims => whim
Span 44-45:  world => world
Span 23-24:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),world,world,false), Span(41,42,List(1),rest,rest,false), Span(35,36,List(2),remain,remain-01,false), Span(33,34,List(3),promises,promise-01,false), Span(32,33,List(4),constantly,constant,false), Span(30,31,List(6, 5),minister,(have-org-role-91 :ARG2 minister),false), Span(29,30,List(7),prime,prime,false), Span(26,27,List(8),whims,whim,false), Span(23,24,List(10, 9),years,(temporal-quantity :unit year),false), Span(21,22,List(11),two,2,false), Span(19,20,List(12),subjected,subject-01,false), Span(15,16,List(13),it,it,false), Span(13,14,List(14),suffer,suffer-01,false), Span(12,13,List(16, 15),may,(date-entity :month 5),false), Span(11,12,List(17),nation,nation,false), Span(9,10,List(18),damage,damage-01,false), Span(6,7,List(19),concerned,concern-01,false), Span(3,4,List(20),reason,reason,false)),Map(2 -> remain-01, 5 -> have-org-role-91, 12 -> subject-01, 15 -> date-entity, 8 -> whim, 18 -> damage-01, 7 -> prime, 17 -> nation, 1 -> rest, 4 -> constant, 11 -> 2, 14 -> suffer-01, 20 -> reason, 6 -> minister, 0 -> world, 9 -> temporal-quantity, 16 -> 5, 19 -> concern-01, 3 -> promise-01, 10 -> year, 13 -> it),Map(n -> nation, w -> world, r3 -> reason, h -> have-org-role-91, 2 -> 2, 5 -> 5, s2 -> suffer-01, t -> temporal-quantity, p2 -> prime, s -> subject-01, d -> date-entity, m -> minister, r2 -> remain-01, p -> promise-01, y -> year, d2 -> damage-01, w2 -> whim, i -> it, r -> rest, c -> constant, c2 -> concern-01))),[Ljava.lang.String;@7606598b,Annotation([Ljava.lang.String;@1ae0f136,[Ljava.lang.String;@25fc1e03,[Ljava.lang.String;@4b166a70),Annotation([Ljava.lang.String;@2ca60593,[Ljava.lang.String;@47b80ccb,[Ledu.cmu.lti.nlp.amr.Dependency;@4500836),Annotation([Ljava.lang.String;@224b1370,[Ljava.lang.String;@6ee92fa6,[Ljava.lang.String;@f37742d),Annotation([Ljava.lang.String;@1ac3e29,[Ljava.lang.String;@5324f69a,[Ledu.cmu.lti.nlp.amr.Entity;@1fba231b))
AMR:
(c2 / concern-01, ARG0, d2 / damage-01)
(c2 / concern-01, ARG1, r3 / reason)
(d / date-entity, month, 5 / 5)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(n / nation, poss, i / it)
(p / promise-01, ARG0, m / minister)
(p / promise-01, ARG1, 2 / 2)
(p / promise-01, ARG2, r2 / remain-01)
(p / promise-01, manner, c / constant)
(r2 / remain-01, ARG1, w2 / whim)
(r2 / remain-01, ARG3, r / rest)
(s / subject-01, ARG1, i / it)
(s / subject-01, ARG2, w2 / whim)
(s2 / suffer-01, ARG0, n / nation)
(s2 / suffer-01, ARG1, d2 / damage-01)
(s2 / suffer-01, mod, d / date-entity)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(w / world, part, r / rest)

Decoded in 224,444 microseconds
Sentence:   oh i dont think theres any problem said gerrard quickly and went on to promise a postcard from barbados

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   oh i dont think theres any problem said gerrard quickly and went on to promise a postcard from barbados
myTokenized = oh i dont think theres any problem said gerrard quickly and went on to promise a postcard from barbados
i = 0
prefix = List(oh)
regexr = \Qo\E ?\Qh\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: by agreeing to give him a right one purports to confer it on him or one promises to do so in the future the expression is ambiguous

Spans:
Span 1-2:  agreeing => agree-01
Span 10-11:  confer => confer-01
Span 24-25:  expression => express-01
Span 22-23:  future => future
Span 3-4:  give => give-01
Span 11-12:  it => it
Span 14-15:  or => or
Span 16-17:  promises => promise-01
Span 8-9:  purports => purport-01
Span 19-20:  so => so

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),expression,express-01,false), Span(22,23,List(1),future,future,false), Span(19,20,List(2),so,so,false), Span(16,17,List(3),promises,promise-01,false), Span(14,15,List(4),or,or,false), Span(11,12,List(5),it,it,false), Span(10,11,List(6),confer,confer-01,false), Span(8,9,List(7),purports,purport-01,false), Span(3,4,List(8),give,give-01,false), Span(1,2,List(9),agreeing,agree-01,false)),Map(2 -> so, 5 -> it, 8 -> give-01, 7 -> purport-01, 1 -> future, 4 -> or, 6 -> confer-01, 9 -> agree-01, 0 -> express-01, 3 -> promise-01),Map(e -> express-01, p2 -> purport-01, s -> so, g -> give-01, p -> promise-01, a -> agree-01, i -> it, c -> confer-01, o -> or, f -> future))),[Ljava.lang.String;@16ed889d,Annotation([Ljava.lang.String;@44a4072d,[Ljava.lang.String;@6cd33e8f,[Ljava.lang.String;@20b0561a),Annotation([Ljava.lang.String;@18e4d5ba,[Ljava.lang.String;@578bb31a,[Ledu.cmu.lti.nlp.amr.Dependency;@149b9cdd),Annotation([Ljava.lang.String;@74577bbc,[Ljava.lang.String;@1b7caf50,[Ljava.lang.String;@16d9bb49),Annotation([Ljava.lang.String;@3096c157,[Ljava.lang.String;@796f4fac,[Ledu.cmu.lti.nlp.amr.Entity;@7ad7e37c))
AMR:
(a / agree-01, ARG0, f / future)
(a / agree-01, ARG1, g / give-01)
(c / confer-01, ARG1, i / it)
(g / give-01, ARG0, e / express-01)
(o / or, op, a / agree-01)
(p / promise-01, ARG0, o / or)
(p / promise-01, ARG1, s / so)
(p2 / purport-01, ARG1, c / confer-01)
(p2 / purport-01, ARG2, a / agree-01)

Decoded in 121,320 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@739820e5,Annotation([Ljava.lang.String;@897d5ad,[Ljava.lang.String;@284d5543,[Ljava.lang.String;@6d18b660),Annotation([Ljava.lang.String;@716d9094,[Ljava.lang.String;@502f1eb9,[Ledu.cmu.lti.nlp.amr.Dependency;@458a2ccf),Annotation([Ljava.lang.String;@7283edb3,[Ljava.lang.String;@336abd81,[Ljava.lang.String;@24bf7a86),Annotation([Ljava.lang.String;@17050643,[Ljava.lang.String;@4ade2483,[Ledu.cmu.lti.nlp.amr.Entity;@3e2f3adb))
AMR:


Decoded in 1,159 microseconds
Sentence:   two men from poor northern city backgrounds who later became very wealthy tried to set up their elderly parents in comfort andrew carnegie american millionaire bachelor gave his scots mother my best friend and trustiest counsellor a house and a carriage and pair as he had promised her when young while a manchester millowner failed to persuade his old mother to spend more than 1 a week but would pet her like the sweetheart she was

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   two men from poor northern city backgrounds who later became very wealthy tried to set up their elderly parents in comfort andrew carnegie american millionaire bachelor gave his scots mother my best friend and trustiest counsellor a house and a carriage and pair as he had promised her when young while a manchester millowner failed to persuade his old mother to spend more than 1 a week but would pet her like the sweetheart she was
myTokenized = two men from poor northern city backgrounds who later became very wealthy tried to set up their elderly parents in comfort andrew carnegie american millionaire bachelor gave his scots mother my best friend and trustiest counsellor a house and a carriage and pair as he had promised her when young while a manchester millowner failed to persuade his old mother to spend more than 1 a week but would pet her like the sweetheart she was
i = 0
prefix = List(two)
regexr = \Qt\E ?\Qw\E ?\Qo\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he is also expected to promise reforms of the electoral system to make way for free and secret elections

Spans:
Span 2-3:  also => also
Span 16-17:  and => and
Span 18-19:  elections => elect-01
Span 9-10:  electoral => elect-01
Span 3-4:  expected => expect-01
Span 15-16:  free => free-41
Span 0-1:  he => he
Span 5-6:  promise => promise-01
Span 6-7:  reforms => reform-01
Span 17-18:  secret => secret
Span 10-11:  system => system
Span 13-14:  way => way

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),elections,elect-01,false), Span(17,18,List(1),secret,secret,false), Span(16,17,List(2),and,and,false), Span(15,16,List(3),free,free-41,false), Span(13,14,List(4),way,way,false), Span(10,11,List(5),system,system,false), Span(9,10,List(6),electoral,elect-01,false), Span(6,7,List(7),reforms,reform-01,false), Span(5,6,List(8),promise,promise-01,false), Span(3,4,List(9),expected,expect-01,false), Span(2,3,List(10),also,also,false), Span(0,1,List(11),he,he,false)),Map(2 -> and, 5 -> system, 8 -> promise-01, 7 -> reform-01, 1 -> secret, 11 -> he, 4 -> way, 6 -> elect-01, 9 -> expect-01, 0 -> elect-01, 10 -> also, 3 -> free-41),Map(w -> way, e -> elect-01, h -> he, s2 -> system, e2 -> elect-01, s -> secret, p -> promise-01, a -> and, a2 -> also, r -> reform-01, f -> free-41, e3 -> expect-01))),[Ljava.lang.String;@290c011f,Annotation([Ljava.lang.String;@531daf46,[Ljava.lang.String;@41de474b,[Ljava.lang.String;@681aaeb5),Annotation([Ljava.lang.String;@2fc42278,[Ljava.lang.String;@75b30cc7,[Ledu.cmu.lti.nlp.amr.Dependency;@3e0c192f),Annotation([Ljava.lang.String;@c497c7c,[Ljava.lang.String;@2c8bb731,[Ljava.lang.String;@8a808d0),Annotation([Ljava.lang.String;@4fda9420,[Ljava.lang.String;@1732e9d5,[Ledu.cmu.lti.nlp.amr.Entity;@f95aad9))
AMR:
(a / and, op, f / free-41)
(a / and, op, s / secret)
(a / and, op, w / way)
(e / elect-01, mod, s / secret)
(e2 / elect-01, instrument, s2 / system)
(e3 / expect-01, ARG1, p / promise-01)
(e3 / expect-01, mod, a2 / also)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, r / reform-01)
(p / promise-01, ARG2, s2 / system)
(r / reform-01, ARG1, a / and)

Decoded in 69,743 microseconds
Sentence: forsyth promised to put in a sequence that would lose roschmann the sympathy of former comrades but refused to let him escape unpunished as the real roschmann had

Spans:
Span 16-17:  but => contrast-01
Span 15-16:  comrades => (have-rel-role-91 :ARG2 comrade)
Span 21-22:  escape => escape-01
Span 14-15:  former => former
Span 19-20:  let => let-01
Span 9-10:  lose => lose-02
Span 1-2:  promised => promise-01
Span 25-26:  real => real
Span 17-18:  refused => refuse-01
Span 6-7:  sequence => sequence-00
Span 12-13:  sympathy => sympathy

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),real,real,false), Span(21,22,List(1),escape,escape-01,false), Span(19,20,List(2),let,let-01,false), Span(17,18,List(3),refused,refuse-01,false), Span(16,17,List(4),but,contrast-01,false), Span(15,16,List(6, 5),comrades,(have-rel-role-91 :ARG2 comrade),false), Span(14,15,List(7),former,former,false), Span(12,13,List(8),sympathy,sympathy,false), Span(9,10,List(9),lose,lose-02,false), Span(6,7,List(10),sequence,sequence-00,false), Span(1,2,List(11),promised,promise-01,false)),Map(2 -> let-01, 5 -> have-rel-role-91, 8 -> sympathy, 7 -> former, 1 -> escape-01, 11 -> promise-01, 4 -> contrast-01, 6 -> comrade, 9 -> lose-02, 0 -> real, 10 -> sequence-00, 3 -> refuse-01),Map(e -> escape-01, h -> have-rel-role-91, s2 -> sequence-00, s -> sympathy, p -> promise-01, r2 -> refuse-01, l2 -> lose-02, r -> real, c -> contrast-01, l -> let-01, f -> former, c2 -> comrade))),[Ljava.lang.String;@2b03948d,Annotation([Ljava.lang.String;@780dcb0a,[Ljava.lang.String;@518d3b19,[Ljava.lang.String;@f231023),Annotation([Ljava.lang.String;@46f87198,[Ljava.lang.String;@60e9d68e,[Ledu.cmu.lti.nlp.amr.Dependency;@18053657),Annotation([Ljava.lang.String;@7e329612,[Ljava.lang.String;@2b1ab878,[Ljava.lang.String;@6744e463),Annotation([Ljava.lang.String;@5bee548c,[Ljava.lang.String;@7bf0e27a,[Ledu.cmu.lti.nlp.amr.Entity;@3a4f728))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, r2 / refuse-01)
(h / have-rel-role-91, ARG1, r / real)
(h / have-rel-role-91, ARG2, c2 / comrade)
(h / have-rel-role-91, time, f / former)
(l / let-01, ARG1, e / escape-01)
(l / let-01, ARG3, s / sympathy)
(l2 / lose-02, ARG0, s2 / sequence-00)
(l2 / lose-02, ARG1, s / sympathy)
(p / promise-01, ARG1, h / have-rel-role-91)
(r2 / refuse-01, ARG1, l / let-01)

Decoded in 80,175 microseconds
Sentence: the junior agriculture minister david curry promised to consider the matter

Spans:
Span 2-3:  agriculture => agriculture
Span 8-9:  consider => consider-02
Span 5-6:  curry => curry
Span 1-2:  junior => junior
Span 10-11:  matter => matter
Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Span 6-7:  promised => promise-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),matter,matter,false), Span(8,9,List(1),consider,consider-02,false), Span(6,7,List(2),promised,promise-01,false), Span(5,6,List(3),curry,curry,false), Span(3,4,List(5, 4),minister,(have-org-role-91 :ARG2 minister),false), Span(2,3,List(6),agriculture,agriculture,false), Span(1,2,List(7),junior,junior,false)),Map(2 -> promise-01, 5 -> minister, 7 -> junior, 1 -> consider-02, 4 -> have-org-role-91, 6 -> agriculture, 0 -> matter, 3 -> curry),Map(h -> have-org-role-91, m2 -> minister, j -> junior, m -> matter, p -> promise-01, a -> agriculture, c -> consider-02, c2 -> curry))),[Ljava.lang.String;@435e64f6,Annotation([Ljava.lang.String;@6a367507,[Ljava.lang.String;@1d3d550b,[Ljava.lang.String;@259a542c),Annotation([Ljava.lang.String;@370c27fd,[Ljava.lang.String;@7f156f46,[Ledu.cmu.lti.nlp.amr.Dependency;@583c9dd8),Annotation([Ljava.lang.String;@739efd29,[Ljava.lang.String;@4afeca0c,[Ljava.lang.String;@1d83004b),Annotation([Ljava.lang.String;@3884b10,[Ljava.lang.String;@68f8093f,[Ledu.cmu.lti.nlp.amr.Entity;@74273cef))
AMR:
(a / agriculture, mod, j / junior)
(c / consider-02, ARG0, c2 / curry)
(c / consider-02, ARG1, m / matter)
(h / have-org-role-91, ARG1, a / agriculture)
(h / have-org-role-91, ARG2, m2 / minister)
(p / promise-01, ARG1, a / agriculture)
(p / promise-01, ARG2, c / consider-02)

Decoded in 50,124 microseconds
Sentence: this afternoons game at bari promises more enterprise although the animating spirit is likely to be commerce

NER Entity: (country :name (name :op "bari"))
Spans:
Span 16-17:  commerce => commerce
Span 7-8:  enterprise => enterprise
Span 2-3:  game => game
Span 13-14:  likely => likely
Span 5-6:  promises => promise-01
Span 11-12:  spirit => spirit
Span 0-1:  this => this

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),commerce,commerce,false), Span(13,14,List(1),likely,likely,false), Span(11,12,List(2),spirit,spirit,false), Span(7,8,List(3),enterprise,enterprise,false), Span(5,6,List(4),promises,promise-01,false), Span(2,3,List(5),game,game,false), Span(0,1,List(6),this,this,false)),Map(2 -> spirit, 5 -> game, 1 -> likely, 4 -> promise-01, 6 -> this, 0 -> commerce, 3 -> enterprise),Map(e -> enterprise, t -> this, s -> spirit, g -> game, p -> promise-01, l -> likely, c -> commerce))),[Ljava.lang.String;@3c11aa7c,Annotation([Ljava.lang.String;@2bcfd1b3,[Ljava.lang.String;@58d0553d,[Ljava.lang.String;@558c4558),Annotation([Ljava.lang.String;@6c1cc048,[Ljava.lang.String;@5393ee6b,[Ledu.cmu.lti.nlp.amr.Dependency;@1509ddab),Annotation([Ljava.lang.String;@3ab81057,[Ljava.lang.String;@a38dddf,[Ljava.lang.String;@1b6e60b7),Annotation([Ljava.lang.String;@6b8f9c72,[Ljava.lang.String;@21683789,[Ledu.cmu.lti.nlp.amr.Entity;@41161481))
AMR:
(c / commerce, op, s / spirit)
(g / game, mod, t / this)
(l / likely, domain, s / spirit)
(p / promise-01, ARG0, g / game)
(p / promise-01, ARG1, e / enterprise)
(p / promise-01, condition, l / likely)

Decoded in 78,352 microseconds
Sentence: many clients making claims for storm damage have been visited by builders on spec promising to carry out quick repairs

Spans:
Span 3-4:  claims => claim-01
Span 1-2:  clients => client
Span 6-7:  damage => damage-01
Span 0-1:  many => many
Span 14-15:  promising => promise-01
Span 18-19:  quick => quick
Span 19-20:  repairs => repair-01
Span 5-6:  storm => storm
Span 9-10:  visited => visit-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),repairs,repair-01,false), Span(18,19,List(1),quick,quick,false), Span(14,15,List(2),promising,promise-01,false), Span(9,10,List(3),visited,visit-01,false), Span(6,7,List(4),damage,damage-01,false), Span(5,6,List(5),storm,storm,false), Span(3,4,List(6),claims,claim-01,false), Span(1,2,List(7),clients,client,false), Span(0,1,List(8),many,many,false)),Map(2 -> promise-01, 5 -> storm, 8 -> many, 7 -> client, 1 -> quick, 4 -> damage-01, 6 -> claim-01, 0 -> repair-01, 3 -> visit-01),Map(q -> quick, s -> storm, m -> many, d -> damage-01, v -> visit-01, p -> promise-01, r -> repair-01, c -> claim-01, c2 -> client))),[Ljava.lang.String;@da479dd,Annotation([Ljava.lang.String;@293ca32a,[Ljava.lang.String;@4bfc2f8c,[Ljava.lang.String;@1995b74d),Annotation([Ljava.lang.String;@34352d5a,[Ljava.lang.String;@f348a7d,[Ledu.cmu.lti.nlp.amr.Dependency;@42701c57),Annotation([Ljava.lang.String;@4e54b5d4,[Ljava.lang.String;@1b6d9979,[Ljava.lang.String;@3876e500),Annotation([Ljava.lang.String;@5b47ff6,[Ljava.lang.String;@d3cf267,[Ledu.cmu.lti.nlp.amr.Entity;@1c4e4efb))
AMR:
(c / claim-01, ARG0, c2 / client)
(c / claim-01, ARG1, d / damage-01)
(c2 / client, quant, m / many)
(d / damage-01, ARG1, s / storm)
(p / promise-01, ARG0, d / damage-01)
(p / promise-01, ARG1, r / repair-01)
(r / repair-01, mod, q / quick)
(v / visit-01, ARG1, c2 / client)

Decoded in 176,157 microseconds
Sentence: these incorporate a very long run which promises high speed

Spans:
Span 8-9:  high => high
Span 7-8:  promises => promise-01
Span 9-10:  speed => speed
Span 3-4:  very => very

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),speed,speed,false), Span(8,9,List(1),high,high,false), Span(7,8,List(2),promises,promise-01,false), Span(3,4,List(3),very,very,false)),Map(2 -> promise-01, 1 -> high, 0 -> speed, 3 -> very),Map(h -> high, s -> speed, v -> very, p -> promise-01))),[Ljava.lang.String;@59234f41,Annotation([Ljava.lang.String;@1d28621f,[Ljava.lang.String;@4641f02d,[Ljava.lang.String;@12ff3e64),Annotation([Ljava.lang.String;@335920fa,[Ljava.lang.String;@2084176c,[Ledu.cmu.lti.nlp.amr.Dependency;@401dc421),Annotation([Ljava.lang.String;@62377369,[Ljava.lang.String;@267a24df,[Ljava.lang.String;@1d0ac035),Annotation([Ljava.lang.String;@2cd0e678,[Ljava.lang.String;@46cae744,[Ledu.cmu.lti.nlp.amr.Entity;@331545ab))
AMR:
(p / promise-01, ARG0, v / very)
(p / promise-01, ARG1, s / speed)
(s / speed, mod, h / high)

Decoded in 9,850 microseconds
Sentence: he has addressed the concerns of this new south promising to reduce real estate taxes encourage growth and solve the areas chronic traffic congestion

Spans:
Span 2-3:  addressed => address-01
Span 17-18:  and => and
Span 20-21:  areas => area
Span 21-22:  chronic => chronic
Span 4-5:  concerns => concern-01
Span 23-24:  congestion => congest-01
Span 15-16:  encourage => encourage-01
Span 13-14:  estate => estate
Span 16-17:  growth => grow-01
Span 0-1:  he => he
Span 7-8:  new => new
Span 9-10:  promising => promise-01
Span 12-13:  real => real
Span 11-12:  reduce => reduce-01
Span 18-19:  solve => solve-01
Span 8-9:  south => south
Span 14-15:  taxes => tax-01
Span 6-7:  this => this
Span 22-23:  traffic => traffic

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),congestion,congest-01,false), Span(22,23,List(1),traffic,traffic,false), Span(21,22,List(2),chronic,chronic,false), Span(20,21,List(3),areas,area,false), Span(18,19,List(4),solve,solve-01,false), Span(17,18,List(5),and,and,false), Span(16,17,List(6),growth,grow-01,false), Span(15,16,List(7),encourage,encourage-01,false), Span(14,15,List(8),taxes,tax-01,false), Span(13,14,List(9),estate,estate,false), Span(12,13,List(10),real,real,false), Span(11,12,List(11),reduce,reduce-01,false), Span(9,10,List(12),promising,promise-01,false), Span(8,9,List(13),south,south,false), Span(7,8,List(14),new,new,false), Span(6,7,List(15),this,this,false), Span(4,5,List(16),concerns,concern-01,false), Span(2,3,List(17),addressed,address-01,false), Span(0,1,List(18),he,he,false)),Map(2 -> chronic, 5 -> and, 12 -> promise-01, 15 -> this, 8 -> tax-01, 18 -> he, 7 -> encourage-01, 17 -> address-01, 1 -> traffic, 4 -> solve-01, 11 -> reduce-01, 14 -> new, 6 -> grow-01, 0 -> congest-01, 9 -> estate, 16 -> concern-01, 3 -> area, 10 -> real, 13 -> south),Map(e -> encourage-01, n -> new, h -> he, s2 -> south, t -> traffic, e2 -> estate, a3 -> address-01, s -> solve-01, t3 -> this, g -> grow-01, r2 -> reduce-01, p -> promise-01, c3 -> concern-01, a -> area, t2 -> tax-01, a2 -> and, r -> real, c -> congest-01, c2 -> chronic))),[Ljava.lang.String;@3990f7c0,Annotation([Ljava.lang.String;@5c797bc6,[Ljava.lang.String;@2bad3398,[Ljava.lang.String;@7816568e),Annotation([Ljava.lang.String;@28cc23a,[Ljava.lang.String;@67236f24,[Ledu.cmu.lti.nlp.amr.Dependency;@4755d962),Annotation([Ljava.lang.String;@5532d584,[Ljava.lang.String;@7c5ff8ce,[Ljava.lang.String;@c7dc2d),Annotation([Ljava.lang.String;@41480ec1,[Ljava.lang.String;@61c0c262,[Ledu.cmu.lti.nlp.amr.Entity;@3619e211))
AMR:
(a2 / and, op, e / encourage-01)
(a2 / and, op, s / solve-01)
(a3 / address-01, ARG0, h / he)
(a3 / address-01, ARG1, c3 / concern-01)
(c / congest-01, ARG1, t / traffic)
(c / congest-01, mod, c2 / chronic)
(c3 / concern-01, ARG0, s2 / south)
(e / encourage-01, ARG1, g / grow-01)
(e2 / estate, mod, r / real)
(p / promise-01, ARG1, r2 / reduce-01)
(r2 / reduce-01, ARG0, s2 / south)
(r2 / reduce-01, ARG1, a2 / and)
(s / solve-01, ARG0, t2 / tax-01)
(s / solve-01, ARG1, a / area)
(s / solve-01, ARG2, c / congest-01)
(s2 / south, mod, n / new)
(s2 / south, mod, t3 / this)
(t2 / tax-01, ARG3, e2 / estate)

Decoded in 651,442 microseconds
Sentence: i had promised to go and see a man i had met only once before

Spans:
Span 5-6:  and => and
Span 14-15:  before => before
Span 9-10:  i => i
Span 0-1:  i => i
Span 8-9:  man => man
Span 11-12:  met => meet-03
Span 13-14:  once => once
Span 12-13:  only => only
Span 2-3:  promised => promise-01
Span 6-7:  see => see-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),before,before,false), Span(13,14,List(1),once,once,false), Span(12,13,List(2),only,only,false), Span(11,12,List(3),met,meet-03,false), Span(9,10,List(4),i,i,false), Span(8,9,List(5),man,man,false), Span(6,7,List(6),see,see-01,false), Span(5,6,List(7),and,and,false), Span(2,3,List(8),promised,promise-01,false), Span(0,1,List(9),i,i,false)),Map(2 -> only, 5 -> man, 8 -> promise-01, 7 -> and, 1 -> once, 4 -> i, 6 -> see-01, 9 -> i, 0 -> before, 3 -> meet-03),Map(b -> before, m2 -> man, s -> see-01, m -> meet-03, p -> promise-01, a -> and, o2 -> only, i2 -> i, i -> i, o -> once))),[Ljava.lang.String;@5d48e5d6,Annotation([Ljava.lang.String;@5ce97472,[Ljava.lang.String;@62dc1805,[Ljava.lang.String;@5fad22f7),Annotation([Ljava.lang.String;@5fd2b733,[Ljava.lang.String;@2f9a66b,[Ledu.cmu.lti.nlp.amr.Dependency;@541cbc53),Annotation([Ljava.lang.String;@2a901849,[Ljava.lang.String;@5a2a7673,[Ljava.lang.String;@19c6a644),Annotation([Ljava.lang.String;@40cdc794,[Ljava.lang.String;@5e9e6c9,[Ledu.cmu.lti.nlp.amr.Entity;@3f2e9927))
AMR:
(a / and, op, s / see-01)
(m / meet-03, ARG0, i / i)
(m / meet-03, ARG1, m2 / man)
(m / meet-03, ARG2, o / once)
(m / meet-03, time, b / before)
(o / once, degree, o2 / only)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, a / and)
(s / see-01, ARG1, m2 / man)

Decoded in 95,252 microseconds
Sentence: whats more you have promised to deliver the rewrites in five days because the producer is going on holiday he has a cottage in county cork coincidentally and would like to work on the rewrites sway from the office

Spans:
Span 27-28:  and => and
Span 12-13:  because => cause-01
Span 24-25:  county => county
Span 11-12:  days => (temporal-quantity :unit day)
Span 6-7:  deliver => deliver-01
Span 10-11:  five => 5
Span 19-20:  he => he
Span 18-19:  holiday => holiday
Span 38-39:  office => office
Span 14-15:  producer => produce-01
Span 4-5:  promised => promise-01
Span 35-36:  sway => sway-01
Span 2-3:  you => you

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),office,office,false), Span(35,36,List(1),sway,sway-01,false), Span(27,28,List(2),and,and,false), Span(24,25,List(3),county,county,false), Span(19,20,List(4),he,he,false), Span(18,19,List(5),holiday,holiday,false), Span(14,15,List(6),producer,produce-01,false), Span(12,13,List(7),because,cause-01,false), Span(11,12,List(9, 8),days,(temporal-quantity :unit day),false), Span(10,11,List(10),five,5,false), Span(6,7,List(11),deliver,deliver-01,false), Span(4,5,List(12),promised,promise-01,false), Span(2,3,List(13),you,you,false)),Map(2 -> and, 5 -> holiday, 12 -> promise-01, 8 -> temporal-quantity, 7 -> cause-01, 1 -> sway-01, 4 -> he, 11 -> deliver-01, 6 -> produce-01, 0 -> office, 9 -> day, 3 -> county, 10 -> 5, 13 -> you),Map(h -> he, h2 -> holiday, 5 -> 5, t -> temporal-quantity, p2 -> promise-01, s -> sway-01, d -> day, y -> you, p -> produce-01, a -> and, d2 -> deliver-01, c -> county, o -> office, c2 -> cause-01))),[Ljava.lang.String;@c48efd9,Annotation([Ljava.lang.String;@87a95dc,[Ljava.lang.String;@2804a2dd,[Ljava.lang.String;@48606fb1),Annotation([Ljava.lang.String;@3344f296,[Ljava.lang.String;@73927025,[Ledu.cmu.lti.nlp.amr.Dependency;@1300c86a),Annotation([Ljava.lang.String;@1865b0e5,[Ljava.lang.String;@3c4096e6,[Ljava.lang.String;@3472f4f1),Annotation([Ljava.lang.String;@672f151d,[Ljava.lang.String;@441357d7,[Ledu.cmu.lti.nlp.amr.Entity;@51ec072b))
AMR:
(a / and, op, h2 / holiday)
(c2 / cause-01, ARG0, p / produce-01)
(c2 / cause-01, ARG1, a / and)
(c2 / cause-01, ARG2, t / temporal-quantity)
(d2 / deliver-01, ARG0, y / you)
(p / produce-01, ARG1, s / sway-01)
(p / produce-01, subevent, d2 / deliver-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG2, d2 / deliver-01)
(s / sway-01, ARG1, o / office)
(s / sway-01, mod, c / county)
(t / temporal-quantity, quant, 5 / 5)
(t / temporal-quantity, unit, d / day)

Decoded in 126,725 microseconds
Sentence: i promise you they will know him all right after italys match at wembley in a fortnights time

NER Entity: (country :name (name :op "wembley"))
Spans:
Span 9-10:  after => after
Span 7-8:  all => all
Span 0-1:  i => i
Span 5-6:  know => know-01
Span 11-12:  match => match-01
Span 1-2:  promise => promise-01
Span 3-4:  they => they
Span 17-18:  time => time
Span 2-3:  you => you

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),time,time,false), Span(11,12,List(1),match,match-01,false), Span(9,10,List(2),after,after,false), Span(7,8,List(3),all,all,false), Span(5,6,List(4),know,know-01,false), Span(3,4,List(5),they,they,false), Span(2,3,List(6),you,you,false), Span(1,2,List(7),promise,promise-01,false), Span(0,1,List(8),i,i,false)),Map(2 -> after, 5 -> they, 8 -> i, 7 -> promise-01, 1 -> match-01, 4 -> know-01, 6 -> you, 0 -> time, 3 -> all),Map(k -> know-01, t -> time, m -> match-01, p -> promise-01, y -> you, a -> after, t2 -> they, i -> i, a2 -> all))),[Ljava.lang.String;@518b1ab5,Annotation([Ljava.lang.String;@3868ae6,[Ljava.lang.String;@760903d8,[Ljava.lang.String;@49db9672),Annotation([Ljava.lang.String;@6f723c3f,[Ljava.lang.String;@34d18542,[Ledu.cmu.lti.nlp.amr.Dependency;@2783cb25),Annotation([Ljava.lang.String;@3d8dfe67,[Ljava.lang.String;@35393bc3,[Ljava.lang.String;@40829a81),Annotation([Ljava.lang.String;@3e6dac3d,[Ljava.lang.String;@1246f8d0,[Ledu.cmu.lti.nlp.amr.Entity;@7179290f))
AMR:
(a / after, op, m / match-01)
(k / know-01, ARG0, t2 / they)
(k / know-01, ARG1, t / time)
(m / match-01, ARG1, k / know-01)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, t2 / they)
(p / promise-01, ARG2, y / you)
(p / promise-01, manner, a2 / all)

Decoded in 206,409 microseconds
Sentence: she bought the ticket gave him money for the journey and forced her way on board the boat where she found a purser who promised to look after michael and to put him on the london train

NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 27-28:  after => after
Span 29-30:  and => and
Span 10-11:  and => and
Span 17-18:  boat => boat
Span 1-2:  bought => buy-01
Span 11-12:  forced => force-01
Span 20-21:  found => find-01
Span 9-10:  journey => journey-01
Span 35-36:  london => (city :name (name :op "London"))
Span 6-7:  money => money
Span 24-25:  promised => promise-01
Span 19-20:  she => she
Span 0-1:  she => she
Span 3-4:  ticket => ticket
Span 36-37:  train => train
Span 13-14:  way => way

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),train,train,false), Span(35,36,List(3, 2, 1),london,(city :name (name :op "London")),false), Span(29,30,List(4),and,and,false), Span(27,28,List(5),after,after,false), Span(24,25,List(6),promised,promise-01,false), Span(20,21,List(7),found,find-01,false), Span(19,20,List(8),she,she,false), Span(17,18,List(9),boat,boat,false), Span(13,14,List(10),way,way,false), Span(11,12,List(11),forced,force-01,false), Span(10,11,List(12),and,and,false), Span(9,10,List(13),journey,journey-01,false), Span(6,7,List(14),money,money,false), Span(3,4,List(15),ticket,ticket,false), Span(1,2,List(16),bought,buy-01,false), Span(0,1,List(17),she,she,false)),Map(2 -> name, 5 -> after, 12 -> and, 15 -> ticket, 8 -> she, 7 -> find-01, 17 -> she, 1 -> city, 4 -> and, 11 -> force-01, 14 -> money, 6 -> promise-01, 0 -> train, 9 -> boat, 16 -> buy-01, 3 -> "London", 10 -> way, 13 -> journey-01),Map(n -> name, w -> way, s2 -> she, t -> train, b -> boat, b2 -> buy-01, a3 -> and, j -> journey-01, s -> she, m -> money, p -> promise-01, a -> and, t2 -> ticket, a2 -> after, c -> city, f2 -> force-01, f -> find-01))),[Ljava.lang.String;@4976d1fc,Annotation([Ljava.lang.String;@17d41d12,[Ljava.lang.String;@66c094f6,[Ljava.lang.String;@6d73d72d),Annotation([Ljava.lang.String;@5034037e,[Ljava.lang.String;@6d16e55,[Ledu.cmu.lti.nlp.amr.Dependency;@1fa291f2),Annotation([Ljava.lang.String;@6a1bb717,[Ljava.lang.String;@41917d6d,[Ljava.lang.String;@36c1a0bc),Annotation([Ljava.lang.String;@621fb2b9,[Ljava.lang.String;@f0ec203,[Ledu.cmu.lti.nlp.amr.Entity;@11e35aae))
AMR:
(a / and, op, p / promise-01)
(a3 / and, op, b / boat)
(a3 / and, op, f2 / force-01)
(b2 / buy-01, ARG0, s2 / she)
(b2 / buy-01, ARG1, a3 / and)
(c / city, name, n / name)
(f / find-01, ARG0, s / she)
(f / find-01, ARG1, b / boat)
(f2 / force-01, ARG0, t2 / ticket)
(f2 / force-01, ARG1, w / way)
(f2 / force-01, ARG2, m / money)
(j / journey-01, ARG1, c / city)
(m / money, beneficiary, j / journey-01)
(n / name, op, "London")
(p / promise-01, ARG0, s / she)
(p / promise-01, ARG1, a2 / after)
(t / train, mod, c / city)

Decoded in 269,118 microseconds
Sentence: the honour of formally opening the new music suite has been promised to larkmeads former head of music christine whild who spent her entire teaching career in a temporary classroom

Spans:
Span 25-26:  career => career
Span 29-30:  classroom => classroom
Span 23-24:  entire => entire
Span 3-4:  formally => formal
Span 14-15:  former => former
Span 15-16:  head => head-01
Span 1-2:  honour => honor-01
Span 17-18:  music => music
Span 7-8:  music => music
Span 6-7:  new => new
Span 4-5:  opening => open-01
Span 11-12:  promised => promise-01
Span 21-22:  spent => spend-01
Span 24-25:  teaching => teach-01
Span 28-29:  temporary => temporary

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),classroom,classroom,false), Span(28,29,List(1),temporary,temporary,false), Span(25,26,List(2),career,career,false), Span(24,25,List(3),teaching,teach-01,false), Span(23,24,List(4),entire,entire,false), Span(21,22,List(5),spent,spend-01,false), Span(17,18,List(6),music,music,false), Span(15,16,List(7),head,head-01,false), Span(14,15,List(8),former,former,false), Span(11,12,List(9),promised,promise-01,false), Span(7,8,List(10),music,music,false), Span(6,7,List(11),new,new,false), Span(4,5,List(12),opening,open-01,false), Span(3,4,List(13),formally,formal,false), Span(1,2,List(14),honour,honor-01,false)),Map(2 -> career, 5 -> spend-01, 12 -> open-01, 8 -> former, 7 -> head-01, 1 -> temporary, 4 -> entire, 11 -> new, 14 -> honor-01, 6 -> music, 0 -> classroom, 9 -> promise-01, 3 -> teach-01, 10 -> music, 13 -> formal),Map(e -> entire, n -> new, h -> head-01, h2 -> honor-01, t -> temporary, m2 -> music, s -> spend-01, m -> music, p -> promise-01, t2 -> teach-01, c -> classroom, f2 -> formal, f -> former, o -> open-01, c2 -> career))),[Ljava.lang.String;@65565eae,Annotation([Ljava.lang.String;@962257c,[Ljava.lang.String;@a8af4b4,[Ljava.lang.String;@28c75ad4),Annotation([Ljava.lang.String;@381c2936,[Ljava.lang.String;@40d5b501,[Ledu.cmu.lti.nlp.amr.Dependency;@e5e75e8),Annotation([Ljava.lang.String;@5b8ed9b6,[Ljava.lang.String;@7f776aaf,[Ljava.lang.String;@78fd4889),Annotation([Ljava.lang.String;@3ca5586d,[Ljava.lang.String;@b507b36,[Ledu.cmu.lti.nlp.amr.Entity;@50c91c07))
AMR:
(c / classroom, duration, t / temporary)
(c2 / career, location, c / classroom)
(c2 / career, mod, t2 / teach-01)
(h / head-01, ARG0, s / spend-01)
(h / head-01, location, m2 / music)
(h / head-01, time, f / former)
(h2 / honor-01, ARG2, o / open-01)
(o / open-01, manner, f2 / formal)
(p / promise-01, ARG1, h2 / honor-01)
(p / promise-01, ARG2, h / head-01)
(s / spend-01, ARG0, m / music)
(s / spend-01, ARG1, c2 / career)
(t2 / teach-01, ARG1, n / new)
(t2 / teach-01, ARG2, e / entire)

Decoded in 215,580 microseconds
Sentence: as sweden has promised

NER Entity: (country :name (name :op "sweden"))
Spans:
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),promised,promise-01,false)),Map(0 -> promise-01),Map(p -> promise-01))),[Ljava.lang.String;@434f3900,Annotation([Ljava.lang.String;@6275186,[Ljava.lang.String;@7f593791,[Ljava.lang.String;@3a4f51e8),Annotation([Ljava.lang.String;@2d8a7440,[Ljava.lang.String;@5cd62d1b,[Ledu.cmu.lti.nlp.amr.Dependency;@712b773a),Annotation([Ljava.lang.String;@5ca0bae1,[Ljava.lang.String;@3c4d3949,[Ljava.lang.String;@71ec068c),Annotation([Ljava.lang.String;@3ea20bc2,[Ljava.lang.String;@b20dae,[Ledu.cmu.lti.nlp.amr.Entity;@29a01add))
AMR:


Decoded in 2,190 microseconds
Sentence: safety first the polyotter float suit she pushed the crisis of oneparent families high up the political agenda by promising to set up a new child support agency

Spans:
Span 27-28:  agency => agency
Span 17-18:  agenda => agenda
Span 25-26:  child => child
Span 9-10:  crisis => crisis
Span 12-13:  families => family
Span 4-5:  float => float-01
Span 13-14:  high => high
Span 24-25:  new => new
Span 16-17:  political => politics
Span 19-20:  promising => promise-01
Span 7-8:  pushed => push-01
Span 0-1:  safety => safe-41
Span 6-7:  she => she
Span 5-6:  suit => suit-01
Span 26-27:  support => support-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),agency,agency,false), Span(26,27,List(1),support,support-01,false), Span(25,26,List(2),child,child,false), Span(24,25,List(3),new,new,false), Span(19,20,List(4),promising,promise-01,false), Span(17,18,List(5),agenda,agenda,false), Span(16,17,List(6),political,politics,false), Span(13,14,List(7),high,high,false), Span(12,13,List(8),families,family,false), Span(9,10,List(9),crisis,crisis,false), Span(7,8,List(10),pushed,push-01,false), Span(6,7,List(11),she,she,false), Span(5,6,List(12),suit,suit-01,false), Span(4,5,List(13),float,float-01,false), Span(0,1,List(14),safety,safe-41,false)),Map(2 -> child, 5 -> agenda, 12 -> suit-01, 8 -> family, 7 -> high, 1 -> support-01, 4 -> promise-01, 11 -> she, 14 -> safe-41, 6 -> politics, 0 -> agency, 9 -> crisis, 3 -> new, 10 -> push-01, 13 -> float-01),Map(n -> new, h -> high, s2 -> she, p2 -> politics, s -> support-01, s4 -> safe-41, p -> promise-01, a -> agency, a2 -> agenda, c -> child, s3 -> suit-01, f2 -> float-01, f -> family, p3 -> push-01, c2 -> crisis))),[Ljava.lang.String;@40070a40,Annotation([Ljava.lang.String;@e321097,[Ljava.lang.String;@78df30c8,[Ljava.lang.String;@4fbd877),Annotation([Ljava.lang.String;@32406f2f,[Ljava.lang.String;@2443906f,[Ledu.cmu.lti.nlp.amr.Dependency;@4fbf7a02),Annotation([Ljava.lang.String;@23e34235,[Ljava.lang.String;@1d0fb7fb,[Ljava.lang.String;@72f7cea4),Annotation([Ljava.lang.String;@6b1fabf3,[Ljava.lang.String;@6c521576,[Ledu.cmu.lti.nlp.amr.Entity;@ff2d89))
AMR:
(a / agency, mod, n / new)
(a / agency, mod, s / support-01)
(a / agency, poss, c / child)
(a2 / agenda, mod, p2 / politics)
(a2 / agenda, topic, p / promise-01)
(h / high, mod, f / family)
(p / promise-01, ARG1, c2 / crisis)
(p3 / push-01, ARG0, s2 / she)
(p3 / push-01, ARG1, s3 / suit-01)
(p3 / push-01, ARG2, f / family)
(p3 / push-01, manner, p / promise-01)
(s / support-01, ARG1, s3 / suit-01)
(s3 / suit-01, ARG1, f2 / float-01)
(s4 / safe-41, ARG1, s3 / suit-01)

Decoded in 370,083 microseconds
Sentence: while the economic reforms of mr deng and his ousted heir apparent mr zhao pushed china into the unknown creating uncomfortable uncertainty and dangerous risks mr chen and his acolytes offer a more reassuring view promising the certainty of planning and the stability of central control

NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "china"))
Spans:
Span 40-41:  and => and
Span 27-28:  and => and
Span 22-23:  and => and
Span 7-8:  and => and
Span 11-12:  apparent => apparent
Span 44-45:  central => central
Span 37-38:  certainty => certainty
Span 15-16:  china => (country :name (name :op "China"))
Span 45-46:  control => control-01
Span 19-20:  creating => create-01
Span 23-24:  dangerous => dangerous
Span 2-3:  economic => economy
Span 30-31:  offer => offer-01
Span 9-10:  ousted => oust-01
Span 39-40:  planning => plan-01
Span 35-36:  promising => promise-01
Span 14-15:  pushed => push-01
Span 3-4:  reforms => reform-01
Span 24-25:  risks => risk-01
Span 42-43:  stability => stability
Span 21-22:  uncertainty => (certainty :polarity -)
Span 20-21:  uncomfortable => (comfort-01 :polarity -)
Span 18-19:  unknown => (know-01 :polarity -)

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),control,control-01,false), Span(44,45,List(1),central,central,false), Span(42,43,List(2),stability,stability,false), Span(40,41,List(3),and,and,false), Span(39,40,List(4),planning,plan-01,false), Span(37,38,List(5),certainty,certainty,false), Span(35,36,List(6),promising,promise-01,false), Span(30,31,List(7),offer,offer-01,false), Span(27,28,List(8),and,and,false), Span(24,25,List(9),risks,risk-01,false), Span(23,24,List(10),dangerous,dangerous,false), Span(22,23,List(11),and,and,false), Span(21,22,List(13, 12),uncertainty,(certainty :polarity -),false), Span(20,21,List(15, 14),uncomfortable,(comfort-01 :polarity -),false), Span(19,20,List(16),creating,create-01,false), Span(18,19,List(18, 17),unknown,(know-01 :polarity -),false), Span(15,16,List(21, 20, 19),china,(country :name (name :op "China")),false), Span(14,15,List(22),pushed,push-01,false), Span(11,12,List(23),apparent,apparent,false), Span(9,10,List(24),ousted,oust-01,false), Span(7,8,List(25),and,and,false), Span(3,4,List(26),reforms,reform-01,false), Span(2,3,List(27),economic,economy,false)),Map(2 -> stability, 5 -> certainty, 27 -> economy, 12 -> certainty, 8 -> and, 15 -> -, 21 -> "China", 18 -> -, 24 -> oust-01, 7 -> offer-01, 1 -> central, 17 -> know-01, 23 -> apparent, 26 -> reform-01, 4 -> plan-01, 11 -> and, 14 -> comfort-01, 20 -> name, 6 -> promise-01, 9 -> risk-01, 0 -> control-01, 22 -> push-01, 16 -> create-01, 19 -> country, 10 -> dangerous, 3 -> and, 25 -> and, 13 -> -),Map(e -> economy, n -> name, k -> know-01, c7 -> country, p2 -> promise-01, a3 -> and, c4 -> certainty, s -> stability, d -> dangerous, r2 -> reform-01, p -> plan-01, a -> and, c3 -> certainty, a5 -> and, o2 -> oust-01, c6 -> create-01, a2 -> and, r -> risk-01, c -> control-01, o -> offer-01, p3 -> push-01, c2 -> central, a4 -> apparent, c5 -> comfort-01))),[Ljava.lang.String;@613278bf,Annotation([Ljava.lang.String;@38957573,[Ljava.lang.String;@5c51ee0a,[Ljava.lang.String;@6e301e0),Annotation([Ljava.lang.String;@21901ca8,[Ljava.lang.String;@7c496ace,[Ledu.cmu.lti.nlp.amr.Dependency;@38033a21),Annotation([Ljava.lang.String;@5bdd6941,[Ljava.lang.String;@25295985,[Ljava.lang.String;@3db43dd2),Annotation([Ljava.lang.String;@446c5a4,[Ljava.lang.String;@4259942d,[Ledu.cmu.lti.nlp.amr.Entity;@70f3863))
AMR:
(a / and, op, p / plan-01)
(a / and, op, s / stability)
(a2 / and, op, o / offer-01)
(a2 / and, op, p3 / push-01)
(a3 / and, op, c4 / certainty)
(a3 / and, op, r / risk-01)
(c / control-01, manner, c2 / central)
(c4 / certainty, polarity, -)
(c5 / comfort-01, ARG1, c4 / certainty)
(c5 / comfort-01, polarity, -)
(c6 / create-01, ARG1, a3 / and)
(c7 / country, name, n / name)
(k / know-01, ARG1, a / and)
(k / know-01, manner, c6 / create-01)
(k / know-01, polarity, -)
(n / name, op, "China")
(o / offer-01, ARG0, r2 / reform-01)
(o / offer-01, ARG1, p2 / promise-01)
(o2 / oust-01, ARG1, o / offer-01)
(p2 / promise-01, ARG1, a / and)
(p2 / promise-01, ARG2, c3 / certainty)
(p3 / push-01, ARG1, c7 / country)
(r / risk-01, ARG0, a4 / apparent)
(r / risk-01, mod, d / dangerous)
(r2 / reform-01, ARG1, e / economy)
(r2 / reform-01, example, a5 / and)
(s / stability, mod, c / control-01)

Decoded in 1,349,509 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@783eef33,Annotation([Ljava.lang.String;@6bca3af1,[Ljava.lang.String;@29e3db80,[Ljava.lang.String;@2e5fc5fc),Annotation([Ljava.lang.String;@11bf3b2d,[Ljava.lang.String;@21c61075,[Ledu.cmu.lti.nlp.amr.Dependency;@526282a5),Annotation([Ljava.lang.String;@416f48e4,[Ljava.lang.String;@711a924b,[Ljava.lang.String;@77ab3f0),Annotation([Ljava.lang.String;@8bb5566,[Ljava.lang.String;@42e3a004,[Ledu.cmu.lti.nlp.amr.Entity;@6e1e88ea))
AMR:


Decoded in 1,184 microseconds
Sentence: even that amount will worry supporters and shareholders as well as manager terry venables who was promised that the nonfootballing side of spurs business would enable him to fund the creation of a championship winning team

NER Entity: (person :name (name :op "terry" :op "venables"))
Spans:
Span 2-3:  amount => amount
Span 6-7:  and => and
Span 23-24:  business => business
Span 30-31:  creation => create-01
Span 25-26:  enable => enable-01
Span 28-29:  fund => fund-01
Span 11-12:  manager => manage-01
Span 16-17:  promised => promise-01
Span 20-21:  side => side
Span 5-6:  supporters => (person :ARG0-of support-01)
Span 35-36:  team => team
Span 12-14:  terry venables => (person :name (name :op "terry" :op "venables"))
Span 9-10:  well => well
Span 34-35:  winning => win-01
Span 4-5:  worry => worry-02

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),team,team,false), Span(34,35,List(1),winning,win-01,false), Span(30,31,List(2),creation,create-01,false), Span(28,29,List(3),fund,fund-01,false), Span(25,26,List(4),enable,enable-01,false), Span(23,24,List(5),business,business,false), Span(20,21,List(6),side,side,false), Span(16,17,List(7),promised,promise-01,false), Span(12,14,List(11, 10, 9, 8),terry venables,(person :name (name :op "terry" :op "venables")),false), Span(11,12,List(12),manager,manage-01,false), Span(9,10,List(13),well,well,false), Span(6,7,List(14),and,and,false), Span(5,6,List(16, 15),supporters,(person :ARG0-of support-01),false), Span(4,5,List(17),worry,worry-02,false), Span(2,3,List(18),amount,amount,false)),Map(2 -> create-01, 5 -> business, 12 -> manage-01, 15 -> person, 8 -> person, 18 -> amount, 7 -> promise-01, 17 -> worry-02, 1 -> win-01, 4 -> enable-01, 11 -> "venables", 14 -> and, 6 -> side, 0 -> team, 9 -> name, 16 -> support-01, 3 -> fund-01, 10 -> "terry", 13 -> well),Map(e -> enable-01, w -> win-01, n -> name, s2 -> support-01, t -> team, b -> business, p2 -> person, w3 -> worry-02, s -> side, m -> manage-01, p -> promise-01, a -> and, w2 -> well, a2 -> amount, c -> create-01, f -> fund-01, p3 -> person))),[Ljava.lang.String;@16aef321,Annotation([Ljava.lang.String;@37dc0729,[Ljava.lang.String;@4e5a3165,[Ljava.lang.String;@3610613),Annotation([Ljava.lang.String;@56d5cb20,[Ljava.lang.String;@6e0ace69,[Ledu.cmu.lti.nlp.amr.Dependency;@77587f0),Annotation([Ljava.lang.String;@352fa163,[Ljava.lang.String;@4a0c85dc,[Ljava.lang.String;@7c28547e),Annotation([Ljava.lang.String;@3bc35be0,[Ljava.lang.String;@16c4edc7,[Ledu.cmu.lti.nlp.amr.Entity;@5ad6af7e))
AMR:
(a / and, op, p2 / person)
(c / create-01, ARG1, t / team)
(e / enable-01, ARG0, b / business)
(e / enable-01, ARG1, f / fund-01)
(f / fund-01, ARG0, s / side)
(f / fund-01, ARG1, c / create-01)
(m / manage-01, ARG0, p2 / person)
(n / name, op, "terry")
(n / name, op, "venables")
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, s / side)
(p2 / person, name, n / name)
(s2 / support-01, ARG0, p3 / person)
(s2 / support-01, ARG1, w2 / well)
(w / win-01, ARG1, t / team)
(w3 / worry-02, ARG0, a2 / amount)
(w3 / worry-02, ARG1, a / and)
(w3 / worry-02, ARG2, p3 / person)

Decoded in 327,116 microseconds
Sentence: the sandinistas are promising an absolutely transparent election dash

Spans:
Span 5-6:  absolutely => absolute
Span 7-8:  election => elect-01
Span 3-4:  promising => promise-01
Span 6-7:  transparent => transparent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),election,elect-01,false), Span(6,7,List(1),transparent,transparent,false), Span(5,6,List(2),absolutely,absolute,false), Span(3,4,List(3),promising,promise-01,false)),Map(2 -> absolute, 1 -> transparent, 0 -> elect-01, 3 -> promise-01),Map(e -> elect-01, t -> transparent, p -> promise-01, a -> absolute))),[Ljava.lang.String;@449ba7c9,Annotation([Ljava.lang.String;@4724a04f,[Ljava.lang.String;@3598c706,[Ljava.lang.String;@41327667),Annotation([Ljava.lang.String;@57fb85a1,[Ljava.lang.String;@42023a27,[Ledu.cmu.lti.nlp.amr.Dependency;@2037f84c),Annotation([Ljava.lang.String;@3a8e561a,[Ljava.lang.String;@56b6e2fe,[Ljava.lang.String;@f0be2c),Annotation([Ljava.lang.String;@3d553b2f,[Ljava.lang.String;@26a0aa1e,[Ledu.cmu.lti.nlp.amr.Entity;@7e00ab61))
AMR:
(e / elect-01, mod, t / transparent)
(p / promise-01, ARG1, e / elect-01)
(t / transparent, degree, a / absolute)

Decoded in 9,635 microseconds
Sentence: in fact lewis thinks i should tip him but with the exception of thethingaboutitis whenever i have tipped his horses in the past year they have lost and i do not want to spoil what promises to be his best season since he took up training

Spans:
Span 27-28:  and => and
Span 8-9:  but => contrast-01
Span 11-12:  exception => except-00
Span 1-2:  fact => fact
Span 42-43:  he => he
Span 19-20:  horses => horse
Span 28-29:  i => i
Span 15-16:  i => i
Span 4-5:  i => i
Span 26-27:  lost => lose-02
Span 22-23:  past => past
Span 35-36:  promises => promise-01
Span 40-41:  season => season
Span 5-6:  should => recommend-01
Span 41-42:  since => since
Span 33-34:  spoil => spoil-01
Span 24-25:  they => they
Span 3-4:  thinks => think-01
Span 6-7:  tip => tip
Span 45-46:  training => train-01
Span 31-32:  want => want-01
Span 14-15:  whenever => whenever
Span 23-24:  year => year

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),training,train-01,false), Span(42,43,List(1),he,he,false), Span(41,42,List(2),since,since,false), Span(40,41,List(3),season,season,false), Span(35,36,List(4),promises,promise-01,false), Span(33,34,List(5),spoil,spoil-01,false), Span(31,32,List(6),want,want-01,false), Span(28,29,List(7),i,i,false), Span(27,28,List(8),and,and,false), Span(26,27,List(9),lost,lose-02,false), Span(24,25,List(10),they,they,false), Span(23,24,List(11),year,year,false), Span(22,23,List(12),past,past,false), Span(19,20,List(13),horses,horse,false), Span(15,16,List(14),i,i,false), Span(14,15,List(15),whenever,whenever,false), Span(11,12,List(16),exception,except-00,false), Span(8,9,List(17),but,contrast-01,false), Span(6,7,List(18),tip,tip,false), Span(5,6,List(19),should,recommend-01,false), Span(4,5,List(20),i,i,false), Span(3,4,List(21),thinks,think-01,false), Span(1,2,List(22),fact,fact,false)),Map(2 -> since, 5 -> spoil-01, 12 -> past, 15 -> whenever, 8 -> and, 21 -> think-01, 18 -> tip, 7 -> i, 17 -> contrast-01, 1 -> he, 4 -> promise-01, 11 -> year, 14 -> i, 20 -> i, 6 -> want-01, 22 -> fact, 0 -> train-01, 9 -> lose-02, 16 -> except-00, 19 -> recommend-01, 3 -> season, 10 -> they, 13 -> horse),Map(e -> except-00, w -> want-01, t4 -> think-01, h -> he, h2 -> horse, s2 -> season, t -> train-01, p2 -> past, s -> since, i3 -> i, t3 -> tip, p -> promise-01, y -> year, a -> and, i2 -> i, t2 -> they, w2 -> whenever, r -> recommend-01, i -> i, c -> contrast-01, s3 -> spoil-01, l -> lose-02, f -> fact))),[Ljava.lang.String;@1384307e,Annotation([Ljava.lang.String;@4b8baa34,[Ljava.lang.String;@3e5362ab,[Ljava.lang.String;@5472e884),Annotation([Ljava.lang.String;@43ff5d6c,[Ljava.lang.String;@324e8054,[Ledu.cmu.lti.nlp.amr.Dependency;@3fcb2499),Annotation([Ljava.lang.String;@31cfd987,[Ljava.lang.String;@44d2479d,[Ljava.lang.String;@495bb7b7),Annotation([Ljava.lang.String;@247a7501,[Ljava.lang.String;@6397a75c,[Ledu.cmu.lti.nlp.amr.Entity;@796cbc18))
AMR:
(a / and, op, l / lose-02)
(a / and, op, r / recommend-01)
(a / and, op, w / want-01)
(c / contrast-01, ARG1, r / recommend-01)
(e / except-00, ARG1, s3 / spoil-01)
(h2 / horse, poss, i2 / i)
(l / lose-02, ARG0, t2 / they)
(l / lose-02, ARG1, y / year)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, s2 / season)
(r / recommend-01, ARG0, f / fact)
(r / recommend-01, ARG1, t3 / tip)
(s / since, op, t / train-01)
(s3 / spoil-01, ARG1, p / promise-01)
(t / train-01, ARG0, h / he)
(t3 / tip, ARG0, i3 / i)
(t3 / tip, frequency, w2 / whenever)
(t4 / think-01, ARG0, i2 / i)
(t4 / think-01, ARG1, r / recommend-01)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, s3 / spoil-01)
(y / year, mod, p2 / past)

Decoded in 1,076,014 microseconds
Sentence: the publication follows a government promise to strengthen safety guidelines for school trips after the deaths of four schoolboys during a visit to austria last year

NER Entity: (country :name (name :op "austria"))
Spans:
Span 13-14:  after => after
Span 17-18:  four => 4
Span 9-10:  guidelines => guideline
Span 24-25:  last => last
Span 5-6:  promise => promise-01
Span 1-2:  publication => publication
Span 8-9:  safety => safe-41
Span 11-12:  school => school
Span 7-8:  strengthen => strengthen-01
Span 21-22:  visit => visit-01
Span 25-26:  year => year

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),year,year,false), Span(24,25,List(1),last,last,false), Span(21,22,List(2),visit,visit-01,false), Span(17,18,List(3),four,4,false), Span(13,14,List(4),after,after,false), Span(11,12,List(5),school,school,false), Span(9,10,List(6),guidelines,guideline,false), Span(8,9,List(7),safety,safe-41,false), Span(7,8,List(8),strengthen,strengthen-01,false), Span(5,6,List(9),promise,promise-01,false), Span(1,2,List(10),publication,publication,false)),Map(2 -> visit-01, 5 -> school, 8 -> strengthen-01, 7 -> safe-41, 1 -> last, 4 -> after, 6 -> guideline, 9 -> promise-01, 0 -> year, 10 -> publication, 3 -> 4),Map(s2 -> safe-41, p2 -> publication, s -> school, v -> visit-01, p -> promise-01, g -> guideline, y -> year, a -> after, 4 -> 4, s3 -> strengthen-01, l -> last))),[Ljava.lang.String;@51b109ef,Annotation([Ljava.lang.String;@3e0353cf,[Ljava.lang.String;@4c735ad7,[Ljava.lang.String;@29510077),Annotation([Ljava.lang.String;@4f599d2,[Ljava.lang.String;@1845ac89,[Ledu.cmu.lti.nlp.amr.Dependency;@64262d2),Annotation([Ljava.lang.String;@7065cc33,[Ljava.lang.String;@2b4161eb,[Ljava.lang.String;@5183a17c),Annotation([Ljava.lang.String;@18defdb3,[Ljava.lang.String;@57e1ff86,[Ledu.cmu.lti.nlp.amr.Entity;@364ee37d))
AMR:
(g / guideline, mod, s2 / safe-41)
(p / promise-01, ARG0, l / last)
(p / promise-01, ARG1, p2 / publication)
(p / promise-01, ARG2, s3 / strengthen-01)
(p / promise-01, quant, 4 / 4)
(s3 / strengthen-01, ARG1, g / guideline)
(s3 / strengthen-01, time, a / after)
(v / visit-01, ARG0, g / guideline)
(v / visit-01, ARG1, s / school)
(y / year, mod, l / last)

Decoded in 110,877 microseconds
Sentence: one observer predicts a bloodbath as the current mergers slash staff to make the savings necessary to produce the economies of scale which have been promised

Spans:
Span 7-8:  current => current
Span 19-20:  economies => economy
Span 8-9:  mergers => merge-01
Span 1-2:  observer => observe-01
Span 2-3:  predicts => predict-01
Span 17-18:  produce => produce-01
Span 25-26:  promised => promise-01
Span 21-22:  scale => scale
Span 9-10:  slash => slash-01
Span 10-11:  staff => (person :ARG2-of staff-01)

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),promised,promise-01,false), Span(21,22,List(1),scale,scale,false), Span(19,20,List(2),economies,economy,false), Span(17,18,List(3),produce,produce-01,false), Span(10,11,List(5, 4),staff,(person :ARG2-of staff-01),false), Span(9,10,List(6),slash,slash-01,false), Span(8,9,List(7),mergers,merge-01,false), Span(7,8,List(8),current,current,false), Span(2,3,List(9),predicts,predict-01,false), Span(1,2,List(10),observer,observe-01,false)),Map(2 -> economy, 5 -> staff-01, 8 -> current, 7 -> merge-01, 1 -> scale, 4 -> person, 6 -> slash-01, 9 -> predict-01, 0 -> promise-01, 10 -> observe-01, 3 -> produce-01),Map(e -> economy, s2 -> staff-01, p2 -> produce-01, s -> scale, m -> merge-01, p -> promise-01, p4 -> predict-01, c -> current, s3 -> slash-01, o -> observe-01, p3 -> person))),[Ljava.lang.String;@75393f65,Annotation([Ljava.lang.String;@1713c03,[Ljava.lang.String;@311ae9b2,[Ljava.lang.String;@5de4be4d),Annotation([Ljava.lang.String;@5489e163,[Ljava.lang.String;@282c55f1,[Ledu.cmu.lti.nlp.amr.Dependency;@76be55d1),Annotation([Ljava.lang.String;@49f4493e,[Ljava.lang.String;@44f4ab60,[Ljava.lang.String;@1b1f4efe),Annotation([Ljava.lang.String;@247b139b,[Ljava.lang.String;@c4437d3,[Ledu.cmu.lti.nlp.amr.Entity;@52ad03ef))
AMR:
(m / merge-01, time, c / current)
(o / observe-01, ARG1, p / promise-01)
(p / promise-01, ARG1, s / scale)
(p2 / produce-01, ARG1, e / economy)
(p2 / produce-01, duration, s / scale)
(p4 / predict-01, ARG1, o / observe-01)
(p4 / predict-01, time, s3 / slash-01)
(s2 / staff-01, ARG2, p3 / person)
(s3 / slash-01, ARG0, m / merge-01)
(s3 / slash-01, ARG1, p3 / person)

Decoded in 318,229 microseconds
Sentence: small compensation that virgin vision are promising to release a 1984 video of hytners staging in the spring while david athertons premiere recording with the london sinfonietta for decca has just been rereleased on cd together with the four symphonies and first three string quartets

NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 10-11:  1984 => (date-entity :year 1984)
Span 40-41:  and => and
Span 1-2:  compensation => compensate-01
Span 38-39:  four => 4
Span 30-31:  just => just
Span 25-26:  london => (city :name (name :op "London"))
Span 6-7:  promising => promise-01
Span 22-23:  recording => record-01
Span 8-9:  release => release-01
Span 0-1:  small => small
Span 17-18:  spring => spring
Span 14-15:  staging => stage-01
Span 43-44:  string => string
Span 42-43:  three => 3
Span 35-36:  together => together
Span 11-12:  video => video
Span 3-4:  virgin => virgin

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),string,string,false), Span(42,43,List(1),three,3,false), Span(40,41,List(2),and,and,false), Span(38,39,List(3),four,4,false), Span(35,36,List(4),together,together,false), Span(30,31,List(5),just,just,false), Span(25,26,List(8, 7, 6),london,(city :name (name :op "London")),false), Span(22,23,List(9),recording,record-01,false), Span(17,18,List(10),spring,spring,false), Span(14,15,List(11),staging,stage-01,false), Span(11,12,List(12),video,video,false), Span(10,11,List(14, 13),1984,(date-entity :year 1984),false), Span(8,9,List(15),release,release-01,false), Span(6,7,List(16),promising,promise-01,false), Span(3,4,List(17),virgin,virgin,false), Span(1,2,List(18),compensation,compensate-01,false), Span(0,1,List(19),small,small,false)),Map(2 -> and, 5 -> just, 12 -> video, 15 -> release-01, 8 -> "London", 18 -> compensate-01, 7 -> name, 17 -> virgin, 1 -> 3, 4 -> together, 11 -> stage-01, 14 -> 1984, 6 -> city, 0 -> string, 9 -> record-01, 16 -> promise-01, 19 -> small, 3 -> 4, 10 -> spring, 13 -> date-entity),Map(v2 -> virgin, n -> name, s2 -> spring, t -> together, j -> just, s -> string, s4 -> small, v -> video, d -> date-entity, 1 -> 1984, p -> promise-01, r2 -> release-01, a -> and, 4 -> 4, r -> record-01, c -> city, s3 -> stage-01, 3 -> 3, c2 -> compensate-01))),[Ljava.lang.String;@4c6ed9d1,Annotation([Ljava.lang.String;@19e4f8b,[Ljava.lang.String;@40782f81,[Ljava.lang.String;@1276df38),Annotation([Ljava.lang.String;@3a38df00,[Ljava.lang.String;@6bb896dc,[Ledu.cmu.lti.nlp.amr.Dependency;@23b87cc4),Annotation([Ljava.lang.String;@25073a2e,[Ljava.lang.String;@7d7cb4ff,[Ljava.lang.String;@64f11b6),Annotation([Ljava.lang.String;@3113c6f6,[Ljava.lang.String;@96b59a6,[Ledu.cmu.lti.nlp.amr.Entity;@66caa61e))
AMR:
(c / city, name, n / name)
(c2 / compensate-01, ARG0, d / date-entity)
(c2 / compensate-01, ARG1, p / promise-01)
(c2 / compensate-01, mod, s4 / small)
(d / date-entity, year, 1 / 1984)
(n / name, op, "London")
(p / promise-01, ARG1, j / just)
(p / promise-01, ARG2, r2 / release-01)
(r / record-01, ARG0, s / string)
(r / record-01, ARG1, a / and)
(r / record-01, location, c / city)
(r2 / release-01, ARG1, v / video)
(s / string, quant, 3 / 3)
(s2 / spring, poss, 4 / 4)
(s2 / spring, prep-against, r / record-01)
(s3 / stage-01, ARG0, v / video)
(s3 / stage-01, location, s2 / spring)
(t / together, op, s3 / stage-01)
(v2 / virgin, op, r / record-01)

Decoded in 484,741 microseconds
Sentence: but it could be better and it was promising to be so and for every member in the household god bless them for there were never a better master nor mistress

Spans:
Span 12-13:  and => and
Span 5-6:  and => and
Span 0-1:  but => contrast-01
Span 2-3:  could => possible
Span 14-15:  every => every
Span 19-20:  god => god
Span 18-19:  household => household
Span 6-7:  it => it
Span 1-2:  it => it
Span 28-29:  master => master
Span 15-16:  member => (have-org-role-91 :ARG2 member)
Span 30-31:  mistress => mistress
Span 8-9:  promising => promise-01
Span 11-12:  so => so

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),mistress,mistress,false), Span(28,29,List(1),master,master,false), Span(19,20,List(2),god,god,false), Span(18,19,List(3),household,household,false), Span(15,16,List(5, 4),member,(have-org-role-91 :ARG2 member),false), Span(14,15,List(6),every,every,false), Span(12,13,List(7),and,and,false), Span(11,12,List(8),so,so,false), Span(8,9,List(9),promising,promise-01,false), Span(6,7,List(10),it,it,false), Span(5,6,List(11),and,and,false), Span(2,3,List(12),could,possible,false), Span(1,2,List(13),it,it,false), Span(0,1,List(14),but,contrast-01,false)),Map(2 -> god, 5 -> member, 12 -> possible, 8 -> so, 7 -> and, 1 -> master, 4 -> have-org-role-91, 11 -> and, 14 -> contrast-01, 6 -> every, 0 -> mistress, 9 -> promise-01, 3 -> household, 10 -> it, 13 -> it),Map(m3 -> member, e -> every, h -> household, h2 -> have-org-role-91, m2 -> master, p2 -> possible, s -> so, m -> mistress, g -> god, p -> promise-01, a -> and, i2 -> it, i -> it, a2 -> and, c -> contrast-01))),[Ljava.lang.String;@260304b,Annotation([Ljava.lang.String;@79028d24,[Ljava.lang.String;@1680748d,[Ljava.lang.String;@4b63e085),Annotation([Ljava.lang.String;@a29626e,[Ljava.lang.String;@22fd28f8,[Ledu.cmu.lti.nlp.amr.Dependency;@1a8cc3ba),Annotation([Ljava.lang.String;@f85f5f4,[Ljava.lang.String;@23d66e22,[Ljava.lang.String;@52d88c8f),Annotation([Ljava.lang.String;@6f42ac7,[Ljava.lang.String;@8247262,[Ledu.cmu.lti.nlp.amr.Entity;@10d1841b))
AMR:
(a / and, op, h / household)
(a / and, op, s / so)
(a2 / and, op, p / promise-01)
(c / contrast-01, ARG0, m2 / master)
(c / contrast-01, ARG1, e / every)
(c / contrast-01, ARG2, p2 / possible)
(g / god, mod, h / household)
(h2 / have-org-role-91, ARG0, m / mistress)
(h2 / have-org-role-91, ARG1, g / god)
(h2 / have-org-role-91, ARG2, m3 / member)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, a / and)
(p / promise-01, ARG2, c / contrast-01)
(p2 / possible, domain, i2 / it)

Decoded in 216,969 microseconds
Sentence: he also promised that the police would investigate apparent contraventions of the law at the rally summoned in soweto on sunday to welcome back walter sisulu and the other veteran leaders

NER Entity: (person :name (name :op "walter" :op "sisulu"))
Spans:
Span 1-2:  also => also
Span 26-27:  and => and
Span 8-9:  apparent => apparent
Span 23-24:  back => back
Span 0-1:  he => he
Span 7-8:  investigate => investigate-01
Span 12-13:  law => law
Span 30-31:  leaders => (person :ARG0-of lead-02)
Span 28-29:  other => other
Span 5-6:  police => police
Span 2-3:  promised => promise-01
Span 15-16:  rally => rally-01
Span 16-17:  summoned => summon-01
Span 20-21:  sunday => sunday
Span 29-30:  veteran => veteran
Span 24-26:  walter sisulu => (person :name (name :op "walter" :op "sisulu"))
Span 22-23:  welcome => welcome-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(1, 0),leaders,(person :ARG0-of lead-02),false), Span(29,30,List(2),veteran,veteran,false), Span(28,29,List(3),other,other,false), Span(26,27,List(4),and,and,false), Span(24,26,List(8, 7, 6, 5),walter sisulu,(person :name (name :op "walter" :op "sisulu")),false), Span(23,24,List(9),back,back,false), Span(22,23,List(10),welcome,welcome-01,false), Span(20,21,List(11),sunday,sunday,false), Span(16,17,List(12),summoned,summon-01,false), Span(15,16,List(13),rally,rally-01,false), Span(12,13,List(14),law,law,false), Span(8,9,List(15),apparent,apparent,false), Span(7,8,List(16),investigate,investigate-01,false), Span(5,6,List(17),police,police,false), Span(2,3,List(18),promised,promise-01,false), Span(1,2,List(19),also,also,false), Span(0,1,List(20),he,he,false)),Map(2 -> veteran, 5 -> person, 12 -> summon-01, 15 -> apparent, 8 -> "sisulu", 18 -> promise-01, 7 -> "walter", 17 -> police, 1 -> lead-02, 4 -> and, 11 -> sunday, 14 -> law, 20 -> he, 6 -> name, 0 -> person, 9 -> back, 16 -> investigate-01, 19 -> also, 3 -> other, 10 -> welcome-01, 13 -> rally-01),Map(n -> name, w -> welcome-01, h -> he, s2 -> summon-01, b -> back, p2 -> person, a3 -> also, s -> sunday, v -> veteran, p -> person, a -> and, p4 -> promise-01, l2 -> law, i -> investigate-01, a2 -> apparent, r -> rally-01, l -> lead-02, o -> other, p3 -> police))),[Ljava.lang.String;@2b38113d,Annotation([Ljava.lang.String;@6df3d1f5,[Ljava.lang.String;@225d6438,[Ljava.lang.String;@215eaa28),Annotation([Ljava.lang.String;@4df53935,[Ljava.lang.String;@1e7eee8f,[Ledu.cmu.lti.nlp.amr.Dependency;@1f5ffded),Annotation([Ljava.lang.String;@5717e2b2,[Ljava.lang.String;@612440c9,[Ljava.lang.String;@13197df2),Annotation([Ljava.lang.String;@6e9ba4a9,[Ljava.lang.String;@2c578bfa,[Ledu.cmu.lti.nlp.amr.Entity;@27a6e0d4))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a2 / apparent, op, w / welcome-01)
(i / investigate-01, ARG0, p3 / police)
(i / investigate-01, ARG1, s / sunday)
(l / lead-02, ARG0, p / person)
(n / name, op, "sisulu")
(n / name, op, "walter")
(p / person, mod, o / other)
(p / person, mod, v / veteran)
(p2 / person, name, n / name)
(p4 / promise-01, ARG0, h / he)
(p4 / promise-01, ARG1, i / investigate-01)
(p4 / promise-01, mod, a3 / also)
(r / rally-01, ARG0, p3 / police)
(s2 / summon-01, ARG1, r / rally-01)
(s2 / summon-01, purpose, w / welcome-01)
(w / welcome-01, ARG1, p2 / person)
(w / welcome-01, direction, b / back)
(w / welcome-01, location, l2 / law)

Decoded in 359,153 microseconds
Sentence: the european commission promised to produce proposals for a legislative programme of social measures

Spans:
Span 2-3:  commission => commission
Span 1-2:  european => (continent :name (name :op "Europe"))
Span 9-10:  legislative => legislate-01
Span 13-14:  measures => measure
Span 5-6:  produce => produce-01
Span 10-11:  programme => program
Span 3-4:  promised => promise-01
Span 6-7:  proposals => (thing :ARG1-of propose-01)
Span 12-13:  social => society

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),measures,measure,false), Span(12,13,List(1),social,society,false), Span(10,11,List(2),programme,program,false), Span(9,10,List(3),legislative,legislate-01,false), Span(6,7,List(5, 4),proposals,(thing :ARG1-of propose-01),false), Span(5,6,List(6),produce,produce-01,false), Span(3,4,List(7),promised,promise-01,false), Span(2,3,List(8),commission,commission,false), Span(1,2,List(11, 10, 9),european,(continent :name (name :op "Europe")),false)),Map(2 -> program, 5 -> propose-01, 8 -> commission, 7 -> promise-01, 1 -> society, 11 -> "Europe", 4 -> thing, 6 -> produce-01, 9 -> continent, 0 -> measure, 10 -> name, 3 -> legislate-01),Map(n -> name, t -> thing, p2 -> propose-01, s -> society, m -> measure, p -> program, p4 -> promise-01, c -> commission, l -> legislate-01, c2 -> continent, p3 -> produce-01))),[Ljava.lang.String;@3cf292a2,Annotation([Ljava.lang.String;@5978e8f0,[Ljava.lang.String;@11051274,[Ljava.lang.String;@63fe8666),Annotation([Ljava.lang.String;@5b29c5d3,[Ljava.lang.String;@137ace67,[Ledu.cmu.lti.nlp.amr.Dependency;@6384d62e),Annotation([Ljava.lang.String;@2609990d,[Ljava.lang.String;@401f37fd,[Ljava.lang.String;@4194e3ee),Annotation([Ljava.lang.String;@16003fe5,[Ljava.lang.String;@6a62deab,[Ledu.cmu.lti.nlp.amr.Entity;@108e31e))
AMR:
(c / commission, mod, c2 / continent)
(c2 / continent, name, n / name)
(l / legislate-01, ARG0, p / program)
(m / measure, consist, p / program)
(m / measure, mod, s / society)
(n / name, op, "Europe")
(p2 / propose-01, ARG1, t / thing)
(p3 / produce-01, ARG1, t / thing)
(p3 / produce-01, ARG3, p / program)
(p4 / promise-01, ARG0, c / commission)
(p4 / promise-01, ARG1, p3 / produce-01)

Decoded in 42,104 microseconds
Sentence:   this years freshers have just finished being subjected to the rituals of formal college dinners matriculation wearing dinner party attire and clutching a flat hat while listening to an academic speak latin in an old building and bodleian library registration wearing a gown and looking a librarian solemnly in the face while promising not to damage his library

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   this years freshers have just finished being subjected to the rituals of formal college dinners matriculation wearing dinner party attire and clutching a flat hat while listening to an academic speak latin in an old building and bodleian library registration wearing a gown and looking a librarian solemnly in the face while promising not to damage his library
myTokenized = this years freshers have just finished being subjected to the rituals of formal college dinners matriculation wearing dinner party attire and clutching a flat hat while listening to an academic speak latin in an old building and bodleian library registration wearing a gown and looking a librarian solemnly in the face while promising not to damage his library
i = 0
prefix = List(this)
regexr = \Qt\E ?\Qh\E ?\Qi\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: fox had promised the job to the players union secretary in august as a plank in his own election platform only to be overruled by the committee who insisted that taylor should be interviewed along with the three other shortlisted candidates

Spans:
Span 34-35:  along => along
Span 11-12:  august => (date-entity :month 8)
Span 40-41:  candidates => candidate
Span 26-27:  committee => committee
Span 18-19:  election => elect-01
Span 28-29:  insisted => insist-01
Span 33-34:  interviewed => interview-01
Span 4-5:  job => job
Span 20-21:  only => only
Span 38-39:  other => other
Span 19-20:  platform => platform
Span 7-8:  players => (person :ARG0-of play-01)
Span 2-3:  promised => promise-01
Span 9-10:  secretary => secretary
Span 31-32:  should => recommend-01
Span 37-38:  three => 3
Span 8-9:  union => union

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),candidates,candidate,false), Span(38,39,List(1),other,other,false), Span(37,38,List(2),three,3,false), Span(34,35,List(3),along,along,false), Span(33,34,List(4),interviewed,interview-01,false), Span(31,32,List(5),should,recommend-01,false), Span(28,29,List(6),insisted,insist-01,false), Span(26,27,List(7),committee,committee,false), Span(20,21,List(8),only,only,false), Span(19,20,List(9),platform,platform,false), Span(18,19,List(10),election,elect-01,false), Span(11,12,List(12, 11),august,(date-entity :month 8),false), Span(9,10,List(13),secretary,secretary,false), Span(8,9,List(14),union,union,false), Span(7,8,List(16, 15),players,(person :ARG0-of play-01),false), Span(4,5,List(17),job,job,false), Span(2,3,List(18),promised,promise-01,false)),Map(2 -> 3, 5 -> recommend-01, 12 -> 8, 15 -> person, 8 -> only, 18 -> promise-01, 7 -> committee, 17 -> job, 1 -> other, 4 -> interview-01, 11 -> date-entity, 14 -> union, 6 -> insist-01, 0 -> candidate, 9 -> platform, 16 -> play-01, 3 -> along, 10 -> elect-01, 13 -> secretary),Map(e -> elect-01, 8 -> 8, p2 -> person, j -> job, s -> secretary, d -> date-entity, p -> platform, a -> along, p4 -> promise-01, o2 -> only, i2 -> insist-01, i -> interview-01, r -> recommend-01, c -> candidate, u -> union, o -> other, p3 -> play-01, 3 -> 3, c2 -> committee))),[Ljava.lang.String;@380972f7,Annotation([Ljava.lang.String;@745ad2de,[Ljava.lang.String;@76ca287f,[Ljava.lang.String;@5228e6c6),Annotation([Ljava.lang.String;@7b46fb4d,[Ljava.lang.String;@711cbb75,[Ledu.cmu.lti.nlp.amr.Dependency;@15573857),Annotation([Ljava.lang.String;@1133e2b3,[Ljava.lang.String;@65685e97,[Ljava.lang.String;@271a3f84),Annotation([Ljava.lang.String;@2c40072a,[Ljava.lang.String;@1f966d18,[Ledu.cmu.lti.nlp.amr.Entity;@4cd452db))
AMR:
(c / candidate, mod, o / other)
(c / candidate, quant, 3 / 3)
(d / date-entity, month, 8 / 8)
(e / elect-01, time, d / date-entity)
(i / interview-01, ARG1, p2 / person)
(i / interview-01, ARG2, a / along)
(i / interview-01, medium, c / candidate)
(i2 / insist-01, ARG0, c2 / committee)
(i2 / insist-01, ARG1, r / recommend-01)
(p / platform, mod, o2 / only)
(p / platform, topic, e / elect-01)
(p3 / play-01, ARG0, p2 / person)
(p4 / promise-01, ARG1, p2 / person)
(p4 / promise-01, ARG2, j / job)
(p4 / promise-01, time, d / date-entity)
(r / recommend-01, ARG1, i / interview-01)
(s / secretary, mod, d / date-entity)
(s / secretary, mod, u / union)

Decoded in 298,555 microseconds
Sentence: jim mcdonnell the camden town caretaker who was stopped by ghanas azumah nelson in the 12th and last round of a wbc superfeatherweight title challenge last month has been promised a meeting with the winner of februarys wba title fight between brian mitchell and jackie beard

Spans:
Span 43-44:  and => and
Span 16-17:  and => and
Span 40-41:  between => between
Span 24-25:  challenge => challenge-01
Span 39-40:  fight => fight-01
Span 25-26:  last => last
Span 17-18:  last => last
Span 31-32:  meeting => meet-03
Span 26-27:  month => (temporal-quantity :unit month)
Span 29-30:  promised => promise-01
Span 18-19:  round => round
Span 8-9:  stopped => stop-01
Span 38-39:  title => title
Span 23-24:  title => title
Span 4-5:  town => town

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),and,and,false), Span(40,41,List(1),between,between,false), Span(39,40,List(2),fight,fight-01,false), Span(38,39,List(3),title,title,false), Span(31,32,List(4),meeting,meet-03,false), Span(29,30,List(5),promised,promise-01,false), Span(26,27,List(7, 6),month,(temporal-quantity :unit month),false), Span(25,26,List(8),last,last,false), Span(24,25,List(9),challenge,challenge-01,false), Span(23,24,List(10),title,title,false), Span(18,19,List(11),round,round,false), Span(17,18,List(12),last,last,false), Span(16,17,List(13),and,and,false), Span(8,9,List(14),stopped,stop-01,false), Span(4,5,List(15),town,town,false)),Map(2 -> fight-01, 5 -> promise-01, 12 -> last, 15 -> town, 8 -> last, 7 -> month, 1 -> between, 4 -> meet-03, 11 -> round, 14 -> stop-01, 6 -> temporal-quantity, 0 -> and, 9 -> challenge-01, 3 -> title, 10 -> title, 13 -> and),Map(t4 -> town, b -> between, t -> title, m2 -> month, s -> stop-01, m -> meet-03, t3 -> title, p -> promise-01, a -> and, t2 -> temporal-quantity, l2 -> last, a2 -> and, r -> round, c -> challenge-01, l -> last, f -> fight-01))),[Ljava.lang.String;@6bd4bee1,Annotation([Ljava.lang.String;@5c3fdd15,[Ljava.lang.String;@64cbbd03,[Ljava.lang.String;@7be643a7),Annotation([Ljava.lang.String;@4a63c87d,[Ljava.lang.String;@5cffacb2,[Ledu.cmu.lti.nlp.amr.Dependency;@15a309d1),Annotation([Ljava.lang.String;@2d98370,[Ljava.lang.String;@16442f86,[Ljava.lang.String;@568c11d5),Annotation([Ljava.lang.String;@5e6e357,[Ljava.lang.String;@795767c7,[Ledu.cmu.lti.nlp.amr.Entity;@595e780d))
AMR:
(a / and, op, f / fight-01)
(a2 / and, op, c / challenge-01)
(a2 / and, op, l2 / last)
(a2 / and, op, p / promise-01)
(a2 / and, op, r / round)
(c / challenge-01, ARG1, t2 / temporal-quantity)
(c / challenge-01, mod, t3 / title)
(f / fight-01, ARG0, t / title)
(f / fight-01, ARG1, b / between)
(m / meet-03, ARG0, a / and)
(m2 / month, mod, l / last)
(p / promise-01, ARG1, m / meet-03)
(s / stop-01, ARG0, t4 / town)
(s / stop-01, ARG1, m / meet-03)
(t2 / temporal-quantity, unit, m2 / month)

Decoded in 337,096 microseconds
Sentence: she felt ashamed of her erratic behaviour and promised amendment

Spans:
Span 9-10:  amendment => amend-01
Span 7-8:  and => and
Span 6-7:  behaviour => behave-01
Span 5-6:  erratic => erratic
Span 1-2:  felt => feel-01
Span 8-9:  promised => promise-01
Span 0-1:  she => she

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),amendment,amend-01,false), Span(8,9,List(1),promised,promise-01,false), Span(7,8,List(2),and,and,false), Span(6,7,List(3),behaviour,behave-01,false), Span(5,6,List(4),erratic,erratic,false), Span(1,2,List(5),felt,feel-01,false), Span(0,1,List(6),she,she,false)),Map(2 -> and, 5 -> feel-01, 1 -> promise-01, 4 -> erratic, 6 -> she, 0 -> amend-01, 3 -> behave-01),Map(e -> erratic, b -> behave-01, s -> she, p -> promise-01, a -> amend-01, a2 -> and, f -> feel-01))),[Ljava.lang.String;@491bcb51,Annotation([Ljava.lang.String;@3fc15856,[Ljava.lang.String;@2e8e96cd,[Ljava.lang.String;@134e849c),Annotation([Ljava.lang.String;@7e427ab,[Ljava.lang.String;@13e84f99,[Ledu.cmu.lti.nlp.amr.Dependency;@78c1d004),Annotation([Ljava.lang.String;@7c3ff48b,[Ljava.lang.String;@4ad01167,[Ljava.lang.String;@2226a790),Annotation([Ljava.lang.String;@17c2f074,[Ljava.lang.String;@7f385bdb,[Ledu.cmu.lti.nlp.amr.Entity;@4d16c81d))
AMR:
(a2 / and, op, a / amend-01)
(a2 / and, op, b / behave-01)
(b / behave-01, ARG1, e / erratic)
(f / feel-01, ARG0, s / she)
(f / feel-01, time, b / behave-01)
(p / promise-01, ARG2, a / amend-01)

Decoded in 18,418 microseconds
Sentence: after a rumpus in 1982 about mrs reagans habit of borrowing dollars 20000  12500 dresses from leading designers the first lady promised to accept no more loans

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = after a rumpus in 1982 about mrs reagans habit of borrowing dollars 20000  12500 dresses from leading designers the first lady promised to accept no more loans
myTokenized = after a rumpus in 1982 about mrs reagans habit of borrowing dollars 20000 12500 dresses from leading designers the first lady promised to accept no more loans
i = 13
prefix = List(after, a, rumpus, in, 1982, about, mrs, reagans, habit, of, borrowing, dollars, 20000, 12500)
regexr = \Qa\E ?\Qf\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Qr\E ?\Qu\E ?\Qm\E ?\Qp\E ?\Qu\E ?\Qs\E ?\Qi\E ?\Qn\E ?\Q1\E ?\Q9\E ?\Q8\E ?\Q2\E ?\Qa\E ?\Qb\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qm\E ?\Qr\E ?\Qs\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qg\E ?\Qa\E ?\Qn\E ?\Qs\E ?\Qh\E ?\Qa\E ?\Qb\E ?\Qi\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qb\E ?\Qo\E ?\Qr\E ?\Qr\E ?\Qo\E ?\Qw\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qd\E ?\Qo\E ?\Ql\E ?\Ql\E ?\Qa\E ?\Qr\E ?\Qs\E ?\Q2\E ?\Q0\E ?\Q0\E ?\Q0\E ?\Q0\E ?\Q1\E ?\Q2\E ?\Q5\E ?\Q0\E ?\Q0\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the labour leader also promised to abolish the poll tax within a year and said labour was close to announcing its own solutions but that it would wait to see the governments own efforts at reforming a system which was only two months old

Spans:
Span 6-7:  abolish => abolish-01
Span 3-4:  also => also
Span 13-14:  and => and
Span 19-20:  announcing => announce-01
Span 23-24:  but => contrast-01
Span 33-34:  efforts => effort
Span 31-32:  governments => (government-organization :ARG0-of govern-01)
Span 25-26:  it => it
Span 15-16:  labour => labour
Span 1-2:  labour => labour
Span 2-3:  leader => (person :ARG0-of lead-02)
Span 42-43:  months => (temporal-quantity :unit month)
Span 43-44:  old => old
Span 40-41:  only => only
Span 8-9:  poll => poll-01
Span 4-5:  promised => promise-01
Span 35-36:  reforming => reform-01
Span 14-15:  said => say-01
Span 29-30:  see => see-01
Span 22-23:  solutions => solution
Span 37-38:  system => system
Span 9-10:  tax => tax-01
Span 41-42:  two => 2
Span 27-28:  wait => wait-01
Span 10-11:  within => within
Span 12-13:  year => year

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),old,old,false), Span(42,43,List(2, 1),months,(temporal-quantity :unit month),false), Span(41,42,List(3),two,2,false), Span(40,41,List(4),only,only,false), Span(37,38,List(5),system,system,false), Span(35,36,List(6),reforming,reform-01,false), Span(33,34,List(7),efforts,effort,false), Span(31,32,List(9, 8),governments,(government-organization :ARG0-of govern-01),false), Span(29,30,List(10),see,see-01,false), Span(27,28,List(11),wait,wait-01,false), Span(25,26,List(12),it,it,false), Span(23,24,List(13),but,contrast-01,false), Span(22,23,List(14),solutions,solution,false), Span(19,20,List(15),announcing,announce-01,false), Span(15,16,List(16),labour,labour,false), Span(14,15,List(17),said,say-01,false), Span(13,14,List(18),and,and,false), Span(12,13,List(19),year,year,false), Span(10,11,List(20),within,within,false), Span(9,10,List(21),tax,tax-01,false), Span(8,9,List(22),poll,poll-01,false), Span(6,7,List(23),abolish,abolish-01,false), Span(4,5,List(24),promised,promise-01,false), Span(3,4,List(25),also,also,false), Span(2,3,List(27, 26),leader,(person :ARG0-of lead-02),false), Span(1,2,List(28),labour,labour,false)),Map(2 -> month, 5 -> system, 27 -> lead-02, 12 -> it, 8 -> government-organization, 15 -> announce-01, 21 -> tax-01, 18 -> and, 24 -> promise-01, 7 -> effort, 1 -> temporal-quantity, 17 -> say-01, 23 -> abolish-01, 26 -> person, 4 -> only, 11 -> wait-01, 14 -> solution, 20 -> within, 28 -> labour, 6 -> reform-01, 9 -> govern-01, 0 -> old, 22 -> poll-01, 16 -> labour, 19 -> year, 10 -> see-01, 3 -> 2, 25 -> also, 13 -> contrast-01),Map(e -> effort, w -> wait-01, 2 -> 2, s2 -> see-01, t -> temporal-quantity, p2 -> promise-01, l3 -> labour, a3 -> abolish-01, s -> system, s4 -> say-01, m -> month, g2 -> govern-01, y -> year, g -> government-organization, p -> poll-01, a -> announce-01, o2 -> only, t2 -> tax-01, l2 -> lead-02, w2 -> within, i -> it, r -> reform-01, a2 -> and, c -> contrast-01, s3 -> solution, l -> labour, o -> old, p3 -> person, a4 -> also))),[Ljava.lang.String;@5e2ad3e6,Annotation([Ljava.lang.String;@4dbdd156,[Ljava.lang.String;@68fa8cf9,[Ljava.lang.String;@193d6547),Annotation([Ljava.lang.String;@dc42543,[Ljava.lang.String;@486a58c4,[Ledu.cmu.lti.nlp.amr.Dependency;@3de9d100),Annotation([Ljava.lang.String;@419876c1,[Ljava.lang.String;@9c9a8c,[Ljava.lang.String;@29665da4),Annotation([Ljava.lang.String;@7f8dcf37,[Ljava.lang.String;@371f654d,[Ledu.cmu.lti.nlp.amr.Entity;@6e33be80))
AMR:
(a / announce-01, ARG1, s3 / solution)
(a2 / and, op, s4 / say-01)
(a3 / abolish-01, ARG1, t2 / tax-01)
(a3 / abolish-01, time, w2 / within)
(c / contrast-01, ARG1, s3 / solution)
(c / contrast-01, ARG2, w / wait-01)
(e / effort, purpose, r / reform-01)
(g2 / govern-01, ARG0, g / government-organization)
(l2 / lead-02, ARG0, p3 / person)
(l2 / lead-02, ARG1, l3 / labour)
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, ARG2, a3 / abolish-01)
(p2 / promise-01, mod, a4 / also)
(r / reform-01, ARG0, g / government-organization)
(r / reform-01, ARG1, s / system)
(s / system, age, t / temporal-quantity)
(s / system, mod, o / old)
(s2 / see-01, ARG0, i / it)
(s2 / see-01, ARG1, g / government-organization)
(s4 / say-01, ARG0, p3 / person)
(s4 / say-01, ARG1, c / contrast-01)
(t / temporal-quantity, mod, o2 / only)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, m / month)
(t2 / tax-01, ARG1, p / poll-01)
(w / wait-01, ARG0, l / labour)
(w / wait-01, ARG2, s2 / see-01)
(w2 / within, op, y / year)

Decoded in 570,219 microseconds
Sentence: he promised to maintain the us commitment to europe as a strategic fact of the next century as it has been of this one

Spans:
Span 6-7:  commitment => commit-01
Span 8-9:  europe => (continent :name (name :op "Europe"))
Span 12-13:  fact => fact
Span 0-1:  he => he
Span 18-19:  it => it
Span 3-4:  maintain => maintain-01
Span 15-16:  next => next
Span 1-2:  promised => promise-01
Span 11-12:  strategic => strategy
Span 22-23:  this => this

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),this,this,false), Span(18,19,List(1),it,it,false), Span(15,16,List(2),next,next,false), Span(12,13,List(3),fact,fact,false), Span(11,12,List(4),strategic,strategy,false), Span(8,9,List(7, 6, 5),europe,(continent :name (name :op "Europe")),false), Span(6,7,List(8),commitment,commit-01,false), Span(3,4,List(9),maintain,maintain-01,false), Span(1,2,List(10),promised,promise-01,false), Span(0,1,List(11),he,he,false)),Map(2 -> next, 5 -> continent, 8 -> commit-01, 7 -> "Europe", 1 -> it, 11 -> he, 4 -> strategy, 6 -> name, 9 -> maintain-01, 0 -> this, 10 -> promise-01, 3 -> fact),Map(n -> next, h -> he, t -> this, s -> strategy, m -> maintain-01, p -> promise-01, i -> it, c -> continent, f -> fact, c2 -> commit-01, n2 -> name))),[Ljava.lang.String;@2e9f6c2b,Annotation([Ljava.lang.String;@647692f6,[Ljava.lang.String;@24aa8801,[Ljava.lang.String;@37c70c75),Annotation([Ljava.lang.String;@6d02f1ee,[Ljava.lang.String;@5c59782b,[Ledu.cmu.lti.nlp.amr.Dependency;@75e07e6a),Annotation([Ljava.lang.String;@658b9d9b,[Ljava.lang.String;@31185f32,[Ljava.lang.String;@3711e4cc),Annotation([Ljava.lang.String;@77c42952,[Ljava.lang.String;@6f7503eb,[Ledu.cmu.lti.nlp.amr.Entity;@6b547277))
AMR:
(c / continent, name, n2 / name)
(c / continent, prep-in, f / fact)
(c2 / commit-01, ARG0, i / it)
(c2 / commit-01, ARG1, c / continent)
(f / fact, mod, s / strategy)
(m / maintain-01, ARG0, h / he)
(m / maintain-01, ARG1, c2 / commit-01)
(n2 / name, op, "Europe")
(p / promise-01, ARG0, n / next)
(p / promise-01, ARG1, t / this)
(p / promise-01, ARG2, m / maintain-01)

Decoded in 130,819 microseconds
Sentence: the person has promised they will get in before the end of the week

Spans:
Span 8-9:  before => before
Span 1-2:  person => person
Span 3-4:  promised => promise-01
Span 4-5:  they => they
Span 13-14:  week => week

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),week,week,false), Span(8,9,List(1),before,before,false), Span(4,5,List(2),they,they,false), Span(3,4,List(3),promised,promise-01,false), Span(1,2,List(4),person,person,false)),Map(2 -> they, 1 -> before, 4 -> person, 0 -> week, 3 -> promise-01),Map(w -> week, t -> they, b -> before, p2 -> person, p -> promise-01))),[Ljava.lang.String;@752719ad,Annotation([Ljava.lang.String;@5a06e8f1,[Ljava.lang.String;@7ba75463,[Ljava.lang.String;@26956f01),Annotation([Ljava.lang.String;@1caabe71,[Ljava.lang.String;@dbcfb6b,[Ledu.cmu.lti.nlp.amr.Dependency;@721e34d8),Annotation([Ljava.lang.String;@1d1f8b70,[Ljava.lang.String;@1fb7500,[Ljava.lang.String;@23be5404),Annotation([Ljava.lang.String;@247de4f1,[Ljava.lang.String;@45419cee,[Ledu.cmu.lti.nlp.amr.Entity;@56a5f0c7))
AMR:
(p / promise-01, ARG1, p2 / person)
(p / promise-01, ARG2, t / they)
(p / promise-01, time, b / before)
(w / week, op, p / promise-01)

Decoded in 54,680 microseconds
Sentence: ron atkinson the sheffield wednesday manager yesterday promised the shareholders agm that the team will not be relegated and will climb from the bottom of the first division by christmas

NER Entity: (person :name (name :op "ron" :op "atkinson"))
Spans:
Span 18-19:  and => and
Span 23-24:  bottom => bottom
Span 27-28:  division => division
Span 5-6:  manager => manage-01
Span 7-8:  promised => promise-01
Span 0-2:  ron atkinson => (person :name (name :op "ron" :op "atkinson"))
Span 13-14:  team => team
Span 6-7:  yesterday => yesterday

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),division,division,false), Span(23,24,List(1),bottom,bottom,false), Span(18,19,List(2),and,and,false), Span(13,14,List(3),team,team,false), Span(7,8,List(4),promised,promise-01,false), Span(6,7,List(5),yesterday,yesterday,false), Span(5,6,List(6),manager,manage-01,false), Span(0,2,List(10, 9, 8, 7),ron atkinson,(person :name (name :op "ron" :op "atkinson")),false)),Map(2 -> and, 5 -> yesterday, 8 -> name, 7 -> person, 1 -> bottom, 4 -> promise-01, 6 -> manage-01, 9 -> "ron", 0 -> division, 10 -> "atkinson", 3 -> team),Map(n -> name, t -> team, b -> bottom, p2 -> person, m -> manage-01, d -> division, y -> yesterday, p -> promise-01, a -> and))),[Ljava.lang.String;@2862c542,Annotation([Ljava.lang.String;@6c8484c4,[Ljava.lang.String;@70289784,[Ljava.lang.String;@78f394a2),Annotation([Ljava.lang.String;@3fa355b7,[Ljava.lang.String;@7c508204,[Ledu.cmu.lti.nlp.amr.Dependency;@988145f),Annotation([Ljava.lang.String;@44f16ddc,[Ljava.lang.String;@4663a9e0,[Ljava.lang.String;@3925d53a),Annotation([Ljava.lang.String;@62d1f025,[Ljava.lang.String;@44ed3fd2,[Ledu.cmu.lti.nlp.amr.Entity;@33f91758))
AMR:
(a / and, op, p / promise-01)
(a / and, op, p2 / person)
(b / bottom, poss, d / division)
(m / manage-01, ARG1, d / division)
(n / name, op, "atkinson")
(n / name, op, "ron")
(p / promise-01, ARG0, t / team)
(p / promise-01, ARG1, m / manage-01)
(p / promise-01, time, y / yesterday)
(p2 / person, name, n / name)

Decoded in 94,359 microseconds
Sentence: the communist party has already said it will renounce its leading role and has promised free elections

Spans:
Span 4-5:  already => already
Span 12-13:  and => and
Span 1-3:  communist party => (political-party :name (name :op "Party" :op "Communist"))
Span 16-17:  elections => elect-01
Span 15-16:  free => free-41
Span 6-7:  it => it
Span 10-11:  leading => lead-01
Span 14-15:  promised => promise-01
Span 8-9:  renounce => renounce-01
Span 11-12:  role => role
Span 5-6:  said => say-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),elections,elect-01,false), Span(15,16,List(1),free,free-41,false), Span(14,15,List(2),promised,promise-01,false), Span(12,13,List(3),and,and,false), Span(11,12,List(4),role,role,false), Span(10,11,List(5),leading,lead-01,false), Span(8,9,List(6),renounce,renounce-01,false), Span(6,7,List(7),it,it,false), Span(5,6,List(8),said,say-01,false), Span(4,5,List(9),already,already,false), Span(1,3,List(13, 12, 11, 10),communist party,(political-party :name (name :op "Party" :op "Communist")),false)),Map(2 -> promise-01, 5 -> lead-01, 12 -> "Party", 8 -> say-01, 7 -> it, 1 -> free-41, 4 -> role, 11 -> name, 6 -> renounce-01, 0 -> elect-01, 9 -> already, 3 -> and, 10 -> political-party, 13 -> "Communist"),Map(n -> name, e -> elect-01, p2 -> political-party, s -> say-01, r2 -> renounce-01, p -> promise-01, a -> and, a2 -> already, i -> it, r -> role, l -> lead-01, f -> free-41))),[Ljava.lang.String;@266bad10,Annotation([Ljava.lang.String;@672f0924,[Ljava.lang.String;@41014f68,[Ljava.lang.String;@3d04562f),Annotation([Ljava.lang.String;@67b646f4,[Ljava.lang.String;@6fec725d,[Ledu.cmu.lti.nlp.amr.Dependency;@c487113),Annotation([Ljava.lang.String;@67f79cb1,[Ljava.lang.String;@31505dca,[Ljava.lang.String;@133d9211),Annotation([Ljava.lang.String;@2f40a3f5,[Ljava.lang.String;@3ccc420f,[Ledu.cmu.lti.nlp.amr.Entity;@60505f8))
AMR:
(a / and, op, p / promise-01)
(f / free-41, ARG1, e / elect-01)
(l / lead-01, ARG0, r / role)
(n / name, op, "Communist")
(n / name, op, "Party")
(p / promise-01, ARG0, p2 / political-party)
(p / promise-01, ARG2, e / elect-01)
(p2 / political-party, name, n / name)
(r2 / renounce-01, ARG0, i / it)
(r2 / renounce-01, ARG1, r / role)
(s / say-01, ARG0, p2 / political-party)
(s / say-01, ARG1, r2 / renounce-01)
(s / say-01, time, a2 / already)

Decoded in 67,920 microseconds
Sentence:  laughing rain shooed holly into the kitchen promising to tell as much as she could about alf wilson but only if they could eat while she did so holly refreshed freds bowl of water and made a fuss of him while rain cooked

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  laughing rain shooed holly into the kitchen promising to tell as much as she could about alf wilson but only if they could eat while she did so holly refreshed freds bowl of water and made a fuss of him while rain cooked
myTokenized = laughing rain shooed holly into the kitchen promising to tell as much as she could about alf wilson but only if they could eat while she did so holly refreshed freds bowl of water and made a fuss of him while rain cooked
i = 0
prefix = List(laughing)
regexr = \Ql\E ?\Qa\E ?\Qu\E ?\Qg\E ?\Qh\E ?\Qi\E ?\Qn\E ?\Qg\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: she stood there encased in the sort of external beauty which promises an adventurous even raunchy soul beneath

Spans:
Span 9-10:  beauty => beauty
Span 17-18:  beneath => beneath
Span 8-9:  external => external
Span 11-12:  promises => promise-01
Span 0-1:  she => she
Span 6-7:  sort => sort
Span 16-17:  soul => soul
Span 1-2:  stood => stand-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),beneath,beneath,false), Span(16,17,List(1),soul,soul,false), Span(11,12,List(2),promises,promise-01,false), Span(9,10,List(3),beauty,beauty,false), Span(8,9,List(4),external,external,false), Span(6,7,List(5),sort,sort,false), Span(1,2,List(6),stood,stand-01,false), Span(0,1,List(7),she,she,false)),Map(2 -> promise-01, 5 -> sort, 7 -> she, 1 -> soul, 4 -> external, 6 -> stand-01, 0 -> beneath, 3 -> beauty),Map(e -> external, s2 -> sort, b -> beneath, b2 -> beauty, s -> soul, s4 -> she, p -> promise-01, s3 -> stand-01))),[Ljava.lang.String;@4c2f8262,Annotation([Ljava.lang.String;@43191701,[Ljava.lang.String;@24356511,[Ljava.lang.String;@2d7e51a9),Annotation([Ljava.lang.String;@40234594,[Ljava.lang.String;@4bad1871,[Ledu.cmu.lti.nlp.amr.Dependency;@511fc987),Annotation([Ljava.lang.String;@7de7e7ac,[Ljava.lang.String;@41b0dc8,[Ljava.lang.String;@c25c793),Annotation([Ljava.lang.String;@4518a20,[Ljava.lang.String;@5433d17,[Ledu.cmu.lti.nlp.amr.Entity;@15fb3b4))
AMR:
(b2 / beauty, mod, e / external)
(b2 / beauty, mod, s2 / sort)
(p / promise-01, ARG0, s2 / sort)
(p / promise-01, ARG1, s / soul)
(s / soul, location, b / beneath)
(s3 / stand-01, ARG0, s4 / she)
(s3 / stand-01, ARG1, p / promise-01)

Decoded in 60,562 microseconds
Sentence: in creative terms arsenal promised more than was delivered rocastle often stirring the crowd with technical wizardry only to let them down with an aimless pass but i still thought grahams verdict a shade harsh and indeed misguided when he added we never seem to do our best after international matches

Spans:
Span 40-41:  added => add-01
Span 48-49:  after => after
Span 35-36:  and => and
Span 3-4:  arsenal => arsenal
Span 26-27:  but => contrast-01
Span 13-14:  crowd => crowd
Span 8-9:  delivered => deliver-01
Span 21-22:  down => down
Span 34-35:  harsh => harsh
Span 39-40:  he => he
Span 27-28:  i => i
Span 36-37:  indeed => indeed
Span 49-50:  international => international
Span 19-20:  let => let-01
Span 50-51:  matches => match
Span 37-38:  misguided => misguide-01
Span 10-11:  often => often
Span 17-18:  only => only
Span 4-5:  promised => promise-01
Span 43-44:  seem => seem-01
Span 33-34:  shade => shade
Span 28-29:  still => still
Span 11-12:  stirring => stir-04
Span 15-16:  technical => technical
Span 2-3:  terms => term
Span 29-30:  thought => think-01
Span 31-32:  verdict => verdict
Span 41-42:  we => we

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),matches,match,false), Span(49,50,List(1),international,international,false), Span(48,49,List(2),after,after,false), Span(43,44,List(3),seem,seem-01,false), Span(41,42,List(4),we,we,false), Span(40,41,List(5),added,add-01,false), Span(39,40,List(6),he,he,false), Span(37,38,List(7),misguided,misguide-01,false), Span(36,37,List(8),indeed,indeed,false), Span(35,36,List(9),and,and,false), Span(34,35,List(10),harsh,harsh,false), Span(33,34,List(11),shade,shade,false), Span(31,32,List(12),verdict,verdict,false), Span(29,30,List(13),thought,think-01,false), Span(28,29,List(14),still,still,false), Span(27,28,List(15),i,i,false), Span(26,27,List(16),but,contrast-01,false), Span(21,22,List(17),down,down,false), Span(19,20,List(18),let,let-01,false), Span(17,18,List(19),only,only,false), Span(15,16,List(20),technical,technical,false), Span(13,14,List(21),crowd,crowd,false), Span(11,12,List(22),stirring,stir-04,false), Span(10,11,List(23),often,often,false), Span(8,9,List(24),delivered,deliver-01,false), Span(4,5,List(25),promised,promise-01,false), Span(3,4,List(26),arsenal,arsenal,false), Span(2,3,List(27),terms,term,false)),Map(2 -> after, 5 -> add-01, 27 -> term, 12 -> verdict, 8 -> indeed, 15 -> i, 21 -> crowd, 18 -> let-01, 24 -> deliver-01, 7 -> misguide-01, 1 -> international, 17 -> down, 23 -> often, 26 -> arsenal, 4 -> we, 11 -> shade, 14 -> still, 20 -> technical, 6 -> he, 9 -> and, 0 -> match, 22 -> stir-04, 16 -> contrast-01, 19 -> only, 10 -> harsh, 3 -> seem-01, 25 -> promise-01, 13 -> think-01),Map(w -> we, h -> he, s2 -> shade, h2 -> harsh, t -> think-01, m2 -> misguide-01, a3 -> and, s -> seem-01, s4 -> stir-04, v -> verdict, m -> match, d -> down, t3 -> term, i3 -> i, p -> promise-01, a -> after, o2 -> often, d2 -> deliver-01, i2 -> indeed, t2 -> technical, a2 -> add-01, i -> international, c -> contrast-01, s3 -> still, l -> let-01, o -> only, c2 -> crowd, a4 -> arsenal))),[Ljava.lang.String;@6d920308,Annotation([Ljava.lang.String;@d053a6b,[Ljava.lang.String;@523e4d7a,[Ljava.lang.String;@7850aec4),Annotation([Ljava.lang.String;@79020391,[Ljava.lang.String;@733862a7,[Ledu.cmu.lti.nlp.amr.Dependency;@7ad4fd09),Annotation([Ljava.lang.String;@353098df,[Ljava.lang.String;@98473c1,[Ljava.lang.String;@56cb88c8),Annotation([Ljava.lang.String;@4c812efc,[Ljava.lang.String;@3533c9a1,[Ledu.cmu.lti.nlp.amr.Entity;@5afa8450))
AMR:
(a / after, op, m / match)
(a2 / add-01, ARG0, h / he)
(a2 / add-01, ARG1, s / seem-01)
(a3 / and, op, m2 / misguide-01)
(c / contrast-01, ARG1, i3 / i)
(d2 / deliver-01, ARG0, a4 / arsenal)
(d2 / deliver-01, ARG1, a3 / and)
(h2 / harsh, domain, s2 / shade)
(l / let-01, ARG0, i3 / i)
(l / let-01, ARG1, d / down)
(l / let-01, mod, o / only)
(m / match, mod, i / international)
(m2 / misguide-01, ARG0, t2 / technical)
(m2 / misguide-01, ARG1, h2 / harsh)
(m2 / misguide-01, mod, i2 / indeed)
(m2 / misguide-01, time, a2 / add-01)
(p / promise-01, ARG1, a4 / arsenal)
(s / seem-01, ARG1, w / we)
(s / seem-01, time, a / after)
(s4 / stir-04, ARG1, c2 / crowd)
(s4 / stir-04, ARG2, d2 / deliver-01)
(s4 / stir-04, frequency, o2 / often)
(s4 / stir-04, purpose, l / let-01)
(t / think-01, ARG0, i3 / i)
(t / think-01, ARG1, v / verdict)
(t / think-01, mod, s3 / still)
(t3 / term, consist, a4 / arsenal)

Decoded in 1,998,264 microseconds
Sentence: the british government has promised tighter vetting of recruits to the udr

NER Entity: (thing :name (name :op "british"))
Spans:
Span 4-5:  promised => promise-01
Span 8-9:  recruits => (person :ARG1-of recruit-01)
Span 5-6:  tighter => tight

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(1, 0),recruits,(person :ARG1-of recruit-01),false), Span(5,6,List(2),tighter,tight,false), Span(4,5,List(3),promised,promise-01,false)),Map(2 -> tight, 1 -> recruit-01, 0 -> person, 3 -> promise-01),Map(t -> tight, p2 -> promise-01, p -> person, r -> recruit-01))),[Ljava.lang.String;@7504ced9,Annotation([Ljava.lang.String;@ea84494,[Ljava.lang.String;@492e5810,[Ljava.lang.String;@197a7f9),Annotation([Ljava.lang.String;@b94cd40,[Ljava.lang.String;@562f2ab0,[Ledu.cmu.lti.nlp.amr.Dependency;@329bb504),Annotation([Ljava.lang.String;@c893391,[Ljava.lang.String;@3987b05,[Ljava.lang.String;@fb4871b),Annotation([Ljava.lang.String;@151205ab,[Ljava.lang.String;@5232285b,[Ledu.cmu.lti.nlp.amr.Entity;@5af79885))
AMR:
(p2 / promise-01, ARG1, p / person)
(r / recruit-01, ARG0, t / tight)
(r / recruit-01, ARG1, p / person)

Decoded in 12,390 microseconds
Sentence: on 6 october sea containers promised that by the end of the month it would make public a recommended alternative to the hostile tender offer by temple holdings which would involve significant asset sales

Spans:
Span 1-2:  6 => 6
Span 19-20:  alternative => alternative
Span 32-33:  asset => asset
Span 4-5:  containers => container
Span 27-28:  holdings => hold-01
Span 22-23:  hostile => hostile
Span 30-31:  involve => involve-01
Span 13-14:  it => it
Span 12-13:  month => (temporal-quantity :unit month)
Span 2-3:  october => (date-entity :month 10)
Span 24-25:  offer => offer-01
Span 5-6:  promised => promise-01
Span 16-17:  public => public
Span 18-19:  recommended => recommend-01
Span 3-4:  sea => sea
Span 31-32:  significant => significant
Span 26-27:  temple => temple
Span 23-24:  tender => tender

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),asset,asset,false), Span(31,32,List(1),significant,significant,false), Span(30,31,List(2),involve,involve-01,false), Span(27,28,List(3),holdings,hold-01,false), Span(26,27,List(4),temple,temple,false), Span(24,25,List(5),offer,offer-01,false), Span(23,24,List(6),tender,tender,false), Span(22,23,List(7),hostile,hostile,false), Span(19,20,List(8),alternative,alternative,false), Span(18,19,List(9),recommended,recommend-01,false), Span(16,17,List(10),public,public,false), Span(13,14,List(11),it,it,false), Span(12,13,List(13, 12),month,(temporal-quantity :unit month),false), Span(5,6,List(14),promised,promise-01,false), Span(4,5,List(15),containers,container,false), Span(3,4,List(16),sea,sea,false), Span(2,3,List(18, 17),october,(date-entity :month 10),false), Span(1,2,List(19),6,6,false)),Map(2 -> involve-01, 5 -> offer-01, 12 -> temporal-quantity, 15 -> container, 8 -> alternative, 18 -> 10, 7 -> hostile, 17 -> date-entity, 1 -> significant, 4 -> temple, 11 -> it, 14 -> promise-01, 6 -> tender, 0 -> asset, 9 -> recommend-01, 16 -> sea, 19 -> 6, 3 -> hold-01, 10 -> public, 13 -> month),Map(h -> hold-01, s2 -> sea, h2 -> hostile, t -> temple, p2 -> promise-01, s -> significant, d -> date-entity, m -> month, 1 -> 10, t3 -> temporal-quantity, p -> public, a -> asset, t2 -> tender, i2 -> it, i -> involve-01, a2 -> alternative, r -> recommend-01, 6 -> 6, c -> container, o -> offer-01))),[Ljava.lang.String;@2228dff4,Annotation([Ljava.lang.String;@29871db1,[Ljava.lang.String;@65ae64c3,[Ljava.lang.String;@1c59725c),Annotation([Ljava.lang.String;@3463048e,[Ljava.lang.String;@50c02180,[Ledu.cmu.lti.nlp.amr.Dependency;@75d783ea),Annotation([Ljava.lang.String;@1815b417,[Ljava.lang.String;@38e25e5b,[Ljava.lang.String;@15a0c58a),Annotation([Ljava.lang.String;@6e08f21d,[Ljava.lang.String;@d4f865b,[Ledu.cmu.lti.nlp.amr.Entity;@5ffdc730))
AMR:
(c / container, mod, s2 / sea)
(d / date-entity, month, 1 / 10)
(h / hold-01, ARG1, t / temple)
(i / involve-01, ARG0, o / offer-01)
(i / involve-01, ARG1, a / asset)
(i / involve-01, ARG2, i2 / it)
(o / offer-01, ARG0, t2 / tender)
(o / offer-01, ARG2, h / hold-01)
(o / offer-01, mod, h2 / hostile)
(o / offer-01, time, d / date-entity)
(p2 / promise-01, ARG0, a2 / alternative)
(p2 / promise-01, ARG1, p / public)
(p2 / promise-01, manner, c / container)
(r / recommend-01, ARG0, 6 / 6)
(r / recommend-01, ARG1, a2 / alternative)
(r / recommend-01, ARG2, h2 / hostile)
(s / significant, op, h / hold-01)
(t3 / temporal-quantity, op, h / hold-01)
(t3 / temporal-quantity, unit, m / month)

Decoded in 453,036 microseconds
Sentence: he also promised to give magistrates the same immunity from civil actions arising from court cases that judges enjoy

Spans:
Span 11-12:  actions => action
Span 1-2:  also => also
Span 15-16:  cases => case
Span 10-11:  civil => civil
Span 14-15:  court => court
Span 18-19:  enjoy => enjoy-01
Span 4-5:  give => give-01
Span 0-1:  he => he
Span 8-9:  immunity => immunity
Span 17-18:  judges => judge-01
Span 2-3:  promised => promise-01
Span 7-8:  same => same-41

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),enjoy,enjoy-01,false), Span(17,18,List(1),judges,judge-01,false), Span(15,16,List(2),cases,case,false), Span(14,15,List(3),court,court,false), Span(11,12,List(4),actions,action,false), Span(10,11,List(5),civil,civil,false), Span(8,9,List(6),immunity,immunity,false), Span(7,8,List(7),same,same-41,false), Span(4,5,List(8),give,give-01,false), Span(2,3,List(9),promised,promise-01,false), Span(1,2,List(10),also,also,false), Span(0,1,List(11),he,he,false)),Map(2 -> case, 5 -> civil, 8 -> give-01, 7 -> same-41, 1 -> judge-01, 11 -> he, 4 -> action, 6 -> immunity, 9 -> promise-01, 0 -> enjoy-01, 10 -> also, 3 -> court),Map(e -> enjoy-01, h -> he, s -> same-41, j -> judge-01, p -> promise-01, g -> give-01, c3 -> civil, a -> action, a2 -> also, i -> immunity, c -> case, c2 -> court))),[Ljava.lang.String;@e20518c,Annotation([Ljava.lang.String;@6bc9c592,[Ljava.lang.String;@bca2b87,[Ljava.lang.String;@5efb21d),Annotation([Ljava.lang.String;@3b9690f6,[Ljava.lang.String;@1a07250a,[Ledu.cmu.lti.nlp.amr.Dependency;@4b10c0df),Annotation([Ljava.lang.String;@38e696f9,[Ljava.lang.String;@2ac1d29e,[Ljava.lang.String;@1aea9900),Annotation([Ljava.lang.String;@1fe2dcce,[Ljava.lang.String;@670e68bc,[Ledu.cmu.lti.nlp.amr.Entity;@62fe437f))
AMR:
(a / action, mod, c3 / civil)
(c / case, mod, c2 / court)
(e / enjoy-01, ARG0, a / action)
(e / enjoy-01, ARG1, j / judge-01)
(g / give-01, ARG0, c / case)
(g / give-01, ARG1, i / immunity)
(i / immunity, mod, a / action)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG2, g / give-01)
(p / promise-01, mod, a2 / also)
(s / same-41, ARG1, i / immunity)

Decoded in 241,835 microseconds
Sentence:  mr goss promised to make the fitzgerald inquirys recommendations for the reform of the electoral and criminal justice systems the top priority of his administration

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  mr goss promised to make the fitzgerald inquirys recommendations for the reform of the electoral and criminal justice systems the top priority of his administration
myTokenized = mr goss promised to make the fitzgerald inquirys recommendations for the reform of the electoral and criminal justice systems the top priority of his administration
i = 0
prefix = List(mr)
regexr = \Qm\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: one of the palestinian guerrillas turned irritably to a companion and asked why dont we shoot at them  had he not heard the arab league spokesman that morning promising that the syrian peacekeepers would strike with an iron fist at any resistance

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = one of the palestinian guerrillas turned irritably to a companion and asked why dont we shoot at them  had he not heard the arab league spokesman that morning promising that the syrian peacekeepers would strike with an iron fist at any resistance
myTokenized = one of the palestinian guerrillas turned irritably to a companion and asked why dont we shoot at them had he not heard the arab league spokesman that morning promising that the syrian peacekeepers would strike with an iron fist at any resistance
i = 18
prefix = List(one, of, the, palestinian, guerrillas, turned, irritably, to, a, companion, and, asked, why, dont, we, shoot, at, them, had)
regexr = \Qo\E ?\Qn\E ?\Qe\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qa\E ?\Ql\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qi\E ?\Qa\E ?\Qn\E ?\Qg\E ?\Qu\E ?\Qe\E ?\Qr\E ?\Qr\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qu\E ?\Qr\E ?\Qn\E ?\Qe\E ?\Qd\E ?\Qi\E ?\Qr\E ?\Qr\E ?\Qi\E ?\Qt\E ?\Qa\E ?\Qb\E ?\Ql\E ?\Qy\E ?\Qt\E ?\Qo\E ?\Qa\E ?\Qc\E ?\Qo\E ?\Qm\E ?\Qp\E ?\Qa\E ?\Qn\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qa\E ?\Qs\E ?\Qk\E ?\Qe\E ?\Qd\E ?\Qw\E ?\Qh\E ?\Qy\E ?\Qd\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qw\E ?\Qe\E ?\Qs\E ?\Qh\E ?\Qo\E ?\Qo\E ?\Qt\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qm\E ?\Qh\E ?\Qa\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: if your father were an outofwork actor and he dressed up as a formidably grand housekeeper and babysitter would your mum recognise him  well anyway i promise it makes a splendid read

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = if your father were an outofwork actor and he dressed up as a formidably grand housekeeper and babysitter would your mum recognise him  well anyway i promise it makes a splendid read
myTokenized = if your father were an outofwork actor and he dressed up as a formidably grand housekeeper and babysitter would your mum recognise him well anyway i promise it makes a splendid read
i = 23
prefix = List(if, your, father, were, an, outofwork, actor, and, he, dressed, up, as, a, formidably, grand, housekeeper, and, babysitter, would, your, mum, recognise, him, well)
regexr = \Qi\E ?\Qf\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qf\E ?\Qa\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qw\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qn\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qw\E ?\Qo\E ?\Qr\E ?\Qk\E ?\Qa\E ?\Qc\E ?\Qt\E ?\Qo\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qh\E ?\Qe\E ?\Qd\E ?\Qr\E ?\Qe\E ?\Qs\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qu\E ?\Qp\E ?\Qa\E ?\Qs\E ?\Qa\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qm\E ?\Qi\E ?\Qd\E ?\Qa\E ?\Qb\E ?\Ql\E ?\Qy\E ?\Qg\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Qs\E ?\Qe\E ?\Qk\E ?\Qe\E ?\Qe\E ?\Qp\E ?\Qe\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qb\E ?\Qa\E ?\Qb\E ?\Qy\E ?\Qs\E ?\Qi\E ?\Qt\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qw\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qm\E ?\Qu\E ?\Qm\E ?\Qr\E ?\Qe\E ?\Qc\E ?\Qo\E ?\Qg\E ?\Qn\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qh\E ?\Qi\E ?\Qm\E ?\Qw\E ?\Qe\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: 2m per year to broadcast the tournament and other atp events in germany and the mayor of frankfurt dr volker hauff has promised to showcase the event with a week of concerts exhibitions and international symposiums

NER Entity: (country :name (name :op "germany"))
Spans:
Span 33-34:  and => and
Span 13-14:  and => and
Span 7-8:  and => and
Span 4-5:  broadcast => broadcast-01
Span 26-27:  event => event
Span 10-11:  events => event
Span 32-33:  exhibitions => exhibit-01
Span 34-35:  international => international
Span 15-16:  mayor => (have-org-role-91 :ARG2 mayor)
Span 8-9:  other => other
Span 22-23:  promised => promise-01
Span 29-30:  week => week
Span 2-3:  year => year

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),international,international,false), Span(33,34,List(1),and,and,false), Span(32,33,List(2),exhibitions,exhibit-01,false), Span(29,30,List(3),week,week,false), Span(26,27,List(4),event,event,false), Span(22,23,List(5),promised,promise-01,false), Span(15,16,List(7, 6),mayor,(have-org-role-91 :ARG2 mayor),false), Span(13,14,List(8),and,and,false), Span(10,11,List(9),events,event,false), Span(8,9,List(10),other,other,false), Span(7,8,List(11),and,and,false), Span(4,5,List(12),broadcast,broadcast-01,false), Span(2,3,List(13),year,year,false)),Map(2 -> exhibit-01, 5 -> promise-01, 12 -> broadcast-01, 8 -> and, 7 -> mayor, 1 -> and, 4 -> event, 11 -> and, 6 -> have-org-role-91, 0 -> international, 9 -> event, 3 -> week, 10 -> other, 13 -> year),Map(e -> exhibit-01, w -> week, h -> have-org-role-91, b -> broadcast-01, e2 -> event, a3 -> and, m -> mayor, y -> year, p -> promise-01, a -> and, i -> international, a2 -> and, o -> other, e3 -> event))),[Ljava.lang.String;@5513425f,Annotation([Ljava.lang.String;@636a969b,[Ljava.lang.String;@6ac5cd1a,[Ljava.lang.String;@601c9cb9),Annotation([Ljava.lang.String;@767566fa,[Ljava.lang.String;@15bbe3d8,[Ledu.cmu.lti.nlp.amr.Dependency;@626b850d),Annotation([Ljava.lang.String;@ec4af6,[Ljava.lang.String;@192d5cf3,[Ljava.lang.String;@7131626e),Annotation([Ljava.lang.String;@61355dd0,[Ljava.lang.String;@76a2348b,[Ledu.cmu.lti.nlp.amr.Entity;@1327ce86))
AMR:
(a / and, op, e / exhibit-01)
(a2 / and, mod, i / international)
(a3 / and, op, e3 / event)
(b / broadcast-01, ARG0, a2 / and)
(b / broadcast-01, ARG1, a3 / and)
(b / broadcast-01, ARG2, y / year)
(e / exhibit-01, ARG1, a2 / and)
(e / exhibit-01, ARG2, h / have-org-role-91)
(e3 / event, mod, o / other)
(h / have-org-role-91, ARG2, m / mayor)
(p / promise-01, ARG0, y / year)
(p / promise-01, ARG1, e2 / event)
(w / week, topic, a / and)

Decoded in 194,374 microseconds
Sentence: he promised a meeting of top officials here on 17 november to consider how the august agreements were being implemented and he appealed to the reason and honour of miners throughout the country to ensure the normal life of the soviet people this winter

NER Entity: (country :name (name :op "soviet"))
Spans:
Span 9-10:  17 => 17
Span 16-17:  agreements => agree-01
Span 26-27:  and => and
Span 20-21:  and => and
Span 22-23:  appealed => appeal-02
Span 15-16:  august => (date-entity :month 8)
Span 12-13:  consider => consider-02
Span 32-33:  country => country
Span 34-35:  ensure => ensure-01
Span 21-22:  he => he
Span 0-1:  he => he
Span 7-8:  here => here
Span 27-28:  honour => honor-01
Span 19-20:  implemented => implement-01
Span 37-38:  life => life
Span 3-4:  meeting => meet-03
Span 29-30:  miners => (person :ARG0-of mine-01)
Span 36-37:  normal => normal
Span 10-11:  november => (date-entity :month 11)
Span 6-7:  officials => (have-org-role-91 :ARG2 official)
Span 1-2:  promised => promise-01
Span 25-26:  reason => reason
Span 42-43:  this => this
Span 30-31:  throughout => throughout
Span 5-6:  top => top
Span 43-44:  winter => winter

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),winter,winter,false), Span(42,43,List(1),this,this,false), Span(37,38,List(2),life,life,false), Span(36,37,List(3),normal,normal,false), Span(34,35,List(4),ensure,ensure-01,false), Span(32,33,List(5),country,country,false), Span(30,31,List(6),throughout,throughout,false), Span(29,30,List(8, 7),miners,(person :ARG0-of mine-01),false), Span(27,28,List(9),honour,honor-01,false), Span(26,27,List(10),and,and,false), Span(25,26,List(11),reason,reason,false), Span(22,23,List(12),appealed,appeal-02,false), Span(21,22,List(13),he,he,false), Span(20,21,List(14),and,and,false), Span(19,20,List(15),implemented,implement-01,false), Span(16,17,List(16),agreements,agree-01,false), Span(15,16,List(18, 17),august,(date-entity :month 8),false), Span(12,13,List(19),consider,consider-02,false), Span(10,11,List(21, 20),november,(date-entity :month 11),false), Span(9,10,List(22),17,17,false), Span(7,8,List(23),here,here,false), Span(6,7,List(25, 24),officials,(have-org-role-91 :ARG2 official),false), Span(5,6,List(26),top,top,false), Span(3,4,List(27),meeting,meet-03,false), Span(1,2,List(28),promised,promise-01,false), Span(0,1,List(29),he,he,false)),Map(2 -> life, 5 -> country, 27 -> meet-03, 12 -> appeal-02, 8 -> mine-01, 15 -> implement-01, 21 -> 11, 18 -> 8, 24 -> have-org-role-91, 7 -> person, 1 -> this, 17 -> date-entity, 23 -> here, 26 -> top, 4 -> ensure-01, 11 -> reason, 14 -> and, 29 -> he, 20 -> date-entity, 28 -> promise-01, 6 -> throughout, 9 -> honor-01, 0 -> winter, 22 -> 17, 16 -> agree-01, 19 -> consider-02, 10 -> and, 3 -> normal, 25 -> official, 13 -> he),Map(h5 -> he, e -> ensure-01, n -> normal, w -> winter, h -> honor-01, h2 -> he, t -> this, 12 -> 17, m2 -> meet-03, 8 -> 8, p2 -> promise-01, a3 -> and, h4 -> have-org-role-91, m -> mine-01, d -> date-entity, t3 -> top, 1 -> 11, p -> person, a -> and, d2 -> date-entity, t2 -> throughout, a2 -> appeal-02, r -> reason, i -> implement-01, c -> country, h3 -> here, l -> life, o -> official, c2 -> consider-02, a4 -> agree-01))),[Ljava.lang.String;@13ccd156,Annotation([Ljava.lang.String;@6bc36f41,[Ljava.lang.String;@6bbd4bac,[Ljava.lang.String;@58b34076),Annotation([Ljava.lang.String;@604d3078,[Ljava.lang.String;@6ba947ac,[Ledu.cmu.lti.nlp.amr.Dependency;@36a0a46c),Annotation([Ljava.lang.String;@6c8aca78,[Ljava.lang.String;@bf2c3f4,[Ljava.lang.String;@6f1ece4c),Annotation([Ljava.lang.String;@4f7a1892,[Ljava.lang.String;@58e34201,[Ledu.cmu.lti.nlp.amr.Entity;@30027d3e))
AMR:
(a / and, op, h / honor-01)
(a2 / appeal-02, ARG0, h2 / he)
(a2 / appeal-02, ARG1, r / reason)
(a2 / appeal-02, ARG2, a / and)
(a3 / and, op, a2 / appeal-02)
(a3 / and, op, i / implement-01)
(a4 / agree-01, time, d / date-entity)
(c2 / consider-02, ARG1, a3 / and)
(d / date-entity, month, 8 / 8)
(d2 / date-entity, month, 1 / 11)
(d2 / date-entity, purpose, c2 / consider-02)
(e / ensure-01, ARG0, h2 / he)
(e / ensure-01, ARG1, l / life)
(h / honor-01, ARG1, p / person)
(h3 / here, op, 12 / 17)
(h4 / have-org-role-91, ARG0, p / person)
(h4 / have-org-role-91, ARG2, o / official)
(h4 / have-org-role-91, location, h3 / here)
(i / implement-01, ARG0, w / winter)
(i / implement-01, ARG1, a4 / agree-01)
(i / implement-01, concession, t2 / throughout)
(l / life, mod, n / normal)
(m / mine-01, ARG0, p / person)
(m2 / meet-03, ARG0, h5 / he)
(o / official, mod, t3 / top)
(p2 / promise-01, ARG0, h5 / he)
(p2 / promise-01, ARG2, c2 / consider-02)
(t2 / throughout, op, c / country)
(w / winter, mod, t / this)

Decoded in 1,250,104 microseconds
Sentence: to say we promised the job to gordon taylor is also incorrect

Spans:
Span 10-11:  also => also
Span 11-12:  incorrect => (correct :polarity -)
Span 5-6:  job => job
Span 3-4:  promised => promise-01
Span 1-2:  say => say-01
Span 2-3:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),incorrect,(correct :polarity -),false), Span(10,11,List(2),also,also,false), Span(5,6,List(3),job,job,false), Span(3,4,List(4),promised,promise-01,false), Span(2,3,List(5),we,we,false), Span(1,2,List(6),say,say-01,false)),Map(2 -> also, 5 -> we, 1 -> -, 4 -> promise-01, 6 -> say-01, 0 -> correct, 3 -> job),Map(w -> we, s -> say-01, j -> job, p -> promise-01, a -> also, c -> correct))),[Ljava.lang.String;@736c8a11,Annotation([Ljava.lang.String;@5adc9d4a,[Ljava.lang.String;@49da93e0,[Ljava.lang.String;@2d227d01),Annotation([Ljava.lang.String;@333ce3cd,[Ljava.lang.String;@628fc202,[Ledu.cmu.lti.nlp.amr.Dependency;@4c0a43db),Annotation([Ljava.lang.String;@35ed05dd,[Ljava.lang.String;@5c1c0bd3,[Ljava.lang.String;@354c78e3),Annotation([Ljava.lang.String;@2f949a6b,[Ljava.lang.String;@4525ff34,[Ledu.cmu.lti.nlp.amr.Entity;@4195d263))
AMR:
(c / correct, domain, j / job)
(c / correct, mod, a / also)
(c / correct, polarity, -)
(p / promise-01, ARG0, w / we)
(p / promise-01, ARG1, c / correct)
(s / say-01, ARG1, p / promise-01)

Decoded in 15,736 microseconds
Sentence: page 27 drg forecast  the stationery group has promised a profits forecast to rally support against the 697m bid from pembridge investments

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = page 27 drg forecast  the stationery group has promised a profits forecast to rally support against the 697m bid from pembridge investments
myTokenized = page 27 drg forecast the stationery group has promised a profits forecast to rally support against the 697m bid from pembridge investments
i = 4
prefix = List(page, 27, drg, forecast, the)
regexr = \Qp\E ?\Qa\E ?\Qg\E ?\Qe\E ?\Q2\E ?\Q7\E ?\Qd\E ?\Qr\E ?\Qg\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qc\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: i wish to god the allies would hurry up and make this landing weve all been promised for so long

Spans:
Span 14-15:  all => all
Span 5-6:  allies => ally-01
Span 9-10:  and => and
Span 3-4:  god => god
Span 0-1:  i => i
Span 12-13:  landing => land-01
Span 16-17:  promised => promise-01
Span 18-19:  so => so
Span 11-12:  this => this
Span 1-2:  wish => wish-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),so,so,false), Span(16,17,List(1),promised,promise-01,false), Span(14,15,List(2),all,all,false), Span(12,13,List(3),landing,land-01,false), Span(11,12,List(4),this,this,false), Span(9,10,List(5),and,and,false), Span(5,6,List(6),allies,ally-01,false), Span(3,4,List(7),god,god,false), Span(1,2,List(8),wish,wish-01,false), Span(0,1,List(9),i,i,false)),Map(2 -> all, 5 -> and, 8 -> wish-01, 7 -> god, 1 -> promise-01, 4 -> this, 6 -> ally-01, 9 -> i, 0 -> so, 3 -> land-01),Map(w -> wish-01, t -> this, a3 -> ally-01, s -> so, g -> god, p -> promise-01, a -> all, i -> i, a2 -> and, l -> land-01))),[Ljava.lang.String;@4717fc2e,Annotation([Ljava.lang.String;@77ad5478,[Ljava.lang.String;@1484cfaa,[Ljava.lang.String;@1b5dac6c),Annotation([Ljava.lang.String;@22e2f47d,[Ljava.lang.String;@62214c6f,[Ledu.cmu.lti.nlp.amr.Dependency;@78213dbd),Annotation([Ljava.lang.String;@4e5c80e8,[Ljava.lang.String;@1b132789,[Ljava.lang.String;@688a142),Annotation([Ljava.lang.String;@7412f767,[Ljava.lang.String;@930c6ba,[Ledu.cmu.lti.nlp.amr.Entity;@6146e20c))
AMR:
(a2 / and, op, a3 / ally-01)
(a2 / and, op, g / god)
(a2 / and, op, p / promise-01)
(a3 / ally-01, ARG1, s / so)
(l / land-01, ARG0, a2 / and)
(l / land-01, mod, t / this)
(p / promise-01, ARG0, a / all)
(w / wish-01, ARG0, i / i)
(w / wish-01, ARG1, g / god)

Decoded in 148,655 microseconds
Sentence: this years benson final promises to be one of the best with the clash of probably the two best allround oneday sides in the country

Spans:
Span 13-14:  clash => clash-01
Span 24-25:  country => country
Span 3-4:  final => final
Span 15-16:  probably => probable
Span 4-5:  promises => promise-01
Span 21-22:  sides => side
Span 0-1:  this => this
Span 17-18:  two => 2
Span 1-2:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),country,country,false), Span(21,22,List(1),sides,side,false), Span(17,18,List(2),two,2,false), Span(15,16,List(3),probably,probable,false), Span(13,14,List(4),clash,clash-01,false), Span(4,5,List(5),promises,promise-01,false), Span(3,4,List(6),final,final,false), Span(1,2,List(8, 7),years,(temporal-quantity :unit year),false), Span(0,1,List(9),this,this,false)),Map(2 -> 2, 5 -> promise-01, 8 -> year, 7 -> temporal-quantity, 1 -> side, 4 -> clash-01, 6 -> final, 9 -> this, 0 -> country, 3 -> probable),Map(2 -> 2, t -> temporal-quantity, p2 -> promise-01, s -> side, y -> year, p -> probable, t2 -> this, c -> country, f -> final, c2 -> clash-01))),[Ljava.lang.String;@65c530da,Annotation([Ljava.lang.String;@750a6c68,[Ljava.lang.String;@7f535bdf,[Ljava.lang.String;@39b4cec7),Annotation([Ljava.lang.String;@d73886a,[Ljava.lang.String;@1c00ee0c,[Ledu.cmu.lti.nlp.amr.Dependency;@10c6431),Annotation([Ljava.lang.String;@5485cd80,[Ljava.lang.String;@1c76b9da,[Ljava.lang.String;@36a3a5cf),Annotation([Ljava.lang.String;@31dad50f,[Ljava.lang.String;@15d9e55b,[Ledu.cmu.lti.nlp.amr.Entity;@1460c492))
AMR:
(c / country, part, s / side)
(c2 / clash-01, ARG0, s / side)
(c2 / clash-01, ARG1, p / probable)
(p2 / promise-01, ARG0, c / country)
(p2 / promise-01, ARG1, t / temporal-quantity)
(p2 / promise-01, mod, f / final)
(s / side, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(y / year, mod, t2 / this)

Decoded in 61,973 microseconds
Sentence: japan has promised to spend an extra 35 billion on recycling funds to developing countries which will extend its present programme until 1991

NER Entity: (country :name (name :op "japan"))
Spans:
Span 22-23:  1991 => (date-entity :year 1991)
Span 7-8:  35 => 35
Span 14-15:  countries => country
Span 13-14:  developing => develop-02
Span 17-18:  extend => extend-01
Span 6-7:  extra => extra
Span 11-12:  funds => fund
Span 19-20:  present => present
Span 20-21:  programme => program
Span 2-3:  promised => promise-01
Span 10-11:  recycling => recycle-01
Span 4-5:  spend => spend-01
Span 21-22:  until => until

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),1991,(date-entity :year 1991),false), Span(21,22,List(2),until,until,false), Span(20,21,List(3),programme,program,false), Span(19,20,List(4),present,present,false), Span(17,18,List(5),extend,extend-01,false), Span(14,15,List(6),countries,country,false), Span(13,14,List(7),developing,develop-02,false), Span(11,12,List(8),funds,fund,false), Span(10,11,List(9),recycling,recycle-01,false), Span(7,8,List(10),35,35,false), Span(6,7,List(11),extra,extra,false), Span(4,5,List(12),spend,spend-01,false), Span(2,3,List(13),promised,promise-01,false)),Map(2 -> until, 5 -> extend-01, 12 -> spend-01, 8 -> fund, 7 -> develop-02, 1 -> 1991, 4 -> present, 11 -> extra, 6 -> country, 0 -> date-entity, 9 -> recycle-01, 3 -> program, 10 -> 35, 13 -> promise-01),Map(e -> extend-01, p2 -> present, e2 -> extra, s -> spend-01, d -> date-entity, 1 -> 1991, p -> program, d2 -> develop-02, r -> recycle-01, c -> country, u -> until, f -> fund, p3 -> promise-01, 3 -> 35))),[Ljava.lang.String;@5d0957b1,Annotation([Ljava.lang.String;@105c552f,[Ljava.lang.String;@1ddc890d,[Ljava.lang.String;@79a9c3cb),Annotation([Ljava.lang.String;@787582d3,[Ljava.lang.String;@6ae0286d,[Ledu.cmu.lti.nlp.amr.Dependency;@227e42ec),Annotation([Ljava.lang.String;@f5ba5a5,[Ljava.lang.String;@49d7fb83,[Ljava.lang.String;@2c17b55),Annotation([Ljava.lang.String;@6c880adc,[Ljava.lang.String;@5781292e,[Ledu.cmu.lti.nlp.amr.Entity;@60b6b7e3))
AMR:
(d / date-entity, year, 1 / 1991)
(d2 / develop-02, ARG0, f / fund)
(d2 / develop-02, ARG1, c / country)
(e / extend-01, ARG0, c / country)
(e / extend-01, ARG1, p / program)
(e / extend-01, ARG2, u / until)
(e2 / extra, mod, 3 / 35)
(f / fund, purpose, r / recycle-01)
(p / program, time, p2 / present)
(p3 / promise-01, ARG1, s / spend-01)
(p3 / promise-01, ARG2, c / country)
(s / spend-01, ARG1, e2 / extra)
(u / until, op, d / date-entity)

Decoded in 183,281 microseconds
Sentence: the party has promised to retire them all within the next decade confident that with an average age well over 80 few will survive that long

Spans:
Span 20-21:  80 => 80
Span 17-18:  age => age-01
Span 7-8:  all => all
Span 12-13:  confident => confident-41
Span 11-12:  decade => (temporal-quantity :unit decade)
Span 21-22:  few => few
Span 10-11:  next => next
Span 1-2:  party => party
Span 3-4:  promised => promise-01
Span 5-6:  retire => retire-01
Span 23-24:  survive => survive-01
Span 18-19:  well => well
Span 8-9:  within => within

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),survive,survive-01,false), Span(21,22,List(1),few,few,false), Span(20,21,List(2),80,80,false), Span(18,19,List(3),well,well,false), Span(17,18,List(4),age,age-01,false), Span(12,13,List(5),confident,confident-41,false), Span(11,12,List(7, 6),decade,(temporal-quantity :unit decade),false), Span(10,11,List(8),next,next,false), Span(8,9,List(9),within,within,false), Span(7,8,List(10),all,all,false), Span(5,6,List(11),retire,retire-01,false), Span(3,4,List(12),promised,promise-01,false), Span(1,2,List(13),party,party,false)),Map(2 -> 80, 5 -> confident-41, 12 -> promise-01, 8 -> next, 7 -> decade, 1 -> few, 4 -> age-01, 11 -> retire-01, 6 -> temporal-quantity, 0 -> survive-01, 9 -> within, 3 -> well, 10 -> all, 13 -> party),Map(w -> well, n -> next, t -> temporal-quantity, 8 -> 80, p2 -> party, s -> survive-01, d -> decade, p -> promise-01, a -> age-01, w2 -> within, a2 -> all, r -> retire-01, c -> confident-41, f -> few))),[Ljava.lang.String;@7be2c9af,Annotation([Ljava.lang.String;@66273fb3,[Ljava.lang.String;@1ac7352a,[Ljava.lang.String;@c736622),Annotation([Ljava.lang.String;@6c364890,[Ljava.lang.String;@5fd61d70,[Ledu.cmu.lti.nlp.amr.Dependency;@6226d537),Annotation([Ljava.lang.String;@63784038,[Ljava.lang.String;@6bc04f8c,[Ljava.lang.String;@1ea6a798),Annotation([Ljava.lang.String;@4f44fbe0,[Ljava.lang.String;@39f457c8,[Ledu.cmu.lti.nlp.amr.Entity;@58af2931))
AMR:
(c / confident-41, ARG1, t / temporal-quantity)
(d / decade, mod, n / next)
(p / promise-01, ARG0, p2 / party)
(p / promise-01, ARG1, 8 / 80)
(p / promise-01, ARG2, r / retire-01)
(r / retire-01, ARG0, w / well)
(r / retire-01, time, w2 / within)
(s / survive-01, ARG0, p2 / party)
(s / survive-01, ARG1, f / few)
(s / survive-01, time, a / age-01)
(t / temporal-quantity, unit, d / decade)
(w2 / within, mod, a2 / all)
(w2 / within, op, t / temporal-quantity)

Decoded in 262,652 microseconds
Sentence: the students had been promised free time to see the sights

Spans:
Span 5-6:  free => free-41
Span 4-5:  promised => promise-01
Span 8-9:  see => see-01
Span 10-11:  sights => sight-01
Span 1-2:  students => (person :ARG0-of study-01)
Span 6-7:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),sights,sight-01,false), Span(8,9,List(1),see,see-01,false), Span(6,7,List(2),time,time,false), Span(5,6,List(3),free,free-41,false), Span(4,5,List(4),promised,promise-01,false), Span(1,2,List(6, 5),students,(person :ARG0-of study-01),false)),Map(2 -> time, 5 -> person, 1 -> see-01, 4 -> promise-01, 6 -> study-01, 0 -> sight-01, 3 -> free-41),Map(t -> time, s2 -> see-01, p2 -> person, s -> sight-01, p -> promise-01, s3 -> study-01, f -> free-41))),[Ljava.lang.String;@53b97d73,Annotation([Ljava.lang.String;@36db33f6,[Ljava.lang.String;@7130779c,[Ljava.lang.String;@24fcdcd2),Annotation([Ljava.lang.String;@550571f6,[Ljava.lang.String;@587cf915,[Ledu.cmu.lti.nlp.amr.Dependency;@74c4ff15),Annotation([Ljava.lang.String;@3146f797,[Ljava.lang.String;@2a28f3c7,[Ljava.lang.String;@669ca370),Annotation([Ljava.lang.String;@35ae42b1,[Ljava.lang.String;@439c8dff,[Ledu.cmu.lti.nlp.amr.Entity;@5b2e8306))
AMR:
(f / free-41, ARG1, t / time)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, ARG2, s2 / see-01)
(p / promise-01, time, t / time)
(s2 / see-01, ARG1, s / sight-01)
(s3 / study-01, ARG0, p2 / person)

Decoded in 18,919 microseconds
Sentence: eric latham the new chairman of st helens has promised money will be found to sign new players

Spans:
Span 4-5:  chairman => (have-org-role-91 :ARG2 chairman)
Span 13-14:  found => find-01
Span 10-11:  money => money
Span 16-17:  new => new
Span 3-4:  new => new
Span 17-18:  players => (person :ARG0-of play-01)
Span 9-10:  promised => promise-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),players,(person :ARG0-of play-01),false), Span(16,17,List(2),new,new,false), Span(13,14,List(3),found,find-01,false), Span(10,11,List(4),money,money,false), Span(9,10,List(5),promised,promise-01,false), Span(4,5,List(7, 6),chairman,(have-org-role-91 :ARG2 chairman),false), Span(3,4,List(8),new,new,false)),Map(2 -> new, 5 -> promise-01, 8 -> new, 7 -> chairman, 1 -> play-01, 4 -> money, 6 -> have-org-role-91, 0 -> person, 3 -> find-01),Map(n -> new, h -> have-org-role-91, p2 -> play-01, m -> money, p -> person, c -> chairman, f -> find-01, n2 -> new, p3 -> promise-01))),[Ljava.lang.String;@4a9c2dae,Annotation([Ljava.lang.String;@537b20c6,[Ljava.lang.String;@38a4d1fb,[Ljava.lang.String;@4cd5d2ca),Annotation([Ljava.lang.String;@6a01f32e,[Ljava.lang.String;@26048761,[Ledu.cmu.lti.nlp.amr.Dependency;@735404c6),Annotation([Ljava.lang.String;@11059e51,[Ljava.lang.String;@7dce092,[Ljava.lang.String;@361b9546),Annotation([Ljava.lang.String;@4ce5426a,[Ljava.lang.String;@5f6b6496,[Ledu.cmu.lti.nlp.amr.Entity;@398e4cb))
AMR:
(f / find-01, ARG0, p / person)
(f / find-01, ARG1, h / have-org-role-91)
(h / have-org-role-91, ARG2, c / chairman)
(h / have-org-role-91, mod, n2 / new)
(p / person, mod, n / new)
(p2 / play-01, ARG0, p / person)
(p3 / promise-01, ARG0, c / chairman)
(p3 / promise-01, ARG1, m / money)

Decoded in 56,388 microseconds
Sentence: on this occasion as an added piquancy the festival promised to have a distinctly radical flavour

Spans:
Span 5-6:  added => add-01
Span 13-14:  distinctly => distinct
Span 8-9:  festival => festival
Span 2-3:  occasion => occasion
Span 9-10:  promised => promise-01
Span 14-15:  radical => radical
Span 1-2:  this => this

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),radical,radical,false), Span(13,14,List(1),distinctly,distinct,false), Span(9,10,List(2),promised,promise-01,false), Span(8,9,List(3),festival,festival,false), Span(5,6,List(4),added,add-01,false), Span(2,3,List(5),occasion,occasion,false), Span(1,2,List(6),this,this,false)),Map(2 -> promise-01, 5 -> occasion, 1 -> distinct, 4 -> add-01, 6 -> this, 0 -> radical, 3 -> festival),Map(t -> this, d -> distinct, p -> promise-01, a -> add-01, r -> radical, o -> occasion, f -> festival))),[Ljava.lang.String;@2ad4cd45,Annotation([Ljava.lang.String;@78f082fa,[Ljava.lang.String;@7627291d,[Ljava.lang.String;@4fc6b85),Annotation([Ljava.lang.String;@57f6eb51,[Ljava.lang.String;@13d33ff5,[Ledu.cmu.lti.nlp.amr.Dependency;@120bf7fe),Annotation([Ljava.lang.String;@4fc64df3,[Ljava.lang.String;@6427b56f,[Ljava.lang.String;@6af8bdc7),Annotation([Ljava.lang.String;@70738aae,[Ljava.lang.String;@3195df2f,[Ledu.cmu.lti.nlp.amr.Entity;@666fa017))
AMR:
(a / add-01, ARG0, d / distinct)
(a / add-01, ARG1, p / promise-01)
(o / occasion, mod, t / this)
(p / promise-01, ARG0, f / festival)
(p / promise-01, ARG1, o / occasion)
(r / radical, degree, d / distinct)

Decoded in 32,735 microseconds
Sentence: then he promised west germany would be ready to offer assistance

NER Entity: (country :name (name :op "germany"))
Spans:
Span 10-11:  assistance => assist-01
Span 1-2:  he => he
Span 9-10:  offer => offer-01
Span 2-3:  promised => promise-01
Span 7-8:  ready => ready-01
Span 0-1:  then => then
Span 3-4:  west => west

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),assistance,assist-01,false), Span(9,10,List(1),offer,offer-01,false), Span(7,8,List(2),ready,ready-01,false), Span(3,4,List(3),west,west,false), Span(2,3,List(4),promised,promise-01,false), Span(1,2,List(5),he,he,false), Span(0,1,List(6),then,then,false)),Map(2 -> ready-01, 5 -> he, 1 -> offer-01, 4 -> promise-01, 6 -> then, 0 -> assist-01, 3 -> west),Map(w -> west, h -> he, t -> then, p -> promise-01, a -> assist-01, r -> ready-01, o -> offer-01))),[Ljava.lang.String;@2a777a8b,Annotation([Ljava.lang.String;@a0e5175,[Ljava.lang.String;@3205dd7b,[Ljava.lang.String;@1f0fcfe5),Annotation([Ljava.lang.String;@4719d351,[Ljava.lang.String;@70808f4e,[Ledu.cmu.lti.nlp.amr.Dependency;@8408396),Annotation([Ljava.lang.String;@437ef115,[Ljava.lang.String;@4305bc51,[Ljava.lang.String;@2d8e8c37),Annotation([Ljava.lang.String;@6997863e,[Ljava.lang.String;@5aee869a,[Ledu.cmu.lti.nlp.amr.Entity;@61c71719))
AMR:
(o / offer-01, ARG1, a / assist-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, r / ready-01)
(p / promise-01, time, t / then)
(r / ready-01, ARG2, o / offer-01)
(w / west, time, t / then)

Decoded in 18,782 microseconds
Sentence: her contract was completed but as with many others in her situation she was not sent home as promised

Spans:
Span 4-5:  but => contrast-01
Span 3-4:  completed => complete-01
Span 1-2:  contract => contract-02
Span 16-17:  home => home
Span 7-8:  many => many
Span 8-9:  others => other
Span 18-19:  promised => promise-01
Span 15-16:  sent => send-01
Span 12-13:  she => she
Span 11-12:  situation => situation

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),promised,promise-01,false), Span(16,17,List(1),home,home,false), Span(15,16,List(2),sent,send-01,false), Span(12,13,List(3),she,she,false), Span(11,12,List(4),situation,situation,false), Span(8,9,List(5),others,other,false), Span(7,8,List(6),many,many,false), Span(4,5,List(7),but,contrast-01,false), Span(3,4,List(8),completed,complete-01,false), Span(1,2,List(9),contract,contract-02,false)),Map(2 -> send-01, 5 -> other, 8 -> complete-01, 7 -> contrast-01, 1 -> home, 4 -> situation, 6 -> many, 9 -> contract-02, 0 -> promise-01, 3 -> she),Map(h -> home, s2 -> she, s -> send-01, m -> many, p -> promise-01, c3 -> contract-02, c -> contrast-01, s3 -> situation, o -> other, c2 -> complete-01))),[Ljava.lang.String;@55bd9c75,Annotation([Ljava.lang.String;@136af14d,[Ljava.lang.String;@52080030,[Ljava.lang.String;@b447963),Annotation([Ljava.lang.String;@3c7d585c,[Ljava.lang.String;@49341f0a,[Ledu.cmu.lti.nlp.amr.Dependency;@7ce1ef11),Annotation([Ljava.lang.String;@55168524,[Ljava.lang.String;@397f2a20,[Ljava.lang.String;@4ba6b85d),Annotation([Ljava.lang.String;@2e920878,[Ljava.lang.String;@756a162a,[Ledu.cmu.lti.nlp.amr.Entity;@7d55b9f))
AMR:
(c / contrast-01, ARG1, c2 / complete-01)
(c2 / complete-01, ARG1, c3 / contract-02)
(c3 / contract-02, ARG1, s / send-01)
(o / other, quant, m / many)
(p / promise-01, ARG0, s2 / she)
(p / promise-01, ARG1, s3 / situation)
(p / promise-01, mod, h / home)
(s / send-01, ARG1, s2 / she)
(s3 / situation, part, o / other)

Decoded in 184,147 microseconds
Sentence: but across the garishly painted railway bridge where all traffic was now prohibited the tube station promised infallible noise noise enough and to spare

Spans:
Span 1-2:  across => across
Span 8-9:  all => all
Span 21-22:  and => and
Span 6-7:  bridge => bridge
Span 0-1:  but => contrast-01
Span 20-21:  enough => enough
Span 19-20:  noise => noise
Span 18-19:  noise => noise
Span 11-12:  now => now
Span 4-5:  painted => paint-03
Span 12-13:  prohibited => prohibit-01
Span 16-17:  promised => promise-01
Span 5-6:  railway => railway
Span 23-24:  spare => spare-02
Span 15-16:  station => station
Span 9-10:  traffic => traffic
Span 14-15:  tube => tube

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),spare,spare-02,false), Span(21,22,List(1),and,and,false), Span(20,21,List(2),enough,enough,false), Span(19,20,List(3),noise,noise,false), Span(18,19,List(4),noise,noise,false), Span(16,17,List(5),promised,promise-01,false), Span(15,16,List(6),station,station,false), Span(14,15,List(7),tube,tube,false), Span(12,13,List(8),prohibited,prohibit-01,false), Span(11,12,List(9),now,now,false), Span(9,10,List(10),traffic,traffic,false), Span(8,9,List(11),all,all,false), Span(6,7,List(12),bridge,bridge,false), Span(5,6,List(13),railway,railway,false), Span(4,5,List(14),painted,paint-03,false), Span(1,2,List(15),across,across,false), Span(0,1,List(16),but,contrast-01,false)),Map(2 -> enough, 5 -> promise-01, 12 -> bridge, 15 -> across, 8 -> prohibit-01, 7 -> tube, 1 -> and, 4 -> noise, 11 -> all, 14 -> paint-03, 6 -> station, 0 -> spare-02, 9 -> now, 16 -> contrast-01, 3 -> noise, 10 -> traffic, 13 -> railway),Map(e -> enough, n -> noise, s2 -> station, t -> tube, b -> bridge, p2 -> prohibit-01, a3 -> across, s -> spare-02, p -> promise-01, a -> and, n3 -> now, t2 -> traffic, r -> railway, a2 -> all, c -> contrast-01, p3 -> paint-03, n2 -> noise))),[Ljava.lang.String;@3e8f0e73,Annotation([Ljava.lang.String;@21fdc01b,[Ljava.lang.String;@1a4f3e0c,[Ljava.lang.String;@48729352),Annotation([Ljava.lang.String;@5a2611a6,[Ljava.lang.String;@7950d786,[Ledu.cmu.lti.nlp.amr.Dependency;@2a75dca3),Annotation([Ljava.lang.String;@1fe8671c,[Ljava.lang.String;@52c96fa1,[Ljava.lang.String;@26bfdd7d),Annotation([Ljava.lang.String;@7e664d6a,[Ljava.lang.String;@6e64aafa,[Ledu.cmu.lti.nlp.amr.Entity;@13153bb5))
AMR:
(a / and, op, e / enough)
(a / and, op, p / promise-01)
(a / and, op, s / spare-02)
(a3 / across, op, b / bridge)
(c / contrast-01, ARG1, a3 / across)
(c / contrast-01, ARG2, a / and)
(n / noise, mod, n2 / noise)
(p / promise-01, ARG0, s2 / station)
(p / promise-01, ARG1, n / noise)
(p2 / prohibit-01, ARG0, b / bridge)
(p2 / prohibit-01, ARG1, t2 / traffic)
(p2 / prohibit-01, time, n3 / now)
(p3 / paint-03, ARG1, b / bridge)
(r / railway, mod, p3 / paint-03)
(s2 / station, mod, t / tube)
(t2 / traffic, quant, a2 / all)

Decoded in 680,762 microseconds
Sentence: this was promised a long 10 years ago

Spans:
Span 5-6:  10 => 10
Span 2-3:  promised => promise-01
Span 0-1:  this => this
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(1, 0),years,(temporal-quantity :unit year),false), Span(5,6,List(2),10,10,false), Span(2,3,List(3),promised,promise-01,false), Span(0,1,List(4),this,this,false)),Map(2 -> 10, 1 -> year, 4 -> this, 0 -> temporal-quantity, 3 -> promise-01),Map(t -> temporal-quantity, p -> promise-01, 1 -> 10, y -> year, t2 -> this))),[Ljava.lang.String;@5702f1dc,Annotation([Ljava.lang.String;@254cf25,[Ljava.lang.String;@deb8755,[Ljava.lang.String;@6201e496),Annotation([Ljava.lang.String;@6a46661e,[Ljava.lang.String;@33da7214,[Ledu.cmu.lti.nlp.amr.Dependency;@4a7799a4),Annotation([Ljava.lang.String;@7208042d,[Ljava.lang.String;@6c4a60d7,[Ljava.lang.String;@71bfacc),Annotation([Ljava.lang.String;@3dee6ab9,[Ljava.lang.String;@6fa0b772,[Ledu.cmu.lti.nlp.amr.Entity;@206bd69f))
AMR:
(p / promise-01, ARG0, 1 / 10)
(p / promise-01, ARG1, t2 / this)
(t / temporal-quantity, quant, 1 / 10)
(t / temporal-quantity, unit, y / year)

Decoded in 10,561 microseconds
Sentence:  she admitted that the party machine was now likely to deliver the vote for a switch in policy at conference and she promised as a front bench spokeswoman to abide by the partys democratic decisions

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  she admitted that the party machine was now likely to deliver the vote for a switch in policy at conference and she promised as a front bench spokeswoman to abide by the partys democratic decisions
myTokenized = she admitted that the party machine was now likely to deliver the vote for a switch in policy at conference and she promised as a front bench spokeswoman to abide by the partys democratic decisions
i = 0
prefix = List(she)
regexr = \Qs\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   well have a look he promised

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   well have a look he promised
myTokenized = well have a look he promised
i = 0
prefix = List(well)
regexr = \Qw\E ?\Qe\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: they promised to keep themselves only unto themselves in sickness and in health so long as they both should live

Spans:
Span 10-11:  and => and
Span 17-18:  both => both
Span 12-13:  health => health
Span 19-20:  live => live-01
Span 5-6:  only => only
Span 1-2:  promised => promise-01
Span 18-19:  should => recommend-01
Span 9-10:  sickness => sickness
Span 13-14:  so => so
Span 16-17:  they => they
Span 0-1:  they => they

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),live,live-01,false), Span(18,19,List(1),should,recommend-01,false), Span(17,18,List(2),both,both,false), Span(16,17,List(3),they,they,false), Span(13,14,List(4),so,so,false), Span(12,13,List(5),health,health,false), Span(10,11,List(6),and,and,false), Span(9,10,List(7),sickness,sickness,false), Span(5,6,List(8),only,only,false), Span(1,2,List(9),promised,promise-01,false), Span(0,1,List(10),they,they,false)),Map(2 -> both, 5 -> health, 8 -> only, 7 -> sickness, 1 -> recommend-01, 4 -> so, 6 -> and, 9 -> promise-01, 0 -> live-01, 10 -> they, 3 -> they),Map(h -> health, s2 -> sickness, t -> they, b -> both, s -> so, p -> promise-01, a -> and, t2 -> they, r -> recommend-01, l -> live-01, o -> only))),[Ljava.lang.String;@13c427b3,Annotation([Ljava.lang.String;@330a62e8,[Ljava.lang.String;@6ee38785,[Ljava.lang.String;@1bd665a3),Annotation([Ljava.lang.String;@18aabe9c,[Ljava.lang.String;@71c8006a,[Ledu.cmu.lti.nlp.amr.Dependency;@1936982),Annotation([Ljava.lang.String;@74f3d69c,[Ljava.lang.String;@348ed7c0,[Ljava.lang.String;@df69935),Annotation([Ljava.lang.String;@38c46dbc,[Ljava.lang.String;@68006ec1,[Ledu.cmu.lti.nlp.amr.Entity;@7467763e))
AMR:
(a / and, op, h / health)
(a / and, op, r / recommend-01)
(a / and, op, s2 / sickness)
(l / live-01, ARG0, t / they)
(l / live-01, ARG1, p / promise-01)
(p / promise-01, ARG0, t2 / they)
(p / promise-01, ARG1, s / so)
(r / recommend-01, ARG1, l / live-01)
(s / so, mod, o / only)
(t / they, mod, b / both)

Decoded in 64,356 microseconds
Sentence: a just cause and it promises later electoral success provided everything is thrown at the enemy and his swift defeat is assured

Spans:
Span 16-17:  and => and
Span 3-4:  and => and
Span 21-22:  assured => assure-01
Span 2-3:  cause => cause-01
Span 19-20:  defeat => defeat-01
Span 7-8:  electoral => elect-01
Span 15-16:  enemy => (have-rel-role-91 :ARG2 enemy)
Span 10-11:  everything => everything
Span 4-5:  it => it
Span 1-2:  just => just
Span 6-7:  later => late
Span 5-6:  promises => promise-01
Span 9-10:  provided => provide-01
Span 8-9:  success => succeed-01
Span 18-19:  swift => swift
Span 12-13:  thrown => throw-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),assured,assure-01,false), Span(19,20,List(1),defeat,defeat-01,false), Span(18,19,List(2),swift,swift,false), Span(16,17,List(3),and,and,false), Span(15,16,List(5, 4),enemy,(have-rel-role-91 :ARG2 enemy),false), Span(12,13,List(6),thrown,throw-01,false), Span(10,11,List(7),everything,everything,false), Span(9,10,List(8),provided,provide-01,false), Span(8,9,List(9),success,succeed-01,false), Span(7,8,List(10),electoral,elect-01,false), Span(6,7,List(11),later,late,false), Span(5,6,List(12),promises,promise-01,false), Span(4,5,List(13),it,it,false), Span(3,4,List(14),and,and,false), Span(2,3,List(15),cause,cause-01,false), Span(1,2,List(16),just,just,false)),Map(2 -> swift, 5 -> enemy, 12 -> promise-01, 15 -> cause-01, 8 -> provide-01, 7 -> everything, 1 -> defeat-01, 4 -> have-rel-role-91, 11 -> late, 14 -> and, 6 -> throw-01, 0 -> assure-01, 9 -> succeed-01, 16 -> just, 3 -> and, 10 -> elect-01, 13 -> it),Map(e -> enemy, h -> have-rel-role-91, s2 -> succeed-01, t -> throw-01, e2 -> everything, p2 -> promise-01, j -> just, a3 -> and, s -> swift, d -> defeat-01, p -> provide-01, a -> assure-01, i -> it, a2 -> and, c -> cause-01, l -> late, e3 -> elect-01))),[Ljava.lang.String;@4d541db9,Annotation([Ljava.lang.String;@4d6b8458,[Ljava.lang.String;@4dbdd51d,[Ljava.lang.String;@69f28aca),Annotation([Ljava.lang.String;@32760a1d,[Ljava.lang.String;@63920fcc,[Ledu.cmu.lti.nlp.amr.Dependency;@a4b4d26),Annotation([Ljava.lang.String;@55b5ff11,[Ljava.lang.String;@1f7ce10d,[Ljava.lang.String;@3f9b2ca1),Annotation([Ljava.lang.String;@648f1ea6,[Ljava.lang.String;@702557dd,[Ledu.cmu.lti.nlp.amr.Entity;@23aba7b0))
AMR:
(a / assure-01, ARG0, a2 / and)
(a / assure-01, ARG1, d / defeat-01)
(a2 / and, op, t / throw-01)
(a3 / and, op, c / cause-01)
(c / cause-01, ARG1, i / it)
(c / cause-01, mod, j / just)
(d / defeat-01, ARG2, h / have-rel-role-91)
(d / defeat-01, mod, s / swift)
(h / have-rel-role-91, ARG2, e / enemy)
(p / provide-01, ARG1, p2 / promise-01)
(p / provide-01, manner, a2 / and)
(p2 / promise-01, ARG0, a3 / and)
(p2 / promise-01, ARG1, s2 / succeed-01)
(s2 / succeed-01, mod, e3 / elect-01)
(s2 / succeed-01, time, l / late)
(t / throw-01, ARG1, e2 / everything)

Decoded in 425,485 microseconds
Sentence: in west germany an interior ministry official promised last night that no one would be turned back from the east

NER Entity: (country :name (name :op "germany"))
NER Entity: (organization :name (name :op "interior" :op "ministry"))
Spans:
Span 16-17:  back => back
Span 19-20:  east => east
Span 4-6:  interior ministry => (government-organization :name (name :op "Ministry" :op "Interior"))
Span 8-9:  last => last
Span 9-10:  night => night
Span 11-12:  no => -
Span 6-7:  official => (have-org-role-91 :ARG2 official)
Span 7-8:  promised => promise-01
Span 1-2:  west => west

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),east,east,false), Span(16,17,List(1),back,back,false), Span(11,12,List(2),no,-,false), Span(9,10,List(3),night,night,false), Span(8,9,List(4),last,last,false), Span(7,8,List(5),promised,promise-01,false), Span(6,7,List(7, 6),official,(have-org-role-91 :ARG2 official),false), Span(4,6,List(11, 10, 9, 8),interior ministry,(government-organization :name (name :op "Ministry" :op "Interior")),false), Span(1,2,List(12),west,west,false)),Map(2 -> -, 5 -> promise-01, 12 -> west, 8 -> government-organization, 7 -> official, 1 -> back, 4 -> last, 11 -> "Interior", 6 -> have-org-role-91, 0 -> east, 9 -> name, 3 -> night, 10 -> "Ministry"),Map(w -> west, n -> night, e -> east, h -> have-org-role-91, b -> back, g -> government-organization, p -> promise-01, - -> -, l -> last, o -> official, n2 -> name))),[Ljava.lang.String;@5a8e261b,Annotation([Ljava.lang.String;@2a67e50f,[Ljava.lang.String;@aef5189,[Ljava.lang.String;@65d1fefa),Annotation([Ljava.lang.String;@3dbb034f,[Ljava.lang.String;@40d65732,[Ledu.cmu.lti.nlp.amr.Dependency;@37f6b4df),Annotation([Ljava.lang.String;@25dcb92d,[Ljava.lang.String;@3e014cc6,[Ljava.lang.String;@47577af7),Annotation([Ljava.lang.String;@404a12b8,[Ljava.lang.String;@3f130f01,[Ledu.cmu.lti.nlp.amr.Entity;@7c3e2b00))
AMR:
(b / back, poss, w / west)
(g / government-organization, name, n2 / name)
(h / have-org-role-91, ARG0, b / back)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, o / official)
(h / have-org-role-91, mod, e / east)
(n / night, mod, l / last)
(n2 / name, op, "Interior")
(n2 / name, op, "Ministry")
(p / promise-01, ARG0, - / -)
(p / promise-01, ARG1, h / have-org-role-91)
(p / promise-01, time, n / night)

Decoded in 121,131 microseconds
Sentence: whitehall and peking did a grubby deal britain promised to hand all of hong kong over to china in 1997 peking pledged that the colony would enjoy a new status as an autonomous special administrative region of china governed by its own people under a democratic system enshrining the rule of law and the commonlaw justice system

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "hong" :op "kong"))
NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "china"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 19-20:  1997 => (date-entity :year 1997)
Span 34-35:  administrative => administrate-01
Span 11-12:  all => all
Span 52-53:  and => and
Span 1-2:  and => and
Span 32-33:  autonomous => autonomy
Span 7-8:  britain => (country :name (name :op "Britain"))
Span 37-38:  china => (country :name (name :op "China"))
Span 17-18:  china => (country :name (name :op "China"))
Span 24-25:  colony => colony
Span 6-7:  deal => deal-01
Span 45-46:  democratic => democracy
Span 26-27:  enjoy => enjoy-01
Span 38-39:  governed => govern-01
Span 10-11:  hand => hand
Span 13-15:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 55-56:  justice => justice
Span 51-52:  law => law
Span 28-29:  new => new
Span 21-22:  pledged => pledge-01
Span 8-9:  promised => promise-01
Span 35-36:  region => region
Span 49-50:  rule => rule-03
Span 33-34:  special => special
Span 29-30:  status => status
Span 56-57:  system => system
Span 46-47:  system => system

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(56,57,List(0),system,system,false), Span(55,56,List(1),justice,justice,false), Span(52,53,List(2),and,and,false), Span(51,52,List(3),law,law,false), Span(49,50,List(4),rule,rule-03,false), Span(46,47,List(5),system,system,false), Span(45,46,List(6),democratic,democracy,false), Span(38,39,List(7),governed,govern-01,false), Span(37,38,List(10, 9, 8),china,(country :name (name :op "China")),false), Span(35,36,List(11),region,region,false), Span(34,35,List(12),administrative,administrate-01,false), Span(33,34,List(13),special,special,false), Span(32,33,List(14),autonomous,autonomy,false), Span(29,30,List(15),status,status,false), Span(28,29,List(16),new,new,false), Span(26,27,List(17),enjoy,enjoy-01,false), Span(24,25,List(18),colony,colony,false), Span(21,22,List(19),pledged,pledge-01,false), Span(19,20,List(21, 20),1997,(date-entity :year 1997),false), Span(17,18,List(24, 23, 22),china,(country :name (name :op "China")),false), Span(13,15,List(28, 27, 26, 25),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(11,12,List(29),all,all,false), Span(10,11,List(30),hand,hand,false), Span(8,9,List(31),promised,promise-01,false), Span(7,8,List(34, 33, 32),britain,(country :name (name :op "Britain")),false), Span(6,7,List(35),deal,deal-01,false), Span(1,2,List(36),and,and,false)),Map(30 -> hand, 2 -> and, 5 -> system, 33 -> name, 27 -> "hong", 12 -> administrate-01, 8 -> country, 15 -> status, 36 -> and, 21 -> 1997, 18 -> colony, 24 -> "China", 35 -> deal-01, 7 -> govern-01, 1 -> justice, 17 -> enjoy-01, 23 -> name, 26 -> name, 4 -> rule-03, 11 -> region, 32 -> country, 14 -> autonomy, 29 -> all, 20 -> date-entity, 34 -> "Britain", 28 -> "kong", 6 -> democracy, 9 -> name, 0 -> system, 22 -> country, 16 -> new, 19 -> pledge-01, 10 -> "China", 3 -> law, 31 -> promise-01, 25 -> country, 13 -> special),Map(e -> enjoy-01, n -> name, h -> hand, s2 -> system, d3 -> deal-01, p2 -> promise-01, j -> justice, a3 -> autonomy, c4 -> country, n4 -> name, s -> system, s4 -> status, d -> democracy, 1 -> 1997, r2 -> region, g -> govern-01, p -> pledge-01, a -> and, c3 -> country, n3 -> name, a5 -> and, d2 -> date-entity, a2 -> administrate-01, r -> rule-03, c -> country, s3 -> special, l -> law, n2 -> new, c2 -> colony, a4 -> all, n5 -> name, c5 -> country))),[Ljava.lang.String;@30775be8,Annotation([Ljava.lang.String;@6c32f533,[Ljava.lang.String;@5801ec4,[Ljava.lang.String;@1e63d8ae),Annotation([Ljava.lang.String;@2d269718,[Ljava.lang.String;@4089bfd0,[Ledu.cmu.lti.nlp.amr.Dependency;@139011ca),Annotation([Ljava.lang.String;@577feece,[Ljava.lang.String;@10174343,[Ljava.lang.String;@6740ebf5),Annotation([Ljava.lang.String;@574356c8,[Ljava.lang.String;@5f6913a,[Ledu.cmu.lti.nlp.amr.Entity;@7eb879e4))
AMR:
(a / and, op, l / law)
(a / and, op, s / system)
(a2 / administrate-01, ARG0, a4 / all)
(a5 / and, op, r / rule-03)
(c / country, name, n / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(d / democracy, mod, c2 / colony)
(d2 / date-entity, year, 1 / 1997)
(d3 / deal-01, ARG0, c5 / country)
(e / enjoy-01, ARG0, c2 / colony)
(e / enjoy-01, ARG1, s4 / status)
(g / govern-01, ARG0, s4 / status)
(g / govern-01, ARG1, c / country)
(n / name, op, "China")
(n3 / name, op, "China")
(n4 / name, op, "hong")
(n4 / name, op, "kong")
(n5 / name, op, "Britain")
(p / pledge-01, ARG0, c5 / country)
(p / pledge-01, ARG1, e / enjoy-01)
(p / pledge-01, consist, c3 / country)
(p2 / promise-01, ARG0, c5 / country)
(p2 / promise-01, ARG1, d2 / date-entity)
(p2 / promise-01, ARG2, h / hand)
(r / rule-03, ARG0, l / law)
(r / rule-03, ARG1, c5 / country)
(r2 / region, location, c / country)
(r2 / region, mod, a2 / administrate-01)
(r2 / region, mod, a3 / autonomy)
(r2 / region, mod, s3 / special)
(s / system, mod, j / justice)
(s2 / system, op, e / enjoy-01)
(s4 / status, mod, n2 / new)
(s4 / status, poss, c4 / country)

Decoded in 2,240,100 microseconds
Sentence: hed promised to relieve andy ramsay at the secondhand book stall

Spans:
Span 9-10:  book => book
Span 1-2:  promised => promise-01
Span 3-4:  relieve => relieve-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),book,book,false), Span(3,4,List(1),relieve,relieve-01,false), Span(1,2,List(2),promised,promise-01,false)),Map(2 -> promise-01, 1 -> relieve-01, 0 -> book),Map(b -> book, p -> promise-01, r -> relieve-01))),[Ljava.lang.String;@14aa8bb,Annotation([Ljava.lang.String;@4c8b8da6,[Ljava.lang.String;@5e00b48c,[Ljava.lang.String;@4d838b),Annotation([Ljava.lang.String;@60f71ad4,[Ljava.lang.String;@7f028607,[Ledu.cmu.lti.nlp.amr.Dependency;@7ead76b5),Annotation([Ljava.lang.String;@2e4ca60c,[Ljava.lang.String;@2a297593,[Ljava.lang.String;@7e61b85),Annotation([Ljava.lang.String;@1418bcd0,[Ljava.lang.String;@641405fe,[Ledu.cmu.lti.nlp.amr.Entity;@5e959a06))
AMR:
(b / book, op, p / promise-01)
(p / promise-01, ARG2, r / relieve-01)

Decoded in 8,539 microseconds
Sentence: chancellor kohl has promised generous aid to support reforms in east germany

NER Entity: (country :name (name :op "germany"))
Spans:
Span 5-6:  aid => aid-01
Span 10-11:  east => east
Span 4-5:  generous => generous-41
Span 3-4:  promised => promise-01
Span 8-9:  reforms => reform-01
Span 7-8:  support => support-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),east,east,false), Span(8,9,List(1),reforms,reform-01,false), Span(7,8,List(2),support,support-01,false), Span(5,6,List(3),aid,aid-01,false), Span(4,5,List(4),generous,generous-41,false), Span(3,4,List(5),promised,promise-01,false)),Map(2 -> support-01, 5 -> promise-01, 1 -> reform-01, 4 -> generous-41, 0 -> east, 3 -> aid-01),Map(e -> east, s -> support-01, p -> promise-01, g -> generous-41, a -> aid-01, r -> reform-01))),[Ljava.lang.String;@2fb3306d,Annotation([Ljava.lang.String;@1d305c92,[Ljava.lang.String;@520d8436,[Ljava.lang.String;@75631f4f),Annotation([Ljava.lang.String;@3e9cb7be,[Ljava.lang.String;@22e33b0f,[Ledu.cmu.lti.nlp.amr.Dependency;@743a67ad),Annotation([Ljava.lang.String;@266cca78,[Ljava.lang.String;@30609ffd,[Ljava.lang.String;@17a7b3db),Annotation([Ljava.lang.String;@310faff,[Ljava.lang.String;@4fce7ceb,[Ledu.cmu.lti.nlp.amr.Entity;@7d6b513b))
AMR:
(g / generous-41, ARG1, a / aid-01)
(p / promise-01, ARG2, s / support-01)
(r / reform-01, mod, e / east)
(s / support-01, ARG0, a / aid-01)
(s / support-01, ARG1, r / reform-01)

Decoded in 20,852 microseconds
Sentence: law a canadian promised tranquillity  astor an american made the times once more respectable dash

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = law a canadian promised tranquillity  astor an american made the times once more respectable dash
myTokenized = law a canadian promised tranquillity astor an american made the times once more respectable dash
i = 5
prefix = List(law, a, canadian, promised, tranquillity, astor)
regexr = \Ql\E ?\Qa\E ?\Qw\E ?\Qa\E ?\Qc\E ?\Qa\E ?\Qn\E ?\Qa\E ?\Qd\E ?\Qi\E ?\Qa\E ?\Qn\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qq\E ?\Qu\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qt\E ?\Qy\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: what a time to fall sick wont be long promised hazel coming back

Spans:
Span 12-13:  back => back
Span 9-10:  promised => promise-01
Span 5-6:  sick => sick
Span 2-3:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),back,back,false), Span(9,10,List(1),promised,promise-01,false), Span(5,6,List(2),sick,sick,false), Span(2,3,List(3),time,time,false)),Map(2 -> sick, 1 -> promise-01, 0 -> back, 3 -> time),Map(t -> time, b -> back, s -> sick, p -> promise-01))),[Ljava.lang.String;@a4029df,Annotation([Ljava.lang.String;@7a7cf4ba,[Ljava.lang.String;@21a71e29,[Ljava.lang.String;@62ad2701),Annotation([Ljava.lang.String;@55dbe543,[Ljava.lang.String;@57a8bdbe,[Ledu.cmu.lti.nlp.amr.Dependency;@74131e8),Annotation([Ljava.lang.String;@49337a10,[Ljava.lang.String;@5292d5fb,[Ljava.lang.String;@261e7c17),Annotation([Ljava.lang.String;@1b64dd8e,[Ljava.lang.String;@7b0da3ae,[Ledu.cmu.lti.nlp.amr.Entity;@3c75339f))
AMR:
(b / back, mod, s / sick)
(p / promise-01, ARG0, t / time)
(p / promise-01, time, b / back)

Decoded in 10,953 microseconds
Sentence: one of their players lawrie pearson has promised the plasticpitch practitioners from the third a rough ride especially if the wind blows off the sea and a spot of rain makes our ground heavy

Spans:
Span 25-26:  and => and
Span 17-18:  especially => especially
Span 32-33:  ground => ground
Span 33-34:  heavy => heavy
Span 22-23:  off => off
Span 3-4:  players => (person :ARG0-of play-01)
Span 7-8:  promised => promise-01
Span 29-30:  rain => rain-01
Span 16-17:  ride => ride-01
Span 15-16:  rough => rough
Span 24-25:  sea => sea
Span 27-28:  spot => spot
Span 20-21:  wind => wind

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),heavy,heavy,false), Span(32,33,List(1),ground,ground,false), Span(29,30,List(2),rain,rain-01,false), Span(27,28,List(3),spot,spot,false), Span(25,26,List(4),and,and,false), Span(24,25,List(5),sea,sea,false), Span(22,23,List(6),off,off,false), Span(20,21,List(7),wind,wind,false), Span(17,18,List(8),especially,especially,false), Span(16,17,List(9),ride,ride-01,false), Span(15,16,List(10),rough,rough,false), Span(7,8,List(11),promised,promise-01,false), Span(3,4,List(13, 12),players,(person :ARG0-of play-01),false)),Map(2 -> rain-01, 5 -> sea, 12 -> person, 8 -> especially, 7 -> wind, 1 -> ground, 4 -> and, 11 -> promise-01, 6 -> off, 0 -> heavy, 9 -> ride-01, 3 -> spot, 10 -> rough, 13 -> play-01),Map(e -> especially, w -> wind, h -> heavy, r3 -> rough, s2 -> sea, p2 -> person, s -> spot, g -> ground, r2 -> ride-01, p -> promise-01, a -> and, r -> rain-01, o -> off, p3 -> play-01))),[Ljava.lang.String;@32902abb,Annotation([Ljava.lang.String;@16e574ec,[Ljava.lang.String;@325f3db2,[Ljava.lang.String;@acb8af4),Annotation([Ljava.lang.String;@390f9eb5,[Ljava.lang.String;@307c9a57,[Ledu.cmu.lti.nlp.amr.Dependency;@4478de9f),Annotation([Ljava.lang.String;@5b5fbbd7,[Ljava.lang.String;@6a254f1e,[Ljava.lang.String;@376d7103),Annotation([Ljava.lang.String;@72169862,[Ljava.lang.String;@296e8472,[Ledu.cmu.lti.nlp.amr.Entity;@16b96d9e))
AMR:
(a / and, mod, e / especially)
(a / and, mod, w / wind)
(a / and, op, p2 / person)
(a / and, op, s / spot)
(h / heavy, location, g / ground)
(h / heavy, op, r / rain-01)
(o / off, op, a / and)
(o / off, op, s2 / sea)
(p / promise-01, ARG1, r2 / ride-01)
(p3 / play-01, ARG0, p2 / person)
(r2 / ride-01, ARG1, a / and)
(r2 / ride-01, mod, r3 / rough)
(s / spot, topic, r / rain-01)

Decoded in 153,962 microseconds
Sentence: as they left the embassy those who had arrived in cars were invited to leave their keys and in return were promised that their vehicles would be brought eventually to the west

Spans:
Span 17-18:  and => and
Span 8-9:  arrived => arrive-01
Span 10-11:  cars => car
Span 4-5:  embassy => embassy
Span 28-29:  eventually => eventual
Span 12-13:  invited => invite-01
Span 16-17:  keys => key
Span 14-15:  leave => leave-01
Span 21-22:  promised => promise-01
Span 1-2:  they => they
Span 24-25:  vehicles => vehicle
Span 31-32:  west => west

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),west,west,false), Span(28,29,List(1),eventually,eventual,false), Span(24,25,List(2),vehicles,vehicle,false), Span(21,22,List(3),promised,promise-01,false), Span(17,18,List(4),and,and,false), Span(16,17,List(5),keys,key,false), Span(14,15,List(6),leave,leave-01,false), Span(12,13,List(7),invited,invite-01,false), Span(10,11,List(8),cars,car,false), Span(8,9,List(9),arrived,arrive-01,false), Span(4,5,List(10),embassy,embassy,false), Span(1,2,List(11),they,they,false)),Map(2 -> vehicle, 5 -> key, 8 -> car, 7 -> invite-01, 1 -> eventual, 11 -> they, 4 -> and, 6 -> leave-01, 9 -> arrive-01, 0 -> west, 10 -> embassy, 3 -> promise-01),Map(e -> eventual, w -> west, t -> they, k -> key, e2 -> embassy, v -> vehicle, p -> promise-01, a -> and, a2 -> arrive-01, i -> invite-01, c -> car, l -> leave-01))),[Ljava.lang.String;@6c7733eb,Annotation([Ljava.lang.String;@5f1c0ef,[Ljava.lang.String;@42b18df5,[Ljava.lang.String;@16def208),Annotation([Ljava.lang.String;@6e3f6f3,[Ljava.lang.String;@6069cf0d,[Ledu.cmu.lti.nlp.amr.Dependency;@42988fee),Annotation([Ljava.lang.String;@2e11746a,[Ljava.lang.String;@7bf1f2c6,[Ljava.lang.String;@4979e4bc),Annotation([Ljava.lang.String;@61981853,[Ljava.lang.String;@48652333,[Ledu.cmu.lti.nlp.amr.Entity;@67ea0e66))
AMR:
(a / and, op, l / leave-01)
(a / and, op, p / promise-01)
(a2 / arrive-01, ARG1, w / west)
(a2 / arrive-01, ARG4, c / car)
(i / invite-01, ARG0, t / they)
(i / invite-01, ARG1, l / leave-01)
(k / key, poss, c / car)
(l / leave-01, ARG0, e / eventual)
(l / leave-01, ARG1, k / key)
(p / promise-01, ARG0, e2 / embassy)
(p / promise-01, ARG1, v / vehicle)

Decoded in 101,660 microseconds
Sentence: have promised superego that this echoing afternoon will be packed with domestic and professional toil

Spans:
Span 6-7:  afternoon => afternoon
Span 12-13:  and => and
Span 11-12:  domestic => domestic
Span 9-10:  packed => pack-01
Span 13-14:  professional => professional
Span 1-2:  promised => promise-01
Span 4-5:  this => this

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),professional,professional,false), Span(12,13,List(1),and,and,false), Span(11,12,List(2),domestic,domestic,false), Span(9,10,List(3),packed,pack-01,false), Span(6,7,List(4),afternoon,afternoon,false), Span(4,5,List(5),this,this,false), Span(1,2,List(6),promised,promise-01,false)),Map(2 -> domestic, 5 -> this, 1 -> and, 4 -> afternoon, 6 -> promise-01, 0 -> professional, 3 -> pack-01),Map(t -> this, p2 -> pack-01, d -> domestic, p -> professional, a -> and, a2 -> afternoon, p3 -> promise-01))),[Ljava.lang.String;@37577fd6,Annotation([Ljava.lang.String;@5189d6fc,[Ljava.lang.String;@30816436,[Ljava.lang.String;@7eda2e1a),Annotation([Ljava.lang.String;@2608ee06,[Ljava.lang.String;@1442df6c,[Ledu.cmu.lti.nlp.amr.Dependency;@325a35d8),Annotation([Ljava.lang.String;@408511bb,[Ljava.lang.String;@604f2d14,[Ljava.lang.String;@6e18ad71),Annotation([Ljava.lang.String;@16230e2f,[Ljava.lang.String;@57783b03,[Ledu.cmu.lti.nlp.amr.Entity;@166a6ed2))
AMR:
(a / and, op, d / domestic)
(a2 / afternoon, mod, t / this)
(p2 / pack-01, ARG1, a2 / afternoon)
(p2 / pack-01, ARG2, a / and)
(p3 / promise-01, ARG0, p / professional)
(p3 / promise-01, ARG1, p2 / pack-01)

Decoded in 30,914 microseconds
Sentence: promise me youll never leave me, i promise she whispered

Spans:
Span 7-8:  i => i
Span 4-5:  leave => leave-01
Span 8-9:  promise => promise-01
Span 0-1:  promise => promise-01
Span 9-10:  she => she
Span 10-11:  whispered => whisper-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),whispered,whisper-01,false), Span(9,10,List(1),she,she,false), Span(8,9,List(2),promise,promise-01,false), Span(7,8,List(3),i,i,false), Span(4,5,List(4),leave,leave-01,false), Span(0,1,List(5),promise,promise-01,false)),Map(2 -> promise-01, 5 -> promise-01, 1 -> she, 4 -> leave-01, 0 -> whisper-01, 3 -> i),Map(w -> whisper-01, p2 -> promise-01, s -> she, p -> promise-01, i -> i, l -> leave-01))),[Ljava.lang.String;@2591a87d,Annotation([Ljava.lang.String;@7dccb9cf,[Ljava.lang.String;@bbb058f,[Ljava.lang.String;@2369f54d),Annotation([Ljava.lang.String;@167a465,[Ljava.lang.String;@3b59e39b,[Ledu.cmu.lti.nlp.amr.Dependency;@a6df38e),Annotation([Ljava.lang.String;@3890f4fb,[Ljava.lang.String;@34c3a7c0,[Ljava.lang.String;@193a4950),Annotation([Ljava.lang.String;@41a33020,[Ljava.lang.String;@40aca68a,[Ledu.cmu.lti.nlp.amr.Entity;@6e9cf32))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, w / whisper-01)
(p2 / promise-01, ARG0, i / i)
(p2 / promise-01, ARG1, l / leave-01)
(w / whisper-01, ARG0, s / she)

Decoded in 77,241 microseconds
Sentence: we suspected her of having let the side down by promising all sorts of privileges and services wives werent supposed to deliver any more

Spans:
Span 11-12:  all => all
Span 15-16:  and => and
Span 22-23:  any => any
Span 21-22:  deliver => deliver-01
Span 8-9:  down => down
Span 5-6:  let => let-01
Span 14-15:  privileges => privilege
Span 10-11:  promising => promise-01
Span 16-17:  services => service
Span 7-8:  side => side
Span 12-13:  sorts => sort
Span 19-20:  supposed => suppose-02
Span 1-2:  suspected => suspect-01
Span 0-1:  we => we

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),any,any,false), Span(21,22,List(1),deliver,deliver-01,false), Span(19,20,List(2),supposed,suppose-02,false), Span(16,17,List(3),services,service,false), Span(15,16,List(4),and,and,false), Span(14,15,List(5),privileges,privilege,false), Span(12,13,List(6),sorts,sort,false), Span(11,12,List(7),all,all,false), Span(10,11,List(8),promising,promise-01,false), Span(8,9,List(9),down,down,false), Span(7,8,List(10),side,side,false), Span(5,6,List(11),let,let-01,false), Span(1,2,List(12),suspected,suspect-01,false), Span(0,1,List(13),we,we,false)),Map(2 -> suppose-02, 5 -> privilege, 12 -> suspect-01, 8 -> promise-01, 7 -> all, 1 -> deliver-01, 4 -> and, 11 -> let-01, 6 -> sort, 0 -> any, 9 -> down, 3 -> service, 10 -> side, 13 -> we),Map(s5 -> suspect-01, w -> we, s2 -> service, p2 -> promise-01, a3 -> all, s -> suppose-02, s4 -> side, d -> deliver-01, p -> privilege, a -> any, d2 -> down, a2 -> and, s3 -> sort, l -> let-01))),[Ljava.lang.String;@6021df29,Annotation([Ljava.lang.String;@4fc22e0d,[Ljava.lang.String;@555d8063,[Ljava.lang.String;@6d980f5d),Annotation([Ljava.lang.String;@1a18dae1,[Ljava.lang.String;@55c9f729,[Ledu.cmu.lti.nlp.amr.Dependency;@3e81d0bf),Annotation([Ljava.lang.String;@3cafcba8,[Ljava.lang.String;@3963a1b8,[Ljava.lang.String;@3c0e5477),Annotation([Ljava.lang.String;@50cb6f6e,[Ljava.lang.String;@5c00c832,[Ledu.cmu.lti.nlp.amr.Entity;@375779ce))
AMR:
(a2 / and, op, p / privilege)
(a2 / and, op, s2 / service)
(d / deliver-01, ARG0, s3 / sort)
(d / deliver-01, ARG2, a / any)
(l / let-01, ARG1, s4 / side)
(l / let-01, manner, p2 / promise-01)
(p2 / promise-01, ARG1, a2 / and)
(p2 / promise-01, mod, d2 / down)
(p2 / promise-01, purpose, s / suppose-02)
(s / suppose-02, ARG2, d / deliver-01)
(s3 / sort, mod, a3 / all)
(s5 / suspect-01, ARG0, w / we)
(s5 / suspect-01, ARG1, l / let-01)

Decoded in 135,263 microseconds
Sentence: regarded as the architect of chiles relative economic stability mr buchi promised jobs education and material gains

Spans:
Span 14-15:  and => and
Span 7-8:  economic => economy
Span 13-14:  education => educate-01
Span 12-13:  jobs => job
Span 15-16:  material => material
Span 11-12:  promised => promise-01
Span 0-1:  regarded => regard-01
Span 6-7:  relative => relative
Span 8-9:  stability => stability

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),material,material,false), Span(14,15,List(1),and,and,false), Span(13,14,List(2),education,educate-01,false), Span(12,13,List(3),jobs,job,false), Span(11,12,List(4),promised,promise-01,false), Span(8,9,List(5),stability,stability,false), Span(7,8,List(6),economic,economy,false), Span(6,7,List(7),relative,relative,false), Span(0,1,List(8),regarded,regard-01,false)),Map(2 -> educate-01, 5 -> stability, 8 -> regard-01, 7 -> relative, 1 -> and, 4 -> promise-01, 6 -> economy, 0 -> material, 3 -> job),Map(e -> educate-01, e2 -> economy, s -> stability, j -> job, m -> material, r2 -> regard-01, p -> promise-01, a -> and, r -> relative))),[Ljava.lang.String;@4ffddfc4,Annotation([Ljava.lang.String;@246de5e3,[Ljava.lang.String;@2b0facc4,[Ljava.lang.String;@12178df2),Annotation([Ljava.lang.String;@48681425,[Ljava.lang.String;@2902ae46,[Ledu.cmu.lti.nlp.amr.Dependency;@6eff8ab2),Annotation([Ljava.lang.String;@4aeae50c,[Ljava.lang.String;@3639d41,[Ljava.lang.String;@e91824),Annotation([Ljava.lang.String;@472fe3f3,[Ljava.lang.String;@191e8b08,[Ledu.cmu.lti.nlp.amr.Entity;@2439c71a))
AMR:
(a / and, op, m / material)
(a / and, op, p / promise-01)
(e / educate-01, ARG1, r / relative)
(e2 / economy, degree, r / relative)
(p / promise-01, ARG0, s / stability)
(p / promise-01, ARG1, e / educate-01)
(p / promise-01, ARG2, j / job)
(r2 / regard-01, ARG0, a / and)

Decoded in 94,723 microseconds
Sentence: this evening he was in luck or so it promised

Spans:
Span 1-2:  evening => evening
Span 2-3:  he => he
Span 8-9:  it => it
Span 5-6:  luck => luck
Span 6-7:  or => or
Span 9-10:  promised => promise-01
Span 7-8:  so => so
Span 0-1:  this => this

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),promised,promise-01,false), Span(8,9,List(1),it,it,false), Span(7,8,List(2),so,so,false), Span(6,7,List(3),or,or,false), Span(5,6,List(4),luck,luck,false), Span(2,3,List(5),he,he,false), Span(1,2,List(6),evening,evening,false), Span(0,1,List(7),this,this,false)),Map(2 -> so, 5 -> he, 7 -> this, 1 -> it, 4 -> luck, 6 -> evening, 0 -> promise-01, 3 -> or),Map(e -> evening, h -> he, t -> this, s -> so, p -> promise-01, i -> it, l -> luck, o -> or))),[Ljava.lang.String;@4d3e8e8a,Annotation([Ljava.lang.String;@46002da4,[Ljava.lang.String;@35b48de3,[Ljava.lang.String;@60cf4da0),Annotation([Ljava.lang.String;@49f17507,[Ljava.lang.String;@b3a447e,[Ledu.cmu.lti.nlp.amr.Dependency;@1e66b1f4),Annotation([Ljava.lang.String;@682d19c3,[Ljava.lang.String;@68f686a3,[Ljava.lang.String;@11016d2b),Annotation([Ljava.lang.String;@74a62ac5,[Ljava.lang.String;@49422757,[Ledu.cmu.lti.nlp.amr.Entity;@1624e654))
AMR:
(e / evening, domain, h / he)
(e / evening, mod, t / this)
(o / or, op, l / luck)
(o / or, op, p / promise-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, i / it)
(s / so, op, p / promise-01)

Decoded in 29,935 microseconds
Sentence: but again the state sector is obliged to come to some kind of rescue for a law was passed last year promising grants of about 500 million towards all world cuprelated hotel improvement schemes

Spans:
Span 25-26:  500 => 500
Span 1-2:  again => again
Span 28-29:  all => all
Span 0-1:  but => contrast-01
Span 22-23:  grants => grant-01
Span 31-32:  hotel => hotel
Span 32-33:  improvement => improve-01
Span 11-12:  kind => kind
Span 19-20:  last => last
Span 16-17:  law => law
Span 6-7:  obliged => oblige-02
Span 21-22:  promising => promise-01
Span 13-14:  rescue => rescue-01
Span 33-34:  schemes => scheme-01
Span 4-5:  sector => sector
Span 10-11:  some => some
Span 3-4:  state => state
Span 29-30:  world => world
Span 20-21:  year => year

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),schemes,scheme-01,false), Span(32,33,List(1),improvement,improve-01,false), Span(31,32,List(2),hotel,hotel,false), Span(29,30,List(3),world,world,false), Span(28,29,List(4),all,all,false), Span(25,26,List(5),500,500,false), Span(22,23,List(6),grants,grant-01,false), Span(21,22,List(7),promising,promise-01,false), Span(20,21,List(8),year,year,false), Span(19,20,List(9),last,last,false), Span(16,17,List(10),law,law,false), Span(13,14,List(11),rescue,rescue-01,false), Span(11,12,List(12),kind,kind,false), Span(10,11,List(13),some,some,false), Span(6,7,List(14),obliged,oblige-02,false), Span(4,5,List(15),sector,sector,false), Span(3,4,List(16),state,state,false), Span(1,2,List(17),again,again,false), Span(0,1,List(18),but,contrast-01,false)),Map(2 -> hotel, 5 -> 500, 12 -> kind, 15 -> sector, 8 -> year, 18 -> contrast-01, 7 -> promise-01, 17 -> again, 1 -> improve-01, 4 -> all, 11 -> rescue-01, 14 -> oblige-02, 6 -> grant-01, 0 -> scheme-01, 9 -> last, 16 -> state, 3 -> world, 10 -> law, 13 -> some),Map(w -> world, h -> hotel, s2 -> some, 5 -> 500, k -> kind, s -> scheme-01, s4 -> state, g -> grant-01, p -> promise-01, y -> year, a -> all, l2 -> law, a2 -> again, i -> improve-01, r -> rescue-01, c -> contrast-01, s3 -> sector, l -> last, o -> oblige-02))),[Ljava.lang.String;@508da027,Annotation([Ljava.lang.String;@20d89c2,[Ljava.lang.String;@46cf209b,[Ljava.lang.String;@4865c46e),Annotation([Ljava.lang.String;@114336e4,[Ljava.lang.String;@53c8bb96,[Ledu.cmu.lti.nlp.amr.Dependency;@1f939fd3),Annotation([Ljava.lang.String;@14e1e5d7,[Ljava.lang.String;@7ab890f6,[Ljava.lang.String;@6b35456b),Annotation([Ljava.lang.String;@7660aac9,[Ljava.lang.String;@446caed6,[Ledu.cmu.lti.nlp.amr.Entity;@3b4a86b2))
AMR:
(c / contrast-01, ARG0, 5 / 500)
(c / contrast-01, ARG1, o / oblige-02)
(c / contrast-01, ARG2, p / promise-01)
(g / grant-01, ARG0, a2 / again)
(g / grant-01, ARG1, s / scheme-01)
(i / improve-01, ARG0, h / hotel)
(i / improve-01, ARG1, w / world)
(k / kind, mod, s2 / some)
(o / oblige-02, ARG0, y / year)
(o / oblige-02, ARG1, s3 / sector)
(p / promise-01, ARG0, k / kind)
(p / promise-01, ARG1, l2 / law)
(p / promise-01, ARG2, g / grant-01)
(r / rescue-01, mod, k / kind)
(s / scheme-01, ARG1, i / improve-01)
(s / scheme-01, mod, a / all)
(s3 / sector, mod, s4 / state)
(y / year, mod, l / last)

Decoded in 405,504 microseconds
Sentence: and mr mawson warning against vigilante protection promised that all resources necessary would be deployed to stop attacks

Spans:
Span 9-10:  all => all
Span 0-1:  and => and
Span 17-18:  attacks => attack-01
Span 14-15:  deployed => deploy-01
Span 7-8:  promised => promise-01
Span 6-7:  protection => protect-01
Span 10-11:  resources => resource
Span 16-17:  stop => stop-01
Span 3-4:  warning => warn-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),attacks,attack-01,false), Span(16,17,List(1),stop,stop-01,false), Span(14,15,List(2),deployed,deploy-01,false), Span(10,11,List(3),resources,resource,false), Span(9,10,List(4),all,all,false), Span(7,8,List(5),promised,promise-01,false), Span(6,7,List(6),protection,protect-01,false), Span(3,4,List(7),warning,warn-01,false), Span(0,1,List(8),and,and,false)),Map(2 -> deploy-01, 5 -> promise-01, 8 -> and, 7 -> warn-01, 1 -> stop-01, 4 -> all, 6 -> protect-01, 0 -> attack-01, 3 -> resource),Map(w -> warn-01, p2 -> protect-01, a3 -> and, s -> stop-01, d -> deploy-01, p -> promise-01, a -> attack-01, a2 -> all, r -> resource))),[Ljava.lang.String;@7445ae4e,Annotation([Ljava.lang.String;@ab6be85,[Ljava.lang.String;@63961341,[Ljava.lang.String;@11ca437b),Annotation([Ljava.lang.String;@7614495c,[Ljava.lang.String;@2ddc7394,[Ledu.cmu.lti.nlp.amr.Dependency;@64281111),Annotation([Ljava.lang.String;@278a676,[Ljava.lang.String;@3ef88e3e,[Ljava.lang.String;@3042a8be),Annotation([Ljava.lang.String;@68546ab2,[Ljava.lang.String;@7e2901a0,[Ledu.cmu.lti.nlp.amr.Entity;@3629f015))
AMR:
(a / attack-01, ARG1, w / warn-01)
(a3 / and, op, w / warn-01)
(d / deploy-01, ARG1, s / stop-01)
(p / promise-01, ARG0, w / warn-01)
(p / promise-01, ARG1, p2 / protect-01)
(r / resource, quant, a2 / all)
(s / stop-01, ARG0, r / resource)
(s / stop-01, ARG1, a / attack-01)

Decoded in 154,471 microseconds
Sentence: why bother about the poor and the persecuted but instead the senate also subjected these bills to intense scrutiny to prolonged hearings of experts in the field concerned and proposed a string of amendments to make the legislation more effective more humane and better able to stand up to what promised to be formidable challenges in the courts

Spans:
Span 44-45:  able => possible
Span 12-13:  also => also
Span 33-34:  amendments => amend-01
Span 42-43:  and => and
Span 28-29:  and => and
Span 5-6:  and => and
Span 15-16:  bills => bill-01
Span 1-2:  bother => bother-02
Span 8-9:  but => contrast-01
Span 54-55:  challenges => (thing :ARG2-of challenge-01)
Span 27-28:  concerned => concern-01
Span 57-58:  courts => court
Span 39-40:  effective => effective
Span 23-24:  experts => (person :ARG1-of expert-41)
Span 26-27:  field => field
Span 21-22:  hearings => hearing
Span 41-42:  humane => humane
Span 9-10:  instead => instead
Span 17-18:  intense => intense
Span 37-38:  legislation => legislation
Span 7-8:  persecuted => persecute-01
Span 4-5:  poor => poor
Span 20-21:  prolonged => prolong-01
Span 50-51:  promised => promise-01
Span 29-30:  proposed => propose-01
Span 18-19:  scrutiny => scrutiny
Span 11-12:  senate => senate
Span 31-32:  string => string
Span 13-14:  subjected => subject-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(57,58,List(0),courts,court,false), Span(54,55,List(2, 1),challenges,(thing :ARG2-of challenge-01),false), Span(50,51,List(3),promised,promise-01,false), Span(44,45,List(4),able,possible,false), Span(42,43,List(5),and,and,false), Span(41,42,List(6),humane,humane,false), Span(39,40,List(7),effective,effective,false), Span(37,38,List(8),legislation,legislation,false), Span(33,34,List(9),amendments,amend-01,false), Span(31,32,List(10),string,string,false), Span(29,30,List(11),proposed,propose-01,false), Span(28,29,List(12),and,and,false), Span(27,28,List(13),concerned,concern-01,false), Span(26,27,List(14),field,field,false), Span(23,24,List(16, 15),experts,(person :ARG1-of expert-41),false), Span(21,22,List(17),hearings,hearing,false), Span(20,21,List(18),prolonged,prolong-01,false), Span(18,19,List(19),scrutiny,scrutiny,false), Span(17,18,List(20),intense,intense,false), Span(15,16,List(21),bills,bill-01,false), Span(13,14,List(22),subjected,subject-01,false), Span(12,13,List(23),also,also,false), Span(11,12,List(24),senate,senate,false), Span(9,10,List(25),instead,instead,false), Span(8,9,List(26),but,contrast-01,false), Span(7,8,List(27),persecuted,persecute-01,false), Span(5,6,List(28),and,and,false), Span(4,5,List(29),poor,poor,false), Span(1,2,List(30),bother,bother-02,false)),Map(30 -> bother-02, 2 -> challenge-01, 5 -> and, 27 -> persecute-01, 12 -> and, 8 -> legislation, 15 -> person, 21 -> bill-01, 18 -> prolong-01, 24 -> senate, 7 -> effective, 1 -> thing, 17 -> hearing, 23 -> also, 26 -> contrast-01, 4 -> possible, 11 -> propose-01, 14 -> field, 29 -> poor, 20 -> intense, 28 -> and, 6 -> humane, 9 -> amend-01, 0 -> court, 22 -> subject-01, 16 -> expert-41, 19 -> scrutiny, 10 -> string, 3 -> promise-01, 25 -> instead, 13 -> concern-01),Map(e -> effective, h -> humane, h2 -> hearing, p5 -> prolong-01, s2 -> scrutiny, t -> thing, b -> bill-01, b2 -> bother-02, p2 -> possible, e2 -> expert-41, c4 -> contrast-01, a3 -> and, s -> string, s4 -> senate, p -> promise-01, a -> and, c3 -> concern-01, p4 -> person, a5 -> and, p7 -> poor, i2 -> instead, a2 -> amend-01, i -> intense, c -> court, s3 -> subject-01, p6 -> persecute-01, l -> legislation, f -> field, p3 -> propose-01, c2 -> challenge-01, a4 -> also))),[Ljava.lang.String;@68daad6,Annotation([Ljava.lang.String;@3ecacaf6,[Ljava.lang.String;@73d2fcae,[Ljava.lang.String;@20cb3eea),Annotation([Ljava.lang.String;@7f8f8577,[Ljava.lang.String;@2783890e,[Ledu.cmu.lti.nlp.amr.Dependency;@2c9b0a66),Annotation([Ljava.lang.String;@76c7c56a,[Ljava.lang.String;@3571ef12,[Ljava.lang.String;@4b06a227),Annotation([Ljava.lang.String;@207fd4ec,[Ljava.lang.String;@2873e29f,[Ledu.cmu.lti.nlp.amr.Entity;@50234978))
AMR:
(a / and, op, e / effective)
(a / and, op, h / humane)
(a / and, op, l / legislation)
(a / and, op, p2 / possible)
(a2 / amend-01, ARG2, l / legislation)
(a3 / and, op, c3 / concern-01)
(a3 / and, op, p / promise-01)
(a3 / and, op, p3 / propose-01)
(a5 / and, op, p6 / persecute-01)
(a5 / and, op, p7 / poor)
(b / bill-01, ARG1, h2 / hearing)
(b2 / bother-02, ARG1, a5 / and)
(c2 / challenge-01, ARG1, c / court)
(c2 / challenge-01, ARG2, t / thing)
(c3 / concern-01, ARG0, a5 / and)
(c3 / concern-01, ARG1, s / string)
(c4 / contrast-01, ARG1, a5 / and)
(c4 / contrast-01, ARG2, s3 / subject-01)
(e2 / expert-41, ARG1, p4 / person)
(p / promise-01, ARG1, t / thing)
(p3 / propose-01, ARG0, f / field)
(p3 / propose-01, ARG1, a2 / amend-01)
(p5 / prolong-01, ARG1, h2 / hearing)
(p6 / persecute-01, ARG1, i2 / instead)
(s2 / scrutiny, mod, i / intense)
(s3 / subject-01, ARG0, h2 / hearing)
(s3 / subject-01, ARG1, s4 / senate)
(s3 / subject-01, ARG2, s2 / scrutiny)
(s3 / subject-01, ARG3, p4 / person)
(s3 / subject-01, mod, a4 / also)

Decoded in 1,204,549 microseconds
Sentence: gerrard said i never promised to pay it john

Spans:
Span 2-3:  i => i
Span 7-8:  it => it
Span 6-7:  pay => pay-01
Span 4-5:  promised => promise-01
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),it,it,false), Span(6,7,List(1),pay,pay-01,false), Span(4,5,List(2),promised,promise-01,false), Span(2,3,List(3),i,i,false), Span(1,2,List(4),said,say-01,false)),Map(2 -> promise-01, 1 -> pay-01, 4 -> say-01, 0 -> it, 3 -> i),Map(p2 -> promise-01, s -> say-01, p -> pay-01, i2 -> i, i -> it))),[Ljava.lang.String;@3cac8e62,Annotation([Ljava.lang.String;@64b7e30c,[Ljava.lang.String;@649b5c7c,[Ljava.lang.String;@13d5047e),Annotation([Ljava.lang.String;@619f65e,[Ljava.lang.String;@127d9873,[Ledu.cmu.lti.nlp.amr.Dependency;@73a3af80),Annotation([Ljava.lang.String;@7f5737cf,[Ljava.lang.String;@37113859,[Ljava.lang.String;@4b8a774d),Annotation([Ljava.lang.String;@6f9e86f9,[Ljava.lang.String;@10af7eaf,[Ledu.cmu.lti.nlp.amr.Entity;@71a61bb7))
AMR:
(p / pay-01, ARG1, i / it)
(p2 / promise-01, ARG0, i2 / i)
(p2 / promise-01, ARG2, p / pay-01)
(s / say-01, ARG1, p2 / promise-01)

Decoded in 10,833 microseconds
Sentence: but the opposition promised to carry on its offensive against her and continuing political uncertainty will make government difficult

Spans:
Span 11-12:  and => and
Span 0-1:  but => contrast-01
Span 12-13:  continuing => continue-01
Span 18-19:  difficult => difficult
Span 8-9:  offensive => offensive
Span 2-3:  opposition => oppose-01
Span 13-14:  political => politics
Span 3-4:  promised => promise-01
Span 14-15:  uncertainty => (certainty :polarity -)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),difficult,difficult,false), Span(14,15,List(2, 1),uncertainty,(certainty :polarity -),false), Span(13,14,List(3),political,politics,false), Span(12,13,List(4),continuing,continue-01,false), Span(11,12,List(5),and,and,false), Span(8,9,List(6),offensive,offensive,false), Span(3,4,List(7),promised,promise-01,false), Span(2,3,List(8),opposition,oppose-01,false), Span(0,1,List(9),but,contrast-01,false)),Map(2 -> -, 5 -> and, 8 -> oppose-01, 7 -> promise-01, 1 -> certainty, 4 -> continue-01, 6 -> offensive, 9 -> contrast-01, 0 -> difficult, 3 -> politics),Map(p2 -> promise-01, d -> difficult, p -> politics, c3 -> contrast-01, a -> and, o2 -> oppose-01, c -> certainty, o -> offensive, c2 -> continue-01))),[Ljava.lang.String;@5065c5ab,Annotation([Ljava.lang.String;@499486c9,[Ljava.lang.String;@361d1bdc,[Ljava.lang.String;@31102445),Annotation([Ljava.lang.String;@1abd472d,[Ljava.lang.String;@8be912,[Ledu.cmu.lti.nlp.amr.Dependency;@61729d05),Annotation([Ljava.lang.String;@2ba2e53e,[Ljava.lang.String;@53785fd3,[Ljava.lang.String;@3db4075),Annotation([Ljava.lang.String;@2f64c34d,[Ljava.lang.String;@520c8a,[Ledu.cmu.lti.nlp.amr.Entity;@ab53830))
AMR:
(a / and, op, c / certainty)
(a / and, op, o / offensive)
(c / certainty, mod, p / politics)
(c / certainty, polarity, -)
(c2 / continue-01, ARG1, c / certainty)
(c3 / contrast-01, ARG1, p2 / promise-01)
(c3 / contrast-01, ARG2, a / and)
(p2 / promise-01, ARG0, o2 / oppose-01)
(p2 / promise-01, ARG1, d / difficult)

Decoded in 67,195 microseconds
Sentence: i guess its a pretty boring job so i promised to behave

Spans:
Span 11-12:  behave => behave-01
Span 5-6:  boring => bore-02
Span 1-2:  guess => guess-01
Span 8-9:  i => i
Span 0-1:  i => i
Span 6-7:  job => job
Span 4-5:  pretty => pretty
Span 9-10:  promised => promise-01
Span 7-8:  so => so

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),behave,behave-01,false), Span(9,10,List(1),promised,promise-01,false), Span(8,9,List(2),i,i,false), Span(7,8,List(3),so,so,false), Span(6,7,List(4),job,job,false), Span(5,6,List(5),boring,bore-02,false), Span(4,5,List(6),pretty,pretty,false), Span(1,2,List(7),guess,guess-01,false), Span(0,1,List(8),i,i,false)),Map(2 -> i, 5 -> bore-02, 8 -> i, 7 -> guess-01, 1 -> promise-01, 4 -> job, 6 -> pretty, 0 -> behave-01, 3 -> so),Map(b -> behave-01, b2 -> bore-02, p2 -> pretty, j -> job, s -> so, g -> guess-01, p -> promise-01, i2 -> i, i -> i))),[Ljava.lang.String;@7f7bdccd,Annotation([Ljava.lang.String;@1cdd581e,[Ljava.lang.String;@7c42860,[Ljava.lang.String;@5f36ba9b),Annotation([Ljava.lang.String;@21546f3,[Ljava.lang.String;@42e4fc96,[Ledu.cmu.lti.nlp.amr.Dependency;@4782fe29),Annotation([Ljava.lang.String;@68fc5a6c,[Ljava.lang.String;@f949e4d,[Ljava.lang.String;@6624d938),Annotation([Ljava.lang.String;@7d311feb,[Ljava.lang.String;@2426bd83,[Ledu.cmu.lti.nlp.amr.Entity;@6b63f5ff))
AMR:
(b2 / bore-02, ARG1, j / job)
(b2 / bore-02, degree, p2 / pretty)
(g / guess-01, ARG0, i2 / i)
(g / guess-01, ARG2, b2 / bore-02)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, g / guess-01)
(p / promise-01, ARG2, b / behave-01)
(s / so, op, p / promise-01)

Decoded in 108,564 microseconds
Sentence: you see chris the stuffers deep freezes are so full that a while back i promised him i would take the overflow

Spans:
Span 13-14:  back => back
Span 2-3:  chris => (person :name (name :op "chris"))
Span 5-6:  deep => deep
Span 6-7:  freezes => freeze-01
Span 9-10:  full => full
Span 17-18:  i => i
Span 14-15:  i => i
Span 15-16:  promised => promise-01
Span 1-2:  see => see-01
Span 8-9:  so => so
Span 0-1:  you => you

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),i,i,false), Span(15,16,List(1),promised,promise-01,false), Span(14,15,List(2),i,i,false), Span(13,14,List(3),back,back,false), Span(9,10,List(4),full,full,false), Span(8,9,List(5),so,so,false), Span(6,7,List(6),freezes,freeze-01,false), Span(5,6,List(7),deep,deep,false), Span(2,3,List(10, 9, 8),chris,(person :name (name :op "chris")),false), Span(1,2,List(11),see,see-01,false), Span(0,1,List(12),you,you,false)),Map(2 -> i, 5 -> so, 12 -> you, 8 -> person, 7 -> deep, 1 -> promise-01, 4 -> full, 11 -> see-01, 6 -> freeze-01, 0 -> i, 9 -> name, 3 -> back, 10 -> "chris"),Map(n -> name, s2 -> see-01, b -> back, p2 -> person, s -> so, d -> deep, y -> you, p -> promise-01, i2 -> i, i -> i, f2 -> freeze-01, f -> full))),[Ljava.lang.String;@6fab6f6d,Annotation([Ljava.lang.String;@60209661,[Ljava.lang.String;@7b70eb94,[Ljava.lang.String;@327a80dc),Annotation([Ljava.lang.String;@8a20568,[Ljava.lang.String;@4510f345,[Ledu.cmu.lti.nlp.amr.Dependency;@5bd35a6f),Annotation([Ljava.lang.String;@10d65c82,[Ljava.lang.String;@69536370,[Ljava.lang.String;@61a58415),Annotation([Ljava.lang.String;@3982b0c8,[Ljava.lang.String;@332437f7,[Ledu.cmu.lti.nlp.amr.Entity;@ed6535c))
AMR:
(b / back, ARG1, p / promise-01)
(f / full, degree, s / so)
(f / full, domain, b / back)
(f / full, domain, f2 / freeze-01)
(f2 / freeze-01, degree, d / deep)
(n / name, op, "chris")
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, mod, i / i)
(p2 / person, name, n / name)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, p2 / person)

Decoded in 229,271 microseconds
Sentence: eduard shevardnadze the soviet foreign minister promised an early response when he met james baker the us secretary of state in copenhagen earlier this week

NER Entity: (country :name (name :op "soviet"))
NER Entity: (country :name (name :op "copenhagen"))
Spans:
Span 22-23:  earlier => early
Span 8-9:  early => early
Span 4-5:  foreign => foreign
Span 11-12:  he => he
Span 12-13:  met => meet-03
Span 5-6:  minister => (have-org-role-91 :ARG2 minister)
Span 6-7:  promised => promise-01
Span 9-10:  response => respond-01
Span 17-18:  secretary => secretary
Span 19-20:  state => state
Span 23-24:  this => this
Span 24-25:  week => week

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),week,week,false), Span(23,24,List(1),this,this,false), Span(22,23,List(2),earlier,early,false), Span(19,20,List(3),state,state,false), Span(17,18,List(4),secretary,secretary,false), Span(12,13,List(5),met,meet-03,false), Span(11,12,List(6),he,he,false), Span(9,10,List(7),response,respond-01,false), Span(8,9,List(8),early,early,false), Span(6,7,List(9),promised,promise-01,false), Span(5,6,List(11, 10),minister,(have-org-role-91 :ARG2 minister),false), Span(4,5,List(12),foreign,foreign,false)),Map(2 -> early, 5 -> meet-03, 12 -> foreign, 8 -> early, 7 -> respond-01, 1 -> this, 4 -> secretary, 11 -> minister, 6 -> he, 0 -> week, 9 -> promise-01, 3 -> state, 10 -> have-org-role-91),Map(e -> early, w -> week, h -> he, s2 -> secretary, h2 -> have-org-role-91, t -> this, m2 -> minister, e2 -> early, s -> state, m -> meet-03, p -> promise-01, r -> respond-01, f -> foreign))),[Ljava.lang.String;@7782f12f,Annotation([Ljava.lang.String;@35a881f5,[Ljava.lang.String;@49ec1758,[Ljava.lang.String;@2af0b852),Annotation([Ljava.lang.String;@21d52584,[Ljava.lang.String;@30920e76,[Ledu.cmu.lti.nlp.amr.Dependency;@44f37de3),Annotation([Ljava.lang.String;@4dcde572,[Ljava.lang.String;@892c746,[Ljava.lang.String;@5c58c90f),Annotation([Ljava.lang.String;@48f82726,[Ljava.lang.String;@1bd25537,[Ledu.cmu.lti.nlp.amr.Entity;@dd89c26))
AMR:
(e / early, op, w / week)
(h2 / have-org-role-91, ARG2, m2 / minister)
(m / meet-03, ARG0, h / he)
(m / meet-03, ARG1, s2 / secretary)
(m2 / minister, mod, f / foreign)
(p / promise-01, ARG0, h2 / have-org-role-91)
(p / promise-01, ARG1, r / respond-01)
(r / respond-01, ARG0, h / he)
(r / respond-01, ARG1, e / early)
(r / respond-01, mod, e2 / early)
(s2 / secretary, mod, s / state)
(w / week, mod, t / this)

Decoded in 216,217 microseconds
Sentence: but the minute he promises you a particular portfolio he makes enemies of every one of the seven or eight other men who want that portfolio

Spans:
Span 0-1:  but => contrast-01
Span 19-20:  eight => 8
Span 11-12:  enemies => (have-rel-role-91 :ARG2 enemy)
Span 13-14:  every => every
Span 9-10:  he => he
Span 3-4:  he => he
Span 21-22:  men => man
Span 2-3:  minute => (temporal-quantity :unit minute)
Span 18-19:  or => or
Span 20-21:  other => other
Span 7-8:  particular => particular
Span 4-5:  promises => promise-01
Span 17-18:  seven => 7
Span 23-24:  want => want-01
Span 5-6:  you => you

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),want,want-01,false), Span(21,22,List(1),men,man,false), Span(20,21,List(2),other,other,false), Span(19,20,List(3),eight,8,false), Span(18,19,List(4),or,or,false), Span(17,18,List(5),seven,7,false), Span(13,14,List(6),every,every,false), Span(11,12,List(8, 7),enemies,(have-rel-role-91 :ARG2 enemy),false), Span(9,10,List(9),he,he,false), Span(7,8,List(10),particular,particular,false), Span(5,6,List(11),you,you,false), Span(4,5,List(12),promises,promise-01,false), Span(3,4,List(13),he,he,false), Span(2,3,List(15, 14),minute,(temporal-quantity :unit minute),false), Span(0,1,List(16),but,contrast-01,false)),Map(2 -> other, 5 -> 7, 12 -> promise-01, 15 -> minute, 8 -> enemy, 7 -> have-rel-role-91, 1 -> man, 4 -> or, 11 -> you, 14 -> temporal-quantity, 6 -> every, 0 -> want-01, 9 -> he, 16 -> contrast-01, 3 -> 8, 10 -> particular, 13 -> he),Map(e -> every, w -> want-01, h -> have-rel-role-91, h2 -> he, t -> temporal-quantity, m2 -> minute, 8 -> 8, e2 -> enemy, p2 -> promise-01, m -> man, 7 -> 7, p -> particular, y -> you, o2 -> or, c -> contrast-01, h3 -> he, o -> other))),[Ljava.lang.String;@7f389e4,Annotation([Ljava.lang.String;@5e1dbd0,[Ljava.lang.String;@2f2637b4,[Ljava.lang.String;@7613229a),Annotation([Ljava.lang.String;@6244e905,[Ljava.lang.String;@1a1e79aa,[Ledu.cmu.lti.nlp.amr.Dependency;@46c5954b),Annotation([Ljava.lang.String;@55cc9339,[Ljava.lang.String;@69d5af30,[Ljava.lang.String;@4be0ae98),Annotation([Ljava.lang.String;@be6a413,[Ljava.lang.String;@531de17f,[Ledu.cmu.lti.nlp.amr.Entity;@4ebf837a))
AMR:
(c / contrast-01, ARG0, e / every)
(c / contrast-01, ARG1, p2 / promise-01)
(c / contrast-01, ARG2, w / want-01)
(h / have-rel-role-91, ARG0, o2 / or)
(h / have-rel-role-91, ARG1, h2 / he)
(h / have-rel-role-91, ARG2, e2 / enemy)
(m / man, mod, o / other)
(m / man, quant, 8 / 8)
(o2 / or, op, 7 / 7)
(o2 / or, op, m / man)
(p2 / promise-01, ARG0, h3 / he)
(p2 / promise-01, ARG1, t / temporal-quantity)
(p2 / promise-01, ARG2, y / you)
(t / temporal-quantity, unit, m2 / minute)
(w / want-01, ARG0, h2 / he)
(w / want-01, ARG1, p / particular)

Decoded in 495,126 microseconds
Sentence:   east germans wanting to return were urged to apply to the countrys diplomatic missions abroad and providing no important reasons stand in their way the foreign ministry promised to help them find their feet again in the homeland

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   east germans wanting to return were urged to apply to the countrys diplomatic missions abroad and providing no important reasons stand in their way the foreign ministry promised to help them find their feet again in the homeland
myTokenized = east germans wanting to return were urged to apply to the countrys diplomatic missions abroad and providing no important reasons stand in their way the foreign ministry promised to help them find their feet again in the homeland
i = 0
prefix = List(east)
regexr = \Qe\E ?\Qa\E ?\Qs\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in a way the match promises to be a microcosm of english footballs position compared to the rest of a world which has already wondered at the precocious skills of cameroon the dash of lacatus and the art of donadoni

NER Entity: (country :name (name :op "cameroon"))
Spans:
Span 23-24:  already => already
Span 35-36:  and => and
Span 37-38:  art => art
Span 14-15:  compared => compare-01
Span 11-12:  english => (language :name (name :op "English"))
Span 4-5:  match => match-01
Span 9-10:  microcosm => microcosm
Span 13-14:  position => position
Span 5-6:  promises => promise-01
Span 17-18:  rest => rest
Span 28-29:  skills => skill
Span 2-3:  way => way
Span 24-25:  wondered => wonder-01
Span 20-21:  world => world

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),art,art,false), Span(35,36,List(1),and,and,false), Span(28,29,List(2),skills,skill,false), Span(24,25,List(3),wondered,wonder-01,false), Span(23,24,List(4),already,already,false), Span(20,21,List(5),world,world,false), Span(17,18,List(6),rest,rest,false), Span(14,15,List(7),compared,compare-01,false), Span(13,14,List(8),position,position,false), Span(11,12,List(11, 10, 9),english,(language :name (name :op "English")),false), Span(9,10,List(12),microcosm,microcosm,false), Span(5,6,List(13),promises,promise-01,false), Span(4,5,List(14),match,match-01,false), Span(2,3,List(15),way,way,false)),Map(2 -> skill, 5 -> world, 12 -> microcosm, 15 -> way, 8 -> position, 7 -> compare-01, 1 -> and, 4 -> already, 11 -> "English", 14 -> match-01, 6 -> rest, 0 -> art, 9 -> language, 3 -> wonder-01, 10 -> name, 13 -> promise-01),Map(w -> wonder-01, n -> name, m2 -> match-01, p2 -> promise-01, a3 -> already, w3 -> way, s -> skill, m -> microcosm, p -> position, a -> art, w2 -> world, a2 -> and, r -> rest, c -> compare-01, l -> language))),[Ljava.lang.String;@186c26bc,Annotation([Ljava.lang.String;@64630d2a,[Ljava.lang.String;@22f573e3,[Ljava.lang.String;@208b4e03),Annotation([Ljava.lang.String;@19aeb7a6,[Ljava.lang.String;@1d9b0076,[Ledu.cmu.lti.nlp.amr.Dependency;@2b3b5229),Annotation([Ljava.lang.String;@438f17eb,[Ljava.lang.String;@676b67f3,[Ljava.lang.String;@3c75b790),Annotation([Ljava.lang.String;@54666df2,[Ljava.lang.String;@10bc5628,[Ledu.cmu.lti.nlp.amr.Entity;@3cbc64ad))
AMR:
(a2 / and, op, a / art)
(a2 / and, op, w / wonder-01)
(c / compare-01, ARG0, m / microcosm)
(c / compare-01, ARG1, p / position)
(c / compare-01, ARG2, r / rest)
(l / language, name, n / name)
(n / name, op, "English")
(p / position, mod, l / language)
(p2 / promise-01, ARG0, m2 / match-01)
(p2 / promise-01, ARG1, m / microcosm)
(p2 / promise-01, manner, w3 / way)
(w / wonder-01, ARG0, w2 / world)
(w / wonder-01, ARG1, s / skill)
(w / wonder-01, time, a3 / already)
(w2 / world, part, r / rest)

Decoded in 276,603 microseconds
Sentence: children with special needs were today promised that they will not be pushed beyond their ability by radical changes in education

Spans:
Span 15-16:  ability => ability
Span 13-14:  beyond => beyond
Span 18-19:  changes => change-01
Span 0-1:  children => child
Span 20-21:  education => educate-01
Span 3-4:  needs => need-01
Span 6-7:  promised => promise-01
Span 12-13:  pushed => push-01
Span 17-18:  radical => radical
Span 2-3:  special => special
Span 8-9:  they => they
Span 5-6:  today => today

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),education,educate-01,false), Span(18,19,List(1),changes,change-01,false), Span(17,18,List(2),radical,radical,false), Span(15,16,List(3),ability,ability,false), Span(13,14,List(4),beyond,beyond,false), Span(12,13,List(5),pushed,push-01,false), Span(8,9,List(6),they,they,false), Span(6,7,List(7),promised,promise-01,false), Span(5,6,List(8),today,today,false), Span(3,4,List(9),needs,need-01,false), Span(2,3,List(10),special,special,false), Span(0,1,List(11),children,child,false)),Map(2 -> radical, 5 -> push-01, 8 -> today, 7 -> promise-01, 1 -> change-01, 11 -> child, 4 -> beyond, 6 -> they, 9 -> need-01, 0 -> educate-01, 10 -> special, 3 -> ability),Map(n -> need-01, e -> educate-01, t -> they, b -> beyond, p2 -> promise-01, s -> special, p -> push-01, a -> ability, t2 -> today, r -> radical, c -> change-01, c2 -> child))),[Ljava.lang.String;@5cc52c62,Annotation([Ljava.lang.String;@14e50583,[Ljava.lang.String;@47cce62c,[Ljava.lang.String;@5d1b7787),Annotation([Ljava.lang.String;@36446fd2,[Ljava.lang.String;@47095fd3,[Ledu.cmu.lti.nlp.amr.Dependency;@38723a14),Annotation([Ljava.lang.String;@534313ff,[Ljava.lang.String;@58d5f50d,[Ljava.lang.String;@46cb560b),Annotation([Ljava.lang.String;@4f7e107c,[Ljava.lang.String;@5d6c65a9,[Ledu.cmu.lti.nlp.amr.Entity;@77866a29))
AMR:
(b / beyond, op, a / ability)
(c / change-01, ARG1, e / educate-01)
(c / change-01, mod, r / radical)
(n / need-01, ARG0, c2 / child)
(p / push-01, ARG0, t2 / today)
(p / push-01, ARG1, t / they)
(p / push-01, medium, a / ability)
(p / push-01, prep-without, c / change-01)
(p2 / promise-01, ARG0, t / they)
(p2 / promise-01, ARG1, s / special)
(p2 / promise-01, ARG2, n / need-01)

Decoded in 79,745 microseconds
Sentence: city were leading with 15 minutes left clive allens sixth goal of the season promising to bring them their first away win in the first division since january 1986

Spans:
Span 4-5:  15 => 15
Span 20-21:  away => away
Span 16-17:  bring => bring-01
Span 0-1:  city => city
Span 25-26:  division => division
Span 10-11:  goal => goal
Span 27-29:  january 1986 => (date-entity :month 1 :year 1986)
Span 2-3:  leading => lead-01
Span 5-6:  minutes => (temporal-quantity :unit minute)
Span 14-15:  promising => promise-01
Span 13-14:  season => season
Span 26-27:  since => since
Span 21-22:  win => win-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(2, 1, 0),january 1986,(date-entity :month 1 :year 1986),false), Span(26,27,List(3),since,since,false), Span(25,26,List(4),division,division,false), Span(21,22,List(5),win,win-01,false), Span(20,21,List(6),away,away,false), Span(16,17,List(7),bring,bring-01,false), Span(14,15,List(8),promising,promise-01,false), Span(13,14,List(9),season,season,false), Span(10,11,List(10),goal,goal,false), Span(5,6,List(12, 11),minutes,(temporal-quantity :unit minute),false), Span(4,5,List(13),15,15,false), Span(2,3,List(14),leading,lead-01,false), Span(0,1,List(15),city,city,false)),Map(2 -> 1986, 5 -> win-01, 12 -> minute, 15 -> city, 8 -> promise-01, 7 -> bring-01, 1 -> 1, 4 -> division, 11 -> temporal-quantity, 14 -> lead-01, 6 -> away, 0 -> date-entity, 9 -> season, 3 -> since, 10 -> goal, 13 -> 15),Map(w -> win-01, s2 -> season, 12 -> 1986, b -> bring-01, t -> temporal-quantity, s -> since, d -> date-entity, m -> minute, 1 -> 1, p -> promise-01, g -> goal, a -> away, d2 -> division, c -> city, l -> lead-01, 13 -> 15))),[Ljava.lang.String;@19a3e70d,Annotation([Ljava.lang.String;@579613a1,[Ljava.lang.String;@3de2dbf3,[Ljava.lang.String;@78d64e42),Annotation([Ljava.lang.String;@3dac0d08,[Ljava.lang.String;@6a8ba7d9,[Ledu.cmu.lti.nlp.amr.Dependency;@76b8ce34),Annotation([Ljava.lang.String;@5ee9f4d0,[Ljava.lang.String;@51c7b45e,[Ljava.lang.String;@e12b144),Annotation([Ljava.lang.String;@6d33ee93,[Ljava.lang.String;@6c742ce7,[Ledu.cmu.lti.nlp.amr.Entity;@3f302951))
AMR:
(b / bring-01, ARG0, s2 / season)
(b / bring-01, ARG1, w / win-01)
(d / date-entity, month, 1 / 1)
(d / date-entity, year, 12 / 1986)
(g / goal, purpose, b / bring-01)
(l / lead-01, ARG0, c / city)
(p / promise-01, ARG0, t / temporal-quantity)
(p / promise-01, ARG1, b / bring-01)
(s / since, op, d / date-entity)
(t / temporal-quantity, quant, 13 / 15)
(t / temporal-quantity, unit, m / minute)
(w / win-01, ARG1, c / city)
(w / win-01, manner, d2 / division)
(w / win-01, time, a / away)
(w / win-01, time, d / date-entity)

Decoded in 145,305 microseconds
Sentence: but besides the fact that the details of his method cannot be read into many of the advances made in the sciences his promise of certainty has come to seem inappropriate

Spans:
Span 17-18:  advances => advance-01
Span 1-2:  besides => besides
Span 0-1:  but => contrast-01
Span 25-26:  certainty => certainty
Span 6-7:  details => detail-01
Span 3-4:  fact => fact
Span 14-15:  many => many
Span 9-10:  method => method
Span 23-24:  promise => promise-01
Span 12-13:  read => read-01
Span 21-22:  sciences => science
Span 29-30:  seem => seem-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),seem,seem-01,false), Span(25,26,List(1),certainty,certainty,false), Span(23,24,List(2),promise,promise-01,false), Span(21,22,List(3),sciences,science,false), Span(17,18,List(4),advances,advance-01,false), Span(14,15,List(5),many,many,false), Span(12,13,List(6),read,read-01,false), Span(9,10,List(7),method,method,false), Span(6,7,List(8),details,detail-01,false), Span(3,4,List(9),fact,fact,false), Span(1,2,List(10),besides,besides,false), Span(0,1,List(11),but,contrast-01,false)),Map(2 -> promise-01, 5 -> many, 8 -> detail-01, 7 -> method, 1 -> certainty, 11 -> contrast-01, 4 -> advance-01, 6 -> read-01, 9 -> fact, 0 -> seem-01, 10 -> besides, 3 -> science),Map(b -> besides, s2 -> science, m2 -> method, s -> seem-01, d -> detail-01, m -> many, p -> promise-01, a -> advance-01, r -> read-01, c -> certainty, f -> fact, c2 -> contrast-01))),[Ljava.lang.String;@72e8a53f,Annotation([Ljava.lang.String;@7b90609,[Ljava.lang.String;@43b3cd5,[Ljava.lang.String;@4d16c61e),Annotation([Ljava.lang.String;@1229031c,[Ljava.lang.String;@428b2c94,[Ledu.cmu.lti.nlp.amr.Dependency;@3f1bcaad),Annotation([Ljava.lang.String;@39974439,[Ljava.lang.String;@7a0017b8,[Ljava.lang.String;@1c156f9b),Annotation([Ljava.lang.String;@43523784,[Ljava.lang.String;@4abadda3,[Ledu.cmu.lti.nlp.amr.Entity;@322d1ea9))
AMR:
(a / advance-01, ARG0, s2 / science)
(a / advance-01, quant, m / many)
(b / besides, op, f / fact)
(c2 / contrast-01, ARG1, b / besides)
(d / detail-01, ARG1, m2 / method)
(p / promise-01, ARG0, s2 / science)
(p / promise-01, ARG1, c / certainty)
(r / read-01, ARG1, d / detail-01)
(r / read-01, ARG2, b / besides)
(r / read-01, duration, a / advance-01)
(s / seem-01, ARG1, c / certainty)

Decoded in 159,760 microseconds
Sentence: lord mackay has promised that the high court will be reserved for judicial review and other specialist cases and for general cases of unusual substance importance or difficulty

Spans:
Span 18-19:  and => and
Span 14-15:  and => and
Span 21-22:  cases => case
Span 17-18:  cases => case
Span 7-8:  court => court
Span 27-28:  difficulty => difficult
Span 20-21:  general => general
Span 6-7:  high => high
Span 25-26:  importance => important
Span 12-13:  judicial => judicial
Span 0-1:  lord => lord
Span 26-27:  or => or
Span 15-16:  other => other
Span 3-4:  promised => promise-01
Span 10-11:  reserved => reserved
Span 13-14:  review => review-01
Span 16-17:  specialist => (person :ARG0-of specialize-01)
Span 24-25:  substance => substance
Span 23-24:  unusual => (usual :polarity -)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),difficulty,difficult,false), Span(26,27,List(1),or,or,false), Span(25,26,List(2),importance,important,false), Span(24,25,List(3),substance,substance,false), Span(23,24,List(5, 4),unusual,(usual :polarity -),false), Span(21,22,List(6),cases,case,false), Span(20,21,List(7),general,general,false), Span(18,19,List(8),and,and,false), Span(17,18,List(9),cases,case,false), Span(16,17,List(11, 10),specialist,(person :ARG0-of specialize-01),false), Span(15,16,List(12),other,other,false), Span(14,15,List(13),and,and,false), Span(13,14,List(14),review,review-01,false), Span(12,13,List(15),judicial,judicial,false), Span(10,11,List(16),reserved,reserved,false), Span(7,8,List(17),court,court,false), Span(6,7,List(18),high,high,false), Span(3,4,List(19),promised,promise-01,false), Span(0,1,List(20),lord,lord,false)),Map(2 -> important, 5 -> -, 12 -> other, 15 -> judicial, 8 -> and, 18 -> high, 7 -> general, 17 -> court, 1 -> or, 4 -> usual, 11 -> specialize-01, 14 -> review-01, 20 -> lord, 6 -> case, 0 -> difficult, 9 -> case, 16 -> reserved, 19 -> promise-01, 3 -> substance, 10 -> person, 13 -> and),Map(h -> high, s2 -> specialize-01, p2 -> promise-01, j -> judicial, s -> substance, d -> difficult, r2 -> reserved, g -> general, p -> person, c3 -> court, a -> and, o2 -> other, r -> review-01, i -> important, a2 -> and, c -> case, l -> lord, u -> usual, o -> or, c2 -> case))),[Ljava.lang.String;@303802fb,Annotation([Ljava.lang.String;@2d4bc578,[Ljava.lang.String;@49916083,[Ljava.lang.String;@67575e30),Annotation([Ljava.lang.String;@18e8d651,[Ljava.lang.String;@5e4e6c9d,[Ledu.cmu.lti.nlp.amr.Dependency;@6ebce7c9),Annotation([Ljava.lang.String;@341575eb,[Ljava.lang.String;@6cf0b203,[Ljava.lang.String;@2e371ad5),Annotation([Ljava.lang.String;@23c2ada7,[Ljava.lang.String;@4216c148,[Ledu.cmu.lti.nlp.amr.Entity;@63eb7fdd))
AMR:
(a / and, op, a2 / and)
(a2 / and, op, c2 / case)
(a2 / and, op, r / review-01)
(a2 / and, op, r2 / reserved)
(c / case, mod, g / general)
(c / case, topic, s / substance)
(c2 / case, mod, o2 / other)
(c2 / case, mod, p / person)
(c3 / court, mod, h / high)
(l / lord, op, p2 / promise-01)
(o / or, op, d / difficult)
(o / or, op, i / important)
(o / or, part, c / case)
(p2 / promise-01, ARG1, r2 / reserved)
(r / review-01, ARG1, i / important)
(r / review-01, mod, j / judicial)
(r2 / reserved, domain, c3 / court)
(s / substance, mod, u / usual)
(s2 / specialize-01, ARG0, p / person)
(u / usual, polarity, -)

Decoded in 385,987 microseconds
Sentence: a total of 76000 has been promised over four years of which 57000 is in hand now

Spans:
Span 8-9:  four => 4
Span 15-16:  hand => hand
Span 16-17:  now => now
Span 6-7:  promised => promise-01
Span 9-10:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),now,now,false), Span(15,16,List(1),hand,hand,false), Span(9,10,List(3, 2),years,(temporal-quantity :unit year),false), Span(8,9,List(4),four,4,false), Span(6,7,List(5),promised,promise-01,false)),Map(2 -> temporal-quantity, 5 -> promise-01, 1 -> hand, 4 -> 4, 0 -> now, 3 -> year),Map(n -> now, h -> hand, t -> temporal-quantity, p -> promise-01, y -> year, 4 -> 4))),[Ljava.lang.String;@7a17b96a,Annotation([Ljava.lang.String;@2b8e1cc5,[Ljava.lang.String;@7f02dfd9,[Ljava.lang.String;@15b660b4),Annotation([Ljava.lang.String;@7886d48e,[Ljava.lang.String;@5becf473,[Ledu.cmu.lti.nlp.amr.Dependency;@21a4d92b),Annotation([Ljava.lang.String;@4dada74e,[Ljava.lang.String;@43c319b9,[Ljava.lang.String;@3dcde370),Annotation([Ljava.lang.String;@180eedc3,[Ljava.lang.String;@7c1ba98b,[Ledu.cmu.lti.nlp.amr.Entity;@7c182454))
AMR:
(p / promise-01, ARG0, n / now)
(p / promise-01, ARG1, h / hand)
(p / promise-01, duration, t / temporal-quantity)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, y / year)

Decoded in 20,274 microseconds
Sentence: in a fresh attempt to answer british objections to the ec social charter the european commission yesterday announced a threeyear programme of social measures that promises a minimum of intervention in national policymaking

Spans:
Span 17-18:  announced => announce-01
Span 5-6:  answer => answer-01
Span 3-4:  attempt => attempt-01
Span 12-13:  charter => charter-01
Span 15-16:  commission => commission
Span 14-15:  european => (continent :name (name :op "Europe"))
Span 2-3:  fresh => fresh
Span 29-30:  intervention => intervene-01
Span 23-24:  measures => measure
Span 27-28:  minimum => minimum
Span 31-32:  national => nation
Span 7-8:  objections => objection
Span 20-21:  programme => program
Span 25-26:  promises => promise-01
Span 22-23:  social => society
Span 11-12:  social => society
Span 16-17:  yesterday => yesterday

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),national,nation,false), Span(29,30,List(1),intervention,intervene-01,false), Span(27,28,List(2),minimum,minimum,false), Span(25,26,List(3),promises,promise-01,false), Span(23,24,List(4),measures,measure,false), Span(22,23,List(5),social,society,false), Span(20,21,List(6),programme,program,false), Span(17,18,List(7),announced,announce-01,false), Span(16,17,List(8),yesterday,yesterday,false), Span(15,16,List(9),commission,commission,false), Span(14,15,List(12, 11, 10),european,(continent :name (name :op "Europe")),false), Span(12,13,List(13),charter,charter-01,false), Span(11,12,List(14),social,society,false), Span(7,8,List(15),objections,objection,false), Span(5,6,List(16),answer,answer-01,false), Span(3,4,List(17),attempt,attempt-01,false), Span(2,3,List(18),fresh,fresh,false)),Map(2 -> minimum, 5 -> society, 12 -> "Europe", 15 -> objection, 8 -> yesterday, 18 -> fresh, 7 -> announce-01, 17 -> attempt-01, 1 -> intervene-01, 4 -> measure, 11 -> name, 14 -> society, 6 -> program, 0 -> nation, 9 -> commission, 16 -> answer-01, 3 -> promise-01, 10 -> continent, 13 -> charter-01),Map(n -> nation, s2 -> society, m2 -> measure, p2 -> program, a3 -> attempt-01, s -> society, m -> minimum, p -> promise-01, y -> yesterday, a -> announce-01, c3 -> charter-01, a2 -> answer-01, i -> intervene-01, c -> commission, f -> fresh, o -> objection, c2 -> continent, n2 -> name))),[Ljava.lang.String;@797ff11f,Annotation([Ljava.lang.String;@3eaf688a,[Ljava.lang.String;@6df85c2c,[Ljava.lang.String;@4c6b851b),Annotation([Ljava.lang.String;@26efd6cf,[Ljava.lang.String;@4bffc401,[Ledu.cmu.lti.nlp.amr.Dependency;@49d44a2),Annotation([Ljava.lang.String;@7104ea0b,[Ljava.lang.String;@79a1b224,[Ljava.lang.String;@66b697de),Annotation([Ljava.lang.String;@5daca480,[Ljava.lang.String;@7163ff8b,[Ledu.cmu.lti.nlp.amr.Entity;@5c1e38d5))
AMR:
(a / announce-01, ARG0, y / yesterday)
(a / announce-01, ARG1, p2 / program)
(a / announce-01, purpose, a3 / attempt-01)
(a2 / answer-01, ARG1, o / objection)
(a3 / attempt-01, ARG1, a2 / answer-01)
(a3 / attempt-01, mod, f / fresh)
(c / commission, mod, c2 / continent)
(c2 / continent, name, n2 / name)
(c3 / charter-01, ARG0, n / nation)
(c3 / charter-01, ARG1, s2 / society)
(i / intervene-01, quant, m / minimum)
(m2 / measure, consist, p2 / program)
(m2 / measure, mod, s / society)
(n2 / name, op, "Europe")
(o / objection, purpose, c3 / charter-01)
(p / promise-01, ARG0, p2 / program)
(p / promise-01, ARG1, i / intervene-01)
(y / yesterday, mod, c / commission)

Decoded in 376,933 microseconds
Sentence: in defence of this stratospheric amount an air force spokesman replied defensively that it is not your ordinary fax machine and promises it will function in the desert the arctic or anywhere else that uncle sam deems to be a battlefield

Spans:
Span 7-9:  air force => (military :name (name :op "Force" :op "Air"))
Span 5-6:  amount => amount
Span 20-21:  and => and
Span 31-32:  anywhere => anywhere
Span 40-41:  battlefield => battlefield
Span 1-2:  defence => defend-01
Span 27-28:  desert => desert
Span 32-33:  else => else
Span 24-25:  function => function-01
Span 22-23:  it => it
Span 13-14:  it => it
Span 19-20:  machine => machine
Span 30-31:  or => or
Span 17-18:  ordinary => ordinary
Span 21-22:  promises => promise-01
Span 10-11:  replied => reply-01
Span 9-10:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 3-4:  this => this
Span 34-35:  uncle => (have-rel-role-91 :ARG2 uncle)

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),battlefield,battlefield,false), Span(34,35,List(2, 1),uncle,(have-rel-role-91 :ARG2 uncle),false), Span(32,33,List(3),else,else,false), Span(31,32,List(4),anywhere,anywhere,false), Span(30,31,List(5),or,or,false), Span(27,28,List(6),desert,desert,false), Span(24,25,List(7),function,function-01,false), Span(22,23,List(8),it,it,false), Span(21,22,List(9),promises,promise-01,false), Span(20,21,List(10),and,and,false), Span(19,20,List(11),machine,machine,false), Span(17,18,List(12),ordinary,ordinary,false), Span(13,14,List(13),it,it,false), Span(10,11,List(14),replied,reply-01,false), Span(9,10,List(16, 15),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(7,9,List(20, 19, 18, 17),air force,(military :name (name :op "Force" :op "Air")),false), Span(5,6,List(21),amount,amount,false), Span(3,4,List(22),this,this,false), Span(1,2,List(23),defence,defend-01,false)),Map(2 -> uncle, 5 -> or, 12 -> ordinary, 15 -> have-org-role-91, 8 -> it, 21 -> amount, 18 -> name, 7 -> function-01, 17 -> military, 1 -> have-rel-role-91, 23 -> defend-01, 4 -> anywhere, 11 -> machine, 14 -> reply-01, 20 -> "Air", 6 -> desert, 22 -> this, 0 -> battlefield, 9 -> promise-01, 16 -> spokesman, 19 -> "Force", 3 -> else, 10 -> and, 13 -> it),Map(e -> else, n -> name, h -> have-rel-role-91, h2 -> have-org-role-91, t -> this, b -> battlefield, m2 -> military, a3 -> amount, s -> spokesman, d -> desert, m -> machine, p -> promise-01, a -> anywhere, d2 -> defend-01, o2 -> ordinary, i2 -> it, r -> reply-01, i -> it, a2 -> and, u -> uncle, f -> function-01, o -> or))),[Ljava.lang.String;@6f7fb691,Annotation([Ljava.lang.String;@29ab22c7,[Ljava.lang.String;@22784c30,[Ljava.lang.String;@7d1f4fe),Annotation([Ljava.lang.String;@692b53b4,[Ljava.lang.String;@1b84845d,[Ledu.cmu.lti.nlp.amr.Dependency;@190e03c8),Annotation([Ljava.lang.String;@671a4c51,[Ljava.lang.String;@6f888eb8,[Ljava.lang.String;@6e520b3c),Annotation([Ljava.lang.String;@4c5fc8b9,[Ljava.lang.String;@247310db,[Ledu.cmu.lti.nlp.amr.Entity;@7e57ac8e))
AMR:
(a / anywhere, mod, e / else)
(a2 / and, op, p / promise-01)
(a2 / and, op, r / reply-01)
(a3 / amount, mod, t / this)
(d2 / defend-01, ARG1, a3 / amount)
(f / function-01, ARG0, m / machine)
(f / function-01, ARG1, i / it)
(f / function-01, manner, d / desert)
(h / have-rel-role-91, ARG0, b / battlefield)
(h / have-rel-role-91, ARG1, o / or)
(h / have-rel-role-91, ARG2, u / uncle)
(h2 / have-org-role-91, ARG1, m2 / military)
(h2 / have-org-role-91, ARG2, s / spokesman)
(m / machine, mod, o2 / ordinary)
(m2 / military, name, n / name)
(n / name, op, "Air")
(n / name, op, "Force")
(o / or, op, e / else)
(p / promise-01, ARG0, s / spokesman)
(p / promise-01, ARG1, f / function-01)
(p / promise-01, condition, o / or)
(r / reply-01, ARG0, i2 / it)
(r / reply-01, ARG1, d2 / defend-01)

Decoded in 979,574 microseconds
Sentence: but if the imf decides that the cuts promised in the budget are too small hungary could find itself under severe pressure with no means to respond

NER Entity: (country :name (name :op "hungary"))
Spans:
Span 11-12:  budget => budget
Span 0-1:  but => contrast-01
Span 16-17:  could => possible
Span 7-8:  cuts => cut-02
Span 4-5:  decides => decide-01
Span 24-25:  means => mean-01
Span 23-24:  no => -
Span 21-22:  pressure => pressure-01
Span 8-9:  promised => promise-01
Span 26-27:  respond => respond-01
Span 20-21:  severe => severe
Span 14-15:  small => small
Span 13-14:  too => too

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),respond,respond-01,false), Span(24,25,List(1),means,mean-01,false), Span(23,24,List(2),no,-,false), Span(21,22,List(3),pressure,pressure-01,false), Span(20,21,List(4),severe,severe,false), Span(16,17,List(5),could,possible,false), Span(14,15,List(6),small,small,false), Span(13,14,List(7),too,too,false), Span(11,12,List(8),budget,budget,false), Span(8,9,List(9),promised,promise-01,false), Span(7,8,List(10),cuts,cut-02,false), Span(4,5,List(11),decides,decide-01,false), Span(0,1,List(12),but,contrast-01,false)),Map(2 -> -, 5 -> possible, 12 -> contrast-01, 8 -> budget, 7 -> too, 1 -> mean-01, 4 -> severe, 11 -> decide-01, 6 -> small, 0 -> respond-01, 9 -> promise-01, 3 -> pressure-01, 10 -> cut-02),Map(s2 -> small, t -> too, b -> budget, p2 -> possible, s -> severe, m -> mean-01, d -> decide-01, p -> pressure-01, r -> respond-01, c -> cut-02, - -> -, p3 -> promise-01, c2 -> contrast-01))),[Ljava.lang.String;@2e01df6f,Annotation([Ljava.lang.String;@7cf40801,[Ljava.lang.String;@7939b9bd,[Ljava.lang.String;@3cd16578),Annotation([Ljava.lang.String;@575cc879,[Ljava.lang.String;@c6dacbe,[Ledu.cmu.lti.nlp.amr.Dependency;@7467f451),Annotation([Ljava.lang.String;@54d92d8b,[Ljava.lang.String;@7e3d2c31,[Ljava.lang.String;@622085b6),Annotation([Ljava.lang.String;@452aa20e,[Ljava.lang.String;@71f5689b,[Ledu.cmu.lti.nlp.amr.Entity;@26a6d290))
AMR:
(c / cut-02, quant, t / too)
(c2 / contrast-01, ARG1, d / decide-01)
(c2 / contrast-01, ARG2, p2 / possible)
(d / decide-01, ARG1, s2 / small)
(m / mean-01, ARG1, r / respond-01)
(m / mean-01, polarity, - / -)
(p / pressure-01, ARG2, r / respond-01)
(p / pressure-01, mod, s / severe)
(p3 / promise-01, ARG1, c / cut-02)
(p3 / promise-01, location, b / budget)
(r / respond-01, ARG2, d / decide-01)
(s2 / small, domain, c / cut-02)

Decoded in 123,593 microseconds
Sentence: the marketing board promised yesterday that contaminated dairy products would not be diluted by uncontaminated ones

Spans:
Span 7-8:  dairy => dairy
Span 12-13:  diluted => dilute-01
Span 1-2:  marketing => market-01
Span 15-16:  ones => one
Span 8-9:  products => product
Span 3-4:  promised => promise-01
Span 4-5:  yesterday => yesterday

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),ones,one,false), Span(12,13,List(1),diluted,dilute-01,false), Span(8,9,List(2),products,product,false), Span(7,8,List(3),dairy,dairy,false), Span(4,5,List(4),yesterday,yesterday,false), Span(3,4,List(5),promised,promise-01,false), Span(1,2,List(6),marketing,market-01,false)),Map(2 -> product, 5 -> promise-01, 1 -> dilute-01, 4 -> yesterday, 6 -> market-01, 0 -> one, 3 -> dairy),Map(p2 -> promise-01, m -> market-01, d -> dilute-01, y -> yesterday, p -> product, d2 -> dairy, o -> one))),[Ljava.lang.String;@1249ffc3,Annotation([Ljava.lang.String;@38366496,[Ljava.lang.String;@7b05d0ae,[Ljava.lang.String;@3ac78e9b),Annotation([Ljava.lang.String;@3638043,[Ljava.lang.String;@7979b071,[Ledu.cmu.lti.nlp.amr.Dependency;@242f0905),Annotation([Ljava.lang.String;@bf939d2,[Ljava.lang.String;@17431022,[Ljava.lang.String;@33d8341c),Annotation([Ljava.lang.String;@374534db,[Ljava.lang.String;@20913236,[Ledu.cmu.lti.nlp.amr.Entity;@1c7787ee))
AMR:
(d / dilute-01, ARG0, o / one)
(d / dilute-01, ARG1, p / product)
(m / market-01, ARG1, p2 / promise-01)
(p / product, mod, d2 / dairy)
(p2 / promise-01, ARG1, d / dilute-01)
(p2 / promise-01, time, y / yesterday)

Decoded in 51,818 microseconds
Sentence: life the antiabortion organisation promised to beseige parliament with the largest number of petitions in its history

Spans:
Span 16-17:  history => history
Span 10-11:  largest => (large :degree most)
Span 0-1:  life => life
Span 11-12:  number => number
Span 3-4:  organisation => organize-01
Span 7-8:  parliament => (government-organization :name (name :op "Parliament"))
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),history,history,false), Span(11,12,List(1),number,number,false), Span(10,11,List(3, 2),largest,(large :degree most),false), Span(7,8,List(6, 5, 4),parliament,(government-organization :name (name :op "Parliament")),false), Span(4,5,List(7),promised,promise-01,false), Span(3,4,List(8),organisation,organize-01,false), Span(0,1,List(9),life,life,false)),Map(2 -> large, 5 -> name, 8 -> organize-01, 7 -> promise-01, 1 -> number, 4 -> government-organization, 6 -> "Parliament", 9 -> life, 0 -> history, 3 -> most),Map(n -> number, h -> history, m -> most, p -> promise-01, g -> government-organization, l2 -> life, l -> large, o -> organize-01, n2 -> name))),[Ljava.lang.String;@6b7d28db,Annotation([Ljava.lang.String;@660578fe,[Ljava.lang.String;@714aa005,[Ljava.lang.String;@5a4fe25e),Annotation([Ljava.lang.String;@3296b7a4,[Ljava.lang.String;@44f289ee,[Ledu.cmu.lti.nlp.amr.Dependency;@f3d8b9f),Annotation([Ljava.lang.String;@11997b8a,[Ljava.lang.String;@737daa0c,[Ljava.lang.String;@3f273510),Annotation([Ljava.lang.String;@270ccdd4,[Ljava.lang.String;@399d2d53,[Ledu.cmu.lti.nlp.amr.Entity;@7e0ac1b1))
AMR:
(g / government-organization, location, n / number)
(g / government-organization, name, n2 / name)
(l / large, degree, m / most)
(n / number, mod, l / large)
(n2 / name, op, "Parliament")
(o / organize-01, ARG1, h / history)
(p / promise-01, ARG0, o / organize-01)
(p / promise-01, ARG1, l2 / life)
(p / promise-01, ARG2, g / government-organization)

Decoded in 142,250 microseconds
Sentence: if the nottingham test proves as successful as the system seems to have worked in florida it could mean even better business for marconi in swindon who promise more jobs

NER Entity: (country :name (name :op "florida"))
NER Entity: (country :name (name :op "florida"))
Spans:
Span 21-22:  business => business
Span 17-18:  could => possible
Span 15-16:  florida => (state :name (name :op "Florida"))
Span 16-17:  it => it
Span 29-30:  jobs => job
Span 18-19:  mean => mean-01
Span 27-28:  promise => promise-01
Span 4-5:  proves => prove-01
Span 10-11:  seems => seem-01
Span 6-7:  successful => succeed-01
Span 9-10:  system => system
Span 3-4:  test => test-01
Span 13-14:  worked => work-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),jobs,job,false), Span(27,28,List(1),promise,promise-01,false), Span(21,22,List(2),business,business,false), Span(18,19,List(3),mean,mean-01,false), Span(17,18,List(4),could,possible,false), Span(16,17,List(5),it,it,false), Span(15,16,List(8, 7, 6),florida,(state :name (name :op "Florida")),false), Span(13,14,List(9),worked,work-01,false), Span(10,11,List(10),seems,seem-01,false), Span(9,10,List(11),system,system,false), Span(6,7,List(12),successful,succeed-01,false), Span(4,5,List(13),proves,prove-01,false), Span(3,4,List(14),test,test-01,false)),Map(2 -> business, 5 -> it, 12 -> succeed-01, 8 -> "Florida", 7 -> name, 1 -> promise-01, 4 -> possible, 11 -> system, 14 -> test-01, 6 -> state, 0 -> job, 9 -> work-01, 3 -> mean-01, 10 -> seem-01, 13 -> prove-01),Map(n -> name, w -> work-01, s2 -> seem-01, t -> test-01, b -> business, p2 -> possible, j -> job, s -> state, s4 -> succeed-01, m -> mean-01, p -> promise-01, i -> it, s3 -> system, p3 -> prove-01))),[Ljava.lang.String;@74328c1c,Annotation([Ljava.lang.String;@228cbddd,[Ljava.lang.String;@460509e3,[Ljava.lang.String;@74cc39fe),Annotation([Ljava.lang.String;@bf38e9a,[Ljava.lang.String;@23172697,[Ledu.cmu.lti.nlp.amr.Dependency;@44e69580),Annotation([Ljava.lang.String;@7e6129d6,[Ljava.lang.String;@1d01e16c,[Ljava.lang.String;@66768854),Annotation([Ljava.lang.String;@6ff07759,[Ljava.lang.String;@142bad79,[Ledu.cmu.lti.nlp.amr.Entity;@3f89ed47))
AMR:
(m / mean-01, ARG0, i / it)
(m / mean-01, ARG1, b / business)
(n / name, op, "Florida")
(p / promise-01, ARG0, b / business)
(p / promise-01, ARG1, j / job)
(p2 / possible, domain, m / mean-01)
(p3 / prove-01, ARG0, t / test-01)
(p3 / prove-01, ARG1, s4 / succeed-01)
(s / state, name, n / name)
(s2 / seem-01, ARG1, w / work-01)
(s4 / succeed-01, ARG2, s2 / seem-01)
(w / work-01, ARG0, i / it)
(w / work-01, ARG1, s3 / system)
(w / work-01, location, s / state)

Decoded in 158,800 microseconds
Sentence: michael their younger brother had promised to come from london at easter but luke the eldest still would not come

NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 3-4:  brother => (have-rel-role-91 :ARG2 brother)
Span 12-13:  but => contrast-01
Span 9-10:  london => (city :name (name :op "London"))
Span 5-6:  promised => promise-01
Span 16-17:  still => still
Span 2-3:  younger => young

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),still,still,false), Span(12,13,List(1),but,contrast-01,false), Span(9,10,List(4, 3, 2),london,(city :name (name :op "London")),false), Span(5,6,List(5),promised,promise-01,false), Span(3,4,List(7, 6),brother,(have-rel-role-91 :ARG2 brother),false), Span(2,3,List(8),younger,young,false)),Map(2 -> city, 5 -> promise-01, 8 -> young, 7 -> brother, 1 -> contrast-01, 4 -> "London", 6 -> have-rel-role-91, 0 -> still, 3 -> name),Map(n -> name, h -> have-rel-role-91, b -> brother, s -> still, y -> young, p -> promise-01, c -> contrast-01, c2 -> city))),[Ljava.lang.String;@7838f0e7,Annotation([Ljava.lang.String;@62500b5a,[Ljava.lang.String;@75197422,[Ljava.lang.String;@5a17a03d),Annotation([Ljava.lang.String;@45193300,[Ljava.lang.String;@79636870,[Ledu.cmu.lti.nlp.amr.Dependency;@6d5dcf52),Annotation([Ljava.lang.String;@29d64896,[Ljava.lang.String;@3337854f,[Ljava.lang.String;@2111fce),Annotation([Ljava.lang.String;@323f0e71,[Ljava.lang.String;@49cd367c,[Ledu.cmu.lti.nlp.amr.Entity;@3fb42cbe))
AMR:
(c / contrast-01, ARG1, y / young)
(c / contrast-01, ARG2, h / have-rel-role-91)
(c2 / city, name, n / name)
(h / have-rel-role-91, ARG0, c2 / city)
(h / have-rel-role-91, ARG1, s / still)
(h / have-rel-role-91, ARG2, b / brother)
(n / name, op, "London")
(p / promise-01, ARG1, h / have-rel-role-91)

Decoded in 36,983 microseconds
Sentence: is there one word of evidence that this was ever promised by anyone let along agreed on

Spans:
Span 15-16:  agreed => agree-01
Span 14-15:  along => along
Span 12-13:  anyone => anyone
Span 9-10:  ever => ever
Span 5-6:  evidence => evidence-01
Span 13-14:  let => let-01
Span 10-11:  promised => promise-01
Span 7-8:  this => this
Span 3-4:  word => word

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),agreed,agree-01,false), Span(14,15,List(1),along,along,false), Span(13,14,List(2),let,let-01,false), Span(12,13,List(3),anyone,anyone,false), Span(10,11,List(4),promised,promise-01,false), Span(9,10,List(5),ever,ever,false), Span(7,8,List(6),this,this,false), Span(5,6,List(7),evidence,evidence-01,false), Span(3,4,List(8),word,word,false)),Map(2 -> let-01, 5 -> ever, 8 -> word, 7 -> evidence-01, 1 -> along, 4 -> promise-01, 6 -> this, 0 -> agree-01, 3 -> anyone),Map(w -> word, e -> ever, t -> this, e2 -> evidence-01, a3 -> anyone, p -> promise-01, a -> agree-01, a2 -> along, l -> let-01))),[Ljava.lang.String;@4de58e9e,Annotation([Ljava.lang.String;@19f64f06,[Ljava.lang.String;@79be203a,[Ljava.lang.String;@3135fe47),Annotation([Ljava.lang.String;@4fc9008e,[Ljava.lang.String;@1543938e,[Ledu.cmu.lti.nlp.amr.Dependency;@78c5a8a),Annotation([Ljava.lang.String;@f8c1de5,[Ljava.lang.String;@37fead5c,[Ljava.lang.String;@31278fbc),Annotation([Ljava.lang.String;@1c4d98da,[Ljava.lang.String;@2a6e1eba,[Ledu.cmu.lti.nlp.amr.Entity;@23a35b19))
AMR:
(a / agree-01, ARG1, a3 / anyone)
(l / let-01, ARG1, w / word)
(l / let-01, ARG2, a / agree-01)
(p / promise-01, ARG1, t / this)
(p / promise-01, condition, l / let-01)
(p / promise-01, time, a2 / along)
(p / promise-01, time, e / ever)
(w / word, prep-against, e2 / evidence-01)

Decoded in 119,117 microseconds
Sentence: a new fifa president joao havelange had been elected after campaigning vigorously among the less powerful countries promising them an expanded tournament to meet their increased ambitions

Spans:
Span 9-10:  after => after
Span 26-27:  ambitions => ambition
Span 12-13:  among => among
Span 10-11:  campaigning => campaign-01
Span 16-17:  countries => country
Span 8-9:  elected => elect-01
Span 20-21:  expanded => expand-01
Span 25-26:  increased => increase-01
Span 14-15:  less => less
Span 1-2:  new => new
Span 15-16:  powerful => powerful
Span 3-4:  president => (have-org-role-91 :ARG2 president)
Span 17-18:  promising => promise-01
Span 11-12:  vigorously => vigorous

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),ambitions,ambition,false), Span(25,26,List(1),increased,increase-01,false), Span(20,21,List(2),expanded,expand-01,false), Span(17,18,List(3),promising,promise-01,false), Span(16,17,List(4),countries,country,false), Span(15,16,List(5),powerful,powerful,false), Span(14,15,List(6),less,less,false), Span(12,13,List(7),among,among,false), Span(11,12,List(8),vigorously,vigorous,false), Span(10,11,List(9),campaigning,campaign-01,false), Span(9,10,List(10),after,after,false), Span(8,9,List(11),elected,elect-01,false), Span(3,4,List(13, 12),president,(have-org-role-91 :ARG2 president),false), Span(1,2,List(14),new,new,false)),Map(2 -> expand-01, 5 -> powerful, 12 -> have-org-role-91, 8 -> vigorous, 7 -> among, 1 -> increase-01, 4 -> country, 11 -> elect-01, 14 -> new, 6 -> less, 0 -> ambition, 9 -> campaign-01, 3 -> promise-01, 10 -> after, 13 -> president),Map(e -> expand-01, n -> new, h -> have-org-role-91, p2 -> powerful, e2 -> elect-01, a3 -> after, v -> vigorous, p -> promise-01, a -> ambition, i -> increase-01, a2 -> among, c -> country, l -> less, p3 -> president, c2 -> campaign-01))),[Ljava.lang.String;@4b027d71,Annotation([Ljava.lang.String;@1079ac30,[Ljava.lang.String;@24178bc3,[Ljava.lang.String;@5d8c1b8),Annotation([Ljava.lang.String;@59961a07,[Ljava.lang.String;@d86ef84,[Ledu.cmu.lti.nlp.amr.Dependency;@15d6ca0c),Annotation([Ljava.lang.String;@486ae507,[Ljava.lang.String;@61e253b5,[Ljava.lang.String;@51e5c247),Annotation([Ljava.lang.String;@4335ed52,[Ljava.lang.String;@96fc4f7,[Ledu.cmu.lti.nlp.amr.Entity;@8ec38f8))
AMR:
(a2 / among, op, c / country)
(a3 / after, op, c2 / campaign-01)
(c / country, mod, p2 / powerful)
(c2 / campaign-01, location, a2 / among)
(c2 / campaign-01, manner, v / vigorous)
(e / expand-01, ARG0, c / country)
(e / expand-01, ARG1, i / increase-01)
(e2 / elect-01, time, a3 / after)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p3 / president)
(i / increase-01, ARG0, n / new)
(i / increase-01, ARG1, a / ambition)
(p / promise-01, ARG0, c / country)
(p2 / powerful, degree, l / less)

Decoded in 199,879 microseconds
Sentence: the premier mr michael ahern who took the leadership of the national party from mr bjelkepetersen 18 months ago promised to carry out all the commissions recommendations swiftly

Spans:
Span 16-17:  18 => 18
Span 23-24:  all => all
Span 25-26:  commissions => commission
Span 17-18:  months => (temporal-quantity :unit month)
Span 11-12:  national => nation
Span 12-13:  party => party
Span 1-2:  premier => premier
Span 19-20:  promised => promise-01
Span 26-27:  recommendations => recommend-01
Span 27-28:  swiftly => swift

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),swiftly,swift,false), Span(26,27,List(1),recommendations,recommend-01,false), Span(25,26,List(2),commissions,commission,false), Span(23,24,List(3),all,all,false), Span(19,20,List(4),promised,promise-01,false), Span(17,18,List(6, 5),months,(temporal-quantity :unit month),false), Span(16,17,List(7),18,18,false), Span(12,13,List(8),party,party,false), Span(11,12,List(9),national,nation,false), Span(1,2,List(10),premier,premier,false)),Map(2 -> commission, 5 -> temporal-quantity, 8 -> party, 7 -> 18, 1 -> recommend-01, 4 -> promise-01, 6 -> month, 9 -> nation, 0 -> swift, 10 -> premier, 3 -> all),Map(n -> nation, t -> temporal-quantity, p2 -> party, s -> swift, m -> month, 1 -> 18, p -> promise-01, a -> all, r -> recommend-01, c -> commission, p3 -> premier))),[Ljava.lang.String;@4c90265b,Annotation([Ljava.lang.String;@bc647a2,[Ljava.lang.String;@688e2b8,[Ljava.lang.String;@4dca162),Annotation([Ljava.lang.String;@30e72b6c,[Ljava.lang.String;@18d3d889,[Ledu.cmu.lti.nlp.amr.Dependency;@7c2d171a),Annotation([Ljava.lang.String;@7447eba6,[Ljava.lang.String;@1dc01aee,[Ljava.lang.String;@2f280e84),Annotation([Ljava.lang.String;@6ed1144b,[Ljava.lang.String;@608b80c3,[Ledu.cmu.lti.nlp.amr.Entity;@66b2b3b9))
AMR:
(1 / 18, op, r / recommend-01)
(a / all, poss, p3 / premier)
(p / promise-01, ARG0, p2 / party)
(p / promise-01, ARG1, r / recommend-01)
(p2 / party, mod, n / nation)
(r / recommend-01, ARG1, c / commission)
(r / recommend-01, quant, a / all)
(s / swift, condition, p / promise-01)
(t / temporal-quantity, quant, 1 / 18)
(t / temporal-quantity, unit, m / month)

Decoded in 133,424 microseconds
Sentence: the takeover target which has dismissed the offer as completely inadequate has promised to unveil a rival buyout package valuing each share at between 75 and 100

Spans:
Span 26-27:  100 => 100
Span 24-25:  75 => 75
Span 25-26:  and => and
Span 23-24:  between => between
Span 9-10:  completely => complete
Span 5-6:  dismissed => dismiss-01
Span 20-21:  each => each
Span 10-11:  inadequate => (adequate :polarity -)
Span 7-8:  offer => offer-01
Span 18-19:  package => package
Span 12-13:  promised => promise-01
Span 16-17:  rival => rival-01
Span 21-22:  share => share-01
Span 1-2:  takeover => take-12
Span 2-3:  target => target-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),100,100,false), Span(25,26,List(1),and,and,false), Span(24,25,List(2),75,75,false), Span(23,24,List(3),between,between,false), Span(21,22,List(4),share,share-01,false), Span(20,21,List(5),each,each,false), Span(18,19,List(6),package,package,false), Span(16,17,List(7),rival,rival-01,false), Span(12,13,List(8),promised,promise-01,false), Span(10,11,List(10, 9),inadequate,(adequate :polarity -),false), Span(9,10,List(11),completely,complete,false), Span(7,8,List(12),offer,offer-01,false), Span(5,6,List(13),dismissed,dismiss-01,false), Span(2,3,List(14),target,target-01,false), Span(1,2,List(15),takeover,take-12,false)),Map(2 -> 75, 5 -> each, 12 -> offer-01, 15 -> take-12, 8 -> promise-01, 7 -> rival-01, 1 -> and, 4 -> share-01, 11 -> complete, 14 -> target-01, 6 -> package, 0 -> 100, 9 -> adequate, 3 -> between, 10 -> -, 13 -> dismiss-01),Map(e -> each, t -> target-01, b -> between, p2 -> promise-01, s -> share-01, 7 -> 75, d -> dismiss-01, 1 -> 100, p -> package, a -> and, t2 -> take-12, r -> rival-01, a2 -> adequate, c -> complete, o -> offer-01))),[Ljava.lang.String;@5e356b5b,Annotation([Ljava.lang.String;@51b53af,[Ljava.lang.String;@451308c7,[Ljava.lang.String;@64a5643e),Annotation([Ljava.lang.String;@26585611,[Ljava.lang.String;@717a89c1,[Ledu.cmu.lti.nlp.amr.Dependency;@23ea181b),Annotation([Ljava.lang.String;@5dd4a708,[Ljava.lang.String;@34222e58,[Ljava.lang.String;@3010ae25),Annotation([Ljava.lang.String;@171917ca,[Ljava.lang.String;@7068da9e,[Ledu.cmu.lti.nlp.amr.Entity;@73e8f4b9))
AMR:
(a2 / adequate, polarity, -)
(d / dismiss-01, ARG0, c / complete)
(d / dismiss-01, ARG1, t / target-01)
(d / dismiss-01, ARG2, o / offer-01)
(o / offer-01, ARG0, a2 / adequate)
(o / offer-01, ARG1, a / and)
(p2 / promise-01, ARG1, t / target-01)
(p2 / promise-01, ARG2, p / package)
(r / rival-01, ARG0, p / package)
(s / share-01, ARG0, b / between)
(s / share-01, ARG1, 1 / 100)
(s / share-01, ARG2, t / target-01)
(s / share-01, mod, e / each)
(t / target-01, ARG1, t2 / take-12)
(t2 / take-12, ARG1, 7 / 75)

Decoded in 265,970 microseconds
Sentence: both men have promised not to make public statements on the peace process in an attempt to avoid compromising chances for a settlement again

Spans:
Span 23-24:  again => again
Span 15-16:  attempt => attempt-01
Span 17-18:  avoid => avoid-01
Span 0-1:  both => both
Span 19-20:  chances => chance-01
Span 1-2:  men => man
Span 11-12:  peace => peace
Span 12-13:  process => process
Span 3-4:  promised => promise-01
Span 7-8:  public => public
Span 22-23:  settlement => settle-02
Span 8-9:  statements => (thing :ARG1-of state-01)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),again,again,false), Span(22,23,List(1),settlement,settle-02,false), Span(19,20,List(2),chances,chance-01,false), Span(17,18,List(3),avoid,avoid-01,false), Span(15,16,List(4),attempt,attempt-01,false), Span(12,13,List(5),process,process,false), Span(11,12,List(6),peace,peace,false), Span(8,9,List(8, 7),statements,(thing :ARG1-of state-01),false), Span(7,8,List(9),public,public,false), Span(3,4,List(10),promised,promise-01,false), Span(1,2,List(11),men,man,false), Span(0,1,List(12),both,both,false)),Map(2 -> chance-01, 5 -> process, 12 -> both, 8 -> state-01, 7 -> thing, 1 -> settle-02, 4 -> attempt-01, 11 -> man, 6 -> peace, 0 -> again, 9 -> public, 3 -> avoid-01, 10 -> promise-01),Map(s2 -> state-01, t -> thing, b -> both, p2 -> peace, a3 -> attempt-01, s -> settle-02, m -> man, p -> process, a -> again, p4 -> promise-01, a2 -> avoid-01, c -> chance-01, p3 -> public))),[Ljava.lang.String;@431ad922,Annotation([Ljava.lang.String;@17a56999,[Ljava.lang.String;@6cb7c7ef,[Ljava.lang.String;@15a753ac),Annotation([Ljava.lang.String;@1c664c4f,[Ljava.lang.String;@1be51a,[Ledu.cmu.lti.nlp.amr.Dependency;@275e0e04),Annotation([Ljava.lang.String;@fea3ccd,[Ljava.lang.String;@5b3dbee4,[Ljava.lang.String;@32bf9988),Annotation([Ljava.lang.String;@40f8c9bf,[Ljava.lang.String;@d853bec,[Ledu.cmu.lti.nlp.amr.Entity;@262109e3))
AMR:
(a2 / avoid-01, ARG1, c / chance-01)
(a3 / attempt-01, ARG0, m / man)
(a3 / attempt-01, ARG1, a2 / avoid-01)
(c / chance-01, ARG2, s / settle-02)
(m / man, mod, b / both)
(p / process, mod, p2 / peace)
(p4 / promise-01, ARG0, m / man)
(p4 / promise-01, ARG1, a / again)
(s2 / state-01, ARG0, p3 / public)
(s2 / state-01, ARG1, t / thing)
(s2 / state-01, location, p / process)
(s2 / state-01, topic, a3 / attempt-01)

Decoded in 120,217 microseconds
Sentence: and united scientific holdings being bid for by meggitt the engineering company promised to restore dividend payments

Spans:
Span 0-1:  and => and
Span 5-6:  bid => bid-01
Span 11-12:  company => company
Span 10-11:  engineering => engineer-01
Span 3-4:  holdings => hold-01
Span 16-17:  payments => payment
Span 12-13:  promised => promise-01
Span 14-15:  restore => restore-01
Span 2-3:  scientific => science
Span 1-2:  united => unite-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),payments,payment,false), Span(14,15,List(1),restore,restore-01,false), Span(12,13,List(2),promised,promise-01,false), Span(11,12,List(3),company,company,false), Span(10,11,List(4),engineering,engineer-01,false), Span(5,6,List(5),bid,bid-01,false), Span(3,4,List(6),holdings,hold-01,false), Span(2,3,List(7),scientific,science,false), Span(1,2,List(8),united,unite-01,false), Span(0,1,List(9),and,and,false)),Map(2 -> promise-01, 5 -> bid-01, 8 -> unite-01, 7 -> science, 1 -> restore-01, 4 -> engineer-01, 6 -> hold-01, 9 -> and, 0 -> payment, 3 -> company),Map(e -> engineer-01, h -> hold-01, b -> bid-01, p2 -> promise-01, s -> science, p -> payment, a -> and, r -> restore-01, u -> unite-01, c -> company))),[Ljava.lang.String;@431029a3,Annotation([Ljava.lang.String;@5a1daeba,[Ljava.lang.String;@52ba638e,[Ljava.lang.String;@4ade2a10),Annotation([Ljava.lang.String;@3f9ba6d6,[Ljava.lang.String;@3e64c3a,[Ledu.cmu.lti.nlp.amr.Dependency;@49675d6),Annotation([Ljava.lang.String;@321236f4,[Ljava.lang.String;@49d5e6da,[Ljava.lang.String;@7a271814),Annotation([Ljava.lang.String;@1c9e07b3,[Ljava.lang.String;@4b0b8772,[Ledu.cmu.lti.nlp.amr.Entity;@61e973db))
AMR:
(b / bid-01, ARG0, a / and)
(b / bid-01, ARG1, h / hold-01)
(c / company, mod, e / engineer-01)
(e / engineer-01, ARG1, a / and)
(h / hold-01, mod, s / science)
(p2 / promise-01, ARG0, c / company)
(p2 / promise-01, ARG1, r / restore-01)
(r / restore-01, ARG1, p / payment)
(u / unite-01, ARG1, h / hold-01)

Decoded in 114,323 microseconds
Sentence: cecil parkinson secretary of state for transport promised earlier this month that money would be no obstacle to the new safety measures after clapham

Spans:
Span 22-23:  after => after
Span 8-9:  earlier => early
Span 21-22:  measures => measure
Span 12-13:  money => money
Span 10-11:  month => (temporal-quantity :unit month)
Span 19-20:  new => new
Span 15-16:  no => -
Span 16-17:  obstacle => obstacle
Span 7-8:  promised => promise-01
Span 20-21:  safety => safe-41
Span 2-3:  secretary => secretary
Span 4-5:  state => state
Span 9-10:  this => this
Span 6-7:  transport => transport-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),after,after,false), Span(21,22,List(1),measures,measure,false), Span(20,21,List(2),safety,safe-41,false), Span(19,20,List(3),new,new,false), Span(16,17,List(4),obstacle,obstacle,false), Span(15,16,List(5),no,-,false), Span(12,13,List(6),money,money,false), Span(10,11,List(8, 7),month,(temporal-quantity :unit month),false), Span(9,10,List(9),this,this,false), Span(8,9,List(10),earlier,early,false), Span(7,8,List(11),promised,promise-01,false), Span(6,7,List(12),transport,transport-01,false), Span(4,5,List(13),state,state,false), Span(2,3,List(14),secretary,secretary,false)),Map(2 -> safe-41, 5 -> -, 12 -> transport-01, 8 -> month, 7 -> temporal-quantity, 1 -> measure, 4 -> obstacle, 11 -> promise-01, 14 -> secretary, 6 -> money, 0 -> after, 9 -> this, 3 -> new, 10 -> early, 13 -> state),Map(m3 -> month, e -> early, n -> new, s2 -> state, t -> temporal-quantity, m2 -> money, s -> safe-41, m -> measure, t3 -> transport-01, p -> promise-01, a -> after, t2 -> this, - -> -, s3 -> secretary, o -> obstacle))),[Ljava.lang.String;@25b56115,Annotation([Ljava.lang.String;@26f8bd0a,[Ljava.lang.String;@1442ef83,[Ljava.lang.String;@367a8bd9),Annotation([Ljava.lang.String;@27736f80,[Ljava.lang.String;@b9d50bc,[Ledu.cmu.lti.nlp.amr.Dependency;@51f6c99),Annotation([Ljava.lang.String;@5212b36f,[Ljava.lang.String;@49c26681,[Ljava.lang.String;@79d7c4fb),Annotation([Ljava.lang.String;@44c5793b,[Ljava.lang.String;@9a33c3,[Ledu.cmu.lti.nlp.amr.Entity;@bbc4784))
AMR:
(m / measure, location, a / after)
(m / measure, mod, n / new)
(m3 / month, mod, t2 / this)
(m3 / month, time, e / early)
(o / obstacle, domain, m2 / money)
(o / obstacle, polarity, - / -)
(p / promise-01, ARG0, s3 / secretary)
(p / promise-01, ARG1, o / obstacle)
(p / promise-01, time, e / early)
(s / safe-41, ARG0, o / obstacle)
(s / safe-41, ARG1, n / new)
(s2 / state, name, t3 / transport-01)
(s3 / secretary, mod, s2 / state)
(t / temporal-quantity, unit, m3 / month)

Decoded in 102,955 microseconds
Sentence: a full inquiry was promised today into a gas leak at a nuclear power station which prompted the evacuation of 250 workers

Spans:
Span 20-21:  250 => 250
Span 1-2:  full => full
Span 8-9:  gas => gas
Span 2-3:  inquiry => inquire-01
Span 9-10:  leak => leak-01
Span 12-13:  nuclear => nucleus
Span 13-14:  power => power
Span 4-5:  promised => promise-01
Span 16-17:  prompted => prompt-02
Span 14-15:  station => station
Span 5-6:  today => today
Span 21-22:  workers => (person :ARG0-of work-01)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(1, 0),workers,(person :ARG0-of work-01),false), Span(20,21,List(2),250,250,false), Span(16,17,List(3),prompted,prompt-02,false), Span(14,15,List(4),station,station,false), Span(13,14,List(5),power,power,false), Span(12,13,List(6),nuclear,nucleus,false), Span(9,10,List(7),leak,leak-01,false), Span(8,9,List(8),gas,gas,false), Span(5,6,List(9),today,today,false), Span(4,5,List(10),promised,promise-01,false), Span(2,3,List(11),inquiry,inquire-01,false), Span(1,2,List(12),full,full,false)),Map(2 -> 250, 5 -> power, 12 -> full, 8 -> gas, 7 -> leak-01, 1 -> work-01, 4 -> station, 11 -> inquire-01, 6 -> nucleus, 0 -> person, 9 -> today, 3 -> prompt-02, 10 -> promise-01),Map(w -> work-01, n -> nucleus, 2 -> 250, t -> today, p2 -> prompt-02, s -> station, p -> person, g -> gas, p4 -> promise-01, i -> inquire-01, l -> leak-01, f -> full, p3 -> power))),[Ljava.lang.String;@3e566863,Annotation([Ljava.lang.String;@1adf5b8e,[Ljava.lang.String;@3df3d56a,[Ljava.lang.String;@534041ec),Annotation([Ljava.lang.String;@1fa817a7,[Ljava.lang.String;@54a8e52d,[Ledu.cmu.lti.nlp.amr.Dependency;@1c5e18c7),Annotation([Ljava.lang.String;@65acbf5d,[Ljava.lang.String;@3047a6d1,[Ljava.lang.String;@3018fc1a),Annotation([Ljava.lang.String;@384f27a1,[Ljava.lang.String;@54b2d7e8,[Ledu.cmu.lti.nlp.amr.Entity;@297cebc9))
AMR:
(i / inquire-01, ARG1, 2 / 250)
(i / inquire-01, mod, f / full)
(l / leak-01, ARG1, p3 / power)
(l / leak-01, ARG3, g / gas)
(p2 / prompt-02, ARG0, s / station)
(p2 / prompt-02, ARG1, p / person)
(p3 / power, mod, n / nucleus)
(p4 / promise-01, ARG1, i / inquire-01)
(p4 / promise-01, ARG2, s / station)
(p4 / promise-01, time, t / today)
(s / station, mod, p3 / power)
(w / work-01, ARG0, p / person)

Decoded in 212,105 microseconds
Sentence: councillor arthur titherington told members of the district councils planning committee on monday the county council had promised to provide a lorry park in the witney area

Spans:
Span 26-27:  area => area
Span 10-11:  committee => committee
Span 15-16:  council => council
Span 0-1:  councillor => (have-org-role-91 :ARG2 councillor)
Span 8-9:  councils => council
Span 14-15:  county => county
Span 7-8:  district => district
Span 4-5:  members => (have-org-role-91 :ARG2 member)
Span 22-23:  park => park
Span 9-10:  planning => plan-01
Span 17-18:  promised => promise-01
Span 19-20:  provide => provide-01
Span 3-4:  told => tell-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),area,area,false), Span(22,23,List(1),park,park,false), Span(19,20,List(2),provide,provide-01,false), Span(17,18,List(3),promised,promise-01,false), Span(15,16,List(4),council,council,false), Span(14,15,List(5),county,county,false), Span(10,11,List(6),committee,committee,false), Span(9,10,List(7),planning,plan-01,false), Span(8,9,List(8),councils,council,false), Span(7,8,List(9),district,district,false), Span(4,5,List(11, 10),members,(have-org-role-91 :ARG2 member),false), Span(3,4,List(12),told,tell-01,false), Span(0,1,List(14, 13),councillor,(have-org-role-91 :ARG2 councillor),false)),Map(2 -> provide-01, 5 -> county, 12 -> tell-01, 8 -> council, 7 -> plan-01, 1 -> park, 4 -> council, 11 -> member, 14 -> councillor, 6 -> committee, 0 -> area, 9 -> district, 3 -> promise-01, 10 -> have-org-role-91, 13 -> have-org-role-91),Map(h -> have-org-role-91, h2 -> have-org-role-91, t -> tell-01, p2 -> provide-01, c4 -> council, d -> district, m -> member, p -> park, a -> area, c3 -> committee, p4 -> plan-01, c -> council, p3 -> promise-01, c2 -> county, c5 -> councillor))),[Ljava.lang.String;@485bee66,Annotation([Ljava.lang.String;@b808fa7,[Ljava.lang.String;@255722d7,[Ljava.lang.String;@7bb06467),Annotation([Ljava.lang.String;@798fe5a1,[Ljava.lang.String;@562ceb60,[Ledu.cmu.lti.nlp.amr.Dependency;@1f1117d3),Annotation([Ljava.lang.String;@1b332d94,[Ljava.lang.String;@3cf55d7f,[Ljava.lang.String;@10cd5c1d),Annotation([Ljava.lang.String;@1a5a7c89,[Ljava.lang.String;@2aa613e3,[Ledu.cmu.lti.nlp.amr.Entity;@7d63b1f4))
AMR:
(c / council, mod, c2 / county)
(h / have-org-role-91, ARG1, c3 / committee)
(h / have-org-role-91, ARG2, m / member)
(h2 / have-org-role-91, ARG1, c3 / committee)
(h2 / have-org-role-91, ARG2, c5 / councillor)
(p2 / provide-01, ARG1, p / park)
(p2 / provide-01, ARG2, a / area)
(p3 / promise-01, ARG0, c / council)
(p3 / promise-01, ARG2, p2 / provide-01)
(p4 / plan-01, ARG0, c3 / committee)
(p4 / plan-01, ARG1, c4 / council)
(p4 / plan-01, mod, d / district)
(t / tell-01, ARG1, p3 / promise-01)
(t / tell-01, ARG2, h / have-org-role-91)

Decoded in 232,113 microseconds
Sentence: he also promised speedy punishment for all those who commit highway robbery burglary and weaken peoples morale

Spans:
Span 6-7:  all => all
Span 1-2:  also => also
Span 13-14:  and => and
Span 12-13:  burglary => burgle-01
Span 9-10:  commit => commit-02
Span 0-1:  he => he
Span 10-11:  highway => highway
Span 15-16:  peoples => people
Span 2-3:  promised => promise-01
Span 4-5:  punishment => punish-01
Span 14-15:  weaken => weaken-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),peoples,people,false), Span(14,15,List(1),weaken,weaken-01,false), Span(13,14,List(2),and,and,false), Span(12,13,List(3),burglary,burgle-01,false), Span(10,11,List(4),highway,highway,false), Span(9,10,List(5),commit,commit-02,false), Span(6,7,List(6),all,all,false), Span(4,5,List(7),punishment,punish-01,false), Span(2,3,List(8),promised,promise-01,false), Span(1,2,List(9),also,also,false), Span(0,1,List(10),he,he,false)),Map(2 -> and, 5 -> commit-02, 8 -> promise-01, 7 -> punish-01, 1 -> weaken-01, 4 -> highway, 6 -> all, 9 -> also, 0 -> people, 10 -> he, 3 -> burgle-01),Map(w -> weaken-01, h -> highway, h2 -> he, b -> burgle-01, p2 -> punish-01, a3 -> also, p -> people, a -> and, a2 -> all, c -> commit-02, p3 -> promise-01))),[Ljava.lang.String;@1c384a7c,Annotation([Ljava.lang.String;@33a2215d,[Ljava.lang.String;@593c7b26,[Ljava.lang.String;@11b9298f),Annotation([Ljava.lang.String;@13577460,[Ljava.lang.String;@5299548b,[Ledu.cmu.lti.nlp.amr.Dependency;@507d9c0a),Annotation([Ljava.lang.String;@668f7dce,[Ljava.lang.String;@568c93fc,[Ljava.lang.String;@2747b1c8),Annotation([Ljava.lang.String;@53e8d59d,[Ljava.lang.String;@5b206174,[Ledu.cmu.lti.nlp.amr.Entity;@2ade3569))
AMR:
(a / and, op, c / commit-02)
(a / and, op, w / weaken-01)
(b / burgle-01, ARG1, h / highway)
(c / commit-02, ARG0, h2 / he)
(c / commit-02, ARG1, b / burgle-01)
(p2 / punish-01, ARG0, h2 / he)
(p2 / punish-01, ARG1, a2 / all)
(p3 / promise-01, ARG0, h2 / he)
(p3 / promise-01, mod, a3 / also)
(w / weaken-01, ARG1, p / people)

Decoded in 92,987 microseconds
Sentence: bulgarias communist leaders yesterday promised talks with the opposition early in 1990

Spans:
Span 11-12:  1990 => (date-entity :year 1990)
Span 1-2:  communist => communism
Span 9-10:  early => early
Span 2-3:  leaders => (person :ARG0-of lead-02)
Span 8-9:  opposition => oppose-01
Span 4-5:  promised => promise-01
Span 5-6:  talks => talk-01
Span 3-4:  yesterday => yesterday

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),1990,(date-entity :year 1990),false), Span(9,10,List(2),early,early,false), Span(8,9,List(3),opposition,oppose-01,false), Span(5,6,List(4),talks,talk-01,false), Span(4,5,List(5),promised,promise-01,false), Span(3,4,List(6),yesterday,yesterday,false), Span(2,3,List(8, 7),leaders,(person :ARG0-of lead-02),false), Span(1,2,List(9),communist,communism,false)),Map(2 -> early, 5 -> promise-01, 8 -> lead-02, 7 -> person, 1 -> 1990, 4 -> talk-01, 6 -> yesterday, 9 -> communism, 0 -> date-entity, 3 -> oppose-01),Map(e -> early, t -> talk-01, p2 -> person, d -> date-entity, y -> yesterday, p -> promise-01, 1 -> 1990, c -> communism, l -> lead-02, o -> oppose-01))),[Ljava.lang.String;@6284967b,Annotation([Ljava.lang.String;@6eb397c4,[Ljava.lang.String;@50b0fda3,[Ljava.lang.String;@13dc01b8),Annotation([Ljava.lang.String;@50f4e137,[Ljava.lang.String;@7cee0b66,[Ledu.cmu.lti.nlp.amr.Dependency;@702e959d),Annotation([Ljava.lang.String;@260aff5,[Ljava.lang.String;@19bfff0b,[Ljava.lang.String;@c013862),Annotation([Ljava.lang.String;@241cb016,[Ljava.lang.String;@576c86df,[Ledu.cmu.lti.nlp.amr.Entity;@160ac750))
AMR:
(d / date-entity, year, 1 / 1990)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, c / communism)
(o / oppose-01, time, e / early)
(p / promise-01, ARG1, t / talk-01)
(p / promise-01, ARG2, o / oppose-01)
(p / promise-01, time, y / yesterday)
(t / talk-01, ARG0, p2 / person)
(t / talk-01, time, d / date-entity)

Decoded in 33,399 microseconds
Sentence: i trust they will keep the emergency service on the road as they have promised

Spans:
Span 6-7:  emergency => emergency
Span 0-1:  i => i
Span 14-15:  promised => promise-01
Span 10-11:  road => road
Span 12-13:  they => they
Span 2-3:  they => they
Span 1-2:  trust => trust-01

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),promised,promise-01,false), Span(12,13,List(1),they,they,false), Span(10,11,List(2),road,road,false), Span(6,7,List(3),emergency,emergency,false), Span(2,3,List(4),they,they,false), Span(1,2,List(5),trust,trust-01,false), Span(0,1,List(6),i,i,false)),Map(2 -> road, 5 -> trust-01, 1 -> they, 4 -> they, 6 -> i, 0 -> promise-01, 3 -> emergency),Map(e -> emergency, t -> they, t3 -> trust-01, p -> promise-01, t2 -> they, i -> i, r -> road))),[Ljava.lang.String;@1da3607e,Annotation([Ljava.lang.String;@5113ff65,[Ljava.lang.String;@77e46978,[Ljava.lang.String;@34c882c6),Annotation([Ljava.lang.String;@5801b03c,[Ljava.lang.String;@56d96047,[Ledu.cmu.lti.nlp.amr.Dependency;@594001dc),Annotation([Ljava.lang.String;@793a404a,[Ljava.lang.String;@5f52f873,[Ljava.lang.String;@403576e9),Annotation([Ljava.lang.String;@7611dbed,[Ljava.lang.String;@e7de12a,[Ledu.cmu.lti.nlp.amr.Entity;@6a4993d4))
AMR:
(p / promise-01, ARG0, t2 / they)
(p / promise-01, ARG1, t / they)
(p / promise-01, ARG2, i / i)
(p / promise-01, prep-on, r / road)
(t3 / trust-01, ARG0, i / i)
(t3 / trust-01, ARG1, e / emergency)

Decoded in 116,745 microseconds
Sentence: mr kaifu surprised critics with a policy speech early last month in which he broke new ground by officially recognising a trend towards income disparities pledging to bring down land prices and promising to work towards genuine equal opportunity for women

Spans:
Span 31-32:  and => and
Span 27-28:  bring => bring-01
Span 3-4:  critics => critic
Span 28-29:  down => down
Span 8-9:  early => early
Span 37-38:  equal => equal-01
Span 36-37:  genuine => genuine
Span 16-17:  ground => ground
Span 13-14:  he => he
Span 23-24:  income => income
Span 29-30:  land => land
Span 9-10:  last => last
Span 10-11:  month => (temporal-quantity :unit month)
Span 15-16:  new => new
Span 18-19:  officially => official
Span 38-39:  opportunity => opportunity
Span 25-26:  pledging => pledge-01
Span 6-7:  policy => policy
Span 30-31:  prices => price-01
Span 32-33:  promising => promise-01
Span 7-8:  speech => speech
Span 2-3:  surprised => surprise-01
Span 21-22:  trend => trend-01
Span 40-41:  women => woman

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),women,woman,false), Span(38,39,List(1),opportunity,opportunity,false), Span(37,38,List(2),equal,equal-01,false), Span(36,37,List(3),genuine,genuine,false), Span(32,33,List(4),promising,promise-01,false), Span(31,32,List(5),and,and,false), Span(30,31,List(6),prices,price-01,false), Span(29,30,List(7),land,land,false), Span(28,29,List(8),down,down,false), Span(27,28,List(9),bring,bring-01,false), Span(25,26,List(10),pledging,pledge-01,false), Span(23,24,List(11),income,income,false), Span(21,22,List(12),trend,trend-01,false), Span(18,19,List(13),officially,official,false), Span(16,17,List(14),ground,ground,false), Span(15,16,List(15),new,new,false), Span(13,14,List(16),he,he,false), Span(10,11,List(18, 17),month,(temporal-quantity :unit month),false), Span(9,10,List(19),last,last,false), Span(8,9,List(20),early,early,false), Span(7,8,List(21),speech,speech,false), Span(6,7,List(22),policy,policy,false), Span(3,4,List(23),critics,critic,false), Span(2,3,List(24),surprised,surprise-01,false)),Map(2 -> equal-01, 5 -> and, 12 -> trend-01, 8 -> down, 15 -> new, 21 -> speech, 18 -> month, 24 -> surprise-01, 7 -> land, 1 -> opportunity, 17 -> temporal-quantity, 23 -> critic, 4 -> promise-01, 11 -> income, 14 -> ground, 20 -> early, 6 -> price-01, 9 -> bring-01, 0 -> woman, 22 -> policy, 16 -> he, 19 -> last, 10 -> pledge-01, 3 -> genuine, 13 -> official),Map(e -> equal-01, w -> woman, n -> new, h -> he, s2 -> surprise-01, t -> trend-01, b -> bring-01, p2 -> price-01, e2 -> early, s -> speech, d -> down, m -> month, g2 -> ground, p -> promise-01, g -> genuine, a -> and, p4 -> policy, o2 -> official, t2 -> temporal-quantity, l2 -> last, i -> income, c -> critic, l -> land, o -> opportunity, p3 -> pledge-01))),[Ljava.lang.String;@1bf54903,Annotation([Ljava.lang.String;@48c724c,[Ljava.lang.String;@20a3dde9,[Ljava.lang.String;@663dfcbc),Annotation([Ljava.lang.String;@6f9bcf14,[Ljava.lang.String;@5e38634a,[Ledu.cmu.lti.nlp.amr.Dependency;@47febf99),Annotation([Ljava.lang.String;@25d4fabc,[Ljava.lang.String;@4199600b,[Ljava.lang.String;@3c7093d2),Annotation([Ljava.lang.String;@2f8defe,[Ljava.lang.String;@20f7f738,[Ledu.cmu.lti.nlp.amr.Entity;@77878e70))
AMR:
(a / and, op, p / promise-01)
(a / and, op, p3 / pledge-01)
(b / bring-01, ARG1, p2 / price-01)
(b / bring-01, direction, d / down)
(e / equal-01, ARG0, g2 / ground)
(e / equal-01, ARG1, o / opportunity)
(e2 / early, op, t2 / temporal-quantity)
(g2 / ground, mod, n / new)
(i / income, prep-instead, t / trend-01)
(m / month, mod, l2 / last)
(o / opportunity, beneficiary, w / woman)
(o / opportunity, mod, g / genuine)
(p / promise-01, ARG0, g2 / ground)
(p / promise-01, ARG1, t / trend-01)
(p2 / price-01, ARG0, o2 / official)
(p2 / price-01, ARG1, l / land)
(p3 / pledge-01, ARG1, b / bring-01)
(s / speech, mod, p4 / policy)
(s2 / surprise-01, ARG0, s / speech)
(s2 / surprise-01, ARG1, c / critic)
(s2 / surprise-01, ARG2, h / he)
(s2 / surprise-01, time, e2 / early)
(t / trend-01, ARG0, h / he)
(t2 / temporal-quantity, unit, m / month)

Decoded in 538,241 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6498985e,Annotation([Ljava.lang.String;@5e3b76ea,[Ljava.lang.String;@11fc2cfb,[Ljava.lang.String;@42ed1bf6),Annotation([Ljava.lang.String;@5cc6d5cd,[Ljava.lang.String;@1feb551,[Ledu.cmu.lti.nlp.amr.Dependency;@7931d9dc),Annotation([Ljava.lang.String;@37d638ad,[Ljava.lang.String;@5123027e,[Ljava.lang.String;@5178c7cf),Annotation([Ljava.lang.String;@508610d2,[Ljava.lang.String;@11ba744b,[Ledu.cmu.lti.nlp.amr.Entity;@6828f104))
AMR:


Decoded in 1,131 microseconds
Sentence: it is not implausible that in such elections a government might be elected which promised speedy reunification regardless of what the rest of europe thinks and that in free national elections in west germany a government might be elected which promised the same

NER Entity: (country :name (name :op "germany"))
Spans:
Span 25-26:  and => and
Span 38-39:  elected => elect-01
Span 12-13:  elected => elect-01
Span 30-31:  elections => elect-01
Span 7-8:  elections => elect-01
Span 23-24:  europe => (continent :name (name :op "Europe"))
Span 28-29:  free => free-41
Span 0-1:  it => it
Span 29-30:  national => nation
Span 40-41:  promised => promise-01
Span 14-15:  promised => promise-01
Span 21-22:  rest => rest
Span 42-43:  same => same-41
Span 6-7:  such => such
Span 24-25:  thinks => think-01
Span 32-33:  west => west

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),same,same-41,false), Span(40,41,List(1),promised,promise-01,false), Span(38,39,List(2),elected,elect-01,false), Span(32,33,List(3),west,west,false), Span(30,31,List(4),elections,elect-01,false), Span(29,30,List(5),national,nation,false), Span(28,29,List(6),free,free-41,false), Span(25,26,List(7),and,and,false), Span(24,25,List(8),thinks,think-01,false), Span(23,24,List(11, 10, 9),europe,(continent :name (name :op "Europe")),false), Span(21,22,List(12),rest,rest,false), Span(14,15,List(13),promised,promise-01,false), Span(12,13,List(14),elected,elect-01,false), Span(7,8,List(15),elections,elect-01,false), Span(6,7,List(16),such,such,false), Span(0,1,List(17),it,it,false)),Map(2 -> elect-01, 5 -> nation, 12 -> rest, 15 -> elect-01, 8 -> think-01, 7 -> and, 17 -> it, 1 -> promise-01, 4 -> elect-01, 11 -> "Europe", 14 -> elect-01, 6 -> free-41, 0 -> same-41, 9 -> continent, 16 -> such, 3 -> west, 10 -> name, 13 -> promise-01),Map(e -> elect-01, w -> west, n -> nation, s2 -> such, t -> think-01, e2 -> elect-01, p2 -> promise-01, s -> same-41, p -> promise-01, a -> and, e4 -> elect-01, i -> it, r -> rest, c -> continent, f -> free-41, e3 -> elect-01, n2 -> name))),[Ljava.lang.String;@57e77308,Annotation([Ljava.lang.String;@1c313f4e,[Ljava.lang.String;@65332857,[Ljava.lang.String;@19d9ba9),Annotation([Ljava.lang.String;@12567513,[Ljava.lang.String;@6a203bcc,[Ledu.cmu.lti.nlp.amr.Dependency;@6a360482),Annotation([Ljava.lang.String;@622948,[Ljava.lang.String;@2c84362a,[Ljava.lang.String;@1c00163b),Annotation([Ljava.lang.String;@49b389d9,[Ljava.lang.String;@2a1f2b5c,[Ledu.cmu.lti.nlp.amr.Entity;@6457ba9e))
AMR:
(a / and, op, e / elect-01)
(a / and, op, p2 / promise-01)
(a / and, op, t / think-01)
(c / continent, name, n2 / name)
(c / continent, part, r / rest)
(e / elect-01, ARG1, p / promise-01)
(e / elect-01, time, e2 / elect-01)
(e2 / elect-01, mod, n / nation)
(e3 / elect-01, ARG0, i / it)
(e3 / elect-01, ARG1, a / and)
(e3 / elect-01, time, e4 / elect-01)
(e4 / elect-01, mod, s2 / such)
(f / free-41, ARG1, e2 / elect-01)
(n2 / name, op, "Europe")
(p / promise-01, ARG1, s / same-41)
(s / same-41, ARG1, w / west)
(t / think-01, ARG0, r / rest)

Decoded in 198,640 microseconds
Sentence: she d heard about the peoples palace a museum concerned with glasgow and its past and promised herself shed pay it a visit in the near future

Spans:
Span 15-16:  and => and
Span 12-13:  and => and
Span 9-10:  concerned => concern-01
Span 1-2:  d => d
Span 26-27:  future => future
Span 2-3:  heard => hear-01
Span 20-21:  it => it
Span 25-26:  near => near
Span 14-15:  past => past
Span 19-20:  pay => pay-01
Span 5-6:  peoples => people
Span 16-17:  promised => promise-01
Span 0-1:  she => she
Span 18-19:  shed => shed-01
Span 22-23:  visit => visit-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),future,future,false), Span(25,26,List(1),near,near,false), Span(22,23,List(2),visit,visit-01,false), Span(20,21,List(3),it,it,false), Span(19,20,List(4),pay,pay-01,false), Span(18,19,List(5),shed,shed-01,false), Span(16,17,List(6),promised,promise-01,false), Span(15,16,List(7),and,and,false), Span(14,15,List(8),past,past,false), Span(12,13,List(9),and,and,false), Span(9,10,List(10),concerned,concern-01,false), Span(5,6,List(11),peoples,people,false), Span(2,3,List(12),heard,hear-01,false), Span(1,2,List(13),d,d,false), Span(0,1,List(14),she,she,false)),Map(2 -> visit-01, 5 -> shed-01, 12 -> hear-01, 8 -> past, 7 -> and, 1 -> near, 4 -> pay-01, 11 -> people, 14 -> she, 6 -> promise-01, 0 -> future, 9 -> and, 3 -> it, 10 -> concern-01, 13 -> d),Map(n -> near, h -> hear-01, s2 -> she, p2 -> promise-01, s -> shed-01, v -> visit-01, d -> d, p -> pay-01, a -> and, p4 -> people, i -> it, a2 -> and, c -> concern-01, f -> future, p3 -> past))),[Ljava.lang.String;@3b9d0e89,Annotation([Ljava.lang.String;@442562f2,[Ljava.lang.String;@728320d1,[Ljava.lang.String;@7edfb412),Annotation([Ljava.lang.String;@10a74ad1,[Ljava.lang.String;@5720e7e1,[Ledu.cmu.lti.nlp.amr.Dependency;@31579177),Annotation([Ljava.lang.String;@6c0f34ef,[Ljava.lang.String;@5a5c6e55,[Ljava.lang.String;@6a4fbccb),Annotation([Ljava.lang.String;@18f3e9f4,[Ljava.lang.String;@35849ef8,[Ledu.cmu.lti.nlp.amr.Entity;@15e0c73b))
AMR:
(a / and, op, p2 / promise-01)
(a2 / and, op, p3 / past)
(c / concern-01, ARG0, a2 / and)
(d / d, quant, s2 / she)
(f / future, mod, n / near)
(h / hear-01, ARG0, s2 / she)
(p / pay-01, ARG0, p4 / people)
(p / pay-01, ARG1, v / visit-01)
(p2 / promise-01, ARG0, s2 / she)
(p2 / promise-01, ARG1, s / shed-01)
(s / shed-01, ARG0, p3 / past)
(s / shed-01, ARG1, p / pay-01)
(v / visit-01, ARG1, i / it)
(v / visit-01, time, f / future)

Decoded in 338,429 microseconds
Sentence: when dennis bark and david gress set out five years ago to write their history of west germany from 1945 to the present they cannot have known that its publication would coincide with the beginning of what promises to be the only successful revolution from below in german history

NER Entity: (country :name (name :op "germany"))
NER Entity: (thing :name (name :op "german"))
Spans:
Span 19-20:  1945 => (date-entity :year 1945)
Span 3-4:  and => and
Span 2-3:  bark => bark-01
Span 34-35:  beginning => begin-01
Span 45-46:  below => below
Span 8-9:  five => 5
Span 48-49:  history => history
Span 14-15:  history => history
Span 26-27:  known => know-01
Span 41-42:  only => only
Span 22-23:  present => present
Span 37-38:  promises => promise-01
Span 29-30:  publication => publication
Span 43-44:  revolution => revolution
Span 42-43:  successful => succeed-01
Span 23-24:  they => they
Span 16-17:  west => west
Span 12-13:  write => write-01
Span 9-10:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),history,history,false), Span(45,46,List(1),below,below,false), Span(43,44,List(2),revolution,revolution,false), Span(42,43,List(3),successful,succeed-01,false), Span(41,42,List(4),only,only,false), Span(37,38,List(5),promises,promise-01,false), Span(34,35,List(6),beginning,begin-01,false), Span(29,30,List(7),publication,publication,false), Span(26,27,List(8),known,know-01,false), Span(23,24,List(9),they,they,false), Span(22,23,List(10),present,present,false), Span(19,20,List(12, 11),1945,(date-entity :year 1945),false), Span(16,17,List(13),west,west,false), Span(14,15,List(14),history,history,false), Span(12,13,List(15),write,write-01,false), Span(9,10,List(17, 16),years,(temporal-quantity :unit year),false), Span(8,9,List(18),five,5,false), Span(3,4,List(19),and,and,false), Span(2,3,List(20),bark,bark-01,false)),Map(2 -> revolution, 5 -> promise-01, 12 -> 1945, 15 -> write-01, 8 -> know-01, 18 -> 5, 7 -> publication, 17 -> year, 1 -> below, 4 -> only, 11 -> date-entity, 14 -> history, 20 -> bark-01, 6 -> begin-01, 0 -> history, 9 -> they, 16 -> temporal-quantity, 19 -> and, 3 -> succeed-01, 10 -> present, 13 -> west),Map(b3 -> bark-01, w -> west, h -> history, 5 -> 5, h2 -> history, b -> below, k -> know-01, t -> they, b2 -> begin-01, p2 -> publication, s -> succeed-01, d -> date-entity, 1 -> 1945, y -> year, p -> promise-01, a -> and, t2 -> temporal-quantity, w2 -> write-01, r -> revolution, o -> only, p3 -> present))),[Ljava.lang.String;@2d197f57,Annotation([Ljava.lang.String;@64f73fe2,[Ljava.lang.String;@24834237,[Ljava.lang.String;@25703b9b),Annotation([Ljava.lang.String;@6b595050,[Ljava.lang.String;@34a7eb3f,[Ledu.cmu.lti.nlp.amr.Dependency;@7c45901a),Annotation([Ljava.lang.String;@3af7dab3,[Ljava.lang.String;@66373c03,[Ljava.lang.String;@34451d62),Annotation([Ljava.lang.String;@258c27bd,[Ljava.lang.String;@1484fc8d,[Ledu.cmu.lti.nlp.amr.Entity;@26e09781))
AMR:
(a / and, op, b3 / bark-01)
(b / below, op, h / history)
(b2 / begin-01, ARG1, p / promise-01)
(b2 / begin-01, time, d / date-entity)
(d / date-entity, year, 1 / 1945)
(k / know-01, ARG0, t / they)
(k / know-01, ARG1, h2 / history)
(k / know-01, ARG2, p2 / publication)
(k / know-01, time, p3 / present)
(p / promise-01, ARG0, w / west)
(p / promise-01, ARG1, r / revolution)
(p / promise-01, ARG2, p2 / publication)
(r / revolution, source, b / below)
(s / succeed-01, ARG1, r / revolution)
(s / succeed-01, mod, o / only)
(t2 / temporal-quantity, op, b2 / begin-01)
(t2 / temporal-quantity, quant, 5 / 5)
(t2 / temporal-quantity, unit, y / year)
(w2 / write-01, ARG0, a / and)
(w2 / write-01, ARG1, h2 / history)

Decoded in 696,846 microseconds
Sentence: the caravan on the withy bed was again discussed and the owners have promised to move it

Spans:
Span 7-8:  again => again
Span 9-10:  and => and
Span 5-6:  bed => bed
Span 8-9:  discussed => discuss-01
Span 16-17:  it => it
Span 11-12:  owners => (person :ARG0-of own-01)
Span 13-14:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),it,it,false), Span(13,14,List(1),promised,promise-01,false), Span(11,12,List(3, 2),owners,(person :ARG0-of own-01),false), Span(9,10,List(4),and,and,false), Span(8,9,List(5),discussed,discuss-01,false), Span(7,8,List(6),again,again,false), Span(5,6,List(7),bed,bed,false)),Map(2 -> person, 5 -> discuss-01, 7 -> bed, 1 -> promise-01, 4 -> and, 6 -> again, 0 -> it, 3 -> own-01),Map(b -> bed, p2 -> person, d -> discuss-01, p -> promise-01, a -> and, a2 -> again, i -> it, o -> own-01))),[Ljava.lang.String;@62faaa17,Annotation([Ljava.lang.String;@36b4fec5,[Ljava.lang.String;@24c25392,[Ljava.lang.String;@51fca918),Annotation([Ljava.lang.String;@22c190b5,[Ljava.lang.String;@52036ce6,[Ledu.cmu.lti.nlp.amr.Dependency;@5ee29a1a),Annotation([Ljava.lang.String;@6ef351a0,[Ljava.lang.String;@28741848,[Ljava.lang.String;@5de633b7),Annotation([Ljava.lang.String;@344d638a,[Ljava.lang.String;@44c213d9,[Ledu.cmu.lti.nlp.amr.Entity;@21a52ed3))
AMR:
(a / and, op, d / discuss-01)
(a / and, op, p / promise-01)
(d / discuss-01, ARG1, b / bed)
(d / discuss-01, mod, a2 / again)
(o / own-01, ARG0, p2 / person)
(o / own-01, ARG1, i / it)
(p / promise-01, ARG0, p2 / person)

Decoded in 27,843 microseconds
Sentence: the baroness promised to write to outline the governments policy towards providing support for new initiatives

Spans:
Span 8-9:  governments => (government-organization :ARG0-of govern-01)
Span 15-16:  initiatives => initiative
Span 14-15:  new => new
Span 6-7:  outline => outline-01
Span 9-10:  policy => policy
Span 2-3:  promised => promise-01
Span 11-12:  providing => provide-01
Span 12-13:  support => support-01
Span 4-5:  write => write-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),initiatives,initiative,false), Span(14,15,List(1),new,new,false), Span(12,13,List(2),support,support-01,false), Span(11,12,List(3),providing,provide-01,false), Span(9,10,List(4),policy,policy,false), Span(8,9,List(6, 5),governments,(government-organization :ARG0-of govern-01),false), Span(6,7,List(7),outline,outline-01,false), Span(4,5,List(8),write,write-01,false), Span(2,3,List(9),promised,promise-01,false)),Map(2 -> support-01, 5 -> government-organization, 8 -> write-01, 7 -> outline-01, 1 -> new, 4 -> policy, 6 -> govern-01, 9 -> promise-01, 0 -> initiative, 3 -> provide-01),Map(w -> write-01, n -> new, p2 -> policy, s -> support-01, g2 -> govern-01, g -> government-organization, p -> provide-01, i -> initiative, o -> outline-01, p3 -> promise-01))),[Ljava.lang.String;@63a52fe6,Annotation([Ljava.lang.String;@71ebd825,[Ljava.lang.String;@32bb9f91,[Ljava.lang.String;@3be9029c),Annotation([Ljava.lang.String;@3eaa6e7e,[Ljava.lang.String;@273c3256,[Ledu.cmu.lti.nlp.amr.Dependency;@610cc039),Annotation([Ljava.lang.String;@c200ff6,[Ljava.lang.String;@cf7e5b2,[Ljava.lang.String;@67090fc4),Annotation([Ljava.lang.String;@3ea41b5,[Ljava.lang.String;@87fd415,[Ledu.cmu.lti.nlp.amr.Entity;@3cb30f))
AMR:
(g2 / govern-01, ARG0, g / government-organization)
(i / initiative, mod, n / new)
(o / outline-01, ARG1, p2 / policy)
(o / outline-01, manner, p / provide-01)
(p / provide-01, ARG1, s / support-01)
(p2 / policy, mod, g / government-organization)
(p3 / promise-01, ARG1, w / write-01)
(s / support-01, ARG0, i / initiative)
(w / write-01, ARG1, o / outline-01)

Decoded in 38,443 microseconds
Sentence: the sunday service was promised to the industrys watchdog the post office users national council when tariffs were increased last year

Spans:
Span 14-15:  council => council
Span 18-19:  increased => increase-01
Span 19-20:  last => last
Span 13-14:  national => nation
Span 11-12:  office => office
Span 10-11:  post => post
Span 4-5:  promised => promise-01
Span 1-2:  sunday => sunday
Span 16-17:  tariffs => tariff
Span 8-9:  watchdog => watchdog
Span 20-21:  year => year

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),year,year,false), Span(19,20,List(1),last,last,false), Span(18,19,List(2),increased,increase-01,false), Span(16,17,List(3),tariffs,tariff,false), Span(14,15,List(4),council,council,false), Span(13,14,List(5),national,nation,false), Span(11,12,List(6),office,office,false), Span(10,11,List(7),post,post,false), Span(8,9,List(8),watchdog,watchdog,false), Span(4,5,List(9),promised,promise-01,false), Span(1,2,List(10),sunday,sunday,false)),Map(2 -> increase-01, 5 -> nation, 8 -> watchdog, 7 -> post, 1 -> last, 4 -> council, 6 -> office, 9 -> promise-01, 0 -> year, 10 -> sunday, 3 -> tariff),Map(w -> watchdog, n -> nation, t -> tariff, p2 -> promise-01, s -> sunday, p -> post, y -> year, i -> increase-01, c -> council, l -> last, o -> office))),[Ljava.lang.String;@110f9de8,Annotation([Ljava.lang.String;@1847f318,[Ljava.lang.String;@1ba8b91c,[Ljava.lang.String;@6210eb73),Annotation([Ljava.lang.String;@44d1fd51,[Ljava.lang.String;@364df423,[Ledu.cmu.lti.nlp.amr.Dependency;@37d741af),Annotation([Ljava.lang.String;@151964cd,[Ljava.lang.String;@3628d98d,[Ljava.lang.String;@33e2d3c2),Annotation([Ljava.lang.String;@70bc802a,[Ljava.lang.String;@67827f38,[Ledu.cmu.lti.nlp.amr.Entity;@286e6a9f))
AMR:
(c / council, mod, n / nation)
(i / increase-01, ARG0, s / sunday)
(i / increase-01, ARG1, t / tariff)
(i / increase-01, location, c / council)
(i / increase-01, time, y / year)
(o / office, mod, p / post)
(p2 / promise-01, ARG1, o / office)
(p2 / promise-01, ARG2, w / watchdog)
(p2 / promise-01, condition, i / increase-01)
(y / year, mod, l / last)

Decoded in 88,602 microseconds
Sentence: yarranton in the appropriate setting of the royal society of arts promised that sport would be more sophisticated in massaging the system

NER Entity: (organization :name (name :op "royal" :op "society" :op "of" :op "arts"))
Spans:
Span 3-4:  appropriate => appropriate
Span 11-12:  promised => promise-01
Span 7-11:  royal society of arts => (organization :name (name :op "royal" :op "society" :op "of" :op "arts"))
Span 4-5:  setting => set-02
Span 17-18:  sophisticated => sophisticated
Span 13-14:  sport => sport
Span 21-22:  system => system

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),system,system,false), Span(17,18,List(1),sophisticated,sophisticated,false), Span(13,14,List(2),sport,sport,false), Span(11,12,List(3),promised,promise-01,false), Span(7,11,List(9, 8, 7, 6, 5, 4),royal society of arts,(organization :name (name :op "royal" :op "society" :op "of" :op "arts")),false), Span(4,5,List(10),setting,set-02,false), Span(3,4,List(11),appropriate,appropriate,false)),Map(2 -> sport, 5 -> name, 8 -> "of", 7 -> "society", 1 -> sophisticated, 11 -> appropriate, 4 -> organization, 6 -> "royal", 9 -> "arts", 0 -> system, 10 -> set-02, 3 -> promise-01),Map(n -> name, s2 -> sophisticated, s -> system, s4 -> set-02, p -> promise-01, a -> appropriate, s3 -> sport, o -> organization))),[Ljava.lang.String;@691a0175,Annotation([Ljava.lang.String;@2a55de3b,[Ljava.lang.String;@6b710933,[Ljava.lang.String;@4a132a60),Annotation([Ljava.lang.String;@30432a9e,[Ljava.lang.String;@9a303d3,[Ledu.cmu.lti.nlp.amr.Dependency;@2d501696),Annotation([Ljava.lang.String;@64fae917,[Ljava.lang.String;@14dd18cc,[Ljava.lang.String;@3f8703c7),Annotation([Ljava.lang.String;@39091e66,[Ljava.lang.String;@5aad7cb,[Ledu.cmu.lti.nlp.amr.Entity;@133d5355))
AMR:
(n / name, op, "arts")
(n / name, op, "of")
(n / name, op, "royal")
(n / name, op, "society")
(o / organization, name, n / name)
(p / promise-01, ARG0, s4 / set-02)
(p / promise-01, ARG1, s2 / sophisticated)
(s2 / sophisticated, domain, s3 / sport)
(s4 / set-02, ARG0, s / system)
(s4 / set-02, ARG1, o / organization)
(s4 / set-02, mod, a / appropriate)

Decoded in 93,595 microseconds
Sentence: she promised her support on the condition that mays and berthon were sidelined and rudd was given his chance

Spans:
Span 13-14:  and => and
Span 9-10:  and => and
Span 18-19:  chance => chance
Span 6-7:  condition => condition
Span 16-17:  given => give-01
Span 1-2:  promised => promise-01
Span 0-1:  she => she
Span 12-13:  sidelined => sideline
Span 3-4:  support => support-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),chance,chance,false), Span(16,17,List(1),given,give-01,false), Span(13,14,List(2),and,and,false), Span(12,13,List(3),sidelined,sideline,false), Span(9,10,List(4),and,and,false), Span(6,7,List(5),condition,condition,false), Span(3,4,List(6),support,support-01,false), Span(1,2,List(7),promised,promise-01,false), Span(0,1,List(8),she,she,false)),Map(2 -> and, 5 -> condition, 8 -> she, 7 -> promise-01, 1 -> give-01, 4 -> and, 6 -> support-01, 0 -> chance, 3 -> sideline),Map(s2 -> support-01, s -> sideline, p -> promise-01, g -> give-01, a -> and, a2 -> and, s3 -> she, c -> chance, c2 -> condition))),[Ljava.lang.String;@1f29fb51,Annotation([Ljava.lang.String;@7d3292d2,[Ljava.lang.String;@3455935,[Ljava.lang.String;@3de3a840),Annotation([Ljava.lang.String;@2d3b217e,[Ljava.lang.String;@513ee65,[Ledu.cmu.lti.nlp.amr.Dependency;@5f882b7d),Annotation([Ljava.lang.String;@64df4c8a,[Ljava.lang.String;@1a2bc3,[Ljava.lang.String;@362f0f42),Annotation([Ljava.lang.String;@4b92d1d8,[Ljava.lang.String;@140ee2ab,[Ledu.cmu.lti.nlp.amr.Entity;@5d4352d6))
AMR:
(a / and, op, s / sideline)
(c2 / condition, poss, a / and)
(g / give-01, ARG1, s / sideline)
(g / give-01, ARG2, c / chance)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, s2 / support-01)
(p / promise-01, ARG4, a / and)
(s2 / support-01, ARG1, s3 / she)

Decoded in 157,205 microseconds
Sentence: ministers promised that noone would be more than 3 per week worse off

Spans:
Span 8-9:  3 => 3
Span 0-1:  ministers => (have-org-role-91 :ARG2 minister)
Span 12-13:  off => off
Span 1-2:  promised => promise-01
Span 10-11:  week => week
Span 11-12:  worse => bad

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),off,off,false), Span(11,12,List(1),worse,bad,false), Span(10,11,List(2),week,week,false), Span(8,9,List(3),3,3,false), Span(1,2,List(4),promised,promise-01,false), Span(0,1,List(6, 5),ministers,(have-org-role-91 :ARG2 minister),false)),Map(2 -> week, 5 -> have-org-role-91, 1 -> bad, 4 -> promise-01, 6 -> minister, 0 -> off, 3 -> 3),Map(w -> week, h -> have-org-role-91, b -> bad, m -> minister, p -> promise-01, o -> off, 3 -> 3))),[Ljava.lang.String;@6ef38f6f,Annotation([Ljava.lang.String;@384df951,[Ljava.lang.String;@72b51b8,[Ljava.lang.String;@2d020ab5),Annotation([Ljava.lang.String;@610d0828,[Ljava.lang.String;@1e92abdf,[Ledu.cmu.lti.nlp.amr.Dependency;@2f51cd27),Annotation([Ljava.lang.String;@2373d3b6,[Ljava.lang.String;@95063e9,[Ljava.lang.String;@7ccf5ac5),Annotation([Ljava.lang.String;@11507b87,[Ljava.lang.String;@3adde4f2,[Ledu.cmu.lti.nlp.amr.Entity;@3de1ea0f))
AMR:
(b / bad, mod, o / off)
(h / have-org-role-91, ARG0, 3 / 3)
(h / have-org-role-91, ARG1, w / week)
(h / have-org-role-91, ARG2, m / minister)
(p / promise-01, ARG0, m / minister)
(p / promise-01, ARG1, b / bad)

Decoded in 113,145 microseconds
Sentence: indoor courts are a priority and by the end of next year 450 are promised

Spans:
Span 12-13:  450 => 450
Span 5-6:  and => and
Span 1-2:  courts => court
Span 0-1:  indoor => indoor
Span 10-11:  next => next
Span 4-5:  priority => priority
Span 14-15:  promised => promise-01
Span 11-12:  year => year

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),promised,promise-01,false), Span(12,13,List(1),450,450,false), Span(11,12,List(2),year,year,false), Span(10,11,List(3),next,next,false), Span(5,6,List(4),and,and,false), Span(4,5,List(5),priority,priority,false), Span(1,2,List(6),courts,court,false), Span(0,1,List(7),indoor,indoor,false)),Map(2 -> year, 5 -> priority, 7 -> indoor, 1 -> 450, 4 -> and, 6 -> court, 0 -> promise-01, 3 -> next),Map(n -> next, p2 -> priority, y -> year, p -> promise-01, a -> and, 4 -> 450, i -> indoor, c -> court))),[Ljava.lang.String;@3acd9e86,Annotation([Ljava.lang.String;@11628d93,[Ljava.lang.String;@5d3cb6cf,[Ljava.lang.String;@3d05ffdb),Annotation([Ljava.lang.String;@54e0a229,[Ljava.lang.String;@67b65d47,[Ledu.cmu.lti.nlp.amr.Dependency;@75a61582),Annotation([Ljava.lang.String;@6ace4625,[Ljava.lang.String;@c5f5deb,[Ljava.lang.String;@490ef5a5),Annotation([Ljava.lang.String;@7521491b,[Ljava.lang.String;@5c46c7b0,[Ledu.cmu.lti.nlp.amr.Entity;@2ae02324))
AMR:
(4 / 450, mod, p / promise-01)
(a / and, op, p2 / priority)
(c / court, mod, i / indoor)
(p / promise-01, ARG0, y / year)
(p / promise-01, ARG2, a / and)
(p2 / priority, domain, c / court)
(y / year, mod, n / next)

Decoded in 25,268 microseconds
Sentence: fertilizers remain an attractive option for many farmers but because of finite fossil  fuel reserves and the political instability of countries from which phosphate is  obtained the prices promise to rise still further

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = fertilizers remain an attractive option for many farmers but because of finite fossil  fuel reserves and the political instability of countries from which phosphate is  obtained the prices promise to rise still further
myTokenized = fertilizers remain an attractive option for many farmers but because of finite fossil fuel reserves and the political instability of countries from which phosphate is obtained the prices promise to rise still further
i = 13
prefix = List(fertilizers, remain, an, attractive, option, for, many, farmers, but, because, of, finite, fossil, fuel)
regexr = \Qf\E ?\Qe\E ?\Qr\E ?\Qt\E ?\Qi\E ?\Ql\E ?\Qi\E ?\Qz\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qr\E ?\Qe\E ?\Qm\E ?\Qa\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qn\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qc\E ?\Qt\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Qo\E ?\Qp\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qm\E ?\Qa\E ?\Qn\E ?\Qy\E ?\Qf\E ?\Qa\E ?\Qr\E ?\Qm\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qb\E ?\Qu\E ?\Qt\E ?\Qb\E ?\Qe\E ?\Qc\E ?\Qa\E ?\Qu\E ?\Qs\E ?\Qe\E ?\Qo\E ?\Qf\E ?\Qf\E ?\Qi\E ?\Qn\E ?\Qi\E ?\Qt\E ?\Qe\E ?\Qf\E ?\Qo\E ?\Qs\E ?\Qs\E ?\Qi\E ?\Ql\E ?\Qf\E ?\Qu\E ?\Qe\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: we should remind ourselves that while the promisee may not be the initiator of the bond of which the promise is the whole or a part he is not entirely passive either, it is always up to him to waive his right under the promise and thus terminate the binding force of the promise

Spans:
Span 35-36:  always => always
Span 46-47:  and => and
Span 50-51:  binding => bind-01
Span 31-32:  either => either
Span 29-30:  entirely => entire
Span 51-52:  force => force
Span 26-27:  he => he
Span 33-34:  it => it
Span 8-9:  may => (date-entity :month 5)
Span 23-24:  or => or
Span 30-31:  passive => passive
Span 54-55:  promise => promise-01
Span 45-46:  promise => promise-01
Span 19-20:  promise => promise-01
Span 2-3:  remind => remind-01
Span 1-2:  should => recommend-01
Span 48-49:  terminate => terminate-01
Span 0-1:  we => we
Span 22-23:  whole => whole

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),promise,promise-01,false), Span(51,52,List(1),force,force,false), Span(50,51,List(2),binding,bind-01,false), Span(48,49,List(3),terminate,terminate-01,false), Span(46,47,List(4),and,and,false), Span(45,46,List(5),promise,promise-01,false), Span(35,36,List(6),always,always,false), Span(33,34,List(7),it,it,false), Span(31,32,List(8),either,either,false), Span(30,31,List(9),passive,passive,false), Span(29,30,List(10),entirely,entire,false), Span(26,27,List(11),he,he,false), Span(23,24,List(12),or,or,false), Span(22,23,List(13),whole,whole,false), Span(19,20,List(14),promise,promise-01,false), Span(8,9,List(16, 15),may,(date-entity :month 5),false), Span(2,3,List(17),remind,remind-01,false), Span(1,2,List(18),should,recommend-01,false), Span(0,1,List(19),we,we,false)),Map(2 -> bind-01, 5 -> promise-01, 12 -> or, 15 -> date-entity, 8 -> either, 18 -> recommend-01, 7 -> it, 17 -> remind-01, 1 -> force, 4 -> and, 11 -> he, 14 -> promise-01, 6 -> always, 0 -> promise-01, 9 -> passive, 16 -> 5, 19 -> we, 3 -> terminate-01, 10 -> entire, 13 -> whole),Map(e -> either, w -> whole, h -> he, 5 -> 5, b -> bind-01, t -> terminate-01, p2 -> promise-01, e2 -> entire, d -> date-entity, r2 -> recommend-01, p -> promise-01, a -> and, p4 -> promise-01, w2 -> we, r -> remind-01, a2 -> always, i -> it, f -> force, o -> or, p3 -> passive))),[Ljava.lang.String;@1e89a8d9,Annotation([Ljava.lang.String;@5fac4e38,[Ljava.lang.String;@29436f9a,[Ljava.lang.String;@a53fca0),Annotation([Ljava.lang.String;@fee71ac,[Ljava.lang.String;@6f68db5f,[Ledu.cmu.lti.nlp.amr.Dependency;@4d1a731d),Annotation([Ljava.lang.String;@37b9c77,[Ljava.lang.String;@285d4a6a,[Ljava.lang.String;@4c089da),Annotation([Ljava.lang.String;@7c9a49a5,[Ljava.lang.String;@75592f8b,[Ledu.cmu.lti.nlp.amr.Entity;@32408add))
AMR:
(a / and, op, p2 / promise-01)
(a / and, op, t / terminate-01)
(a / and, time, a2 / always)
(b / bind-01, ARG1, f / force)
(d / date-entity, month, 5 / 5)
(o / or, op, w / whole)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, e / either)
(p2 / promise-01, ARG0, h / he)
(p3 / passive, degree, e2 / entire)
(p3 / passive, domain, h / he)
(p4 / promise-01, ARG0, h / he)
(r / remind-01, ARG0, w2 / we)
(r / remind-01, ARG1, d / date-entity)
(r2 / recommend-01, ARG0, h / he)
(r2 / recommend-01, ARG1, r / remind-01)
(t / terminate-01, ARG0, i / it)
(t / terminate-01, ARG1, f / force)
(w / whole, domain, p4 / promise-01)

Decoded in 296,559 microseconds
Sentence: a network of up to 12 regional freight terminals is also planned promising increased employment in these areas and other benefits including taking the equivalent of some 400000 lorryloads off britains roads a year

mkDayMonthYear(400000,00,00,40)
mkDayMonthYear(400000,00,00,40)
Spans:
Span 5-6:  12 => 12
Span 27-28:  400000 => (date-entity :day 0 :month 0 :year 40)
Span 10-11:  also => also
Span 18-19:  and => and
Span 17-18:  areas => area
Span 20-21:  benefits => benefit-01
Span 14-15:  employment => employment
Span 24-25:  equivalent => equivalent
Span 7-8:  freight => freight
Span 13-14:  increased => increase-01
Span 1-2:  network => network
Span 29-30:  off => off
Span 19-20:  other => other
Span 11-12:  planned => plan-01
Span 12-13:  promising => promise-01
Span 6-7:  regional => region
Span 31-32:  roads => road
Span 26-27:  some => some
Span 33-34:  year => year

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),year,year,false), Span(31,32,List(1),roads,road,false), Span(29,30,List(2),off,off,false), Span(27,28,List(6, 5, 4, 3),400000,(date-entity :day 0 :month 0 :year 40),false), Span(26,27,List(7),some,some,false), Span(24,25,List(8),equivalent,equivalent,false), Span(20,21,List(9),benefits,benefit-01,false), Span(19,20,List(10),other,other,false), Span(18,19,List(11),and,and,false), Span(17,18,List(12),areas,area,false), Span(14,15,List(13),employment,employment,false), Span(13,14,List(14),increased,increase-01,false), Span(12,13,List(15),promising,promise-01,false), Span(11,12,List(16),planned,plan-01,false), Span(10,11,List(17),also,also,false), Span(7,8,List(18),freight,freight,false), Span(6,7,List(19),regional,region,false), Span(5,6,List(20),12,12,false), Span(1,2,List(21),network,network,false)),Map(2 -> off, 5 -> 0, 12 -> area, 15 -> promise-01, 8 -> equivalent, 21 -> network, 18 -> freight, 7 -> some, 17 -> also, 1 -> road, 4 -> 0, 11 -> and, 14 -> increase-01, 20 -> 12, 6 -> 40, 0 -> year, 9 -> benefit-01, 16 -> plan-01, 19 -> region, 3 -> date-entity, 10 -> other, 13 -> employment),Map(e -> equivalent, n -> network, b -> benefit-01, p2 -> plan-01, e2 -> employment, a3 -> also, s -> some, d -> date-entity, 1 -> 12, r2 -> region, p -> promise-01, y -> year, 4 -> 40, a -> and, o2 -> other, 02 -> 0, i -> increase-01, r -> road, a2 -> area, f -> freight, 0 -> 0, o -> off))),[Ljava.lang.String;@2b5cccf1,Annotation([Ljava.lang.String;@5992f874,[Ljava.lang.String;@3ff5b59d,[Ljava.lang.String;@1c667739),Annotation([Ljava.lang.String;@b1d4dc0,[Ljava.lang.String;@30db7df3,[Ledu.cmu.lti.nlp.amr.Dependency;@1a29f594),Annotation([Ljava.lang.String;@38b9d4f7,[Ljava.lang.String;@304cc139,[Ljava.lang.String;@7f219df4),Annotation([Ljava.lang.String;@78093f60,[Ljava.lang.String;@271ff531,[Ledu.cmu.lti.nlp.amr.Entity;@231a7808))
AMR:
(1 / 12, op, b / benefit-01)
(a / and, op, i / increase-01)
(b / benefit-01, ARG0, r / road)
(b / benefit-01, ARG1, a2 / area)
(b / benefit-01, mod, o2 / other)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, op, p2 / plan-01)
(d / date-entity, year, 4 / 40)
(e2 / employment, location, a2 / area)
(f / freight, mod, r2 / region)
(i / increase-01, ARG0, e / equivalent)
(i / increase-01, ARG1, e2 / employment)
(i / increase-01, ARG2, f / freight)
(i / increase-01, time, y / year)
(o / off, op, r / road)
(p / promise-01, ARG1, n / network)
(p / promise-01, ARG2, i / increase-01)
(p2 / plan-01, ARG1, p / promise-01)
(p2 / plan-01, mod, a3 / also)
(s / some, op, i / increase-01)

Decoded in 619,513 microseconds
Sentence: like much else the destroyers were a gesture ofsympathy promising great things in the future

Spans:
Span 4-5:  destroyers => destroyer
Span 2-3:  else => else
Span 14-15:  future => future
Span 7-8:  gesture => gesture-01
Span 10-11:  great => great
Span 1-2:  much => much
Span 9-10:  promising => promise-01
Span 11-12:  things => thing

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),future,future,false), Span(11,12,List(1),things,thing,false), Span(10,11,List(2),great,great,false), Span(9,10,List(3),promising,promise-01,false), Span(7,8,List(4),gesture,gesture-01,false), Span(4,5,List(5),destroyers,destroyer,false), Span(2,3,List(6),else,else,false), Span(1,2,List(7),much,much,false)),Map(2 -> great, 5 -> destroyer, 7 -> much, 1 -> thing, 4 -> gesture-01, 6 -> else, 0 -> future, 3 -> promise-01),Map(e -> else, t -> thing, m -> much, d -> destroyer, g2 -> gesture-01, p -> promise-01, g -> great, f -> future))),[Ljava.lang.String;@666adef3,Annotation([Ljava.lang.String;@7253580c,[Ljava.lang.String;@3db9b677,[Ljava.lang.String;@6b7a5e49),Annotation([Ljava.lang.String;@2ec441bf,[Ljava.lang.String;@56b87a95,[Ledu.cmu.lti.nlp.amr.Dependency;@6977f8ad),Annotation([Ljava.lang.String;@43675bf3,[Ljava.lang.String;@36c5d117,[Ljava.lang.String;@75225918),Annotation([Ljava.lang.String;@220772bc,[Ljava.lang.String;@16fda618,[Ledu.cmu.lti.nlp.amr.Entity;@66a37d72))
AMR:
(d / destroyer, mod, m / much)
(g2 / gesture-01, ARG0, d / destroyer)
(g2 / gesture-01, ARG1, e / else)
(p / promise-01, ARG1, g2 / gesture-01)
(p / promise-01, ARG2, t / thing)
(p / promise-01, location, f / future)
(t / thing, mod, g / great)

Decoded in 160,623 microseconds
Sentence: im going to make you the new madonna waterman promised  his new prodigy but even today he shakes his head  disbelievingly at the opportunity others missed

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = im going to make you the new madonna waterman promised  his new prodigy but even today he shakes his head  disbelievingly at the opportunity others missed
myTokenized = im going to make you the new madonna waterman promised his new prodigy but even today he shakes his head disbelievingly at the opportunity others missed
i = 10
prefix = List(im, going, to, make, you, the, new, madonna, waterman, promised, his)
regexr = \Qi\E ?\Qm\E ?\Qg\E ?\Qo\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qt\E ?\Qo\E ?\Qm\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qn\E ?\Qe\E ?\Qw\E ?\Qm\E ?\Qa\E ?\Qd\E ?\Qo\E ?\Qn\E ?\Qn\E ?\Qa\E ?\Qw\E ?\Qa\E ?\Qt\E ?\Qe\E ?\Qr\E ?\Qm\E ?\Qa\E ?\Qn\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qh\E ?\Qi\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: mr lula of the pt workers party promises to deploy 1

Spans:
Span 10-11:  1 => 1
Span 9-10:  deploy => deploy-01
Span 6-7:  party => party
Span 7-8:  promises => promise-01
Span 5-6:  workers => (person :ARG0-of work-01)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),1,1,false), Span(9,10,List(1),deploy,deploy-01,false), Span(7,8,List(2),promises,promise-01,false), Span(6,7,List(3),party,party,false), Span(5,6,List(5, 4),workers,(person :ARG0-of work-01),false)),Map(2 -> promise-01, 5 -> work-01, 1 -> deploy-01, 4 -> person, 0 -> 1, 3 -> party),Map(w -> work-01, p2 -> party, d -> deploy-01, p -> promise-01, 1 -> 1, p3 -> person))),[Ljava.lang.String;@35212499,Annotation([Ljava.lang.String;@12e9d40f,[Ljava.lang.String;@35612e7c,[Ljava.lang.String;@7f32ea44),Annotation([Ljava.lang.String;@67b25799,[Ljava.lang.String;@6d9532fe,[Ledu.cmu.lti.nlp.amr.Dependency;@5e46f9e6),Annotation([Ljava.lang.String;@5c09b65,[Ljava.lang.String;@281a06d6,[Ljava.lang.String;@44b6e02b),Annotation([Ljava.lang.String;@42374a4b,[Ljava.lang.String;@3beea3e3,[Ledu.cmu.lti.nlp.amr.Entity;@3049aad2))
AMR:
(p / promise-01, ARG0, p2 / party)
(p / promise-01, ARG1, d / deploy-01)
(p / promise-01, ARG3, 1 / 1)
(p2 / party, mod, p3 / person)
(w / work-01, ARG0, p3 / person)

Decoded in 14,760 microseconds
Sentence: the campaign was boosted when king hussein of jordan promised his help during lunch with mrs thatcher yesterday at chequers

NER Entity: (country :name (name :op "jordan"))
Spans:
Span 1-2:  campaign => campaign-01
Span 11-12:  help => help-01
Span 5-6:  king => king
Span 13-14:  lunch => lunch-01
Span 9-10:  promised => promise-01
Span 17-18:  yesterday => yesterday

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),yesterday,yesterday,false), Span(13,14,List(1),lunch,lunch-01,false), Span(11,12,List(2),help,help-01,false), Span(9,10,List(3),promised,promise-01,false), Span(5,6,List(4),king,king,false), Span(1,2,List(5),campaign,campaign-01,false)),Map(2 -> help-01, 5 -> campaign-01, 1 -> lunch-01, 4 -> king, 0 -> yesterday, 3 -> promise-01),Map(h -> help-01, k -> king, p -> promise-01, y -> yesterday, c -> campaign-01, l -> lunch-01))),[Ljava.lang.String;@346dd9c2,Annotation([Ljava.lang.String;@17f36a72,[Ljava.lang.String;@6dd16ea6,[Ljava.lang.String;@50b78c9d),Annotation([Ljava.lang.String;@4270c0d1,[Ljava.lang.String;@7882fb6a,[Ledu.cmu.lti.nlp.amr.Dependency;@5f4829f5),Annotation([Ljava.lang.String;@7abac4b1,[Ljava.lang.String;@7bc77f69,[Ljava.lang.String;@667e05fb),Annotation([Ljava.lang.String;@5bbad64e,[Ljava.lang.String;@474bc9ee,[Ledu.cmu.lti.nlp.amr.Entity;@40b64cd3))
AMR:
(h / help-01, ARG0, k / king)
(l / lunch-01, ARG1, h / help-01)
(p / promise-01, ARG0, c / campaign-01)
(p / promise-01, ARG1, h / help-01)
(p / promise-01, time, y / yesterday)

Decoded in 52,757 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6dd1d6,Annotation([Ljava.lang.String;@29eb38d2,[Ljava.lang.String;@11df787e,[Ljava.lang.String;@665fa15c),Annotation([Ljava.lang.String;@105ad386,[Ljava.lang.String;@3af50acd,[Ledu.cmu.lti.nlp.amr.Dependency;@2d9836f8),Annotation([Ljava.lang.String;@6440eb2a,[Ljava.lang.String;@620f45d1,[Ljava.lang.String;@58b0cea2),Annotation([Ljava.lang.String;@3fce1b2b,[Ljava.lang.String;@7459c4c6,[Ledu.cmu.lti.nlp.amr.Entity;@3185ded7))
AMR:


Decoded in 1,188 microseconds
Sentence: full details of what promise to be uplifting and enjoyable celebrations are carried on page 4 and the back cover

Spans:
Span 15-16:  4 => 4
Span 16-17:  and => and
Span 8-9:  and => and
Span 18-19:  back => back
Span 1-2:  details => detail-01
Span 0-1:  full => full
Span 14-15:  page => page
Span 4-5:  promise => promise-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),back,back,false), Span(16,17,List(1),and,and,false), Span(15,16,List(2),4,4,false), Span(14,15,List(3),page,page,false), Span(8,9,List(4),and,and,false), Span(4,5,List(5),promise,promise-01,false), Span(1,2,List(6),details,detail-01,false), Span(0,1,List(7),full,full,false)),Map(2 -> 4, 5 -> promise-01, 7 -> full, 1 -> and, 4 -> and, 6 -> detail-01, 0 -> back, 3 -> page),Map(b -> back, p2 -> promise-01, d -> detail-01, p -> page, 4 -> 4, a -> and, a2 -> and, f -> full))),[Ljava.lang.String;@4be90ea7,Annotation([Ljava.lang.String;@31c11ce0,[Ljava.lang.String;@7d4ecfa4,[Ljava.lang.String;@41225841),Annotation([Ljava.lang.String;@35d034cf,[Ljava.lang.String;@783b1da2,[Ledu.cmu.lti.nlp.amr.Dependency;@7116b458),Annotation([Ljava.lang.String;@99a3769,[Ljava.lang.String;@6babd36b,[Ljava.lang.String;@5dc54d06),Annotation([Ljava.lang.String;@4443f502,[Ljava.lang.String;@498a7951,[Ledu.cmu.lti.nlp.amr.Entity;@2222da8f))
AMR:
(a2 / and, op, p2 / promise-01)
(b / back, op, d / detail-01)
(d / detail-01, ARG0, a / and)
(d / detail-01, ARG1, p2 / promise-01)
(d / detail-01, mod, f / full)
(p2 / promise-01, ARG0, 4 / 4)
(p2 / promise-01, ARG1, p / page)

Decoded in 78,375 microseconds
Sentence: tomorrow you take us to freuds house hmm  i promised to do that

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = tomorrow you take us to freuds house hmm  i promised to do that
myTokenized = tomorrow you take us to freuds house hmm i promised to do that
i = 8
prefix = List(tomorrow, you, take, us, to, freuds, house, hmm, i)
regexr = \Qt\E ?\Qo\E ?\Qm\E ?\Qo\E ?\Qr\E ?\Qr\E ?\Qo\E ?\Qw\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qu\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qf\E ?\Qr\E ?\Qe\E ?\Qu\E ?\Qd\E ?\Qs\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Qs\E ?\Qe\E ?\Qh\E ?\Qm\E ?\Qm\E ?\Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: whatever leisure the holidays had promised was now ended

Spans:
Span 8-9:  ended => end-01
Span 3-4:  holidays => holiday
Span 7-8:  now => now
Span 5-6:  promised => promise-01
Span 0-1:  whatever => whatever

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),ended,end-01,false), Span(7,8,List(1),now,now,false), Span(5,6,List(2),promised,promise-01,false), Span(3,4,List(3),holidays,holiday,false), Span(0,1,List(4),whatever,whatever,false)),Map(2 -> promise-01, 1 -> now, 4 -> whatever, 0 -> end-01, 3 -> holiday),Map(w -> whatever, n -> now, e -> end-01, h -> holiday, p -> promise-01))),[Ljava.lang.String;@305ba3ee,Annotation([Ljava.lang.String;@5067770f,[Ljava.lang.String;@38b9a306,[Ljava.lang.String;@237dfc02),Annotation([Ljava.lang.String;@242bf982,[Ljava.lang.String;@4309d85b,[Ledu.cmu.lti.nlp.amr.Dependency;@3b5b60bf),Annotation([Ljava.lang.String;@6c2cba0a,[Ljava.lang.String;@6c6a1e01,[Ljava.lang.String;@2ad80b42),Annotation([Ljava.lang.String;@4dcb3007,[Ljava.lang.String;@56be4377,[Ledu.cmu.lti.nlp.amr.Entity;@653f661e))
AMR:
(e / end-01, ARG0, p / promise-01)
(e / end-01, ARG1, w / whatever)
(e / end-01, time, n / now)
(p / promise-01, ARG0, h / holiday)

Decoded in 70,624 microseconds
Sentence: east germany yesterday promised to consult the roundtable group of ruling parties and opposition figures on legislation and offered reformers seats on parliamentary committees

NER Entity: (country :name (name :op "germany"))
Spans:
Span 17-18:  and => and
Span 12-13:  and => and
Span 5-6:  consult => consult-01
Span 0-1:  east => east
Span 14-15:  figures => figure
Span 8-9:  group => group
Span 16-17:  legislation => legislation
Span 18-19:  offered => offer-01
Span 13-14:  opposition => oppose-01
Span 11-12:  parties => party
Span 3-4:  promised => promise-01
Span 10-11:  ruling => rule-03
Span 20-21:  seats => seat
Span 2-3:  yesterday => yesterday

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),seats,seat,false), Span(18,19,List(1),offered,offer-01,false), Span(17,18,List(2),and,and,false), Span(16,17,List(3),legislation,legislation,false), Span(14,15,List(4),figures,figure,false), Span(13,14,List(5),opposition,oppose-01,false), Span(12,13,List(6),and,and,false), Span(11,12,List(7),parties,party,false), Span(10,11,List(8),ruling,rule-03,false), Span(8,9,List(9),group,group,false), Span(5,6,List(10),consult,consult-01,false), Span(3,4,List(11),promised,promise-01,false), Span(2,3,List(12),yesterday,yesterday,false), Span(0,1,List(13),east,east,false)),Map(2 -> and, 5 -> oppose-01, 12 -> yesterday, 8 -> rule-03, 7 -> party, 1 -> offer-01, 4 -> figure, 11 -> promise-01, 6 -> and, 0 -> seat, 9 -> group, 3 -> legislation, 10 -> consult-01, 13 -> east),Map(e -> east, p2 -> promise-01, s -> seat, p -> party, g -> group, y -> yesterday, a -> and, o2 -> oppose-01, a2 -> and, r -> rule-03, c -> consult-01, l -> legislation, f -> figure, o -> offer-01))),[Ljava.lang.String;@25496f80,Annotation([Ljava.lang.String;@78374f9f,[Ljava.lang.String;@774c8d61,[Ljava.lang.String;@42d61877),Annotation([Ljava.lang.String;@75e04ee8,[Ljava.lang.String;@595c9dcd,[Ledu.cmu.lti.nlp.amr.Dependency;@4f7c2b90),Annotation([Ljava.lang.String;@611023b4,[Ljava.lang.String;@6a983034,[Ljava.lang.String;@2d84dc98),Annotation([Ljava.lang.String;@6dae9680,[Ljava.lang.String;@611ae5c1,[Ledu.cmu.lti.nlp.amr.Entity;@2ce213b5))
AMR:
(a / and, op, l / legislation)
(a / and, op, o / offer-01)
(a2 / and, op, f / figure)
(a2 / and, op, p / party)
(c / consult-01, ARG1, g / group)
(g / group, poss, p / party)
(o / offer-01, ARG2, o2 / oppose-01)
(o2 / oppose-01, ARG1, f / figure)
(p2 / promise-01, ARG1, s / seat)
(p2 / promise-01, ARG2, c / consult-01)
(p2 / promise-01, time, e / east)
(p2 / promise-01, time, y / yesterday)
(r / rule-03, ARG0, p / party)

Decoded in 109,691 microseconds
Sentence: balding is embarking on what promises to be a richly remunerative jumps campaign

Spans:
Span 12-13:  campaign => campaign-01
Span 5-6:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),campaign,campaign-01,false), Span(5,6,List(1),promises,promise-01,false)),Map(1 -> promise-01, 0 -> campaign-01),Map(p -> promise-01, c -> campaign-01))),[Ljava.lang.String;@2e7be718,Annotation([Ljava.lang.String;@4880f07f,[Ljava.lang.String;@92d4709,[Ljava.lang.String;@7b92a493),Annotation([Ljava.lang.String;@5872ee46,[Ljava.lang.String;@61796307,[Ledu.cmu.lti.nlp.amr.Dependency;@6854928f),Annotation([Ljava.lang.String;@8621fcc,[Ljava.lang.String;@62158e60,[Ljava.lang.String;@753672ee),Annotation([Ljava.lang.String;@49b3a360,[Ljava.lang.String;@30ab196d,[Ledu.cmu.lti.nlp.amr.Entity;@31125c11))
AMR:
(p / promise-01, ARG1, c / campaign-01)

Decoded in 9,223 microseconds
Sentence: like the crooks pursued by the hero in calling bulldog drummond 1951 for whom life in peacetime seemed unbearably flat or the exofficers who take over their old ship for smuggling runs across the channel in the ship that died of shame 1955 or the league of gentlemen 1960 for whom robbing a bank promises their finest hour many filmmakers seemed to feel that there was nothing to do now the war was over and the hopes of peace had faded than go back to the site of old glories

Spans:
Span 11-12:  1951 => (date-entity :year 1951)
Span 42-43:  1955 => (date-entity :year 1955)
Span 48-49:  1960 => (date-entity :year 1960)
Span 32-33:  across => across
Span 74-75:  and => and
Span 83-84:  back => back
Span 53-54:  bank => bank
Span 34-35:  channel => channel
Span 2-3:  crooks => crook
Span 39-40:  died => die-01
Span 80-81:  faded => fade-01
Span 62-63:  feel => feel-01
Span 56-57:  finest => (fine :degree most)
Span 19-20:  flat => flat
Span 6-7:  hero => hero
Span 76-77:  hopes => hope-01
Span 57-58:  hour => (temporal-quantity :unit hour)
Span 45-46:  league => league
Span 14-15:  life => life
Span 58-59:  many => many
Span 66-67:  nothing => nothing
Span 69-70:  now => now
Span 88-89:  old => old
Span 27-28:  old => old
Span 43-44:  or => or
Span 20-21:  or => or
Span 78-79:  peace => peace
Span 54-55:  promises => promise-01
Span 3-4:  pursued => pursue-01
Span 51-52:  robbing => rob-01
Span 60-61:  seemed => seem-01
Span 17-18:  seemed => seem-01
Span 41-42:  shame => shame
Span 37-38:  ship => ship
Span 28-29:  ship => ship
Span 86-87:  site => site
Span 30-31:  smuggling => smuggle-01
Span 71-72:  war => war

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(88,89,List(0),old,old,false), Span(86,87,List(1),site,site,false), Span(83,84,List(2),back,back,false), Span(80,81,List(3),faded,fade-01,false), Span(78,79,List(4),peace,peace,false), Span(76,77,List(5),hopes,hope-01,false), Span(74,75,List(6),and,and,false), Span(71,72,List(7),war,war,false), Span(69,70,List(8),now,now,false), Span(66,67,List(9),nothing,nothing,false), Span(62,63,List(10),feel,feel-01,false), Span(60,61,List(11),seemed,seem-01,false), Span(58,59,List(12),many,many,false), Span(57,58,List(14, 13),hour,(temporal-quantity :unit hour),false), Span(56,57,List(16, 15),finest,(fine :degree most),false), Span(54,55,List(17),promises,promise-01,false), Span(53,54,List(18),bank,bank,false), Span(51,52,List(19),robbing,rob-01,false), Span(48,49,List(21, 20),1960,(date-entity :year 1960),false), Span(45,46,List(22),league,league,false), Span(43,44,List(23),or,or,false), Span(42,43,List(25, 24),1955,(date-entity :year 1955),false), Span(41,42,List(26),shame,shame,false), Span(39,40,List(27),died,die-01,false), Span(37,38,List(28),ship,ship,false), Span(34,35,List(29),channel,channel,false), Span(32,33,List(30),across,across,false), Span(30,31,List(31),smuggling,smuggle-01,false), Span(28,29,List(32),ship,ship,false), Span(27,28,List(33),old,old,false), Span(20,21,List(34),or,or,false), Span(19,20,List(35),flat,flat,false), Span(17,18,List(36),seemed,seem-01,false), Span(14,15,List(37),life,life,false), Span(11,12,List(39, 38),1951,(date-entity :year 1951),false), Span(6,7,List(40),hero,hero,false), Span(3,4,List(41),pursued,pursue-01,false), Span(2,3,List(42),crooks,crook,false)),Map(39 -> 1951, 30 -> across, 2 -> back, 5 -> hope-01, 33 -> old, 27 -> die-01, 12 -> many, 8 -> now, 15 -> fine, 42 -> crook, 36 -> seem-01, 21 -> 1960, 18 -> bank, 24 -> date-entity, 41 -> pursue-01, 35 -> flat, 7 -> war, 1 -> site, 17 -> promise-01, 23 -> or, 38 -> date-entity, 26 -> shame, 4 -> peace, 11 -> seem-01, 32 -> ship, 14 -> hour, 29 -> channel, 20 -> date-entity, 34 -> or, 28 -> ship, 6 -> and, 40 -> hero, 9 -> nothing, 0 -> old, 22 -> league, 16 -> most, 37 -> life, 19 -> rob-01, 10 -> feel-01, 3 -> fade-01, 31 -> smuggle-01, 25 -> 1955, 13 -> temporal-quantity),Map(s5 -> smuggle-01, n -> now, w -> war, h -> hope-01, s2 -> seem-01, h2 -> hour, 12 -> 1955, t -> temporal-quantity, b -> back, m2 -> most, b2 -> bank, o3 -> old, d3 -> die-01, f4 -> flat, p2 -> promise-01, s -> site, s4 -> ship, m -> many, d -> date-entity, 1 -> 1960, s7 -> seem-01, p -> peace, a -> and, o2 -> or, d2 -> date-entity, f3 -> fine, l2 -> life, a2 -> across, r -> rob-01, h3 -> hero, c -> channel, s3 -> shame, f2 -> feel-01, l -> league, d4 -> date-entity, f -> fade-01, o -> old, o4 -> or, s6 -> ship, p3 -> pursue-01, c2 -> crook, n2 -> nothing, 13 -> 1951))),[Ljava.lang.String;@71daa121,Annotation([Ljava.lang.String;@4888b7ec,[Ljava.lang.String;@7e30c28,[Ljava.lang.String;@4b331a23),Annotation([Ljava.lang.String;@7f91667,[Ljava.lang.String;@722dc847,[Ledu.cmu.lti.nlp.amr.Dependency;@1bb7e7e1),Annotation([Ljava.lang.String;@46d872fe,[Ljava.lang.String;@2c65a608,[Ljava.lang.String;@45776dfd),Annotation([Ljava.lang.String;@23d620ac,[Ljava.lang.String;@3efb0e95,[Ledu.cmu.lti.nlp.amr.Entity;@547a7880))
AMR:
(a / and, mod, w / war)
(a / and, op, h / hope-01)
(a / and, op, r / rob-01)
(a2 / across, op, c / channel)
(b / back, op, f2 / feel-01)
(d / date-entity, year, 1 / 1960)
(d2 / date-entity, year, 12 / 1955)
(d3 / die-01, ARG0, o2 / or)
(d3 / die-01, ARG1, s4 / ship)
(d3 / die-01, ARG2, s7 / seem-01)
(d3 / die-01, location, s3 / shame)
(d3 / die-01, time, d2 / date-entity)
(d4 / date-entity, year, 13 / 1951)
(f / fade-01, ARG1, h / hope-01)
(f2 / feel-01, ARG0, n2 / nothing)
(f2 / feel-01, ARG1, t / temporal-quantity)
(f3 / fine, degree, m2 / most)
(f4 / flat, domain, l2 / life)
(h / hope-01, ARG0, o / old)
(h / hope-01, ARG1, p / peace)
(h / hope-01, time, n / now)
(m / many, op, f / fade-01)
(o2 / or, op, l / league)
(o4 / or, op, f4 / flat)
(p2 / promise-01, ARG0, b2 / bank)
(p2 / promise-01, ARG1, t / temporal-quantity)
(p2 / promise-01, manner, f3 / fine)
(p2 / promise-01, time, r / rob-01)
(p3 / pursue-01, ARG0, o3 / old)
(p3 / pursue-01, ARG1, c2 / crook)
(p3 / pursue-01, ARG2, h3 / hero)
(r / rob-01, ARG1, d / date-entity)
(r / rob-01, ARG2, s5 / smuggle-01)
(s / site, op, f2 / feel-01)
(s2 / seem-01, ARG1, f2 / feel-01)
(s5 / smuggle-01, ARG0, s6 / ship)
(s5 / smuggle-01, ARG1, c / channel)
(s6 / ship, mod, o3 / old)
(s7 / seem-01, ARG0, d4 / date-entity)
(s7 / seem-01, ARG1, f4 / flat)
(t / temporal-quantity, poss, o2 / or)
(t / temporal-quantity, unit, h2 / hour)

Decoded in 2,013,916 microseconds
Sentence: ruben promised to find iced water and returned soon with a waiter carrying a tinkling pitcher and three glasses

Spans:
Span 16-17:  and => and
Span 6-7:  and => and
Span 12-13:  carrying => carry-01
Span 18-19:  glasses => glass
Span 1-2:  promised => promise-01
Span 7-8:  returned => return-01
Span 8-9:  soon => soon
Span 17-18:  three => 3
Span 5-6:  water => water

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),glasses,glass,false), Span(17,18,List(1),three,3,false), Span(16,17,List(2),and,and,false), Span(12,13,List(3),carrying,carry-01,false), Span(8,9,List(4),soon,soon,false), Span(7,8,List(5),returned,return-01,false), Span(6,7,List(6),and,and,false), Span(5,6,List(7),water,water,false), Span(1,2,List(8),promised,promise-01,false)),Map(2 -> and, 5 -> return-01, 8 -> promise-01, 7 -> water, 1 -> 3, 4 -> soon, 6 -> and, 0 -> glass, 3 -> carry-01),Map(w -> water, s -> soon, p -> promise-01, g -> glass, a -> and, a2 -> and, r -> return-01, c -> carry-01, 3 -> 3))),[Ljava.lang.String;@347d46d4,Annotation([Ljava.lang.String;@cb52338,[Ljava.lang.String;@481b380c,[Ljava.lang.String;@72fcc0cf),Annotation([Ljava.lang.String;@2fd69103,[Ljava.lang.String;@2fca747e,[Ledu.cmu.lti.nlp.amr.Dependency;@14a614b5),Annotation([Ljava.lang.String;@239981aa,[Ljava.lang.String;@330fd228,[Ljava.lang.String;@53ae5a48),Annotation([Ljava.lang.String;@5ba957e3,[Ljava.lang.String;@4ac92718,[Ledu.cmu.lti.nlp.amr.Entity;@5c25bf03))
AMR:
(a / and, op, g / glass)
(a2 / and, op, p / promise-01)
(a2 / and, op, r / return-01)
(a2 / and, op, w / water)
(c / carry-01, ARG1, a / and)
(c / carry-01, mod, s / soon)
(g / glass, quant, 3 / 3)
(r / return-01, time, s / soon)

Decoded in 55,034 microseconds
Sentence: the day after the july ruling in the supreme court bob martinez governor of florida promised a special session of the state legislature to push through abortionrestricting laws

NER Entity: (country :name (name :op "florida"))
NER Entity: (country :name (name :op "florida"))
Spans:
Span 2-3:  after => after
Span 9-10:  court => court
Span 1-2:  day => day
Span 14-15:  florida => (state :name (name :op "Florida"))
Span 12-13:  governor => (have-org-role-91 :ARG2 governor)
Span 4-5:  july => (date-entity :month 7)
Span 27-28:  laws => law
Span 22-23:  legislature => legislate-01
Span 15-16:  promised => promise-01
Span 24-25:  push => push-02
Span 5-6:  ruling => rule-03
Span 18-19:  session => session
Span 17-18:  special => special
Span 21-22:  state => state
Span 8-9:  supreme => supreme

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),laws,law,false), Span(24,25,List(1),push,push-02,false), Span(22,23,List(2),legislature,legislate-01,false), Span(21,22,List(3),state,state,false), Span(18,19,List(4),session,session,false), Span(17,18,List(5),special,special,false), Span(15,16,List(6),promised,promise-01,false), Span(14,15,List(9, 8, 7),florida,(state :name (name :op "Florida")),false), Span(12,13,List(11, 10),governor,(have-org-role-91 :ARG2 governor),false), Span(9,10,List(12),court,court,false), Span(8,9,List(13),supreme,supreme,false), Span(5,6,List(14),ruling,rule-03,false), Span(4,5,List(16, 15),july,(date-entity :month 7),false), Span(2,3,List(17),after,after,false), Span(1,2,List(18),day,day,false)),Map(2 -> legislate-01, 5 -> special, 12 -> court, 15 -> date-entity, 8 -> name, 18 -> day, 7 -> state, 17 -> after, 1 -> push-02, 4 -> session, 11 -> governor, 14 -> rule-03, 6 -> promise-01, 0 -> law, 9 -> "Florida", 16 -> 7, 3 -> state, 10 -> have-org-role-91, 13 -> supreme),Map(s5 -> supreme, n -> name, h -> have-org-role-91, s2 -> session, p2 -> promise-01, s -> state, s4 -> state, 7 -> 7, d -> date-entity, p -> push-02, g -> governor, a -> after, d2 -> day, l2 -> legislate-01, r -> rule-03, s3 -> special, c -> court, l -> law))),[Ljava.lang.String;@3570713d,Annotation([Ljava.lang.String;@691a7733,[Ljava.lang.String;@4887eb2d,[Ljava.lang.String;@5360fc8e),Annotation([Ljava.lang.String;@464f966,[Ljava.lang.String;@13199cb,[Ledu.cmu.lti.nlp.amr.Dependency;@5f67df09),Annotation([Ljava.lang.String;@1c63f8ce,[Ljava.lang.String;@6763aaf1,[Ljava.lang.String;@406be93e),Annotation([Ljava.lang.String;@6c9e067c,[Ljava.lang.String;@7abbee99,[Ledu.cmu.lti.nlp.amr.Entity;@482dbdc2))
AMR:
(a / after, op, p2 / promise-01)
(a / after, quant, d2 / day)
(c / court, mod, s5 / supreme)
(d / date-entity, month, 7 / 7)
(h / have-org-role-91, ARG1, s4 / state)
(h / have-org-role-91, ARG2, g / governor)
(l2 / legislate-01, ARG0, c / court)
(l2 / legislate-01, ARG1, s / state)
(n / name, op, "Florida")
(p / push-02, ARG0, s2 / session)
(p / push-02, ARG1, l2 / legislate-01)
(p / push-02, instrument, l / law)
(p2 / promise-01, ARG0, h / have-org-role-91)
(p2 / promise-01, ARG1, r / rule-03)
(p2 / promise-01, ARG2, s2 / session)
(r / rule-03, ARG1, d / date-entity)
(s2 / session, mod, s3 / special)
(s4 / state, name, n / name)

Decoded in 461,273 microseconds
Sentence: he promised that no attested married men should be called up until all unmarried men had been taken

Spans:
Span 12-13:  all => all
Span 4-5:  attested => attest-01
Span 0-1:  he => he
Span 5-6:  married => marry-01
Span 14-15:  men => man
Span 6-7:  men => man
Span 3-4:  no => -
Span 1-2:  promised => promise-01
Span 7-8:  should => recommend-01
Span 11-12:  until => until

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),men,man,false), Span(12,13,List(1),all,all,false), Span(11,12,List(2),until,until,false), Span(7,8,List(3),should,recommend-01,false), Span(6,7,List(4),men,man,false), Span(5,6,List(5),married,marry-01,false), Span(4,5,List(6),attested,attest-01,false), Span(3,4,List(7),no,-,false), Span(1,2,List(8),promised,promise-01,false), Span(0,1,List(9),he,he,false)),Map(2 -> until, 5 -> marry-01, 8 -> promise-01, 7 -> -, 1 -> all, 4 -> man, 6 -> attest-01, 9 -> he, 0 -> man, 3 -> recommend-01),Map(m3 -> marry-01, h -> he, m2 -> man, m -> man, p -> promise-01, a -> all, a2 -> attest-01, r -> recommend-01, - -> -, u -> until))),[Ljava.lang.String;@33053093,Annotation([Ljava.lang.String;@19b81d10,[Ljava.lang.String;@67c12a1,[Ljava.lang.String;@3bab0b5a),Annotation([Ljava.lang.String;@5a766050,[Ljava.lang.String;@11ad5296,[Ledu.cmu.lti.nlp.amr.Dependency;@a08feeb),Annotation([Ljava.lang.String;@5497fb72,[Ljava.lang.String;@45fd24c1,[Ljava.lang.String;@6e781ecc),Annotation([Ljava.lang.String;@102e1bbd,[Ljava.lang.String;@431f1d97,[Ledu.cmu.lti.nlp.amr.Entity;@2fcfc6ee))
AMR:
(a2 / attest-01, ARG1, m2 / man)
(m / man, mod, a / all)
(m3 / marry-01, ARG1, m2 / man)
(m3 / marry-01, polarity, - / -)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, r / recommend-01)
(r / recommend-01, ARG0, u / until)
(r / recommend-01, ARG1, m2 / man)
(u / until, op, m / man)

Decoded in 86,706 microseconds
Sentence: wasps missing david pegler and with jeff probyn and gary holmes at prop begin their push this afternoon in what promises to be a home pushover against ailing moseley hampered by the longterm absence of simon robson their england b scrumhalf who crushed his hand in a midweek weighttraining accident

NER Entity: (country :name (name :op "england"))
NER Entity: (country :name (name :op "england"))
Spans:
Span 33-34:  absence => absent-01
Span 49-50:  accident => accident
Span 17-18:  afternoon => afternoon
Span 8-9:  and => and
Span 4-5:  and => and
Span 39-40:  b => b
Span 13-14:  begin => begin-01
Span 42-43:  crushed => crush-01
Span 38-39:  england => (country :name (name :op "England"))
Span 44-45:  hand => hand
Span 24-25:  home => home
Span 1-2:  missing => miss-01
Span 20-21:  promises => promise-01
Span 12-13:  prop => prop-01
Span 15-16:  push => push-02
Span 16-17:  this => this

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),accident,accident,false), Span(44,45,List(1),hand,hand,false), Span(42,43,List(2),crushed,crush-01,false), Span(39,40,List(3),b,b,false), Span(38,39,List(6, 5, 4),england,(country :name (name :op "England")),false), Span(33,34,List(7),absence,absent-01,false), Span(24,25,List(8),home,home,false), Span(20,21,List(9),promises,promise-01,false), Span(17,18,List(10),afternoon,afternoon,false), Span(16,17,List(11),this,this,false), Span(15,16,List(12),push,push-02,false), Span(13,14,List(13),begin,begin-01,false), Span(12,13,List(14),prop,prop-01,false), Span(8,9,List(15),and,and,false), Span(4,5,List(16),and,and,false), Span(1,2,List(17),missing,miss-01,false)),Map(2 -> crush-01, 5 -> name, 12 -> push-02, 15 -> and, 8 -> home, 7 -> absent-01, 17 -> miss-01, 1 -> hand, 4 -> country, 11 -> this, 14 -> prop-01, 6 -> "England", 0 -> accident, 9 -> promise-01, 16 -> and, 3 -> b, 10 -> afternoon, 13 -> begin-01),Map(n -> name, h -> hand, h2 -> home, b -> b, t -> this, b2 -> begin-01, p2 -> push-02, a3 -> afternoon, m -> miss-01, p -> promise-01, a -> accident, a5 -> and, a2 -> absent-01, c -> crush-01, p3 -> prop-01, c2 -> country, a4 -> and))),[Ljava.lang.String;@46ea3050,Annotation([Ljava.lang.String;@3909f88f,[Ljava.lang.String;@3d9d918a,[Ljava.lang.String;@33be1aa0),Annotation([Ljava.lang.String;@5c618ea,[Ljava.lang.String;@108dad9c,[Ledu.cmu.lti.nlp.amr.Dependency;@4580e541),Annotation([Ljava.lang.String;@114b320d,[Ljava.lang.String;@5fc2fc59,[Ljava.lang.String;@7a45682c),Annotation([Ljava.lang.String;@62ba5f6a,[Ljava.lang.String;@39ce5ac9,[Ledu.cmu.lti.nlp.amr.Entity;@1aaa5fc5))
AMR:
(a2 / absent-01, ARG0, h2 / home)
(a2 / absent-01, ARG1, p3 / prop-01)
(a3 / afternoon, topic, p / promise-01)
(a5 / and, op, m / miss-01)
(a5 / and, op, p3 / prop-01)
(b2 / begin-01, ARG1, p2 / push-02)
(b2 / begin-01, ARG2, p / promise-01)
(c / crush-01, ARG0, b / b)
(c / crush-01, ARG1, h / hand)
(c / crush-01, ARG2, p / promise-01)
(c / crush-01, prep-on, a / accident)
(c2 / country, name, n / name)
(n / name, op, "England")
(p / promise-01, ARG0, c2 / country)
(p / promise-01, ARG1, t / this)
(p3 / prop-01, ARG0, a4 / and)
(p3 / prop-01, ARG1, b2 / begin-01)

Decoded in 685,647 microseconds
Sentence: what happened when you left hatton and pertwee at the bridge  stamford had promised to give burden all the help they could and they were as good as their word

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = what happened when you left hatton and pertwee at the bridge  stamford had promised to give burden all the help they could and they were as good as their word
myTokenized = what happened when you left hatton and pertwee at the bridge stamford had promised to give burden all the help they could and they were as good as their word
i = 11
prefix = List(what, happened, when, you, left, hatton, and, pertwee, at, the, bridge, stamford)
regexr = \Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qp\E ?\Qp\E ?\Qe\E ?\Qn\E ?\Qe\E ?\Qd\E ?\Qw\E ?\Qh\E ?\Qe\E ?\Qn\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qe\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qp\E ?\Qe\E ?\Qr\E ?\Qt\E ?\Qw\E ?\Qe\E ?\Qe\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qb\E ?\Qr\E ?\Qi\E ?\Qd\E ?\Qg\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qa\E ?\Qm\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the route promised to throw a variety of weather at us

Spans:
Span 2-3:  promised => promise-01
Span 1-2:  route => route
Span 4-5:  throw => throw-01
Span 6-7:  variety => variety
Span 8-9:  weather => weather

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),weather,weather,false), Span(6,7,List(1),variety,variety,false), Span(4,5,List(2),throw,throw-01,false), Span(2,3,List(3),promised,promise-01,false), Span(1,2,List(4),route,route,false)),Map(2 -> throw-01, 1 -> variety, 4 -> route, 0 -> weather, 3 -> promise-01),Map(w -> weather, t -> throw-01, v -> variety, p -> promise-01, r -> route))),[Ljava.lang.String;@1646b78d,Annotation([Ljava.lang.String;@7cbc9567,[Ljava.lang.String;@40f4dd2b,[Ljava.lang.String;@be4535e),Annotation([Ljava.lang.String;@3b1d466b,[Ljava.lang.String;@7efa391e,[Ledu.cmu.lti.nlp.amr.Dependency;@5dbc21b2),Annotation([Ljava.lang.String;@6a485d31,[Ljava.lang.String;@34de727a,[Ljava.lang.String;@782dc2b3),Annotation([Ljava.lang.String;@449b369,[Ljava.lang.String;@2a1b4b2,[Ledu.cmu.lti.nlp.amr.Entity;@465e1377))
AMR:
(p / promise-01, ARG0, r / route)
(p / promise-01, ARG2, t / throw-01)
(t / throw-01, ARG1, v / variety)
(w / weather, mod, v / variety)

Decoded in 34,356 microseconds
Sentence: the publishers not only accepted spirits in prison for publication they also assured lewis that john galsworthy the novelist and author of the forsyte saga would give it some publicity in his magazine reveille in which a selection of work by contemporary poets was promised

Spans:
Span 4-5:  accepted => accept-01
Span 11-12:  also => also
Span 19-20:  and => and
Span 12-13:  assured => assure-01
Span 20-21:  author => (person :ARG0-of author-01)
Span 41-42:  contemporary => contemporary
Span 26-27:  give => give-01
Span 27-28:  it => it
Span 32-33:  magazine => magazine
Span 3-4:  only => only
Span 42-43:  poets => poet
Span 7-8:  prison => prison
Span 44-45:  promised => promise-01
Span 9-10:  publication => publication
Span 29-30:  publicity => publicity
Span 1-2:  publishers => publish-01
Span 37-38:  selection => select-01
Span 28-29:  some => some
Span 5-6:  spirits => spirit
Span 10-11:  they => they

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),promised,promise-01,false), Span(42,43,List(1),poets,poet,false), Span(41,42,List(2),contemporary,contemporary,false), Span(37,38,List(3),selection,select-01,false), Span(32,33,List(4),magazine,magazine,false), Span(29,30,List(5),publicity,publicity,false), Span(28,29,List(6),some,some,false), Span(27,28,List(7),it,it,false), Span(26,27,List(8),give,give-01,false), Span(20,21,List(10, 9),author,(person :ARG0-of author-01),false), Span(19,20,List(11),and,and,false), Span(12,13,List(12),assured,assure-01,false), Span(11,12,List(13),also,also,false), Span(10,11,List(14),they,they,false), Span(9,10,List(15),publication,publication,false), Span(7,8,List(16),prison,prison,false), Span(5,6,List(17),spirits,spirit,false), Span(4,5,List(18),accepted,accept-01,false), Span(3,4,List(19),only,only,false), Span(1,2,List(20),publishers,publish-01,false)),Map(2 -> contemporary, 5 -> publicity, 12 -> assure-01, 15 -> publication, 8 -> give-01, 18 -> accept-01, 7 -> it, 17 -> spirit, 1 -> poet, 4 -> magazine, 11 -> and, 14 -> they, 20 -> publish-01, 6 -> some, 0 -> promise-01, 9 -> person, 16 -> prison, 19 -> only, 3 -> select-01, 10 -> author-01, 13 -> also),Map(p5 -> publication, s2 -> some, t -> they, p2 -> poet, a3 -> assure-01, s -> select-01, m -> magazine, p -> promise-01, g -> give-01, a -> author-01, p4 -> person, p7 -> publish-01, a5 -> accept-01, i -> it, a2 -> and, s3 -> spirit, c -> contemporary, p6 -> prison, o -> only, p3 -> publicity, a4 -> also))),[Ljava.lang.String;@4db4d125,Annotation([Ljava.lang.String;@1a0efbfe,[Ljava.lang.String;@4dc1ee0f,[Ljava.lang.String;@76f442aa),Annotation([Ljava.lang.String;@1e44e3e9,[Ljava.lang.String;@3ccee585,[Ledu.cmu.lti.nlp.amr.Dependency;@333e9df3),Annotation([Ljava.lang.String;@53f3d6cd,[Ljava.lang.String;@2d9b57ca,[Ljava.lang.String;@31a0a62a),Annotation([Ljava.lang.String;@29fd28da,[Ljava.lang.String;@2b8515bf,[Ledu.cmu.lti.nlp.amr.Entity;@2e56c4eb))
AMR:
(a / author-01, ARG0, p4 / person)
(a2 / and, op, g / give-01)
(a2 / and, op, p4 / person)
(a3 / assure-01, ARG0, t / they)
(a3 / assure-01, ARG1, m / magazine)
(a3 / assure-01, location, p5 / publication)
(a3 / assure-01, mod, a4 / also)
(a5 / accept-01, ARG0, p7 / publish-01)
(a5 / accept-01, ARG1, s3 / spirit)
(a5 / accept-01, mod, o / only)
(g / give-01, ARG0, t / they)
(g / give-01, ARG1, p3 / publicity)
(g / give-01, ARG2, i / it)
(p / promise-01, ARG0, p2 / poet)
(p / promise-01, ARG1, s / select-01)
(p2 / poet, time, c / contemporary)
(p3 / publicity, quant, s2 / some)
(p6 / prison, poss, t / they)
(s / select-01, ARG1, p3 / publicity)
(s3 / spirit, mod, p6 / prison)

Decoded in 1,237,744 microseconds
Sentence: producers who owe the organisation nearly 140m in levy arrears have promised to attempt to repay some of the debt

Spans:
Span 13-14:  attempt => attempt-01
Span 19-20:  debt => debt
Span 5-6:  nearly => nearly
Span 4-5:  organisation => organize-01
Span 2-3:  owe => owe-01
Span 0-1:  producers => (person :ARG0-of produce-01)
Span 11-12:  promised => promise-01
Span 15-16:  repay => repay-01
Span 16-17:  some => some

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),debt,debt,false), Span(16,17,List(1),some,some,false), Span(15,16,List(2),repay,repay-01,false), Span(13,14,List(3),attempt,attempt-01,false), Span(11,12,List(4),promised,promise-01,false), Span(5,6,List(5),nearly,nearly,false), Span(4,5,List(6),organisation,organize-01,false), Span(2,3,List(7),owe,owe-01,false), Span(0,1,List(9, 8),producers,(person :ARG0-of produce-01),false)),Map(2 -> repay-01, 5 -> nearly, 8 -> person, 7 -> owe-01, 1 -> some, 4 -> promise-01, 6 -> organize-01, 9 -> produce-01, 0 -> debt, 3 -> attempt-01),Map(n -> nearly, p2 -> person, s -> some, d -> debt, p -> promise-01, a -> attempt-01, o2 -> owe-01, r -> repay-01, o -> organize-01, p3 -> produce-01))),[Ljava.lang.String;@429a3811,Annotation([Ljava.lang.String;@1ad70640,[Ljava.lang.String;@1adb6184,[Ljava.lang.String;@38df2ee2),Annotation([Ljava.lang.String;@447f1499,[Ljava.lang.String;@73216bf0,[Ledu.cmu.lti.nlp.amr.Dependency;@1735949d),Annotation([Ljava.lang.String;@3eafdb52,[Ljava.lang.String;@b6804a5,[Ljava.lang.String;@5a08f27c),Annotation([Ljava.lang.String;@167d912,[Ljava.lang.String;@48dc2d76,[Ledu.cmu.lti.nlp.amr.Entity;@6f2cc358))
AMR:
(a / attempt-01, ARG0, p2 / person)
(a / attempt-01, ARG1, r / repay-01)
(d / debt, quant, s / some)
(o2 / owe-01, ARG0, p2 / person)
(o2 / owe-01, ARG1, o / organize-01)
(o2 / owe-01, ARG2, n / nearly)
(p / promise-01, ARG2, a / attempt-01)
(p3 / produce-01, ARG0, p2 / person)
(r / repay-01, ARG1, s / some)

Decoded in 107,382 microseconds
Sentence: 20 they are anagrams of life sensemaking promised by billy graham

Spans:
Span 0-1:  20 => 20
Span 5-6:  life => life
Span 7-8:  promised => promise-01
Span 1-2:  they => they

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),promised,promise-01,false), Span(5,6,List(1),life,life,false), Span(1,2,List(2),they,they,false), Span(0,1,List(3),20,20,false)),Map(2 -> they, 1 -> life, 0 -> promise-01, 3 -> 20),Map(2 -> 20, t -> they, p -> promise-01, l -> life))),[Ljava.lang.String;@63ccff6d,Annotation([Ljava.lang.String;@2795804b,[Ljava.lang.String;@4819d03a,[Ljava.lang.String;@16b5b4d1),Annotation([Ljava.lang.String;@737210fc,[Ljava.lang.String;@45b94b9a,[Ledu.cmu.lti.nlp.amr.Dependency;@8128f39),Annotation([Ljava.lang.String;@7a78eb52,[Ljava.lang.String;@18a1934f,[Ljava.lang.String;@17ce342b),Annotation([Ljava.lang.String;@62c2ff42,[Ljava.lang.String;@700478b5,[Ledu.cmu.lti.nlp.amr.Entity;@3590ec87))
AMR:
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, l / life)
(t / they, op, 2 / 20)

Decoded in 12,184 microseconds
Sentence: we had none to look forward to since the one promised had been held four months early to mark the kings wedding

Spans:
Span 16-17:  early => early
Span 5-6:  forward => forward
Span 14-15:  four => 4
Span 18-19:  mark => mark-01
Span 15-16:  months => (temporal-quantity :unit month)
Span 2-3:  none => none
Span 10-11:  promised => promise-01
Span 7-8:  since => since
Span 0-1:  we => we
Span 21-22:  wedding => wed-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),wedding,wed-01,false), Span(18,19,List(1),mark,mark-01,false), Span(16,17,List(2),early,early,false), Span(15,16,List(4, 3),months,(temporal-quantity :unit month),false), Span(14,15,List(5),four,4,false), Span(10,11,List(6),promised,promise-01,false), Span(7,8,List(7),since,since,false), Span(5,6,List(8),forward,forward,false), Span(2,3,List(9),none,none,false), Span(0,1,List(10),we,we,false)),Map(2 -> early, 5 -> 4, 8 -> forward, 7 -> since, 1 -> mark-01, 4 -> month, 6 -> promise-01, 9 -> none, 0 -> wed-01, 10 -> we, 3 -> temporal-quantity),Map(n -> none, e -> early, w -> wed-01, t -> temporal-quantity, m2 -> month, s -> since, m -> mark-01, p -> promise-01, 4 -> 4, w2 -> we, f -> forward))),[Ljava.lang.String;@3d98ae8a,Annotation([Ljava.lang.String;@72eb059d,[Ljava.lang.String;@23bdc15c,[Ljava.lang.String;@7ee19158),Annotation([Ljava.lang.String;@b0d697c,[Ljava.lang.String;@1d88518f,[Ledu.cmu.lti.nlp.amr.Dependency;@60a2926e),Annotation([Ljava.lang.String;@513ba552,[Ljava.lang.String;@22e2d428,[Ljava.lang.String;@59d69ffc),Annotation([Ljava.lang.String;@19a18778,[Ljava.lang.String;@3bc4e46d,[Ledu.cmu.lti.nlp.amr.Entity;@7b70cec2))
AMR:
(e / early, op, t / temporal-quantity)
(m / mark-01, ARG0, e / early)
(m / mark-01, ARG1, w / wed-01)
(n / none, name, w2 / we)
(p / promise-01, ARG0, n / none)
(p / promise-01, ARG1, f / forward)
(s / since, op, p / promise-01)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, m2 / month)
(w / wed-01, ARG1, w2 / we)

Decoded in 48,067 microseconds
Sentence: alan wells then promised similar fine fare until he was visibly flabbergasted to be adjudged caught behind

Spans:
Span 16-17:  behind => behind
Span 6-7:  fare => fare
Span 5-6:  fine => fine
Span 8-9:  he => he
Span 3-4:  promised => promise-01
Span 2-3:  then => then
Span 7-8:  until => until
Span 1-2:  wells => well

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),behind,behind,false), Span(8,9,List(1),he,he,false), Span(7,8,List(2),until,until,false), Span(6,7,List(3),fare,fare,false), Span(5,6,List(4),fine,fine,false), Span(3,4,List(5),promised,promise-01,false), Span(2,3,List(6),then,then,false), Span(1,2,List(7),wells,well,false)),Map(2 -> until, 5 -> promise-01, 7 -> well, 1 -> he, 4 -> fine, 6 -> then, 0 -> behind, 3 -> fare),Map(w -> well, h -> he, t -> then, b -> behind, p -> promise-01, f2 -> fine, u -> until, f -> fare))),[Ljava.lang.String;@2b1661de,Annotation([Ljava.lang.String;@4a734beb,[Ljava.lang.String;@577d577c,[Ljava.lang.String;@65fabac3),Annotation([Ljava.lang.String;@2ffb8c83,[Ljava.lang.String;@2bc60511,[Ledu.cmu.lti.nlp.amr.Dependency;@5576b58a),Annotation([Ljava.lang.String;@6488a2db,[Ljava.lang.String;@467c0b6d,[Ljava.lang.String;@79d24541),Annotation([Ljava.lang.String;@5bc0ece2,[Ljava.lang.String;@5700187d,[Ledu.cmu.lti.nlp.amr.Entity;@4747e32a))
AMR:
(b / behind, op, p / promise-01)
(p / promise-01, ARG0, w / well)
(p / promise-01, ARG1, f2 / fine)
(p / promise-01, ARG2, f / fare)
(p / promise-01, time, t / then)
(p / promise-01, time, u / until)
(w / well, poss, h / he)

Decoded in 67,304 microseconds
Sentence: gladiators and berinsfield clashed in the last game of the season two sides who promised so much yet failed to find any consistency

Spans:
Span 1-2:  and => and
Span 21-22:  any => any
Span 22-23:  consistency => consistency
Span 18-19:  failed => fail-01
Span 7-8:  game => game
Span 0-1:  gladiators => gladiator
Span 6-7:  last => last
Span 16-17:  much => much
Span 14-15:  promised => promise-01
Span 10-11:  season => season
Span 12-13:  sides => side
Span 15-16:  so => so
Span 11-12:  two => 2
Span 17-18:  yet => yet

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),consistency,consistency,false), Span(21,22,List(1),any,any,false), Span(18,19,List(2),failed,fail-01,false), Span(17,18,List(3),yet,yet,false), Span(16,17,List(4),much,much,false), Span(15,16,List(5),so,so,false), Span(14,15,List(6),promised,promise-01,false), Span(12,13,List(7),sides,side,false), Span(11,12,List(8),two,2,false), Span(10,11,List(9),season,season,false), Span(7,8,List(10),game,game,false), Span(6,7,List(11),last,last,false), Span(1,2,List(12),and,and,false), Span(0,1,List(13),gladiators,gladiator,false)),Map(2 -> fail-01, 5 -> so, 12 -> and, 8 -> 2, 7 -> side, 1 -> any, 4 -> much, 11 -> last, 6 -> promise-01, 0 -> consistency, 9 -> season, 3 -> yet, 10 -> game, 13 -> gladiator),Map(2 -> 2, s2 -> side, s -> so, m -> much, g2 -> gladiator, y -> yet, p -> promise-01, g -> game, a -> any, a2 -> and, c -> consistency, s3 -> season, l -> last, f -> fail-01))),[Ljava.lang.String;@72a0a7f1,Annotation([Ljava.lang.String;@1171fa02,[Ljava.lang.String;@51d4a240,[Ljava.lang.String;@5ee841b8),Annotation([Ljava.lang.String;@6232c7b5,[Ljava.lang.String;@73d56e70,[Ledu.cmu.lti.nlp.amr.Dependency;@4145b679),Annotation([Ljava.lang.String;@47cee369,[Ljava.lang.String;@5fb42753,[Ljava.lang.String;@2c81eb3b),Annotation([Ljava.lang.String;@57a8551,[Ljava.lang.String;@2ec68ba6,[Ledu.cmu.lti.nlp.amr.Entity;@6cfa5747))
AMR:
(a2 / and, op, g2 / gladiator)
(c / consistency, mod, a / any)
(f / fail-01, ARG0, s2 / side)
(f / fail-01, ARG1, c / consistency)
(g / game, location, s3 / season)
(g / game, mod, l / last)
(m / much, degree, s / so)
(p / promise-01, ARG0, s2 / side)
(p / promise-01, ARG1, g / game)
(p / promise-01, ARG2, a2 / and)
(p / promise-01, mod, m / much)
(s2 / side, quant, 2 / 2)
(y / yet, op, f / fail-01)

Decoded in 246,311 microseconds
Sentence: the local force have promised me all the help i need

Spans:
Span 6-7:  all => all
Span 2-3:  force => force
Span 8-9:  help => help-01
Span 9-10:  i => i
Span 1-2:  local => local
Span 10-11:  need => need-01
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),need,need-01,false), Span(9,10,List(1),i,i,false), Span(8,9,List(2),help,help-01,false), Span(6,7,List(3),all,all,false), Span(4,5,List(4),promised,promise-01,false), Span(2,3,List(5),force,force,false), Span(1,2,List(6),local,local,false)),Map(2 -> help-01, 5 -> force, 1 -> i, 4 -> promise-01, 6 -> local, 0 -> need-01, 3 -> all),Map(n -> need-01, h -> help-01, p -> promise-01, a -> all, i -> i, l -> local, f -> force))),[Ljava.lang.String;@27782e36,Annotation([Ljava.lang.String;@4321ef78,[Ljava.lang.String;@68f0d1b6,[Ljava.lang.String;@1a58398d),Annotation([Ljava.lang.String;@162a657e,[Ljava.lang.String;@396d3e90,[Ledu.cmu.lti.nlp.amr.Dependency;@33267d64),Annotation([Ljava.lang.String;@23f24a78,[Ljava.lang.String;@77f71eb7,[Ljava.lang.String;@101bde9),Annotation([Ljava.lang.String;@195b0c83,[Ljava.lang.String;@28927976,[Ledu.cmu.lti.nlp.amr.Entity;@286446c9))
AMR:
(f / force, mod, l / local)
(h / help-01, ARG1, i / i)
(h / help-01, quant, a / all)
(n / need-01, ARG0, i / i)
(p / promise-01, ARG0, f / force)
(p / promise-01, ARG1, h / help-01)

Decoded in 18,550 microseconds
Sentence: middlebridge is counterclaiming damages for alleged misrepresentation and breach of contract it accepts the car is the one which crashed at brooklands in 1932 but says it is not the one promised the le mans winner of 1929 and 1930 and is completely rebuilt

Spans:
Span 37-38:  1929 => (date-entity :year 1929)
Span 39-40:  1930 => (date-entity :year 1930)
Span 23-24:  1932 => (date-entity :year 1932)
Span 12-13:  accepts => accept-01
Span 5-6:  alleged => allege-01
Span 40-41:  and => and
Span 38-39:  and => and
Span 7-8:  and => and
Span 8-9:  breach => breach-01
Span 24-25:  but => contrast-01
Span 14-15:  car => car
Span 42-43:  completely => complete
Span 10-11:  contract => contract-02
Span 19-20:  crashed => crash-01
Span 3-4:  damages => damage-01
Span 26-27:  it => it
Span 11-12:  it => it
Span 31-32:  promised => promise-01
Span 25-26:  says => say-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),completely,complete,false), Span(40,41,List(1),and,and,false), Span(39,40,List(3, 2),1930,(date-entity :year 1930),false), Span(38,39,List(4),and,and,false), Span(37,38,List(6, 5),1929,(date-entity :year 1929),false), Span(31,32,List(7),promised,promise-01,false), Span(26,27,List(8),it,it,false), Span(25,26,List(9),says,say-01,false), Span(24,25,List(10),but,contrast-01,false), Span(23,24,List(12, 11),1932,(date-entity :year 1932),false), Span(19,20,List(13),crashed,crash-01,false), Span(14,15,List(14),car,car,false), Span(12,13,List(15),accepts,accept-01,false), Span(11,12,List(16),it,it,false), Span(10,11,List(17),contract,contract-02,false), Span(8,9,List(18),breach,breach-01,false), Span(7,8,List(19),and,and,false), Span(5,6,List(20),alleged,allege-01,false), Span(3,4,List(21),damages,damage-01,false)),Map(2 -> date-entity, 5 -> date-entity, 12 -> 1932, 15 -> accept-01, 8 -> it, 21 -> damage-01, 18 -> breach-01, 7 -> promise-01, 17 -> contract-02, 1 -> and, 4 -> and, 11 -> date-entity, 14 -> car, 20 -> allege-01, 6 -> 1929, 0 -> complete, 9 -> say-01, 16 -> it, 19 -> and, 3 -> 1930, 10 -> contrast-01, 13 -> crash-01),Map(b -> breach-01, 12 -> 1929, d3 -> date-entity, a3 -> accept-01, c4 -> car, s -> say-01, d -> date-entity, 1 -> 1930, p -> promise-01, c3 -> crash-01, a -> and, a5 -> allege-01, d2 -> date-entity, i2 -> it, a2 -> and, i -> it, c -> complete, d4 -> damage-01, c2 -> contrast-01, a4 -> and, 13 -> 1932, c5 -> contract-02))),[Ljava.lang.String;@34c33760,Annotation([Ljava.lang.String;@7c689aaf,[Ljava.lang.String;@378396f8,[Ljava.lang.String;@202c9041),Annotation([Ljava.lang.String;@4db2abe7,[Ljava.lang.String;@d33f28b,[Ledu.cmu.lti.nlp.amr.Dependency;@4d788a72),Annotation([Ljava.lang.String;@24c96a1a,[Ljava.lang.String;@2354e3d4,[Ljava.lang.String;@1a39856b),Annotation([Ljava.lang.String;@36664140,[Ljava.lang.String;@7345eca6,[Ledu.cmu.lti.nlp.amr.Entity;@73b3c169))
AMR:
(a / and, op, p / promise-01)
(a2 / and, op, d / date-entity)
(a3 / accept-01, ARG0, i2 / it)
(a3 / accept-01, ARG1, c4 / car)
(a4 / and, op, a3 / accept-01)
(a4 / and, op, b / breach-01)
(b / breach-01, ARG1, c5 / contract-02)
(c2 / contrast-01, ARG1, c3 / crash-01)
(c2 / contrast-01, ARG2, s / say-01)
(c3 / crash-01, ARG0, c / complete)
(c3 / crash-01, ARG1, c4 / car)
(c3 / crash-01, time, d3 / date-entity)
(d / date-entity, year, 1 / 1930)
(d2 / date-entity, year, 12 / 1929)
(d3 / date-entity, year, 13 / 1932)
(d4 / damage-01, ARG1, a5 / allege-01)
(d4 / damage-01, time, a4 / and)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, time, d2 / date-entity)
(s / say-01, ARG0, i / it)
(s / say-01, ARG1, a / and)

Decoded in 880,359 microseconds
Sentence: at the duchesss ball  sharpe had been promised that his duties to the prince were not social but only to provide advice during battle

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = at the duchesss ball  sharpe had been promised that his duties to the prince were not social but only to provide advice during battle
myTokenized = at the duchesss ball sharpe had been promised that his duties to the prince were not social but only to provide advice during battle
i = 4
prefix = List(at, the, duchesss, ball, sharpe)
regexr = \Qa\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qd\E ?\Qu\E ?\Qc\E ?\Qh\E ?\Qe\E ?\Qs\E ?\Qs\E ?\Qs\E ?\Qb\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qs\E ?\Qh\E ?\Qa\E ?\Qr\E ?\Qp\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the party is committed to renationalising the water industry but syd tierney on behalf of the national executive committee said it could not promise to buy back acre by acre any land which is sold

Spans:
Span 30-31:  any => any
Span 26-27:  back => back
Span 9-10:  but => contrast-01
Span 25-26:  buy => buy-01
Span 3-4:  committed => commit-01
Span 18-19:  committee => committee
Span 21-22:  could => possible
Span 17-18:  executive => executive
Span 8-9:  industry => industry
Span 20-21:  it => it
Span 31-32:  land => land
Span 16-17:  national => nation
Span 1-2:  party => party
Span 23-24:  promise => promise-01
Span 19-20:  said => say-01
Span 34-35:  sold => sell-01
Span 7-8:  water => water

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),sold,sell-01,false), Span(31,32,List(1),land,land,false), Span(30,31,List(2),any,any,false), Span(26,27,List(3),back,back,false), Span(25,26,List(4),buy,buy-01,false), Span(23,24,List(5),promise,promise-01,false), Span(21,22,List(6),could,possible,false), Span(20,21,List(7),it,it,false), Span(19,20,List(8),said,say-01,false), Span(18,19,List(9),committee,committee,false), Span(17,18,List(10),executive,executive,false), Span(16,17,List(11),national,nation,false), Span(9,10,List(12),but,contrast-01,false), Span(8,9,List(13),industry,industry,false), Span(7,8,List(14),water,water,false), Span(3,4,List(15),committed,commit-01,false), Span(1,2,List(16),party,party,false)),Map(2 -> any, 5 -> promise-01, 12 -> contrast-01, 15 -> commit-01, 8 -> say-01, 7 -> it, 1 -> land, 4 -> buy-01, 11 -> nation, 14 -> water, 6 -> possible, 0 -> sell-01, 9 -> committee, 16 -> party, 3 -> back, 10 -> executive, 13 -> industry),Map(e -> executive, w -> water, n -> nation, s2 -> say-01, b -> back, b2 -> buy-01, p2 -> possible, s -> sell-01, p -> promise-01, c3 -> commit-01, a -> any, i2 -> industry, i -> it, c -> committee, l -> land, p3 -> party, c2 -> contrast-01))),[Ljava.lang.String;@7308fbd4,Annotation([Ljava.lang.String;@52cd564c,[Ljava.lang.String;@26dcc20c,[Ljava.lang.String;@6747b5c2),Annotation([Ljava.lang.String;@14ee0887,[Ljava.lang.String;@1771e1cd,[Ledu.cmu.lti.nlp.amr.Dependency;@359f65c1),Annotation([Ljava.lang.String;@73d17d67,[Ljava.lang.String;@3e803098,[Ljava.lang.String;@51f66b36),Annotation([Ljava.lang.String;@8f8d044,[Ljava.lang.String;@73124f6,[Ledu.cmu.lti.nlp.amr.Entity;@2b71962a))
AMR:
(b2 / buy-01, ARG1, l / land)
(b2 / buy-01, direction, b / back)
(c / committee, mod, e / executive)
(c2 / contrast-01, ARG1, c3 / commit-01)
(c2 / contrast-01, ARG2, s2 / say-01)
(c3 / commit-01, ARG1, p3 / party)
(c3 / commit-01, ARG2, i2 / industry)
(e / executive, mod, n / nation)
(i2 / industry, mod, w / water)
(l / land, mod, a / any)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, b2 / buy-01)
(p2 / possible, domain, p / promise-01)
(s / sell-01, ARG1, l / land)
(s2 / say-01, ARG0, c / committee)
(s2 / say-01, ARG1, p2 / possible)

Decoded in 246,880 microseconds
Sentence: the trouble is weve promised the king of nepal well keep them or put the household cavalry a bunch of amateurs out to grass or scrap a few of the 40 remaining frigates and destroyers sitting ducks but the navy loves holding cocktail parties on the afterdeck submarines arent much good for that women hate going up and down the ladders or do anything but kill the loamshires

NER Entity: (country :name (name :op "nepal"))
Spans:
Span 30-31:  40 => 40
Span 20-21:  amateurs => amateur
Span 57-58:  and => and
Span 33-34:  and => and
Span 63-64:  anything => anything
Span 18-19:  bunch => bunch
Span 64-65:  but => contrast-01
Span 37-38:  but => contrast-01
Span 16-17:  cavalry => cavalry
Span 42-43:  cocktail => cocktail
Span 34-35:  destroyers => destroyer
Span 58-59:  down => down
Span 36-37:  ducks => duck
Span 27-28:  few => few
Span 50-51:  good => good
Span 23-24:  grass => grass-roots
Span 54-55:  hate => hate-01
Span 41-42:  holding => hold-01
Span 15-16:  household => household
Span 65-66:  kill => kill-01
Span 6-7:  king => king
Span 40-41:  loves => love-01
Span 49-50:  much => much
Span 39-40:  navy => navy
Span 61-62:  or => or
Span 24-25:  or => or
Span 12-13:  or => or
Span 43-44:  parties => party
Span 4-5:  promised => promise-01
Span 31-32:  remaining => remain-01
Span 25-26:  scrap => scrap-01
Span 35-36:  sitting => sit-01
Span 47-48:  submarines => submarine
Span 1-2:  trouble => trouble-01
Span 9-10:  well => well
Span 53-54:  women => woman

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(65,66,List(0),kill,kill-01,false), Span(64,65,List(1),but,contrast-01,false), Span(63,64,List(2),anything,anything,false), Span(61,62,List(3),or,or,false), Span(58,59,List(4),down,down,false), Span(57,58,List(5),and,and,false), Span(54,55,List(6),hate,hate-01,false), Span(53,54,List(7),women,woman,false), Span(50,51,List(8),good,good,false), Span(49,50,List(9),much,much,false), Span(47,48,List(10),submarines,submarine,false), Span(43,44,List(11),parties,party,false), Span(42,43,List(12),cocktail,cocktail,false), Span(41,42,List(13),holding,hold-01,false), Span(40,41,List(14),loves,love-01,false), Span(39,40,List(15),navy,navy,false), Span(37,38,List(16),but,contrast-01,false), Span(36,37,List(17),ducks,duck,false), Span(35,36,List(18),sitting,sit-01,false), Span(34,35,List(19),destroyers,destroyer,false), Span(33,34,List(20),and,and,false), Span(31,32,List(21),remaining,remain-01,false), Span(30,31,List(22),40,40,false), Span(27,28,List(23),few,few,false), Span(25,26,List(24),scrap,scrap-01,false), Span(24,25,List(25),or,or,false), Span(23,24,List(26),grass,grass-roots,false), Span(20,21,List(27),amateurs,amateur,false), Span(18,19,List(28),bunch,bunch,false), Span(16,17,List(29),cavalry,cavalry,false), Span(15,16,List(30),household,household,false), Span(12,13,List(31),or,or,false), Span(9,10,List(32),well,well,false), Span(6,7,List(33),king,king,false), Span(4,5,List(34),promised,promise-01,false), Span(1,2,List(35),trouble,trouble-01,false)),Map(30 -> household, 2 -> anything, 5 -> and, 33 -> king, 27 -> amateur, 12 -> cocktail, 8 -> good, 15 -> navy, 21 -> remain-01, 18 -> sit-01, 24 -> scrap-01, 35 -> trouble-01, 7 -> woman, 1 -> contrast-01, 17 -> duck, 23 -> few, 26 -> grass-roots, 4 -> down, 11 -> party, 32 -> well, 14 -> love-01, 29 -> cavalry, 20 -> and, 34 -> promise-01, 28 -> bunch, 6 -> hate-01, 9 -> much, 0 -> kill-01, 22 -> 40, 16 -> contrast-01, 19 -> destroyer, 10 -> submarine, 3 -> or, 31 -> or, 25 -> or, 13 -> hold-01),Map(w -> woman, n -> navy, k2 -> king, h -> hate-01, h2 -> hold-01, s2 -> sit-01, t -> trouble-01, b -> bunch, k -> kill-01, o3 -> or, d3 -> destroyer, p2 -> promise-01, c4 -> cavalry, a3 -> and, s -> submarine, m -> much, d -> down, g2 -> grass-roots, p -> party, g -> good, a -> anything, c3 -> contrast-01, 4 -> 40, o2 -> or, d2 -> duck, w2 -> well, a2 -> and, r -> remain-01, h3 -> household, c -> contrast-01, s3 -> scrap-01, l -> love-01, f -> few, o -> or, c2 -> cocktail, a4 -> amateur))),[Ljava.lang.String;@3f357ede,Annotation([Ljava.lang.String;@511c413d,[Ljava.lang.String;@15ff3565,[Ljava.lang.String;@260a852b),Annotation([Ljava.lang.String;@7cacdd8f,[Ljava.lang.String;@3906173b,[Ledu.cmu.lti.nlp.amr.Dependency;@3edf3fbc),Annotation([Ljava.lang.String;@32d16fe3,[Ljava.lang.String;@5408ba25,[Ljava.lang.String;@8f4fe3d),Annotation([Ljava.lang.String;@c5f5b63,[Ljava.lang.String;@4868c6ed,[Ledu.cmu.lti.nlp.amr.Entity;@56dc16be))
AMR:
(a2 / and, direction, d / down)
(a3 / and, op, h / hate-01)
(a3 / and, op, r / remain-01)
(a3 / and, op, s2 / sit-01)
(c / contrast-01, ARG1, a2 / and)
(c / contrast-01, ARG2, k / kill-01)
(c3 / contrast-01, ARG1, l / love-01)
(c3 / contrast-01, ARG2, s / submarine)
(g / good, domain, p / party)
(g / good, quant, m / much)
(h / hate-01, ARG1, w / woman)
(h2 / hold-01, ARG1, p / party)
(k / kill-01, ARG0, k2 / king)
(l / love-01, ARG0, n / navy)
(l / love-01, ARG1, g / good)
(o / or, op, a / anything)
(o / or, op, c / contrast-01)
(o / or, op, l / love-01)
(o / or, op, s3 / scrap-01)
(o2 / or, op, b / bunch)
(o2 / or, op, c4 / cavalry)
(o2 / or, op, s3 / scrap-01)
(o3 / or, mod, w2 / well)
(o3 / or, op, k / kill-01)
(p / party, mod, c2 / cocktail)
(p / party, poss, d3 / destroyer)
(p2 / promise-01, ARG0, t / trouble-01)
(p2 / promise-01, ARG1, o3 / or)
(r / remain-01, ARG1, c3 / contrast-01)
(s2 / sit-01, ARG0, 4 / 40)
(s2 / sit-01, ARG1, d2 / duck)
(s3 / scrap-01, ARG0, h3 / household)
(s3 / scrap-01, ARG1, a4 / amateur)
(s3 / scrap-01, ARG2, f / few)
(t / trouble-01, ARG1, g2 / grass-roots)

Decoded in 2,549,936 microseconds
Sentence: i have an inner force call it mystical esoteric theological whatever you like he said promising that once elected he would surround himself with wellintentioned men to solve all the nations problems

Spans:
Span 28-29:  all => all
Span 18-19:  elected => elect-01
Span 4-5:  force => force
Span 19-20:  he => he
Span 13-14:  he => he
Span 0-1:  i => i
Span 3-4:  inner => inner
Span 6-7:  it => it
Span 25-26:  men => man
Span 7-8:  mystical => mystical
Span 30-31:  nations => nation
Span 17-18:  once => once
Span 31-32:  problems => problem
Span 15-16:  promising => promise-01
Span 14-15:  said => say-01
Span 27-28:  solve => solve-01
Span 10-11:  whatever => whatever
Span 11-12:  you => you

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),problems,problem,false), Span(30,31,List(1),nations,nation,false), Span(28,29,List(2),all,all,false), Span(27,28,List(3),solve,solve-01,false), Span(25,26,List(4),men,man,false), Span(19,20,List(5),he,he,false), Span(18,19,List(6),elected,elect-01,false), Span(17,18,List(7),once,once,false), Span(15,16,List(8),promising,promise-01,false), Span(14,15,List(9),said,say-01,false), Span(13,14,List(10),he,he,false), Span(11,12,List(11),you,you,false), Span(10,11,List(12),whatever,whatever,false), Span(7,8,List(13),mystical,mystical,false), Span(6,7,List(14),it,it,false), Span(4,5,List(15),force,force,false), Span(3,4,List(16),inner,inner,false), Span(0,1,List(17),i,i,false)),Map(2 -> all, 5 -> he, 12 -> whatever, 15 -> force, 8 -> promise-01, 7 -> once, 17 -> i, 1 -> nation, 4 -> man, 11 -> you, 14 -> it, 6 -> elect-01, 0 -> problem, 9 -> say-01, 16 -> inner, 3 -> solve-01, 10 -> he, 13 -> mystical),Map(e -> elect-01, n -> nation, w -> whatever, h -> he, s2 -> say-01, h2 -> he, m2 -> mystical, p2 -> promise-01, s -> solve-01, m -> man, i3 -> i, p -> problem, y -> you, a -> all, i2 -> inner, i -> it, f -> force, o -> once))),[Ljava.lang.String;@434aa410,Annotation([Ljava.lang.String;@595938f3,[Ljava.lang.String;@70aa0758,[Ljava.lang.String;@2ac85c31),Annotation([Ljava.lang.String;@481caae8,[Ljava.lang.String;@52188a54,[Ledu.cmu.lti.nlp.amr.Dependency;@4921bae7),Annotation([Ljava.lang.String;@4575b933,[Ljava.lang.String;@33d1e6e5,[Ljava.lang.String;@198ddef7),Annotation([Ljava.lang.String;@3129373c,[Ljava.lang.String;@8e95d5b,[Ledu.cmu.lti.nlp.amr.Entity;@10f005ef))
AMR:
(e / elect-01, ARG0, h / he)
(e / elect-01, ARG1, f / force)
(e / elect-01, time, o / once)
(f / force, mod, i2 / inner)
(i / it, op, s / solve-01)
(m / man, purpose, s / solve-01)
(m2 / mystical, domain, i / it)
(p / problem, mod, n / nation)
(p / problem, quant, a / all)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, e / elect-01)
(s / solve-01, ARG0, h / he)
(s / solve-01, ARG1, p / problem)
(s2 / say-01, ARG0, h2 / he)
(s2 / say-01, ARG1, y / you)
(s2 / say-01, ARG2, i3 / i)
(w / whatever, mod, y / you)

Decoded in 879,875 microseconds
Sentence: meanwhile mr modrow who promised that honesty modesty and competence would be among the guidelines of his new government has been setting an entirely new personal style

Spans:
Span 12-13:  among => among
Span 8-9:  and => and
Span 9-10:  competence => competent-41
Span 23-24:  entirely => entire
Span 14-15:  guidelines => guideline
Span 6-7:  honesty => honesty
Span 0-1:  meanwhile => meanwhile
Span 24-25:  new => new
Span 17-18:  new => new
Span 25-26:  personal => personal
Span 4-5:  promised => promise-01
Span 21-22:  setting => set-02
Span 26-27:  style => style

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),style,style,false), Span(25,26,List(1),personal,personal,false), Span(24,25,List(2),new,new,false), Span(23,24,List(3),entirely,entire,false), Span(21,22,List(4),setting,set-02,false), Span(17,18,List(5),new,new,false), Span(14,15,List(6),guidelines,guideline,false), Span(12,13,List(7),among,among,false), Span(9,10,List(8),competence,competent-41,false), Span(8,9,List(9),and,and,false), Span(6,7,List(10),honesty,honesty,false), Span(4,5,List(11),promised,promise-01,false), Span(0,1,List(12),meanwhile,meanwhile,false)),Map(2 -> new, 5 -> new, 12 -> meanwhile, 8 -> competent-41, 7 -> among, 1 -> personal, 4 -> set-02, 11 -> promise-01, 6 -> guideline, 0 -> style, 9 -> and, 3 -> entire, 10 -> honesty),Map(e -> entire, n -> new, h -> honesty, s2 -> set-02, p2 -> promise-01, s -> style, m -> meanwhile, p -> personal, g -> guideline, a -> among, a2 -> and, c -> competent-41, n2 -> new))),[Ljava.lang.String;@7e159698,Annotation([Ljava.lang.String;@3b5215d3,[Ljava.lang.String;@a16ee12,[Ljava.lang.String;@6767e4ea),Annotation([Ljava.lang.String;@55e5f3af,[Ljava.lang.String;@6be19237,[Ledu.cmu.lti.nlp.amr.Dependency;@26469036),Annotation([Ljava.lang.String;@62a5dcdb,[Ljava.lang.String;@7746e075,[Ljava.lang.String;@4e3a5e80),Annotation([Ljava.lang.String;@5a124d9f,[Ljava.lang.String;@67a62feb,[Ledu.cmu.lti.nlp.amr.Entity;@4f942276))
AMR:
(a / among, op, g / guideline)
(a2 / and, op, c / competent-41)
(a2 / and, op, p2 / promise-01)
(c / competent-41, ARG1, g / guideline)
(c / competent-41, ARG2, h / honesty)
(m / meanwhile, op, c / competent-41)
(n / new, degree, e / entire)
(p2 / promise-01, ARG0, n2 / new)
(p2 / promise-01, ARG1, s / style)
(s / style, mod, n / new)
(s / style, mod, p / personal)
(s2 / set-02, ARG1, s / style)

Decoded in 186,846 microseconds
Sentence: roubaud himself finally produced the book that his great and varied talent had always promised le grand incendie de londres seuil 13

NER Entity: (country :name (name :op "le" :op "grand"))
NER Entity: (country :name (name :op "de"))
Spans:
Span 21-22:  13 => 13
Span 13-14:  always => always
Span 9-10:  and => and
Span 5-6:  book => book
Span 2-3:  finally => final
Span 8-9:  great => great
Span 15-17:  le grand => (country :name (name :op "le" :op "grand"))
Span 3-4:  produced => produce-01
Span 14-15:  promised => promise-01
Span 11-12:  talent => talent
Span 10-11:  varied => vary-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),13,13,false), Span(15,17,List(4, 3, 2, 1),le grand,(country :name (name :op "le" :op "grand")),false), Span(14,15,List(5),promised,promise-01,false), Span(13,14,List(6),always,always,false), Span(11,12,List(7),talent,talent,false), Span(10,11,List(8),varied,vary-01,false), Span(9,10,List(9),and,and,false), Span(8,9,List(10),great,great,false), Span(5,6,List(11),book,book,false), Span(3,4,List(12),produced,produce-01,false), Span(2,3,List(13),finally,final,false)),Map(2 -> name, 5 -> promise-01, 12 -> produce-01, 8 -> vary-01, 7 -> talent, 1 -> country, 4 -> "grand", 11 -> book, 6 -> always, 0 -> 13, 9 -> and, 3 -> "le", 10 -> great, 13 -> final),Map(n -> name, b -> book, t -> talent, p2 -> produce-01, v -> vary-01, g -> great, p -> promise-01, 1 -> 13, a -> always, a2 -> and, c -> country, f -> final))),[Ljava.lang.String;@66299cb,Annotation([Ljava.lang.String;@335ee1b3,[Ljava.lang.String;@1a33c91e,[Ljava.lang.String;@3dd8de02),Annotation([Ljava.lang.String;@68d77506,[Ljava.lang.String;@194412b0,[Ledu.cmu.lti.nlp.amr.Dependency;@4426edc5),Annotation([Ljava.lang.String;@57c44377,[Ljava.lang.String;@162966a5,[Ljava.lang.String;@7811e600),Annotation([Ljava.lang.String;@5f134795,[Ljava.lang.String;@6ac0b7f6,[Ledu.cmu.lti.nlp.amr.Entity;@126dae3b))
AMR:
(a2 / and, op, v / vary-01)
(c / country, name, n / name)
(n / name, op, "grand")
(n / name, op, "le")
(p / promise-01, ARG0, t / talent)
(p / promise-01, ARG1, c / country)
(p / promise-01, time, a / always)
(p2 / produce-01, ARG0, t / talent)
(p2 / produce-01, ARG1, b / book)
(p2 / produce-01, time, f / final)
(t / talent, mod, g / great)
(v / vary-01, ARG0, 1 / 13)
(v / vary-01, ARG1, t / talent)

Decoded in 188,204 microseconds
Sentence: since there are literally millions of fans of coronation street a book that promises the inside story of the thriceweekly soap opera will doubtless sell well, 95 isnt the book it promises to be

Spans:
Span 27-28:  95 => 95
Span 30-31:  book => book
Span 11-12:  book => book
Span 23-24:  doubtless => doubt-01
Span 6-7:  fans => fan
Span 15-16:  inside => inside
Span 31-32:  it => it
Span 3-4:  literally => literal
Span 21-22:  opera => opera
Span 32-33:  promises => promise-01
Span 13-14:  promises => promise-01
Span 24-25:  sell => sell-01
Span 0-1:  since => since
Span 20-21:  soap => soap
Span 16-17:  story => story
Span 9-10:  street => street
Span 25-26:  well => well

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),promises,promise-01,false), Span(31,32,List(1),it,it,false), Span(30,31,List(2),book,book,false), Span(27,28,List(3),95,95,false), Span(25,26,List(4),well,well,false), Span(24,25,List(5),sell,sell-01,false), Span(23,24,List(6),doubtless,doubt-01,false), Span(21,22,List(7),opera,opera,false), Span(20,21,List(8),soap,soap,false), Span(16,17,List(9),story,story,false), Span(15,16,List(10),inside,inside,false), Span(13,14,List(11),promises,promise-01,false), Span(11,12,List(12),book,book,false), Span(9,10,List(13),street,street,false), Span(6,7,List(14),fans,fan,false), Span(3,4,List(15),literally,literal,false), Span(0,1,List(16),since,since,false)),Map(2 -> book, 5 -> sell-01, 12 -> book, 15 -> literal, 8 -> soap, 7 -> opera, 1 -> it, 4 -> well, 11 -> promise-01, 14 -> fan, 6 -> doubt-01, 0 -> promise-01, 9 -> story, 16 -> since, 3 -> 95, 10 -> inside, 13 -> street),Map(s5 -> since, w -> well, s2 -> soap, b -> book, b2 -> book, p2 -> promise-01, s -> sell-01, s4 -> street, d -> doubt-01, p -> promise-01, i2 -> inside, i -> it, s3 -> story, l -> literal, f -> fan, 9 -> 95, o -> opera))),[Ljava.lang.String;@a78f12e,Annotation([Ljava.lang.String;@a220861,[Ljava.lang.String;@40541d79,[Ljava.lang.String;@525b13ed),Annotation([Ljava.lang.String;@597956d8,[Ljava.lang.String;@2d34accc,[Ledu.cmu.lti.nlp.amr.Dependency;@5d3c9c43),Annotation([Ljava.lang.String;@36372287,[Ljava.lang.String;@5dbbe8df,[Ljava.lang.String;@5bb5b88c),Annotation([Ljava.lang.String;@77671e5d,[Ljava.lang.String;@12faa8e9,[Ledu.cmu.lti.nlp.amr.Entity;@66762bb))
AMR:
(b2 / book, mod, f / fan)
(d / doubt-01, ARG0, s5 / since)
(d / doubt-01, ARG1, s / sell-01)
(f / fan, location, s4 / street)
(o / opera, mod, s2 / soap)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, b / book)
(p / promise-01, ARG2, b2 / book)
(p2 / promise-01, ARG0, b2 / book)
(p2 / promise-01, ARG1, s3 / story)
(s / sell-01, ARG0, s3 / story)
(s / sell-01, ARG1, l / literal)
(s / sell-01, ARG2, 9 / 95)
(s / sell-01, manner, w / well)
(s3 / story, mod, i2 / inside)
(s3 / story, topic, o / opera)

Decoded in 462,425 microseconds
Sentence: british rail today promised a thorough investigation into a train crash in which seven people were injured one seriously

NER Entity: (organization :name (name :op "british" :op "rail"))
Spans:
Span 0-2:  british rail => (organization :name (name :op "british" :op "rail"))
Span 10-11:  crash => crash-01
Span 16-17:  injured => injure-01
Span 6-7:  investigation => investigate-01
Span 3-4:  promised => promise-01
Span 18-19:  seriously => serious
Span 13-14:  seven => 7
Span 5-6:  thorough => thorough
Span 2-3:  today => today
Span 9-10:  train => train

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),seriously,serious,false), Span(16,17,List(1),injured,injure-01,false), Span(13,14,List(2),seven,7,false), Span(10,11,List(3),crash,crash-01,false), Span(9,10,List(4),train,train,false), Span(6,7,List(5),investigation,investigate-01,false), Span(5,6,List(6),thorough,thorough,false), Span(3,4,List(7),promised,promise-01,false), Span(2,3,List(8),today,today,false), Span(0,2,List(12, 11, 10, 9),british rail,(organization :name (name :op "british" :op "rail")),false)),Map(2 -> 7, 5 -> investigate-01, 12 -> "rail", 8 -> today, 7 -> promise-01, 1 -> injure-01, 4 -> train, 11 -> "british", 6 -> thorough, 0 -> serious, 9 -> organization, 3 -> crash-01, 10 -> name),Map(n -> name, t -> train, s -> serious, 7 -> 7, t3 -> today, p -> promise-01, t2 -> thorough, i2 -> investigate-01, i -> injure-01, c -> crash-01, o -> organization))),[Ljava.lang.String;@6d82e645,Annotation([Ljava.lang.String;@2cdbf42e,[Ljava.lang.String;@1c7c0f04,[Ljava.lang.String;@14bdde38),Annotation([Ljava.lang.String;@3d48392b,[Ljava.lang.String;@50a1557b,[Ledu.cmu.lti.nlp.amr.Dependency;@ff32798),Annotation([Ljava.lang.String;@24ac7456,[Ljava.lang.String;@3609cce9,[Ljava.lang.String;@3d6bf0b6),Annotation([Ljava.lang.String;@79885c3a,[Ljava.lang.String;@675f222b,[Ledu.cmu.lti.nlp.amr.Entity;@16bc6a12))
AMR:
(c / crash-01, ARG0, 7 / 7)
(c / crash-01, ARG1, t / train)
(i / injure-01, ARG1, c / crash-01)
(i / injure-01, degree, s / serious)
(i2 / investigate-01, manner, t2 / thorough)
(n / name, op, "british")
(n / name, op, "rail")
(o / organization, name, n / name)
(p / promise-01, ARG0, o / organization)
(p / promise-01, ARG1, c / crash-01)
(p / promise-01, ARG2, i2 / investigate-01)
(p / promise-01, time, t3 / today)

Decoded in 72,294 microseconds
Sentence: her mother had been promising more time in the future all her life

Spans:
Span 10-11:  all => all
Span 9-10:  future => future
Span 12-13:  life => life
Span 1-2:  mother => (have-rel-role-91 :ARG2 mother)
Span 4-5:  promising => promise-01
Span 6-7:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),life,life,false), Span(10,11,List(1),all,all,false), Span(9,10,List(2),future,future,false), Span(6,7,List(3),time,time,false), Span(4,5,List(4),promising,promise-01,false), Span(1,2,List(6, 5),mother,(have-rel-role-91 :ARG2 mother),false)),Map(2 -> future, 5 -> have-rel-role-91, 1 -> all, 4 -> promise-01, 6 -> mother, 0 -> life, 3 -> time),Map(h -> have-rel-role-91, t -> time, m -> mother, p -> promise-01, a -> all, l -> life, f -> future))),[Ljava.lang.String;@2bd7cf67,Annotation([Ljava.lang.String;@657189ad,[Ljava.lang.String;@105f0e3,[Ljava.lang.String;@2d09c79b),Annotation([Ljava.lang.String;@5d0fa836,[Ljava.lang.String;@2eeca0f5,[Ledu.cmu.lti.nlp.amr.Dependency;@313b4ce4),Annotation([Ljava.lang.String;@2c3525fc,[Ljava.lang.String;@5550da10,[Ljava.lang.String;@2f1c7c32),Annotation([Ljava.lang.String;@771dcec7,[Ljava.lang.String;@45f2a7e9,[Ledu.cmu.lti.nlp.amr.Entity;@3dedd5df))
AMR:
(h / have-rel-role-91, ARG2, m / mother)
(l / life, quant, a / all)
(p / promise-01, ARG0, m / mother)
(p / promise-01, ARG1, t / time)
(p / promise-01, time, l / life)
(t / time, location, f / future)

Decoded in 20,034 microseconds
Sentence: neighbouring sri lanka was also promised peace

NER Entity: (country :name (name :op "sri" :op "lanka"))
Spans:
Span 4-5:  also => also
Span 0-1:  neighbouring => neighbor-01
Span 6-7:  peace => peace
Span 5-6:  promised => promise-01
Span 1-3:  sri lanka => (country :name (name :op "sri" :op "lanka"))

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),peace,peace,false), Span(5,6,List(1),promised,promise-01,false), Span(4,5,List(2),also,also,false), Span(1,3,List(6, 5, 4, 3),sri lanka,(country :name (name :op "sri" :op "lanka")),false), Span(0,1,List(7),neighbouring,neighbor-01,false)),Map(2 -> also, 5 -> "sri", 7 -> neighbor-01, 1 -> promise-01, 4 -> name, 6 -> "lanka", 0 -> peace, 3 -> country),Map(n -> name, p2 -> promise-01, p -> peace, a -> also, c -> country, n2 -> neighbor-01))),[Ljava.lang.String;@4974433c,Annotation([Ljava.lang.String;@6fea3dd0,[Ljava.lang.String;@7b805c16,[Ljava.lang.String;@281de7b2),Annotation([Ljava.lang.String;@43566bb1,[Ljava.lang.String;@5eb85400,[Ledu.cmu.lti.nlp.amr.Dependency;@1792fc95),Annotation([Ljava.lang.String;@3304a64a,[Ljava.lang.String;@76415e70,[Ljava.lang.String;@3d9f47b7),Annotation([Ljava.lang.String;@241d5efc,[Ljava.lang.String;@44704ea,[Ledu.cmu.lti.nlp.amr.Entity;@5293a0d7))
AMR:
(c / country, name, n / name)
(n / name, op, "lanka")
(n / name, op, "sri")
(n2 / neighbor-01, ARG1, c / country)
(p2 / promise-01, ARG1, c / country)
(p2 / promise-01, ARG2, p / peace)
(p2 / promise-01, mod, a / also)

Decoded in 18,754 microseconds
Sentence: but double payment specially developed for readers digest by  guardian royal exchange promises you fullcover life insurance  and a generous cash sum dash

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = but double payment specially developed for readers digest by  guardian royal exchange promises you fullcover life insurance  and a generous cash sum dash
myTokenized = but double payment specially developed for readers digest by guardian royal exchange promises you fullcover life insurance and a generous cash sum dash
i = 9
prefix = List(but, double, payment, specially, developed, for, readers, digest, by, guardian)
regexr = \Qb\E ?\Qu\E ?\Qt\E ?\Qd\E ?\Qo\E ?\Qu\E ?\Qb\E ?\Ql\E ?\Qe\E ?\Qp\E ?\Qa\E ?\Qy\E ?\Qm\E ?\Qe\E ?\Qn\E ?\Qt\E ?\Qs\E ?\Qp\E ?\Qe\E ?\Qc\E ?\Qi\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qy\E ?\Qd\E ?\Qe\E ?\Qv\E ?\Qe\E ?\Ql\E ?\Qo\E ?\Qp\E ?\Qe\E ?\Qd\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qd\E ?\Qi\E ?\Qg\E ?\Qe\E ?\Qs\E ?\Qt\E ?\Qb\E ?\Qy\E ?\Qg\E ?\Qu\E ?\Qa\E ?\Qr\E ?\Qd\E ?\Qi\E ?\Qa\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: finally himmler himself summoned vlasov and promised his aid in the creation of a liberation army

Spans:
Span 8-9:  aid => aid-01
Span 5-6:  and => and
Span 15-16:  army => army
Span 11-12:  creation => create-01
Span 0-1:  finally => final
Span 14-15:  liberation => liberate-01
Span 6-7:  promised => promise-01
Span 3-4:  summoned => summon-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),army,army,false), Span(14,15,List(1),liberation,liberate-01,false), Span(11,12,List(2),creation,create-01,false), Span(8,9,List(3),aid,aid-01,false), Span(6,7,List(4),promised,promise-01,false), Span(5,6,List(5),and,and,false), Span(3,4,List(6),summoned,summon-01,false), Span(0,1,List(7),finally,final,false)),Map(2 -> create-01, 5 -> and, 7 -> final, 1 -> liberate-01, 4 -> promise-01, 6 -> summon-01, 0 -> army, 3 -> aid-01),Map(s -> summon-01, a3 -> and, p -> promise-01, a -> army, a2 -> aid-01, c -> create-01, l -> liberate-01, f -> final))),[Ljava.lang.String;@74a0173,Annotation([Ljava.lang.String;@ba528c2,[Ljava.lang.String;@816de87,[Ljava.lang.String;@156b7537),Annotation([Ljava.lang.String;@41dc78dd,[Ljava.lang.String;@718316f2,[Ledu.cmu.lti.nlp.amr.Dependency;@5557a416),Annotation([Ljava.lang.String;@6cd5cc1f,[Ljava.lang.String;@484c3f0b,[Ljava.lang.String;@5bf1042),Annotation([Ljava.lang.String;@42c46000,[Ljava.lang.String;@6a7ac23e,[Ledu.cmu.lti.nlp.amr.Entity;@2166ab0f))
AMR:
(a2 / aid-01, ARG1, f / final)
(a3 / and, op, p / promise-01)
(a3 / and, op, s / summon-01)
(c / create-01, ARG1, a / army)
(l / liberate-01, ARG0, a / army)
(p / promise-01, ARG1, a2 / aid-01)
(p / promise-01, purpose, c / create-01)

Decoded in 27,772 microseconds
Sentence: but trudeau never promised it would

Spans:
Span 0-1:  but => contrast-01
Span 4-5:  it => it
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),it,it,false), Span(3,4,List(1),promised,promise-01,false), Span(0,1,List(2),but,contrast-01,false)),Map(2 -> contrast-01, 1 -> promise-01, 0 -> it),Map(p -> promise-01, i -> it, c -> contrast-01))),[Ljava.lang.String;@5b6876ea,Annotation([Ljava.lang.String;@27572b88,[Ljava.lang.String;@4beb01e5,[Ljava.lang.String;@31c98853),Annotation([Ljava.lang.String;@26151aae,[Ljava.lang.String;@338aa90a,[Ledu.cmu.lti.nlp.amr.Dependency;@545fe9f5),Annotation([Ljava.lang.String;@64f8ff19,[Ljava.lang.String;@1733f619,[Ljava.lang.String;@5461ef35),Annotation([Ljava.lang.String;@699fabda,[Ljava.lang.String;@71cbab62,[Ledu.cmu.lti.nlp.amr.Entity;@7260e94b))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(p / promise-01, ARG1, i / it)

Decoded in 5,372 microseconds
Sentence: the right exists because the very same interest on which the power to promise and the duty to keep promises are based is also the ground for holding others to be subject to a duty not to interfere with ones promising, the duty requires one not to prevent a person from promising e

Spans:
Span 23-24:  also => also
Span 14-15:  and => and
Span 21-22:  based => base-01
Span 3-4:  because => cause-01
Span 43-44:  duty => duty
Span 34-35:  duty => duty
Span 16-17:  duty => duty
Span 2-3:  exists => exist-01
Span 25-26:  ground => ground
Span 27-28:  holding => hold-01
Span 7-8:  interest => interest-01
Span 37-38:  interfere => interfere-01
Span 39-40:  ones => one
Span 28-29:  others => other
Span 50-51:  person => person
Span 11-12:  power => power
Span 48-49:  prevent => prevent-01
Span 13-14:  promise => promise-01
Span 19-20:  promises => promise-01
Span 52-53:  promising => promise-01
Span 40-41:  promising => promise-01
Span 44-45:  requires => require-01
Span 6-7:  same => same-41
Span 31-32:  subject => subject
Span 5-6:  very => very

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(52,53,List(0),promising,promise-01,false), Span(50,51,List(1),person,person,false), Span(48,49,List(2),prevent,prevent-01,false), Span(44,45,List(3),requires,require-01,false), Span(43,44,List(4),duty,duty,false), Span(40,41,List(5),promising,promise-01,false), Span(39,40,List(6),ones,one,false), Span(37,38,List(7),interfere,interfere-01,false), Span(34,35,List(8),duty,duty,false), Span(31,32,List(9),subject,subject,false), Span(28,29,List(10),others,other,false), Span(27,28,List(11),holding,hold-01,false), Span(25,26,List(12),ground,ground,false), Span(23,24,List(13),also,also,false), Span(21,22,List(14),based,base-01,false), Span(19,20,List(15),promises,promise-01,false), Span(16,17,List(16),duty,duty,false), Span(14,15,List(17),and,and,false), Span(13,14,List(18),promise,promise-01,false), Span(11,12,List(19),power,power,false), Span(7,8,List(20),interest,interest-01,false), Span(6,7,List(21),same,same-41,false), Span(5,6,List(22),very,very,false), Span(3,4,List(23),because,cause-01,false), Span(2,3,List(24),exists,exist-01,false)),Map(2 -> prevent-01, 5 -> promise-01, 12 -> ground, 8 -> duty, 15 -> promise-01, 21 -> same-41, 18 -> promise-01, 24 -> exist-01, 7 -> interfere-01, 1 -> person, 17 -> and, 23 -> cause-01, 4 -> duty, 11 -> hold-01, 14 -> base-01, 20 -> interest-01, 6 -> one, 9 -> subject, 0 -> promise-01, 22 -> very, 16 -> duty, 19 -> power, 10 -> other, 3 -> require-01, 13 -> also),Map(e -> exist-01, h -> hold-01, p5 -> promise-01, s2 -> same-41, b -> base-01, d3 -> duty, p2 -> person, s -> subject, v -> very, d -> duty, g -> ground, p -> promise-01, a -> also, p4 -> promise-01, o2 -> other, d2 -> duty, p7 -> power, i2 -> interest-01, i -> interfere-01, r -> require-01, a2 -> and, c -> cause-01, p6 -> promise-01, o -> one, p3 -> prevent-01))),[Ljava.lang.String;@65d42975,Annotation([Ljava.lang.String;@4bedf48d,[Ljava.lang.String;@73527bec,[Ljava.lang.String;@2c45fe1a),Annotation([Ljava.lang.String;@272d73ab,[Ljava.lang.String;@1904f3a5,[Ledu.cmu.lti.nlp.amr.Dependency;@1417e278),Annotation([Ljava.lang.String;@2c153e96,[Ljava.lang.String;@26c00076,[Ljava.lang.String;@75e56da),Annotation([Ljava.lang.String;@429805fd,[Ljava.lang.String;@ab14733,[Ledu.cmu.lti.nlp.amr.Entity;@7cb96ac0))
AMR:
(a2 / and, op, d3 / duty)
(a2 / and, op, p6 / promise-01)
(a2 / and, op, p7 / power)
(b / base-01, ARG1, a2 / and)
(c / cause-01, ARG0, i2 / interest-01)
(c / cause-01, ARG1, e / exist-01)
(e / exist-01, ARG1, g / ground)
(g / ground, topic, h / hold-01)
(h / hold-01, ARG0, a / also)
(h / hold-01, ARG1, o2 / other)
(h / hold-01, purpose, i / interfere-01)
(i / interfere-01, ARG0, d2 / duty)
(i / interfere-01, ARG1, o / one)
(i2 / interest-01, ARG1, p7 / power)
(p / promise-01, ARG1, p2 / person)
(p3 / prevent-01, ARG1, p2 / person)
(p4 / promise-01, ARG0, p2 / person)
(p4 / promise-01, ARG1, o / one)
(p5 / promise-01, ARG1, d3 / duty)
(r / require-01, ARG0, d / duty)
(r / require-01, ARG1, p3 / prevent-01)
(s / subject, prep-to, d2 / duty)
(s2 / same-41, ARG1, i2 / interest-01)
(s2 / same-41, degree, v / very)

Decoded in 1,626,099 microseconds
Sentence: gateshead festival 79 dont miss what promises to be one of the garden festivals of the year

Spans:
Span 1-2:  festival => festival
Span 12-13:  garden => garden
Span 6-7:  promises => promise-01
Span 16-17:  year => year

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),year,year,false), Span(12,13,List(1),garden,garden,false), Span(6,7,List(2),promises,promise-01,false), Span(1,2,List(3),festival,festival,false)),Map(2 -> promise-01, 1 -> garden, 0 -> year, 3 -> festival),Map(p -> promise-01, g -> garden, y -> year, f -> festival))),[Ljava.lang.String;@710fa338,Annotation([Ljava.lang.String;@39a4eb85,[Ljava.lang.String;@7a628653,[Ljava.lang.String;@5a60f1ea),Annotation([Ljava.lang.String;@12aa6801,[Ljava.lang.String;@71922339,[Ledu.cmu.lti.nlp.amr.Dependency;@3146ad6f),Annotation([Ljava.lang.String;@17246baf,[Ljava.lang.String;@5819ba07,[Ljava.lang.String;@1044ec1),Annotation([Ljava.lang.String;@41ce616c,[Ljava.lang.String;@545e1b34,[Ledu.cmu.lti.nlp.amr.Entity;@6e4c1e31))
AMR:
(p / promise-01, ARG0, g / garden)
(p / promise-01, ARG1, f / festival)
(y / year, op, p / promise-01)

Decoded in 27,938 microseconds
Sentence: he promises to pay on a definite date

Spans:
Span 7-8:  date => date
Span 6-7:  definite => definite
Span 0-1:  he => he
Span 3-4:  pay => pay-01
Span 1-2:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),date,date,false), Span(6,7,List(1),definite,definite,false), Span(3,4,List(2),pay,pay-01,false), Span(1,2,List(3),promises,promise-01,false), Span(0,1,List(4),he,he,false)),Map(2 -> pay-01, 1 -> definite, 4 -> he, 0 -> date, 3 -> promise-01),Map(h -> he, p2 -> promise-01, d -> date, p -> pay-01, d2 -> definite))),[Ljava.lang.String;@47525b89,Annotation([Ljava.lang.String;@6ff7a3f3,[Ljava.lang.String;@6b2cdff2,[Ljava.lang.String;@4f22bfd6),Annotation([Ljava.lang.String;@7260a330,[Ljava.lang.String;@2679defa,[Ledu.cmu.lti.nlp.amr.Dependency;@b1e02d2),Annotation([Ljava.lang.String;@5f4b2eb1,[Ljava.lang.String;@40e69757,[Ljava.lang.String;@62d9f20a),Annotation([Ljava.lang.String;@52a1a139,[Ljava.lang.String;@715fcf90,[Ledu.cmu.lti.nlp.amr.Entity;@49343116))
AMR:
(d / date, mod, d2 / definite)
(d / date, poss, h / he)
(p / pay-01, ARG0, h / he)
(p2 / promise-01, ARG0, h / he)

Decoded in 10,901 microseconds
Sentence: yet there are others in this age group who really believe youve trekked all the way from the north pole and have painstakingly prepared letters for you and will promise to leave out some mince pies for rudolph

Spans:
Span 6-7:  age => age-01
Span 13-14:  all => all
Span 27-28:  and => and
Span 20-21:  and => and
Span 10-11:  believe => believe-01
Span 7-8:  group => group
Span 31-32:  leave => leave-01
Span 24-25:  letters => letter
Span 18-19:  north => north
Span 3-4:  others => other
Span 19-20:  pole => pole
Span 23-24:  prepared => prepare-02
Span 29-30:  promise => promise-01
Span 9-10:  really => really
Span 33-34:  some => some
Span 5-6:  this => this
Span 15-16:  way => way
Span 0-1:  yet => yet
Span 26-27:  you => you

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),some,some,false), Span(31,32,List(1),leave,leave-01,false), Span(29,30,List(2),promise,promise-01,false), Span(27,28,List(3),and,and,false), Span(26,27,List(4),you,you,false), Span(24,25,List(5),letters,letter,false), Span(23,24,List(6),prepared,prepare-02,false), Span(20,21,List(7),and,and,false), Span(19,20,List(8),pole,pole,false), Span(18,19,List(9),north,north,false), Span(15,16,List(10),way,way,false), Span(13,14,List(11),all,all,false), Span(10,11,List(12),believe,believe-01,false), Span(9,10,List(13),really,really,false), Span(7,8,List(14),group,group,false), Span(6,7,List(15),age,age-01,false), Span(5,6,List(16),this,this,false), Span(3,4,List(17),others,other,false), Span(0,1,List(18),yet,yet,false)),Map(2 -> promise-01, 5 -> letter, 12 -> believe-01, 15 -> age-01, 8 -> pole, 18 -> yet, 7 -> and, 17 -> other, 1 -> leave-01, 4 -> you, 11 -> all, 14 -> group, 6 -> prepare-02, 0 -> some, 9 -> north, 16 -> this, 3 -> and, 10 -> way, 13 -> really),Map(n -> north, w -> way, t -> this, b -> believe-01, p2 -> prepare-02, a3 -> all, s -> some, g -> group, p -> promise-01, y -> you, a -> and, l2 -> letter, r -> really, a2 -> and, l -> leave-01, o -> other, p3 -> pole, y2 -> yet, a4 -> age-01))),[Ljava.lang.String;@2f463cd0,Annotation([Ljava.lang.String;@2c4293ef,[Ljava.lang.String;@46fe469c,[Ljava.lang.String;@5fcdd02d),Annotation([Ljava.lang.String;@411e6b7e,[Ljava.lang.String;@34233e98,[Ledu.cmu.lti.nlp.amr.Dependency;@75e287e5),Annotation([Ljava.lang.String;@6b4807d9,[Ljava.lang.String;@45fb6e95,[Ljava.lang.String;@7e191c17),Annotation([Ljava.lang.String;@22836aae,[Ljava.lang.String;@61d0d735,[Ledu.cmu.lti.nlp.amr.Entity;@55e10abe))
AMR:
(a / and, op, b / believe-01)
(a / and, op, l / leave-01)
(a2 / and, op, p2 / prepare-02)
(a2 / and, op, w / way)
(a4 / age-01, ARG0, g / group)
(a4 / age-01, ARG1, b / believe-01)
(b / believe-01, ARG0, s / some)
(b / believe-01, ARG1, a2 / and)
(b / believe-01, mod, r / really)
(g / group, mod, t / this)
(l2 / letter, poss, y / you)
(p / promise-01, ARG0, o / other)
(p / promise-01, ARG2, l / leave-01)
(p2 / prepare-02, ARG0, y2 / yet)
(p2 / prepare-02, ARG1, l2 / letter)
(p3 / pole, mod, n / north)
(w / way, mod, a3 / all)
(w / way, purpose, p3 / pole)

Decoded in 768,023 microseconds
Sentence: take our aid but you must promise to buy our goods and especially weapons

Spans:
Span 2-3:  aid => aid-01
Span 11-12:  and => and
Span 3-4:  but => contrast-01
Span 8-9:  buy => buy-01
Span 12-13:  especially => especially
Span 10-11:  goods => good
Span 6-7:  promise => promise-01
Span 13-14:  weapons => weapon
Span 4-5:  you => you

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),weapons,weapon,false), Span(12,13,List(1),especially,especially,false), Span(11,12,List(2),and,and,false), Span(10,11,List(3),goods,good,false), Span(8,9,List(4),buy,buy-01,false), Span(6,7,List(5),promise,promise-01,false), Span(4,5,List(6),you,you,false), Span(3,4,List(7),but,contrast-01,false), Span(2,3,List(8),aid,aid-01,false)),Map(2 -> and, 5 -> promise-01, 8 -> aid-01, 7 -> contrast-01, 1 -> especially, 4 -> buy-01, 6 -> you, 0 -> weapon, 3 -> good),Map(e -> especially, w -> weapon, b -> buy-01, y -> you, p -> promise-01, g -> good, a -> and, a2 -> aid-01, c -> contrast-01))),[Ljava.lang.String;@29886bfe,Annotation([Ljava.lang.String;@3b6a05ff,[Ljava.lang.String;@2dafc6d2,[Ljava.lang.String;@6f261c6c),Annotation([Ljava.lang.String;@2f142f76,[Ljava.lang.String;@5638041f,[Ledu.cmu.lti.nlp.amr.Dependency;@7796bb71),Annotation([Ljava.lang.String;@48ec350d,[Ljava.lang.String;@b8f0de2,[Ljava.lang.String;@5cd8765b),Annotation([Ljava.lang.String;@7427ffc,[Ljava.lang.String;@1ee07d1d,[Ledu.cmu.lti.nlp.amr.Entity;@24360ac1))
AMR:
(a / and, op, w / weapon)
(b / buy-01, ARG1, a / and)
(c / contrast-01, ARG1, p / promise-01)
(g / good, poss, y / you)
(p / promise-01, ARG0, y / you)
(p / promise-01, ARG1, a2 / aid-01)
(p / promise-01, ARG2, b / buy-01)
(w / weapon, mod, e / especially)

Decoded in 60,863 microseconds
Sentence: with the barbarities of a decadelong military dictatorship behind them uruguayans emerged this week into full democracy for the first time in 18 years electing a president who promised to do nothing to upset their muchprized status quo

Spans:
Span 22-23:  18 => 18
Span 8-9:  behind => behind
Span 16-17:  democracy => democracy
Span 7-8:  dictatorship => dictatorship
Span 24-25:  electing => elect-01
Span 11-12:  emerged => emerge-02
Span 15-16:  full => full
Span 6-7:  military => military
Span 31-32:  nothing => nothing
Span 26-27:  president => (have-org-role-91 :ARG2 president)
Span 28-29:  promised => promise-01
Span 36-37:  status => status
Span 12-13:  this => this
Span 20-21:  time => time
Span 33-34:  upset => upset-01
Span 13-14:  week => week
Span 23-24:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),status,status,false), Span(33,34,List(1),upset,upset-01,false), Span(31,32,List(2),nothing,nothing,false), Span(28,29,List(3),promised,promise-01,false), Span(26,27,List(5, 4),president,(have-org-role-91 :ARG2 president),false), Span(24,25,List(6),electing,elect-01,false), Span(23,24,List(8, 7),years,(temporal-quantity :unit year),false), Span(22,23,List(9),18,18,false), Span(20,21,List(10),time,time,false), Span(16,17,List(11),democracy,democracy,false), Span(15,16,List(12),full,full,false), Span(13,14,List(13),week,week,false), Span(12,13,List(14),this,this,false), Span(11,12,List(15),emerged,emerge-02,false), Span(8,9,List(16),behind,behind,false), Span(7,8,List(17),dictatorship,dictatorship,false), Span(6,7,List(18),military,military,false)),Map(2 -> nothing, 5 -> president, 12 -> full, 15 -> emerge-02, 8 -> year, 18 -> military, 7 -> temporal-quantity, 17 -> dictatorship, 1 -> upset-01, 4 -> have-org-role-91, 11 -> democracy, 14 -> this, 6 -> elect-01, 0 -> status, 9 -> 18, 16 -> behind, 3 -> promise-01, 10 -> time, 13 -> week),Map(e -> elect-01, w -> week, n -> nothing, h -> have-org-role-91, b -> behind, t -> temporal-quantity, e2 -> emerge-02, p2 -> president, s -> status, m -> military, d -> democracy, t3 -> this, 1 -> 18, p -> promise-01, y -> year, d2 -> dictatorship, t2 -> time, u -> upset-01, f -> full))),[Ljava.lang.String;@6769360f,Annotation([Ljava.lang.String;@2c5c47d3,[Ljava.lang.String;@5e6f8465,[Ljava.lang.String;@6b5d3352),Annotation([Ljava.lang.String;@33d4838f,[Ljava.lang.String;@45093bde,[Ledu.cmu.lti.nlp.amr.Dependency;@61398f3a),Annotation([Ljava.lang.String;@9ea5ab4,[Ljava.lang.String;@78e8e481,[Ljava.lang.String;@1f20f2b),Annotation([Ljava.lang.String;@3ac1d10c,[Ljava.lang.String;@a8388f7,[Ledu.cmu.lti.nlp.amr.Entity;@41951585))
AMR:
(d / democracy, mod, f / full)
(d / democracy, time, t2 / time)
(d2 / dictatorship, location, b / behind)
(d2 / dictatorship, mod, e2 / emerge-02)
(d2 / dictatorship, mod, m / military)
(e / elect-01, ARG0, t2 / time)
(e / elect-01, ARG1, p2 / president)
(e / elect-01, ARG2, t / temporal-quantity)
(e2 / emerge-02, ARG2, d / democracy)
(e2 / emerge-02, time, w / week)
(h / have-org-role-91, ARG2, p2 / president)
(p / promise-01, ARG0, t / temporal-quantity)
(p / promise-01, ARG1, n / nothing)
(t / temporal-quantity, quant, 1 / 18)
(t / temporal-quantity, unit, y / year)
(u / upset-01, ARG0, n / nothing)
(u / upset-01, ARG1, s / status)
(w / week, mod, t3 / this)

Decoded in 885,135 microseconds
Sentence: the soviet minister was shattered by mr genschers account of the nightmare conditions in which the refugees were living in prague and promised to do all he could to help

NER Entity: (country :name (name :op "soviet"))
Spans:
Span 8-9:  account => account
Span 25-26:  all => all
Span 21-22:  and => and
Span 12-13:  conditions => condition
Span 27-28:  could => possible
Span 26-27:  he => he
Span 29-30:  help => help-01
Span 18-19:  living => live-01
Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Span 11-12:  nightmare => nightmare
Span 22-23:  promised => promise-01
Span 16-17:  refugees => refugee
Span 4-5:  shattered => shatter-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),help,help-01,false), Span(27,28,List(1),could,possible,false), Span(26,27,List(2),he,he,false), Span(25,26,List(3),all,all,false), Span(22,23,List(4),promised,promise-01,false), Span(21,22,List(5),and,and,false), Span(18,19,List(6),living,live-01,false), Span(16,17,List(7),refugees,refugee,false), Span(12,13,List(8),conditions,condition,false), Span(11,12,List(9),nightmare,nightmare,false), Span(8,9,List(10),account,account,false), Span(4,5,List(11),shattered,shatter-01,false), Span(2,3,List(13, 12),minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> he, 5 -> and, 12 -> have-org-role-91, 8 -> condition, 7 -> refugee, 1 -> possible, 4 -> promise-01, 11 -> shatter-01, 6 -> live-01, 0 -> help-01, 9 -> nightmare, 3 -> all, 10 -> account, 13 -> minister),Map(n -> nightmare, h -> help-01, h2 -> he, p2 -> promise-01, a3 -> account, s -> shatter-01, m -> minister, p -> possible, a -> all, a2 -> and, r -> refugee, c -> condition, h3 -> have-org-role-91, l -> live-01))),[Ljava.lang.String;@5a07ca58,Annotation([Ljava.lang.String;@35758595,[Ljava.lang.String;@3695149e,[Ljava.lang.String;@757cad10),Annotation([Ljava.lang.String;@4c4631b2,[Ljava.lang.String;@1468c43d,[Ledu.cmu.lti.nlp.amr.Dependency;@6a2b8b42),Annotation([Ljava.lang.String;@50c3d082,[Ljava.lang.String;@67ae303a,[Ljava.lang.String;@5ce06503),Annotation([Ljava.lang.String;@1007d798,[Ljava.lang.String;@72db4460,[Ledu.cmu.lti.nlp.amr.Entity;@19663589))
AMR:
(a2 / and, op, p2 / promise-01)
(a2 / and, op, s / shatter-01)
(c / condition, mod, n / nightmare)
(h / help-01, ARG0, h2 / he)
(h / help-01, ARG1, a / all)
(h3 / have-org-role-91, ARG2, m / minister)
(l / live-01, ARG0, r / refugee)
(l / live-01, ARG1, c / condition)
(l / live-01, ARG2, a2 / and)
(p / possible, domain, h2 / he)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, h3 / have-org-role-91)
(s / shatter-01, ARG2, a3 / account)

Decoded in 248,017 microseconds
Sentence: if europe is going to be serious the first thing it has to do before making new communiques and new declarations is to carry out what its already promised

Spans:
Span 27-28:  already => already
Span 18-19:  and => and
Span 14-15:  before => before
Span 1-2:  europe => (continent :name (name :op "Europe"))
Span 10-11:  it => it
Span 19-20:  new => new
Span 16-17:  new => new
Span 28-29:  promised => promise-01
Span 6-7:  serious => serious
Span 9-10:  thing => thing

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),promised,promise-01,false), Span(27,28,List(1),already,already,false), Span(19,20,List(2),new,new,false), Span(18,19,List(3),and,and,false), Span(16,17,List(4),new,new,false), Span(14,15,List(5),before,before,false), Span(10,11,List(6),it,it,false), Span(9,10,List(7),thing,thing,false), Span(6,7,List(8),serious,serious,false), Span(1,2,List(11, 10, 9),europe,(continent :name (name :op "Europe")),false)),Map(2 -> new, 5 -> before, 8 -> serious, 7 -> thing, 1 -> already, 11 -> "Europe", 4 -> new, 6 -> it, 9 -> continent, 0 -> promise-01, 10 -> name, 3 -> and),Map(n -> new, t -> thing, b -> before, s -> serious, p -> promise-01, n3 -> name, a -> already, i -> it, a2 -> and, c -> continent, n2 -> new))),[Ljava.lang.String;@544c266,Annotation([Ljava.lang.String;@6536b93d,[Ljava.lang.String;@6bbb87b4,[Ljava.lang.String;@64ca71ad),Annotation([Ljava.lang.String;@26ed488d,[Ljava.lang.String;@243634f2,[Ledu.cmu.lti.nlp.amr.Dependency;@62ce0e70),Annotation([Ljava.lang.String;@46160dbd,[Ljava.lang.String;@51e0173d,[Ljava.lang.String;@4f15cfc9),Annotation([Ljava.lang.String;@20fcbdaf,[Ljava.lang.String;@31093d14,[Ledu.cmu.lti.nlp.amr.Entity;@55890532))
AMR:
(a2 / and, mod, n2 / new)
(a2 / and, op, t / thing)
(b / before, domain, i / it)
(c / continent, name, n3 / name)
(c / continent, op, p / promise-01)
(n3 / name, op, "Europe")
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, n / new)
(p / promise-01, ARG2, a2 / and)
(p / promise-01, time, a / already)
(s / serious, op, p / promise-01)

Decoded in 89,366 microseconds
Sentence: arthur morris chairman of durbans civic action league promised yesterday that he would have teams of scouts on the lookout ready to complain all the time at the sight of any nonwhite who might presume to encroach on the sacred surf

Spans:
Span 6-7:  action => action
Span 23-24:  all => all
Span 30-31:  any => any
Span 2-3:  chairman => (have-org-role-91 :ARG2 chairman)
Span 22-23:  complain => complain-01
Span 11-12:  he => he
Span 7-8:  league => league
Span 34-35:  presume => presume-01
Span 8-9:  promised => promise-01
Span 20-21:  ready => ready-01
Span 39-40:  sacred => sacred
Span 28-29:  sight => sight-01
Span 14-15:  teams => team
Span 25-26:  time => time
Span 9-10:  yesterday => yesterday

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),sacred,sacred,false), Span(34,35,List(1),presume,presume-01,false), Span(30,31,List(2),any,any,false), Span(28,29,List(3),sight,sight-01,false), Span(25,26,List(4),time,time,false), Span(23,24,List(5),all,all,false), Span(22,23,List(6),complain,complain-01,false), Span(20,21,List(7),ready,ready-01,false), Span(14,15,List(8),teams,team,false), Span(11,12,List(9),he,he,false), Span(9,10,List(10),yesterday,yesterday,false), Span(8,9,List(11),promised,promise-01,false), Span(7,8,List(12),league,league,false), Span(6,7,List(13),action,action,false), Span(2,3,List(15, 14),chairman,(have-org-role-91 :ARG2 chairman),false)),Map(2 -> any, 5 -> all, 12 -> league, 15 -> chairman, 8 -> team, 7 -> ready-01, 1 -> presume-01, 4 -> time, 11 -> promise-01, 14 -> have-org-role-91, 6 -> complain-01, 0 -> sacred, 9 -> he, 3 -> sight-01, 10 -> yesterday, 13 -> action),Map(h -> he, h2 -> have-org-role-91, s2 -> sight-01, t -> time, p2 -> promise-01, a3 -> action, s -> sacred, p -> presume-01, y -> yesterday, a -> any, t2 -> team, a2 -> all, r -> ready-01, c -> complain-01, l -> league, c2 -> chairman))),[Ljava.lang.String;@16b4417d,Annotation([Ljava.lang.String;@14378130,[Ljava.lang.String;@480280ae,[Ljava.lang.String;@1c4e4471),Annotation([Ljava.lang.String;@566f653b,[Ljava.lang.String;@2b5f30d2,[Ledu.cmu.lti.nlp.amr.Dependency;@767e413c),Annotation([Ljava.lang.String;@5aed06ea,[Ljava.lang.String;@7f611b48,[Ljava.lang.String;@4046554d),Annotation([Ljava.lang.String;@498a5332,[Ljava.lang.String;@185c1d56,[Ledu.cmu.lti.nlp.amr.Entity;@478a0598))
AMR:
(c / complain-01, ARG0, h / he)
(c / complain-01, ARG1, t / time)
(c / complain-01, ARG2, h2 / have-org-role-91)
(c / complain-01, ARG4, s2 / sight-01)
(h2 / have-org-role-91, ARG1, l / league)
(h2 / have-org-role-91, ARG2, c2 / chairman)
(l / league, mod, a3 / action)
(p / presume-01, ARG1, s2 / sight-01)
(p2 / promise-01, ARG0, l / league)
(p2 / promise-01, ARG1, a / any)
(p2 / promise-01, time, y / yesterday)
(r / ready-01, ARG1, t2 / team)
(r / ready-01, ARG2, c / complain-01)
(s2 / sight-01, ARG1, s / sacred)
(t / time, quant, a2 / all)

Decoded in 401,941 microseconds
Sentence: it signed a standstill agreement under which it promised not to increase its holding for three years

Spans:
Span 4-5:  agreement => agree-01
Span 13-14:  holding => hold-01
Span 11-12:  increase => increase-01
Span 7-8:  it => it
Span 0-1:  it => it
Span 8-9:  promised => promise-01
Span 1-2:  signed => sign-02
Span 15-16:  three => 3
Span 16-17:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),years,(temporal-quantity :unit year),false), Span(15,16,List(2),three,3,false), Span(13,14,List(3),holding,hold-01,false), Span(11,12,List(4),increase,increase-01,false), Span(8,9,List(5),promised,promise-01,false), Span(7,8,List(6),it,it,false), Span(4,5,List(7),agreement,agree-01,false), Span(1,2,List(8),signed,sign-02,false), Span(0,1,List(9),it,it,false)),Map(2 -> 3, 5 -> promise-01, 8 -> sign-02, 7 -> agree-01, 1 -> year, 4 -> increase-01, 6 -> it, 9 -> it, 0 -> temporal-quantity, 3 -> hold-01),Map(h -> hold-01, t -> temporal-quantity, s -> sign-02, i3 -> it, p -> promise-01, y -> year, a -> agree-01, i2 -> it, i -> increase-01, 3 -> 3))),[Ljava.lang.String;@367562d9,Annotation([Ljava.lang.String;@54acb07d,[Ljava.lang.String;@157709f9,[Ljava.lang.String;@3a2fc571),Annotation([Ljava.lang.String;@164b9b8f,[Ljava.lang.String;@3dd1d4b8,[Ledu.cmu.lti.nlp.amr.Dependency;@1ae49bbd),Annotation([Ljava.lang.String;@16aca316,[Ljava.lang.String;@200704fb,[Ljava.lang.String;@2cd80b2a),Annotation([Ljava.lang.String;@1bc50966,[Ljava.lang.String;@24ec15c8,[Ledu.cmu.lti.nlp.amr.Entity;@78a1068))
AMR:
(a / agree-01, ARG1, 3 / 3)
(i / increase-01, ARG0, i2 / it)
(i / increase-01, ARG1, h / hold-01)
(p / promise-01, ARG1, a / agree-01)
(p / promise-01, ARG2, i / increase-01)
(s / sign-02, ARG0, i3 / it)
(s / sign-02, ARG1, a / agree-01)
(t / temporal-quantity, quant, 3 / 3)
(t / temporal-quantity, unit, y / year)

Decoded in 80,392 microseconds
Sentence: bulgarians were promised a multiparty system and free elections on monday

Spans:
Span 6-7:  and => and
Span 8-9:  elections => elect-01
Span 7-8:  free => free-41
Span 2-3:  promised => promise-01
Span 5-6:  system => system

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),elections,elect-01,false), Span(7,8,List(1),free,free-41,false), Span(6,7,List(2),and,and,false), Span(5,6,List(3),system,system,false), Span(2,3,List(4),promised,promise-01,false)),Map(2 -> and, 1 -> free-41, 4 -> promise-01, 0 -> elect-01, 3 -> system),Map(e -> elect-01, s -> system, p -> promise-01, a -> and, f -> free-41))),[Ljava.lang.String;@793b1fb5,Annotation([Ljava.lang.String;@189ee241,[Ljava.lang.String;@67182607,[Ljava.lang.String;@6268ca71),Annotation([Ljava.lang.String;@4dc2f330,[Ljava.lang.String;@39ebfc32,[Ledu.cmu.lti.nlp.amr.Dependency;@33fa5453),Annotation([Ljava.lang.String;@77b62fcd,[Ljava.lang.String;@59fc7921,[Ljava.lang.String;@4e7493ae),Annotation([Ljava.lang.String;@478bacbf,[Ljava.lang.String;@22fa544b,[Ledu.cmu.lti.nlp.amr.Entity;@60b419dd))
AMR:
(a / and, op, e / elect-01)
(f / free-41, ARG1, e / elect-01)
(p / promise-01, ARG1, a / and)
(p / promise-01, ARG2, s / system)

Decoded in 43,926 microseconds
Sentence: james sharp 48 a doctor who charged patients 700 for an experimental aids treatment which he promised could enable them to live indefinitely was ordered to be struck off after being found guilty of serious professional misconduct

Spans:
Span 2-3:  48 => 48
Span 8-9:  700 => 700
Span 29-30:  after => after
Span 12-13:  aids => aid-01
Span 6-7:  charged => charge-05
Span 17-18:  could => possible
Span 4-5:  doctor => doctor
Span 18-19:  enable => enable-01
Span 11-12:  experimental => experiment-01
Span 31-32:  found => find-01
Span 32-33:  guilty => guilty-41
Span 15-16:  he => he
Span 22-23:  indefinitely => indefinite
Span 21-22:  live => live-01
Span 28-29:  off => off
Span 24-25:  ordered => order-01
Span 7-8:  patients => (have-rel-role-91 :ARG2 patient)
Span 35-36:  professional => professional
Span 16-17:  promised => promise-01
Span 34-35:  serious => serious
Span 1-2:  sharp => sharp
Span 27-28:  struck => strike-01
Span 13-14:  treatment => treat-03

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),professional,professional,false), Span(34,35,List(1),serious,serious,false), Span(32,33,List(2),guilty,guilty-41,false), Span(31,32,List(3),found,find-01,false), Span(29,30,List(4),after,after,false), Span(28,29,List(5),off,off,false), Span(27,28,List(6),struck,strike-01,false), Span(24,25,List(7),ordered,order-01,false), Span(22,23,List(8),indefinitely,indefinite,false), Span(21,22,List(9),live,live-01,false), Span(18,19,List(10),enable,enable-01,false), Span(17,18,List(11),could,possible,false), Span(16,17,List(12),promised,promise-01,false), Span(15,16,List(13),he,he,false), Span(13,14,List(14),treatment,treat-03,false), Span(12,13,List(15),aids,aid-01,false), Span(11,12,List(16),experimental,experiment-01,false), Span(8,9,List(17),700,700,false), Span(7,8,List(19, 18),patients,(have-rel-role-91 :ARG2 patient),false), Span(6,7,List(20),charged,charge-05,false), Span(4,5,List(21),doctor,doctor,false), Span(2,3,List(22),48,48,false), Span(1,2,List(23),sharp,sharp,false)),Map(2 -> guilty-41, 5 -> off, 12 -> promise-01, 15 -> aid-01, 8 -> indefinite, 21 -> doctor, 18 -> have-rel-role-91, 7 -> order-01, 17 -> 700, 1 -> serious, 23 -> sharp, 4 -> after, 11 -> possible, 14 -> treat-03, 20 -> charge-05, 6 -> strike-01, 22 -> 48, 0 -> professional, 9 -> live-01, 16 -> experiment-01, 19 -> patient, 3 -> find-01, 10 -> enable-01, 13 -> he),Map(e -> enable-01, h -> he, h2 -> have-rel-role-91, s2 -> strike-01, t -> treat-03, e2 -> experiment-01, p2 -> possible, s -> serious, d -> doctor, 7 -> 700, p -> professional, g -> guilty-41, 4 -> 48, a -> after, p4 -> patient, o2 -> order-01, a2 -> aid-01, i -> indefinite, s3 -> sharp, c -> charge-05, l -> live-01, f -> find-01, o -> off, p3 -> promise-01))),[Ljava.lang.String;@500e2dc4,Annotation([Ljava.lang.String;@52dec7eb,[Ljava.lang.String;@20173fce,[Ljava.lang.String;@565dfdd7),Annotation([Ljava.lang.String;@34c45a8d,[Ljava.lang.String;@4714fa0b,[Ledu.cmu.lti.nlp.amr.Dependency;@322c0ca2),Annotation([Ljava.lang.String;@69f17969,[Ljava.lang.String;@6c5a12d5,[Ljava.lang.String;@d8a9586),Annotation([Ljava.lang.String;@55e975c,[Ljava.lang.String;@5231bc5,[Ledu.cmu.lti.nlp.amr.Entity;@43f42525))
AMR:
(a / after, op, f / find-01)
(c / charge-05, ARG0, d / doctor)
(c / charge-05, ARG1, h2 / have-rel-role-91)
(e / enable-01, ARG0, h / he)
(e / enable-01, ARG1, l / live-01)
(e2 / experiment-01, ARG1, a2 / aid-01)
(f / find-01, ARG1, g / guilty-41)
(g / guilty-41, ARG1, 7 / 700)
(g / guilty-41, ARG2, s / serious)
(h2 / have-rel-role-91, ARG1, h / he)
(h2 / have-rel-role-91, ARG2, p4 / patient)
(l / live-01, duration, i / indefinite)
(o2 / order-01, ARG1, 4 / 48)
(o2 / order-01, ARG2, s2 / strike-01)
(p / professional, mod, s / serious)
(p2 / possible, domain, e / enable-01)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, t / treat-03)
(s2 / strike-01, ARG1, h2 / have-rel-role-91)
(s2 / strike-01, direction, o / off)
(s2 / strike-01, time, a / after)
(s3 / sharp, quant, 4 / 48)
(t / treat-03, ARG1, a2 / aid-01)

Decoded in 318,663 microseconds
Sentence: sir james goldsmiths long battle for control of bat industries suffered another unexpected setback over the weekend when the chairman of axa midi the french insurance company that has promised to buy bats farmers insurance group if the bid is successful was admitted to hospital suddenly for heart surgery

Spans:
Span 42-43:  admitted => admit-01
Span 11-12:  another => another
Span 4-5:  battle => battle-01
Span 38-39:  bid => bid-01
Span 31-32:  buy => buy-01
Span 19-20:  chairman => (have-org-role-91 :ARG2 chairman)
Span 26-27:  company => company
Span 6-7:  control => control-01
Span 33-34:  farmers => (person :ARG0-of farm-01)
Span 24-25:  french => (country :name (name :op "France"))
Span 35-36:  group => group
Span 47-48:  heart => heart
Span 44-45:  hospital => hospital
Span 9-10:  industries => industry
Span 34-35:  insurance => insure-02
Span 25-26:  insurance => insure-02
Span 29-30:  promised => promise-01
Span 40-41:  successful => succeed-01
Span 45-46:  suddenly => sudden
Span 10-11:  suffered => suffer-01
Span 48-49:  surgery => surgery
Span 12-13:  unexpected => (expect-01 :polarity -)
Span 16-17:  weekend => weekend

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),surgery,surgery,false), Span(47,48,List(1),heart,heart,false), Span(45,46,List(2),suddenly,sudden,false), Span(44,45,List(3),hospital,hospital,false), Span(42,43,List(4),admitted,admit-01,false), Span(40,41,List(5),successful,succeed-01,false), Span(38,39,List(6),bid,bid-01,false), Span(35,36,List(7),group,group,false), Span(34,35,List(8),insurance,insure-02,false), Span(33,34,List(10, 9),farmers,(person :ARG0-of farm-01),false), Span(31,32,List(11),buy,buy-01,false), Span(29,30,List(12),promised,promise-01,false), Span(26,27,List(13),company,company,false), Span(25,26,List(14),insurance,insure-02,false), Span(24,25,List(17, 16, 15),french,(country :name (name :op "France")),false), Span(19,20,List(19, 18),chairman,(have-org-role-91 :ARG2 chairman),false), Span(16,17,List(20),weekend,weekend,false), Span(12,13,List(22, 21),unexpected,(expect-01 :polarity -),false), Span(11,12,List(23),another,another,false), Span(10,11,List(24),suffered,suffer-01,false), Span(9,10,List(25),industries,industry,false), Span(6,7,List(26),control,control-01,false), Span(4,5,List(27),battle,battle-01,false)),Map(2 -> sudden, 5 -> succeed-01, 27 -> battle-01, 12 -> promise-01, 8 -> insure-02, 15 -> country, 21 -> expect-01, 18 -> have-org-role-91, 24 -> suffer-01, 7 -> group, 1 -> heart, 17 -> "France", 23 -> another, 26 -> control-01, 4 -> admit-01, 11 -> buy-01, 14 -> insure-02, 20 -> weekend, 6 -> bid-01, 9 -> person, 0 -> surgery, 22 -> -, 16 -> name, 19 -> chairman, 10 -> farm-01, 3 -> hospital, 25 -> industry, 13 -> company),Map(e -> expect-01, b3 -> battle-01, n -> name, w -> weekend, h -> heart, h2 -> hospital, s2 -> sudden, b -> bid-01, b2 -> buy-01, p2 -> promise-01, c4 -> control-01, s -> surgery, s4 -> suffer-01, i3 -> industry, p -> person, g -> group, a -> admit-01, c3 -> chairman, i2 -> insure-02, i -> insure-02, a2 -> another, c -> company, h3 -> have-org-role-91, s3 -> succeed-01, f -> farm-01, c2 -> country))),[Ljava.lang.String;@2f1f99f2,Annotation([Ljava.lang.String;@43b3f709,[Ljava.lang.String;@5c1f9298,[Ljava.lang.String;@1cd16868),Annotation([Ljava.lang.String;@781d929f,[Ljava.lang.String;@5d854254,[Ledu.cmu.lti.nlp.amr.Dependency;@57c5c8c3),Annotation([Ljava.lang.String;@79ffa739,[Ljava.lang.String;@7f3bcdc1,[Ljava.lang.String;@2f417b29),Annotation([Ljava.lang.String;@73fcd8fb,[Ljava.lang.String;@5d09823a,[Ledu.cmu.lti.nlp.amr.Entity;@1b44dd8e))
AMR:
(a / admit-01, ARG0, b3 / battle-01)
(a / admit-01, ARG1, c / company)
(a / admit-01, ARG2, h2 / hospital)
(a / admit-01, ARG3, s / surgery)
(a / admit-01, frequency, s2 / sudden)
(b2 / buy-01, ARG0, p / person)
(b2 / buy-01, ARG1, g / group)
(b3 / battle-01, ARG1, c4 / control-01)
(c / company, mod, c2 / country)
(c2 / country, name, n / name)
(c4 / control-01, ARG1, i3 / industry)
(e / expect-01, ARG1, b2 / buy-01)
(e / expect-01, polarity, -)
(f / farm-01, ARG0, p / person)
(h3 / have-org-role-91, ARG1, c / company)
(h3 / have-org-role-91, ARG2, c3 / chairman)
(i / insure-02, ARG0, g / group)
(i / insure-02, ARG1, a2 / another)
(i2 / insure-02, ARG1, b3 / battle-01)
(n / name, op, "France")
(p2 / promise-01, ARG0, c / company)
(p2 / promise-01, ARG1, b2 / buy-01)
(s / surgery, mod, h / heart)
(s3 / succeed-01, ARG0, b / bid-01)
(s3 / succeed-01, ARG1, g / group)
(s4 / suffer-01, ARG1, i3 / industry)
(s4 / suffer-01, time, w / weekend)

Decoded in 634,521 microseconds
Sentence: basque terrorists who have promised not to shed more blood are being released from spanish prisons writes tim mcgirk

Spans:
Span 9-10:  blood => blood
Span 15-16:  prisons => prison
Span 4-5:  promised => promise-01
Span 12-13:  released => release-01
Span 7-8:  shed => shed-01
Span 14-15:  spanish => (language :name (name :op "Spanish"))
Span 1-2:  terrorists => terrorist
Span 16-17:  writes => write-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),writes,write-01,false), Span(15,16,List(1),prisons,prison,false), Span(14,15,List(4, 3, 2),spanish,(language :name (name :op "Spanish")),false), Span(12,13,List(5),released,release-01,false), Span(9,10,List(6),blood,blood,false), Span(7,8,List(7),shed,shed-01,false), Span(4,5,List(8),promised,promise-01,false), Span(1,2,List(9),terrorists,terrorist,false)),Map(2 -> language, 5 -> release-01, 8 -> promise-01, 7 -> shed-01, 1 -> prison, 4 -> "Spanish", 6 -> blood, 9 -> terrorist, 0 -> write-01, 3 -> name),Map(n -> name, w -> write-01, t -> terrorist, b -> blood, p2 -> promise-01, s -> shed-01, p -> prison, r -> release-01, l -> language))),[Ljava.lang.String;@462da39e,Annotation([Ljava.lang.String;@5e50fe10,[Ljava.lang.String;@1757fcd0,[Ljava.lang.String;@1196c7a9),Annotation([Ljava.lang.String;@420e3144,[Ljava.lang.String;@31c4893d,[Ledu.cmu.lti.nlp.amr.Dependency;@5e0e1d51),Annotation([Ljava.lang.String;@70a6e114,[Ljava.lang.String;@5c0321d3,[Ljava.lang.String;@51a1d2d6),Annotation([Ljava.lang.String;@57190978,[Ljava.lang.String;@2cbcd1f4,[Ledu.cmu.lti.nlp.amr.Entity;@207c011e))
AMR:
(l / language, name, n / name)
(n / name, op, "Spanish")
(p / prison, mod, l / language)
(p2 / promise-01, ARG0, t / terrorist)
(p2 / promise-01, ARG2, s / shed-01)
(r / release-01, ARG0, p / prison)
(r / release-01, ARG1, t / terrorist)
(s / shed-01, ARG1, b / blood)
(w / write-01, ARG1, p / prison)

Decoded in 153,865 microseconds
Sentence: under a giant makeshift marquee tadashi kume the president of honda promised that the japanese company would become a good citizen of europe buying 80 per cent of components for its swindonbuilt cars from european suppliers

NER Entity: (thing :name (name :op "japanese"))
Spans:
Span 24-25:  80 => 80
Span 17-18:  become => become-01
Span 23-24:  buying => buy-01
Span 32-33:  cars => car
Span 26-27:  cent => (monetary-quantity :unit cent)
Span 20-21:  citizen => citizen
Span 15-16:  company => company
Span 28-29:  components => component
Span 22-23:  europe => (continent :name (name :op "Europe"))
Span 34-35:  european => (continent :name (name :op "Europe"))
Span 2-3:  giant => giant
Span 19-20:  good => good
Span 8-9:  president => (have-org-role-91 :ARG2 president)
Span 11-12:  promised => promise-01
Span 35-36:  suppliers => supply-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),suppliers,supply-01,false), Span(34,35,List(3, 2, 1),european,(continent :name (name :op "Europe")),false), Span(32,33,List(4),cars,car,false), Span(28,29,List(5),components,component,false), Span(26,27,List(7, 6),cent,(monetary-quantity :unit cent),false), Span(24,25,List(8),80,80,false), Span(23,24,List(9),buying,buy-01,false), Span(22,23,List(12, 11, 10),europe,(continent :name (name :op "Europe")),false), Span(20,21,List(13),citizen,citizen,false), Span(19,20,List(14),good,good,false), Span(17,18,List(15),become,become-01,false), Span(15,16,List(16),company,company,false), Span(11,12,List(17),promised,promise-01,false), Span(8,9,List(19, 18),president,(have-org-role-91 :ARG2 president),false), Span(2,3,List(20),giant,giant,false)),Map(2 -> name, 5 -> component, 12 -> "Europe", 15 -> become-01, 8 -> 80, 18 -> have-org-role-91, 7 -> cent, 17 -> promise-01, 1 -> continent, 4 -> car, 11 -> name, 14 -> good, 20 -> giant, 6 -> monetary-quantity, 0 -> supply-01, 9 -> buy-01, 16 -> company, 19 -> president, 3 -> "Europe", 10 -> continent, 13 -> citizen),Map(n -> name, h -> have-org-role-91, b -> buy-01, b2 -> become-01, 8 -> 80, c7 -> company, p2 -> president, c4 -> cent, s -> supply-01, m -> monetary-quantity, g2 -> giant, p -> promise-01, g -> good, c3 -> component, c6 -> citizen, c -> continent, c2 -> car, n2 -> name, c5 -> continent))),[Ljava.lang.String;@7edab86b,Annotation([Ljava.lang.String;@4981b9dd,[Ljava.lang.String;@63d181de,[Ljava.lang.String;@4fa54904),Annotation([Ljava.lang.String;@6c5cce75,[Ljava.lang.String;@40f69ae7,[Ledu.cmu.lti.nlp.amr.Dependency;@7e33d502),Annotation([Ljava.lang.String;@7ce5b708,[Ljava.lang.String;@4d53ae47,[Ljava.lang.String;@30d6defa),Annotation([Ljava.lang.String;@6ac90822,[Ljava.lang.String;@343526f3,[Ledu.cmu.lti.nlp.amr.Entity;@d90364c))
AMR:
(b / buy-01, ARG0, c5 / continent)
(b / buy-01, ARG1, c6 / citizen)
(b / buy-01, location, m / monetary-quantity)
(b2 / become-01, ARG1, c7 / company)
(b2 / become-01, ARG2, c6 / citizen)
(c / continent, name, n / name)
(c3 / component, location, c2 / car)
(c5 / continent, name, n2 / name)
(c6 / citizen, mod, g / good)
(g2 / giant, op, b / buy-01)
(h / have-org-role-91, ARG0, 8 / 80)
(h / have-org-role-91, ARG2, p2 / president)
(m / monetary-quantity, unit, c4 / cent)
(n / name, op, "Europe")
(n2 / name, op, "Europe")
(p / promise-01, ARG0, p2 / president)
(p / promise-01, ARG1, b2 / become-01)
(s / supply-01, ARG0, c2 / car)
(s / supply-01, ARG1, m / monetary-quantity)
(s / supply-01, ARG2, c / continent)

Decoded in 404,927 microseconds
Sentence: violation of the duty not to interfere with a persons promising will frustrate his right to promise and the interest on which it is base either by preventing the person from exercising his rights or by perverting the considerations on which he decides whether to promise or not, the fact that such interferences with the right are infrequent is reflected by the fact that the right to promise is rarely invoked in ordinary practical discourse, to conclude the power to promise and the right to promise are distinct notions

Spans:
Span 83-84:  and => and
Span 17-18:  and => and
Span 24-25:  base => base
Span 78-79:  conclude => conclude-02
Span 38-39:  considerations => consider-01
Span 42-43:  decides => decide-01
Span 89-90:  distinct => distinct
Span 3-4:  duty => duty
Span 25-26:  either => either
Span 31-32:  exercising => exercise-02
Span 63-64:  fact => fact
Span 50-51:  fact => fact
Span 12-13:  frustrate => frustrate-01
Span 41-42:  he => he
Span 19-20:  interest => interest-01
Span 6-7:  interfere => interfere-01
Span 22-23:  it => it
Span 90-91:  notions => notion
Span 46-47:  or => or
Span 34-35:  or => or
Span 73-74:  ordinary => ordinary
Span 29-30:  person => person
Span 9-10:  persons => person
Span 80-81:  power => power
Span 74-75:  practical => practical
Span 27-28:  preventing => prevent-01
Span 87-88:  promise => promise-01
Span 82-83:  promise => promise-01
Span 68-69:  promise => promise-01
Span 45-46:  promise => promise-01
Span 16-17:  promise => promise-01
Span 10-11:  promising => promise-01
Span 70-71:  rarely => rare
Span 33-34:  rights => right
Span 52-53:  such => such
Span 0-1:  violation => violate-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(90,91,List(0),notions,notion,false), Span(89,90,List(1),distinct,distinct,false), Span(87,88,List(2),promise,promise-01,false), Span(83,84,List(3),and,and,false), Span(82,83,List(4),promise,promise-01,false), Span(80,81,List(5),power,power,false), Span(78,79,List(6),conclude,conclude-02,false), Span(74,75,List(7),practical,practical,false), Span(73,74,List(8),ordinary,ordinary,false), Span(70,71,List(9),rarely,rare,false), Span(68,69,List(10),promise,promise-01,false), Span(63,64,List(11),fact,fact,false), Span(52,53,List(12),such,such,false), Span(50,51,List(13),fact,fact,false), Span(46,47,List(14),or,or,false), Span(45,46,List(15),promise,promise-01,false), Span(42,43,List(16),decides,decide-01,false), Span(41,42,List(17),he,he,false), Span(38,39,List(18),considerations,consider-01,false), Span(34,35,List(19),or,or,false), Span(33,34,List(20),rights,right,false), Span(31,32,List(21),exercising,exercise-02,false), Span(29,30,List(22),person,person,false), Span(27,28,List(23),preventing,prevent-01,false), Span(25,26,List(24),either,either,false), Span(24,25,List(25),base,base,false), Span(22,23,List(26),it,it,false), Span(19,20,List(27),interest,interest-01,false), Span(17,18,List(28),and,and,false), Span(16,17,List(29),promise,promise-01,false), Span(12,13,List(30),frustrate,frustrate-01,false), Span(10,11,List(31),promising,promise-01,false), Span(9,10,List(32),persons,person,false), Span(6,7,List(33),interfere,interfere-01,false), Span(3,4,List(34),duty,duty,false), Span(0,1,List(35),violation,violate-01,false)),Map(30 -> frustrate-01, 2 -> promise-01, 5 -> power, 33 -> interfere-01, 27 -> interest-01, 12 -> such, 8 -> ordinary, 15 -> promise-01, 21 -> exercise-02, 18 -> consider-01, 24 -> either, 35 -> violate-01, 7 -> practical, 1 -> distinct, 17 -> he, 23 -> prevent-01, 26 -> it, 4 -> promise-01, 11 -> fact, 32 -> person, 14 -> or, 29 -> promise-01, 20 -> right, 34 -> duty, 28 -> and, 6 -> conclude-02, 9 -> rare, 0 -> notion, 22 -> person, 16 -> decide-01, 19 -> or, 10 -> promise-01, 3 -> and, 31 -> promise-01, 25 -> base, 13 -> fact),Map(p10 -> promise-01, e -> exercise-02, n -> notion, h -> he, p5 -> promise-01, b -> base, p8 -> prevent-01, d3 -> duty, o3 -> or, p2 -> promise-01, e2 -> either, s -> such, v -> violate-01, d -> distinct, i3 -> interfere-01, r2 -> right, p -> promise-01, a -> and, p4 -> practical, o2 -> or, d2 -> decide-01, p7 -> person, f3 -> frustrate-01, p11 -> person, i2 -> interest-01, a2 -> and, i -> it, r -> rare, c -> conclude-02, f2 -> fact, p6 -> promise-01, f -> fact, o -> ordinary, p9 -> promise-01, p3 -> power, c2 -> consider-01))),[Ljava.lang.String;@3e4cb5a3,Annotation([Ljava.lang.String;@1e290049,[Ljava.lang.String;@15d1c817,[Ljava.lang.String;@7fa76931),Annotation([Ljava.lang.String;@47eb5170,[Ljava.lang.String;@2a2fb4f3,[Ledu.cmu.lti.nlp.amr.Dependency;@2210d328),Annotation([Ljava.lang.String;@7e96f890,[Ljava.lang.String;@6998f6dd,[Ljava.lang.String;@39775d54),Annotation([Ljava.lang.String;@4b905345,[Ljava.lang.String;@704afdc4,[Ledu.cmu.lti.nlp.amr.Entity;@4b5a8874))
AMR:
(a / and, op, h / he)
(a / and, op, n / notion)
(a2 / and, op, i2 / interest-01)
(b / base, compared-to, p8 / prevent-01)
(b / base, domain, i / it)
(c / conclude-02, ARG0, a / and)
(c / conclude-02, ARG1, p3 / power)
(c / conclude-02, ARG2, p2 / promise-01)
(c2 / consider-01, ARG1, h / he)
(d2 / decide-01, ARG0, h / he)
(d2 / decide-01, ARG1, f / fact)
(d2 / decide-01, ARG2, p6 / promise-01)
(e / exercise-02, ARG0, p7 / person)
(e / exercise-02, ARG1, r2 / right)
(f3 / frustrate-01, ARG1, a2 / and)
(f3 / frustrate-01, ARG2, p9 / promise-01)
(i2 / interest-01, ARG1, i / it)
(i3 / interfere-01, ARG0, p11 / person)
(i3 / interfere-01, ARG1, d3 / duty)
(n / notion, mod, d / distinct)
(o2 / or, mod, e2 / either)
(o3 / or, op, e / exercise-02)
(p / promise-01, ARG2, a / and)
(p / promise-01, mod, p4 / practical)
(p10 / promise-01, ARG0, p11 / person)
(p10 / promise-01, ARG1, f3 / frustrate-01)
(p2 / promise-01, ARG1, o / ordinary)
(p5 / promise-01, ARG0, h / he)
(p5 / promise-01, ARG1, f2 / fact)
(p6 / promise-01, ARG0, o2 / or)
(p6 / promise-01, ARG1, r / rare)
(p8 / prevent-01, ARG1, p7 / person)
(p9 / promise-01, ARG0, h / he)
(s / such, op, e / exercise-02)
(v / violate-01, ARG1, d3 / duty)

Decoded in 1,578,060 microseconds
Sentence: we used to have to promise to do things to get elected and now we have to promise not to

Spans:
Span 12-13:  and => and
Span 11-12:  elected => elect-01
Span 13-14:  now => now
Span 17-18:  promise => promise-01
Span 5-6:  promise => promise-01
Span 8-9:  things => thing
Span 1-2:  used => use-01
Span 14-15:  we => we
Span 0-1:  we => we

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),promise,promise-01,false), Span(14,15,List(1),we,we,false), Span(13,14,List(2),now,now,false), Span(12,13,List(3),and,and,false), Span(11,12,List(4),elected,elect-01,false), Span(8,9,List(5),things,thing,false), Span(5,6,List(6),promise,promise-01,false), Span(1,2,List(7),used,use-01,false), Span(0,1,List(8),we,we,false)),Map(2 -> now, 5 -> thing, 8 -> we, 7 -> use-01, 1 -> we, 4 -> elect-01, 6 -> promise-01, 0 -> promise-01, 3 -> and),Map(e -> elect-01, n -> now, w -> we, t -> thing, p2 -> promise-01, p -> promise-01, a -> and, w2 -> we, u -> use-01))),[Ljava.lang.String;@4e062c51,Annotation([Ljava.lang.String;@7747a1db,[Ljava.lang.String;@7fd36e0a,[Ljava.lang.String;@11dd9416),Annotation([Ljava.lang.String;@6a253983,[Ljava.lang.String;@31e2fde6,[Ledu.cmu.lti.nlp.amr.Dependency;@2d8b20a0),Annotation([Ljava.lang.String;@90affbc,[Ljava.lang.String;@311b9447,[Ljava.lang.String;@9a3da81),Annotation([Ljava.lang.String;@645e5018,[Ljava.lang.String;@6bdc8b22,[Ledu.cmu.lti.nlp.amr.Entity;@5c329c80))
AMR:
(a / and, op, e / elect-01)
(a / and, time, n / now)
(e / elect-01, ARG1, t / thing)
(p / promise-01, ARG0, w2 / we)
(p / promise-01, ARG1, w / we)
(p2 / promise-01, ARG0, w2 / we)
(u / use-01, ARG0, w2 / we)
(u / use-01, ARG1, a / and)

Decoded in 85,758 microseconds
Sentence: british rail had promised that if a new station were built in kidlington services to and from banbury would stop there giving the village a train every two hours

NER Entity: (organization :name (name :op "british" :op "rail"))
Spans:
Span 15-16:  and => and
Span 0-2:  british rail => (organization :name (name :op "british" :op "rail"))
Span 10-11:  built => build-01
Span 26-27:  every => every
Span 28-29:  hours => (temporal-quantity :unit hour)
Span 7-8:  new => new
Span 3-4:  promised => promise-01
Span 13-14:  services => service
Span 8-9:  station => station
Span 19-20:  stop => stop-01
Span 25-26:  train => train
Span 27-28:  two => 2
Span 23-24:  village => village

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(1, 0),hours,(temporal-quantity :unit hour),false), Span(27,28,List(2),two,2,false), Span(26,27,List(3),every,every,false), Span(25,26,List(4),train,train,false), Span(23,24,List(5),village,village,false), Span(19,20,List(6),stop,stop-01,false), Span(15,16,List(7),and,and,false), Span(13,14,List(8),services,service,false), Span(10,11,List(9),built,build-01,false), Span(8,9,List(10),station,station,false), Span(7,8,List(11),new,new,false), Span(3,4,List(12),promised,promise-01,false), Span(0,2,List(16, 15, 14, 13),british rail,(organization :name (name :op "british" :op "rail")),false)),Map(2 -> 2, 5 -> village, 12 -> promise-01, 15 -> "british", 8 -> service, 7 -> and, 1 -> hour, 4 -> train, 11 -> new, 14 -> name, 6 -> stop-01, 0 -> temporal-quantity, 9 -> build-01, 16 -> "rail", 3 -> every, 10 -> station, 13 -> organization),Map(e -> every, n -> new, h -> hour, 2 -> 2, s2 -> service, t -> temporal-quantity, b -> build-01, s -> stop-01, v -> village, p -> promise-01, a -> and, t2 -> train, s3 -> station, o -> organization, n2 -> name))),[Ljava.lang.String;@7ec0c6c9,Annotation([Ljava.lang.String;@223af722,[Ljava.lang.String;@4d36eabc,[Ljava.lang.String;@506d043e),Annotation([Ljava.lang.String;@2531abb2,[Ljava.lang.String;@5fff4631,[Ledu.cmu.lti.nlp.amr.Dependency;@70596c33),Annotation([Ljava.lang.String;@7ecec1e4,[Ljava.lang.String;@381ba0c6,[Ljava.lang.String;@1dd843f1),Annotation([Ljava.lang.String;@61549285,[Ljava.lang.String;@775f8bae,[Ledu.cmu.lti.nlp.amr.Entity;@21cb89bc))
AMR:
(b / build-01, ARG0, s2 / service)
(b / build-01, ARG1, s3 / station)
(b / build-01, ARG2, a / and)
(n2 / name, op, "british")
(n2 / name, op, "rail")
(o / organization, name, n2 / name)
(p / promise-01, ARG0, o / organization)
(p / promise-01, ARG1, t2 / train)
(s / stop-01, ARG0, o / organization)
(s / stop-01, ARG1, v / village)
(s / stop-01, time, b / build-01)
(s3 / station, mod, n / new)
(t / temporal-quantity, consist, t2 / train)
(t / temporal-quantity, mod, e / every)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, h / hour)

Decoded in 338,156 microseconds
Sentence: the coasters sang of young blood the everly brothers sang bye bye love and all i have to do is dream frankie lymon and the teenagers asked why do fools fall in love dion and the belmonts expounded on a teenager in love tab hunter suffered from young love the babyvoiced buddy holly and the crickets promised thatll be the day and most explicitly of all nat king cole plaintively rebuked the middleaged in the song too young

Spans:
Span 65-66:  all => all
Span 14-15:  all => all
Span 61-62:  and => and
Span 53-54:  and => and
Span 34-35:  and => and
Span 23-24:  and => and
Span 13-14:  and => and
Span 26-27:  asked => ask-02
Span 5-6:  blood => blood
Span 8-9:  brothers => (have-rel-role-91 :ARG2 brother)
Span 51-52:  buddy => (have-rel-role-91 :ARG2 buddy)
Span 60-61:  day => day
Span 20-21:  dream => dream-01
Span 63-64:  explicitly => explicit
Span 29-30:  fools => fool
Span 15-16:  i => i
Span 67-68:  king => king
Span 48-49:  love => love-01
Span 42-43:  love => love-01
Span 32-33:  love => love-01
Span 12-13:  love => love-01
Span 62-63:  most => most
Span 56-57:  promised => promise-01
Span 9-10:  sang => sing-01
Span 2-3:  sang => sing-01
Span 75-76:  song => song
Span 45-46:  suffered => suffer-01
Span 43-44:  tab => tab
Span 40-41:  teenager => teenager
Span 25-26:  teenagers => teenager
Span 76-77:  too => too
Span 77-78:  young => young
Span 47-48:  young => young
Span 4-5:  young => young

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(77,78,List(0),young,young,false), Span(76,77,List(1),too,too,false), Span(75,76,List(2),song,song,false), Span(67,68,List(3),king,king,false), Span(65,66,List(4),all,all,false), Span(63,64,List(5),explicitly,explicit,false), Span(62,63,List(6),most,most,false), Span(61,62,List(7),and,and,false), Span(60,61,List(8),day,day,false), Span(56,57,List(9),promised,promise-01,false), Span(53,54,List(10),and,and,false), Span(51,52,List(12, 11),buddy,(have-rel-role-91 :ARG2 buddy),false), Span(48,49,List(13),love,love-01,false), Span(47,48,List(14),young,young,false), Span(45,46,List(15),suffered,suffer-01,false), Span(43,44,List(16),tab,tab,false), Span(42,43,List(17),love,love-01,false), Span(40,41,List(18),teenager,teenager,false), Span(34,35,List(19),and,and,false), Span(32,33,List(20),love,love-01,false), Span(29,30,List(21),fools,fool,false), Span(26,27,List(22),asked,ask-02,false), Span(25,26,List(23),teenagers,teenager,false), Span(23,24,List(24),and,and,false), Span(20,21,List(25),dream,dream-01,false), Span(15,16,List(26),i,i,false), Span(14,15,List(27),all,all,false), Span(13,14,List(28),and,and,false), Span(12,13,List(29),love,love-01,false), Span(9,10,List(30),sang,sing-01,false), Span(8,9,List(32, 31),brothers,(have-rel-role-91 :ARG2 brother),false), Span(5,6,List(33),blood,blood,false), Span(4,5,List(34),young,young,false), Span(2,3,List(35),sang,sing-01,false)),Map(30 -> sing-01, 2 -> song, 5 -> explicit, 33 -> blood, 27 -> all, 12 -> buddy, 8 -> day, 15 -> suffer-01, 21 -> fool, 18 -> teenager, 24 -> and, 35 -> sing-01, 7 -> and, 1 -> too, 17 -> love-01, 23 -> teenager, 26 -> i, 4 -> all, 11 -> have-rel-role-91, 32 -> brother, 14 -> young, 29 -> love-01, 20 -> love-01, 34 -> young, 28 -> and, 6 -> most, 9 -> promise-01, 0 -> young, 22 -> ask-02, 16 -> tab, 19 -> and, 10 -> and, 3 -> king, 31 -> have-rel-role-91, 25 -> dream-01, 13 -> love-01),Map(a7 -> all, e -> explicit, b3 -> blood, h -> have-rel-role-91, t4 -> teenager, h2 -> have-rel-role-91, s2 -> suffer-01, t -> too, b -> buddy, k -> king, b2 -> brother, a3 -> and, l3 -> love-01, s -> song, s4 -> sing-01, a6 -> and, d -> day, m -> most, t3 -> teenager, y -> young, p -> promise-01, a -> all, y3 -> young, d2 -> dream-01, a5 -> ask-02, a8 -> and, t2 -> tab, l2 -> love-01, i -> i, a2 -> and, s3 -> sing-01, l -> love-01, f -> fool, y2 -> young, l4 -> love-01, a4 -> and))),[Ljava.lang.String;@1f457048,Annotation([Ljava.lang.String;@7ce9702,[Ljava.lang.String;@c1c084f,[Ljava.lang.String;@46580bf),Annotation([Ljava.lang.String;@23e77dda,[Ljava.lang.String;@32f785a0,[Ledu.cmu.lti.nlp.amr.Dependency;@1865e584),Annotation([Ljava.lang.String;@49bf499f,[Ljava.lang.String;@2d7a8b8c,[Ljava.lang.String;@485faba7),Annotation([Ljava.lang.String;@fe8610,[Ljava.lang.String;@461384f2,[Ledu.cmu.lti.nlp.amr.Entity;@2b7d4fcf))
AMR:
(a2 / and, op, d / day)
(a2 / and, op, p / promise-01)
(a3 / and, op, a5 / ask-02)
(a3 / and, op, l / love-01)
(a4 / and, op, l4 / love-01)
(a5 / ask-02, ARG0, i / i)
(a5 / ask-02, ARG1, t4 / teenager)
(a5 / ask-02, ARG2, a6 / and)
(a8 / and, op, l4 / love-01)
(a8 / and, op, s3 / sing-01)
(a8 / and, op, s4 / sing-01)
(b3 / blood, mod, y3 / young)
(d2 / dream-01, ARG1, l2 / love-01)
(e / explicit, op, l2 / love-01)
(f / fool, topic, h / have-rel-role-91)
(h / have-rel-role-91, ARG1, s / song)
(h / have-rel-role-91, ARG2, b / buddy)
(h2 / have-rel-role-91, ARG2, b2 / brother)
(k / king, op, s2 / suffer-01)
(l / love-01, ARG0, a / all)
(l / love-01, ARG1, h / have-rel-role-91)
(l2 / love-01, ARG1, t2 / tab)
(l3 / love-01, ARG0, i / i)
(l4 / love-01, ARG1, i / i)
(m / most, time, e / explicit)
(p / promise-01, ARG0, a3 / and)
(p / promise-01, ARG1, y / young)
(s2 / suffer-01, ARG0, l / love-01)
(s2 / suffer-01, ARG1, l2 / love-01)
(s2 / suffer-01, ARG2, t3 / teenager)
(s2 / suffer-01, time, y2 / young)
(s3 / sing-01, ARG0, b2 / brother)
(s3 / sing-01, ARG1, a7 / all)
(s3 / sing-01, location, b3 / blood)
(y / young, degree, t / too)

Decoded in 1,583,795 microseconds
Sentence: the military government officially called the state law and order restoration committee has promised to hold elections by may

Spans:
Span 8-9:  and => and
Span 11-12:  committee => committee
Span 16-17:  elections => elect-01
Span 7-8:  law => law
Span 18-19:  may => (date-entity :month 5)
Span 1-2:  military => military
Span 3-4:  officially => official
Span 13-14:  promised => promise-01
Span 10-11:  restoration => restore-01
Span 6-7:  state => state

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),may,(date-entity :month 5),false), Span(16,17,List(2),elections,elect-01,false), Span(13,14,List(3),promised,promise-01,false), Span(11,12,List(4),committee,committee,false), Span(10,11,List(5),restoration,restore-01,false), Span(8,9,List(6),and,and,false), Span(7,8,List(7),law,law,false), Span(6,7,List(8),state,state,false), Span(3,4,List(9),officially,official,false), Span(1,2,List(10),military,military,false)),Map(2 -> elect-01, 5 -> restore-01, 8 -> state, 7 -> law, 1 -> 5, 4 -> committee, 6 -> and, 9 -> official, 0 -> date-entity, 10 -> military, 3 -> promise-01),Map(e -> elect-01, 5 -> 5, s -> state, m -> military, d -> date-entity, p -> promise-01, a -> and, r -> restore-01, l -> law, c -> committee, o -> official))),[Ljava.lang.String;@3002b557,Annotation([Ljava.lang.String;@1cf7b61,[Ljava.lang.String;@5cad1e34,[Ljava.lang.String;@699a1774),Annotation([Ljava.lang.String;@379f6d6,[Ljava.lang.String;@3c3c5d62,[Ledu.cmu.lti.nlp.amr.Dependency;@1f16ebd3),Annotation([Ljava.lang.String;@19d47997,[Ljava.lang.String;@4c7ab5c0,[Ljava.lang.String;@c32777a),Annotation([Ljava.lang.String;@4541f0d7,[Ljava.lang.String;@6c2ad6c6,[Ledu.cmu.lti.nlp.amr.Entity;@707a98a4))
AMR:
(a / and, op, c / committee)
(a / and, op, l / law)
(d / date-entity, month, 5 / 5)
(e / elect-01, ARG1, m / military)
(e / elect-01, time, d / date-entity)
(l / law, topic, s / state)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, e / elect-01)
(r / restore-01, ARG0, c / committee)
(r / restore-01, ARG1, o / official)

Decoded in 77,840 microseconds
Sentence: as an alternative security for japan the british and the americans promised not to develop their naval bases at hong kong and in the philippines

NER Entity: (country :name (name :op "japan"))
NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "hong" :op "kong"))
NER Entity: (country :name (name :op "philippines"))
Spans:
Span 2-3:  alternative => alternative
Span 10-11:  americans => (person :mod (country :name (name :op "America")))
Span 21-22:  and => and
Span 8-9:  and => and
Span 17-18:  bases => base
Span 14-15:  develop => develop-02
Span 19-21:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 11-12:  promised => promise-01
Span 3-4:  security => security

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),and,and,false), Span(19,21,List(4, 3, 2, 1),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(17,18,List(5),bases,base,false), Span(14,15,List(6),develop,develop-02,false), Span(11,12,List(7),promised,promise-01,false), Span(10,11,List(11, 10, 9, 8),americans,(person :mod (country :name (name :op "America"))),false), Span(8,9,List(12),and,and,false), Span(3,4,List(13),security,security,false), Span(2,3,List(14),alternative,alternative,false)),Map(2 -> name, 5 -> base, 12 -> and, 8 -> person, 7 -> promise-01, 1 -> country, 4 -> "kong", 11 -> "America", 14 -> alternative, 6 -> develop-02, 0 -> and, 9 -> country, 3 -> "hong", 10 -> name, 13 -> security),Map(n -> name, b -> base, p2 -> person, a3 -> alternative, s -> security, d -> develop-02, p -> promise-01, a -> and, a2 -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@bb70ad,Annotation([Ljava.lang.String;@11e26e3b,[Ljava.lang.String;@28b2eca9,[Ljava.lang.String;@7acf601e),Annotation([Ljava.lang.String;@44af908f,[Ljava.lang.String;@623bbf83,[Ledu.cmu.lti.nlp.amr.Dependency;@409a63d7),Annotation([Ljava.lang.String;@5810d963,[Ljava.lang.String;@3a301fc0,[Ljava.lang.String;@2d749418),Annotation([Ljava.lang.String;@40a6caf8,[Ljava.lang.String;@65780f1,[Ledu.cmu.lti.nlp.amr.Entity;@5ad25177))
AMR:
(a / and, op, p / promise-01)
(a2 / and, op, p2 / person)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / develop-02, ARG0, c / country)
(d / develop-02, ARG1, b / base)
(n / name, op, "hong")
(n / name, op, "kong")
(n2 / name, op, "America")
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, s / security)
(p / promise-01, ARG2, d / develop-02)
(p2 / person, mod, c2 / country)
(s / security, mod, a3 / alternative)

Decoded in 62,614 microseconds
Sentence: he promised to form a national unity cabinet to implement the peace accord dash

Spans:
Span 12-13:  accord => accord
Span 7-8:  cabinet => cabinet
Span 3-4:  form => form
Span 0-1:  he => he
Span 9-10:  implement => implement-01
Span 5-6:  national => nation
Span 11-12:  peace => peace
Span 1-2:  promised => promise-01
Span 6-7:  unity => (name :op "Unity")

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),accord,accord,false), Span(11,12,List(1),peace,peace,false), Span(9,10,List(2),implement,implement-01,false), Span(7,8,List(3),cabinet,cabinet,false), Span(6,7,List(5, 4),unity,(name :op "Unity"),false), Span(5,6,List(6),national,nation,false), Span(3,4,List(7),form,form,false), Span(1,2,List(8),promised,promise-01,false), Span(0,1,List(9),he,he,false)),Map(2 -> implement-01, 5 -> "Unity", 8 -> promise-01, 7 -> form, 1 -> peace, 4 -> name, 6 -> nation, 9 -> he, 0 -> accord, 3 -> cabinet),Map(n -> name, h -> he, p2 -> promise-01, p -> peace, a -> accord, i -> implement-01, c -> cabinet, f -> form, n2 -> nation))),[Ljava.lang.String;@25e28a36,Annotation([Ljava.lang.String;@3bdff2a8,[Ljava.lang.String;@6bb4124d,[Ljava.lang.String;@7b1db478),Annotation([Ljava.lang.String;@5b33716d,[Ljava.lang.String;@e5bd9e2,[Ledu.cmu.lti.nlp.amr.Dependency;@303d8bcb),Annotation([Ljava.lang.String;@18a4d52b,[Ljava.lang.String;@6da706b0,[Ljava.lang.String;@70a8450d),Annotation([Ljava.lang.String;@374d9243,[Ljava.lang.String;@45bd8912,[Ledu.cmu.lti.nlp.amr.Entity;@1e722083))
AMR:
(a / accord, mod, p / peace)
(c / cabinet, mod, n2 / nation)
(c / cabinet, name, n / name)
(f / form, purpose, i / implement-01)
(i / implement-01, ARG0, c / cabinet)
(i / implement-01, ARG1, a / accord)
(n / name, op, "Unity")
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, f / form)

Decoded in 46,475 microseconds
Sentence: us officials say privately that washington promised the rebels that american troops would block two key roads leading to the headquarters of the panamanian defence forces pdf

NER Entity: (country :name (name :op "washington"))
NER Entity: (thing :name (name :op "american"))
NER Entity: (thing :name (name :op "panamanian"))
NER Entity: (thing :name (name :op "american"))
Spans:
Span 10-11:  american => (country :name (name :op "America"))
Span 13-14:  block => block-01
Span 24-25:  defence => defend-01
Span 25-26:  forces => force
Span 20-21:  headquarters => headquarters
Span 15-16:  key => key
Span 17-18:  leading => lead-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 6-7:  promised => promise-01
Span 8-9:  rebels => (person :ARG0-of rebel-01)
Span 16-17:  roads => road
Span 2-3:  say => say-01
Span 11-12:  troops => troop
Span 14-15:  two => 2

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),forces,force,false), Span(24,25,List(1),defence,defend-01,false), Span(20,21,List(2),headquarters,headquarters,false), Span(17,18,List(3),leading,lead-01,false), Span(16,17,List(4),roads,road,false), Span(15,16,List(5),key,key,false), Span(14,15,List(6),two,2,false), Span(13,14,List(7),block,block-01,false), Span(11,12,List(8),troops,troop,false), Span(10,11,List(11, 10, 9),american,(country :name (name :op "America")),false), Span(8,9,List(13, 12),rebels,(person :ARG0-of rebel-01),false), Span(6,7,List(14),promised,promise-01,false), Span(2,3,List(15),say,say-01,false), Span(1,2,List(17, 16),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> headquarters, 5 -> key, 12 -> person, 15 -> say-01, 8 -> troop, 7 -> block-01, 17 -> official, 1 -> defend-01, 4 -> road, 11 -> "America", 14 -> promise-01, 6 -> 2, 0 -> force, 9 -> country, 16 -> have-org-role-91, 3 -> lead-01, 10 -> name, 13 -> rebel-01),Map(n -> name, h -> headquarters, 2 -> 2, h2 -> have-org-role-91, k -> key, b -> block-01, t -> troop, p2 -> promise-01, s -> say-01, d -> defend-01, p -> person, r2 -> rebel-01, r -> road, c -> country, l -> lead-01, f -> force, o -> official))),[Ljava.lang.String;@66518236,Annotation([Ljava.lang.String;@713bdbb4,[Ljava.lang.String;@10d54080,[Ljava.lang.String;@207d9c22),Annotation([Ljava.lang.String;@16958cd8,[Ljava.lang.String;@3451c47d,[Ledu.cmu.lti.nlp.amr.Dependency;@643b0560),Annotation([Ljava.lang.String;@5ede1508,[Ljava.lang.String;@4636f0e0,[Ljava.lang.String;@41002623),Annotation([Ljava.lang.String;@70c7e52b,[Ljava.lang.String;@5396a3e5,[Ledu.cmu.lti.nlp.amr.Entity;@46e23a42))
AMR:
(b / block-01, ARG0, t / troop)
(b / block-01, ARG1, r / road)
(b / block-01, time, s / say-01)
(c / country, name, n / name)
(d / defend-01, ARG0, f / force)
(d / defend-01, mod, k / key)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, o / official)
(l / lead-01, ARG0, r / road)
(l / lead-01, ARG4, h / headquarters)
(n / name, op, "America")
(p2 / promise-01, ARG1, p / person)
(r / road, mod, k / key)
(r / road, quant, 2 / 2)
(r2 / rebel-01, ARG0, p / person)
(s / say-01, ARG1, p2 / promise-01)
(t / troop, mod, c / country)

Decoded in 828,373 microseconds
Sentence: but both major networks have promised substantial coverage sheffield will hope for at least one daily 50minute programme of highlights on bbc dash

Spans:
Span 1-2:  both => both
Span 0-1:  but => contrast-01
Span 7-8:  coverage => cover-03
Span 19-20:  highlights => highlight-01
Span 10-11:  hope => hope-01
Span 2-3:  major => major
Span 3-4:  networks => network
Span 17-18:  programme => program
Span 5-6:  promised => promise-01
Span 6-7:  substantial => substantial

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),highlights,highlight-01,false), Span(17,18,List(1),programme,program,false), Span(10,11,List(2),hope,hope-01,false), Span(7,8,List(3),coverage,cover-03,false), Span(6,7,List(4),substantial,substantial,false), Span(5,6,List(5),promised,promise-01,false), Span(3,4,List(6),networks,network,false), Span(2,3,List(7),major,major,false), Span(1,2,List(8),both,both,false), Span(0,1,List(9),but,contrast-01,false)),Map(2 -> hope-01, 5 -> promise-01, 8 -> both, 7 -> major, 1 -> program, 4 -> substantial, 6 -> network, 9 -> contrast-01, 0 -> highlight-01, 3 -> cover-03),Map(n -> network, h -> highlight-01, b -> both, h2 -> hope-01, p2 -> promise-01, s -> substantial, m -> major, p -> program, c -> cover-03, c2 -> contrast-01))),[Ljava.lang.String;@2e5ee769,Annotation([Ljava.lang.String;@58aab647,[Ljava.lang.String;@2fa51ccb,[Ljava.lang.String;@1056bdd),Annotation([Ljava.lang.String;@aec7ab1,[Ljava.lang.String;@2b6b0011,[Ledu.cmu.lti.nlp.amr.Dependency;@7dd1725b),Annotation([Ljava.lang.String;@41aaf4e5,[Ljava.lang.String;@3eb40811,[Ljava.lang.String;@1d7db440),Annotation([Ljava.lang.String;@27c4e4e0,[Ljava.lang.String;@6f8e4285,[Ledu.cmu.lti.nlp.amr.Entity;@64b162fa))
AMR:
(c / cover-03, ARG0, s / substantial)
(c2 / contrast-01, ARG1, p2 / promise-01)
(h / highlight-01, ARG0, p / program)
(h2 / hope-01, ARG0, c / cover-03)
(h2 / hope-01, ARG1, p / program)
(n / network, mod, b / both)
(n / network, mod, m / major)
(p2 / promise-01, ARG0, n / network)
(p2 / promise-01, ARG1, h2 / hope-01)

Decoded in 184,807 microseconds
Sentence: what promised to be one of the most controversial aspects of the bill dash

Spans:
Span 9-10:  aspects => aspect
Span 12-13:  bill => bill
Span 8-9:  controversial => controversy
Span 7-8:  most => most
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),bill,bill,false), Span(9,10,List(1),aspects,aspect,false), Span(8,9,List(2),controversial,controversy,false), Span(7,8,List(3),most,most,false), Span(1,2,List(4),promised,promise-01,false)),Map(2 -> controversy, 1 -> aspect, 4 -> promise-01, 0 -> bill, 3 -> most),Map(b -> bill, m -> most, p -> promise-01, a -> aspect, c -> controversy))),[Ljava.lang.String;@39d93ebb,Annotation([Ljava.lang.String;@65a584a8,[Ljava.lang.String;@55a865ba,[Ljava.lang.String;@22aec245),Annotation([Ljava.lang.String;@7f5451cc,[Ljava.lang.String;@78c66962,[Ledu.cmu.lti.nlp.amr.Dependency;@2a30dee0),Annotation([Ljava.lang.String;@6e7859c3,[Ljava.lang.String;@1f4d49de,[Ljava.lang.String;@b2c9de0),Annotation([Ljava.lang.String;@1e30e2db,[Ljava.lang.String;@1b7da759,[Ledu.cmu.lti.nlp.amr.Entity;@5675d228))
AMR:
(a / aspect, mod, c / controversy)
(c / controversy, degree, m / most)
(p / promise-01, ARG1, a / aspect)
(p / promise-01, ARG2, b / bill)

Decoded in 14,888 microseconds
Sentence: david oxley the rugby leagues chief executive has promised a full inquiry into the crowd misbehavior

Spans:
Span 5-6:  chief => (have-org-role-91 :ARG2 chief)
Span 14-15:  crowd => crowd
Span 6-7:  executive => executive
Span 10-11:  full => full
Span 11-12:  inquiry => inquire-01
Span 4-5:  leagues => league
Span 8-9:  promised => promise-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),crowd,crowd,false), Span(11,12,List(1),inquiry,inquire-01,false), Span(10,11,List(2),full,full,false), Span(8,9,List(3),promised,promise-01,false), Span(6,7,List(4),executive,executive,false), Span(5,6,List(6, 5),chief,(have-org-role-91 :ARG2 chief),false), Span(4,5,List(7),leagues,league,false)),Map(2 -> full, 5 -> have-org-role-91, 7 -> league, 1 -> inquire-01, 4 -> executive, 6 -> chief, 0 -> crowd, 3 -> promise-01),Map(e -> executive, h -> have-org-role-91, p -> promise-01, i -> inquire-01, l -> league, c -> crowd, f -> full, c2 -> chief))),[Ljava.lang.String;@51386c70,Annotation([Ljava.lang.String;@4f5756b8,[Ljava.lang.String;@6efe72b9,[Ljava.lang.String;@31e089d),Annotation([Ljava.lang.String;@28c77d04,[Ljava.lang.String;@40e0a686,[Ledu.cmu.lti.nlp.amr.Dependency;@5cd4c8b0),Annotation([Ljava.lang.String;@15c3ca6d,[Ljava.lang.String;@691ec544,[Ljava.lang.String;@63292946),Annotation([Ljava.lang.String;@2354e586,[Ljava.lang.String;@1aa8d289,[Ledu.cmu.lti.nlp.amr.Entity;@41962e0b))
AMR:
(h / have-org-role-91, ARG0, e / executive)
(h / have-org-role-91, ARG2, c2 / chief)
(i / inquire-01, ARG1, c / crowd)
(i / inquire-01, mod, f / full)
(p / promise-01, ARG0, e / executive)
(p / promise-01, ARG1, l / league)
(p / promise-01, ARG2, i / inquire-01)

Decoded in 45,902 microseconds
Sentence: although a forest at dawn with a deer hunt is very dark cleaning promises to bring out more depth according to christies

Spans:
Span 15-16:  bring => bring-01
Span 12-13:  cleaning => clean-02
Span 11-12:  dark => dark
Span 4-5:  dawn => dawn-01
Span 2-3:  forest => forest
Span 8-9:  hunt => hunt-01
Span 13-14:  promises => promise-01
Span 10-11:  very => very

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),bring,bring-01,false), Span(13,14,List(1),promises,promise-01,false), Span(12,13,List(2),cleaning,clean-02,false), Span(11,12,List(3),dark,dark,false), Span(10,11,List(4),very,very,false), Span(8,9,List(5),hunt,hunt-01,false), Span(4,5,List(6),dawn,dawn-01,false), Span(2,3,List(7),forest,forest,false)),Map(2 -> clean-02, 5 -> hunt-01, 7 -> forest, 1 -> promise-01, 4 -> very, 6 -> dawn-01, 0 -> bring-01, 3 -> dark),Map(h -> hunt-01, b -> bring-01, v -> very, d -> dark, p -> promise-01, d2 -> dawn-01, c -> clean-02, f -> forest))),[Ljava.lang.String;@6aa8f5d0,Annotation([Ljava.lang.String;@7aa26164,[Ljava.lang.String;@3aa82b22,[Ljava.lang.String;@76a7e343),Annotation([Ljava.lang.String;@8398091,[Ljava.lang.String;@7727b3ce,[Ledu.cmu.lti.nlp.amr.Dependency;@4f8dd67f),Annotation([Ljava.lang.String;@68fd54a6,[Ljava.lang.String;@4fc09423,[Ljava.lang.String;@6c3daebc),Annotation([Ljava.lang.String;@459af028,[Ljava.lang.String;@3f0cf5cb,[Ledu.cmu.lti.nlp.amr.Entity;@6bdd02c3))
AMR:
(c / clean-02, ARG0, d / dark)
(c / clean-02, ARG1, f / forest)
(c / clean-02, ARG2, h / hunt-01)
(c / clean-02, purpose, b / bring-01)
(d / dark, degree, v / very)
(d2 / dawn-01, ARG1, h / hunt-01)
(p / promise-01, ARG1, b / bring-01)

Decoded in 77,921 microseconds
Sentence: the czechoslovak prime minister ladislav adamec bargained yesterday with the opposition over bringing more noncommunists into the government and promised to resign if a new cabinet he is to announce tomorrow failed to win the peoples confidence

NER Entity: (person :name (name :op "ladislav" :op "adamec"))
Spans:
Span 18-19:  and => and
Span 29-30:  announce => announce-01
Span 6-7:  bargained => (thing :ARG1-of bargain-01)
Span 12-13:  bringing => bring-01
Span 25-26:  cabinet => cabinet
Span 36-37:  confidence => confidence
Span 31-32:  failed => fail-01
Span 26-27:  he => he
Span 4-6:  ladislav adamec => (person :name (name :op "ladislav" :op "adamec"))
Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Span 24-25:  new => new
Span 10-11:  opposition => oppose-01
Span 35-36:  peoples => people
Span 2-3:  prime => prime
Span 19-20:  promised => promise-01
Span 21-22:  resign => resign-01
Span 30-31:  tomorrow => tomorrow
Span 33-34:  win => win-01
Span 7-8:  yesterday => yesterday

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),confidence,confidence,false), Span(35,36,List(1),peoples,people,false), Span(33,34,List(2),win,win-01,false), Span(31,32,List(3),failed,fail-01,false), Span(30,31,List(4),tomorrow,tomorrow,false), Span(29,30,List(5),announce,announce-01,false), Span(26,27,List(6),he,he,false), Span(25,26,List(7),cabinet,cabinet,false), Span(24,25,List(8),new,new,false), Span(21,22,List(9),resign,resign-01,false), Span(19,20,List(10),promised,promise-01,false), Span(18,19,List(11),and,and,false), Span(12,13,List(12),bringing,bring-01,false), Span(10,11,List(13),opposition,oppose-01,false), Span(7,8,List(14),yesterday,yesterday,false), Span(6,7,List(16, 15),bargained,(thing :ARG1-of bargain-01),false), Span(4,6,List(20, 19, 18, 17),ladislav adamec,(person :name (name :op "ladislav" :op "adamec")),false), Span(3,4,List(22, 21),minister,(have-org-role-91 :ARG2 minister),false), Span(2,3,List(23),prime,prime,false)),Map(2 -> win-01, 5 -> announce-01, 12 -> bring-01, 15 -> thing, 8 -> new, 21 -> have-org-role-91, 18 -> name, 7 -> cabinet, 17 -> person, 1 -> people, 23 -> prime, 4 -> tomorrow, 11 -> and, 14 -> yesterday, 20 -> "adamec", 6 -> he, 22 -> minister, 0 -> confidence, 9 -> resign-01, 16 -> bargain-01, 19 -> "ladislav", 3 -> fail-01, 10 -> promise-01, 13 -> oppose-01),Map(w -> win-01, n -> new, h -> he, h2 -> have-org-role-91, t -> tomorrow, b -> bring-01, b2 -> bargain-01, p2 -> promise-01, m -> minister, y -> yesterday, p -> people, a -> announce-01, p4 -> prime, t2 -> thing, r -> resign-01, a2 -> and, c -> confidence, f -> fail-01, o -> oppose-01, p3 -> person, n2 -> name, c2 -> cabinet))),[Ljava.lang.String;@7ae08787,Annotation([Ljava.lang.String;@2ae1ef17,[Ljava.lang.String;@5717e4ff,[Ljava.lang.String;@61bb4e04),Annotation([Ljava.lang.String;@4fff1abc,[Ljava.lang.String;@753455ab,[Ledu.cmu.lti.nlp.amr.Dependency;@3ee489aa),Annotation([Ljava.lang.String;@e0a1828,[Ljava.lang.String;@38b7f14b,[Ljava.lang.String;@34429004),Annotation([Ljava.lang.String;@7dfd1169,[Ljava.lang.String;@7182451d,[Ledu.cmu.lti.nlp.amr.Entity;@1f87ad23))
AMR:
(a / announce-01, ARG0, h / he)
(a / announce-01, ARG1, c2 / cabinet)
(a / announce-01, time, t / tomorrow)
(a2 / and, op, p2 / promise-01)
(a2 / and, purpose, f / fail-01)
(b2 / bargain-01, ARG0, p3 / person)
(b2 / bargain-01, ARG1, t2 / thing)
(b2 / bargain-01, ARG2, o / oppose-01)
(b2 / bargain-01, manner, b / bring-01)
(b2 / bargain-01, time, y / yesterday)
(c / confidence, mod, p / people)
(c2 / cabinet, mod, n / new)
(f / fail-01, ARG1, c2 / cabinet)
(f / fail-01, ARG2, w / win-01)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p4 / prime)
(n2 / name, op, "adamec")
(n2 / name, op, "ladislav")
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, ARG2, r / resign-01)
(p3 / person, name, n2 / name)
(w / win-01, ARG1, c / confidence)

Decoded in 208,437 microseconds
Sentence: the weekly mail in johannesburg said the tour scheduled to start in january was out of place in the current political atmosphere with new president f w de klerk introducing or promising a series of reforms

NER Entity: (country :name (name :op "johannesburg"))
Spans:
Span 21-22:  atmosphere => atmosphere
Span 19-20:  current => current
Span 25-26:  f => f
Span 29-30:  introducing => introduce-02
Span 12-13:  january => (date-entity :month 1)
Span 2-3:  mail => mail-01
Span 23-24:  new => new
Span 30-31:  or => or
Span 16-17:  place => place
Span 20-21:  political => politics
Span 24-25:  president => (have-org-role-91 :ARG2 president)
Span 31-32:  promising => promise-01
Span 35-36:  reforms => reform-01
Span 5-6:  said => say-01
Span 8-9:  scheduled => schedule-01
Span 33-34:  series => series
Span 10-11:  start => start-01
Span 7-8:  tour => tour-01
Span 1-2:  weekly => (temporal-quantity :unit week)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),reforms,reform-01,false), Span(33,34,List(1),series,series,false), Span(31,32,List(2),promising,promise-01,false), Span(30,31,List(3),or,or,false), Span(29,30,List(4),introducing,introduce-02,false), Span(25,26,List(5),f,f,false), Span(24,25,List(7, 6),president,(have-org-role-91 :ARG2 president),false), Span(23,24,List(8),new,new,false), Span(21,22,List(9),atmosphere,atmosphere,false), Span(20,21,List(10),political,politics,false), Span(19,20,List(11),current,current,false), Span(16,17,List(12),place,place,false), Span(12,13,List(14, 13),january,(date-entity :month 1),false), Span(10,11,List(15),start,start-01,false), Span(8,9,List(16),scheduled,schedule-01,false), Span(7,8,List(17),tour,tour-01,false), Span(5,6,List(18),said,say-01,false), Span(2,3,List(19),mail,mail-01,false), Span(1,2,List(21, 20),weekly,(temporal-quantity :unit week),false)),Map(2 -> promise-01, 5 -> f, 12 -> place, 15 -> start-01, 8 -> new, 21 -> week, 18 -> say-01, 7 -> president, 17 -> tour-01, 1 -> series, 4 -> introduce-02, 11 -> current, 14 -> 1, 20 -> temporal-quantity, 6 -> have-org-role-91, 0 -> reform-01, 9 -> atmosphere, 16 -> schedule-01, 19 -> mail-01, 3 -> or, 10 -> politics, 13 -> date-entity),Map(w -> week, n -> new, h -> have-org-role-91, s2 -> start-01, t -> tour-01, p2 -> president, s -> series, s4 -> say-01, m -> mail-01, d -> date-entity, 1 -> 1, p -> promise-01, a -> atmosphere, p4 -> place, t2 -> temporal-quantity, r -> reform-01, i -> introduce-02, s3 -> schedule-01, c -> current, f -> f, o -> or, p3 -> politics))),[Ljava.lang.String;@5b5ba6f1,Annotation([Ljava.lang.String;@5e2d4712,[Ljava.lang.String;@6e951f0b,[Ljava.lang.String;@2943e5),Annotation([Ljava.lang.String;@15286f78,[Ljava.lang.String;@11ae3a22,[Ledu.cmu.lti.nlp.amr.Dependency;@456a973f),Annotation([Ljava.lang.String;@58efccb3,[Ljava.lang.String;@67682962,[Ljava.lang.String;@677515f7),Annotation([Ljava.lang.String;@37f54031,[Ljava.lang.String;@46496daa,[Ledu.cmu.lti.nlp.amr.Entity;@7ebed7f2))
AMR:
(a / atmosphere, mod, p3 / politics)
(a / atmosphere, time, c / current)
(a / atmosphere, topic, h / have-org-role-91)
(d / date-entity, month, 1 / 1)
(h / have-org-role-91, ARG1, f / f)
(h / have-org-role-91, ARG2, p2 / president)
(i / introduce-02, ARG1, f / f)
(m / mail-01, ARG2, t2 / temporal-quantity)
(o / or, op, i / introduce-02)
(o / or, op, p / promise-01)
(p / promise-01, ARG1, s / series)
(p2 / president, mod, n / new)
(p4 / place, location, a / atmosphere)
(r / reform-01, quant, s / series)
(s2 / start-01, ARG0, t / tour-01)
(s2 / start-01, ARG1, p / promise-01)
(s2 / start-01, time, d / date-entity)
(s3 / schedule-01, ARG1, s2 / start-01)
(s4 / say-01, ARG0, m / mail-01)
(s4 / say-01, ARG1, s3 / schedule-01)
(t2 / temporal-quantity, unit, w / week)

Decoded in 508,420 microseconds
Sentence: ill find you some earrings he promised and the car will come for you at six ready or not

Spans:
Span 7-8:  and => and
Span 9-10:  car => car
Span 4-5:  earrings => earring
Span 5-6:  he => he
Span 0-1:  ill => ill-41
Span 17-18:  or => or
Span 6-7:  promised => promise-01
Span 16-17:  ready => ready-01
Span 15-16:  six => 6
Span 3-4:  some => some
Span 13-14:  you => you
Span 2-3:  you => you

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),or,or,false), Span(16,17,List(1),ready,ready-01,false), Span(15,16,List(2),six,6,false), Span(13,14,List(3),you,you,false), Span(9,10,List(4),car,car,false), Span(7,8,List(5),and,and,false), Span(6,7,List(6),promised,promise-01,false), Span(5,6,List(7),he,he,false), Span(4,5,List(8),earrings,earring,false), Span(3,4,List(9),some,some,false), Span(2,3,List(10),you,you,false), Span(0,1,List(11),ill,ill-41,false)),Map(2 -> 6, 5 -> and, 8 -> earring, 7 -> he, 1 -> ready-01, 11 -> ill-41, 4 -> car, 6 -> promise-01, 9 -> some, 0 -> or, 10 -> you, 3 -> you),Map(e -> earring, h -> he, s -> some, p -> promise-01, y -> you, a -> and, i -> ill-41, r -> ready-01, c -> car, 6 -> 6, o -> or, y2 -> you))),[Ljava.lang.String;@235391e0,Annotation([Ljava.lang.String;@438e1b3e,[Ljava.lang.String;@269ea618,[Ljava.lang.String;@79aa8576),Annotation([Ljava.lang.String;@2a204461,[Ljava.lang.String;@2c6951e2,[Ledu.cmu.lti.nlp.amr.Dependency;@367ee335),Annotation([Ljava.lang.String;@4476c886,[Ljava.lang.String;@5266f887,[Ljava.lang.String;@66469154),Annotation([Ljava.lang.String;@22ef5641,[Ljava.lang.String;@f07d752,[Ledu.cmu.lti.nlp.amr.Entity;@4bc95033))
AMR:
(a / and, op, c / car)
(a / and, op, p / promise-01)
(c / car, poss, y / you)
(e / earring, name, y2 / you)
(e / earring, quant, s / some)
(o / or, op, r / ready-01)
(o / or, quant, 6 / 6)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, e / earring)
(r / ready-01, ARG1, p / promise-01)
(y2 / you, mod, i / ill-41)

Decoded in 56,805 microseconds
Sentence:   i wont laugh i promise

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   i wont laugh i promise
myTokenized = i wont laugh i promise
i = 0
prefix = List(i)
regexr = \Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: remembering the economic morass that followed the return to democracy in brazil peru and argentina mr aylwin promises to preserve pinochet policies he says resemble those of socialist spain

NER Entity: (country :name (name :op "brazil"))
NER Entity: (country :name (name :op "peru"))
NER Entity: (country :name (name :op "argentina"))
NER Entity: (country :name (name :op "spain"))
NER Entity: (country :name (name :op "argentina"))
Spans:
Span 13-14:  and => and
Span 14-15:  argentina => (country :name (name :op "Argentina"))
Span 9-10:  democracy => democracy
Span 2-3:  economic => economy
Span 5-6:  followed => follow-01
Span 22-23:  he => he
Span 21-22:  policies => policy
Span 19-20:  preserve => preserve-01
Span 17-18:  promises => promise-01
Span 0-1:  remembering => remember-01
Span 23-24:  says => say-01
Span 27-28:  socialist => socialist

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),socialist,socialist,false), Span(23,24,List(1),says,say-01,false), Span(22,23,List(2),he,he,false), Span(21,22,List(3),policies,policy,false), Span(19,20,List(4),preserve,preserve-01,false), Span(17,18,List(5),promises,promise-01,false), Span(14,15,List(8, 7, 6),argentina,(country :name (name :op "Argentina")),false), Span(13,14,List(9),and,and,false), Span(9,10,List(10),democracy,democracy,false), Span(5,6,List(11),followed,follow-01,false), Span(2,3,List(12),economic,economy,false), Span(0,1,List(13),remembering,remember-01,false)),Map(2 -> he, 5 -> promise-01, 12 -> economy, 8 -> "Argentina", 7 -> name, 1 -> say-01, 4 -> preserve-01, 11 -> follow-01, 6 -> country, 0 -> socialist, 9 -> and, 3 -> policy, 10 -> democracy, 13 -> remember-01),Map(e -> economy, n -> name, h -> he, s2 -> say-01, p2 -> preserve-01, s -> socialist, d -> democracy, p -> policy, a -> and, r -> remember-01, c -> country, f -> follow-01, p3 -> promise-01))),[Ljava.lang.String;@394a0f81,Annotation([Ljava.lang.String;@2d3ffb89,[Ljava.lang.String;@439af694,[Ljava.lang.String;@72b29138),Annotation([Ljava.lang.String;@295c2e5c,[Ljava.lang.String;@62e7af3a,[Ledu.cmu.lti.nlp.amr.Dependency;@58a13b90),Annotation([Ljava.lang.String;@414d9865,[Ljava.lang.String;@4d503061,[Ljava.lang.String;@4b9857ee),Annotation([Ljava.lang.String;@7eb4f107,[Ljava.lang.String;@193c438e,[Ledu.cmu.lti.nlp.amr.Entity;@43772c93))
AMR:
(a / and, op, c / country)
(a / and, op, p3 / promise-01)
(a / and, op, r / remember-01)
(c / country, name, n / name)
(f / follow-01, ARG0, s / socialist)
(f / follow-01, ARG1, a / and)
(f / follow-01, ARG2, d / democracy)
(n / name, op, "Argentina")
(p2 / preserve-01, ARG0, e / economy)
(p3 / promise-01, ARG1, p / policy)
(p3 / promise-01, ARG2, p2 / preserve-01)
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, p / policy)

Decoded in 173,778 microseconds
Sentence: the green bill promised by the government for the autumn is not expected to include measures to ban undesirable products or make them more expensive

Spans:
Span 17-18:  ban => ban-01
Span 2-3:  bill => bill
Span 12-13:  expected => expect-01
Span 24-25:  expensive => expensive
Span 1-2:  green => green
Span 14-15:  include => include-01
Span 15-16:  measures => measure
Span 20-21:  or => or
Span 19-20:  products => product
Span 3-4:  promised => promise-01
Span 18-19:  undesirable => (desire-01 :polarity -)

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),expensive,expensive,false), Span(20,21,List(1),or,or,false), Span(19,20,List(2),products,product,false), Span(18,19,List(4, 3),undesirable,(desire-01 :polarity -),false), Span(17,18,List(5),ban,ban-01,false), Span(15,16,List(6),measures,measure,false), Span(14,15,List(7),include,include-01,false), Span(12,13,List(8),expected,expect-01,false), Span(3,4,List(9),promised,promise-01,false), Span(2,3,List(10),bill,bill,false), Span(1,2,List(11),green,green,false)),Map(2 -> product, 5 -> ban-01, 8 -> expect-01, 7 -> include-01, 1 -> or, 11 -> green, 4 -> -, 6 -> measure, 9 -> promise-01, 0 -> expensive, 10 -> bill, 3 -> desire-01),Map(e -> expensive, b -> ban-01, b2 -> bill, p2 -> promise-01, e2 -> expect-01, m -> measure, d -> desire-01, g -> green, p -> product, i -> include-01, o -> or))),[Ljava.lang.String;@450f897f,Annotation([Ljava.lang.String;@7f0c1444,[Ljava.lang.String;@7206bd85,[Ljava.lang.String;@1884a13f),Annotation([Ljava.lang.String;@2b763bac,[Ljava.lang.String;@5f47af7e,[Ledu.cmu.lti.nlp.amr.Dependency;@5b52aa10),Annotation([Ljava.lang.String;@101b2f47,[Ljava.lang.String;@68bce693,[Ljava.lang.String;@49c5f29d),Annotation([Ljava.lang.String;@62bb4741,[Ljava.lang.String;@75432f0a,[Ledu.cmu.lti.nlp.amr.Entity;@dc575ab))
AMR:
(b / ban-01, ARG1, p / product)
(b / ban-01, instrument, m / measure)
(b2 / bill, mod, g / green)
(d / desire-01, ARG1, p / product)
(d / desire-01, polarity, -)
(e2 / expect-01, ARG1, i / include-01)
(i / include-01, ARG0, b2 / bill)
(i / include-01, ARG1, m / measure)
(o / or, op, b / ban-01)
(p2 / promise-01, ARG0, b2 / bill)
(p2 / promise-01, ARG1, e / expensive)

Decoded in 90,569 microseconds
Sentence: i made father promise that he would never extend credit again

Spans:
Span 10-11:  again => again
Span 9-10:  credit => credit-02
Span 8-9:  extend => extend-01
Span 2-3:  father => (have-rel-role-91 :ARG2 father)
Span 5-6:  he => he
Span 0-1:  i => i
Span 3-4:  promise => promise-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),again,again,false), Span(9,10,List(1),credit,credit-02,false), Span(8,9,List(2),extend,extend-01,false), Span(5,6,List(3),he,he,false), Span(3,4,List(4),promise,promise-01,false), Span(2,3,List(6, 5),father,(have-rel-role-91 :ARG2 father),false), Span(0,1,List(7),i,i,false)),Map(2 -> extend-01, 5 -> have-rel-role-91, 7 -> i, 1 -> credit-02, 4 -> promise-01, 6 -> father, 0 -> again, 3 -> he),Map(e -> extend-01, h -> he, h2 -> have-rel-role-91, p -> promise-01, a -> again, i -> i, c -> credit-02, f -> father))),[Ljava.lang.String;@1eb0349d,Annotation([Ljava.lang.String;@424e3f28,[Ljava.lang.String;@1f147d1a,[Ljava.lang.String;@7a2145e6),Annotation([Ljava.lang.String;@1e743dae,[Ljava.lang.String;@617d7a20,[Ledu.cmu.lti.nlp.amr.Dependency;@74dcfce0),Annotation([Ljava.lang.String;@585e1210,[Ljava.lang.String;@7f405c3,[Ljava.lang.String;@25a64949),Annotation([Ljava.lang.String;@48156aee,[Ljava.lang.String;@761f543a,[Ledu.cmu.lti.nlp.amr.Entity;@2d2e86c))
AMR:
(c / credit-02, ARG1, h / he)
(e / extend-01, ARG0, h / he)
(e / extend-01, mod, a / again)
(h2 / have-rel-role-91, ARG1, i / i)
(h2 / have-rel-role-91, ARG2, f / father)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, e / extend-01)

Decoded in 35,237 microseconds
Sentence:   they promise they will not teach any particular reassuring system of belief nor is it a therapeutic or counselling centre

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   they promise they will not teach any particular reassuring system of belief nor is it a therapeutic or counselling centre
myTokenized = they promise they will not teach any particular reassuring system of belief nor is it a therapeutic or counselling centre
i = 0
prefix = List(they)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qy\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: just as we round the arc to start the performance contrary to all promises the whole width of the avenue is awash with water

Spans:
Span 12-13:  all => all
Span 10-11:  contrary => contrary-41
Span 0-1:  just => just
Span 9-10:  performance => perform-01
Span 13-14:  promises => promise-01
Span 3-4:  round => round
Span 7-8:  start => start-01
Span 23-24:  water => water
Span 2-3:  we => we
Span 15-16:  whole => whole

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),water,water,false), Span(15,16,List(1),whole,whole,false), Span(13,14,List(2),promises,promise-01,false), Span(12,13,List(3),all,all,false), Span(10,11,List(4),contrary,contrary-41,false), Span(9,10,List(5),performance,perform-01,false), Span(7,8,List(6),start,start-01,false), Span(3,4,List(7),round,round,false), Span(2,3,List(8),we,we,false), Span(0,1,List(9),just,just,false)),Map(2 -> promise-01, 5 -> perform-01, 8 -> we, 7 -> round, 1 -> whole, 4 -> contrary-41, 6 -> start-01, 9 -> just, 0 -> water, 3 -> all),Map(w -> water, p2 -> perform-01, j -> just, w3 -> we, s -> start-01, p -> promise-01, a -> all, r -> round, w2 -> whole, c -> contrary-41))),[Ljava.lang.String;@7bdc5ca2,Annotation([Ljava.lang.String;@4045cf35,[Ljava.lang.String;@2726c18a,[Ljava.lang.String;@616c5f1a),Annotation([Ljava.lang.String;@11d7d5ee,[Ljava.lang.String;@711e0568,[Ledu.cmu.lti.nlp.amr.Dependency;@69f528dc),Annotation([Ljava.lang.String;@5e4db9dc,[Ljava.lang.String;@40e54ae2,[Ljava.lang.String;@d975cb7),Annotation([Ljava.lang.String;@4c47f959,[Ljava.lang.String;@943692f,[Ledu.cmu.lti.nlp.amr.Entity;@28ae9169))
AMR:
(c / contrary-41, ARG0, j / just)
(c / contrary-41, ARG1, p2 / perform-01)
(c / contrary-41, ARG2, p / promise-01)
(p / promise-01, quant, a / all)
(p2 / perform-01, ARG1, w2 / whole)
(r / round, ARG0, w3 / we)
(s / start-01, ARG0, w3 / we)
(s / start-01, ARG1, p2 / perform-01)
(w / water, op, p / promise-01)

Decoded in 108,700 microseconds
Sentence: mr foster is promising to respond with a lecture to the weekly meeting of the plp today warning mps to exercise a special selfcontrol in the next two weeks in the face of provocative government tactics

Spans:
Span 20-21:  exercise => exercise-02
Span 31-32:  face => face-01
Span 1-2:  foster => foster
Span 8-9:  lecture => lecture-01
Span 12-13:  meeting => meet-03
Span 26-27:  next => next
Span 3-4:  promising => promise-01
Span 33-34:  provocative => provoke-01
Span 5-6:  respond => respond-01
Span 22-23:  special => special
Span 35-36:  tactics => tactic
Span 16-17:  today => today
Span 27-28:  two => 2
Span 17-18:  warning => warn-01
Span 11-12:  weekly => (temporal-quantity :unit week)
Span 28-29:  weeks => (temporal-quantity :unit week)

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),tactics,tactic,false), Span(33,34,List(1),provocative,provoke-01,false), Span(31,32,List(2),face,face-01,false), Span(28,29,List(4, 3),weeks,(temporal-quantity :unit week),false), Span(27,28,List(5),two,2,false), Span(26,27,List(6),next,next,false), Span(22,23,List(7),special,special,false), Span(20,21,List(8),exercise,exercise-02,false), Span(17,18,List(9),warning,warn-01,false), Span(16,17,List(10),today,today,false), Span(12,13,List(11),meeting,meet-03,false), Span(11,12,List(13, 12),weekly,(temporal-quantity :unit week),false), Span(8,9,List(14),lecture,lecture-01,false), Span(5,6,List(15),respond,respond-01,false), Span(3,4,List(16),promising,promise-01,false), Span(1,2,List(17),foster,foster,false)),Map(2 -> face-01, 5 -> 2, 12 -> temporal-quantity, 15 -> respond-01, 8 -> exercise-02, 7 -> special, 17 -> foster, 1 -> provoke-01, 4 -> week, 11 -> meet-03, 14 -> lecture-01, 6 -> next, 0 -> tactic, 9 -> warn-01, 16 -> promise-01, 3 -> temporal-quantity, 10 -> today, 13 -> week),Map(e -> exercise-02, w -> week, n -> next, t4 -> temporal-quantity, 2 -> 2, t -> tactic, p2 -> promise-01, w3 -> week, s -> special, m -> meet-03, t3 -> today, p -> provoke-01, t2 -> temporal-quantity, w2 -> warn-01, r -> respond-01, f2 -> foster, l -> lecture-01, f -> face-01))),[Ljava.lang.String;@7c68969c,Annotation([Ljava.lang.String;@36781b93,[Ljava.lang.String;@75a6bd5,[Ljava.lang.String;@415d70b8),Annotation([Ljava.lang.String;@5d93618e,[Ljava.lang.String;@76e9e1a0,[Ledu.cmu.lti.nlp.amr.Dependency;@74dc0c5d),Annotation([Ljava.lang.String;@1aafe99b,[Ljava.lang.String;@1311cccd,[Ljava.lang.String;@759cb082),Annotation([Ljava.lang.String;@2086321,[Ljava.lang.String;@74a40c91,[Ledu.cmu.lti.nlp.amr.Entity;@3e353f6a))
AMR:
(e / exercise-02, ARG0, t3 / today)
(e / exercise-02, ARG1, t2 / temporal-quantity)
(e / exercise-02, time, f / face-01)
(f / face-01, ARG1, t / tactic)
(m / meet-03, ARG1, t3 / today)
(m / meet-03, duration, t4 / temporal-quantity)
(p / provoke-01, ARG1, t / tactic)
(p2 / promise-01, ARG0, s / special)
(p2 / promise-01, ARG1, f2 / foster)
(p2 / promise-01, ARG2, r / respond-01)
(r / respond-01, ARG0, n / next)
(r / respond-01, ARG1, m / meet-03)
(r / respond-01, time, l / lecture-01)
(t2 / temporal-quantity, quant, 2 / 2)
(t2 / temporal-quantity, unit, w / week)
(t4 / temporal-quantity, unit, w3 / week)
(w2 / warn-01, ARG1, e / exercise-02)

Decoded in 389,947 microseconds
Sentence: the main purpose of what promises to be a major international gathering in the former home of the muchloved marque is to celebrate the opening of the clubs new office headquarters and archive centre in cemetery road close to where the former factory once stood

Spans:
Span 31-32:  and => and
Span 22-23:  celebrate => celebrate-02
Span 35-36:  cemetery => cemetery
Span 27-28:  clubs => club
Span 42-43:  factory => factory
Span 41-42:  former => former
Span 14-15:  former => former
Span 11-12:  gathering => gather-01
Span 30-31:  headquarters => headquarters
Span 15-16:  home => home
Span 10-11:  international => international
Span 1-2:  main => main
Span 9-10:  major => major
Span 28-29:  new => new
Span 29-30:  office => office
Span 43-44:  once => once
Span 24-25:  opening => open-01
Span 5-6:  promises => promise-01
Span 2-3:  purpose => purpose
Span 36-37:  road => road
Span 44-45:  stood => stand-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),stood,stand-01,false), Span(43,44,List(1),once,once,false), Span(42,43,List(2),factory,factory,false), Span(41,42,List(3),former,former,false), Span(36,37,List(4),road,road,false), Span(35,36,List(5),cemetery,cemetery,false), Span(31,32,List(6),and,and,false), Span(30,31,List(7),headquarters,headquarters,false), Span(29,30,List(8),office,office,false), Span(28,29,List(9),new,new,false), Span(27,28,List(10),clubs,club,false), Span(24,25,List(11),opening,open-01,false), Span(22,23,List(12),celebrate,celebrate-02,false), Span(15,16,List(13),home,home,false), Span(14,15,List(14),former,former,false), Span(11,12,List(15),gathering,gather-01,false), Span(10,11,List(16),international,international,false), Span(9,10,List(17),major,major,false), Span(5,6,List(18),promises,promise-01,false), Span(2,3,List(19),purpose,purpose,false), Span(1,2,List(20),main,main,false)),Map(2 -> factory, 5 -> cemetery, 12 -> celebrate-02, 15 -> gather-01, 8 -> office, 18 -> promise-01, 7 -> headquarters, 17 -> major, 1 -> once, 4 -> road, 11 -> open-01, 14 -> former, 20 -> main, 6 -> and, 0 -> stand-01, 9 -> new, 16 -> international, 19 -> purpose, 3 -> former, 10 -> club, 13 -> home),Map(n -> new, h -> headquarters, h2 -> home, m2 -> main, o3 -> open-01, p2 -> purpose, s -> stand-01, m -> major, p -> promise-01, g -> gather-01, a -> and, c3 -> celebrate-02, o2 -> office, f3 -> former, i -> international, r -> road, c -> cemetery, f2 -> former, f -> factory, o -> once, c2 -> club))),[Ljava.lang.String;@19d6680e,Annotation([Ljava.lang.String;@4b497c62,[Ljava.lang.String;@45852c8b,[Ljava.lang.String;@2a2f7d55),Annotation([Ljava.lang.String;@13cd6d16,[Ljava.lang.String;@13b4c982,[Ledu.cmu.lti.nlp.amr.Dependency;@42197fe9),Annotation([Ljava.lang.String;@181cbbe6,[Ljava.lang.String;@6740568,[Ljava.lang.String;@2b0ef227),Annotation([Ljava.lang.String;@623bf486,[Ljava.lang.String;@4e32bbcc,[Ledu.cmu.lti.nlp.amr.Entity;@64c7762f))
AMR:
(a / and, op, g / gather-01)
(a / and, op, h / headquarters)
(c3 / celebrate-02, ARG0, o / once)
(c3 / celebrate-02, ARG1, o3 / open-01)
(f / factory, time, f2 / former)
(g / gather-01, ARG1, h2 / home)
(g / gather-01, mod, i / international)
(g / gather-01, mod, m / major)
(h / headquarters, mod, c2 / club)
(h / headquarters, mod, n / new)
(h / headquarters, mod, o2 / office)
(h / headquarters, poss, r / road)
(h2 / home, time, f3 / former)
(o3 / open-01, ARG0, p2 / purpose)
(o3 / open-01, ARG1, a / and)
(p / promise-01, ARG0, m2 / main)
(p / promise-01, ARG1, g / gather-01)
(r / road, mod, c / cemetery)
(s / stand-01, ARG1, f / factory)
(s / stand-01, time, o / once)

Decoded in 551,523 microseconds
Sentence: freedom to travel already promised has given way in the list of priorities to free elections the legalisation of new forum the opposition group and the disbanding of the secret police

Spans:
Span 3-4:  already => already
Span 24-25:  and => and
Span 15-16:  elections => elect-01
Span 20-21:  forum => forum
Span 14-15:  free => free-41
Span 0-1:  freedom => free-41
Span 6-7:  given => give-01
Span 23-24:  group => group
Span 17-18:  legalisation => legalize-01
Span 10-11:  list => list-01
Span 19-20:  new => new
Span 22-23:  opposition => oppose-01
Span 30-31:  police => police
Span 12-13:  priorities => priority
Span 4-5:  promised => promise-01
Span 29-30:  secret => secret
Span 2-3:  travel => travel-01
Span 7-8:  way => way

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),police,police,false), Span(29,30,List(1),secret,secret,false), Span(24,25,List(2),and,and,false), Span(23,24,List(3),group,group,false), Span(22,23,List(4),opposition,oppose-01,false), Span(20,21,List(5),forum,forum,false), Span(19,20,List(6),new,new,false), Span(17,18,List(7),legalisation,legalize-01,false), Span(15,16,List(8),elections,elect-01,false), Span(14,15,List(9),free,free-41,false), Span(12,13,List(10),priorities,priority,false), Span(10,11,List(11),list,list-01,false), Span(7,8,List(12),way,way,false), Span(6,7,List(13),given,give-01,false), Span(4,5,List(14),promised,promise-01,false), Span(3,4,List(15),already,already,false), Span(2,3,List(16),travel,travel-01,false), Span(0,1,List(17),freedom,free-41,false)),Map(2 -> and, 5 -> forum, 12 -> way, 15 -> already, 8 -> elect-01, 7 -> legalize-01, 17 -> free-41, 1 -> secret, 4 -> oppose-01, 11 -> list-01, 14 -> promise-01, 6 -> new, 0 -> police, 9 -> free-41, 16 -> travel-01, 3 -> group, 10 -> priority, 13 -> give-01),Map(e -> elect-01, n -> new, w -> way, t -> travel-01, p2 -> priority, s -> secret, g2 -> give-01, p -> police, g -> group, a -> and, f3 -> free-41, l2 -> list-01, a2 -> already, l -> legalize-01, f2 -> free-41, f -> forum, o -> oppose-01, p3 -> promise-01))),[Ljava.lang.String;@591882e6,Annotation([Ljava.lang.String;@5839f7bc,[Ljava.lang.String;@45b784e4,[Ljava.lang.String;@1375b87e),Annotation([Ljava.lang.String;@15a3622d,[Ljava.lang.String;@19828374,[Ledu.cmu.lti.nlp.amr.Dependency;@478441c1),Annotation([Ljava.lang.String;@3bf90a95,[Ljava.lang.String;@5b25daf5,[Ljava.lang.String;@124a3993),Annotation([Ljava.lang.String;@4709eb46,[Ljava.lang.String;@5c356519,[Ledu.cmu.lti.nlp.amr.Entity;@35807b9a))
AMR:
(a / and, op, g / group)
(e / elect-01, ARG1, w / way)
(f / forum, mod, n / new)
(f2 / free-41, ARG1, e / elect-01)
(f3 / free-41, ARG1, t / travel-01)
(g2 / give-01, ARG0, a / and)
(g2 / give-01, ARG1, l / legalize-01)
(g2 / give-01, ARG2, w / way)
(l / legalize-01, ARG1, f / forum)
(l2 / list-01, ARG1, e / elect-01)
(l2 / list-01, ARG2, p2 / priority)
(o / oppose-01, ARG0, g / group)
(p / police, mod, s / secret)
(p3 / promise-01, ARG1, f3 / free-41)
(p3 / promise-01, ARG2, g2 / give-01)
(t / travel-01, time, a2 / already)
(w / way, mod, p / police)

Decoded in 389,240 microseconds
Sentence: he sought to remove these fears by promises of british support which he was confident would never be called on

NER Entity: (thing :name (name :op "british"))
Spans:
Span 14-15:  confident => confident-41
Span 5-6:  fears => fear-01
Span 12-13:  he => he
Span 0-1:  he => he
Span 7-8:  promises => promise-01
Span 3-4:  remove => remove-01
Span 1-2:  sought => seek-01
Span 10-11:  support => support-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),confident,confident-41,false), Span(12,13,List(1),he,he,false), Span(10,11,List(2),support,support-01,false), Span(7,8,List(3),promises,promise-01,false), Span(5,6,List(4),fears,fear-01,false), Span(3,4,List(5),remove,remove-01,false), Span(1,2,List(6),sought,seek-01,false), Span(0,1,List(7),he,he,false)),Map(2 -> support-01, 5 -> remove-01, 7 -> he, 1 -> he, 4 -> fear-01, 6 -> seek-01, 0 -> confident-41, 3 -> promise-01),Map(h -> he, h2 -> he, s2 -> seek-01, s -> support-01, p -> promise-01, r -> remove-01, c -> confident-41, f -> fear-01))),[Ljava.lang.String;@632d6e7,Annotation([Ljava.lang.String;@73badade,[Ljava.lang.String;@7077602d,[Ljava.lang.String;@2d4b640a),Annotation([Ljava.lang.String;@3094e3c1,[Ljava.lang.String;@7ef4acd1,[Ledu.cmu.lti.nlp.amr.Dependency;@717e0e74),Annotation([Ljava.lang.String;@ae71be2,[Ljava.lang.String;@4ad79805,[Ljava.lang.String;@103d96a6),Annotation([Ljava.lang.String;@3b6d749e,[Ljava.lang.String;@f034f8d,[Ledu.cmu.lti.nlp.amr.Entity;@225bb9ae))
AMR:
(c / confident-41, ARG1, h / he)
(c / confident-41, ARG2, s / support-01)
(p / promise-01, ARG1, s / support-01)
(r / remove-01, ARG0, h2 / he)
(r / remove-01, ARG1, f / fear-01)
(r / remove-01, ARG2, p / promise-01)
(s2 / seek-01, ARG0, h2 / he)

Decoded in 141,674 microseconds
Sentence: sir eric sharp chairman of cable and wireless is thought to be keen to stand down though his job may already have been promised to lord young who was ousted from the cabinet in the last reshuffle

Spans:
Span 20-21:  already => already
Span 6-7:  and => and
Span 32-33:  cabinet => cabinet
Span 5-6:  cable => cable
Span 3-4:  chairman => (have-org-role-91 :ARG2 chairman)
Span 15-16:  down => down
Span 18-19:  job => job
Span 12-13:  keen => keen-41
Span 35-36:  last => last
Span 25-26:  lord => lord
Span 19-20:  may => (date-entity :month 5)
Span 29-30:  ousted => oust-01
Span 23-24:  promised => promise-01
Span 2-3:  sharp => sharp
Span 9-10:  thought => think-01
Span 7-8:  wireless => wireless
Span 26-27:  young => young

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),last,last,false), Span(32,33,List(1),cabinet,cabinet,false), Span(29,30,List(2),ousted,oust-01,false), Span(26,27,List(3),young,young,false), Span(25,26,List(4),lord,lord,false), Span(23,24,List(5),promised,promise-01,false), Span(20,21,List(6),already,already,false), Span(19,20,List(8, 7),may,(date-entity :month 5),false), Span(18,19,List(9),job,job,false), Span(15,16,List(10),down,down,false), Span(12,13,List(11),keen,keen-41,false), Span(9,10,List(12),thought,think-01,false), Span(7,8,List(13),wireless,wireless,false), Span(6,7,List(14),and,and,false), Span(5,6,List(15),cable,cable,false), Span(3,4,List(17, 16),chairman,(have-org-role-91 :ARG2 chairman),false), Span(2,3,List(18),sharp,sharp,false)),Map(2 -> oust-01, 5 -> promise-01, 12 -> think-01, 15 -> cable, 8 -> 5, 18 -> sharp, 7 -> date-entity, 17 -> chairman, 1 -> cabinet, 4 -> lord, 11 -> keen-41, 14 -> and, 6 -> already, 0 -> last, 9 -> job, 16 -> have-org-role-91, 3 -> young, 10 -> down, 13 -> wireless),Map(w -> wireless, h -> have-org-role-91, 5 -> 5, k -> keen-41, t -> think-01, j -> job, s -> sharp, d -> date-entity, y -> young, p -> promise-01, c3 -> chairman, a -> already, d2 -> down, l2 -> lord, a2 -> and, c -> cabinet, l -> last, o -> oust-01, c2 -> cable))),[Ljava.lang.String;@33fb6021,Annotation([Ljava.lang.String;@3c643130,[Ljava.lang.String;@55d96549,[Ljava.lang.String;@3388c7a7),Annotation([Ljava.lang.String;@58ebbf5f,[Ljava.lang.String;@5d612394,[Ledu.cmu.lti.nlp.amr.Dependency;@1466f971),Annotation([Ljava.lang.String;@7482742d,[Ljava.lang.String;@2099721d,[Ljava.lang.String;@3a12dea3),Annotation([Ljava.lang.String;@2cd6bd1e,[Ljava.lang.String;@461a1391,[Ledu.cmu.lti.nlp.amr.Entity;@59fab88b))
AMR:
(a2 / and, op, c2 / cable)
(a2 / and, op, t / think-01)
(a2 / and, op, w / wireless)
(d / date-entity, domain, p / promise-01)
(d / date-entity, month, 5 / 5)
(h / have-org-role-91, ARG1, s / sharp)
(h / have-org-role-91, ARG2, c3 / chairman)
(k / keen-41, ARG0, d2 / down)
(k / keen-41, ARG1, h / have-org-role-91)
(k / keen-41, time, p / promise-01)
(l2 / lord, location, y / young)
(o / oust-01, ARG0, l2 / lord)
(o / oust-01, ARG1, c / cabinet)
(p / promise-01, ARG0, l / last)
(p / promise-01, ARG1, j / job)
(p / promise-01, ARG2, l2 / lord)
(p / promise-01, time, a / already)
(t / think-01, ARG1, k / keen-41)

Decoded in 379,958 microseconds
Sentence: now an australian inventor richard sarich has come up with a new design of engine that promises both lower fuel consumption and less environmental pollution

NER Entity: (thing :name (name :op "australian"))
Spans:
Span 21-22:  and => and
Span 17-18:  both => both
Span 20-21:  consumption => consume-01
Span 12-13:  design => design-01
Span 14-15:  engine => engine
Span 23-24:  environmental => environment
Span 19-20:  fuel => fuel
Span 22-23:  less => less
Span 18-19:  lower => low
Span 11-12:  new => new
Span 0-1:  now => now
Span 24-25:  pollution => pollute-01
Span 16-17:  promises => promise-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),pollution,pollute-01,false), Span(23,24,List(1),environmental,environment,false), Span(22,23,List(2),less,less,false), Span(21,22,List(3),and,and,false), Span(20,21,List(4),consumption,consume-01,false), Span(19,20,List(5),fuel,fuel,false), Span(18,19,List(6),lower,low,false), Span(17,18,List(7),both,both,false), Span(16,17,List(8),promises,promise-01,false), Span(14,15,List(9),engine,engine,false), Span(12,13,List(10),design,design-01,false), Span(11,12,List(11),new,new,false), Span(0,1,List(12),now,now,false)),Map(2 -> less, 5 -> fuel, 12 -> now, 8 -> promise-01, 7 -> both, 1 -> environment, 4 -> consume-01, 11 -> new, 6 -> low, 0 -> pollute-01, 9 -> engine, 3 -> and, 10 -> design-01),Map(e -> environment, n -> new, b -> both, p2 -> promise-01, e2 -> engine, d -> design-01, p -> pollute-01, a -> and, l2 -> low, c -> consume-01, l -> less, f -> fuel, n2 -> now))),[Ljava.lang.String;@2df2888,Annotation([Ljava.lang.String;@8ddfa31,[Ljava.lang.String;@2554ab83,[Ljava.lang.String;@59c8389a),Annotation([Ljava.lang.String;@67fc3482,[Ljava.lang.String;@5edb7823,[Ledu.cmu.lti.nlp.amr.Dependency;@1aac727c),Annotation([Ljava.lang.String;@2f903892,[Ljava.lang.String;@257211a3,[Ljava.lang.String;@63e3f789),Annotation([Ljava.lang.String;@b90769b,[Ljava.lang.String;@395ac00b,[Ledu.cmu.lti.nlp.amr.Entity;@74f62f97))
AMR:
(c / consume-01, ARG1, f / fuel)
(c / consume-01, mod, b / both)
(c / consume-01, mod, l2 / low)
(d / design-01, ARG0, n2 / now)
(d / design-01, ARG1, e2 / engine)
(d / design-01, mod, n / new)
(e / environment, extent, l / less)
(p / pollute-01, ARG0, a / and)
(p / pollute-01, ARG1, e / environment)
(p2 / promise-01, ARG0, d / design-01)
(p2 / promise-01, ARG1, c / consume-01)
(p2 / promise-01, ARG2, a / and)

Decoded in 316,252 microseconds
Sentence: what is her relationship to david mamet  the queens film theatre university square mews belfast is promising a christmas rescue service for all harrassed parents

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = what is her relationship to david mamet  the queens film theatre university square mews belfast is promising a christmas rescue service for all harrassed parents
myTokenized = what is her relationship to david mamet the queens film theatre university square mews belfast is promising a christmas rescue service for all harrassed parents
i = 7
prefix = List(what, is, her, relationship, to, david, mamet, the)
regexr = \Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qr\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qs\E ?\Qh\E ?\Qi\E ?\Qp\E ?\Qt\E ?\Qo\E ?\Qd\E ?\Qa\E ?\Qv\E ?\Qi\E ?\Qd\E ?\Qm\E ?\Qa\E ?\Qm\E ?\Qe\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: i promised my wife id stay until the final curtain ellip

Spans:
Span 9-10:  curtain => curtain
Span 8-9:  final => final
Span 0-1:  i => i
Span 4-5:  id => id
Span 1-2:  promised => promise-01
Span 5-6:  stay => stay-01
Span 6-7:  until => until
Span 3-4:  wife => (have-rel-role-91 :ARG2 wife)

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),curtain,curtain,false), Span(8,9,List(1),final,final,false), Span(6,7,List(2),until,until,false), Span(5,6,List(3),stay,stay-01,false), Span(4,5,List(4),id,id,false), Span(3,4,List(6, 5),wife,(have-rel-role-91 :ARG2 wife),false), Span(1,2,List(7),promised,promise-01,false), Span(0,1,List(8),i,i,false)),Map(2 -> until, 5 -> have-rel-role-91, 8 -> i, 7 -> promise-01, 1 -> final, 4 -> id, 6 -> wife, 0 -> curtain, 3 -> stay-01),Map(w -> wife, h -> have-rel-role-91, s -> stay-01, p -> promise-01, i2 -> i, i -> id, u -> until, c -> curtain, f -> final))),[Ljava.lang.String;@2a278a8d,Annotation([Ljava.lang.String;@9f9449a,[Ljava.lang.String;@4c06df93,[Ljava.lang.String;@574052e3),Annotation([Ljava.lang.String;@4001e1d5,[Ljava.lang.String;@3b9187c7,[Ledu.cmu.lti.nlp.amr.Dependency;@4f69385e),Annotation([Ljava.lang.String;@4f3cc0d,[Ljava.lang.String;@21d96c05,[Ljava.lang.String;@4942cd9f),Annotation([Ljava.lang.String;@40c9a74c,[Ljava.lang.String;@77068fce,[Ledu.cmu.lti.nlp.amr.Entity;@4fcb5a6e))
AMR:
(c / curtain, mod, f / final)
(h / have-rel-role-91, ARG1, i2 / i)
(h / have-rel-role-91, ARG2, w / wife)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, i / id)
(p / promise-01, ARG2, s / stay-01)
(p / promise-01, time, u / until)
(s / stay-01, ARG1, c / curtain)

Decoded in 174,633 microseconds
Sentence: promises quite often concern the actions of others to consent to be governed by another is to promise to obey him to consent to his joining the expedition is to promise to provide him with the facilities and the help made available to members of the expedition, finally these examples in which to consent is to promise refute the suggestion that in one case the purpose is to confer rights and in the other to undertake an obligation

Spans:
Span 5-6:  actions => action
Span 71-72:  and => and
Span 37-38:  and => and
Span 14-15:  another => another
Span 41-42:  available => available
Span 64-65:  case => case
Span 3-4:  concern => concern-01
Span 69-70:  confer => confer-01
Span 54-55:  consent => consent-01
Span 22-23:  consent => consent-01
Span 9-10:  consent => consent-01
Span 50-51:  examples => example
Span 36-37:  facilities => facility
Span 48-49:  finally => final
Span 12-13:  governed => govern-01
Span 39-40:  help => help-01
Span 25-26:  joining => join-01
Span 43-44:  members => (have-org-role-91 :ARG2 member)
Span 78-79:  obligation => obligate-01
Span 2-3:  often => often
Span 74-75:  other => other
Span 7-8:  others => other
Span 57-58:  promise => promise-01
Span 30-31:  promise => promise-01
Span 17-18:  promise => promise-01
Span 0-1:  promises => promise-01
Span 32-33:  provide => provide-01
Span 66-67:  purpose => purpose
Span 1-2:  quite => quite
Span 70-71:  rights => right
Span 60-61:  suggestion => (thing :ARG1-of suggest-01)
Span 76-77:  undertake => undertake-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(78,79,List(0),obligation,obligate-01,false), Span(76,77,List(1),undertake,undertake-01,false), Span(74,75,List(2),other,other,false), Span(71,72,List(3),and,and,false), Span(70,71,List(4),rights,right,false), Span(69,70,List(5),confer,confer-01,false), Span(66,67,List(6),purpose,purpose,false), Span(64,65,List(7),case,case,false), Span(60,61,List(9, 8),suggestion,(thing :ARG1-of suggest-01),false), Span(57,58,List(10),promise,promise-01,false), Span(54,55,List(11),consent,consent-01,false), Span(50,51,List(12),examples,example,false), Span(48,49,List(13),finally,final,false), Span(43,44,List(15, 14),members,(have-org-role-91 :ARG2 member),false), Span(41,42,List(16),available,available,false), Span(39,40,List(17),help,help-01,false), Span(37,38,List(18),and,and,false), Span(36,37,List(19),facilities,facility,false), Span(32,33,List(20),provide,provide-01,false), Span(30,31,List(21),promise,promise-01,false), Span(25,26,List(22),joining,join-01,false), Span(22,23,List(23),consent,consent-01,false), Span(17,18,List(24),promise,promise-01,false), Span(14,15,List(25),another,another,false), Span(12,13,List(26),governed,govern-01,false), Span(9,10,List(27),consent,consent-01,false), Span(7,8,List(28),others,other,false), Span(5,6,List(29),actions,action,false), Span(3,4,List(30),concern,concern-01,false), Span(2,3,List(31),often,often,false), Span(1,2,List(32),quite,quite,false), Span(0,1,List(33),promises,promise-01,false)),Map(30 -> concern-01, 2 -> other, 5 -> confer-01, 33 -> promise-01, 27 -> consent-01, 12 -> example, 8 -> thing, 15 -> member, 21 -> promise-01, 18 -> and, 24 -> promise-01, 7 -> case, 1 -> undertake-01, 17 -> help-01, 23 -> consent-01, 26 -> govern-01, 4 -> right, 11 -> consent-01, 32 -> quite, 14 -> have-org-role-91, 29 -> action, 20 -> provide-01, 28 -> other, 6 -> purpose, 9 -> suggest-01, 0 -> obligate-01, 22 -> join-01, 16 -> available, 19 -> facility, 10 -> promise-01, 3 -> and, 31 -> often, 25 -> another, 13 -> final),Map(e -> example, h -> have-org-role-91, q -> quite, h2 -> help-01, p5 -> promise-01, t -> thing, o3 -> other, p2 -> promise-01, a3 -> and, j -> join-01, c4 -> consent-01, s -> suggest-01, m -> member, g -> govern-01, p -> purpose, c3 -> consent-01, a -> and, p4 -> promise-01, a5 -> action, o2 -> other, c6 -> concern-01, r -> right, a2 -> available, c -> confer-01, p6 -> promise-01, f2 -> facility, u -> undertake-01, f -> final, o -> obligate-01, o4 -> often, p3 -> provide-01, c2 -> case, a4 -> another, c5 -> consent-01))),[Ljava.lang.String;@1ff90029,Annotation([Ljava.lang.String;@14799425,[Ljava.lang.String;@39ed13a3,[Ljava.lang.String;@7ba4500a),Annotation([Ljava.lang.String;@6082fff0,[Ljava.lang.String;@38711710,[Ledu.cmu.lti.nlp.amr.Dependency;@8a13863),Annotation([Ljava.lang.String;@107cf002,[Ljava.lang.String;@7a711bc2,[Ljava.lang.String;@17d59c5b),Annotation([Ljava.lang.String;@490c2696,[Ljava.lang.String;@3cb96751,[Ledu.cmu.lti.nlp.amr.Entity;@302e15fc))
AMR:
(a / and, op, c / confer-01)
(a / and, op, p6 / promise-01)
(a / and, time, c2 / case)
(a2 / available, domain, h / have-org-role-91)
(a3 / and, op, h2 / help-01)
(a3 / and, op, p3 / provide-01)
(a3 / and, op, p5 / promise-01)
(a5 / action, purpose, c5 / consent-01)
(c / confer-01, ARG0, p / purpose)
(c / confer-01, ARG1, r / right)
(c3 / consent-01, ARG1, p3 / provide-01)
(c4 / consent-01, ARG1, j / join-01)
(c5 / consent-01, ARG1, g / govern-01)
(e / example, purpose, c3 / consent-01)
(g / govern-01, ARG1, o3 / other)
(g / govern-01, manner, a3 / and)
(h / have-org-role-91, ARG1, f / final)
(h / have-org-role-91, ARG2, m / member)
(h2 / help-01, ARG1, a2 / available)
(o / obligate-01, ARG1, p2 / promise-01)
(o2 / other, domain, u / undertake-01)
(p2 / promise-01, ARG0, e / example)
(p2 / promise-01, ARG1, t / thing)
(p3 / provide-01, ARG1, f2 / facility)
(p4 / promise-01, ARG2, p3 / provide-01)
(p5 / promise-01, ARG1, a4 / another)
(p5 / promise-01, purpose, c4 / consent-01)
(p6 / promise-01, ARG0, o4 / often)
(p6 / promise-01, ARG1, c6 / concern-01)
(p6 / promise-01, ARG2, c5 / consent-01)
(p6 / promise-01, ARG3, q / quite)
(s / suggest-01, ARG1, t / thing)
(u / undertake-01, ARG1, o / obligate-01)

Decoded in 1,345,335 microseconds
Sentence: sundays opening promises to be a colourful and chaotic event with the bank open 12 hours

Spans:
Span 14-15:  12 => 12
Span 7-8:  and => and
Span 12-13:  bank => bank
Span 9-10:  event => event
Span 15-16:  hours => (temporal-quantity :unit hour)
Span 1-2:  opening => open-01
Span 2-3:  promises => promise-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),hours,(temporal-quantity :unit hour),false), Span(14,15,List(2),12,12,false), Span(12,13,List(3),bank,bank,false), Span(9,10,List(4),event,event,false), Span(7,8,List(5),and,and,false), Span(2,3,List(6),promises,promise-01,false), Span(1,2,List(7),opening,open-01,false)),Map(2 -> 12, 5 -> and, 7 -> open-01, 1 -> hour, 4 -> event, 6 -> promise-01, 0 -> temporal-quantity, 3 -> bank),Map(e -> event, h -> hour, b -> bank, t -> temporal-quantity, p -> promise-01, 1 -> 12, a -> and, o -> open-01))),[Ljava.lang.String;@2961a60c,Annotation([Ljava.lang.String;@49dc730d,[Ljava.lang.String;@2805805d,[Ljava.lang.String;@12e6e32),Annotation([Ljava.lang.String;@f449539,[Ljava.lang.String;@5fa0d903,[Ledu.cmu.lti.nlp.amr.Dependency;@39078501),Annotation([Ljava.lang.String;@1cad21e7,[Ljava.lang.String;@2a8cd366,[Ljava.lang.String;@38ae35d),Annotation([Ljava.lang.String;@1354f07c,[Ljava.lang.String;@2d7866ce,[Ledu.cmu.lti.nlp.amr.Entity;@3ba575b4))
AMR:
(a / and, op, b / bank)
(o / open-01, ARG1, 1 / 12)
(p / promise-01, ARG0, o / open-01)
(p / promise-01, ARG1, a / and)
(p / promise-01, ARG2, e / event)
(t / temporal-quantity, quant, 1 / 12)
(t / temporal-quantity, unit, h / hour)

Decoded in 127,510 microseconds
Sentence: even south africa seemed to have buried the hatchet with swapo and president f w de klerk promised his cooperation in a spirit of goodneighbourliness, but there was less harmony in pretoria itself where the government has promised to investigate allegations that the security police ran a death squad to eliminate political opponents notably the anc

NER Entity: (country :name (name :op "south" :op "africa"))
NER Entity: (country :name (name :op "pretoria"))
Spans:
Span 41-42:  allegations => allege-01
Span 11-12:  and => and
Span 6-7:  buried => bury-01
Span 26-27:  but => contrast-01
Span 19-20:  cooperation => cooperate-01
Span 48-49:  death => die-01
Span 51-52:  eliminate => eliminate-01
Span 13-14:  f => f
Span 30-31:  harmony => harmony
Span 40-41:  investigate => investigate-01
Span 29-30:  less => less
Span 54-55:  notably => notable
Span 53-54:  opponents => (person :ARG0-of oppose-01)
Span 45-46:  police => police
Span 52-53:  political => politics
Span 12-13:  president => (have-org-role-91 :ARG2 president)
Span 38-39:  promised => promise-01
Span 17-18:  promised => promise-01
Span 44-45:  security => security
Span 3-4:  seemed => seem-01
Span 1-3:  south africa => (country :name (name :op "south" :op "africa"))
Span 22-23:  spirit => spirit
Span 49-50:  squad => squad

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),notably,notable,false), Span(53,54,List(2, 1),opponents,(person :ARG0-of oppose-01),false), Span(52,53,List(3),political,politics,false), Span(51,52,List(4),eliminate,eliminate-01,false), Span(49,50,List(5),squad,squad,false), Span(48,49,List(6),death,die-01,false), Span(45,46,List(7),police,police,false), Span(44,45,List(8),security,security,false), Span(41,42,List(9),allegations,allege-01,false), Span(40,41,List(10),investigate,investigate-01,false), Span(38,39,List(11),promised,promise-01,false), Span(30,31,List(12),harmony,harmony,false), Span(29,30,List(13),less,less,false), Span(26,27,List(14),but,contrast-01,false), Span(22,23,List(15),spirit,spirit,false), Span(19,20,List(16),cooperation,cooperate-01,false), Span(17,18,List(17),promised,promise-01,false), Span(13,14,List(18),f,f,false), Span(12,13,List(20, 19),president,(have-org-role-91 :ARG2 president),false), Span(11,12,List(21),and,and,false), Span(6,7,List(22),buried,bury-01,false), Span(3,4,List(23),seemed,seem-01,false), Span(1,3,List(27, 26, 25, 24),south africa,(country :name (name :op "south" :op "africa")),false)),Map(2 -> oppose-01, 5 -> squad, 27 -> "africa", 12 -> harmony, 8 -> security, 15 -> spirit, 21 -> and, 18 -> f, 24 -> country, 7 -> police, 1 -> person, 17 -> promise-01, 23 -> seem-01, 26 -> "south", 4 -> eliminate-01, 11 -> promise-01, 14 -> contrast-01, 20 -> president, 6 -> die-01, 9 -> allege-01, 0 -> notable, 22 -> bury-01, 16 -> cooperate-01, 19 -> have-org-role-91, 10 -> investigate-01, 3 -> politics, 25 -> name, 13 -> less),Map(e -> eliminate-01, n -> notable, h -> harmony, s2 -> security, p5 -> promise-01, h2 -> have-org-role-91, b -> bury-01, p2 -> politics, s -> squad, s4 -> seem-01, d -> die-01, p -> person, a -> allege-01, c3 -> country, p4 -> promise-01, i -> investigate-01, a2 -> and, c -> contrast-01, s3 -> spirit, p6 -> president, l -> less, f -> f, o -> oppose-01, p3 -> police, n2 -> name, c2 -> cooperate-01))),[Ljava.lang.String;@4fbf1942,Annotation([Ljava.lang.String;@b1364f5,[Ljava.lang.String;@26491681,[Ljava.lang.String;@86482ca),Annotation([Ljava.lang.String;@7ec6a013,[Ljava.lang.String;@2237806b,[Ledu.cmu.lti.nlp.amr.Dependency;@69d00259),Annotation([Ljava.lang.String;@574a5754,[Ljava.lang.String;@51ab7891,[Ljava.lang.String;@5078a17a),Annotation([Ljava.lang.String;@1fb179dc,[Ljava.lang.String;@3cb76ac5,[Ledu.cmu.lti.nlp.amr.Entity;@2dc2caa7))
AMR:
(a / allege-01, ARG1, e / eliminate-01)
(b / bury-01, ARG1, a2 / and)
(c / contrast-01, ARG1, p5 / promise-01)
(c / contrast-01, ARG2, p4 / promise-01)
(c2 / cooperate-01, ARG0, c3 / country)
(c2 / cooperate-01, ARG1, s3 / spirit)
(c3 / country, name, n2 / name)
(e / eliminate-01, ARG0, s / squad)
(e / eliminate-01, ARG1, p / person)
(e / eliminate-01, mod, n / notable)
(h / harmony, degree, l / less)
(h2 / have-org-role-91, ARG1, f / f)
(h2 / have-org-role-91, ARG2, p6 / president)
(i / investigate-01, ARG0, p3 / police)
(i / investigate-01, ARG1, a / allege-01)
(n2 / name, op, "africa")
(n2 / name, op, "south")
(o / oppose-01, ARG0, p / person)
(p / person, mod, p2 / politics)
(p3 / police, mod, s2 / security)
(p4 / promise-01, ARG1, h / harmony)
(p4 / promise-01, ARG2, i / investigate-01)
(p5 / promise-01, ARG0, f / f)
(p5 / promise-01, ARG1, c2 / cooperate-01)
(s / squad, mod, d / die-01)
(s4 / seem-01, ARG1, b / bury-01)
(s4 / seem-01, mod, c3 / country)

Decoded in 1,368,685 microseconds
Sentence: youll be completely private there gerrard had promised when he had offered it as a hideout

Spans:
Span 2-3:  completely => complete
Span 9-10:  he => he
Span 15-16:  hideout => hide-02
Span 12-13:  it => it
Span 11-12:  offered => offer-01
Span 3-4:  private => private
Span 7-8:  promised => promise-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),hideout,hide-02,false), Span(12,13,List(1),it,it,false), Span(11,12,List(2),offered,offer-01,false), Span(9,10,List(3),he,he,false), Span(7,8,List(4),promised,promise-01,false), Span(3,4,List(5),private,private,false), Span(2,3,List(6),completely,complete,false)),Map(2 -> offer-01, 5 -> private, 1 -> it, 4 -> promise-01, 6 -> complete, 0 -> hide-02, 3 -> he),Map(h -> hide-02, h2 -> he, p2 -> private, p -> promise-01, i -> it, c -> complete, o -> offer-01))),[Ljava.lang.String;@4f86b169,Annotation([Ljava.lang.String;@13e98d49,[Ljava.lang.String;@4a3abdd5,[Ljava.lang.String;@56851105),Annotation([Ljava.lang.String;@3a208ba3,[Ljava.lang.String;@2eaf9825,[Ledu.cmu.lti.nlp.amr.Dependency;@a2dbd15),Annotation([Ljava.lang.String;@40d8b2eb,[Ljava.lang.String;@52ca838f,[Ljava.lang.String;@6d834bbf),Annotation([Ljava.lang.String;@46e220c4,[Ljava.lang.String;@27d54837,[Ledu.cmu.lti.nlp.amr.Entity;@2378274f))
AMR:
(h / hide-02, ARG1, o / offer-01)
(o / offer-01, ARG0, h2 / he)
(o / offer-01, ARG1, i / it)
(p / promise-01, ARG0, p2 / private)
(p / promise-01, ARG1, i / it)
(p2 / private, manner, c / complete)

Decoded in 56,673 microseconds
Sentence: ill come back ellip  i promise ellip

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = ill come back ellip  i promise ellip
myTokenized = ill come back ellip i promise ellip
i = 4
prefix = List(ill, come, back, ellip, i)
regexr = \Qi\E ?\Ql\E ?\Ql\E ?\Qc\E ?\Qo\E ?\Qm\E ?\Qe\E ?\Qb\E ?\Qa\E ?\Qc\E ?\Qk\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qp\E ?\Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   dorothea could not bring herself to enquire further but was happy that the matter was in his hands and she only promised to visit kathleen lavender that day twelve miles away in the hospital of the cross

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   dorothea could not bring herself to enquire further but was happy that the matter was in his hands and she only promised to visit kathleen lavender that day twelve miles away in the hospital of the cross
myTokenized = dorothea could not bring herself to enquire further but was happy that the matter was in his hands and she only promised to visit kathleen lavender that day twelve miles away in the hospital of the cross
i = 0
prefix = List(dorothea)
regexr = \Qd\E ?\Qo\E ?\Qr\E ?\Qo\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qa\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: mr singh who has promised to give priority to tackling sikh extremism will visit the golden temple the sikhs holiest shrine with mr lal today reuter reports

Spans:
Span 11-12:  extremism => extremism
Span 6-7:  give => give-01
Span 15-16:  golden => gold
Span 7-8:  priority => priority
Span 4-5:  promised => promise-01
Span 26-27:  reports => report-01
Span 20-21:  shrine => shrine
Span 16-17:  temple => temple
Span 24-25:  today => today
Span 13-14:  visit => visit-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),reports,report-01,false), Span(24,25,List(1),today,today,false), Span(20,21,List(2),shrine,shrine,false), Span(16,17,List(3),temple,temple,false), Span(15,16,List(4),golden,gold,false), Span(13,14,List(5),visit,visit-01,false), Span(11,12,List(6),extremism,extremism,false), Span(7,8,List(7),priority,priority,false), Span(6,7,List(8),give,give-01,false), Span(4,5,List(9),promised,promise-01,false)),Map(2 -> shrine, 5 -> visit-01, 8 -> give-01, 7 -> priority, 1 -> today, 4 -> gold, 6 -> extremism, 9 -> promise-01, 0 -> report-01, 3 -> temple),Map(e -> extremism, t -> today, p2 -> promise-01, s -> shrine, v -> visit-01, g2 -> give-01, p -> priority, g -> gold, t2 -> temple, r -> report-01))),[Ljava.lang.String;@1f886920,Annotation([Ljava.lang.String;@34adc40c,[Ljava.lang.String;@7c220ad8,[Ljava.lang.String;@1ef62a93),Annotation([Ljava.lang.String;@336528c6,[Ljava.lang.String;@3657f986,[Ledu.cmu.lti.nlp.amr.Dependency;@49bee849),Annotation([Ljava.lang.String;@14843672,[Ljava.lang.String;@741280e3,[Ljava.lang.String;@6acbf29d),Annotation([Ljava.lang.String;@73a55831,[Ljava.lang.String;@6c413447,[Ledu.cmu.lti.nlp.amr.Entity;@2ccf58d7))
AMR:
(g2 / give-01, ARG1, s / shrine)
(g2 / give-01, ARG2, p / priority)
(p2 / promise-01, ARG2, g2 / give-01)
(r / report-01, ARG0, t / today)
(r / report-01, ARG1, v / visit-01)
(s / shrine, topic, r / report-01)
(t2 / temple, mod, g / gold)
(v / visit-01, ARG0, e / extremism)
(v / visit-01, ARG1, t2 / temple)

Decoded in 143,644 microseconds
Sentence: that is why they coexist and one has the power to promise if and only if one has the right to do so

Spans:
Span 13-14:  and => and
Span 5-6:  and => and
Span 4-5:  coexist => coexist-01
Span 14-15:  only => only
Span 9-10:  power => power
Span 11-12:  promise => promise-01
Span 22-23:  so => so
Span 3-4:  they => they

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),so,so,false), Span(14,15,List(1),only,only,false), Span(13,14,List(2),and,and,false), Span(11,12,List(3),promise,promise-01,false), Span(9,10,List(4),power,power,false), Span(5,6,List(5),and,and,false), Span(4,5,List(6),coexist,coexist-01,false), Span(3,4,List(7),they,they,false)),Map(2 -> and, 5 -> and, 7 -> they, 1 -> only, 4 -> power, 6 -> coexist-01, 0 -> so, 3 -> promise-01),Map(t -> they, p2 -> power, s -> so, p -> promise-01, a -> and, a2 -> and, c -> coexist-01, o -> only))),[Ljava.lang.String;@60d1a23c,Annotation([Ljava.lang.String;@62f242cc,[Ljava.lang.String;@eff91d4,[Ljava.lang.String;@2cbefcfd),Annotation([Ljava.lang.String;@2ed35cfe,[Ljava.lang.String;@367e3fb6,[Ledu.cmu.lti.nlp.amr.Dependency;@1a88e1ad),Annotation([Ljava.lang.String;@10983277,[Ljava.lang.String;@78192b23,[Ljava.lang.String;@3c5f446e),Annotation([Ljava.lang.String;@1285b0b9,[Ljava.lang.String;@7154b2f,[Ledu.cmu.lti.nlp.amr.Entity;@6fafe4b))
AMR:
(a / and, op, a2 / and)
(a / and, op, p / promise-01)
(a2 / and, op, c / coexist-01)
(c / coexist-01, ARG1, t / they)
(p / promise-01, ARG0, p2 / power)
(p / promise-01, ARG1, s / so)
(p / promise-01, time, o / only)

Decoded in 36,170 microseconds
Sentence: the sellotape to basildon bond stationery group drg in a move to rally support against the 697m bid from roland franklins pembridge investments is promising a profits forecast a statement on future dividend policy and further details of its property profits

Spans:
Span 34-35:  and => and
Span 17-18:  bid => bid-01
Span 36-37:  details => detail-01
Span 27-28:  forecast => forecast-01
Span 35-36:  further => further
Span 31-32:  future => future
Span 6-7:  group => group
Span 22-23:  investments => invest-01
Span 33-34:  policy => policy
Span 40-41:  profits => profit-01
Span 26-27:  profits => profit-01
Span 24-25:  promising => promise-01
Span 39-40:  property => property
Span 12-13:  rally => rally-01
Span 29-30:  statement => state-01
Span 5-6:  stationery => stationery
Span 13-14:  support => support-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),profits,profit-01,false), Span(39,40,List(1),property,property,false), Span(36,37,List(2),details,detail-01,false), Span(35,36,List(3),further,further,false), Span(34,35,List(4),and,and,false), Span(33,34,List(5),policy,policy,false), Span(31,32,List(6),future,future,false), Span(29,30,List(7),statement,state-01,false), Span(27,28,List(8),forecast,forecast-01,false), Span(26,27,List(9),profits,profit-01,false), Span(24,25,List(10),promising,promise-01,false), Span(22,23,List(11),investments,invest-01,false), Span(17,18,List(12),bid,bid-01,false), Span(13,14,List(13),support,support-01,false), Span(12,13,List(14),rally,rally-01,false), Span(6,7,List(15),group,group,false), Span(5,6,List(16),stationery,stationery,false)),Map(2 -> detail-01, 5 -> policy, 12 -> bid-01, 15 -> group, 8 -> forecast-01, 7 -> state-01, 1 -> property, 4 -> and, 11 -> invest-01, 14 -> rally-01, 6 -> future, 0 -> profit-01, 9 -> profit-01, 16 -> stationery, 3 -> further, 10 -> promise-01, 13 -> support-01),Map(s2 -> support-01, p5 -> promise-01, b -> bid-01, p2 -> property, s -> state-01, d -> detail-01, g -> group, p -> profit-01, a -> and, p4 -> profit-01, f3 -> forecast-01, r -> rally-01, i -> invest-01, s3 -> stationery, f2 -> future, f -> further, p3 -> policy))),[Ljava.lang.String;@7a7f348f,Annotation([Ljava.lang.String;@3553d71d,[Ljava.lang.String;@134fcc45,[Ljava.lang.String;@5bebcfea),Annotation([Ljava.lang.String;@569f3acb,[Ljava.lang.String;@6fcd11da,[Ledu.cmu.lti.nlp.amr.Dependency;@4f388e),Annotation([Ljava.lang.String;@5109f2ca,[Ljava.lang.String;@6422d556,[Ljava.lang.String;@2ae43476),Annotation([Ljava.lang.String;@6c3044f9,[Ljava.lang.String;@55006eec,[Ledu.cmu.lti.nlp.amr.Entity;@f72738d))
AMR:
(a / and, op, d / detail-01)
(a / and, op, p3 / policy)
(a / and, op, s2 / support-01)
(d / detail-01, ARG1, p / profit-01)
(d / detail-01, degree, f / further)
(f3 / forecast-01, ARG0, p4 / profit-01)
(f3 / forecast-01, ARG1, s / state-01)
(g / group, mod, s3 / stationery)
(p / profit-01, ARG0, p2 / property)
(p3 / policy, time, f2 / future)
(p5 / promise-01, ARG0, i / invest-01)
(p5 / promise-01, ARG1, p4 / profit-01)
(r / rally-01, ARG1, s2 / support-01)
(r / rally-01, ARG2, b / bid-01)
(s / state-01, ARG0, g / group)
(s / state-01, ARG1, a / and)

Decoded in 534,381 microseconds
Sentence: the prospect of running highspeed trains overground promises to provoke an even greater outcry

Spans:
Span 12-13:  greater => great
Span 13-14:  outcry => outcry
Span 7-8:  promises => promise-01
Span 1-2:  prospect => prospect
Span 9-10:  provoke => provoke-01
Span 5-6:  trains => train

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),outcry,outcry,false), Span(12,13,List(1),greater,great,false), Span(9,10,List(2),provoke,provoke-01,false), Span(7,8,List(3),promises,promise-01,false), Span(5,6,List(4),trains,train,false), Span(1,2,List(5),prospect,prospect,false)),Map(2 -> provoke-01, 5 -> prospect, 1 -> great, 4 -> train, 0 -> outcry, 3 -> promise-01),Map(t -> train, p2 -> promise-01, p -> provoke-01, g -> great, o -> outcry, p3 -> prospect))),[Ljava.lang.String;@230035e7,Annotation([Ljava.lang.String;@62d2e2a4,[Ljava.lang.String;@31dafac,[Ljava.lang.String;@11f846cd),Annotation([Ljava.lang.String;@42f045f2,[Ljava.lang.String;@2c803533,[Ledu.cmu.lti.nlp.amr.Dependency;@1524be18),Annotation([Ljava.lang.String;@1f3c2480,[Ljava.lang.String;@25805f85,[Ljava.lang.String;@eff27ff),Annotation([Ljava.lang.String;@119ade0a,[Ljava.lang.String;@4e676b8d,[Ledu.cmu.lti.nlp.amr.Entity;@67c61e31))
AMR:
(o / outcry, mod, g / great)
(p / provoke-01, ARG1, o / outcry)
(p2 / promise-01, ARG0, p3 / prospect)
(p2 / promise-01, ARG1, p / provoke-01)
(t / train, mod, p3 / prospect)

Decoded in 18,782 microseconds
Sentence: if some of you have had bad experiences with other amway people let me promise that i am not like that

Spans:
Span 6-7:  bad => bad
Span 7-8:  experiences => experience-01
Span 16-17:  i => i
Span 12-13:  let => let-01
Span 9-10:  other => other
Span 14-15:  promise => promise-01
Span 1-2:  some => some
Span 3-4:  you => you

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),i,i,false), Span(14,15,List(1),promise,promise-01,false), Span(12,13,List(2),let,let-01,false), Span(9,10,List(3),other,other,false), Span(7,8,List(4),experiences,experience-01,false), Span(6,7,List(5),bad,bad,false), Span(3,4,List(6),you,you,false), Span(1,2,List(7),some,some,false)),Map(2 -> let-01, 5 -> bad, 7 -> some, 1 -> promise-01, 4 -> experience-01, 6 -> you, 0 -> i, 3 -> other),Map(e -> experience-01, b -> bad, s -> some, y -> you, p -> promise-01, i -> i, l -> let-01, o -> other))),[Ljava.lang.String;@7fe85830,Annotation([Ljava.lang.String;@6ef5f8ea,[Ljava.lang.String;@56a9038f,[Ljava.lang.String;@7228cdbb),Annotation([Ljava.lang.String;@54daea8a,[Ljava.lang.String;@705c358b,[Ledu.cmu.lti.nlp.amr.Dependency;@35bf724e),Annotation([Ljava.lang.String;@2be97a73,[Ljava.lang.String;@6d662a8a,[Ljava.lang.String;@4e730222),Annotation([Ljava.lang.String;@60912e6a,[Ljava.lang.String;@5b7e62ad,[Ledu.cmu.lti.nlp.amr.Entity;@46807ac8))
AMR:
(e / experience-01, ARG0, i / i)
(e / experience-01, mod, b / bad)
(l / let-01, ARG0, y / you)
(l / let-01, ARG1, p / promise-01)
(l / let-01, ARG2, e / experience-01)
(p / promise-01, ARG0, o / other)
(p / promise-01, ARG1, s / some)

Decoded in 82,182 microseconds
Sentence: resentment at the rich has helped propel the populist mr menem and his peronist movement to power but also promises to make his first days in office testing ones

Spans:
Span 18-19:  also => also
Span 11-12:  and => and
Span 17-18:  but => contrast-01
Span 24-25:  days => (temporal-quantity :unit day)
Span 5-6:  helped => help-01
Span 14-15:  movement => movement
Span 26-27:  office => office
Span 28-29:  ones => one
Span 16-17:  power => power
Span 19-20:  promises => promise-01
Span 6-7:  propel => propel-01
Span 0-1:  resentment => resent-01
Span 3-4:  rich => rich
Span 27-28:  testing => test-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),ones,one,false), Span(27,28,List(1),testing,test-01,false), Span(26,27,List(2),office,office,false), Span(24,25,List(4, 3),days,(temporal-quantity :unit day),false), Span(19,20,List(5),promises,promise-01,false), Span(18,19,List(6),also,also,false), Span(17,18,List(7),but,contrast-01,false), Span(16,17,List(8),power,power,false), Span(14,15,List(9),movement,movement,false), Span(11,12,List(10),and,and,false), Span(6,7,List(11),propel,propel-01,false), Span(5,6,List(12),helped,help-01,false), Span(3,4,List(13),rich,rich,false), Span(0,1,List(14),resentment,resent-01,false)),Map(2 -> office, 5 -> promise-01, 12 -> help-01, 8 -> power, 7 -> contrast-01, 1 -> test-01, 4 -> day, 11 -> propel-01, 14 -> resent-01, 6 -> also, 0 -> one, 9 -> movement, 3 -> temporal-quantity, 10 -> and, 13 -> rich),Map(h -> help-01, t -> test-01, p2 -> power, d -> day, m -> movement, r2 -> resent-01, p -> promise-01, a -> also, o2 -> office, t2 -> temporal-quantity, r -> rich, a2 -> and, c -> contrast-01, o -> one, p3 -> propel-01))),[Ljava.lang.String;@1cfd04a1,Annotation([Ljava.lang.String;@273af4e5,[Ljava.lang.String;@fa3fa82,[Ljava.lang.String;@569374d3),Annotation([Ljava.lang.String;@6adaf50c,[Ljava.lang.String;@4d0e1da2,[Ledu.cmu.lti.nlp.amr.Dependency;@59bb9e33),Annotation([Ljava.lang.String;@2c8f544b,[Ljava.lang.String;@75e71ec7,[Ljava.lang.String;@1895d74a),Annotation([Ljava.lang.String;@156947e2,[Ljava.lang.String;@32ee5169,[Ledu.cmu.lti.nlp.amr.Entity;@3c22de9e))
AMR:
(a2 / and, op, m / movement)
(a2 / and, op, p2 / power)
(a2 / and, op, t / test-01)
(c / contrast-01, ARG1, h / help-01)
(c / contrast-01, ARG2, p / promise-01)
(h / help-01, ARG0, r2 / resent-01)
(h / help-01, ARG1, p3 / propel-01)
(o / one, mod, t / test-01)
(p / promise-01, mod, a / also)
(p3 / propel-01, ARG1, a2 / and)
(r2 / resent-01, ARG0, t2 / temporal-quantity)
(r2 / resent-01, ARG1, r / rich)
(t / test-01, ARG1, o2 / office)
(t2 / temporal-quantity, unit, d / day)

Decoded in 390,785 microseconds
Sentence: the elfin figure with a dark prettiness that promised to bloom into beauty

Spans:
Span 12-13:  beauty => beauty
Span 5-6:  dark => dark
Span 2-3:  figure => figure
Span 8-9:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),beauty,beauty,false), Span(8,9,List(1),promised,promise-01,false), Span(5,6,List(2),dark,dark,false), Span(2,3,List(3),figure,figure,false)),Map(2 -> dark, 1 -> promise-01, 0 -> beauty, 3 -> figure),Map(b -> beauty, d -> dark, p -> promise-01, f -> figure))),[Ljava.lang.String;@154575ea,Annotation([Ljava.lang.String;@340608f,[Ljava.lang.String;@77834df3,[Ljava.lang.String;@4d72c9d1),Annotation([Ljava.lang.String;@2b1fe010,[Ljava.lang.String;@39af508e,[Ledu.cmu.lti.nlp.amr.Dependency;@24d1b838),Annotation([Ljava.lang.String;@4495776a,[Ljava.lang.String;@30d2f353,[Ljava.lang.String;@6964e72f),Annotation([Ljava.lang.String;@5f85f4b7,[Ljava.lang.String;@53854b5f,[Ledu.cmu.lti.nlp.amr.Entity;@541774cf))
AMR:
(f / figure, op, p / promise-01)
(p / promise-01, ARG0, d / dark)
(p / promise-01, ARG1, b / beauty)

Decoded in 11,885 microseconds
Sentence:   the board has promised not to dilute the butter or the 1500 tonnes of powder

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the board has promised not to dilute the butter or the 1500 tonnes of powder
myTokenized = the board has promised not to dilute the butter or the 1500 tonnes of powder
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: waless instant reaction a try by arthur emyr and subsequent steady improvement bringing wellcrafted tries for emyr and robert jones promised more than was later fulfilled

Spans:
Span 17-18:  and => and
Span 8-9:  and => and
Span 12-13:  bringing => bring-01
Span 25-26:  fulfilled => fulfill-01
Span 11-12:  improvement => improve-01
Span 1-2:  instant => instant
Span 24-25:  later => late
Span 20-21:  promised => promise-01
Span 2-3:  reaction => react-01
Span 10-11:  steady => steady
Span 9-10:  subsequent => subsequent
Span 14-15:  tries => try-01
Span 4-5:  try => try-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),fulfilled,fulfill-01,false), Span(24,25,List(1),later,late,false), Span(20,21,List(2),promised,promise-01,false), Span(17,18,List(3),and,and,false), Span(14,15,List(4),tries,try-01,false), Span(12,13,List(5),bringing,bring-01,false), Span(11,12,List(6),improvement,improve-01,false), Span(10,11,List(7),steady,steady,false), Span(9,10,List(8),subsequent,subsequent,false), Span(8,9,List(9),and,and,false), Span(4,5,List(10),try,try-01,false), Span(2,3,List(11),reaction,react-01,false), Span(1,2,List(12),instant,instant,false)),Map(2 -> promise-01, 5 -> bring-01, 12 -> instant, 8 -> subsequent, 7 -> steady, 1 -> late, 4 -> try-01, 11 -> react-01, 6 -> improve-01, 0 -> fulfill-01, 9 -> and, 3 -> and, 10 -> try-01),Map(s2 -> subsequent, t -> try-01, b -> bring-01, s -> steady, p -> promise-01, a -> and, t2 -> try-01, i2 -> instant, i -> improve-01, a2 -> and, r -> react-01, l -> late, f -> fulfill-01))),[Ljava.lang.String;@69e05a29,Annotation([Ljava.lang.String;@83f700d,[Ljava.lang.String;@7cd569b5,[Ljava.lang.String;@1f0f2a1a),Annotation([Ljava.lang.String;@1c9520e4,[Ljava.lang.String;@2a26765,[Ledu.cmu.lti.nlp.amr.Dependency;@7432193c),Annotation([Ljava.lang.String;@516edbd,[Ljava.lang.String;@245215e7,[Ljava.lang.String;@91c0352),Annotation([Ljava.lang.String;@e1e012a,[Ljava.lang.String;@53de73a3,[Ledu.cmu.lti.nlp.amr.Entity;@3179fd59))
AMR:
(a2 / and, op, i / improve-01)
(b / bring-01, ARG0, i / improve-01)
(b / bring-01, ARG1, t / try-01)
(f / fulfill-01, ARG1, p / promise-01)
(f / fulfill-01, time, l / late)
(i / improve-01, mod, s / steady)
(p / promise-01, ARG1, a / and)
(r / react-01, ARG1, t2 / try-01)
(r / react-01, mod, i2 / instant)
(s / steady, degree, s2 / subsequent)
(t / try-01, ARG0, a / and)
(t2 / try-01, ARG1, a2 / and)

Decoded in 297,979 microseconds
Sentence: the launch of the new lexus range from toyota which is being sold entirely separately from traditional toyota dealers already promises to be a great success

Spans:
Span 19-20:  already => already
Span 18-19:  dealers => (person :ARG0-of deal-01)
Span 13-14:  entirely => entire
Span 24-25:  great => great
Span 1-2:  launch => launch-01
Span 4-5:  new => new
Span 20-21:  promises => promise-01
Span 6-7:  range => range-01
Span 14-15:  separately => separate-01
Span 12-13:  sold => sell-01
Span 25-26:  success => succeed-01
Span 16-17:  traditional => tradition

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),success,succeed-01,false), Span(24,25,List(1),great,great,false), Span(20,21,List(2),promises,promise-01,false), Span(19,20,List(3),already,already,false), Span(18,19,List(5, 4),dealers,(person :ARG0-of deal-01),false), Span(16,17,List(6),traditional,tradition,false), Span(14,15,List(7),separately,separate-01,false), Span(13,14,List(8),entirely,entire,false), Span(12,13,List(9),sold,sell-01,false), Span(6,7,List(10),range,range-01,false), Span(4,5,List(11),new,new,false), Span(1,2,List(12),launch,launch-01,false)),Map(2 -> promise-01, 5 -> deal-01, 12 -> launch-01, 8 -> entire, 7 -> separate-01, 1 -> great, 4 -> person, 11 -> new, 6 -> tradition, 0 -> succeed-01, 9 -> sell-01, 3 -> already, 10 -> range-01),Map(e -> entire, n -> new, s2 -> separate-01, t -> tradition, p2 -> person, s -> succeed-01, d -> deal-01, g -> great, p -> promise-01, a -> already, r -> range-01, s3 -> sell-01, l -> launch-01))),[Ljava.lang.String;@3fe7f76f,Annotation([Ljava.lang.String;@1625b930,[Ljava.lang.String;@6a109ac,[Ljava.lang.String;@3681fe9a),Annotation([Ljava.lang.String;@10724c6b,[Ljava.lang.String;@3ff70d3c,[Ledu.cmu.lti.nlp.amr.Dependency;@7485fef2),Annotation([Ljava.lang.String;@924fda2,[Ljava.lang.String;@5b879b5e,[Ljava.lang.String;@23e96744),Annotation([Ljava.lang.String;@307ab3c7,[Ljava.lang.String;@47b0e6ae,[Ledu.cmu.lti.nlp.amr.Entity;@2ef8ce47))
AMR:
(d / deal-01, ARG0, p2 / person)
(l / launch-01, ARG1, r / range-01)
(p / promise-01, ARG0, l / launch-01)
(p / promise-01, ARG1, s / succeed-01)
(p / promise-01, manner, a / already)
(p2 / person, mod, t / tradition)
(s / succeed-01, ARG0, n / new)
(s / succeed-01, ARG1, p2 / person)
(s / succeed-01, mod, g / great)
(s2 / separate-01, ARG1, e / entire)
(s3 / sell-01, ARG0, p2 / person)
(s3 / sell-01, ARG1, e / entire)

Decoded in 189,099 microseconds
Sentence: it has also promised to review the ban on television advertising of condoms and the high import duty imposed on them

Spans:
Span 2-3:  also => also
Span 13-14:  and => and
Span 7-8:  ban => ban-01
Span 17-18:  duty => duty
Span 15-16:  high => high
Span 16-17:  import => import-01
Span 18-19:  imposed => impose-01
Span 0-1:  it => it
Span 3-4:  promised => promise-01
Span 5-6:  review => review-01
Span 9-10:  television => television

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),imposed,impose-01,false), Span(17,18,List(1),duty,duty,false), Span(16,17,List(2),import,import-01,false), Span(15,16,List(3),high,high,false), Span(13,14,List(4),and,and,false), Span(9,10,List(5),television,television,false), Span(7,8,List(6),ban,ban-01,false), Span(5,6,List(7),review,review-01,false), Span(3,4,List(8),promised,promise-01,false), Span(2,3,List(9),also,also,false), Span(0,1,List(10),it,it,false)),Map(2 -> import-01, 5 -> television, 8 -> promise-01, 7 -> review-01, 1 -> duty, 4 -> and, 6 -> ban-01, 9 -> also, 0 -> impose-01, 10 -> it, 3 -> high),Map(h -> high, b -> ban-01, t -> television, d -> duty, i3 -> it, p -> promise-01, a -> and, i2 -> import-01, a2 -> also, r -> review-01, i -> impose-01))),[Ljava.lang.String;@50aeaf68,Annotation([Ljava.lang.String;@7c7dfe39,[Ljava.lang.String;@33bd9009,[Ljava.lang.String;@623b5968),Annotation([Ljava.lang.String;@266aed3a,[Ljava.lang.String;@35fc8e8a,[Ledu.cmu.lti.nlp.amr.Dependency;@57f221b6),Annotation([Ljava.lang.String;@598360d5,[Ljava.lang.String;@404a6ddc,[Ljava.lang.String;@5672a77d),Annotation([Ljava.lang.String;@1522be2,[Ljava.lang.String;@39bf031b,[Ledu.cmu.lti.nlp.amr.Entity;@2b64ff3b))
AMR:
(b / ban-01, ARG1, a / and)
(b / ban-01, source, t / television)
(d / duty, mod, i2 / import-01)
(i / impose-01, ARG1, d / duty)
(i / impose-01, ARG2, a / and)
(i2 / import-01, ARG2, h / high)
(p / promise-01, ARG2, r / review-01)
(p / promise-01, mod, a2 / also)
(r / review-01, ARG0, i3 / it)
(r / review-01, ARG1, b / ban-01)

Decoded in 48,545 microseconds
Sentence: dale duesing and joan rodgers as figaro and susanna are also a youthful inexperienced pair she certainly promises to be memorable

Spans:
Span 10-11:  also => also
Span 7-8:  and => and
Span 2-3:  and => and
Span 16-17:  certainly => certain
Span 0-1:  dale => (person :name (name :op "Dale"))
Span 13-14:  inexperienced => (experience-01 :polarity -)
Span 17-18:  promises => promise-01
Span 15-16:  she => she

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),promises,promise-01,false), Span(16,17,List(1),certainly,certain,false), Span(15,16,List(2),she,she,false), Span(13,14,List(4, 3),inexperienced,(experience-01 :polarity -),false), Span(10,11,List(5),also,also,false), Span(7,8,List(6),and,and,false), Span(2,3,List(7),and,and,false), Span(0,1,List(10, 9, 8),dale,(person :name (name :op "Dale")),false)),Map(2 -> she, 5 -> also, 8 -> person, 7 -> and, 1 -> certain, 4 -> -, 6 -> and, 9 -> name, 0 -> promise-01, 10 -> "Dale", 3 -> experience-01),Map(n -> name, e -> experience-01, p2 -> person, a3 -> and, s -> she, p -> promise-01, a -> also, a2 -> and, c -> certain))),[Ljava.lang.String;@73b090be,Annotation([Ljava.lang.String;@4ceee548,[Ljava.lang.String;@580f016d,[Ljava.lang.String;@4126c845),Annotation([Ljava.lang.String;@59264b6d,[Ljava.lang.String;@61220ed4,[Ledu.cmu.lti.nlp.amr.Dependency;@2fbb21e),Annotation([Ljava.lang.String;@5a6ad119,[Ljava.lang.String;@1ac5eeaf,[Ljava.lang.String;@38b930e4),Annotation([Ljava.lang.String;@638e5d4,[Ljava.lang.String;@178c47d,[Ledu.cmu.lti.nlp.amr.Entity;@1fabeb4c))
AMR:
(a2 / and, op, a / also)
(a3 / and, location, a2 / and)
(a3 / and, op, p / promise-01)
(a3 / and, op, p2 / person)
(e / experience-01, ARG1, a3 / and)
(e / experience-01, polarity, -)
(n / name, op, "Dale")
(p / promise-01, ARG0, s / she)
(p / promise-01, mod, c / certain)
(p2 / person, name, n / name)

Decoded in 57,967 microseconds
Sentence: you think i cant promise but i can i know exactly how

Spans:
Span 5-6:  but => contrast-01
Span 7-8:  can => possible
Span 10-11:  exactly => exact
Span 8-9:  i => i
Span 6-7:  i => i
Span 2-3:  i => i
Span 9-10:  know => know-01
Span 4-5:  promise => promise-01
Span 1-2:  think => think-01
Span 0-1:  you => you

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),exactly,exact,false), Span(9,10,List(1),know,know-01,false), Span(8,9,List(2),i,i,false), Span(7,8,List(3),can,possible,false), Span(6,7,List(4),i,i,false), Span(5,6,List(5),but,contrast-01,false), Span(4,5,List(6),promise,promise-01,false), Span(2,3,List(7),i,i,false), Span(1,2,List(8),think,think-01,false), Span(0,1,List(9),you,you,false)),Map(2 -> i, 5 -> contrast-01, 8 -> think-01, 7 -> i, 1 -> know-01, 4 -> i, 6 -> promise-01, 9 -> you, 0 -> exact, 3 -> possible),Map(e -> exact, t -> think-01, k -> know-01, p2 -> promise-01, y -> you, i3 -> i, p -> possible, i2 -> i, i -> i, c -> contrast-01))),[Ljava.lang.String;@4fe4dad2,Annotation([Ljava.lang.String;@39da39f8,[Ljava.lang.String;@2613e674,[Ljava.lang.String;@647edd33),Annotation([Ljava.lang.String;@44ec72d0,[Ljava.lang.String;@7f65d909,[Ledu.cmu.lti.nlp.amr.Dependency;@778c1f36),Annotation([Ljava.lang.String;@10554f8b,[Ljava.lang.String;@50d9370d,[Ljava.lang.String;@64ad5ff2),Annotation([Ljava.lang.String;@32763c81,[Ljava.lang.String;@707e5308,[Ledu.cmu.lti.nlp.amr.Entity;@757d6bea))
AMR:
(c / contrast-01, ARG1, p2 / promise-01)
(c / contrast-01, ARG2, k / know-01)
(k / know-01, ARG0, i3 / i)
(k / know-01, ARG1, e / exact)
(k / know-01, manner, i / i)
(p / possible, domain, k / know-01)
(p2 / promise-01, ARG0, i2 / i)
(t / think-01, ARG0, y / you)
(t / think-01, ARG1, p / possible)

Decoded in 290,159 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@7d380be8,Annotation([Ljava.lang.String;@6a95ec91,[Ljava.lang.String;@18de5a42,[Ljava.lang.String;@2df7afcf),Annotation([Ljava.lang.String;@6037569c,[Ljava.lang.String;@51174d1d,[Ledu.cmu.lti.nlp.amr.Dependency;@50c7d482),Annotation([Ljava.lang.String;@6f50cc3c,[Ljava.lang.String;@2190b03c,[Ljava.lang.String;@2222445b),Annotation([Ljava.lang.String;@77b5c3de,[Ljava.lang.String;@3e4e6138,[Ledu.cmu.lti.nlp.amr.Entity;@bd0c37d))
AMR:


Decoded in 1,188 microseconds
Sentence: wellington schools physically small side continue to prosper losing only to st pauls 84 and their match against unbeaten epsom promises much

Spans:
Span 13-14:  84 => 84
Span 14-15:  and => and
Span 5-6:  continue => continue-01
Span 8-9:  losing => lose-02
Span 16-17:  match => match-01
Span 21-22:  much => much
Span 9-10:  only => only
Span 2-3:  physically => physical
Span 20-21:  promises => promise-01
Span 1-2:  schools => school
Span 4-5:  side => side
Span 3-4:  small => small

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),much,much,false), Span(20,21,List(1),promises,promise-01,false), Span(16,17,List(2),match,match-01,false), Span(14,15,List(3),and,and,false), Span(13,14,List(4),84,84,false), Span(9,10,List(5),only,only,false), Span(8,9,List(6),losing,lose-02,false), Span(5,6,List(7),continue,continue-01,false), Span(4,5,List(8),side,side,false), Span(3,4,List(9),small,small,false), Span(2,3,List(10),physically,physical,false), Span(1,2,List(11),schools,school,false)),Map(2 -> match-01, 5 -> only, 8 -> side, 7 -> continue-01, 1 -> promise-01, 11 -> school, 4 -> 84, 6 -> lose-02, 9 -> small, 0 -> much, 10 -> physical, 3 -> and),Map(s2 -> small, 8 -> 84, m2 -> match-01, p2 -> physical, s -> side, m -> much, p -> promise-01, a -> and, s3 -> school, c -> continue-01, l -> lose-02, o -> only))),[Ljava.lang.String;@36d2499a,Annotation([Ljava.lang.String;@27de3994,[Ljava.lang.String;@6e9637fe,[Ljava.lang.String;@48363d6a),Annotation([Ljava.lang.String;@60fa1f2f,[Ljava.lang.String;@45157866,[Ledu.cmu.lti.nlp.amr.Dependency;@49393f9),Annotation([Ljava.lang.String;@74d7c2c7,[Ljava.lang.String;@134d2bf,[Ljava.lang.String;@32f7fa37),Annotation([Ljava.lang.String;@364c4b05,[Ljava.lang.String;@4ad1511c,[Ledu.cmu.lti.nlp.amr.Entity;@74242ba3))
AMR:
(a / and, op, m2 / match-01)
(c / continue-01, ARG1, s / side)
(c / continue-01, ARG2, l / lose-02)
(l / lose-02, ARG1, a / and)
(l / lose-02, mod, o / only)
(m2 / match-01, ARG0, 8 / 84)
(m2 / match-01, ARG1, p / promise-01)
(m2 / match-01, time, m / much)
(p / promise-01, ARG1, p2 / physical)
(s / side, mod, s2 / small)
(s3 / school, location, s / side)

Decoded in 110,442 microseconds
Sentence: with the greatly increased numbers of backpackers and the rise of phenomena such as khao san road cheap independent travel in asia in the 1990s promises to be less like a weary forced march and more like an extended summer holiday

Spans:
Span 24-25:  1990s => 1990
Span 34-35:  and => and
Span 7-8:  and => and
Span 21-22:  asia => (name :op "Asia")
Span 17-18:  cheap => cheap
Span 38-39:  extended => extend-01
Span 32-33:  forced => force-01
Span 2-3:  greatly => great
Span 40-41:  holiday => holiday
Span 3-4:  increased => increase-01
Span 18-19:  independent => (depend-01 :polarity -)
Span 28-29:  less => less
Span 33-34:  march => (date-entity :month 3)
Span 4-5:  numbers => number
Span 11-12:  phenomena => phenomenon
Span 25-26:  promises => promise-01
Span 9-10:  rise => rise-01
Span 16-17:  road => road
Span 12-13:  such => such
Span 39-40:  summer => summer
Span 19-20:  travel => travel-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),holiday,holiday,false), Span(39,40,List(1),summer,summer,false), Span(38,39,List(2),extended,extend-01,false), Span(34,35,List(3),and,and,false), Span(33,34,List(5, 4),march,(date-entity :month 3),false), Span(32,33,List(6),forced,force-01,false), Span(28,29,List(7),less,less,false), Span(25,26,List(8),promises,promise-01,false), Span(24,25,List(9),1990s,1990,false), Span(21,22,List(11, 10),asia,(name :op "Asia"),false), Span(19,20,List(12),travel,travel-01,false), Span(18,19,List(14, 13),independent,(depend-01 :polarity -),false), Span(17,18,List(15),cheap,cheap,false), Span(16,17,List(16),road,road,false), Span(12,13,List(17),such,such,false), Span(11,12,List(18),phenomena,phenomenon,false), Span(9,10,List(19),rise,rise-01,false), Span(7,8,List(20),and,and,false), Span(4,5,List(21),numbers,number,false), Span(3,4,List(22),increased,increase-01,false), Span(2,3,List(23),greatly,great,false)),Map(2 -> extend-01, 5 -> 3, 12 -> travel-01, 15 -> cheap, 8 -> promise-01, 21 -> number, 18 -> phenomenon, 7 -> less, 17 -> such, 1 -> summer, 23 -> great, 4 -> date-entity, 11 -> "Asia", 14 -> -, 20 -> and, 6 -> force-01, 22 -> increase-01, 0 -> holiday, 9 -> 1990, 16 -> road, 19 -> rise-01, 3 -> and, 10 -> name, 13 -> depend-01),Map(e -> extend-01, n -> name, h -> holiday, s2 -> such, t -> travel-01, p2 -> phenomenon, s -> summer, d -> date-entity, 1 -> 1990, g -> great, r2 -> rise-01, p -> promise-01, a -> and, d2 -> depend-01, i -> increase-01, a2 -> and, r -> road, c -> cheap, l -> less, f -> force-01, 3 -> 3, n2 -> number))),[Ljava.lang.String;@69414a71,Annotation([Ljava.lang.String;@3d7e76b3,[Ljava.lang.String;@39a3014f,[Ljava.lang.String;@7cab0718),Annotation([Ljava.lang.String;@405ef899,[Ljava.lang.String;@1b1325d3,[Ledu.cmu.lti.nlp.amr.Dependency;@6184d88),Annotation([Ljava.lang.String;@258a1ed8,[Ljava.lang.String;@eef0a29,[Ljava.lang.String;@6f841167),Annotation([Ljava.lang.String;@4792ba63,[Ljava.lang.String;@720ade4a,[Ledu.cmu.lti.nlp.amr.Entity;@278806c4))
AMR:
(a / and, instrument, h / holiday)
(a / and, op, r2 / rise-01)
(a2 / and, op, a / and)
(d / date-entity, month, 3 / 3)
(d2 / depend-01, ARG0, t / travel-01)
(d2 / depend-01, polarity, -)
(e / extend-01, ARG0, h / holiday)
(e / extend-01, ARG1, s / summer)
(f / force-01, ARG1, d / date-entity)
(f / force-01, ARG2, a2 / and)
(i / increase-01, ARG1, n2 / number)
(i / increase-01, ARG2, l / less)
(i / increase-01, degree, g / great)
(i / increase-01, location, a2 / and)
(n / name, op, "Asia")
(p / promise-01, ARG1, n2 / number)
(p / promise-01, quant, 1 / 1990)
(r2 / rise-01, ARG1, p2 / phenomenon)
(r2 / rise-01, ARG2, t / travel-01)
(s2 / such, mod, p2 / phenomenon)
(t / travel-01, ARG1, r / road)
(t / travel-01, location, n / name)
(t / travel-01, mod, c / cheap)

Decoded in 1,091,548 microseconds
Sentence: as thirtysomething safeness spreads through the high street her jigsaw and own label designs promise to delay the moment when the fawn raincoat takes over the world

Spans:
Span 10-11:  and => and
Span 16-17:  delay => delay-01
Span 13-14:  designs => design-01
Span 6-7:  high => high
Span 12-13:  label => label
Span 18-19:  moment => moment
Span 14-15:  promise => promise-01
Span 3-4:  spreads => spread-02
Span 7-8:  street => street
Span 26-27:  world => world

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),world,world,false), Span(18,19,List(1),moment,moment,false), Span(16,17,List(2),delay,delay-01,false), Span(14,15,List(3),promise,promise-01,false), Span(13,14,List(4),designs,design-01,false), Span(12,13,List(5),label,label,false), Span(10,11,List(6),and,and,false), Span(7,8,List(7),street,street,false), Span(6,7,List(8),high,high,false), Span(3,4,List(9),spreads,spread-02,false)),Map(2 -> delay-01, 5 -> label, 8 -> high, 7 -> street, 1 -> moment, 4 -> design-01, 6 -> and, 9 -> spread-02, 0 -> world, 3 -> promise-01),Map(w -> world, h -> high, s2 -> spread-02, s -> street, d -> delay-01, m -> moment, p -> promise-01, a -> and, d2 -> design-01, l -> label))),[Ljava.lang.String;@53744222,Annotation([Ljava.lang.String;@75a1f0fb,[Ljava.lang.String;@5ad42b12,[Ljava.lang.String;@1f57d954),Annotation([Ljava.lang.String;@407d29df,[Ljava.lang.String;@5948108c,[Ledu.cmu.lti.nlp.amr.Dependency;@a36851f),Annotation([Ljava.lang.String;@15dbb76,[Ljava.lang.String;@30be40ad,[Ljava.lang.String;@1a8836db),Annotation([Ljava.lang.String;@64c97178,[Ljava.lang.String;@6538b0f9,[Ledu.cmu.lti.nlp.amr.Entity;@6ceadf59))
AMR:
(a / and, op, d2 / design-01)
(d / delay-01, ARG0, a / and)
(d / delay-01, ARG1, m / moment)
(d2 / design-01, ARG1, l / label)
(p / promise-01, ARG0, s / street)
(p / promise-01, ARG1, w / world)
(p / promise-01, ARG2, d / delay-01)
(s / street, mod, h / high)
(s2 / spread-02, ARG1, s / street)

Decoded in 173,053 microseconds
Sentence: after the july incident there were calls for tighter security and the authorities promised to conduct a security review at shorts and at the harbour airport

Spans:
Span 0-1:  after => after
Span 25-26:  airport => airport
Span 21-22:  and => and
Span 10-11:  and => and
Span 12-13:  authorities => authority
Span 15-16:  conduct => conduct-01
Span 24-25:  harbour => harbour
Span 3-4:  incident => incident
Span 2-3:  july => (date-entity :month 7)
Span 13-14:  promised => promise-01
Span 18-19:  review => review-01
Span 17-18:  security => security
Span 9-10:  security => security
Span 8-9:  tighter => tight

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),airport,airport,false), Span(24,25,List(1),harbour,harbour,false), Span(21,22,List(2),and,and,false), Span(18,19,List(3),review,review-01,false), Span(17,18,List(4),security,security,false), Span(15,16,List(5),conduct,conduct-01,false), Span(13,14,List(6),promised,promise-01,false), Span(12,13,List(7),authorities,authority,false), Span(10,11,List(8),and,and,false), Span(9,10,List(9),security,security,false), Span(8,9,List(10),tighter,tight,false), Span(3,4,List(11),incident,incident,false), Span(2,3,List(13, 12),july,(date-entity :month 7),false), Span(0,1,List(14),after,after,false)),Map(2 -> and, 5 -> conduct-01, 12 -> date-entity, 8 -> and, 7 -> authority, 1 -> harbour, 4 -> security, 11 -> incident, 14 -> after, 6 -> promise-01, 0 -> airport, 9 -> security, 3 -> review-01, 10 -> tight, 13 -> 7),Map(h -> harbour, s2 -> security, t -> tight, a3 -> authority, s -> security, 7 -> 7, d -> date-entity, p -> promise-01, a -> airport, a5 -> after, a2 -> and, r -> review-01, i -> incident, c -> conduct-01, a4 -> and))),[Ljava.lang.String;@2fed83ec,Annotation([Ljava.lang.String;@12701389,[Ljava.lang.String;@7c1290d3,[Ljava.lang.String;@26e24c48),Annotation([Ljava.lang.String;@52fe1ee9,[Ljava.lang.String;@299f7d90,[Ledu.cmu.lti.nlp.amr.Dependency;@25ec8e49),Annotation([Ljava.lang.String;@4d716e12,[Ljava.lang.String;@51f18776,[Ljava.lang.String;@47f47e01),Annotation([Ljava.lang.String;@47c988f,[Ljava.lang.String;@1003d696,[Ledu.cmu.lti.nlp.amr.Entity;@6bfd1a10))
AMR:
(a / airport, mod, h / harbour)
(a2 / and, op, a3 / authority)
(a2 / and, op, i / incident)
(a4 / and, op, a3 / authority)
(a4 / and, op, s2 / security)
(a5 / after, op, s2 / security)
(c / conduct-01, ARG1, r / review-01)
(d / date-entity, month, 7 / 7)
(i / incident, time, d / date-entity)
(p / promise-01, ARG1, a3 / authority)
(p / promise-01, ARG2, c / conduct-01)
(r / review-01, ARG1, s / security)
(r / review-01, location, h / harbour)
(s2 / security, mod, t / tight)

Decoded in 479,197 microseconds
Sentence: organizations like the rspca say theyre disappointed but promise to continue their battle for a scheme to be introduced

Spans:
Span 12-13:  battle => battle-01
Span 7-8:  but => contrast-01
Span 10-11:  continue => continue-01
Span 6-7:  disappointed => disappoint-01
Span 18-19:  introduced => introduce-02
Span 0-1:  organizations => organization
Span 8-9:  promise => promise-01
Span 4-5:  say => say-01
Span 15-16:  scheme => scheme

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),introduced,introduce-02,false), Span(15,16,List(1),scheme,scheme,false), Span(12,13,List(2),battle,battle-01,false), Span(10,11,List(3),continue,continue-01,false), Span(8,9,List(4),promise,promise-01,false), Span(7,8,List(5),but,contrast-01,false), Span(6,7,List(6),disappointed,disappoint-01,false), Span(4,5,List(7),say,say-01,false), Span(0,1,List(8),organizations,organization,false)),Map(2 -> battle-01, 5 -> contrast-01, 8 -> organization, 7 -> say-01, 1 -> scheme, 4 -> promise-01, 6 -> disappoint-01, 0 -> introduce-02, 3 -> continue-01),Map(s2 -> say-01, b -> battle-01, s -> scheme, d -> disappoint-01, p -> promise-01, i -> introduce-02, c -> continue-01, o -> organization, c2 -> contrast-01))),[Ljava.lang.String;@35ba47d3,Annotation([Ljava.lang.String;@58c18933,[Ljava.lang.String;@a16a0cb,[Ljava.lang.String;@53967499),Annotation([Ljava.lang.String;@3ac113ae,[Ljava.lang.String;@59f322a4,[Ledu.cmu.lti.nlp.amr.Dependency;@69676b1e),Annotation([Ljava.lang.String;@4a9b4a2,[Ljava.lang.String;@2191fa12,[Ljava.lang.String;@76b8c4f5),Annotation([Ljava.lang.String;@5c8aedb7,[Ljava.lang.String;@24fcb8d8,[Ledu.cmu.lti.nlp.amr.Entity;@4bcb7fe0))
AMR:
(b / battle-01, ARG1, s / scheme)
(c / continue-01, ARG1, b / battle-01)
(c2 / contrast-01, ARG1, s2 / say-01)
(c2 / contrast-01, ARG2, p / promise-01)
(i / introduce-02, ARG1, s / scheme)
(p / promise-01, ARG0, o / organization)
(p / promise-01, ARG2, c / continue-01)
(s2 / say-01, ARG1, d / disappoint-01)

Decoded in 43,544 microseconds
Sentence: independent auditors will make checks to ensure advertisers get the service promised

Spans:
Span 4-5:  checks => check-01
Span 6-7:  ensure => ensure-01
Span 0-1:  independent => (depend-01 :polarity -)
Span 11-12:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promised,promise-01,false), Span(6,7,List(1),ensure,ensure-01,false), Span(4,5,List(2),checks,check-01,false), Span(0,1,List(4, 3),independent,(depend-01 :polarity -),false)),Map(2 -> check-01, 1 -> ensure-01, 4 -> -, 0 -> promise-01, 3 -> depend-01),Map(e -> ensure-01, d -> depend-01, p -> promise-01, c -> check-01))),[Ljava.lang.String;@1d387200,Annotation([Ljava.lang.String;@64c46cfc,[Ljava.lang.String;@1bcf4813,[Ljava.lang.String;@4584e5a8),Annotation([Ljava.lang.String;@18019c40,[Ljava.lang.String;@11b93a10,[Ledu.cmu.lti.nlp.amr.Dependency;@1792f987),Annotation([Ljava.lang.String;@323c1a28,[Ljava.lang.String;@7d951dc,[Ljava.lang.String;@4c8d468a),Annotation([Ljava.lang.String;@4f123549,[Ljava.lang.String;@3468742d,[Ledu.cmu.lti.nlp.amr.Entity;@35a3513c))
AMR:
(d / depend-01, polarity, -)
(e / ensure-01, ARG0, c / check-01)
(e / ensure-01, ARG2, p / promise-01)
(p / promise-01, ARG1, d / depend-01)

Decoded in 13,375 microseconds
Sentence: while anno domini will catch up with little polveir shortly the fyfield staying standard promises to be flown with continuing distinction by boraceva

Spans:
Span 19-20:  continuing => continue-01
Span 20-21:  distinction => distinguish-01
Span 17-18:  flown => fly-01
Span 7-8:  little => little
Span 14-15:  promises => promise-01
Span 9-10:  shortly => short
Span 13-14:  standard => standard
Span 12-13:  staying => stay-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),distinction,distinguish-01,false), Span(19,20,List(1),continuing,continue-01,false), Span(17,18,List(2),flown,fly-01,false), Span(14,15,List(3),promises,promise-01,false), Span(13,14,List(4),standard,standard,false), Span(12,13,List(5),staying,stay-01,false), Span(9,10,List(6),shortly,short,false), Span(7,8,List(7),little,little,false)),Map(2 -> fly-01, 5 -> stay-01, 7 -> little, 1 -> continue-01, 4 -> standard, 6 -> short, 0 -> distinguish-01, 3 -> promise-01),Map(s2 -> stay-01, s -> standard, d -> distinguish-01, p -> promise-01, l -> little, s3 -> short, c -> continue-01, f -> fly-01))),[Ljava.lang.String;@752a55a6,Annotation([Ljava.lang.String;@2e5d4162,[Ljava.lang.String;@6c6fa0b5,[Ljava.lang.String;@14a002b1),Annotation([Ljava.lang.String;@1510bd0b,[Ljava.lang.String;@7deb27fa,[Ledu.cmu.lti.nlp.amr.Dependency;@598dceab),Annotation([Ljava.lang.String;@6cfb6a7b,[Ljava.lang.String;@6e0be922,[Ljava.lang.String;@4ff6ef9f),Annotation([Ljava.lang.String;@5cedd8bc,[Ljava.lang.String;@3304e4e,[Ledu.cmu.lti.nlp.amr.Entity;@5864e484))
AMR:
(c / continue-01, ARG1, d / distinguish-01)
(d / distinguish-01, ARG0, p / promise-01)
(d / distinguish-01, ARG1, l / little)
(f / fly-01, ARG1, p / promise-01)
(p / promise-01, mod, s / standard)
(s2 / stay-01, ARG1, p / promise-01)
(s2 / stay-01, mod, s3 / short)

Decoded in 62,151 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@47d6c372,Annotation([Ljava.lang.String;@64b99636,[Ljava.lang.String;@5434e6e3,[Ljava.lang.String;@5d226c45),Annotation([Ljava.lang.String;@7ef255c7,[Ljava.lang.String;@57ddbced,[Ledu.cmu.lti.nlp.amr.Dependency;@1e9e98ac),Annotation([Ljava.lang.String;@3e3953e8,[Ljava.lang.String;@25b3c442,[Ljava.lang.String;@3d19dc64),Annotation([Ljava.lang.String;@6cd44892,[Ljava.lang.String;@64e8a10f,[Ledu.cmu.lti.nlp.amr.Entity;@64a6138a))
AMR:


Decoded in 1,077 microseconds
Sentence: he promised he would resort to nothing as extreme as plastic surgery

Spans:
Span 8-9:  extreme => extreme
Span 2-3:  he => he
Span 0-1:  he => he
Span 6-7:  nothing => nothing
Span 10-11:  plastic => plastic
Span 1-2:  promised => promise-01
Span 4-5:  resort => resort-01
Span 11-12:  surgery => surgery

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),surgery,surgery,false), Span(10,11,List(1),plastic,plastic,false), Span(8,9,List(2),extreme,extreme,false), Span(6,7,List(3),nothing,nothing,false), Span(4,5,List(4),resort,resort-01,false), Span(2,3,List(5),he,he,false), Span(1,2,List(6),promised,promise-01,false), Span(0,1,List(7),he,he,false)),Map(2 -> extreme, 5 -> he, 7 -> he, 1 -> plastic, 4 -> resort-01, 6 -> promise-01, 0 -> surgery, 3 -> nothing),Map(n -> nothing, e -> extreme, h -> he, h2 -> he, p2 -> promise-01, s -> surgery, p -> plastic, r -> resort-01))),[Ljava.lang.String;@699a43fb,Annotation([Ljava.lang.String;@ee549e7,[Ljava.lang.String;@6f56e454,[Ljava.lang.String;@31a87fe7),Annotation([Ljava.lang.String;@2d653029,[Ljava.lang.String;@4e3ceb07,[Ledu.cmu.lti.nlp.amr.Dependency;@16a40b2),Annotation([Ljava.lang.String;@66bd66d7,[Ljava.lang.String;@1caae1f3,[Ljava.lang.String;@16d82739),Annotation([Ljava.lang.String;@48f71ae6,[Ljava.lang.String;@57071776,[Ledu.cmu.lti.nlp.amr.Entity;@1295709d))
AMR:
(n / nothing, mod, e / extreme)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, r / resort-01)
(r / resort-01, ARG0, h / he)
(r / resort-01, ARG2, s / surgery)
(r / resort-01, ARG4, n / nothing)
(s / surgery, mod, p / plastic)

Decoded in 196,248 microseconds
Sentence: worcestershire scored 199 in their second innings a total that promised at one stage to be much more substantial

Spans:
Span 16-17:  much => much
Span 10-11:  promised => promise-01
Span 1-2:  scored => score-01
Span 13-14:  stage => stage
Span 18-19:  substantial => substantial

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),substantial,substantial,false), Span(16,17,List(1),much,much,false), Span(13,14,List(2),stage,stage,false), Span(10,11,List(3),promised,promise-01,false), Span(1,2,List(4),scored,score-01,false)),Map(2 -> stage, 1 -> much, 4 -> score-01, 0 -> substantial, 3 -> promise-01),Map(s2 -> stage, s -> substantial, m -> much, p -> promise-01, s3 -> score-01))),[Ljava.lang.String;@11145cf3,Annotation([Ljava.lang.String;@4fe25e47,[Ljava.lang.String;@169bb04a,[Ljava.lang.String;@4752d5de),Annotation([Ljava.lang.String;@f570667,[Ljava.lang.String;@1a655c0f,[Ledu.cmu.lti.nlp.amr.Dependency;@747eea52),Annotation([Ljava.lang.String;@3849e93e,[Ljava.lang.String;@7c700250,[Ljava.lang.String;@1da81203),Annotation([Ljava.lang.String;@536922b,[Ljava.lang.String;@41b647b9,[Ledu.cmu.lti.nlp.amr.Entity;@261ee463))
AMR:
(p / promise-01, ARG1, s / substantial)
(p / promise-01, time, s2 / stage)
(s3 / score-01, ARG0, m / much)
(s3 / score-01, ARG1, p / promise-01)

Decoded in 29,617 microseconds
Sentence: if you want to order by mail do not delay as the suppliers have promised they will do their utmost to ensure cheeses for christmas provided you send off for them now

Spans:
Span 9-10:  delay => delay-01
Span 21-22:  ensure => ensure-01
Span 6-7:  mail => mail-01
Span 31-32:  now => now
Span 28-29:  off => off
Span 14-15:  promised => promise-01
Span 25-26:  provided => provide-01
Span 27-28:  send => send-01
Span 12-13:  suppliers => supply-01
Span 15-16:  they => they
Span 2-3:  want => want-01
Span 26-27:  you => you
Span 1-2:  you => you

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),now,now,false), Span(28,29,List(1),off,off,false), Span(27,28,List(2),send,send-01,false), Span(26,27,List(3),you,you,false), Span(25,26,List(4),provided,provide-01,false), Span(21,22,List(5),ensure,ensure-01,false), Span(15,16,List(6),they,they,false), Span(14,15,List(7),promised,promise-01,false), Span(12,13,List(8),suppliers,supply-01,false), Span(9,10,List(9),delay,delay-01,false), Span(6,7,List(10),mail,mail-01,false), Span(2,3,List(11),want,want-01,false), Span(1,2,List(12),you,you,false)),Map(2 -> send-01, 5 -> ensure-01, 12 -> you, 8 -> supply-01, 7 -> promise-01, 1 -> off, 4 -> provide-01, 11 -> want-01, 6 -> they, 0 -> now, 9 -> delay-01, 3 -> you, 10 -> mail-01),Map(e -> ensure-01, n -> now, w -> want-01, s2 -> supply-01, t -> they, p2 -> promise-01, s -> send-01, d -> delay-01, m -> mail-01, y -> you, p -> provide-01, o -> off, y2 -> you))),[Ljava.lang.String;@36243322,Annotation([Ljava.lang.String;@29918f3,[Ljava.lang.String;@1134fada,[Ljava.lang.String;@2d410709),Annotation([Ljava.lang.String;@834f715,[Ljava.lang.String;@4d4987e8,[Ledu.cmu.lti.nlp.amr.Dependency;@1679b7fc),Annotation([Ljava.lang.String;@111e0ceb,[Ljava.lang.String;@4be22114,[Ljava.lang.String;@6ae9cef7),Annotation([Ljava.lang.String;@1c12f0f7,[Ljava.lang.String;@1f89f687,[Ledu.cmu.lti.nlp.amr.Entity;@1a98293e))
AMR:
(d / delay-01, ARG0, y / you)
(d / delay-01, ARG1, w / want-01)
(e / ensure-01, ARG0, y2 / you)
(e / ensure-01, ARG1, t / they)
(p / provide-01, ARG1, s / send-01)
(p2 / promise-01, ARG0, s2 / supply-01)
(p2 / promise-01, ARG1, d / delay-01)
(s / send-01, ARG0, y / you)
(s / send-01, concession, n / now)
(s / send-01, direction, o / off)
(w / want-01, ARG0, y2 / you)
(w / want-01, ARG1, m / mail-01)

Decoded in 393,499 microseconds
Sentence: hic and its associates sold worthless 1930 weimar republic bonds stolen from berlin in 1945 promising investors returns of up to 45 per cent

NER Entity: (country :name (name :op "berlin"))
Spans:
Span 6-7:  1930 => (date-entity :year 1930)
Span 14-15:  1945 => (date-entity :year 1945)
Span 21-22:  45 => 45
Span 1-2:  and => and
Span 9-10:  bonds => bond
Span 23-24:  cent => (monetary-quantity :unit cent)
Span 16-17:  investors => (person :ARG0-of invest-01)
Span 15-16:  promising => promise-01
Span 8-9:  republic => republic
Span 17-18:  returns => return-02
Span 4-5:  sold => sell-01
Span 10-11:  stolen => steal-01
Span 5-6:  worthless => worth

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),cent,(monetary-quantity :unit cent),false), Span(21,22,List(2),45,45,false), Span(17,18,List(3),returns,return-02,false), Span(16,17,List(5, 4),investors,(person :ARG0-of invest-01),false), Span(15,16,List(6),promising,promise-01,false), Span(14,15,List(8, 7),1945,(date-entity :year 1945),false), Span(10,11,List(9),stolen,steal-01,false), Span(9,10,List(10),bonds,bond,false), Span(8,9,List(11),republic,republic,false), Span(6,7,List(13, 12),1930,(date-entity :year 1930),false), Span(5,6,List(14),worthless,worth,false), Span(4,5,List(15),sold,sell-01,false), Span(1,2,List(16),and,and,false)),Map(2 -> 45, 5 -> invest-01, 12 -> date-entity, 15 -> sell-01, 8 -> 1945, 7 -> date-entity, 1 -> cent, 4 -> person, 11 -> republic, 14 -> worth, 6 -> promise-01, 0 -> monetary-quantity, 9 -> steal-01, 16 -> and, 3 -> return-02, 10 -> bond, 13 -> 1930),Map(w -> worth, s2 -> sell-01, 12 -> 1930, b -> bond, p2 -> promise-01, s -> steal-01, m -> monetary-quantity, d -> date-entity, 1 -> 1945, p -> person, r2 -> republic, a -> and, 4 -> 45, d2 -> date-entity, r -> return-02, i -> invest-01, c -> cent))),[Ljava.lang.String;@7bbbb315,Annotation([Ljava.lang.String;@5fea6729,[Ljava.lang.String;@161ae5f1,[Ljava.lang.String;@3fee3c8d),Annotation([Ljava.lang.String;@31c96dc5,[Ljava.lang.String;@1f45ba0c,[Ledu.cmu.lti.nlp.amr.Dependency;@1ab979de),Annotation([Ljava.lang.String;@6efeb87,[Ljava.lang.String;@714fef9f,[Ljava.lang.String;@36fce9d7),Annotation([Ljava.lang.String;@165c3e75,[Ljava.lang.String;@2087ecb,[Ledu.cmu.lti.nlp.amr.Entity;@7bbc4277))
AMR:
(b / bond, mod, r2 / republic)
(b / bond, quant, d2 / date-entity)
(d / date-entity, year, 1 / 1945)
(d2 / date-entity, year, 12 / 1930)
(i / invest-01, ARG0, p / person)
(m / monetary-quantity, unit, c / cent)
(p2 / promise-01, ARG0, m / monetary-quantity)
(p2 / promise-01, ARG1, r / return-02)
(r / return-02, ARG0, b / bond)
(r / return-02, ARG1, 4 / 45)
(r / return-02, ARG2, p / person)
(r / return-02, time, d / date-entity)
(s / steal-01, ARG0, a / and)
(s / steal-01, ARG1, b / bond)
(s2 / sell-01, ARG0, a / and)
(s2 / sell-01, ARG1, w / worth)

Decoded in 435,901 microseconds
Sentence: their demands include guaranteed employment in the civilian sector up to the age of 58 after they retire from the armed forces a contrite syria yesterday promised a full investigation into turkish claims that two syrian mig21 fighters shot down a civilian survey plane killing five people inside turkish airspace

NER Entity: (country :name (name :op "syria"))
NER Entity: (thing :name (name :op "syrian"))
NER Entity: (country :name (name :op "syria"))
Spans:
Span 14-15:  58 => 58
Span 15-16:  after => after
Span 12-13:  age => age-01
Span 49-50:  airspace => airspace
Span 20-21:  armed => arm-01
Span 41-42:  civilian => civilian
Span 7-8:  civilian => civilian
Span 32-33:  claims => claim-01
Span 1-2:  demands => demand-01
Span 39-40:  down => down
Span 4-5:  employment => employment
Span 37-38:  fighters => (person :ARG0-of fight-01)
Span 45-46:  five => 5
Span 21-22:  forces => force
Span 28-29:  full => full
Span 3-4:  guaranteed => guarantee-01
Span 2-3:  include => include-01
Span 47-48:  inside => inside
Span 29-30:  investigation => investigate-01
Span 44-45:  killing => kill-01
Span 43-44:  plane => plane
Span 26-27:  promised => promise-01
Span 17-18:  retire => retire-01
Span 8-9:  sector => sector
Span 38-39:  shot => shoot-02
Span 42-43:  survey => survey-01
Span 24-25:  syria => (country :name (name :op "Syria"))
Span 16-17:  they => they
Span 34-35:  two => 2
Span 25-26:  yesterday => yesterday

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),airspace,airspace,false), Span(47,48,List(1),inside,inside,false), Span(45,46,List(2),five,5,false), Span(44,45,List(3),killing,kill-01,false), Span(43,44,List(4),plane,plane,false), Span(42,43,List(5),survey,survey-01,false), Span(41,42,List(6),civilian,civilian,false), Span(39,40,List(7),down,down,false), Span(38,39,List(8),shot,shoot-02,false), Span(37,38,List(10, 9),fighters,(person :ARG0-of fight-01),false), Span(34,35,List(11),two,2,false), Span(32,33,List(12),claims,claim-01,false), Span(29,30,List(13),investigation,investigate-01,false), Span(28,29,List(14),full,full,false), Span(26,27,List(15),promised,promise-01,false), Span(25,26,List(16),yesterday,yesterday,false), Span(24,25,List(19, 18, 17),syria,(country :name (name :op "Syria")),false), Span(21,22,List(20),forces,force,false), Span(20,21,List(21),armed,arm-01,false), Span(17,18,List(22),retire,retire-01,false), Span(16,17,List(23),they,they,false), Span(15,16,List(24),after,after,false), Span(14,15,List(25),58,58,false), Span(12,13,List(26),age,age-01,false), Span(8,9,List(27),sector,sector,false), Span(7,8,List(28),civilian,civilian,false), Span(4,5,List(29),employment,employment,false), Span(3,4,List(30),guaranteed,guarantee-01,false), Span(2,3,List(31),include,include-01,false), Span(1,2,List(32),demands,demand-01,false)),Map(30 -> guarantee-01, 2 -> 5, 5 -> survey-01, 27 -> sector, 12 -> claim-01, 8 -> shoot-02, 15 -> promise-01, 21 -> arm-01, 18 -> name, 24 -> after, 7 -> down, 1 -> inside, 17 -> country, 23 -> they, 26 -> age-01, 4 -> plane, 11 -> 2, 32 -> demand-01, 14 -> full, 29 -> employment, 20 -> force, 28 -> civilian, 6 -> civilian, 9 -> person, 0 -> airspace, 22 -> retire-01, 16 -> yesterday, 19 -> "Syria", 10 -> fight-01, 3 -> kill-01, 31 -> include-01, 25 -> 58, 13 -> investigate-01),Map(e -> employment, n -> name, 2 -> 2, 5 -> 5, s2 -> shoot-02, t -> they, k -> kill-01, p2 -> person, c4 -> civilian, a3 -> after, s -> survey-01, d -> down, i3 -> include-01, y -> yesterday, g -> guarantee-01, p -> plane, a -> airspace, c3 -> country, d2 -> demand-01, f3 -> force, i2 -> investigate-01, i -> inside, a2 -> arm-01, r -> retire-01, 52 -> 58, c -> civilian, s3 -> sector, f2 -> full, f -> fight-01, p3 -> promise-01, c2 -> claim-01, a4 -> age-01))),[Ljava.lang.String;@5fcc0af6,Annotation([Ljava.lang.String;@4ce3cd9c,[Ljava.lang.String;@7fcfe433,[Ljava.lang.String;@298f11d3),Annotation([Ljava.lang.String;@6fdb48f5,[Ljava.lang.String;@25930632,[Ledu.cmu.lti.nlp.amr.Dependency;@577bcfe3),Annotation([Ljava.lang.String;@18d6cf4,[Ljava.lang.String;@6bec07f7,[Ljava.lang.String;@54ff207b),Annotation([Ljava.lang.String;@39ad96d5,[Ljava.lang.String;@33899788,[Ledu.cmu.lti.nlp.amr.Entity;@e3b7c27))
AMR:
(a2 / arm-01, ARG1, f3 / force)
(a3 / after, op, r / retire-01)
(a4 / age-01, ARG1, t / they)
(c2 / claim-01, ARG1, s2 / shoot-02)
(c3 / country, name, n / name)
(d2 / demand-01, ARG0, t / they)
(d2 / demand-01, ARG1, 52 / 58)
(f / fight-01, ARG0, p2 / person)
(g / guarantee-01, ARG0, c3 / country)
(g / guarantee-01, ARG1, e / employment)
(g / guarantee-01, ARG2, s3 / sector)
(i / inside, op, a / airspace)
(i2 / investigate-01, ARG0, 5 / 5)
(i2 / investigate-01, ARG1, s2 / shoot-02)
(i2 / investigate-01, mod, f2 / full)
(i3 / include-01, ARG1, g / guarantee-01)
(i3 / include-01, ARG2, d2 / demand-01)
(k / kill-01, ARG1, p2 / person)
(k / kill-01, time, i / inside)
(n / name, op, "Syria")
(p2 / person, quant, 2 / 2)
(p3 / promise-01, ARG0, y / yesterday)
(p3 / promise-01, ARG1, f3 / force)
(p3 / promise-01, ARG2, i2 / investigate-01)
(r / retire-01, ARG0, t / they)
(r / retire-01, ARG1, f3 / force)
(s / survey-01, ARG1, s2 / shoot-02)
(s / survey-01, mod, c / civilian)
(s2 / shoot-02, ARG0, p2 / person)
(s2 / shoot-02, ARG1, p / plane)
(s2 / shoot-02, direction, d / down)
(s3 / sector, mod, c4 / civilian)

Decoded in 1,640,690 microseconds
Sentence: on an intermediate platform ali ross a small feisty scotsman promises to get you off it and onto the steeper slopes beyond

Spans:
Span 16-17:  and => and
Span 21-22:  beyond => beyond
Span 2-3:  intermediate => intermediate
Span 15-16:  it => it
Span 14-15:  off => off
Span 17-18:  onto => onto
Span 3-4:  platform => platform
Span 10-11:  promises => promise-01
Span 7-8:  small => small
Span 13-14:  you => you

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),beyond,beyond,false), Span(17,18,List(1),onto,onto,false), Span(16,17,List(2),and,and,false), Span(15,16,List(3),it,it,false), Span(14,15,List(4),off,off,false), Span(13,14,List(5),you,you,false), Span(10,11,List(6),promises,promise-01,false), Span(7,8,List(7),small,small,false), Span(3,4,List(8),platform,platform,false), Span(2,3,List(9),intermediate,intermediate,false)),Map(2 -> and, 5 -> you, 8 -> platform, 7 -> small, 1 -> onto, 4 -> off, 6 -> promise-01, 9 -> intermediate, 0 -> beyond, 3 -> it),Map(b -> beyond, p2 -> platform, s -> small, p -> promise-01, y -> you, a -> and, o2 -> off, i2 -> intermediate, i -> it, o -> onto))),[Ljava.lang.String;@6353ebbd,Annotation([Ljava.lang.String;@1a99f83d,[Ljava.lang.String;@72787a6f,[Ljava.lang.String;@43ae481f),Annotation([Ljava.lang.String;@67010def,[Ljava.lang.String;@7639fabd,[Ledu.cmu.lti.nlp.amr.Dependency;@587ccaee),Annotation([Ljava.lang.String;@68eefca4,[Ljava.lang.String;@220ca8ce,[Ljava.lang.String;@6d1e7dd8),Annotation([Ljava.lang.String;@6cd827df,[Ljava.lang.String;@6321d94c,[Ledu.cmu.lti.nlp.amr.Entity;@43413f6c))
AMR:
(a / and, op, o / onto)
(a / and, op, o2 / off)
(a / and, poss, s / small)
(i2 / intermediate, poss, o / onto)
(o2 / off, op, i / it)
(p / promise-01, ARG0, y / you)
(p / promise-01, ARG1, o2 / off)
(p / promise-01, time, b / beyond)
(p2 / platform, mod, i2 / intermediate)

Decoded in 83,044 microseconds
Sentence: because it pays no commission to intermediaries direct line has promised to cut 20 per cent off the insurance bills of some customers those who have bought their houses in the past five years through one of the main building societies and have continuously insured their properties through them

Spans:
Span 13-14:  20 => 20
Span 41-42:  and => and
Span 0-1:  because => cause-01
Span 19-20:  bills => bill-01
Span 26-27:  bought => buy-01
Span 39-40:  building => build-01
Span 15-16:  cent => (monetary-quantity :unit cent)
Span 4-5:  commission => commission
Span 43-44:  continuously => continue-01
Span 22-23:  customers => customer
Span 7-8:  direct => direct
Span 32-33:  five => 5
Span 28-29:  houses => house
Span 18-19:  insurance => insure-02
Span 44-45:  insured => (person :ARG1-of insure-02)
Span 6-7:  intermediaries => intermediary
Span 1-2:  it => it
Span 8-9:  line => line
Span 38-39:  main => main
Span 3-4:  no => -
Span 16-17:  off => off
Span 31-32:  past => past
Span 2-3:  pays => pay-01
Span 10-11:  promised => promise-01
Span 46-47:  properties => property
Span 40-41:  societies => society
Span 21-22:  some => some
Span 33-34:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),properties,property,false), Span(44,45,List(2, 1),insured,(person :ARG1-of insure-02),false), Span(43,44,List(3),continuously,continue-01,false), Span(41,42,List(4),and,and,false), Span(40,41,List(5),societies,society,false), Span(39,40,List(6),building,build-01,false), Span(38,39,List(7),main,main,false), Span(33,34,List(9, 8),years,(temporal-quantity :unit year),false), Span(32,33,List(10),five,5,false), Span(31,32,List(11),past,past,false), Span(28,29,List(12),houses,house,false), Span(26,27,List(13),bought,buy-01,false), Span(22,23,List(14),customers,customer,false), Span(21,22,List(15),some,some,false), Span(19,20,List(16),bills,bill-01,false), Span(18,19,List(17),insurance,insure-02,false), Span(16,17,List(18),off,off,false), Span(15,16,List(20, 19),cent,(monetary-quantity :unit cent),false), Span(13,14,List(21),20,20,false), Span(10,11,List(22),promised,promise-01,false), Span(8,9,List(23),line,line,false), Span(7,8,List(24),direct,direct,false), Span(6,7,List(25),intermediaries,intermediary,false), Span(4,5,List(26),commission,commission,false), Span(3,4,List(27),no,-,false), Span(2,3,List(28),pays,pay-01,false), Span(1,2,List(29),it,it,false), Span(0,1,List(30),because,cause-01,false)),Map(30 -> cause-01, 2 -> insure-02, 5 -> society, 27 -> -, 12 -> house, 8 -> temporal-quantity, 15 -> some, 21 -> 20, 18 -> off, 24 -> direct, 7 -> main, 1 -> person, 17 -> insure-02, 23 -> line, 26 -> commission, 4 -> and, 11 -> past, 14 -> customer, 29 -> it, 20 -> cent, 28 -> pay-01, 6 -> build-01, 9 -> year, 0 -> property, 22 -> promise-01, 16 -> bill-01, 19 -> monetary-quantity, 10 -> 5, 3 -> continue-01, 25 -> intermediary, 13 -> buy-01),Map(b3 -> bill-01, h -> house, i4 -> it, 2 -> 20, 5 -> 5, p5 -> pay-01, s2 -> some, t -> temporal-quantity, b -> build-01, b2 -> buy-01, m2 -> monetary-quantity, p2 -> person, c4 -> commission, s -> society, m -> main, d -> direct, i3 -> intermediary, y -> year, p -> property, a -> and, c3 -> cent, p4 -> promise-01, i2 -> insure-02, i -> insure-02, - -> -, c -> continue-01, l -> line, o -> off, p3 -> past, c2 -> customer, c5 -> cause-01))),[Ljava.lang.String;@763d6442,Annotation([Ljava.lang.String;@388165b3,[Ljava.lang.String;@373be7c0,[Ljava.lang.String;@3dec0a94),Annotation([Ljava.lang.String;@53aa9a4e,[Ljava.lang.String;@6578a1cb,[Ledu.cmu.lti.nlp.amr.Dependency;@52c64a78),Annotation([Ljava.lang.String;@584336bc,[Ljava.lang.String;@24be9de9,[Ljava.lang.String;@5e713ed7),Annotation([Ljava.lang.String;@5cd4c5b1,[Ljava.lang.String;@14ff1714,[Ledu.cmu.lti.nlp.amr.Entity;@77442cd0))
AMR:
(a / and, op, b2 / buy-01)
(a / and, op, p2 / person)
(b / build-01, ARG0, s / society)
(b2 / buy-01, ARG1, h / house)
(b2 / buy-01, extent, s / society)
(b3 / bill-01, ARG0, l / line)
(b3 / bill-01, ARG1, i2 / insure-02)
(c / continue-01, ARG1, p2 / person)
(c2 / customer, quant, s2 / some)
(c4 / commission, polarity, - / -)
(c5 / cause-01, ARG0, p5 / pay-01)
(i / insure-02, ARG1, p2 / person)
(i / insure-02, ARG2, p / property)
(i2 / insure-02, ARG1, i3 / intermediary)
(l / line, mod, d / direct)
(m2 / monetary-quantity, topic, b3 / bill-01)
(m2 / monetary-quantity, topic, c2 / customer)
(m2 / monetary-quantity, unit, c3 / cent)
(o / off, op, b3 / bill-01)
(p3 / past, op, t / temporal-quantity)
(p4 / promise-01, ARG0, l / line)
(p4 / promise-01, ARG1, p3 / past)
(p4 / promise-01, ARG3, 2 / 20)
(p5 / pay-01, ARG0, i4 / it)
(p5 / pay-01, ARG1, c4 / commission)
(p5 / pay-01, ARG2, l / line)
(p5 / pay-01, ARG3, a / and)
(s / society, mod, m / main)
(t / temporal-quantity, quant, 5 / 5)
(t / temporal-quantity, unit, y / year)

Decoded in 2,877,942 microseconds
Sentence: i promise

Spans:
Span 0-1:  i => i
Span 1-2:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),promise,promise-01,false), Span(0,1,List(1),i,i,false)),Map(1 -> i, 0 -> promise-01),Map(p -> promise-01, i -> i))),[Ljava.lang.String;@1cda48dc,Annotation([Ljava.lang.String;@3ee57250,[Ljava.lang.String;@49b40272,[Ljava.lang.String;@490cb02b),Annotation([Ljava.lang.String;@6001fc84,[Ljava.lang.String;@22696f5a,[Ledu.cmu.lti.nlp.amr.Dependency;@380d8f5c),Annotation([Ljava.lang.String;@23efdc4,[Ljava.lang.String;@75865002,[Ljava.lang.String;@44eeef95),Annotation([Ljava.lang.String;@22b3428e,[Ljava.lang.String;@26d68a6e,[Ledu.cmu.lti.nlp.amr.Entity;@4f1a4fad))
AMR:
(p / promise-01, ARG0, i / i)

Decoded in 2,378 microseconds
Sentence: i promise

Spans:
Span 0-1:  i => i
Span 1-2:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),promise,promise-01,false), Span(0,1,List(1),i,i,false)),Map(1 -> i, 0 -> promise-01),Map(p -> promise-01, i -> i))),[Ljava.lang.String;@48650f6d,Annotation([Ljava.lang.String;@62d7e23c,[Ljava.lang.String;@4b4603d6,[Ljava.lang.String;@61a5fd35),Annotation([Ljava.lang.String;@5892d4a8,[Ljava.lang.String;@fc78f06,[Ledu.cmu.lti.nlp.amr.Dependency;@767edb01),Annotation([Ljava.lang.String;@25c5b6e,[Ljava.lang.String;@7d7693f7,[Ljava.lang.String;@73ec7d7a),Annotation([Ljava.lang.String;@2b22100b,[Ljava.lang.String;@494b584c,[Ledu.cmu.lti.nlp.amr.Entity;@71920b2b))
AMR:
(p / promise-01, ARG0, i / i)

Decoded in 2,281 microseconds
Sentence: ulema do not possess or monopolize a unique mediating role between the believer and god they cannot promise or refuse salvation or grace and the keys to hell or paradise are not in their hands

Spans:
Span 23-24:  and => and
Span 13-14:  and => and
Span 12-13:  believer => believe-01
Span 10-11:  between => between
Span 14-15:  god => god
Span 22-23:  grace => grace-01
Span 34-35:  hands => hand
Span 27-28:  hell => hell
Span 25-26:  keys => key
Span 8-9:  mediating => mediate-01
Span 28-29:  or => or
Span 21-22:  or => or
Span 18-19:  or => or
Span 4-5:  or => or
Span 29-30:  paradise => paradise
Span 3-4:  possess => possess-01
Span 17-18:  promise => promise-01
Span 19-20:  refuse => refuse-01
Span 9-10:  role => role
Span 15-16:  they => they
Span 7-8:  unique => unique

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),hands,hand,false), Span(29,30,List(1),paradise,paradise,false), Span(28,29,List(2),or,or,false), Span(27,28,List(3),hell,hell,false), Span(25,26,List(4),keys,key,false), Span(23,24,List(5),and,and,false), Span(22,23,List(6),grace,grace-01,false), Span(21,22,List(7),or,or,false), Span(19,20,List(8),refuse,refuse-01,false), Span(18,19,List(9),or,or,false), Span(17,18,List(10),promise,promise-01,false), Span(15,16,List(11),they,they,false), Span(14,15,List(12),god,god,false), Span(13,14,List(13),and,and,false), Span(12,13,List(14),believer,believe-01,false), Span(10,11,List(15),between,between,false), Span(9,10,List(16),role,role,false), Span(8,9,List(17),mediating,mediate-01,false), Span(7,8,List(18),unique,unique,false), Span(4,5,List(19),or,or,false), Span(3,4,List(20),possess,possess-01,false)),Map(2 -> or, 5 -> and, 12 -> god, 15 -> between, 8 -> refuse-01, 18 -> unique, 7 -> or, 17 -> mediate-01, 1 -> paradise, 4 -> key, 11 -> they, 14 -> believe-01, 20 -> possess-01, 6 -> grace-01, 0 -> hand, 9 -> or, 16 -> role, 19 -> or, 3 -> hell, 10 -> promise-01, 13 -> and),Map(h -> hand, h2 -> hell, b -> believe-01, k -> key, t -> they, b2 -> between, o3 -> or, p2 -> promise-01, m -> mediate-01, g2 -> god, r2 -> role, p -> paradise, g -> grace-01, a -> and, o2 -> or, a2 -> and, r -> refuse-01, u -> unique, o4 -> or, o -> or, p3 -> possess-01))),[Ljava.lang.String;@2b1b6e4d,Annotation([Ljava.lang.String;@15e69757,[Ljava.lang.String;@55d9dbfc,[Ljava.lang.String;@51f9a96c),Annotation([Ljava.lang.String;@5de21b7f,[Ljava.lang.String;@277b5f00,[Ledu.cmu.lti.nlp.amr.Dependency;@149a0d40),Annotation([Ljava.lang.String;@ddbef51,[Ljava.lang.String;@623cb5f2,[Ljava.lang.String;@7fcd5540),Annotation([Ljava.lang.String;@1981e4d,[Ljava.lang.String;@29ed520c,[Ledu.cmu.lti.nlp.amr.Entity;@1ba5a755))
AMR:
(a / and, op, g / grace-01)
(a / and, op, k / key)
(a / and, op, p2 / promise-01)
(a2 / and, op, b / believe-01)
(a2 / and, op, r2 / role)
(b / believe-01, ARG1, h / hand)
(b2 / between, op, b / believe-01)
(b2 / between, op, g2 / god)
(k / key, beneficiary, o / or)
(o / or, op, h2 / hell)
(o / or, op, p / paradise)
(o3 / or, op, p2 / promise-01)
(o4 / or, op, p3 / possess-01)
(p2 / promise-01, ARG0, t / they)
(p2 / promise-01, ARG1, o2 / or)
(p3 / possess-01, ARG1, r2 / role)
(r / refuse-01, ARG0, t / they)
(r / refuse-01, ARG1, b / believe-01)
(r2 / role, mod, m / mediate-01)
(r2 / role, mod, u / unique)

Decoded in 224,038 microseconds
Sentence: national callups have affected club selection for the poundstretcher national league programme this weekend which promises to test teams who have just found form while offering little hope for those struggling to improve their lot writes bill colwill

Spans:
Span 3-4:  affected => affect-01
Span 36-37:  bill => bill
Span 4-5:  club => club
Span 23-24:  form => form
Span 22-23:  found => find-01
Span 27-28:  hope => hope-01
Span 32-33:  improve => improve-01
Span 21-22:  just => just
Span 10-11:  league => league
Span 26-27:  little => little
Span 34-35:  lot => lot
Span 9-10:  national => nation
Span 0-1:  national => nation
Span 25-26:  offering => offer-01
Span 11-12:  programme => program
Span 15-16:  promises => promise-01
Span 5-6:  selection => select-01
Span 30-31:  struggling => struggle-02
Span 18-19:  teams => team
Span 17-18:  test => test-01
Span 12-13:  this => this
Span 13-14:  weekend => weekend
Span 35-36:  writes => write-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),bill,bill,false), Span(35,36,List(1),writes,write-01,false), Span(34,35,List(2),lot,lot,false), Span(32,33,List(3),improve,improve-01,false), Span(30,31,List(4),struggling,struggle-02,false), Span(27,28,List(5),hope,hope-01,false), Span(26,27,List(6),little,little,false), Span(25,26,List(7),offering,offer-01,false), Span(23,24,List(8),form,form,false), Span(22,23,List(9),found,find-01,false), Span(21,22,List(10),just,just,false), Span(18,19,List(11),teams,team,false), Span(17,18,List(12),test,test-01,false), Span(15,16,List(13),promises,promise-01,false), Span(13,14,List(14),weekend,weekend,false), Span(12,13,List(15),this,this,false), Span(11,12,List(16),programme,program,false), Span(10,11,List(17),league,league,false), Span(9,10,List(18),national,nation,false), Span(5,6,List(19),selection,select-01,false), Span(4,5,List(20),club,club,false), Span(3,4,List(21),affected,affect-01,false), Span(0,1,List(22),national,nation,false)),Map(2 -> lot, 5 -> hope-01, 12 -> test-01, 15 -> this, 8 -> form, 21 -> affect-01, 18 -> nation, 7 -> offer-01, 17 -> league, 1 -> write-01, 4 -> struggle-02, 11 -> team, 14 -> weekend, 20 -> club, 6 -> little, 22 -> nation, 0 -> bill, 9 -> find-01, 16 -> program, 19 -> select-01, 3 -> improve-01, 10 -> just, 13 -> promise-01),Map(n -> nation, w -> write-01, h -> hope-01, s2 -> select-01, b -> bill, t -> team, p2 -> program, l3 -> league, j -> just, s -> struggle-02, t3 -> this, p -> promise-01, a -> affect-01, t2 -> test-01, w2 -> weekend, l2 -> little, i -> improve-01, c -> club, l -> lot, f2 -> find-01, f -> form, o -> offer-01, n2 -> nation))),[Ljava.lang.String;@438cc39e,Annotation([Ljava.lang.String;@4e7edcb7,[Ljava.lang.String;@6acc9aa3,[Ljava.lang.String;@1ebc7a1c),Annotation([Ljava.lang.String;@67f4d407,[Ljava.lang.String;@7a8c4ce2,[Ledu.cmu.lti.nlp.amr.Dependency;@110bc849),Annotation([Ljava.lang.String;@1c8a395d,[Ljava.lang.String;@36bc174e,[Ljava.lang.String;@769e1df4),Annotation([Ljava.lang.String;@6c0bb03,[Ljava.lang.String;@5735c56b,[Ledu.cmu.lti.nlp.amr.Entity;@b342088))
AMR:
(a / affect-01, ARG0, p2 / program)
(a / affect-01, ARG1, s2 / select-01)
(f2 / find-01, ARG0, t / team)
(f2 / find-01, ARG1, f / form)
(f2 / find-01, ARG2, h / hope-01)
(f2 / find-01, time, j / just)
(f2 / find-01, time, w / write-01)
(h / hope-01, ARG1, o / offer-01)
(h / hope-01, mod, l2 / little)
(i / improve-01, ARG1, l / lot)
(i / improve-01, ARG2, w / write-01)
(l3 / league, mod, n / nation)
(o / offer-01, ARG1, n2 / nation)
(p / promise-01, ARG1, w2 / weekend)
(p / promise-01, ARG2, t2 / test-01)
(p2 / program, mod, l3 / league)
(s / struggle-02, ARG1, i / improve-01)
(s2 / select-01, ARG1, c / club)
(t2 / test-01, ARG0, p2 / program)
(t2 / test-01, ARG1, t / team)
(w / write-01, ARG1, b / bill)
(w2 / weekend, mod, t3 / this)

Decoded in 1,171,562 microseconds
Sentence: district councils have promised to give nonprofitmaking organisations generous rate relief

Spans:
Span 1-2:  councils => council
Span 0-1:  district => district
Span 8-9:  generous => generous-41
Span 5-6:  give => give-01
Span 7-8:  organisations => organization
Span 3-4:  promised => promise-01
Span 9-10:  rate => rate
Span 10-11:  relief => relieve-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),relief,relieve-01,false), Span(9,10,List(1),rate,rate,false), Span(8,9,List(2),generous,generous-41,false), Span(7,8,List(3),organisations,organization,false), Span(5,6,List(4),give,give-01,false), Span(3,4,List(5),promised,promise-01,false), Span(1,2,List(6),councils,council,false), Span(0,1,List(7),district,district,false)),Map(2 -> generous-41, 5 -> promise-01, 7 -> district, 1 -> rate, 4 -> give-01, 6 -> council, 0 -> relieve-01, 3 -> organization),Map(d -> district, p -> promise-01, g2 -> give-01, g -> generous-41, r2 -> rate, r -> relieve-01, c -> council, o -> organization))),[Ljava.lang.String;@b43c677,Annotation([Ljava.lang.String;@e9ab468,[Ljava.lang.String;@4eba1f55,[Ljava.lang.String;@1d5f2dd4),Annotation([Ljava.lang.String;@53b9c85c,[Ljava.lang.String;@4a113af5,[Ledu.cmu.lti.nlp.amr.Dependency;@3135d0d0),Annotation([Ljava.lang.String;@442020ed,[Ljava.lang.String;@1951ca8c,[Ljava.lang.String;@48c8ba50),Annotation([Ljava.lang.String;@723fff84,[Ljava.lang.String;@47a06db5,[Ledu.cmu.lti.nlp.amr.Entity;@7582aacf))
AMR:
(c / council, mod, d / district)
(g / generous-41, ARG1, r / relieve-01)
(g2 / give-01, ARG1, r / relieve-01)
(g2 / give-01, ARG2, o / organization)
(p / promise-01, ARG0, c / council)
(p / promise-01, ARG2, g2 / give-01)
(r / relieve-01, ARG3, r2 / rate)

Decoded in 71,442 microseconds
Sentence: the yugoslav federal president janez drnovsek has promised mr vlasi a free public trial but this looks unlikely in a climate of albanian civil disorder in kosovo and pressure within serbia for mr vlasis conviction

NER Entity: (thing :name (name :op "albanian"))
NER Entity: (country :name (name :op "serbia"))
Spans:
Span 27-28:  and => and
Span 14-15:  but => contrast-01
Span 23-24:  civil => civil
Span 20-21:  climate => climate
Span 34-35:  conviction => convict-01
Span 2-3:  federal => federal
Span 11-12:  free => free-41
Span 16-17:  looks => look-02
Span 3-4:  president => (have-org-role-91 :ARG2 president)
Span 28-29:  pressure => pressure-01
Span 7-8:  promised => promise-01
Span 12-13:  public => public
Span 15-16:  this => this
Span 13-14:  trial => trial
Span 17-18:  unlikely => (likely :polarity -)
Span 29-30:  within => within

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),conviction,convict-01,false), Span(29,30,List(1),within,within,false), Span(28,29,List(2),pressure,pressure-01,false), Span(27,28,List(3),and,and,false), Span(23,24,List(4),civil,civil,false), Span(20,21,List(5),climate,climate,false), Span(17,18,List(7, 6),unlikely,(likely :polarity -),false), Span(16,17,List(8),looks,look-02,false), Span(15,16,List(9),this,this,false), Span(14,15,List(10),but,contrast-01,false), Span(13,14,List(11),trial,trial,false), Span(12,13,List(12),public,public,false), Span(11,12,List(13),free,free-41,false), Span(7,8,List(14),promised,promise-01,false), Span(3,4,List(16, 15),president,(have-org-role-91 :ARG2 president),false), Span(2,3,List(17),federal,federal,false)),Map(2 -> pressure-01, 5 -> climate, 12 -> public, 15 -> have-org-role-91, 8 -> look-02, 7 -> -, 17 -> federal, 1 -> within, 4 -> civil, 11 -> trial, 14 -> promise-01, 6 -> likely, 0 -> convict-01, 9 -> this, 16 -> president, 3 -> and, 10 -> contrast-01, 13 -> free-41),Map(w -> within, h -> have-org-role-91, t -> this, p2 -> public, c4 -> contrast-01, p -> pressure-01, a -> and, c3 -> climate, p4 -> president, t2 -> trial, l2 -> look-02, c -> convict-01, f2 -> federal, l -> likely, f -> free-41, p3 -> promise-01, c2 -> civil))),[Ljava.lang.String;@559c384e,Annotation([Ljava.lang.String;@334b4cb,[Ljava.lang.String;@79497d11,[Ljava.lang.String;@47b2254c),Annotation([Ljava.lang.String;@aec55a,[Ljava.lang.String;@521e980f,[Ledu.cmu.lti.nlp.amr.Dependency;@56912ae7),Annotation([Ljava.lang.String;@5497d017,[Ljava.lang.String;@3adec164,[Ljava.lang.String;@766aaa6d),Annotation([Ljava.lang.String;@54db16d7,[Ljava.lang.String;@7bb8a8c6,[Ledu.cmu.lti.nlp.amr.Entity;@18509e9f))
AMR:
(a / and, op, c / convict-01)
(a / and, op, l / likely)
(a / and, op, l2 / look-02)
(a / and, op, p / pressure-01)
(c4 / contrast-01, ARG1, p3 / promise-01)
(c4 / contrast-01, ARG2, l2 / look-02)
(f / free-41, ARG1, t2 / trial)
(h / have-org-role-91, ARG0, f2 / federal)
(h / have-org-role-91, ARG1, c2 / civil)
(h / have-org-role-91, ARG2, p4 / president)
(l / likely, polarity, -)
(l2 / look-02, ARG0, t / this)
(l2 / look-02, ARG1, c3 / climate)
(p / pressure-01, location, w / within)
(p3 / promise-01, ARG0, h / have-org-role-91)
(p3 / promise-01, ARG1, t2 / trial)
(t2 / trial, mod, p2 / public)

Decoded in 189,470 microseconds
Sentence: up the empire to a group of communist students from the uk gathered at the bar of his hotel promises to do something about the blooming awful state of soviet plumbing and ends up making a deal with stalin with the insouciance of george formby addressing himself to hitler

NER Entity: (country :name (name :op "uk"))
NER Entity: (country :name (name :op "soviet"))
Spans:
Span 45-46:  addressing => address-02
Span 31-32:  and => and
Span 26-27:  awful => awful
Span 15-16:  bar => bar-01
Span 7-8:  communist => communism
Span 36-37:  deal => deal-01
Span 2-3:  empire => empire
Span 32-33:  ends => end-01
Span 12-13:  gathered => gather-01
Span 5-6:  group => group
Span 18-19:  hotel => hotel
Span 19-20:  promises => promise-01
Span 22-23:  something => something
Span 27-28:  state => state
Span 8-9:  students => (person :ARG0-of study-01)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),addressing,address-02,false), Span(36,37,List(1),deal,deal-01,false), Span(32,33,List(2),ends,end-01,false), Span(31,32,List(3),and,and,false), Span(27,28,List(4),state,state,false), Span(26,27,List(5),awful,awful,false), Span(22,23,List(6),something,something,false), Span(19,20,List(7),promises,promise-01,false), Span(18,19,List(8),hotel,hotel,false), Span(15,16,List(9),bar,bar-01,false), Span(12,13,List(10),gathered,gather-01,false), Span(8,9,List(12, 11),students,(person :ARG0-of study-01),false), Span(7,8,List(13),communist,communism,false), Span(5,6,List(14),group,group,false), Span(2,3,List(15),empire,empire,false)),Map(2 -> end-01, 5 -> awful, 12 -> study-01, 15 -> empire, 8 -> hotel, 7 -> promise-01, 1 -> deal-01, 4 -> state, 11 -> person, 14 -> group, 6 -> something, 0 -> address-02, 9 -> bar-01, 3 -> and, 10 -> gather-01, 13 -> communism),Map(e -> end-01, h -> hotel, s2 -> something, b -> bar-01, e2 -> empire, p2 -> person, a3 -> awful, s -> state, d -> deal-01, g2 -> group, p -> promise-01, g -> gather-01, a -> address-02, a2 -> and, c -> communism, s3 -> study-01))),[Ljava.lang.String;@33f21f7e,Annotation([Ljava.lang.String;@5cf1a3d6,[Ljava.lang.String;@7c3b6645,[Ljava.lang.String;@1fb77bbb),Annotation([Ljava.lang.String;@471c4241,[Ljava.lang.String;@1041dde0,[Ledu.cmu.lti.nlp.amr.Dependency;@544da576),Annotation([Ljava.lang.String;@35aa1137,[Ljava.lang.String;@30504d67,[Ljava.lang.String;@6809bdf8),Annotation([Ljava.lang.String;@57971a24,[Ljava.lang.String;@1355e69,[Ledu.cmu.lti.nlp.amr.Entity;@56c9401d))
AMR:
(a2 / and, op, e / end-01)
(a2 / and, op, g / gather-01)
(b / bar-01, ARG1, p / promise-01)
(d / deal-01, ARG1, a / address-02)
(e / end-01, ARG0, s2 / something)
(e / end-01, ARG1, d / deal-01)
(g / gather-01, ARG0, e2 / empire)
(g / gather-01, ARG1, b / bar-01)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, time, h / hotel)
(p2 / person, consist, g2 / group)
(p2 / person, mod, c / communism)
(s / state, degree, a3 / awful)
(s2 / something, prep-in, s / state)
(s3 / study-01, ARG0, p2 / person)

Decoded in 258,549 microseconds
Sentence: we were promised two hostesses

Spans:
Span 2-3:  promised => promise-01
Span 3-4:  two => 2
Span 0-1:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),two,2,false), Span(2,3,List(1),promised,promise-01,false), Span(0,1,List(2),we,we,false)),Map(2 -> we, 1 -> promise-01, 0 -> 2),Map(w -> we, 2 -> 2, p -> promise-01))),[Ljava.lang.String;@36905c6e,Annotation([Ljava.lang.String;@3fa455be,[Ljava.lang.String;@3df94d96,[Ljava.lang.String;@3a54d2a3),Annotation([Ljava.lang.String;@16d0e940,[Ljava.lang.String;@6d817473,[Ledu.cmu.lti.nlp.amr.Dependency;@4e04622f),Annotation([Ljava.lang.String;@1ca23ad,[Ljava.lang.String;@7dec33c5,[Ljava.lang.String;@1e3b0b19),Annotation([Ljava.lang.String;@3655a5d0,[Ljava.lang.String;@30f9168e,[Ledu.cmu.lti.nlp.amr.Entity;@3137ddc0))
AMR:
(2 / 2, op, w / we)
(p / promise-01, ARG1, w / we)

Decoded in 4,906 microseconds
Sentence: my local host the tourist authority had promised the food would be superb

Spans:
Span 5-6:  authority => authority
Span 9-10:  food => food
Span 2-3:  host => host-01
Span 1-2:  local => local
Span 7-8:  promised => promise-01
Span 4-5:  tourist => (person :ARG0-of tour-01)

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),food,food,false), Span(7,8,List(1),promised,promise-01,false), Span(5,6,List(2),authority,authority,false), Span(4,5,List(4, 3),tourist,(person :ARG0-of tour-01),false), Span(2,3,List(5),host,host-01,false), Span(1,2,List(6),local,local,false)),Map(2 -> authority, 5 -> host-01, 1 -> promise-01, 4 -> tour-01, 6 -> local, 0 -> food, 3 -> person),Map(h -> host-01, t -> tour-01, p2 -> person, p -> promise-01, a -> authority, l -> local, f -> food))),[Ljava.lang.String;@4abf817e,Annotation([Ljava.lang.String;@62ce9d88,[Ljava.lang.String;@6ac87e65,[Ljava.lang.String;@10e24fa8),Annotation([Ljava.lang.String;@79dba740,[Ljava.lang.String;@43c19940,[Ledu.cmu.lti.nlp.amr.Dependency;@5b345b80),Annotation([Ljava.lang.String;@4a635f47,[Ljava.lang.String;@42045478,[Ljava.lang.String;@2a45b424),Annotation([Ljava.lang.String;@4635bd2a,[Ljava.lang.String;@72163468,[Ledu.cmu.lti.nlp.amr.Entity;@fcad25c))
AMR:
(a / authority, mod, p2 / person)
(h / host-01, mod, l / local)
(p / promise-01, ARG0, a / authority)
(p / promise-01, ARG1, f / food)
(p / promise-01, time, h / host-01)
(t / tour-01, ARG0, p2 / person)

Decoded in 115,911 microseconds
Sentence: the udf promised to improve the education system by injecting money and giving a better deal than we now have she said

Spans:
Span 11-12:  and => and
Span 15-16:  deal => deal-01
Span 6-7:  education => educate-01
Span 4-5:  improve => improve-01
Span 10-11:  money => money
Span 18-19:  now => now
Span 2-3:  promised => promise-01
Span 21-22:  said => say-01
Span 20-21:  she => she
Span 7-8:  system => system
Span 17-18:  we => we

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),said,say-01,false), Span(20,21,List(1),she,she,false), Span(18,19,List(2),now,now,false), Span(17,18,List(3),we,we,false), Span(15,16,List(4),deal,deal-01,false), Span(11,12,List(5),and,and,false), Span(10,11,List(6),money,money,false), Span(7,8,List(7),system,system,false), Span(6,7,List(8),education,educate-01,false), Span(4,5,List(9),improve,improve-01,false), Span(2,3,List(10),promised,promise-01,false)),Map(2 -> now, 5 -> and, 8 -> educate-01, 7 -> system, 1 -> she, 4 -> deal-01, 6 -> money, 9 -> improve-01, 0 -> say-01, 10 -> promise-01, 3 -> we),Map(e -> educate-01, w -> we, n -> now, s2 -> she, s -> say-01, m -> money, d -> deal-01, p -> promise-01, a -> and, i -> improve-01, s3 -> system))),[Ljava.lang.String;@4cb89e1d,Annotation([Ljava.lang.String;@6c94a944,[Ljava.lang.String;@13f4e70d,[Ljava.lang.String;@336d10b7),Annotation([Ljava.lang.String;@3d6478c1,[Ljava.lang.String;@f33e664,[Ledu.cmu.lti.nlp.amr.Dependency;@185ab708),Annotation([Ljava.lang.String;@6ba67ab5,[Ljava.lang.String;@7ec23849,[Ljava.lang.String;@fd81a3),Annotation([Ljava.lang.String;@349f4d7,[Ljava.lang.String;@6c6950f0,[Ledu.cmu.lti.nlp.amr.Entity;@7640f42a))
AMR:
(a / and, op, m / money)
(d / deal-01, ARG0, s2 / she)
(d / deal-01, ARG1, w / we)
(e / educate-01, ARG1, n / now)
(i / improve-01, ARG1, s3 / system)
(i / improve-01, manner, a / and)
(p / promise-01, ARG2, i / improve-01)
(s / say-01, ARG0, s2 / she)
(s / say-01, ARG1, a / and)
(s3 / system, mod, e / educate-01)

Decoded in 334,067 microseconds
Sentence: fox had promised the job to the players union secretary in august as a plank in his own election platform only to be overruled by the committee who insisted that taylor should be interviewed along with the three other shortlisted candidates

Spans:
Span 34-35:  along => along
Span 11-12:  august => (date-entity :month 8)
Span 40-41:  candidates => candidate
Span 26-27:  committee => committee
Span 18-19:  election => elect-01
Span 28-29:  insisted => insist-01
Span 33-34:  interviewed => interview-01
Span 4-5:  job => job
Span 20-21:  only => only
Span 38-39:  other => other
Span 19-20:  platform => platform
Span 7-8:  players => (person :ARG0-of play-01)
Span 2-3:  promised => promise-01
Span 9-10:  secretary => secretary
Span 31-32:  should => recommend-01
Span 37-38:  three => 3
Span 8-9:  union => union

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),candidates,candidate,false), Span(38,39,List(1),other,other,false), Span(37,38,List(2),three,3,false), Span(34,35,List(3),along,along,false), Span(33,34,List(4),interviewed,interview-01,false), Span(31,32,List(5),should,recommend-01,false), Span(28,29,List(6),insisted,insist-01,false), Span(26,27,List(7),committee,committee,false), Span(20,21,List(8),only,only,false), Span(19,20,List(9),platform,platform,false), Span(18,19,List(10),election,elect-01,false), Span(11,12,List(12, 11),august,(date-entity :month 8),false), Span(9,10,List(13),secretary,secretary,false), Span(8,9,List(14),union,union,false), Span(7,8,List(16, 15),players,(person :ARG0-of play-01),false), Span(4,5,List(17),job,job,false), Span(2,3,List(18),promised,promise-01,false)),Map(2 -> 3, 5 -> recommend-01, 12 -> 8, 15 -> person, 8 -> only, 18 -> promise-01, 7 -> committee, 17 -> job, 1 -> other, 4 -> interview-01, 11 -> date-entity, 14 -> union, 6 -> insist-01, 0 -> candidate, 9 -> platform, 16 -> play-01, 3 -> along, 10 -> elect-01, 13 -> secretary),Map(e -> elect-01, 8 -> 8, p2 -> person, j -> job, s -> secretary, d -> date-entity, p -> platform, a -> along, p4 -> promise-01, o2 -> only, i2 -> insist-01, i -> interview-01, r -> recommend-01, c -> candidate, u -> union, o -> other, p3 -> play-01, 3 -> 3, c2 -> committee))),[Ljava.lang.String;@225e2e0d,Annotation([Ljava.lang.String;@5521691b,[Ljava.lang.String;@47b9747,[Ljava.lang.String;@4e08b89d),Annotation([Ljava.lang.String;@1e907371,[Ljava.lang.String;@1d8b0f64,[Ledu.cmu.lti.nlp.amr.Dependency;@149f7d63),Annotation([Ljava.lang.String;@72e0f928,[Ljava.lang.String;@1005ec04,[Ljava.lang.String;@74ca02d3),Annotation([Ljava.lang.String;@7a7fa68b,[Ljava.lang.String;@528f2e81,[Ledu.cmu.lti.nlp.amr.Entity;@3636417f))
AMR:
(c / candidate, mod, o / other)
(c / candidate, quant, 3 / 3)
(d / date-entity, month, 8 / 8)
(e / elect-01, time, d / date-entity)
(i / interview-01, ARG1, p2 / person)
(i / interview-01, ARG2, a / along)
(i / interview-01, medium, c / candidate)
(i2 / insist-01, ARG0, c2 / committee)
(i2 / insist-01, ARG1, r / recommend-01)
(p / platform, mod, o2 / only)
(p / platform, topic, e / elect-01)
(p3 / play-01, ARG0, p2 / person)
(p4 / promise-01, ARG1, p2 / person)
(p4 / promise-01, ARG2, j / job)
(p4 / promise-01, time, d / date-entity)
(r / recommend-01, ARG1, i / interview-01)
(s / secretary, mod, d / date-entity)
(s / secretary, mod, u / union)

Decoded in 220,694 microseconds
Sentence: i should think the dogs of stratforduponavon are delighted with the councils collection  well yesterdays forecast promised you snow and this was the result

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = i should think the dogs of stratforduponavon are delighted with the councils collection  well yesterdays forecast promised you snow and this was the result
myTokenized = i should think the dogs of stratforduponavon are delighted with the councils collection well yesterdays forecast promised you snow and this was the result
i = 13
prefix = List(i, should, think, the, dogs, of, stratforduponavon, are, delighted, with, the, councils, collection, well)
regexr = \Qi\E ?\Qs\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qn\E ?\Qk\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qd\E ?\Qo\E ?\Qg\E ?\Qs\E ?\Qo\E ?\Qf\E ?\Qs\E ?\Qt\E ?\Qr\E ?\Qa\E ?\Qt\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qd\E ?\Qu\E ?\Qp\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Qv\E ?\Qo\E ?\Qn\E ?\Qa\E ?\Qr\E ?\Qe\E ?\Qd\E ?\Qe\E ?\Ql\E ?\Qi\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qe\E ?\Qd\E ?\Qw\E ?\Qi\E ?\Qt\E ?\Qh\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qc\E ?\Qo\E ?\Qu\E ?\Qn\E ?\Qc\E ?\Qi\E ?\Ql\E ?\Qs\E ?\Qc\E ?\Qo\E ?\Ql\E ?\Ql\E ?\Qe\E ?\Qc\E ?\Qt\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qw\E ?\Qe\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: but kings taunton are currently unbeaten and promise much

Spans:
Span 6-7:  and => and
Span 0-1:  but => contrast-01
Span 4-5:  currently => current
Span 8-9:  much => much
Span 7-8:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),much,much,false), Span(7,8,List(1),promise,promise-01,false), Span(6,7,List(2),and,and,false), Span(4,5,List(3),currently,current,false), Span(0,1,List(4),but,contrast-01,false)),Map(2 -> and, 1 -> promise-01, 4 -> contrast-01, 0 -> much, 3 -> current),Map(m -> much, p -> promise-01, a -> and, c -> current, c2 -> contrast-01))),[Ljava.lang.String;@b35f26b,Annotation([Ljava.lang.String;@2be548d,[Ljava.lang.String;@1da0f663,[Ljava.lang.String;@328fecc7),Annotation([Ljava.lang.String;@70216c0,[Ljava.lang.String;@1a239ad8,[Ledu.cmu.lti.nlp.amr.Dependency;@178ae850),Annotation([Ljava.lang.String;@2099e843,[Ljava.lang.String;@585f976d,[Ljava.lang.String;@6bcea26e),Annotation([Ljava.lang.String;@4b0a1b0d,[Ljava.lang.String;@47618f8,[Ledu.cmu.lti.nlp.amr.Entity;@65614411))
AMR:
(a / and, mod, c / current)
(a / and, op, p / promise-01)
(c2 / contrast-01, ARG2, a / and)
(m / much, op, a / and)

Decoded in 11,181 microseconds
Sentence: a department of education spokesman said ministers are studying the question of increased flexibility for immigrants from hong kong as promised by the prime minister in parliament last week

NER Entity: (country :name (name :op "hong" :op "kong"))
Spans:
Span 1-2:  department => department
Span 3-4:  education => educate-01
Span 13-14:  flexibility => flexibility
Span 17-19:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 15-16:  immigrants => (person :ARG0-of immigrate-01)
Span 12-13:  increased => increase-01
Span 27-28:  last => last
Span 24-25:  minister => (have-org-role-91 :ARG2 minister)
Span 6-7:  ministers => (have-org-role-91 :ARG2 minister)
Span 26-27:  parliament => (government-organization :name (name :op "Parliament"))
Span 23-24:  prime => prime
Span 20-21:  promised => promise-01
Span 10-11:  question => question-01
Span 5-6:  said => say-01
Span 4-5:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 8-9:  studying => study-01
Span 28-29:  week => week

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),week,week,false), Span(27,28,List(1),last,last,false), Span(26,27,List(4, 3, 2),parliament,(government-organization :name (name :op "Parliament")),false), Span(24,25,List(6, 5),minister,(have-org-role-91 :ARG2 minister),false), Span(23,24,List(7),prime,prime,false), Span(20,21,List(8),promised,promise-01,false), Span(17,19,List(12, 11, 10, 9),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(15,16,List(14, 13),immigrants,(person :ARG0-of immigrate-01),false), Span(13,14,List(15),flexibility,flexibility,false), Span(12,13,List(16),increased,increase-01,false), Span(10,11,List(17),question,question-01,false), Span(8,9,List(18),studying,study-01,false), Span(6,7,List(20, 19),ministers,(have-org-role-91 :ARG2 minister),false), Span(5,6,List(21),said,say-01,false), Span(4,5,List(23, 22),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(3,4,List(24),education,educate-01,false), Span(1,2,List(25),department,department,false)),Map(2 -> government-organization, 5 -> have-org-role-91, 12 -> "kong", 8 -> promise-01, 15 -> flexibility, 21 -> say-01, 18 -> study-01, 24 -> educate-01, 7 -> prime, 1 -> last, 17 -> question-01, 23 -> spokesman, 4 -> "Parliament", 11 -> "hong", 14 -> immigrate-01, 20 -> minister, 6 -> minister, 9 -> country, 0 -> week, 22 -> have-org-role-91, 16 -> increase-01, 19 -> have-org-role-91, 10 -> name, 3 -> name, 25 -> department, 13 -> person),Map(e -> educate-01, w -> week, n -> name, h -> have-org-role-91, q -> question-01, s2 -> say-01, h2 -> have-org-role-91, m2 -> minister, p2 -> promise-01, s -> study-01, d -> department, m -> minister, g -> government-organization, p -> prime, i2 -> increase-01, i -> immigrate-01, s3 -> spokesman, h3 -> have-org-role-91, c -> country, l -> last, f -> flexibility, p3 -> person, n2 -> name))),[Ljava.lang.String;@1def8b6c,Annotation([Ljava.lang.String;@59aa6ece,[Ljava.lang.String;@4450c45f,[Ljava.lang.String;@128c5c03),Annotation([Ljava.lang.String;@3cecd278,[Ljava.lang.String;@5fede387,[Ledu.cmu.lti.nlp.amr.Dependency;@7af4e544),Annotation([Ljava.lang.String;@63f8126c,[Ljava.lang.String;@3381a3ba,[Ljava.lang.String;@42422c1),Annotation([Ljava.lang.String;@6065af06,[Ljava.lang.String;@33c5e45b,[Ledu.cmu.lti.nlp.amr.Entity;@5132ceb))
AMR:
(c / country, name, n2 / name)
(f / flexibility, poss, p3 / person)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, m / minister)
(h / have-org-role-91, time, w / week)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, m2 / minister)
(h3 / have-org-role-91, ARG0, p3 / person)
(h3 / have-org-role-91, ARG1, e / educate-01)
(h3 / have-org-role-91, ARG2, s3 / spokesman)
(i / immigrate-01, ARG0, p3 / person)
(i / immigrate-01, ARG1, c / country)
(i2 / increase-01, ARG1, f / flexibility)
(m / minister, mod, p / prime)
(n / name, op, "Parliament")
(n2 / name, op, "hong")
(n2 / name, op, "kong")
(p2 / promise-01, ARG0, c / country)
(q / question-01, location, f / flexibility)
(s / study-01, ARG1, q / question-01)
(s2 / say-01, ARG0, d / department)
(s2 / say-01, ARG1, s / study-01)
(w / week, mod, l / last)

Decoded in 462,774 microseconds
Sentence: the application to the council of state recalls that in the bill proclaiming the referendum the french government promised not to amnesty anyone who was guilty of violent crimes

Spans:
Span 21-22:  amnesty => amnesty
Span 22-23:  anyone => anyone
Span 1-2:  application => apply-01
Span 11-12:  bill => bill
Span 4-5:  council => council
Span 28-29:  crimes => crime
Span 16-17:  french => (country :name (name :op "France"))
Span 25-26:  guilty => guilty-41
Span 18-19:  promised => promise-01
Span 7-8:  recalls => recall-02
Span 14-15:  referendum => referendum
Span 6-7:  state => state
Span 27-28:  violent => violent

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),crimes,crime,false), Span(27,28,List(1),violent,violent,false), Span(25,26,List(2),guilty,guilty-41,false), Span(22,23,List(3),anyone,anyone,false), Span(21,22,List(4),amnesty,amnesty,false), Span(18,19,List(5),promised,promise-01,false), Span(16,17,List(8, 7, 6),french,(country :name (name :op "France")),false), Span(14,15,List(9),referendum,referendum,false), Span(11,12,List(10),bill,bill,false), Span(7,8,List(11),recalls,recall-02,false), Span(6,7,List(12),state,state,false), Span(4,5,List(13),council,council,false), Span(1,2,List(14),application,apply-01,false)),Map(2 -> guilty-41, 5 -> promise-01, 12 -> state, 8 -> "France", 7 -> name, 1 -> violent, 4 -> amnesty, 11 -> recall-02, 14 -> apply-01, 6 -> country, 0 -> crime, 9 -> referendum, 3 -> anyone, 10 -> bill, 13 -> council),Map(n -> name, b -> bill, a3 -> apply-01, s -> state, v -> violent, g -> guilty-41, p -> promise-01, r2 -> recall-02, a -> anyone, c3 -> council, a2 -> amnesty, r -> referendum, c -> crime, c2 -> country))),[Ljava.lang.String;@2de9fae7,Annotation([Ljava.lang.String;@5c576b3d,[Ljava.lang.String;@6f41a127,[Ljava.lang.String;@3dbb4081),Annotation([Ljava.lang.String;@5087f4d0,[Ljava.lang.String;@dd9acfe,[Ledu.cmu.lti.nlp.amr.Dependency;@4dec5ecc),Annotation([Ljava.lang.String;@5943cb0b,[Ljava.lang.String;@71c76cf5,[Ljava.lang.String;@5bc2832e),Annotation([Ljava.lang.String;@3f327012,[Ljava.lang.String;@85bce28,[Ledu.cmu.lti.nlp.amr.Entity;@433ba861))
AMR:
(a3 / apply-01, ARG0, b / bill)
(a3 / apply-01, ARG1, r / referendum)
(a3 / apply-01, ARG2, c3 / council)
(c / crime, mod, v / violent)
(c2 / country, name, n / name)
(g / guilty-41, ARG0, c2 / country)
(g / guilty-41, ARG1, a / anyone)
(g / guilty-41, ARG2, c / crime)
(n / name, op, "France")
(p / promise-01, ARG1, a / anyone)
(p / promise-01, ARG2, a2 / amnesty)
(r2 / recall-02, ARG0, a3 / apply-01)
(r2 / recall-02, ARG1, p / promise-01)
(r2 / recall-02, time, s / state)

Decoded in 373,764 microseconds
Sentence: sir robert appeared to rule out any deal to save the ravenscraig strip mill pointing out that bs had never promised to consider private bids for it

Spans:
Span 6-7:  any => any
Span 2-3:  appeared => appear-01
Span 22-23:  consider => consider-02
Span 7-8:  deal => deal-01
Span 26-27:  it => it
Span 14-15:  pointing => point-02
Span 23-24:  private => private
Span 20-21:  promised => promise-01
Span 4-5:  rule => rule-03
Span 9-10:  save => save-02
Span 12-13:  strip => strip-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),it,it,false), Span(23,24,List(1),private,private,false), Span(22,23,List(2),consider,consider-02,false), Span(20,21,List(3),promised,promise-01,false), Span(14,15,List(4),pointing,point-02,false), Span(12,13,List(5),strip,strip-01,false), Span(9,10,List(6),save,save-02,false), Span(7,8,List(7),deal,deal-01,false), Span(6,7,List(8),any,any,false), Span(4,5,List(9),rule,rule-03,false), Span(2,3,List(10),appeared,appear-01,false)),Map(2 -> consider-02, 5 -> strip-01, 8 -> any, 7 -> deal-01, 1 -> private, 4 -> point-02, 6 -> save-02, 9 -> rule-03, 0 -> it, 10 -> appear-01, 3 -> promise-01),Map(s2 -> save-02, p2 -> promise-01, s -> strip-01, d -> deal-01, p -> private, a -> any, a2 -> appear-01, r -> rule-03, i -> it, c -> consider-02, p3 -> point-02))),[Ljava.lang.String;@1ab9ac3,Annotation([Ljava.lang.String;@293d7910,[Ljava.lang.String;@2d71e97,[Ljava.lang.String;@79194cf5),Annotation([Ljava.lang.String;@6c0ba6ef,[Ljava.lang.String;@70fccc53,[Ledu.cmu.lti.nlp.amr.Dependency;@64ca9718),Annotation([Ljava.lang.String;@3085dc5a,[Ljava.lang.String;@2445b199,[Ljava.lang.String;@5b8ec669),Annotation([Ljava.lang.String;@7a844674,[Ljava.lang.String;@22da883,[Ledu.cmu.lti.nlp.amr.Entity;@3923193))
AMR:
(a2 / appear-01, ARG0, p / private)
(a2 / appear-01, ARG1, r / rule-03)
(c / consider-02, ARG1, i / it)
(d / deal-01, ARG1, s2 / save-02)
(d / deal-01, mod, a / any)
(p2 / promise-01, ARG1, c / consider-02)
(p3 / point-02, ARG1, p2 / promise-01)
(r / rule-03, ARG1, d / deal-01)
(s / strip-01, ARG1, d / deal-01)
(s2 / save-02, ARG1, p3 / point-02)

Decoded in 80,447 microseconds
Sentence: the cable channel cnn promises viewers of its twiceweekly show that they will see a sensual blonde ritually humiliating balding middleaged white males in public

Spans:
Span 16-17:  blonde => blonde
Span 1-2:  cable => cable
Span 2-3:  channel => channel
Span 22-23:  males => male
Span 4-5:  promises => promise-01
Span 24-25:  public => public
Span 17-18:  ritually => ritual
Span 13-14:  see => see-01
Span 9-10:  show => show-01
Span 11-12:  they => they
Span 5-6:  viewers => (person :ARG0-of view-01)
Span 21-22:  white => white

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),public,public,false), Span(22,23,List(1),males,male,false), Span(21,22,List(2),white,white,false), Span(17,18,List(3),ritually,ritual,false), Span(16,17,List(4),blonde,blonde,false), Span(13,14,List(5),see,see-01,false), Span(11,12,List(6),they,they,false), Span(9,10,List(7),show,show-01,false), Span(5,6,List(9, 8),viewers,(person :ARG0-of view-01),false), Span(4,5,List(10),promises,promise-01,false), Span(2,3,List(11),channel,channel,false), Span(1,2,List(12),cable,cable,false)),Map(2 -> white, 5 -> see-01, 12 -> cable, 8 -> person, 7 -> show-01, 1 -> male, 4 -> blonde, 11 -> channel, 6 -> they, 0 -> public, 9 -> view-01, 3 -> ritual, 10 -> promise-01),Map(w -> white, s2 -> show-01, b -> blonde, t -> they, p2 -> person, s -> see-01, v -> view-01, m -> male, p -> public, r -> ritual, c -> channel, p3 -> promise-01, c2 -> cable))),[Ljava.lang.String;@1d3639a5,Annotation([Ljava.lang.String;@53028e9e,[Ljava.lang.String;@4ce151a5,[Ljava.lang.String;@5cb74f11),Annotation([Ljava.lang.String;@6a814a5,[Ljava.lang.String;@4e3600d,[Ledu.cmu.lti.nlp.amr.Dependency;@6bb6f7fc),Annotation([Ljava.lang.String;@3952f8a3,[Ljava.lang.String;@7641b2bb,[Ljava.lang.String;@533d4fa4),Annotation([Ljava.lang.String;@5e37c2ad,[Ljava.lang.String;@1ece1c2e,[Ledu.cmu.lti.nlp.amr.Entity;@6d9c1fce))
AMR:
(c / channel, mod, c2 / cable)
(m / male, location, p / public)
(m / male, mod, w / white)
(p / public, poss, t / they)
(p3 / promise-01, ARG0, c / channel)
(p3 / promise-01, ARG1, p2 / person)
(r / ritual, mod, b / blonde)
(s / see-01, ARG0, t / they)
(s / see-01, ARG1, r / ritual)
(s2 / show-01, ARG2, s / see-01)
(v / view-01, ARG0, p2 / person)
(v / view-01, ARG1, s2 / show-01)

Decoded in 319,677 microseconds
Sentence: rather different to the falling fares we have been promised from deregulation and greater aircraft efficiency

Spans:
Span 14-15:  aircraft => aircraft
Span 12-13:  and => and
Span 11-12:  deregulation => deregulate-01
Span 1-2:  different => differ-02
Span 15-16:  efficiency => efficiency
Span 4-5:  falling => fall-01
Span 5-6:  fares => fare
Span 13-14:  greater => great
Span 9-10:  promised => promise-01
Span 6-7:  we => we

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),efficiency,efficiency,false), Span(14,15,List(1),aircraft,aircraft,false), Span(13,14,List(2),greater,great,false), Span(12,13,List(3),and,and,false), Span(11,12,List(4),deregulation,deregulate-01,false), Span(9,10,List(5),promised,promise-01,false), Span(6,7,List(6),we,we,false), Span(5,6,List(7),fares,fare,false), Span(4,5,List(8),falling,fall-01,false), Span(1,2,List(9),different,differ-02,false)),Map(2 -> great, 5 -> promise-01, 8 -> fall-01, 7 -> fare, 1 -> aircraft, 4 -> deregulate-01, 6 -> we, 9 -> differ-02, 0 -> efficiency, 3 -> and),Map(w -> we, e -> efficiency, d -> deregulate-01, p -> promise-01, g -> great, a -> aircraft, d2 -> differ-02, a2 -> and, f2 -> fall-01, f -> fare))),[Ljava.lang.String;@24ec459a,Annotation([Ljava.lang.String;@13cd9466,[Ljava.lang.String;@1dc9beb2,[Ljava.lang.String;@2806a765),Annotation([Ljava.lang.String;@4cd7ec6a,[Ljava.lang.String;@73e24a8f,[Ledu.cmu.lti.nlp.amr.Dependency;@d8d2db9),Annotation([Ljava.lang.String;@2fb4d3a2,[Ljava.lang.String;@8b24926,[Ljava.lang.String;@70e0623f),Annotation([Ljava.lang.String;@1b524ffe,[Ljava.lang.String;@3901bab5,[Ledu.cmu.lti.nlp.amr.Entity;@2088de50))
AMR:
(a2 / and, op, d / deregulate-01)
(a2 / and, op, e / efficiency)
(d2 / differ-02, ARG1, f / fare)
(e / efficiency, mod, a / aircraft)
(e / efficiency, mod, g / great)
(f2 / fall-01, ARG1, w / we)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, w / we)
(p / promise-01, ARG2, f / fare)

Decoded in 216,942 microseconds
Sentence: addressing 80000 people in a north indian field mr gandhi promised to restore a mythical hindu kingdom of perfection under the deity ram if his party won on 22 24 and 26 november

Spans:
Span 28-29:  22 => 22
Span 29-30:  24 => 24
Span 31-32:  26 => 26
Span 0-1:  addressing => address-02
Span 30-31:  and => and
Span 7-8:  field => field
Span 16-17:  kingdom => kingdom
Span 5-6:  north => north
Span 32-33:  november => (date-entity :month 11)
Span 25-26:  party => party
Span 10-11:  promised => promise-01
Span 12-13:  restore => restore-01
Span 26-27:  won => win-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(1, 0),november,(date-entity :month 11),false), Span(31,32,List(2),26,26,false), Span(30,31,List(3),and,and,false), Span(29,30,List(4),24,24,false), Span(28,29,List(5),22,22,false), Span(26,27,List(6),won,win-01,false), Span(25,26,List(7),party,party,false), Span(16,17,List(8),kingdom,kingdom,false), Span(12,13,List(9),restore,restore-01,false), Span(10,11,List(10),promised,promise-01,false), Span(7,8,List(11),field,field,false), Span(5,6,List(12),north,north,false), Span(0,1,List(13),addressing,address-02,false)),Map(2 -> 26, 5 -> 22, 12 -> north, 8 -> kingdom, 7 -> party, 1 -> 11, 4 -> 24, 11 -> field, 6 -> win-01, 0 -> date-entity, 9 -> restore-01, 3 -> and, 10 -> promise-01, 13 -> address-02),Map(w -> win-01, n -> north, 2 -> 26, k -> kingdom, p2 -> promise-01, d -> date-entity, 1 -> 11, 23 -> 22, p -> party, a -> and, a2 -> address-02, r -> restore-01, 22 -> 24, f -> field))),[Ljava.lang.String;@79bb66df,Annotation([Ljava.lang.String;@7e5ef8e8,[Ljava.lang.String;@d278829,[Ljava.lang.String;@1e5c427e),Annotation([Ljava.lang.String;@3b116dc4,[Ljava.lang.String;@753d7d27,[Ledu.cmu.lti.nlp.amr.Dependency;@17e3c793),Annotation([Ljava.lang.String;@6b439025,[Ljava.lang.String;@20aca427,[Ljava.lang.String;@264d0d33),Annotation([Ljava.lang.String;@c9da2ea,[Ljava.lang.String;@4132b71e,[Ledu.cmu.lti.nlp.amr.Entity;@68943402))
AMR:
(22 / 24, quant, 23 / 22)
(a / and, op, w / win-01)
(a2 / address-02, ARG3, p2 / promise-01)
(d / date-entity, month, 1 / 11)
(p2 / promise-01, ARG0, 2 / 26)
(p2 / promise-01, ARG1, f / field)
(p2 / promise-01, ARG2, r / restore-01)
(r / restore-01, ARG0, 23 / 22)
(r / restore-01, ARG1, k / kingdom)
(r / restore-01, ARG2, w / win-01)
(w / win-01, ARG0, p / party)
(w / win-01, ARG1, n / north)
(w / win-01, time, d / date-entity)

Decoded in 225,874 microseconds
Sentence: the government has since promised more complex measures first to restrict unofficial strikes such as those on the london underground and second to stop official strikes in essential services such as british rail

NER Entity: (organization :name (name :op "london" :op "underground"))
NER Entity: (organization :name (name :op "british" :op "rail"))
Spans:
Span 20-21:  and => and
Span 31-33:  british rail => (organization :name (name :op "british" :op "rail"))
Span 6-7:  complex => complex
Span 27-28:  essential => essential
Span 18-20:  london underground => (organization :name (name :op "london" :op "underground"))
Span 7-8:  measures => measure
Span 24-25:  official => (have-org-role-91 :ARG2 official)
Span 4-5:  promised => promise-01
Span 10-11:  restrict => restrict-01
Span 28-29:  services => service
Span 3-4:  since => since
Span 23-24:  stop => stop-01
Span 25-26:  strikes => strike-01
Span 12-13:  strikes => strike-01
Span 29-30:  such => such
Span 13-14:  such => such

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,33,List(3, 2, 1, 0),british rail,(organization :name (name :op "british" :op "rail")),false), Span(29,30,List(4),such,such,false), Span(28,29,List(5),services,service,false), Span(27,28,List(6),essential,essential,false), Span(25,26,List(7),strikes,strike-01,false), Span(24,25,List(9, 8),official,(have-org-role-91 :ARG2 official),false), Span(23,24,List(10),stop,stop-01,false), Span(20,21,List(11),and,and,false), Span(18,20,List(15, 14, 13, 12),london underground,(organization :name (name :op "london" :op "underground")),false), Span(13,14,List(16),such,such,false), Span(12,13,List(17),strikes,strike-01,false), Span(10,11,List(18),restrict,restrict-01,false), Span(7,8,List(19),measures,measure,false), Span(6,7,List(20),complex,complex,false), Span(4,5,List(21),promised,promise-01,false), Span(3,4,List(22),since,since,false)),Map(2 -> "british", 5 -> service, 12 -> organization, 15 -> "underground", 8 -> have-org-role-91, 21 -> promise-01, 18 -> restrict-01, 7 -> strike-01, 17 -> strike-01, 1 -> name, 4 -> such, 11 -> and, 14 -> "london", 20 -> complex, 6 -> essential, 22 -> since, 0 -> organization, 9 -> official, 16 -> such, 19 -> measure, 3 -> "rail", 10 -> stop-01, 13 -> name),Map(e -> essential, s5 -> such, n -> name, h -> have-org-role-91, s2 -> service, o3 -> organization, s -> such, s4 -> stop-01, m -> measure, s7 -> since, p -> promise-01, a -> and, o2 -> official, r -> restrict-01, c -> complex, s3 -> strike-01, s6 -> strike-01, o -> organization, n2 -> name))),[Ljava.lang.String;@2ebaf851,Annotation([Ljava.lang.String;@7504a5ce,[Ljava.lang.String;@421b367,[Ljava.lang.String;@4089314f),Annotation([Ljava.lang.String;@6f045aa2,[Ljava.lang.String;@6da7a9f,[Ledu.cmu.lti.nlp.amr.Dependency;@71a8603c),Annotation([Ljava.lang.String;@65463d6f,[Ljava.lang.String;@666b765a,[Ljava.lang.String;@1927433e),Annotation([Ljava.lang.String;@60afa858,[Ljava.lang.String;@2c555aff,[Ledu.cmu.lti.nlp.amr.Entity;@17c93216))
AMR:
(a / and, op, o3 / organization)
(h / have-org-role-91, ARG1, o3 / organization)
(h / have-org-role-91, ARG2, o2 / official)
(m / measure, mod, c / complex)
(n / name, op, "british")
(n / name, op, "rail")
(n2 / name, op, "london")
(n2 / name, op, "underground")
(o / organization, name, n / name)
(o3 / organization, name, n2 / name)
(p / promise-01, ARG1, m / measure)
(p / promise-01, ARG2, r / restrict-01)
(p / promise-01, time, s7 / since)
(r / restrict-01, ARG1, s6 / strike-01)
(r / restrict-01, ARG2, s4 / stop-01)
(s / such, mod, s2 / service)
(s2 / service, mod, e / essential)
(s2 / service, poss, o / organization)
(s3 / strike-01, ARG1, s2 / service)
(s3 / strike-01, mod, h / have-org-role-91)
(s4 / stop-01, ARG1, s3 / strike-01)
(s6 / strike-01, ARG1, s5 / such)

Decoded in 602,579 microseconds
Sentence: they turned their attention to the 25yearold welshman after failing to persuade liverpool to enter into a similar agreement promising them first refusal in the event of peter beardsley becoming available for transfer

Spans:
Span 8-9:  after => after
Span 18-19:  agreement => agree-01
Span 3-4:  attention => attention
Span 30-31:  available => available
Span 29-30:  becoming => become-01
Span 14-15:  enter => enter-01
Span 25-26:  event => event
Span 9-10:  failing => fail-01
Span 11-12:  persuade => persuade-01
Span 19-20:  promising => promise-01
Span 22-23:  refusal => refuse-01
Span 0-1:  they => they
Span 32-33:  transfer => transfer-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),transfer,transfer-01,false), Span(30,31,List(1),available,available,false), Span(29,30,List(2),becoming,become-01,false), Span(25,26,List(3),event,event,false), Span(22,23,List(4),refusal,refuse-01,false), Span(19,20,List(5),promising,promise-01,false), Span(18,19,List(6),agreement,agree-01,false), Span(14,15,List(7),enter,enter-01,false), Span(11,12,List(8),persuade,persuade-01,false), Span(9,10,List(9),failing,fail-01,false), Span(8,9,List(10),after,after,false), Span(3,4,List(11),attention,attention,false), Span(0,1,List(12),they,they,false)),Map(2 -> become-01, 5 -> promise-01, 12 -> they, 8 -> persuade-01, 7 -> enter-01, 1 -> available, 4 -> refuse-01, 11 -> attention, 6 -> agree-01, 0 -> transfer-01, 9 -> fail-01, 3 -> event, 10 -> after),Map(e -> event, t -> transfer-01, b -> become-01, e2 -> enter-01, p2 -> persuade-01, a3 -> after, p -> promise-01, a -> available, t2 -> they, r -> refuse-01, a2 -> agree-01, f -> fail-01, a4 -> attention))),[Ljava.lang.String;@19f74e8d,Annotation([Ljava.lang.String;@3b46184c,[Ljava.lang.String;@76e543fa,[Ljava.lang.String;@45d20f11),Annotation([Ljava.lang.String;@61db48e6,[Ljava.lang.String;@38f263b,[Ledu.cmu.lti.nlp.amr.Dependency;@2b16ed50),Annotation([Ljava.lang.String;@6e363549,[Ljava.lang.String;@28e48426,[Ljava.lang.String;@329fefc3),Annotation([Ljava.lang.String;@2236052c,[Ljava.lang.String;@88d9d40,[Ledu.cmu.lti.nlp.amr.Entity;@94ed923))
AMR:
(a3 / after, op, f / fail-01)
(a4 / attention, poss, t2 / they)
(b / become-01, ARG1, e / event)
(b / become-01, ARG2, a / available)
(e2 / enter-01, ARG1, a2 / agree-01)
(f / fail-01, ARG0, t2 / they)
(f / fail-01, ARG2, p2 / persuade-01)
(p / promise-01, ARG1, a2 / agree-01)
(p / promise-01, ARG2, r / refuse-01)
(p2 / persuade-01, ARG2, e2 / enter-01)
(r / refuse-01, ARG1, e / event)
(t / transfer-01, ARG0, e / event)

Decoded in 87,350 microseconds
Sentence: chay promised her that by the time she returned even if she were please god to be back by the following afternoon he would have found a sweet little house for them

Spans:
Span 21-22:  afternoon => afternoon
Span 17-18:  back => back
Span 25-26:  found => find-01
Span 14-15:  god => god
Span 22-23:  he => he
Span 29-30:  house => house
Span 28-29:  little => little
Span 13-14:  please => please-01
Span 1-2:  promised => promise-01
Span 8-9:  returned => return-01
Span 11-12:  she => she
Span 7-8:  she => she
Span 27-28:  sweet => sweet
Span 6-7:  time => time

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),house,house,false), Span(28,29,List(1),little,little,false), Span(27,28,List(2),sweet,sweet,false), Span(25,26,List(3),found,find-01,false), Span(22,23,List(4),he,he,false), Span(21,22,List(5),afternoon,afternoon,false), Span(17,18,List(6),back,back,false), Span(14,15,List(7),god,god,false), Span(13,14,List(8),please,please-01,false), Span(11,12,List(9),she,she,false), Span(8,9,List(10),returned,return-01,false), Span(7,8,List(11),she,she,false), Span(6,7,List(12),time,time,false), Span(1,2,List(13),promised,promise-01,false)),Map(2 -> sweet, 5 -> afternoon, 12 -> time, 8 -> please-01, 7 -> god, 1 -> little, 4 -> he, 11 -> she, 6 -> back, 0 -> house, 9 -> she, 3 -> find-01, 10 -> return-01, 13 -> promise-01),Map(h -> house, h2 -> he, s2 -> she, b -> back, t -> time, p2 -> promise-01, s -> sweet, g -> god, p -> please-01, a -> afternoon, r -> return-01, s3 -> she, l -> little, f -> find-01))),[Ljava.lang.String;@54e7c733,Annotation([Ljava.lang.String;@3cc710d1,[Ljava.lang.String;@31212883,[Ljava.lang.String;@77eac9a7),Annotation([Ljava.lang.String;@575d3072,[Ljava.lang.String;@2717b92d,[Ledu.cmu.lti.nlp.amr.Dependency;@67e4d68),Annotation([Ljava.lang.String;@4e0bea2c,[Ljava.lang.String;@703b16bb,[Ljava.lang.String;@3751888d),Annotation([Ljava.lang.String;@49dbfd5a,[Ljava.lang.String;@9d64598,[Ledu.cmu.lti.nlp.amr.Entity;@52730333))
AMR:
(f / find-01, ARG0, h2 / he)
(f / find-01, ARG1, h / house)
(f / find-01, duration, a / afternoon)
(h / house, mod, l / little)
(h / house, mod, s / sweet)
(p / please-01, ARG0, g / god)
(p / please-01, ARG1, s2 / she)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, b / back)
(p2 / promise-01, purpose, t / time)
(r / return-01, ARG0, s2 / she)
(r / return-01, ARG1, s3 / she)
(r / return-01, time, t / time)

Decoded in 666,413 microseconds
Sentence: libra sept 24oct 23 if youve been prevaricating procrastinating or putting off until tomorrow what should be done today youll be pleased to know that tomorrows here  nows your chance to clear any backlog of correspondence tasks or chores youve been promising to catch up with and by july 29th youll be giving yourself a pat on the back

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = libra sept 24oct 23 if youve been prevaricating procrastinating or putting off until tomorrow what should be done today youll be pleased to know that tomorrows here  nows your chance to clear any backlog of correspondence tasks or chores youve been promising to catch up with and by july 29th youll be giving yourself a pat on the back
myTokenized = libra sept 24oct 23 if youve been prevaricating procrastinating or putting off until tomorrow what should be done today youll be pleased to know that tomorrows here nows your chance to clear any backlog of correspondence tasks or chores youve been promising to catch up with and by july 29th youll be giving yourself a pat on the back
i = 27
prefix = List(libra, sept, 24oct, 23, if, youve, been, prevaricating, procrastinating, or, putting, off, until, tomorrow, what, should, be, done, today, youll, be, pleased, to, know, that, tomorrows, here, nows)
regexr = \Ql\E ?\Qi\E ?\Qb\E ?\Qr\E ?\Qa\E ?\Qs\E ?\Qe\E ?\Qp\E ?\Qt\E ?\Q2\E ?\Q4\E ?\Qo\E ?\Qc\E ?\Qt\E ?\Q2\E ?\Q3\E ?\Qi\E ?\Qf\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qv\E ?\Qe\E ?\Qb\E ?\Qe\E ?\Qe\E ?\Qn\E ?\Qp\E ?\Qr\E ?\Qe\E ?\Qv\E ?\Qa\E ?\Qr\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qc\E ?\Qr\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qo\E ?\Qr\E ?\Qp\E ?\Qu\E ?\Qt\E ?\Qt\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qo\E ?\Qf\E ?\Qf\E ?\Qu\E ?\Qn\E ?\Qt\E ?\Qi\E ?\Ql\E ?\Qt\E ?\Qo\E ?\Qm\E ?\Qo\E ?\Qr\E ?\Qr\E ?\Qo\E ?\Qw\E ?\Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qs\E ?\Qh\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qb\E ?\Qe\E ?\Qd\E ?\Qo\E ?\Qn\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qd\E ?\Qa\E ?\Qy\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Ql\E ?\Qb\E ?\Qe\E ?\Qp\E ?\Ql\E ?\Qe\E ?\Qa\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qo\E ?\Qk\E ?\Qn\E ?\Qo\E ?\Qw\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qt\E ?\Qo\E ?\Qm\E ?\Qo\E ?\Qr\E ?\Qr\E ?\Qo\E ?\Qw\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qn\E ?\Qo\E ?\Qw\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: beirut appeared poised for a brutal and decisive battle last night as more than 8000 syrian troops with artillery and armour converged on the front lines above the presidential palace where the christian general michel aoun dismissed hours earlier by lebanons newlyelected president elias hrawi promised to fight to the death rather than submit to the wishes of the syrianbacked and internationally recognised government

NER Entity: (thing :name (name :op "syrian"))
NER Entity: (person :name (name :op "michel" :op "aoun"))
NER Entity: (person :name (name :op "elias" :op "hrawi"))
Spans:
Span 14-15:  8000 => 8000
Span 26-27:  above => above
Span 60-61:  and => and
Span 19-20:  and => and
Span 6-7:  and => and
Span 1-2:  appeared => appear-01
Span 20-21:  armour => armour
Span 18-19:  artillery => artillery
Span 8-9:  battle => battle-01
Span 5-6:  brutal => brutal
Span 32-33:  christian => (religious-group :name (name :op "Christian"))
Span 21-22:  converged => converge-01
Span 50-51:  death => die-01
Span 7-8:  decisive => decisive
Span 36-37:  dismissed => dismiss-01
Span 38-39:  earlier => early
Span 43-45:  elias hrawi => (person :name (name :op "elias" :op "hrawi"))
Span 47-48:  fight => fight-01
Span 24-25:  front => front
Span 33-34:  general => general
Span 37-38:  hours => (temporal-quantity :unit hour)
Span 61-62:  internationally => international
Span 9-10:  last => last
Span 25-26:  lines => line
Span 34-36:  michel aoun => (person :name (name :op "michel" :op "aoun"))
Span 10-11:  night => night
Span 2-3:  poised => poise-01
Span 42-43:  president => (have-org-role-91 :ARG2 president)
Span 28-29:  presidential => (have-org-role-91 :ARG2 president)
Span 45-46:  promised => promise-01
Span 62-63:  recognised => recognize-01
Span 53-54:  submit => submit-01
Span 16-17:  troops => troop
Span 56-57:  wishes => wish-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(62,63,List(0),recognised,recognize-01,false), Span(61,62,List(1),internationally,international,false), Span(60,61,List(2),and,and,false), Span(56,57,List(3),wishes,wish-01,false), Span(53,54,List(4),submit,submit-01,false), Span(50,51,List(5),death,die-01,false), Span(47,48,List(6),fight,fight-01,false), Span(45,46,List(7),promised,promise-01,false), Span(43,45,List(11, 10, 9, 8),elias hrawi,(person :name (name :op "elias" :op "hrawi")),false), Span(42,43,List(13, 12),president,(have-org-role-91 :ARG2 president),false), Span(38,39,List(14),earlier,early,false), Span(37,38,List(16, 15),hours,(temporal-quantity :unit hour),false), Span(36,37,List(17),dismissed,dismiss-01,false), Span(34,36,List(21, 20, 19, 18),michel aoun,(person :name (name :op "michel" :op "aoun")),false), Span(33,34,List(22),general,general,false), Span(32,33,List(25, 24, 23),christian,(religious-group :name (name :op "Christian")),false), Span(28,29,List(27, 26),presidential,(have-org-role-91 :ARG2 president),false), Span(26,27,List(28),above,above,false), Span(25,26,List(29),lines,line,false), Span(24,25,List(30),front,front,false), Span(21,22,List(31),converged,converge-01,false), Span(20,21,List(32),armour,armour,false), Span(19,20,List(33),and,and,false), Span(18,19,List(34),artillery,artillery,false), Span(16,17,List(35),troops,troop,false), Span(14,15,List(36),8000,8000,false), Span(10,11,List(37),night,night,false), Span(9,10,List(38),last,last,false), Span(8,9,List(39),battle,battle-01,false), Span(7,8,List(40),decisive,decisive,false), Span(6,7,List(41),and,and,false), Span(5,6,List(42),brutal,brutal,false), Span(2,3,List(43),poised,poise-01,false), Span(1,2,List(44),appeared,appear-01,false)),Map(39 -> battle-01, 30 -> front, 2 -> and, 5 -> die-01, 33 -> and, 27 -> president, 12 -> have-org-role-91, 8 -> person, 15 -> temporal-quantity, 42 -> brutal, 36 -> 8000, 21 -> "aoun", 18 -> person, 24 -> name, 41 -> and, 35 -> troop, 7 -> promise-01, 1 -> international, 17 -> dismiss-01, 44 -> appear-01, 23 -> religious-group, 38 -> last, 26 -> have-org-role-91, 4 -> submit-01, 11 -> "hrawi", 32 -> armour, 14 -> early, 29 -> line, 20 -> "michel", 34 -> artillery, 28 -> above, 6 -> fight-01, 40 -> decisive, 43 -> poise-01, 9 -> name, 0 -> recognize-01, 22 -> general, 16 -> hour, 37 -> night, 19 -> name, 10 -> "elias", 3 -> wish-01, 31 -> converge-01, 25 -> "Christian", 13 -> president),Map(a7 -> appear-01, e -> early, n -> name, w -> wish-01, h -> have-org-role-91, h2 -> hour, p5 -> president, t -> temporal-quantity, b -> battle-01, b2 -> brutal, d3 -> decisive, 8 -> 8000, p2 -> person, n4 -> night, a3 -> armour, s -> submit-01, a6 -> and, d -> die-01, r2 -> religious-group, p -> promise-01, g -> general, a -> and, n3 -> name, p4 -> person, a5 -> artillery, d2 -> dismiss-01, t2 -> troop, l2 -> last, i -> international, r -> recognize-01, a2 -> above, c -> converge-01, h3 -> have-org-role-91, p6 -> poise-01, f2 -> front, l -> line, f -> fight-01, p3 -> president, n2 -> name, a4 -> and))),[Ljava.lang.String;@51658c66,Annotation([Ljava.lang.String;@61e4a649,[Ljava.lang.String;@6a6134d4,[Ljava.lang.String;@13d380dc),Annotation([Ljava.lang.String;@22b0f5af,[Ljava.lang.String;@fd1c5f4,[Ledu.cmu.lti.nlp.amr.Dependency;@151b1e49),Annotation([Ljava.lang.String;@27615572,[Ljava.lang.String;@6730c390,[Ljava.lang.String;@327757dd),Annotation([Ljava.lang.String;@3929880d,[Ljava.lang.String;@55a32acc,[Ledu.cmu.lti.nlp.amr.Entity;@4b4ee300))
AMR:
(a / and, op, r / recognize-01)
(a2 / above, degree, l / line)
(a4 / and, op, a3 / armour)
(a4 / and, op, a5 / artillery)
(a6 / and, op, b2 / brutal)
(a6 / and, op, d3 / decisive)
(a7 / appear-01, ARG2, p6 / poise-01)
(b / battle-01, ARG1, n4 / night)
(b / battle-01, ARG2, a6 / and)
(c / converge-01, ARG0, a4 / and)
(c / converge-01, ARG1, p4 / person)
(c / converge-01, ARG2, t2 / troop)
(d2 / dismiss-01, ARG0, p4 / person)
(d2 / dismiss-01, ARG1, e / early)
(e / early, quant, t / temporal-quantity)
(f / fight-01, ARG2, d / die-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p3 / president)
(h3 / have-org-role-91, ARG0, p2 / person)
(h3 / have-org-role-91, ARG2, p5 / president)
(l / line, mod, f2 / front)
(n / name, op, "elias")
(n / name, op, "hrawi")
(n2 / name, op, "aoun")
(n2 / name, op, "michel")
(n3 / name, op, "Christian")
(n4 / night, mod, l2 / last)
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, p4 / person)
(p / promise-01, ARG2, f / fight-01)
(p2 / person, name, n / name)
(p4 / person, mod, g / general)
(p4 / person, mod, r2 / religious-group)
(p4 / person, name, n2 / name)
(p6 / poise-01, ARG0, a6 / and)
(p6 / poise-01, ARG1, a2 / above)
(p6 / poise-01, time, c / converge-01)
(r / recognize-01, mod, i / international)
(r2 / religious-group, name, n3 / name)
(s / submit-01, ARG0, p2 / person)
(s / submit-01, ARG2, w / wish-01)
(t / temporal-quantity, unit, h2 / hour)
(t2 / troop, quant, 8 / 8000)
(w / wish-01, ARG0, a / and)

Decoded in 1,492,889 microseconds
Sentence: albanias ambassador to italy said last night that the tirana government had promised to issue passports and exit visas to all refugees in foreign embassies who had committed no crime

NER Entity: (country :name (name :op "italy"))
NER Entity: (country :name (name :op "tirana"))
NER Entity: (country :name (name :op "italy"))
Spans:
Span 20-21:  all => all
Span 1-2:  ambassador => (have-org-role-91 :ARG2 ambassador)
Span 16-17:  and => and
Span 27-28:  committed => commit-01
Span 29-30:  crime => crime
Span 24-25:  embassies => embassy
Span 17-18:  exit => exit-01
Span 23-24:  foreign => foreign
Span 14-15:  issue => issue
Span 3-4:  italy => (country :name (name :op "Italy"))
Span 5-6:  last => last
Span 6-7:  night => night
Span 28-29:  no => -
Span 15-16:  passports => passport
Span 12-13:  promised => promise-01
Span 21-22:  refugees => refugee
Span 4-5:  said => say-01
Span 18-19:  visas => visa

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),crime,crime,false), Span(28,29,List(1),no,-,false), Span(27,28,List(2),committed,commit-01,false), Span(24,25,List(3),embassies,embassy,false), Span(23,24,List(4),foreign,foreign,false), Span(21,22,List(5),refugees,refugee,false), Span(20,21,List(6),all,all,false), Span(18,19,List(7),visas,visa,false), Span(17,18,List(8),exit,exit-01,false), Span(16,17,List(9),and,and,false), Span(15,16,List(10),passports,passport,false), Span(14,15,List(11),issue,issue,false), Span(12,13,List(12),promised,promise-01,false), Span(6,7,List(13),night,night,false), Span(5,6,List(14),last,last,false), Span(4,5,List(15),said,say-01,false), Span(3,4,List(18, 17, 16),italy,(country :name (name :op "Italy")),false), Span(1,2,List(20, 19),ambassador,(have-org-role-91 :ARG2 ambassador),false)),Map(2 -> commit-01, 5 -> refugee, 12 -> promise-01, 15 -> say-01, 8 -> exit-01, 18 -> "Italy", 7 -> visa, 17 -> name, 1 -> -, 4 -> foreign, 11 -> issue, 14 -> last, 20 -> ambassador, 6 -> all, 0 -> crime, 9 -> and, 16 -> country, 19 -> have-org-role-91, 3 -> embassy, 10 -> passport, 13 -> night),Map(e -> embassy, n -> night, h -> have-org-role-91, e2 -> exit-01, p2 -> promise-01, a3 -> ambassador, s -> say-01, v -> visa, p -> passport, c3 -> country, a -> all, r -> refugee, a2 -> and, i -> issue, - -> -, c -> crime, l -> last, f -> foreign, n2 -> name, c2 -> commit-01))),[Ljava.lang.String;@109999f1,Annotation([Ljava.lang.String;@5449a5ba,[Ljava.lang.String;@2f1f8191,[Ljava.lang.String;@3d736ec2),Annotation([Ljava.lang.String;@656ca212,[Ljava.lang.String;@3f047fc3,[Ledu.cmu.lti.nlp.amr.Dependency;@405ffb87),Annotation([Ljava.lang.String;@5d7a7d15,[Ljava.lang.String;@14aa1da5,[Ljava.lang.String;@2c80463c),Annotation([Ljava.lang.String;@198323f7,[Ljava.lang.String;@70ae3a36,[Ledu.cmu.lti.nlp.amr.Entity;@3e6fe905))
AMR:
(a2 / and, op, e2 / exit-01)
(a2 / and, op, p / passport)
(c2 / commit-01, ARG0, p / passport)
(c2 / commit-01, ARG1, c / crime)
(c2 / commit-01, ARG2, e / embassy)
(c2 / commit-01, polarity, - / -)
(c3 / country, name, n2 / name)
(e / embassy, mod, f / foreign)
(e2 / exit-01, ARG2, r / refugee)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, a3 / ambassador)
(n / night, mod, l / last)
(n2 / name, op, "Italy")
(p2 / promise-01, ARG1, i / issue)
(p2 / promise-01, ARG2, a2 / and)
(r / refugee, quant, a / all)
(s / say-01, ARG0, c3 / country)
(s / say-01, ARG1, p2 / promise-01)
(s / say-01, time, n / night)
(v / visa, mod, e2 / exit-01)

Decoded in 477,719 microseconds
Sentence: festival organisers say the emphasis is on enjoying music and promise something for everyone whether young or old beginner or virtuoso performer or listener

Spans:
Span 9-10:  and => and
Span 4-5:  emphasis => emphasize-01
Span 7-8:  enjoying => enjoy-01
Span 13-14:  everyone => everyone
Span 0-1:  festival => festival
Span 8-9:  music => music
Span 17-18:  old => old
Span 22-23:  or => or
Span 19-20:  or => or
Span 16-17:  or => or
Span 21-22:  performer => (person :ARG0-of perform-01)
Span 10-11:  promise => promise-01
Span 2-3:  say => say-01
Span 11-12:  something => something
Span 15-16:  young => young

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),or,or,false), Span(21,22,List(2, 1),performer,(person :ARG0-of perform-01),false), Span(19,20,List(3),or,or,false), Span(17,18,List(4),old,old,false), Span(16,17,List(5),or,or,false), Span(15,16,List(6),young,young,false), Span(13,14,List(7),everyone,everyone,false), Span(11,12,List(8),something,something,false), Span(10,11,List(9),promise,promise-01,false), Span(9,10,List(10),and,and,false), Span(8,9,List(11),music,music,false), Span(7,8,List(12),enjoying,enjoy-01,false), Span(4,5,List(13),emphasis,emphasize-01,false), Span(2,3,List(14),say,say-01,false), Span(0,1,List(15),festival,festival,false)),Map(2 -> perform-01, 5 -> or, 12 -> enjoy-01, 15 -> festival, 8 -> something, 7 -> everyone, 1 -> person, 4 -> old, 11 -> music, 14 -> say-01, 6 -> young, 0 -> or, 9 -> promise-01, 3 -> or, 10 -> and, 13 -> emphasize-01),Map(e -> everyone, s2 -> say-01, o3 -> old, p2 -> perform-01, e2 -> enjoy-01, s -> something, m -> music, p -> person, y -> young, a -> and, o2 -> or, f -> festival, o -> or, o4 -> or, e3 -> emphasize-01, p3 -> promise-01))),[Ljava.lang.String;@252b6749,Annotation([Ljava.lang.String;@4489fcaf,[Ljava.lang.String;@3f2c6850,[Ljava.lang.String;@7c747c96),Annotation([Ljava.lang.String;@439f9baf,[Ljava.lang.String;@23a620d8,[Ledu.cmu.lti.nlp.amr.Dependency;@6fb65730),Annotation([Ljava.lang.String;@2c16499c,[Ljava.lang.String;@6b3ab760,[Ljava.lang.String;@5bdd369f),Annotation([Ljava.lang.String;@182d2fd7,[Ljava.lang.String;@3e9fd8a7,[Ledu.cmu.lti.nlp.amr.Entity;@7048dc0f))
AMR:
(a / and, op, e2 / enjoy-01)
(a / and, op, p3 / promise-01)
(e2 / enjoy-01, ARG0, e3 / emphasize-01)
(e2 / enjoy-01, ARG1, s / something)
(e2 / enjoy-01, ARG2, o / or)
(e3 / emphasize-01, ARG1, e / everyone)
(o / or, op, m / music)
(o / or, op, o4 / or)
(o2 / or, op, o4 / or)
(o2 / or, op, p / person)
(o4 / or, op, o3 / old)
(o4 / or, op, y / young)
(p2 / perform-01, ARG0, p / person)
(s2 / say-01, ARG0, f / festival)
(s2 / say-01, ARG1, a / and)

Decoded in 438,142 microseconds
Sentence: recent buys in exeter and lanzarote promise to boost margins

NER Entity: (country :name (name :op "exeter"))
Spans:
Span 4-5:  and => and
Span 8-9:  boost => boost-01
Span 1-2:  buys => buy-01
Span 9-10:  margins => margin
Span 6-7:  promise => promise-01
Span 0-1:  recent => recent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),margins,margin,false), Span(8,9,List(1),boost,boost-01,false), Span(6,7,List(2),promise,promise-01,false), Span(4,5,List(3),and,and,false), Span(1,2,List(4),buys,buy-01,false), Span(0,1,List(5),recent,recent,false)),Map(2 -> promise-01, 5 -> recent, 1 -> boost-01, 4 -> buy-01, 0 -> margin, 3 -> and),Map(b -> boost-01, b2 -> buy-01, m -> margin, p -> promise-01, a -> and, r -> recent))),[Ljava.lang.String;@3f679660,Annotation([Ljava.lang.String;@29c19925,[Ljava.lang.String;@652d618d,[Ljava.lang.String;@65fa3e0),Annotation([Ljava.lang.String;@70ffca64,[Ljava.lang.String;@2940a531,[Ledu.cmu.lti.nlp.amr.Dependency;@531d491f),Annotation([Ljava.lang.String;@27abbcda,[Ljava.lang.String;@7bfba08e,[Ljava.lang.String;@44ea0a39),Annotation([Ljava.lang.String;@61454787,[Ljava.lang.String;@b5b21f5,[Ledu.cmu.lti.nlp.amr.Entity;@c1261a6))
AMR:
(b / boost-01, ARG1, m / margin)
(b2 / buy-01, ARG1, a / and)
(b2 / buy-01, time, r / recent)
(p / promise-01, ARG1, b2 / buy-01)
(p / promise-01, ARG2, b / boost-01)

Decoded in 14,713 microseconds
Sentence: yet lord duveen the great art dealer who financed the three big extensions to the tate of 1910 1926 and 1937 promised mullerury a gallery there all to himself

mkDayMonthYear(1910	1926,26,19,1910)
Spans:
Span 17-19:  1910 1926 => (date-entity :day 26 :month 19 :year 1910)
Span 20-21:  1937 => (date-entity :year 1937)
Span 26-27:  all => all
Span 19-20:  and => and
Span 5-6:  art => art
Span 11-12:  big => big
Span 6-7:  dealer => (person :ARG0-of deal-01)
Span 8-9:  financed => finance-01
Span 4-5:  great => great
Span 1-2:  lord => lord
Span 21-22:  promised => promise-01
Span 10-11:  three => 3
Span 0-1:  yet => yet

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),all,all,false), Span(21,22,List(1),promised,promise-01,false), Span(20,21,List(3, 2),1937,(date-entity :year 1937),false), Span(19,20,List(4),and,and,false), Span(17,19,List(8, 7, 6, 5),1910 1926,(date-entity :day 26 :month 19 :year 1910),false), Span(11,12,List(9),big,big,false), Span(10,11,List(10),three,3,false), Span(8,9,List(11),financed,finance-01,false), Span(6,7,List(13, 12),dealer,(person :ARG0-of deal-01),false), Span(5,6,List(14),art,art,false), Span(4,5,List(15),great,great,false), Span(1,2,List(16),lord,lord,false), Span(0,1,List(17),yet,yet,false)),Map(2 -> date-entity, 5 -> date-entity, 12 -> person, 15 -> great, 8 -> 1910, 7 -> 19, 17 -> yet, 1 -> promise-01, 4 -> and, 11 -> finance-01, 14 -> art, 6 -> 26, 0 -> all, 9 -> big, 16 -> lord, 3 -> 1937, 10 -> 3, 13 -> deal-01),Map(2 -> 26, 12 -> 19, b -> big, d3 -> deal-01, p2 -> person, a3 -> art, d -> date-entity, 1 -> 1937, y -> yet, g -> great, p -> promise-01, a -> all, d2 -> date-entity, a2 -> and, l -> lord, f -> finance-01, 3 -> 3, 13 -> 1910))),[Ljava.lang.String;@2bf96987,Annotation([Ljava.lang.String;@37f349f,[Ljava.lang.String;@1457b484,[Ljava.lang.String;@a0c508b),Annotation([Ljava.lang.String;@2e7bdad4,[Ljava.lang.String;@455bac23,[Ledu.cmu.lti.nlp.amr.Dependency;@5825168),Annotation([Ljava.lang.String;@2eae85ab,[Ljava.lang.String;@43c9b57e,[Ljava.lang.String;@6faa85f6),Annotation([Ljava.lang.String;@244112c0,[Ljava.lang.String;@2c360dd8,[Ledu.cmu.lti.nlp.amr.Entity;@10c6f695))
AMR:
(3 / 3, op, p / promise-01)
(a2 / and, op, p / promise-01)
(a2 / and, op, p2 / person)
(d / date-entity, year, 1 / 1937)
(d2 / date-entity, day, 2 / 26)
(d2 / date-entity, month, 12 / 19)
(d2 / date-entity, year, 13 / 1910)
(d3 / deal-01, ARG0, p2 / person)
(d3 / deal-01, ARG1, a3 / art)
(f / finance-01, ARG0, p2 / person)
(f / finance-01, ARG1, a / all)
(l / lord, mod, p2 / person)
(l / lord, mod, y / yet)
(p / promise-01, ARG0, b / big)
(p / promise-01, ARG1, d2 / date-entity)
(p / promise-01, time, d / date-entity)
(p2 / person, mod, g / great)

Decoded in 312,062 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@7666b8cd,Annotation([Ljava.lang.String;@51eed775,[Ljava.lang.String;@17836c59,[Ljava.lang.String;@353e531e),Annotation([Ljava.lang.String;@ec2f1e1,[Ljava.lang.String;@2095f259,[Ledu.cmu.lti.nlp.amr.Dependency;@5459c1c5),Annotation([Ljava.lang.String;@50c097c6,[Ljava.lang.String;@142c7195,[Ljava.lang.String;@71d4f78b),Annotation([Ljava.lang.String;@54c8010f,[Ljava.lang.String;@16bdab45,[Ledu.cmu.lti.nlp.amr.Entity;@7e374aac))
AMR:


Decoded in 1,121 microseconds
Sentence: the right to promise is based on the promisors interest to be able to forge special bonds with other people

Spans:
Span 12-13:  able => possible
Span 5-6:  based => base-01
Span 16-17:  bonds => bond
Span 14-15:  forge => forge-02
Span 9-10:  interest => interest-01
Span 18-19:  other => other
Span 3-4:  promise => promise-01
Span 15-16:  special => special

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),other,other,false), Span(16,17,List(1),bonds,bond,false), Span(15,16,List(2),special,special,false), Span(14,15,List(3),forge,forge-02,false), Span(12,13,List(4),able,possible,false), Span(9,10,List(5),interest,interest-01,false), Span(5,6,List(6),based,base-01,false), Span(3,4,List(7),promise,promise-01,false)),Map(2 -> special, 5 -> interest-01, 7 -> promise-01, 1 -> bond, 4 -> possible, 6 -> base-01, 0 -> other, 3 -> forge-02),Map(b -> bond, b2 -> base-01, p2 -> promise-01, s -> special, p -> possible, i -> interest-01, f -> forge-02, o -> other))),[Ljava.lang.String;@6007a2f0,Annotation([Ljava.lang.String;@155a6bd1,[Ljava.lang.String;@635c714a,[Ljava.lang.String;@4a11e43c),Annotation([Ljava.lang.String;@5c9f4521,[Ljava.lang.String;@5c73a908,[Ledu.cmu.lti.nlp.amr.Dependency;@2d5e7ba3),Annotation([Ljava.lang.String;@1607219a,[Ljava.lang.String;@2e2f10c2,[Ljava.lang.String;@13f5483e),Annotation([Ljava.lang.String;@4c59e8ae,[Ljava.lang.String;@22bb1eab,[Ledu.cmu.lti.nlp.amr.Entity;@2ada7e5d))
AMR:
(b / bond, mod, s / special)
(b2 / base-01, ARG0, o / other)
(b2 / base-01, ARG1, p / possible)
(f / forge-02, ARG0, i / interest-01)
(f / forge-02, ARG1, b / bond)
(i / interest-01, ARG0, p2 / promise-01)
(p / possible, domain, f / forge-02)

Decoded in 44,716 microseconds
Sentence:  one of sarahs friends has promised to lend them a tent and they are determined to camp on church green unless the council help them

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  one of sarahs friends has promised to lend them a tent and they are determined to camp on church green unless the council help them
myTokenized = one of sarahs friends has promised to lend them a tent and they are determined to camp on church green unless the council help them
i = 0
prefix = List(one)
regexr = \Qo\E ?\Qn\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: shakespeare enthusiasts will have to take sides in the roughandtumble of what promises to be one of londons more interesting cultural debates

Spans:
Span 20-21:  cultural => culture
Span 21-22:  debates => debate-01
Span 19-20:  interesting => interesting
Span 12-13:  promises => promise-01
Span 6-7:  sides => side

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),debates,debate-01,false), Span(20,21,List(1),cultural,culture,false), Span(19,20,List(2),interesting,interesting,false), Span(12,13,List(3),promises,promise-01,false), Span(6,7,List(4),sides,side,false)),Map(2 -> interesting, 1 -> culture, 4 -> side, 0 -> debate-01, 3 -> promise-01),Map(s -> side, d -> debate-01, p -> promise-01, i -> interesting, c -> culture))),[Ljava.lang.String;@4fb3105f,Annotation([Ljava.lang.String;@74f7f5d9,[Ljava.lang.String;@432db58d,[Ljava.lang.String;@6dea5e6f),Annotation([Ljava.lang.String;@35de01c9,[Ljava.lang.String;@2474ec0,[Ledu.cmu.lti.nlp.amr.Dependency;@1783206b),Annotation([Ljava.lang.String;@21c55cdc,[Ljava.lang.String;@245380d6,[Ljava.lang.String;@662f743b),Annotation([Ljava.lang.String;@357801e6,[Ljava.lang.String;@59c4be76,[Ledu.cmu.lti.nlp.amr.Entity;@3b46305))
AMR:
(d / debate-01, ARG1, c / culture)
(d / debate-01, mod, i / interesting)
(p / promise-01, ARG0, s / side)
(p / promise-01, ARG1, d / debate-01)

Decoded in 27,306 microseconds
Sentence: this year however still promising no new taxes carignon was convincingly reelected

Spans:
Span 10-11:  convincingly => convince-01
Span 6-7:  new => new
Span 5-6:  no => -
Span 4-5:  promising => promise-01
Span 11-12:  reelected => reelect-01
Span 3-4:  still => still
Span 7-8:  taxes => tax-01
Span 0-1:  this => this
Span 1-2:  year => year

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),reelected,reelect-01,false), Span(10,11,List(1),convincingly,convince-01,false), Span(7,8,List(2),taxes,tax-01,false), Span(6,7,List(3),new,new,false), Span(5,6,List(4),no,-,false), Span(4,5,List(5),promising,promise-01,false), Span(3,4,List(6),still,still,false), Span(1,2,List(7),year,year,false), Span(0,1,List(8),this,this,false)),Map(2 -> tax-01, 5 -> promise-01, 8 -> this, 7 -> year, 1 -> convince-01, 4 -> -, 6 -> still, 0 -> reelect-01, 3 -> new),Map(n -> new, t -> tax-01, s -> still, y -> year, p -> promise-01, t2 -> this, r -> reelect-01, - -> -, c -> convince-01))),[Ljava.lang.String;@37d0df29,Annotation([Ljava.lang.String;@71eb195f,[Ljava.lang.String;@1cee667,[Ljava.lang.String;@3678751e),Annotation([Ljava.lang.String;@1e512082,[Ljava.lang.String;@602d465a,[Ledu.cmu.lti.nlp.amr.Dependency;@3c65f00a),Annotation([Ljava.lang.String;@48723f80,[Ljava.lang.String;@44a711a8,[Ljava.lang.String;@34784fce),Annotation([Ljava.lang.String;@46bf784b,[Ljava.lang.String;@4472a836,[Ledu.cmu.lti.nlp.amr.Entity;@43819455))
AMR:
(c / convince-01, ARG0, - / -)
(p / promise-01, ARG0, y / year)
(p / promise-01, ARG1, r / reelect-01)
(p / promise-01, mod, s / still)
(r / reelect-01, ARG1, t / tax-01)
(r / reelect-01, manner, c / convince-01)
(t / tax-01, ARG0, n / new)
(y / year, mod, t2 / this)

Decoded in 50,869 microseconds
Sentence: the play was extensivley researched in prisions and probation centres and promises to be hardedged involving theatre

Spans:
Span 10-11:  and => and
Span 7-8:  and => and
Span 9-10:  centres => centre
Span 15-16:  involving => involve-01
Span 1-2:  play => play-01
Span 11-12:  promises => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),involving,involve-01,false), Span(11,12,List(1),promises,promise-01,false), Span(10,11,List(2),and,and,false), Span(9,10,List(3),centres,centre,false), Span(7,8,List(4),and,and,false), Span(1,2,List(5),play,play-01,false)),Map(2 -> and, 5 -> play-01, 1 -> promise-01, 4 -> and, 0 -> involve-01, 3 -> centre),Map(p2 -> play-01, p -> promise-01, a -> and, a2 -> and, i -> involve-01, c -> centre))),[Ljava.lang.String;@70317b12,Annotation([Ljava.lang.String;@40871449,[Ljava.lang.String;@6444e5b7,[Ljava.lang.String;@674584ce),Annotation([Ljava.lang.String;@512255a,[Ljava.lang.String;@6a523a4f,[Ledu.cmu.lti.nlp.amr.Dependency;@3c724f11),Annotation([Ljava.lang.String;@74a50417,[Ljava.lang.String;@7dafbdd4,[Ljava.lang.String;@1cd7e9c3),Annotation([Ljava.lang.String;@23341000,[Ljava.lang.String;@2f06820e,[Ledu.cmu.lti.nlp.amr.Entity;@54447d40))
AMR:
(a / and, op, c / centre)
(a / and, op, p / promise-01)
(a2 / and, op, p / promise-01)
(p / promise-01, ARG1, p2 / play-01)
(p / promise-01, purpose, i / involve-01)

Decoded in 22,906 microseconds
Sentence: opening the debate on a motion condemning the governments handling of science and science education straw promised that a labour government would insulate the science budget from inflationary pressures

Spans:
Span 12-13:  and => and
Span 25-26:  budget => budget
Span 6-7:  condemning => condemn-01
Span 2-3:  debate => debate-01
Span 14-15:  education => educate-01
Span 8-9:  governments => (government-organization :ARG0-of govern-01)
Span 9-10:  handling => handle-01
Span 19-20:  labour => labour
Span 5-6:  motion => motion
Span 0-1:  opening => open-01
Span 28-29:  pressures => pressure-01
Span 16-17:  promised => promise-01
Span 24-25:  science => science
Span 13-14:  science => science
Span 11-12:  science => science
Span 15-16:  straw => straw

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),pressures,pressure-01,false), Span(25,26,List(1),budget,budget,false), Span(24,25,List(2),science,science,false), Span(19,20,List(3),labour,labour,false), Span(16,17,List(4),promised,promise-01,false), Span(15,16,List(5),straw,straw,false), Span(14,15,List(6),education,educate-01,false), Span(13,14,List(7),science,science,false), Span(12,13,List(8),and,and,false), Span(11,12,List(9),science,science,false), Span(9,10,List(10),handling,handle-01,false), Span(8,9,List(12, 11),governments,(government-organization :ARG0-of govern-01),false), Span(6,7,List(13),condemning,condemn-01,false), Span(5,6,List(14),motion,motion,false), Span(2,3,List(15),debate,debate-01,false), Span(0,1,List(16),opening,open-01,false)),Map(2 -> science, 5 -> straw, 12 -> govern-01, 15 -> debate-01, 8 -> and, 7 -> science, 1 -> budget, 4 -> promise-01, 11 -> government-organization, 14 -> motion, 6 -> educate-01, 0 -> pressure-01, 9 -> science, 16 -> open-01, 3 -> labour, 10 -> handle-01, 13 -> condemn-01),Map(e -> educate-01, h -> handle-01, s2 -> straw, b -> budget, p2 -> promise-01, s -> science, s4 -> science, d -> debate-01, m -> motion, g2 -> govern-01, p -> pressure-01, g -> government-organization, a -> and, c -> condemn-01, s3 -> science, l -> labour, o -> open-01))),[Ljava.lang.String;@5c7b1ff8,Annotation([Ljava.lang.String;@17700237,[Ljava.lang.String;@3aa174e6,[Ljava.lang.String;@3e01c61c),Annotation([Ljava.lang.String;@66757811,[Ljava.lang.String;@2a1dd8a4,[Ledu.cmu.lti.nlp.amr.Dependency;@d7a0c96),Annotation([Ljava.lang.String;@47d052c3,[Ljava.lang.String;@3de9a50a,[Ljava.lang.String;@36525347),Annotation([Ljava.lang.String;@56d9762d,[Ljava.lang.String;@5eddb0e6,[Ledu.cmu.lti.nlp.amr.Entity;@2c88fcb2))
AMR:
(b / budget, mod, s / science)
(b / budget, topic, p / pressure-01)
(c / condemn-01, ARG0, m / motion)
(c / condemn-01, ARG1, h / handle-01)
(e / educate-01, ARG0, s3 / science)
(e / educate-01, ARG1, s2 / straw)
(e / educate-01, mod, s4 / science)
(g2 / govern-01, ARG0, g / government-organization)
(h / handle-01, ARG0, g / government-organization)
(h / handle-01, ARG1, a / and)
(o / open-01, ARG0, l / labour)
(o / open-01, ARG1, d / debate-01)
(o / open-01, location, m / motion)
(p / pressure-01, ARG0, g / government-organization)
(p2 / promise-01, ARG0, s2 / straw)
(p2 / promise-01, ARG1, a / and)

Decoded in 488,297 microseconds
Sentence: about 20 major bills are promised this session

Spans:
Span 1-2:  20 => 20
Span 3-4:  bills => bill-01
Span 2-3:  major => major
Span 5-6:  promised => promise-01
Span 7-8:  session => session
Span 6-7:  this => this

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),session,session,false), Span(6,7,List(1),this,this,false), Span(5,6,List(2),promised,promise-01,false), Span(3,4,List(3),bills,bill-01,false), Span(2,3,List(4),major,major,false), Span(1,2,List(5),20,20,false)),Map(2 -> promise-01, 5 -> 20, 1 -> this, 4 -> major, 0 -> session, 3 -> bill-01),Map(2 -> 20, b -> bill-01, t -> this, s -> session, m -> major, p -> promise-01))),[Ljava.lang.String;@558620f5,Annotation([Ljava.lang.String;@58dde0b0,[Ljava.lang.String;@4eca7064,[Ljava.lang.String;@4c98dda5),Annotation([Ljava.lang.String;@47ffa2ec,[Ljava.lang.String;@602158e1,[Ledu.cmu.lti.nlp.amr.Dependency;@2d524d15),Annotation([Ljava.lang.String;@7642b4f1,[Ljava.lang.String;@157576df,[Ljava.lang.String;@52cf357a),Annotation([Ljava.lang.String;@21c0070f,[Ljava.lang.String;@460f7b18,[Ledu.cmu.lti.nlp.amr.Entity;@225a8897))
AMR:
(b / bill-01, mod, m / major)
(b / bill-01, quant, 2 / 20)
(p / promise-01, ARG1, b / bill-01)
(p / promise-01, ARG2, s / session)
(s / session, mod, t / this)

Decoded in 63,446 microseconds
Sentence: it was outlined as the first step towards the review of assistance for the disabled as promised by the government in response to the findings of a national survey

Spans:
Span 11-12:  assistance => assist-01
Span 14-15:  disabled => disable-01
Span 24-25:  findings => (thing :ARG1-of find-01)
Span 0-1:  it => it
Span 27-28:  national => nation
Span 2-3:  outlined => outline-01
Span 16-17:  promised => promise-01
Span 21-22:  response => respond-01
Span 9-10:  review => review-01
Span 28-29:  survey => survey-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),survey,survey-01,false), Span(27,28,List(1),national,nation,false), Span(24,25,List(3, 2),findings,(thing :ARG1-of find-01),false), Span(21,22,List(4),response,respond-01,false), Span(16,17,List(5),promised,promise-01,false), Span(14,15,List(6),disabled,disable-01,false), Span(11,12,List(7),assistance,assist-01,false), Span(9,10,List(8),review,review-01,false), Span(2,3,List(9),outlined,outline-01,false), Span(0,1,List(10),it,it,false)),Map(2 -> thing, 5 -> promise-01, 8 -> review-01, 7 -> assist-01, 1 -> nation, 4 -> respond-01, 6 -> disable-01, 9 -> outline-01, 0 -> survey-01, 10 -> it, 3 -> find-01),Map(n -> nation, t -> thing, s -> survey-01, d -> disable-01, r2 -> review-01, p -> promise-01, a -> assist-01, i -> it, r -> respond-01, o -> outline-01, f -> find-01))),[Ljava.lang.String;@7ceb9c67,Annotation([Ljava.lang.String;@50696e43,[Ljava.lang.String;@39c619f3,[Ljava.lang.String;@7cd1be26),Annotation([Ljava.lang.String;@2e1af0cf,[Ljava.lang.String;@6ab7bdae,[Ledu.cmu.lti.nlp.amr.Dependency;@4506213e),Annotation([Ljava.lang.String;@157090d9,[Ljava.lang.String;@1135a18e,[Ljava.lang.String;@58017a75),Annotation([Ljava.lang.String;@490ec476,[Ljava.lang.String;@68844472,[Ledu.cmu.lti.nlp.amr.Entity;@43a9cdf9))
AMR:
(a / assist-01, ARG1, d / disable-01)
(d / disable-01, ARG2, p / promise-01)
(f / find-01, ARG1, t / thing)
(f / find-01, ARG2, s / survey-01)
(o / outline-01, ARG1, i / it)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, t / thing)
(r / respond-01, ARG1, t / thing)
(r2 / review-01, ARG1, a / assist-01)
(s / survey-01, ARG1, n / nation)

Decoded in 182,486 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@4111b923,Annotation([Ljava.lang.String;@7291ca34,[Ljava.lang.String;@417256af,[Ljava.lang.String;@39991cba),Annotation([Ljava.lang.String;@732d14e0,[Ljava.lang.String;@14b5b933,[Ledu.cmu.lti.nlp.amr.Dependency;@2691cde4),Annotation([Ljava.lang.String;@2e644784,[Ljava.lang.String;@399342e7,[Ljava.lang.String;@730d6938),Annotation([Ljava.lang.String;@7577168a,[Ljava.lang.String;@5d68fa45,[Ledu.cmu.lti.nlp.amr.Entity;@1706f7ec))
AMR:


Decoded in 1,190 microseconds
Sentence: they are promising to reveal all to mr grimstone in return for a further contribution to charity

Spans:
Span 5-6:  all => all
Span 16-17:  charity => charity
Span 14-15:  contribution => contribute-01
Span 13-14:  further => further
Span 2-3:  promising => promise-01
Span 4-5:  reveal => reveal-01
Span 0-1:  they => they

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),charity,charity,false), Span(14,15,List(1),contribution,contribute-01,false), Span(13,14,List(2),further,further,false), Span(5,6,List(3),all,all,false), Span(4,5,List(4),reveal,reveal-01,false), Span(2,3,List(5),promising,promise-01,false), Span(0,1,List(6),they,they,false)),Map(2 -> further, 5 -> promise-01, 1 -> contribute-01, 4 -> reveal-01, 6 -> they, 0 -> charity, 3 -> all),Map(t -> they, p -> promise-01, a -> all, r -> reveal-01, c -> charity, f -> further, c2 -> contribute-01))),[Ljava.lang.String;@4a7eb2c3,Annotation([Ljava.lang.String;@440a466a,[Ljava.lang.String;@7e94fc0b,[Ljava.lang.String;@672f7719),Annotation([Ljava.lang.String;@5d343f3b,[Ljava.lang.String;@11236a4b,[Ledu.cmu.lti.nlp.amr.Dependency;@2c176ab7),Annotation([Ljava.lang.String;@355f2afe,[Ljava.lang.String;@7affa511,[Ljava.lang.String;@25ae3e2d),Annotation([Ljava.lang.String;@52740fae,[Ljava.lang.String;@41b192cc,[Ledu.cmu.lti.nlp.amr.Entity;@711cb0c5))
AMR:
(c2 / contribute-01, ARG1, c / charity)
(c2 / contribute-01, degree, f / further)
(p / promise-01, ARG1, r / reveal-01)
(r / reveal-01, ARG0, t / they)
(r / reveal-01, ARG1, a / all)
(r / reveal-01, purpose, c2 / contribute-01)

Decoded in 53,611 microseconds
Sentence: according to tass the strikers are demanding that privileges for officials be abolished and that a new constitution be adopted incorporating all the reform promises of the past three years

Spans:
Span 19-20:  adopted => adopt-01
Span 21-22:  all => all
Span 13-14:  and => and
Span 17-18:  constitution => constitution
Span 6-7:  demanding => demand-01
Span 16-17:  new => new
Span 10-11:  officials => (have-org-role-91 :ARG2 official)
Span 27-28:  past => past
Span 8-9:  privileges => privilege
Span 24-25:  promises => promise-01
Span 23-24:  reform => reform-01
Span 4-5:  strikers => (person :ARG0-of strike-02)
Span 28-29:  three => 3
Span 29-30:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(1, 0),years,(temporal-quantity :unit year),false), Span(28,29,List(2),three,3,false), Span(27,28,List(3),past,past,false), Span(24,25,List(4),promises,promise-01,false), Span(23,24,List(5),reform,reform-01,false), Span(21,22,List(6),all,all,false), Span(19,20,List(7),adopted,adopt-01,false), Span(17,18,List(8),constitution,constitution,false), Span(16,17,List(9),new,new,false), Span(13,14,List(10),and,and,false), Span(10,11,List(12, 11),officials,(have-org-role-91 :ARG2 official),false), Span(8,9,List(13),privileges,privilege,false), Span(6,7,List(14),demanding,demand-01,false), Span(4,5,List(16, 15),strikers,(person :ARG0-of strike-02),false)),Map(2 -> 3, 5 -> reform-01, 12 -> official, 15 -> person, 8 -> constitution, 7 -> adopt-01, 1 -> year, 4 -> promise-01, 11 -> have-org-role-91, 14 -> demand-01, 6 -> all, 0 -> temporal-quantity, 9 -> new, 16 -> strike-02, 3 -> past, 10 -> and, 13 -> privilege),Map(n -> new, h -> have-org-role-91, t -> temporal-quantity, p2 -> promise-01, a3 -> and, s -> strike-02, d -> demand-01, y -> year, p -> past, a -> all, p4 -> person, r -> reform-01, a2 -> adopt-01, c -> constitution, o -> official, p3 -> privilege, 3 -> 3))),[Ljava.lang.String;@12998f87,Annotation([Ljava.lang.String;@1f9df19b,[Ljava.lang.String;@3a610754,[Ljava.lang.String;@382839bd),Annotation([Ljava.lang.String;@58e6c418,[Ljava.lang.String;@16543141,[Ledu.cmu.lti.nlp.amr.Dependency;@716dadda),Annotation([Ljava.lang.String;@57b0fd63,[Ljava.lang.String;@24cb9b8f,[Ljava.lang.String;@3351dc28),Annotation([Ljava.lang.String;@434ce06a,[Ljava.lang.String;@6c2171aa,[Ledu.cmu.lti.nlp.amr.Entity;@7ad875c))
AMR:
(a2 / adopt-01, ARG1, c / constitution)
(a2 / adopt-01, ARG2, p2 / promise-01)
(a3 / and, op, a2 / adopt-01)
(c / constitution, mod, n / new)
(d / demand-01, ARG0, p4 / person)
(d / demand-01, ARG1, a3 / and)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG2, o / official)
(p / past, op, t / temporal-quantity)
(p2 / promise-01, ARG1, p / past)
(p2 / promise-01, quant, a / all)
(p2 / promise-01, time, r / reform-01)
(r / reform-01, ARG1, p3 / privilege)
(s / strike-02, ARG0, p4 / person)
(t / temporal-quantity, quant, 3 / 3)
(t / temporal-quantity, unit, y / year)

Decoded in 516,535 microseconds
Sentence:   yet moran made no move towards her promised nothing gave no hint of any reciprocation of interest lent her no support

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   yet moran made no move towards her promised nothing gave no hint of any reciprocation of interest lent her no support
myTokenized = yet moran made no move towards her promised nothing gave no hint of any reciprocation of interest lent her no support
i = 0
prefix = List(yet)
regexr = \Qy\E ?\Qe\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: but rajiv gandhi is because he had vowed to purge the party of its wheelerdealers dangled the vision of a government that works faster and promised to lead indians into the shining dawn of a 21st century where no one would starve

NER Entity: (person :name (name :op "gandhi"))
Spans:
Span 24-25:  and => and
Span 4-5:  because => cause-01
Span 0-1:  but => contrast-01
Span 32-33:  dawn => dawn-01
Span 23-24:  faster => fast
Span 5-6:  he => he
Span 38-39:  no => -
Span 11-12:  party => party
Span 25-26:  promised => promise-01
Span 41-42:  starve => starve-01
Span 7-8:  vowed => vow-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),starve,starve-01,false), Span(38,39,List(1),no,-,false), Span(32,33,List(2),dawn,dawn-01,false), Span(25,26,List(3),promised,promise-01,false), Span(24,25,List(4),and,and,false), Span(23,24,List(5),faster,fast,false), Span(11,12,List(6),party,party,false), Span(7,8,List(7),vowed,vow-01,false), Span(5,6,List(8),he,he,false), Span(4,5,List(9),because,cause-01,false), Span(0,1,List(10),but,contrast-01,false)),Map(2 -> dawn-01, 5 -> fast, 8 -> he, 7 -> vow-01, 1 -> -, 4 -> and, 6 -> party, 9 -> cause-01, 0 -> starve-01, 10 -> contrast-01, 3 -> promise-01),Map(h -> he, p2 -> party, s -> starve-01, v -> vow-01, d -> dawn-01, p -> promise-01, a -> and, - -> -, c -> cause-01, f -> fast, c2 -> contrast-01))),[Ljava.lang.String;@72f1d02e,Annotation([Ljava.lang.String;@619ab6f6,[Ljava.lang.String;@74620289,[Ljava.lang.String;@4e94ac10),Annotation([Ljava.lang.String;@2ac76be,[Ljava.lang.String;@8a7b551,[Ledu.cmu.lti.nlp.amr.Dependency;@3a70dd47),Annotation([Ljava.lang.String;@47cf7e4a,[Ljava.lang.String;@76c511b,[Ljava.lang.String;@5840c76b),Annotation([Ljava.lang.String;@4e46f11,[Ljava.lang.String;@3137c799,[Ledu.cmu.lti.nlp.amr.Entity;@4511270d))
AMR:
(a / and, op, p / promise-01)
(a / and, purpose, s / starve-01)
(c / cause-01, ARG0, v / vow-01)
(c / cause-01, ARG1, a / and)
(c2 / contrast-01, ARG1, v / vow-01)
(d / dawn-01, ARG1, p2 / party)
(p / promise-01, ARG0, - / -)
(p / promise-01, ARG1, f / fast)
(v / vow-01, ARG0, h / he)
(v / vow-01, ARG1, p2 / party)

Decoded in 131,301 microseconds
Sentence: when he first arrived at central park monie promised a subtle change of emphasis saying it might take three or four months for his influence to show through

Spans:
Span 3-4:  arrived => arrive-01
Span 5-6:  central => central
Span 11-12:  change => change-01
Span 13-14:  emphasis => emphasize-01
Span 20-21:  four => 4
Span 1-2:  he => he
Span 24-25:  influence => influence-01
Span 15-16:  it => it
Span 21-22:  months => (temporal-quantity :unit month)
Span 19-20:  or => or
Span 6-7:  park => park
Span 8-9:  promised => promise-01
Span 14-15:  saying => say-01
Span 26-27:  show => show-01
Span 18-19:  three => 3

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),show,show-01,false), Span(24,25,List(1),influence,influence-01,false), Span(21,22,List(3, 2),months,(temporal-quantity :unit month),false), Span(20,21,List(4),four,4,false), Span(19,20,List(5),or,or,false), Span(18,19,List(6),three,3,false), Span(15,16,List(7),it,it,false), Span(14,15,List(8),saying,say-01,false), Span(13,14,List(9),emphasis,emphasize-01,false), Span(11,12,List(10),change,change-01,false), Span(8,9,List(11),promised,promise-01,false), Span(6,7,List(12),park,park,false), Span(5,6,List(13),central,central,false), Span(3,4,List(14),arrived,arrive-01,false), Span(1,2,List(15),he,he,false)),Map(2 -> temporal-quantity, 5 -> or, 12 -> park, 15 -> he, 8 -> say-01, 7 -> it, 1 -> influence-01, 4 -> 4, 11 -> promise-01, 14 -> arrive-01, 6 -> 3, 0 -> show-01, 9 -> emphasize-01, 3 -> month, 10 -> change-01, 13 -> central),Map(e -> emphasize-01, h -> he, s2 -> say-01, t -> temporal-quantity, p2 -> park, s -> show-01, m -> month, p -> promise-01, a -> arrive-01, 4 -> 4, i2 -> it, i -> influence-01, c -> change-01, o -> or, 3 -> 3, c2 -> central))),[Ljava.lang.String;@65f27299,Annotation([Ljava.lang.String;@1041cf19,[Ljava.lang.String;@50837aa5,[Ljava.lang.String;@67e90fee),Annotation([Ljava.lang.String;@7615078d,[Ljava.lang.String;@5ea2f68b,[Ledu.cmu.lti.nlp.amr.Dependency;@1ce85037),Annotation([Ljava.lang.String;@57ea59b4,[Ljava.lang.String;@5aa76583,[Ljava.lang.String;@23f9a9f4),Annotation([Ljava.lang.String;@5c04e49f,[Ljava.lang.String;@453db1eb,[Ledu.cmu.lti.nlp.amr.Entity;@556bded0))
AMR:
(a / arrive-01, ARG1, h / he)
(a / arrive-01, manner, p / promise-01)
(c / change-01, ARG1, e / emphasize-01)
(e / emphasize-01, ARG1, 3 / 3)
(i / influence-01, ARG1, s / show-01)
(o / or, op, t / temporal-quantity)
(p / promise-01, ARG1, c / change-01)
(p / promise-01, ARG2, s2 / say-01)
(s / show-01, ARG0, p2 / park)
(s / show-01, ARG1, c2 / central)
(s2 / say-01, ARG0, i2 / it)
(s2 / say-01, ARG1, t / temporal-quantity)
(t / temporal-quantity, location, i / influence-01)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, m / month)

Decoded in 297,073 microseconds
Sentence: president bush making light of surgery to remove a cyst from his right middle finger said it was no federal case and promised to show off his scar afterward

Spans:
Span 28-29:  afterward => afterward
Span 21-22:  and => and
Span 1-2:  bush => bush-league
Span 20-21:  case => case
Span 19-20:  federal => federal
Span 14-15:  finger => finger
Span 16-17:  it => it
Span 3-4:  light => light
Span 13-14:  middle => middle
Span 18-19:  no => -
Span 25-26:  off => off
Span 0-1:  president => (have-org-role-91 :ARG2 president)
Span 22-23:  promised => promise-01
Span 7-8:  remove => remove-01
Span 15-16:  said => say-01
Span 24-25:  show => show-01
Span 5-6:  surgery => surgery

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),afterward,afterward,false), Span(25,26,List(1),off,off,false), Span(24,25,List(2),show,show-01,false), Span(22,23,List(3),promised,promise-01,false), Span(21,22,List(4),and,and,false), Span(20,21,List(5),case,case,false), Span(19,20,List(6),federal,federal,false), Span(18,19,List(7),no,-,false), Span(16,17,List(8),it,it,false), Span(15,16,List(9),said,say-01,false), Span(14,15,List(10),finger,finger,false), Span(13,14,List(11),middle,middle,false), Span(7,8,List(12),remove,remove-01,false), Span(5,6,List(13),surgery,surgery,false), Span(3,4,List(14),light,light,false), Span(1,2,List(15),bush,bush-league,false), Span(0,1,List(17, 16),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> show-01, 5 -> case, 12 -> remove-01, 15 -> bush-league, 8 -> it, 7 -> -, 17 -> president, 1 -> off, 4 -> and, 11 -> middle, 14 -> light, 6 -> federal, 0 -> afterward, 9 -> say-01, 16 -> have-org-role-91, 3 -> promise-01, 10 -> finger, 13 -> surgery),Map(h -> have-org-role-91, s2 -> say-01, b -> bush-league, p2 -> president, s -> show-01, m -> middle, p -> promise-01, a -> afterward, a2 -> and, i -> it, r -> remove-01, - -> -, c -> case, s3 -> surgery, l -> light, f2 -> finger, f -> federal, o -> off))),[Ljava.lang.String;@1cf15580,Annotation([Ljava.lang.String;@28245558,[Ljava.lang.String;@695f18fe,[Ljava.lang.String;@626201bd),Annotation([Ljava.lang.String;@106051c1,[Ljava.lang.String;@23975e4d,[Ledu.cmu.lti.nlp.amr.Dependency;@26b0237c),Annotation([Ljava.lang.String;@75e9b5bb,[Ljava.lang.String;@429a4477,[Ljava.lang.String;@1e0502ca),Annotation([Ljava.lang.String;@5afa2b2b,[Ljava.lang.String;@5e2842b6,[Ledu.cmu.lti.nlp.amr.Entity;@2533eb05))
AMR:
(a2 / and, op, p / promise-01)
(a2 / and, op, s2 / say-01)
(c / case, mod, f / federal)
(h / have-org-role-91, ARG0, b / bush-league)
(h / have-org-role-91, ARG2, p2 / president)
(i / it, mod, - / -)
(l / light, mod, b / bush-league)
(p / promise-01, ARG0, b / bush-league)
(p / promise-01, ARG1, a / afterward)
(p / promise-01, ARG2, s / show-01)
(r / remove-01, ARG0, l / light)
(r / remove-01, ARG1, s3 / surgery)
(r / remove-01, ARG2, f2 / finger)
(r / remove-01, manner, m / middle)
(s / show-01, direction, o / off)
(s2 / say-01, ARG0, i / it)
(s2 / say-01, ARG1, c / case)

Decoded in 641,258 microseconds
Sentence:   nor are those who do receive him promised either success or comfort

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   nor are those who do receive him promised either success or comfort
myTokenized = nor are those who do receive him promised either success or comfort
i = 0
prefix = List(nor)
regexr = \Qn\E ?\Qo\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the ministers concerned must have congratulated themselves that politically at least they had done the right thing by ignoring the environmental bodies and promising eightlane motorways and an expenditure of 12

Spans:
Span 30-31:  12 => 12
Span 26-27:  and => and
Span 22-23:  and => and
Span 21-22:  bodies => body
Span 2-3:  concerned => concern-01
Span 5-6:  congratulated => congratulate-01
Span 20-21:  environmental => environment
Span 28-29:  expenditure => expend-01
Span 18-19:  ignoring => ignore-01
Span 1-2:  ministers => (have-org-role-91 :ARG2 minister)
Span 23-24:  promising => promise-01
Span 11-12:  they => they
Span 16-17:  thing => thing

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),12,12,false), Span(28,29,List(1),expenditure,expend-01,false), Span(26,27,List(2),and,and,false), Span(23,24,List(3),promising,promise-01,false), Span(22,23,List(4),and,and,false), Span(21,22,List(5),bodies,body,false), Span(20,21,List(6),environmental,environment,false), Span(18,19,List(7),ignoring,ignore-01,false), Span(16,17,List(8),thing,thing,false), Span(11,12,List(9),they,they,false), Span(5,6,List(10),congratulated,congratulate-01,false), Span(2,3,List(11),concerned,concern-01,false), Span(1,2,List(13, 12),ministers,(have-org-role-91 :ARG2 minister),false)),Map(2 -> and, 5 -> body, 12 -> have-org-role-91, 8 -> thing, 7 -> ignore-01, 1 -> expend-01, 4 -> and, 11 -> concern-01, 6 -> environment, 0 -> 12, 9 -> they, 3 -> promise-01, 10 -> congratulate-01, 13 -> minister),Map(e -> expend-01, h -> have-org-role-91, b -> body, t -> thing, e2 -> environment, m -> minister, 1 -> 12, p -> promise-01, a -> and, t2 -> they, a2 -> and, i -> ignore-01, c -> congratulate-01, c2 -> concern-01))),[Ljava.lang.String;@6721f043,Annotation([Ljava.lang.String;@6524f39a,[Ljava.lang.String;@5cf53756,[Ljava.lang.String;@67041ec7),Annotation([Ljava.lang.String;@3f80cfa7,[Ljava.lang.String;@21c0fd83,[Ledu.cmu.lti.nlp.amr.Dependency;@543b4c5),Annotation([Ljava.lang.String;@2010f436,[Ljava.lang.String;@391115ac,[Ljava.lang.String;@10a5ec79),Annotation([Ljava.lang.String;@7d480478,[Ljava.lang.String;@31da28a,[Ledu.cmu.lti.nlp.amr.Entity;@e9a139f))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, e / expend-01)
(b / body, mod, e2 / environment)
(c / congratulate-01, ARG0, t2 / they)
(c2 / concern-01, ARG1, c / congratulate-01)
(e / expend-01, time, 1 / 12)
(h / have-org-role-91, ARG1, c2 / concern-01)
(h / have-org-role-91, ARG2, m / minister)
(i / ignore-01, ARG0, t2 / they)
(i / ignore-01, ARG1, a2 / and)
(i / ignore-01, ARG2, b / body)
(i / ignore-01, time, t / thing)
(p / promise-01, ARG1, c2 / concern-01)

Decoded in 640,751 microseconds
Sentence: the rebel faribundo marti national liberation front fmln had promised to step up the war to disprove government assertions that the rebels were weak militarily as well to force the government to make concessions in the peace talks that started in september

Spans:
Span 18-19:  assertions => assert-03
Span 33-34:  concessions => concede-01
Span 28-29:  force => force
Span 6-7:  front => front
Span 5-6:  liberation => liberate-01
Span 24-25:  militarily => military
Span 4-5:  national => nation
Span 36-37:  peace => peace
Span 9-10:  promised => promise-01
Span 1-2:  rebel => rebel-01
Span 21-22:  rebels => (person :ARG0-of rebel-01)
Span 41-42:  september => (date-entity :month 9)
Span 39-40:  started => start-01
Span 37-38:  talks => talk-01
Span 14-15:  war => war
Span 23-24:  weak => weak
Span 26-27:  well => well

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(1, 0),september,(date-entity :month 9),false), Span(39,40,List(2),started,start-01,false), Span(37,38,List(3),talks,talk-01,false), Span(36,37,List(4),peace,peace,false), Span(33,34,List(5),concessions,concede-01,false), Span(28,29,List(6),force,force,false), Span(26,27,List(7),well,well,false), Span(24,25,List(8),militarily,military,false), Span(23,24,List(9),weak,weak,false), Span(21,22,List(11, 10),rebels,(person :ARG0-of rebel-01),false), Span(18,19,List(12),assertions,assert-03,false), Span(14,15,List(13),war,war,false), Span(9,10,List(14),promised,promise-01,false), Span(6,7,List(15),front,front,false), Span(5,6,List(16),liberation,liberate-01,false), Span(4,5,List(17),national,nation,false), Span(1,2,List(18),rebel,rebel-01,false)),Map(2 -> start-01, 5 -> concede-01, 12 -> assert-03, 15 -> front, 8 -> military, 18 -> rebel-01, 7 -> well, 17 -> nation, 1 -> 9, 4 -> peace, 11 -> rebel-01, 14 -> promise-01, 6 -> force, 0 -> date-entity, 9 -> weak, 16 -> liberate-01, 3 -> talk-01, 10 -> person, 13 -> war),Map(n -> nation, w -> well, t -> talk-01, p2 -> person, w3 -> war, s -> start-01, d -> date-entity, m -> military, r2 -> rebel-01, p -> peace, a -> assert-03, w2 -> weak, r -> rebel-01, c -> concede-01, l -> liberate-01, f2 -> front, 9 -> 9, f -> force, p3 -> promise-01))),[Ljava.lang.String;@257e3336,Annotation([Ljava.lang.String;@543175,[Ljava.lang.String;@177af87e,[Ljava.lang.String;@a50243d),Annotation([Ljava.lang.String;@137b2615,[Ljava.lang.String;@7a0136b0,[Ledu.cmu.lti.nlp.amr.Dependency;@65ad9b63),Annotation([Ljava.lang.String;@68b4b4bb,[Ljava.lang.String;@2fc596b1,[Ljava.lang.String;@552856f7),Annotation([Ljava.lang.String;@4b659dce,[Ljava.lang.String;@7c5b660d,[Ledu.cmu.lti.nlp.amr.Entity;@54891f43))
AMR:
(a / assert-03, ARG1, w2 / weak)
(c / concede-01, ARG0, f / force)
(c / concede-01, time, t / talk-01)
(d / date-entity, month, 9 / 9)
(f / force, mod, w / well)
(l / liberate-01, ARG0, f2 / front)
(l / liberate-01, ARG1, w / well)
(l / liberate-01, mod, n / nation)
(p3 / promise-01, ARG0, l / liberate-01)
(p3 / promise-01, ARG1, w3 / war)
(r / rebel-01, ARG0, p2 / person)
(r2 / rebel-01, ARG0, m / military)
(r2 / rebel-01, ARG2, p3 / promise-01)
(s / start-01, ARG1, t / talk-01)
(s / start-01, time, d / date-entity)
(t / talk-01, ARG0, p2 / person)
(t / talk-01, topic, p / peace)
(w2 / weak, domain, p2 / person)

Decoded in 216,539 microseconds
Sentence: various junior ministers at the home office have made apologetic noises about problems caused by ec standardisation and new computers but all have promised at various times that something would be done

Spans:
Span 21-22:  all => all
Span 17-18:  and => and
Span 20-21:  but => contrast-01
Span 13-14:  caused => cause-01
Span 19-20:  computers => computer
Span 5-6:  home => home
Span 1-2:  junior => junior
Span 2-3:  ministers => (have-org-role-91 :ARG2 minister)
Span 18-19:  new => new
Span 10-11:  noises => noise
Span 6-7:  office => office
Span 12-13:  problems => problem
Span 23-24:  promised => promise-01
Span 28-29:  something => something
Span 25-26:  various => various
Span 0-1:  various => various

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),something,something,false), Span(25,26,List(1),various,various,false), Span(23,24,List(2),promised,promise-01,false), Span(21,22,List(3),all,all,false), Span(20,21,List(4),but,contrast-01,false), Span(19,20,List(5),computers,computer,false), Span(18,19,List(6),new,new,false), Span(17,18,List(7),and,and,false), Span(13,14,List(8),caused,cause-01,false), Span(12,13,List(9),problems,problem,false), Span(10,11,List(10),noises,noise,false), Span(6,7,List(11),office,office,false), Span(5,6,List(12),home,home,false), Span(2,3,List(14, 13),ministers,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(15),junior,junior,false), Span(0,1,List(16),various,various,false)),Map(2 -> promise-01, 5 -> computer, 12 -> home, 15 -> junior, 8 -> cause-01, 7 -> and, 1 -> various, 4 -> contrast-01, 11 -> office, 14 -> minister, 6 -> new, 0 -> something, 9 -> problem, 16 -> various, 3 -> all, 10 -> noise, 13 -> have-org-role-91),Map(v2 -> various, n -> new, h -> home, h2 -> have-org-role-91, p2 -> problem, j -> junior, s -> something, v -> various, m -> minister, p -> promise-01, a -> all, c3 -> cause-01, a2 -> and, c -> contrast-01, o -> office, c2 -> computer, n2 -> noise))),[Ljava.lang.String;@34c3c29,Annotation([Ljava.lang.String;@201a970,[Ljava.lang.String;@3b1af917,[Ljava.lang.String;@67d77351),Annotation([Ljava.lang.String;@71d40019,[Ljava.lang.String;@1552a3b1,[Ledu.cmu.lti.nlp.amr.Dependency;@6478c466),Annotation([Ljava.lang.String;@34a63812,[Ljava.lang.String;@cab40bf,[Ljava.lang.String;@3f27c218),Annotation([Ljava.lang.String;@4b37d60c,[Ljava.lang.String;@3ec5d468,[Ledu.cmu.lti.nlp.amr.Entity;@2dfc180a))
AMR:
(a2 / and, op, c2 / computer)
(c / contrast-01, ARG0, s / something)
(c / contrast-01, ARG1, v / various)
(c / contrast-01, ARG2, p / promise-01)
(c2 / computer, mod, n / new)
(c3 / cause-01, ARG0, p2 / problem)
(c3 / cause-01, ARG1, a2 / and)
(c3 / cause-01, ARG2, c / contrast-01)
(h2 / have-org-role-91, ARG1, o / office)
(h2 / have-org-role-91, ARG2, m / minister)
(m / minister, mod, j / junior)
(m / minister, mod, v2 / various)
(n2 / noise, topic, c3 / cause-01)
(o / office, mod, h / home)
(p / promise-01, ARG1, h2 / have-org-role-91)
(p / promise-01, mod, a / all)

Decoded in 803,038 microseconds
Sentence: first edition richard branson head of virgin records promised yesterday to fund further legal defences by the irish family planning association if more prosecutions are brought for selling condoms at the virgin shop in dublin

NER Entity: (thing :name (name :op "irish"))
NER Entity: (country :name (name :op "dublin"))
Spans:
Span 20-21:  association => associate-01
Span 14-15:  defences => defend-01
Span 1-2:  edition => edition
Span 18-19:  family => family
Span 11-12:  fund => fund-01
Span 12-13:  further => further
Span 4-5:  head => head-01
Span 13-14:  legal => legal
Span 19-20:  planning => plan-01
Span 8-9:  promised => promise-01
Span 7-8:  records => record
Span 27-28:  selling => sell-01
Span 32-33:  shop => shop
Span 31-32:  virgin => virgin
Span 6-7:  virgin => virgin
Span 9-10:  yesterday => yesterday

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),shop,shop,false), Span(31,32,List(1),virgin,virgin,false), Span(27,28,List(2),selling,sell-01,false), Span(20,21,List(3),association,associate-01,false), Span(19,20,List(4),planning,plan-01,false), Span(18,19,List(5),family,family,false), Span(14,15,List(6),defences,defend-01,false), Span(13,14,List(7),legal,legal,false), Span(12,13,List(8),further,further,false), Span(11,12,List(9),fund,fund-01,false), Span(9,10,List(10),yesterday,yesterday,false), Span(8,9,List(11),promised,promise-01,false), Span(7,8,List(12),records,record,false), Span(6,7,List(13),virgin,virgin,false), Span(4,5,List(14),head,head-01,false), Span(1,2,List(15),edition,edition,false)),Map(2 -> sell-01, 5 -> family, 12 -> record, 15 -> edition, 8 -> further, 7 -> legal, 1 -> virgin, 4 -> plan-01, 11 -> promise-01, 14 -> head-01, 6 -> defend-01, 0 -> shop, 9 -> fund-01, 3 -> associate-01, 10 -> yesterday, 13 -> virgin),Map(e -> edition, v2 -> virgin, h -> head-01, s2 -> sell-01, p2 -> promise-01, s -> shop, v -> virgin, d -> defend-01, p -> plan-01, y -> yesterday, a -> associate-01, f3 -> fund-01, r -> record, l -> legal, f2 -> further, f -> family))),[Ljava.lang.String;@18e501c,Annotation([Ljava.lang.String;@262d5f10,[Ljava.lang.String;@6cbc2704,[Ljava.lang.String;@34a5af61),Annotation([Ljava.lang.String;@699d2447,[Ljava.lang.String;@4bb8e77c,[Ledu.cmu.lti.nlp.amr.Dependency;@5865a4ba),Annotation([Ljava.lang.String;@7921dcac,[Ljava.lang.String;@1e1ede55,[Ljava.lang.String;@7c96ade5),Annotation([Ljava.lang.String;@872d54a,[Ljava.lang.String;@2b10f19b,[Ledu.cmu.lti.nlp.amr.Entity;@65660d33))
AMR:
(a / associate-01, ARG1, p / plan-01)
(d / defend-01, ARG0, e / edition)
(d / defend-01, degree, f2 / further)
(d / defend-01, mod, l / legal)
(f3 / fund-01, ARG1, d / defend-01)
(f3 / fund-01, ARG2, a / associate-01)
(h / head-01, ARG1, r / record)
(h / head-01, ARG2, f3 / fund-01)
(p / plan-01, ARG1, f / family)
(p2 / promise-01, ARG0, y / yesterday)
(p2 / promise-01, ARG1, f2 / further)
(r / record, mod, v2 / virgin)
(s / shop, mod, v / virgin)
(s2 / sell-01, ARG1, h / head-01)
(s2 / sell-01, location, s / shop)

Decoded in 230,531 microseconds
Sentence:   he again promised a letter from john wright but instead it was he who again wrote at the end of october you obviously havent read my letter carefully

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   he again promised a letter from john wright but instead it was he who again wrote at the end of october you obviously havent read my letter carefully
myTokenized = he again promised a letter from john wright but instead it was he who again wrote at the end of october you obviously havent read my letter carefully
i = 0
prefix = List(he)
regexr = \Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: balloons deluged germany with news of allied successes and the german lines with certificates promising good treatment for those who surrendered

NER Entity: (country :name (name :op "germany"))
NER Entity: (thing :name (name :op "german"))
Spans:
Span 6-7:  allied => ally-01
Span 8-9:  and => and
Span 15-16:  good => good
Span 11-12:  lines => line
Span 4-5:  news => news
Span 14-15:  promising => promise-01
Span 7-8:  successes => success
Span 20-21:  surrendered => surrender-01
Span 16-17:  treatment => treat-03

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),surrendered,surrender-01,false), Span(16,17,List(1),treatment,treat-03,false), Span(15,16,List(2),good,good,false), Span(14,15,List(3),promising,promise-01,false), Span(11,12,List(4),lines,line,false), Span(8,9,List(5),and,and,false), Span(7,8,List(6),successes,success,false), Span(6,7,List(7),allied,ally-01,false), Span(4,5,List(8),news,news,false)),Map(2 -> good, 5 -> and, 8 -> news, 7 -> ally-01, 1 -> treat-03, 4 -> line, 6 -> success, 0 -> surrender-01, 3 -> promise-01),Map(n -> news, s2 -> success, t -> treat-03, s -> surrender-01, p -> promise-01, g -> good, a -> and, a2 -> ally-01, l -> line))),[Ljava.lang.String;@5a0871f8,Annotation([Ljava.lang.String;@60727ef5,[Ljava.lang.String;@7ced384a,[Ljava.lang.String;@3a0ac259),Annotation([Ljava.lang.String;@185d7ed4,[Ljava.lang.String;@22319ccb,[Ledu.cmu.lti.nlp.amr.Dependency;@672ce4f6),Annotation([Ljava.lang.String;@346c0765,[Ljava.lang.String;@205992c6,[Ljava.lang.String;@58b315c1),Annotation([Ljava.lang.String;@55595f65,[Ljava.lang.String;@5e860ba9,[Ledu.cmu.lti.nlp.amr.Entity;@3267b4ba))
AMR:
(a / and, op, s2 / success)
(a2 / ally-01, ARG1, s2 / success)
(n / news, topic, a / and)
(p / promise-01, ARG0, l / line)
(p / promise-01, ARG1, t / treat-03)
(s / surrender-01, ARG1, t / treat-03)
(t / treat-03, ARG1, s2 / success)
(t / treat-03, mod, g / good)

Decoded in 44,480 microseconds
Sentence: the rsdlp should be reorganized as a federal party with the bund being recognized as the sole representative of jewish workers and the party programme promising personal cultural autonomy that is all jewish workers regardless of where they lived in the empire would be members of a national jewish association responsible for all jewish educational and cultural affairs

Spans:
Span 57-58:  affairs => affair
Span 52-53:  all => all
Span 31-32:  all => all
Span 55-56:  and => and
Span 21-22:  and => and
Span 49-50:  association => associate-01
Span 28-29:  autonomy => autonomy
Span 56-57:  cultural => culture
Span 27-28:  cultural => culture
Span 54-55:  educational => educate-01
Span 41-42:  empire => empire
Span 7-8:  federal => federal
Span 53-54:  jewish => (ethnic-group :name (name :op "Jew"))
Span 48-49:  jewish => (ethnic-group :name (name :op "Jew"))
Span 32-33:  jewish => (ethnic-group :name (name :op "Jew"))
Span 19-20:  jewish => (ethnic-group :name (name :op "Jew"))
Span 38-39:  lived => live-01
Span 44-45:  members => (have-org-role-91 :ARG2 member)
Span 47-48:  national => nation
Span 23-24:  party => party
Span 8-9:  party => party
Span 26-27:  personal => personal
Span 24-25:  programme => program
Span 25-26:  promising => promise-01
Span 13-14:  recognized => recognize-01
Span 17-18:  representative => represent-01
Span 50-51:  responsible => responsible-41
Span 2-3:  should => recommend-01
Span 16-17:  sole => sole
Span 37-38:  they => they
Span 33-34:  workers => (person :ARG0-of work-01)
Span 20-21:  workers => (person :ARG0-of work-01)

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(57,58,List(0),affairs,affair,false), Span(56,57,List(1),cultural,culture,false), Span(55,56,List(2),and,and,false), Span(54,55,List(3),educational,educate-01,false), Span(53,54,List(6, 5, 4),jewish,(ethnic-group :name (name :op "Jew")),false), Span(52,53,List(7),all,all,false), Span(50,51,List(8),responsible,responsible-41,false), Span(49,50,List(9),association,associate-01,false), Span(48,49,List(12, 11, 10),jewish,(ethnic-group :name (name :op "Jew")),false), Span(47,48,List(13),national,nation,false), Span(44,45,List(15, 14),members,(have-org-role-91 :ARG2 member),false), Span(41,42,List(16),empire,empire,false), Span(38,39,List(17),lived,live-01,false), Span(37,38,List(18),they,they,false), Span(33,34,List(20, 19),workers,(person :ARG0-of work-01),false), Span(32,33,List(23, 22, 21),jewish,(ethnic-group :name (name :op "Jew")),false), Span(31,32,List(24),all,all,false), Span(28,29,List(25),autonomy,autonomy,false), Span(27,28,List(26),cultural,culture,false), Span(26,27,List(27),personal,personal,false), Span(25,26,List(28),promising,promise-01,false), Span(24,25,List(29),programme,program,false), Span(23,24,List(30),party,party,false), Span(21,22,List(31),and,and,false), Span(20,21,List(33, 32),workers,(person :ARG0-of work-01),false), Span(19,20,List(36, 35, 34),jewish,(ethnic-group :name (name :op "Jew")),false), Span(17,18,List(37),representative,represent-01,false), Span(16,17,List(38),sole,sole,false), Span(13,14,List(39),recognized,recognize-01,false), Span(8,9,List(40),party,party,false), Span(7,8,List(41),federal,federal,false), Span(2,3,List(42),should,recommend-01,false)),Map(39 -> recognize-01, 30 -> party, 2 -> and, 5 -> name, 33 -> work-01, 27 -> personal, 12 -> "Jew", 8 -> responsible-41, 15 -> member, 42 -> recommend-01, 36 -> "Jew", 21 -> ethnic-group, 18 -> they, 24 -> all, 41 -> federal, 35 -> name, 7 -> all, 1 -> culture, 17 -> live-01, 23 -> "Jew", 38 -> sole, 26 -> culture, 4 -> ethnic-group, 11 -> name, 32 -> person, 14 -> have-org-role-91, 29 -> program, 20 -> work-01, 34 -> ethnic-group, 28 -> promise-01, 6 -> "Jew", 40 -> party, 9 -> associate-01, 0 -> affair, 22 -> name, 16 -> empire, 37 -> represent-01, 19 -> person, 10 -> ethnic-group, 3 -> educate-01, 31 -> and, 25 -> autonomy, 13 -> nation),Map(a7 -> and, e -> educate-01, n -> name, w -> work-01, r3 -> recognize-01, h -> have-org-role-91, p5 -> party, e5 -> ethnic-group, t -> they, e2 -> ethnic-group, p2 -> personal, a3 -> all, n4 -> name, s -> sole, a6 -> autonomy, m -> member, r2 -> represent-01, p -> person, n3 -> nation, a -> affair, p4 -> program, e4 -> empire, a5 -> all, p7 -> party, w2 -> work-01, r -> responsible-41, a2 -> and, r4 -> recommend-01, c -> culture, p6 -> person, l -> live-01, f -> federal, p3 -> promise-01, e3 -> ethnic-group, n2 -> name, c2 -> culture, e6 -> ethnic-group, a4 -> associate-01, n5 -> name))),[Ljava.lang.String;@241ca7d8,Annotation([Ljava.lang.String;@554f686d,[Ljava.lang.String;@5050f7dc,[Ljava.lang.String;@73c0b5b5),Annotation([Ljava.lang.String;@70d9b971,[Ljava.lang.String;@661de398,[Ledu.cmu.lti.nlp.amr.Dependency;@34494488),Annotation([Ljava.lang.String;@36325789,[Ljava.lang.String;@2310ff2b,[Ljava.lang.String;@30e07209),Annotation([Ljava.lang.String;@5f5ec5f0,[Ljava.lang.String;@4715407a,[Ledu.cmu.lti.nlp.amr.Entity;@443c2e0b))
AMR:
(a / affair, mod, c / culture)
(a / affair, mod, e2 / ethnic-group)
(a2 / and, op, e / educate-01)
(a2 / and, quant, a3 / all)
(a4 / associate-01, ARG0, e4 / empire)
(a4 / associate-01, ARG1, e3 / ethnic-group)
(a4 / associate-01, mod, n3 / nation)
(a6 / autonomy, mod, p2 / personal)
(a7 / and, op, p4 / program)
(e / educate-01, ARG1, a / affair)
(e2 / ethnic-group, name, n / name)
(e3 / ethnic-group, name, n2 / name)
(e5 / ethnic-group, name, n4 / name)
(e6 / ethnic-group, name, n5 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, a4 / associate-01)
(h / have-org-role-91, ARG2, m / member)
(l / live-01, ARG0, t / they)
(l / live-01, ARG1, r2 / represent-01)
(l / live-01, location, e4 / empire)
(n / name, op, "Jew")
(n2 / name, op, "Jew")
(n4 / name, op, "Jew")
(n5 / name, op, "Jew")
(p / person, mod, e5 / ethnic-group)
(p / person, quant, a5 / all)
(p3 / promise-01, ARG0, p4 / program)
(p3 / promise-01, ARG1, a6 / autonomy)
(p4 / program, mod, p5 / party)
(p7 / party, mod, f / federal)
(r / responsible-41, ARG1, a4 / associate-01)
(r / responsible-41, ARG2, a2 / and)
(r2 / represent-01, ARG0, p6 / person)
(r2 / represent-01, ARG1, a7 / and)
(r2 / represent-01, location, e6 / ethnic-group)
(r2 / represent-01, mod, s / sole)
(r3 / recognize-01, ARG0, c2 / culture)
(r3 / recognize-01, ARG1, a7 / and)
(r4 / recommend-01, ARG0, f / federal)
(r4 / recommend-01, ARG1, a7 / and)
(w / work-01, ARG0, p / person)
(w2 / work-01, ARG0, p6 / person)

Decoded in 2,506,784 microseconds
Sentence: while we are promised it will not happen again the match that may well decide the destiny of this seasons first division trophy has to compete with the scrum descending on twickenham this afternoon

Spans:
Span 33-34:  afternoon => afternoon
Span 8-9:  again => again
Span 25-26:  compete => compete-01
Span 14-15:  decide => decide-01
Span 16-17:  destiny => destiny
Span 21-22:  division => division
Span 7-8:  happen => happen-01
Span 4-5:  it => it
Span 10-11:  match => match-01
Span 12-13:  may => (date-entity :month 5)
Span 3-4:  promised => promise-01
Span 32-33:  this => this
Span 18-19:  this => this
Span 22-23:  trophy => trophy
Span 1-2:  we => we
Span 13-14:  well => well

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),afternoon,afternoon,false), Span(32,33,List(1),this,this,false), Span(25,26,List(2),compete,compete-01,false), Span(22,23,List(3),trophy,trophy,false), Span(21,22,List(4),division,division,false), Span(18,19,List(5),this,this,false), Span(16,17,List(6),destiny,destiny,false), Span(14,15,List(7),decide,decide-01,false), Span(13,14,List(8),well,well,false), Span(12,13,List(10, 9),may,(date-entity :month 5),false), Span(10,11,List(11),match,match-01,false), Span(8,9,List(12),again,again,false), Span(7,8,List(13),happen,happen-01,false), Span(4,5,List(14),it,it,false), Span(3,4,List(15),promised,promise-01,false), Span(1,2,List(16),we,we,false)),Map(2 -> compete-01, 5 -> this, 12 -> again, 15 -> promise-01, 8 -> well, 7 -> decide-01, 1 -> this, 4 -> division, 11 -> match-01, 14 -> it, 6 -> destiny, 0 -> afternoon, 9 -> date-entity, 16 -> we, 3 -> trophy, 10 -> 5, 13 -> happen-01),Map(w -> well, h -> happen-01, 5 -> 5, t -> this, d3 -> decide-01, d -> division, m -> match-01, t3 -> this, p -> promise-01, a -> afternoon, d2 -> destiny, t2 -> trophy, w2 -> we, i -> it, a2 -> again, c -> compete-01, d4 -> date-entity))),[Ljava.lang.String;@35e780a,Annotation([Ljava.lang.String;@2f1ada40,[Ljava.lang.String;@beeb7e9,[Ljava.lang.String;@656c281d),Annotation([Ljava.lang.String;@1fbdbbf0,[Ljava.lang.String;@617d99d7,[Ledu.cmu.lti.nlp.amr.Dependency;@7cff2441),Annotation([Ljava.lang.String;@52a56783,[Ljava.lang.String;@692ef3d8,[Ljava.lang.String;@98b1fdb),Annotation([Ljava.lang.String;@cd867c2,[Ljava.lang.String;@5383f824,[Ledu.cmu.lti.nlp.amr.Entity;@7d182e51))
AMR:
(c / compete-01, ARG0, t2 / trophy)
(c / compete-01, ARG1, a / afternoon)
(c / compete-01, ARG2, p / promise-01)
(d3 / decide-01, ARG0, m / match-01)
(d3 / decide-01, ARG1, d2 / destiny)
(d3 / decide-01, mod, w / well)
(d4 / date-entity, domain, d3 / decide-01)
(d4 / date-entity, month, 5 / 5)
(h / happen-01, ARG0, w2 / we)
(h / happen-01, ARG1, i / it)
(h / happen-01, mod, a2 / again)
(m / match-01, ARG0, i / it)
(m / match-01, ARG1, t / this)
(p / promise-01, ARG0, t3 / this)
(p / promise-01, ARG1, w2 / we)
(t2 / trophy, mod, d / division)

Decoded in 514,018 microseconds
Sentence: hypercard 2 expected at next months macworld in boston may promise an answer but silicon beachs supercard offers colour here and now and is hypercardcompatible

Spans:
Span 1-2:  2 => 2
Span 22-23:  and => and
Span 20-21:  and => and
Span 12-13:  answer => answer-01
Span 13-14:  but => contrast-01
Span 18-19:  colour => colour
Span 2-3:  expected => expect-01
Span 19-20:  here => here
Span 9-10:  may => (date-entity :month 5)
Span 5-6:  months => (temporal-quantity :unit month)
Span 4-5:  next => next
Span 21-22:  now => now
Span 17-18:  offers => offer-01
Span 10-11:  promise => promise-01
Span 14-15:  silicon => silicon

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),and,and,false), Span(21,22,List(1),now,now,false), Span(20,21,List(2),and,and,false), Span(19,20,List(3),here,here,false), Span(18,19,List(4),colour,colour,false), Span(17,18,List(5),offers,offer-01,false), Span(14,15,List(6),silicon,silicon,false), Span(13,14,List(7),but,contrast-01,false), Span(12,13,List(8),answer,answer-01,false), Span(10,11,List(9),promise,promise-01,false), Span(9,10,List(11, 10),may,(date-entity :month 5),false), Span(5,6,List(13, 12),months,(temporal-quantity :unit month),false), Span(4,5,List(14),next,next,false), Span(2,3,List(15),expected,expect-01,false), Span(1,2,List(16),2,2,false)),Map(2 -> and, 5 -> offer-01, 12 -> temporal-quantity, 15 -> expect-01, 8 -> answer-01, 7 -> contrast-01, 1 -> now, 4 -> colour, 11 -> 5, 14 -> next, 6 -> silicon, 0 -> and, 9 -> promise-01, 16 -> 2, 3 -> here, 10 -> date-entity, 13 -> month),Map(e -> expect-01, n -> now, h -> here, 2 -> 2, 5 -> 5, t -> temporal-quantity, a3 -> answer-01, s -> silicon, m -> month, d -> date-entity, p -> promise-01, a -> and, a2 -> and, c -> colour, o -> offer-01, n2 -> next, c2 -> contrast-01))),[Ljava.lang.String;@3e890800,Annotation([Ljava.lang.String;@166c5813,[Ljava.lang.String;@230a52e5,[Ljava.lang.String;@7ac84a5b),Annotation([Ljava.lang.String;@7389db56,[Ljava.lang.String;@5f9f265c,[Ledu.cmu.lti.nlp.amr.Dependency;@498f930f),Annotation([Ljava.lang.String;@70ffe383,[Ljava.lang.String;@2fb1e76a,[Ljava.lang.String;@48cff89c),Annotation([Ljava.lang.String;@4dcaef1c,[Ljava.lang.String;@46183f2a,[Ledu.cmu.lti.nlp.amr.Entity;@61db0259))
AMR:
(a / and, op, c / colour)
(a / and, op, h / here)
(a2 / and, op, h / here)
(a2 / and, op, n / now)
(a3 / answer-01, ARG0, o / offer-01)
(c2 / contrast-01, ARG1, p / promise-01)
(c2 / contrast-01, ARG2, a / and)
(c2 / contrast-01, instrument, s / silicon)
(d / date-entity, month, 5 / 5)
(e / expect-01, ARG0, 2 / 2)
(e / expect-01, ARG1, a3 / answer-01)
(m / month, mod, n2 / next)
(p / promise-01, ARG1, a3 / answer-01)
(p / promise-01, ARG2, t / temporal-quantity)
(p / promise-01, mod, d / date-entity)
(t / temporal-quantity, unit, m / month)

Decoded in 403,623 microseconds
Sentence: the rebellion fizzled out after the health secretary kenneth clarke promised a new specific grant for voluntary bodies involved in preventing and treating drug and alcohol abuse

NER Entity: (person :name (name :op "kenneth" :op "clarke"))
Spans:
Span 26-27:  abuse => abuse-01
Span 4-5:  after => after
Span 25-26:  alcohol => alcohol
Span 24-25:  and => and
Span 21-22:  and => and
Span 17-18:  bodies => body
Span 23-24:  drug => drug
Span 14-15:  grant => grant-01
Span 6-7:  health => health
Span 18-19:  involved => involve-01
Span 8-10:  kenneth clarke => (person :name (name :op "kenneth" :op "clarke"))
Span 12-13:  new => new
Span 20-21:  preventing => prevent-01
Span 10-11:  promised => promise-01
Span 1-2:  rebellion => rebel-01
Span 7-8:  secretary => secretary
Span 13-14:  specific => specific
Span 22-23:  treating => treat-03
Span 16-17:  voluntary => volunteer-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),abuse,abuse-01,false), Span(25,26,List(1),alcohol,alcohol,false), Span(24,25,List(2),and,and,false), Span(23,24,List(3),drug,drug,false), Span(22,23,List(4),treating,treat-03,false), Span(21,22,List(5),and,and,false), Span(20,21,List(6),preventing,prevent-01,false), Span(18,19,List(7),involved,involve-01,false), Span(17,18,List(8),bodies,body,false), Span(16,17,List(9),voluntary,volunteer-01,false), Span(14,15,List(10),grant,grant-01,false), Span(13,14,List(11),specific,specific,false), Span(12,13,List(12),new,new,false), Span(10,11,List(13),promised,promise-01,false), Span(8,10,List(17, 16, 15, 14),kenneth clarke,(person :name (name :op "kenneth" :op "clarke")),false), Span(7,8,List(18),secretary,secretary,false), Span(6,7,List(19),health,health,false), Span(4,5,List(20),after,after,false), Span(1,2,List(21),rebellion,rebel-01,false)),Map(2 -> and, 5 -> and, 12 -> new, 15 -> name, 8 -> body, 21 -> rebel-01, 18 -> secretary, 7 -> involve-01, 17 -> "clarke", 1 -> alcohol, 4 -> treat-03, 11 -> specific, 14 -> person, 20 -> after, 6 -> prevent-01, 0 -> abuse-01, 9 -> volunteer-01, 16 -> "kenneth", 19 -> health, 3 -> drug, 10 -> grant-01, 13 -> promise-01),Map(n -> new, h -> health, s2 -> secretary, t -> treat-03, b -> body, p2 -> promise-01, a3 -> and, s -> specific, v -> volunteer-01, d -> drug, p -> prevent-01, g -> grant-01, a -> abuse-01, a5 -> after, r -> rebel-01, a2 -> alcohol, i -> involve-01, p3 -> person, n2 -> name, a4 -> and))),[Ljava.lang.String;@50fa874b,Annotation([Ljava.lang.String;@6fc87675,[Ljava.lang.String;@51d934a8,[Ljava.lang.String;@b102b93),Annotation([Ljava.lang.String;@529cc591,[Ljava.lang.String;@326edcf6,[Ledu.cmu.lti.nlp.amr.Dependency;@c6cb458),Annotation([Ljava.lang.String;@34b403c7,[Ljava.lang.String;@166418d9,[Ljava.lang.String;@59b5a0b),Annotation([Ljava.lang.String;@1a348b0d,[Ljava.lang.String;@6f950feb,[Ledu.cmu.lti.nlp.amr.Entity;@23484688))
AMR:
(a / abuse-01, mod, a2 / alcohol)
(a3 / and, op, t / treat-03)
(a4 / and, op, p / prevent-01)
(a4 / and, op, t / treat-03)
(a5 / after, op, p2 / promise-01)
(g / grant-01, ARG2, b / body)
(g / grant-01, mod, n / new)
(g / grant-01, mod, s / specific)
(i / involve-01, ARG1, b / body)
(i / involve-01, ARG2, p / prevent-01)
(n2 / name, op, "clarke")
(n2 / name, op, "kenneth")
(p / prevent-01, ARG1, a / abuse-01)
(p2 / promise-01, ARG0, p3 / person)
(p2 / promise-01, ARG1, r / rebel-01)
(p2 / promise-01, ARG2, g / grant-01)
(p3 / person, name, n2 / name)
(r / rebel-01, ARG0, h / health)
(s2 / secretary, mod, h / health)
(t / treat-03, ARG1, d / drug)
(v / volunteer-01, ARG1, b / body)

Decoded in 845,050 microseconds
Sentence: the great powers great britain and france who had promised to aid poland and had tried to aid norway could not turn away from small countries on their very doorstep

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "france"))
NER Entity: (country :name (name :op "poland"))
NER Entity: (country :name (name :op "norway"))
NER Entity: (country :name (name :op "france"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 17-18:  aid => aid-01
Span 11-12:  aid => aid-01
Span 13-14:  and => and
Span 5-6:  and => and
Span 22-23:  away => away
Span 4-5:  britain => (country :name (name :op "Britain"))
Span 19-20:  could => possible
Span 25-26:  countries => country
Span 6-7:  france => (country :name (name :op "France"))
Span 3-4:  great => great
Span 1-2:  great => great
Span 2-3:  powers => power
Span 9-10:  promised => promise-01
Span 24-25:  small => small
Span 15-16:  tried => try-01
Span 28-29:  very => very

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),very,very,false), Span(25,26,List(1),countries,country,false), Span(24,25,List(2),small,small,false), Span(22,23,List(3),away,away,false), Span(19,20,List(4),could,possible,false), Span(17,18,List(5),aid,aid-01,false), Span(15,16,List(6),tried,try-01,false), Span(13,14,List(7),and,and,false), Span(11,12,List(8),aid,aid-01,false), Span(9,10,List(9),promised,promise-01,false), Span(6,7,List(12, 11, 10),france,(country :name (name :op "France")),false), Span(5,6,List(13),and,and,false), Span(4,5,List(16, 15, 14),britain,(country :name (name :op "Britain")),false), Span(3,4,List(17),great,great,false), Span(2,3,List(18),powers,power,false), Span(1,2,List(19),great,great,false)),Map(2 -> small, 5 -> aid-01, 12 -> "France", 15 -> name, 8 -> aid-01, 18 -> power, 7 -> and, 17 -> great, 1 -> country, 4 -> possible, 11 -> name, 14 -> country, 6 -> try-01, 0 -> very, 9 -> promise-01, 16 -> "Britain", 19 -> great, 3 -> away, 10 -> country, 13 -> and),Map(n -> name, t -> try-01, p2 -> promise-01, a3 -> and, s -> small, v -> very, g2 -> great, g -> great, p -> possible, c3 -> country, a -> away, a5 -> and, a2 -> aid-01, c -> country, p3 -> power, n2 -> name, c2 -> country, a4 -> aid-01))),[Ljava.lang.String;@5e0e9cd0,Annotation([Ljava.lang.String;@11594bee,[Ljava.lang.String;@7d87ff27,[Ljava.lang.String;@6b8099d3),Annotation([Ljava.lang.String;@47f322c8,[Ljava.lang.String;@2b709d5f,[Ledu.cmu.lti.nlp.amr.Dependency;@6e6bde40),Annotation([Ljava.lang.String;@6bcc7462,[Ljava.lang.String;@3bed0538,[Ljava.lang.String;@45f1be44),Annotation([Ljava.lang.String;@202863c,[Ljava.lang.String;@73bace2b,[Ledu.cmu.lti.nlp.amr.Entity;@6d35a468))
AMR:
(a / away, op, c / country)
(a2 / aid-01, ARG0, p3 / power)
(a3 / and, op, a2 / aid-01)
(a3 / and, op, c2 / country)
(a4 / aid-01, ARG0, c / country)
(a4 / aid-01, ARG1, v / very)
(a5 / and, op, p / possible)
(a5 / and, op, t / try-01)
(c / country, mod, s / small)
(c2 / country, name, n / name)
(c3 / country, mod, g / great)
(c3 / country, name, n2 / name)
(n / name, op, "France")
(n2 / name, op, "Britain")
(p2 / promise-01, ARG0, a5 / and)
(p2 / promise-01, ARG1, a4 / aid-01)
(p3 / power, mod, g2 / great)
(t / try-01, ARG0, c3 / country)
(t / try-01, ARG1, a2 / aid-01)

Decoded in 248,012 microseconds
Sentence:   mr vitler promised to forward an off the shelf petition to his head office

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   mr vitler promised to forward an off the shelf petition to his head office
myTokenized = mr vitler promised to forward an off the shelf petition to his head office
i = 0
prefix = List(mr)
regexr = \Qm\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in california all three candidates for governor have promised to keep the gas chamber busy

NER Entity: (country :name (name :op "california"))
Spans:
Span 2-3:  all => all
Span 14-15:  busy => busy
Span 4-5:  candidates => candidate
Span 13-14:  chamber => chamber
Span 12-13:  gas => gas
Span 6-7:  governor => (have-org-role-91 :ARG2 governor)
Span 8-9:  promised => promise-01
Span 3-4:  three => 3

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),busy,busy,false), Span(13,14,List(1),chamber,chamber,false), Span(12,13,List(2),gas,gas,false), Span(8,9,List(3),promised,promise-01,false), Span(6,7,List(5, 4),governor,(have-org-role-91 :ARG2 governor),false), Span(4,5,List(6),candidates,candidate,false), Span(3,4,List(7),three,3,false), Span(2,3,List(8),all,all,false)),Map(2 -> gas, 5 -> governor, 8 -> all, 7 -> 3, 1 -> chamber, 4 -> have-org-role-91, 6 -> candidate, 0 -> busy, 3 -> promise-01),Map(h -> have-org-role-91, b -> busy, g2 -> governor, p -> promise-01, g -> gas, a -> all, c -> chamber, 3 -> 3, c2 -> candidate))),[Ljava.lang.String;@740cd26d,Annotation([Ljava.lang.String;@75cb2da0,[Ljava.lang.String;@6e209fca,[Ljava.lang.String;@1fdabf42),Annotation([Ljava.lang.String;@52429664,[Ljava.lang.String;@119fa96d,[Ledu.cmu.lti.nlp.amr.Dependency;@92c3c25),Annotation([Ljava.lang.String;@3720a5d7,[Ljava.lang.String;@4067e287,[Ljava.lang.String;@64492e19),Annotation([Ljava.lang.String;@719ebf,[Ljava.lang.String;@236d0dd3,[Ledu.cmu.lti.nlp.amr.Entity;@4ca6a9d0))
AMR:
(a / all, poss, c / chamber)
(b / busy, domain, h / have-org-role-91)
(c / chamber, mod, b / busy)
(c2 / candidate, quant, 3 / 3)
(g / gas, consist, c / chamber)
(h / have-org-role-91, ARG0, c2 / candidate)
(h / have-org-role-91, ARG2, g2 / governor)
(p / promise-01, ARG0, c2 / candidate)

Decoded in 64,462 microseconds
Sentence: id promised a policeman my overalls for charity so he got them

Spans:
Span 7-8:  charity => charity
Span 9-10:  he => he
Span 0-1:  id => id
Span 3-4:  policeman => policeman
Span 1-2:  promised => promise-01
Span 8-9:  so => so

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),he,he,false), Span(8,9,List(1),so,so,false), Span(7,8,List(2),charity,charity,false), Span(3,4,List(3),policeman,policeman,false), Span(1,2,List(4),promised,promise-01,false), Span(0,1,List(5),id,id,false)),Map(2 -> charity, 5 -> id, 1 -> so, 4 -> promise-01, 0 -> he, 3 -> policeman),Map(h -> he, p2 -> promise-01, s -> so, p -> policeman, i -> id, c -> charity))),[Ljava.lang.String;@51d6be00,Annotation([Ljava.lang.String;@69541bf9,[Ljava.lang.String;@10f8ae75,[Ljava.lang.String;@36858c07),Annotation([Ljava.lang.String;@79ac3b87,[Ljava.lang.String;@1a785a79,[Ledu.cmu.lti.nlp.amr.Dependency;@537bcb82),Annotation([Ljava.lang.String;@646dee9f,[Ljava.lang.String;@6d4d3c3b,[Ljava.lang.String;@69ad7d8c),Annotation([Ljava.lang.String;@7d0da887,[Ljava.lang.String;@bb37735,[Ledu.cmu.lti.nlp.amr.Entity;@33573e93))
AMR:
(c / charity, poss, h / he)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, p / policeman)
(p2 / promise-01, time, i / id)
(p2 / promise-01, time, s / so)

Decoded in 38,167 microseconds
Sentence: i promise you rain protested

Spans:
Span 0-1:  i => i
Span 1-2:  promise => promise-01
Span 4-5:  protested => protest-01
Span 3-4:  rain => rain-01
Span 2-3:  you => you

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),protested,protest-01,false), Span(3,4,List(1),rain,rain-01,false), Span(2,3,List(2),you,you,false), Span(1,2,List(3),promise,promise-01,false), Span(0,1,List(4),i,i,false)),Map(2 -> you, 1 -> rain-01, 4 -> i, 0 -> protest-01, 3 -> promise-01),Map(p2 -> promise-01, y -> you, p -> protest-01, i -> i, r -> rain-01))),[Ljava.lang.String;@24cd3f3a,Annotation([Ljava.lang.String;@1ef20bb6,[Ljava.lang.String;@24dee999,[Ljava.lang.String;@26ba4eb8),Annotation([Ljava.lang.String;@118625e5,[Ljava.lang.String;@7e21e65f,[Ledu.cmu.lti.nlp.amr.Dependency;@639ba7aa),Annotation([Ljava.lang.String;@1cbcfd,[Ljava.lang.String;@5ebb8619,[Ljava.lang.String;@696103e5),Annotation([Ljava.lang.String;@6046e56f,[Ljava.lang.String;@4e810bca,[Ledu.cmu.lti.nlp.amr.Entity;@7a2d2309))
AMR:
(p2 / promise-01, ARG0, i / i)
(p2 / promise-01, ARG1, r / rain-01)
(r / rain-01, ARG0, y / you)
(r / rain-01, ARG1, p / protest-01)

Decoded in 17,402 microseconds
Sentence: in december 1977 the headmistress of st anselms school in canterbury one of britains leading roman catholic comprehensives allowed a teacher who was a national front candidate to continue in her post alter she had promised that her national front views would not affect her treatment to black pupils

NER Entity: (country :name (name :op "canterbury"))
Spans:
Span 43-44:  affect => affect-01
Span 18-19:  allowed => allow-01
Span 32-33:  alter => alter-01
Span 47-48:  black => black
Span 26-27:  candidate => candidate
Span 16-17:  catholic => (religious-group :name (name :op "Catholic"))
Span 28-29:  continue => continue-01
Span 1-3:  december 1977 => (date-entity :month 12 :year 1977)
Span 39-40:  front => front
Span 25-26:  front => front
Span 14-15:  leading => lead-01
Span 38-39:  national => nation
Span 24-25:  national => nation
Span 31-32:  post => post
Span 35-36:  promised => promise-01
Span 48-49:  pupils => pupil
Span 8-9:  school => school
Span 33-34:  she => she
Span 20-21:  teacher => (person :ARG0-of teach-01)
Span 45-46:  treatment => treat-03

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),pupils,pupil,false), Span(47,48,List(1),black,black,false), Span(45,46,List(2),treatment,treat-03,false), Span(43,44,List(3),affect,affect-01,false), Span(39,40,List(4),front,front,false), Span(38,39,List(5),national,nation,false), Span(35,36,List(6),promised,promise-01,false), Span(33,34,List(7),she,she,false), Span(32,33,List(8),alter,alter-01,false), Span(31,32,List(9),post,post,false), Span(28,29,List(10),continue,continue-01,false), Span(26,27,List(11),candidate,candidate,false), Span(25,26,List(12),front,front,false), Span(24,25,List(13),national,nation,false), Span(20,21,List(15, 14),teacher,(person :ARG0-of teach-01),false), Span(18,19,List(16),allowed,allow-01,false), Span(16,17,List(19, 18, 17),catholic,(religious-group :name (name :op "Catholic")),false), Span(14,15,List(20),leading,lead-01,false), Span(8,9,List(21),school,school,false), Span(1,3,List(24, 23, 22),december 1977,(date-entity :month 12 :year 1977),false)),Map(2 -> treat-03, 5 -> nation, 12 -> front, 8 -> alter-01, 15 -> teach-01, 21 -> school, 18 -> name, 24 -> 1977, 7 -> she, 1 -> black, 17 -> religious-group, 23 -> 12, 4 -> front, 11 -> candidate, 14 -> person, 20 -> lead-01, 6 -> promise-01, 9 -> post, 0 -> pupil, 22 -> date-entity, 16 -> allow-01, 19 -> "Catholic", 10 -> continue-01, 3 -> affect-01, 13 -> nation),Map(n -> nation, s2 -> school, 12 -> 1977, b -> black, t -> treat-03, p2 -> promise-01, a3 -> allow-01, s -> she, d -> date-entity, 1 -> 12, p -> pupil, n3 -> name, a -> affect-01, p4 -> person, t2 -> teach-01, r -> religious-group, a2 -> alter-01, c -> continue-01, l -> lead-01, f2 -> front, f -> front, p3 -> post, n2 -> nation, c2 -> candidate))),[Ljava.lang.String;@28062593,Annotation([Ljava.lang.String;@2b8cea6c,[Ljava.lang.String;@30726eca,[Ljava.lang.String;@28c7a89f),Annotation([Ljava.lang.String;@4c0f73a3,[Ljava.lang.String;@a70f958,[Ledu.cmu.lti.nlp.amr.Dependency;@7f0205c2),Annotation([Ljava.lang.String;@5dc844b2,[Ljava.lang.String;@7163238,[Ljava.lang.String;@423afe2a),Annotation([Ljava.lang.String;@2f04995e,[Ljava.lang.String;@56f1026f,[Ledu.cmu.lti.nlp.amr.Entity;@68d6f200))
AMR:
(1 / 12, poss, p4 / person)
(a / affect-01, ARG0, s / she)
(a / affect-01, ARG1, t / treat-03)
(a / affect-01, ARG2, p / pupil)
(a2 / alter-01, ARG0, p3 / post)
(a2 / alter-01, ARG1, p2 / promise-01)
(a3 / allow-01, ARG0, p4 / person)
(a3 / allow-01, ARG1, r / religious-group)
(a3 / allow-01, ARG2, l / lead-01)
(c / continue-01, ARG0, n / nation)
(c / continue-01, ARG1, p3 / post)
(c2 / candidate, mod, f2 / front)
(c2 / candidate, mod, n2 / nation)
(c2 / candidate, purpose, c / continue-01)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 12 / 1977)
(l / lead-01, ARG1, s2 / school)
(n3 / name, op, "Catholic")
(p / pupil, mod, b / black)
(p2 / promise-01, ARG0, s / she)
(p2 / promise-01, ARG1, f / front)
(r / religious-group, name, n3 / name)
(t / treat-03, ARG1, p4 / person)
(t2 / teach-01, ARG0, p4 / person)

Decoded in 672,642 microseconds
Sentence: mr patten promised to help mr burch who had flown 3000 miles from his amazon forest home to meet him at a lunch for british businessmen in sao paulo

NER Entity: (thing :name (name :op "british"))
NER Entity: (country :name (name :op "sao" :op "paulo"))
Spans:
Span 10-11:  3000 => (date-entity :year 3000)
Span 25-26:  businessmen => businessman
Span 9-10:  flown => fly-01
Span 15-16:  forest => forest
Span 4-5:  help => help-01
Span 16-17:  home => home
Span 22-23:  lunch => lunch-01
Span 11-12:  miles => (distance-quantity :unit mile)
Span 2-3:  promised => promise-01
Span 27-29:  sao paulo => (country :name (name :op "sao" :op "paulo"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(3, 2, 1, 0),sao paulo,(country :name (name :op "sao" :op "paulo")),false), Span(25,26,List(4),businessmen,businessman,false), Span(22,23,List(5),lunch,lunch-01,false), Span(16,17,List(6),home,home,false), Span(15,16,List(7),forest,forest,false), Span(11,12,List(9, 8),miles,(distance-quantity :unit mile),false), Span(10,11,List(11, 10),3000,(date-entity :year 3000),false), Span(9,10,List(12),flown,fly-01,false), Span(4,5,List(13),help,help-01,false), Span(2,3,List(14),promised,promise-01,false)),Map(2 -> "sao", 5 -> lunch-01, 12 -> fly-01, 8 -> distance-quantity, 7 -> forest, 1 -> name, 4 -> businessman, 11 -> 3000, 14 -> promise-01, 6 -> home, 0 -> country, 9 -> mile, 3 -> "paulo", 10 -> date-entity, 13 -> help-01),Map(n -> name, h -> home, h2 -> help-01, b -> businessman, d -> distance-quantity, m -> mile, p -> promise-01, d2 -> date-entity, c -> country, l -> lunch-01, f2 -> fly-01, f -> forest, 3 -> 3000))),[Ljava.lang.String;@77aa13c5,Annotation([Ljava.lang.String;@3ef827e3,[Ljava.lang.String;@1602c861,[Ljava.lang.String;@10b16391),Annotation([Ljava.lang.String;@6dffcd26,[Ljava.lang.String;@34f5b235,[Ledu.cmu.lti.nlp.amr.Dependency;@6e86d0bc),Annotation([Ljava.lang.String;@54f21f54,[Ljava.lang.String;@63e6ef5d,[Ljava.lang.String;@4e6cf5e8),Annotation([Ljava.lang.String;@53847a91,[Ljava.lang.String;@1e8af06d,[Ledu.cmu.lti.nlp.amr.Entity;@33ae93c5))
AMR:
(b / businessman, location, c / country)
(c / country, name, n / name)
(d / distance-quantity, quant, d2 / date-entity)
(d / distance-quantity, unit, m / mile)
(d2 / date-entity, year, 3 / 3000)
(f2 / fly-01, ARG1, d / distance-quantity)
(f2 / fly-01, location, h / home)
(h / home, mod, f / forest)
(h2 / help-01, ARG1, f2 / fly-01)
(h2 / help-01, ARG2, c / country)
(l / lunch-01, ARG1, b / businessman)
(n / name, op, "paulo")
(n / name, op, "sao")
(p / promise-01, ARG1, h2 / help-01)

Decoded in 75,243 microseconds
Sentence: already michael palin had promised when setting off around the world in 80 days not to pretend he was alone though there must have been some viewers puzzled by his habit of calling his invisible companions passepartout

Spans:
Span 12-13:  80 => 80
Span 19-20:  alone => alone
Span 0-1:  already => already
Span 8-9:  around => around
Span 35-36:  companions => companion
Span 13-14:  days => (temporal-quantity :unit day)
Span 30-31:  habit => habit
Span 17-18:  he => he
Span 34-35:  invisible => (visible :polarity -)
Span 7-8:  off => off
Span 16-17:  pretend => pretend-01
Span 4-5:  promised => promise-01
Span 6-7:  setting => set-02
Span 25-26:  some => some
Span 26-27:  viewers => (person :ARG0-of view-01)
Span 10-11:  world => world

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),companions,companion,false), Span(34,35,List(2, 1),invisible,(visible :polarity -),false), Span(30,31,List(3),habit,habit,false), Span(26,27,List(5, 4),viewers,(person :ARG0-of view-01),false), Span(25,26,List(6),some,some,false), Span(19,20,List(7),alone,alone,false), Span(17,18,List(8),he,he,false), Span(16,17,List(9),pretend,pretend-01,false), Span(13,14,List(11, 10),days,(temporal-quantity :unit day),false), Span(12,13,List(12),80,80,false), Span(10,11,List(13),world,world,false), Span(8,9,List(14),around,around,false), Span(7,8,List(15),off,off,false), Span(6,7,List(16),setting,set-02,false), Span(4,5,List(17),promised,promise-01,false), Span(0,1,List(18),already,already,false)),Map(2 -> -, 5 -> view-01, 12 -> 80, 15 -> off, 8 -> he, 18 -> already, 7 -> alone, 17 -> promise-01, 1 -> visible, 4 -> person, 11 -> day, 14 -> around, 6 -> some, 0 -> companion, 9 -> pretend-01, 16 -> set-02, 3 -> habit, 10 -> temporal-quantity, 13 -> world),Map(v2 -> view-01, w -> world, h -> habit, s2 -> set-02, h2 -> he, t -> temporal-quantity, 8 -> 80, p2 -> pretend-01, a3 -> already, s -> some, v -> visible, d -> day, p -> person, a -> alone, a2 -> around, c -> companion, o -> off, p3 -> promise-01))),[Ljava.lang.String;@124e1099,Annotation([Ljava.lang.String;@4323b632,[Ljava.lang.String;@5d8eaf0d,[Ljava.lang.String;@4286ae77),Annotation([Ljava.lang.String;@182828c0,[Ljava.lang.String;@748b61a3,[Ledu.cmu.lti.nlp.amr.Dependency;@6ab7501b),Annotation([Ljava.lang.String;@28ec5359,[Ljava.lang.String;@33540d0c,[Ljava.lang.String;@5324a927),Annotation([Ljava.lang.String;@bdd6a16,[Ljava.lang.String;@755fd06f,[Ledu.cmu.lti.nlp.amr.Entity;@656d639c))
AMR:
(a2 / around, op, w / world)
(c / companion, mod, v / visible)
(c / companion, op, p2 / pretend-01)
(h / habit, poss, p / person)
(p / person, quant, s / some)
(p2 / pretend-01, ARG0, a / alone)
(p2 / pretend-01, ARG1, h2 / he)
(p3 / promise-01, ARG1, s / some)
(p3 / promise-01, time, s2 / set-02)
(s2 / set-02, ARG0, a3 / already)
(s2 / set-02, ARG1, p2 / pretend-01)
(s2 / set-02, ARG2, w / world)
(s2 / set-02, direction, o / off)
(t / temporal-quantity, op, a2 / around)
(t / temporal-quantity, quant, 8 / 80)
(t / temporal-quantity, unit, d / day)
(v / visible, polarity, -)
(v2 / view-01, ARG0, p / person)

Decoded in 381,984 microseconds
Sentence:   the innovations he promises are hardly the kind to set pulses racing more indepth analysis of processes within the party interviews with politburo members after the regular weekly meetings and detailed coverage of developments at the grass roots

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the innovations he promises are hardly the kind to set pulses racing more indepth analysis of processes within the party interviews with politburo members after the regular weekly meetings and detailed coverage of developments at the grass roots
myTokenized = the innovations he promises are hardly the kind to set pulses racing more indepth analysis of processes within the party interviews with politburo members after the regular weekly meetings and detailed coverage of developments at the grass roots
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: even bulgaria has promised free elections though not yet set a date

NER Entity: (country :name (name :op "bulgaria"))
Spans:
Span 11-12:  date => date
Span 5-6:  elections => elect-01
Span 4-5:  free => free-41
Span 3-4:  promised => promise-01
Span 8-9:  yet => yet

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),date,date,false), Span(8,9,List(1),yet,yet,false), Span(5,6,List(2),elections,elect-01,false), Span(4,5,List(3),free,free-41,false), Span(3,4,List(4),promised,promise-01,false)),Map(2 -> elect-01, 1 -> yet, 4 -> promise-01, 0 -> date, 3 -> free-41),Map(e -> elect-01, d -> date, p -> promise-01, y -> yet, f -> free-41))),[Ljava.lang.String;@564b8be6,Annotation([Ljava.lang.String;@79cdd54c,[Ljava.lang.String;@386eaf0d,[Ljava.lang.String;@6aa69b6c),Annotation([Ljava.lang.String;@60260627,[Ljava.lang.String;@605e1bc1,[Ledu.cmu.lti.nlp.amr.Dependency;@42704d54),Annotation([Ljava.lang.String;@5ae4e7df,[Ljava.lang.String;@6a331017,[Ljava.lang.String;@3e658c79),Annotation([Ljava.lang.String;@7ce97bef,[Ljava.lang.String;@44c7c7fa,[Ledu.cmu.lti.nlp.amr.Entity;@181a115d))
AMR:
(f / free-41, ARG1, e / elect-01)
(f / free-41, degree, y / yet)
(p / promise-01, ARG0, d / date)
(p / promise-01, ARG2, e / elect-01)

Decoded in 15,452 microseconds
Sentence: now i have the opportunity ill make the most of it collins promised

Spans:
Span 1-2:  i => i
Span 5-6:  ill => ill-41
Span 10-11:  it => it
Span 8-9:  most => most
Span 0-1:  now => now
Span 4-5:  opportunity => opportunity
Span 12-13:  promised => promise-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),promised,promise-01,false), Span(10,11,List(1),it,it,false), Span(8,9,List(2),most,most,false), Span(5,6,List(3),ill,ill-41,false), Span(4,5,List(4),opportunity,opportunity,false), Span(1,2,List(5),i,i,false), Span(0,1,List(6),now,now,false)),Map(2 -> most, 5 -> i, 1 -> it, 4 -> opportunity, 6 -> now, 0 -> promise-01, 3 -> ill-41),Map(n -> now, m -> most, i3 -> i, p -> promise-01, i2 -> ill-41, i -> it, o -> opportunity))),[Ljava.lang.String;@5769fd07,Annotation([Ljava.lang.String;@6f630366,[Ljava.lang.String;@4d7456ab,[Ljava.lang.String;@10e61c47),Annotation([Ljava.lang.String;@734a81fb,[Ljava.lang.String;@209bc0df,[Ledu.cmu.lti.nlp.amr.Dependency;@51938132),Annotation([Ljava.lang.String;@2b072375,[Ljava.lang.String;@61a8ec64,[Ljava.lang.String;@1937cb53),Annotation([Ljava.lang.String;@1e05c314,[Ljava.lang.String;@c4a6572,[Ledu.cmu.lti.nlp.amr.Entity;@684a25ab))
AMR:
(i2 / ill-41, ARG0, o / opportunity)
(i2 / ill-41, ARG1, m / most)
(i3 / i, mod, n / now)
(p / promise-01, ARG0, i3 / i)
(p / promise-01, ARG1, m / most)
(p / promise-01, ARG2, i / it)

Decoded in 61,708 microseconds
Sentence: less than two months ago the regional health authority promised 335000 for the project

mkDayMonthYear(335000,00,50,33)
mkDayMonthYear(335000,00,50,33)
Spans:
Span 10-11:  335000 => (date-entity :day 0 :month 50 :year 33)
Span 8-9:  authority => authority
Span 7-8:  health => health
Span 0-1:  less => less
Span 3-4:  months => (temporal-quantity :unit month)
Span 13-14:  project => project
Span 9-10:  promised => promise-01
Span 6-7:  regional => region
Span 2-3:  two => 2

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),project,project,false), Span(10,11,List(4, 3, 2, 1),335000,(date-entity :day 0 :month 50 :year 33),false), Span(9,10,List(5),promised,promise-01,false), Span(8,9,List(6),authority,authority,false), Span(7,8,List(7),health,health,false), Span(6,7,List(8),regional,region,false), Span(3,4,List(10, 9),months,(temporal-quantity :unit month),false), Span(2,3,List(11),two,2,false), Span(0,1,List(12),less,less,false)),Map(2 -> 0, 5 -> promise-01, 12 -> less, 8 -> region, 7 -> health, 1 -> date-entity, 4 -> 33, 11 -> 2, 6 -> authority, 0 -> project, 9 -> temporal-quantity, 3 -> 50, 10 -> month),Map(h -> health, 2 -> 2, 5 -> 50, t -> temporal-quantity, p2 -> promise-01, d -> date-entity, m -> month, p -> project, a -> authority, r -> region, l -> less, 0 -> 0, 3 -> 33))),[Ljava.lang.String;@5bef330a,Annotation([Ljava.lang.String;@350004ad,[Ljava.lang.String;@1433150a,[Ljava.lang.String;@25aa4de2),Annotation([Ljava.lang.String;@4fdf43bf,[Ljava.lang.String;@4ad8d990,[Ledu.cmu.lti.nlp.amr.Dependency;@62b3a353),Annotation([Ljava.lang.String;@7fa7d0c4,[Ljava.lang.String;@627b3555,[Ljava.lang.String;@6ea91f6),Annotation([Ljava.lang.String;@1214b106,[Ljava.lang.String;@c720a30,[Ledu.cmu.lti.nlp.amr.Entity;@12fadbb2))
AMR:
(a / authority, mod, h / health)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 5 / 50)
(d / date-entity, year, 3 / 33)
(h / health, mod, r / region)
(l / less, op, t / temporal-quantity)
(p2 / promise-01, ARG0, t / temporal-quantity)
(p2 / promise-01, ARG1, a / authority)
(p2 / promise-01, location, p / project)
(p2 / promise-01, time, d / date-entity)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, m / month)

Decoded in 144,593 microseconds
Sentence: apparently he promised not to attack douglas hurd personally but then quotes stitched him up and hung him out to dry over the classlessness thing

Spans:
Span 15-16:  and => and
Span 0-1:  apparently => apparent
Span 5-6:  attack => attack-01
Span 9-10:  but => contrast-01
Span 20-21:  dry => dry-02
Span 1-2:  he => he
Span 16-17:  hung => hang-04
Span 8-9:  personally => personal
Span 2-3:  promised => promise-01
Span 11-12:  quotes => quote-01
Span 10-11:  then => then
Span 24-25:  thing => thing

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),thing,thing,false), Span(20,21,List(1),dry,dry-02,false), Span(16,17,List(2),hung,hang-04,false), Span(15,16,List(3),and,and,false), Span(11,12,List(4),quotes,quote-01,false), Span(10,11,List(5),then,then,false), Span(9,10,List(6),but,contrast-01,false), Span(8,9,List(7),personally,personal,false), Span(5,6,List(8),attack,attack-01,false), Span(2,3,List(9),promised,promise-01,false), Span(1,2,List(10),he,he,false), Span(0,1,List(11),apparently,apparent,false)),Map(2 -> hang-04, 5 -> then, 8 -> attack-01, 7 -> personal, 1 -> dry-02, 11 -> apparent, 4 -> quote-01, 6 -> contrast-01, 9 -> promise-01, 0 -> thing, 10 -> he, 3 -> and),Map(q -> quote-01, h -> hang-04, h2 -> he, t -> thing, p2 -> promise-01, a3 -> apparent, d -> dry-02, p -> personal, a -> and, t2 -> then, a2 -> attack-01, c -> contrast-01))),[Ljava.lang.String;@136d8cda,Annotation([Ljava.lang.String;@7d3a462c,[Ljava.lang.String;@7cd532ee,[Ljava.lang.String;@1102e749),Annotation([Ljava.lang.String;@559e7258,[Ljava.lang.String;@15651b52,[Ledu.cmu.lti.nlp.amr.Dependency;@20e4af77),Annotation([Ljava.lang.String;@5bbbe80,[Ljava.lang.String;@68d7c870,[Ljava.lang.String;@2ea866d6),Annotation([Ljava.lang.String;@31f78388,[Ljava.lang.String;@70dc6f58,[Ledu.cmu.lti.nlp.amr.Entity;@1812344b))
AMR:
(a / and, op, h / hang-04)
(a2 / attack-01, ARG0, h2 / he)
(a2 / attack-01, ARG1, c / contrast-01)
(c / contrast-01, ARG1, p / personal)
(c / contrast-01, ARG2, q / quote-01)
(d / dry-02, ARG1, t / thing)
(h / hang-04, ARG0, h2 / he)
(h / hang-04, ARG4, d / dry-02)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, time, a3 / apparent)
(q / quote-01, ARG0, t2 / then)

Decoded in 102,309 microseconds
Sentence: in homer agamemnon excuses his behaviour by pointing to the action of ate on his mind but it does not occur to him to deny his responsibility or to shuffle out of paying the enormous compensation which he has promised to achilles

Spans:
Span 10-11:  action => action
Span 5-6:  behaviour => behave-01
Span 16-17:  but => contrast-01
Span 35-36:  compensation => compensate-01
Span 24-25:  deny => deny-01
Span 34-35:  enormous => enormous
Span 3-4:  excuses => excuse-01
Span 37-38:  he => he
Span 17-18:  it => it
Span 15-16:  mind => mind
Span 20-21:  occur => occur-01
Span 27-28:  or => or
Span 32-33:  paying => pay-01
Span 7-8:  pointing => point-02
Span 39-40:  promised => promise-01
Span 26-27:  responsibility => responsible-41

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),promised,promise-01,false), Span(37,38,List(1),he,he,false), Span(35,36,List(2),compensation,compensate-01,false), Span(34,35,List(3),enormous,enormous,false), Span(32,33,List(4),paying,pay-01,false), Span(27,28,List(5),or,or,false), Span(26,27,List(6),responsibility,responsible-41,false), Span(24,25,List(7),deny,deny-01,false), Span(20,21,List(8),occur,occur-01,false), Span(17,18,List(9),it,it,false), Span(16,17,List(10),but,contrast-01,false), Span(15,16,List(11),mind,mind,false), Span(10,11,List(12),action,action,false), Span(7,8,List(13),pointing,point-02,false), Span(5,6,List(14),behaviour,behave-01,false), Span(3,4,List(15),excuses,excuse-01,false)),Map(2 -> compensate-01, 5 -> or, 12 -> action, 15 -> excuse-01, 8 -> occur-01, 7 -> deny-01, 1 -> he, 4 -> pay-01, 11 -> mind, 14 -> behave-01, 6 -> responsible-41, 0 -> promise-01, 9 -> it, 3 -> enormous, 10 -> contrast-01, 13 -> point-02),Map(e -> enormous, h -> he, b -> behave-01, e2 -> excuse-01, p2 -> pay-01, d -> deny-01, m -> mind, p -> promise-01, a -> action, o2 -> occur-01, r -> responsible-41, i -> it, c -> compensate-01, o -> or, p3 -> point-02, c2 -> contrast-01))),[Ljava.lang.String;@53273445,Annotation([Ljava.lang.String;@32d8c8a9,[Ljava.lang.String;@365de953,[Ljava.lang.String;@4f816407),Annotation([Ljava.lang.String;@37ce3058,[Ljava.lang.String;@41c7fe07,[Ledu.cmu.lti.nlp.amr.Dependency;@30f69f4e),Annotation([Ljava.lang.String;@f54d2ff,[Ljava.lang.String;@9e86b36,[Ljava.lang.String;@79d6ab4e),Annotation([Ljava.lang.String;@7c88cc5f,[Ljava.lang.String;@7921b0d8,[Ledu.cmu.lti.nlp.amr.Entity;@12e17309))
AMR:
(c / compensate-01, mod, e / enormous)
(c2 / contrast-01, ARG2, o2 / occur-01)
(d / deny-01, ARG1, r / responsible-41)
(e2 / excuse-01, ARG1, b / behave-01)
(e2 / excuse-01, manner, p3 / point-02)
(o / or, op, d / deny-01)
(o2 / occur-01, ARG0, i / it)
(o2 / occur-01, ARG1, d / deny-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, c / compensate-01)
(p2 / pay-01, ARG1, c / compensate-01)
(p3 / point-02, ARG1, c2 / contrast-01)
(p3 / point-02, ARG2, a / action)
(p3 / point-02, prep-with, m / mind)
(r / responsible-41, ARG1, h / he)

Decoded in 211,406 microseconds
Sentence: deputy hospital general manager mr seamus mannion promised that the money would go towards a play area for children on level four

Spans:
Span 16-17:  area => area
Span 18-19:  children => child
Span 0-1:  deputy => deputy
Span 21-22:  four => 4
Span 2-3:  general => general
Span 1-2:  hospital => hospital
Span 20-21:  level => level
Span 3-4:  manager => manage-01
Span 10-11:  money => money
Span 15-16:  play => play-01
Span 7-8:  promised => promise-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),four,4,false), Span(20,21,List(1),level,level,false), Span(18,19,List(2),children,child,false), Span(16,17,List(3),area,area,false), Span(15,16,List(4),play,play-01,false), Span(10,11,List(5),money,money,false), Span(7,8,List(6),promised,promise-01,false), Span(3,4,List(7),manager,manage-01,false), Span(2,3,List(8),general,general,false), Span(1,2,List(9),hospital,hospital,false), Span(0,1,List(10),deputy,deputy,false)),Map(2 -> child, 5 -> money, 8 -> general, 7 -> manage-01, 1 -> level, 4 -> play-01, 6 -> promise-01, 9 -> hospital, 0 -> 4, 10 -> deputy, 3 -> area),Map(h -> hospital, m2 -> manage-01, p2 -> promise-01, d -> deputy, m -> money, g -> general, p -> play-01, a -> area, 4 -> 4, c -> child, l -> level))),[Ljava.lang.String;@f475d8e,Annotation([Ljava.lang.String;@164f1d78,[Ljava.lang.String;@2417bcb9,[Ljava.lang.String;@12672832),Annotation([Ljava.lang.String;@327ff40e,[Ljava.lang.String;@6e6fdd08,[Ledu.cmu.lti.nlp.amr.Dependency;@721870dc),Annotation([Ljava.lang.String;@2299b609,[Ljava.lang.String;@197e1a9e,[Ljava.lang.String;@26058825),Annotation([Ljava.lang.String;@352d48a3,[Ljava.lang.String;@2ffbe09b,[Ledu.cmu.lti.nlp.amr.Entity;@4156f8b9))
AMR:
(a / area, mod, c / child)
(a / area, purpose, p / play-01)
(c / child, location, l / level)
(h / hospital, mod, d / deputy)
(h / hospital, mod, m2 / manage-01)
(l / level, poss, m / money)
(m2 / manage-01, ARG0, 4 / 4)
(m2 / manage-01, ARG1, m / money)
(p / play-01, ARG0, g / general)
(p2 / promise-01, ARG0, m / money)

Decoded in 74,572 microseconds
Sentence: on 19 august kitchener sent the fifth division to france on 1 september when french lost his nerve kitchener promised to send the sixth also

NER Entity: (country :name (name :op "france"))
NER Entity: (country :name (name :op "france"))
Spans:
Span 11-12:  1 => 1
Span 1-2:  19 => 19
Span 24-25:  also => also
Span 2-3:  august => (date-entity :month 8)
Span 7-8:  division => division
Span 9-10:  france => (country :name (name :op "France"))
Span 14-15:  french => (country :name (name :op "France"))
Span 15-16:  lost => lose-02
Span 17-18:  nerve => nerve
Span 19-20:  promised => promise-01
Span 21-22:  send => send-01
Span 4-5:  sent => send-01
Span 12-13:  september => (date-entity :month 9)

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),also,also,false), Span(21,22,List(1),send,send-01,false), Span(19,20,List(2),promised,promise-01,false), Span(17,18,List(3),nerve,nerve,false), Span(15,16,List(4),lost,lose-02,false), Span(14,15,List(7, 6, 5),french,(country :name (name :op "France")),false), Span(12,13,List(9, 8),september,(date-entity :month 9),false), Span(11,12,List(10),1,1,false), Span(9,10,List(13, 12, 11),france,(country :name (name :op "France")),false), Span(7,8,List(14),division,division,false), Span(4,5,List(15),sent,send-01,false), Span(2,3,List(17, 16),august,(date-entity :month 8),false), Span(1,2,List(18),19,19,false)),Map(2 -> promise-01, 5 -> country, 12 -> name, 15 -> send-01, 8 -> date-entity, 18 -> 19, 7 -> "France", 17 -> 8, 1 -> send-01, 4 -> lose-02, 11 -> country, 14 -> division, 6 -> name, 0 -> also, 9 -> 9, 16 -> date-entity, 3 -> nerve, 10 -> 1, 13 -> "France"),Map(n -> nerve, s2 -> send-01, 12 -> 19, 8 -> 8, d3 -> date-entity, s -> send-01, d -> date-entity, 1 -> 1, p -> promise-01, a -> also, n3 -> name, d2 -> division, c -> country, l -> lose-02, 9 -> 9, n2 -> name, c2 -> country))),[Ljava.lang.String;@34e35b32,Annotation([Ljava.lang.String;@3a784abe,[Ljava.lang.String;@2f731def,[Ljava.lang.String;@2eb24e3f),Annotation([Ljava.lang.String;@3c2f220c,[Ljava.lang.String;@3a6460b2,[Ledu.cmu.lti.nlp.amr.Dependency;@14086411),Annotation([Ljava.lang.String;@32e1a25d,[Ljava.lang.String;@7b6aa1c3,[Ljava.lang.String;@15a24882),Annotation([Ljava.lang.String;@514659e6,[Ljava.lang.String;@61b834b9,[Ledu.cmu.lti.nlp.amr.Entity;@48d8fce))
AMR:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d / date-entity, month, 9 / 9)
(d3 / date-entity, month, 8 / 8)
(d3 / date-entity, quant, 12 / 19)
(l / lose-02, ARG0, c / country)
(l / lose-02, ARG1, n / nerve)
(l / lose-02, time, d3 / date-entity)
(n2 / name, op, "France")
(n3 / name, op, "France")
(p / promise-01, ARG0, c / country)
(p / promise-01, ARG1, d / date-entity)
(p / promise-01, ARG2, s / send-01)
(s / send-01, ARG1, 1 / 1)
(s / send-01, mod, a / also)
(s2 / send-01, ARG1, d2 / division)
(s2 / send-01, purpose, c2 / country)
(s2 / send-01, time, d / date-entity)

Decoded in 321,492 microseconds
Sentence: it follows that peoples interest in being able to bind themselves is the basis of a power to promise which they possess and of an obligation to keep promises they make, but neither the power nor the obligation point to a right to promise, the right exists because the very same interest on which the power to promise and the duty to keep promises are based is also the ground for holding others to be subject to a duty not to interfere with ones promising

Spans:
Span 7-8:  able => possible
Span 69-70:  also => also
Span 60-61:  and => and
Span 22-23:  and => and
Span 67-68:  based => base-01
Span 49-50:  because => cause-01
Span 32-33:  but => contrast-01
Span 80-81:  duty => duty
Span 62-63:  duty => duty
Span 48-49:  exists => exist-01
Span 71-72:  ground => ground
Span 73-74:  holding => hold-01
Span 53-54:  interest => interest-01
Span 4-5:  interest => interest-01
Span 83-84:  interfere => interfere-01
Span 0-1:  it => it
Span 38-39:  obligation => obligate-01
Span 25-26:  obligation => obligate-01
Span 85-86:  ones => one
Span 74-75:  others => other
Span 3-4:  peoples => people
Span 39-40:  point => point
Span 21-22:  possess => possess-01
Span 57-58:  power => power
Span 35-36:  power => power
Span 16-17:  power => power
Span 59-60:  promise => promise-01
Span 44-45:  promise => promise-01
Span 18-19:  promise => promise-01
Span 65-66:  promises => promise-01
Span 28-29:  promises => promise-01
Span 86-87:  promising => promise-01
Span 52-53:  same => same-41
Span 77-78:  subject => subject
Span 29-30:  they => they
Span 20-21:  they => they
Span 51-52:  very => very

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(86,87,List(0),promising,promise-01,false), Span(85,86,List(1),ones,one,false), Span(83,84,List(2),interfere,interfere-01,false), Span(80,81,List(3),duty,duty,false), Span(77,78,List(4),subject,subject,false), Span(74,75,List(5),others,other,false), Span(73,74,List(6),holding,hold-01,false), Span(71,72,List(7),ground,ground,false), Span(69,70,List(8),also,also,false), Span(67,68,List(9),based,base-01,false), Span(65,66,List(10),promises,promise-01,false), Span(62,63,List(11),duty,duty,false), Span(60,61,List(12),and,and,false), Span(59,60,List(13),promise,promise-01,false), Span(57,58,List(14),power,power,false), Span(53,54,List(15),interest,interest-01,false), Span(52,53,List(16),same,same-41,false), Span(51,52,List(17),very,very,false), Span(49,50,List(18),because,cause-01,false), Span(48,49,List(19),exists,exist-01,false), Span(44,45,List(20),promise,promise-01,false), Span(39,40,List(21),point,point,false), Span(38,39,List(22),obligation,obligate-01,false), Span(35,36,List(23),power,power,false), Span(32,33,List(24),but,contrast-01,false), Span(29,30,List(25),they,they,false), Span(28,29,List(26),promises,promise-01,false), Span(25,26,List(27),obligation,obligate-01,false), Span(22,23,List(28),and,and,false), Span(21,22,List(29),possess,possess-01,false), Span(20,21,List(30),they,they,false), Span(18,19,List(31),promise,promise-01,false), Span(16,17,List(32),power,power,false), Span(7,8,List(33),able,possible,false), Span(4,5,List(34),interest,interest-01,false), Span(3,4,List(35),peoples,people,false), Span(0,1,List(36),it,it,false)),Map(30 -> they, 2 -> interfere-01, 5 -> other, 33 -> possible, 27 -> obligate-01, 12 -> and, 8 -> also, 15 -> interest-01, 36 -> it, 21 -> point, 18 -> cause-01, 24 -> contrast-01, 35 -> people, 7 -> ground, 1 -> one, 17 -> very, 23 -> power, 26 -> promise-01, 4 -> subject, 11 -> duty, 32 -> power, 14 -> power, 29 -> possess-01, 20 -> promise-01, 34 -> interest-01, 28 -> and, 6 -> hold-01, 9 -> base-01, 0 -> promise-01, 22 -> obligate-01, 16 -> same-41, 19 -> exist-01, 10 -> promise-01, 3 -> duty, 31 -> promise-01, 25 -> they, 13 -> promise-01),Map(p10 -> promise-01, e -> exist-01, h -> hold-01, i4 -> it, s2 -> same-41, p5 -> promise-01, t -> they, b -> base-01, p8 -> promise-01, o3 -> obligate-01, p2 -> promise-01, p12 -> possible, a3 -> and, s -> subject, v -> very, d -> duty, i3 -> interest-01, g -> ground, p -> promise-01, a -> also, p4 -> power, d2 -> duty, o2 -> other, p7 -> power, p11 -> power, t2 -> they, i2 -> interest-01, a2 -> and, i -> interfere-01, c -> cause-01, p6 -> point, o -> one, p9 -> possess-01, o4 -> obligate-01, p13 -> people, p3 -> promise-01, c2 -> contrast-01))),[Ljava.lang.String;@428a41b9,Annotation([Ljava.lang.String;@2e0fad0,[Ljava.lang.String;@726f2a,[Ljava.lang.String;@58e02ea0),Annotation([Ljava.lang.String;@661537f5,[Ljava.lang.String;@7b0cea2e,[Ledu.cmu.lti.nlp.amr.Dependency;@ce2b11f),Annotation([Ljava.lang.String;@76da70d4,[Ljava.lang.String;@7f25ab41,[Ljava.lang.String;@20e799e),Annotation([Ljava.lang.String;@4527520,[Ljava.lang.String;@41878a17,[Ledu.cmu.lti.nlp.amr.Entity;@297b0d9d))
AMR:
(a2 / and, op, d2 / duty)
(a2 / and, op, e / exist-01)
(a2 / and, op, g / ground)
(a2 / and, op, p4 / power)
(a2 / and, op, p6 / point)
(a2 / and, op, p7 / power)
(a3 / and, op, p9 / possess-01)
(b / base-01, ARG0, a2 / and)
(b / base-01, ARG1, p2 / promise-01)
(c / cause-01, ARG0, a3 / and)
(c / cause-01, ARG1, e / exist-01)
(c2 / contrast-01, ARG1, p8 / promise-01)
(c2 / contrast-01, ARG2, e / exist-01)
(e / exist-01, ARG0, i4 / it)
(e / exist-01, ARG1, t / they)
(g / ground, topic, h / hold-01)
(h / hold-01, ARG0, a / also)
(h / hold-01, ARG1, o2 / other)
(h / hold-01, purpose, i / interfere-01)
(i / interfere-01, ARG0, d / duty)
(i / interfere-01, ARG1, o / one)
(i3 / interest-01, ARG0, p12 / possible)
(i3 / interest-01, ARG1, p13 / people)
(o3 / obligate-01, ARG1, p3 / promise-01)
(p / promise-01, ARG1, o / one)
(p10 / promise-01, ARG0, p11 / power)
(p10 / promise-01, ARG1, p9 / possess-01)
(p3 / promise-01, ARG0, p4 / power)
(p3 / promise-01, ARG1, i2 / interest-01)
(p5 / promise-01, ARG0, a2 / and)
(p8 / promise-01, ARG0, i3 / interest-01)
(p8 / promise-01, ARG1, o4 / obligate-01)
(p9 / possess-01, ARG0, t2 / they)
(s / subject, prep-to, d / duty)
(s2 / same-41, ARG1, i2 / interest-01)
(s2 / same-41, degree, v / very)

Decoded in 2,336,119 microseconds
Sentence: the egyptian president hosni mubarak and the libyan leader muammar gaddafi enemies for years promised yesterday to respect each others laws security and stability

NER Entity: (thing :name (name :op "egyptian"))
NER Entity: (person :name (name :op "hosni" :op "mubarak"))
NER Entity: (thing :name (name :op "libyan"))
Spans:
Span 22-23:  and => and
Span 5-6:  and => and
Span 18-19:  each => each
Span 11-12:  enemies => (have-rel-role-91 :ARG2 enemy)
Span 3-5:  hosni mubarak => (person :name (name :op "hosni" :op "mubarak"))
Span 20-21:  laws => law
Span 8-9:  leader => (person :ARG0-of lead-02)
Span 19-20:  others => other
Span 2-3:  president => (have-org-role-91 :ARG2 president)
Span 14-15:  promised => promise-01
Span 17-18:  respect => respect-01
Span 21-22:  security => security
Span 23-24:  stability => stability
Span 13-14:  years => (temporal-quantity :unit year)
Span 15-16:  yesterday => yesterday

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),stability,stability,false), Span(22,23,List(1),and,and,false), Span(21,22,List(2),security,security,false), Span(20,21,List(3),laws,law,false), Span(19,20,List(4),others,other,false), Span(18,19,List(5),each,each,false), Span(17,18,List(6),respect,respect-01,false), Span(15,16,List(7),yesterday,yesterday,false), Span(14,15,List(8),promised,promise-01,false), Span(13,14,List(10, 9),years,(temporal-quantity :unit year),false), Span(11,12,List(12, 11),enemies,(have-rel-role-91 :ARG2 enemy),false), Span(8,9,List(14, 13),leader,(person :ARG0-of lead-02),false), Span(5,6,List(15),and,and,false), Span(3,5,List(19, 18, 17, 16),hosni mubarak,(person :name (name :op "hosni" :op "mubarak")),false), Span(2,3,List(21, 20),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> security, 5 -> each, 12 -> enemy, 15 -> and, 8 -> promise-01, 21 -> president, 18 -> "hosni", 7 -> yesterday, 17 -> name, 1 -> and, 4 -> other, 11 -> have-rel-role-91, 14 -> lead-02, 20 -> have-org-role-91, 6 -> respect-01, 0 -> stability, 9 -> temporal-quantity, 16 -> person, 19 -> "mubarak", 3 -> law, 10 -> year, 13 -> person),Map(e -> each, n -> name, h -> have-rel-role-91, h2 -> have-org-role-91, s2 -> security, t -> temporal-quantity, p2 -> person, e2 -> enemy, s -> stability, y -> yesterday, p -> promise-01, a -> and, p4 -> president, l2 -> lead-02, a2 -> and, r -> respect-01, l -> law, o -> other, p3 -> person, y2 -> year))),[Ljava.lang.String;@1106d63c,Annotation([Ljava.lang.String;@57db05df,[Ljava.lang.String;@6c5ea088,[Ljava.lang.String;@387d784d),Annotation([Ljava.lang.String;@35652434,[Ljava.lang.String;@32bed4f,[Ledu.cmu.lti.nlp.amr.Dependency;@38e8df29),Annotation([Ljava.lang.String;@409319ef,[Ljava.lang.String;@798bbb07,[Ljava.lang.String;@44a406e8),Annotation([Ljava.lang.String;@6cc18c8c,[Ljava.lang.String;@16f2731c,[Ledu.cmu.lti.nlp.amr.Entity;@7633f09))
AMR:
(a / and, op, s / stability)
(a / and, op, s2 / security)
(a2 / and, op, p2 / person)
(a2 / and, op, p3 / person)
(a2 / and, op, r / respect-01)
(h / have-rel-role-91, ARG1, p3 / person)
(h / have-rel-role-91, ARG2, e2 / enemy)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, p4 / president)
(l / law, mod, o / other)
(l2 / lead-02, ARG0, p2 / person)
(n / name, op, "hosni")
(n / name, op, "mubarak")
(p / promise-01, ARG1, r / respect-01)
(p / promise-01, ARG2, a / and)
(p / promise-01, time, y / yesterday)
(p3 / person, name, n / name)
(r / respect-01, ARG0, t / temporal-quantity)
(r / respect-01, ARG1, l / law)
(s2 / security, mod, e / each)
(t / temporal-quantity, unit, y2 / year)

Decoded in 860,789 microseconds
Sentence:   for three nights rain went to the nightclub an accommodating barmaid promising to point out drummond

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   for three nights rain went to the nightclub an accommodating barmaid promising to point out drummond
myTokenized = for three nights rain went to the nightclub an accommodating barmaid promising to point out drummond
i = 0
prefix = List(for)
regexr = \Qf\E ?\Qo\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the evident commitment of the 11 to the project virtually ensures that the strasbourg summit on 8 and 9 december will end with margaret thatcher being formally outvoted on what promises to be a central plank of community policy in the next decade

Spans:
Span 5-6:  11 => 11
Span 16-17:  8 => 8
Span 18-19:  9 => 9
Span 17-18:  and => and
Span 34-35:  central => central
Span 2-3:  commitment => commit-01
Span 37-38:  community => community
Span 42-43:  decade => (temporal-quantity :unit decade)
Span 19-20:  december => (date-entity :month 12)
Span 1-2:  evident => evident
Span 26-27:  formally => formal
Span 41-42:  next => next
Span 38-39:  policy => policy
Span 8-9:  project => project
Span 30-31:  promises => promise-01
Span 14-15:  summit => summit
Span 9-10:  virtually => virtual

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(1, 0),decade,(temporal-quantity :unit decade),false), Span(41,42,List(2),next,next,false), Span(38,39,List(3),policy,policy,false), Span(37,38,List(4),community,community,false), Span(34,35,List(5),central,central,false), Span(30,31,List(6),promises,promise-01,false), Span(26,27,List(7),formally,formal,false), Span(19,20,List(9, 8),december,(date-entity :month 12),false), Span(18,19,List(10),9,9,false), Span(17,18,List(11),and,and,false), Span(16,17,List(12),8,8,false), Span(14,15,List(13),summit,summit,false), Span(9,10,List(14),virtually,virtual,false), Span(8,9,List(15),project,project,false), Span(5,6,List(16),11,11,false), Span(2,3,List(17),commitment,commit-01,false), Span(1,2,List(18),evident,evident,false)),Map(2 -> next, 5 -> central, 12 -> 8, 15 -> project, 8 -> date-entity, 18 -> evident, 7 -> formal, 17 -> commit-01, 1 -> decade, 4 -> community, 11 -> and, 14 -> virtual, 6 -> promise-01, 0 -> temporal-quantity, 9 -> 12, 16 -> 11, 3 -> policy, 10 -> 9, 13 -> summit),Map(e -> evident, n -> next, 12 -> 11, t -> temporal-quantity, 8 -> 8, p2 -> promise-01, s -> summit, v -> virtual, d -> decade, 1 -> 12, p -> policy, c3 -> commit-01, a -> and, d2 -> date-entity, c -> community, f -> formal, 9 -> 9, p3 -> project, c2 -> central))),[Ljava.lang.String;@333526ae,Annotation([Ljava.lang.String;@667e83c5,[Ljava.lang.String;@7bfd2f14,[Ljava.lang.String;@2b1e09a4),Annotation([Ljava.lang.String;@410b0419,[Ljava.lang.String;@3a3a26ab,[Ledu.cmu.lti.nlp.amr.Dependency;@3fc0c26a),Annotation([Ljava.lang.String;@81bddd9,[Ljava.lang.String;@5d81d5b7,[Ljava.lang.String;@76f61156),Annotation([Ljava.lang.String;@14ec621e,[Ljava.lang.String;@2b1daa4d,[Ledu.cmu.lti.nlp.amr.Entity;@2897bb58))
AMR:
(8 / 8, op, c3 / commit-01)
(a / and, op, p / policy)
(a / and, op, p3 / project)
(a / and, time, d2 / date-entity)
(c3 / commit-01, ARG0, 9 / 9)
(c3 / commit-01, ARG1, a / and)
(c3 / commit-01, mod, e / evident)
(c3 / commit-01, time, 12 / 11)
(d / decade, mod, n / next)
(d2 / date-entity, month, 1 / 12)
(f / formal, op, c3 / commit-01)
(p / policy, mod, c / community)
(p2 / promise-01, ARG0, t / temporal-quantity)
(p2 / promise-01, ARG1, c2 / central)
(p2 / promise-01, ARG2, a / and)
(s / summit, time, d2 / date-entity)
(t / temporal-quantity, unit, d / decade)
(v / virtual, op, p2 / promise-01)

Decoded in 273,682 microseconds
Sentence: she must he thought as he crossed the thames by chelsea bridge be used to men who were smarter wittier and certainly taller than he men with more time to court her able to offer her participation in their useful lives promising untroubled committed relationships not the public ordeal which was all his company implied

Spans:
Span 32-33:  able => possible
Span 51-52:  all => all
Span 20-21:  and => and
Span 11-12:  bridge => bridge
Span 21-22:  certainly => certain
Span 43-44:  committed => commit-01
Span 53-54:  company => company
Span 30-31:  court => court
Span 6-7:  crossed => cross-00
Span 24-25:  he => he
Span 5-6:  he => he
Span 2-3:  he => he
Span 54-55:  implied => imply-01
Span 40-41:  lives => life
Span 25-26:  men => man
Span 15-16:  men => man
Span 34-35:  offer => offer-01
Span 48-49:  ordeal => ordeal
Span 36-37:  participation => participate-01
Span 41-42:  promising => promise-01
Span 47-48:  public => public
Span 44-45:  relationships => relationship
Span 0-1:  she => she
Span 3-4:  thought => think-01
Span 28-29:  time => time
Span 13-14:  used => use-01
Span 39-40:  useful => useful

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),implied,imply-01,false), Span(53,54,List(1),company,company,false), Span(51,52,List(2),all,all,false), Span(48,49,List(3),ordeal,ordeal,false), Span(47,48,List(4),public,public,false), Span(44,45,List(5),relationships,relationship,false), Span(43,44,List(6),committed,commit-01,false), Span(41,42,List(7),promising,promise-01,false), Span(40,41,List(8),lives,life,false), Span(39,40,List(9),useful,useful,false), Span(36,37,List(10),participation,participate-01,false), Span(34,35,List(11),offer,offer-01,false), Span(32,33,List(12),able,possible,false), Span(30,31,List(13),court,court,false), Span(28,29,List(14),time,time,false), Span(25,26,List(15),men,man,false), Span(24,25,List(16),he,he,false), Span(21,22,List(17),certainly,certain,false), Span(20,21,List(18),and,and,false), Span(15,16,List(19),men,man,false), Span(13,14,List(20),used,use-01,false), Span(11,12,List(21),bridge,bridge,false), Span(6,7,List(22),crossed,cross-00,false), Span(5,6,List(23),he,he,false), Span(3,4,List(24),thought,think-01,false), Span(2,3,List(25),he,he,false), Span(0,1,List(26),she,she,false)),Map(2 -> all, 5 -> relationship, 12 -> possible, 8 -> life, 15 -> man, 21 -> bridge, 18 -> and, 24 -> think-01, 7 -> promise-01, 1 -> company, 17 -> certain, 23 -> he, 26 -> she, 4 -> public, 11 -> offer-01, 14 -> time, 20 -> use-01, 6 -> commit-01, 9 -> useful, 0 -> imply-01, 22 -> cross-00, 16 -> he, 19 -> man, 10 -> participate-01, 3 -> ordeal, 25 -> he, 13 -> court),Map(h -> he, h2 -> he, t -> time, b -> bridge, m2 -> man, p2 -> promise-01, c4 -> certain, u2 -> use-01, s -> she, m -> man, p -> public, a -> all, c3 -> court, p4 -> possible, o2 -> offer-01, t2 -> think-01, r -> relationship, i -> imply-01, a2 -> and, h3 -> he, c -> company, u -> useful, l -> life, o -> ordeal, p3 -> participate-01, c2 -> commit-01, c5 -> cross-00))),[Ljava.lang.String;@6510f9d8,Annotation([Ljava.lang.String;@3d8307be,[Ljava.lang.String;@65716a7e,[Ljava.lang.String;@7906aa39),Annotation([Ljava.lang.String;@2491c242,[Ljava.lang.String;@5d688dcf,[Ledu.cmu.lti.nlp.amr.Dependency;@7b3640f1),Annotation([Ljava.lang.String;@26e1cd69,[Ljava.lang.String;@3274bc70,[Ljava.lang.String;@dff76f1),Annotation([Ljava.lang.String;@7ed9cf64,[Ljava.lang.String;@dbeef4c,[Ledu.cmu.lti.nlp.amr.Entity;@72506da0))
AMR:
(a2 / and, condition, c5 / cross-00)
(a2 / and, op, c3 / court)
(c2 / commit-01, ARG1, r / relationship)
(c3 / court, purpose, p4 / possible)
(c5 / cross-00, ARG0, h2 / he)
(c5 / cross-00, ARG1, b / bridge)
(h / he, mod, m / man)
(i / imply-01, ARG0, c / company)
(i / imply-01, quant, a / all)
(l / life, mod, u / useful)
(m / man, time, t / time)
(o / ordeal, mod, p / public)
(o2 / offer-01, ARG0, c / company)
(o2 / offer-01, ARG1, p3 / participate-01)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, r / relationship)
(p3 / participate-01, ARG0, p / public)
(p3 / participate-01, ARG1, l / life)
(p4 / possible, domain, o2 / offer-01)
(t / time, purpose, c3 / court)
(t2 / think-01, ARG0, h3 / he)
(t2 / think-01, ARG1, s / she)
(t2 / think-01, time, c5 / cross-00)
(u2 / use-01, ARG0, h2 / he)
(u2 / use-01, ARG1, c4 / certain)
(u2 / use-01, ARG2, m2 / man)

Decoded in 1,291,347 microseconds
Sentence: the abolition of dutyfree facilities between european states and the threat to impose vat on tickets would lead to dearer fares not cheaper ones which the ec had promised would be a direct result of liberalisation he said

Spans:
Span 1-2:  abolition => abolish-01
Span 8-9:  and => and
Span 5-6:  between => between
Span 22-23:  cheaper => cheap
Span 32-33:  direct => direct
Span 6-7:  european => (continent :name (name :op "Europe"))
Span 4-5:  facilities => facility
Span 20-21:  fares => fare
Span 36-37:  he => he
Span 12-13:  impose => impose-01
Span 23-24:  ones => one
Span 28-29:  promised => promise-01
Span 33-34:  result => result-01
Span 37-38:  said => say-01
Span 7-8:  states => state
Span 10-11:  threat => threaten-01
Span 15-16:  tickets => ticket
Span 13-14:  vat => vat

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),said,say-01,false), Span(36,37,List(1),he,he,false), Span(33,34,List(2),result,result-01,false), Span(32,33,List(3),direct,direct,false), Span(28,29,List(4),promised,promise-01,false), Span(23,24,List(5),ones,one,false), Span(22,23,List(6),cheaper,cheap,false), Span(20,21,List(7),fares,fare,false), Span(15,16,List(8),tickets,ticket,false), Span(13,14,List(9),vat,vat,false), Span(12,13,List(10),impose,impose-01,false), Span(10,11,List(11),threat,threaten-01,false), Span(8,9,List(12),and,and,false), Span(7,8,List(13),states,state,false), Span(6,7,List(16, 15, 14),european,(continent :name (name :op "Europe")),false), Span(5,6,List(17),between,between,false), Span(4,5,List(18),facilities,facility,false), Span(1,2,List(19),abolition,abolish-01,false)),Map(2 -> result-01, 5 -> one, 12 -> and, 15 -> name, 8 -> ticket, 18 -> facility, 7 -> fare, 17 -> between, 1 -> he, 4 -> promise-01, 11 -> threaten-01, 14 -> continent, 6 -> cheap, 0 -> say-01, 9 -> vat, 16 -> "Europe", 19 -> abolish-01, 3 -> direct, 10 -> impose-01, 13 -> state),Map(n -> name, h -> he, s2 -> state, b -> between, t -> ticket, s -> say-01, v -> vat, d -> direct, p -> promise-01, a -> and, t2 -> threaten-01, a2 -> abolish-01, r -> result-01, i -> impose-01, c -> cheap, f2 -> facility, f -> fare, o -> one, c2 -> continent))),[Ljava.lang.String;@7e4d5e01,Annotation([Ljava.lang.String;@956d46f,[Ljava.lang.String;@2394c833,[Ljava.lang.String;@7ce39e84),Annotation([Ljava.lang.String;@43bc2c2a,[Ljava.lang.String;@76f79c23,[Ledu.cmu.lti.nlp.amr.Dependency;@7a2bfad9),Annotation([Ljava.lang.String;@5d61fb38,[Ljava.lang.String;@4bb4496d,[Ljava.lang.String;@2940b9ef),Annotation([Ljava.lang.String;@586f0f11,[Ljava.lang.String;@63465272,[Ledu.cmu.lti.nlp.amr.Entity;@1dceed49))
AMR:
(a2 / abolish-01, ARG1, f2 / facility)
(a2 / abolish-01, location, c2 / continent)
(b / between, op, s2 / state)
(b / between, op, t2 / threaten-01)
(c / cheap, domain, f / fare)
(c2 / continent, name, n / name)
(f2 / facility, location, b / between)
(i / impose-01, ARG0, a / and)
(i / impose-01, ARG1, v / vat)
(n / name, op, "Europe")
(o / one, mod, c / cheap)
(p / promise-01, ARG0, o / one)
(r / result-01, ARG2, o / one)
(r / result-01, manner, d / direct)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a / and)
(s / say-01, ARG3, r / result-01)
(t2 / threaten-01, ARG1, i / impose-01)
(v / vat, location, t / ticket)

Decoded in 195,403 microseconds
Sentence: with paul appleton as the project architect allies and morrison is promising a park and treelined square which will leave an uninterrupted view of the existing buildings from the river

Spans:
Span 7-8:  allies => ally-01
Span 14-15:  and => and
Span 8-9:  and => and
Span 26-27:  buildings => building
Span 25-26:  existing => exist-01
Span 19-20:  leave => leave-01
Span 13-14:  park => park
Span 5-6:  project => project
Span 11-12:  promising => promise-01
Span 29-30:  river => river
Span 16-17:  square => square

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),river,river,false), Span(26,27,List(1),buildings,building,false), Span(25,26,List(2),existing,exist-01,false), Span(19,20,List(3),leave,leave-01,false), Span(16,17,List(4),square,square,false), Span(14,15,List(5),and,and,false), Span(13,14,List(6),park,park,false), Span(11,12,List(7),promising,promise-01,false), Span(8,9,List(8),and,and,false), Span(7,8,List(9),allies,ally-01,false), Span(5,6,List(10),project,project,false)),Map(2 -> exist-01, 5 -> and, 8 -> and, 7 -> promise-01, 1 -> building, 4 -> square, 6 -> park, 9 -> ally-01, 0 -> river, 10 -> project, 3 -> leave-01),Map(e -> exist-01, b -> building, p2 -> promise-01, a3 -> ally-01, s -> square, p -> park, a -> and, a2 -> and, r -> river, l -> leave-01, p3 -> project))),[Ljava.lang.String;@7c3c62e8,Annotation([Ljava.lang.String;@6081ad10,[Ljava.lang.String;@618926ef,[Ljava.lang.String;@735b46ef),Annotation([Ljava.lang.String;@6d8e3013,[Ljava.lang.String;@11f66796,[Ledu.cmu.lti.nlp.amr.Dependency;@480ab210),Annotation([Ljava.lang.String;@36305d63,[Ljava.lang.String;@21432a60,[Ljava.lang.String;@409315af),Annotation([Ljava.lang.String;@7874b547,[Ljava.lang.String;@36298619,[Ledu.cmu.lti.nlp.amr.Entity;@6022ef16))
AMR:
(a / and, op, p2 / promise-01)
(a / and, op, s / square)
(a2 / and, op, a3 / ally-01)
(a2 / and, op, p3 / project)
(a3 / ally-01, ARG1, r / river)
(e / exist-01, ARG1, b / building)
(l / leave-01, ARG0, s / square)
(l / leave-01, ARG1, b / building)
(p2 / promise-01, ARG0, a2 / and)
(p2 / promise-01, ARG1, p / park)

Decoded in 90,653 microseconds
Sentence: the white horse pub in london road headington raised 500 for the girls and regulars are promising to raise even more money before the pair set off on wednesday

NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 9-10:  500 => 500
Span 13-14:  and => and
Span 22-23:  before => before
Span 12-13:  girls => girl
Span 2-3:  horse => horse
Span 5-6:  london => (city :name (name :op "London"))
Span 21-22:  money => money
Span 26-27:  off => off
Span 16-17:  promising => promise-01
Span 3-4:  pub => pub
Span 18-19:  raise => raise-01
Span 8-9:  raised => raise-01
Span 6-7:  road => road
Span 1-2:  white => white

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),off,off,false), Span(22,23,List(1),before,before,false), Span(21,22,List(2),money,money,false), Span(18,19,List(3),raise,raise-01,false), Span(16,17,List(4),promising,promise-01,false), Span(13,14,List(5),and,and,false), Span(12,13,List(6),girls,girl,false), Span(9,10,List(7),500,500,false), Span(8,9,List(8),raised,raise-01,false), Span(6,7,List(9),road,road,false), Span(5,6,List(12, 11, 10),london,(city :name (name :op "London")),false), Span(3,4,List(13),pub,pub,false), Span(2,3,List(14),horse,horse,false), Span(1,2,List(15),white,white,false)),Map(2 -> money, 5 -> and, 12 -> "London", 15 -> white, 8 -> raise-01, 7 -> 500, 1 -> before, 4 -> promise-01, 11 -> name, 14 -> horse, 6 -> girl, 0 -> off, 9 -> road, 3 -> raise-01, 10 -> city, 13 -> pub),Map(w -> white, n -> name, h -> horse, r3 -> road, 5 -> 500, b -> before, p2 -> pub, m -> money, p -> promise-01, g -> girl, r2 -> raise-01, a -> and, r -> raise-01, c -> city, o -> off))),[Ljava.lang.String;@157ebea9,Annotation([Ljava.lang.String;@34175445,[Ljava.lang.String;@679d98ba,[Ljava.lang.String;@1b96107b),Annotation([Ljava.lang.String;@19140963,[Ljava.lang.String;@72744f71,[Ledu.cmu.lti.nlp.amr.Dependency;@320bbe6b),Annotation([Ljava.lang.String;@21027c78,[Ljava.lang.String;@2a39bb36,[Ljava.lang.String;@3431ebe2),Annotation([Ljava.lang.String;@39755d33,[Ljava.lang.String;@4839dcbd,[Ledu.cmu.lti.nlp.amr.Entity;@4ecb2156))
AMR:
(a / and, op, g / girl)
(a / and, op, p / promise-01)
(b / before, op, o / off)
(c / city, name, n / name)
(g / girl, quant, 5 / 500)
(n / name, op, "London")
(p / promise-01, ARG0, c / city)
(p / promise-01, ARG1, r / raise-01)
(p / promise-01, prep-against, w / white)
(p2 / pub, mod, h / horse)
(r / raise-01, ARG0, r3 / road)
(r / raise-01, ARG1, m / money)
(r / raise-01, time, b / before)
(r2 / raise-01, ARG0, p2 / pub)
(r2 / raise-01, ARG1, p / promise-01)

Decoded in 180,337 microseconds
Sentence: what is the affair so important as to leave you no time to write to your devoted lover  what affection stifles and puts to one side the love the tender and constant love you promised him

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = what is the affair so important as to leave you no time to write to your devoted lover  what affection stifles and puts to one side the love the tender and constant love you promised him
myTokenized = what is the affair so important as to leave you no time to write to your devoted lover what affection stifles and puts to one side the love the tender and constant love you promised him
i = 18
prefix = List(what, is, the, affair, so, important, as, to, leave, you, no, time, to, write, to, your, devoted, lover, what)
regexr = \Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qi\E ?\Qs\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qa\E ?\Qf\E ?\Qf\E ?\Qa\E ?\Qi\E ?\Qr\E ?\Qs\E ?\Qo\E ?\Qi\E ?\Qm\E ?\Qp\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qa\E ?\Qn\E ?\Qt\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Ql\E ?\Qe\E ?\Qa\E ?\Qv\E ?\Qe\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qi\E ?\Qm\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qw\E ?\Qr\E ?\Qi\E ?\Qt\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qd\E ?\Qe\E ?\Qv\E ?\Qo\E ?\Qt\E ?\Qe\E ?\Qd\E ?\Ql\E ?\Qo\E ?\Qv\E ?\Qe\E ?\Qr\E ?\Qw\E ?\Qh\E ?\Qa\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he promised to demystify the allpowerful presidency and make it more accountable to congress and the voter

Spans:
Span 11-12:  accountable => accountable-41
Span 14-15:  and => and
Span 7-8:  and => and
Span 13-14:  congress => (government-organization :name (name :op "Congress"))
Span 0-1:  he => he
Span 9-10:  it => it
Span 1-2:  promised => promise-01
Span 16-17:  voter => (person :ARG0-of vote-01)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),voter,(person :ARG0-of vote-01),false), Span(14,15,List(2),and,and,false), Span(13,14,List(5, 4, 3),congress,(government-organization :name (name :op "Congress")),false), Span(11,12,List(6),accountable,accountable-41,false), Span(9,10,List(7),it,it,false), Span(7,8,List(8),and,and,false), Span(1,2,List(9),promised,promise-01,false), Span(0,1,List(10),he,he,false)),Map(2 -> and, 5 -> "Congress", 8 -> and, 7 -> it, 1 -> vote-01, 4 -> name, 6 -> accountable-41, 9 -> promise-01, 0 -> person, 10 -> he, 3 -> government-organization),Map(n -> name, h -> he, p2 -> promise-01, a3 -> and, v -> vote-01, g -> government-organization, p -> person, a -> and, i -> it, a2 -> accountable-41))),[Ljava.lang.String;@7b092204,Annotation([Ljava.lang.String;@149873b7,[Ljava.lang.String;@24d4fdf1,[Ljava.lang.String;@1b6bec1b),Annotation([Ljava.lang.String;@4a59eead,[Ljava.lang.String;@5644c5fd,[Ledu.cmu.lti.nlp.amr.Dependency;@3d22914a),Annotation([Ljava.lang.String;@2870b0a1,[Ljava.lang.String;@7e5c2ec4,[Ljava.lang.String;@560286ab),Annotation([Ljava.lang.String;@3fd770aa,[Ljava.lang.String;@5925c9a4,[Ledu.cmu.lti.nlp.amr.Entity;@3fd95bb5))
AMR:
(a / and, op, p / person)
(a2 / accountable-41, ARG0, a3 / and)
(a2 / accountable-41, ARG1, i / it)
(a2 / accountable-41, ARG2, g / government-organization)
(a2 / accountable-41, prep-to, a / and)
(g / government-organization, name, n / name)
(n / name, op, "Congress")
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, a3 / and)
(v / vote-01, ARG0, p / person)

Decoded in 125,795 microseconds
Sentence: these writings are the latest skirmishes in what promises to be a struggle bitter even by ecclesiastical standards over the next few weeks

Spans:
Span 13-14:  bitter => bitter
Span 21-22:  few => few
Span 4-5:  latest => (late :degree most)
Span 20-21:  next => next
Span 8-9:  promises => promise-01
Span 17-18:  standards => standard
Span 12-13:  struggle => struggle-01
Span 22-23:  weeks => (temporal-quantity :unit week)
Span 1-2:  writings => (thing :ARG1-of write-01)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),weeks,(temporal-quantity :unit week),false), Span(21,22,List(2),few,few,false), Span(20,21,List(3),next,next,false), Span(17,18,List(4),standards,standard,false), Span(13,14,List(5),bitter,bitter,false), Span(12,13,List(6),struggle,struggle-01,false), Span(8,9,List(7),promises,promise-01,false), Span(4,5,List(9, 8),latest,(late :degree most),false), Span(1,2,List(11, 10),writings,(thing :ARG1-of write-01),false)),Map(2 -> few, 5 -> bitter, 8 -> late, 7 -> promise-01, 1 -> week, 11 -> write-01, 4 -> standard, 6 -> struggle-01, 9 -> most, 0 -> temporal-quantity, 10 -> thing, 3 -> next),Map(n -> next, w -> week, s2 -> struggle-01, b -> bitter, t -> temporal-quantity, s -> standard, m -> most, p -> promise-01, t2 -> thing, w2 -> write-01, l -> late, f -> few))),[Ljava.lang.String;@5713e8d2,Annotation([Ljava.lang.String;@5c1a5fa7,[Ljava.lang.String;@477dfc2e,[Ljava.lang.String;@203754ad),Annotation([Ljava.lang.String;@10983a61,[Ljava.lang.String;@7a20bec9,[Ledu.cmu.lti.nlp.amr.Dependency;@7bcdbcc2),Annotation([Ljava.lang.String;@23a40e,[Ljava.lang.String;@23e79334,[Ljava.lang.String;@38714d56),Annotation([Ljava.lang.String;@168c660d,[Ljava.lang.String;@5b7feb0b,[Ledu.cmu.lti.nlp.amr.Entity;@2b204e1b))
AMR:
(b / bitter, compared-to, s / standard)
(f / few, op, t / temporal-quantity)
(l / late, degree, m / most)
(p / promise-01, ARG0, l / late)
(p / promise-01, ARG1, b / bitter)
(s / standard, poss, t / temporal-quantity)
(s2 / struggle-01, ARG0, t2 / thing)
(s2 / struggle-01, ARG1, b / bitter)
(t / temporal-quantity, unit, w / week)
(w / week, mod, n / next)
(w2 / write-01, ARG1, t2 / thing)

Decoded in 108,681 microseconds
Sentence: the big mass up front guarantees initial understeer and the ample power to the back promises the balancing availability of power oversteer

Spans:
Span 8-9:  and => and
Span 18-19:  availability => available
Span 14-15:  back => back
Span 17-18:  balancing => balance-01
Span 1-2:  big => big
Span 4-5:  front => front
Span 5-6:  guarantees => guarantee-01
Span 6-7:  initial => initial
Span 2-3:  mass => mass
Span 20-21:  power => power
Span 11-12:  power => power
Span 15-16:  promises => promise-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),power,power,false), Span(18,19,List(1),availability,available,false), Span(17,18,List(2),balancing,balance-01,false), Span(15,16,List(3),promises,promise-01,false), Span(14,15,List(4),back,back,false), Span(11,12,List(5),power,power,false), Span(8,9,List(6),and,and,false), Span(6,7,List(7),initial,initial,false), Span(5,6,List(8),guarantees,guarantee-01,false), Span(4,5,List(9),front,front,false), Span(2,3,List(10),mass,mass,false), Span(1,2,List(11),big,big,false)),Map(2 -> balance-01, 5 -> power, 8 -> guarantee-01, 7 -> initial, 1 -> available, 11 -> big, 4 -> back, 6 -> and, 9 -> front, 0 -> power, 10 -> mass, 3 -> promise-01),Map(b3 -> big, b -> balance-01, b2 -> back, p2 -> promise-01, m -> mass, g -> guarantee-01, p -> power, a -> available, i -> initial, a2 -> and, f -> front, p3 -> power))),[Ljava.lang.String;@58bf75e3,Annotation([Ljava.lang.String;@1d4b79a,[Ljava.lang.String;@3461e066,[Ljava.lang.String;@5d36368),Annotation([Ljava.lang.String;@792343d4,[Ljava.lang.String;@7a3a516d,[Ledu.cmu.lti.nlp.amr.Dependency;@ab809cc),Annotation([Ljava.lang.String;@388b3593,[Ljava.lang.String;@3b6a62e5,[Ljava.lang.String;@4582c6dc),Annotation([Ljava.lang.String;@ccdb92b,[Ljava.lang.String;@1637bc9e,[Ledu.cmu.lti.nlp.amr.Entity;@25403477))
AMR:
(a2 / and, op, g / guarantee-01)
(a2 / and, op, p3 / power)
(b / balance-01, ARG0, i / initial)
(b / balance-01, ARG1, a / available)
(g / guarantee-01, ARG0, m / mass)
(g / guarantee-01, ARG1, p / power)
(g / guarantee-01, mod, f / front)
(m / mass, mod, b3 / big)
(p2 / promise-01, ARG0, a2 / and)
(p2 / promise-01, ARG1, a / available)
(p3 / power, destination, b2 / back)

Decoded in 185,273 microseconds
Sentence: i promise you that you rarely want to go home and read about it

Spans:
Span 10-11:  and => and
Span 9-10:  home => home
Span 0-1:  i => i
Span 13-14:  it => it
Span 1-2:  promise => promise-01
Span 5-6:  rarely => rare
Span 11-12:  read => read-01
Span 6-7:  want => want-01
Span 4-5:  you => you
Span 2-3:  you => you

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),it,it,false), Span(11,12,List(1),read,read-01,false), Span(10,11,List(2),and,and,false), Span(9,10,List(3),home,home,false), Span(6,7,List(4),want,want-01,false), Span(5,6,List(5),rarely,rare,false), Span(4,5,List(6),you,you,false), Span(2,3,List(7),you,you,false), Span(1,2,List(8),promise,promise-01,false), Span(0,1,List(9),i,i,false)),Map(2 -> and, 5 -> rare, 8 -> promise-01, 7 -> you, 1 -> read-01, 4 -> want-01, 6 -> you, 9 -> i, 0 -> it, 3 -> home),Map(w -> want-01, h -> home, p -> promise-01, y -> you, r2 -> rare, a -> and, i2 -> i, r -> read-01, i -> it, y2 -> you))),[Ljava.lang.String;@1a3483bc,Annotation([Ljava.lang.String;@6db4b914,[Ljava.lang.String;@73e30850,[Ljava.lang.String;@3e36f7a0),Annotation([Ljava.lang.String;@abb4949,[Ljava.lang.String;@dc85d20,[Ledu.cmu.lti.nlp.amr.Dependency;@5d59e6f1),Annotation([Ljava.lang.String;@39490818,[Ljava.lang.String;@69b27d09,[Ljava.lang.String;@452f1015),Annotation([Ljava.lang.String;@14c8f62f,[Ljava.lang.String;@159a9252,[Ledu.cmu.lti.nlp.amr.Entity;@56fc5092))
AMR:
(a / and, op, r / read-01)
(h / home, poss, y / you)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, y2 / you)
(p / promise-01, ARG2, w / want-01)
(r / read-01, ARG1, i / it)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, a / and)
(w / want-01, frequency, r2 / rare)

Decoded in 117,763 microseconds
Sentence: in what promises to be a scientific landmark groups from the medical research council and the imperial cancer research fund say they may have found an elusive sexdetermining gene

Spans:
Span 14-15:  and => and
Span 17-18:  cancer => cancer
Span 13-14:  council => council
Span 26-27:  elusive => elusive
Span 24-25:  found => find-01
Span 19-20:  fund => fund-01
Span 28-29:  gene => gene
Span 8-9:  groups => group
Span 7-8:  landmark => landmark
Span 22-23:  may => (date-entity :month 5)
Span 11-12:  medical => medicine
Span 2-3:  promises => promise-01
Span 18-19:  research => research-01
Span 12-13:  research => research-01
Span 20-21:  say => say-01
Span 6-7:  scientific => science
Span 21-22:  they => they

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),gene,gene,false), Span(26,27,List(1),elusive,elusive,false), Span(24,25,List(2),found,find-01,false), Span(22,23,List(4, 3),may,(date-entity :month 5),false), Span(21,22,List(5),they,they,false), Span(20,21,List(6),say,say-01,false), Span(19,20,List(7),fund,fund-01,false), Span(18,19,List(8),research,research-01,false), Span(17,18,List(9),cancer,cancer,false), Span(14,15,List(10),and,and,false), Span(13,14,List(11),council,council,false), Span(12,13,List(12),research,research-01,false), Span(11,12,List(13),medical,medicine,false), Span(8,9,List(14),groups,group,false), Span(7,8,List(15),landmark,landmark,false), Span(6,7,List(16),scientific,science,false), Span(2,3,List(17),promises,promise-01,false)),Map(2 -> find-01, 5 -> they, 12 -> research-01, 15 -> landmark, 8 -> research-01, 7 -> fund-01, 17 -> promise-01, 1 -> elusive, 4 -> 5, 11 -> council, 14 -> group, 6 -> say-01, 0 -> gene, 9 -> cancer, 16 -> science, 3 -> date-entity, 10 -> and, 13 -> medicine),Map(e -> elusive, s2 -> science, 5 -> 5, t -> they, s -> say-01, m -> medicine, d -> date-entity, g2 -> group, p -> promise-01, g -> gene, r2 -> research-01, a -> and, r -> research-01, c -> cancer, l -> landmark, f2 -> fund-01, f -> find-01, c2 -> council))),[Ljava.lang.String;@4f0dcddb,Annotation([Ljava.lang.String;@13460d69,[Ljava.lang.String;@5c1a7261,[Ljava.lang.String;@4c4b6d84),Annotation([Ljava.lang.String;@6c031c3d,[Ljava.lang.String;@40332031,[Ledu.cmu.lti.nlp.amr.Dependency;@5c8691e4),Annotation([Ljava.lang.String;@6d43f31,[Ljava.lang.String;@5880ad77,[Ljava.lang.String;@67fc8d05),Annotation([Ljava.lang.String;@758e7898,[Ljava.lang.String;@5c8f7f73,[Ledu.cmu.lti.nlp.amr.Entity;@50f8867e))
AMR:
(a / and, op, c2 / council)
(a / and, op, s / say-01)
(c2 / council, mod, r2 / research-01)
(d / date-entity, domain, f / find-01)
(d / date-entity, month, 5 / 5)
(f / find-01, ARG0, t / they)
(f / find-01, ARG1, g / gene)
(f2 / fund-01, ARG0, a / and)
(f2 / fund-01, ARG1, r / research-01)
(g / gene, mod, e / elusive)
(l / landmark, mod, s2 / science)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, l / landmark)
(r / research-01, ARG1, c / cancer)
(r2 / research-01, mod, m / medicine)
(s / say-01, ARG0, g2 / group)
(s / say-01, ARG1, d / date-entity)

Decoded in 330,313 microseconds
Sentence: biotherm will give him a free facial and skin care gift worth 60 while estee lauder has promised her a free makeup gold compact and gift from its beautiful collection valued at 65

Spans:
Span 12-13:  60 => 60
Span 32-33:  65 => 65
Span 24-25:  and => and
Span 7-8:  and => and
Span 28-29:  beautiful => beautiful
Span 9-10:  care => care-01
Span 29-30:  collection => collect-01
Span 23-24:  compact => compact-01
Span 20-21:  free => free-41
Span 5-6:  free => free-41
Span 25-26:  gift => gift-01
Span 10-11:  gift => gift-01
Span 2-3:  give => give-01
Span 22-23:  gold => gold
Span 21-22:  makeup => makeup
Span 17-18:  promised => promise-01
Span 8-9:  skin => skin
Span 30-31:  valued => value-01
Span 11-12:  worth => worth

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),65,65,false), Span(30,31,List(1),valued,value-01,false), Span(29,30,List(2),collection,collect-01,false), Span(28,29,List(3),beautiful,beautiful,false), Span(25,26,List(4),gift,gift-01,false), Span(24,25,List(5),and,and,false), Span(23,24,List(6),compact,compact-01,false), Span(22,23,List(7),gold,gold,false), Span(21,22,List(8),makeup,makeup,false), Span(20,21,List(9),free,free-41,false), Span(17,18,List(10),promised,promise-01,false), Span(12,13,List(11),60,60,false), Span(11,12,List(12),worth,worth,false), Span(10,11,List(13),gift,gift-01,false), Span(9,10,List(14),care,care-01,false), Span(8,9,List(15),skin,skin,false), Span(7,8,List(16),and,and,false), Span(5,6,List(17),free,free-41,false), Span(2,3,List(18),give,give-01,false)),Map(2 -> collect-01, 5 -> and, 12 -> worth, 15 -> skin, 8 -> makeup, 18 -> give-01, 7 -> gold, 17 -> free-41, 1 -> value-01, 4 -> gift-01, 11 -> 60, 14 -> care-01, 6 -> compact-01, 0 -> 65, 9 -> free-41, 16 -> and, 3 -> beautiful, 10 -> promise-01, 13 -> gift-01),Map(w -> worth, g3 -> gift-01, b -> beautiful, s -> skin, v -> value-01, m -> makeup, 62 -> 60, g2 -> gold, g -> gift-01, p -> promise-01, c3 -> care-01, a -> and, a2 -> and, 6 -> 65, c -> collect-01, f2 -> free-41, f -> free-41, g4 -> give-01, c2 -> compact-01))),[Ljava.lang.String;@6c45e3b9,Annotation([Ljava.lang.String;@6069be37,[Ljava.lang.String;@3e473e54,[Ljava.lang.String;@374d1cbd),Annotation([Ljava.lang.String;@2799d8a8,[Ljava.lang.String;@655f11e7,[Ledu.cmu.lti.nlp.amr.Dependency;@449088af),Annotation([Ljava.lang.String;@6cfdbc53,[Ljava.lang.String;@657250c,[Ljava.lang.String;@43413a14),Annotation([Ljava.lang.String;@6f4c198a,[Ljava.lang.String;@6d20ec1b,[Ledu.cmu.lti.nlp.amr.Entity;@c6d1896))
AMR:
(a / and, op, c2 / compact-01)
(a / and, op, g / gift-01)
(a2 / and, op, g3 / gift-01)
(c / collect-01, mod, b / beautiful)
(c2 / compact-01, ARG0, 62 / 60)
(c2 / compact-01, mod, g2 / gold)
(c2 / compact-01, mod, m / makeup)
(c3 / care-01, ARG0, 6 / 65)
(c3 / care-01, ARG1, s / skin)
(f / free-41, ARG1, m / makeup)
(f2 / free-41, ARG1, a2 / and)
(g / gift-01, ARG1, c / collect-01)
(g3 / gift-01, ARG0, w / worth)
(g3 / gift-01, ARG1, s / skin)
(g4 / give-01, ARG1, a2 / and)
(g4 / give-01, ARG2, a / and)
(p / promise-01, ARG1, a / and)
(v / value-01, ARG1, c / collect-01)

Decoded in 389,701 microseconds
Sentence: in the early stages of what promises to be a furious legal debate the school district offered ms graham an alreadydead frog to dissect but ms graham whose mother is perhaps irrelevantly perhaps not a publicityconscious animal rights campaigner refused alleging she could not be certain of the provenance or natural death of said frog

Spans:
Span 40-41:  alleging => allege-01
Span 36-37:  animal => animal
Span 24-25:  but => contrast-01
Span 45-46:  certain => certain
Span 42-43:  could => possible
Span 51-52:  death => die-01
Span 12-13:  debate => debate-01
Span 15-16:  district => district
Span 2-3:  early => early
Span 10-11:  furious => furious
Span 11-12:  legal => legal
Span 28-29:  mother => (have-rel-role-91 :ARG2 mother)
Span 50-51:  natural => natural
Span 16-17:  offered => offer-01
Span 49-50:  or => or
Span 32-33:  perhaps => perhaps
Span 30-31:  perhaps => perhaps
Span 6-7:  promises => promise-01
Span 39-40:  refused => refuse-01
Span 37-38:  rights => right
Span 53-54:  said => say-01
Span 14-15:  school => school
Span 41-42:  she => she
Span 3-4:  stages => stage

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),said,say-01,false), Span(51,52,List(1),death,die-01,false), Span(50,51,List(2),natural,natural,false), Span(49,50,List(3),or,or,false), Span(45,46,List(4),certain,certain,false), Span(42,43,List(5),could,possible,false), Span(41,42,List(6),she,she,false), Span(40,41,List(7),alleging,allege-01,false), Span(39,40,List(8),refused,refuse-01,false), Span(37,38,List(9),rights,right,false), Span(36,37,List(10),animal,animal,false), Span(32,33,List(11),perhaps,perhaps,false), Span(30,31,List(12),perhaps,perhaps,false), Span(28,29,List(14, 13),mother,(have-rel-role-91 :ARG2 mother),false), Span(24,25,List(15),but,contrast-01,false), Span(16,17,List(16),offered,offer-01,false), Span(15,16,List(17),district,district,false), Span(14,15,List(18),school,school,false), Span(12,13,List(19),debate,debate-01,false), Span(11,12,List(20),legal,legal,false), Span(10,11,List(21),furious,furious,false), Span(6,7,List(22),promises,promise-01,false), Span(3,4,List(23),stages,stage,false), Span(2,3,List(24),early,early,false)),Map(2 -> natural, 5 -> possible, 12 -> perhaps, 8 -> refuse-01, 15 -> contrast-01, 21 -> furious, 18 -> school, 24 -> early, 7 -> allege-01, 1 -> die-01, 17 -> district, 23 -> stage, 4 -> certain, 11 -> perhaps, 14 -> mother, 20 -> legal, 6 -> she, 9 -> right, 0 -> say-01, 22 -> promise-01, 16 -> offer-01, 19 -> debate-01, 10 -> animal, 3 -> or, 13 -> have-rel-role-91),Map(e -> early, n -> natural, h -> have-rel-role-91, s2 -> she, d3 -> debate-01, p2 -> perhaps, s -> say-01, s4 -> stage, d -> die-01, m -> mother, r2 -> right, p -> possible, a -> allege-01, p4 -> promise-01, o2 -> offer-01, d2 -> district, a2 -> animal, r -> refuse-01, c -> certain, s3 -> school, l -> legal, f -> furious, o -> or, p3 -> perhaps, c2 -> contrast-01))),[Ljava.lang.String;@594c9066,Annotation([Ljava.lang.String;@319c4657,[Ljava.lang.String;@ace1333,[Ljava.lang.String;@5f4e7ecf),Annotation([Ljava.lang.String;@1a6778eb,[Ljava.lang.String;@7f3399d7,[Ledu.cmu.lti.nlp.amr.Dependency;@14b9337f),Annotation([Ljava.lang.String;@ae3e17a,[Ljava.lang.String;@76e8162b,[Ljava.lang.String;@7f079e09),Annotation([Ljava.lang.String;@4d18a206,[Ljava.lang.String;@c355f75,[Ledu.cmu.lti.nlp.amr.Entity;@40e0096))
AMR:
(a / allege-01, ARG0, h / have-rel-role-91)
(a / allege-01, ARG1, p / possible)
(c / certain, domain, s2 / she)
(c2 / contrast-01, ARG1, o2 / offer-01)
(c2 / contrast-01, ARG2, p / possible)
(d / die-01, ARG1, p3 / perhaps)
(d / die-01, mod, n / natural)
(d2 / district, mod, s3 / school)
(d3 / debate-01, ARG1, a2 / animal)
(d3 / debate-01, mod, f / furious)
(d3 / debate-01, mod, l / legal)
(h / have-rel-role-91, ARG2, m / mother)
(o / or, op, d / die-01)
(o / or, purpose, s / say-01)
(o2 / offer-01, ARG0, d2 / district)
(o2 / offer-01, ARG1, d3 / debate-01)
(p / possible, domain, c / certain)
(p4 / promise-01, ARG1, d3 / debate-01)
(r / refuse-01, ARG1, a / allege-01)
(r / refuse-01, mod, p2 / perhaps)
(r2 / right, mod, a2 / animal)
(s / say-01, ARG0, s2 / she)
(s4 / stage, beneficiary, p4 / promise-01)
(s4 / stage, time, e / early)

Decoded in 634,775 microseconds
Sentence: chairman john bellak promised to deliver the muchoverdue investment programme on time and at or below budget

Spans:
Span 12-13:  and => and
Span 15-16:  below => below
Span 16-17:  budget => budget
Span 0-1:  chairman => (have-org-role-91 :ARG2 chairman)
Span 5-6:  deliver => deliver-01
Span 8-9:  investment => invest-01
Span 14-15:  or => or
Span 9-10:  programme => program
Span 3-4:  promised => promise-01
Span 11-12:  time => time

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),budget,budget,false), Span(15,16,List(1),below,below,false), Span(14,15,List(2),or,or,false), Span(12,13,List(3),and,and,false), Span(11,12,List(4),time,time,false), Span(9,10,List(5),programme,program,false), Span(8,9,List(6),investment,invest-01,false), Span(5,6,List(7),deliver,deliver-01,false), Span(3,4,List(8),promised,promise-01,false), Span(0,1,List(10, 9),chairman,(have-org-role-91 :ARG2 chairman),false)),Map(2 -> or, 5 -> program, 8 -> promise-01, 7 -> deliver-01, 1 -> below, 4 -> time, 6 -> invest-01, 9 -> have-org-role-91, 0 -> budget, 10 -> chairman, 3 -> and),Map(h -> have-org-role-91, t -> time, b -> budget, b2 -> below, p2 -> promise-01, d -> deliver-01, p -> program, a -> and, i -> invest-01, c -> chairman, o -> or))),[Ljava.lang.String;@334879ee,Annotation([Ljava.lang.String;@5b3d128f,[Ljava.lang.String;@68d9915,[Ljava.lang.String;@3a3d350f),Annotation([Ljava.lang.String;@86689a8,[Ljava.lang.String;@3d778e7,[Ledu.cmu.lti.nlp.amr.Dependency;@374287a9),Annotation([Ljava.lang.String;@70d88496,[Ljava.lang.String;@16e8cdbb,[Ljava.lang.String;@e1abbbd),Annotation([Ljava.lang.String;@7d1b7c86,[Ljava.lang.String;@178c8195,[Ledu.cmu.lti.nlp.amr.Entity;@98f6947))
AMR:
(a / and, op, b / budget)
(a / and, op, p2 / promise-01)
(d / deliver-01, ARG1, p / program)
(d / deliver-01, time, t / time)
(h / have-org-role-91, ARG1, p / program)
(h / have-org-role-91, ARG2, c / chairman)
(i / invest-01, location, o / or)
(o / or, op, b2 / below)
(p / program, mod, i / invest-01)
(p2 / promise-01, ARG2, d / deliver-01)

Decoded in 78,717 microseconds
Sentence: a man she knew slightly waved to her not the man she had come to meet for a drink the one promising to fit the final piece in the jigsaw of an exposeacute

Spans:
Span 18-19:  drink => drink-01
Span 25-26:  final => final
Span 23-24:  fit => fit-01
Span 3-4:  knew => know-01
Span 10-11:  man => man
Span 1-2:  man => man
Span 26-27:  piece => piece
Span 21-22:  promising => promise-01
Span 11-12:  she => she
Span 2-3:  she => she
Span 4-5:  slightly => slight
Span 5-6:  waved => wave-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),piece,piece,false), Span(25,26,List(1),final,final,false), Span(23,24,List(2),fit,fit-01,false), Span(21,22,List(3),promising,promise-01,false), Span(18,19,List(4),drink,drink-01,false), Span(11,12,List(5),she,she,false), Span(10,11,List(6),man,man,false), Span(5,6,List(7),waved,wave-01,false), Span(4,5,List(8),slightly,slight,false), Span(3,4,List(9),knew,know-01,false), Span(2,3,List(10),she,she,false), Span(1,2,List(11),man,man,false)),Map(2 -> fit-01, 5 -> she, 8 -> slight, 7 -> wave-01, 1 -> final, 11 -> man, 4 -> drink-01, 6 -> man, 9 -> know-01, 0 -> piece, 10 -> she, 3 -> promise-01),Map(w -> wave-01, k -> know-01, s2 -> slight, m2 -> man, p2 -> promise-01, s -> she, m -> man, d -> drink-01, p -> piece, s3 -> she, f2 -> fit-01, f -> final))),[Ljava.lang.String;@2648b938,Annotation([Ljava.lang.String;@70781f2a,[Ljava.lang.String;@5e463815,[Ljava.lang.String;@540c1b0d),Annotation([Ljava.lang.String;@66c41d96,[Ljava.lang.String;@5572978f,[Ledu.cmu.lti.nlp.amr.Dependency;@563c591c),Annotation([Ljava.lang.String;@13fe697f,[Ljava.lang.String;@23c01b1a,[Ljava.lang.String;@19335a4c),Annotation([Ljava.lang.String;@7a6d4080,[Ljava.lang.String;@1aa5d24b,[Ledu.cmu.lti.nlp.amr.Entity;@7c914797))
AMR:
(d / drink-01, ARG0, s3 / she)
(d / drink-01, ARG1, s / she)
(f2 / fit-01, ARG1, p / piece)
(k / know-01, ARG0, s3 / she)
(k / know-01, ARG1, m2 / man)
(k / know-01, ARG3, s2 / slight)
(p / piece, mod, f / final)
(p2 / promise-01, ARG0, s / she)
(p2 / promise-01, ARG1, m / man)
(p2 / promise-01, ARG2, f2 / fit-01)
(w / wave-01, ARG0, s3 / she)

Decoded in 123,896 microseconds
Sentence: bonn promises monetary union by june 30th but the alliance needs twothirds of the parliamentary vote before it can complete unification

Spans:
Span 9-10:  alliance => alliance
Span 16-17:  before => before
Span 7-8:  but => contrast-01
Span 18-19:  can => possible
Span 19-20:  complete => complete
Span 17-18:  it => it
Span 5-6:  june => (date-entity :month 6)
Span 2-3:  monetary => money
Span 10-11:  needs => need-01
Span 1-2:  promises => promise-01
Span 20-21:  unification => unify-01
Span 3-4:  union => union
Span 15-16:  vote => vote-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),unification,unify-01,false), Span(19,20,List(1),complete,complete,false), Span(18,19,List(2),can,possible,false), Span(17,18,List(3),it,it,false), Span(16,17,List(4),before,before,false), Span(15,16,List(5),vote,vote-01,false), Span(10,11,List(6),needs,need-01,false), Span(9,10,List(7),alliance,alliance,false), Span(7,8,List(8),but,contrast-01,false), Span(5,6,List(10, 9),june,(date-entity :month 6),false), Span(3,4,List(11),union,union,false), Span(2,3,List(12),monetary,money,false), Span(1,2,List(13),promises,promise-01,false)),Map(2 -> possible, 5 -> vote-01, 12 -> money, 8 -> contrast-01, 7 -> alliance, 1 -> complete, 4 -> before, 11 -> union, 6 -> need-01, 0 -> unify-01, 9 -> date-entity, 3 -> it, 10 -> 6, 13 -> promise-01),Map(n -> need-01, b -> before, p2 -> promise-01, u2 -> union, v -> vote-01, d -> date-entity, m -> money, p -> possible, a -> alliance, i -> it, c -> complete, 6 -> 6, u -> unify-01, c2 -> contrast-01))),[Ljava.lang.String;@25f34a65,Annotation([Ljava.lang.String;@799405a,[Ljava.lang.String;@5e4fd89b,[Ljava.lang.String;@4c15d87c),Annotation([Ljava.lang.String;@2e37dbea,[Ljava.lang.String;@5546f75a,[Ledu.cmu.lti.nlp.amr.Dependency;@26196173),Annotation([Ljava.lang.String;@4c4cd88f,[Ljava.lang.String;@491dbb6b,[Ljava.lang.String;@3efb934d),Annotation([Ljava.lang.String;@7683c488,[Ljava.lang.String;@44dbf981,[Ledu.cmu.lti.nlp.amr.Entity;@45d9a778))
AMR:
(b / before, op, p / possible)
(c / complete, part, i / it)
(c2 / contrast-01, ARG1, p2 / promise-01)
(c2 / contrast-01, ARG2, n / need-01)
(d / date-entity, month, 6 / 6)
(n / need-01, ARG0, a / alliance)
(n / need-01, ARG1, v / vote-01)
(n / need-01, time, b / before)
(p / possible, domain, c / complete)
(p2 / promise-01, ARG1, u2 / union)
(u / unify-01, ARG0, i / it)
(u / unify-01, ARG1, d / date-entity)
(u2 / union, topic, m / money)

Decoded in 69,499 microseconds
Sentence:   well be ready in time she promised please

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   well be ready in time she promised please
myTokenized = well be ready in time she promised please
i = 0
prefix = List(well)
regexr = \Qw\E ?\Qe\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: in her end of term report to 150 tory peers last night she promised a light legislative programme but implied she would not go to the polls until the health service reforms were in place

Spans:
Span 7-8:  150 => 150
Span 18-19:  but => contrast-01
Span 29-30:  health => health
Span 19-20:  implied => imply-01
Span 10-11:  last => last
Span 16-17:  legislative => legislate-01
Span 15-16:  light => light
Span 11-12:  night => night
Span 9-10:  peers => peer
Span 34-35:  place => place
Span 26-27:  polls => poll-01
Span 17-18:  programme => program
Span 13-14:  promised => promise-01
Span 31-32:  reforms => reform-01
Span 5-6:  report => report
Span 20-21:  she => she
Span 12-13:  she => she
Span 4-5:  term => term
Span 8-9:  tory => (political-party :name (name :op "Tory"))
Span 27-28:  until => until

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),place,place,false), Span(31,32,List(1),reforms,reform-01,false), Span(29,30,List(2),health,health,false), Span(27,28,List(3),until,until,false), Span(26,27,List(4),polls,poll-01,false), Span(20,21,List(5),she,she,false), Span(19,20,List(6),implied,imply-01,false), Span(18,19,List(7),but,contrast-01,false), Span(17,18,List(8),programme,program,false), Span(16,17,List(9),legislative,legislate-01,false), Span(15,16,List(10),light,light,false), Span(13,14,List(11),promised,promise-01,false), Span(12,13,List(12),she,she,false), Span(11,12,List(13),night,night,false), Span(10,11,List(14),last,last,false), Span(9,10,List(15),peers,peer,false), Span(8,9,List(18, 17, 16),tory,(political-party :name (name :op "Tory")),false), Span(7,8,List(19),150,150,false), Span(5,6,List(20),report,report,false), Span(4,5,List(21),term,term,false)),Map(2 -> health, 5 -> she, 12 -> she, 15 -> peer, 8 -> program, 21 -> term, 18 -> "Tory", 7 -> contrast-01, 17 -> name, 1 -> reform-01, 4 -> poll-01, 11 -> promise-01, 14 -> last, 20 -> report, 6 -> imply-01, 0 -> place, 9 -> legislate-01, 16 -> political-party, 19 -> 150, 3 -> until, 10 -> light, 13 -> night),Map(n -> night, h -> health, p5 -> peer, s2 -> she, t -> term, p2 -> poll-01, l3 -> last, s -> she, 1 -> 150, r2 -> report, p -> place, p4 -> promise-01, l2 -> light, r -> reform-01, i -> imply-01, c -> contrast-01, p6 -> political-party, u -> until, l -> legislate-01, p3 -> program, n2 -> name))),[Ljava.lang.String;@617085fc,Annotation([Ljava.lang.String;@226c955e,[Ljava.lang.String;@6c25ffa,[Ljava.lang.String;@432b198d),Annotation([Ljava.lang.String;@429a9a6e,[Ljava.lang.String;@3410cdeb,[Ledu.cmu.lti.nlp.amr.Dependency;@3b3f1a01),Annotation([Ljava.lang.String;@2bc4560a,[Ljava.lang.String;@66ecc0f8,[Ljava.lang.String;@41710e92),Annotation([Ljava.lang.String;@6573b4ce,[Ljava.lang.String;@f63746b,[Ledu.cmu.lti.nlp.amr.Entity;@4a7024b1))
AMR:
(c / contrast-01, ARG0, r2 / report)
(c / contrast-01, ARG1, p4 / promise-01)
(c / contrast-01, ARG2, i / imply-01)
(i / imply-01, ARG0, s / she)
(i / imply-01, ARG1, 1 / 150)
(l / legislate-01, ARG0, p3 / program)
(n / night, mod, l3 / last)
(n2 / name, op, "Tory")
(p2 / poll-01, ARG0, s / she)
(p2 / poll-01, ARG1, h / health)
(p3 / program, mod, l2 / light)
(p4 / promise-01, ARG0, s2 / she)
(p4 / promise-01, ARG1, p3 / program)
(p4 / promise-01, ARG2, n / night)
(p5 / peer, mod, p6 / political-party)
(p6 / political-party, name, n2 / name)
(r / reform-01, ARG0, p5 / peer)
(r / reform-01, ARG1, h / health)
(r2 / report, mod, t / term)
(s / she, part, p / place)
(u / until, op, r / reform-01)

Decoded in 520,350 microseconds
Sentence: the department promises protection to those using the hotline but within weeks of reporting his employer mitchell was sacked

Spans:
Span 9-10:  but => contrast-01
Span 1-2:  department => department
Span 2-3:  promises => promise-01
Span 3-4:  protection => protect-01
Span 13-14:  reporting => report-01
Span 6-7:  using => use-01
Span 11-12:  weeks => (temporal-quantity :unit week)
Span 10-11:  within => within

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),reporting,report-01,false), Span(11,12,List(2, 1),weeks,(temporal-quantity :unit week),false), Span(10,11,List(3),within,within,false), Span(9,10,List(4),but,contrast-01,false), Span(6,7,List(5),using,use-01,false), Span(3,4,List(6),protection,protect-01,false), Span(2,3,List(7),promises,promise-01,false), Span(1,2,List(8),department,department,false)),Map(2 -> week, 5 -> use-01, 8 -> department, 7 -> promise-01, 1 -> temporal-quantity, 4 -> contrast-01, 6 -> protect-01, 0 -> report-01, 3 -> within),Map(w -> week, t -> temporal-quantity, p2 -> promise-01, d -> department, p -> protect-01, w2 -> within, r -> report-01, u -> use-01, c -> contrast-01))),[Ljava.lang.String;@87906a5,Annotation([Ljava.lang.String;@41a33efb,[Ljava.lang.String;@447bf267,[Ljava.lang.String;@25676b51),Annotation([Ljava.lang.String;@28b6a606,[Ljava.lang.String;@6f4de8cb,[Ledu.cmu.lti.nlp.amr.Dependency;@63eea083),Annotation([Ljava.lang.String;@476c2bb6,[Ljava.lang.String;@ea9de5c,[Ljava.lang.String;@32457189),Annotation([Ljava.lang.String;@6d20f327,[Ljava.lang.String;@e3bbd6a,[Ledu.cmu.lti.nlp.amr.Entity;@74108172))
AMR:
(c / contrast-01, ARG1, w2 / within)
(c / contrast-01, ARG2, u / use-01)
(p / protect-01, ARG1, u / use-01)
(p2 / promise-01, ARG0, d / department)
(p2 / promise-01, ARG1, p / protect-01)
(r / report-01, ARG0, t / temporal-quantity)
(t / temporal-quantity, unit, w / week)
(w2 / within, op, t / temporal-quantity)

Decoded in 41,007 microseconds
Sentence: this haemorrhage of enterprising and skilled young people promises to cause serious damage to the gdrs economy

Spans:
Span 4-5:  and => and
Span 10-11:  cause => cause-01
Span 12-13:  damage => damage-01
Span 16-17:  economy => economy
Span 8-9:  promises => promise-01
Span 11-12:  serious => serious
Span 0-1:  this => this
Span 6-7:  young => young

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),economy,economy,false), Span(12,13,List(1),damage,damage-01,false), Span(11,12,List(2),serious,serious,false), Span(10,11,List(3),cause,cause-01,false), Span(8,9,List(4),promises,promise-01,false), Span(6,7,List(5),young,young,false), Span(4,5,List(6),and,and,false), Span(0,1,List(7),this,this,false)),Map(2 -> serious, 5 -> young, 7 -> this, 1 -> damage-01, 4 -> promise-01, 6 -> and, 0 -> economy, 3 -> cause-01),Map(e -> economy, t -> this, s -> serious, d -> damage-01, y -> young, p -> promise-01, a -> and, c -> cause-01))),[Ljava.lang.String;@67a29ee5,Annotation([Ljava.lang.String;@656e018a,[Ljava.lang.String;@19273f0c,[Ljava.lang.String;@5f9c39ba),Annotation([Ljava.lang.String;@9921360,[Ljava.lang.String;@55360888,[Ledu.cmu.lti.nlp.amr.Dependency;@4e6a446c),Annotation([Ljava.lang.String;@22b236ac,[Ljava.lang.String;@622367ff,[Ljava.lang.String;@280c8af),Annotation([Ljava.lang.String;@54f75a71,[Ljava.lang.String;@3b52dc4b,[Ledu.cmu.lti.nlp.amr.Entity;@3cfcde5a))
AMR:
(c / cause-01, ARG0, a / and)
(c / cause-01, ARG1, d / damage-01)
(d / damage-01, ARG0, y / young)
(d / damage-01, ARG1, e / economy)
(d / damage-01, mod, s / serious)
(p / promise-01, ARG1, t / this)
(p / promise-01, ARG2, c / cause-01)

Decoded in 62,478 microseconds
Sentence: i had been promised a gripping afternoons shoot in the locarno gents where the original play was entirely set

Spans:
Span 17-18:  entirely => entire
Span 5-6:  gripping => grip-01
Span 0-1:  i => i
Span 14-15:  original => original
Span 15-16:  play => play-01
Span 3-4:  promised => promise-01
Span 7-8:  shoot => shoot-05

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),entirely,entire,false), Span(15,16,List(1),play,play-01,false), Span(14,15,List(2),original,original,false), Span(7,8,List(3),shoot,shoot-05,false), Span(5,6,List(4),gripping,grip-01,false), Span(3,4,List(5),promised,promise-01,false), Span(0,1,List(6),i,i,false)),Map(2 -> original, 5 -> promise-01, 1 -> play-01, 4 -> grip-01, 6 -> i, 0 -> entire, 3 -> shoot-05),Map(e -> entire, p2 -> promise-01, s -> shoot-05, g -> grip-01, p -> play-01, i -> i, o -> original))),[Ljava.lang.String;@7d6a05fd,Annotation([Ljava.lang.String;@3baf655e,[Ljava.lang.String;@78281cee,[Ljava.lang.String;@11838ae3),Annotation([Ljava.lang.String;@53134610,[Ljava.lang.String;@165cef0c,[Ledu.cmu.lti.nlp.amr.Dependency;@2f52084c),Annotation([Ljava.lang.String;@329ecdd9,[Ljava.lang.String;@57dc7b85,[Ljava.lang.String;@4c3185d3),Annotation([Ljava.lang.String;@474906b9,[Ljava.lang.String;@b58803f,[Ledu.cmu.lti.nlp.amr.Entity;@5f4badea))
AMR:
(g / grip-01, ARG0, e / entire)
(g / grip-01, ARG1, s / shoot-05)
(p / play-01, ARG1, o / original)
(p2 / promise-01, ARG0, o / original)
(p2 / promise-01, ARG1, i / i)
(p2 / promise-01, ARG2, s / shoot-05)

Decoded in 81,153 microseconds
Sentence: more than 600 jobs are promised for the first phase of the project which will be complete in five years

Spans:
Span 2-3:  600 => 600
Span 16-17:  complete => complete
Span 18-19:  five => 5
Span 3-4:  jobs => job
Span 9-10:  phase => phase
Span 12-13:  project => project
Span 5-6:  promised => promise-01
Span 19-20:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),years,(temporal-quantity :unit year),false), Span(18,19,List(2),five,5,false), Span(16,17,List(3),complete,complete,false), Span(12,13,List(4),project,project,false), Span(9,10,List(5),phase,phase,false), Span(5,6,List(6),promised,promise-01,false), Span(3,4,List(7),jobs,job,false), Span(2,3,List(8),600,600,false)),Map(2 -> 5, 5 -> phase, 8 -> 600, 7 -> job, 1 -> year, 4 -> project, 6 -> promise-01, 0 -> temporal-quantity, 3 -> complete),Map(5 -> 5, t -> temporal-quantity, p2 -> phase, j -> job, p -> project, y -> year, 6 -> 600, c -> complete, p3 -> promise-01))),[Ljava.lang.String;@61870e86,Annotation([Ljava.lang.String;@69cab16f,[Ljava.lang.String;@7a4724ab,[Ljava.lang.String;@54b89544),Annotation([Ljava.lang.String;@224fced0,[Ljava.lang.String;@2592cb49,[Ledu.cmu.lti.nlp.amr.Dependency;@486038e4),Annotation([Ljava.lang.String;@253725db,[Ljava.lang.String;@47965ff3,[Ljava.lang.String;@61756f3c),Annotation([Ljava.lang.String;@64d9fe20,[Ljava.lang.String;@23bb1a9a,[Ledu.cmu.lti.nlp.amr.Entity;@50cf86c9))
AMR:
(j / job, quant, 6 / 600)
(p / project, mod, c / complete)
(p / project, part, p2 / phase)
(p3 / promise-01, ARG0, t / temporal-quantity)
(p3 / promise-01, ARG1, j / job)
(p3 / promise-01, ARG2, p2 / phase)
(t / temporal-quantity, quant, 5 / 5)
(t / temporal-quantity, unit, y / year)

Decoded in 55,853 microseconds
Sentence:   the east german prime minister hans modrow promised on tuesday that all political prisoners would be released from his countrys jails by christmas but he did not say whether this included those imprisoned for spying

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the east german prime minister hans modrow promised on tuesday that all political prisoners would be released from his countrys jails by christmas but he did not say whether this included those imprisoned for spying
myTokenized = the east german prime minister hans modrow promised on tuesday that all political prisoners would be released from his countrys jails by christmas but he did not say whether this included those imprisoned for spying
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: sergei was promising to ring sonia tomorrow

Spans:
Span 2-3:  promising => promise-01
Span 4-5:  ring => ring
Span 6-7:  tomorrow => tomorrow

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),tomorrow,tomorrow,false), Span(4,5,List(1),ring,ring,false), Span(2,3,List(2),promising,promise-01,false)),Map(2 -> promise-01, 1 -> ring, 0 -> tomorrow),Map(t -> tomorrow, p -> promise-01, r -> ring))),[Ljava.lang.String;@5e8e9e3d,Annotation([Ljava.lang.String;@6536e74a,[Ljava.lang.String;@778adf2f,[Ljava.lang.String;@3e42c3f9),Annotation([Ljava.lang.String;@1150305e,[Ljava.lang.String;@27977433,[Ledu.cmu.lti.nlp.amr.Dependency;@484dd493),Annotation([Ljava.lang.String;@6dbf23fa,[Ljava.lang.String;@1fd32a60,[Ljava.lang.String;@608314f2),Annotation([Ljava.lang.String;@3dd44d5e,[Ljava.lang.String;@3d237608,[Ledu.cmu.lti.nlp.amr.Entity;@631a2693))
AMR:
(p / promise-01, ARG1, r / ring)
(r / ring, time, t / tomorrow)

Decoded in 8,877 microseconds
Sentence: but strasbourgs antinicotine brigade has won a consolation prize the health and socialaffairs commissioner mrs vasso papandreou has promised to look at a ban in the future

Spans:
Span 11-12:  and => and
Span 23-24:  ban => ban-01
Span 0-1:  but => contrast-01
Span 13-14:  commissioner => (have-org-role-91 :ARG2 commissioner)
Span 7-8:  consolation => console-01
Span 26-27:  future => future
Span 10-11:  health => health
Span 8-9:  prize => prize-01
Span 18-19:  promised => promise-01
Span 5-6:  won => win-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),future,future,false), Span(23,24,List(1),ban,ban-01,false), Span(18,19,List(2),promised,promise-01,false), Span(13,14,List(4, 3),commissioner,(have-org-role-91 :ARG2 commissioner),false), Span(11,12,List(5),and,and,false), Span(10,11,List(6),health,health,false), Span(8,9,List(7),prize,prize-01,false), Span(7,8,List(8),consolation,console-01,false), Span(5,6,List(9),won,win-01,false), Span(0,1,List(10),but,contrast-01,false)),Map(2 -> promise-01, 5 -> and, 8 -> console-01, 7 -> prize-01, 1 -> ban-01, 4 -> commissioner, 6 -> health, 9 -> win-01, 0 -> future, 10 -> contrast-01, 3 -> have-org-role-91),Map(w -> win-01, h -> have-org-role-91, h2 -> health, b -> ban-01, p2 -> prize-01, p -> promise-01, c3 -> contrast-01, a -> and, c -> commissioner, f -> future, c2 -> console-01))),[Ljava.lang.String;@49daafb9,Annotation([Ljava.lang.String;@3446c090,[Ljava.lang.String;@110c48c0,[Ljava.lang.String;@3d7c3dfe),Annotation([Ljava.lang.String;@27ca0e3b,[Ljava.lang.String;@426c57e5,[Ledu.cmu.lti.nlp.amr.Dependency;@56fe9d74),Annotation([Ljava.lang.String;@6613574a,[Ljava.lang.String;@7fc7efa0,[Ljava.lang.String;@1f4532ea),Annotation([Ljava.lang.String;@7811b0af,[Ljava.lang.String;@5166eebe,[Ledu.cmu.lti.nlp.amr.Entity;@3cc425b2))
AMR:
(b / ban-01, ARG1, f / future)
(c3 / contrast-01, ARG1, w / win-01)
(h / have-org-role-91, ARG1, c3 / contrast-01)
(h / have-org-role-91, ARG2, c / commissioner)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, b / ban-01)
(p2 / prize-01, ARG0, a / and)
(p2 / prize-01, ARG1, c2 / console-01)
(w / win-01, ARG0, a / and)
(w / win-01, ARG1, h2 / health)

Decoded in 225,856 microseconds
Sentence: ravinder kumar founder of the iop promises to promote religious strife and caste conflict and makes a special pledge to encourage nepotism and assist its leaders to amass fortunes

Spans:
Span 22-23:  and => and
Span 14-15:  and => and
Span 11-12:  and => and
Span 23-24:  assist => assist-01
Span 13-14:  conflict => conflict-01
Span 20-21:  encourage => encourage-01
Span 2-3:  founder => found-01
Span 25-26:  leaders => (person :ARG0-of lead-02)
Span 18-19:  pledge => pledge-01
Span 6-7:  promises => promise-01
Span 8-9:  promote => promote-02
Span 17-18:  special => special

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(1, 0),leaders,(person :ARG0-of lead-02),false), Span(23,24,List(2),assist,assist-01,false), Span(22,23,List(3),and,and,false), Span(20,21,List(4),encourage,encourage-01,false), Span(18,19,List(5),pledge,pledge-01,false), Span(17,18,List(6),special,special,false), Span(14,15,List(7),and,and,false), Span(13,14,List(8),conflict,conflict-01,false), Span(11,12,List(9),and,and,false), Span(8,9,List(10),promote,promote-02,false), Span(6,7,List(11),promises,promise-01,false), Span(2,3,List(12),founder,found-01,false)),Map(2 -> assist-01, 5 -> pledge-01, 12 -> found-01, 8 -> conflict-01, 7 -> and, 1 -> lead-02, 4 -> encourage-01, 11 -> promise-01, 6 -> special, 0 -> person, 9 -> and, 3 -> and, 10 -> promote-02),Map(e -> encourage-01, p2 -> pledge-01, a3 -> and, s -> special, p -> person, a -> assist-01, p4 -> promise-01, a2 -> and, c -> conflict-01, l -> lead-02, f -> found-01, p3 -> promote-02, a4 -> and))),[Ljava.lang.String;@2bbfdaa4,Annotation([Ljava.lang.String;@40ab5b6c,[Ljava.lang.String;@31ff309f,[Ljava.lang.String;@68d1305d),Annotation([Ljava.lang.String;@7dbe5f6d,[Ljava.lang.String;@5d6b2d99,[Ledu.cmu.lti.nlp.amr.Dependency;@277ec7b9),Annotation([Ljava.lang.String;@746a56f0,[Ljava.lang.String;@7171e245,[Ljava.lang.String;@6bbe5a32),Annotation([Ljava.lang.String;@1e13bfe1,[Ljava.lang.String;@229a5c34,[Ledu.cmu.lti.nlp.amr.Entity;@441b6bab))
AMR:
(a / assist-01, ARG1, p / person)
(a2 / and, op, a / assist-01)
(a2 / and, op, e / encourage-01)
(a3 / and, op, p4 / promise-01)
(a4 / and, op, c / conflict-01)
(a4 / and, op, p3 / promote-02)
(e / encourage-01, ARG1, f / found-01)
(l / lead-02, ARG0, p / person)
(p2 / pledge-01, ARG1, e / encourage-01)
(p2 / pledge-01, mod, s / special)
(p4 / promise-01, ARG0, f / found-01)
(p4 / promise-01, ARG2, p3 / promote-02)

Decoded in 107,081 microseconds
Sentence: is modern living taking its toll on your complexion  no7 promises to smooth away signs of the times with its new extra care nurture 7

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = is modern living taking its toll on your complexion  no7 promises to smooth away signs of the times with its new extra care nurture 7
myTokenized = is modern living taking its toll on your complexion no7 promises to smooth away signs of the times with its new extra care nurture 7
i = 9
prefix = List(is, modern, living, taking, its, toll, on, your, complexion, no7)
regexr = \Qi\E ?\Qs\E ?\Qm\E ?\Qo\E ?\Qd\E ?\Qe\E ?\Qr\E ?\Qn\E ?\Ql\E ?\Qi\E ?\Qv\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qi\E ?\Qt\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Ql\E ?\Ql\E ?\Qo\E ?\Qn\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qc\E ?\Qo\E ?\Qm\E ?\Qp\E ?\Ql\E ?\Qe\E ?\Qx\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Qn\E ?\Qo\E ?\Q7\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the cseu therefore decided to target a small number of important factories and to promise members there unusually high levels of strike pay if they voted to come out

Spans:
Span 12-13:  and => and
Span 3-4:  decided => decide-01
Span 11-12:  factories => factory
Span 18-19:  high => high
Span 10-11:  important => important
Span 19-20:  levels => level
Span 15-16:  members => (have-org-role-91 :ARG2 member)
Span 8-9:  number => number
Span 22-23:  pay => pay-01
Span 14-15:  promise => promise-01
Span 7-8:  small => small
Span 21-22:  strike => strike-01
Span 5-6:  target => target-01
Span 24-25:  they => they
Span 17-18:  unusually => (usual :polarity -)
Span 25-26:  voted => vote-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),voted,vote-01,false), Span(24,25,List(1),they,they,false), Span(22,23,List(2),pay,pay-01,false), Span(21,22,List(3),strike,strike-01,false), Span(19,20,List(4),levels,level,false), Span(18,19,List(5),high,high,false), Span(17,18,List(7, 6),unusually,(usual :polarity -),false), Span(15,16,List(9, 8),members,(have-org-role-91 :ARG2 member),false), Span(14,15,List(10),promise,promise-01,false), Span(12,13,List(11),and,and,false), Span(11,12,List(12),factories,factory,false), Span(10,11,List(13),important,important,false), Span(8,9,List(14),number,number,false), Span(7,8,List(15),small,small,false), Span(5,6,List(16),target,target-01,false), Span(3,4,List(17),decided,decide-01,false)),Map(2 -> pay-01, 5 -> high, 12 -> factory, 15 -> small, 8 -> have-org-role-91, 7 -> -, 17 -> decide-01, 1 -> they, 4 -> level, 11 -> and, 14 -> number, 6 -> usual, 0 -> vote-01, 9 -> member, 16 -> target-01, 3 -> strike-01, 10 -> promise-01, 13 -> important),Map(n -> number, h -> high, s2 -> small, h2 -> have-org-role-91, t -> they, p2 -> promise-01, s -> strike-01, v -> vote-01, d -> decide-01, m -> member, p -> pay-01, a -> and, t2 -> target-01, i -> important, l -> level, u -> usual, f -> factory))),[Ljava.lang.String;@e1c84a5,Annotation([Ljava.lang.String;@724873df,[Ljava.lang.String;@72af7016,[Ljava.lang.String;@5be7ef2c),Annotation([Ljava.lang.String;@580760d7,[Ljava.lang.String;@4c66f067,[Ledu.cmu.lti.nlp.amr.Dependency;@7a312160),Annotation([Ljava.lang.String;@2f86644c,[Ljava.lang.String;@2022d1f4,[Ljava.lang.String;@4e05faa7),Annotation([Ljava.lang.String;@6a8b11f5,[Ljava.lang.String;@50482278,[Ledu.cmu.lti.nlp.amr.Entity;@2fcf1d75))
AMR:
(a / and, op, p2 / promise-01)
(a / and, op, t2 / target-01)
(d / decide-01, ARG0, t / they)
(d / decide-01, ARG1, t2 / target-01)
(f / factory, mod, i / important)
(f / factory, quant, n / number)
(h2 / have-org-role-91, ARG0, p2 / promise-01)
(h2 / have-org-role-91, ARG2, m / member)
(l / level, mod, s / strike-01)
(n / number, mod, s2 / small)
(p / pay-01, ARG0, l / level)
(p / pay-01, time, v / vote-01)
(p2 / promise-01, ARG1, h / high)
(p2 / promise-01, mod, u / usual)
(t2 / target-01, ARG1, n / number)
(u / usual, polarity, -)
(v / vote-01, ARG0, t / they)

Decoded in 151,542 microseconds
Sentence: inaccuracies in pricing units are believed to have occurred and dumenils french parent has promised to make good any shortfall suffered by investors

Spans:
Span 9-10:  and => and
Span 18-19:  any => any
Span 5-6:  believed => believe-01
Span 11-12:  french => (country :name (name :op "France"))
Span 17-18:  good => good
Span 22-23:  investors => (person :ARG0-of invest-01)
Span 12-13:  parent => parent
Span 2-3:  pricing => price-01
Span 14-15:  promised => promise-01
Span 20-21:  suffered => suffer-01
Span 3-4:  units => unit

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),investors,(person :ARG0-of invest-01),false), Span(20,21,List(2),suffered,suffer-01,false), Span(18,19,List(3),any,any,false), Span(17,18,List(4),good,good,false), Span(14,15,List(5),promised,promise-01,false), Span(12,13,List(6),parent,parent,false), Span(11,12,List(9, 8, 7),french,(country :name (name :op "France")),false), Span(9,10,List(10),and,and,false), Span(5,6,List(11),believed,believe-01,false), Span(3,4,List(12),units,unit,false), Span(2,3,List(13),pricing,price-01,false)),Map(2 -> suffer-01, 5 -> promise-01, 12 -> unit, 8 -> name, 7 -> country, 1 -> invest-01, 4 -> good, 11 -> believe-01, 6 -> parent, 0 -> person, 9 -> "France", 3 -> any, 10 -> and, 13 -> price-01),Map(n -> name, b -> believe-01, p2 -> promise-01, s -> suffer-01, p -> person, g -> good, a -> any, p4 -> price-01, i -> invest-01, a2 -> and, c -> country, u -> unit, p3 -> parent))),[Ljava.lang.String;@469704d8,Annotation([Ljava.lang.String;@64bf251c,[Ljava.lang.String;@411d84f0,[Ljava.lang.String;@7902c9f5),Annotation([Ljava.lang.String;@261931e4,[Ljava.lang.String;@401a8346,[Ledu.cmu.lti.nlp.amr.Dependency;@ca0898b),Annotation([Ljava.lang.String;@7fa60b26,[Ljava.lang.String;@6e262d42,[Ljava.lang.String;@c65808d),Annotation([Ljava.lang.String;@5bdaaf56,[Ljava.lang.String;@722d6636,[Ledu.cmu.lti.nlp.amr.Entity;@2919dca))
AMR:
(a / any, degree, g / good)
(a2 / and, op, b / believe-01)
(b / believe-01, ARG1, u / unit)
(c / country, name, n / name)
(i / invest-01, ARG0, p / person)
(n / name, op, "France")
(p2 / promise-01, ARG0, p3 / parent)
(p2 / promise-01, ARG1, g / good)
(p2 / promise-01, ARG2, b / believe-01)
(p3 / parent, mod, c / country)
(p4 / price-01, ARG0, u / unit)
(s / suffer-01, ARG0, p / person)
(s / suffer-01, ARG1, g / good)

Decoded in 78,329 microseconds
Sentence: albania relaxed its ban on foreign economic aid in may and its ruling party has promised to embark on a long overdue process of political relaxation

NER Entity: (country :name (name :op "albania"))
Spans:
Span 7-8:  aid => aid-01
Span 10-11:  and => and
Span 3-4:  ban => ban-01
Span 6-7:  economic => economy
Span 5-6:  foreign => foreign
Span 9-10:  may => (date-entity :month 5)
Span 13-14:  party => party
Span 24-25:  political => politics
Span 22-23:  process => process
Span 15-16:  promised => promise-01
Span 25-26:  relaxation => relax-01
Span 1-2:  relaxed => relax-01
Span 12-13:  ruling => rule-03

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),relaxation,relax-01,false), Span(24,25,List(1),political,politics,false), Span(22,23,List(2),process,process,false), Span(15,16,List(3),promised,promise-01,false), Span(13,14,List(4),party,party,false), Span(12,13,List(5),ruling,rule-03,false), Span(10,11,List(6),and,and,false), Span(9,10,List(8, 7),may,(date-entity :month 5),false), Span(7,8,List(9),aid,aid-01,false), Span(6,7,List(10),economic,economy,false), Span(5,6,List(11),foreign,foreign,false), Span(3,4,List(12),ban,ban-01,false), Span(1,2,List(13),relaxed,relax-01,false)),Map(2 -> process, 5 -> rule-03, 12 -> ban-01, 8 -> 5, 7 -> date-entity, 1 -> politics, 4 -> party, 11 -> foreign, 6 -> and, 0 -> relax-01, 9 -> aid-01, 3 -> promise-01, 10 -> economy, 13 -> relax-01),Map(e -> economy, r3 -> relax-01, 5 -> 5, b -> ban-01, p2 -> process, d -> date-entity, p -> politics, r2 -> rule-03, a -> and, p4 -> party, r -> relax-01, a2 -> aid-01, f -> foreign, p3 -> promise-01))),[Ljava.lang.String;@260e3a17,Annotation([Ljava.lang.String;@7007cf85,[Ljava.lang.String;@10c95e39,[Ljava.lang.String;@1448f8cb),Annotation([Ljava.lang.String;@42c5e1d4,[Ljava.lang.String;@4d6d478b,[Ledu.cmu.lti.nlp.amr.Dependency;@41741e63),Annotation([Ljava.lang.String;@2e771727,[Ljava.lang.String;@c911946,[Ljava.lang.String;@a12491c),Annotation([Ljava.lang.String;@367dd26e,[Ljava.lang.String;@7e824fb4,[Ledu.cmu.lti.nlp.amr.Entity;@1d3ef34f))
AMR:
(a / and, op, d / date-entity)
(a / and, op, p3 / promise-01)
(a / and, op, r3 / relax-01)
(a2 / aid-01, mod, e / economy)
(b / ban-01, ARG1, a2 / aid-01)
(d / date-entity, month, 5 / 5)
(e / economy, mod, f / foreign)
(p2 / process, purpose, r / relax-01)
(p3 / promise-01, ARG0, p4 / party)
(r / relax-01, ARG1, b / ban-01)
(r / relax-01, mod, p / politics)
(r2 / rule-03, ARG0, p4 / party)
(r3 / relax-01, ARG1, b / ban-01)

Decoded in 154,288 microseconds
Sentence: id be glad to hear from anyone who feels they would like to be a volunteer and i can promise many rewards from doing such a worthwhile job

Spans:
Span 16-17:  and => and
Span 6-7:  anyone => anyone
Span 18-19:  can => possible
Span 23-24:  doing => do-02
Span 2-3:  glad => glad
Span 4-5:  hear => hear-01
Span 17-18:  i => i
Span 0-1:  id => id
Span 27-28:  job => job
Span 20-21:  many => many
Span 19-20:  promise => promise-01
Span 24-25:  such => such
Span 9-10:  they => they
Span 15-16:  volunteer => volunteer-01
Span 26-27:  worthwhile => worthwhile

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),job,job,false), Span(26,27,List(1),worthwhile,worthwhile,false), Span(24,25,List(2),such,such,false), Span(23,24,List(3),doing,do-02,false), Span(20,21,List(4),many,many,false), Span(19,20,List(5),promise,promise-01,false), Span(18,19,List(6),can,possible,false), Span(17,18,List(7),i,i,false), Span(16,17,List(8),and,and,false), Span(15,16,List(9),volunteer,volunteer-01,false), Span(9,10,List(10),they,they,false), Span(6,7,List(11),anyone,anyone,false), Span(4,5,List(12),hear,hear-01,false), Span(2,3,List(13),glad,glad,false), Span(0,1,List(14),id,id,false)),Map(2 -> such, 5 -> promise-01, 12 -> hear-01, 8 -> and, 7 -> i, 1 -> worthwhile, 4 -> many, 11 -> anyone, 14 -> id, 6 -> possible, 0 -> job, 9 -> volunteer-01, 3 -> do-02, 10 -> they, 13 -> glad),Map(w -> worthwhile, h -> hear-01, t -> they, p2 -> possible, j -> job, s -> such, v -> volunteer-01, d -> do-02, m -> many, g -> glad, p -> promise-01, a -> and, i2 -> id, i -> i, a2 -> anyone))),[Ljava.lang.String;@fd7d689,Annotation([Ljava.lang.String;@2345c47f,[Ljava.lang.String;@39677ff0,[Ljava.lang.String;@3a008301),Annotation([Ljava.lang.String;@7798d466,[Ljava.lang.String;@52a0b1e1,[Ledu.cmu.lti.nlp.amr.Dependency;@33fe5528),Annotation([Ljava.lang.String;@7e88cfc2,[Ljava.lang.String;@48000a74,[Ljava.lang.String;@7aae6a99),Annotation([Ljava.lang.String;@50d8a1bb,[Ljava.lang.String;@3e622574,[Ledu.cmu.lti.nlp.amr.Entity;@1d8902ab))
AMR:
(a / and, op, p / promise-01)
(a / and, op, p2 / possible)
(d / do-02, ARG0, a2 / anyone)
(d / do-02, ARG1, j / job)
(g / glad, domain, h / hear-01)
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, i2 / id)
(j / job, mod, s / such)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, t / they)
(p / promise-01, manner, d / do-02)
(v / volunteer-01, ARG0, t / they)
(v / volunteer-01, ARG1, m / many)
(w / worthwhile, degree, s / such)

Decoded in 490,326 microseconds
Sentence: the iaaf medical committee chairman arne lundquist will read and report to his executive while britains sir arthur gold one of the most prominent activists against drug abuse has promised that the sports councils drug abuse group of which he is chairman will study the report

Spans:
Span 35-36:  abuse => abuse-01
Span 27-28:  abuse => abuse-01
Span 24-25:  activists => activist
Span 9-10:  and => and
Span 41-42:  chairman => (have-org-role-91 :ARG2 chairman)
Span 4-5:  chairman => (have-org-role-91 :ARG2 chairman)
Span 3-4:  committee => committee
Span 33-34:  councils => council
Span 34-35:  drug => drug
Span 26-27:  drug => drug
Span 13-14:  executive => executive
Span 18-19:  gold => gold
Span 36-37:  group => group
Span 39-40:  he => he
Span 2-3:  medical => medicine
Span 22-23:  most => most
Span 23-24:  prominent => prominent
Span 29-30:  promised => promise-01
Span 8-9:  read => read-01
Span 45-46:  report => report
Span 10-11:  report => report
Span 32-33:  sports => sport
Span 43-44:  study => study-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),report,report,false), Span(43,44,List(1),study,study-01,false), Span(41,42,List(3, 2),chairman,(have-org-role-91 :ARG2 chairman),false), Span(39,40,List(4),he,he,false), Span(36,37,List(5),group,group,false), Span(35,36,List(6),abuse,abuse-01,false), Span(34,35,List(7),drug,drug,false), Span(33,34,List(8),councils,council,false), Span(32,33,List(9),sports,sport,false), Span(29,30,List(10),promised,promise-01,false), Span(27,28,List(11),abuse,abuse-01,false), Span(26,27,List(12),drug,drug,false), Span(24,25,List(13),activists,activist,false), Span(23,24,List(14),prominent,prominent,false), Span(22,23,List(15),most,most,false), Span(18,19,List(16),gold,gold,false), Span(13,14,List(17),executive,executive,false), Span(10,11,List(18),report,report,false), Span(9,10,List(19),and,and,false), Span(8,9,List(20),read,read-01,false), Span(4,5,List(22, 21),chairman,(have-org-role-91 :ARG2 chairman),false), Span(3,4,List(23),committee,committee,false), Span(2,3,List(24),medical,medicine,false)),Map(2 -> have-org-role-91, 5 -> group, 12 -> drug, 8 -> council, 15 -> most, 21 -> have-org-role-91, 18 -> report, 24 -> medicine, 7 -> drug, 1 -> study-01, 17 -> executive, 23 -> committee, 4 -> he, 11 -> abuse-01, 14 -> prominent, 20 -> read-01, 6 -> abuse-01, 9 -> sport, 0 -> report, 22 -> chairman, 16 -> gold, 19 -> and, 10 -> promise-01, 3 -> chairman, 13 -> activist),Map(e -> executive, h -> have-org-role-91, r3 -> read-01, s2 -> sport, h2 -> he, m2 -> medicine, p2 -> prominent, a3 -> activist, c4 -> committee, s -> study-01, d -> drug, m -> most, g2 -> gold, r2 -> report, p -> promise-01, g -> group, a -> abuse-01, c3 -> chairman, d2 -> drug, a2 -> abuse-01, r -> report, c -> chairman, h3 -> have-org-role-91, c2 -> council, a4 -> and))),[Ljava.lang.String;@476acffa,Annotation([Ljava.lang.String;@357c4ab7,[Ljava.lang.String;@730d4fcf,[Ljava.lang.String;@6ef2da0b),Annotation([Ljava.lang.String;@9c94115,[Ljava.lang.String;@7bcfceb7,[Ledu.cmu.lti.nlp.amr.Dependency;@80c8fe2),Annotation([Ljava.lang.String;@70ba428e,[Ljava.lang.String;@5467b273,[Ljava.lang.String;@63f4c74f),Annotation([Ljava.lang.String;@5b4946cd,[Ljava.lang.String;@27c76b8d,[Ledu.cmu.lti.nlp.amr.Entity;@15660a62))
AMR:
(a / abuse-01, ARG0, g / group)
(a / abuse-01, ARG1, d / drug)
(a2 / abuse-01, ARG0, m2 / medicine)
(a2 / abuse-01, ARG1, d2 / drug)
(a2 / abuse-01, ARG2, h3 / have-org-role-91)
(a3 / activist, topic, a2 / abuse-01)
(a4 / and, op, a2 / abuse-01)
(a4 / and, op, r2 / report)
(a4 / and, op, r3 / read-01)
(c2 / council, beneficiary, g / group)
(c2 / council, mod, s2 / sport)
(h / have-org-role-91, ARG0, h2 / he)
(h / have-org-role-91, ARG1, g / group)
(h / have-org-role-91, ARG2, c / chairman)
(h3 / have-org-role-91, ARG1, c4 / committee)
(h3 / have-org-role-91, ARG2, c3 / chairman)
(m / most, op, s / study-01)
(p / promise-01, ARG0, a3 / activist)
(p / promise-01, ARG1, c2 / council)
(p2 / prominent, degree, m / most)
(r3 / read-01, ARG0, g2 / gold)
(r3 / read-01, ARG1, e / executive)
(s / study-01, ARG0, g / group)
(s / study-01, ARG1, r / report)

Decoded in 969,017 microseconds
Sentence: but last month the swedish government renewed a promise to close down the nuclear plants within 20 years this week 26 january

Spans:
Span 16-17:  20 => 20
Span 20-21:  26 => 26
Span 0-1:  but => contrast-01
Span 11-12:  down => down
Span 21-22:  january => (date-entity :month 1)
Span 1-2:  last => last
Span 2-3:  month => (temporal-quantity :unit month)
Span 13-14:  nuclear => nucleus
Span 14-15:  plants => plant
Span 8-9:  promise => promise-01
Span 6-7:  renewed => renew-01
Span 18-19:  this => this
Span 19-20:  week => week
Span 15-16:  within => within
Span 17-18:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(1, 0),january,(date-entity :month 1),false), Span(20,21,List(2),26,26,false), Span(19,20,List(3),week,week,false), Span(18,19,List(4),this,this,false), Span(17,18,List(6, 5),years,(temporal-quantity :unit year),false), Span(16,17,List(7),20,20,false), Span(15,16,List(8),within,within,false), Span(14,15,List(9),plants,plant,false), Span(13,14,List(10),nuclear,nucleus,false), Span(11,12,List(11),down,down,false), Span(8,9,List(12),promise,promise-01,false), Span(6,7,List(13),renewed,renew-01,false), Span(2,3,List(15, 14),month,(temporal-quantity :unit month),false), Span(1,2,List(16),last,last,false), Span(0,1,List(17),but,contrast-01,false)),Map(2 -> 26, 5 -> temporal-quantity, 12 -> promise-01, 15 -> month, 8 -> within, 7 -> 20, 17 -> contrast-01, 1 -> 1, 4 -> this, 11 -> down, 14 -> temporal-quantity, 6 -> year, 0 -> date-entity, 9 -> plant, 16 -> last, 3 -> week, 10 -> nucleus, 13 -> renew-01),Map(w -> week, n -> nucleus, 2 -> 26, t -> this, p2 -> promise-01, m -> month, d -> date-entity, t3 -> temporal-quantity, 1 -> 1, y -> year, p -> plant, d2 -> down, t2 -> temporal-quantity, w2 -> within, r -> renew-01, c -> contrast-01, l -> last, 22 -> 20))),[Ljava.lang.String;@14268c02,Annotation([Ljava.lang.String;@6eb1e1a3,[Ljava.lang.String;@6054cd1b,[Ljava.lang.String;@5f65d905),Annotation([Ljava.lang.String;@178b0831,[Ljava.lang.String;@28c6d50a,[Ledu.cmu.lti.nlp.amr.Dependency;@15cc9870),Annotation([Ljava.lang.String;@2b2bec3e,[Ljava.lang.String;@50a2f096,[Ljava.lang.String;@79613135),Annotation([Ljava.lang.String;@5be5ccd4,[Ljava.lang.String;@4beaa16e,[Ledu.cmu.lti.nlp.amr.Entity;@190c63b2))
AMR:
(c / contrast-01, ARG0, d / date-entity)
(c / contrast-01, ARG1, l / last)
(c / contrast-01, ARG2, t3 / temporal-quantity)
(c / contrast-01, time, r / renew-01)
(d / date-entity, month, 1 / 1)
(n / nucleus, mod, d2 / down)
(p / plant, mod, d2 / down)
(p2 / promise-01, ARG0, w / week)
(p2 / promise-01, ARG1, d2 / down)
(r / renew-01, ARG0, 2 / 26)
(r / renew-01, ARG1, p2 / promise-01)
(t2 / temporal-quantity, quant, 22 / 20)
(t2 / temporal-quantity, unit, y / year)
(t3 / temporal-quantity, unit, m / month)
(w / week, mod, t / this)
(w2 / within, op, p / plant)
(w2 / within, op, t2 / temporal-quantity)

Decoded in 334,342 microseconds
Sentence: but the full easy strength of her dancing and the scale of her projection promise important things to come

Spans:
Span 8-9:  and => and
Span 0-1:  but => contrast-01
Span 3-4:  easy => easy
Span 2-3:  full => full
Span 15-16:  important => important
Span 13-14:  projection => project-01
Span 14-15:  promise => promise-01
Span 10-11:  scale => scale
Span 4-5:  strength => strength
Span 16-17:  things => thing

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),things,thing,false), Span(15,16,List(1),important,important,false), Span(14,15,List(2),promise,promise-01,false), Span(13,14,List(3),projection,project-01,false), Span(10,11,List(4),scale,scale,false), Span(8,9,List(5),and,and,false), Span(4,5,List(6),strength,strength,false), Span(3,4,List(7),easy,easy,false), Span(2,3,List(8),full,full,false), Span(0,1,List(9),but,contrast-01,false)),Map(2 -> promise-01, 5 -> and, 8 -> full, 7 -> easy, 1 -> important, 4 -> scale, 6 -> strength, 9 -> contrast-01, 0 -> thing, 3 -> project-01),Map(e -> easy, s2 -> strength, t -> thing, p2 -> project-01, s -> scale, p -> promise-01, a -> and, i -> important, c -> contrast-01, f -> full))),[Ljava.lang.String;@7c6547f6,Annotation([Ljava.lang.String;@5d57a747,[Ljava.lang.String;@25a75631,[Ljava.lang.String;@d0bbe47),Annotation([Ljava.lang.String;@7df92e01,[Ljava.lang.String;@723b8443,[Ledu.cmu.lti.nlp.amr.Dependency;@2168854c),Annotation([Ljava.lang.String;@550751b6,[Ljava.lang.String;@5385af56,[Ljava.lang.String;@6dba61f0),Annotation([Ljava.lang.String;@67740bd7,[Ljava.lang.String;@73b58550,[Ledu.cmu.lti.nlp.amr.Entity;@12438289))
AMR:
(a / and, op, s / scale)
(c / contrast-01, ARG1, s2 / strength)
(c / contrast-01, ARG2, a / and)
(p / promise-01, ARG0, a / and)
(p / promise-01, ARG1, t / thing)
(s / scale, poss, p2 / project-01)
(s2 / strength, mod, e / easy)
(s2 / strength, mod, f / full)
(t / thing, mod, i / important)

Decoded in 39,826 microseconds
Sentence: i promise you if youll pardon the expression coming from me that you wont regret it

Spans:
Span 7-8:  expression => express-01
Span 0-1:  i => i
Span 15-16:  it => it
Span 5-6:  pardon => pardon
Span 1-2:  promise => promise-01
Span 14-15:  regret => regret-01
Span 12-13:  you => you
Span 2-3:  you => you

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),it,it,false), Span(14,15,List(1),regret,regret-01,false), Span(12,13,List(2),you,you,false), Span(7,8,List(3),expression,express-01,false), Span(5,6,List(4),pardon,pardon,false), Span(2,3,List(5),you,you,false), Span(1,2,List(6),promise,promise-01,false), Span(0,1,List(7),i,i,false)),Map(2 -> you, 5 -> you, 7 -> i, 1 -> regret-01, 4 -> pardon, 6 -> promise-01, 0 -> it, 3 -> express-01),Map(e -> express-01, p2 -> promise-01, p -> pardon, y -> you, i2 -> i, r -> regret-01, i -> it, y2 -> you))),[Ljava.lang.String;@e2ef9bd,Annotation([Ljava.lang.String;@2e0dee91,[Ljava.lang.String;@14a98936,[Ljava.lang.String;@66f42d3),Annotation([Ljava.lang.String;@728c2df1,[Ljava.lang.String;@511c63f7,[Ledu.cmu.lti.nlp.amr.Dependency;@1ee716bb),Annotation([Ljava.lang.String;@55855ed6,[Ljava.lang.String;@27155f77,[Ljava.lang.String;@6c2e91ac),Annotation([Ljava.lang.String;@655deab0,[Ljava.lang.String;@78dafccd,[Ledu.cmu.lti.nlp.amr.Entity;@710b34b7))
AMR:
(e / express-01, ARG1, r / regret-01)
(p2 / promise-01, ARG0, i2 / i)
(p2 / promise-01, ARG1, y2 / you)
(p2 / promise-01, ARG2, e / express-01)
(p2 / promise-01, time, p / pardon)
(r / regret-01, ARG0, y / you)
(r / regret-01, ARG1, i / it)

Decoded in 48,508 microseconds
Sentence: the portuguese authorities had promised to hear ferraris appeal against the fine next wednesday after which the fia the international automobile federation was due to reach a decision on ferraris appeal over mansells ban from the spanish grand prix which was staged on 1 october

NER Entity: (thing :name (name :op "portuguese"))
Spans:
Span 43-44:  1 => 1
Span 14-15:  after => after
Span 30-31:  appeal => appeal-02
Span 8-9:  appeal => appeal-02
Span 2-3:  authorities => authority
Span 20-21:  automobile => automobile
Span 33-34:  ban => ban-01
Span 27-28:  decision => decide-01
Span 11-12:  fine => fine
Span 37-38:  grand => grand
Span 6-7:  hear => hear-01
Span 19-20:  international => international
Span 12-13:  next => next
Span 44-45:  october => (date-entity :month 10)
Span 4-5:  promised => promise-01
Span 25-26:  reach => reach-01
Span 36-37:  spanish => (language :name (name :op "Spanish"))
Span 41-42:  staged => stage-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(1, 0),october,(date-entity :month 10),false), Span(43,44,List(2),1,1,false), Span(41,42,List(3),staged,stage-01,false), Span(37,38,List(4),grand,grand,false), Span(36,37,List(7, 6, 5),spanish,(language :name (name :op "Spanish")),false), Span(33,34,List(8),ban,ban-01,false), Span(30,31,List(9),appeal,appeal-02,false), Span(27,28,List(10),decision,decide-01,false), Span(25,26,List(11),reach,reach-01,false), Span(20,21,List(12),automobile,automobile,false), Span(19,20,List(13),international,international,false), Span(14,15,List(14),after,after,false), Span(12,13,List(15),next,next,false), Span(11,12,List(16),fine,fine,false), Span(8,9,List(17),appeal,appeal-02,false), Span(6,7,List(18),hear,hear-01,false), Span(4,5,List(19),promised,promise-01,false), Span(2,3,List(20),authorities,authority,false)),Map(2 -> 1, 5 -> language, 12 -> automobile, 15 -> next, 8 -> ban-01, 18 -> hear-01, 7 -> "Spanish", 17 -> appeal-02, 1 -> 10, 4 -> grand, 11 -> reach-01, 14 -> after, 20 -> authority, 6 -> name, 0 -> date-entity, 9 -> appeal-02, 16 -> fine, 19 -> promise-01, 3 -> stage-01, 10 -> decide-01, 13 -> international),Map(n -> name, h -> hear-01, 12 -> 1, b -> ban-01, a3 -> after, s -> stage-01, d -> date-entity, 1 -> 10, p -> promise-01, g -> grand, a -> appeal-02, a5 -> authority, d2 -> decide-01, r -> reach-01, a2 -> automobile, i -> international, l -> language, f -> fine, n2 -> next, a4 -> appeal-02))),[Ljava.lang.String;@16b2145c,Annotation([Ljava.lang.String;@556afa8,[Ljava.lang.String;@7e264154,[Ljava.lang.String;@18b3280),Annotation([Ljava.lang.String;@59a0724a,[Ljava.lang.String;@34af863e,[Ledu.cmu.lti.nlp.amr.Dependency;@6f966b77),Annotation([Ljava.lang.String;@7c698adc,[Ljava.lang.String;@751bb153,[Ljava.lang.String;@6d16fc35),Annotation([Ljava.lang.String;@83387,[Ljava.lang.String;@1a6ee415,[Ledu.cmu.lti.nlp.amr.Entity;@66402c41))
AMR:
(a / appeal-02, ARG1, b / ban-01)
(a / appeal-02, ARG2, d2 / decide-01)
(a / appeal-02, time, a3 / after)
(a2 / automobile, mod, i / international)
(a2 / automobile, op, s / stage-01)
(a4 / appeal-02, ARG0, l / language)
(a4 / appeal-02, ARG1, f / fine)
(b / ban-01, ARG0, n2 / next)
(d / date-entity, month, 1 / 10)
(d / date-entity, quant, 12 / 1)
(d2 / decide-01, ARG1, g / grand)
(h / hear-01, ARG0, a5 / authority)
(h / hear-01, ARG1, a4 / appeal-02)
(h / hear-01, time, a3 / after)
(l / language, name, n / name)
(n / name, op, "Spanish")
(p / promise-01, ARG2, h / hear-01)
(r / reach-01, ARG0, d / date-entity)
(r / reach-01, ARG1, d2 / decide-01)
(s / stage-01, ARG2, b / ban-01)

Decoded in 507,956 microseconds
Sentence: its going to be a yard long i promise you

Spans:
Span 7-8:  i => i
Span 8-9:  promise => promise-01
Span 5-6:  yard => yard
Span 9-10:  you => you

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),you,you,false), Span(8,9,List(1),promise,promise-01,false), Span(7,8,List(2),i,i,false), Span(5,6,List(3),yard,yard,false)),Map(2 -> i, 1 -> promise-01, 0 -> you, 3 -> yard),Map(p -> promise-01, y -> you, i -> i, y2 -> yard))),[Ljava.lang.String;@7f1993d8,Annotation([Ljava.lang.String;@68398b18,[Ljava.lang.String;@19db0a1d,[Ljava.lang.String;@7b75032d),Annotation([Ljava.lang.String;@3f23bead,[Ljava.lang.String;@43bb703d,[Ledu.cmu.lti.nlp.amr.Dependency;@46c5d788),Annotation([Ljava.lang.String;@66c94604,[Ljava.lang.String;@2813e554,[Ljava.lang.String;@3235025a),Annotation([Ljava.lang.String;@362d7c76,[Ljava.lang.String;@644642c3,[Ledu.cmu.lti.nlp.amr.Entity;@40c943a3))
AMR:
(i / i, condition, y2 / yard)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, y / you)

Decoded in 52,572 microseconds
Sentence: negotiators for the polytechnics have retaliated by promising to get tough to protect students by possibly bringing in local deals

Spans:
Span 16-17:  bringing => bring-01
Span 19-20:  deals => deal-01
Span 18-19:  local => local
Span 0-1:  negotiators => (person :ARG0-of negotiate-01)
Span 15-16:  possibly => possible
Span 7-8:  promising => promise-01
Span 12-13:  protect => protect-01
Span 5-6:  retaliated => retaliate-01
Span 13-14:  students => (person :ARG0-of study-01)
Span 10-11:  tough => tough

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),deals,deal-01,false), Span(18,19,List(1),local,local,false), Span(16,17,List(2),bringing,bring-01,false), Span(15,16,List(3),possibly,possible,false), Span(13,14,List(5, 4),students,(person :ARG0-of study-01),false), Span(12,13,List(6),protect,protect-01,false), Span(10,11,List(7),tough,tough,false), Span(7,8,List(8),promising,promise-01,false), Span(5,6,List(9),retaliated,retaliate-01,false), Span(0,1,List(11, 10),negotiators,(person :ARG0-of negotiate-01),false)),Map(2 -> bring-01, 5 -> study-01, 8 -> promise-01, 7 -> tough, 1 -> local, 11 -> negotiate-01, 4 -> person, 6 -> protect-01, 9 -> retaliate-01, 0 -> deal-01, 10 -> person, 3 -> possible),Map(n -> negotiate-01, p5 -> person, t -> tough, b -> bring-01, p2 -> person, s -> study-01, d -> deal-01, p -> possible, p4 -> promise-01, r -> retaliate-01, l -> local, p3 -> protect-01))),[Ljava.lang.String;@5d77a38f,Annotation([Ljava.lang.String;@59933139,[Ljava.lang.String;@4e84c320,[Ljava.lang.String;@6e269225),Annotation([Ljava.lang.String;@2644f3a2,[Ljava.lang.String;@78d7244e,[Ledu.cmu.lti.nlp.amr.Dependency;@7490badc),Annotation([Ljava.lang.String;@49dbfd4d,[Ljava.lang.String;@9d2f01d,[Ljava.lang.String;@779204f4),Annotation([Ljava.lang.String;@13836c80,[Ljava.lang.String;@19485182,[Ledu.cmu.lti.nlp.amr.Entity;@5adf3ac5))
AMR:
(b / bring-01, ARG2, d / deal-01)
(b / bring-01, mod, p / possible)
(d / deal-01, mod, l / local)
(n / negotiate-01, ARG0, p5 / person)
(p3 / protect-01, ARG1, p2 / person)
(p3 / protect-01, manner, b / bring-01)
(p3 / protect-01, mod, t / tough)
(p4 / promise-01, ARG1, t / tough)
(r / retaliate-01, ARG0, p5 / person)
(r / retaliate-01, ARG1, p4 / promise-01)
(s / study-01, ARG0, p2 / person)

Decoded in 66,802 microseconds
Sentence: mr deng has repeatedly promised to retire in recent years but yesterday was the first time he had reissued the pledge since the tiananmen square massacre and a shakeup of the party leadership

Spans:
Span 26-27:  and => and
Span 10-11:  but => contrast-01
Span 16-17:  he => he
Span 25-26:  massacre => massacre-01
Span 31-32:  party => party
Span 20-21:  pledge => pledge-01
Span 4-5:  promised => promise-01
Span 8-9:  recent => recent
Span 3-4:  repeatedly => repeat-01
Span 6-7:  retire => retire-01
Span 21-22:  since => since
Span 24-25:  square => square
Span 15-16:  time => time
Span 9-10:  years => (temporal-quantity :unit year)
Span 11-12:  yesterday => yesterday

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),party,party,false), Span(26,27,List(1),and,and,false), Span(25,26,List(2),massacre,massacre-01,false), Span(24,25,List(3),square,square,false), Span(21,22,List(4),since,since,false), Span(20,21,List(5),pledge,pledge-01,false), Span(16,17,List(6),he,he,false), Span(15,16,List(7),time,time,false), Span(11,12,List(8),yesterday,yesterday,false), Span(10,11,List(9),but,contrast-01,false), Span(9,10,List(11, 10),years,(temporal-quantity :unit year),false), Span(8,9,List(12),recent,recent,false), Span(6,7,List(13),retire,retire-01,false), Span(4,5,List(14),promised,promise-01,false), Span(3,4,List(15),repeatedly,repeat-01,false)),Map(2 -> massacre-01, 5 -> pledge-01, 12 -> recent, 15 -> repeat-01, 8 -> yesterday, 7 -> time, 1 -> and, 4 -> since, 11 -> year, 14 -> promise-01, 6 -> he, 0 -> party, 9 -> contrast-01, 3 -> square, 10 -> temporal-quantity, 13 -> retire-01),Map(r3 -> repeat-01, h -> he, s2 -> since, t -> time, p2 -> pledge-01, s -> square, m -> massacre-01, r2 -> retire-01, p -> party, y -> yesterday, a -> and, t2 -> temporal-quantity, r -> recent, c -> contrast-01, p3 -> promise-01, y2 -> year))),[Ljava.lang.String;@1c18f3dc,Annotation([Ljava.lang.String;@2a31feed,[Ljava.lang.String;@38578f3f,[Ljava.lang.String;@7c7d8dfe),Annotation([Ljava.lang.String;@16f55e8c,[Ljava.lang.String;@4712451a,[Ledu.cmu.lti.nlp.amr.Dependency;@76d26a),Annotation([Ljava.lang.String;@78f02d62,[Ljava.lang.String;@6033baf5,[Ljava.lang.String;@64375c2a),Annotation([Ljava.lang.String;@6e83fccc,[Ljava.lang.String;@1b49edc3,[Ledu.cmu.lti.nlp.amr.Entity;@1298ab34))
AMR:
(a / and, op, p2 / pledge-01)
(c / contrast-01, ARG0, y / yesterday)
(c / contrast-01, ARG2, t / time)
(m / massacre-01, mod, s / square)
(p / party, mod, s / square)
(p2 / pledge-01, ARG0, h / he)
(p2 / pledge-01, ARG1, m / massacre-01)
(p3 / promise-01, ARG1, t2 / temporal-quantity)
(p3 / promise-01, ARG2, r2 / retire-01)
(r2 / retire-01, ARG0, c / contrast-01)
(r2 / retire-01, ARG1, a / and)
(r3 / repeat-01, ARG1, p3 / promise-01)
(s2 / since, op, m / massacre-01)
(t2 / temporal-quantity, time, r / recent)
(t2 / temporal-quantity, unit, y2 / year)

Decoded in 285,501 microseconds
Sentence: although nigel lawson promised in washington that we would do more

NER Entity: (country :name (name :op "washington"))
Spans:
Span 3-4:  promised => promise-01
Span 7-8:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),we,we,false), Span(3,4,List(1),promised,promise-01,false)),Map(1 -> promise-01, 0 -> we),Map(w -> we, p -> promise-01))),[Ljava.lang.String;@650fec75,Annotation([Ljava.lang.String;@786d2928,[Ljava.lang.String;@46a93edc,[Ljava.lang.String;@115e01c2),Annotation([Ljava.lang.String;@32c57076,[Ljava.lang.String;@405a6d04,[Ledu.cmu.lti.nlp.amr.Dependency;@70ab429d),Annotation([Ljava.lang.String;@7ba28b34,[Ljava.lang.String;@6c614255,[Ljava.lang.String;@654a1209),Annotation([Ljava.lang.String;@61e640d2,[Ljava.lang.String;@53a9cd34,[Ledu.cmu.lti.nlp.amr.Entity;@30df3bd5))
AMR:
(w / we, condition, p / promise-01)

Decoded in 7,638 microseconds
Sentence: we shall take the issue to all international forums he promised

Spans:
Span 6-7:  all => all
Span 8-9:  forums => forum
Span 9-10:  he => he
Span 7-8:  international => international
Span 4-5:  issue => issue
Span 10-11:  promised => promise-01
Span 0-1:  we => we

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),promised,promise-01,false), Span(9,10,List(1),he,he,false), Span(8,9,List(2),forums,forum,false), Span(7,8,List(3),international,international,false), Span(6,7,List(4),all,all,false), Span(4,5,List(5),issue,issue,false), Span(0,1,List(6),we,we,false)),Map(2 -> forum, 5 -> issue, 1 -> he, 4 -> all, 6 -> we, 0 -> promise-01, 3 -> international),Map(w -> we, h -> he, p -> promise-01, a -> all, i2 -> issue, i -> international, f -> forum))),[Ljava.lang.String;@fd13604,Annotation([Ljava.lang.String;@703148b8,[Ljava.lang.String;@339d6193,[Ljava.lang.String;@2171145e),Annotation([Ljava.lang.String;@6f03879,[Ljava.lang.String;@50b937e,[Ledu.cmu.lti.nlp.amr.Dependency;@3b0037c8),Annotation([Ljava.lang.String;@b4e49bb,[Ljava.lang.String;@40ca99c9,[Ljava.lang.String;@35367c5a),Annotation([Ljava.lang.String;@c1e1401,[Ljava.lang.String;@ab353de,[Ledu.cmu.lti.nlp.amr.Entity;@347194f))
AMR:
(f / forum, mod, i / international)
(f / forum, quant, a / all)
(i2 / issue, name, w / we)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, i2 / issue)
(p / promise-01, ARG2, f / forum)

Decoded in 93,013 microseconds
Sentence: the citys social welfare department has promised the 13000 or more people who live on the dump loans to set up their own businesses

Spans:
Span 8-9:  13000 => 13000
Span 23-24:  businesses => business
Span 4-5:  department => department
Span 13-14:  live => live-01
Span 17-18:  loans => loan-01
Span 9-10:  or => or
Span 6-7:  promised => promise-01
Span 2-3:  social => society
Span 3-4:  welfare => welfare

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),businesses,business,false), Span(17,18,List(1),loans,loan-01,false), Span(13,14,List(2),live,live-01,false), Span(9,10,List(3),or,or,false), Span(8,9,List(4),13000,13000,false), Span(6,7,List(5),promised,promise-01,false), Span(4,5,List(6),department,department,false), Span(3,4,List(7),welfare,welfare,false), Span(2,3,List(8),social,society,false)),Map(2 -> live-01, 5 -> promise-01, 8 -> society, 7 -> welfare, 1 -> loan-01, 4 -> 13000, 6 -> department, 0 -> business, 3 -> or),Map(w -> welfare, b -> business, s -> society, d -> department, p -> promise-01, 1 -> 13000, l2 -> live-01, l -> loan-01, o -> or))),[Ljava.lang.String;@30ce9337,Annotation([Ljava.lang.String;@4a2318e9,[Ljava.lang.String;@46388f05,[Ljava.lang.String;@2b35b547),Annotation([Ljava.lang.String;@53105e7a,[Ljava.lang.String;@57aac630,[Ledu.cmu.lti.nlp.amr.Dependency;@cb9a647),Annotation([Ljava.lang.String;@705385d7,[Ljava.lang.String;@7b781fdd,[Ljava.lang.String;@b74257f),Annotation([Ljava.lang.String;@7649bab8,[Ljava.lang.String;@6281c2b3,[Ledu.cmu.lti.nlp.amr.Entity;@3515a84b))
AMR:
(d / department, mod, w / welfare)
(l / loan-01, ARG0, s / society)
(l2 / live-01, ARG0, d / department)
(l2 / live-01, ARG1, b / business)
(l2 / live-01, location, o / or)
(l2 / live-01, manner, l / loan-01)
(o / or, op, 1 / 13000)
(p / promise-01, ARG0, d / department)

Decoded in 61,255 microseconds
Sentence: mr ozals popularity has slumped since he first won office in 1983 when he promised an economic miracle

Spans:
Span 11-12:  1983 => (date-entity :year 1983)
Span 16-17:  economic => economy
Span 13-14:  he => he
Span 6-7:  he => he
Span 9-10:  office => office
Span 2-3:  popularity => popularity
Span 14-15:  promised => promise-01
Span 5-6:  since => since
Span 4-5:  slumped => slump-01
Span 8-9:  won => win-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),economic,economy,false), Span(14,15,List(1),promised,promise-01,false), Span(13,14,List(2),he,he,false), Span(11,12,List(4, 3),1983,(date-entity :year 1983),false), Span(9,10,List(5),office,office,false), Span(8,9,List(6),won,win-01,false), Span(6,7,List(7),he,he,false), Span(5,6,List(8),since,since,false), Span(4,5,List(9),slumped,slump-01,false), Span(2,3,List(10),popularity,popularity,false)),Map(2 -> he, 5 -> office, 8 -> since, 7 -> he, 1 -> promise-01, 4 -> 1983, 6 -> win-01, 9 -> slump-01, 0 -> economy, 10 -> popularity, 3 -> date-entity),Map(w -> win-01, e -> economy, h -> he, s2 -> slump-01, h2 -> he, p2 -> popularity, s -> since, d -> date-entity, 1 -> 1983, p -> promise-01, o -> office))),[Ljava.lang.String;@20dbef27,Annotation([Ljava.lang.String;@4731fa4b,[Ljava.lang.String;@22277671,[Ljava.lang.String;@4cd1063b),Annotation([Ljava.lang.String;@2ef032e3,[Ljava.lang.String;@1b9ced28,[Ledu.cmu.lti.nlp.amr.Dependency;@5b95eb41),Annotation([Ljava.lang.String;@4f882760,[Ljava.lang.String;@73d1386a,[Ljava.lang.String;@2ccef28d),Annotation([Ljava.lang.String;@46961df6,[Ljava.lang.String;@298925ae,[Ledu.cmu.lti.nlp.amr.Entity;@6b08d7cf))
AMR:
(d / date-entity, year, 1 / 1983)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, h2 / he)
(s / since, op, w / win-01)
(s2 / slump-01, ARG0, e / economy)
(s2 / slump-01, ARG1, p2 / popularity)
(s2 / slump-01, time, s / since)
(w / win-01, ARG0, h2 / he)
(w / win-01, ARG1, o / office)
(w / win-01, time, d / date-entity)

Decoded in 58,845 microseconds
Sentence: agassi had clearly been expecting to meet muster who would have been a much more predictable opponent than gomez but promised the lefthander and fourth seed a long hard afternoon

Spans:
Span 29-30:  afternoon => afternoon
Span 23-24:  and => and
Span 19-20:  but => contrast-01
Span 2-3:  clearly => clear
Span 4-5:  expecting => expect-01
Span 24-25:  fourth => fourth
Span 28-29:  hard => hard
Span 13-14:  much => much
Span 7-8:  muster => muster-01
Span 16-17:  opponent => (person :ARG0-of oppose-01)
Span 20-21:  promised => promise-01
Span 25-26:  seed => seed

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),afternoon,afternoon,false), Span(28,29,List(1),hard,hard,false), Span(25,26,List(2),seed,seed,false), Span(24,25,List(3),fourth,fourth,false), Span(23,24,List(4),and,and,false), Span(20,21,List(5),promised,promise-01,false), Span(19,20,List(6),but,contrast-01,false), Span(16,17,List(8, 7),opponent,(person :ARG0-of oppose-01),false), Span(13,14,List(9),much,much,false), Span(7,8,List(10),muster,muster-01,false), Span(4,5,List(11),expecting,expect-01,false), Span(2,3,List(12),clearly,clear,false)),Map(2 -> seed, 5 -> promise-01, 12 -> clear, 8 -> oppose-01, 7 -> person, 1 -> hard, 4 -> and, 11 -> expect-01, 6 -> contrast-01, 0 -> afternoon, 9 -> much, 3 -> fourth, 10 -> muster-01),Map(e -> expect-01, h -> hard, m2 -> muster-01, p2 -> person, s -> seed, m -> much, p -> promise-01, a -> afternoon, a2 -> and, c -> contrast-01, f -> fourth, o -> oppose-01, c2 -> clear))),[Ljava.lang.String;@11908def,Annotation([Ljava.lang.String;@29564eeb,[Ljava.lang.String;@61573b80,[Ljava.lang.String;@2603826d),Annotation([Ljava.lang.String;@3067d59a,[Ljava.lang.String;@70f88a49,[Ledu.cmu.lti.nlp.amr.Dependency;@4d3ef890),Annotation([Ljava.lang.String;@6130dd8e,[Ljava.lang.String;@4f21c77b,[Ljava.lang.String;@32af84d3),Annotation([Ljava.lang.String;@213952a4,[Ljava.lang.String;@3a609e06,[Ledu.cmu.lti.nlp.amr.Entity;@1d26b9db))
AMR:
(a / afternoon, mod, h / hard)
(a2 / and, op, p / promise-01)
(a2 / and, op, s / seed)
(c / contrast-01, ARG1, e / expect-01)
(c / contrast-01, ARG2, p / promise-01)
(e / expect-01, ARG1, m2 / muster-01)
(e / expect-01, mod, c2 / clear)
(m2 / muster-01, ARG0, m / much)
(m2 / muster-01, ARG1, h / hard)
(o / oppose-01, ARG0, p2 / person)
(p / promise-01, ARG1, p2 / person)
(s / seed, mod, f / fourth)

Decoded in 134,234 microseconds
Sentence: neville green grown plumper and bluechinned called early as he had promised

Spans:
Span 4-5:  and => and
Span 7-8:  early => early
Span 1-2:  green => green
Span 2-3:  grown => grow-03
Span 9-10:  he => he
Span 11-12:  promised => promise-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promised,promise-01,false), Span(9,10,List(1),he,he,false), Span(7,8,List(2),early,early,false), Span(4,5,List(3),and,and,false), Span(2,3,List(4),grown,grow-03,false), Span(1,2,List(5),green,green,false)),Map(2 -> early, 5 -> green, 1 -> he, 4 -> grow-03, 0 -> promise-01, 3 -> and),Map(e -> early, h -> he, g2 -> green, g -> grow-03, p -> promise-01, a -> and))),[Ljava.lang.String;@5973e7d0,Annotation([Ljava.lang.String;@48783691,[Ljava.lang.String;@4c468ec2,[Ljava.lang.String;@2c4689ad),Annotation([Ljava.lang.String;@4af8d390,[Ljava.lang.String;@1609b964,[Ledu.cmu.lti.nlp.amr.Dependency;@586a5f89),Annotation([Ljava.lang.String;@2fa648b8,[Ljava.lang.String;@4df04078,[Ljava.lang.String;@5818ae41),Annotation([Ljava.lang.String;@3c585a96,[Ljava.lang.String;@4ca34ccd,[Ledu.cmu.lti.nlp.amr.Entity;@75074e09))
AMR:
(a / and, op, e / early)
(g / grow-03, ARG1, a / and)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, g2 / green)
(p / promise-01, ARG2, a / and)

Decoded in 66,131 microseconds
Sentence: the bush administration promised that heads would roll

Spans:
Span 2-3:  administration => administrate-01
Span 1-2:  bush => bush-league
Span 3-4:  promised => promise-01
Span 7-8:  roll => roll

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),roll,roll,false), Span(3,4,List(1),promised,promise-01,false), Span(2,3,List(2),administration,administrate-01,false), Span(1,2,List(3),bush,bush-league,false)),Map(2 -> administrate-01, 1 -> promise-01, 0 -> roll, 3 -> bush-league),Map(b -> bush-league, p -> promise-01, a -> administrate-01, r -> roll))),[Ljava.lang.String;@32946ce5,Annotation([Ljava.lang.String;@2e794854,[Ljava.lang.String;@1c7b9aa2,[Ljava.lang.String;@76e51049),Annotation([Ljava.lang.String;@3890659a,[Ljava.lang.String;@ffe7e79,[Ledu.cmu.lti.nlp.amr.Dependency;@d214223),Annotation([Ljava.lang.String;@27d0e91,[Ljava.lang.String;@604752dd,[Ljava.lang.String;@6a915c8c),Annotation([Ljava.lang.String;@6d5321fc,[Ljava.lang.String;@6cdc5f76,[Ledu.cmu.lti.nlp.amr.Entity;@77ff73cf))
AMR:
(a / administrate-01, mod, b / bush-league)
(p / promise-01, ARG0, a / administrate-01)
(p / promise-01, ARG1, r / roll)

Decoded in 38,291 microseconds
Sentence: the smiths never forgot the debt they owed to john peel and promised to repay some day

Spans:
Span 11-12:  and => and
Span 16-17:  day => day
Span 5-6:  debt => debt
Span 3-4:  forgot => forget-01
Span 7-8:  owed => owe-01
Span 12-13:  promised => promise-01
Span 14-15:  repay => repay-01
Span 15-16:  some => some
Span 6-7:  they => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),day,day,false), Span(15,16,List(1),some,some,false), Span(14,15,List(2),repay,repay-01,false), Span(12,13,List(3),promised,promise-01,false), Span(11,12,List(4),and,and,false), Span(7,8,List(5),owed,owe-01,false), Span(6,7,List(6),they,they,false), Span(5,6,List(7),debt,debt,false), Span(3,4,List(8),forgot,forget-01,false)),Map(2 -> repay-01, 5 -> owe-01, 8 -> forget-01, 7 -> debt, 1 -> some, 4 -> and, 6 -> they, 0 -> day, 3 -> promise-01),Map(t -> they, s -> some, d -> day, p -> promise-01, a -> and, d2 -> debt, r -> repay-01, f -> forget-01, o -> owe-01))),[Ljava.lang.String;@240c5895,Annotation([Ljava.lang.String;@268bb0b0,[Ljava.lang.String;@1cfd0695,[Ljava.lang.String;@27bb2f11),Annotation([Ljava.lang.String;@720f1977,[Ljava.lang.String;@3d510e21,[Ledu.cmu.lti.nlp.amr.Dependency;@1476b7fa),Annotation([Ljava.lang.String;@7e288894,[Ljava.lang.String;@171eed41,[Ljava.lang.String;@6f6a5242),Annotation([Ljava.lang.String;@2d3ea433,[Ljava.lang.String;@6b8e2779,[Ledu.cmu.lti.nlp.amr.Entity;@41c1b019))
AMR:
(a / and, op, f / forget-01)
(a / and, op, p / promise-01)
(d / day, quant, s / some)
(f / forget-01, ARG1, d2 / debt)
(o / owe-01, ARG0, t / they)
(o / owe-01, ARG1, d2 / debt)
(p / promise-01, ARG2, r / repay-01)
(r / repay-01, time, d / day)

Decoded in 31,622 microseconds
Sentence: six months and we can leave all this behind us i promise you

Spans:
Span 6-7:  all => all
Span 2-3:  and => and
Span 8-9:  behind => behind
Span 4-5:  can => possible
Span 10-11:  i => i
Span 5-6:  leave => leave-01
Span 1-2:  months => (temporal-quantity :unit month)
Span 11-12:  promise => promise-01
Span 0-1:  six => 6
Span 7-8:  this => this
Span 3-4:  we => we
Span 12-13:  you => you

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),you,you,false), Span(11,12,List(1),promise,promise-01,false), Span(10,11,List(2),i,i,false), Span(8,9,List(3),behind,behind,false), Span(7,8,List(4),this,this,false), Span(6,7,List(5),all,all,false), Span(5,6,List(6),leave,leave-01,false), Span(4,5,List(7),can,possible,false), Span(3,4,List(8),we,we,false), Span(2,3,List(9),and,and,false), Span(1,2,List(11, 10),months,(temporal-quantity :unit month),false), Span(0,1,List(12),six,6,false)),Map(2 -> i, 5 -> all, 12 -> 6, 8 -> we, 7 -> possible, 1 -> promise-01, 4 -> this, 11 -> month, 6 -> leave-01, 0 -> you, 9 -> and, 3 -> behind, 10 -> temporal-quantity),Map(w -> we, b -> behind, t -> this, p2 -> possible, m -> month, y -> you, p -> promise-01, a -> all, t2 -> temporal-quantity, i -> i, a2 -> and, 6 -> 6, l -> leave-01))),[Ljava.lang.String;@16c8b5a6,Annotation([Ljava.lang.String;@530db0f9,[Ljava.lang.String;@27ddd608,[Ljava.lang.String;@550ebbaa),Annotation([Ljava.lang.String;@3a42c186,[Ljava.lang.String;@74af624b,[Ledu.cmu.lti.nlp.amr.Dependency;@265e65c6),Annotation([Ljava.lang.String;@7f6bbdd7,[Ljava.lang.String;@7a7caf9b,[Ljava.lang.String;@fed27f0),Annotation([Ljava.lang.String;@1ad905bb,[Ljava.lang.String;@1e0745c2,[Ledu.cmu.lti.nlp.amr.Entity;@6f74d2f4))
AMR:
(a2 / and, op, l / leave-01)
(b / behind, mod, t / this)
(l / leave-01, ARG1, w / we)
(l / leave-01, location, b / behind)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, y / you)
(p / promise-01, ARG2, b / behind)
(p2 / possible, domain, l / leave-01)
(t / this, mod, a / all)
(t2 / temporal-quantity, mod, w / we)
(t2 / temporal-quantity, quant, 6 / 6)
(t2 / temporal-quantity, unit, m / month)

Decoded in 233,349 microseconds
Sentence: he came back in a trice with what promised to be a ph

Spans:
Span 2-3:  back => back
Span 0-1:  he => he
Span 8-9:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promised,promise-01,false), Span(2,3,List(1),back,back,false), Span(0,1,List(2),he,he,false)),Map(2 -> he, 1 -> back, 0 -> promise-01),Map(h -> he, b -> back, p -> promise-01))),[Ljava.lang.String;@5ec5ca56,Annotation([Ljava.lang.String;@b6704b6,[Ljava.lang.String;@18664e93,[Ljava.lang.String;@64b0a168),Annotation([Ljava.lang.String;@834e67d,[Ljava.lang.String;@49081cc0,[Ledu.cmu.lti.nlp.amr.Dependency;@3397a6b5),Annotation([Ljava.lang.String;@2941cf89,[Ljava.lang.String;@1fa04088,[Ljava.lang.String;@51ecb0f0),Annotation([Ljava.lang.String;@a548695,[Ljava.lang.String;@334fa57f,[Ledu.cmu.lti.nlp.amr.Entity;@31fa4f2a))
AMR:
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, b / back)

Decoded in 11,722 microseconds
Sentence: to take some of the sting out of what was unmistakably a defeat for traditional nationalism provisions were included promising equality of esteem and a collective recognition of the legitimacy of nationalism

Spans:
Span 23-24:  and => and
Span 25-26:  collective => collective
Span 12-13:  defeat => defeat-01
Span 20-21:  equality => equal-01
Span 18-19:  included => include-01
Span 29-30:  legitimacy => legitimacy
Span 31-32:  nationalism => nationalism
Span 15-16:  nationalism => nationalism
Span 19-20:  promising => promise-01
Span 16-17:  provisions => provision
Span 26-27:  recognition => recognize-01
Span 2-3:  some => some
Span 14-15:  traditional => tradition

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),nationalism,nationalism,false), Span(29,30,List(1),legitimacy,legitimacy,false), Span(26,27,List(2),recognition,recognize-01,false), Span(25,26,List(3),collective,collective,false), Span(23,24,List(4),and,and,false), Span(20,21,List(5),equality,equal-01,false), Span(19,20,List(6),promising,promise-01,false), Span(18,19,List(7),included,include-01,false), Span(16,17,List(8),provisions,provision,false), Span(15,16,List(9),nationalism,nationalism,false), Span(14,15,List(10),traditional,tradition,false), Span(12,13,List(11),defeat,defeat-01,false), Span(2,3,List(12),some,some,false)),Map(2 -> recognize-01, 5 -> equal-01, 12 -> some, 8 -> provision, 7 -> include-01, 1 -> legitimacy, 4 -> and, 11 -> defeat-01, 6 -> promise-01, 0 -> nationalism, 9 -> nationalism, 3 -> collective, 10 -> tradition),Map(e -> equal-01, n -> nationalism, t -> tradition, p2 -> provision, s -> some, d -> defeat-01, p -> promise-01, a -> and, r -> recognize-01, i -> include-01, c -> collective, l -> legitimacy, n2 -> nationalism))),[Ljava.lang.String;@28636808,Annotation([Ljava.lang.String;@1642f9ef,[Ljava.lang.String;@726c554,[Ljava.lang.String;@2651177),Annotation([Ljava.lang.String;@395d9cdb,[Ljava.lang.String;@30e50b49,[Ledu.cmu.lti.nlp.amr.Dependency;@d47feb3),Annotation([Ljava.lang.String;@71a2a094,[Ljava.lang.String;@6bdc8ed4,[Ljava.lang.String;@5d25379e),Annotation([Ljava.lang.String;@366695d8,[Ljava.lang.String;@8f7b3cf,[Ledu.cmu.lti.nlp.amr.Entity;@3e3ddfa2))
AMR:
(a / and, op, r / recognize-01)
(d / defeat-01, ARG1, p2 / provision)
(i / include-01, ARG1, p / promise-01)
(i / include-01, location, a / and)
(l / legitimacy, mod, n / nationalism)
(p / promise-01, ARG1, d / defeat-01)
(p / promise-01, ARG2, e / equal-01)
(p2 / provision, mod, n2 / nationalism)
(p2 / provision, mod, t / tradition)
(r / recognize-01, ARG0, s / some)
(r / recognize-01, ARG1, l / legitimacy)
(r / recognize-01, mod, c / collective)

Decoded in 314,206 microseconds
Sentence: hadnt there been a family only recently who had come across a stradivarius cello in their cellar and sold it for a fortune my father should clear up our attic as he kept promising one never knew what one might find

Spans:
Span 10-11:  across => across
Span 17-18:  and => and
Span 26-27:  clear => clear
Span 4-5:  family => family
Span 24-25:  father => (have-rel-role-91 :ARG2 father)
Span 22-23:  fortune => fortune
Span 31-32:  he => he
Span 19-20:  it => it
Span 32-33:  kept => keep-01
Span 36-37:  knew => know-01
Span 5-6:  only => only
Span 33-34:  promising => promise-01
Span 6-7:  recently => recent
Span 25-26:  should => recommend-01
Span 18-19:  sold => sell-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),knew,know-01,false), Span(33,34,List(1),promising,promise-01,false), Span(32,33,List(2),kept,keep-01,false), Span(31,32,List(3),he,he,false), Span(26,27,List(4),clear,clear,false), Span(25,26,List(5),should,recommend-01,false), Span(24,25,List(7, 6),father,(have-rel-role-91 :ARG2 father),false), Span(22,23,List(8),fortune,fortune,false), Span(19,20,List(9),it,it,false), Span(18,19,List(10),sold,sell-01,false), Span(17,18,List(11),and,and,false), Span(10,11,List(12),across,across,false), Span(6,7,List(13),recently,recent,false), Span(5,6,List(14),only,only,false), Span(4,5,List(15),family,family,false)),Map(2 -> keep-01, 5 -> recommend-01, 12 -> across, 15 -> family, 8 -> fortune, 7 -> father, 1 -> promise-01, 4 -> clear, 11 -> and, 14 -> only, 6 -> have-rel-role-91, 0 -> know-01, 9 -> it, 3 -> he, 10 -> sell-01, 13 -> recent),Map(k2 -> keep-01, h -> he, h2 -> have-rel-role-91, k -> know-01, s -> sell-01, r2 -> recent, p -> promise-01, a -> and, f3 -> family, r -> recommend-01, i -> it, a2 -> across, c -> clear, f2 -> fortune, f -> father, o -> only))),[Ljava.lang.String;@5025249a,Annotation([Ljava.lang.String;@36862391,[Ljava.lang.String;@2089208e,[Ljava.lang.String;@ab85b52),Annotation([Ljava.lang.String;@4d7369fd,[Ljava.lang.String;@543388c4,[Ledu.cmu.lti.nlp.amr.Dependency;@358270c),Annotation([Ljava.lang.String;@106b868b,[Ljava.lang.String;@34e1819,[Ljava.lang.String;@7c101300),Annotation([Ljava.lang.String;@34fa4a2,[Ljava.lang.String;@61c18960,[Ledu.cmu.lti.nlp.amr.Entity;@69222fc3))
AMR:
(a / and, op, s / sell-01)
(h2 / have-rel-role-91, ARG0, r2 / recent)
(h2 / have-rel-role-91, ARG1, f2 / fortune)
(h2 / have-rel-role-91, ARG2, f / father)
(k / know-01, ARG0, h / he)
(k2 / keep-01, ARG0, h / he)
(k2 / keep-01, ARG1, a2 / across)
(p / promise-01, ARG0, h / he)
(r / recommend-01, ARG0, f3 / family)
(r / recommend-01, ARG1, c / clear)
(r / recommend-01, ARG2, h2 / have-rel-role-91)
(r / recommend-01, condition, k2 / keep-01)
(r2 / recent, mod, o / only)
(s / sell-01, ARG1, i / it)
(s / sell-01, time, f2 / fortune)

Decoded in 344,936 microseconds
Sentence: benns adviser ambrose mendy said yesterday promoter bob arum has promised nigel a fight with the winner of the duransugar ray leonard fight in december

Spans:
Span 1-2:  adviser => (person :ARG0-of advise-01)
Span 24-25:  december => (date-entity :month 12)
Span 22-23:  fight => fight-01
Span 13-14:  fight => fight-01
Span 10-11:  promised => promise-01
Span 4-5:  said => say-01
Span 5-6:  yesterday => yesterday

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),december,(date-entity :month 12),false), Span(22,23,List(2),fight,fight-01,false), Span(13,14,List(3),fight,fight-01,false), Span(10,11,List(4),promised,promise-01,false), Span(5,6,List(5),yesterday,yesterday,false), Span(4,5,List(6),said,say-01,false), Span(1,2,List(8, 7),adviser,(person :ARG0-of advise-01),false)),Map(2 -> fight-01, 5 -> yesterday, 8 -> advise-01, 7 -> person, 1 -> 12, 4 -> promise-01, 6 -> say-01, 0 -> date-entity, 3 -> fight-01),Map(p2 -> person, s -> say-01, d -> date-entity, y -> yesterday, p -> promise-01, 1 -> 12, a -> advise-01, f2 -> fight-01, f -> fight-01))),[Ljava.lang.String;@436de121,Annotation([Ljava.lang.String;@62d7601c,[Ljava.lang.String;@29e700f6,[Ljava.lang.String;@7cf02bf7),Annotation([Ljava.lang.String;@7bd6a535,[Ljava.lang.String;@48f87a17,[Ledu.cmu.lti.nlp.amr.Dependency;@3117a16e),Annotation([Ljava.lang.String;@66755f0,[Ljava.lang.String;@6a3b02d8,[Ljava.lang.String;@4837e964),Annotation([Ljava.lang.String;@4ebbc946,[Ljava.lang.String;@a9b3b0c,[Ledu.cmu.lti.nlp.amr.Entity;@55419644))
AMR:
(a / advise-01, ARG0, p2 / person)
(d / date-entity, month, 1 / 12)
(f / fight-01, ARG1, d / date-entity)
(f / fight-01, concession, p / promise-01)
(p / promise-01, ARG1, f2 / fight-01)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, p / promise-01)
(s / say-01, time, y / yesterday)

Decoded in 80,781 microseconds
Sentence: it promises to be a fun event as well as having a serious side

Spans:
Span 6-7:  event => event
Span 5-6:  fun => fun
Span 0-1:  it => it
Span 1-2:  promises => promise-01
Span 12-13:  serious => serious
Span 13-14:  side => side
Span 8-9:  well => well

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),side,side,false), Span(12,13,List(1),serious,serious,false), Span(8,9,List(2),well,well,false), Span(6,7,List(3),event,event,false), Span(5,6,List(4),fun,fun,false), Span(1,2,List(5),promises,promise-01,false), Span(0,1,List(6),it,it,false)),Map(2 -> well, 5 -> promise-01, 1 -> serious, 4 -> fun, 6 -> it, 0 -> side, 3 -> event),Map(e -> event, w -> well, s2 -> serious, s -> side, p -> promise-01, i -> it, f -> fun))),[Ljava.lang.String;@44f07616,Annotation([Ljava.lang.String;@6d8c1b6,[Ljava.lang.String;@95973d,[Ljava.lang.String;@5cfc2617),Annotation([Ljava.lang.String;@2e28dfb2,[Ljava.lang.String;@7d7636ca,[Ledu.cmu.lti.nlp.amr.Dependency;@5c07481f),Annotation([Ljava.lang.String;@62101a6c,[Ljava.lang.String;@f36dac0,[Ljava.lang.String;@5a537b0d),Annotation([Ljava.lang.String;@1eb3c0cf,[Ljava.lang.String;@2b3765c8,[Ledu.cmu.lti.nlp.amr.Entity;@41fb43a2))
AMR:
(e / event, mod, f / fun)
(i / it, mod, s2 / serious)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, e / event)
(p / promise-01, ARG2, w / well)
(s / side, mod, s2 / serious)

Decoded in 62,762 microseconds
Sentence: they were later released after their commanders promised there would be no further incidents said duty officer paulino cardoso

Spans:
Span 4-5:  after => after
Span 6-7:  commanders => (person :ARG0-of command-02)
Span 15-16:  duty => duty
Span 12-13:  further => further
Span 13-14:  incidents => incident
Span 2-3:  later => late
Span 11-12:  no => -
Span 16-17:  officer => officer
Span 7-8:  promised => promise-01
Span 3-4:  released => release-01
Span 14-15:  said => say-01
Span 0-1:  they => they

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),officer,officer,false), Span(15,16,List(1),duty,duty,false), Span(14,15,List(2),said,say-01,false), Span(13,14,List(3),incidents,incident,false), Span(12,13,List(4),further,further,false), Span(11,12,List(5),no,-,false), Span(7,8,List(6),promised,promise-01,false), Span(6,7,List(8, 7),commanders,(person :ARG0-of command-02),false), Span(4,5,List(9),after,after,false), Span(3,4,List(10),released,release-01,false), Span(2,3,List(11),later,late,false), Span(0,1,List(12),they,they,false)),Map(2 -> say-01, 5 -> -, 12 -> they, 8 -> command-02, 7 -> person, 1 -> duty, 4 -> further, 11 -> late, 6 -> promise-01, 0 -> officer, 9 -> after, 3 -> incident, 10 -> release-01),Map(t -> they, p2 -> person, s -> say-01, d -> duty, p -> promise-01, a -> after, i -> incident, r -> release-01, c -> command-02, - -> -, l -> late, f -> further, o -> officer))),[Ljava.lang.String;@57156285,Annotation([Ljava.lang.String;@3cf7366d,[Ljava.lang.String;@a164d60,[Ljava.lang.String;@3e31decc),Annotation([Ljava.lang.String;@3c1a42fa,[Ljava.lang.String;@602349e9,[Ledu.cmu.lti.nlp.amr.Dependency;@2cc9914e),Annotation([Ljava.lang.String;@6562aeda,[Ljava.lang.String;@31c59e36,[Ljava.lang.String;@251604c1),Annotation([Ljava.lang.String;@48922dec,[Ljava.lang.String;@7505062c,[Ledu.cmu.lti.nlp.amr.Entity;@1cd86eb9))
AMR:
(a / after, time, p / promise-01)
(c / command-02, ARG0, p2 / person)
(i / incident, mod, f / further)
(i / incident, polarity, - / -)
(o / officer, mod, d / duty)
(p / promise-01, ARG0, p2 / person)
(p / promise-01, ARG1, i / incident)
(r / release-01, ARG1, t / they)
(r / release-01, time, a / after)
(r / release-01, time, l / late)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, d / duty)

Decoded in 216,278 microseconds
Sentence: the chosen few will either be given full british passports or promised copperbottomed guarantees of a safe haven in britain

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 19-20:  britain => (country :name (name :op "Britain"))
Span 1-2:  chosen => choose-01
Span 4-5:  either => either
Span 2-3:  few => few
Span 7-8:  full => full
Span 6-7:  given => give-01
Span 13-14:  guarantees => guarantee-01
Span 17-18:  haven => haven
Span 10-11:  or => or
Span 9-10:  passports => passport
Span 11-12:  promised => promise-01
Span 16-17:  safe => safe-41

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(2, 1, 0),britain,(country :name (name :op "Britain")),false), Span(17,18,List(3),haven,haven,false), Span(16,17,List(4),safe,safe-41,false), Span(13,14,List(5),guarantees,guarantee-01,false), Span(11,12,List(6),promised,promise-01,false), Span(10,11,List(7),or,or,false), Span(9,10,List(8),passports,passport,false), Span(7,8,List(9),full,full,false), Span(6,7,List(10),given,give-01,false), Span(4,5,List(11),either,either,false), Span(2,3,List(12),few,few,false), Span(1,2,List(13),chosen,choose-01,false)),Map(2 -> "Britain", 5 -> guarantee-01, 12 -> few, 8 -> passport, 7 -> or, 1 -> name, 4 -> safe-41, 11 -> either, 6 -> promise-01, 0 -> country, 9 -> full, 3 -> haven, 10 -> give-01, 13 -> choose-01),Map(e -> either, n -> name, h -> haven, p2 -> passport, s -> safe-41, g2 -> give-01, g -> guarantee-01, p -> promise-01, c -> country, f2 -> few, f -> full, o -> or, c2 -> choose-01))),[Ljava.lang.String;@53477b21,Annotation([Ljava.lang.String;@79e4de3d,[Ljava.lang.String;@20bab550,[Ljava.lang.String;@41d5a7f9),Annotation([Ljava.lang.String;@3206ee33,[Ljava.lang.String;@65006fed,[Ledu.cmu.lti.nlp.amr.Dependency;@7fb46468),Annotation([Ljava.lang.String;@1c2c2958,[Ljava.lang.String;@174e5edb,[Ljava.lang.String;@1a3587d1),Annotation([Ljava.lang.String;@3067b7c8,[Ljava.lang.String;@6952c44b,[Ledu.cmu.lti.nlp.amr.Entity;@38d54df2))
AMR:
(c / country, name, n / name)
(c2 / choose-01, ARG1, f2 / few)
(g / guarantee-01, ARG0, h / haven)
(g2 / give-01, ARG0, f2 / few)
(g2 / give-01, ARG1, p2 / passport)
(g2 / give-01, mod, e / either)
(n / name, op, "Britain")
(o / or, duration, c / country)
(o / or, op, g2 / give-01)
(o / or, op, p / promise-01)
(p / promise-01, ARG1, g / guarantee-01)
(p2 / passport, mod, f / full)
(s / safe-41, ARG1, h / haven)

Decoded in 200,359 microseconds
Sentence: as it happens there is a substantial engine refurbishment contract in the offing which although tenders have not yet been invited promises to bring someone several tens of millions of pounds in revenue over a period of a few years

Spans:
Span 23-24:  bring => bring-01
Span 9-10:  contract => contract-02
Span 7-8:  engine => engine
Span 38-39:  few => few
Span 2-3:  happens => happen-01
Span 20-21:  invited => invite-01
Span 1-2:  it => it
Span 35-36:  period => period
Span 21-22:  promises => promise-01
Span 32-33:  revenue => revenue
Span 25-26:  several => several
Span 24-25:  someone => someone
Span 6-7:  substantial => substantial
Span 39-40:  years => (temporal-quantity :unit year)
Span 18-19:  yet => yet

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(1, 0),years,(temporal-quantity :unit year),false), Span(38,39,List(2),few,few,false), Span(35,36,List(3),period,period,false), Span(32,33,List(4),revenue,revenue,false), Span(25,26,List(5),several,several,false), Span(24,25,List(6),someone,someone,false), Span(23,24,List(7),bring,bring-01,false), Span(21,22,List(8),promises,promise-01,false), Span(20,21,List(9),invited,invite-01,false), Span(18,19,List(10),yet,yet,false), Span(9,10,List(11),contract,contract-02,false), Span(7,8,List(12),engine,engine,false), Span(6,7,List(13),substantial,substantial,false), Span(2,3,List(14),happens,happen-01,false), Span(1,2,List(15),it,it,false)),Map(2 -> few, 5 -> several, 12 -> engine, 15 -> it, 8 -> promise-01, 7 -> bring-01, 1 -> year, 4 -> revenue, 11 -> contract-02, 14 -> happen-01, 6 -> someone, 0 -> temporal-quantity, 9 -> invite-01, 3 -> period, 10 -> yet, 13 -> substantial),Map(e -> engine, h -> happen-01, s2 -> someone, t -> temporal-quantity, b -> bring-01, p2 -> promise-01, s -> several, y -> year, p -> period, i2 -> it, r -> revenue, i -> invite-01, s3 -> substantial, c -> contract-02, f -> few, y2 -> yet))),[Ljava.lang.String;@3bf06804,Annotation([Ljava.lang.String;@243cfd5a,[Ljava.lang.String;@201d324c,[Ljava.lang.String;@5cd12c0c),Annotation([Ljava.lang.String;@28a2f76f,[Ljava.lang.String;@6322ad40,[Ledu.cmu.lti.nlp.amr.Dependency;@799c7798),Annotation([Ljava.lang.String;@f6fda88,[Ljava.lang.String;@78741ea2,[Ljava.lang.String;@f875b76),Annotation([Ljava.lang.String;@7f85a7f0,[Ljava.lang.String;@1fd4bef8,[Ledu.cmu.lti.nlp.amr.Entity;@48459c1b))
AMR:
(b / bring-01, ARG0, i2 / it)
(b / bring-01, ARG1, c / contract-02)
(b / bring-01, duration, p / period)
(c / contract-02, ARG0, r / revenue)
(c / contract-02, ARG1, e / engine)
(c / contract-02, mod, s3 / substantial)
(f / few, op, t / temporal-quantity)
(h / happen-01, ARG1, i2 / it)
(i / invite-01, mod, y2 / yet)
(p2 / promise-01, ARG0, i / invite-01)
(p2 / promise-01, ARG1, s2 / someone)
(p2 / promise-01, ARG2, b / bring-01)
(s / several, condition, b / bring-01)
(t / temporal-quantity, mod, r / revenue)
(t / temporal-quantity, unit, y / year)

Decoded in 341,366 microseconds
Sentence: not long after angela came to live there tales of the unhappy trio began to trickle out and speculation was rife indeed some locals even promising to steal over the high wall into the kitchen garden to get a gawk through the drawing room window

Spans:
Span 2-3:  after => after
Span 17-18:  and => and
Span 13-14:  began => begin-01
Span 42-43:  drawing => draw-02
Span 35-36:  garden => garden
Span 30-31:  high => high
Span 21-22:  indeed => indeed
Span 6-7:  live => live-01
Span 23-24:  locals => local
Span 25-26:  promising => promise-01
Span 20-21:  rife => rife
Span 43-44:  room => room
Span 22-23:  some => some
Span 18-19:  speculation => speculate-01
Span 27-28:  steal => steal-01
Span 12-13:  trio => trio
Span 11-12:  unhappy => (happy :polarity -)
Span 31-32:  wall => wall
Span 44-45:  window => window

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),window,window,false), Span(43,44,List(1),room,room,false), Span(42,43,List(2),drawing,draw-02,false), Span(35,36,List(3),garden,garden,false), Span(31,32,List(4),wall,wall,false), Span(30,31,List(5),high,high,false), Span(27,28,List(6),steal,steal-01,false), Span(25,26,List(7),promising,promise-01,false), Span(23,24,List(8),locals,local,false), Span(22,23,List(9),some,some,false), Span(21,22,List(10),indeed,indeed,false), Span(20,21,List(11),rife,rife,false), Span(18,19,List(12),speculation,speculate-01,false), Span(17,18,List(13),and,and,false), Span(13,14,List(14),began,begin-01,false), Span(12,13,List(15),trio,trio,false), Span(11,12,List(17, 16),unhappy,(happy :polarity -),false), Span(6,7,List(18),live,live-01,false), Span(2,3,List(19),after,after,false)),Map(2 -> draw-02, 5 -> high, 12 -> speculate-01, 15 -> trio, 8 -> local, 18 -> live-01, 7 -> promise-01, 17 -> -, 1 -> room, 4 -> wall, 11 -> rife, 14 -> begin-01, 6 -> steal-01, 0 -> window, 9 -> some, 16 -> happy, 19 -> after, 3 -> garden, 10 -> indeed, 13 -> and),Map(w -> window, h -> high, h2 -> happy, s2 -> some, t -> trio, b -> begin-01, s -> steal-01, d -> draw-02, g -> garden, p -> promise-01, r2 -> rife, a -> and, l2 -> live-01, w2 -> wall, a2 -> after, r -> room, i -> indeed, s3 -> speculate-01, l -> local))),[Ljava.lang.String;@520bd5ae,Annotation([Ljava.lang.String;@6f9bc97,[Ljava.lang.String;@75cc6114,[Ljava.lang.String;@3cf9a477),Annotation([Ljava.lang.String;@299c9fe7,[Ljava.lang.String;@69c60c08,[Ledu.cmu.lti.nlp.amr.Dependency;@49401778),Annotation([Ljava.lang.String;@ec4ecda,[Ljava.lang.String;@2299e3c9,[Ljava.lang.String;@2539b2de),Annotation([Ljava.lang.String;@6f0e1fe9,[Ljava.lang.String;@85132f5,[Ledu.cmu.lti.nlp.amr.Entity;@ae87717))
AMR:
(a / and, op, b / begin-01)
(a / and, op, r2 / rife)
(b / begin-01, ARG1, t / trio)
(d / draw-02, ARG0, i / indeed)
(d / draw-02, ARG1, w / window)
(d / draw-02, ARG2, g / garden)
(h2 / happy, polarity, -)
(l2 / live-01, ARG0, a / and)
(l2 / live-01, ARG1, a2 / after)
(p / promise-01, ARG0, r2 / rife)
(p / promise-01, ARG1, s2 / some)
(p / promise-01, ARG2, s / steal-01)
(r2 / rife, domain, s3 / speculate-01)
(s / steal-01, ARG0, l / local)
(s / steal-01, ARG1, w2 / wall)
(s3 / speculate-01, ARG1, h / high)
(t / trio, mod, h2 / happy)
(w / window, mod, r / room)
(w2 / wall, mod, g / garden)

Decoded in 361,875 microseconds
Sentence: we knew that despite what they promised we wouldnt get any real control comments gilbert hernandez

Spans:
Span 10-11:  any => any
Span 13-14:  comments => comment-01
Span 12-13:  control => control-01
Span 1-2:  knew => know-01
Span 6-7:  promised => promise-01
Span 11-12:  real => real
Span 5-6:  they => they
Span 7-8:  we => we
Span 0-1:  we => we

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),comments,comment-01,false), Span(12,13,List(1),control,control-01,false), Span(11,12,List(2),real,real,false), Span(10,11,List(3),any,any,false), Span(7,8,List(4),we,we,false), Span(6,7,List(5),promised,promise-01,false), Span(5,6,List(6),they,they,false), Span(1,2,List(7),knew,know-01,false), Span(0,1,List(8),we,we,false)),Map(2 -> real, 5 -> promise-01, 8 -> we, 7 -> know-01, 1 -> control-01, 4 -> we, 6 -> they, 0 -> comment-01, 3 -> any),Map(w -> we, k -> know-01, t -> they, p -> promise-01, a -> any, w2 -> we, r -> real, c -> comment-01, c2 -> control-01))),[Ljava.lang.String;@23e28c99,Annotation([Ljava.lang.String;@6e7ca336,[Ljava.lang.String;@38bf66e5,[Ljava.lang.String;@1dfc617e),Annotation([Ljava.lang.String;@2464a693,[Ljava.lang.String;@4bf40f8f,[Ledu.cmu.lti.nlp.amr.Dependency;@4299c3e),Annotation([Ljava.lang.String;@47d0ac94,[Ljava.lang.String;@54f24d61,[Ljava.lang.String;@6fb646d8),Annotation([Ljava.lang.String;@27e54834,[Ljava.lang.String;@3de76262,[Ledu.cmu.lti.nlp.amr.Entity;@21ec2fae))
AMR:
(c / comment-01, ARG1, c2 / control-01)
(c / comment-01, mod, a / any)
(c2 / control-01, ARG1, w / we)
(c2 / control-01, mod, r / real)
(k / know-01, ARG0, w2 / we)
(k / know-01, ARG1, c / comment-01)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, w2 / we)

Decoded in 51,122 microseconds
Sentence: as he ploughed through his prepared statement promising a judicial inquiry and talking of the ultimate vindication of british justice his hands unconsciously explored the ministerial dispatch box in the manner of a bomb disposal man with a suspect package

Spans:
Span 11-12:  and => and
Span 33-34:  bomb => bomb
Span 27-28:  box => box
Span 26-27:  dispatch => dispatch-01
Span 21-22:  hands => hand
Span 1-2:  he => he
Span 10-11:  inquiry => inquire-01
Span 9-10:  judicial => judicial
Span 19-20:  justice => justice
Span 35-36:  man => man
Span 30-31:  manner => manner
Span 25-26:  ministerial => (have-org-role-91 :ARG2 minister)
Span 39-40:  package => package
Span 5-6:  prepared => prepare-02
Span 7-8:  promising => promise-01
Span 6-7:  statement => state-01
Span 38-39:  suspect => suspect-01
Span 12-13:  talking => talk-01
Span 15-16:  ultimate => ultimate

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),package,package,false), Span(38,39,List(1),suspect,suspect-01,false), Span(35,36,List(2),man,man,false), Span(33,34,List(3),bomb,bomb,false), Span(30,31,List(4),manner,manner,false), Span(27,28,List(5),box,box,false), Span(26,27,List(6),dispatch,dispatch-01,false), Span(25,26,List(8, 7),ministerial,(have-org-role-91 :ARG2 minister),false), Span(21,22,List(9),hands,hand,false), Span(19,20,List(10),justice,justice,false), Span(15,16,List(11),ultimate,ultimate,false), Span(12,13,List(12),talking,talk-01,false), Span(11,12,List(13),and,and,false), Span(10,11,List(14),inquiry,inquire-01,false), Span(9,10,List(15),judicial,judicial,false), Span(7,8,List(16),promising,promise-01,false), Span(6,7,List(17),statement,state-01,false), Span(5,6,List(18),prepared,prepare-02,false), Span(1,2,List(19),he,he,false)),Map(2 -> man, 5 -> box, 12 -> talk-01, 15 -> judicial, 8 -> minister, 18 -> prepare-02, 7 -> have-org-role-91, 17 -> state-01, 1 -> suspect-01, 4 -> manner, 11 -> ultimate, 14 -> inquire-01, 6 -> dispatch-01, 0 -> package, 9 -> hand, 16 -> promise-01, 19 -> he, 3 -> bomb, 10 -> justice, 13 -> and),Map(m3 -> minister, h -> have-org-role-91, s2 -> state-01, h2 -> hand, b -> bomb, t -> talk-01, m2 -> manner, b2 -> box, p2 -> promise-01, j -> justice, j2 -> judicial, s -> suspect-01, m -> man, d -> dispatch-01, p -> package, a -> and, i -> inquire-01, h3 -> he, u -> ultimate, p3 -> prepare-02))),[Ljava.lang.String;@32109b42,Annotation([Ljava.lang.String;@604123bb,[Ljava.lang.String;@5490fb5b,[Ljava.lang.String;@7a663ebc),Annotation([Ljava.lang.String;@4ea0e76b,[Ljava.lang.String;@25b94a21,[Ledu.cmu.lti.nlp.amr.Dependency;@27b1cfe0),Annotation([Ljava.lang.String;@ac68f7c,[Ljava.lang.String;@71f61b6a,[Ljava.lang.String;@54820699),Annotation([Ljava.lang.String;@247f5227,[Ljava.lang.String;@22ea9129,[Ledu.cmu.lti.nlp.amr.Entity;@55e02ca7))
AMR:
(a / and, op, d / dispatch-01)
(a / and, op, p2 / promise-01)
(a / and, op, t / talk-01)
(b2 / box, location, m2 / manner)
(d / dispatch-01, ARG1, b2 / box)
(h / have-org-role-91, ARG1, b2 / box)
(h / have-org-role-91, ARG2, m3 / minister)
(i / inquire-01, mod, j2 / judicial)
(m / man, mod, b / bomb)
(m / man, topic, s / suspect-01)
(p2 / promise-01, ARG0, h3 / he)
(p2 / promise-01, ARG1, i / inquire-01)
(p3 / prepare-02, ARG1, s2 / state-01)
(s / suspect-01, ARG0, u / ultimate)
(s / suspect-01, ARG1, p / package)
(s2 / state-01, ARG0, h3 / he)
(s2 / state-01, ARG1, j / justice)
(t / talk-01, ARG1, b / bomb)
(t / talk-01, prep-for, h2 / hand)

Decoded in 337,074 microseconds
Sentence: mr lacalle has promised to privatise some stateowned companies though not at the frenetic pace that carlos menem is attempting in neighbouring argentina and to promote montevideos burgeoning role as an offshore banking centre

NER Entity: (country :name (name :op "argentina"))
NER Entity: (country :name (name :op "argentina"))
Spans:
Span 23-24:  and => and
Span 22-23:  argentina => (country :name (name :op "Argentina"))
Span 19-20:  attempting => attempt-01
Span 32-33:  banking => banking
Span 27-28:  burgeoning => burgeon-01
Span 8-9:  companies => company
Span 21-22:  neighbouring => neighbor-01
Span 31-32:  offshore => offshore
Span 14-15:  pace => pace
Span 3-4:  promised => promise-01
Span 25-26:  promote => promote-02
Span 28-29:  role => role
Span 6-7:  some => some

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),banking,banking,false), Span(31,32,List(1),offshore,offshore,false), Span(28,29,List(2),role,role,false), Span(27,28,List(3),burgeoning,burgeon-01,false), Span(25,26,List(4),promote,promote-02,false), Span(23,24,List(5),and,and,false), Span(22,23,List(8, 7, 6),argentina,(country :name (name :op "Argentina")),false), Span(21,22,List(9),neighbouring,neighbor-01,false), Span(19,20,List(10),attempting,attempt-01,false), Span(14,15,List(11),pace,pace,false), Span(8,9,List(12),companies,company,false), Span(6,7,List(13),some,some,false), Span(3,4,List(14),promised,promise-01,false)),Map(2 -> role, 5 -> and, 12 -> company, 8 -> "Argentina", 7 -> name, 1 -> offshore, 4 -> promote-02, 11 -> pace, 14 -> promise-01, 6 -> country, 0 -> banking, 9 -> neighbor-01, 3 -> burgeon-01, 10 -> attempt-01, 13 -> some),Map(n -> name, b -> banking, b2 -> burgeon-01, p2 -> pace, s -> some, p -> promote-02, a -> and, r -> role, a2 -> attempt-01, c -> country, o -> offshore, p3 -> promise-01, n2 -> neighbor-01, c2 -> company))),[Ljava.lang.String;@7093b3fc,Annotation([Ljava.lang.String;@710d9f21,[Ljava.lang.String;@354a6983,[Ljava.lang.String;@285532ca),Annotation([Ljava.lang.String;@71798075,[Ljava.lang.String;@5fe0bb86,[Ledu.cmu.lti.nlp.amr.Dependency;@1b378b97),Annotation([Ljava.lang.String;@5bad7476,[Ljava.lang.String;@58b91dff,[Ljava.lang.String;@61607dda),Annotation([Ljava.lang.String;@5e6a528,[Ljava.lang.String;@6964e81e,[Ledu.cmu.lti.nlp.amr.Entity;@5fc33fa0))
AMR:
(a / and, op, c2 / company)
(a / and, op, p / promote-02)
(a2 / attempt-01, ARG0, p2 / pace)
(a2 / attempt-01, ARG1, n2 / neighbor-01)
(a2 / attempt-01, ARG2, a / and)
(b / banking, mod, o / offshore)
(b2 / burgeon-01, ARG1, r / role)
(b2 / burgeon-01, ARG2, b / banking)
(c / country, name, n / name)
(c2 / company, quant, s / some)
(n / name, op, "Argentina")
(n2 / neighbor-01, ARG1, c / country)
(p / promote-02, ARG1, r / role)
(p3 / promise-01, ARG1, a / and)

Decoded in 316,220 microseconds
Sentence: the aristotelian talk of definitions does not reveal nature to us but only does the same as the man who promised to discover a treasure and then says look where it is hidden and you will find it

Spans:
Span 33-34:  and => and
Span 25-26:  and => and
Span 11-12:  but => contrast-01
Span 4-5:  definitions => definition
Span 22-23:  discover => discover-01
Span 32-33:  hidden => hide-01
Span 37-38:  it => it
Span 30-31:  it => it
Span 18-19:  man => man
Span 8-9:  nature => nature
Span 12-13:  only => only
Span 20-21:  promised => promise-01
Span 7-8:  reveal => reveal-01
Span 15-16:  same => same-41
Span 27-28:  says => say-01
Span 2-3:  talk => talk-01
Span 26-27:  then => then
Span 24-25:  treasure => treasure-01
Span 34-35:  you => you

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),it,it,false), Span(34,35,List(1),you,you,false), Span(33,34,List(2),and,and,false), Span(32,33,List(3),hidden,hide-01,false), Span(30,31,List(4),it,it,false), Span(27,28,List(5),says,say-01,false), Span(26,27,List(6),then,then,false), Span(25,26,List(7),and,and,false), Span(24,25,List(8),treasure,treasure-01,false), Span(22,23,List(9),discover,discover-01,false), Span(20,21,List(10),promised,promise-01,false), Span(18,19,List(11),man,man,false), Span(15,16,List(12),same,same-41,false), Span(12,13,List(13),only,only,false), Span(11,12,List(14),but,contrast-01,false), Span(8,9,List(15),nature,nature,false), Span(7,8,List(16),reveal,reveal-01,false), Span(4,5,List(17),definitions,definition,false), Span(2,3,List(18),talk,talk-01,false)),Map(2 -> and, 5 -> say-01, 12 -> same-41, 15 -> nature, 8 -> treasure-01, 18 -> talk-01, 7 -> and, 17 -> definition, 1 -> you, 4 -> it, 11 -> man, 14 -> contrast-01, 6 -> then, 0 -> it, 9 -> discover-01, 16 -> reveal-01, 3 -> hide-01, 10 -> promise-01, 13 -> only),Map(n -> nature, h -> hide-01, s2 -> same-41, t -> then, s -> say-01, d -> discover-01, m -> man, t3 -> talk-01, y -> you, p -> promise-01, a -> and, d2 -> definition, i2 -> it, t2 -> treasure-01, r -> reveal-01, i -> it, a2 -> and, c -> contrast-01, o -> only))),[Ljava.lang.String;@1f91d41b,Annotation([Ljava.lang.String;@1efc48ce,[Ljava.lang.String;@450fdc46,[Ljava.lang.String;@14469b16),Annotation([Ljava.lang.String;@276fcbc0,[Ljava.lang.String;@1ca9be7a,[Ledu.cmu.lti.nlp.amr.Dependency;@4c184a49),Annotation([Ljava.lang.String;@4eb525a6,[Ljava.lang.String;@56badda8,[Ljava.lang.String;@62e6d14),Annotation([Ljava.lang.String;@51fb3f37,[Ljava.lang.String;@45f35ded,[Ledu.cmu.lti.nlp.amr.Entity;@6c9b967b))
AMR:
(a / and, op, h / hide-01)
(a2 / and, op, p / promise-01)
(a2 / and, op, s / say-01)
(c / contrast-01, ARG1, r / reveal-01)
(d / discover-01, ARG1, t2 / treasure-01)
(h / hide-01, ARG0, y / you)
(h / hide-01, ARG1, i / it)
(h / hide-01, ARG2, i2 / it)
(p / promise-01, ARG0, m / man)
(p / promise-01, ARG2, d / discover-01)
(r / reveal-01, ARG0, t3 / talk-01)
(r / reveal-01, ARG1, n / nature)
(s / say-01, ARG1, a / and)
(s / say-01, time, t / then)
(s2 / same-41, ARG1, c / contrast-01)
(s2 / same-41, ARG2, m / man)
(t3 / talk-01, ARG0, o / only)
(t3 / talk-01, location, d2 / definition)

Decoded in 889,293 microseconds
Sentence:   the lucullan excesses which hefner promised were all in the mind at any rate as long as the fifties lasted

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the lucullan excesses which hefner promised were all in the mind at any rate as long as the fifties lasted
myTokenized = the lucullan excesses which hefner promised were all in the mind at any rate as long as the fifties lasted
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: already it seems the wage rises mr menem promised during his campaign will be eaten up as quickly as they are paid

Spans:
Span 0-1:  already => already
Span 11-12:  campaign => campaign-01
Span 14-15:  eaten => eat-01
Span 1-2:  it => it
Span 21-22:  paid => pay-01
Span 8-9:  promised => promise-01
Span 17-18:  quickly => quick
Span 5-6:  rises => rise-01
Span 2-3:  seems => seem-01
Span 19-20:  they => they
Span 4-5:  wage => wage-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),paid,pay-01,false), Span(19,20,List(1),they,they,false), Span(17,18,List(2),quickly,quick,false), Span(14,15,List(3),eaten,eat-01,false), Span(11,12,List(4),campaign,campaign-01,false), Span(8,9,List(5),promised,promise-01,false), Span(5,6,List(6),rises,rise-01,false), Span(4,5,List(7),wage,wage-01,false), Span(2,3,List(8),seems,seem-01,false), Span(1,2,List(9),it,it,false), Span(0,1,List(10),already,already,false)),Map(2 -> quick, 5 -> promise-01, 8 -> seem-01, 7 -> wage-01, 1 -> they, 4 -> campaign-01, 6 -> rise-01, 9 -> it, 0 -> pay-01, 10 -> already, 3 -> eat-01),Map(w -> wage-01, e -> eat-01, q -> quick, t -> they, p2 -> promise-01, s -> seem-01, p -> pay-01, a -> already, i -> it, r -> rise-01, c -> campaign-01))),[Ljava.lang.String;@7abc0bd,Annotation([Ljava.lang.String;@1cfabc3a,[Ljava.lang.String;@115b92b3,[Ljava.lang.String;@12fc2eac),Annotation([Ljava.lang.String;@6a5c27f0,[Ljava.lang.String;@4842341d,[Ledu.cmu.lti.nlp.amr.Dependency;@726b80fa),Annotation([Ljava.lang.String;@6fe0d7c5,[Ljava.lang.String;@1275ffe5,[Ljava.lang.String;@f31cdb),Annotation([Ljava.lang.String;@58eb6e59,[Ljava.lang.String;@4899c2aa,[Ledu.cmu.lti.nlp.amr.Entity;@66bb4c22))
AMR:
(c / campaign-01, ARG0, t / they)
(e / eat-01, ARG1, i / it)
(e / eat-01, manner, q / quick)
(p / pay-01, ARG1, t / they)
(p2 / promise-01, ARG1, e / eat-01)
(p2 / promise-01, ARG3, c / campaign-01)
(r / rise-01, ARG1, w / wage-01)
(s / seem-01, ARG1, r / rise-01)
(s / seem-01, ARG2, i / it)
(s / seem-01, time, a / already)

Decoded in 117,188 microseconds
Sentence: instead he said the one thing that he had promised himself he wouldnt

Spans:
Span 11-12:  he => he
Span 7-8:  he => he
Span 1-2:  he => he
Span 0-1:  instead => instead
Span 9-10:  promised => promise-01
Span 2-3:  said => say-01
Span 5-6:  thing => thing

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),he,he,false), Span(9,10,List(1),promised,promise-01,false), Span(7,8,List(2),he,he,false), Span(5,6,List(3),thing,thing,false), Span(2,3,List(4),said,say-01,false), Span(1,2,List(5),he,he,false), Span(0,1,List(6),instead,instead,false)),Map(2 -> he, 5 -> he, 1 -> promise-01, 4 -> say-01, 6 -> instead, 0 -> he, 3 -> thing),Map(h -> he, t -> thing, h2 -> he, s -> say-01, p -> promise-01, i -> instead, h3 -> he))),[Ljava.lang.String;@128380df,Annotation([Ljava.lang.String;@7781b9f7,[Ljava.lang.String;@65d8446c,[Ljava.lang.String;@597442b0),Annotation([Ljava.lang.String;@5fc65eb1,[Ljava.lang.String;@5872e796,[Ledu.cmu.lti.nlp.amr.Dependency;@5fc25637),Annotation([Ljava.lang.String;@4faa65fe,[Ljava.lang.String;@3c0e2f8e,[Ljava.lang.String;@4754326f),Annotation([Ljava.lang.String;@68bb39fe,[Ljava.lang.String;@5bdc8869,[Ledu.cmu.lti.nlp.amr.Entity;@6b7fd49c))
AMR:
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, t / thing)
(p / promise-01, ARG2, h / he)
(s / say-01, ARG0, h3 / he)
(s / say-01, ARG1, t / thing)
(s / say-01, time, i / instead)

Decoded in 65,708 microseconds
Sentence: in no way was this the prime minister everyone loves to hate said one soothed peer although she promised to fight the social charter tooth and nail

Spans:
Span 25-26:  and => and
Span 23-24:  charter => charter-01
Span 8-9:  everyone => everyone
Span 20-21:  fight => fight-01
Span 11-12:  hate => hate-01
Span 9-10:  loves => love-01
Span 7-8:  minister => (have-org-role-91 :ARG2 minister)
Span 26-27:  nail => nail
Span 1-2:  no => -
Span 15-16:  peer => peer
Span 6-7:  prime => prime
Span 18-19:  promised => promise-01
Span 12-13:  said => say-01
Span 17-18:  she => she
Span 22-23:  social => society
Span 4-5:  this => this
Span 24-25:  tooth => tooth
Span 2-3:  way => way

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),nail,nail,false), Span(25,26,List(1),and,and,false), Span(24,25,List(2),tooth,tooth,false), Span(23,24,List(3),charter,charter-01,false), Span(22,23,List(4),social,society,false), Span(20,21,List(5),fight,fight-01,false), Span(18,19,List(6),promised,promise-01,false), Span(17,18,List(7),she,she,false), Span(15,16,List(8),peer,peer,false), Span(12,13,List(9),said,say-01,false), Span(11,12,List(10),hate,hate-01,false), Span(9,10,List(11),loves,love-01,false), Span(8,9,List(12),everyone,everyone,false), Span(7,8,List(14, 13),minister,(have-org-role-91 :ARG2 minister),false), Span(6,7,List(15),prime,prime,false), Span(4,5,List(16),this,this,false), Span(2,3,List(17),way,way,false), Span(1,2,List(18),no,-,false)),Map(2 -> tooth, 5 -> fight-01, 12 -> everyone, 15 -> prime, 8 -> peer, 18 -> -, 7 -> she, 17 -> way, 1 -> and, 4 -> society, 11 -> love-01, 14 -> minister, 6 -> promise-01, 0 -> nail, 9 -> say-01, 16 -> this, 3 -> charter-01, 10 -> hate-01, 13 -> have-org-role-91),Map(e -> everyone, w -> way, n -> nail, h -> hate-01, h2 -> have-org-role-91, s2 -> she, t -> tooth, p2 -> peer, s -> society, m -> minister, p -> promise-01, a -> and, t2 -> this, - -> -, c -> charter-01, s3 -> say-01, l -> love-01, f -> fight-01, p3 -> prime))),[Ljava.lang.String;@155f84e7,Annotation([Ljava.lang.String;@320e64a7,[Ljava.lang.String;@4ef2299d,[Ljava.lang.String;@7c8a2ae8),Annotation([Ljava.lang.String;@53072538,[Ljava.lang.String;@7a1caa1d,[Ledu.cmu.lti.nlp.amr.Dependency;@6fe4948c),Annotation([Ljava.lang.String;@7d4acb8,[Ljava.lang.String;@1b97680c,[Ljava.lang.String;@712ff9fa),Annotation([Ljava.lang.String;@4c4c624,[Ljava.lang.String;@12ac67ee,[Ledu.cmu.lti.nlp.amr.Entity;@74db43d5))
AMR:
(a / and, op, n / nail)
(a / and, op, t / tooth)
(c / charter-01, ARG0, t / tooth)
(c / charter-01, ARG1, s / society)
(f / fight-01, ARG0, s2 / she)
(f / fight-01, ARG1, c / charter-01)
(h / hate-01, ARG0, e / everyone)
(h / hate-01, ARG1, s3 / say-01)
(h2 / have-org-role-91, ARG0, e / everyone)
(h2 / have-org-role-91, ARG1, t2 / this)
(h2 / have-org-role-91, ARG2, m / minister)
(l / love-01, ARG1, h / hate-01)
(m / minister, mod, p3 / prime)
(p / promise-01, ARG1, p2 / peer)
(p / promise-01, ARG2, f / fight-01)
(s3 / say-01, ARG0, p2 / peer)
(s3 / say-01, ARG1, w / way)
(w / way, polarity, - / -)

Decoded in 193,146 microseconds
Sentence: in april this year after guards took away their clothing medicines and books they went on a hunger strike which ended 21 days later when the prison authorities promised reforms

Spans:
Span 21-22:  21 => 21
Span 4-5:  after => after
Span 11-12:  and => and
Span 1-2:  april => (date-entity :month 4)
Span 27-28:  authorities => authority
Span 7-8:  away => away
Span 12-13:  books => book
Span 9-10:  clothing => clothing
Span 22-23:  days => (temporal-quantity :unit day)
Span 20-21:  ended => end-01
Span 5-6:  guards => (person :ARG0-of guard-01)
Span 17-18:  hunger => hunger-01
Span 23-24:  later => late
Span 10-11:  medicines => medicine
Span 26-27:  prison => prison
Span 28-29:  promised => promise-01
Span 29-30:  reforms => reform-01
Span 18-19:  strike => strike-01
Span 13-14:  they => they
Span 2-3:  this => this
Span 3-4:  year => year

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),reforms,reform-01,false), Span(28,29,List(1),promised,promise-01,false), Span(27,28,List(2),authorities,authority,false), Span(26,27,List(3),prison,prison,false), Span(23,24,List(4),later,late,false), Span(22,23,List(6, 5),days,(temporal-quantity :unit day),false), Span(21,22,List(7),21,21,false), Span(20,21,List(8),ended,end-01,false), Span(18,19,List(9),strike,strike-01,false), Span(17,18,List(10),hunger,hunger-01,false), Span(13,14,List(11),they,they,false), Span(12,13,List(12),books,book,false), Span(11,12,List(13),and,and,false), Span(10,11,List(14),medicines,medicine,false), Span(9,10,List(15),clothing,clothing,false), Span(7,8,List(16),away,away,false), Span(5,6,List(18, 17),guards,(person :ARG0-of guard-01),false), Span(4,5,List(19),after,after,false), Span(3,4,List(20),year,year,false), Span(2,3,List(21),this,this,false), Span(1,2,List(23, 22),april,(date-entity :month 4),false)),Map(2 -> authority, 5 -> temporal-quantity, 12 -> book, 15 -> clothing, 8 -> end-01, 21 -> this, 18 -> guard-01, 7 -> 21, 17 -> person, 1 -> promise-01, 23 -> 4, 4 -> late, 11 -> they, 14 -> medicine, 20 -> year, 6 -> day, 22 -> date-entity, 0 -> reform-01, 9 -> strike-01, 16 -> away, 19 -> after, 3 -> prison, 10 -> hunger-01, 13 -> and),Map(e -> end-01, h -> hunger-01, 2 -> 21, t -> temporal-quantity, b -> book, p2 -> prison, a3 -> away, s -> strike-01, m -> medicine, d -> day, t3 -> this, y -> year, g -> guard-01, p -> promise-01, 4 -> 4, a -> authority, d2 -> date-entity, t2 -> they, a2 -> and, r -> reform-01, c -> clothing, l -> late, p3 -> person, a4 -> after))),[Ljava.lang.String;@43361a64,Annotation([Ljava.lang.String;@14febdb5,[Ljava.lang.String;@6058c0d7,[Ljava.lang.String;@62dc94ab),Annotation([Ljava.lang.String;@7fa49941,[Ljava.lang.String;@f49bbdf,[Ledu.cmu.lti.nlp.amr.Dependency;@31cd3550),Annotation([Ljava.lang.String;@176730bb,[Ljava.lang.String;@77b050fd,[Ljava.lang.String;@58954f6e),Annotation([Ljava.lang.String;@3291ec31,[Ljava.lang.String;@a299ee7,[Ledu.cmu.lti.nlp.amr.Entity;@327f54e7))
AMR:
(a / authority, mod, p2 / prison)
(a2 / and, op, b / book)
(a2 / and, op, m / medicine)
(a2 / and, op, p3 / person)
(a4 / after, op, m / medicine)
(d2 / date-entity, month, 4 / 4)
(e / end-01, ARG0, s / strike-01)
(e / end-01, ARG1, t / temporal-quantity)
(e / end-01, ARG2, l / late)
(g / guard-01, ARG0, p3 / person)
(g / guard-01, ARG1, y / year)
(h / hunger-01, ARG1, c / clothing)
(l / late, op, d2 / date-entity)
(p / promise-01, ARG0, a / authority)
(p / promise-01, ARG1, e / end-01)
(p / promise-01, ARG2, r / reform-01)
(r / reform-01, ARG1, a3 / away)
(s / strike-01, ARG0, t2 / they)
(s / strike-01, ARG1, a2 / and)
(s / strike-01, mod, h / hunger-01)
(t / temporal-quantity, quant, 2 / 21)
(t / temporal-quantity, unit, d / day)
(y / year, mod, t3 / this)

Decoded in 454,305 microseconds
Sentence: others who went home claim they were tricked by turkish travel agents who promised them work in the uk and sold them air tickets

NER Entity: (country :name (name :op "uk"))
Spans:
Span 11-12:  agents => agent
Span 22-23:  air => air
Span 19-20:  and => and
Span 4-5:  claim => claim-01
Span 3-4:  home => home
Span 0-1:  others => other
Span 13-14:  promised => promise-01
Span 20-21:  sold => sell-01
Span 5-6:  they => they
Span 23-24:  tickets => ticket
Span 10-11:  travel => travel-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),tickets,ticket,false), Span(22,23,List(1),air,air,false), Span(20,21,List(2),sold,sell-01,false), Span(19,20,List(3),and,and,false), Span(13,14,List(4),promised,promise-01,false), Span(11,12,List(5),agents,agent,false), Span(10,11,List(6),travel,travel-01,false), Span(5,6,List(7),they,they,false), Span(4,5,List(8),claim,claim-01,false), Span(3,4,List(9),home,home,false), Span(0,1,List(10),others,other,false)),Map(2 -> sell-01, 5 -> agent, 8 -> claim-01, 7 -> they, 1 -> air, 4 -> promise-01, 6 -> travel-01, 9 -> home, 0 -> ticket, 10 -> other, 3 -> and),Map(h -> home, t -> ticket, a3 -> agent, s -> sell-01, t3 -> they, p -> promise-01, a -> air, t2 -> travel-01, a2 -> and, c -> claim-01, o -> other))),[Ljava.lang.String;@459f2397,Annotation([Ljava.lang.String;@52d9b236,[Ljava.lang.String;@524321b8,[Ljava.lang.String;@355ae139),Annotation([Ljava.lang.String;@6178808c,[Ljava.lang.String;@2e3f9952,[Ledu.cmu.lti.nlp.amr.Dependency;@516aee36),Annotation([Ljava.lang.String;@433d44fc,[Ljava.lang.String;@6b7c1ee0,[Ljava.lang.String;@21cf3b41),Annotation([Ljava.lang.String;@2c3b39be,[Ljava.lang.String;@644bffa1,[Ledu.cmu.lti.nlp.amr.Entity;@397bd678))
AMR:
(a2 / and, op, s / sell-01)
(a3 / agent, mod, t2 / travel-01)
(c / claim-01, ARG0, t3 / they)
(c / claim-01, ARG1, o / other)
(c / claim-01, time, h / home)
(p / promise-01, ARG0, a3 / agent)
(p / promise-01, ARG1, a2 / and)
(s / sell-01, ARG0, t3 / they)
(s / sell-01, ARG1, t / ticket)
(t / ticket, mod, a / air)

Decoded in 217,721 microseconds
Sentence: i promised the missus id be home by eleven

Spans:
Span 6-7:  home => home
Span 0-1:  i => i
Span 4-5:  id => id
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),home,home,false), Span(4,5,List(1),id,id,false), Span(1,2,List(2),promised,promise-01,false), Span(0,1,List(3),i,i,false)),Map(2 -> promise-01, 1 -> id, 0 -> home, 3 -> i),Map(h -> home, p -> promise-01, i2 -> i, i -> id))),[Ljava.lang.String;@713d7dc3,Annotation([Ljava.lang.String;@7c0bc749,[Ljava.lang.String;@6948c93e,[Ljava.lang.String;@29943b72),Annotation([Ljava.lang.String;@42caceb1,[Ljava.lang.String;@10c7e8b9,[Ledu.cmu.lti.nlp.amr.Dependency;@347fd24a),Annotation([Ljava.lang.String;@33c71333,[Ljava.lang.String;@52bd93d3,[Ljava.lang.String;@1c342c15),Annotation([Ljava.lang.String;@253a252a,[Ljava.lang.String;@c5dfb7e,[Ledu.cmu.lti.nlp.amr.Entity;@6e2a1389))
AMR:
(h / home, op, p / promise-01)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, i / id)

Decoded in 15,389 microseconds
Sentence: the position of the lizard lighthouse in relation to buildings above bass point promised him that

Spans:
Span 10-11:  above => above
Span 9-10:  buildings => building
Span 12-13:  point => point
Span 1-2:  position => position
Span 13-14:  promised => promise-01
Span 7-8:  relation => relate-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),promised,promise-01,false), Span(12,13,List(1),point,point,false), Span(10,11,List(2),above,above,false), Span(9,10,List(3),buildings,building,false), Span(7,8,List(4),relation,relate-01,false), Span(1,2,List(5),position,position,false)),Map(2 -> above, 5 -> position, 1 -> point, 4 -> relate-01, 0 -> promise-01, 3 -> building),Map(b -> building, p2 -> point, p -> promise-01, a -> above, r -> relate-01, p3 -> position))),[Ljava.lang.String;@c68bfe0,Annotation([Ljava.lang.String;@310d117d,[Ljava.lang.String;@50f73eb3,[Ljava.lang.String;@1835834c),Annotation([Ljava.lang.String;@613efefe,[Ljava.lang.String;@6ed70792,[Ledu.cmu.lti.nlp.amr.Dependency;@67323b17),Annotation([Ljava.lang.String;@12c597ef,[Ljava.lang.String;@6a79d589,[Ljava.lang.String;@64b24bfb),Annotation([Ljava.lang.String;@759a7f62,[Ljava.lang.String;@7221373f,[Ledu.cmu.lti.nlp.amr.Entity;@62b243a2))
AMR:
(a / above, degree, b / building)
(a / above, op, p2 / point)
(p / promise-01, ARG0, p2 / point)
(p / promise-01, ARG1, p3 / position)
(r / relate-01, ARG1, b / building)

Decoded in 28,657 microseconds
Sentence: however the judge said that even though the man promised not to do it again he found such behaviour extremely offensive and ordered him to give 50 to each of the women

Spans:
Span 26-27:  50 => 50
Span 14-15:  again => again
Span 21-22:  and => and
Span 18-19:  behaviour => behave-01
Span 28-29:  each => each
Span 19-20:  extremely => extreme
Span 16-17:  found => find-01
Span 25-26:  give => give-01
Span 15-16:  he => he
Span 13-14:  it => it
Span 2-3:  judge => judge-01
Span 8-9:  man => man
Span 20-21:  offensive => offensive
Span 22-23:  ordered => order-01
Span 9-10:  promised => promise-01
Span 3-4:  said => say-01
Span 17-18:  such => such
Span 31-32:  women => woman

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),women,woman,false), Span(28,29,List(1),each,each,false), Span(26,27,List(2),50,50,false), Span(25,26,List(3),give,give-01,false), Span(22,23,List(4),ordered,order-01,false), Span(21,22,List(5),and,and,false), Span(20,21,List(6),offensive,offensive,false), Span(19,20,List(7),extremely,extreme,false), Span(18,19,List(8),behaviour,behave-01,false), Span(17,18,List(9),such,such,false), Span(16,17,List(10),found,find-01,false), Span(15,16,List(11),he,he,false), Span(14,15,List(12),again,again,false), Span(13,14,List(13),it,it,false), Span(9,10,List(14),promised,promise-01,false), Span(8,9,List(15),man,man,false), Span(3,4,List(16),said,say-01,false), Span(2,3,List(17),judge,judge-01,false)),Map(2 -> 50, 5 -> and, 12 -> again, 15 -> man, 8 -> behave-01, 7 -> extreme, 17 -> judge-01, 1 -> each, 4 -> order-01, 11 -> he, 14 -> promise-01, 6 -> offensive, 0 -> woman, 9 -> such, 16 -> say-01, 3 -> give-01, 10 -> find-01, 13 -> it),Map(e -> each, w -> woman, h -> he, s2 -> say-01, 5 -> 50, b -> behave-01, e2 -> extreme, j -> judge-01, s -> such, m -> man, p -> promise-01, g -> give-01, a -> and, o2 -> offensive, i -> it, a2 -> again, f -> find-01, o -> order-01))),[Ljava.lang.String;@38bd772,Annotation([Ljava.lang.String;@51ed7f2f,[Ljava.lang.String;@3f3910ae,[Ljava.lang.String;@3b762fef),Annotation([Ljava.lang.String;@4c451268,[Ljava.lang.String;@4abb90f6,[Ledu.cmu.lti.nlp.amr.Dependency;@602a2cce),Annotation([Ljava.lang.String;@70e3b9b4,[Ljava.lang.String;@76b51252,[Ljava.lang.String;@69c60260),Annotation([Ljava.lang.String;@46c622e0,[Ljava.lang.String;@7a1bc46c,[Ledu.cmu.lti.nlp.amr.Entity;@34fccd15))
AMR:
(a / and, op, f / find-01)
(a / and, op, o / order-01)
(b / behave-01, ARG0, i / it)
(b / behave-01, mod, s / such)
(f / find-01, ARG0, h / he)
(f / find-01, ARG1, o2 / offensive)
(f / find-01, ARG3, b / behave-01)
(f / find-01, time, p / promise-01)
(g / give-01, ARG0, e / each)
(g / give-01, ARG1, 5 / 50)
(o / order-01, ARG2, g / give-01)
(o2 / offensive, degree, e2 / extreme)
(p / promise-01, ARG0, m / man)
(p / promise-01, ARG1, a2 / again)
(s2 / say-01, ARG0, j / judge-01)
(s2 / say-01, ARG1, a / and)
(w / woman, mod, e / each)

Decoded in 768,136 microseconds
Sentence: in an early morning meeting with stock analysts in new york mr akers promised the cuts would lead to substantial improvement in our current financial performance

NER Entity: (country :name (name :op "new" :op "york"))
Spans:
Span 7-8:  analysts => (person :ARG0-of analyze-01)
Span 23-24:  current => current
Span 15-16:  cuts => cut-02
Span 2-3:  early => early
Span 24-25:  financial => finance
Span 20-21:  improvement => improve-01
Span 4-5:  meeting => meet-03
Span 3-4:  morning => morning
Span 9-11:  new york => (country :name (name :op "new" :op "york"))
Span 25-26:  performance => perform-01
Span 13-14:  promised => promise-01
Span 6-7:  stock => stock
Span 19-20:  substantial => substantial

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),performance,perform-01,false), Span(24,25,List(1),financial,finance,false), Span(23,24,List(2),current,current,false), Span(20,21,List(3),improvement,improve-01,false), Span(19,20,List(4),substantial,substantial,false), Span(15,16,List(5),cuts,cut-02,false), Span(13,14,List(6),promised,promise-01,false), Span(9,11,List(10, 9, 8, 7),new york,(country :name (name :op "new" :op "york")),false), Span(7,8,List(12, 11),analysts,(person :ARG0-of analyze-01),false), Span(6,7,List(13),stock,stock,false), Span(4,5,List(14),meeting,meet-03,false), Span(3,4,List(15),morning,morning,false), Span(2,3,List(16),early,early,false)),Map(2 -> current, 5 -> cut-02, 12 -> analyze-01, 15 -> morning, 8 -> name, 7 -> country, 1 -> finance, 4 -> substantial, 11 -> person, 14 -> meet-03, 6 -> promise-01, 0 -> perform-01, 9 -> "new", 16 -> early, 3 -> improve-01, 10 -> "york", 13 -> stock),Map(e -> early, n -> name, s2 -> stock, m2 -> morning, p2 -> promise-01, s -> substantial, m -> meet-03, p -> perform-01, c3 -> country, a -> analyze-01, i -> improve-01, c -> current, f -> finance, p3 -> person, c2 -> cut-02))),[Ljava.lang.String;@40fc38e0,Annotation([Ljava.lang.String;@6efa1b74,[Ljava.lang.String;@66209597,[Ljava.lang.String;@653d20e2),Annotation([Ljava.lang.String;@103a095b,[Ljava.lang.String;@523c3daf,[Ledu.cmu.lti.nlp.amr.Dependency;@70f5d656),Annotation([Ljava.lang.String;@1bcae20a,[Ljava.lang.String;@24be0cc7,[Ljava.lang.String;@3938efa9),Annotation([Ljava.lang.String;@48fe5d98,[Ljava.lang.String;@33b2cb98,[Ledu.cmu.lti.nlp.amr.Entity;@1f5482ac))
AMR:
(a / analyze-01, ARG0, p3 / person)
(a / analyze-01, ARG1, s2 / stock)
(c3 / country, name, n / name)
(i / improve-01, ARG1, p / perform-01)
(i / improve-01, degree, s / substantial)
(m / meet-03, ARG0, p3 / person)
(m / meet-03, time, m2 / morning)
(n / name, op, "new")
(n / name, op, "york")
(p / perform-01, ARG1, m / meet-03)
(p / perform-01, mod, f / finance)
(p / perform-01, time, c / current)
(p2 / promise-01, ARG1, c2 / cut-02)
(p2 / promise-01, time, e / early)
(p2 / promise-01, time, m / meet-03)
(p3 / person, location, c3 / country)

Decoded in 155,870 microseconds
Sentence: i promise on my honour

Spans:
Span 4-5:  honour => honor-01
Span 0-1:  i => i
Span 1-2:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),honour,honor-01,false), Span(1,2,List(1),promise,promise-01,false), Span(0,1,List(2),i,i,false)),Map(2 -> i, 1 -> promise-01, 0 -> honor-01),Map(h -> honor-01, p -> promise-01, i -> i))),[Ljava.lang.String;@654efa45,Annotation([Ljava.lang.String;@2410fbf9,[Ljava.lang.String;@570eaaee,[Ljava.lang.String;@3f81be9),Annotation([Ljava.lang.String;@15f06008,[Ljava.lang.String;@5830b878,[Ledu.cmu.lti.nlp.amr.Dependency;@669efb83),Annotation([Ljava.lang.String;@4f928a17,[Ljava.lang.String;@1da814d1,[Ljava.lang.String;@5eeb48d),Annotation([Ljava.lang.String;@7a8f9805,[Ljava.lang.String;@6945af1f,[Ledu.cmu.lti.nlp.amr.Entity;@5dec5237))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG2, h / honor-01)

Decoded in 4,823 microseconds
Sentence: in 1949 he betrayed a close friend laszlo rajk by promising his life for a false confession

Spans:
Span 1-2:  1949 => (date-entity :year 1949)
Span 16-17:  confession => confess-01
Span 15-16:  false => false
Span 6-7:  friend => (have-rel-role-91 :ARG2 friend)
Span 2-3:  he => he
Span 12-13:  life => life
Span 10-11:  promising => promise-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),confession,confess-01,false), Span(15,16,List(1),false,false,false), Span(12,13,List(2),life,life,false), Span(10,11,List(3),promising,promise-01,false), Span(6,7,List(5, 4),friend,(have-rel-role-91 :ARG2 friend),false), Span(2,3,List(6),he,he,false), Span(1,2,List(8, 7),1949,(date-entity :year 1949),false)),Map(2 -> life, 5 -> friend, 8 -> 1949, 7 -> date-entity, 1 -> false, 4 -> have-rel-role-91, 6 -> he, 0 -> confess-01, 3 -> promise-01),Map(h -> have-rel-role-91, h2 -> he, d -> date-entity, 1 -> 1949, p -> promise-01, f2 -> friend, l -> life, c -> confess-01, f -> false))),[Ljava.lang.String;@4609c90d,Annotation([Ljava.lang.String;@2c6e9867,[Ljava.lang.String;@10d7a8fb,[Ljava.lang.String;@3e96ff60),Annotation([Ljava.lang.String;@2b5817ba,[Ljava.lang.String;@247dca91,[Ledu.cmu.lti.nlp.amr.Dependency;@3e7e084e),Annotation([Ljava.lang.String;@445358ef,[Ljava.lang.String;@3bf3d5f4,[Ljava.lang.String;@563a4ec),Annotation([Ljava.lang.String;@50e084b7,[Ljava.lang.String;@442933dc,[Ledu.cmu.lti.nlp.amr.Entity;@6d0bd379))
AMR:
(c / confess-01, ARG0, d / date-entity)
(c / confess-01, ARG1, l / life)
(c / confess-01, mod, f / false)
(d / date-entity, year, 1 / 1949)
(h / have-rel-role-91, ARG1, h2 / he)
(h / have-rel-role-91, ARG2, f2 / friend)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, l / life)

Decoded in 43,785 microseconds
Sentence: it promises no manna tomorrow it might be dubbed the radical moderate option a compromise between those fearful of any further reforms and radicals who would plunge the economy into the icy bath of capitalism tomorrow

Spans:
Span 22-23:  and => and
Span 19-20:  any => any
Span 32-33:  bath => bathe-01
Span 15-16:  between => between
Span 34-35:  capitalism => capitalism
Span 14-15:  compromise => compromise-01
Span 8-9:  dubbed => dub-01
Span 28-29:  economy => economy
Span 17-18:  fearful => fear-01
Span 20-21:  further => further
Span 5-6:  it => it
Span 0-1:  it => it
Span 11-12:  moderate => moderate
Span 2-3:  no => -
Span 12-13:  option => option
Span 26-27:  plunge => plunge-01
Span 1-2:  promises => promise-01
Span 10-11:  radical => radical
Span 23-24:  radicals => radical
Span 21-22:  reforms => reform-01
Span 35-36:  tomorrow => tomorrow
Span 4-5:  tomorrow => tomorrow

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),tomorrow,tomorrow,false), Span(34,35,List(1),capitalism,capitalism,false), Span(32,33,List(2),bath,bathe-01,false), Span(28,29,List(3),economy,economy,false), Span(26,27,List(4),plunge,plunge-01,false), Span(23,24,List(5),radicals,radical,false), Span(22,23,List(6),and,and,false), Span(21,22,List(7),reforms,reform-01,false), Span(20,21,List(8),further,further,false), Span(19,20,List(9),any,any,false), Span(17,18,List(10),fearful,fear-01,false), Span(15,16,List(11),between,between,false), Span(14,15,List(12),compromise,compromise-01,false), Span(12,13,List(13),option,option,false), Span(11,12,List(14),moderate,moderate,false), Span(10,11,List(15),radical,radical,false), Span(8,9,List(16),dubbed,dub-01,false), Span(5,6,List(17),it,it,false), Span(4,5,List(18),tomorrow,tomorrow,false), Span(2,3,List(19),no,-,false), Span(1,2,List(20),promises,promise-01,false), Span(0,1,List(21),it,it,false)),Map(2 -> bathe-01, 5 -> radical, 12 -> compromise-01, 15 -> radical, 8 -> further, 21 -> it, 18 -> tomorrow, 7 -> reform-01, 17 -> it, 1 -> capitalism, 4 -> plunge-01, 11 -> between, 14 -> moderate, 20 -> promise-01, 6 -> and, 0 -> tomorrow, 9 -> any, 16 -> dub-01, 19 -> -, 3 -> economy, 10 -> fear-01, 13 -> option),Map(e -> economy, r3 -> radical, t -> tomorrow, b -> bathe-01, b2 -> between, p2 -> promise-01, d -> dub-01, m -> moderate, p -> plunge-01, r2 -> reform-01, a -> and, i2 -> it, t2 -> tomorrow, i -> it, r -> radical, a2 -> any, - -> -, c -> capitalism, f2 -> fear-01, f -> further, o -> option, c2 -> compromise-01))),[Ljava.lang.String;@3b897b54,Annotation([Ljava.lang.String;@3effe655,[Ljava.lang.String;@126af6c3,[Ljava.lang.String;@2c6e85a7),Annotation([Ljava.lang.String;@c08adbb,[Ljava.lang.String;@dc5d629,[Ledu.cmu.lti.nlp.amr.Dependency;@376f24cf),Annotation([Ljava.lang.String;@61d9ae77,[Ljava.lang.String;@1a4d38d1,[Ljava.lang.String;@43cd2ed4),Annotation([Ljava.lang.String;@53bd8312,[Ljava.lang.String;@3ee83db1,[Ledu.cmu.lti.nlp.amr.Entity;@12a4fbb))
AMR:
(a / and, degree, f / further)
(a / and, mod, a2 / any)
(a / and, op, r / radical)
(a / and, op, r2 / reform-01)
(b / bathe-01, ARG1, c / capitalism)
(b2 / between, op, f2 / fear-01)
(c2 / compromise-01, ARG0, i2 / it)
(c2 / compromise-01, ARG1, f2 / fear-01)
(d / dub-01, ARG0, t2 / tomorrow)
(d / dub-01, ARG1, i / it)
(d / dub-01, ARG2, o / option)
(f2 / fear-01, ARG1, r2 / reform-01)
(o / option, mod, m / moderate)
(o / option, mod, r3 / radical)
(p / plunge-01, ARG0, r / radical)
(p / plunge-01, ARG1, e / economy)
(p / plunge-01, ARG2, b / bathe-01)
(p / plunge-01, time, t / tomorrow)
(p2 / promise-01, ARG0, i2 / it)
(p2 / promise-01, ARG1, t2 / tomorrow)
(t2 / tomorrow, polarity, - / -)

Decoded in 700,835 microseconds
Sentence: but now his intellectual horizons had shrunk to debates about motorways or endless conversations about the right school for ones child it was as if he didnt want to remember the henry who had once promised a little more than that

Spans:
Span 0-1:  but => contrast-01
Span 20-21:  child => child
Span 8-9:  debates => debate-01
Span 12-13:  endless => endless
Span 25-26:  he => he
Span 3-4:  intellectual => intellectual
Span 21-22:  it => it
Span 37-38:  little => little
Span 1-2:  now => now
Span 34-35:  once => once
Span 19-20:  ones => one
Span 11-12:  or => or
Span 35-36:  promised => promise-01
Span 29-30:  remember => remember-01
Span 17-18:  school => school
Span 27-28:  want => want-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),little,little,false), Span(35,36,List(1),promised,promise-01,false), Span(34,35,List(2),once,once,false), Span(29,30,List(3),remember,remember-01,false), Span(27,28,List(4),want,want-01,false), Span(25,26,List(5),he,he,false), Span(21,22,List(6),it,it,false), Span(20,21,List(7),child,child,false), Span(19,20,List(8),ones,one,false), Span(17,18,List(9),school,school,false), Span(12,13,List(10),endless,endless,false), Span(11,12,List(11),or,or,false), Span(8,9,List(12),debates,debate-01,false), Span(3,4,List(13),intellectual,intellectual,false), Span(1,2,List(14),now,now,false), Span(0,1,List(15),but,contrast-01,false)),Map(2 -> once, 5 -> he, 12 -> debate-01, 15 -> contrast-01, 8 -> one, 7 -> child, 1 -> promise-01, 4 -> want-01, 11 -> or, 14 -> now, 6 -> it, 0 -> little, 9 -> school, 3 -> remember-01, 10 -> endless, 13 -> intellectual),Map(e -> endless, n -> now, w -> want-01, h -> he, o3 -> or, s -> school, d -> debate-01, p -> promise-01, o2 -> one, i2 -> intellectual, r -> remember-01, i -> it, c -> child, l -> little, o -> once, c2 -> contrast-01))),[Ljava.lang.String;@d87e96,Annotation([Ljava.lang.String;@55eaa49,[Ljava.lang.String;@9fda160,[Ljava.lang.String;@6a6daabf),Annotation([Ljava.lang.String;@45e5182f,[Ljava.lang.String;@4396d982,[Ledu.cmu.lti.nlp.amr.Dependency;@64a20878),Annotation([Ljava.lang.String;@49da31e5,[Ljava.lang.String;@1401d744,[Ljava.lang.String;@4dbbb9f),Annotation([Ljava.lang.String;@75fac636,[Ljava.lang.String;@22eb3fbd,[Ledu.cmu.lti.nlp.amr.Entity;@2a5a334))
AMR:
(c / child, mod, o2 / one)
(c2 / contrast-01, ARG1, i2 / intellectual)
(c2 / contrast-01, ARG2, w / want-01)
(d / debate-01, ARG0, l / little)
(d / debate-01, ARG1, o3 / or)
(n / now, mod, d / debate-01)
(o3 / or, op, e / endless)
(o3 / or, prep-with, s / school)
(p / promise-01, ARG0, w / want-01)
(p / promise-01, time, o / once)
(r / remember-01, ARG0, h / he)
(r / remember-01, ARG1, c / child)
(s / school, poss, c / child)
(w / want-01, ARG0, i / it)
(w / want-01, ARG1, r / remember-01)

Decoded in 391,642 microseconds
Sentence: eric forth the consumer affairs minister has promised an urgent inquiry into the way some agencies use addresses as the basis of a reference

Spans:
Span 17-18:  addresses => address
Span 4-5:  affairs => affair
Span 15-16:  agencies => agency
Span 3-4:  consumer => consume-01
Span 1-2:  forth => forth
Span 10-11:  inquiry => inquire-01
Span 5-6:  minister => (have-org-role-91 :ARG2 minister)
Span 7-8:  promised => promise-01
Span 23-24:  reference => reference-01
Span 14-15:  some => some
Span 9-10:  urgent => urgent
Span 16-17:  use => use-01
Span 13-14:  way => way

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),reference,reference-01,false), Span(17,18,List(1),addresses,address,false), Span(16,17,List(2),use,use-01,false), Span(15,16,List(3),agencies,agency,false), Span(14,15,List(4),some,some,false), Span(13,14,List(5),way,way,false), Span(10,11,List(6),inquiry,inquire-01,false), Span(9,10,List(7),urgent,urgent,false), Span(7,8,List(8),promised,promise-01,false), Span(5,6,List(10, 9),minister,(have-org-role-91 :ARG2 minister),false), Span(4,5,List(11),affairs,affair,false), Span(3,4,List(12),consumer,consume-01,false), Span(1,2,List(13),forth,forth,false)),Map(2 -> use-01, 5 -> way, 12 -> consume-01, 8 -> promise-01, 7 -> urgent, 1 -> address, 4 -> some, 11 -> affair, 6 -> inquire-01, 0 -> reference-01, 9 -> have-org-role-91, 3 -> agency, 10 -> minister, 13 -> forth),Map(w -> way, h -> have-org-role-91, a3 -> affair, s -> some, u2 -> urgent, m -> minister, p -> promise-01, a -> address, r -> reference-01, a2 -> agency, i -> inquire-01, c -> consume-01, u -> use-01, f -> forth))),[Ljava.lang.String;@32b98e7f,Annotation([Ljava.lang.String;@343a4ddd,[Ljava.lang.String;@5fce02f4,[Ljava.lang.String;@4e24124f),Annotation([Ljava.lang.String;@222e289d,[Ljava.lang.String;@46c6cf3,[Ledu.cmu.lti.nlp.amr.Dependency;@6a64c7c9),Annotation([Ljava.lang.String;@7e7893b0,[Ljava.lang.String;@1e2848ae,[Ljava.lang.String;@66bba6f9),Annotation([Ljava.lang.String;@29cf5a20,[Ljava.lang.String;@6c260051,[Ledu.cmu.lti.nlp.amr.Entity;@32defd4f))
AMR:
(a / address, mod, s / some)
(c / consume-01, ARG0, a3 / affair)
(f / forth, op, a3 / affair)
(h / have-org-role-91, ARG1, c / consume-01)
(h / have-org-role-91, ARG2, m / minister)
(i / inquire-01, ARG1, a / address)
(i / inquire-01, ARG2, r / reference-01)
(i / inquire-01, mod, u2 / urgent)
(p / promise-01, ARG1, h / have-org-role-91)
(p / promise-01, ARG2, i / inquire-01)
(p / promise-01, manner, w / way)
(u / use-01, ARG0, a / address)
(u / use-01, ARG1, a2 / agency)

Decoded in 251,880 microseconds
Sentence: this race promises to prove one of the highlights with warning attempting to redeem his reputation dented by his performance in the eclipse when the distance was too far and the ground too soft

Spans:
Span 29-30:  and => and
Span 11-12:  attempting => attempt-01
Span 25-26:  distance => distance-01
Span 28-29:  far => far
Span 31-32:  ground => ground
Span 8-9:  highlights => highlight-01
Span 19-20:  performance => perform-01
Span 2-3:  promises => promise-01
Span 4-5:  prove => prove-01
Span 1-2:  race => race
Span 13-14:  redeem => redeem-01
Span 15-16:  reputation => reputation
Span 33-34:  soft => soft
Span 0-1:  this => this
Span 32-33:  too => too
Span 27-28:  too => too
Span 10-11:  warning => warn-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),soft,soft,false), Span(32,33,List(1),too,too,false), Span(31,32,List(2),ground,ground,false), Span(29,30,List(3),and,and,false), Span(28,29,List(4),far,far,false), Span(27,28,List(5),too,too,false), Span(25,26,List(6),distance,distance-01,false), Span(19,20,List(7),performance,perform-01,false), Span(15,16,List(8),reputation,reputation,false), Span(13,14,List(9),redeem,redeem-01,false), Span(11,12,List(10),attempting,attempt-01,false), Span(10,11,List(11),warning,warn-01,false), Span(8,9,List(12),highlights,highlight-01,false), Span(4,5,List(13),prove,prove-01,false), Span(2,3,List(14),promises,promise-01,false), Span(1,2,List(15),race,race,false), Span(0,1,List(16),this,this,false)),Map(2 -> ground, 5 -> too, 12 -> highlight-01, 15 -> race, 8 -> reputation, 7 -> perform-01, 1 -> too, 4 -> far, 11 -> warn-01, 14 -> promise-01, 6 -> distance-01, 0 -> soft, 9 -> redeem-01, 16 -> this, 3 -> and, 10 -> attempt-01, 13 -> prove-01),Map(w -> warn-01, r3 -> race, h -> highlight-01, t -> too, p2 -> prove-01, s -> soft, d -> distance-01, t3 -> this, g -> ground, p -> perform-01, r2 -> redeem-01, a -> and, t2 -> too, r -> reputation, a2 -> attempt-01, f -> far, p3 -> promise-01))),[Ljava.lang.String;@4dc867a0,Annotation([Ljava.lang.String;@200b6145,[Ljava.lang.String;@4b1f0972,[Ljava.lang.String;@62a541e5),Annotation([Ljava.lang.String;@4f8953fb,[Ljava.lang.String;@40e8ac88,[Ledu.cmu.lti.nlp.amr.Dependency;@6b973602),Annotation([Ljava.lang.String;@145af47d,[Ljava.lang.String;@5f6944fb,[Ljava.lang.String;@782febac),Annotation([Ljava.lang.String;@1219a6d9,[Ljava.lang.String;@5218f9d7,[Ledu.cmu.lti.nlp.amr.Entity;@65babc5c))
AMR:
(a / and, op, f / far)
(a / and, op, s / soft)
(a2 / attempt-01, ARG1, r2 / redeem-01)
(d / distance-01, ARG1, p / perform-01)
(f / far, degree, t2 / too)
(h / highlight-01, ARG1, w / warn-01)
(p / perform-01, ARG1, a / and)
(p2 / prove-01, ARG0, r3 / race)
(p2 / prove-01, manner, w / warn-01)
(p3 / promise-01, ARG0, r3 / race)
(r2 / redeem-01, ARG1, r / reputation)
(r2 / redeem-01, ARG2, p / perform-01)
(r3 / race, mod, t3 / this)
(s / soft, degree, t / too)
(w / warn-01, ARG0, g / ground)
(w / warn-01, ARG1, a2 / attempt-01)

Decoded in 180,029 microseconds
Sentence: it could buy that second car youve always promised yourself

Spans:
Span 7-8:  always => always
Span 2-3:  buy => buy-01
Span 5-6:  car => car
Span 1-2:  could => possible
Span 0-1:  it => it
Span 8-9:  promised => promise-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),promised,promise-01,false), Span(7,8,List(1),always,always,false), Span(5,6,List(2),car,car,false), Span(2,3,List(3),buy,buy-01,false), Span(1,2,List(4),could,possible,false), Span(0,1,List(5),it,it,false)),Map(2 -> car, 5 -> it, 1 -> always, 4 -> possible, 0 -> promise-01, 3 -> buy-01),Map(b -> buy-01, p2 -> possible, p -> promise-01, a -> always, i -> it, c -> car))),[Ljava.lang.String;@46a47031,Annotation([Ljava.lang.String;@55c1c532,[Ljava.lang.String;@2479819a,[Ljava.lang.String;@252bb82b),Annotation([Ljava.lang.String;@5948221d,[Ljava.lang.String;@eb7cbb6,[Ledu.cmu.lti.nlp.amr.Dependency;@449f2146),Annotation([Ljava.lang.String;@2b419ddc,[Ljava.lang.String;@60e2ecb3,[Ljava.lang.String;@52220d76),Annotation([Ljava.lang.String;@39a1e81a,[Ljava.lang.String;@348d2085,[Ledu.cmu.lti.nlp.amr.Entity;@1d5216b7))
AMR:
(b / buy-01, ARG0, i / it)
(b / buy-01, ARG1, p / promise-01)
(b / buy-01, mod, p2 / possible)
(p / promise-01, time, a / always)
(p2 / possible, domain, c / car)

Decoded in 25,405 microseconds
Sentence: though they claimed that hitler was bluffing and would run away if faced with united opposition they would not call this bluff without a firm promise of support from great britain, they acquiesced in extracting concessions from czechoslovakia when this promise was refused

NER Entity: (country :name (name :op "great" :op "britain"))
NER Entity: (country :name (name :op "czechoslovakia"))
Spans:
Span 7-8:  and => and
Span 10-11:  away => away
Span 21-22:  bluff => bluff-01
Span 2-3:  claimed => claim-01
Span 36-37:  concessions => concede-01
Span 12-13:  faced => face-01
Span 24-25:  firm => firm
Span 29-31:  great britain => (country :name (name :op "great" :op "britain"))
Span 15-16:  opposition => oppose-01
Span 41-42:  promise => promise-01
Span 25-26:  promise => promise-01
Span 43-44:  refused => refuse-01
Span 27-28:  support => support-01
Span 32-33:  they => they
Span 16-17:  they => they
Span 1-2:  they => they
Span 40-41:  this => this
Span 20-21:  this => this
Span 14-15:  united => unite-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),refused,refuse-01,false), Span(41,42,List(1),promise,promise-01,false), Span(40,41,List(2),this,this,false), Span(36,37,List(3),concessions,concede-01,false), Span(32,33,List(4),they,they,false), Span(29,31,List(8, 7, 6, 5),great britain,(country :name (name :op "great" :op "britain")),false), Span(27,28,List(9),support,support-01,false), Span(25,26,List(10),promise,promise-01,false), Span(24,25,List(11),firm,firm,false), Span(21,22,List(12),bluff,bluff-01,false), Span(20,21,List(13),this,this,false), Span(16,17,List(14),they,they,false), Span(15,16,List(15),opposition,oppose-01,false), Span(14,15,List(16),united,unite-01,false), Span(12,13,List(17),faced,face-01,false), Span(10,11,List(18),away,away,false), Span(7,8,List(19),and,and,false), Span(2,3,List(20),claimed,claim-01,false), Span(1,2,List(21),they,they,false)),Map(2 -> this, 5 -> country, 12 -> bluff-01, 15 -> oppose-01, 8 -> "britain", 21 -> they, 18 -> away, 7 -> "great", 17 -> face-01, 1 -> promise-01, 4 -> they, 11 -> firm, 14 -> they, 20 -> claim-01, 6 -> name, 0 -> refuse-01, 9 -> support-01, 16 -> unite-01, 19 -> and, 3 -> concede-01, 10 -> promise-01, 13 -> this),Map(n -> name, t4 -> they, t -> this, b -> bluff-01, p2 -> promise-01, s -> support-01, t3 -> this, p -> promise-01, c3 -> claim-01, a -> away, t2 -> they, t5 -> they, a2 -> and, r -> refuse-01, c -> concede-01, f2 -> face-01, u -> unite-01, f -> firm, o -> oppose-01, c2 -> country))),[Ljava.lang.String;@74d0d91c,Annotation([Ljava.lang.String;@3b5df92e,[Ljava.lang.String;@16925975,[Ljava.lang.String;@622f1be6),Annotation([Ljava.lang.String;@2d0cb66,[Ljava.lang.String;@59d996fb,[Ledu.cmu.lti.nlp.amr.Dependency;@5c4766d2),Annotation([Ljava.lang.String;@53af9452,[Ljava.lang.String;@2c32be6a,[Ljava.lang.String;@377337d1),Annotation([Ljava.lang.String;@6d5596c7,[Ljava.lang.String;@e1e1ae5,[Ledu.cmu.lti.nlp.amr.Entity;@5a77b7a0))
AMR:
(a2 / and, op, c3 / claim-01)
(a2 / and, op, f2 / face-01)
(b / bluff-01, ARG1, t4 / they)
(b / bluff-01, mod, t3 / this)
(c / concede-01, ARG0, t2 / they)
(c2 / country, name, n / name)
(c3 / claim-01, ARG0, t2 / they)
(c3 / claim-01, ARG1, t5 / they)
(f2 / face-01, ARG0, c2 / country)
(f2 / face-01, ARG1, a / away)
(f2 / face-01, instrument, o / oppose-01)
(n / name, op, "britain")
(n / name, op, "great")
(o / oppose-01, ARG0, t4 / they)
(p / promise-01, mod, t / this)
(p2 / promise-01, ARG0, t4 / they)
(p2 / promise-01, ARG1, s / support-01)
(p2 / promise-01, manner, f / firm)
(r / refuse-01, ARG0, t2 / they)
(r / refuse-01, ARG1, p / promise-01)
(u / unite-01, ARG1, o / oppose-01)

Decoded in 880,346 microseconds
Sentence: but will this work when people have seen it for themselves  as eastern european states enjoy the benefits of the greater self determination promised by mikhail gorbachev there will be increased dangers of tension between them

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = but will this work when people have seen it for themselves  as eastern european states enjoy the benefits of the greater self determination promised by mikhail gorbachev there will be increased dangers of tension between them
myTokenized = but will this work when people have seen it for themselves as eastern european states enjoy the benefits of the greater self determination promised by mikhail gorbachev there will be increased dangers of tension between them
i = 11
prefix = List(but, will, this, work, when, people, have, seen, it, for, themselves, as)
regexr = \Qb\E ?\Qu\E ?\Qt\E ?\Qw\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qw\E ?\Qo\E ?\Qr\E ?\Qk\E ?\Qw\E ?\Qh\E ?\Qe\E ?\Qn\E ?\Qp\E ?\Qe\E ?\Qo\E ?\Qp\E ?\Ql\E ?\Qe\E ?\Qh\E ?\Qa\E ?\Qv\E ?\Qe\E ?\Qs\E ?\Qe\E ?\Qe\E ?\Qn\E ?\Qi\E ?\Qt\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qm\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qv\E ?\Qe\E ?\Qs\E ?\Qa\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: when first elected in 1983 he promised to force the pace of economic change to make turkey leap an age

Spans:
Span 4-5:  1983 => (date-entity :year 1983)
Span 19-20:  age => age-01
Span 13-14:  change => change-01
Span 12-13:  economic => economy
Span 2-3:  elected => elect-01
Span 8-9:  force => force
Span 5-6:  he => he
Span 10-11:  pace => pace
Span 6-7:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),age,age-01,false), Span(13,14,List(1),change,change-01,false), Span(12,13,List(2),economic,economy,false), Span(10,11,List(3),pace,pace,false), Span(8,9,List(4),force,force,false), Span(6,7,List(5),promised,promise-01,false), Span(5,6,List(6),he,he,false), Span(4,5,List(8, 7),1983,(date-entity :year 1983),false), Span(2,3,List(9),elected,elect-01,false)),Map(2 -> economy, 5 -> promise-01, 8 -> 1983, 7 -> date-entity, 1 -> change-01, 4 -> force, 6 -> he, 9 -> elect-01, 0 -> age-01, 3 -> pace),Map(e -> economy, h -> he, e2 -> elect-01, p2 -> promise-01, d -> date-entity, 1 -> 1983, p -> pace, a -> age-01, c -> change-01, f -> force))),[Ljava.lang.String;@55f47e63,Annotation([Ljava.lang.String;@2695c1ab,[Ljava.lang.String;@31ddd557,[Ljava.lang.String;@5ae15c54),Annotation([Ljava.lang.String;@174bd69,[Ljava.lang.String;@173f393e,[Ledu.cmu.lti.nlp.amr.Dependency;@37c7215e),Annotation([Ljava.lang.String;@725fbeed,[Ljava.lang.String;@6beff444,[Ljava.lang.String;@568dd3b8),Annotation([Ljava.lang.String;@7947016c,[Ljava.lang.String;@24ae97a8,[Ledu.cmu.lti.nlp.amr.Entity;@4266a968))
AMR:
(a / age-01, ARG1, h / he)
(c / change-01, ARG1, e / economy)
(d / date-entity, year, 1 / 1983)
(e2 / elect-01, ARG1, p2 / promise-01)
(p / pace, poss, c / change-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, p / pace)
(p2 / promise-01, ARG2, f / force)
(p2 / promise-01, time, d / date-entity)

Decoded in 40,866 microseconds
Sentence: the nationalists promised to end the drain of resources out of the country to industrialize in order to supply home consumption

Spans:
Span 20-21:  consumption => consume-01
Span 12-13:  country => country
Span 6-7:  drain => drain-01
Span 19-20:  home => home
Span 1-2:  nationalists => nationalist
Span 2-3:  promised => promise-01
Span 8-9:  resources => resource
Span 18-19:  supply => supply-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),consumption,consume-01,false), Span(19,20,List(1),home,home,false), Span(18,19,List(2),supply,supply-01,false), Span(12,13,List(3),country,country,false), Span(8,9,List(4),resources,resource,false), Span(6,7,List(5),drain,drain-01,false), Span(2,3,List(6),promised,promise-01,false), Span(1,2,List(7),nationalists,nationalist,false)),Map(2 -> supply-01, 5 -> drain-01, 7 -> nationalist, 1 -> home, 4 -> resource, 6 -> promise-01, 0 -> consume-01, 3 -> country),Map(n -> nationalist, h -> home, s -> supply-01, d -> drain-01, p -> promise-01, r -> resource, c -> consume-01, c2 -> country))),[Ljava.lang.String;@61fc0ce6,Annotation([Ljava.lang.String;@6ab3024b,[Ljava.lang.String;@e5bc0a7,[Ljava.lang.String;@29c51b4e),Annotation([Ljava.lang.String;@4b83b34e,[Ljava.lang.String;@3370ec9d,[Ledu.cmu.lti.nlp.amr.Dependency;@3abe51cd),Annotation([Ljava.lang.String;@24ec87dc,[Ljava.lang.String;@24cb8f74,[Ljava.lang.String;@30371b8b),Annotation([Ljava.lang.String;@71f15b67,[Ljava.lang.String;@1ca801a2,[Ledu.cmu.lti.nlp.amr.Entity;@5a034160))
AMR:
(c / consume-01, ARG1, h / home)
(d / drain-01, ARG1, r / resource)
(p / promise-01, ARG0, n / nationalist)
(p / promise-01, ARG1, d / drain-01)
(r / resource, poss, c2 / country)
(s / supply-01, ARG0, c2 / country)
(s / supply-01, ARG1, c / consume-01)

Decoded in 33,401 microseconds
Sentence: oh no i can promise you that

Spans:
Span 3-4:  can => possible
Span 2-3:  i => i
Span 1-2:  no => -
Span 4-5:  promise => promise-01
Span 5-6:  you => you

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),you,you,false), Span(4,5,List(1),promise,promise-01,false), Span(3,4,List(2),can,possible,false), Span(2,3,List(3),i,i,false), Span(1,2,List(4),no,-,false)),Map(2 -> possible, 1 -> promise-01, 4 -> -, 0 -> you, 3 -> i),Map(p2 -> possible, p -> promise-01, y -> you, i -> i, - -> -))),[Ljava.lang.String;@bb933cb,Annotation([Ljava.lang.String;@2bf75a70,[Ljava.lang.String;@7c52859c,[Ljava.lang.String;@dc20488),Annotation([Ljava.lang.String;@3cb783c6,[Ljava.lang.String;@342c5b4e,[Ledu.cmu.lti.nlp.amr.Dependency;@4c1e78a4),Annotation([Ljava.lang.String;@64827e06,[Ljava.lang.String;@331fef77,[Ljava.lang.String;@75a287d9),Annotation([Ljava.lang.String;@184f3e5,[Ljava.lang.String;@3fa8402a,[Ledu.cmu.lti.nlp.amr.Entity;@3f0ca60c))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, - / -)
(p / promise-01, ARG2, y / you)
(p / promise-01, mod, p2 / possible)

Decoded in 57,465 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@57697e2a,Annotation([Ljava.lang.String;@4eda243b,[Ljava.lang.String;@5380c5ee,[Ljava.lang.String;@2b42b716),Annotation([Ljava.lang.String;@29021b8a,[Ljava.lang.String;@495e160e,[Ledu.cmu.lti.nlp.amr.Dependency;@3ffa16c3),Annotation([Ljava.lang.String;@3bec7d05,[Ljava.lang.String;@2303f1ff,[Ljava.lang.String;@5804ae4e),Annotation([Ljava.lang.String;@1b4fb007,[Ljava.lang.String;@cada993,[Ledu.cmu.lti.nlp.amr.Entity;@5d57f865))
AMR:


Decoded in 1,201 microseconds
Sentence: professor hartt told the court that he hoped the money would be a bonus promised by mr de bry

Spans:
Span 13-14:  bonus => bonus
Span 4-5:  court => court
Span 6-7:  he => he
Span 7-8:  hoped => hope-01
Span 9-10:  money => money
Span 0-1:  professor => (have-org-role-91 :ARG2 professor)
Span 14-15:  promised => promise-01
Span 2-3:  told => tell-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),promised,promise-01,false), Span(13,14,List(1),bonus,bonus,false), Span(9,10,List(2),money,money,false), Span(7,8,List(3),hoped,hope-01,false), Span(6,7,List(4),he,he,false), Span(4,5,List(5),court,court,false), Span(2,3,List(6),told,tell-01,false), Span(0,1,List(8, 7),professor,(have-org-role-91 :ARG2 professor),false)),Map(2 -> money, 5 -> court, 8 -> professor, 7 -> have-org-role-91, 1 -> bonus, 4 -> he, 6 -> tell-01, 0 -> promise-01, 3 -> hope-01),Map(h -> hope-01, t -> tell-01, h2 -> he, b -> bonus, p2 -> professor, m -> money, p -> promise-01, h3 -> have-org-role-91, c -> court))),[Ljava.lang.String;@3a74dec3,Annotation([Ljava.lang.String;@4eccf230,[Ljava.lang.String;@713055ba,[Ljava.lang.String;@1c4c6064),Annotation([Ljava.lang.String;@5a4c53bf,[Ljava.lang.String;@490e4ee9,[Ledu.cmu.lti.nlp.amr.Dependency;@4a5ec877),Annotation([Ljava.lang.String;@14bb22c6,[Ljava.lang.String;@9e7ffcc,[Ljava.lang.String;@5e4aaf28),Annotation([Ljava.lang.String;@79319b74,[Ljava.lang.String;@27d51ad5,[Ledu.cmu.lti.nlp.amr.Entity;@17d4aa61))
AMR:
(b / bonus, domain, m / money)
(h / hope-01, ARG0, h2 / he)
(h / hope-01, ARG1, m / money)
(h3 / have-org-role-91, ARG0, h2 / he)
(h3 / have-org-role-91, ARG2, p2 / professor)
(p / promise-01, ARG1, b / bonus)
(t / tell-01, ARG0, h2 / he)
(t / tell-01, ARG2, c / court)

Decoded in 96,117 microseconds
Sentence: christ all bloody mighty she was thinking ive landed myself a good one here  you can come twice for that she promised and showed him the tip of her tongue

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = christ all bloody mighty she was thinking ive landed myself a good one here  you can come twice for that she promised and showed him the tip of her tongue
myTokenized = christ all bloody mighty she was thinking ive landed myself a good one here you can come twice for that she promised and showed him the tip of her tongue
i = 14
prefix = List(christ, all, bloody, mighty, she, was, thinking, ive, landed, myself, a, good, one, here, you)
regexr = \Qc\E ?\Qh\E ?\Qr\E ?\Qi\E ?\Qs\E ?\Qt\E ?\Qa\E ?\Ql\E ?\Ql\E ?\Qb\E ?\Ql\E ?\Qo\E ?\Qo\E ?\Qd\E ?\Qy\E ?\Qm\E ?\Qi\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qy\E ?\Qs\E ?\Qh\E ?\Qe\E ?\Qw\E ?\Qa\E ?\Qs\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qn\E ?\Qk\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qi\E ?\Qv\E ?\Qe\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Qd\E ?\Qm\E ?\Qy\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qf\E ?\Qa\E ?\Qg\E ?\Qo\E ?\Qo\E ?\Qd\E ?\Qo\E ?\Qn\E ?\Qe\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qy\E ?\Qo\E ?\Qu\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the president tried to soothe the unions by promising that as inflation drops to zero in a few weeks real pay will increase

Spans:
Span 12-13:  drops => drop-01
Span 17-18:  few => few
Span 22-23:  increase => increase-01
Span 11-12:  inflation => inflation
Span 20-21:  pay => pay-01
Span 1-2:  president => (have-org-role-91 :ARG2 president)
Span 8-9:  promising => promise-01
Span 19-20:  real => real
Span 2-3:  tried => try-01
Span 6-7:  unions => union
Span 18-19:  weeks => (temporal-quantity :unit week)
Span 14-15:  zero => zero

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),increase,increase-01,false), Span(20,21,List(1),pay,pay-01,false), Span(19,20,List(2),real,real,false), Span(18,19,List(4, 3),weeks,(temporal-quantity :unit week),false), Span(17,18,List(5),few,few,false), Span(14,15,List(6),zero,zero,false), Span(12,13,List(7),drops,drop-01,false), Span(11,12,List(8),inflation,inflation,false), Span(8,9,List(9),promising,promise-01,false), Span(6,7,List(10),unions,union,false), Span(2,3,List(11),tried,try-01,false), Span(1,2,List(13, 12),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> real, 5 -> few, 12 -> have-org-role-91, 8 -> inflation, 7 -> drop-01, 1 -> pay-01, 4 -> week, 11 -> try-01, 6 -> zero, 0 -> increase-01, 9 -> promise-01, 3 -> temporal-quantity, 10 -> union, 13 -> president),Map(w -> week, z -> zero, h -> have-org-role-91, t -> temporal-quantity, p2 -> promise-01, d -> drop-01, p -> pay-01, i2 -> inflation, t2 -> try-01, i -> increase-01, r -> real, u -> union, f -> few, p3 -> president))),[Ljava.lang.String;@1e06d723,Annotation([Ljava.lang.String;@53164a3b,[Ljava.lang.String;@5c63921a,[Ljava.lang.String;@d0d1859),Annotation([Ljava.lang.String;@56b981c0,[Ljava.lang.String;@2cf590bb,[Ledu.cmu.lti.nlp.amr.Dependency;@2df0fc0c),Annotation([Ljava.lang.String;@28338f64,[Ljava.lang.String;@510b02da,[Ljava.lang.String;@29e85fc7),Annotation([Ljava.lang.String;@56e8174f,[Ljava.lang.String;@1f52701c,[Ledu.cmu.lti.nlp.amr.Entity;@5d3e4e54))
AMR:
(d / drop-01, ARG0, i2 / inflation)
(d / drop-01, ARG1, z / zero)
(f / few, op, t / temporal-quantity)
(h / have-org-role-91, ARG2, p3 / president)
(i / increase-01, ARG0, p / pay-01)
(i / increase-01, purpose, d / drop-01)
(p / pay-01, location, t / temporal-quantity)
(p / pay-01, mod, r / real)
(p2 / promise-01, ARG0, u / union)
(p2 / promise-01, ARG1, i / increase-01)
(t / temporal-quantity, unit, w / week)
(t2 / try-01, ARG0, p3 / president)
(t2 / try-01, ARG1, u / union)

Decoded in 106,548 microseconds
Sentence:   among the firms current commissions the new glyndebourne opera house which will have three fullsize stages promises to be among the most challenging

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   among the firms current commissions the new glyndebourne opera house which will have three fullsize stages promises to be among the most challenging
myTokenized = among the firms current commissions the new glyndebourne opera house which will have three fullsize stages promises to be among the most challenging
i = 0
prefix = List(among)
regexr = \Qa\E ?\Qm\E ?\Qo\E ?\Qn\E ?\Qg\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: tadeusz mazowiecki polands first noncommunist prime minister since the war yesterday promised his soviet hosts that the country would fully honour its commitments within the warsaw pact and the east blocs trading organisation comecon writes rupert cornwell

NER Entity: (country :name (name :op "soviet"))
NER Entity: (organization :name (name :op "warsaw" :op "pact"))
Spans:
Span 27-28:  and => and
Span 30-31:  blocs => bloc
Span 22-23:  commitments => commit-01
Span 17-18:  country => country
Span 29-30:  east => east
Span 19-20:  fully => full
Span 20-21:  honour => honor-01
Span 6-7:  minister => (have-org-role-91 :ARG2 minister)
Span 32-33:  organisation => organize-01
Span 5-6:  prime => prime
Span 11-12:  promised => promise-01
Span 7-8:  since => since
Span 31-32:  trading => trade-01
Span 9-10:  war => war
Span 25-27:  warsaw pact => (organization :name (name :op "warsaw" :op "pact"))
Span 23-24:  within => within
Span 34-35:  writes => write-01
Span 10-11:  yesterday => yesterday

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),writes,write-01,false), Span(32,33,List(1),organisation,organize-01,false), Span(31,32,List(2),trading,trade-01,false), Span(30,31,List(3),blocs,bloc,false), Span(29,30,List(4),east,east,false), Span(27,28,List(5),and,and,false), Span(25,27,List(9, 8, 7, 6),warsaw pact,(organization :name (name :op "warsaw" :op "pact")),false), Span(23,24,List(10),within,within,false), Span(22,23,List(11),commitments,commit-01,false), Span(20,21,List(12),honour,honor-01,false), Span(19,20,List(13),fully,full,false), Span(17,18,List(14),country,country,false), Span(11,12,List(15),promised,promise-01,false), Span(10,11,List(16),yesterday,yesterday,false), Span(9,10,List(17),war,war,false), Span(7,8,List(18),since,since,false), Span(6,7,List(20, 19),minister,(have-org-role-91 :ARG2 minister),false), Span(5,6,List(21),prime,prime,false)),Map(2 -> trade-01, 5 -> and, 12 -> honor-01, 15 -> promise-01, 8 -> "warsaw", 21 -> prime, 18 -> since, 7 -> name, 17 -> war, 1 -> organize-01, 4 -> east, 11 -> commit-01, 14 -> country, 20 -> minister, 6 -> organization, 0 -> write-01, 9 -> "pact", 16 -> yesterday, 19 -> have-org-role-91, 3 -> bloc, 10 -> within, 13 -> full),Map(e -> east, w -> write-01, n -> name, h -> honor-01, h2 -> have-org-role-91, t -> trade-01, b -> bloc, p2 -> prime, s -> since, w3 -> war, m -> minister, y -> yesterday, p -> promise-01, a -> and, o2 -> organization, w2 -> within, c -> commit-01, f -> full, o -> organize-01, c2 -> country))),[Ljava.lang.String;@2be29df9,Annotation([Ljava.lang.String;@2af15cf1,[Ljava.lang.String;@4c0ce83d,[Ljava.lang.String;@636323cc),Annotation([Ljava.lang.String;@1c3590e,[Ljava.lang.String;@400ba709,[Ledu.cmu.lti.nlp.amr.Dependency;@3d0360b8),Annotation([Ljava.lang.String;@28c2ef53,[Ljava.lang.String;@15ee470d,[Ljava.lang.String;@4e7ab1ba),Annotation([Ljava.lang.String;@592a5296,[Ljava.lang.String;@69942395,[Ledu.cmu.lti.nlp.amr.Entity;@7cac4159))
AMR:
(a / and, op, e / east)
(a / and, op, h / honor-01)
(a / and, op, p / promise-01)
(a / and, op, w / write-01)
(h / honor-01, ARG0, c2 / country)
(h / honor-01, ARG1, c / commit-01)
(h / honor-01, degree, f / full)
(h / honor-01, duration, w2 / within)
(h2 / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(n / name, op, "pact")
(n / name, op, "warsaw")
(o / organize-01, ARG1, t / trade-01)
(o2 / organization, name, n / name)
(p / promise-01, ARG0, w3 / war)
(p / promise-01, ARG1, h2 / have-org-role-91)
(p / promise-01, time, y / yesterday)
(s / since, op, p / promise-01)
(w / write-01, ARG0, b / bloc)
(w / write-01, ARG1, o / organize-01)
(w2 / within, op, o2 / organization)

Decoded in 274,365 microseconds
Sentence: they had after all gone into the series promising a 30 result

Spans:
Span 10-11:  30 => 30
Span 2-3:  after => after
Span 3-4:  all => all
Span 8-9:  promising => promise-01
Span 11-12:  result => result-01
Span 7-8:  series => series
Span 0-1:  they => they

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),result,result-01,false), Span(10,11,List(1),30,30,false), Span(8,9,List(2),promising,promise-01,false), Span(7,8,List(3),series,series,false), Span(3,4,List(4),all,all,false), Span(2,3,List(5),after,after,false), Span(0,1,List(6),they,they,false)),Map(2 -> promise-01, 5 -> after, 1 -> 30, 4 -> all, 6 -> they, 0 -> result-01, 3 -> series),Map(t -> they, s -> series, p -> promise-01, a -> all, a2 -> after, r -> result-01, 3 -> 30))),[Ljava.lang.String;@10f67a01,Annotation([Ljava.lang.String;@25c3e05a,[Ljava.lang.String;@5ebe4814,[Ljava.lang.String;@1e6e49a4),Annotation([Ljava.lang.String;@5aa4bd97,[Ljava.lang.String;@759b32fe,[Ledu.cmu.lti.nlp.amr.Dependency;@2030fe04),Annotation([Ljava.lang.String;@7074c91e,[Ljava.lang.String;@3400a40,[Ljava.lang.String;@6160f16a),Annotation([Ljava.lang.String;@23899818,[Ljava.lang.String;@1e6061e2,[Ledu.cmu.lti.nlp.amr.Entity;@49ba4c02))
AMR:
(a2 / after, op, a / all)
(p / promise-01, ARG0, s / series)
(p / promise-01, ARG1, t / they)
(p / promise-01, ARG2, r / result-01)
(r / result-01, quant, 3 / 30)
(t / they, mod, a2 / after)

Decoded in 90,005 microseconds
Sentence: if this promises significantly more than could be raised in a flotation a formal auction will be initiated

Spans:
Span 14-15:  auction => auction-01
Span 6-7:  could => possible
Span 13-14:  formal => formal
Span 17-18:  initiated => initiate-01
Span 2-3:  promises => promise-01
Span 8-9:  raised => raise-01
Span 3-4:  significantly => significant
Span 1-2:  this => this

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),initiated,initiate-01,false), Span(14,15,List(1),auction,auction-01,false), Span(13,14,List(2),formal,formal,false), Span(8,9,List(3),raised,raise-01,false), Span(6,7,List(4),could,possible,false), Span(3,4,List(5),significantly,significant,false), Span(2,3,List(6),promises,promise-01,false), Span(1,2,List(7),this,this,false)),Map(2 -> formal, 5 -> significant, 7 -> this, 1 -> auction-01, 4 -> possible, 6 -> promise-01, 0 -> initiate-01, 3 -> raise-01),Map(t -> this, p2 -> promise-01, s -> significant, p -> possible, a -> auction-01, r -> raise-01, i -> initiate-01, f -> formal))),[Ljava.lang.String;@65d43d1e,Annotation([Ljava.lang.String;@50f8b0cc,[Ljava.lang.String;@771f4a9b,[Ljava.lang.String;@275b4336),Annotation([Ljava.lang.String;@5899a269,[Ljava.lang.String;@4e75c8f0,[Ledu.cmu.lti.nlp.amr.Dependency;@16db2cce),Annotation([Ljava.lang.String;@f5a941b,[Ljava.lang.String;@3b1807d,[Ljava.lang.String;@7a6a906f),Annotation([Ljava.lang.String;@6a30a632,[Ljava.lang.String;@1fef5315,[Ledu.cmu.lti.nlp.amr.Entity;@19379814))
AMR:
(a / auction-01, ARG1, p2 / promise-01)
(a / auction-01, mod, f / formal)
(i / initiate-01, ARG1, a / auction-01)
(p / possible, domain, r / raise-01)
(p2 / promise-01, ARG0, t / this)
(p2 / promise-01, ARG1, r / raise-01)
(r / raise-01, ARG1, s / significant)

Decoded in 48,414 microseconds
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@10e155fb,Annotation([Ljava.lang.String;@39d3da65,[Ljava.lang.String;@3a73a8c,[Ljava.lang.String;@57f4bf33),Annotation([Ljava.lang.String;@534da62,[Ljava.lang.String;@50ed5a99,[Ledu.cmu.lti.nlp.amr.Dependency;@ed71c51),Annotation([Ljava.lang.String;@4c841173,[Ljava.lang.String;@7295bc43,[Ljava.lang.String;@447b0d7a),Annotation([Ljava.lang.String;@6ab1e7b5,[Ljava.lang.String;@45e352cc,[Ledu.cmu.lti.nlp.amr.Entity;@4f50f2ec))
AMR:


Decoded in 1,177 microseconds
Sentence: the us has promised to step up and improve the quality of arms supplies in the hope that the mojahedin win a victory by the end of the summer

Spans:
Span 7-8:  and => and
Span 12-13:  arms => arm
Span 16-17:  hope => hope-01
Span 8-9:  improve => improve-01
Span 3-4:  promised => promise-01
Span 10-11:  quality => quality
Span 28-29:  summer => summer
Span 13-14:  supplies => supply-01
Span 20-21:  win => win-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),summer,summer,false), Span(20,21,List(1),win,win-01,false), Span(16,17,List(2),hope,hope-01,false), Span(13,14,List(3),supplies,supply-01,false), Span(12,13,List(4),arms,arm,false), Span(10,11,List(5),quality,quality,false), Span(8,9,List(6),improve,improve-01,false), Span(7,8,List(7),and,and,false), Span(3,4,List(8),promised,promise-01,false)),Map(2 -> hope-01, 5 -> quality, 8 -> promise-01, 7 -> and, 1 -> win-01, 4 -> arm, 6 -> improve-01, 0 -> summer, 3 -> supply-01),Map(w -> win-01, q -> quality, h -> hope-01, s2 -> supply-01, s -> summer, p -> promise-01, a -> arm, a2 -> and, i -> improve-01))),[Ljava.lang.String;@4b7c8ca2,Annotation([Ljava.lang.String;@5df50665,[Ljava.lang.String;@1770114,[Ljava.lang.String;@2be7c8cc),Annotation([Ljava.lang.String;@7e2fdf98,[Ljava.lang.String;@7900b4e0,[Ledu.cmu.lti.nlp.amr.Dependency;@1d631c30),Annotation([Ljava.lang.String;@55cfa262,[Ljava.lang.String;@32adfbf1,[Ljava.lang.String;@3c77a535),Annotation([Ljava.lang.String;@52ff5996,[Ljava.lang.String;@7a52b16b,[Ledu.cmu.lti.nlp.amr.Entity;@4afe268a))
AMR:
(a2 / and, op, i / improve-01)
(a2 / and, op, s2 / supply-01)
(h / hope-01, ARG1, w / win-01)
(i / improve-01, ARG1, q / quality)
(p / promise-01, ARG1, a2 / and)
(q / quality, poss, a / arm)
(s2 / supply-01, ARG1, w / win-01)
(w / win-01, ARG1, s / summer)

Decoded in 56,877 microseconds
Sentence: isnt that just typical  well have to get her to open up somehow i promised the girls id give them the story from the horses mouth the minute i got here

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = isnt that just typical  well have to get her to open up somehow i promised the girls id give them the story from the horses mouth the minute i got here
myTokenized = isnt that just typical well have to get her to open up somehow i promised the girls id give them the story from the horses mouth the minute i got here
i = 4
prefix = List(isnt, that, just, typical, well)
regexr = \Qi\E ?\Qs\E ?\Qn\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qj\E ?\Qu\E ?\Qs\E ?\Qt\E ?\Qt\E ?\Qy\E ?\Qp\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Ql\E ?\Qw\E ?\Qe\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: if you promise to behave yourself you can stay in the office for tonight

Spans:
Span 4-5:  behave => behave-01
Span 7-8:  can => possible
Span 11-12:  office => office
Span 2-3:  promise => promise-01
Span 8-9:  stay => stay-01
Span 13-14:  tonight => tonight
Span 6-7:  you => you
Span 1-2:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),tonight,tonight,false), Span(11,12,List(1),office,office,false), Span(8,9,List(2),stay,stay-01,false), Span(7,8,List(3),can,possible,false), Span(6,7,List(4),you,you,false), Span(4,5,List(5),behave,behave-01,false), Span(2,3,List(6),promise,promise-01,false), Span(1,2,List(7),you,you,false)),Map(2 -> stay-01, 5 -> behave-01, 7 -> you, 1 -> office, 4 -> you, 6 -> promise-01, 0 -> tonight, 3 -> possible),Map(b -> behave-01, t -> tonight, p2 -> promise-01, s -> stay-01, y -> you, p -> possible, o -> office, y2 -> you))),[Ljava.lang.String;@f36d42c,Annotation([Ljava.lang.String;@58a39c81,[Ljava.lang.String;@5d78069d,[Ljava.lang.String;@72fa5d5b),Annotation([Ljava.lang.String;@13073c56,[Ljava.lang.String;@400a3bdc,[Ledu.cmu.lti.nlp.amr.Dependency;@5fe0095c),Annotation([Ljava.lang.String;@6d86a830,[Ljava.lang.String;@238c1f7d,[Ljava.lang.String;@446759c6),Annotation([Ljava.lang.String;@5d36f93f,[Ljava.lang.String;@4425c6e8,[Ledu.cmu.lti.nlp.amr.Entity;@c25cc4c))
AMR:
(b / behave-01, ARG0, y2 / you)
(b / behave-01, ARG1, y / you)
(o / office, location, t / tonight)
(p / possible, domain, s / stay-01)
(p2 / promise-01, ARG2, b / behave-01)
(s / stay-01, ARG0, y / you)
(s / stay-01, location, o / office)

Decoded in 27,208 microseconds
Sentence: its being reported by an american television network that iraq is saying that all foreign hostages in saddam husseins human shield can leave kuwait and baghdad if president bush promises not to launch an attack

NER Entity: (thing :name (name :op "american"))
NER Entity: (country :name (name :op "iraq"))
NER Entity: (country :name (name :op "kuwait"))
NER Entity: (country :name (name :op "baghdad"))
NER Entity: (thing :name (name :op "american"))
Spans:
Span 13-14:  all => all
Span 5-6:  american => (country :name (name :op "America"))
Span 24-25:  and => and
Span 34-35:  attack => attack-01
Span 28-29:  bush => bush-league
Span 21-22:  can => possible
Span 14-15:  foreign => foreign
Span 15-16:  hostages => hostage
Span 19-20:  human => human
Span 32-33:  launch => launch-01
Span 22-23:  leave => leave-01
Span 7-8:  network => network
Span 27-28:  president => (have-org-role-91 :ARG2 president)
Span 29-30:  promises => promise-01
Span 2-3:  reported => report-01
Span 17-18:  saddam => (person :name (name :op "Saddam"))
Span 11-12:  saying => say-01
Span 20-21:  shield => shield
Span 6-7:  television => television

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),attack,attack-01,false), Span(32,33,List(1),launch,launch-01,false), Span(29,30,List(2),promises,promise-01,false), Span(28,29,List(3),bush,bush-league,false), Span(27,28,List(5, 4),president,(have-org-role-91 :ARG2 president),false), Span(24,25,List(6),and,and,false), Span(22,23,List(7),leave,leave-01,false), Span(21,22,List(8),can,possible,false), Span(20,21,List(9),shield,shield,false), Span(19,20,List(10),human,human,false), Span(17,18,List(13, 12, 11),saddam,(person :name (name :op "Saddam")),false), Span(15,16,List(14),hostages,hostage,false), Span(14,15,List(15),foreign,foreign,false), Span(13,14,List(16),all,all,false), Span(11,12,List(17),saying,say-01,false), Span(7,8,List(18),network,network,false), Span(6,7,List(19),television,television,false), Span(5,6,List(22, 21, 20),american,(country :name (name :op "America")),false), Span(2,3,List(23),reported,report-01,false)),Map(2 -> promise-01, 5 -> president, 12 -> name, 15 -> foreign, 8 -> possible, 21 -> name, 18 -> network, 7 -> leave-01, 17 -> say-01, 1 -> launch-01, 23 -> report-01, 4 -> have-org-role-91, 11 -> person, 14 -> hostage, 20 -> country, 6 -> and, 22 -> "America", 0 -> attack-01, 9 -> shield, 16 -> all, 19 -> television, 3 -> bush-league, 10 -> human, 13 -> "Saddam"),Map(n -> name, h -> have-org-role-91, s2 -> say-01, h2 -> human, t -> television, b -> bush-league, p2 -> president, a3 -> all, s -> shield, p -> promise-01, n3 -> name, a -> attack-01, p4 -> person, l2 -> leave-01, r -> report-01, a2 -> and, c -> country, h3 -> hostage, l -> launch-01, f -> foreign, p3 -> possible, n2 -> network))),[Ljava.lang.String;@731563a4,Annotation([Ljava.lang.String;@140df03,[Ljava.lang.String;@49f13e99,[Ljava.lang.String;@7d44d4bb),Annotation([Ljava.lang.String;@31ea813d,[Ljava.lang.String;@1acae565,[Ledu.cmu.lti.nlp.amr.Dependency;@7e9a57a0),Annotation([Ljava.lang.String;@46ef0a4f,[Ljava.lang.String;@778decea,[Ljava.lang.String;@6bd33f8),Annotation([Ljava.lang.String;@6f9ee23c,[Ljava.lang.String;@28170a64,[Ledu.cmu.lti.nlp.amr.Entity;@ab3fcc))
AMR:
(a / attack-01, ARG1, a3 / all)
(c / country, name, n3 / name)
(h / have-org-role-91, ARG0, b / bush-league)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(h3 / hostage, mod, f / foreign)
(l / launch-01, ARG0, h3 / hostage)
(l / launch-01, ARG1, a / attack-01)
(l2 / leave-01, ARG0, s / shield)
(l2 / leave-01, ARG1, s2 / say-01)
(l2 / leave-01, ARG2, a2 / and)
(l2 / leave-01, condition, p / promise-01)
(n / name, op, "Saddam")
(n2 / network, mod, t / television)
(n3 / name, op, "America")
(p / promise-01, ARG0, b / bush-league)
(p / promise-01, ARG1, p4 / person)
(p / promise-01, ARG2, l / launch-01)
(p3 / possible, domain, l2 / leave-01)
(p4 / person, name, n / name)
(r / report-01, ARG1, s2 / say-01)
(s / shield, mod, h2 / human)
(s2 / say-01, ARG1, n2 / network)

Decoded in 1,057,558 microseconds
Sentence: president gorbachev promised yesterday to lift the blockade on lithuania if the rebel republic froze its declaration of independence while negotiations with moscow went ahead

NER Entity: (country :name (name :op "lithuania"))
NER Entity: (country :name (name :op "moscow"))
Spans:
Span 24-25:  ahead => ahead
Span 7-8:  blockade => blockade-01
Span 16-17:  declaration => declare-02
Span 14-15:  froze => freeze-02
Span 18-19:  independence => (depend-01 :polarity -)
Span 5-6:  lift => lift-01
Span 20-21:  negotiations => negotiate-01
Span 0-1:  president => (have-org-role-91 :ARG2 president)
Span 2-3:  promised => promise-01
Span 12-13:  rebel => rebel-01
Span 13-14:  republic => republic
Span 3-4:  yesterday => yesterday

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),ahead,ahead,false), Span(20,21,List(1),negotiations,negotiate-01,false), Span(18,19,List(3, 2),independence,(depend-01 :polarity -),false), Span(16,17,List(4),declaration,declare-02,false), Span(14,15,List(5),froze,freeze-02,false), Span(13,14,List(6),republic,republic,false), Span(12,13,List(7),rebel,rebel-01,false), Span(7,8,List(8),blockade,blockade-01,false), Span(5,6,List(9),lift,lift-01,false), Span(3,4,List(10),yesterday,yesterday,false), Span(2,3,List(11),promised,promise-01,false), Span(0,1,List(13, 12),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> depend-01, 5 -> freeze-02, 12 -> have-org-role-91, 8 -> blockade-01, 7 -> rebel-01, 1 -> negotiate-01, 4 -> declare-02, 11 -> promise-01, 6 -> republic, 0 -> ahead, 9 -> lift-01, 3 -> -, 10 -> yesterday, 13 -> president),Map(n -> negotiate-01, h -> have-org-role-91, b -> blockade-01, p2 -> president, d -> depend-01, r2 -> rebel-01, y -> yesterday, p -> promise-01, a -> ahead, d2 -> declare-02, r -> republic, l -> lift-01, f -> freeze-02))),[Ljava.lang.String;@6ae96a6b,Annotation([Ljava.lang.String;@249cda3,[Ljava.lang.String;@3b5b8981,[Ljava.lang.String;@76a09298),Annotation([Ljava.lang.String;@27f87600,[Ljava.lang.String;@290b0e80,[Ledu.cmu.lti.nlp.amr.Dependency;@14e50a8d),Annotation([Ljava.lang.String;@4917b9b2,[Ljava.lang.String;@34a07a9b,[Ljava.lang.String;@13d1711b),Annotation([Ljava.lang.String;@1b58adc7,[Ljava.lang.String;@5af8f1d7,[Ledu.cmu.lti.nlp.amr.Entity;@dcd88ea))
AMR:
(d / depend-01, ARG1, n / negotiate-01)
(d / depend-01, polarity, -)
(d2 / declare-02, ARG0, r / republic)
(d2 / declare-02, ARG1, d / depend-01)
(f / freeze-02, ARG1, d2 / declare-02)
(h / have-org-role-91, ARG1, p / promise-01)
(h / have-org-role-91, ARG2, p2 / president)
(l / lift-01, ARG1, b / blockade-01)
(p / promise-01, ARG1, a / ahead)
(p / promise-01, ARG2, l / lift-01)
(p / promise-01, condition, f / freeze-02)
(p / promise-01, time, y / yesterday)
(r2 / rebel-01, ARG0, r / republic)

Decoded in 96,827 microseconds
Sentence: richard luce the minister of arts has promised that the government will match pound for pound the 2m offered to the museum by the developers mepc

Spans:
Span 5-6:  arts => art
Span 24-25:  developers => (person :ARG0-of develop-02)
Span 12-13:  match => match-01
Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Span 18-19:  offered => offer-01
Span 7-8:  promised => promise-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),developers,(person :ARG0-of develop-02),false), Span(18,19,List(2),offered,offer-01,false), Span(12,13,List(3),match,match-01,false), Span(7,8,List(4),promised,promise-01,false), Span(5,6,List(5),arts,art,false), Span(3,4,List(7, 6),minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> offer-01, 5 -> art, 7 -> minister, 1 -> develop-02, 4 -> promise-01, 6 -> have-org-role-91, 0 -> person, 3 -> match-01),Map(h -> have-org-role-91, m2 -> minister, p2 -> promise-01, m -> match-01, d -> develop-02, p -> person, a -> art, o -> offer-01))),[Ljava.lang.String;@30d7c1ba,Annotation([Ljava.lang.String;@24efb363,[Ljava.lang.String;@74ea3b86,[Ljava.lang.String;@3dea1661),Annotation([Ljava.lang.String;@53635a08,[Ljava.lang.String;@1fabedfd,[Ledu.cmu.lti.nlp.amr.Dependency;@50958d49),Annotation([Ljava.lang.String;@a6edcf4,[Ljava.lang.String;@746c1c85,[Ljava.lang.String;@65c49b79),Annotation([Ljava.lang.String;@4ebb5921,[Ljava.lang.String;@6dd8ade8,[Ledu.cmu.lti.nlp.amr.Entity;@2c8192af))
AMR:
(d / develop-02, ARG0, p / person)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, p2 / promise-01)
(h / have-org-role-91, ARG2, m2 / minister)
(o / offer-01, ARG1, h / have-org-role-91)
(p2 / promise-01, ARG0, a / art)
(p2 / promise-01, ARG1, m / match-01)

Decoded in 89,825 microseconds
Sentence: she had promised to the next day and was on her way out the door feeling tired but with racket in hand when the doctor called her

Spans:
Span 7-8:  and => and
Span 17-18:  but => contrast-01
Span 6-7:  day => day
Span 24-25:  doctor => doctor
Span 14-15:  door => door
Span 15-16:  feeling => feel-01
Span 21-22:  hand => hand
Span 5-6:  next => next
Span 2-3:  promised => promise-01
Span 0-1:  she => she
Span 16-17:  tired => tire-01
Span 11-12:  way => way

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),doctor,doctor,false), Span(21,22,List(1),hand,hand,false), Span(17,18,List(2),but,contrast-01,false), Span(16,17,List(3),tired,tire-01,false), Span(15,16,List(4),feeling,feel-01,false), Span(14,15,List(5),door,door,false), Span(11,12,List(6),way,way,false), Span(7,8,List(7),and,and,false), Span(6,7,List(8),day,day,false), Span(5,6,List(9),next,next,false), Span(2,3,List(10),promised,promise-01,false), Span(0,1,List(11),she,she,false)),Map(2 -> contrast-01, 5 -> door, 8 -> day, 7 -> and, 1 -> hand, 11 -> she, 4 -> feel-01, 6 -> way, 9 -> next, 0 -> doctor, 10 -> promise-01, 3 -> tire-01),Map(n -> next, w -> way, h -> hand, t -> tire-01, d3 -> day, s -> she, d -> doctor, p -> promise-01, a -> and, d2 -> door, c -> contrast-01, f -> feel-01))),[Ljava.lang.String;@6ec535fc,Annotation([Ljava.lang.String;@555b6c34,[Ljava.lang.String;@651cf5b3,[Ljava.lang.String;@5046eea1),Annotation([Ljava.lang.String;@60dcb533,[Ljava.lang.String;@39fc58f3,[Ledu.cmu.lti.nlp.amr.Dependency;@6633d742),Annotation([Ljava.lang.String;@55796279,[Ljava.lang.String;@143021c6,[Ljava.lang.String;@63f95884),Annotation([Ljava.lang.String;@7227563,[Ljava.lang.String;@6748ba3d,[Ledu.cmu.lti.nlp.amr.Entity;@57bb2fc4))
AMR:
(a / and, op, p / promise-01)
(c / contrast-01, ARG0, d2 / door)
(c / contrast-01, ARG1, t / tire-01)
(d3 / day, mod, n / next)
(f / feel-01, ARG0, s / she)
(f / feel-01, ARG1, t / tire-01)
(p / promise-01, ARG0, s / she)
(p / promise-01, ARG1, d / doctor)
(p / promise-01, ARG2, d3 / day)
(t / tire-01, ARG1, h / hand)
(w / way, location, d2 / door)

Decoded in 188,588 microseconds
Sentence: they have not been paid for aerial installation work which bsb had promised to subsidise

Spans:
Span 6-7:  aerial => aerial
Span 7-8:  installation => install-01
Span 4-5:  paid => pay-01
Span 12-13:  promised => promise-01
Span 14-15:  subsidise => subsidize-01
Span 0-1:  they => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),subsidise,subsidize-01,false), Span(12,13,List(1),promised,promise-01,false), Span(7,8,List(2),installation,install-01,false), Span(6,7,List(3),aerial,aerial,false), Span(4,5,List(4),paid,pay-01,false), Span(0,1,List(5),they,they,false)),Map(2 -> install-01, 5 -> they, 1 -> promise-01, 4 -> pay-01, 0 -> subsidize-01, 3 -> aerial),Map(t -> they, p2 -> pay-01, s -> subsidize-01, p -> promise-01, a -> aerial, i -> install-01))),[Ljava.lang.String;@423d19db,Annotation([Ljava.lang.String;@396c9ad6,[Ljava.lang.String;@929750e,[Ljava.lang.String;@c3eed5),Annotation([Ljava.lang.String;@3f74e257,[Ljava.lang.String;@12b7de4d,[Ledu.cmu.lti.nlp.amr.Dependency;@65639ad4),Annotation([Ljava.lang.String;@6e4a084c,[Ljava.lang.String;@3e66ee25,[Ljava.lang.String;@579cdf24),Annotation([Ljava.lang.String;@7bfde16b,[Ljava.lang.String;@58da7765,[Ledu.cmu.lti.nlp.amr.Entity;@6ed4b575))
AMR:
(i / install-01, ARG0, a / aerial)
(i / install-01, ARG1, s / subsidize-01)
(p / promise-01, ARG2, s / subsidize-01)
(p2 / pay-01, ARG1, t / they)
(s / subsidize-01, ARG1, p2 / pay-01)

Decoded in 19,080 microseconds
Sentence: he had promised to change sides and align himself with the noncommunist resistance after vietnamese troops withdrew in september

NER Entity: (thing :name (name :op "vietnamese"))
Spans:
Span 13-14:  after => after
Span 6-7:  and => and
Span 4-5:  change => change-01
Span 0-1:  he => he
Span 2-3:  promised => promise-01
Span 12-13:  resistance => resist-01
Span 18-19:  september => (date-entity :month 9)
Span 5-6:  sides => side
Span 15-16:  troops => troop
Span 16-17:  withdrew => withdraw-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),september,(date-entity :month 9),false), Span(16,17,List(2),withdrew,withdraw-01,false), Span(15,16,List(3),troops,troop,false), Span(13,14,List(4),after,after,false), Span(12,13,List(5),resistance,resist-01,false), Span(6,7,List(6),and,and,false), Span(5,6,List(7),sides,side,false), Span(4,5,List(8),change,change-01,false), Span(2,3,List(9),promised,promise-01,false), Span(0,1,List(10),he,he,false)),Map(2 -> withdraw-01, 5 -> resist-01, 8 -> change-01, 7 -> side, 1 -> 9, 4 -> after, 6 -> and, 9 -> promise-01, 0 -> date-entity, 10 -> he, 3 -> troop),Map(w -> withdraw-01, h -> he, t -> troop, s -> side, d -> date-entity, p -> promise-01, a -> after, a2 -> and, r -> resist-01, c -> change-01, 9 -> 9))),[Ljava.lang.String;@4ed54d2b,Annotation([Ljava.lang.String;@15bd6a7c,[Ljava.lang.String;@4699fe0a,[Ljava.lang.String;@27f566bc),Annotation([Ljava.lang.String;@602bd522,[Ljava.lang.String;@5db5dc81,[Ledu.cmu.lti.nlp.amr.Dependency;@4e9fc937),Annotation([Ljava.lang.String;@5c536234,[Ljava.lang.String;@66547346,[Ljava.lang.String;@325c2d26),Annotation([Ljava.lang.String;@4198339e,[Ljava.lang.String;@6f64ebb6,[Ledu.cmu.lti.nlp.amr.Entity;@4aaf32dc))
AMR:
(a / after, op, w / withdraw-01)
(a2 / and, op, w / withdraw-01)
(c / change-01, ARG1, s / side)
(d / date-entity, month, 9 / 9)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, a2 / and)
(p / promise-01, ARG2, c / change-01)
(r / resist-01, ARG1, c / change-01)
(w / withdraw-01, ARG1, t / troop)
(w / withdraw-01, time, d / date-entity)

Decoded in 87,344 microseconds
Sentence: what did you want anyway  i promised genevieve id keep an eye out for her sister

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = what did you want anyway  i promised genevieve id keep an eye out for her sister
myTokenized = what did you want anyway i promised genevieve id keep an eye out for her sister
i = 5
prefix = List(what, did, you, want, anyway, i)
regexr = \Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qd\E ?\Qi\E ?\Qd\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qw\E ?\Qa\E ?\Qn\E ?\Qt\E ?\Qa\E ?\Qn\E ?\Qy\E ?\Qw\E ?\Qa\E ?\Qy\E ?\Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the treacherous oak swayed above the tree that had promised the milk of paradise but had stood guard instead overtop the spilling of other fluids

Spans:
Span 4-5:  above => above
Span 14-15:  but => contrast-01
Span 18-19:  instead => instead
Span 11-12:  milk => milk
Span 23-24:  other => other
Span 13-14:  paradise => paradise
Span 9-10:  promised => promise-01
Span 16-17:  stood => stand-01
Span 3-4:  swayed => sway-02
Span 6-7:  tree => tree

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),other,other,false), Span(18,19,List(1),instead,instead,false), Span(16,17,List(2),stood,stand-01,false), Span(14,15,List(3),but,contrast-01,false), Span(13,14,List(4),paradise,paradise,false), Span(11,12,List(5),milk,milk,false), Span(9,10,List(6),promised,promise-01,false), Span(6,7,List(7),tree,tree,false), Span(4,5,List(8),above,above,false), Span(3,4,List(9),swayed,sway-02,false)),Map(2 -> stand-01, 5 -> milk, 8 -> above, 7 -> tree, 1 -> instead, 4 -> paradise, 6 -> promise-01, 9 -> sway-02, 0 -> other, 3 -> contrast-01),Map(s2 -> sway-02, t -> tree, p2 -> promise-01, s -> stand-01, m -> milk, p -> paradise, a -> above, i -> instead, c -> contrast-01, o -> other))),[Ljava.lang.String;@4e2f9ec4,Annotation([Ljava.lang.String;@18607df6,[Ljava.lang.String;@66edadfa,[Ljava.lang.String;@7e392ce0),Annotation([Ljava.lang.String;@5bb166dd,[Ljava.lang.String;@5bd86632,[Ledu.cmu.lti.nlp.amr.Dependency;@5c1d8bb9),Annotation([Ljava.lang.String;@17c04dee,[Ljava.lang.String;@523c5070,[Ljava.lang.String;@75c5133d),Annotation([Ljava.lang.String;@5d724632,[Ljava.lang.String;@795eac8b,[Ledu.cmu.lti.nlp.amr.Entity;@369217ed))
AMR:
(a / above, op, t / tree)
(c / contrast-01, ARG1, p2 / promise-01)
(c / contrast-01, ARG2, s / stand-01)
(i / instead, op, c / contrast-01)
(p2 / promise-01, ARG1, p / paradise)
(p2 / promise-01, ARG2, m / milk)
(s / stand-01, ARG0, t / tree)
(s2 / sway-02, ARG1, o / other)
(s2 / sway-02, ARG2, a / above)

Decoded in 126,598 microseconds
Sentence: only free elections which the communist party promises but is almost bound to lose will persuade people to stay in east germany or to return there from the west

NER Entity: (country :name (name :op "germany"))
Spans:
Span 10-11:  almost => almost
Span 8-9:  but => contrast-01
Span 5-7:  communist party => (political-party :name (name :op "Party" :op "Communist"))
Span 20-21:  east => east
Span 2-3:  elections => elect-01
Span 1-2:  free => free-41
Span 13-14:  lose => lose-02
Span 0-1:  only => only
Span 22-23:  or => or
Span 15-16:  persuade => persuade-01
Span 7-8:  promises => promise-01
Span 18-19:  stay => stay-01
Span 28-29:  west => west

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),west,west,false), Span(22,23,List(1),or,or,false), Span(20,21,List(2),east,east,false), Span(18,19,List(3),stay,stay-01,false), Span(15,16,List(4),persuade,persuade-01,false), Span(13,14,List(5),lose,lose-02,false), Span(10,11,List(6),almost,almost,false), Span(8,9,List(7),but,contrast-01,false), Span(7,8,List(8),promises,promise-01,false), Span(5,7,List(12, 11, 10, 9),communist party,(political-party :name (name :op "Party" :op "Communist")),false), Span(2,3,List(13),elections,elect-01,false), Span(1,2,List(14),free,free-41,false), Span(0,1,List(15),only,only,false)),Map(2 -> east, 5 -> lose-02, 12 -> "Communist", 15 -> only, 8 -> promise-01, 7 -> contrast-01, 1 -> or, 4 -> persuade-01, 11 -> "Party", 14 -> free-41, 6 -> almost, 0 -> west, 9 -> political-party, 3 -> stay-01, 10 -> name, 13 -> elect-01),Map(e -> east, w -> west, n -> name, p2 -> promise-01, e2 -> elect-01, s -> stay-01, p -> persuade-01, a -> almost, o2 -> only, c -> contrast-01, l -> lose-02, f -> free-41, o -> or, p3 -> political-party))),[Ljava.lang.String;@503fd07b,Annotation([Ljava.lang.String;@d906466,[Ljava.lang.String;@2af6b7f,[Ljava.lang.String;@4aba6039),Annotation([Ljava.lang.String;@12036483,[Ljava.lang.String;@1cbbddb2,[Ledu.cmu.lti.nlp.amr.Dependency;@71d7dfda),Annotation([Ljava.lang.String;@13a99b9a,[Ljava.lang.String;@6426a58b,[Ljava.lang.String;@253e7c0b),Annotation([Ljava.lang.String;@2941c947,[Ljava.lang.String;@1e05697a,[Ledu.cmu.lti.nlp.amr.Entity;@754fd7fb))
AMR:
(c / contrast-01, ARG1, p2 / promise-01)
(e2 / elect-01, ARG1, a / almost)
(e2 / elect-01, mod, o2 / only)
(f / free-41, ARG1, e2 / elect-01)
(l / lose-02, ARG0, p3 / political-party)
(l / lose-02, ARG1, p / persuade-01)
(n / name, op, "Communist")
(n / name, op, "Party")
(o / or, op, s / stay-01)
(p / persuade-01, ARG1, o / or)
(p2 / promise-01, ARG0, p3 / political-party)
(p2 / promise-01, ARG1, e2 / elect-01)
(p3 / political-party, name, n / name)
(s / stay-01, ARG0, w / west)
(s / stay-01, ARG1, e / east)

Decoded in 400,333 microseconds
Sentence:   chinas new party leader has sent a doubleedged message to hong kong promising that capitalism can continue after 1997 but repeating warnings against interference from hong kong in mainland affairs

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   chinas new party leader has sent a doubleedged message to hong kong promising that capitalism can continue after 1997 but repeating warnings against interference from hong kong in mainland affairs
myTokenized = chinas new party leader has sent a doubleedged message to hong kong promising that capitalism can continue after 1997 but repeating warnings against interference from hong kong in mainland affairs
i = 0
prefix = List(chinas)
regexr = \Qc\E ?\Qh\E ?\Qi\E ?\Qn\E ?\Qa\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: i promised them wed go up and see them next weekend

Spans:
Span 6-7:  and => and
Span 0-1:  i => i
Span 9-10:  next => next
Span 1-2:  promised => promise-01
Span 7-8:  see => see-01
Span 10-11:  weekend => weekend

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),weekend,weekend,false), Span(9,10,List(1),next,next,false), Span(7,8,List(2),see,see-01,false), Span(6,7,List(3),and,and,false), Span(1,2,List(4),promised,promise-01,false), Span(0,1,List(5),i,i,false)),Map(2 -> see-01, 5 -> i, 1 -> next, 4 -> promise-01, 0 -> weekend, 3 -> and),Map(n -> next, w -> weekend, s -> see-01, p -> promise-01, a -> and, i -> i))),[Ljava.lang.String;@72dbf050,Annotation([Ljava.lang.String;@457e4f19,[Ljava.lang.String;@677b15f3,[Ljava.lang.String;@41de3998),Annotation([Ljava.lang.String;@64974bf0,[Ljava.lang.String;@8faad28,[Ledu.cmu.lti.nlp.amr.Dependency;@17e21b3),Annotation([Ljava.lang.String;@7fd66f88,[Ljava.lang.String;@57348b49,[Ljava.lang.String;@3aa49259),Annotation([Ljava.lang.String;@a842f23,[Ljava.lang.String;@6c32a839,[Ledu.cmu.lti.nlp.amr.Entity;@71c26dad))
AMR:
(a / and, op, s / see-01)
(p / promise-01, ARG0, i / i)
(s / see-01, ARG0, i / i)
(s / see-01, time, w / weekend)
(w / weekend, mod, n / next)

Decoded in 14,574 microseconds
Sentence: for the opening game in the olympic stadium italy offer the prospect of a slow tactical game austria promise to play for a draw

NER Entity: (thing :name (name :op "olympic" :op "stadium"))
NER Entity: (country :name (name :op "italy"))
NER Entity: (country :name (name :op "austria"))
NER Entity: (country :name (name :op "italy"))
Spans:
Span 23-24:  draw => draw-02
Span 16-17:  game => game
Span 3-4:  game => game
Span 8-9:  italy => (country :name (name :op "Italy"))
Span 9-10:  offer => offer-01
Span 6-8:  olympic stadium => (thing :name (name :op "olympic" :op "stadium"))
Span 2-3:  opening => open-01
Span 20-21:  play => play-01
Span 18-19:  promise => promise-01
Span 11-12:  prospect => prospect
Span 15-16:  tactical => tactic

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),draw,draw-02,false), Span(20,21,List(1),play,play-01,false), Span(18,19,List(2),promise,promise-01,false), Span(16,17,List(3),game,game,false), Span(15,16,List(4),tactical,tactic,false), Span(11,12,List(5),prospect,prospect,false), Span(9,10,List(6),offer,offer-01,false), Span(8,9,List(9, 8, 7),italy,(country :name (name :op "Italy")),false), Span(6,8,List(13, 12, 11, 10),olympic stadium,(thing :name (name :op "olympic" :op "stadium")),false), Span(3,4,List(14),game,game,false), Span(2,3,List(15),opening,open-01,false)),Map(2 -> promise-01, 5 -> prospect, 12 -> "olympic", 15 -> open-01, 8 -> name, 7 -> country, 1 -> play-01, 4 -> tactic, 11 -> name, 14 -> game, 6 -> offer-01, 0 -> draw-02, 9 -> "Italy", 3 -> game, 10 -> thing, 13 -> "stadium"),Map(n -> name, t -> tactic, p2 -> promise-01, d -> draw-02, g2 -> game, p -> play-01, g -> game, o2 -> open-01, t2 -> thing, c -> country, o -> offer-01, p3 -> prospect, n2 -> name))),[Ljava.lang.String;@13aeb334,Annotation([Ljava.lang.String;@32772504,[Ljava.lang.String;@2c1f437e,[Ljava.lang.String;@38881bd3),Annotation([Ljava.lang.String;@6fdad6a3,[Ljava.lang.String;@841a0b4,[Ledu.cmu.lti.nlp.amr.Dependency;@c9d8da8),Annotation([Ljava.lang.String;@3bbf1710,[Ljava.lang.String;@7e833a14,[Ljava.lang.String;@595a37ef),Annotation([Ljava.lang.String;@320e59bd,[Ljava.lang.String;@4c25a0f7,[Ledu.cmu.lti.nlp.amr.Entity;@3a6adf2f))
AMR:
(c / country, name, n / name)
(d / draw-02, ARG1, t / tactic)
(g2 / game, location, c / country)
(n / name, op, "Italy")
(n2 / name, op, "olympic")
(n2 / name, op, "stadium")
(o / offer-01, ARG0, g2 / game)
(o / offer-01, ARG1, p2 / promise-01)
(o2 / open-01, ARG0, g2 / game)
(o2 / open-01, ARG1, t2 / thing)
(p / play-01, ARG1, d / draw-02)
(p2 / promise-01, ARG0, p3 / prospect)
(p2 / promise-01, ARG1, g / game)
(p2 / promise-01, ARG2, p / play-01)
(t2 / thing, name, n2 / name)

Decoded in 372,184 microseconds
Sentence: the actress playing in the western abandons her cowboy lover for the comic after he promises to take her to hollywood and put her name up in lights but the scandal that follows wrecks her career

Spans:
Span 6-7:  abandons => abandon-01
Span 13-14:  after => after
Span 21-22:  and => and
Span 28-29:  but => contrast-01
Span 35-36:  career => career
Span 14-15:  he => he
Span 20-21:  hollywood => (organization :name (name :op "Hollywood"))
Span 27-28:  lights => light
Span 2-3:  playing => play-01
Span 15-16:  promises => promise-01
Span 30-31:  scandal => scandal
Span 5-6:  western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),career,career,false), Span(30,31,List(1),scandal,scandal,false), Span(28,29,List(2),but,contrast-01,false), Span(27,28,List(3),lights,light,false), Span(21,22,List(4),and,and,false), Span(20,21,List(7, 6, 5),hollywood,(organization :name (name :op "Hollywood")),false), Span(15,16,List(8),promises,promise-01,false), Span(14,15,List(9),he,he,false), Span(13,14,List(10),after,after,false), Span(6,7,List(11),abandons,abandon-01,false), Span(5,6,List(14, 13, 12),western,(world-region :name (name :op "West")),false), Span(2,3,List(15),playing,play-01,false)),Map(2 -> contrast-01, 5 -> organization, 12 -> world-region, 15 -> play-01, 8 -> promise-01, 7 -> "Hollywood", 1 -> scandal, 4 -> and, 11 -> abandon-01, 14 -> "West", 6 -> name, 0 -> career, 9 -> he, 3 -> light, 10 -> after, 13 -> name),Map(n -> name, w -> world-region, h -> he, p2 -> play-01, a3 -> abandon-01, s -> scandal, p -> promise-01, a -> and, a2 -> after, c -> career, l -> light, o -> organization, c2 -> contrast-01, n2 -> name))),[Ljava.lang.String;@3e62a49f,Annotation([Ljava.lang.String;@3e25e2b8,[Ljava.lang.String;@2947bde8,[Ljava.lang.String;@2504df84),Annotation([Ljava.lang.String;@62ee6618,[Ljava.lang.String;@1170e466,[Ledu.cmu.lti.nlp.amr.Dependency;@aa2ed7c),Annotation([Ljava.lang.String;@4e956d58,[Ljava.lang.String;@343dd4b6,[Ljava.lang.String;@47581385),Annotation([Ljava.lang.String;@6769a55a,[Ljava.lang.String;@48e6ecc0,[Ledu.cmu.lti.nlp.amr.Entity;@30c156a4))
AMR:
(a / and, op, o / organization)
(a2 / after, op, p / promise-01)
(a3 / abandon-01, ARG0, l / light)
(a3 / abandon-01, ARG1, p2 / play-01)
(a3 / abandon-01, time, a2 / after)
(c / career, poss, h / he)
(c / career, poss, s / scandal)
(c2 / contrast-01, ARG1, p / promise-01)
(n / name, op, "Hollywood")
(n2 / name, op, "West")
(o / organization, name, n / name)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG2, o / organization)
(p2 / play-01, ARG1, w / world-region)
(w / world-region, name, n2 / name)

Decoded in 408,889 microseconds
Sentence: when the enclave returns to chinese rule it will do so on similar terms to those promised for hong kong with peking guaranteeing that a capitalist system and lifestyle will be maintained for at least 50 years

NER Entity: (country :name (name :op "hong" :op "kong"))
Spans:
Span 35-36:  50 => 50
Span 27-28:  and => and
Span 25-26:  capitalist => capitalist
Span 5-6:  chinese => (person :mod (country :name (name :op "China")))
Span 2-3:  enclave => enclave
Span 22-23:  guaranteeing => guarantee-01
Span 18-20:  hong kong => (country :name (name :op "hong" :op "kong"))
Span 7-8:  it => it
Span 28-29:  lifestyle => lifestyle
Span 31-32:  maintained => maintain-01
Span 16-17:  promised => promise-01
Span 3-4:  returns => return-02
Span 6-7:  rule => rule-03
Span 10-11:  so => so
Span 26-27:  system => system
Span 13-14:  terms => term
Span 36-37:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(1, 0),years,(temporal-quantity :unit year),false), Span(35,36,List(2),50,50,false), Span(31,32,List(3),maintained,maintain-01,false), Span(28,29,List(4),lifestyle,lifestyle,false), Span(27,28,List(5),and,and,false), Span(26,27,List(6),system,system,false), Span(25,26,List(7),capitalist,capitalist,false), Span(22,23,List(8),guaranteeing,guarantee-01,false), Span(18,20,List(12, 11, 10, 9),hong kong,(country :name (name :op "hong" :op "kong")),false), Span(16,17,List(13),promised,promise-01,false), Span(13,14,List(14),terms,term,false), Span(10,11,List(15),so,so,false), Span(7,8,List(16),it,it,false), Span(6,7,List(17),rule,rule-03,false), Span(5,6,List(21, 20, 19, 18),chinese,(person :mod (country :name (name :op "China"))),false), Span(3,4,List(22),returns,return-02,false), Span(2,3,List(23),enclave,enclave,false)),Map(2 -> 50, 5 -> and, 12 -> "kong", 15 -> so, 8 -> guarantee-01, 21 -> "China", 18 -> person, 7 -> capitalist, 17 -> rule-03, 1 -> year, 23 -> enclave, 4 -> lifestyle, 11 -> "hong", 14 -> term, 20 -> name, 6 -> system, 22 -> return-02, 0 -> temporal-quantity, 9 -> country, 16 -> it, 19 -> country, 3 -> maintain-01, 10 -> name, 13 -> promise-01),Map(e -> enclave, n -> name, s2 -> so, 5 -> 50, t -> temporal-quantity, p2 -> person, s -> system, m -> maintain-01, r2 -> return-02, y -> year, g -> guarantee-01, p -> promise-01, c3 -> country, a -> and, t2 -> term, r -> rule-03, i -> it, c -> capitalist, l -> lifestyle, n2 -> name, c2 -> country))),[Ljava.lang.String;@67257ce8,Annotation([Ljava.lang.String;@4e2b983f,[Ljava.lang.String;@10187831,[Ljava.lang.String;@367ae138),Annotation([Ljava.lang.String;@3d583f79,[Ljava.lang.String;@6caf4065,[Ledu.cmu.lti.nlp.amr.Dependency;@65acdea1),Annotation([Ljava.lang.String;@384c502d,[Ljava.lang.String;@1a23d73b,[Ljava.lang.String;@27076fe5),Annotation([Ljava.lang.String;@59433767,[Ljava.lang.String;@4bea78f9,[Ledu.cmu.lti.nlp.amr.Entity;@eac4a5f))
AMR:
(a / and, op, l / lifestyle)
(a / and, op, s / system)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(g / guarantee-01, ARG0, c2 / country)
(g / guarantee-01, ARG1, m / maintain-01)
(m / maintain-01, ARG1, a / and)
(n / name, op, "hong")
(n / name, op, "kong")
(n2 / name, op, "China")
(p / promise-01, ARG0, t / temporal-quantity)
(p / promise-01, ARG1, c2 / country)
(p2 / person, mod, c3 / country)
(r / rule-03, ARG0, i / it)
(r / rule-03, ARG1, c2 / country)
(r2 / return-02, ARG0, e / enclave)
(r2 / return-02, ARG1, r / rule-03)
(r2 / return-02, ARG2, p2 / person)
(s / system, mod, c / capitalist)
(t / temporal-quantity, quant, 5 / 50)
(t / temporal-quantity, unit, y / year)
(t2 / term, degree, s2 / so)
(t2 / term, op, p / promise-01)

Decoded in 341,258 microseconds
Sentence: although saddled by his predecessor with the decision to fragment the ncc mr patten promised at the conservative party conference to produce a white paper on environment policy

Spans:
Span 19-20:  conference => conference
Span 17-18:  conservative => conservative
Span 7-8:  decision => decide-01
Span 26-27:  environment => environment
Span 24-25:  paper => paper
Span 18-19:  party => party
Span 27-28:  policy => policy
Span 21-22:  produce => produce-01
Span 14-15:  promised => promise-01
Span 23-24:  white => white

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),policy,policy,false), Span(26,27,List(1),environment,environment,false), Span(24,25,List(2),paper,paper,false), Span(23,24,List(3),white,white,false), Span(21,22,List(4),produce,produce-01,false), Span(19,20,List(5),conference,conference,false), Span(18,19,List(6),party,party,false), Span(17,18,List(7),conservative,conservative,false), Span(14,15,List(8),promised,promise-01,false), Span(7,8,List(9),decision,decide-01,false)),Map(2 -> paper, 5 -> conference, 8 -> promise-01, 7 -> conservative, 1 -> environment, 4 -> produce-01, 6 -> party, 9 -> decide-01, 0 -> policy, 3 -> white),Map(w -> white, e -> environment, p5 -> promise-01, p2 -> paper, d -> decide-01, p -> policy, p4 -> party, c -> conference, c2 -> conservative, p3 -> produce-01))),[Ljava.lang.String;@5146aa7f,Annotation([Ljava.lang.String;@7663a188,[Ljava.lang.String;@7022471,[Ljava.lang.String;@1da67a4f),Annotation([Ljava.lang.String;@1ca7e7be,[Ljava.lang.String;@535f79a4,[Ledu.cmu.lti.nlp.amr.Dependency;@212b28bf),Annotation([Ljava.lang.String;@1880249c,[Ljava.lang.String;@4e38a55,[Ljava.lang.String;@768ed4f4),Annotation([Ljava.lang.String;@1b3f1bfb,[Ljava.lang.String;@4c4609b6,[Ledu.cmu.lti.nlp.amr.Entity;@a27b2d9))
AMR:
(c / conference, mod, p4 / party)
(d / decide-01, ARG1, p3 / produce-01)
(p / policy, topic, e / environment)
(p2 / paper, mod, w / white)
(p3 / produce-01, ARG1, p2 / paper)
(p3 / produce-01, ARG2, p / policy)
(p4 / party, mod, c2 / conservative)
(p5 / promise-01, ARG0, c / conference)
(p5 / promise-01, ARG2, p3 / produce-01)

Decoded in 123,824 microseconds
Sentence: later that day 15 oct at the questors theatre in ealing he will be the guest of honour at a fundraising event for the questors in which we are promised the opportunity to find out what makes a critic what are his prejudices and his preferences and what are his fears and hopes for british and world theatre

NER Entity: (thing :name (name :op "british"))
Spans:
Span 3-4:  15 => 15
Span 55-56:  and => and
Span 51-52:  and => and
Span 46-47:  and => and
Span 43-44:  and => and
Span 38-39:  critic => criticize-01
Span 2-3:  day => day
Span 21-22:  event => event
Span 50-51:  fears => fear-01
Span 15-16:  guest => guest
Span 11-12:  he => he
Span 17-18:  honour => honor-01
Span 52-53:  hopes => hope-01
Span 0-1:  later => late
Span 4-5:  oct => (date-entity :month 10)
Span 31-32:  opportunity => opportunity
Span 29-30:  promised => promise-01
Span 27-28:  we => we
Span 56-57:  world => world

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(56,57,List(0),world,world,false), Span(55,56,List(1),and,and,false), Span(52,53,List(2),hopes,hope-01,false), Span(51,52,List(3),and,and,false), Span(50,51,List(4),fears,fear-01,false), Span(46,47,List(5),and,and,false), Span(43,44,List(6),and,and,false), Span(38,39,List(7),critic,criticize-01,false), Span(31,32,List(8),opportunity,opportunity,false), Span(29,30,List(9),promised,promise-01,false), Span(27,28,List(10),we,we,false), Span(21,22,List(11),event,event,false), Span(17,18,List(12),honour,honor-01,false), Span(15,16,List(13),guest,guest,false), Span(11,12,List(14),he,he,false), Span(4,5,List(16, 15),oct,(date-entity :month 10),false), Span(3,4,List(17),15,15,false), Span(2,3,List(18),day,day,false), Span(0,1,List(19),later,late,false)),Map(2 -> hope-01, 5 -> and, 12 -> honor-01, 15 -> date-entity, 8 -> opportunity, 18 -> day, 7 -> criticize-01, 17 -> 15, 1 -> and, 4 -> fear-01, 11 -> event, 14 -> he, 6 -> and, 0 -> world, 9 -> promise-01, 16 -> 10, 19 -> late, 3 -> and, 10 -> we, 13 -> guest),Map(e -> event, w -> world, h -> hope-01, h2 -> honor-01, 12 -> 15, a3 -> and, d -> date-entity, 1 -> 10, g -> guest, p -> promise-01, a -> and, d2 -> day, w2 -> we, a2 -> and, h3 -> he, c -> criticize-01, l -> late, f -> fear-01, o -> opportunity, a4 -> and))),[Ljava.lang.String;@20a07db0,Annotation([Ljava.lang.String;@89bbe8c,[Ljava.lang.String;@28faddbe,[Ljava.lang.String;@6df3f9f6),Annotation([Ljava.lang.String;@2c9fbddf,[Ljava.lang.String;@2b6a925c,[Ledu.cmu.lti.nlp.amr.Dependency;@61aeec48),Annotation([Ljava.lang.String;@231a9d12,[Ljava.lang.String;@283e1abf,[Ljava.lang.String;@54e063d),Annotation([Ljava.lang.String;@457b9183,[Ljava.lang.String;@338e5318,[Ledu.cmu.lti.nlp.amr.Entity;@44f16719))
AMR:
(a / and, op, w / world)
(a3 / and, op, a2 / and)
(a3 / and, op, c / criticize-01)
(a3 / and, op, f / fear-01)
(c / criticize-01, ARG0, a4 / and)
(c / criticize-01, ARG1, h2 / honor-01)
(d / date-entity, month, 1 / 10)
(d2 / day, mod, 12 / 15)
(f / fear-01, ARG0, a / and)
(g / guest, poss, h2 / honor-01)
(h / hope-01, ARG0, w2 / we)
(h / hope-01, ARG1, a / and)
(h2 / honor-01, ARG0, 12 / 15)
(h2 / honor-01, ARG1, e / event)
(l / late, op, d / date-entity)
(l / late, poss, e / event)
(p / promise-01, ARG0, h3 / he)
(p / promise-01, ARG1, w2 / we)
(p / promise-01, ARG2, o / opportunity)

Decoded in 738,791 microseconds
Sentence: yet in 1987 investment promises to continue unabated

Spans:
Span 2-3:  1987 => (date-entity :year 1987)
Span 6-7:  continue => continue-01
Span 3-4:  investment => invest-01
Span 4-5:  promises => promise-01
Span 0-1:  yet => yet

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),continue,continue-01,false), Span(4,5,List(1),promises,promise-01,false), Span(3,4,List(2),investment,invest-01,false), Span(2,3,List(4, 3),1987,(date-entity :year 1987),false), Span(0,1,List(5),yet,yet,false)),Map(2 -> invest-01, 5 -> yet, 1 -> promise-01, 4 -> 1987, 0 -> continue-01, 3 -> date-entity),Map(d -> date-entity, y -> yet, 1 -> 1987, p -> promise-01, i -> invest-01, c -> continue-01))),[Ljava.lang.String;@44a7bdab,Annotation([Ljava.lang.String;@609548c3,[Ljava.lang.String;@68dc2bbe,[Ljava.lang.String;@4ebbfcba),Annotation([Ljava.lang.String;@17cd3fb8,[Ljava.lang.String;@2412553d,[Ledu.cmu.lti.nlp.amr.Dependency;@2f9a2a4b),Annotation([Ljava.lang.String;@324eba57,[Ljava.lang.String;@4eabbf8e,[Ljava.lang.String;@6dad2bfb),Annotation([Ljava.lang.String;@422a3fe,[Ljava.lang.String;@7e3c7ad0,[Ledu.cmu.lti.nlp.amr.Entity;@34a32e6f))
AMR:
(c / continue-01, ARG1, i / invest-01)
(d / date-entity, year, 1 / 1987)
(i / invest-01, ARG1, y / yet)
(i / invest-01, time, d / date-entity)
(p / promise-01, ARG1, c / continue-01)

Decoded in 13,242 microseconds
Sentence:   european deals also do not promise the same rewards as the uk megadeals of recent times

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   european deals also do not promise the same rewards as the uk megadeals of recent times
myTokenized = european deals also do not promise the same rewards as the uk megadeals of recent times
i = 0
prefix = List(european)
regexr = \Qe\E ?\Qu\E ?\Qr\E ?\Qo\E ?\Qp\E ?\Qe\E ?\Qa\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: alas best hopes were dashed as the potential rival turned out to be robert maxwell and mirror group newspapers which does not promise a bonanza for monotype shareholders

Spans:
Span 0-1:  alas => alas
Span 15-16:  and => and
Span 24-25:  bonanza => bonanza
Span 17-18:  group => group
Span 2-3:  hopes => hope-01
Span 16-17:  mirror => mirror
Span 18-19:  newspapers => newspaper
Span 7-8:  potential => potential
Span 22-23:  promise => promise-01
Span 8-9:  rival => rival-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),bonanza,bonanza,false), Span(22,23,List(1),promise,promise-01,false), Span(18,19,List(2),newspapers,newspaper,false), Span(17,18,List(3),group,group,false), Span(16,17,List(4),mirror,mirror,false), Span(15,16,List(5),and,and,false), Span(8,9,List(6),rival,rival-01,false), Span(7,8,List(7),potential,potential,false), Span(2,3,List(8),hopes,hope-01,false), Span(0,1,List(9),alas,alas,false)),Map(2 -> newspaper, 5 -> and, 8 -> hope-01, 7 -> potential, 1 -> promise-01, 4 -> mirror, 6 -> rival-01, 9 -> alas, 0 -> bonanza, 3 -> group),Map(n -> newspaper, h -> hope-01, b -> bonanza, p2 -> potential, m -> mirror, g -> group, p -> promise-01, a -> and, a2 -> alas, r -> rival-01))),[Ljava.lang.String;@4dda5b5b,Annotation([Ljava.lang.String;@3aa3db4b,[Ljava.lang.String;@5b923700,[Ljava.lang.String;@5c590ff7),Annotation([Ljava.lang.String;@5b27507e,[Ljava.lang.String;@7215aef2,[Ledu.cmu.lti.nlp.amr.Dependency;@6d90cc61),Annotation([Ljava.lang.String;@3d5a2c79,[Ljava.lang.String;@6b1ddb66,[Ljava.lang.String;@752f3c7a),Annotation([Ljava.lang.String;@702ba9b0,[Ljava.lang.String;@42919b58,[Ledu.cmu.lti.nlp.amr.Entity;@656dd08c))
AMR:
(a / and, op, n / newspaper)
(a2 / alas, source, a / and)
(h / hope-01, ARG1, a / and)
(n / newspaper, mod, m / mirror)
(n / newspaper, poss, g / group)
(p / promise-01, ARG0, n / newspaper)
(p / promise-01, ARG1, b / bonanza)
(r / rival-01, ARG0, h / hope-01)
(r / rival-01, mod, p2 / potential)

Decoded in 55,315 microseconds
Sentence: ministers promise a white paper in the autumn and legislation to make it easier for families to be paid maintenance by divorced or absent parents

Spans:
Span 23-24:  absent => absent-01
Span 8-9:  and => and
Span 21-22:  divorced => divorce-01
Span 13-14:  easier => easy
Span 15-16:  families => family
Span 12-13:  it => it
Span 9-10:  legislation => legislation
Span 19-20:  maintenance => maintain-01
Span 0-1:  ministers => (have-org-role-91 :ARG2 minister)
Span 22-23:  or => or
Span 18-19:  paid => pay-01
Span 4-5:  paper => paper
Span 24-25:  parents => (have-rel-role-91 :ARG2 parent)
Span 1-2:  promise => promise-01
Span 3-4:  white => white

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),parents,(have-rel-role-91 :ARG2 parent),false), Span(23,24,List(2),absent,absent-01,false), Span(22,23,List(3),or,or,false), Span(21,22,List(4),divorced,divorce-01,false), Span(19,20,List(5),maintenance,maintain-01,false), Span(18,19,List(6),paid,pay-01,false), Span(15,16,List(7),families,family,false), Span(13,14,List(8),easier,easy,false), Span(12,13,List(9),it,it,false), Span(9,10,List(10),legislation,legislation,false), Span(8,9,List(11),and,and,false), Span(4,5,List(12),paper,paper,false), Span(3,4,List(13),white,white,false), Span(1,2,List(14),promise,promise-01,false), Span(0,1,List(16, 15),ministers,(have-org-role-91 :ARG2 minister),false)),Map(2 -> absent-01, 5 -> maintain-01, 12 -> paper, 15 -> have-org-role-91, 8 -> easy, 7 -> family, 1 -> parent, 4 -> divorce-01, 11 -> and, 14 -> promise-01, 6 -> pay-01, 0 -> have-rel-role-91, 9 -> it, 16 -> minister, 3 -> or, 10 -> legislation, 13 -> white),Map(e -> easy, w -> white, h -> have-rel-role-91, h2 -> have-org-role-91, m2 -> minister, p2 -> pay-01, d -> divorce-01, m -> maintain-01, p -> parent, a -> absent-01, p4 -> promise-01, i -> it, a2 -> and, l -> legislation, f -> family, o -> or, p3 -> paper))),[Ljava.lang.String;@c96cb5a,Annotation([Ljava.lang.String;@882b,[Ljava.lang.String;@22ebbf0d,[Ljava.lang.String;@234c0064),Annotation([Ljava.lang.String;@52adb756,[Ljava.lang.String;@adf9982,[Ledu.cmu.lti.nlp.amr.Dependency;@5dd72b61),Annotation([Ljava.lang.String;@59611d68,[Ljava.lang.String;@76d1c4af,[Ljava.lang.String;@45c7fa1a),Annotation([Ljava.lang.String;@4bf4e4c0,[Ljava.lang.String;@3ad62035,[Ledu.cmu.lti.nlp.amr.Entity;@3fdc95c0))
AMR:
(a2 / and, op, l / legislation)
(a2 / and, op, p3 / paper)
(d / divorce-01, ARG1, h / have-rel-role-91)
(e / easy, domain, i / it)
(h / have-rel-role-91, ARG2, p / parent)
(h2 / have-org-role-91, ARG1, f / family)
(h2 / have-org-role-91, ARG2, m2 / minister)
(m / maintain-01, ARG1, o / or)
(o / or, op, a / absent-01)
(o / or, op, d / divorce-01)
(p2 / pay-01, ARG0, f / family)
(p2 / pay-01, ARG1, m / maintain-01)
(p2 / pay-01, ARG3, a2 / and)
(p2 / pay-01, manner, e / easy)
(p3 / paper, mod, w / white)
(p4 / promise-01, ARG1, p3 / paper)

Decoded in 249,657 microseconds
Sentence: the syrian authorities had promised president moawad that they would withdraw their troops within two years

NER Entity: (thing :name (name :op "syrian"))
Spans:
Span 2-3:  authorities => authority
Span 5-6:  president => (have-org-role-91 :ARG2 president)
Span 4-5:  promised => promise-01
Span 8-9:  they => they
Span 12-13:  troops => troop
Span 14-15:  two => 2
Span 10-11:  withdraw => withdraw-01
Span 13-14:  within => within
Span 15-16:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),years,(temporal-quantity :unit year),false), Span(14,15,List(2),two,2,false), Span(13,14,List(3),within,within,false), Span(12,13,List(4),troops,troop,false), Span(10,11,List(5),withdraw,withdraw-01,false), Span(8,9,List(6),they,they,false), Span(5,6,List(8, 7),president,(have-org-role-91 :ARG2 president),false), Span(4,5,List(9),promised,promise-01,false), Span(2,3,List(10),authorities,authority,false)),Map(2 -> 2, 5 -> withdraw-01, 8 -> president, 7 -> have-org-role-91, 1 -> year, 4 -> troop, 6 -> they, 9 -> promise-01, 0 -> temporal-quantity, 10 -> authority, 3 -> within),Map(w -> within, h -> have-org-role-91, 2 -> 2, t -> temporal-quantity, p2 -> promise-01, p -> president, t3 -> they, y -> year, a -> authority, t2 -> troop, w2 -> withdraw-01))),[Ljava.lang.String;@2aeb9101,Annotation([Ljava.lang.String;@4f7ceeaa,[Ljava.lang.String;@131903ab,[Ljava.lang.String;@4f3fd958),Annotation([Ljava.lang.String;@68d6490d,[Ljava.lang.String;@4c562a40,[Ledu.cmu.lti.nlp.amr.Dependency;@2ceff6e7),Annotation([Ljava.lang.String;@3e3acebd,[Ljava.lang.String;@6dafa36,[Ljava.lang.String;@1260f2be),Annotation([Ljava.lang.String;@1ae0a15f,[Ljava.lang.String;@118271c2,[Ledu.cmu.lti.nlp.amr.Entity;@afa8089))
AMR:
(h / have-org-role-91, ARG1, w2 / withdraw-01)
(h / have-org-role-91, ARG2, p / president)
(p2 / promise-01, ARG0, a / authority)
(p2 / promise-01, ARG2, p / president)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(w / within, op, t / temporal-quantity)
(w2 / withdraw-01, ARG0, t3 / they)
(w2 / withdraw-01, ARG1, t2 / troop)
(w2 / withdraw-01, duration, w / within)

Decoded in 239,966 microseconds
Sentence: life the antiabortion organisation yesterday promised to fight the proposed pagan measures and to besiege parliament with the largest number of petitions in its history

Spans:
Span 12-13:  and => and
Span 14-15:  besiege => besiege-01
Span 7-8:  fight => fight-01
Span 24-25:  history => history
Span 18-19:  largest => (large :degree most)
Span 0-1:  life => life
Span 11-12:  measures => measure
Span 19-20:  number => number
Span 3-4:  organisation => organize-01
Span 15-16:  parliament => (government-organization :name (name :op "Parliament"))
Span 5-6:  promised => promise-01
Span 9-10:  proposed => propose-01
Span 4-5:  yesterday => yesterday

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),history,history,false), Span(19,20,List(1),number,number,false), Span(18,19,List(3, 2),largest,(large :degree most),false), Span(15,16,List(6, 5, 4),parliament,(government-organization :name (name :op "Parliament")),false), Span(14,15,List(7),besiege,besiege-01,false), Span(12,13,List(8),and,and,false), Span(11,12,List(9),measures,measure,false), Span(9,10,List(10),proposed,propose-01,false), Span(7,8,List(11),fight,fight-01,false), Span(5,6,List(12),promised,promise-01,false), Span(4,5,List(13),yesterday,yesterday,false), Span(3,4,List(14),organisation,organize-01,false), Span(0,1,List(15),life,life,false)),Map(2 -> large, 5 -> name, 12 -> promise-01, 15 -> life, 8 -> and, 7 -> besiege-01, 1 -> number, 4 -> government-organization, 11 -> fight-01, 14 -> organize-01, 6 -> "Parliament", 0 -> history, 9 -> measure, 3 -> most, 10 -> propose-01, 13 -> yesterday),Map(n -> number, h -> history, b -> besiege-01, m2 -> measure, p2 -> promise-01, m -> most, g -> government-organization, p -> propose-01, y -> yesterday, a -> and, l2 -> life, l -> large, f -> fight-01, o -> organize-01, n2 -> name))),[Ljava.lang.String;@1ae9bae7,Annotation([Ljava.lang.String;@66eda17e,[Ljava.lang.String;@7b058bfc,[Ljava.lang.String;@29298c7d),Annotation([Ljava.lang.String;@66c677a7,[Ljava.lang.String;@6fd9a9a7,[Ledu.cmu.lti.nlp.amr.Dependency;@3b114c4f),Annotation([Ljava.lang.String;@6ca8f4d4,[Ljava.lang.String;@4861c207,[Ljava.lang.String;@a097eb1),Annotation([Ljava.lang.String;@755c9b9c,[Ljava.lang.String;@12ec5af6,[Ledu.cmu.lti.nlp.amr.Entity;@5b47d62e))
AMR:
(a / and, op, b / besiege-01)
(a / and, op, f / fight-01)
(b / besiege-01, ARG0, n / number)
(b / besiege-01, ARG1, g / government-organization)
(f / fight-01, ARG0, y / yesterday)
(f / fight-01, ARG1, m2 / measure)
(g / government-organization, name, n2 / name)
(l / large, degree, m / most)
(n / number, mod, l / large)
(n2 / name, op, "Parliament")
(o / organize-01, ARG0, y / yesterday)
(o / organize-01, ARG1, h / history)
(p / propose-01, ARG1, m2 / measure)
(p2 / promise-01, ARG0, l2 / life)
(p2 / promise-01, ARG2, a / and)

Decoded in 492,147 microseconds
Sentence: another 250 has been promised from the banbury historial societys brinkworth prize which will be presented by lord saye and sele the societys president next month

Spans:
Span 1-2:  250 => 250
Span 19-20:  and => and
Span 0-1:  another => another
Span 17-18:  lord => lord
Span 25-26:  month => (temporal-quantity :unit month)
Span 24-25:  next => next
Span 15-16:  presented => present-01
Span 23-24:  president => (have-org-role-91 :ARG2 president)
Span 11-12:  prize => prize-01
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(1, 0),month,(temporal-quantity :unit month),false), Span(24,25,List(2),next,next,false), Span(23,24,List(4, 3),president,(have-org-role-91 :ARG2 president),false), Span(19,20,List(5),and,and,false), Span(17,18,List(6),lord,lord,false), Span(15,16,List(7),presented,present-01,false), Span(11,12,List(8),prize,prize-01,false), Span(4,5,List(9),promised,promise-01,false), Span(1,2,List(10),250,250,false), Span(0,1,List(11),another,another,false)),Map(2 -> next, 5 -> and, 8 -> prize-01, 7 -> present-01, 1 -> month, 11 -> another, 4 -> president, 6 -> lord, 9 -> promise-01, 0 -> temporal-quantity, 10 -> 250, 3 -> have-org-role-91),Map(n -> next, 2 -> 250, h -> have-org-role-91, t -> temporal-quantity, p2 -> present-01, m -> month, p -> president, p4 -> promise-01, a -> and, a2 -> another, l -> lord, p3 -> prize-01))),[Ljava.lang.String;@493e94d3,Annotation([Ljava.lang.String;@2b9cce36,[Ljava.lang.String;@43a65198,[Ljava.lang.String;@5c36f4da),Annotation([Ljava.lang.String;@1c054382,[Ljava.lang.String;@1d931a2d,[Ledu.cmu.lti.nlp.amr.Dependency;@249b8f86),Annotation([Ljava.lang.String;@60ebb930,[Ljava.lang.String;@13cb3006,[Ljava.lang.String;@bde411),Annotation([Ljava.lang.String;@32c81878,[Ljava.lang.String;@6ebe8853,[Ledu.cmu.lti.nlp.amr.Entity;@1ee839f2))
AMR:
(a / and, op, p2 / present-01)
(h / have-org-role-91, ARG0, 2 / 250)
(h / have-org-role-91, ARG1, p3 / prize-01)
(h / have-org-role-91, ARG2, p / president)
(m / month, mod, n / next)
(p2 / present-01, ARG0, a2 / another)
(p2 / present-01, ARG1, p3 / prize-01)
(p3 / prize-01, ARG0, l / lord)
(p4 / promise-01, ARG0, t / temporal-quantity)
(p4 / promise-01, ARG1, p3 / prize-01)
(t / temporal-quantity, unit, m / month)

Decoded in 136,122 microseconds
Sentence:   lyle went to wimbledon on mens quarterfinal day saw ivan lendl and they promised each other lessons

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   lyle went to wimbledon on mens quarterfinal day saw ivan lendl and they promised each other lessons
myTokenized = lyle went to wimbledon on mens quarterfinal day saw ivan lendl and they promised each other lessons
i = 0
prefix = List(lyle)
regexr = \Ql\E ?\Qy\E ?\Ql\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: i would die he promised if i didnt get a catheter inserted immediately

Spans:
Span 2-3:  die => die-01
Span 3-4:  he => he
Span 6-7:  i => i
Span 0-1:  i => i
Span 12-13:  immediately => immediate
Span 11-12:  inserted => insert-01
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),immediately,immediate,false), Span(11,12,List(1),inserted,insert-01,false), Span(6,7,List(2),i,i,false), Span(4,5,List(3),promised,promise-01,false), Span(3,4,List(4),he,he,false), Span(2,3,List(5),die,die-01,false), Span(0,1,List(6),i,i,false)),Map(2 -> i, 5 -> die-01, 1 -> insert-01, 4 -> he, 6 -> i, 0 -> immediate, 3 -> promise-01),Map(i4 -> i, h -> he, d -> die-01, p -> promise-01, i3 -> i, i2 -> insert-01, i -> immediate))),[Ljava.lang.String;@4a1c228c,Annotation([Ljava.lang.String;@7d203b56,[Ljava.lang.String;@4f17cb47,[Ljava.lang.String;@2322cae2),Annotation([Ljava.lang.String;@4135cd73,[Ljava.lang.String;@33435a77,[Ledu.cmu.lti.nlp.amr.Dependency;@ae854ec),Annotation([Ljava.lang.String;@1b1f578c,[Ljava.lang.String;@26acb63d,[Ljava.lang.String;@14f072a1),Annotation([Ljava.lang.String;@35f5b2c4,[Ljava.lang.String;@15ab7d89,[Ledu.cmu.lti.nlp.amr.Entity;@2dbeb87c))
AMR:
(d / die-01, ARG0, i4 / i)
(d / die-01, ARG1, p / promise-01)
(i2 / insert-01, time, i / immediate)
(i3 / i, domain, h / he)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, i2 / insert-01)

Decoded in 61,965 microseconds
Sentence: al rasd the plo security agency also promised it would do everything possible to stop palestinian rebels attacking the flights

NER Entity: (thing :name (name :op "palestinian"))
NER Entity: (thing :name (name :op "palestinian"))
Spans:
Span 5-6:  agency => agency
Span 6-7:  also => also
Span 17-18:  attacking => attack-01
Span 11-12:  everything => everything
Span 8-9:  it => it
Span 15-16:  palestinian => (country :name (name :op "Palestine"))
Span 12-13:  possible => possible
Span 7-8:  promised => promise-01
Span 16-17:  rebels => (person :ARG0-of rebel-01)
Span 4-5:  security => security
Span 14-15:  stop => stop-01

Langrangian relaxation converged after 72 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),attacking,attack-01,false), Span(16,17,List(2, 1),rebels,(person :ARG0-of rebel-01),false), Span(15,16,List(5, 4, 3),palestinian,(country :name (name :op "Palestine")),false), Span(14,15,List(6),stop,stop-01,false), Span(12,13,List(7),possible,possible,false), Span(11,12,List(8),everything,everything,false), Span(8,9,List(9),it,it,false), Span(7,8,List(10),promised,promise-01,false), Span(6,7,List(11),also,also,false), Span(5,6,List(12),agency,agency,false), Span(4,5,List(13),security,security,false)),Map(2 -> rebel-01, 5 -> "Palestine", 12 -> agency, 8 -> everything, 7 -> possible, 1 -> person, 4 -> name, 11 -> also, 6 -> stop-01, 0 -> attack-01, 9 -> it, 3 -> country, 10 -> promise-01, 13 -> security),Map(e -> everything, n -> name, s2 -> security, p2 -> possible, a3 -> agency, s -> stop-01, p -> person, a -> attack-01, r -> rebel-01, i -> it, a2 -> also, c -> country, p3 -> promise-01))),[Ljava.lang.String;@44042bb8,Annotation([Ljava.lang.String;@6dd25fea,[Ljava.lang.String;@e9733fa,[Ljava.lang.String;@68d56991),Annotation([Ljava.lang.String;@1305e45c,[Ljava.lang.String;@67d35dc5,[Ledu.cmu.lti.nlp.amr.Dependency;@65b165c3),Annotation([Ljava.lang.String;@6190195d,[Ljava.lang.String;@3b715ab5,[Ljava.lang.String;@efa3f90),Annotation([Ljava.lang.String;@4f630e9e,[Ljava.lang.String;@7054cfc9,[Ledu.cmu.lti.nlp.amr.Entity;@5015cebc))
AMR:
(a / attack-01, ARG0, p / person)
(a3 / agency, mod, s2 / security)
(c / country, name, n / name)
(e / everything, mod, p2 / possible)
(n / name, op, "Palestine")
(p / person, source, c / country)
(p3 / promise-01, ARG0, a3 / agency)
(p3 / promise-01, ARG1, p2 / possible)
(p3 / promise-01, manner, i / it)
(p3 / promise-01, mod, a2 / also)
(r / rebel-01, ARG0, p / person)
(s / stop-01, ARG0, e / everything)
(s / stop-01, ARG1, a / attack-01)

Decoded in 670,257 microseconds
Sentence: accelerating export growth is promising but it will have to outpace import growth by a permanently wide margin to reverse the record current account deficit

Spans:
Span 0-1:  accelerating => accelerate-01
Span 23-24:  account => account
Span 5-6:  but => contrast-01
Span 22-23:  current => current
Span 24-25:  deficit => deficit
Span 1-2:  export => export-01
Span 12-13:  growth => grow-01
Span 2-3:  growth => grow-01
Span 11-12:  import => import-01
Span 6-7:  it => it
Span 17-18:  margin => margin
Span 15-16:  permanently => permanent
Span 4-5:  promising => promise-01
Span 21-22:  record => record
Span 19-20:  reverse => reverse-01
Span 16-17:  wide => wide

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),deficit,deficit,false), Span(23,24,List(1),account,account,false), Span(22,23,List(2),current,current,false), Span(21,22,List(3),record,record,false), Span(19,20,List(4),reverse,reverse-01,false), Span(17,18,List(5),margin,margin,false), Span(16,17,List(6),wide,wide,false), Span(15,16,List(7),permanently,permanent,false), Span(12,13,List(8),growth,grow-01,false), Span(11,12,List(9),import,import-01,false), Span(6,7,List(10),it,it,false), Span(5,6,List(11),but,contrast-01,false), Span(4,5,List(12),promising,promise-01,false), Span(2,3,List(13),growth,grow-01,false), Span(1,2,List(14),export,export-01,false), Span(0,1,List(15),accelerating,accelerate-01,false)),Map(2 -> current, 5 -> margin, 12 -> promise-01, 15 -> accelerate-01, 8 -> grow-01, 7 -> permanent, 1 -> account, 4 -> reverse-01, 11 -> contrast-01, 14 -> export-01, 6 -> wide, 0 -> deficit, 9 -> import-01, 3 -> record, 10 -> it, 13 -> grow-01),Map(e -> export-01, w -> wide, p2 -> promise-01, d -> deficit, m -> margin, g2 -> grow-01, r2 -> reverse-01, p -> permanent, g -> grow-01, a -> account, i2 -> it, a2 -> accelerate-01, r -> record, i -> import-01, c -> current, c2 -> contrast-01))),[Ljava.lang.String;@47b7c1b7,Annotation([Ljava.lang.String;@710efa29,[Ljava.lang.String;@e49d3bc,[Ljava.lang.String;@10ebe2f8),Annotation([Ljava.lang.String;@6e821075,[Ljava.lang.String;@1d06aa01,[Ledu.cmu.lti.nlp.amr.Dependency;@2083368a),Annotation([Ljava.lang.String;@671aeb3,[Ljava.lang.String;@11846d13,[Ljava.lang.String;@d150361),Annotation([Ljava.lang.String;@5e90dbfc,[Ljava.lang.String;@785aade4,[Ledu.cmu.lti.nlp.amr.Entity;@94e9177))
AMR:
(a2 / accelerate-01, ARG1, g2 / grow-01)
(c2 / contrast-01, ARG1, p2 / promise-01)
(d / deficit, mod, a / account)
(d / deficit, mod, r / record)
(e / export-01, ARG1, c / current)
(g / grow-01, ARG0, i2 / it)
(g / grow-01, ARG1, i / import-01)
(g2 / grow-01, ARG1, e / export-01)
(m / margin, mod, w / wide)
(p2 / promise-01, ARG0, g2 / grow-01)
(p2 / promise-01, ARG1, i2 / it)
(r2 / reverse-01, ARG0, i2 / it)
(r2 / reverse-01, ARG1, d / deficit)
(r2 / reverse-01, ARG2, m / margin)
(w / wide, degree, p / permanent)

Decoded in 398,357 microseconds
Sentence:   there was a pause during which he did not promise not to protect her from dragons and during which she persuaded herself not to stress the point

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   there was a pause during which he did not promise not to protect her from dragons and during which she persuaded herself not to stress the point
myTokenized = there was a pause during which he did not promise not to protect her from dragons and during which she persuaded herself not to stress the point
i = 0
prefix = List(there)
regexr = \Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: EMPTY_SENTENCE

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@1a9f4cda,Annotation([Ljava.lang.String;@506e89dd,[Ljava.lang.String;@91d356c,[Ljava.lang.String;@5c9e4a20),Annotation([Ljava.lang.String;@1c14aa61,[Ljava.lang.String;@10bdd4ae,[Ledu.cmu.lti.nlp.amr.Dependency;@1ed5f418),Annotation([Ljava.lang.String;@708c6378,[Ljava.lang.String;@10d69502,[Ljava.lang.String;@77d0bef0),Annotation([Ljava.lang.String;@29a7bc04,[Ljava.lang.String;@4328bff9,[Ledu.cmu.lti.nlp.amr.Entity;@285396e1))
AMR:


Decoded in 1,029 microseconds
Sentence: kelly had promised to meet her but they had parted so coldly she was suddenly afraid that he had changed his mind

Spans:
Span 6-7:  but => contrast-01
Span 19-20:  changed => change-01
Span 17-18:  he => he
Span 21-22:  mind => mind
Span 9-10:  parted => part-01
Span 2-3:  promised => promise-01
Span 12-13:  she => she
Span 10-11:  so => so
Span 14-15:  suddenly => sudden
Span 7-8:  they => they

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),mind,mind,false), Span(19,20,List(1),changed,change-01,false), Span(17,18,List(2),he,he,false), Span(14,15,List(3),suddenly,sudden,false), Span(12,13,List(4),she,she,false), Span(10,11,List(5),so,so,false), Span(9,10,List(6),parted,part-01,false), Span(7,8,List(7),they,they,false), Span(6,7,List(8),but,contrast-01,false), Span(2,3,List(9),promised,promise-01,false)),Map(2 -> he, 5 -> so, 8 -> contrast-01, 7 -> they, 1 -> change-01, 4 -> she, 6 -> part-01, 9 -> promise-01, 0 -> mind, 3 -> sudden),Map(h -> he, t -> they, s2 -> she, p2 -> promise-01, s -> sudden, m -> mind, p -> part-01, s3 -> so, c -> change-01, c2 -> contrast-01))),[Ljava.lang.String;@7d6a276,Annotation([Ljava.lang.String;@1c43f4ff,[Ljava.lang.String;@31899fd8,[Ljava.lang.String;@425d3750),Annotation([Ljava.lang.String;@75da8739,[Ljava.lang.String;@5de3eba1,[Ledu.cmu.lti.nlp.amr.Dependency;@1e82c72f),Annotation([Ljava.lang.String;@1be2ee4f,[Ljava.lang.String;@4f8b92d6,[Ljava.lang.String;@54554866),Annotation([Ljava.lang.String;@2b044bcb,[Ljava.lang.String;@270c127d,[Ledu.cmu.lti.nlp.amr.Entity;@991e092))
AMR:
(c / change-01, ARG1, m / mind)
(c2 / contrast-01, ARG1, s / sudden)
(c2 / contrast-01, ARG2, p / part-01)
(m / mind, poss, h / he)
(p / part-01, ARG0, t / they)
(p / part-01, ARG1, s2 / she)
(p / part-01, time, s3 / so)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, c2 / contrast-01)

Decoded in 86,821 microseconds
Sentence: weve haggled a bit but eventually agreed and now hes promised to let me know on monday morning

Spans:
Span 6-7:  agreed => agree-01
Span 7-8:  and => and
Span 3-4:  bit => bit
Span 4-5:  but => contrast-01
Span 5-6:  eventually => eventual
Span 14-15:  know => know-01
Span 12-13:  let => let-01
Span 17-18:  morning => morning
Span 8-9:  now => now
Span 10-11:  promised => promise-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),morning,morning,false), Span(14,15,List(1),know,know-01,false), Span(12,13,List(2),let,let-01,false), Span(10,11,List(3),promised,promise-01,false), Span(8,9,List(4),now,now,false), Span(7,8,List(5),and,and,false), Span(6,7,List(6),agreed,agree-01,false), Span(5,6,List(7),eventually,eventual,false), Span(4,5,List(8),but,contrast-01,false), Span(3,4,List(9),bit,bit,false)),Map(2 -> let-01, 5 -> and, 8 -> contrast-01, 7 -> eventual, 1 -> know-01, 4 -> now, 6 -> agree-01, 9 -> bit, 0 -> morning, 3 -> promise-01),Map(e -> eventual, n -> now, b -> bit, k -> know-01, m -> morning, p -> promise-01, a -> and, a2 -> agree-01, c -> contrast-01, l -> let-01))),[Ljava.lang.String;@482e9626,Annotation([Ljava.lang.String;@6a83bdcf,[Ljava.lang.String;@6f2297aa,[Ljava.lang.String;@481352e6),Annotation([Ljava.lang.String;@6ca79f01,[Ljava.lang.String;@70b83261,[Ledu.cmu.lti.nlp.amr.Dependency;@4cf3b817),Annotation([Ljava.lang.String;@14bb1579,[Ljava.lang.String;@67ec591,[Ljava.lang.String;@6cdcb5eb),Annotation([Ljava.lang.String;@e2b8f23,[Ljava.lang.String;@4dc24a19,[Ledu.cmu.lti.nlp.amr.Entity;@e8ed731))
AMR:
(a / and, op, a2 / agree-01)
(a / and, op, p / promise-01)
(a2 / agree-01, ARG1, b / bit)
(a2 / agree-01, time, e / eventual)
(c / contrast-01, ARG2, a / and)
(k / know-01, ARG1, m / morning)
(l / let-01, ARG1, k / know-01)
(p / promise-01, ARG1, l / let-01)
(p / promise-01, mod, n / now)

Decoded in 43,393 microseconds
Sentence: balanced fair and evenhanded  third mr meacher has promised to give trade unions absolute protection against the possibility of having their assets sequestrated

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = balanced fair and evenhanded  third mr meacher has promised to give trade unions absolute protection against the possibility of having their assets sequestrated
myTokenized = balanced fair and evenhanded third mr meacher has promised to give trade unions absolute protection against the possibility of having their assets sequestrated
i = 4
prefix = List(balanced, fair, and, evenhanded, third)
regexr = \Qb\E ?\Qa\E ?\Ql\E ?\Qa\E ?\Qn\E ?\Qc\E ?\Qe\E ?\Qd\E ?\Qf\E ?\Qa\E ?\Qi\E ?\Qr\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Qv\E ?\Qe\E ?\Qn\E ?\Qh\E ?\Qa\E ?\Qn\E ?\Qd\E ?\Qe\E ?\Qd\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qr\E ?\Qd\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the british film distributor goldcrest which has promised that costagavras missing betrayed would direct its film

NER Entity: (thing :name (name :op "british"))
Spans:
Span 13-14:  direct => direct
Span 3-4:  distributor => distribute-01
Span 15-16:  film => film
Span 2-3:  film => film
Span 10-11:  missing => miss-01
Span 7-8:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),film,film,false), Span(13,14,List(1),direct,direct,false), Span(10,11,List(2),missing,miss-01,false), Span(7,8,List(3),promised,promise-01,false), Span(3,4,List(4),distributor,distribute-01,false), Span(2,3,List(5),film,film,false)),Map(2 -> miss-01, 5 -> film, 1 -> direct, 4 -> distribute-01, 0 -> film, 3 -> promise-01),Map(m -> miss-01, d -> direct, p -> promise-01, d2 -> distribute-01, f2 -> film, f -> film))),[Ljava.lang.String;@619e78b,Annotation([Ljava.lang.String;@eb059ce,[Ljava.lang.String;@5bd7eaea,[Ljava.lang.String;@3c7fd7c1),Annotation([Ljava.lang.String;@6d2ddeee,[Ljava.lang.String;@5e871341,[Ledu.cmu.lti.nlp.amr.Dependency;@760140e2),Annotation([Ljava.lang.String;@4c4af1f4,[Ljava.lang.String;@4c52f14d,[Ljava.lang.String;@59601d60),Annotation([Ljava.lang.String;@3528b777,[Ljava.lang.String;@42500e5,[Ledu.cmu.lti.nlp.amr.Entity;@195dbc83))
AMR:
(d / direct, part, f / film)
(d2 / distribute-01, ARG1, f2 / film)
(m / miss-01, ARG1, d2 / distribute-01)
(p / promise-01, ARG1, d / direct)
(p / promise-01, ARG2, m / miss-01)

Decoded in 23,351 microseconds
Sentence: the rebound in the metal price promises a return to multimillion pound profitability and job security this year

Spans:
Span 13-14:  and => and
Span 14-15:  job => job
Span 4-5:  metal => metal
Span 5-6:  price => (thing :ARG2-of price-01)
Span 6-7:  promises => promise-01
Span 1-2:  rebound => rebound-01
Span 15-16:  security => security
Span 16-17:  this => this
Span 17-18:  year => year

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),year,year,false), Span(16,17,List(1),this,this,false), Span(15,16,List(2),security,security,false), Span(14,15,List(3),job,job,false), Span(13,14,List(4),and,and,false), Span(6,7,List(5),promises,promise-01,false), Span(5,6,List(7, 6),price,(thing :ARG2-of price-01),false), Span(4,5,List(8),metal,metal,false), Span(1,2,List(9),rebound,rebound-01,false)),Map(2 -> security, 5 -> promise-01, 8 -> metal, 7 -> price-01, 1 -> this, 4 -> and, 6 -> thing, 9 -> rebound-01, 0 -> year, 3 -> job),Map(t -> this, p2 -> price-01, j -> job, s -> security, m -> metal, p -> promise-01, y -> year, a -> and, t2 -> thing, r -> rebound-01))),[Ljava.lang.String;@59034977,Annotation([Ljava.lang.String;@66cc5148,[Ljava.lang.String;@6fec82b1,[Ljava.lang.String;@10786bdf),Annotation([Ljava.lang.String;@51f205eb,[Ljava.lang.String;@6862b154,[Ledu.cmu.lti.nlp.amr.Dependency;@27683756),Annotation([Ljava.lang.String;@2b090350,[Ljava.lang.String;@5cb88f42,[Ljava.lang.String;@58c5659c),Annotation([Ljava.lang.String;@792124c,[Ljava.lang.String;@6ef3f76,[Ledu.cmu.lti.nlp.amr.Entity;@452f5f88))
AMR:
(a / and, op, s / security)
(p / promise-01, ARG0, r / rebound-01)
(p / promise-01, ARG2, a / and)
(p2 / price-01, ARG1, m / metal)
(p2 / price-01, ARG2, t2 / thing)
(r / rebound-01, ARG0, y / year)
(r / rebound-01, ARG1, t2 / thing)
(s / security, mod, j / job)
(y / year, mod, t / this)

Decoded in 50,110 microseconds
Sentence: the promises to cut taxes had been brushed to one side but it was unlikely that the government would wish to fight the next election against a background of undertakings that would entail their actually being increased

Spans:
Span 34-35:  actually => actual
Span 27-28:  background => background
Span 7-8:  brushed => brush-02
Span 11-12:  but => contrast-01
Span 24-25:  election => elect-01
Span 21-22:  fight => fight-01
Span 36-37:  increased => increase-01
Span 12-13:  it => it
Span 23-24:  next => next
Span 1-2:  promises => promise-01
Span 10-11:  side => side
Span 4-5:  taxes => tax-01
Span 14-15:  unlikely => (likely :polarity -)
Span 19-20:  wish => wish-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),increased,increase-01,false), Span(34,35,List(1),actually,actual,false), Span(27,28,List(2),background,background,false), Span(24,25,List(3),election,elect-01,false), Span(23,24,List(4),next,next,false), Span(21,22,List(5),fight,fight-01,false), Span(19,20,List(6),wish,wish-01,false), Span(14,15,List(8, 7),unlikely,(likely :polarity -),false), Span(12,13,List(9),it,it,false), Span(11,12,List(10),but,contrast-01,false), Span(10,11,List(11),side,side,false), Span(7,8,List(12),brushed,brush-02,false), Span(4,5,List(13),taxes,tax-01,false), Span(1,2,List(14),promises,promise-01,false)),Map(2 -> background, 5 -> fight-01, 12 -> brush-02, 8 -> -, 7 -> likely, 1 -> actual, 4 -> next, 11 -> side, 14 -> promise-01, 6 -> wish-01, 0 -> increase-01, 9 -> it, 3 -> elect-01, 10 -> contrast-01, 13 -> tax-01),Map(e -> elect-01, n -> next, w -> wish-01, b -> background, t -> tax-01, b2 -> brush-02, s -> side, p -> promise-01, a -> actual, i2 -> it, i -> increase-01, c -> contrast-01, l -> likely, f -> fight-01))),[Ljava.lang.String;@42077608,Annotation([Ljava.lang.String;@77d62915,[Ljava.lang.String;@d235f2a,[Ljava.lang.String;@d3cc523),Annotation([Ljava.lang.String;@10b2839f,[Ljava.lang.String;@37df4449,[Ledu.cmu.lti.nlp.amr.Dependency;@22fc3147),Annotation([Ljava.lang.String;@5b073e42,[Ljava.lang.String;@38888dbe,[Ljava.lang.String;@d11d1f1),Annotation([Ljava.lang.String;@cee2beb,[Ljava.lang.String;@688557ee,[Ledu.cmu.lti.nlp.amr.Entity;@a4fffde))
AMR:
(b2 / brush-02, ARG1, t / tax-01)
(c / contrast-01, ARG0, a / actual)
(c / contrast-01, ARG1, b2 / brush-02)
(c / contrast-01, ARG2, l / likely)
(e / elect-01, ARG1, b / background)
(e / elect-01, mod, n / next)
(f / fight-01, ARG1, i2 / it)
(f / fight-01, ARG2, e / elect-01)
(i / increase-01, ARG1, b / background)
(i2 / it, prep-in, s / side)
(l / likely, domain, w / wish-01)
(l / likely, polarity, -)
(p / promise-01, ARG1, t / tax-01)
(w / wish-01, ARG1, f / fight-01)

Decoded in 256,350 microseconds
Sentence: there is the right to promise which a promisor must have if his promise is to be binding

Spans:
Span 17-18:  binding => bind-01
Span 13-14:  promise => promise-01
Span 5-6:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),binding,bind-01,false), Span(13,14,List(1),promise,promise-01,false), Span(5,6,List(2),promise,promise-01,false)),Map(2 -> promise-01, 1 -> promise-01, 0 -> bind-01),Map(b -> bind-01, p2 -> promise-01, p -> promise-01))),[Ljava.lang.String;@a274d1c,Annotation([Ljava.lang.String;@1a376e79,[Ljava.lang.String;@2d35d761,[Ljava.lang.String;@29cf3877),Annotation([Ljava.lang.String;@63842212,[Ljava.lang.String;@77d8fec8,[Ledu.cmu.lti.nlp.amr.Dependency;@473f39f0),Annotation([Ljava.lang.String;@7f4e01b,[Ljava.lang.String;@5da510b1,[Ljava.lang.String;@7feb047e),Annotation([Ljava.lang.String;@1e742dce,[Ljava.lang.String;@5d6b3f00,[Ledu.cmu.lti.nlp.amr.Entity;@2bf548ea))
AMR:
(b / bind-01, ARG0, p / promise-01)
(b / bind-01, ARG1, p2 / promise-01)

Decoded in 13,926 microseconds
Sentence: sir robert agreed that brs industrial relations had to be improved and promised to do so as soon as the strike was over

Spans:
Span 2-3:  agreed => agree-01
Span 11-12:  and => and
Span 10-11:  improved => improve-01
Span 5-6:  industrial => industry
Span 12-13:  promised => promise-01
Span 6-7:  relations => relation
Span 15-16:  so => so
Span 17-18:  soon => soon
Span 20-21:  strike => strike-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),strike,strike-01,false), Span(17,18,List(1),soon,soon,false), Span(15,16,List(2),so,so,false), Span(12,13,List(3),promised,promise-01,false), Span(11,12,List(4),and,and,false), Span(10,11,List(5),improved,improve-01,false), Span(6,7,List(6),relations,relation,false), Span(5,6,List(7),industrial,industry,false), Span(2,3,List(8),agreed,agree-01,false)),Map(2 -> so, 5 -> improve-01, 8 -> agree-01, 7 -> industry, 1 -> soon, 4 -> and, 6 -> relation, 0 -> strike-01, 3 -> promise-01),Map(s2 -> soon, s -> strike-01, p -> promise-01, a -> and, i2 -> industry, a2 -> agree-01, r -> relation, i -> improve-01, s3 -> so))),[Ljava.lang.String;@74861131,Annotation([Ljava.lang.String;@dd2e3bb,[Ljava.lang.String;@10651114,[Ljava.lang.String;@5b444074),Annotation([Ljava.lang.String;@5de3ae7b,[Ljava.lang.String;@ed43d65,[Ledu.cmu.lti.nlp.amr.Dependency;@100ab97e),Annotation([Ljava.lang.String;@3018076c,[Ljava.lang.String;@798f5c1e,[Ljava.lang.String;@32e8f3eb),Annotation([Ljava.lang.String;@5be5e369,[Ljava.lang.String;@51b531a1,[Ledu.cmu.lti.nlp.amr.Entity;@4ecd6aef))
AMR:
(a / and, op, i / improve-01)
(a / and, op, p / promise-01)
(a2 / agree-01, ARG1, a / and)
(i / improve-01, ARG1, r / relation)
(i2 / industry, op, s / strike-01)
(p / promise-01, ARG1, s3 / so)
(s / strike-01, ARG0, s2 / soon)
(s / strike-01, ARG1, r / relation)

Decoded in 95,809 microseconds
Sentence:   but with the dramatic pace of change now in east germany the wall effectively broken free elections promised are they not tempted to go back

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   but with the dramatic pace of change now in east germany the wall effectively broken free elections promised are they not tempted to go back
myTokenized = but with the dramatic pace of change now in east germany the wall effectively broken free elections promised are they not tempted to go back
i = 0
prefix = List(but)
regexr = \Qb\E ?\Qu\E ?\Qt\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the plan is to market the chaser alongside the french ax3 a twoseat sidebyside aircraft which promises to offer good value and sparkling performance

Spans:
Span 14-15:  aircraft => aircraft
Span 7-8:  alongside => alongside
Span 21-22:  and => and
Span 9-10:  french => (country :name (name :op "France"))
Span 19-20:  good => good
Span 4-5:  market => market
Span 18-19:  offer => offer-01
Span 23-24:  performance => perform-01
Span 1-2:  plan => plan-01
Span 16-17:  promises => promise-01
Span 20-21:  value => value-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),performance,perform-01,false), Span(21,22,List(1),and,and,false), Span(20,21,List(2),value,value-01,false), Span(19,20,List(3),good,good,false), Span(18,19,List(4),offer,offer-01,false), Span(16,17,List(5),promises,promise-01,false), Span(14,15,List(6),aircraft,aircraft,false), Span(9,10,List(9, 8, 7),french,(country :name (name :op "France")),false), Span(7,8,List(10),alongside,alongside,false), Span(4,5,List(11),market,market,false), Span(1,2,List(12),plan,plan-01,false)),Map(2 -> value-01, 5 -> promise-01, 12 -> plan-01, 8 -> name, 7 -> country, 1 -> and, 4 -> offer-01, 11 -> market, 6 -> aircraft, 0 -> perform-01, 9 -> "France", 3 -> good, 10 -> alongside),Map(n -> name, p2 -> promise-01, a3 -> alongside, m -> market, v -> value-01, g -> good, p -> perform-01, a -> and, a2 -> aircraft, c -> country, o -> offer-01, p3 -> plan-01))),[Ljava.lang.String;@17c36215,Annotation([Ljava.lang.String;@1c5c5ce3,[Ljava.lang.String;@73d649a0,[Ljava.lang.String;@797be2c9),Annotation([Ljava.lang.String;@3466386e,[Ljava.lang.String;@2302d8a2,[Ledu.cmu.lti.nlp.amr.Dependency;@fdc85a3),Annotation([Ljava.lang.String;@56c99877,[Ljava.lang.String;@4d38d924,[Ljava.lang.String;@4f37f217),Annotation([Ljava.lang.String;@61f6eca2,[Ljava.lang.String;@1a29b1ed,[Ledu.cmu.lti.nlp.amr.Entity;@27604c06))
AMR:
(a / and, op, p / perform-01)
(a / and, op, v / value-01)
(c / country, name, n / name)
(m / market, time, a3 / alongside)
(n / name, op, "France")
(o / offer-01, ARG0, c / country)
(o / offer-01, ARG1, a / and)
(o / offer-01, ARG2, g / good)
(p2 / promise-01, ARG0, a2 / aircraft)
(p2 / promise-01, ARG1, o / offer-01)
(p3 / plan-01, ARG1, a / and)
(p3 / plan-01, purpose, m / market)

Decoded in 131,830 microseconds
Sentence: people promise permanence and fidelity and often it doesnt work out

Spans:
Span 5-6:  and => and
Span 3-4:  and => and
Span 7-8:  it => it
Span 6-7:  often => often
Span 1-2:  promise => promise-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),it,it,false), Span(6,7,List(1),often,often,false), Span(5,6,List(2),and,and,false), Span(3,4,List(3),and,and,false), Span(1,2,List(4),promise,promise-01,false)),Map(2 -> and, 1 -> often, 4 -> promise-01, 0 -> it, 3 -> and),Map(p -> promise-01, a -> and, a2 -> and, i -> it, o -> often))),[Ljava.lang.String;@231f321c,Annotation([Ljava.lang.String;@5512de47,[Ljava.lang.String;@49bf32f3,[Ljava.lang.String;@27aa1558),Annotation([Ljava.lang.String;@f5f58c0,[Ljava.lang.String;@3cbbad22,[Ledu.cmu.lti.nlp.amr.Dependency;@4563b254),Annotation([Ljava.lang.String;@1450cc63,[Ljava.lang.String;@449a8200,[Ljava.lang.String;@7bccf12f),Annotation([Ljava.lang.String;@4bee8428,[Ljava.lang.String;@1826850a,[Ledu.cmu.lti.nlp.amr.Entity;@8e85fe9))
AMR:
(a / and, op, o / often)
(p / promise-01, ARG0, a2 / and)
(p / promise-01, ARG1, a / and)
(p / promise-01, ARG2, i / it)

Decoded in 57,506 microseconds
Sentence: he had thought he was undergoing medical examination to see whether he was fit to take up a job in london that he had been promised by tunc kunter

NER Entity: (country :name (name :op "london"))
NER Entity: (country :name (name :op "london"))
Spans:
Span 7-8:  examination => examine-01
Span 13-14:  fit => fit-01
Span 22-23:  he => he
Span 11-12:  he => he
Span 3-4:  he => he
Span 0-1:  he => he
Span 18-19:  job => job
Span 20-21:  london => (city :name (name :op "London"))
Span 6-7:  medical => medicine
Span 25-26:  promised => promise-01
Span 9-10:  see => see-01
Span 2-3:  thought => think-01

Langrangian relaxation converged after 133 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),promised,promise-01,false), Span(22,23,List(1),he,he,false), Span(20,21,List(4, 3, 2),london,(city :name (name :op "London")),false), Span(18,19,List(5),job,job,false), Span(13,14,List(6),fit,fit-01,false), Span(11,12,List(7),he,he,false), Span(9,10,List(8),see,see-01,false), Span(7,8,List(9),examination,examine-01,false), Span(6,7,List(10),medical,medicine,false), Span(3,4,List(11),he,he,false), Span(2,3,List(12),thought,think-01,false), Span(0,1,List(13),he,he,false)),Map(2 -> city, 5 -> job, 12 -> think-01, 8 -> see-01, 7 -> he, 1 -> he, 4 -> "London", 11 -> he, 6 -> fit-01, 0 -> promise-01, 9 -> examine-01, 3 -> name, 10 -> medicine, 13 -> he),Map(e -> examine-01, n -> name, h -> he, h2 -> he, t -> think-01, j -> job, s -> see-01, h4 -> he, m -> medicine, p -> promise-01, c -> city, h3 -> he, f -> fit-01))),[Ljava.lang.String;@466f08f0,Annotation([Ljava.lang.String;@23b3e8b0,[Ljava.lang.String;@78718d1f,[Ljava.lang.String;@66e82bff),Annotation([Ljava.lang.String;@14a0a721,[Ljava.lang.String;@3f3c721b,[Ledu.cmu.lti.nlp.amr.Dependency;@19676b0c),Annotation([Ljava.lang.String;@54a4eddb,[Ljava.lang.String;@17fbf047,[Ljava.lang.String;@1d5bd19e),Annotation([Ljava.lang.String;@771eeb20,[Ljava.lang.String;@edebef9,[Ledu.cmu.lti.nlp.amr.Entity;@41cbd50f))
AMR:
(c / city, name, n / name)
(e / examine-01, ARG1, s / see-01)
(e / examine-01, mod, m / medicine)
(f / fit-01, ARG1, h2 / he)
(n / name, op, "London")
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG4, j / job)
(p / promise-01, concession, f / fit-01)
(p / promise-01, prep-on, c / city)
(s / see-01, ARG0, h3 / he)
(s / see-01, ARG1, f / fit-01)
(t / think-01, ARG0, h4 / he)
(t / think-01, ARG1, e / examine-01)

Decoded in 1,244,367 microseconds
Sentence: it wont be too long i promise

Spans:
Span 5-6:  i => i
Span 0-1:  it => it
Span 6-7:  promise => promise-01
Span 3-4:  too => too

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),promise,promise-01,false), Span(5,6,List(1),i,i,false), Span(3,4,List(2),too,too,false), Span(0,1,List(3),it,it,false)),Map(2 -> too, 1 -> i, 0 -> promise-01, 3 -> it),Map(t -> too, p -> promise-01, i2 -> it, i -> i))),[Ljava.lang.String;@2d10ed88,Annotation([Ljava.lang.String;@325a92d5,[Ljava.lang.String;@585df7c6,[Ljava.lang.String;@136157d),Annotation([Ljava.lang.String;@5bcc22a,[Ljava.lang.String;@2b6f5657,[Ledu.cmu.lti.nlp.amr.Dependency;@1a8d8008),Annotation([Ljava.lang.String;@3fd09ad6,[Ljava.lang.String;@18657855,[Ljava.lang.String;@2dbf20f6),Annotation([Ljava.lang.String;@5f0d0df0,[Ljava.lang.String;@520e3850,[Ledu.cmu.lti.nlp.amr.Entity;@23933646))
AMR:
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, i2 / it)
(p / promise-01, ARG2, t / too)

Decoded in 17,462 microseconds
Sentence: like all the other armies they promised to stay not one hour dash

Spans:
Span 1-2:  all => all
Span 4-5:  armies => army
Span 11-12:  hour => (temporal-quantity :unit hour)
Span 3-4:  other => other
Span 6-7:  promised => promise-01
Span 8-9:  stay => stay-01
Span 5-6:  they => they

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),hour,(temporal-quantity :unit hour),false), Span(8,9,List(2),stay,stay-01,false), Span(6,7,List(3),promised,promise-01,false), Span(5,6,List(4),they,they,false), Span(4,5,List(5),armies,army,false), Span(3,4,List(6),other,other,false), Span(1,2,List(7),all,all,false)),Map(2 -> stay-01, 5 -> army, 7 -> all, 1 -> hour, 4 -> they, 6 -> other, 0 -> temporal-quantity, 3 -> promise-01),Map(h -> hour, t -> temporal-quantity, s -> stay-01, p -> promise-01, a -> army, t2 -> they, a2 -> all, o -> other))),[Ljava.lang.String;@15d03fe9,Annotation([Ljava.lang.String;@1b13e52f,[Ljava.lang.String;@372b7e8c,[Ljava.lang.String;@88135a0),Annotation([Ljava.lang.String;@5ae79fbc,[Ljava.lang.String;@1ca81e44,[Ledu.cmu.lti.nlp.amr.Dependency;@615b110e),Annotation([Ljava.lang.String;@21bce011,[Ljava.lang.String;@771a8d64,[Ljava.lang.String;@7038dd52),Annotation([Ljava.lang.String;@254a6c0d,[Ljava.lang.String;@38fbdc9b,[Ledu.cmu.lti.nlp.amr.Entity;@1f506157))
AMR:
(a / army, mod, o / other)
(a / army, quant, a2 / all)
(p / promise-01, ARG0, t2 / they)
(p / promise-01, ARG1, s / stay-01)
(p / promise-01, source, a / army)
(s / stay-01, ARG0, t / temporal-quantity)
(t / temporal-quantity, unit, h / hour)

Decoded in 38,031 microseconds
Sentence: the prime minister xenophon zolotas presented to parliament a programme promising economic austerity writes peter thompson

NER Entity: (person :name (name :op "xenophon" :op "zolotas"))
Spans:
Span 11-12:  economic => economy
Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Span 7-8:  parliament => (government-organization :name (name :op "Parliament"))
Span 5-6:  presented => present-01
Span 1-2:  prime => prime
Span 9-10:  programme => program
Span 10-11:  promising => promise-01
Span 13-14:  writes => write-01
Span 3-5:  xenophon zolotas => (person :name (name :op "xenophon" :op "zolotas"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),writes,write-01,false), Span(11,12,List(1),economic,economy,false), Span(10,11,List(2),promising,promise-01,false), Span(9,10,List(3),programme,program,false), Span(7,8,List(6, 5, 4),parliament,(government-organization :name (name :op "Parliament")),false), Span(5,6,List(7),presented,present-01,false), Span(3,5,List(11, 10, 9, 8),xenophon zolotas,(person :name (name :op "xenophon" :op "zolotas")),false), Span(2,3,List(13, 12),minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(14),prime,prime,false)),Map(2 -> promise-01, 5 -> name, 12 -> have-org-role-91, 8 -> person, 7 -> present-01, 1 -> economy, 4 -> government-organization, 11 -> "zolotas", 14 -> prime, 6 -> "Parliament", 0 -> write-01, 9 -> name, 3 -> program, 10 -> "xenophon", 13 -> minister),Map(n -> name, e -> economy, w -> write-01, h -> have-org-role-91, p5 -> prime, p2 -> program, m -> minister, g -> government-organization, p -> promise-01, p4 -> person, n2 -> name, p3 -> present-01))),[Ljava.lang.String;@5626a6d0,Annotation([Ljava.lang.String;@391cde0,[Ljava.lang.String;@59632ef4,[Ljava.lang.String;@7e9fc304),Annotation([Ljava.lang.String;@2abc7c8e,[Ljava.lang.String;@3c95648d,[Ledu.cmu.lti.nlp.amr.Dependency;@73fc840d),Annotation([Ljava.lang.String;@4741acf8,[Ljava.lang.String;@28c2f254,[Ljava.lang.String;@16b37db4),Annotation([Ljava.lang.String;@6201c010,[Ljava.lang.String;@60e88cb4,[Ledu.cmu.lti.nlp.amr.Entity;@436daf20))
AMR:
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p5 / prime)
(n / name, op, "Parliament")
(n2 / name, op, "xenophon")
(n2 / name, op, "zolotas")
(p / promise-01, ARG1, p2 / program)
(p3 / present-01, ARG0, p4 / person)
(p3 / present-01, ARG1, p2 / program)
(p3 / present-01, ARG2, g / government-organization)
(p4 / person, name, n2 / name)
(w / write-01, ARG0, p4 / person)
(w / write-01, ARG1, e / economy)

Decoded in 100,549 microseconds
Sentence: moscow promised a package of measures last summer to end an unprecedented nationwide miners strike

NER Entity: (country :name (name :op "moscow"))
Spans:
Span 6-7:  last => last
Span 5-6:  measures => measure
Span 13-14:  miners => (person :ARG0-of mine-01)
Span 12-13:  nationwide => nationwide
Span 3-4:  package => package
Span 1-2:  promised => promise-01
Span 14-15:  strike => strike-01
Span 7-8:  summer => summer
Span 11-12:  unprecedented => (precedent :polarity -)

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),strike,strike-01,false), Span(13,14,List(2, 1),miners,(person :ARG0-of mine-01),false), Span(12,13,List(3),nationwide,nationwide,false), Span(11,12,List(5, 4),unprecedented,(precedent :polarity -),false), Span(7,8,List(6),summer,summer,false), Span(6,7,List(7),last,last,false), Span(5,6,List(8),measures,measure,false), Span(3,4,List(9),package,package,false), Span(1,2,List(10),promised,promise-01,false)),Map(2 -> mine-01, 5 -> -, 8 -> measure, 7 -> last, 1 -> person, 4 -> precedent, 6 -> summer, 9 -> package, 0 -> strike-01, 10 -> promise-01, 3 -> nationwide),Map(n -> nationwide, s2 -> summer, m2 -> measure, p2 -> precedent, s -> strike-01, m -> mine-01, p -> person, p4 -> promise-01, l -> last, p3 -> package))),[Ljava.lang.String;@418dad71,Annotation([Ljava.lang.String;@3c75f756,[Ljava.lang.String;@64c14e1c,[Ljava.lang.String;@4eef43f1),Annotation([Ljava.lang.String;@3e55abb3,[Ljava.lang.String;@6a7b94bd,[Ledu.cmu.lti.nlp.amr.Dependency;@57623ae8),Annotation([Ljava.lang.String;@72098229,[Ljava.lang.String;@4e408c3c,[Ljava.lang.String;@6fb6df46),Annotation([Ljava.lang.String;@4efca5f6,[Ljava.lang.String;@2cf3e1fd,[Ledu.cmu.lti.nlp.amr.Entity;@3f79c019))
AMR:
(m / mine-01, ARG0, p / person)
(m / mine-01, ARG1, s2 / summer)
(m2 / measure, consist, p3 / package)
(p2 / precedent, polarity, -)
(p4 / promise-01, ARG1, p3 / package)
(s / strike-01, ARG0, p / person)
(s / strike-01, ARG1, p3 / package)
(s / strike-01, mod, n / nationwide)
(s / strike-01, mod, p2 / precedent)
(s2 / summer, mod, l / last)

Decoded in 73,919 microseconds
Sentence: rather it is like the change occasioned by promising a creation in that case of a duty one did not have before

Spans:
Span 21-22:  before => before
Span 13-14:  case => case
Span 5-6:  change => change-01
Span 10-11:  creation => create-01
Span 16-17:  duty => duty
Span 1-2:  it => it
Span 8-9:  promising => promise-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),before,before,false), Span(16,17,List(1),duty,duty,false), Span(13,14,List(2),case,case,false), Span(10,11,List(3),creation,create-01,false), Span(8,9,List(4),promising,promise-01,false), Span(5,6,List(5),change,change-01,false), Span(1,2,List(6),it,it,false)),Map(2 -> case, 5 -> change-01, 1 -> duty, 4 -> promise-01, 6 -> it, 0 -> before, 3 -> create-01),Map(b -> before, d -> duty, p -> promise-01, c3 -> change-01, i -> it, c -> case, c2 -> create-01))),[Ljava.lang.String;@5232c9dd,Annotation([Ljava.lang.String;@462f654,[Ljava.lang.String;@7d1a070b,[Ljava.lang.String;@37c4a357),Annotation([Ljava.lang.String;@4ebfc15b,[Ljava.lang.String;@f2f65c1,[Ledu.cmu.lti.nlp.amr.Dependency;@70c169b0),Annotation([Ljava.lang.String;@2a01dba5,[Ljava.lang.String;@5ffb432e,[Ljava.lang.String;@68f7b23c),Annotation([Ljava.lang.String;@5dd6b6fa,[Ljava.lang.String;@3b870737,[Ledu.cmu.lti.nlp.amr.Entity;@1deaca69))
AMR:
(c2 / create-01, ARG0, c / case)
(c2 / create-01, ARG1, d / duty)
(c3 / change-01, ARG0, b / before)
(c3 / change-01, ARG1, i / it)
(p / promise-01, ARG0, c3 / change-01)
(p / promise-01, ARG1, c2 / create-01)

Decoded in 51,358 microseconds
Sentence: matata slept outside and promised to keep the fire burning i hoped he was a light sleeper

Spans:
Span 3-4:  and => and
Span 9-10:  burning => burn-01
Span 12-13:  he => he
Span 11-12:  hoped => hope-01
Span 10-11:  i => i
Span 15-16:  light => light
Span 2-3:  outside => outside
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),light,light,false), Span(12,13,List(1),he,he,false), Span(11,12,List(2),hoped,hope-01,false), Span(10,11,List(3),i,i,false), Span(9,10,List(4),burning,burn-01,false), Span(4,5,List(5),promised,promise-01,false), Span(3,4,List(6),and,and,false), Span(2,3,List(7),outside,outside,false)),Map(2 -> hope-01, 5 -> promise-01, 7 -> outside, 1 -> he, 4 -> burn-01, 6 -> and, 0 -> light, 3 -> i),Map(h -> he, b -> burn-01, h2 -> hope-01, p -> promise-01, a -> and, i -> i, l -> light, o -> outside))),[Ljava.lang.String;@218ec2d7,Annotation([Ljava.lang.String;@2399c277,[Ljava.lang.String;@43ae24e3,[Ljava.lang.String;@5df7d5cb),Annotation([Ljava.lang.String;@39f5329f,[Ljava.lang.String;@10ce8273,[Ledu.cmu.lti.nlp.amr.Dependency;@65d654a3),Annotation([Ljava.lang.String;@5a4ecd90,[Ljava.lang.String;@6b99d741,[Ljava.lang.String;@41032397),Annotation([Ljava.lang.String;@3515afd9,[Ljava.lang.String;@22cbeac9,[Ledu.cmu.lti.nlp.amr.Entity;@79a343f7))
AMR:
(a / and, op, o / outside)
(a / and, op, p / promise-01)
(b / burn-01, ARG0, l / light)
(b / burn-01, ARG1, i / i)
(h2 / hope-01, ARG0, i / i)
(h2 / hope-01, ARG1, h / he)
(p / promise-01, ARG1, b / burn-01)

Decoded in 50,921 microseconds
Sentence: he took the court lawyers number and promised to speak to her early in the morning

Spans:
Span 6-7:  and => and
Span 3-4:  court => court
Span 12-13:  early => early
Span 0-1:  he => he
Span 4-5:  lawyers => lawyer
Span 15-16:  morning => morning
Span 5-6:  number => number
Span 7-8:  promised => promise-01
Span 9-10:  speak => speak-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),morning,morning,false), Span(12,13,List(1),early,early,false), Span(9,10,List(2),speak,speak-01,false), Span(7,8,List(3),promised,promise-01,false), Span(6,7,List(4),and,and,false), Span(5,6,List(5),number,number,false), Span(4,5,List(6),lawyers,lawyer,false), Span(3,4,List(7),court,court,false), Span(0,1,List(8),he,he,false)),Map(2 -> speak-01, 5 -> number, 8 -> he, 7 -> court, 1 -> early, 4 -> and, 6 -> lawyer, 0 -> morning, 3 -> promise-01),Map(n -> number, e -> early, h -> he, s -> speak-01, m -> morning, p -> promise-01, a -> and, c -> court, l -> lawyer))),[Ljava.lang.String;@4dc34b84,Annotation([Ljava.lang.String;@5092eefe,[Ljava.lang.String;@5e888f05,[Ljava.lang.String;@5765c1bf),Annotation([Ljava.lang.String;@59930f6c,[Ljava.lang.String;@45d9a965,[Ledu.cmu.lti.nlp.amr.Dependency;@550049b6),Annotation([Ljava.lang.String;@5e77753,[Ljava.lang.String;@1f4aed2c,[Ljava.lang.String;@7018f3c0),Annotation([Ljava.lang.String;@762afbbe,[Ljava.lang.String;@7ff5b38d,[Ledu.cmu.lti.nlp.amr.Entity;@5bdf2f9c))
AMR:
(a / and, op, p / promise-01)
(c / court, mod, l / lawyer)
(n / number, mod, l / lawyer)
(p / promise-01, ARG1, n / number)
(p / promise-01, ARG2, s / speak-01)
(s / speak-01, ARG0, h / he)
(s / speak-01, ARG1, e / early)
(s / speak-01, time, m / morning)

Decoded in 42,370 microseconds
Sentence: he was talking about the white paper expected next autumn a document which promises to be more powerful and farreaching than the environment protection bill published last wednesday

Spans:
Span 18-19:  and => and
Span 24-25:  bill => bill
Span 11-12:  document => document
Span 22-23:  environment => environment
Span 7-8:  expected => expect-01
Span 0-1:  he => he
Span 26-27:  last => last
Span 8-9:  next => next
Span 6-7:  paper => paper
Span 17-18:  powerful => powerful
Span 13-14:  promises => promise-01
Span 23-24:  protection => protect-01
Span 25-26:  published => publish-01
Span 2-3:  talking => talk-01
Span 5-6:  white => white

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),last,last,false), Span(25,26,List(1),published,publish-01,false), Span(24,25,List(2),bill,bill,false), Span(23,24,List(3),protection,protect-01,false), Span(22,23,List(4),environment,environment,false), Span(18,19,List(5),and,and,false), Span(17,18,List(6),powerful,powerful,false), Span(13,14,List(7),promises,promise-01,false), Span(11,12,List(8),document,document,false), Span(8,9,List(9),next,next,false), Span(7,8,List(10),expected,expect-01,false), Span(6,7,List(11),paper,paper,false), Span(5,6,List(12),white,white,false), Span(2,3,List(13),talking,talk-01,false), Span(0,1,List(14),he,he,false)),Map(2 -> bill, 5 -> and, 12 -> white, 8 -> document, 7 -> promise-01, 1 -> publish-01, 4 -> environment, 11 -> paper, 14 -> he, 6 -> powerful, 0 -> last, 9 -> next, 3 -> protect-01, 10 -> expect-01, 13 -> talk-01),Map(e -> environment, n -> next, w -> white, h -> he, p5 -> paper, t -> talk-01, b -> bill, p2 -> protect-01, e2 -> expect-01, d -> document, p -> publish-01, a -> and, p4 -> promise-01, l -> last, p3 -> powerful))),[Ljava.lang.String;@19aed9e3,Annotation([Ljava.lang.String;@2662d341,[Ljava.lang.String;@221b6417,[Ljava.lang.String;@3448337f),Annotation([Ljava.lang.String;@702cf1a9,[Ljava.lang.String;@16adc7c8,[Ledu.cmu.lti.nlp.amr.Dependency;@6b172719),Annotation([Ljava.lang.String;@3d08113c,[Ljava.lang.String;@5ca39971,[Ljava.lang.String;@78aef93a),Annotation([Ljava.lang.String;@276c8cbc,[Ljava.lang.String;@478b9edc,[Ledu.cmu.lti.nlp.amr.Entity;@1f6aa236))
AMR:
(a / and, manner, p / publish-01)
(e2 / expect-01, ARG0, l / last)
(e2 / expect-01, ARG1, p5 / paper)
(e2 / expect-01, ARG2, n / next)
(e2 / expect-01, condition, p4 / promise-01)
(p / publish-01, ARG0, b / bill)
(p / publish-01, ARG1, e / environment)
(p2 / protect-01, ARG1, e / environment)
(p4 / promise-01, ARG0, d / document)
(p4 / promise-01, ARG1, p3 / powerful)
(p5 / paper, mod, w / white)
(t / talk-01, ARG0, h / he)
(t / talk-01, ARG1, a / and)
(t / talk-01, medium, p5 / paper)

Decoded in 343,197 microseconds
Sentence: bartholomew school has been promised a share of the profit to pay for improvements

Spans:
Span 13-14:  improvements => improve-01
Span 11-12:  pay => pay-01
Span 9-10:  profit => profit-01
Span 4-5:  promised => promise-01
Span 1-2:  school => school
Span 6-7:  share => share-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),improvements,improve-01,false), Span(11,12,List(1),pay,pay-01,false), Span(9,10,List(2),profit,profit-01,false), Span(6,7,List(3),share,share-01,false), Span(4,5,List(4),promised,promise-01,false), Span(1,2,List(5),school,school,false)),Map(2 -> profit-01, 5 -> school, 1 -> pay-01, 4 -> promise-01, 0 -> improve-01, 3 -> share-01),Map(s2 -> school, p2 -> profit-01, s -> share-01, p -> pay-01, i -> improve-01, p3 -> promise-01))),[Ljava.lang.String;@11bf9757,Annotation([Ljava.lang.String;@3968d9db,[Ljava.lang.String;@12b6d64f,[Ljava.lang.String;@21afe622),Annotation([Ljava.lang.String;@232dd375,[Ljava.lang.String;@1595b85e,[Ledu.cmu.lti.nlp.amr.Dependency;@187b2e64),Annotation([Ljava.lang.String;@3f22b3ca,[Ljava.lang.String;@7f49b327,[Ljava.lang.String;@3f9106ba),Annotation([Ljava.lang.String;@4a50bdf0,[Ljava.lang.String;@7ae5fdad,[Ledu.cmu.lti.nlp.amr.Entity;@1171a7e4))
AMR:
(p / pay-01, ARG1, i / improve-01)
(p2 / profit-01, ARG1, p / pay-01)
(p3 / promise-01, ARG1, s2 / school)
(p3 / promise-01, ARG2, s / share-01)
(s / share-01, ARG1, p2 / profit-01)

Decoded in 38,924 microseconds
Sentence:   daniel promised he would take me to cramond when our run finished she told him at once

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   daniel promised he would take me to cramond when our run finished she told him at once
myTokenized = daniel promised he would take me to cramond when our run finished she told him at once
i = 0
prefix = List(daniel)
regexr = \Qd\E ?\Qa\E ?\Qn\E ?\Qi\E ?\Qe\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: these could include promising to join the european monetary system and mopping up liquidity by for example special banking deposit rates

Spans:
Span 10-11:  and => and
Span 18-19:  banking => banking
Span 1-2:  could => possible
Span 19-20:  deposit => deposit-01
Span 7-8:  european => (continent :name (name :op "Europe"))
Span 16-17:  example => example
Span 2-3:  include => include-01
Span 5-6:  join => join-01
Span 8-9:  monetary => money
Span 3-4:  promising => promise-01
Span 20-21:  rates => rate
Span 17-18:  special => special
Span 9-10:  system => system

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),rates,rate,false), Span(19,20,List(1),deposit,deposit-01,false), Span(18,19,List(2),banking,banking,false), Span(17,18,List(3),special,special,false), Span(16,17,List(4),example,example,false), Span(10,11,List(5),and,and,false), Span(9,10,List(6),system,system,false), Span(8,9,List(7),monetary,money,false), Span(7,8,List(10, 9, 8),european,(continent :name (name :op "Europe")),false), Span(5,6,List(11),join,join-01,false), Span(3,4,List(12),promising,promise-01,false), Span(2,3,List(13),include,include-01,false), Span(1,2,List(14),could,possible,false)),Map(2 -> banking, 5 -> and, 12 -> promise-01, 8 -> continent, 7 -> money, 1 -> deposit-01, 4 -> example, 11 -> join-01, 14 -> possible, 6 -> system, 0 -> rate, 9 -> name, 3 -> special, 10 -> "Europe", 13 -> include-01),Map(e -> example, n -> name, s2 -> system, b -> banking, p2 -> possible, j -> join-01, s -> special, d -> deposit-01, m -> money, p -> promise-01, a -> and, r -> rate, i -> include-01, c -> continent))),[Ljava.lang.String;@46ec1cad,Annotation([Ljava.lang.String;@374ec63b,[Ljava.lang.String;@14b867db,[Ljava.lang.String;@56aa657d),Annotation([Ljava.lang.String;@4ced1dfe,[Ljava.lang.String;@634c3626,[Ledu.cmu.lti.nlp.amr.Dependency;@20772bb8),Annotation([Ljava.lang.String;@6fd74dae,[Ljava.lang.String;@202d13df,[Ljava.lang.String;@6f73a5f9),Annotation([Ljava.lang.String;@1195b799,[Ljava.lang.String;@7c48a6d3,[Ledu.cmu.lti.nlp.amr.Entity;@5c0a664))
AMR:
(a / and, op, p / promise-01)
(a / and, op, r / rate)
(b / banking, mod, s / special)
(c / continent, name, n / name)
(d / deposit-01, ARG0, c / continent)
(d / deposit-01, ARG1, e / example)
(d / deposit-01, ARG3, r / rate)
(i / include-01, ARG1, p / promise-01)
(j / join-01, ARG1, s2 / system)
(n / name, op, "Europe")
(p / promise-01, ARG2, j / join-01)
(p2 / possible, domain, i / include-01)
(r / rate, mod, s / special)
(s2 / system, topic, m / money)

Decoded in 87,339 microseconds
Sentence: for instance he promises to use publicity to shame polluters and for that to work he must assure the public that the nra is worth taking notice of

Spans:
Span 10-11:  and => and
Span 17-18:  assure => assure-01
Span 15-16:  he => he
Span 2-3:  he => he
Span 26-27:  notice => notice
Span 3-4:  promises => promise-01
Span 19-20:  public => public
Span 6-7:  publicity => publicity
Span 8-9:  shame => shame
Span 5-6:  use => use-01
Span 24-25:  worth => worth

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),notice,notice,false), Span(24,25,List(1),worth,worth,false), Span(19,20,List(2),public,public,false), Span(17,18,List(3),assure,assure-01,false), Span(15,16,List(4),he,he,false), Span(10,11,List(5),and,and,false), Span(8,9,List(6),shame,shame,false), Span(6,7,List(7),publicity,publicity,false), Span(5,6,List(8),use,use-01,false), Span(3,4,List(9),promises,promise-01,false), Span(2,3,List(10),he,he,false)),Map(2 -> public, 5 -> and, 8 -> use-01, 7 -> publicity, 1 -> worth, 4 -> he, 6 -> shame, 9 -> promise-01, 0 -> notice, 10 -> he, 3 -> assure-01),Map(w -> worth, n -> notice, h -> he, h2 -> he, p2 -> publicity, s -> shame, p -> public, a -> assure-01, a2 -> and, u -> use-01, p3 -> promise-01))),[Ljava.lang.String;@2aebf22f,Annotation([Ljava.lang.String;@686901ac,[Ljava.lang.String;@45ecf8c1,[Ljava.lang.String;@48bf6ac4),Annotation([Ljava.lang.String;@efa8f2c,[Ljava.lang.String;@63cd9962,[Ledu.cmu.lti.nlp.amr.Dependency;@4f11241e),Annotation([Ljava.lang.String;@6e5a561f,[Ljava.lang.String;@6ccc45d2,[Ljava.lang.String;@56fc15cb),Annotation([Ljava.lang.String;@3ffaef0a,[Ljava.lang.String;@73639a56,[Ledu.cmu.lti.nlp.amr.Entity;@1029bf49))
AMR:
(a / assure-01, ARG0, h / he)
(a / assure-01, ARG1, p / public)
(a2 / and, op, u / use-01)
(n / notice, op, u / use-01)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, u / use-01)
(u / use-01, ARG0, h2 / he)
(u / use-01, ARG1, p2 / publicity)
(u / use-01, ARG2, s / shame)
(w / worth, domain, h / he)

Decoded in 169,455 microseconds
Sentence: they made council housing a priority and they halved the housing inaudible seconds1 they promised a better deal for local government and ended up with the elderly freezing in their homes rubbish piled in the streets and the dead unburied

Spans:
Span 36-37:  and => and
Span 21-22:  and => and
Span 6-7:  and => and
Span 2-3:  council => council
Span 17-18:  deal => deal-01
Span 26-27:  elderly => elderly
Span 22-23:  ended => end-01
Span 27-28:  freezing => freeze-02
Span 30-31:  homes => home
Span 10-11:  housing => house-01
Span 3-4:  housing => house-01
Span 19-20:  local => local
Span 5-6:  priority => priority
Span 14-15:  promised => promise-01
Span 31-32:  rubbish => rubbish
Span 35-36:  streets => street
Span 13-14:  they => they
Span 7-8:  they => they
Span 0-1:  they => they

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),and,and,false), Span(35,36,List(1),streets,street,false), Span(31,32,List(2),rubbish,rubbish,false), Span(30,31,List(3),homes,home,false), Span(27,28,List(4),freezing,freeze-02,false), Span(26,27,List(5),elderly,elderly,false), Span(22,23,List(6),ended,end-01,false), Span(21,22,List(7),and,and,false), Span(19,20,List(8),local,local,false), Span(17,18,List(9),deal,deal-01,false), Span(14,15,List(10),promised,promise-01,false), Span(13,14,List(11),they,they,false), Span(10,11,List(12),housing,house-01,false), Span(7,8,List(13),they,they,false), Span(6,7,List(14),and,and,false), Span(5,6,List(15),priority,priority,false), Span(3,4,List(16),housing,house-01,false), Span(2,3,List(17),council,council,false), Span(0,1,List(18),they,they,false)),Map(2 -> rubbish, 5 -> elderly, 12 -> house-01, 15 -> priority, 8 -> local, 18 -> they, 7 -> and, 17 -> council, 1 -> street, 4 -> freeze-02, 11 -> they, 14 -> and, 6 -> end-01, 0 -> and, 9 -> deal-01, 16 -> house-01, 3 -> home, 10 -> promise-01, 13 -> they),Map(e -> elderly, h -> home, h2 -> house-01, t -> they, p2 -> priority, e2 -> end-01, a3 -> and, s -> street, d -> deal-01, t3 -> they, p -> promise-01, a -> and, t2 -> they, r -> rubbish, a2 -> and, c -> council, h3 -> house-01, l -> local, f -> freeze-02))),[Ljava.lang.String;@694db1da,Annotation([Ljava.lang.String;@6bd79538,[Ljava.lang.String;@1685c6d8,[Ljava.lang.String;@28c19a75),Annotation([Ljava.lang.String;@3e838c3a,[Ljava.lang.String;@2e6b53e6,[Ledu.cmu.lti.nlp.amr.Dependency;@85138d9),Annotation([Ljava.lang.String;@c6b32d3,[Ljava.lang.String;@51d5c103,[Ljava.lang.String;@2872d5ee),Annotation([Ljava.lang.String;@b3b1101,[Ljava.lang.String;@52d95e69,[Ledu.cmu.lti.nlp.amr.Entity;@3cc569fd))
AMR:
(a / and, op, s / street)
(a2 / and, op, e2 / end-01)
(a2 / and, op, p / promise-01)
(a3 / and, op, f / freeze-02)
(a3 / and, op, h3 / house-01)
(a3 / and, op, p2 / priority)
(d / deal-01, ARG1, e / elderly)
(e2 / end-01, ARG1, f / freeze-02)
(f / freeze-02, ARG0, l / local)
(f / freeze-02, ARG1, s / street)
(f / freeze-02, location, r / rubbish)
(h2 / house-01, ARG0, t2 / they)
(h2 / house-01, ARG1, p / promise-01)
(h3 / house-01, ARG0, t3 / they)
(h3 / house-01, ARG1, c / council)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, d / deal-01)
(r / rubbish, mod, h / home)

Decoded in 906,931 microseconds
Sentence: the employers promised priority consideration for jobs to pupils who reached targets of attendance punctuality and attainment in basic subjects during their last two years at school

Spans:
Span 15-16:  and => and
Span 18-19:  basic => basic
Span 4-5:  consideration => consider-02
Span 6-7:  jobs => job
Span 22-23:  last => last
Span 3-4:  priority => priority
Span 2-3:  promised => promise-01
Span 8-9:  pupils => pupil
Span 10-11:  reached => reach-01
Span 26-27:  school => school
Span 19-20:  subjects => subject
Span 11-12:  targets => target
Span 23-24:  two => 2
Span 24-25:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),school,school,false), Span(24,25,List(2, 1),years,(temporal-quantity :unit year),false), Span(23,24,List(3),two,2,false), Span(22,23,List(4),last,last,false), Span(19,20,List(5),subjects,subject,false), Span(18,19,List(6),basic,basic,false), Span(15,16,List(7),and,and,false), Span(11,12,List(8),targets,target,false), Span(10,11,List(9),reached,reach-01,false), Span(8,9,List(10),pupils,pupil,false), Span(6,7,List(11),jobs,job,false), Span(4,5,List(12),consideration,consider-02,false), Span(3,4,List(13),priority,priority,false), Span(2,3,List(14),promised,promise-01,false)),Map(2 -> year, 5 -> subject, 12 -> consider-02, 8 -> target, 7 -> and, 1 -> temporal-quantity, 4 -> last, 11 -> job, 14 -> promise-01, 6 -> basic, 0 -> school, 9 -> reach-01, 3 -> 2, 10 -> pupil, 13 -> priority),Map(2 -> 2, s2 -> subject, t -> temporal-quantity, b -> basic, p2 -> priority, j -> job, s -> school, y -> year, p -> pupil, a -> and, t2 -> target, r -> reach-01, c -> consider-02, l -> last, p3 -> promise-01))),[Ljava.lang.String;@61587c75,Annotation([Ljava.lang.String;@78531740,[Ljava.lang.String;@171ba877,[Ljava.lang.String;@18d1287b),Annotation([Ljava.lang.String;@4bb8aff7,[Ljava.lang.String;@4a28a7f7,[Ledu.cmu.lti.nlp.amr.Dependency;@332b6f2a),Annotation([Ljava.lang.String;@688f48a4,[Ljava.lang.String;@16ea3c9d,[Ljava.lang.String;@6c31732b),Annotation([Ljava.lang.String;@2280438b,[Ljava.lang.String;@12d26c5f,[Ledu.cmu.lti.nlp.amr.Entity;@34c8daa0))
AMR:
(a / and, op, r / reach-01)
(c / consider-02, ARG1, j / job)
(c / consider-02, ARG2, p / pupil)
(p3 / promise-01, ARG0, t / temporal-quantity)
(p3 / promise-01, ARG1, p2 / priority)
(p3 / promise-01, ARG2, c / consider-02)
(r / reach-01, ARG0, p / pupil)
(r / reach-01, ARG1, t2 / target)
(r / reach-01, ARG2, s / school)
(r / reach-01, time, l / last)
(s2 / subject, mod, b / basic)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(t2 / target, location, s2 / subject)

Decoded in 292,041 microseconds
Sentence:   esso have promised close liaison on the development and the protection of the floodplain and the environment generally and for that we are very grateful he said

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   esso have promised close liaison on the development and the protection of the floodplain and the environment generally and for that we are very grateful he said
myTokenized = esso have promised close liaison on the development and the protection of the floodplain and the environment generally and for that we are very grateful he said
i = 0
prefix = List(esso)
regexr = \Qe\E ?\Qs\E ?\Qs\E ?\Qo\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: his remarks during his first appearance as foreign secretary before the commons foreign affairs select committee promised continuing conflict within the ec on economic policy and foreshadowed latent tension between margaret thatcher and some senior ministers on the timing of erm membership

Spans:
Span 13-14:  affairs => affair
Span 32-33:  and => and
Span 25-26:  and => and
Span 5-6:  appearance => appear-01
Span 9-10:  before => before
Span 29-30:  between => between
Span 15-16:  committee => committee
Span 11-12:  commons => (government-organization :name (name :op "Commons"))
Span 18-19:  conflict => conflict-01
Span 17-18:  continuing => continue-01
Span 23-24:  economic => economy
Span 12-13:  foreign => foreign
Span 7-8:  foreign => foreign
Span 41-42:  membership => membership
Span 35-36:  ministers => (have-org-role-91 :ARG2 minister)
Span 24-25:  policy => policy
Span 16-17:  promised => promise-01
Span 1-2:  remarks => remark-01
Span 8-9:  secretary => secretary
Span 14-15:  select => select-01
Span 34-35:  senior => senior
Span 33-34:  some => some
Span 28-29:  tension => tension
Span 38-39:  timing => time-02
Span 19-20:  within => within

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),membership,membership,false), Span(38,39,List(1),timing,time-02,false), Span(35,36,List(3, 2),ministers,(have-org-role-91 :ARG2 minister),false), Span(34,35,List(4),senior,senior,false), Span(33,34,List(5),some,some,false), Span(32,33,List(6),and,and,false), Span(29,30,List(7),between,between,false), Span(28,29,List(8),tension,tension,false), Span(25,26,List(9),and,and,false), Span(24,25,List(10),policy,policy,false), Span(23,24,List(11),economic,economy,false), Span(19,20,List(12),within,within,false), Span(18,19,List(13),conflict,conflict-01,false), Span(17,18,List(14),continuing,continue-01,false), Span(16,17,List(15),promised,promise-01,false), Span(15,16,List(16),committee,committee,false), Span(14,15,List(17),select,select-01,false), Span(13,14,List(18),affairs,affair,false), Span(12,13,List(19),foreign,foreign,false), Span(11,12,List(22, 21, 20),commons,(government-organization :name (name :op "Commons")),false), Span(9,10,List(23),before,before,false), Span(8,9,List(24),secretary,secretary,false), Span(7,8,List(25),foreign,foreign,false), Span(5,6,List(26),appearance,appear-01,false), Span(1,2,List(27),remarks,remark-01,false)),Map(2 -> have-org-role-91, 5 -> some, 27 -> remark-01, 12 -> within, 8 -> tension, 15 -> promise-01, 21 -> name, 18 -> affair, 24 -> secretary, 7 -> between, 1 -> time-02, 17 -> select-01, 23 -> before, 26 -> appear-01, 4 -> senior, 11 -> economy, 14 -> continue-01, 20 -> government-organization, 6 -> and, 9 -> and, 0 -> membership, 22 -> "Commons", 16 -> committee, 19 -> foreign, 10 -> policy, 3 -> minister, 25 -> foreign, 13 -> conflict-01),Map(e -> economy, w -> within, n -> name, h -> have-org-role-91, s2 -> some, t -> time-02, b -> between, m2 -> minister, b2 -> before, p2 -> promise-01, a3 -> affair, s -> senior, s4 -> secretary, m -> membership, p -> policy, g -> government-organization, a -> and, c3 -> committee, t2 -> tension, r -> remark-01, a2 -> and, c -> conflict-01, s3 -> select-01, f2 -> foreign, f -> foreign, c2 -> continue-01, a4 -> appear-01))),[Ljava.lang.String;@7b4f840f,Annotation([Ljava.lang.String;@21673408,[Ljava.lang.String;@7e890a59,[Ljava.lang.String;@570699f5),Annotation([Ljava.lang.String;@7265d075,[Ljava.lang.String;@7a58ebff,[Ledu.cmu.lti.nlp.amr.Dependency;@63edf119),Annotation([Ljava.lang.String;@1a6fd390,[Ljava.lang.String;@23aaa07f,[Ljava.lang.String;@170f0424),Annotation([Ljava.lang.String;@5ad8e34f,[Ljava.lang.String;@55338621,[Ledu.cmu.lti.nlp.amr.Entity;@29ab0c3a))
AMR:
(a / and, op, a2 / and)
(a2 / and, op, p / policy)
(a2 / and, op, t2 / tension)
(a3 / affair, mod, g / government-organization)
(a4 / appear-01, ARG1, s4 / secretary)
(b / between, op, h / have-org-role-91)
(b2 / before, op, a3 / affair)
(c / conflict-01, concession, a2 / and)
(c2 / continue-01, ARG0, s2 / some)
(c2 / continue-01, ARG1, c / conflict-01)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG1, t / time-02)
(h / have-org-role-91, ARG2, m2 / minister)
(m2 / minister, mod, s / senior)
(n / name, op, "Commons")
(p / policy, mod, e / economy)
(p2 / promise-01, ARG1, c3 / committee)
(p2 / promise-01, ARG2, c2 / continue-01)
(r / remark-01, ARG1, a4 / appear-01)
(s3 / select-01, ARG0, s4 / secretary)
(s3 / select-01, ARG1, c3 / committee)
(s4 / secretary, mod, a3 / affair)
(s4 / secretary, mod, f2 / foreign)
(t / time-02, ARG0, f / foreign)
(t / time-02, ARG1, m / membership)
(t2 / tension, mod, b / between)
(w / within, op, p / policy)

Decoded in 526,563 microseconds
Sentence: rings speech four days later at the harvest thanksgiving festival promising an improvement in the availability of foodstuffs

Spans:
Span 15-16:  availability => available
Span 3-4:  days => (temporal-quantity :unit day)
Span 9-10:  festival => festival
Span 2-3:  four => 4
Span 7-8:  harvest => harvest-01
Span 12-13:  improvement => improve-01
Span 4-5:  later => late
Span 10-11:  promising => promise-01
Span 0-1:  rings => ring
Span 1-2:  speech => speech

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),availability,available,false), Span(12,13,List(1),improvement,improve-01,false), Span(10,11,List(2),promising,promise-01,false), Span(9,10,List(3),festival,festival,false), Span(7,8,List(4),harvest,harvest-01,false), Span(4,5,List(5),later,late,false), Span(3,4,List(7, 6),days,(temporal-quantity :unit day),false), Span(2,3,List(8),four,4,false), Span(1,2,List(9),speech,speech,false), Span(0,1,List(10),rings,ring,false)),Map(2 -> promise-01, 5 -> late, 8 -> 4, 7 -> day, 1 -> improve-01, 4 -> harvest-01, 6 -> temporal-quantity, 9 -> speech, 0 -> available, 10 -> ring, 3 -> festival),Map(h -> harvest-01, t -> temporal-quantity, s -> speech, d -> day, p -> promise-01, 4 -> 4, a -> available, r -> ring, i -> improve-01, l -> late, f -> festival))),[Ljava.lang.String;@1cafc935,Annotation([Ljava.lang.String;@58c2c549,[Ljava.lang.String;@5b266925,[Ljava.lang.String;@36c12ae3),Annotation([Ljava.lang.String;@43e6b92a,[Ljava.lang.String;@60869739,[Ledu.cmu.lti.nlp.amr.Dependency;@243250b1),Annotation([Ljava.lang.String;@634fa707,[Ljava.lang.String;@25eef81,[Ljava.lang.String;@26bdff5e),Annotation([Ljava.lang.String;@3c88831,[Ljava.lang.String;@62654ae7,[Ledu.cmu.lti.nlp.amr.Entity;@6818b628))
AMR:
(f / festival, purpose, h / harvest-01)
(i / improve-01, ARG1, a / available)
(l / late, op, h / harvest-01)
(l / late, op, t / temporal-quantity)
(p / promise-01, ARG0, s / speech)
(p / promise-01, ARG1, f / festival)
(p / promise-01, ARG2, i / improve-01)
(s / speech, mod, r / ring)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, d / day)

Decoded in 140,200 microseconds
Sentence: whatever george bush promises at the paris summit the us budget deficit is here to stay along with the high interest rates required to attract the money to fund it

NER Entity: (country :name (name :op "paris"))
Spans:
Span 16-17:  along => along
Span 24-25:  attract => attract-01
Span 10-11:  budget => budget
Span 2-3:  bush => bush-league
Span 11-12:  deficit => deficit
Span 28-29:  fund => fund-01
Span 13-14:  here => here
Span 19-20:  high => high
Span 20-21:  interest => interest-01
Span 29-30:  it => it
Span 26-27:  money => money
Span 3-4:  promises => promise-01
Span 21-22:  rates => rate
Span 22-23:  required => require-01
Span 15-16:  stay => stay-01
Span 7-8:  summit => summit
Span 0-1:  whatever => whatever

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),it,it,false), Span(28,29,List(1),fund,fund-01,false), Span(26,27,List(2),money,money,false), Span(24,25,List(3),attract,attract-01,false), Span(22,23,List(4),required,require-01,false), Span(21,22,List(5),rates,rate,false), Span(20,21,List(6),interest,interest-01,false), Span(19,20,List(7),high,high,false), Span(16,17,List(8),along,along,false), Span(15,16,List(9),stay,stay-01,false), Span(13,14,List(10),here,here,false), Span(11,12,List(11),deficit,deficit,false), Span(10,11,List(12),budget,budget,false), Span(7,8,List(13),summit,summit,false), Span(3,4,List(14),promises,promise-01,false), Span(2,3,List(15),bush,bush-league,false), Span(0,1,List(16),whatever,whatever,false)),Map(2 -> money, 5 -> rate, 12 -> budget, 15 -> bush-league, 8 -> along, 7 -> high, 1 -> fund-01, 4 -> require-01, 11 -> deficit, 14 -> promise-01, 6 -> interest-01, 0 -> it, 9 -> stay-01, 16 -> whatever, 3 -> attract-01, 10 -> here, 13 -> summit),Map(w -> whatever, h -> high, s2 -> summit, h2 -> here, b -> budget, b2 -> bush-league, s -> stay-01, m -> money, d -> deficit, p -> promise-01, r2 -> rate, a -> attract-01, i2 -> interest-01, i -> it, r -> require-01, a2 -> along, f -> fund-01))),[Ljava.lang.String;@6ba9dbac,Annotation([Ljava.lang.String;@5c95306c,[Ljava.lang.String;@469e31f0,[Ljava.lang.String;@3be0a7c8),Annotation([Ljava.lang.String;@1a275a2e,[Ljava.lang.String;@d918f6c,[Ledu.cmu.lti.nlp.amr.Dependency;@4f5f0269),Annotation([Ljava.lang.String;@66976434,[Ljava.lang.String;@5d33c68a,[Ljava.lang.String;@722fbdd3),Annotation([Ljava.lang.String;@1c57a236,[Ljava.lang.String;@3d5a95c3,[Ledu.cmu.lti.nlp.amr.Entity;@61e54ad))
AMR:
(a / attract-01, ARG0, r2 / rate)
(a / attract-01, ARG1, m / money)
(d / deficit, mod, b / budget)
(f / fund-01, ARG1, i / it)
(i2 / interest-01, mod, h / high)
(m / money, purpose, f / fund-01)
(p / promise-01, ARG0, b2 / bush-league)
(p / promise-01, ARG1, w / whatever)
(p / promise-01, time, s2 / summit)
(r / require-01, ARG1, a / attract-01)
(r2 / rate, mod, i2 / interest-01)
(s / stay-01, ARG0, d / deficit)
(s / stay-01, ARG1, p / promise-01)
(s / stay-01, ARG2, r2 / rate)
(s / stay-01, ARG3, a2 / along)
(s / stay-01, frequency, h2 / here)

Decoded in 362,877 microseconds
Sentence: dr elsarraj arrived in london after a trip to scandinavia where the norwegian peoples aid have promised him the dollars 400000 he estimates he needs to launch his project

NER Entity: (country :name (name :op "london"))
NER Entity: (thing :name (name :op "norwegian"))
mkDayMonthYear(400000,00,00,40)
mkDayMonthYear(400000,00,00,40)
NER Entity: (country :name (name :op "london"))
Spans:
Span 20-21:  400000 => (date-entity :day 0 :month 0 :year 40)
Span 5-6:  after => after
Span 14-15:  aid => aid-01
Span 2-3:  arrived => arrive-01
Span 19-20:  dollars => (monetary-quantity :unit dollar)
Span 22-23:  estimates => estimate-01
Span 23-24:  he => he
Span 21-22:  he => he
Span 26-27:  launch => launch-01
Span 4-5:  london => (city :name (name :op "London"))
Span 24-25:  needs => need-01
Span 13-14:  peoples => people
Span 28-29:  project => project
Span 16-17:  promised => promise-01
Span 7-8:  trip => trip-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),project,project,false), Span(26,27,List(1),launch,launch-01,false), Span(24,25,List(2),needs,need-01,false), Span(23,24,List(3),he,he,false), Span(22,23,List(4),estimates,estimate-01,false), Span(21,22,List(5),he,he,false), Span(20,21,List(9, 8, 7, 6),400000,(date-entity :day 0 :month 0 :year 40),false), Span(19,20,List(11, 10),dollars,(monetary-quantity :unit dollar),false), Span(16,17,List(12),promised,promise-01,false), Span(14,15,List(13),aid,aid-01,false), Span(13,14,List(14),peoples,people,false), Span(7,8,List(15),trip,trip-01,false), Span(5,6,List(16),after,after,false), Span(4,5,List(19, 18, 17),london,(city :name (name :op "London")),false), Span(2,3,List(20),arrived,arrive-01,false)),Map(2 -> need-01, 5 -> he, 12 -> promise-01, 15 -> trip-01, 8 -> 0, 18 -> name, 7 -> 0, 17 -> city, 1 -> launch-01, 4 -> estimate-01, 11 -> dollar, 14 -> people, 20 -> arrive-01, 6 -> date-entity, 0 -> project, 9 -> 40, 16 -> after, 19 -> "London", 3 -> he, 10 -> monetary-quantity, 13 -> aid-01),Map(e -> estimate-01, n -> need-01, h -> he, h2 -> he, t -> trip-01, p2 -> promise-01, a3 -> arrive-01, d -> date-entity, m -> monetary-quantity, p -> project, a -> aid-01, 4 -> 40, d2 -> dollar, 02 -> 0, a2 -> after, c -> city, l -> launch-01, 0 -> 0, p3 -> people, n2 -> name))),[Ljava.lang.String;@31492cfe,Annotation([Ljava.lang.String;@3b28f0f9,[Ljava.lang.String;@7ce489c6,[Ljava.lang.String;@116639),Annotation([Ljava.lang.String;@764e2837,[Ljava.lang.String;@5326f8f,[Ledu.cmu.lti.nlp.amr.Dependency;@323a17f3),Annotation([Ljava.lang.String;@3fa6c48,[Ljava.lang.String;@2ddaed02,[Ljava.lang.String;@7ffe35d2),Annotation([Ljava.lang.String;@a7fafa4,[Ljava.lang.String;@44e43d5e,[Ledu.cmu.lti.nlp.amr.Entity;@647909a7))
AMR:
(a / aid-01, ARG1, p3 / people)
(a2 / after, op, t / trip-01)
(a3 / arrive-01, ARG1, p2 / promise-01)
(a3 / arrive-01, ARG4, c / city)
(a3 / arrive-01, time, a2 / after)
(c / city, name, n2 / name)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 4 / 40)
(e / estimate-01, ARG0, h2 / he)
(e / estimate-01, ARG1, d / date-entity)
(l / launch-01, ARG0, h / he)
(l / launch-01, ARG1, p / project)
(m / monetary-quantity, unit, d2 / dollar)
(n / need-01, ARG0, h2 / he)
(n / need-01, ARG1, l / launch-01)
(n2 / name, op, "London")
(p2 / promise-01, ARG0, a / aid-01)
(p2 / promise-01, ARG1, m / monetary-quantity)
(p2 / promise-01, ARG2, d / date-entity)

Decoded in 662,086 microseconds
Sentence: tirol was another inexpensive yearling purchase at 52000 guineas and hannon promised there would be further repayments on his price

Spans:
Span 9-10:  and => and
Span 2-3:  another => another
Span 15-16:  further => further
Span 19-20:  price => (thing :ARG2-of price-01)
Span 11-12:  promised => promise-01
Span 5-6:  purchase => purchase-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),price,(thing :ARG2-of price-01),false), Span(15,16,List(2),further,further,false), Span(11,12,List(3),promised,promise-01,false), Span(9,10,List(4),and,and,false), Span(5,6,List(5),purchase,purchase-01,false), Span(2,3,List(6),another,another,false)),Map(2 -> further, 5 -> purchase-01, 1 -> price-01, 4 -> and, 6 -> another, 0 -> thing, 3 -> promise-01),Map(t -> thing, p2 -> promise-01, p -> price-01, a -> and, a2 -> another, f -> further, p3 -> purchase-01))),[Ljava.lang.String;@4668e679,Annotation([Ljava.lang.String;@10f3360c,[Ljava.lang.String;@4f615685,[Ljava.lang.String;@7f775e79),Annotation([Ljava.lang.String;@75db9b4f,[Ljava.lang.String;@24b19bfc,[Ledu.cmu.lti.nlp.amr.Dependency;@877d036),Annotation([Ljava.lang.String;@72068d91,[Ljava.lang.String;@c386513,[Ljava.lang.String;@4a73c8a9),Annotation([Ljava.lang.String;@777af56e,[Ljava.lang.String;@2987460a,[Ledu.cmu.lti.nlp.amr.Entity;@70074fd2))
AMR:
(p / price-01, ARG2, t / thing)
(p2 / promise-01, ARG0, a / and)
(p2 / promise-01, ARG1, t / thing)
(p3 / purchase-01, ARG0, a / and)
(p3 / purchase-01, ARG1, f / further)
(p3 / purchase-01, mod, a2 / another)

Decoded in 33,093 microseconds
Sentence: he promised that britain would not hesitate to contact luxembourg if the broadcasting standards council felt there was any problem with it

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "luxembourg"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 18-19:  any => any
Span 3-4:  britain => (country :name (name :op "Britain"))
Span 12-13:  broadcasting => broadcast-01
Span 8-9:  contact => contact-01
Span 14-15:  council => council
Span 15-16:  felt => feel-01
Span 0-1:  he => he
Span 6-7:  hesitate => hesitate-01
Span 21-22:  it => it
Span 19-20:  problem => problem
Span 1-2:  promised => promise-01
Span 13-14:  standards => standard

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),it,it,false), Span(19,20,List(1),problem,problem,false), Span(18,19,List(2),any,any,false), Span(15,16,List(3),felt,feel-01,false), Span(14,15,List(4),council,council,false), Span(13,14,List(5),standards,standard,false), Span(12,13,List(6),broadcasting,broadcast-01,false), Span(8,9,List(7),contact,contact-01,false), Span(6,7,List(8),hesitate,hesitate-01,false), Span(3,4,List(11, 10, 9),britain,(country :name (name :op "Britain")),false), Span(1,2,List(12),promised,promise-01,false), Span(0,1,List(13),he,he,false)),Map(2 -> any, 5 -> standard, 12 -> promise-01, 8 -> hesitate-01, 7 -> contact-01, 1 -> problem, 4 -> council, 11 -> "Britain", 6 -> broadcast-01, 0 -> it, 9 -> country, 3 -> feel-01, 10 -> name, 13 -> he),Map(n -> name, h -> hesitate-01, h2 -> he, b -> broadcast-01, p2 -> promise-01, s -> standard, p -> problem, a -> any, c3 -> country, i -> it, c -> council, f -> feel-01, c2 -> contact-01))),[Ljava.lang.String;@740227c,Annotation([Ljava.lang.String;@397fe9c,[Ljava.lang.String;@6fccb59b,[Ljava.lang.String;@68a70c74),Annotation([Ljava.lang.String;@2f22c959,[Ljava.lang.String;@14d10a3c,[Ledu.cmu.lti.nlp.amr.Dependency;@27f6f3d1),Annotation([Ljava.lang.String;@460132d6,[Ljava.lang.String;@78b0a381,[Ljava.lang.String;@14bea80e),Annotation([Ljava.lang.String;@710b39c5,[Ljava.lang.String;@17fdee7e,[Ledu.cmu.lti.nlp.amr.Entity;@20349e80))
AMR:
(b / broadcast-01, ARG1, c / council)
(c / council, mod, s / standard)
(c2 / contact-01, ARG0, c3 / country)
(c2 / contact-01, ARG1, i / it)
(c3 / country, name, n / name)
(f / feel-01, ARG0, c / council)
(f / feel-01, ARG1, p / problem)
(h / hesitate-01, ARG1, c2 / contact-01)
(h / hesitate-01, condition, f / feel-01)
(n / name, op, "Britain")
(p / problem, mod, a / any)
(p2 / promise-01, ARG0, h2 / he)
(p2 / promise-01, ARG1, h / hesitate-01)

Decoded in 122,067 microseconds
Sentence: the benefit claimants have been promised extra dash

Spans:
Span 1-2:  benefit => benefit-01
Span 6-7:  extra => extra
Span 5-6:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),extra,extra,false), Span(5,6,List(1),promised,promise-01,false), Span(1,2,List(2),benefit,benefit-01,false)),Map(2 -> benefit-01, 1 -> promise-01, 0 -> extra),Map(e -> extra, b -> benefit-01, p -> promise-01))),[Ljava.lang.String;@5e91f604,Annotation([Ljava.lang.String;@40aeb11d,[Ljava.lang.String;@cee0818,[Ljava.lang.String;@5f556649),Annotation([Ljava.lang.String;@5fae7384,[Ljava.lang.String;@3622102f,[Ledu.cmu.lti.nlp.amr.Dependency;@7654996c),Annotation([Ljava.lang.String;@2c24be25,[Ljava.lang.String;@203f85c7,[Ljava.lang.String;@2a67dc5b),Annotation([Ljava.lang.String;@8b3f01d,[Ljava.lang.String;@5d590461,[Ledu.cmu.lti.nlp.amr.Entity;@7f2eac27))
AMR:
(b / benefit-01, ARG1, e / extra)
(p / promise-01, ARG1, e / extra)

Decoded in 6,901 microseconds
Sentence: the organisers promise a strong handson element dash

Spans:
Span 6-7:  element => element
Span 2-3:  promise => promise-01
Span 4-5:  strong => strong

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),element,element,false), Span(4,5,List(1),strong,strong,false), Span(2,3,List(2),promise,promise-01,false)),Map(2 -> promise-01, 1 -> strong, 0 -> element),Map(e -> element, s -> strong, p -> promise-01))),[Ljava.lang.String;@512875ac,Annotation([Ljava.lang.String;@374598d4,[Ljava.lang.String;@3a34a2a5,[Ljava.lang.String;@55a21c7d),Annotation([Ljava.lang.String;@5fc7e77,[Ljava.lang.String;@3d2b9b3,[Ledu.cmu.lti.nlp.amr.Dependency;@7f9d98ba),Annotation([Ljava.lang.String;@43961cca,[Ljava.lang.String;@343c3470,[Ljava.lang.String;@5c96bfda),Annotation([Ljava.lang.String;@2d0db0b3,[Ljava.lang.String;@5dcbcee0,[Ledu.cmu.lti.nlp.amr.Entity;@6f7b043b))
AMR:
(e / element, mod, s / strong)
(p / promise-01, ARG1, e / element)

Decoded in 10,183 microseconds
Sentence: dentists active in the campaign to reduce the amount of sugar consumed have criticised the title the alleged selectivity of the contents and the failure of the new publication to provide recently published material as promised

Spans:
Span 1-2:  active => active
Span 17-18:  alleged => allege-01
Span 8-9:  amount => amount
Span 22-23:  and => and
Span 4-5:  campaign => campaign-01
Span 11-12:  consumed => consume-01
Span 21-22:  contents => (thing :ARG1-of contain-01)
Span 13-14:  criticised => criticize-01
Span 24-25:  failure => fail-01
Span 33-34:  material => material
Span 27-28:  new => new
Span 35-36:  promised => promise-01
Span 30-31:  provide => provide-01
Span 28-29:  publication => publication
Span 32-33:  published => publish-01
Span 31-32:  recently => recent
Span 6-7:  reduce => reduce-01
Span 10-11:  sugar => sugar-cane
Span 15-16:  title => title

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),promised,promise-01,false), Span(33,34,List(1),material,material,false), Span(32,33,List(2),published,publish-01,false), Span(31,32,List(3),recently,recent,false), Span(30,31,List(4),provide,provide-01,false), Span(28,29,List(5),publication,publication,false), Span(27,28,List(6),new,new,false), Span(24,25,List(7),failure,fail-01,false), Span(22,23,List(8),and,and,false), Span(21,22,List(10, 9),contents,(thing :ARG1-of contain-01),false), Span(17,18,List(11),alleged,allege-01,false), Span(15,16,List(12),title,title,false), Span(13,14,List(13),criticised,criticize-01,false), Span(11,12,List(14),consumed,consume-01,false), Span(10,11,List(15),sugar,sugar-cane,false), Span(8,9,List(16),amount,amount,false), Span(6,7,List(17),reduce,reduce-01,false), Span(4,5,List(18),campaign,campaign-01,false), Span(1,2,List(19),active,active,false)),Map(2 -> publish-01, 5 -> publication, 12 -> title, 15 -> sugar-cane, 8 -> and, 18 -> campaign-01, 7 -> fail-01, 17 -> reduce-01, 1 -> material, 4 -> provide-01, 11 -> allege-01, 14 -> consume-01, 6 -> new, 0 -> promise-01, 9 -> thing, 16 -> amount, 19 -> active, 3 -> recent, 10 -> contain-01, 13 -> criticize-01),Map(n -> new, t -> thing, p2 -> publish-01, c4 -> campaign-01, a3 -> amount, s -> sugar-cane, m -> material, r2 -> reduce-01, p -> promise-01, c3 -> consume-01, a -> and, p4 -> publication, t2 -> title, r -> recent, a2 -> allege-01, c -> contain-01, f -> fail-01, p3 -> provide-01, c2 -> criticize-01, a4 -> active))),[Ljava.lang.String;@7552f6aa,Annotation([Ljava.lang.String;@19c04f13,[Ljava.lang.String;@2087759a,[Ljava.lang.String;@1d39e225),Annotation([Ljava.lang.String;@432dfa20,[Ljava.lang.String;@7f806d54,[Ledu.cmu.lti.nlp.amr.Dependency;@4889e731),Annotation([Ljava.lang.String;@55a9672b,[Ljava.lang.String;@64b463fc,[Ljava.lang.String;@7f10690a),Annotation([Ljava.lang.String;@e6050b2,[Ljava.lang.String;@5551dd7d,[Ledu.cmu.lti.nlp.amr.Entity;@71a4654d))
AMR:
(a / and, op, a2 / allege-01)
(a / and, op, f / fail-01)
(a / and, op, t / thing)
(c / contain-01, ARG1, t / thing)
(c2 / criticize-01, ARG0, a / and)
(c2 / criticize-01, ARG1, t2 / title)
(c3 / consume-01, ARG0, a3 / amount)
(c3 / consume-01, ARG1, s / sugar-cane)
(c4 / campaign-01, ARG1, r2 / reduce-01)
(f / fail-01, ARG1, p4 / publication)
(p2 / publish-01, ARG1, m / material)
(p3 / provide-01, ARG0, p4 / publication)
(p3 / provide-01, ARG1, m / material)
(p3 / provide-01, ARG3, p / promise-01)
(p3 / provide-01, time, r / recent)
(p4 / publication, mod, n / new)
(r2 / reduce-01, ARG0, a / and)
(r2 / reduce-01, ARG1, a3 / amount)
(r2 / reduce-01, ARG2, a4 / active)

Decoded in 564,694 microseconds
Sentence: marie ill stop him  i promise you ill rip him out of your lives

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = marie ill stop him  i promise you ill rip him out of your lives
myTokenized = marie ill stop him i promise you ill rip him out of your lives
i = 4
prefix = List(marie, ill, stop, him, i)
regexr = \Qm\E ?\Qa\E ?\Qr\E ?\Qi\E ?\Qe\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qs\E ?\Qt\E ?\Qo\E ?\Qp\E ?\Qh\E ?\Qi\E ?\Qm\E ?\Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: malcolm rifkind secretary of state for scotland has promised 20m over the next 20 years for the creation of 140 square miles of woodland in the belt between edinburgh and glasgow

Spans:
Span 19-20:  140 => 140
Span 13-14:  20 => 20
Span 29-30:  and => and
Span 26-27:  belt => belt
Span 27-28:  between => between
Span 17-18:  creation => create-01
Span 21-22:  miles => (distance-quantity :unit mile)
Span 12-13:  next => next
Span 8-9:  promised => promise-01
Span 6-7:  scotland => (country :name (name :op "Scotland"))
Span 2-3:  secretary => secretary
Span 20-21:  square => square
Span 4-5:  state => state
Span 14-15:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),and,and,false), Span(27,28,List(1),between,between,false), Span(26,27,List(2),belt,belt,false), Span(21,22,List(4, 3),miles,(distance-quantity :unit mile),false), Span(20,21,List(5),square,square,false), Span(19,20,List(6),140,140,false), Span(17,18,List(7),creation,create-01,false), Span(14,15,List(9, 8),years,(temporal-quantity :unit year),false), Span(13,14,List(10),20,20,false), Span(12,13,List(11),next,next,false), Span(8,9,List(12),promised,promise-01,false), Span(6,7,List(15, 14, 13),scotland,(country :name (name :op "Scotland")),false), Span(4,5,List(16),state,state,false), Span(2,3,List(17),secretary,secretary,false)),Map(2 -> belt, 5 -> square, 12 -> promise-01, 15 -> "Scotland", 8 -> temporal-quantity, 7 -> create-01, 17 -> secretary, 1 -> between, 4 -> mile, 11 -> next, 14 -> name, 6 -> 140, 0 -> and, 9 -> year, 16 -> state, 3 -> distance-quantity, 10 -> 20, 13 -> country),Map(n -> next, 2 -> 20, s2 -> state, b -> between, t -> temporal-quantity, b2 -> belt, s -> square, d -> distance-quantity, m -> mile, 1 -> 140, y -> year, p -> promise-01, a -> and, s3 -> secretary, c -> create-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@48078f54,Annotation([Ljava.lang.String;@6852f8bd,[Ljava.lang.String;@1f4875cd,[Ljava.lang.String;@4e2df5c6),Annotation([Ljava.lang.String;@2b62c243,[Ljava.lang.String;@60bfd2f5,[Ledu.cmu.lti.nlp.amr.Dependency;@51b30472),Annotation([Ljava.lang.String;@3fe90245,[Ljava.lang.String;@5a9420ca,[Ljava.lang.String;@32f4dc3b),Annotation([Ljava.lang.String;@69a6bf9f,[Ljava.lang.String;@426e95e9,[Ledu.cmu.lti.nlp.amr.Entity;@6a341611))
AMR:
(b / between, op, a / and)
(b / between, op, c2 / country)
(b2 / belt, mod, b / between)
(c / create-01, ARG0, c2 / country)
(c / create-01, ARG1, d / distance-quantity)
(c2 / country, name, n2 / name)
(d / distance-quantity, mod, s / square)
(d / distance-quantity, quant, 1 / 140)
(d / distance-quantity, unit, m / mile)
(n2 / name, op, "Scotland")
(p / promise-01, ARG1, s3 / secretary)
(s2 / state, location, c2 / country)
(s3 / secretary, mod, s2 / state)
(t / temporal-quantity, quant, 2 / 20)
(t / temporal-quantity, topic, c / create-01)
(t / temporal-quantity, unit, y / year)
(y / year, mod, n / next)

Decoded in 116,088 microseconds
Sentence: mr kunter placated him by promising the extra cash but mr usta never received it

Spans:
Span 9-10:  but => contrast-01
Span 8-9:  cash => cash
Span 7-8:  extra => extra
Span 14-15:  it => it
Span 5-6:  promising => promise-01
Span 13-14:  received => receive-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),it,it,false), Span(13,14,List(1),received,receive-01,false), Span(9,10,List(2),but,contrast-01,false), Span(8,9,List(3),cash,cash,false), Span(7,8,List(4),extra,extra,false), Span(5,6,List(5),promising,promise-01,false)),Map(2 -> contrast-01, 5 -> promise-01, 1 -> receive-01, 4 -> extra, 0 -> it, 3 -> cash),Map(e -> extra, p -> promise-01, r -> receive-01, i -> it, c -> contrast-01, c2 -> cash))),[Ljava.lang.String;@194ec90,Annotation([Ljava.lang.String;@5836e2bf,[Ljava.lang.String;@7b6096d7,[Ljava.lang.String;@24f3c89),Annotation([Ljava.lang.String;@200f478e,[Ljava.lang.String;@4b22cc13,[Ledu.cmu.lti.nlp.amr.Dependency;@598419ee),Annotation([Ljava.lang.String;@6fc2862b,[Ljava.lang.String;@4bf6aa5f,[Ljava.lang.String;@2f2b69ef),Annotation([Ljava.lang.String;@4b37e21a,[Ljava.lang.String;@41dd3f8a,[Ledu.cmu.lti.nlp.amr.Entity;@24769ece))
AMR:
(c / contrast-01, ARG1, c2 / cash)
(c / contrast-01, ARG2, r / receive-01)
(c2 / cash, mod, e / extra)
(p / promise-01, ARG1, c2 / cash)
(r / receive-01, ARG1, i / it)

Decoded in 29,349 microseconds
Sentence: until late last week it promised to be a heated occasion

Spans:
Span 9-10:  heated => heat-01
Span 4-5:  it => it
Span 2-3:  last => last
Span 1-2:  late => late
Span 10-11:  occasion => occasion
Span 5-6:  promised => promise-01
Span 0-1:  until => until
Span 3-4:  week => week

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),occasion,occasion,false), Span(9,10,List(1),heated,heat-01,false), Span(5,6,List(2),promised,promise-01,false), Span(4,5,List(3),it,it,false), Span(3,4,List(4),week,week,false), Span(2,3,List(5),last,last,false), Span(1,2,List(6),late,late,false), Span(0,1,List(7),until,until,false)),Map(2 -> promise-01, 5 -> last, 7 -> until, 1 -> heat-01, 4 -> week, 6 -> late, 0 -> occasion, 3 -> it),Map(w -> week, h -> heat-01, p -> promise-01, l2 -> late, i -> it, u -> until, l -> last, o -> occasion))),[Ljava.lang.String;@67b3f915,Annotation([Ljava.lang.String;@58a606e3,[Ljava.lang.String;@7c0e4e8c,[Ljava.lang.String;@f4708f5),Annotation([Ljava.lang.String;@9d14a9,[Ljava.lang.String;@48b7638f,[Ledu.cmu.lti.nlp.amr.Dependency;@7fe96694),Annotation([Ljava.lang.String;@344dc027,[Ljava.lang.String;@5c825b44,[Ljava.lang.String;@7235fcce),Annotation([Ljava.lang.String;@366872f6,[Ljava.lang.String;@3539062,[Ledu.cmu.lti.nlp.amr.Entity;@632c13a2))
AMR:
(h / heat-01, ARG1, o / occasion)
(p / promise-01, ARG0, i / it)
(p / promise-01, ARG1, o / occasion)
(p / promise-01, time, w / week)
(u / until, op, p / promise-01)
(w / week, mod, l / last)
(w / week, time, l2 / late)

Decoded in 52,113 microseconds
Sentence: i promise

Spans:
Span 0-1:  i => i
Span 1-2:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),promise,promise-01,false), Span(0,1,List(1),i,i,false)),Map(1 -> i, 0 -> promise-01),Map(p -> promise-01, i -> i))),[Ljava.lang.String;@62bd238b,Annotation([Ljava.lang.String;@6f68ad51,[Ljava.lang.String;@414ad9fb,[Ljava.lang.String;@192d0f3a),Annotation([Ljava.lang.String;@5d42b5bf,[Ljava.lang.String;@46aa3e6e,[Ledu.cmu.lti.nlp.amr.Dependency;@52e8cc00),Annotation([Ljava.lang.String;@31a93e86,[Ljava.lang.String;@5e47e8e2,[Ljava.lang.String;@430a7dc9),Annotation([Ljava.lang.String;@65c83981,[Ljava.lang.String;@3c37785b,[Ledu.cmu.lti.nlp.amr.Entity;@5dbebd3f))
AMR:
(p / promise-01, ARG0, i / i)

Decoded in 2,507 microseconds
Sentence: things you may have promised yourself for  years comforts you will certainly have earned by the time you  retire

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = things you may have promised yourself for  years comforts you will certainly have earned by the time you  retire
myTokenized = things you may have promised yourself for years comforts you will certainly have earned by the time you retire
i = 7
prefix = List(things, you, may, have, promised, yourself, for, years)
regexr = \Qt\E ?\Qh\E ?\Qi\E ?\Qn\E ?\Qg\E ?\Qs\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qm\E ?\Qa\E ?\Qy\E ?\Qh\E ?\Qa\E ?\Qv\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qd\E ?\Qy\E ?\Qo\E ?\Qu\E ?\Qr\E ?\Qs\E ?\Qe\E ?\Ql\E ?\Qf\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qy\E ?\Qe\E ?\Qa\E ?\Qr\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   councillors promised the bta help in finding alternative premises

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   councillors promised the bta help in finding alternative premises
myTokenized = councillors promised the bta help in finding alternative premises
i = 0
prefix = List(councillors)
regexr = \Qc\E ?\Qo\E ?\Qu\E ?\Qn\E ?\Qc\E ?\Qi\E ?\Ql\E ?\Ql\E ?\Qo\E ?\Qr\E ?\Qs\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   the speech was liberal in character promising that the new government would allow market forces and a strong political opposition

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   the speech was liberal in character promising that the new government would allow market forces and a strong political opposition
myTokenized = the speech was liberal in character promising that the new government would allow market forces and a strong political opposition
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence:   i promise you there is nothing to worry about now martha spoke with all the authority she could command

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   i promise you there is nothing to worry about now martha spoke with all the authority she could command
myTokenized = i promise you there is nothing to worry about now martha spoke with all the authority she could command
i = 0
prefix = List(i)
regexr = \Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: quite carried away i went on to answer supplementary questions about traggets explaining as best i could what prep was and promising to come back soon and see them all in my school blazer

Spans:
Span 29-30:  all => all
Span 26-27:  and => and
Span 20-21:  and => and
Span 7-8:  answer => answer-01
Span 2-3:  away => away
Span 24-25:  back => back
Span 16-17:  could => possible
Span 12-13:  explaining => explain-01
Span 15-16:  i => i
Span 3-4:  i => i
Span 21-22:  promising => promise-01
Span 9-10:  questions => question-01
Span 0-1:  quite => quite
Span 32-33:  school => school
Span 27-28:  see => see-01
Span 25-26:  soon => soon
Span 8-9:  supplementary => supplement-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),school,school,false), Span(29,30,List(1),all,all,false), Span(27,28,List(2),see,see-01,false), Span(26,27,List(3),and,and,false), Span(25,26,List(4),soon,soon,false), Span(24,25,List(5),back,back,false), Span(21,22,List(6),promising,promise-01,false), Span(20,21,List(7),and,and,false), Span(16,17,List(8),could,possible,false), Span(15,16,List(9),i,i,false), Span(12,13,List(10),explaining,explain-01,false), Span(9,10,List(11),questions,question-01,false), Span(8,9,List(12),supplementary,supplement-01,false), Span(7,8,List(13),answer,answer-01,false), Span(3,4,List(14),i,i,false), Span(2,3,List(15),away,away,false), Span(0,1,List(16),quite,quite,false)),Map(2 -> see-01, 5 -> back, 12 -> supplement-01, 15 -> away, 8 -> possible, 7 -> and, 1 -> all, 4 -> soon, 11 -> question-01, 14 -> i, 6 -> promise-01, 0 -> school, 9 -> i, 16 -> quite, 3 -> and, 10 -> explain-01, 13 -> answer-01),Map(e -> explain-01, q -> question-01, s2 -> see-01, b -> back, p2 -> possible, a3 -> and, s -> school, s4 -> supplement-01, p -> promise-01, a -> all, a5 -> away, i2 -> i, a2 -> and, i -> i, s3 -> soon, q2 -> quite, a4 -> answer-01))),[Ljava.lang.String;@122c3dca,Annotation([Ljava.lang.String;@168ca218,[Ljava.lang.String;@6ae5e138,[Ljava.lang.String;@1a255a5c),Annotation([Ljava.lang.String;@a4f5b6d,[Ljava.lang.String;@5ffb5664,[Ledu.cmu.lti.nlp.amr.Dependency;@6de4f076),Annotation([Ljava.lang.String;@51670b57,[Ljava.lang.String;@4419a681,[Ljava.lang.String;@70028214),Annotation([Ljava.lang.String;@34aa287f,[Ljava.lang.String;@f48c4dc,[Ledu.cmu.lti.nlp.amr.Entity;@72744f5a))
AMR:
(a2 / and, op, s2 / see-01)
(a3 / and, op, a4 / answer-01)
(a3 / and, purpose, a2 / and)
(a4 / answer-01, ARG1, q / question-01)
(b / back, op, s3 / soon)
(e / explain-01, ARG0, i / i)
(e / explain-01, ARG1, a5 / away)
(p / promise-01, ARG0, q2 / quite)
(p / promise-01, ARG1, s3 / soon)
(p / promise-01, ARG2, a2 / and)
(p2 / possible, domain, e / explain-01)
(q / question-01, ARG1, e / explain-01)
(s2 / see-01, ARG0, i2 / i)
(s2 / see-01, ARG1, s / school)
(s4 / supplement-01, ARG0, q / question-01)
(s4 / supplement-01, ARG1, a / all)

Decoded in 272,533 microseconds
Sentence: but i promised yves ellip

Spans:
Span 0-1:  but => contrast-01
Span 1-2:  i => i
Span 2-3:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),promised,promise-01,false), Span(1,2,List(1),i,i,false), Span(0,1,List(2),but,contrast-01,false)),Map(2 -> contrast-01, 1 -> i, 0 -> promise-01),Map(p -> promise-01, i -> i, c -> contrast-01))),[Ljava.lang.String;@3205d86a,Annotation([Ljava.lang.String;@1dc330ce,[Ljava.lang.String;@79b933a5,[Ljava.lang.String;@6dedd411),Annotation([Ljava.lang.String;@18fde079,[Ljava.lang.String;@439c34c0,[Ledu.cmu.lti.nlp.amr.Dependency;@444b4bed),Annotation([Ljava.lang.String;@2b65d7a2,[Ljava.lang.String;@2b2fe2f0,[Ljava.lang.String;@54dc10b6),Annotation([Ljava.lang.String;@3bcd4840,[Ljava.lang.String;@2242806c,[Ledu.cmu.lti.nlp.amr.Entity;@3bfd4406))
AMR:
(c / contrast-01, ARG2, p / promise-01)
(p / promise-01, ARG0, i / i)

Decoded in 4,858 microseconds
Sentence: the minister for the arts reported to parliament that the increased subsidy would enable the company to operate on a satisfactory basis in the future and promised that provision will also be made for subsequent years

Spans:
Span 30-31:  also => also
Span 25-26:  and => and
Span 4-5:  arts => art
Span 15-16:  company => company
Span 13-14:  enable => enable-01
Span 24-25:  future => future
Span 10-11:  increased => increase-01
Span 1-2:  minister => (have-org-role-91 :ARG2 minister)
Span 17-18:  operate => operate-01
Span 7-8:  parliament => (government-organization :name (name :op "Parliament"))
Span 26-27:  promised => promise-01
Span 5-6:  reported => report-01
Span 34-35:  subsequent => subsequent
Span 11-12:  subsidy => subsidy
Span 35-36:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(1, 0),years,(temporal-quantity :unit year),false), Span(34,35,List(2),subsequent,subsequent,false), Span(30,31,List(3),also,also,false), Span(26,27,List(4),promised,promise-01,false), Span(25,26,List(5),and,and,false), Span(24,25,List(6),future,future,false), Span(17,18,List(7),operate,operate-01,false), Span(15,16,List(8),company,company,false), Span(13,14,List(9),enable,enable-01,false), Span(11,12,List(10),subsidy,subsidy,false), Span(10,11,List(11),increased,increase-01,false), Span(7,8,List(14, 13, 12),parliament,(government-organization :name (name :op "Parliament")),false), Span(5,6,List(15),reported,report-01,false), Span(4,5,List(16),arts,art,false), Span(1,2,List(18, 17),minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> subsequent, 5 -> and, 12 -> government-organization, 15 -> report-01, 8 -> company, 18 -> minister, 7 -> operate-01, 17 -> have-org-role-91, 1 -> year, 4 -> promise-01, 11 -> increase-01, 14 -> "Parliament", 6 -> future, 0 -> temporal-quantity, 9 -> enable-01, 16 -> art, 3 -> also, 10 -> subsidy, 13 -> name),Map(e -> enable-01, n -> name, h -> have-org-role-91, s2 -> subsidy, t -> temporal-quantity, a3 -> art, s -> subsequent, m -> minister, y -> year, p -> promise-01, g -> government-organization, a -> also, r -> report-01, a2 -> and, i -> increase-01, c -> company, f -> future, o -> operate-01))),[Ljava.lang.String;@707d04ae,Annotation([Ljava.lang.String;@1fbe7534,[Ljava.lang.String;@1100b934,[Ljava.lang.String;@467f0da4),Annotation([Ljava.lang.String;@3f58ae24,[Ljava.lang.String;@5710ddf9,[Ledu.cmu.lti.nlp.amr.Dependency;@145d3317),Annotation([Ljava.lang.String;@72c53572,[Ljava.lang.String;@71380a3b,[Ljava.lang.String;@1627e18f),Annotation([Ljava.lang.String;@14497ea6,[Ljava.lang.String;@6519ceb1,[Ledu.cmu.lti.nlp.amr.Entity;@150fa52))
AMR:
(a2 / and, op, f / future)
(a2 / and, op, p / promise-01)
(e / enable-01, ARG0, s2 / subsidy)
(e / enable-01, ARG1, c / company)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, m / minister)
(i / increase-01, ARG0, s / subsequent)
(i / increase-01, ARG1, s2 / subsidy)
(i / increase-01, mod, a / also)
(n / name, op, "Parliament")
(o / operate-01, ARG0, t / temporal-quantity)
(o / operate-01, ARG1, s2 / subsidy)
(p / promise-01, ARG0, s2 / subsidy)
(r / report-01, ARG0, a3 / art)
(r / report-01, ARG1, a2 / and)
(r / report-01, ARG2, g / government-organization)
(t / temporal-quantity, unit, y / year)

Decoded in 388,297 microseconds
Sentence: in announcing next aprils increases in pensions and other benefits mr newton promised proposals he hoped later this year for a more farreaching reform of disability benefits following the fouryear study the government commissioned from the office of population censuses on surveys

Spans:
Span 7-8:  and => and
Span 1-2:  announcing => announce-01
Span 26-27:  benefits => benefit-01
Span 9-10:  benefits => benefit-01
Span 33-34:  commissioned => commission-01
Span 25-26:  disability => disability
Span 14-15:  he => he
Span 15-16:  hoped => hope-01
Span 4-5:  increases => increase-01
Span 16-17:  later => late
Span 2-3:  next => next
Span 36-37:  office => office
Span 8-9:  other => other
Span 6-7:  pensions => pension
Span 38-39:  population => population
Span 12-13:  promised => promise-01
Span 13-14:  proposals => (thing :ARG1-of propose-01)
Span 23-24:  reform => reform-01
Span 30-31:  study => study-01
Span 41-42:  surveys => survey-01
Span 17-18:  this => this
Span 18-19:  year => year

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),surveys,survey-01,false), Span(38,39,List(1),population,population,false), Span(36,37,List(2),office,office,false), Span(33,34,List(3),commissioned,commission-01,false), Span(30,31,List(4),study,study-01,false), Span(26,27,List(5),benefits,benefit-01,false), Span(25,26,List(6),disability,disability,false), Span(23,24,List(7),reform,reform-01,false), Span(18,19,List(8),year,year,false), Span(17,18,List(9),this,this,false), Span(16,17,List(10),later,late,false), Span(15,16,List(11),hoped,hope-01,false), Span(14,15,List(12),he,he,false), Span(13,14,List(14, 13),proposals,(thing :ARG1-of propose-01),false), Span(12,13,List(15),promised,promise-01,false), Span(9,10,List(16),benefits,benefit-01,false), Span(8,9,List(17),other,other,false), Span(7,8,List(18),and,and,false), Span(6,7,List(19),pensions,pension,false), Span(4,5,List(20),increases,increase-01,false), Span(2,3,List(21),next,next,false), Span(1,2,List(22),announcing,announce-01,false)),Map(2 -> office, 5 -> benefit-01, 12 -> he, 15 -> promise-01, 8 -> year, 21 -> next, 18 -> and, 7 -> reform-01, 17 -> other, 1 -> population, 4 -> study-01, 11 -> hope-01, 14 -> propose-01, 20 -> increase-01, 6 -> disability, 22 -> announce-01, 0 -> survey-01, 9 -> this, 16 -> benefit-01, 19 -> pension, 3 -> commission-01, 10 -> late, 13 -> thing),Map(n -> next, h -> hope-01, s2 -> study-01, h2 -> he, b -> benefit-01, t -> this, b2 -> benefit-01, p2 -> propose-01, s -> survey-01, d -> disability, p -> population, y -> year, a -> and, p4 -> pension, o2 -> other, t2 -> thing, a2 -> announce-01, i -> increase-01, r -> reform-01, c -> commission-01, l -> late, o -> office, p3 -> promise-01))),[Ljava.lang.String;@76aa8e79,Annotation([Ljava.lang.String;@376fe6cc,[Ljava.lang.String;@13997783,[Ljava.lang.String;@40754382),Annotation([Ljava.lang.String;@52a32cdd,[Ljava.lang.String;@56d68b8d,[Ledu.cmu.lti.nlp.amr.Dependency;@1f640285),Annotation([Ljava.lang.String;@5ee179dc,[Ljava.lang.String;@25078b2e,[Ljava.lang.String;@12428c00),Annotation([Ljava.lang.String;@4ef55d5d,[Ljava.lang.String;@4ec4ad2a,[Ledu.cmu.lti.nlp.amr.Entity;@5244c8cc))
AMR:
(a / and, op, p4 / pension)
(a2 / announce-01, ARG1, i / increase-01)
(b / benefit-01, ARG1, d / disability)
(b / benefit-01, ARG2, c / commission-01)
(b2 / benefit-01, ARG1, s2 / study-01)
(b2 / benefit-01, ARG2, t2 / thing)
(c / commission-01, ARG0, o / office)
(c / commission-01, ARG1, s / survey-01)
(h / hope-01, ARG0, h2 / he)
(h / hope-01, ARG1, r / reform-01)
(h / hope-01, time, l / late)
(i / increase-01, ARG1, a / and)
(l / late, op, y / year)
(p2 / propose-01, ARG1, t2 / thing)
(p3 / promise-01, ARG0, h2 / he)
(p3 / promise-01, ARG1, t2 / thing)
(p3 / promise-01, manner, a2 / announce-01)
(r / reform-01, ARG0, n / next)
(r / reform-01, ARG1, b / benefit-01)
(s / survey-01, ARG1, p / population)
(s2 / study-01, mod, o2 / other)
(t / this, mod, l / late)

Decoded in 682,064 microseconds
Sentence: he was not going to promise what could not be delivered

Spans:
Span 7-8:  could => possible
Span 10-11:  delivered => deliver-01
Span 0-1:  he => he
Span 5-6:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),delivered,deliver-01,false), Span(7,8,List(1),could,possible,false), Span(5,6,List(2),promise,promise-01,false), Span(0,1,List(3),he,he,false)),Map(2 -> promise-01, 1 -> possible, 0 -> deliver-01, 3 -> he),Map(h -> he, p2 -> promise-01, d -> deliver-01, p -> possible))),[Ljava.lang.String;@21daf346,Annotation([Ljava.lang.String;@2d998a07,[Ljava.lang.String;@3b34e8f4,[Ljava.lang.String;@eaa098a),Annotation([Ljava.lang.String;@3d584a8b,[Ljava.lang.String;@6f860b23,[Ledu.cmu.lti.nlp.amr.Dependency;@49456008),Annotation([Ljava.lang.String;@69a3d2cc,[Ljava.lang.String;@2648543,[Ljava.lang.String;@1568f2ef),Annotation([Ljava.lang.String;@1d2533e4,[Ljava.lang.String;@7571ccae,[Ledu.cmu.lti.nlp.amr.Entity;@234efbf))
AMR:
(p / possible, domain, d / deliver-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, d / deliver-01)

Decoded in 10,670 microseconds
Sentence: i promise

Spans:
Span 0-1:  i => i
Span 1-2:  promise => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),promise,promise-01,false), Span(0,1,List(1),i,i,false)),Map(1 -> i, 0 -> promise-01),Map(p -> promise-01, i -> i))),[Ljava.lang.String;@6167e5ba,Annotation([Ljava.lang.String;@6c1b484b,[Ljava.lang.String;@73276b5f,[Ljava.lang.String;@20fa6509),Annotation([Ljava.lang.String;@16ff42c9,[Ljava.lang.String;@5079a5ea,[Ledu.cmu.lti.nlp.amr.Dependency;@627bceec),Annotation([Ljava.lang.String;@2e4e1a77,[Ljava.lang.String;@9ab9261,[Ljava.lang.String;@5f17233c),Annotation([Ljava.lang.String;@680a68e9,[Ljava.lang.String;@36dce5c,[Ledu.cmu.lti.nlp.amr.Entity;@1e06fbc6))
AMR:
(p / promise-01, ARG0, i / i)

Decoded in 3,661 microseconds
Sentence:  the itf is to coordinate information on international shipping and has promised to pass this on to the continental unions in an attempt to pinpoint ships and cargoes which may be targets

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =  the itf is to coordinate information on international shipping and has promised to pass this on to the continental unions in an attempt to pinpoint ships and cargoes which may be targets
myTokenized = the itf is to coordinate information on international shipping and has promised to pass this on to the continental unions in an attempt to pinpoint ships and cargoes which may be targets
i = 0
prefix = List(the)
regexr = \Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the russians had been promised a second front on 1 may 1944

mkDayMonthYear(1	may	1944,1,may,1944)
Spans:
Span 9-12:  1 may 1944 => (date-entity :day 1 :month 5 :year 1944)
Span 7-8:  front => front
Span 4-5:  promised => promise-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,12,List(3, 2, 1, 0),1 may 1944,(date-entity :day 1 :month 5 :year 1944),false), Span(7,8,List(4),front,front,false), Span(4,5,List(5),promised,promise-01,false)),Map(2 -> 5, 5 -> promise-01, 1 -> 1, 4 -> front, 0 -> date-entity, 3 -> 1944),Map(12 -> 1944, 5 -> 5, d -> date-entity, p -> promise-01, 1 -> 1, f -> front))),[Ljava.lang.String;@3515025f,Annotation([Ljava.lang.String;@764ec632,[Ljava.lang.String;@2db6394c,[Ljava.lang.String;@166bc406),Annotation([Ljava.lang.String;@7d127169,[Ljava.lang.String;@45d3e4a5,[Ledu.cmu.lti.nlp.amr.Dependency;@5a483073),Annotation([Ljava.lang.String;@3964fc53,[Ljava.lang.String;@14f1ca95,[Ljava.lang.String;@e2b06f1),Annotation([Ljava.lang.String;@2ad4bf7b,[Ljava.lang.String;@75673a34,[Ledu.cmu.lti.nlp.amr.Entity;@4c1e6823))
AMR:
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 5 / 5)
(d / date-entity, time, p / promise-01)
(d / date-entity, year, 12 / 1944)
(p / promise-01, ARG1, f / front)

Decoded in 21,129 microseconds
Sentence: it was to meet cases of this kind that equity invented the great remedies of specific performance and injunction specific performance to compel a man actually to do what he has promised dash, to give you the land in return for the money to pay you the purchase money in return for the land injunction to forbid him to do what he has promised not to do or what he has no right to do dash

Spans:
Span 25-26:  actually => actual
Span 17-18:  and => and
Span 4-5:  cases => case
Span 22-23:  compel => compel-01
Span 9-10:  equity => equity
Span 57-58:  forbid => forbid-01
Span 35-36:  give => give-01
Span 12-13:  great => great
Span 70-71:  he => he
Span 62-63:  he => he
Span 29-30:  he => he
Span 10-11:  invented => invent-01
Span 0-1:  it => it
Span 7-8:  kind => kind
Span 54-55:  land => land
Span 38-39:  land => land
Span 24-25:  man => man
Span 49-50:  money => money
Span 43-44:  money => money
Span 72-73:  no => -
Span 68-69:  or => or
Span 45-46:  pay => pay-01
Span 20-21:  performance => perform-01
Span 16-17:  performance => perform-01
Span 64-65:  promised => promise-01
Span 31-32:  promised => promise-01
Span 48-49:  purchase => purchase-01
Span 19-20:  specific => specific
Span 15-16:  specific => specific
Span 6-7:  this => this
Span 46-47:  you => you
Span 36-37:  you => you

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(72,73,List(0),no,-,false), Span(70,71,List(1),he,he,false), Span(68,69,List(2),or,or,false), Span(64,65,List(3),promised,promise-01,false), Span(62,63,List(4),he,he,false), Span(57,58,List(5),forbid,forbid-01,false), Span(54,55,List(6),land,land,false), Span(49,50,List(7),money,money,false), Span(48,49,List(8),purchase,purchase-01,false), Span(46,47,List(9),you,you,false), Span(45,46,List(10),pay,pay-01,false), Span(43,44,List(11),money,money,false), Span(38,39,List(12),land,land,false), Span(36,37,List(13),you,you,false), Span(35,36,List(14),give,give-01,false), Span(31,32,List(15),promised,promise-01,false), Span(29,30,List(16),he,he,false), Span(25,26,List(17),actually,actual,false), Span(24,25,List(18),man,man,false), Span(22,23,List(19),compel,compel-01,false), Span(20,21,List(20),performance,perform-01,false), Span(19,20,List(21),specific,specific,false), Span(17,18,List(22),and,and,false), Span(16,17,List(23),performance,perform-01,false), Span(15,16,List(24),specific,specific,false), Span(12,13,List(25),great,great,false), Span(10,11,List(26),invented,invent-01,false), Span(9,10,List(27),equity,equity,false), Span(7,8,List(28),kind,kind,false), Span(6,7,List(29),this,this,false), Span(4,5,List(30),cases,case,false), Span(0,1,List(31),it,it,false)),Map(30 -> case, 2 -> or, 5 -> forbid-01, 27 -> equity, 12 -> land, 8 -> purchase-01, 15 -> promise-01, 21 -> specific, 18 -> man, 24 -> specific, 7 -> money, 1 -> he, 17 -> actual, 23 -> perform-01, 26 -> invent-01, 4 -> he, 11 -> money, 14 -> give-01, 29 -> this, 20 -> perform-01, 28 -> kind, 6 -> land, 9 -> you, 0 -> -, 22 -> and, 16 -> he, 19 -> compel-01, 10 -> pay-01, 3 -> promise-01, 31 -> it, 25 -> great, 13 -> you),Map(e -> equity, m3 -> man, h -> he, h2 -> he, p5 -> perform-01, s2 -> specific, t -> this, k -> kind, m2 -> money, p2 -> purchase-01, s -> specific, m -> money, g2 -> great, y -> you, p -> promise-01, g -> give-01, a -> actual, p4 -> promise-01, i2 -> it, l2 -> land, i -> invent-01, a2 -> and, - -> -, h3 -> he, c -> compel-01, p6 -> perform-01, l -> land, f -> forbid-01, o -> or, p3 -> pay-01, c2 -> case, y2 -> you))),[Ljava.lang.String;@3e46d208,Annotation([Ljava.lang.String;@1b872b29,[Ljava.lang.String;@47229edd,[Ljava.lang.String;@31ebe3a7),Annotation([Ljava.lang.String;@75af028b,[Ljava.lang.String;@34d03009,[Ledu.cmu.lti.nlp.amr.Dependency;@5001b9f5),Annotation([Ljava.lang.String;@2157acdc,[Ljava.lang.String;@315b09e,[Ljava.lang.String;@4fe56a7),Annotation([Ljava.lang.String;@55eaf080,[Ljava.lang.String;@33538f91,[Ledu.cmu.lti.nlp.amr.Entity;@32f692ea))
AMR:
(a2 / and, op, p5 / perform-01)
(a2 / and, op, p6 / perform-01)
(c / compel-01, ARG0, e / equity)
(c / compel-01, ARG1, m3 / man)
(c / compel-01, ARG2, p3 / pay-01)
(c / compel-01, mod, a / actual)
(c2 / case, op, i2 / it)
(c2 / case, topic, k / kind)
(f / forbid-01, ARG0, l / land)
(f / forbid-01, ARG1, o / or)
(g / give-01, ARG0, g2 / great)
(g / give-01, ARG1, l2 / land)
(g / give-01, ARG2, y2 / you)
(i / invent-01, ARG0, e / equity)
(i / invent-01, ARG1, l2 / land)
(k / kind, mod, t / this)
(m2 / money, purpose, p3 / pay-01)
(o / or, op, p / promise-01)
(p / promise-01, ARG0, h2 / he)
(p / promise-01, ARG1, h / he)
(p2 / purchase-01, ARG0, m2 / money)
(p2 / purchase-01, ARG1, - / -)
(p3 / pay-01, ARG0, y / you)
(p3 / pay-01, ARG1, m / money)
(p3 / pay-01, ARG3, f / forbid-01)
(p4 / promise-01, ARG0, h3 / he)
(p4 / promise-01, ARG1, i / invent-01)
(p5 / perform-01, ARG0, k / kind)
(p5 / perform-01, ARG1, c / compel-01)
(p5 / perform-01, mod, s / specific)
(p6 / perform-01, mod, s2 / specific)

Decoded in 2,028,775 microseconds
Sentence: news corporation has promised its bankers that the companys debts will not exceed 110 per cent of its total value

Spans:
Span 13-14:  110 => 110
Span 5-6:  bankers => banker
Span 15-16:  cent => (monetary-quantity :unit cent)
Span 1-2:  corporation => corporation
Span 9-10:  debts => debt
Span 12-13:  exceed => exceed-01
Span 0-1:  news => news
Span 3-4:  promised => promise-01
Span 19-20:  value => value-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),value,value-01,false), Span(15,16,List(2, 1),cent,(monetary-quantity :unit cent),false), Span(13,14,List(3),110,110,false), Span(12,13,List(4),exceed,exceed-01,false), Span(9,10,List(5),debts,debt,false), Span(5,6,List(6),bankers,banker,false), Span(3,4,List(7),promised,promise-01,false), Span(1,2,List(8),corporation,corporation,false), Span(0,1,List(9),news,news,false)),Map(2 -> cent, 5 -> debt, 8 -> corporation, 7 -> promise-01, 1 -> monetary-quantity, 4 -> exceed-01, 6 -> banker, 9 -> news, 0 -> value-01, 3 -> 110),Map(n -> news, e -> exceed-01, b -> banker, d -> debt, m -> monetary-quantity, v -> value-01, p -> promise-01, 1 -> 110, c -> cent, c2 -> corporation))),[Ljava.lang.String;@5a275ac9,Annotation([Ljava.lang.String;@4db9705c,[Ljava.lang.String;@497fcfe1,[Ljava.lang.String;@6628e279),Annotation([Ljava.lang.String;@62caa55,[Ljava.lang.String;@5e62b59d,[Ledu.cmu.lti.nlp.amr.Dependency;@228186d4),Annotation([Ljava.lang.String;@65bad9fe,[Ljava.lang.String;@4e3de6df,[Ljava.lang.String;@4200629a),Annotation([Ljava.lang.String;@27498e50,[Ljava.lang.String;@4e1e3a56,[Ledu.cmu.lti.nlp.amr.Entity;@22880c2b))
AMR:
(c2 / corporation, mod, n / news)
(e / exceed-01, ARG0, d / debt)
(e / exceed-01, ARG1, b / banker)
(e / exceed-01, location, m / monetary-quantity)
(m / monetary-quantity, unit, c / cent)
(p / promise-01, ARG0, c2 / corporation)
(p / promise-01, ARG1, b / banker)
(v / value-01, ARG1, 1 / 110)
(v / value-01, ARG2, m / monetary-quantity)

Decoded in 203,302 microseconds
Sentence: sir john said that in a bruising meeting mr macgregor had warned him that the prime minister was fizzing with fury and was promising retribution against the banks

Spans:
Span 21-22:  and => and
Span 27-28:  banks => bank
Span 20-21:  fury => fury
Span 7-8:  meeting => meet-03
Span 16-17:  minister => (have-org-role-91 :ARG2 minister)
Span 15-16:  prime => prime
Span 23-24:  promising => promise-01
Span 2-3:  said => say-01
Span 11-12:  warned => warn-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),banks,bank,false), Span(23,24,List(1),promising,promise-01,false), Span(21,22,List(2),and,and,false), Span(20,21,List(3),fury,fury,false), Span(16,17,List(5, 4),minister,(have-org-role-91 :ARG2 minister),false), Span(15,16,List(6),prime,prime,false), Span(11,12,List(7),warned,warn-01,false), Span(7,8,List(8),meeting,meet-03,false), Span(2,3,List(9),said,say-01,false)),Map(2 -> and, 5 -> minister, 8 -> meet-03, 7 -> warn-01, 1 -> promise-01, 4 -> have-org-role-91, 6 -> prime, 9 -> say-01, 0 -> bank, 3 -> fury),Map(w -> warn-01, h -> have-org-role-91, b -> bank, m2 -> meet-03, p2 -> prime, s -> say-01, m -> minister, p -> promise-01, a -> and, f -> fury))),[Ljava.lang.String;@11d6ecc3,Annotation([Ljava.lang.String;@3551ff5b,[Ljava.lang.String;@1a53cab6,[Ljava.lang.String;@7321803a),Annotation([Ljava.lang.String;@1c699ae3,[Ljava.lang.String;@5937bba7,[Ledu.cmu.lti.nlp.amr.Dependency;@5a00feb3),Annotation([Ljava.lang.String;@7751c7ee,[Ljava.lang.String;@1a1d1775,[Ljava.lang.String;@6bef0fb7),Annotation([Ljava.lang.String;@1bf0eebd,[Ljava.lang.String;@66c9c89f,[Ledu.cmu.lti.nlp.amr.Entity;@49927371))
AMR:
(a / and, op, f / fury)
(a / and, op, h / have-org-role-91)
(a / and, op, p / promise-01)
(a / and, op, w / warn-01)
(h / have-org-role-91, ARG1, b / bank)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(s / say-01, ARG1, a / and)
(w / warn-01, ARG1, m2 / meet-03)

Decoded in 94,851 microseconds
Sentence: i can only make the children promise to go to bed early on christmas eve

Spans:
Span 10-11:  bed => bed
Span 1-2:  can => possible
Span 5-6:  children => child
Span 11-12:  early => early
Span 14-15:  eve => eve
Span 0-1:  i => i
Span 2-3:  only => only
Span 6-7:  promise => promise-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),eve,eve,false), Span(11,12,List(1),early,early,false), Span(10,11,List(2),bed,bed,false), Span(6,7,List(3),promise,promise-01,false), Span(5,6,List(4),children,child,false), Span(2,3,List(5),only,only,false), Span(1,2,List(6),can,possible,false), Span(0,1,List(7),i,i,false)),Map(2 -> bed, 5 -> only, 7 -> i, 1 -> early, 4 -> child, 6 -> possible, 0 -> eve, 3 -> promise-01),Map(e -> eve, b -> bed, p2 -> possible, e2 -> early, p -> promise-01, i -> i, c -> child, o -> only))),[Ljava.lang.String;@2dd92573,Annotation([Ljava.lang.String;@b29b889,[Ljava.lang.String;@60123018,[Ljava.lang.String;@4a13a8ee),Annotation([Ljava.lang.String;@50b7c740,[Ljava.lang.String;@517a6426,[Ledu.cmu.lti.nlp.amr.Dependency;@3a452494),Annotation([Ljava.lang.String;@11648e6f,[Ljava.lang.String;@60c32254,[Ljava.lang.String;@2b02ea6d),Annotation([Ljava.lang.String;@4c6cb02a,[Ljava.lang.String;@73a1bc98,[Ledu.cmu.lti.nlp.amr.Entity;@7f64da76))
AMR:
(b / bed, accompanier, e / eve)
(b / bed, time, e2 / early)
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, c / child)
(p / promise-01, ARG2, b / bed)
(p / promise-01, time, o / only)
(p2 / possible, time, o / only)

Decoded in 66,977 microseconds
Sentence: when malcolm fraser was hoisted to power by sir john kerr and the cia he promised australians that politics would disappear from the front pages of australian newspapers and be found after the sports section where it belongs

NER Entity: (thing :name (name :op "australians"))
NER Entity: (thing :name (name :op "australian"))
Spans:
Span 31-32:  after => after
Span 28-29:  and => and
Span 11-12:  and => and
Span 37-38:  belongs => belong-01
Span 13-14:  cia => (government-organization :name (name :op "CIA"))
Span 20-21:  disappear => disappear-01
Span 30-31:  found => find-01
Span 23-24:  front => front
Span 14-15:  he => he
Span 36-37:  it => it
Span 27-28:  newspapers => newspaper
Span 24-25:  pages => page
Span 18-19:  politics => politics
Span 6-7:  power => power
Span 15-16:  promised => promise-01
Span 34-35:  section => section
Span 33-34:  sports => sport

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),belongs,belong-01,false), Span(36,37,List(1),it,it,false), Span(34,35,List(2),section,section,false), Span(33,34,List(3),sports,sport,false), Span(31,32,List(4),after,after,false), Span(30,31,List(5),found,find-01,false), Span(28,29,List(6),and,and,false), Span(27,28,List(7),newspapers,newspaper,false), Span(24,25,List(8),pages,page,false), Span(23,24,List(9),front,front,false), Span(20,21,List(10),disappear,disappear-01,false), Span(18,19,List(11),politics,politics,false), Span(15,16,List(12),promised,promise-01,false), Span(14,15,List(13),he,he,false), Span(13,14,List(16, 15, 14),cia,(government-organization :name (name :op "CIA")),false), Span(11,12,List(17),and,and,false), Span(6,7,List(18),power,power,false)),Map(2 -> section, 5 -> find-01, 12 -> promise-01, 15 -> name, 8 -> page, 18 -> power, 7 -> newspaper, 17 -> and, 1 -> it, 4 -> after, 11 -> politics, 14 -> government-organization, 6 -> and, 0 -> belong-01, 9 -> front, 16 -> "CIA", 3 -> sport, 10 -> disappear-01, 13 -> he),Map(n -> newspaper, h -> he, s2 -> sport, b -> belong-01, p2 -> politics, a3 -> and, s -> section, d -> disappear-01, g -> government-organization, p -> page, a -> after, p4 -> power, i -> it, a2 -> and, f2 -> front, f -> find-01, p3 -> promise-01, n2 -> name))),[Ljava.lang.String;@56d637ab,Annotation([Ljava.lang.String;@9e0e817,[Ljava.lang.String;@ca54312,[Ljava.lang.String;@35d6593a),Annotation([Ljava.lang.String;@b7c0a73,[Ljava.lang.String;@7c9209e8,[Ledu.cmu.lti.nlp.amr.Dependency;@57c89e3c),Annotation([Ljava.lang.String;@340ca22a,[Ljava.lang.String;@296a8e18,[Ljava.lang.String;@1296dee6),Annotation([Ljava.lang.String;@6f03d792,[Ljava.lang.String;@653deb2e,[Ledu.cmu.lti.nlp.amr.Entity;@441b4cef))
AMR:
(a / after, op, s2 / sport)
(a2 / and, op, d / disappear-01)
(a2 / and, op, f / find-01)
(a2 / and, op, n / newspaper)
(a3 / and, op, g / government-organization)
(a3 / and, op, p4 / power)
(b / belong-01, ARG0, i / it)
(b / belong-01, ARG1, s2 / sport)
(d / disappear-01, ARG0, p / page)
(d / disappear-01, ARG1, g / government-organization)
(f / find-01, ARG0, p2 / politics)
(f / find-01, time, a / after)
(g / government-organization, name, n2 / name)
(n2 / name, op, "CIA")
(p / page, mod, f2 / front)
(p3 / promise-01, ARG0, h / he)
(p3 / promise-01, ARG1, d / disappear-01)
(s / section, op, s2 / sport)

Decoded in 326,067 microseconds
Sentence: you wont forget  i promise

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = you wont forget  i promise
myTokenized = you wont forget i promise
i = 3
prefix = List(you, wont, forget, i)
regexr = \Qy\E ?\Qo\E ?\Qu\E ?\Qw\E ?\Qo\E ?\Qn\E ?\Qt\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qg\E ?\Qe\E ?\Qt\E ?\Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he was offered parttime employment as a teacher of english in the berlitz school in bordeaux his father touchingly promised him a small allowance to supplement his salary and in midseptember he stood at the rail of a steamer filling his lungs with the rich air of france

NER Entity: (country :name (name :op "france"))
NER Entity: (country :name (name :op "france"))
Spans:
Span 45-46:  air => air
Span 23-24:  allowance => allowance
Span 28-29:  and => and
Span 4-5:  employment => employment
Span 9-10:  english => (language :name (name :op "English"))
Span 17-18:  father => (have-rel-role-91 :ARG2 father)
Span 47-48:  france => (country :name (name :op "France"))
Span 31-32:  he => he
Span 0-1:  he => he
Span 2-3:  offered => offer-01
Span 19-20:  promised => promise-01
Span 35-36:  rail => rail
Span 44-45:  rich => rich
Span 27-28:  salary => salary
Span 13-14:  school => school
Span 22-23:  small => small
Span 32-33:  stood => stand-01
Span 25-26:  supplement => supplement-01
Span 7-8:  teacher => (person :ARG0-of teach-01)

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(2, 1, 0),france,(country :name (name :op "France")),false), Span(45,46,List(3),air,air,false), Span(44,45,List(4),rich,rich,false), Span(35,36,List(5),rail,rail,false), Span(32,33,List(6),stood,stand-01,false), Span(31,32,List(7),he,he,false), Span(28,29,List(8),and,and,false), Span(27,28,List(9),salary,salary,false), Span(25,26,List(10),supplement,supplement-01,false), Span(23,24,List(11),allowance,allowance,false), Span(22,23,List(12),small,small,false), Span(19,20,List(13),promised,promise-01,false), Span(17,18,List(15, 14),father,(have-rel-role-91 :ARG2 father),false), Span(13,14,List(16),school,school,false), Span(9,10,List(19, 18, 17),english,(language :name (name :op "English")),false), Span(7,8,List(21, 20),teacher,(person :ARG0-of teach-01),false), Span(4,5,List(22),employment,employment,false), Span(2,3,List(23),offered,offer-01,false), Span(0,1,List(24),he,he,false)),Map(2 -> "France", 5 -> rail, 12 -> small, 8 -> and, 15 -> father, 21 -> teach-01, 18 -> name, 24 -> he, 7 -> he, 1 -> name, 17 -> language, 23 -> offer-01, 4 -> rich, 11 -> allowance, 14 -> have-rel-role-91, 20 -> person, 6 -> stand-01, 9 -> salary, 0 -> country, 22 -> employment, 16 -> school, 19 -> "English", 10 -> supplement-01, 3 -> air, 13 -> promise-01),Map(e -> employment, s5 -> school, n -> name, h -> he, h2 -> have-rel-role-91, s2 -> salary, t -> teach-01, p2 -> person, a3 -> allowance, s -> stand-01, s4 -> small, r2 -> rail, p -> promise-01, a -> air, r -> rich, a2 -> and, h3 -> he, c -> country, s3 -> supplement-01, l -> language, f -> father, o -> offer-01, n2 -> name))),[Ljava.lang.String;@1e4d8726,Annotation([Ljava.lang.String;@73e3df54,[Ljava.lang.String;@755b3f3c,[Ljava.lang.String;@3994b855),Annotation([Ljava.lang.String;@52d1f1fb,[Ljava.lang.String;@5565c037,[Ledu.cmu.lti.nlp.amr.Dependency;@b2e86ae),Annotation([Ljava.lang.String;@1b8c0f3e,[Ljava.lang.String;@83cbd93,[Ljava.lang.String;@4bc2021e),Annotation([Ljava.lang.String;@2e19266d,[Ljava.lang.String;@7529d5bf,[Ledu.cmu.lti.nlp.amr.Entity;@d902ab1))
AMR:
(a / air, location, c / country)
(a / air, mod, r / rich)
(a / air, poss, h / he)
(a2 / and, op, p / promise-01)
(a3 / allowance, mod, s4 / small)
(c / country, name, n / name)
(h2 / have-rel-role-91, ARG0, l / language)
(h2 / have-rel-role-91, ARG1, p2 / person)
(h2 / have-rel-role-91, ARG2, f / father)
(l / language, location, s5 / school)
(l / language, name, n2 / name)
(n / name, op, "France")
(n2 / name, op, "English")
(o / offer-01, ARG0, h3 / he)
(o / offer-01, ARG1, e / employment)
(o / offer-01, ARG3, p2 / person)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, h2 / have-rel-role-91)
(p / promise-01, ARG2, a3 / allowance)
(s / stand-01, ARG1, h / he)
(s / stand-01, ARG2, r2 / rail)
(s3 / supplement-01, ARG0, a3 / allowance)
(s3 / supplement-01, ARG1, s2 / salary)
(t / teach-01, ARG0, p2 / person)

Decoded in 755,458 microseconds
Sentence: they pay me 160 a month much less than i was promised

Spans:
Span 3-4:  160 => 160
Span 9-10:  i => i
Span 7-8:  less => less
Span 5-6:  month => (temporal-quantity :unit month)
Span 6-7:  much => much
Span 1-2:  pay => pay-01
Span 11-12:  promised => promise-01
Span 0-1:  they => they

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),promised,promise-01,false), Span(9,10,List(1),i,i,false), Span(7,8,List(2),less,less,false), Span(6,7,List(3),much,much,false), Span(5,6,List(5, 4),month,(temporal-quantity :unit month),false), Span(3,4,List(6),160,160,false), Span(1,2,List(7),pay,pay-01,false), Span(0,1,List(8),they,they,false)),Map(2 -> less, 5 -> month, 8 -> they, 7 -> pay-01, 1 -> i, 4 -> temporal-quantity, 6 -> 160, 0 -> promise-01, 3 -> much),Map(t -> temporal-quantity, m2 -> month, p2 -> pay-01, m -> much, 1 -> 160, p -> promise-01, t2 -> they, i -> i, l -> less))),[Ljava.lang.String;@73e2d16b,Annotation([Ljava.lang.String;@3023033d,[Ljava.lang.String;@4aa9b27b,[Ljava.lang.String;@4b04cf88),Annotation([Ljava.lang.String;@28d51032,[Ljava.lang.String;@3c1a578f,[Ledu.cmu.lti.nlp.amr.Dependency;@656a8c1c),Annotation([Ljava.lang.String;@3614b648,[Ljava.lang.String;@9cb4cb5,[Ljava.lang.String;@2190419),Annotation([Ljava.lang.String;@385c0662,[Ljava.lang.String;@21a728d6,[Ledu.cmu.lti.nlp.amr.Entity;@656a0adc))
AMR:
(l / less, degree, m / much)
(l / less, manner, i / i)
(l / less, poss, t / temporal-quantity)
(p / promise-01, ARG0, t2 / they)
(p / promise-01, ARG1, i / i)
(p2 / pay-01, ARG0, t2 / they)
(p2 / pay-01, ARG1, 1 / 160)
(t / temporal-quantity, unit, m2 / month)

Decoded in 132,484 microseconds
Sentence: for us to promise the removal of nuclear power generation within 15 years would be to delude ourselves and mislead others

Spans:
Span 11-12:  15 => 15
Span 18-19:  and => and
Span 16-17:  delude => delude-01
Span 9-10:  generation => generation
Span 19-20:  mislead => mislead-01
Span 7-8:  nuclear => nucleus
Span 20-21:  others => other
Span 8-9:  power => power
Span 3-4:  promise => promise-01
Span 5-6:  removal => remove-01
Span 10-11:  within => within
Span 12-13:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),others,other,false), Span(19,20,List(1),mislead,mislead-01,false), Span(18,19,List(2),and,and,false), Span(16,17,List(3),delude,delude-01,false), Span(12,13,List(5, 4),years,(temporal-quantity :unit year),false), Span(11,12,List(6),15,15,false), Span(10,11,List(7),within,within,false), Span(9,10,List(8),generation,generation,false), Span(8,9,List(9),power,power,false), Span(7,8,List(10),nuclear,nucleus,false), Span(5,6,List(11),removal,remove-01,false), Span(3,4,List(12),promise,promise-01,false)),Map(2 -> and, 5 -> year, 12 -> promise-01, 8 -> generation, 7 -> within, 1 -> mislead-01, 4 -> temporal-quantity, 11 -> remove-01, 6 -> 15, 0 -> other, 9 -> power, 3 -> delude-01, 10 -> nucleus),Map(w -> within, n -> nucleus, t -> temporal-quantity, p2 -> promise-01, m -> mislead-01, d -> delude-01, 1 -> 15, y -> year, g -> generation, p -> power, a -> and, r -> remove-01, o -> other))),[Ljava.lang.String;@14ef2588,Annotation([Ljava.lang.String;@60890e74,[Ljava.lang.String;@4614132f,[Ljava.lang.String;@4ff7969a),Annotation([Ljava.lang.String;@7c0817a,[Ljava.lang.String;@6f74748f,[Ledu.cmu.lti.nlp.amr.Dependency;@46909173),Annotation([Ljava.lang.String;@3d3d3936,[Ljava.lang.String;@7e7727a2,[Ljava.lang.String;@40cb3d8b),Annotation([Ljava.lang.String;@5f3591e8,[Ljava.lang.String;@35fe472d,[Ledu.cmu.lti.nlp.amr.Entity;@48f2f70c))
AMR:
(a / and, op, m / mislead-01)
(d / delude-01, ARG0, t / temporal-quantity)
(d / delude-01, ARG1, a / and)
(g / generation, mod, p / power)
(m / mislead-01, ARG1, o / other)
(p / power, mod, n / nucleus)
(p2 / promise-01, ARG1, r / remove-01)
(p2 / promise-01, time, w / within)
(r / remove-01, ARG1, g / generation)
(t / temporal-quantity, quant, 1 / 15)
(t / temporal-quantity, unit, y / year)
(w / within, op, t / temporal-quantity)

Decoded in 66,934 microseconds
Sentence: at the kronk gym in detroit where andries was christened the rock by his sparmates steward remodelled andriess crude style led him to a second world title in february 1989 against tony willis saw him lose it to harding and then promised him one last chance

NER Entity: (country :name (name :op "detroit"))
Spans:
Span 39-40:  and => and
Span 45-46:  chance => chance
Span 18-19:  crude => crude
Span 28-30:  february 1989 => (date-entity :month 2 :year 1989)
Span 3-4:  gym => gym
Span 36-37:  it => it
Span 44-45:  last => last
Span 20-21:  led => lead-02
Span 35-36:  lose => lose-02
Span 41-42:  promised => promise-01
Span 11-12:  rock => rock
Span 33-34:  saw => see-01
Span 19-20:  style => style
Span 40-41:  then => then
Span 26-27:  title => title
Span 25-26:  world => world

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),chance,chance,false), Span(44,45,List(1),last,last,false), Span(41,42,List(2),promised,promise-01,false), Span(40,41,List(3),then,then,false), Span(39,40,List(4),and,and,false), Span(36,37,List(5),it,it,false), Span(35,36,List(6),lose,lose-02,false), Span(33,34,List(7),saw,see-01,false), Span(28,30,List(10, 9, 8),february 1989,(date-entity :month 2 :year 1989),false), Span(26,27,List(11),title,title,false), Span(25,26,List(12),world,world,false), Span(20,21,List(13),led,lead-02,false), Span(19,20,List(14),style,style,false), Span(18,19,List(15),crude,crude,false), Span(11,12,List(16),rock,rock,false), Span(3,4,List(17),gym,gym,false)),Map(2 -> promise-01, 5 -> it, 12 -> world, 15 -> crude, 8 -> date-entity, 7 -> see-01, 17 -> gym, 1 -> last, 4 -> and, 11 -> title, 14 -> style, 6 -> lose-02, 0 -> chance, 9 -> 2, 16 -> rock, 3 -> then, 10 -> 1989, 13 -> lead-02),Map(w -> world, 2 -> 2, s2 -> style, t -> then, l3 -> lead-02, s -> see-01, d -> date-entity, 1 -> 1989, g -> gym, p -> promise-01, a -> and, t2 -> title, l2 -> lose-02, r -> rock, i -> it, c -> chance, l -> last, c2 -> crude))),[Ljava.lang.String;@653c0fa,Annotation([Ljava.lang.String;@64a26054,[Ljava.lang.String;@60625e69,[Ljava.lang.String;@5a2470ee),Annotation([Ljava.lang.String;@e72477e,[Ljava.lang.String;@70b3a89a,[Ledu.cmu.lti.nlp.amr.Dependency;@23025044),Annotation([Ljava.lang.String;@6ce3b250,[Ljava.lang.String;@58cfda09,[Ljava.lang.String;@35f3b26c),Annotation([Ljava.lang.String;@1246ec20,[Ljava.lang.String;@6e38323f,[Ledu.cmu.lti.nlp.amr.Entity;@2b6afea1))
AMR:
(a / and, op, l2 / lose-02)
(a / and, op, p / promise-01)
(c / chance, mod, l / last)
(d / date-entity, month, 2 / 2)
(d / date-entity, year, 1 / 1989)
(l2 / lose-02, ARG0, c2 / crude)
(l2 / lose-02, ARG1, i / it)
(l2 / lose-02, time, d / date-entity)
(l3 / lead-02, ARG0, s2 / style)
(l3 / lead-02, ARG1, g / gym)
(l3 / lead-02, destination, t2 / title)
(p / promise-01, ARG0, c / chance)
(p / promise-01, ARG1, l3 / lead-02)
(p / promise-01, time, t / then)
(s / see-01, ARG0, r / rock)
(s / see-01, ARG1, a / and)
(t2 / title, mod, w / world)

Decoded in 591,894 microseconds
Sentence: lets face it its never as good as promised and industry consistently overpromises about how easy it is to use and what it can do he said

Spans:
Span 20-21:  and => and
Span 9-10:  and => and
Span 23-24:  can => possible
Span 11-12:  consistently => consistent
Span 15-16:  easy => easy
Span 1-2:  face => face-01
Span 6-7:  good => good
Span 25-26:  he => he
Span 10-11:  industry => industry
Span 22-23:  it => it
Span 16-17:  it => it
Span 2-3:  it => it
Span 0-1:  lets => let-01
Span 8-9:  promised => promise-01
Span 26-27:  said => say-01
Span 19-20:  use => use-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),said,say-01,false), Span(25,26,List(1),he,he,false), Span(23,24,List(2),can,possible,false), Span(22,23,List(3),it,it,false), Span(20,21,List(4),and,and,false), Span(19,20,List(5),use,use-01,false), Span(16,17,List(6),it,it,false), Span(15,16,List(7),easy,easy,false), Span(11,12,List(8),consistently,consistent,false), Span(10,11,List(9),industry,industry,false), Span(9,10,List(10),and,and,false), Span(8,9,List(11),promised,promise-01,false), Span(6,7,List(12),good,good,false), Span(2,3,List(13),it,it,false), Span(1,2,List(14),face,face-01,false), Span(0,1,List(15),lets,let-01,false)),Map(2 -> possible, 5 -> use-01, 12 -> good, 15 -> let-01, 8 -> consistent, 7 -> easy, 1 -> he, 4 -> and, 11 -> promise-01, 14 -> face-01, 6 -> it, 0 -> say-01, 9 -> industry, 3 -> it, 10 -> and, 13 -> it),Map(e -> easy, i4 -> it, h -> he, p2 -> promise-01, s -> say-01, i3 -> industry, p -> possible, g -> good, a -> and, i2 -> it, i -> it, a2 -> and, c -> consistent, l -> let-01, u -> use-01, f -> face-01))),[Ljava.lang.String;@7d73124b,Annotation([Ljava.lang.String;@db63a45,[Ljava.lang.String;@36ab8f0b,[Ljava.lang.String;@393c3737),Annotation([Ljava.lang.String;@204d193c,[Ljava.lang.String;@25b3c2b5,[Ledu.cmu.lti.nlp.amr.Dependency;@3cb40c69),Annotation([Ljava.lang.String;@509ae0a1,[Ljava.lang.String;@6811935e,[Ljava.lang.String;@59e235b2),Annotation([Ljava.lang.String;@12336738,[Ljava.lang.String;@6cbd96dd,[Ledu.cmu.lti.nlp.amr.Entity;@12fbbef1))
AMR:
(a / and, op, l / let-01)
(a / and, op, p / possible)
(a / and, op, s / say-01)
(a2 / and, op, c / consistent)
(a2 / and, op, p2 / promise-01)
(e / easy, op, u / use-01)
(f / face-01, ARG1, i4 / it)
(l / let-01, ARG0, g / good)
(l / let-01, ARG1, f / face-01)
(p2 / promise-01, ARG0, h / he)
(p2 / promise-01, ARG1, i3 / industry)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, i / it)
(u / use-01, ARG0, i2 / it)
(u / use-01, ARG1, a / and)

Decoded in 233,290 microseconds
Sentence: a bare majority upheld the medical reform statute against several separate challenges of its principal provisionsfo id40 by returning as promised to the deferential standard of rationality

Spans:
Span 1-2:  bare => bare-01
Span 11-12:  challenges => (thing :ARG2-of challenge-01)
Span 2-3:  majority => majority
Span 5-6:  medical => medicine
Span 20-21:  promised => promise-01
Span 26-27:  rationality => rationality
Span 6-7:  reform => reform-01
Span 18-19:  returning => return-01
Span 10-11:  separate => separate
Span 9-10:  several => several
Span 24-25:  standard => standard
Span 3-4:  upheld => uphold-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),rationality,rationality,false), Span(24,25,List(1),standard,standard,false), Span(20,21,List(2),promised,promise-01,false), Span(18,19,List(3),returning,return-01,false), Span(11,12,List(5, 4),challenges,(thing :ARG2-of challenge-01),false), Span(10,11,List(6),separate,separate,false), Span(9,10,List(7),several,several,false), Span(6,7,List(8),reform,reform-01,false), Span(5,6,List(9),medical,medicine,false), Span(3,4,List(10),upheld,uphold-01,false), Span(2,3,List(11),majority,majority,false), Span(1,2,List(12),bare,bare-01,false)),Map(2 -> promise-01, 5 -> challenge-01, 12 -> bare-01, 8 -> reform-01, 7 -> several, 1 -> standard, 4 -> thing, 11 -> majority, 6 -> separate, 0 -> rationality, 9 -> medicine, 3 -> return-01, 10 -> uphold-01),Map(r3 -> reform-01, s2 -> separate, t -> thing, b -> bare-01, m2 -> majority, s -> standard, m -> medicine, p -> promise-01, r2 -> return-01, r -> rationality, c -> challenge-01, s3 -> several, u -> uphold-01))),[Ljava.lang.String;@4db4c9f3,Annotation([Ljava.lang.String;@18369860,[Ljava.lang.String;@284dd30b,[Ljava.lang.String;@d5a8bd9),Annotation([Ljava.lang.String;@33935a68,[Ljava.lang.String;@f147c4c,[Ledu.cmu.lti.nlp.amr.Dependency;@9ec6950),Annotation([Ljava.lang.String;@7ff60846,[Ljava.lang.String;@71996d4b,[Ljava.lang.String;@fd69131),Annotation([Ljava.lang.String;@4fd63016,[Ljava.lang.String;@76ef1d4c,[Ledu.cmu.lti.nlp.amr.Entity;@4c6ca594))
AMR:
(b / bare-01, ARG1, m2 / majority)
(c / challenge-01, ARG2, t / thing)
(p / promise-01, ARG1, s / standard)
(r2 / return-01, ARG0, m2 / majority)
(r2 / return-01, ARG1, p / promise-01)
(r3 / reform-01, ARG1, r2 / return-01)
(r3 / reform-01, mod, m / medicine)
(s / standard, topic, r / rationality)
(t / thing, mod, s2 / separate)
(t / thing, quant, s3 / several)
(u / uphold-01, ARG0, m2 / majority)
(u / uphold-01, ARG1, t / thing)

Decoded in 177,510 microseconds
Sentence: had promised her a dress that she had become too fat to wear

Spans:
Span 8-9:  become => become-01
Span 4-5:  dress => dress
Span 10-11:  fat => fat
Span 1-2:  promised => promise-01
Span 6-7:  she => she
Span 9-10:  too => too
Span 12-13:  wear => wear-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),wear,wear-01,false), Span(10,11,List(1),fat,fat,false), Span(9,10,List(2),too,too,false), Span(8,9,List(3),become,become-01,false), Span(6,7,List(4),she,she,false), Span(4,5,List(5),dress,dress,false), Span(1,2,List(6),promised,promise-01,false)),Map(2 -> too, 5 -> dress, 1 -> fat, 4 -> she, 6 -> promise-01, 0 -> wear-01, 3 -> become-01),Map(w -> wear-01, b -> become-01, t -> too, s -> she, d -> dress, p -> promise-01, f -> fat))),[Ljava.lang.String;@70eabebe,Annotation([Ljava.lang.String;@4390e5dc,[Ljava.lang.String;@5de2f12b,[Ljava.lang.String;@5e476e34),Annotation([Ljava.lang.String;@23944847,[Ljava.lang.String;@5c153f90,[Ledu.cmu.lti.nlp.amr.Dependency;@7700362a),Annotation([Ljava.lang.String;@2ee43c6f,[Ljava.lang.String;@a3bb376,[Ljava.lang.String;@55830d39),Annotation([Ljava.lang.String;@ed9450b,[Ljava.lang.String;@5a43dcca,[Ledu.cmu.lti.nlp.amr.Entity;@1d548012))
AMR:
(b / become-01, ARG1, s / she)
(b / become-01, ARG2, f / fat)
(f / fat, degree, t / too)
(p / promise-01, ARG1, d / dress)
(p / promise-01, concession, s / she)
(w / wear-01, ARG0, s / she)

Decoded in 19,378 microseconds
Sentence: it is not known how trelfords letter promising to pursue the story which might discredit the saudi royal family was brought to the saudis attention

NER Entity: (thing :name (name :op "saudi"))
Spans:
Span 24-25:  attention => attention
Span 14-15:  discredit => discredit-01
Span 18-19:  family => family
Span 0-1:  it => it
Span 3-4:  known => know-01
Span 6-7:  letter => letter
Span 7-8:  promising => promise-01
Span 9-10:  pursue => pursue-01
Span 17-18:  royal => royal
Span 11-12:  story => story

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),attention,attention,false), Span(18,19,List(1),family,family,false), Span(17,18,List(2),royal,royal,false), Span(14,15,List(3),discredit,discredit-01,false), Span(11,12,List(4),story,story,false), Span(9,10,List(5),pursue,pursue-01,false), Span(7,8,List(6),promising,promise-01,false), Span(6,7,List(7),letter,letter,false), Span(3,4,List(8),known,know-01,false), Span(0,1,List(9),it,it,false)),Map(2 -> royal, 5 -> pursue-01, 8 -> know-01, 7 -> letter, 1 -> family, 4 -> story, 6 -> promise-01, 9 -> it, 0 -> attention, 3 -> discredit-01),Map(k -> know-01, p2 -> promise-01, s -> story, d -> discredit-01, p -> pursue-01, a -> attention, i -> it, r -> royal, l -> letter, f -> family))),[Ljava.lang.String;@16a42cc9,Annotation([Ljava.lang.String;@74784bbb,[Ljava.lang.String;@5b41dba,[Ljava.lang.String;@740ba142),Annotation([Ljava.lang.String;@27882f93,[Ljava.lang.String;@5deb702b,[Ledu.cmu.lti.nlp.amr.Dependency;@c114739),Annotation([Ljava.lang.String;@425af55f,[Ljava.lang.String;@61a35201,[Ljava.lang.String;@295cf1bb),Annotation([Ljava.lang.String;@15024134,[Ljava.lang.String;@4706c7b2,[Ledu.cmu.lti.nlp.amr.Entity;@e209b8c))
AMR:
(d / discredit-01, ARG0, s / story)
(d / discredit-01, ARG1, f / family)
(f / family, mod, r / royal)
(k / know-01, ARG1, i / it)
(p / pursue-01, ARG0, l / letter)
(p / pursue-01, ARG1, s / story)
(p2 / promise-01, ARG0, a / attention)
(p2 / promise-01, ARG1, k / know-01)
(p2 / promise-01, ARG2, p / pursue-01)

Decoded in 84,083 microseconds
Sentence: after his election by the volkskammer on monday evening he promised stepbystep economic reforms worked out by competent people

Spans:
Span 0-1:  after => after
Span 17-18:  competent => competent-41
Span 12-13:  economic => economy
Span 2-3:  election => elect-01
Span 8-9:  evening => evening
Span 9-10:  he => he
Span 10-11:  promised => promise-01
Span 13-14:  reforms => reform-01
Span 14-15:  worked => work-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),competent,competent-41,false), Span(14,15,List(1),worked,work-01,false), Span(13,14,List(2),reforms,reform-01,false), Span(12,13,List(3),economic,economy,false), Span(10,11,List(4),promised,promise-01,false), Span(9,10,List(5),he,he,false), Span(8,9,List(6),evening,evening,false), Span(2,3,List(7),election,elect-01,false), Span(0,1,List(8),after,after,false)),Map(2 -> reform-01, 5 -> he, 8 -> after, 7 -> elect-01, 1 -> work-01, 4 -> promise-01, 6 -> evening, 0 -> competent-41, 3 -> economy),Map(e -> economy, w -> work-01, h -> he, e2 -> evening, p -> promise-01, a -> after, r -> reform-01, c -> competent-41, e3 -> elect-01))),[Ljava.lang.String;@7ec40b92,Annotation([Ljava.lang.String;@78d3df42,[Ljava.lang.String;@1de6a407,[Ljava.lang.String;@111ad6e7),Annotation([Ljava.lang.String;@7912e076,[Ljava.lang.String;@464ea113,[Ledu.cmu.lti.nlp.amr.Dependency;@54310a74),Annotation([Ljava.lang.String;@5fa570da,[Ljava.lang.String;@66942944,[Ljava.lang.String;@92163f9),Annotation([Ljava.lang.String;@6f2a751d,[Ljava.lang.String;@4c6efbef,[Ledu.cmu.lti.nlp.amr.Entity;@a5e2f1d))
AMR:
(a / after, op, e3 / elect-01)
(c / competent-41, ARG1, w / work-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, e2 / evening)
(p / promise-01, time, a / after)
(r / reform-01, ARG0, h / he)
(r / reform-01, ARG1, e / economy)
(w / work-01, ARG1, r / reform-01)

Decoded in 35,961 microseconds
Sentence: lindsay john wojna  war an installation dance from the west indianborn visual artistdancer and the bowl an improvised comictragic duet which he promises will be minimal gentle humorous elegant and profoundly touching

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = lindsay john wojna  war an installation dance from the west indianborn visual artistdancer and the bowl an improvised comictragic duet which he promises will be minimal gentle humorous elegant and profoundly touching
myTokenized = lindsay john wojna war an installation dance from the west indianborn visual artistdancer and the bowl an improvised comictragic duet which he promises will be minimal gentle humorous elegant and profoundly touching
i = 3
prefix = List(lindsay, john, wojna, war)
regexr = \Ql\E ?\Qi\E ?\Qn\E ?\Qd\E ?\Qs\E ?\Qa\E ?\Qy\E ?\Qj\E ?\Qo\E ?\Qh\E ?\Qn\E ?\Qw\E ?\Qo\E ?\Qj\E ?\Qn\E ?\Qa\E ?\Qw\E ?\Qa\E ?\Qr\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: although the secretary had promised to build a new house he had died beforehand leaving the problem unsolved

Spans:
Span 13-14:  beforehand => beforehand
Span 6-7:  build => build-01
Span 12-13:  died => die-01
Span 10-11:  he => he
Span 9-10:  house => house
Span 14-15:  leaving => leave-01
Span 8-9:  new => new
Span 16-17:  problem => problem
Span 4-5:  promised => promise-01
Span 2-3:  secretary => secretary
Span 17-18:  unsolved => solve-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),unsolved,solve-01,false), Span(16,17,List(1),problem,problem,false), Span(14,15,List(2),leaving,leave-01,false), Span(13,14,List(3),beforehand,beforehand,false), Span(12,13,List(4),died,die-01,false), Span(10,11,List(5),he,he,false), Span(9,10,List(6),house,house,false), Span(8,9,List(7),new,new,false), Span(6,7,List(8),build,build-01,false), Span(4,5,List(9),promised,promise-01,false), Span(2,3,List(10),secretary,secretary,false)),Map(2 -> leave-01, 5 -> he, 8 -> build-01, 7 -> new, 1 -> problem, 4 -> die-01, 6 -> house, 9 -> promise-01, 0 -> solve-01, 10 -> secretary, 3 -> beforehand),Map(n -> new, h -> he, s2 -> secretary, h2 -> house, b -> beforehand, b2 -> build-01, p2 -> promise-01, s -> solve-01, d -> die-01, p -> problem, l -> leave-01))),[Ljava.lang.String;@4cf20c6d,Annotation([Ljava.lang.String;@270def92,[Ljava.lang.String;@3eb6e46,[Ljava.lang.String;@5594b7ac),Annotation([Ljava.lang.String;@16a6a919,[Ljava.lang.String;@17a7b3ed,[Ledu.cmu.lti.nlp.amr.Dependency;@31598bd),Annotation([Ljava.lang.String;@7edea1df,[Ljava.lang.String;@4a55788b,[Ljava.lang.String;@315d13cd),Annotation([Ljava.lang.String;@55bf110c,[Ljava.lang.String;@72f856ce,[Ledu.cmu.lti.nlp.amr.Entity;@e0b295a))
AMR:
(b2 / build-01, ARG0, s2 / secretary)
(b2 / build-01, ARG1, h2 / house)
(d / die-01, ARG0, h / he)
(d / die-01, ARG1, h2 / house)
(d / die-01, ARG2, l / leave-01)
(h2 / house, mod, n / new)
(l / leave-01, ARG1, s / solve-01)
(l / leave-01, degree, b / beforehand)
(p2 / promise-01, ARG2, b2 / build-01)
(s / solve-01, ARG1, p / problem)

Decoded in 215,268 microseconds
Sentence: the countrys new prime minister hans modrow has appealed to his countrymen to stop squandering national wealth while the finance minister uta nickel has promised to step up customs controls at border crossing points to curb speculation with money and goods

NER Entity: (person :name (name :op "hans" :op "modrow"))
Spans:
Span 39-40:  and => and
Span 8-9:  appealed => appeal-02
Span 31-32:  border => border-01
Span 29-30:  controls => control-01
Span 11-12:  countrymen => country
Span 32-33:  crossing => cross-02
Span 35-36:  curb => curb-01
Span 28-29:  customs => customs
Span 19-20:  finance => finance-01
Span 40-41:  goods => good
Span 5-7:  hans modrow => (person :name (name :op "hans" :op "modrow"))
Span 20-21:  minister => (have-org-role-91 :ARG2 minister)
Span 4-5:  minister => (have-org-role-91 :ARG2 minister)
Span 38-39:  money => money
Span 15-16:  national => nation
Span 2-3:  new => new
Span 33-34:  points => point
Span 3-4:  prime => prime
Span 24-25:  promised => promise-01
Span 36-37:  speculation => speculate-01
Span 13-14:  stop => stop-01
Span 16-17:  wealth => wealth

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),goods,good,false), Span(39,40,List(1),and,and,false), Span(38,39,List(2),money,money,false), Span(36,37,List(3),speculation,speculate-01,false), Span(35,36,List(4),curb,curb-01,false), Span(33,34,List(5),points,point,false), Span(32,33,List(6),crossing,cross-02,false), Span(31,32,List(7),border,border-01,false), Span(29,30,List(8),controls,control-01,false), Span(28,29,List(9),customs,customs,false), Span(24,25,List(10),promised,promise-01,false), Span(20,21,List(12, 11),minister,(have-org-role-91 :ARG2 minister),false), Span(19,20,List(13),finance,finance-01,false), Span(16,17,List(14),wealth,wealth,false), Span(15,16,List(15),national,nation,false), Span(13,14,List(16),stop,stop-01,false), Span(11,12,List(17),countrymen,country,false), Span(8,9,List(18),appealed,appeal-02,false), Span(5,7,List(22, 21, 20, 19),hans modrow,(person :name (name :op "hans" :op "modrow")),false), Span(4,5,List(24, 23),minister,(have-org-role-91 :ARG2 minister),false), Span(3,4,List(25),prime,prime,false), Span(2,3,List(26),new,new,false)),Map(2 -> money, 5 -> point, 12 -> minister, 8 -> control-01, 15 -> nation, 21 -> "hans", 18 -> appeal-02, 24 -> minister, 7 -> border-01, 1 -> and, 17 -> country, 23 -> have-org-role-91, 26 -> new, 4 -> curb-01, 11 -> have-org-role-91, 14 -> wealth, 20 -> name, 6 -> cross-02, 9 -> customs, 0 -> good, 22 -> "modrow", 16 -> stop-01, 19 -> person, 10 -> promise-01, 3 -> speculate-01, 25 -> prime, 13 -> finance-01),Map(m3 -> minister, w -> wealth, n -> nation, h -> have-org-role-91, s2 -> stop-01, h2 -> have-org-role-91, b -> border-01, m2 -> minister, p2 -> promise-01, c4 -> customs, s -> speculate-01, m -> money, p -> point, g -> good, c3 -> control-01, a -> and, n3 -> new, p4 -> prime, a2 -> appeal-02, c -> curb-01, f -> finance-01, p3 -> person, c2 -> cross-02, n2 -> name, c5 -> country))),[Ljava.lang.String;@41310b39,Annotation([Ljava.lang.String;@7ad7ec9e,[Ljava.lang.String;@75efb813,[Ljava.lang.String;@4d1e23e2),Annotation([Ljava.lang.String;@75c5f1fb,[Ljava.lang.String;@1691d225,[Ledu.cmu.lti.nlp.amr.Dependency;@3f7b86b6),Annotation([Ljava.lang.String;@46c93749,[Ljava.lang.String;@444cbded,[Ljava.lang.String;@a4935a3),Annotation([Ljava.lang.String;@4c60659b,[Ljava.lang.String;@4caeca49,[Ledu.cmu.lti.nlp.amr.Entity;@6762a5f3))
AMR:
(a / and, op, g / good)
(a / and, op, m / money)
(a / and, op, p2 / promise-01)
(a2 / appeal-02, ARG0, p3 / person)
(a2 / appeal-02, ARG1, c5 / country)
(c / curb-01, ARG1, s / speculate-01)
(c2 / cross-02, ARG0, b / border-01)
(c2 / cross-02, ARG1, p / point)
(c2 / cross-02, ARG2, c / curb-01)
(c3 / control-01, ARG0, c4 / customs)
(c3 / control-01, ARG1, b / border-01)
(h / have-org-role-91, ARG1, f / finance-01)
(h / have-org-role-91, ARG2, m2 / minister)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, m3 / minister)
(m3 / minister, mod, p4 / prime)
(n2 / name, op, "hans")
(n2 / name, op, "modrow")
(p2 / promise-01, ARG0, m2 / minister)
(p2 / promise-01, ARG1, p3 / person)
(p3 / person, mod, n3 / new)
(p3 / person, name, n2 / name)
(s / speculate-01, ARG1, a / and)
(s2 / stop-01, ARG0, p3 / person)
(w / wealth, mod, n / nation)
(w / wealth, poss, p3 / person)

Decoded in 1,224,036 microseconds
Sentence: philby who had promised to keep an eye on him

Spans:
Span 7-8:  eye => eye
Span 3-4:  promised => promise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),eye,eye,false), Span(3,4,List(1),promised,promise-01,false)),Map(1 -> promise-01, 0 -> eye),Map(e -> eye, p -> promise-01))),[Ljava.lang.String;@7d7d298b,Annotation([Ljava.lang.String;@2432a50a,[Ljava.lang.String;@78f14616,[Ljava.lang.String;@28308c62),Annotation([Ljava.lang.String;@b508a8b,[Ljava.lang.String;@54b7b17a,[Ledu.cmu.lti.nlp.amr.Dependency;@67e4ec09),Annotation([Ljava.lang.String;@66447828,[Ljava.lang.String;@192cbe8c,[Ljava.lang.String;@4891e63d),Annotation([Ljava.lang.String;@62a2d403,[Ljava.lang.String;@300d438c,[Ledu.cmu.lti.nlp.amr.Entity;@36cdb4f9))
AMR:
(p / promise-01, ARG1, e / eye)

Decoded in 6,007 microseconds
Sentence: another advertisement promised executives travelling intercity that they could eat drink and think in time that is completely your own and that your batteries will be fully recharged

Spans:
Span 20-21:  and => and
Span 11-12:  and => and
Span 0-1:  another => another
Span 23-24:  batteries => battery
Span 17-18:  completely => complete
Span 8-9:  could => possible
Span 10-11:  drink => drink-01
Span 9-10:  eat => eat-01
Span 3-4:  executives => (have-org-role-91 :ARG2 executive)
Span 26-27:  fully => full
Span 2-3:  promised => promise-01
Span 7-8:  they => they
Span 12-13:  think => think-01
Span 14-15:  time => time
Span 4-5:  travelling => travel-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),fully,full,false), Span(23,24,List(1),batteries,battery,false), Span(20,21,List(2),and,and,false), Span(17,18,List(3),completely,complete,false), Span(14,15,List(4),time,time,false), Span(12,13,List(5),think,think-01,false), Span(11,12,List(6),and,and,false), Span(10,11,List(7),drink,drink-01,false), Span(9,10,List(8),eat,eat-01,false), Span(8,9,List(9),could,possible,false), Span(7,8,List(10),they,they,false), Span(4,5,List(11),travelling,travel-01,false), Span(3,4,List(13, 12),executives,(have-org-role-91 :ARG2 executive),false), Span(2,3,List(14),promised,promise-01,false), Span(0,1,List(15),another,another,false)),Map(2 -> and, 5 -> think-01, 12 -> have-org-role-91, 15 -> another, 8 -> eat-01, 7 -> drink-01, 1 -> battery, 4 -> time, 11 -> travel-01, 14 -> promise-01, 6 -> and, 0 -> full, 9 -> possible, 3 -> complete, 10 -> they, 13 -> executive),Map(e -> eat-01, t4 -> travel-01, h -> have-org-role-91, b -> battery, t -> time, p2 -> promise-01, e2 -> executive, a3 -> another, d -> drink-01, t3 -> they, p -> possible, a -> and, t2 -> think-01, a2 -> and, c -> complete, f -> full))),[Ljava.lang.String;@7b24638a,Annotation([Ljava.lang.String;@1203382f,[Ljava.lang.String;@115d9ee6,[Ljava.lang.String;@196b16f2),Annotation([Ljava.lang.String;@45af76e7,[Ljava.lang.String;@2a75b6f,[Ledu.cmu.lti.nlp.amr.Dependency;@3963d5c5),Annotation([Ljava.lang.String;@496795f2,[Ljava.lang.String;@2fa56884,[Ljava.lang.String;@1470ca8c),Annotation([Ljava.lang.String;@7901b7cf,[Ljava.lang.String;@5fcab519,[Ledu.cmu.lti.nlp.amr.Entity;@7537ad70))
AMR:
(a / and, op, t2 / think-01)
(a2 / and, op, t2 / think-01)
(d / drink-01, ARG0, b / battery)
(d / drink-01, ARG1, a3 / another)
(e / eat-01, ARG0, t3 / they)
(e / eat-01, ARG1, d / drink-01)
(h / have-org-role-91, ARG1, c / complete)
(h / have-org-role-91, ARG2, e2 / executive)
(p2 / promise-01, ARG0, f / full)
(p2 / promise-01, ARG1, t4 / travel-01)
(t2 / think-01, ARG0, t3 / they)
(t2 / think-01, ARG1, p / possible)
(t2 / think-01, time, t / time)
(t4 / travel-01, ARG0, h / have-org-role-91)
(t4 / travel-01, ARG1, a2 / and)

Decoded in 178,781 microseconds
Sentence: next years elections promise a new phase in the struggle for nicaragua

NER Entity: (country :name (name :op "nicaragua"))
Spans:
Span 2-3:  elections => elect-01
Span 5-6:  new => new
Span 0-1:  next => next
Span 6-7:  phase => phase
Span 3-4:  promise => promise-01
Span 9-10:  struggle => struggle-01
Span 1-2:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),struggle,struggle-01,false), Span(6,7,List(1),phase,phase,false), Span(5,6,List(2),new,new,false), Span(3,4,List(3),promise,promise-01,false), Span(2,3,List(4),elections,elect-01,false), Span(1,2,List(6, 5),years,(temporal-quantity :unit year),false), Span(0,1,List(7),next,next,false)),Map(2 -> new, 5 -> temporal-quantity, 7 -> next, 1 -> phase, 4 -> elect-01, 6 -> year, 0 -> struggle-01, 3 -> promise-01),Map(e -> elect-01, n -> new, t -> temporal-quantity, p2 -> promise-01, s -> struggle-01, y -> year, p -> phase, n2 -> next))),[Ljava.lang.String;@1a5bd02f,Annotation([Ljava.lang.String;@1c0cb2e,[Ljava.lang.String;@185b39e8,[Ljava.lang.String;@d36bad6),Annotation([Ljava.lang.String;@4243e61,[Ljava.lang.String;@677b5466,[Ledu.cmu.lti.nlp.amr.Dependency;@51e2299d),Annotation([Ljava.lang.String;@571a2c6a,[Ljava.lang.String;@775a0fd2,[Ljava.lang.String;@39c4e135),Annotation([Ljava.lang.String;@2c9d7c34,[Ljava.lang.String;@174550ce,[Ledu.cmu.lti.nlp.amr.Entity;@47bc1051))
AMR:
(e / elect-01, mod, t / temporal-quantity)
(p / phase, mod, n / new)
(p2 / promise-01, ARG1, e / elect-01)
(p2 / promise-01, ARG2, p / phase)
(s / struggle-01, part, p / phase)
(t / temporal-quantity, unit, y / year)
(y / year, mod, n2 / next)

Decoded in 61,368 microseconds
Sentence: aneurin bevan was only able to defeat the opposition of doctors to the national health service in 1944 by buckling together a compromise with lord moran president of the royal college of physicians stuffing their mouths with silver and promising to respect their independent practice

Spans:
Span 17-18:  1944 => (date-entity :year 1944)
Span 4-5:  able => possible
Span 38-39:  and => and
Span 30-31:  college => college
Span 22-23:  compromise => compromise-01
Span 6-7:  defeat => defeat-01
Span 10-11:  doctors => doctor
Span 14-15:  health => health
Span 43-44:  independent => (depend-01 :polarity -)
Span 24-25:  lord => lord
Span 35-36:  mouths => mouth
Span 13-14:  national => nation
Span 3-4:  only => only
Span 8-9:  opposition => oppose-01
Span 32-33:  physicians => physician
Span 44-45:  practice => practice-01
Span 26-27:  president => (have-org-role-91 :ARG2 president)
Span 39-40:  promising => promise-01
Span 41-42:  respect => respect-01
Span 29-30:  royal => royal
Span 37-38:  silver => silver
Span 20-21:  together => together

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),practice,practice-01,false), Span(43,44,List(2, 1),independent,(depend-01 :polarity -),false), Span(41,42,List(3),respect,respect-01,false), Span(39,40,List(4),promising,promise-01,false), Span(38,39,List(5),and,and,false), Span(37,38,List(6),silver,silver,false), Span(35,36,List(7),mouths,mouth,false), Span(32,33,List(8),physicians,physician,false), Span(30,31,List(9),college,college,false), Span(29,30,List(10),royal,royal,false), Span(26,27,List(12, 11),president,(have-org-role-91 :ARG2 president),false), Span(24,25,List(13),lord,lord,false), Span(22,23,List(14),compromise,compromise-01,false), Span(20,21,List(15),together,together,false), Span(17,18,List(17, 16),1944,(date-entity :year 1944),false), Span(14,15,List(18),health,health,false), Span(13,14,List(19),national,nation,false), Span(10,11,List(20),doctors,doctor,false), Span(8,9,List(21),opposition,oppose-01,false), Span(6,7,List(22),defeat,defeat-01,false), Span(4,5,List(23),able,possible,false), Span(3,4,List(24),only,only,false)),Map(2 -> -, 5 -> and, 12 -> president, 8 -> physician, 15 -> together, 21 -> oppose-01, 18 -> health, 24 -> only, 7 -> mouth, 1 -> depend-01, 17 -> 1944, 23 -> possible, 4 -> promise-01, 11 -> have-org-role-91, 14 -> compromise-01, 20 -> doctor, 6 -> silver, 9 -> college, 0 -> practice-01, 22 -> defeat-01, 16 -> date-entity, 19 -> nation, 10 -> royal, 3 -> respect-01, 13 -> lord),Map(n -> nation, h -> have-org-role-91, p5 -> possible, h2 -> health, t -> together, d3 -> doctor, p2 -> promise-01, s -> silver, d -> depend-01, m -> mouth, 1 -> 1944, p -> practice-01, r2 -> royal, a -> and, p4 -> president, o2 -> only, d2 -> date-entity, r -> respect-01, c -> college, l -> lord, d4 -> defeat-01, o -> oppose-01, p3 -> physician, c2 -> compromise-01))),[Ljava.lang.String;@697b3ca3,Annotation([Ljava.lang.String;@19ca276f,[Ljava.lang.String;@26e2f5a3,[Ljava.lang.String;@7e6cb446),Annotation([Ljava.lang.String;@12afa082,[Ljava.lang.String;@4852c063,[Ledu.cmu.lti.nlp.amr.Dependency;@30d4c8ad),Annotation([Ljava.lang.String;@61c2eee6,[Ljava.lang.String;@44d2702e,[Ljava.lang.String;@53c2ff4e),Annotation([Ljava.lang.String;@270784d8,[Ljava.lang.String;@5ea294ec,[Ledu.cmu.lti.nlp.amr.Entity;@3df427e))
AMR:
(a / and, op, c2 / compromise-01)
(a / and, op, p2 / promise-01)
(a / and, op, s / silver)
(c / college, mod, r2 / royal)
(c2 / compromise-01, ARG1, t / together)
(c2 / compromise-01, location, c / college)
(d / depend-01, ARG0, p / practice-01)
(d / depend-01, polarity, -)
(d / depend-01, time, d2 / date-entity)
(d2 / date-entity, year, 1 / 1944)
(d4 / defeat-01, ARG1, o / oppose-01)
(d4 / defeat-01, manner, a / and)
(h / have-org-role-91, ARG1, n / nation)
(h / have-org-role-91, ARG2, p4 / president)
(h2 / health, mod, n / nation)
(m / mouth, location, a / and)
(m / mouth, poss, p3 / physician)
(o / oppose-01, ARG1, d3 / doctor)
(p2 / promise-01, ARG0, h / have-org-role-91)
(p2 / promise-01, ARG1, r / respect-01)
(p4 / president, mod, l / lord)
(p5 / possible, domain, d4 / defeat-01)
(p5 / possible, mod, o2 / only)
(r / respect-01, ARG1, p / practice-01)

Decoded in 764,081 microseconds
Sentence: please ellip  i promise ill be good

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = please ellip  i promise ill be good
myTokenized = please ellip i promise ill be good
i = 2
prefix = List(please, ellip, i)
regexr = \Qp\E ?\Ql\E ?\Qe\E ?\Qa\E ?\Qs\E ?\Qe\E ?\Qe\E ?\Ql\E ?\Ql\E ?\Qi\E ?\Qp\E ?\Qi\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: both candidates have promised to make life better for brazils poor but with the government virtually bankrupt it will be impossible to keep election pledges according to economists

Spans:
Span 16-17:  bankrupt => bankrupt-01
Span 0-1:  both => both
Span 11-12:  but => contrast-01
Span 1-2:  candidates => candidate
Span 27-28:  economists => economy
Span 23-24:  election => elect-01
Span 17-18:  it => it
Span 6-7:  life => life
Span 24-25:  pledges => pledge-01
Span 10-11:  poor => poor
Span 3-4:  promised => promise-01
Span 15-16:  virtually => virtual

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),economists,economy,false), Span(24,25,List(1),pledges,pledge-01,false), Span(23,24,List(2),election,elect-01,false), Span(17,18,List(3),it,it,false), Span(16,17,List(4),bankrupt,bankrupt-01,false), Span(15,16,List(5),virtually,virtual,false), Span(11,12,List(6),but,contrast-01,false), Span(10,11,List(7),poor,poor,false), Span(6,7,List(8),life,life,false), Span(3,4,List(9),promised,promise-01,false), Span(1,2,List(10),candidates,candidate,false), Span(0,1,List(11),both,both,false)),Map(2 -> elect-01, 5 -> virtual, 8 -> life, 7 -> poor, 1 -> pledge-01, 11 -> both, 4 -> bankrupt-01, 6 -> contrast-01, 9 -> promise-01, 0 -> economy, 10 -> candidate, 3 -> it),Map(e -> economy, b -> bankrupt-01, b2 -> both, p2 -> poor, e2 -> elect-01, v -> virtual, p -> pledge-01, i -> it, l -> life, c -> contrast-01, c2 -> candidate, p3 -> promise-01))),[Ljava.lang.String;@301487f9,Annotation([Ljava.lang.String;@13eb0518,[Ljava.lang.String;@2a9b74df,[Ljava.lang.String;@4415f253),Annotation([Ljava.lang.String;@7cd84a10,[Ljava.lang.String;@5be6a078,[Ledu.cmu.lti.nlp.amr.Dependency;@231556b),Annotation([Ljava.lang.String;@74dee4ec,[Ljava.lang.String;@55877de5,[Ljava.lang.String;@325a7141),Annotation([Ljava.lang.String;@4fc17c3a,[Ljava.lang.String;@27c2ecbe,[Ledu.cmu.lti.nlp.amr.Entity;@6e44c256))
AMR:
(b / bankrupt-01, ARG0, e / economy)
(b / bankrupt-01, ARG1, i / it)
(b / bankrupt-01, degree, v / virtual)
(c / contrast-01, ARG1, p2 / poor)
(c / contrast-01, ARG2, p / pledge-01)
(e2 / elect-01, ARG0, i / it)
(p / pledge-01, ARG0, b2 / both)
(p / pledge-01, ARG1, e2 / elect-01)
(p / pledge-01, ARG2, p3 / promise-01)
(p3 / promise-01, ARG0, c2 / candidate)
(p3 / promise-01, ARG1, l / life)

Decoded in 176,235 microseconds
Sentence: the government has been trying to put a brave face on it and mr collor claims he never promised zero inflation

Spans:
Span 12-13:  and => and
Span 8-9:  brave => brave
Span 15-16:  claims => claim-01
Span 9-10:  face => face-01
Span 16-17:  he => he
Span 20-21:  inflation => inflation
Span 11-12:  it => it
Span 18-19:  promised => promise-01
Span 4-5:  trying => try-01
Span 19-20:  zero => zero

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),inflation,inflation,false), Span(19,20,List(1),zero,zero,false), Span(18,19,List(2),promised,promise-01,false), Span(16,17,List(3),he,he,false), Span(15,16,List(4),claims,claim-01,false), Span(12,13,List(5),and,and,false), Span(11,12,List(6),it,it,false), Span(9,10,List(7),face,face-01,false), Span(8,9,List(8),brave,brave,false), Span(4,5,List(9),trying,try-01,false)),Map(2 -> promise-01, 5 -> and, 8 -> brave, 7 -> face-01, 1 -> zero, 4 -> claim-01, 6 -> it, 9 -> try-01, 0 -> inflation, 3 -> he),Map(h -> he, z -> zero, t -> try-01, b -> brave, p -> promise-01, a -> and, i2 -> it, i -> inflation, c -> claim-01, f -> face-01))),[Ljava.lang.String;@6432d4a8,Annotation([Ljava.lang.String;@452794fc,[Ljava.lang.String;@29a64fdc,[Ljava.lang.String;@65c509e0),Annotation([Ljava.lang.String;@6b0b8552,[Ljava.lang.String;@415e0165,[Ledu.cmu.lti.nlp.amr.Dependency;@2adaf6a),Annotation([Ljava.lang.String;@58d75985,[Ljava.lang.String;@22365854,[Ljava.lang.String;@1de10458),Annotation([Ljava.lang.String;@1fe43cbb,[Ljava.lang.String;@414f2958,[Ledu.cmu.lti.nlp.amr.Entity;@342371e7))
AMR:
(a / and, op, c / claim-01)
(a / and, op, t / try-01)
(c / claim-01, ARG1, p / promise-01)
(f / face-01, mod, b / brave)
(f / face-01, prep-in, i2 / it)
(i / inflation, quant, z / zero)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, i / inflation)
(t / try-01, ARG1, f / face-01)

Decoded in 96,426 microseconds
Sentence: his hope was to push that moment off as long as possible to maintain a suffering silence which the face promised was deep and awful

Spans:
Span 23-24:  and => and
Span 24-25:  awful => awful
Span 22-23:  deep => deep
Span 19-20:  face => face-01
Span 1-2:  hope => hope-01
Span 13-14:  maintain => maintain-01
Span 6-7:  moment => moment
Span 7-8:  off => off
Span 11-12:  possible => possible
Span 20-21:  promised => promise-01
Span 4-5:  push => push-02
Span 16-17:  silence => silence-01
Span 15-16:  suffering => suffer-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),awful,awful,false), Span(23,24,List(1),and,and,false), Span(22,23,List(2),deep,deep,false), Span(20,21,List(3),promised,promise-01,false), Span(19,20,List(4),face,face-01,false), Span(16,17,List(5),silence,silence-01,false), Span(15,16,List(6),suffering,suffer-01,false), Span(13,14,List(7),maintain,maintain-01,false), Span(11,12,List(8),possible,possible,false), Span(7,8,List(9),off,off,false), Span(6,7,List(10),moment,moment,false), Span(4,5,List(11),push,push-02,false), Span(1,2,List(12),hope,hope-01,false)),Map(2 -> deep, 5 -> silence-01, 12 -> hope-01, 8 -> possible, 7 -> maintain-01, 1 -> and, 4 -> face-01, 11 -> push-02, 6 -> suffer-01, 0 -> awful, 9 -> off, 3 -> promise-01, 10 -> moment),Map(h -> hope-01, s2 -> suffer-01, m2 -> moment, p2 -> possible, s -> silence-01, d -> deep, m -> maintain-01, p -> promise-01, a -> awful, a2 -> and, f -> face-01, o -> off, p3 -> push-02))),[Ljava.lang.String;@30b0f6f,Annotation([Ljava.lang.String;@4b2241f8,[Ljava.lang.String;@36192751,[Ljava.lang.String;@2d645296),Annotation([Ljava.lang.String;@156a0d22,[Ljava.lang.String;@65843e29,[Ledu.cmu.lti.nlp.amr.Dependency;@4d0d29d0),Annotation([Ljava.lang.String;@1b343e35,[Ljava.lang.String;@2e01787,[Ljava.lang.String;@4628a18a),Annotation([Ljava.lang.String;@15858f02,[Ljava.lang.String;@736fd757,[Ledu.cmu.lti.nlp.amr.Entity;@33a2cbf6))
AMR:
(a2 / and, op, a / awful)
(a2 / and, op, d / deep)
(a2 / and, op, p / promise-01)
(h / hope-01, ARG1, a2 / and)
(m / maintain-01, ARG1, s / silence-01)
(p / promise-01, ARG0, f / face-01)
(p / promise-01, ARG1, s / silence-01)
(p2 / possible, domain, m / maintain-01)
(p3 / push-02, ARG0, h / hope-01)
(p3 / push-02, ARG1, m2 / moment)
(p3 / push-02, ARG3, o / off)
(s2 / suffer-01, ARG0, s / silence-01)

Decoded in 122,450 microseconds
Sentence: oh well and a little jog of the memories to people who are out there collecting their donations in or people who have promised money dash

Spans:
Span 2-3:  and => and
Span 15-16:  collecting => collect-01
Span 17-18:  donations => donate-01
Span 4-5:  little => little
Span 8-9:  memories => memory
Span 24-25:  money => money
Span 19-20:  or => or
Span 23-24:  promised => promise-01
Span 1-2:  well => well

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),money,money,false), Span(23,24,List(1),promised,promise-01,false), Span(19,20,List(2),or,or,false), Span(17,18,List(3),donations,donate-01,false), Span(15,16,List(4),collecting,collect-01,false), Span(8,9,List(5),memories,memory,false), Span(4,5,List(6),little,little,false), Span(2,3,List(7),and,and,false), Span(1,2,List(8),well,well,false)),Map(2 -> or, 5 -> memory, 8 -> well, 7 -> and, 1 -> promise-01, 4 -> collect-01, 6 -> little, 0 -> money, 3 -> donate-01),Map(w -> well, m2 -> memory, d -> donate-01, m -> money, p -> promise-01, a -> and, l -> little, c -> collect-01, o -> or))),[Ljava.lang.String;@4fc9df6,Annotation([Ljava.lang.String;@64e68408,[Ljava.lang.String;@59e65cf8,[Ljava.lang.String;@22e1cbe4),Annotation([Ljava.lang.String;@1610f7a0,[Ljava.lang.String;@33f134b1,[Ledu.cmu.lti.nlp.amr.Dependency;@20ba6b1b),Annotation([Ljava.lang.String;@2ecdca66,[Ljava.lang.String;@48a3068b,[Ljava.lang.String;@4702b4ee),Annotation([Ljava.lang.String;@2b499ae,[Ljava.lang.String;@1ed56fe5,[Ledu.cmu.lti.nlp.amr.Entity;@4ea53333))
AMR:
(c / collect-01, ARG0, l / little)
(c / collect-01, ARG1, d / donate-01)
(d / donate-01, ARG0, w / well)
(d / donate-01, ARG1, o / or)
(o / or, purpose, m2 / memory)
(p / promise-01, ARG0, o / or)
(p / promise-01, ARG1, m / money)
(p / promise-01, ARG2, a / and)

Decoded in 72,615 microseconds
Sentence: each of the volunteers all aged between 20 and 50 were promised a bonus of 5 if they were among the first 30 out

Spans:
Span 7-8:  20 => 20
Span 22-23:  30 => 30
Span 15-16:  5 => 5
Span 9-10:  50 => 50
Span 5-6:  aged => age-01
Span 4-5:  all => all
Span 19-20:  among => among
Span 8-9:  and => and
Span 6-7:  between => between
Span 13-14:  bonus => bonus
Span 0-1:  each => each
Span 11-12:  promised => promise-01
Span 17-18:  they => they
Span 3-4:  volunteers => (person :ARG0-of volunteer-01)

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),30,30,false), Span(19,20,List(1),among,among,false), Span(17,18,List(2),they,they,false), Span(15,16,List(3),5,5,false), Span(13,14,List(4),bonus,bonus,false), Span(11,12,List(5),promised,promise-01,false), Span(9,10,List(6),50,50,false), Span(8,9,List(7),and,and,false), Span(7,8,List(8),20,20,false), Span(6,7,List(9),between,between,false), Span(5,6,List(10),aged,age-01,false), Span(4,5,List(11),all,all,false), Span(3,4,List(13, 12),volunteers,(person :ARG0-of volunteer-01),false), Span(0,1,List(14),each,each,false)),Map(2 -> they, 5 -> promise-01, 12 -> person, 8 -> 20, 7 -> and, 1 -> among, 4 -> bonus, 11 -> all, 14 -> each, 6 -> 50, 0 -> 30, 9 -> between, 3 -> 5, 10 -> age-01, 13 -> volunteer-01),Map(e -> each, 2 -> 20, 5 -> 5, t -> they, b -> bonus, b2 -> between, p2 -> person, a3 -> age-01, v -> volunteer-01, p -> promise-01, a -> among, 52 -> 50, a2 -> and, 3 -> 30, a4 -> all))),[Ljava.lang.String;@1d506b04,Annotation([Ljava.lang.String;@aa1e2a5,[Ljava.lang.String;@a26c417,[Ljava.lang.String;@7713c735),Annotation([Ljava.lang.String;@337ba5a6,[Ljava.lang.String;@7ab84fb1,[Ledu.cmu.lti.nlp.amr.Dependency;@5a782c68),Annotation([Ljava.lang.String;@7ab8e3f,[Ljava.lang.String;@1007ce08,[Ljava.lang.String;@70677770),Annotation([Ljava.lang.String;@18d293b7,[Ljava.lang.String;@28dfe01c,[Ledu.cmu.lti.nlp.amr.Entity;@1f2633b))
AMR:
(3 / 30, op, a3 / age-01)
(a / among, domain, t / they)
(a3 / age-01, ARG0, 5 / 5)
(a3 / age-01, ARG1, p2 / person)
(a3 / age-01, ARG2, b2 / between)
(a3 / age-01, mod, a4 / all)
(b2 / between, op, 2 / 20)
(b2 / between, op, 52 / 50)
(b2 / between, op, a2 / and)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, p2 / person)
(p / promise-01, ARG2, b / bonus)
(p2 / person, mod, e / each)
(v / volunteer-01, ARG0, p2 / person)

Decoded in 261,455 microseconds
Sentence: as promised and agreed she had had her tubes tied years before after sams arrival

Spans:
Span 12-13:  after => after
Span 3-4:  agreed => agree-01
Span 2-3:  and => and
Span 14-15:  arrival => arrive-01
Span 11-12:  before => before
Span 1-2:  promised => promise-01
Span 4-5:  she => she
Span 9-10:  tied => tie-01
Span 8-9:  tubes => tube
Span 10-11:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),arrival,arrive-01,false), Span(12,13,List(1),after,after,false), Span(11,12,List(2),before,before,false), Span(10,11,List(4, 3),years,(temporal-quantity :unit year),false), Span(9,10,List(5),tied,tie-01,false), Span(8,9,List(6),tubes,tube,false), Span(4,5,List(7),she,she,false), Span(3,4,List(8),agreed,agree-01,false), Span(2,3,List(9),and,and,false), Span(1,2,List(10),promised,promise-01,false)),Map(2 -> before, 5 -> tie-01, 8 -> agree-01, 7 -> she, 1 -> after, 4 -> year, 6 -> tube, 9 -> and, 0 -> arrive-01, 10 -> promise-01, 3 -> temporal-quantity),Map(t -> temporal-quantity, b -> before, a3 -> agree-01, s -> she, p -> promise-01, t3 -> tube, y -> year, a -> arrive-01, t2 -> tie-01, a2 -> after, a4 -> and))),[Ljava.lang.String;@5050b77c,Annotation([Ljava.lang.String;@633e5715,[Ljava.lang.String;@11c7569a,[Ljava.lang.String;@3606a194),Annotation([Ljava.lang.String;@6d5a1741,[Ljava.lang.String;@35ace47d,[Ledu.cmu.lti.nlp.amr.Dependency;@69cce612),Annotation([Ljava.lang.String;@b14de02,[Ljava.lang.String;@6fb5afd,[Ljava.lang.String;@60129b9f),Annotation([Ljava.lang.String;@65a714ff,[Ljava.lang.String;@3c53a57c,[Ledu.cmu.lti.nlp.amr.Entity;@17958ed5))
AMR:
(a2 / after, op, a / arrive-01)
(a3 / agree-01, ARG0, s / she)
(a4 / and, op, a3 / agree-01)
(a4 / and, op, p / promise-01)
(b / before, op, a2 / after)
(b / before, op, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)
(t2 / tie-01, ARG1, t3 / tube)
(t2 / tie-01, time, b / before)
(t3 / tube, poss, s / she)

Decoded in 39,697 microseconds
Sentence: i promised marie i wouldnt go out with fullblast again

Spans:
Span 9-10:  again => again
Span 3-4:  i => i
Span 0-1:  i => i
Span 1-2:  promised => promise-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),again,again,false), Span(3,4,List(1),i,i,false), Span(1,2,List(2),promised,promise-01,false), Span(0,1,List(3),i,i,false)),Map(2 -> promise-01, 1 -> i, 0 -> again, 3 -> i),Map(p -> promise-01, a -> again, i2 -> i, i -> i))),[Ljava.lang.String;@5bd44e0b,Annotation([Ljava.lang.String;@4f4fe346,[Ljava.lang.String;@5d23158,[Ljava.lang.String;@2aa58b64),Annotation([Ljava.lang.String;@5a62681b,[Ljava.lang.String;@72a0f2f8,[Ledu.cmu.lti.nlp.amr.Dependency;@24afb293),Annotation([Ljava.lang.String;@af4e3b6,[Ljava.lang.String;@5391c758,[Ljava.lang.String;@7b68d45),Annotation([Ljava.lang.String;@61f4b0f7,[Ljava.lang.String;@78e5a5f,[Ledu.cmu.lti.nlp.amr.Entity;@12cf16d9))
AMR:
(i / i, mod, a / again)
(p / promise-01, ARG0, i2 / i)
(p / promise-01, ARG1, i / i)

Decoded in 16,348 microseconds
Sentence: nonetheless i did go to the station for his arrival because i was promised a ride in the police car that would be leading santas open car down the high street

Spans:
Span 9-10:  arrival => arrive-01
Span 10-11:  because => cause-01
Span 26-27:  car => car
Span 19-20:  car => car
Span 27-28:  down => down
Span 29-30:  high => high
Span 11-12:  i => i
Span 1-2:  i => i
Span 23-24:  leading => lead-01
Span 0-1:  nonetheless => nonetheless
Span 18-19:  police => police
Span 13-14:  promised => promise-01
Span 15-16:  ride => ride-01
Span 6-7:  station => station
Span 30-31:  street => street

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),street,street,false), Span(29,30,List(1),high,high,false), Span(27,28,List(2),down,down,false), Span(26,27,List(3),car,car,false), Span(23,24,List(4),leading,lead-01,false), Span(19,20,List(5),car,car,false), Span(18,19,List(6),police,police,false), Span(15,16,List(7),ride,ride-01,false), Span(13,14,List(8),promised,promise-01,false), Span(11,12,List(9),i,i,false), Span(10,11,List(10),because,cause-01,false), Span(9,10,List(11),arrival,arrive-01,false), Span(6,7,List(12),station,station,false), Span(1,2,List(13),i,i,false), Span(0,1,List(14),nonetheless,nonetheless,false)),Map(2 -> down, 5 -> car, 12 -> station, 8 -> promise-01, 7 -> ride-01, 1 -> high, 4 -> lead-01, 11 -> arrive-01, 14 -> nonetheless, 6 -> police, 0 -> street, 9 -> i, 3 -> car, 10 -> cause-01, 13 -> i),Map(n -> nonetheless, h -> high, s2 -> station, p2 -> promise-01, s -> street, d -> down, p -> police, c3 -> cause-01, a -> arrive-01, i2 -> i, r -> ride-01, i -> i, c -> car, l -> lead-01, c2 -> car))),[Ljava.lang.String;@59e50a34,Annotation([Ljava.lang.String;@4c010a07,[Ljava.lang.String;@5839788c,[Ljava.lang.String;@25195c94),Annotation([Ljava.lang.String;@240d0b93,[Ljava.lang.String;@5472f262,[Ledu.cmu.lti.nlp.amr.Dependency;@46872b3e),Annotation([Ljava.lang.String;@5428179e,[Ljava.lang.String;@1426b13c,[Ljava.lang.String;@783de479),Annotation([Ljava.lang.String;@2763019b,[Ljava.lang.String;@54fe7b50,[Ledu.cmu.lti.nlp.amr.Entity;@f51ecc8))
AMR:
(a / arrive-01, ARG0, i / i)
(a / arrive-01, ARG1, n / nonetheless)
(c2 / car, mod, p / police)
(c3 / cause-01, ARG0, p2 / promise-01)
(c3 / cause-01, ARG1, h / high)
(d / down, op, s / street)
(i2 / i, op, l / lead-01)
(l / lead-01, ARG0, c2 / car)
(l / lead-01, ARG1, c / car)
(l / lead-01, time, d / down)
(p2 / promise-01, ARG1, i / i)
(p2 / promise-01, ARG2, r / ride-01)
(r / ride-01, ARG1, c2 / car)
(s2 / station, location, a / arrive-01)

Decoded in 534,922 microseconds
Sentence: the japanese were quick to promise similar sums

NER Entity: (thing :name (name :op "japanese"))
Spans:
Span 5-6:  promise => promise-01
Span 3-4:  quick => quick
Span 7-8:  sums => sum

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),sums,sum,false), Span(5,6,List(1),promise,promise-01,false), Span(3,4,List(2),quick,quick,false)),Map(2 -> quick, 1 -> promise-01, 0 -> sum),Map(q -> quick, s -> sum, p -> promise-01))),[Ljava.lang.String;@4b904653,Annotation([Ljava.lang.String;@6cf919e6,[Ljava.lang.String;@561382ee,[Ljava.lang.String;@1af90368),Annotation([Ljava.lang.String;@524eaead,[Ljava.lang.String;@2bae0a12,[Ledu.cmu.lti.nlp.amr.Dependency;@2f173a25),Annotation([Ljava.lang.String;@1dea6b4a,[Ljava.lang.String;@929d69e,[Ljava.lang.String;@19c923c5),Annotation([Ljava.lang.String;@644b67bc,[Ljava.lang.String;@12879b15,[Ledu.cmu.lti.nlp.amr.Entity;@4d68934))
AMR:
(p / promise-01, ARG1, s / sum)
(q / quick, domain, p / promise-01)

Decoded in 6,507 microseconds
Sentence: ive promised to perform for rommel she told the general and that will have to suffice

Spans:
Span 10-11:  and => and
Span 9-10:  general => general
Span 3-4:  perform => perform-01
Span 1-2:  promised => promise-01
Span 6-7:  she => she
Span 15-16:  suffice => suffice-01
Span 7-8:  told => tell-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),suffice,suffice-01,false), Span(10,11,List(1),and,and,false), Span(9,10,List(2),general,general,false), Span(7,8,List(3),told,tell-01,false), Span(6,7,List(4),she,she,false), Span(3,4,List(5),perform,perform-01,false), Span(1,2,List(6),promised,promise-01,false)),Map(2 -> general, 5 -> perform-01, 1 -> and, 4 -> she, 6 -> promise-01, 0 -> suffice-01, 3 -> tell-01),Map(s2 -> she, t -> tell-01, p2 -> promise-01, s -> suffice-01, p -> perform-01, g -> general, a -> and))),[Ljava.lang.String;@20c9b767,Annotation([Ljava.lang.String;@1b27dc02,[Ljava.lang.String;@55dd153b,[Ljava.lang.String;@259d0087),Annotation([Ljava.lang.String;@668db25b,[Ljava.lang.String;@60b8a8f6,[Ledu.cmu.lti.nlp.amr.Dependency;@7b5ce015),Annotation([Ljava.lang.String;@e7bc1f9,[Ljava.lang.String;@5efbc9dc,[Ljava.lang.String;@6481bb3b),Annotation([Ljava.lang.String;@12b520a,[Ljava.lang.String;@43170f1f,[Ledu.cmu.lti.nlp.amr.Entity;@1ee1dea2))
AMR:
(a / and, op, t / tell-01)
(p / perform-01, ARG1, a / and)
(p2 / promise-01, ARG1, p / perform-01)
(s / suffice-01, ARG0, s2 / she)
(t / tell-01, ARG0, s2 / she)
(t / tell-01, ARG2, g / general)

Decoded in 22,998 microseconds
Sentence: coincidentally wednesday is the day of mrs thatchers summer cabinet on the economy at which the chancellor mr nigel lawson and the chief secretary to the treasury mr john major will present economic assessments before the annual public spending round which mr major has promised will be a tough one

Spans:
Span 20-21:  and => and
Span 34-35:  before => before
Span 9-10:  cabinet => cabinet
Span 22-23:  chief => (have-org-role-91 :ARG2 chief)
Span 4-5:  day => day
Span 32-33:  economic => economy
Span 12-13:  economy => economy
Span 42-43:  major => major
Span 29-30:  major => major
Span 31-32:  present => present
Span 44-45:  promised => promise-01
Span 37-38:  public => public
Span 39-40:  round => round
Span 23-24:  secretary => secretary
Span 38-39:  spending => spend-01
Span 8-9:  summer => summer
Span 48-49:  tough => tough
Span 26-27:  treasury => treasury

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),tough,tough,false), Span(44,45,List(1),promised,promise-01,false), Span(42,43,List(2),major,major,false), Span(39,40,List(3),round,round,false), Span(38,39,List(4),spending,spend-01,false), Span(37,38,List(5),public,public,false), Span(34,35,List(6),before,before,false), Span(32,33,List(7),economic,economy,false), Span(31,32,List(8),present,present,false), Span(29,30,List(9),major,major,false), Span(26,27,List(10),treasury,treasury,false), Span(23,24,List(11),secretary,secretary,false), Span(22,23,List(13, 12),chief,(have-org-role-91 :ARG2 chief),false), Span(20,21,List(14),and,and,false), Span(12,13,List(15),economy,economy,false), Span(9,10,List(16),cabinet,cabinet,false), Span(8,9,List(17),summer,summer,false), Span(4,5,List(18),day,day,false)),Map(2 -> major, 5 -> public, 12 -> have-org-role-91, 15 -> economy, 8 -> present, 18 -> day, 7 -> economy, 17 -> summer, 1 -> promise-01, 4 -> spend-01, 11 -> secretary, 14 -> and, 6 -> before, 0 -> tough, 9 -> major, 16 -> cabinet, 3 -> round, 10 -> treasury, 13 -> chief),Map(e -> economy, h -> have-org-role-91, s2 -> secretary, t -> tough, b -> before, m2 -> major, e2 -> economy, p2 -> public, s -> spend-01, d -> day, m -> major, p -> promise-01, a -> and, t2 -> treasury, r -> round, s3 -> summer, c -> chief, p3 -> present, c2 -> cabinet))),[Ljava.lang.String;@7e8f362e,Annotation([Ljava.lang.String;@6c2e46eb,[Ljava.lang.String;@523225c9,[Ljava.lang.String;@5a4ed947),Annotation([Ljava.lang.String;@6e9af2a2,[Ljava.lang.String;@7eafa268,[Ledu.cmu.lti.nlp.amr.Dependency;@3ccf9ad2),Annotation([Ljava.lang.String;@61bd702e,[Ljava.lang.String;@5c100e23,[Ljava.lang.String;@22104b0d),Annotation([Ljava.lang.String;@5baf53f3,[Ljava.lang.String;@53b0a58b,[Ledu.cmu.lti.nlp.amr.Entity;@72447399))
AMR:
(a / and, op, p3 / present)
(a / and, op, s2 / secretary)
(b / before, domain, r / round)
(c2 / cabinet, domain, d / day)
(c2 / cabinet, location, e2 / economy)
(c2 / cabinet, mod, s3 / summer)
(h / have-org-role-91, ARG0, t / tough)
(h / have-org-role-91, ARG1, c2 / cabinet)
(h / have-org-role-91, ARG2, c / chief)
(h / have-org-role-91, ARG3, s2 / secretary)
(p / promise-01, ARG0, r / round)
(p / promise-01, ARG1, m / major)
(p / promise-01, ARG2, a / and)
(r / round, mod, e / economy)
(s / spend-01, ARG0, r / round)
(s / spend-01, ARG1, t2 / treasury)
(s / spend-01, mod, p2 / public)
(s2 / secretary, mod, m2 / major)

Decoded in 419,058 microseconds
Sentence: yet consenting and promising while overlapping are not the same

Spans:
Span 2-3:  and => and
Span 1-2:  consenting => consent-01
Span 3-4:  promising => promise-01
Span 9-10:  same => same-41
Span 0-1:  yet => yet

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),same,same-41,false), Span(3,4,List(1),promising,promise-01,false), Span(2,3,List(2),and,and,false), Span(1,2,List(3),consenting,consent-01,false), Span(0,1,List(4),yet,yet,false)),Map(2 -> and, 1 -> promise-01, 4 -> yet, 0 -> same-41, 3 -> consent-01),Map(s -> same-41, y -> yet, p -> promise-01, a -> and, c -> consent-01))),[Ljava.lang.String;@6c017c6a,Annotation([Ljava.lang.String;@558f4a8b,[Ljava.lang.String;@3267178f,[Ljava.lang.String;@e3bc723),Annotation([Ljava.lang.String;@768ed221,[Ljava.lang.String;@1a85b156,[Ledu.cmu.lti.nlp.amr.Dependency;@3f3d92b4),Annotation([Ljava.lang.String;@636a87db,[Ljava.lang.String;@66fd6dda,[Ljava.lang.String;@8373809),Annotation([Ljava.lang.String;@613fdb15,[Ljava.lang.String;@27487194,[Ledu.cmu.lti.nlp.amr.Entity;@518bfb2))
AMR:
(a / and, op, c / consent-01)
(a / and, op, p / promise-01)
(a / and, op, s / same-41)
(c / consent-01, time, y / yet)

Decoded in 12,360 microseconds
Sentence: although the move was hailed as sensational at first sight the vagueness of the language used to promise travel opportunities and media that are close to life failed to convince observers that the leadership had significantly softened its attitude

Spans:
Span 20-21:  and => and
Span 38-39:  attitude => attitude
Span 29-30:  convince => convince-01
Span 27-28:  failed => fail-01
Span 4-5:  hailed => hail-02
Span 14-15:  language => language
Span 26-27:  life => life
Span 21-22:  media => media
Span 30-31:  observers => (person :ARG0-of observe-01)
Span 19-20:  opportunities => opportunity
Span 17-18:  promise => promise-01
Span 9-10:  sight => sight-01
Span 35-36:  significantly => significant
Span 18-19:  travel => travel-01
Span 15-16:  used => use-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),attitude,attitude,false), Span(35,36,List(1),significantly,significant,false), Span(30,31,List(3, 2),observers,(person :ARG0-of observe-01),false), Span(29,30,List(4),convince,convince-01,false), Span(27,28,List(5),failed,fail-01,false), Span(26,27,List(6),life,life,false), Span(21,22,List(7),media,media,false), Span(20,21,List(8),and,and,false), Span(19,20,List(9),opportunities,opportunity,false), Span(18,19,List(10),travel,travel-01,false), Span(17,18,List(11),promise,promise-01,false), Span(15,16,List(12),used,use-01,false), Span(14,15,List(13),language,language,false), Span(9,10,List(14),sight,sight-01,false), Span(4,5,List(15),hailed,hail-02,false)),Map(2 -> person, 5 -> fail-01, 12 -> use-01, 15 -> hail-02, 8 -> and, 7 -> media, 1 -> significant, 4 -> convince-01, 11 -> promise-01, 14 -> sight-01, 6 -> life, 0 -> attitude, 9 -> opportunity, 3 -> observe-01, 10 -> travel-01, 13 -> language),Map(h -> hail-02, s2 -> sight-01, t -> travel-01, p2 -> promise-01, s -> significant, m -> media, p -> person, a -> attitude, o2 -> opportunity, l2 -> language, a2 -> and, c -> convince-01, l -> life, u -> use-01, f -> fail-01, o -> observe-01))),[Ljava.lang.String;@1bd141bb,Annotation([Ljava.lang.String;@47326a41,[Ljava.lang.String;@3eddf5eb,[Ljava.lang.String;@5e3c378b),Annotation([Ljava.lang.String;@4362b702,[Ljava.lang.String;@5dd06de,[Ledu.cmu.lti.nlp.amr.Dependency;@71eddbd3),Annotation([Ljava.lang.String;@36fb3414,[Ljava.lang.String;@2618293f,[Ljava.lang.String;@7c3bfaa2),Annotation([Ljava.lang.String;@45c3e166,[Ljava.lang.String;@3f031352,[Ledu.cmu.lti.nlp.amr.Entity;@62e98ccf))
AMR:
(a2 / and, op, m / media)
(a2 / and, op, u / use-01)
(c / convince-01, ARG0, l / life)
(c / convince-01, ARG1, p / person)
(f / fail-01, ARG0, a2 / and)
(f / fail-01, ARG1, a / attitude)
(f / fail-01, ARG2, c / convince-01)
(h / hail-02, ARG1, s2 / sight-01)
(o / observe-01, ARG0, p / person)
(p2 / promise-01, ARG1, o2 / opportunity)
(s2 / sight-01, ARG1, p / person)
(t / travel-01, ARG0, p / person)
(t / travel-01, ARG1, s / significant)
(u / use-01, ARG1, l2 / language)
(u / use-01, ARG2, p2 / promise-01)

Decoded in 398,856 microseconds
Sentence: not a bad note to go out on is it  he has promised his wife that in retirement he will devote more time to his family his two sons his daughter and the five grandchildren

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = not a bad note to go out on is it  he has promised his wife that in retirement he will devote more time to his family his two sons his daughter and the five grandchildren
myTokenized = not a bad note to go out on is it he has promised his wife that in retirement he will devote more time to his family his two sons his daughter and the five grandchildren
i = 10
prefix = List(not, a, bad, note, to, go, out, on, is, it, he)
regexr = \Qn\E ?\Qo\E ?\Qt\E ?\Qa\E ?\Qb\E ?\Qa\E ?\Qd\E ?\Qn\E ?\Qo\E ?\Qt\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qg\E ?\Qo\E ?\Qo\E ?\Qu\E ?\Qt\E ?\Qo\E ?\Qn\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qt\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: might they be more affordable  he promised he would work diligently

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = might they be more affordable  he promised he would work diligently
myTokenized = might they be more affordable he promised he would work diligently
i = 5
prefix = List(might, they, be, more, affordable, he)
regexr = \Qm\E ?\Qi\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qy\E ?\Qb\E ?\Qe\E ?\Qm\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qf\E ?\Qf\E ?\Qo\E ?\Qr\E ?\Qd\E ?\Qa\E ?\Qb\E ?\Ql\E ?\Qe\E ?\Qh\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: as she enters her second decade in power this promises to be an effective line of attack

Spans:
Span 16-17:  attack => attack-01
Span 5-6:  decade => (temporal-quantity :unit decade)
Span 13-14:  effective => effective
Span 2-3:  enters => enter-01
Span 14-15:  line => line
Span 7-8:  power => power
Span 9-10:  promises => promise-01
Span 1-2:  she => she
Span 8-9:  this => this

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),attack,attack-01,false), Span(14,15,List(1),line,line,false), Span(13,14,List(2),effective,effective,false), Span(9,10,List(3),promises,promise-01,false), Span(8,9,List(4),this,this,false), Span(7,8,List(5),power,power,false), Span(5,6,List(7, 6),decade,(temporal-quantity :unit decade),false), Span(2,3,List(8),enters,enter-01,false), Span(1,2,List(9),she,she,false)),Map(2 -> effective, 5 -> power, 8 -> enter-01, 7 -> decade, 1 -> line, 4 -> this, 6 -> temporal-quantity, 9 -> she, 0 -> attack-01, 3 -> promise-01),Map(e -> effective, t -> this, e2 -> enter-01, p2 -> power, s -> she, d -> decade, p -> promise-01, a -> attack-01, t2 -> temporal-quantity, l -> line))),[Ljava.lang.String;@5549888b,Annotation([Ljava.lang.String;@4ea3896b,[Ljava.lang.String;@5292f822,[Ljava.lang.String;@2ee0aa88),Annotation([Ljava.lang.String;@1fdbdec3,[Ljava.lang.String;@1bfde48c,[Ledu.cmu.lti.nlp.amr.Dependency;@39a7b1af),Annotation([Ljava.lang.String;@308275bb,[Ljava.lang.String;@44ff60de,[Ljava.lang.String;@5a30b235),Annotation([Ljava.lang.String;@3303e3d5,[Ljava.lang.String;@4462cf1d,[Ledu.cmu.lti.nlp.amr.Entity;@330b9bfe))
AMR:
(a / attack-01, ARG0, t2 / temporal-quantity)
(e2 / enter-01, ARG0, s / she)
(e2 / enter-01, ARG1, d / decade)
(e2 / enter-01, manner, p2 / power)
(l / line, domain, t / this)
(l / line, mod, e / effective)
(p / promise-01, ARG0, p2 / power)
(p / promise-01, ARG1, l / line)
(t2 / temporal-quantity, unit, d / decade)

Decoded in 269,336 microseconds
Sentence: gorbachev gave bush a detailed map of classified information about us installations around the soviet union and bush promised to check the map with cia experts since it was prepared by the kgb

NER Entity: (country :name (name :op "soviet"))
Spans:
Span 16-17:  and => and
Span 12-13:  around => around
Span 17-18:  bush => bush-league
Span 2-3:  bush => bush-league
Span 24-25:  cia => (government-organization :name (name :op "CIA"))
Span 7-8:  classified => classify-01
Span 4-5:  detailed => detail-01
Span 25-26:  experts => (person :ARG1-of expert-41)
Span 8-9:  information => information
Span 11-12:  installations => installation
Span 27-28:  it => it
Span 22-23:  map => map
Span 5-6:  map => map
Span 29-30:  prepared => prepare-02
Span 18-19:  promised => promise-01
Span 26-27:  since => since
Span 15-16:  union => union

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),prepared,prepare-02,false), Span(27,28,List(1),it,it,false), Span(26,27,List(2),since,since,false), Span(25,26,List(4, 3),experts,(person :ARG1-of expert-41),false), Span(24,25,List(7, 6, 5),cia,(government-organization :name (name :op "CIA")),false), Span(22,23,List(8),map,map,false), Span(18,19,List(9),promised,promise-01,false), Span(17,18,List(10),bush,bush-league,false), Span(16,17,List(11),and,and,false), Span(15,16,List(12),union,union,false), Span(12,13,List(13),around,around,false), Span(11,12,List(14),installations,installation,false), Span(8,9,List(15),information,information,false), Span(7,8,List(16),classified,classify-01,false), Span(5,6,List(17),map,map,false), Span(4,5,List(18),detailed,detail-01,false), Span(2,3,List(19),bush,bush-league,false)),Map(2 -> since, 5 -> government-organization, 12 -> union, 15 -> information, 8 -> map, 18 -> detail-01, 7 -> "CIA", 17 -> map, 1 -> it, 4 -> expert-41, 11 -> and, 14 -> installation, 6 -> name, 0 -> prepare-02, 9 -> promise-01, 16 -> classify-01, 19 -> bush-league, 3 -> person, 10 -> bush-league, 13 -> around),Map(e -> expert-41, n -> name, b -> bush-league, b2 -> bush-league, m2 -> map, p2 -> person, s -> since, d -> detail-01, m -> map, i3 -> information, p -> prepare-02, g -> government-organization, a -> and, i2 -> installation, i -> it, a2 -> around, c -> classify-01, u -> union, p3 -> promise-01))),[Ljava.lang.String;@7ac9d6d3,Annotation([Ljava.lang.String;@5936f59f,[Ljava.lang.String;@2737c77b,[Ljava.lang.String;@3f09705a),Annotation([Ljava.lang.String;@4af450b,[Ljava.lang.String;@eddd794,[Ledu.cmu.lti.nlp.amr.Dependency;@6743d2c),Annotation([Ljava.lang.String;@395c1703,[Ljava.lang.String;@4ceae360,[Ljava.lang.String;@50f5db13),Annotation([Ljava.lang.String;@3d01e5eb,[Ljava.lang.String;@479dc697,[Ledu.cmu.lti.nlp.amr.Entity;@4759083c))
AMR:
(a / and, op, b / bush-league)
(a2 / around, op, a / and)
(a2 / around, op, u / union)
(c / classify-01, ARG1, i3 / information)
(d / detail-01, ARG0, p2 / person)
(d / detail-01, ARG1, m2 / map)
(e / expert-41, ARG0, b / bush-league)
(e / expert-41, ARG1, p2 / person)
(e / expert-41, ARG2, g / government-organization)
(g / government-organization, name, n / name)
(i2 / installation, location, a2 / around)
(m2 / map, mod, b2 / bush-league)
(m2 / map, mod, i3 / information)
(n / name, op, "CIA")
(p / prepare-02, ARG0, m / map)
(p / prepare-02, ARG1, i / it)
(p3 / promise-01, ARG1, a / and)
(p3 / promise-01, condition, p / prepare-02)
(s / since, op, p / prepare-02)

Decoded in 475,943 microseconds
Sentence: coming two years after the fiasco when tory backbenchers successfully blocked the sale of rover to ford young was able to promise that bae would invest 1 billion in the ailing car group in return for writing off debts and getting the government and the taxpayer off the hook for future investment in the state firm

Spans:
Span 26-27:  1 => 1
Span 19-20:  able => possible
Span 3-4:  after => after
Span 43-44:  and => and
Span 39-40:  and => and
Span 10-11:  blocked => block-01
Span 31-32:  car => car
Span 38-39:  debts => debt
Span 5-6:  fiasco => fiasco
Span 55-56:  firm => firm
Span 50-51:  future => future
Span 32-33:  group => group
Span 48-49:  hook => hook-02
Span 25-26:  invest => invest-01
Span 51-52:  investment => invest-01
Span 46-47:  off => off
Span 37-38:  off => off
Span 21-22:  promise => promise-01
Span 54-55:  state => state
Span 9-10:  successfully => succeed-01
Span 7-8:  tory => (political-party :name (name :op "Tory"))
Span 1-2:  two => 2
Span 36-37:  writing => write-01
Span 2-3:  years => (temporal-quantity :unit year)
Span 17-18:  young => young

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(55,56,List(0),firm,firm,false), Span(54,55,List(1),state,state,false), Span(51,52,List(2),investment,invest-01,false), Span(50,51,List(3),future,future,false), Span(48,49,List(4),hook,hook-02,false), Span(46,47,List(5),off,off,false), Span(43,44,List(6),and,and,false), Span(39,40,List(7),and,and,false), Span(38,39,List(8),debts,debt,false), Span(37,38,List(9),off,off,false), Span(36,37,List(10),writing,write-01,false), Span(32,33,List(11),group,group,false), Span(31,32,List(12),car,car,false), Span(26,27,List(13),1,1,false), Span(25,26,List(14),invest,invest-01,false), Span(21,22,List(15),promise,promise-01,false), Span(19,20,List(16),able,possible,false), Span(17,18,List(17),young,young,false), Span(10,11,List(18),blocked,block-01,false), Span(9,10,List(19),successfully,succeed-01,false), Span(7,8,List(22, 21, 20),tory,(political-party :name (name :op "Tory")),false), Span(5,6,List(23),fiasco,fiasco,false), Span(3,4,List(24),after,after,false), Span(2,3,List(26, 25),years,(temporal-quantity :unit year),false), Span(1,2,List(27),two,2,false)),Map(2 -> invest-01, 5 -> off, 27 -> 2, 12 -> car, 8 -> debt, 15 -> promise-01, 21 -> name, 18 -> block-01, 24 -> after, 7 -> and, 1 -> state, 17 -> young, 23 -> fiasco, 26 -> year, 4 -> hook-02, 11 -> group, 14 -> invest-01, 20 -> political-party, 6 -> and, 9 -> off, 0 -> firm, 22 -> "Tory", 16 -> possible, 19 -> succeed-01, 10 -> write-01, 3 -> future, 25 -> temporal-quantity, 13 -> 1),Map(w -> write-01, n -> name, h -> hook-02, 2 -> 2, s2 -> succeed-01, t -> temporal-quantity, b -> block-01, p2 -> possible, a3 -> after, s -> state, d -> debt, 1 -> 1, y -> young, g -> group, p -> promise-01, a -> and, o2 -> off, f3 -> fiasco, i2 -> invest-01, a2 -> and, i -> invest-01, c -> car, f2 -> future, f -> firm, o -> off, p3 -> political-party, y2 -> year))),[Ljava.lang.String;@64cd72ab,Annotation([Ljava.lang.String;@6c236c40,[Ljava.lang.String;@9981537,[Ljava.lang.String;@5f98d2cc),Annotation([Ljava.lang.String;@2a37801c,[Ljava.lang.String;@21bbc3eb,[Ledu.cmu.lti.nlp.amr.Dependency;@2e3b8a9a),Annotation([Ljava.lang.String;@47089c2c,[Ljava.lang.String;@6453123,[Ljava.lang.String;@289cf40c),Annotation([Ljava.lang.String;@585a54a8,[Ljava.lang.String;@126c0ee9,[Ledu.cmu.lti.nlp.amr.Entity;@7446ec71))
AMR:
(a / and, op, w / write-01)
(a2 / and, op, w / write-01)
(a3 / after, op, f3 / fiasco)
(a3 / after, quant, t / temporal-quantity)
(b / block-01, ARG0, y / young)
(b / block-01, ARG1, f3 / fiasco)
(f / firm, mod, s / state)
(g / group, mod, c / car)
(h / hook-02, ARG1, i / invest-01)
(i / invest-01, ARG0, f / firm)
(i / invest-01, time, f2 / future)
(i2 / invest-01, ARG1, c / car)
(n / name, op, "Tory")
(o / off, op, h / hook-02)
(p / promise-01, ARG0, p3 / political-party)
(p / promise-01, ARG1, i2 / invest-01)
(p / promise-01, ARG2, a / and)
(p2 / possible, domain, p / promise-01)
(p3 / political-party, name, n / name)
(s2 / succeed-01, ARG0, g / group)
(s2 / succeed-01, ARG1, b / block-01)
(t / temporal-quantity, quant, 1 / 1)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y2 / year)
(w / write-01, ARG1, d / debt)
(w / write-01, concession, o / off)
(w / write-01, direction, o2 / off)

Decoded in 1,130,102 microseconds
Sentence: in late 1988 fourteen reporters from colombia ecuador and peru at a quito workshop issued a challenge to their colleagues throughout the continent we therefore resolve to call on the latin american press to join in educational campaigns in their communities on environmental topics to guide governments on this and promise ever greater space to ecological subjects

NER Entity: (country :name (name :op "colombia"))
NER Entity: (country :name (name :op "ecuador"))
NER Entity: (country :name (name :op "peru"))
NER Entity: (thing :name (name :op "latin" :op "american"))
Spans:
Span 2-3:  1988 => (date-entity :year 1988)
Span 49-50:  and => and
Span 8-9:  and => and
Span 37-38:  campaigns => campaign-01
Span 16-17:  challenge => challenge-01
Span 40-41:  communities => community
Span 22-23:  continent => continent
Span 55-56:  ecological => ecology
Span 36-37:  educational => educate-01
Span 42-43:  environmental => environment
Span 51-52:  ever => ever
Span 46-47:  governments => (government-organization :ARG0-of govern-01)
Span 52-53:  greater => great
Span 45-46:  guide => guide-01
Span 14-15:  issued => issue-01
Span 34-35:  join => join-01
Span 1-2:  late => late
Span 30-32:  latin american => (thing :name (name :op "latin" :op "american"))
Span 32-33:  press => press
Span 50-51:  promise => promise-01
Span 4-5:  reporters => (person :ARG0-of report-01)
Span 25-26:  resolve => resolve-01
Span 53-54:  space => space
Span 56-57:  subjects => subject
Span 48-49:  this => this
Span 20-21:  throughout => throughout
Span 43-44:  topics => topic
Span 23-24:  we => we
Span 13-14:  workshop => workshop

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(56,57,List(0),subjects,subject,false), Span(55,56,List(1),ecological,ecology,false), Span(53,54,List(2),space,space,false), Span(52,53,List(3),greater,great,false), Span(51,52,List(4),ever,ever,false), Span(50,51,List(5),promise,promise-01,false), Span(49,50,List(6),and,and,false), Span(48,49,List(7),this,this,false), Span(46,47,List(9, 8),governments,(government-organization :ARG0-of govern-01),false), Span(45,46,List(10),guide,guide-01,false), Span(43,44,List(11),topics,topic,false), Span(42,43,List(12),environmental,environment,false), Span(40,41,List(13),communities,community,false), Span(37,38,List(14),campaigns,campaign-01,false), Span(36,37,List(15),educational,educate-01,false), Span(34,35,List(16),join,join-01,false), Span(32,33,List(17),press,press,false), Span(30,32,List(21, 20, 19, 18),latin american,(thing :name (name :op "latin" :op "american")),false), Span(25,26,List(22),resolve,resolve-01,false), Span(23,24,List(23),we,we,false), Span(22,23,List(24),continent,continent,false), Span(20,21,List(25),throughout,throughout,false), Span(16,17,List(26),challenge,challenge-01,false), Span(14,15,List(27),issued,issue-01,false), Span(13,14,List(28),workshop,workshop,false), Span(8,9,List(29),and,and,false), Span(4,5,List(31, 30),reporters,(person :ARG0-of report-01),false), Span(2,3,List(33, 32),1988,(date-entity :year 1988),false), Span(1,2,List(34),late,late,false)),Map(30 -> person, 2 -> space, 5 -> promise-01, 33 -> 1988, 27 -> issue-01, 12 -> environment, 8 -> government-organization, 15 -> educate-01, 21 -> "american", 18 -> thing, 24 -> continent, 7 -> this, 1 -> ecology, 17 -> press, 23 -> we, 26 -> challenge-01, 4 -> ever, 11 -> topic, 32 -> date-entity, 14 -> campaign-01, 29 -> and, 20 -> "latin", 34 -> late, 28 -> workshop, 6 -> and, 9 -> govern-01, 0 -> subject, 22 -> resolve-01, 16 -> join-01, 19 -> name, 10 -> guide-01, 3 -> great, 31 -> report-01, 25 -> throughout, 13 -> community),Map(e -> ecology, n -> name, w -> we, g3 -> govern-01, t4 -> throughout, s2 -> space, t -> this, e2 -> ever, p2 -> press, j -> join-01, c4 -> challenge-01, s -> subject, d -> date-entity, 1 -> 1988, g2 -> government-organization, t3 -> thing, r2 -> report-01, p -> promise-01, g -> great, a -> and, c3 -> continent, e4 -> educate-01, t2 -> topic, w2 -> workshop, a2 -> and, i -> issue-01, r -> resolve-01, c -> community, l -> late, p3 -> person, e3 -> environment, g4 -> guide-01, c2 -> campaign-01))),[Ljava.lang.String;@739d6388,Annotation([Ljava.lang.String;@61f1b104,[Ljava.lang.String;@429cafd8,[Ljava.lang.String;@3cdcb012),Annotation([Ljava.lang.String;@3cab8cf5,[Ljava.lang.String;@22b347f1,[Ledu.cmu.lti.nlp.amr.Dependency;@28383103),Annotation([Ljava.lang.String;@119d096,[Ljava.lang.String;@45cd286a,[Ljava.lang.String;@20186af3),Annotation([Ljava.lang.String;@231587fb,[Ljava.lang.String;@5a9281bb,[Ledu.cmu.lti.nlp.amr.Entity;@48834a71))
AMR:
(a / and, op, p / promise-01)
(a2 / and, op, c4 / challenge-01)
(a2 / and, op, p3 / person)
(c2 / campaign-01, ARG1, c / community)
(c2 / campaign-01, mod, e4 / educate-01)
(c4 / challenge-01, ARG0, t4 / throughout)
(c4 / challenge-01, ARG1, d / date-entity)
(d / date-entity, year, 1 / 1988)
(e4 / educate-01, ARG1, t / this)
(g3 / govern-01, ARG0, g2 / government-organization)
(g4 / guide-01, ARG0, t2 / topic)
(g4 / guide-01, ARG1, g2 / government-organization)
(i / issue-01, ARG0, w2 / workshop)
(i / issue-01, ARG1, c4 / challenge-01)
(j / join-01, ARG0, w / we)
(j / join-01, ARG1, c2 / campaign-01)
(j / join-01, purpose, g4 / guide-01)
(l / late, op, d / date-entity)
(n / name, op, "american")
(n / name, op, "latin")
(p / promise-01, ARG0, w / we)
(p / promise-01, ARG1, e / ecology)
(p / promise-01, manner, g / great)
(p / promise-01, time, e2 / ever)
(p2 / press, mod, t3 / thing)
(p2 / press, purpose, j / join-01)
(r / resolve-01, ARG0, w / we)
(r / resolve-01, ARG1, c3 / continent)
(r2 / report-01, ARG0, p3 / person)
(s / subject, mod, e / ecology)
(s2 / space, mod, g / great)
(t2 / topic, mod, e3 / environment)
(t3 / thing, name, n / name)
(t4 / throughout, op, c3 / continent)

Decoded in 1,133,750 microseconds
Sentence: he was promised better weather for 6 june and at 4 a

Spans:
Span 10-11:  4 => 4
Span 6-7:  6 => 6
Span 8-9:  and => and
Span 0-1:  he => he
Span 7-8:  june => (date-entity :month 6)
Span 2-3:  promised => promise-01
Span 4-5:  weather => weather

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),4,4,false), Span(8,9,List(1),and,and,false), Span(7,8,List(3, 2),june,(date-entity :month 6),false), Span(6,7,List(4),6,6,false), Span(4,5,List(5),weather,weather,false), Span(2,3,List(6),promised,promise-01,false), Span(0,1,List(7),he,he,false)),Map(2 -> date-entity, 5 -> weather, 7 -> he, 1 -> and, 4 -> 6, 6 -> promise-01, 0 -> 4, 3 -> 6),Map(w -> weather, h -> he, 62 -> 6, d -> date-entity, p -> promise-01, a -> and, 4 -> 4, 6 -> 6))),[Ljava.lang.String;@238c65e8,Annotation([Ljava.lang.String;@56767493,[Ljava.lang.String;@7adf8b3d,[Ljava.lang.String;@6a2e90d0),Annotation([Ljava.lang.String;@17257e26,[Ljava.lang.String;@1e7cfca9,[Ledu.cmu.lti.nlp.amr.Dependency;@1fafcae2),Annotation([Ljava.lang.String;@4e30cbae,[Ljava.lang.String;@658c349c,[Ljava.lang.String;@57d221d9),Annotation([Ljava.lang.String;@24ac5a9a,[Ljava.lang.String;@2f704745,[Ledu.cmu.lti.nlp.amr.Entity;@74571b57))
AMR:
(a / and, op, d / date-entity)
(d / date-entity, month, 6 / 6)
(d / date-entity, quant, 62 / 6)
(p / promise-01, ARG0, h / he)
(p / promise-01, ARG1, w / weather)
(p / promise-01, ARG2, a / and)
(p / promise-01, manner, 4 / 4)

Decoded in 85,592 microseconds
Sentence: but the way to make good this promise is i believe to take seriously the practical  theoretical distinction and to explore it further

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = but the way to make good this promise is i believe to take seriously the practical  theoretical distinction and to explore it further
myTokenized = but the way to make good this promise is i believe to take seriously the practical theoretical distinction and to explore it further
i = 16
prefix = List(but, the, way, to, make, good, this, promise, is, i, believe, to, take, seriously, the, practical, theoretical)
regexr = \Qb\E ?\Qu\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qw\E ?\Qa\E ?\Qy\E ?\Qt\E ?\Qo\E ?\Qm\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qg\E ?\Qo\E ?\Qo\E ?\Qd\E ?\Qt\E ?\Qh\E ?\Qi\E ?\Qs\E ?\Qp\E ?\Qr\E ?\Qo\E ?\Qm\E ?\Qi\E ?\Qs\E ?\Qe\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qb\E ?\Qe\E ?\Ql\E ?\Qi\E ?\Qe\E ?\Qv\E ?\Qe\E ?\Qt\E ?\Qo\E ?\Qt\E ?\Qa\E ?\Qk\E ?\Qe\E ?\Qs\E ?\Qe\E ?\Qr\E ?\Qi\E ?\Qo\E ?\Qu\E ?\Qs\E ?\Ql\E ?\Qy\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qp\E ?\Qr\E ?\Qa\E ?\Qc\E ?\Qt\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Ql\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qo\E ?\Qr\E ?\Qe\E ?\Qt\E ?\Qi\E ?\Qc\E ?\Qa\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the forecast from livorno has spoken of increasing winds and i laid out all the chain before we rowed ashore feeling curiously british and eccentric using oars among so many outboards for the pasta and wine we had been promising ourselves since midmorning

NER Entity: (thing :name (name :op "british"))
Spans:
Span 13-14:  all => all
Span 27-28:  among => among
Span 34-35:  and => and
Span 23-24:  and => and
Span 9-10:  and => and
Span 19-20:  ashore => ashore
Span 16-17:  before => before
Span 15-16:  chain => chain
Span 20-21:  feeling => feel-01
Span 1-2:  forecast => forecast-01
Span 10-11:  i => i
Span 7-8:  increasing => increase-01
Span 11-12:  laid => lay-02
Span 29-30:  many => many
Span 39-40:  promising => promise-01
Span 41-42:  since => since
Span 28-29:  so => so
Span 5-6:  spoken => speak-01
Span 25-26:  using => use-01
Span 36-37:  we => we
Span 17-18:  we => we
Span 8-9:  winds => wind
Span 35-36:  wine => wine

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),since,since,false), Span(39,40,List(1),promising,promise-01,false), Span(36,37,List(2),we,we,false), Span(35,36,List(3),wine,wine,false), Span(34,35,List(4),and,and,false), Span(29,30,List(5),many,many,false), Span(28,29,List(6),so,so,false), Span(27,28,List(7),among,among,false), Span(25,26,List(8),using,use-01,false), Span(23,24,List(9),and,and,false), Span(20,21,List(10),feeling,feel-01,false), Span(19,20,List(11),ashore,ashore,false), Span(17,18,List(12),we,we,false), Span(16,17,List(13),before,before,false), Span(15,16,List(14),chain,chain,false), Span(13,14,List(15),all,all,false), Span(11,12,List(16),laid,lay-02,false), Span(10,11,List(17),i,i,false), Span(9,10,List(18),and,and,false), Span(8,9,List(19),winds,wind,false), Span(7,8,List(20),increasing,increase-01,false), Span(5,6,List(21),spoken,speak-01,false), Span(1,2,List(22),forecast,forecast-01,false)),Map(2 -> we, 5 -> many, 12 -> we, 15 -> all, 8 -> use-01, 21 -> speak-01, 18 -> and, 7 -> among, 17 -> i, 1 -> promise-01, 4 -> and, 11 -> ashore, 14 -> chain, 20 -> increase-01, 6 -> so, 22 -> forecast-01, 0 -> since, 9 -> and, 16 -> lay-02, 19 -> wind, 3 -> wine, 10 -> feel-01, 13 -> before),Map(w -> we, s2 -> so, b -> before, a3 -> and, s -> since, w3 -> we, a6 -> and, m -> many, p -> promise-01, a -> and, a5 -> all, i2 -> increase-01, w2 -> wine, i -> i, a2 -> among, s3 -> speak-01, c -> chain, f2 -> forecast-01, l -> lay-02, u -> use-01, f -> feel-01, w4 -> wind, a4 -> ashore))),[Ljava.lang.String;@6b7196e4,Annotation([Ljava.lang.String;@6e6989d7,[Ljava.lang.String;@52d8bae2,[Ljava.lang.String;@12d575ec),Annotation([Ljava.lang.String;@7c30e29c,[Ljava.lang.String;@6d6daf76,[Ledu.cmu.lti.nlp.amr.Dependency;@3c1aa41a),Annotation([Ljava.lang.String;@790bc5c9,[Ljava.lang.String;@73e64d34,[Ljava.lang.String;@14d6cc5e),Annotation([Ljava.lang.String;@22033a02,[Ljava.lang.String;@1d56ac0,[Ledu.cmu.lti.nlp.amr.Entity;@62536430))
AMR:
(a / and, op, f / feel-01)
(a / and, op, w2 / wine)
(a2 / among, op, m / many)
(a6 / and, op, i / i)
(c / chain, quant, a5 / all)
(f / feel-01, ARG0, w3 / we)
(f / feel-01, ARG1, c / chain)
(f / feel-01, mod, a4 / ashore)
(f / feel-01, time, a2 / among)
(i2 / increase-01, ARG1, w4 / wind)
(l / lay-02, ARG0, i / i)
(l / lay-02, ARG1, c / chain)
(l / lay-02, time, b / before)
(m / many, degree, s2 / so)
(p / promise-01, ARG0, w / we)
(p / promise-01, ARG1, a / and)
(p / promise-01, time, s / since)
(s3 / speak-01, ARG0, f2 / forecast-01)
(s3 / speak-01, ARG1, a6 / and)
(s3 / speak-01, instrument, w4 / wind)
(u / use-01, ARG0, i / i)
(u / use-01, ARG1, a3 / and)

Decoded in 1,228,098 microseconds
Sentence: for what they promise is also dont worry german reunification is not just round the corner

NER Entity: (thing :name (name :op "german"))
Spans:
Span 5-6:  also => also
Span 15-16:  corner => corner
Span 12-13:  just => just
Span 3-4:  promise => promise-01
Span 13-14:  round => round
Span 2-3:  they => they
Span 7-8:  worry => worry-02

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),corner,corner,false), Span(13,14,List(1),round,round,false), Span(12,13,List(2),just,just,false), Span(7,8,List(3),worry,worry-02,false), Span(5,6,List(4),also,also,false), Span(3,4,List(5),promise,promise-01,false), Span(2,3,List(6),they,they,false)),Map(2 -> just, 5 -> promise-01, 1 -> round, 4 -> also, 6 -> they, 0 -> corner, 3 -> worry-02),Map(w -> worry-02, t -> they, j -> just, p -> promise-01, a -> also, r -> round, c -> corner))),[Ljava.lang.String;@50d6bdbe,Annotation([Ljava.lang.String;@42432e68,[Ljava.lang.String;@489bcfd4,[Ljava.lang.String;@6d698c89),Annotation([Ljava.lang.String;@2c89ae7d,[Ljava.lang.String;@31ea763,[Ledu.cmu.lti.nlp.amr.Dependency;@517f562e),Annotation([Ljava.lang.String;@7ef30fce,[Ljava.lang.String;@792de7f,[Ljava.lang.String;@3b4d67bb),Annotation([Ljava.lang.String;@56d54467,[Ljava.lang.String;@4b7df2ba,[Ledu.cmu.lti.nlp.amr.Entity;@39cab80e))
AMR:
(c / corner, poss, a / also)
(p / promise-01, ARG0, t / they)
(p / promise-01, ARG1, w / worry-02)
(r / round, mod, c / corner)
(r / round, mod, j / just)
(w / worry-02, ARG1, c / corner)

Decoded in 36,478 microseconds
Sentence: mr miller is thought to have promised bumper returns on investments a fact that might explain his plunge into share dealing

Spans:
Span 7-8:  bumper => bumper
Span 20-21:  dealing => deal-01
Span 15-16:  explain => explain-01
Span 12-13:  fact => fact
Span 10-11:  investments => invest-01
Span 17-18:  plunge => plunge-01
Span 6-7:  promised => promise-01
Span 8-9:  returns => return-02
Span 19-20:  share => share-01
Span 3-4:  thought => think-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),dealing,deal-01,false), Span(19,20,List(1),share,share-01,false), Span(17,18,List(2),plunge,plunge-01,false), Span(15,16,List(3),explain,explain-01,false), Span(12,13,List(4),fact,fact,false), Span(10,11,List(5),investments,invest-01,false), Span(8,9,List(6),returns,return-02,false), Span(7,8,List(7),bumper,bumper,false), Span(6,7,List(8),promised,promise-01,false), Span(3,4,List(9),thought,think-01,false)),Map(2 -> plunge-01, 5 -> invest-01, 8 -> promise-01, 7 -> bumper, 1 -> share-01, 4 -> fact, 6 -> return-02, 9 -> think-01, 0 -> deal-01, 3 -> explain-01),Map(e -> explain-01, t -> think-01, b -> bumper, p2 -> promise-01, s -> share-01, d -> deal-01, p -> plunge-01, r -> return-02, i -> invest-01, f -> fact))),[Ljava.lang.String;@2bf9bcc6,Annotation([Ljava.lang.String;@18d881b8,[Ljava.lang.String;@2e2c63c6,[Ljava.lang.String;@644a73d8),Annotation([Ljava.lang.String;@53fb9d58,[Ljava.lang.String;@2c17277b,[Ledu.cmu.lti.nlp.amr.Dependency;@242112da),Annotation([Ljava.lang.String;@775cb8bd,[Ljava.lang.String;@6864bd83,[Ljava.lang.String;@2dd61900),Annotation([Ljava.lang.String;@43036682,[Ljava.lang.String;@143f032d,[Ledu.cmu.lti.nlp.amr.Entity;@34e989bd))
AMR:
(d / deal-01, ARG1, s / share-01)
(e / explain-01, ARG1, p / plunge-01)
(p / plunge-01, ARG0, f / fact)
(p / plunge-01, ARG1, d / deal-01)
(p2 / promise-01, ARG1, r / return-02)
(r / return-02, ARG0, f / fact)
(r / return-02, ARG1, i / invest-01)
(r / return-02, mod, b / bumper)
(t / think-01, ARG1, p2 / promise-01)

Decoded in 108,260 microseconds
Sentence: popular discontent with mr kerekou who seized power in a bloody military coup 17 years ago promising to deliver the longsuffering people of benin with a radical brand of marxismleninism has reached a feverish pitch

NER Entity: (country :name (name :op "benin"))
Spans:
Span 13-14:  17 => 17
Span 10-11:  bloody => bloody
Span 27-28:  brand => brand
Span 12-13:  coup => coup
Span 18-19:  deliver => deliver-01
Span 11-12:  military => military
Span 34-35:  pitch => pitch-03
Span 0-1:  popular => popular-41
Span 7-8:  power => power
Span 16-17:  promising => promise-01
Span 26-27:  radical => radical
Span 31-32:  reached => reach-01
Span 6-7:  seized => seize-01
Span 14-15:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),pitch,pitch-03,false), Span(31,32,List(1),reached,reach-01,false), Span(27,28,List(2),brand,brand,false), Span(26,27,List(3),radical,radical,false), Span(18,19,List(4),deliver,deliver-01,false), Span(16,17,List(5),promising,promise-01,false), Span(14,15,List(7, 6),years,(temporal-quantity :unit year),false), Span(13,14,List(8),17,17,false), Span(12,13,List(9),coup,coup,false), Span(11,12,List(10),military,military,false), Span(10,11,List(11),bloody,bloody,false), Span(7,8,List(12),power,power,false), Span(6,7,List(13),seized,seize-01,false), Span(0,1,List(14),popular,popular-41,false)),Map(2 -> brand, 5 -> promise-01, 12 -> power, 8 -> 17, 7 -> year, 1 -> reach-01, 4 -> deliver-01, 11 -> bloody, 14 -> popular-41, 6 -> temporal-quantity, 0 -> pitch-03, 9 -> coup, 3 -> radical, 10 -> military, 13 -> seize-01),Map(b -> brand, t -> temporal-quantity, b2 -> bloody, p2 -> promise-01, s -> seize-01, d -> deliver-01, m -> military, 1 -> 17, p -> pitch-03, r2 -> radical, y -> year, p4 -> popular-41, r -> reach-01, c -> coup, p3 -> power))),[Ljava.lang.String;@5051f26e,Annotation([Ljava.lang.String;@34033cf4,[Ljava.lang.String;@4096d1d9,[Ljava.lang.String;@6dab1eaf),Annotation([Ljava.lang.String;@7d6bab68,[Ljava.lang.String;@27c2792c,[Ledu.cmu.lti.nlp.amr.Dependency;@50a14c18),Annotation([Ljava.lang.String;@d8ae503,[Ljava.lang.String;@19c12ee7,[Ljava.lang.String;@59ee4ce6),Annotation([Ljava.lang.String;@2bfabe2a,[Ljava.lang.String;@5adacdf4,[Ledu.cmu.lti.nlp.amr.Entity;@53077cc5))
AMR:
(b / brand, mod, r2 / radical)
(c / coup, mod, m / military)
(d / deliver-01, ARG1, b / brand)
(d / deliver-01, ARG2, r / reach-01)
(p2 / promise-01, ARG1, c / coup)
(p2 / promise-01, ARG2, d / deliver-01)
(p4 / popular-41, ARG1, p2 / promise-01)
(r / reach-01, ARG0, b2 / bloody)
(r / reach-01, ARG1, p / pitch-03)
(s / seize-01, ARG1, p3 / power)
(s / seize-01, purpose, p2 / promise-01)
(s / seize-01, time, t / temporal-quantity)
(t / temporal-quantity, quant, 1 / 17)
(t / temporal-quantity, unit, y / year)

Decoded in 306,118 microseconds
Sentence: men who had promised to win the war found it hard to resist a general who insisted that he could win it

Spans:
Span 19-20:  could => possible
Span 8-9:  found => find-01
Span 14-15:  general => general
Span 10-11:  hard => hard
Span 18-19:  he => he
Span 16-17:  insisted => insist-01
Span 21-22:  it => it
Span 9-10:  it => it
Span 0-1:  men => man
Span 3-4:  promised => promise-01
Span 12-13:  resist => resist-01
Span 7-8:  war => war
Span 20-21:  win => win-01
Span 5-6:  win => win-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),it,it,false), Span(20,21,List(1),win,win-01,false), Span(19,20,List(2),could,possible,false), Span(18,19,List(3),he,he,false), Span(16,17,List(4),insisted,insist-01,false), Span(14,15,List(5),general,general,false), Span(12,13,List(6),resist,resist-01,false), Span(10,11,List(7),hard,hard,false), Span(9,10,List(8),it,it,false), Span(8,9,List(9),found,find-01,false), Span(7,8,List(10),war,war,false), Span(5,6,List(11),win,win-01,false), Span(3,4,List(12),promised,promise-01,false), Span(0,1,List(13),men,man,false)),Map(2 -> possible, 5 -> general, 12 -> promise-01, 8 -> it, 7 -> hard, 1 -> win-01, 4 -> insist-01, 11 -> win-01, 6 -> resist-01, 0 -> it, 9 -> find-01, 3 -> he, 10 -> war, 13 -> man),Map(w -> win-01, h -> he, h2 -> hard, p2 -> promise-01, w3 -> win-01, m -> man, i3 -> it, p -> possible, g -> general, i2 -> insist-01, w2 -> war, i -> it, r -> resist-01, f -> find-01))),[Ljava.lang.String;@10909419,Annotation([Ljava.lang.String;@3eafdce,[Ljava.lang.String;@38bce164,[Ljava.lang.String;@78718955),Annotation([Ljava.lang.String;@65ef6939,[Ljava.lang.String;@48e55177,[Ledu.cmu.lti.nlp.amr.Dependency;@47478104),Annotation([Ljava.lang.String;@2767522b,[Ljava.lang.String;@70439942,[Ljava.lang.String;@6602f5a2),Annotation([Ljava.lang.String;@4c4c9300,[Ljava.lang.String;@37470c22,[Ledu.cmu.lti.nlp.amr.Entity;@196da888))
AMR:
(f / find-01, ARG1, h2 / hard)
(h2 / hard, domain, i3 / it)
(h2 / hard, domain, r / resist-01)
(i2 / insist-01, ARG0, g / general)
(i2 / insist-01, ARG1, w / win-01)
(p / possible, domain, w / win-01)
(p2 / promise-01, ARG0, m / man)
(p2 / promise-01, ARG1, f / find-01)
(p2 / promise-01, ARG2, w3 / win-01)
(r / resist-01, ARG1, g / general)
(w / win-01, ARG0, h / he)
(w / win-01, ARG1, i / it)
(w3 / win-01, ARG1, w2 / war)

Decoded in 279,022 microseconds
Sentence: the minister for information and inspiration sniffing cynicism shuffled at the podium and promised aerial jam tomorrow

Spans:
Span 14-15:  aerial => aerial
Span 12-13:  and => and
Span 4-5:  and => and
Span 7-8:  cynicism => cynicism
Span 3-4:  information => information
Span 5-6:  inspiration => inspire-01
Span 15-16:  jam => jam-01
Span 1-2:  minister => (have-org-role-91 :ARG2 minister)
Span 13-14:  promised => promise-01
Span 6-7:  sniffing => sniff-02
Span 16-17:  tomorrow => tomorrow

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),tomorrow,tomorrow,false), Span(15,16,List(1),jam,jam-01,false), Span(14,15,List(2),aerial,aerial,false), Span(13,14,List(3),promised,promise-01,false), Span(12,13,List(4),and,and,false), Span(7,8,List(5),cynicism,cynicism,false), Span(6,7,List(6),sniffing,sniff-02,false), Span(5,6,List(7),inspiration,inspire-01,false), Span(4,5,List(8),and,and,false), Span(3,4,List(9),information,information,false), Span(1,2,List(11, 10),minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> aerial, 5 -> cynicism, 8 -> and, 7 -> inspire-01, 1 -> jam-01, 11 -> minister, 4 -> and, 6 -> sniff-02, 9 -> information, 0 -> tomorrow, 10 -> have-org-role-91, 3 -> promise-01),Map(h -> have-org-role-91, t -> tomorrow, a3 -> and, s -> sniff-02, j -> jam-01, m -> minister, p -> promise-01, a -> aerial, i2 -> information, i -> inspire-01, a2 -> and, c -> cynicism))),[Ljava.lang.String;@479df6cb,Annotation([Ljava.lang.String;@53b5ae28,[Ljava.lang.String;@3cbcef07,[Ljava.lang.String;@17f0d3b8),Annotation([Ljava.lang.String;@43dbe14f,[Ljava.lang.String;@18a52c57,[Ledu.cmu.lti.nlp.amr.Dependency;@4021065),Annotation([Ljava.lang.String;@238258f1,[Ljava.lang.String;@429d486d,[Ljava.lang.String;@63fe0e45),Annotation([Ljava.lang.String;@3c5b074c,[Ljava.lang.String;@7c3c2d88,[Ledu.cmu.lti.nlp.amr.Entity;@52d17b70))
AMR:
(a2 / and, op, p / promise-01)
(a3 / and, op, c / cynicism)
(a3 / and, op, i / inspire-01)
(a3 / and, op, i2 / information)
(h / have-org-role-91, ARG1, i2 / information)
(h / have-org-role-91, ARG2, m / minister)
(j / jam-01, mod, a / aerial)
(p / promise-01, ARG0, h / have-org-role-91)
(p / promise-01, ARG1, j / jam-01)
(p / promise-01, time, t / tomorrow)
(s / sniff-02, ARG1, i / inspire-01)

Decoded in 164,430 microseconds
Sentence: are there any others of that sort here  because if there are i promise ill dash

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = are there any others of that sort here  because if there are i promise ill dash
myTokenized = are there any others of that sort here because if there are i promise ill dash
i = 8
prefix = List(are, there, any, others, of, that, sort, here, because)
regexr = \Qa\E ?\Qr\E ?\Qe\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qa\E ?\Qn\E ?\Qy\E ?\Qo\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qs\E ?\Qo\E ?\Qf\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qs\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qe\E ?\Qr\E ?\Qe\E ?\Qb\E ?\Qe\E ?\Qc\E ?\Qa\E ?\Qu\E ?\Qs\E ?\Qe\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: the us has promised the largest amount 195000 tonnes

mkDayMonthYear(195000,00,50,19)
mkDayMonthYear(195000,00,50,19)
Spans:
Span 7-8:  195000 => (date-entity :day 0 :month 50 :year 19)
Span 6-7:  amount => amount
Span 5-6:  largest => (large :degree most)
Span 3-4:  promised => promise-01
Span 8-9:  tonnes => (volume-quantity :unit tonne)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(1, 0),tonnes,(volume-quantity :unit tonne),false), Span(7,8,List(5, 4, 3, 2),195000,(date-entity :day 0 :month 50 :year 19),false), Span(6,7,List(6),amount,amount,false), Span(5,6,List(8, 7),largest,(large :degree most),false), Span(3,4,List(9),promised,promise-01,false)),Map(2 -> date-entity, 5 -> 19, 8 -> most, 7 -> large, 1 -> tonne, 4 -> 50, 6 -> amount, 9 -> promise-01, 0 -> volume-quantity, 3 -> 0),Map(5 -> 50, t -> tonne, m -> most, d -> date-entity, v -> volume-quantity, p -> promise-01, 1 -> 19, a -> amount, l -> large, 0 -> 0))),[Ljava.lang.String;@27b1603b,Annotation([Ljava.lang.String;@6e24d5d8,[Ljava.lang.String;@34539066,[Ljava.lang.String;@5a2d3360),Annotation([Ljava.lang.String;@4d8811e0,[Ljava.lang.String;@204db0e4,[Ledu.cmu.lti.nlp.amr.Dependency;@4c98594d),Annotation([Ljava.lang.String;@260ef584,[Ljava.lang.String;@2018c0a1,[Ljava.lang.String;@390e9a7d),Annotation([Ljava.lang.String;@6dc0a1ce,[Ljava.lang.String;@1bf13ad,[Ledu.cmu.lti.nlp.amr.Entity;@27a4c3c0))
AMR:
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 5 / 50)
(d / date-entity, year, 1 / 19)
(l / large, degree, m / most)
(p / promise-01, ARG0, l / large)
(p / promise-01, ARG1, a / amount)
(p / promise-01, ARG2, v / volume-quantity)
(v / volume-quantity, time, d / date-entity)
(v / volume-quantity, unit, t / tonne)

Decoded in 71,742 microseconds
Sentence: wouldnt that be worth a hug  well mrs davis i cant promise you a rise and i certainly wouldnt be bold enough to ask you for a hug but what i can offer you is the chance to choose between a substantial payrise ellip

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = wouldnt that be worth a hug  well mrs davis i cant promise you a rise and i certainly wouldnt be bold enough to ask you for a hug but what i can offer you is the chance to choose between a substantial payrise ellip
myTokenized = wouldnt that be worth a hug well mrs davis i cant promise you a rise and i certainly wouldnt be bold enough to ask you for a hug but what i can offer you is the chance to choose between a substantial payrise ellip
i = 6
prefix = List(wouldnt, that, be, worth, a, hug, well)
regexr = \Qw\E ?\Qo\E ?\Qu\E ?\Ql\E ?\Qd\E ?\Qn\E ?\Qt\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qb\E ?\Qe\E ?\Qw\E ?\Qo\E ?\Qr\E ?\Qt\E ?\Qh\E ?\Qa\E ?\Qh\E ?\Qu\E ?\Qg\E ?\Qw\E ?\Qe\E ?\Ql\E ?\Ql\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: he reminded gerry armstrong the british umpire that he had promised before the match that cyclops decisions would be final

NER Entity: (thing :name (name :op "british"))
Spans:
Span 11-12:  before => before
Span 16-17:  decisions => decide-01
Span 19-20:  final => final
Span 8-9:  he => he
Span 0-1:  he => he
Span 13-14:  match => match-01
Span 10-11:  promised => promise-01
Span 1-2:  reminded => remind-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),final,final,false), Span(16,17,List(1),decisions,decide-01,false), Span(13,14,List(2),match,match-01,false), Span(11,12,List(3),before,before,false), Span(10,11,List(4),promised,promise-01,false), Span(8,9,List(5),he,he,false), Span(1,2,List(6),reminded,remind-01,false), Span(0,1,List(7),he,he,false)),Map(2 -> match-01, 5 -> he, 7 -> he, 1 -> decide-01, 4 -> promise-01, 6 -> remind-01, 0 -> final, 3 -> before),Map(h -> he, h2 -> he, b -> before, m -> match-01, d -> decide-01, p -> promise-01, r -> remind-01, f -> final))),[Ljava.lang.String;@4e2cb9f0,Annotation([Ljava.lang.String;@5a6363a8,[Ljava.lang.String;@3323d8f4,[Ljava.lang.String;@76789566),Annotation([Ljava.lang.String;@6698984d,[Ljava.lang.String;@2c371bda,[Ledu.cmu.lti.nlp.amr.Dependency;@56059be3),Annotation([Ljava.lang.String;@a3d8034,[Ljava.lang.String;@4babdb2c,[Ljava.lang.String;@7fc24c83),Annotation([Ljava.lang.String;@2d2d6dfc,[Ljava.lang.String;@18fd290,[Ledu.cmu.lti.nlp.amr.Entity;@948ecbd))
AMR:
(b / before, op, m / match-01)
(f / final, domain, d / decide-01)
(m / match-01, ARG1, d / decide-01)
(p / promise-01, ARG0, h / he)
(p / promise-01, time, b / before)
(r / remind-01, ARG0, h2 / he)
(r / remind-01, ARG1, f / final)

Decoded in 37,859 microseconds
Sentence: though in june whitehall promised to devise urgently a programme to allow some the right to live in britain it has been fidgeting over figures and numbers according to allen lee a senior legislative councillor

NER Entity: (country :name (name :op "britain"))
NER Entity: (country :name (name :op "britain"))
Spans:
Span 11-12:  allow => allow-01
Span 25-26:  and => and
Span 18-19:  britain => (country :name (name :op "Britain"))
Span 34-35:  councillor => (have-org-role-91 :ARG2 councillor)
Span 6-7:  devise => devise-01
Span 24-25:  figures => figure
Span 19-20:  it => it
Span 2-3:  june => (date-entity :month 6)
Span 33-34:  legislative => legislate-01
Span 16-17:  live => live-01
Span 26-27:  numbers => number
Span 9-10:  programme => program
Span 4-5:  promised => promise-01
Span 32-33:  senior => senior
Span 12-13:  some => some
Span 7-8:  urgently => urgent

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(1, 0),councillor,(have-org-role-91 :ARG2 councillor),false), Span(33,34,List(2),legislative,legislate-01,false), Span(32,33,List(3),senior,senior,false), Span(26,27,List(4),numbers,number,false), Span(25,26,List(5),and,and,false), Span(24,25,List(6),figures,figure,false), Span(19,20,List(7),it,it,false), Span(18,19,List(10, 9, 8),britain,(country :name (name :op "Britain")),false), Span(16,17,List(11),live,live-01,false), Span(12,13,List(12),some,some,false), Span(11,12,List(13),allow,allow-01,false), Span(9,10,List(14),programme,program,false), Span(7,8,List(15),urgently,urgent,false), Span(6,7,List(16),devise,devise-01,false), Span(4,5,List(17),promised,promise-01,false), Span(2,3,List(19, 18),june,(date-entity :month 6),false)),Map(2 -> legislate-01, 5 -> and, 12 -> some, 15 -> urgent, 8 -> country, 18 -> date-entity, 7 -> it, 17 -> promise-01, 1 -> councillor, 4 -> number, 11 -> live-01, 14 -> program, 6 -> figure, 0 -> have-org-role-91, 9 -> name, 16 -> devise-01, 19 -> 6, 3 -> senior, 10 -> "Britain", 13 -> allow-01),Map(n -> number, h -> have-org-role-91, s2 -> some, p2 -> promise-01, s -> senior, d -> devise-01, p -> program, a -> and, d2 -> date-entity, l2 -> live-01, i -> it, a2 -> allow-01, 6 -> 6, c -> councillor, u -> urgent, l -> legislate-01, f -> figure, c2 -> country, n2 -> name))),[Ljava.lang.String;@12ae710e,Annotation([Ljava.lang.String;@7a8057b6,[Ljava.lang.String;@7ffeac8e,[Ljava.lang.String;@28f2e048),Annotation([Ljava.lang.String;@6162abf8,[Ljava.lang.String;@150858bb,[Ledu.cmu.lti.nlp.amr.Dependency;@56f967c6),Annotation([Ljava.lang.String;@100c24c6,[Ljava.lang.String;@d424b65,[Ljava.lang.String;@7b63daaf),Annotation([Ljava.lang.String;@58aa5672,[Ljava.lang.String;@171183d8,[Ledu.cmu.lti.nlp.amr.Entity;@7ee6e5bc))
AMR:
(a / and, op, f / figure)
(a / and, op, n / number)
(a2 / allow-01, ARG1, l2 / live-01)
(a2 / allow-01, ARG2, s2 / some)
(c / councillor, mod, s / senior)
(c2 / country, name, n2 / name)
(d / devise-01, ARG1, p / program)
(d / devise-01, manner, u / urgent)
(d / devise-01, purpose, a2 / allow-01)
(d2 / date-entity, month, 6 / 6)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, c / councillor)
(l / legislate-01, ARG0, h / have-org-role-91)
(l2 / live-01, ARG0, i / it)
(l2 / live-01, location, c2 / country)
(n2 / name, op, "Britain")
(p2 / promise-01, ARG0, a / and)
(p2 / promise-01, ARG1, d2 / date-entity)
(p2 / promise-01, ARG2, d / devise-01)

Decoded in 488,718 microseconds
Sentence: mr coleman promised he would not push for legislation which would severely restrict abortion in virginia

NER Entity: (country :name (name :op "virginia"))
Spans:
Span 13-14:  abortion => abort-01
Span 3-4:  he => he
Span 8-9:  legislation => legislation
Span 2-3:  promised => promise-01
Span 6-7:  push => push-02
Span 12-13:  restrict => restrict-01
Span 11-12:  severely => severe

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),abortion,abort-01,false), Span(12,13,List(1),restrict,restrict-01,false), Span(11,12,List(2),severely,severe,false), Span(8,9,List(3),legislation,legislation,false), Span(6,7,List(4),push,push-02,false), Span(3,4,List(5),he,he,false), Span(2,3,List(6),promised,promise-01,false)),Map(2 -> severe, 5 -> he, 1 -> restrict-01, 4 -> push-02, 6 -> promise-01, 0 -> abort-01, 3 -> legislation),Map(h -> he, p2 -> promise-01, s -> severe, p -> push-02, a -> abort-01, r -> restrict-01, l -> legislation))),[Ljava.lang.String;@68f4daba,Annotation([Ljava.lang.String;@23441f2b,[Ljava.lang.String;@4d5a5223,[Ljava.lang.String;@64c69f81),Annotation([Ljava.lang.String;@2c1201d7,[Ljava.lang.String;@5236e0db,[Ledu.cmu.lti.nlp.amr.Dependency;@10e47408),Annotation([Ljava.lang.String;@67dc1e2,[Ljava.lang.String;@2a43dfc2,[Ljava.lang.String;@4e174f3b),Annotation([Ljava.lang.String;@5c52d28a,[Ljava.lang.String;@417c9160,[Ledu.cmu.lti.nlp.amr.Entity;@592c5736))
AMR:
(p / push-02, ARG0, h / he)
(p / push-02, ARG2, l / legislation)
(p2 / promise-01, ARG1, p / push-02)
(r / restrict-01, ARG0, l / legislation)
(r / restrict-01, ARG1, a / abort-01)
(r / restrict-01, manner, s / severe)

Decoded in 48,870 microseconds
Sentence: miss mcginley can train you if you like as the pair of you seem to get on together ill train her well natasha promised right then

Spans:
Span 2-3:  can => possible
Span 18-19:  ill => ill-41
Span 23-24:  promised => promise-01
Span 13-14:  seem => seem-01
Span 25-26:  then => then
Span 17-18:  together => together
Span 19-20:  train => train
Span 3-4:  train => train
Span 21-22:  well => well
Span 12-13:  you => you
Span 6-7:  you => you
Span 4-5:  you => you

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),then,then,false), Span(23,24,List(1),promised,promise-01,false), Span(21,22,List(2),well,well,false), Span(19,20,List(3),train,train,false), Span(18,19,List(4),ill,ill-41,false), Span(17,18,List(5),together,together,false), Span(13,14,List(6),seem,seem-01,false), Span(12,13,List(7),you,you,false), Span(6,7,List(8),you,you,false), Span(4,5,List(9),you,you,false), Span(3,4,List(10),train,train,false), Span(2,3,List(11),can,possible,false)),Map(2 -> well, 5 -> together, 8 -> you, 7 -> you, 1 -> promise-01, 11 -> possible, 4 -> ill-41, 6 -> seem-01, 9 -> you, 0 -> then, 10 -> train, 3 -> train),Map(w -> well, t4 -> train, t -> then, p2 -> possible, s -> seem-01, y -> you, t3 -> together, p -> promise-01, y3 -> you, t2 -> train, i -> ill-41, y2 -> you))),[Ljava.lang.String;@6e11c7f6,Annotation([Ljava.lang.String;@515f1fee,[Ljava.lang.String;@3c296bfe,[Ljava.lang.String;@43710f8d),Annotation([Ljava.lang.String;@33b41492,[Ljava.lang.String;@73b297c2,[Ledu.cmu.lti.nlp.amr.Dependency;@52097ce5),Annotation([Ljava.lang.String;@6ce6c876,[Ljava.lang.String;@2372f2d5,[Ljava.lang.String;@4fa49021),Annotation([Ljava.lang.String;@3cf28f60,[Ljava.lang.String;@58a306e2,[Ledu.cmu.lti.nlp.amr.Entity;@37190ce4))
AMR:
(i / ill-41, ARG0, t2 / train)
(i / ill-41, mod, t3 / together)
(p / promise-01, ARG0, w / well)
(p / promise-01, ARG1, t2 / train)
(p / promise-01, time, t / then)
(p2 / possible, domain, t4 / train)
(s / seem-01, ARG0, y / you)
(s / seem-01, ARG1, t2 / train)
(s / seem-01, ARG2, y2 / you)
(t4 / train, degree, y3 / you)
(t4 / train, domain, y2 / you)

Decoded in 133,177 microseconds
Sentence:   if it is not majority rule if it is not the onemanonevote system that mr de klerk envisages in the new south africa he is always promising what is it

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized =   if it is not majority rule if it is not the onemanonevote system that mr de klerk envisages in the new south africa he is always promising what is it
myTokenized = if it is not majority rule if it is not the onemanonevote system that mr de klerk envisages in the new south africa he is always promising what is it
i = 0
prefix = List(if)
regexr = \Qi\E ?\Qf\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: last year the show welcomed its 100000th visitor and bill who has produced every one since 1967 promises that those who flock to see his cast of 300 in action next week can look forward to an entertainment that is every bit as good if not better

Spans:
Span 16-17:  1967 => (date-entity :year 1967)
Span 27-28:  300 => 300
Span 29-30:  action => action
Span 8-9:  and => and
Span 9-10:  bill => bill
Span 41-42:  bit => bit
Span 32-33:  can => possible
Span 25-26:  cast => cast-01
Span 37-38:  entertainment => entertain-01
Span 40-41:  every => every
Span 13-14:  every => every
Span 34-35:  forward => forward
Span 43-44:  good => good
Span 0-1:  last => last
Span 30-31:  next => next
Span 12-13:  produced => produce-01
Span 17-18:  promises => promise-01
Span 23-24:  see => see-01
Span 3-4:  show => show-01
Span 15-16:  since => since
Span 7-8:  visitor => (person :ARG0-of visit-01)
Span 31-32:  week => week
Span 4-5:  welcomed => welcome-01
Span 1-2:  year => year

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),good,good,false), Span(41,42,List(1),bit,bit,false), Span(40,41,List(2),every,every,false), Span(37,38,List(3),entertainment,entertain-01,false), Span(34,35,List(4),forward,forward,false), Span(32,33,List(5),can,possible,false), Span(31,32,List(6),week,week,false), Span(30,31,List(7),next,next,false), Span(29,30,List(8),action,action,false), Span(27,28,List(9),300,300,false), Span(25,26,List(10),cast,cast-01,false), Span(23,24,List(11),see,see-01,false), Span(17,18,List(12),promises,promise-01,false), Span(16,17,List(14, 13),1967,(date-entity :year 1967),false), Span(15,16,List(15),since,since,false), Span(13,14,List(16),every,every,false), Span(12,13,List(17),produced,produce-01,false), Span(9,10,List(18),bill,bill,false), Span(8,9,List(19),and,and,false), Span(7,8,List(21, 20),visitor,(person :ARG0-of visit-01),false), Span(4,5,List(22),welcomed,welcome-01,false), Span(3,4,List(23),show,show-01,false), Span(1,2,List(24),year,year,false), Span(0,1,List(25),last,last,false)),Map(2 -> every, 5 -> possible, 12 -> promise-01, 8 -> action, 15 -> since, 21 -> visit-01, 18 -> bill, 24 -> year, 7 -> next, 1 -> bit, 17 -> produce-01, 23 -> show-01, 4 -> forward, 11 -> see-01, 14 -> 1967, 20 -> person, 6 -> week, 9 -> 300, 0 -> good, 22 -> welcome-01, 16 -> every, 19 -> and, 10 -> cast-01, 3 -> entertain-01, 25 -> last, 13 -> date-entity),Map(e -> every, n -> next, w -> week, s2 -> since, b -> bit, b2 -> bill, p2 -> promise-01, e2 -> entertain-01, s -> see-01, v -> visit-01, d -> date-entity, 1 -> 1967, y -> year, p -> possible, g -> good, a -> action, p4 -> person, w2 -> welcome-01, a2 -> and, c -> cast-01, s3 -> show-01, l -> last, f -> forward, e3 -> every, p3 -> produce-01, 3 -> 300))),[Ljava.lang.String;@153015e8,Annotation([Ljava.lang.String;@7ee3d36,[Ljava.lang.String;@29f4a84b,[Ljava.lang.String;@7d54e971),Annotation([Ljava.lang.String;@51aa39ff,[Ljava.lang.String;@7ec5be3b,[Ledu.cmu.lti.nlp.amr.Dependency;@684c5482),Annotation([Ljava.lang.String;@6b40584c,[Ljava.lang.String;@4d651c96,[Ljava.lang.String;@2937e38c),Annotation([Ljava.lang.String;@143c1178,[Ljava.lang.String;@739ee7a8,[Ledu.cmu.lti.nlp.amr.Entity;@457b01e5))
AMR:
(a2 / and, op, p4 / person)
(b / bit, degree, e / every)
(c / cast-01, ARG1, a / action)
(d / date-entity, op, e2 / entertain-01)
(d / date-entity, year, 1 / 1967)
(e2 / entertain-01, ARG0, g / good)
(e2 / entertain-01, ARG1, b / bit)
(p2 / promise-01, ARG0, a2 / and)
(p2 / promise-01, ARG1, p / possible)
(p3 / produce-01, ARG0, f / forward)
(p3 / produce-01, ARG1, a2 / and)
(p3 / produce-01, mod, b2 / bill)
(p3 / produce-01, time, s2 / since)
(s / see-01, ARG0, y / year)
(s / see-01, ARG1, c / cast-01)
(s / see-01, medium, 3 / 300)
(s / see-01, time, w / week)
(s2 / since, op, d / date-entity)
(s3 / show-01, ARG1, e3 / every)
(v / visit-01, ARG0, p4 / person)
(v / visit-01, ARG1, s3 / show-01)
(w / week, mod, n / next)
(w2 / welcome-01, ARG0, y / year)
(w2 / welcome-01, ARG1, p4 / person)
(y / year, mod, l / last)

Decoded in 787,339 microseconds
Sentence: gerrard had promised that a great deal of money was on its way but gerrard had also said that linda was happy to think he was dead

Spans:
Span 16-17:  also => also
Span 13-14:  but => contrast-01
Span 6-7:  deal => deal-01
Span 5-6:  great => great
Span 21-22:  happy => happy
Span 24-25:  he => he
Span 8-9:  money => money
Span 2-3:  promised => promise-01
Span 17-18:  said => say-01
Span 23-24:  think => think-01
Span 12-13:  way => way

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),he,he,false), Span(23,24,List(1),think,think-01,false), Span(21,22,List(2),happy,happy,false), Span(17,18,List(3),said,say-01,false), Span(16,17,List(4),also,also,false), Span(13,14,List(5),but,contrast-01,false), Span(12,13,List(6),way,way,false), Span(8,9,List(7),money,money,false), Span(6,7,List(8),deal,deal-01,false), Span(5,6,List(9),great,great,false), Span(2,3,List(10),promised,promise-01,false)),Map(2 -> happy, 5 -> contrast-01, 8 -> deal-01, 7 -> money, 1 -> think-01, 4 -> also, 6 -> way, 9 -> great, 0 -> he, 10 -> promise-01, 3 -> say-01),Map(w -> way, h -> he, h2 -> happy, t -> think-01, s -> say-01, d -> deal-01, m -> money, p -> promise-01, g -> great, a -> also, c -> contrast-01))),[Ljava.lang.String;@eb98506,Annotation([Ljava.lang.String;@35cc5477,[Ljava.lang.String;@79bd6c38,[Ljava.lang.String;@30c0ef9),Annotation([Ljava.lang.String;@caafeff,[Ljava.lang.String;@2e4b1dd8,[Ledu.cmu.lti.nlp.amr.Dependency;@459467a6),Annotation([Ljava.lang.String;@1220e6fa,[Ljava.lang.String;@2e1c3062,[Ljava.lang.String;@3cac8994),Annotation([Ljava.lang.String;@637c72aa,[Ljava.lang.String;@7f4c29ec,[Ledu.cmu.lti.nlp.amr.Entity;@6154863e))
AMR:
(c / contrast-01, ARG1, p / promise-01)
(c / contrast-01, ARG2, s / say-01)
(d / deal-01, ARG1, m / money)
(d / deal-01, mod, g / great)
(h2 / happy, domain, t / think-01)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, h2 / happy)
(s / say-01, mod, a / also)
(t / think-01, ARG1, w / way)
(w / way, poss, m / money)

Decoded in 170,610 microseconds
Sentence: mr rocard said the national fronts gains were obviously related to immigration problems and promised that the government would crack down hard on illegal immigration

Spans:
Span 13-14:  and => and
Span 19-20:  crack => crack-02
Span 20-21:  down => down
Span 21-22:  hard => hard
Span 23-24:  illegal => (law :polarity -)
Span 24-25:  immigration => immigrate-01
Span 11-12:  immigration => immigrate-01
Span 4-5:  national => nation
Span 8-9:  obviously => obvious-41
Span 12-13:  problems => problem
Span 14-15:  promised => promise-01
Span 9-10:  related => relate-01
Span 2-3:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),immigration,immigrate-01,false), Span(23,24,List(2, 1),illegal,(law :polarity -),false), Span(21,22,List(3),hard,hard,false), Span(20,21,List(4),down,down,false), Span(19,20,List(5),crack,crack-02,false), Span(14,15,List(6),promised,promise-01,false), Span(13,14,List(7),and,and,false), Span(12,13,List(8),problems,problem,false), Span(11,12,List(9),immigration,immigrate-01,false), Span(9,10,List(10),related,relate-01,false), Span(8,9,List(11),obviously,obvious-41,false), Span(4,5,List(12),national,nation,false), Span(2,3,List(13),said,say-01,false)),Map(2 -> -, 5 -> crack-02, 12 -> nation, 8 -> problem, 7 -> and, 1 -> law, 4 -> down, 11 -> obvious-41, 6 -> promise-01, 0 -> immigrate-01, 9 -> immigrate-01, 3 -> hard, 10 -> relate-01, 13 -> say-01),Map(n -> nation, h -> hard, p2 -> problem, s -> say-01, d -> down, p -> promise-01, a -> and, i2 -> immigrate-01, i -> immigrate-01, r -> relate-01, c -> crack-02, l -> law, o -> obvious-41))),[Ljava.lang.String;@4ab48183,Annotation([Ljava.lang.String;@10a2e5c6,[Ljava.lang.String;@369b32b2,[Ljava.lang.String;@71d6020),Annotation([Ljava.lang.String;@1991d886,[Ljava.lang.String;@361e5287,[Ledu.cmu.lti.nlp.amr.Dependency;@bc38d3),Annotation([Ljava.lang.String;@4536a505,[Ljava.lang.String;@68c0ec3,[Ljava.lang.String;@551d2790),Annotation([Ljava.lang.String;@6d108a97,[Ljava.lang.String;@58faf771,[Ledu.cmu.lti.nlp.amr.Entity;@448b495a))
AMR:
(a / and, op, p / promise-01)
(a / and, op, r / relate-01)
(c / crack-02, ARG1, n / nation)
(c / crack-02, manner, i / immigrate-01)
(c / crack-02, mod, h / hard)
(h / hard, mod, d / down)
(i / immigrate-01, mod, l / law)
(l / law, polarity, -)
(o / obvious-41, ARG1, r / relate-01)
(p / promise-01, ARG1, c / crack-02)
(p2 / problem, mod, i2 / immigrate-01)
(r / relate-01, ARG2, p2 / problem)
(s / say-01, ARG1, a / and)

Decoded in 94,220 microseconds
Sentence: you wouldnt see a thing if you went there not a blade of grass is out of place i promise a scotland yard source said earlier this month

Spans:
Span 11-12:  blade => blade
Span 25-26:  earlier => early
Span 13-14:  grass => grass-roots
Span 18-19:  i => i
Span 27-28:  month => (temporal-quantity :unit month)
Span 17-18:  place => place
Span 19-20:  promise => promise-01
Span 24-25:  said => say-01
Span 21-22:  scotland => (country :name (name :op "Scotland"))
Span 2-3:  see => see-01
Span 23-24:  source => source
Span 4-5:  thing => thing
Span 26-27:  this => this
Span 22-23:  yard => yard
Span 6-7:  you => you
Span 0-1:  you => you

Langrangian relaxation converged after 92 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(1, 0),month,(temporal-quantity :unit month),false), Span(26,27,List(2),this,this,false), Span(25,26,List(3),earlier,early,false), Span(24,25,List(4),said,say-01,false), Span(23,24,List(5),source,source,false), Span(22,23,List(6),yard,yard,false), Span(21,22,List(9, 8, 7),scotland,(country :name (name :op "Scotland")),false), Span(19,20,List(10),promise,promise-01,false), Span(18,19,List(11),i,i,false), Span(17,18,List(12),place,place,false), Span(13,14,List(13),grass,grass-roots,false), Span(11,12,List(14),blade,blade,false), Span(6,7,List(15),you,you,false), Span(4,5,List(16),thing,thing,false), Span(2,3,List(17),see,see-01,false), Span(0,1,List(18),you,you,false)),Map(2 -> this, 5 -> source, 12 -> place, 15 -> you, 8 -> name, 18 -> you, 7 -> country, 17 -> see-01, 1 -> month, 4 -> say-01, 11 -> i, 14 -> blade, 6 -> yard, 0 -> temporal-quantity, 9 -> "Scotland", 16 -> thing, 3 -> early, 10 -> promise-01, 13 -> grass-roots),Map(e -> early, n -> name, s2 -> source, b -> blade, t -> temporal-quantity, p2 -> place, s -> say-01, m -> month, t3 -> thing, y -> yard, p -> promise-01, g -> grass-roots, y3 -> you, t2 -> this, i -> i, s3 -> see-01, c -> country, y2 -> you))),[Ljava.lang.String;@127a7800,Annotation([Ljava.lang.String;@265c517a,[Ljava.lang.String;@76e93442,[Ljava.lang.String;@4866160b),Annotation([Ljava.lang.String;@2631514f,[Ljava.lang.String;@6fd12d1f,[Ledu.cmu.lti.nlp.amr.Dependency;@de98793),Annotation([Ljava.lang.String;@5ec3cb07,[Ljava.lang.String;@846692c,[Ljava.lang.String;@46a2cbf2),Annotation([Ljava.lang.String;@69fba118,[Ljava.lang.String;@70d6504,[Ledu.cmu.lti.nlp.amr.Entity;@62ed3a))
AMR:
(b / blade, mod, g / grass-roots)
(c / country, name, n / name)
(i / i, domain, b / blade)
(m / month, mod, t2 / this)
(m / month, time, e / early)
(n / name, op, "Scotland")
(p / promise-01, ARG0, i / i)
(p / promise-01, ARG1, s2 / source)
(s / say-01, ARG0, s2 / source)
(s / say-01, ARG1, s3 / see-01)
(s / say-01, time, e / early)
(s2 / source, mod, c / country)
(s2 / source, mod, y / yard)
(s3 / see-01, ARG0, y3 / you)
(s3 / see-01, ARG1, t3 / thing)
(s3 / see-01, location, p2 / place)
(s3 / see-01, source, y2 / you)
(t / temporal-quantity, unit, m / month)

Decoded in 1,610,323 microseconds
Sentence: mine is the only working class candidacy and the only one promising to take wealth from the rich to redistribute among the poor he said

Spans:
Span 20-21:  among => among
Span 7-8:  and => and
Span 6-7:  candidacy => candidacy
Span 5-6:  class => class
Span 23-24:  he => he
Span 0-1:  mine => mine
Span 9-10:  only => only
Span 3-4:  only => only
Span 22-23:  poor => poor
Span 11-12:  promising => promise-01
Span 17-18:  rich => rich
Span 24-25:  said => say-01
Span 14-15:  wealth => wealth
Span 4-5:  working => work-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),said,say-01,false), Span(23,24,List(1),he,he,false), Span(22,23,List(2),poor,poor,false), Span(20,21,List(3),among,among,false), Span(17,18,List(4),rich,rich,false), Span(14,15,List(5),wealth,wealth,false), Span(11,12,List(6),promising,promise-01,false), Span(9,10,List(7),only,only,false), Span(7,8,List(8),and,and,false), Span(6,7,List(9),candidacy,candidacy,false), Span(5,6,List(10),class,class,false), Span(4,5,List(11),working,work-01,false), Span(3,4,List(12),only,only,false), Span(0,1,List(13),mine,mine,false)),Map(2 -> poor, 5 -> wealth, 12 -> only, 8 -> and, 7 -> only, 1 -> he, 4 -> rich, 11 -> work-01, 6 -> promise-01, 0 -> say-01, 9 -> candidacy, 3 -> among, 10 -> class, 13 -> mine),Map(w -> wealth, h -> he, p2 -> promise-01, s -> say-01, m -> mine, p -> poor, a -> among, o2 -> only, w2 -> work-01, r -> rich, a2 -> and, c -> candidacy, o -> only, c2 -> class))),[Ljava.lang.String;@5ec47b08,Annotation([Ljava.lang.String;@35697ad3,[Ljava.lang.String;@1ffece0a,[Ljava.lang.String;@118902ef),Annotation([Ljava.lang.String;@3a1fa1e7,[Ljava.lang.String;@72be6280,[Ledu.cmu.lti.nlp.amr.Dependency;@3134fc5a),Annotation([Ljava.lang.String;@da391f3,[Ljava.lang.String;@6dc2ef83,[Ljava.lang.String;@18fab9c1),Annotation([Ljava.lang.String;@74b93ab6,[Ljava.lang.String;@2cbdbe98,[Ledu.cmu.lti.nlp.amr.Entity;@5d2c041a))
AMR:
(a / among, op, p / poor)
(a2 / and, op, w2 / work-01)
(c / candidacy, mod, c2 / class)
(p / poor, domain, s / say-01)
(p2 / promise-01, ARG1, w / wealth)
(p2 / promise-01, ARG2, a2 / and)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a2 / and)
(s / say-01, manner, o / only)
(w2 / work-01, ARG0, c / candidacy)
(w2 / work-01, ARG1, r / rich)
(w2 / work-01, ARG2, m / mine)
(w2 / work-01, mod, o2 / only)

Decoded in 150,725 microseconds
Sentence: nicholas georgiadiss designs are a closely guarded secret but are certain to be completely over the top and breathtaking special effects are promised

Spans:
Span 17-18:  and => and
Span 8-9:  but => contrast-01
Span 10-11:  certain => certain
Span 5-6:  closely => close
Span 13-14:  completely => complete
Span 2-3:  designs => design-01
Span 20-21:  effects => effect-01
Span 6-7:  guarded => guard-01
Span 22-23:  promised => promise-01
Span 7-8:  secret => secret
Span 19-20:  special => special
Span 16-17:  top => top

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),promised,promise-01,false), Span(20,21,List(1),effects,effect-01,false), Span(19,20,List(2),special,special,false), Span(17,18,List(3),and,and,false), Span(16,17,List(4),top,top,false), Span(13,14,List(5),completely,complete,false), Span(10,11,List(6),certain,certain,false), Span(8,9,List(7),but,contrast-01,false), Span(7,8,List(8),secret,secret,false), Span(6,7,List(9),guarded,guard-01,false), Span(5,6,List(10),closely,close,false), Span(2,3,List(11),designs,design-01,false)),Map(2 -> special, 5 -> complete, 8 -> secret, 7 -> contrast-01, 1 -> effect-01, 11 -> design-01, 4 -> top, 6 -> certain, 9 -> guard-01, 0 -> promise-01, 10 -> close, 3 -> and),Map(e -> effect-01, s2 -> secret, t -> top, c4 -> close, s -> special, d -> design-01, g -> guard-01, p -> promise-01, c3 -> contrast-01, a -> and, c -> complete, c2 -> certain))),[Ljava.lang.String;@74c176bf,Annotation([Ljava.lang.String;@495b317b,[Ljava.lang.String;@20da7dd,[Ljava.lang.String;@4e879f38),Annotation([Ljava.lang.String;@29e63dcf,[Ljava.lang.String;@4ae3f686,[Ledu.cmu.lti.nlp.amr.Dependency;@3c4dfdd3),Annotation([Ljava.lang.String;@24534693,[Ljava.lang.String;@573e6f86,[Ljava.lang.String;@440bf329),Annotation([Ljava.lang.String;@6c892ba5,[Ljava.lang.String;@2190954e,[Ledu.cmu.lti.nlp.amr.Entity;@1b3a4519))
AMR:
(a / and, op, d / design-01)
(a / and, op, e / effect-01)
(a / and, op, t / top)
(c3 / contrast-01, ARG1, c2 / certain)
(c3 / contrast-01, ARG2, d / design-01)
(e / effect-01, ARG1, c / complete)
(e / effect-01, mod, s / special)
(g / guard-01, ARG1, c3 / contrast-01)
(g / guard-01, manner, c4 / close)
(p / promise-01, ARG1, a / and)
(s2 / secret, domain, d / design-01)

Decoded in 152,485 microseconds
Sentence: such journeys were called pussy cat tours and cryptic advertisements in the papers promised unusual glimpses of hamburg and amsterdam

Spans:
Span 9-10:  advertisements => advertisement
Span 18-19:  and => and
Span 7-8:  and => and
Span 5-6:  cat => cat
Span 12-13:  papers => paper
Span 13-14:  promised => promise-01
Span 0-1:  such => such
Span 6-7:  tours => tour-01
Span 14-15:  unusual => (usual :polarity -)

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),and,and,false), Span(14,15,List(2, 1),unusual,(usual :polarity -),false), Span(13,14,List(3),promised,promise-01,false), Span(12,13,List(4),papers,paper,false), Span(9,10,List(5),advertisements,advertisement,false), Span(7,8,List(6),and,and,false), Span(6,7,List(7),tours,tour-01,false), Span(5,6,List(8),cat,cat,false), Span(0,1,List(9),such,such,false)),Map(2 -> -, 5 -> advertisement, 8 -> cat, 7 -> tour-01, 1 -> usual, 4 -> paper, 6 -> and, 9 -> such, 0 -> and, 3 -> promise-01),Map(t -> tour-01, p2 -> paper, s -> such, a3 -> and, p -> promise-01, a -> and, a2 -> advertisement, c -> cat, u -> usual))),[Ljava.lang.String;@e8e7a46,Annotation([Ljava.lang.String;@2bfd9121,[Ljava.lang.String;@14432417,[Ljava.lang.String;@43f66c65),Annotation([Ljava.lang.String;@67467dbe,[Ljava.lang.String;@44e979ea,[Ledu.cmu.lti.nlp.amr.Dependency;@3c4314fe),Annotation([Ljava.lang.String;@58174e9a,[Ljava.lang.String;@62298da4,[Ljava.lang.String;@16123c55),Annotation([Ljava.lang.String;@736fbc5,[Ljava.lang.String;@2acb4636,[Ledu.cmu.lti.nlp.amr.Entity;@76e992d))
AMR:
(a / and, op, p / promise-01)
(a3 / and, op, a2 / advertisement)
(a3 / and, op, p2 / paper)
(p / promise-01, ARG1, p2 / paper)
(t / tour-01, ARG0, s / such)
(t / tour-01, ARG1, p / promise-01)
(t / tour-01, mod, c / cat)
(t / tour-01, mod, u / usual)
(u / usual, polarity, -)

Decoded in 49,353 microseconds
Sentence: the proponents of the meech lake accord have given us a fresh unfact that pierre trudeau during the quebec referendum campaign of 1980 promised a renewed federalism and then did not deliver

NER Entity: (country :name (name :op "quebec"))
Spans:
Span 22-23:  1980 => (date-entity :year 1980)
Span 6-7:  accord => accord
Span 27-28:  and => and
Span 20-21:  campaign => campaign-01
Span 31-32:  deliver => deliver-01
Span 11-12:  fresh => fresh
Span 8-9:  given => give-01
Span 5-6:  lake => lake
Span 23-24:  promised => promise-01
Span 19-20:  referendum => referendum
Span 25-26:  renewed => renew-01
Span 28-29:  then => then

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),deliver,deliver-01,false), Span(28,29,List(1),then,then,false), Span(27,28,List(2),and,and,false), Span(25,26,List(3),renewed,renew-01,false), Span(23,24,List(4),promised,promise-01,false), Span(22,23,List(6, 5),1980,(date-entity :year 1980),false), Span(20,21,List(7),campaign,campaign-01,false), Span(19,20,List(8),referendum,referendum,false), Span(11,12,List(9),fresh,fresh,false), Span(8,9,List(10),given,give-01,false), Span(6,7,List(11),accord,accord,false), Span(5,6,List(12),lake,lake,false)),Map(2 -> and, 5 -> date-entity, 12 -> lake, 8 -> referendum, 7 -> campaign-01, 1 -> then, 4 -> promise-01, 11 -> accord, 6 -> 1980, 0 -> deliver-01, 9 -> fresh, 3 -> renew-01, 10 -> give-01),Map(t -> then, d -> deliver-01, 1 -> 1980, p -> promise-01, r2 -> referendum, g -> give-01, a -> and, d2 -> date-entity, r -> renew-01, a2 -> accord, c -> campaign-01, l -> lake, f -> fresh))),[Ljava.lang.String;@6e0a5d2a,Annotation([Ljava.lang.String;@6a6aa8d6,[Ljava.lang.String;@72b02f,[Ljava.lang.String;@698cdde3),Annotation([Ljava.lang.String;@1f3b9838,[Ljava.lang.String;@186948d,[Ledu.cmu.lti.nlp.amr.Dependency;@2a82b5c3),Annotation([Ljava.lang.String;@6b6b2b02,[Ljava.lang.String;@48d4c766,[Ljava.lang.String;@96f1ee5),Annotation([Ljava.lang.String;@5e555139,[Ljava.lang.String;@3347a591,[Ledu.cmu.lti.nlp.amr.Entity;@24c6ece4))
AMR:
(a / and, op, d / deliver-01)
(a / and, op, g / give-01)
(a / and, op, p / promise-01)
(a / and, op, r / renew-01)
(a2 / accord, location, l / lake)
(c / campaign-01, ARG1, r2 / referendum)
(d2 / date-entity, year, 1 / 1980)
(g / give-01, ARG1, a2 / accord)
(g / give-01, time, d2 / date-entity)
(p / promise-01, ARG0, c / campaign-01)
(p / promise-01, time, t / then)
(r / renew-01, ARG1, f / fresh)

Decoded in 90,919 microseconds
Sentence: what might such a vision look like  in a field known for its unfulfilled promises one should avoid unrealistic expectations

Error matching the prefix (this will occur if there are two or more consecutive spaces in the input.
tokenized = what might such a vision look like  in a field known for its unfulfilled promises one should avoid unrealistic expectations
myTokenized = what might such a vision look like in a field known for its unfulfilled promises one should avoid unrealistic expectations
i = 7
prefix = List(what, might, such, a, vision, look, like, in)
regexr = \Qw\E ?\Qh\E ?\Qa\E ?\Qt\E ?\Qm\E ?\Qi\E ?\Qg\E ?\Qh\E ?\Qt\E ?\Qs\E ?\Qu\E ?\Qc\E ?\Qh\E ?\Qa\E ?\Qv\E ?\Qi\E ?\Qs\E ?\Qi\E ?\Qo\E ?\Qn\E ?\Ql\E ?\Qo\E ?\Qo\E ?\Qk\E ?\Ql\E ?\Qi\E ?\Qk\E ?\Qe\E ?\Qi\E ?\Qn\E
 ********** THERE WAS AN EXCEPTION IN THE PARSER. *********
java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:165)
	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Continuing. To exit on errors, please run without --ignore-parser-errors
Sentence: more probably the mass desertion is another sign of how the people have lost faith in perestroika and its unfulfilled promises

Spans:
Span 17-18:  and => and
Span 6-7:  another => another
Span 14-15:  faith => faith
Span 13-14:  lost => lose-02
Span 3-4:  mass => mass
Span 1-2:  probably => probable
Span 20-21:  promises => promise-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),promises,promise-01,false), Span(17,18,List(1),and,and,false), Span(14,15,List(2),faith,faith,false), Span(13,14,List(3),lost,lose-02,false), Span(6,7,List(4),another,another,false), Span(3,4,List(5),mass,mass,false), Span(1,2,List(6),probably,probable,false)),Map(2 -> faith, 5 -> mass, 1 -> and, 4 -> another, 6 -> probable, 0 -> promise-01, 3 -> lose-02),Map(p2 -> probable, m -> mass, p -> promise-01, a -> and, a2 -> another, l -> lose-02, f -> faith))),[Ljava.lang.String;@11cfb589,Annotation([Ljava.lang.String;@5b973e81,[Ljava.lang.String;@2688b621,[Ljava.lang.String;@596d444a),Annotation([Ljava.lang.String;@149e8424,[Ljava.lang.String;@32f5620f,[Ledu.cmu.lti.nlp.amr.Dependency;@bf8e0ec),Annotation([Ljava.lang.String;@76ac18,[Ljava.lang.String;@6f1c5be4,[Ljava.lang.String;@2ed50eb9),Annotation([Ljava.lang.String;@25b9abb4,[Ljava.lang.String;@40b7c9c5,[Ledu.cmu.lti.nlp.amr.Entity;@621fc5b4))
AMR:
(a / and, op, l / lose-02)
(a / and, op, p / promise-01)
(l / lose-02, ARG0, p2 / probable)
(l / lose-02, ARG1, f / faith)
(m / mass, op, p / promise-01)
(p / promise-01, ARG1, a2 / another)

Decoded in 91,775 microseconds
Sentence: mr wonderfuls still promised them some enchanted evenings with a stranger in paradise who might well turn out to be oh

Spans:
Span 12-13:  paradise => paradise
Span 3-4:  promised => promise-01
Span 5-6:  some => some
Span 2-3:  still => still
Span 10-11:  stranger => stranger
Span 15-16:  well => well

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),well,well,false), Span(12,13,List(1),paradise,paradise,false), Span(10,11,List(2),stranger,stranger,false), Span(5,6,List(3),some,some,false), Span(3,4,List(4),promised,promise-01,false), Span(2,3,List(5),still,still,false)),Map(2 -> stranger, 5 -> still, 1 -> paradise, 4 -> promise-01, 0 -> well, 3 -> some),Map(w -> well, s2 -> some, p2 -> promise-01, s -> stranger, p -> paradise, s3 -> still))),[Ljava.lang.String;@13ecdec0,Annotation([Ljava.lang.String;@24141978,[Ljava.lang.String;@239427c9,[Ljava.lang.String;@53c00f5e),Annotation([Ljava.lang.String;@66310f46,[Ljava.lang.String;@1ee1f114,[Ledu.cmu.lti.nlp.amr.Dependency;@39a67e3),Annotation([Ljava.lang.String;@e1a69ee,[Ljava.lang.String;@68208f7d,[Ljava.lang.String;@31ac8cf3),Annotation([Ljava.lang.String;@3759beff,[Ljava.lang.String;@650a73bc,[Ledu.cmu.lti.nlp.amr.Entity;@11346f77))
AMR:
(p / paradise, quant, s / stranger)
(p2 / promise-01, ARG0, w / well)
(p2 / promise-01, ARG1, s / stranger)
(p2 / promise-01, time, s3 / still)
(s2 / some, domain, p2 / promise-01)

Decoded in 51,286 microseconds
