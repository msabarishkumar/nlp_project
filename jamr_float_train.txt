# ::snt and teaches him all that is grand and beautiful in the foaming cataract the glassy lake and the floating mist,  shepherds bush yielded up none of these things unless you counted carbon monoxide as a floating mist and the people coming out of the underground station as a foaming cataract
# ::tok and teaches him all that is grand and beautiful in the foaming cataract the glassy lake and the floating mist , shepherds bush yielded up none of these things unless you counted carbon monoxide as a floating mist and the people coming out of the underground station as a foaming cataract
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:49.287
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the leading barge was tilted at right angles and the rest floated gently apart
# ::tok the leading barge was tilted at right angles and the rest floated gently apart
# ::alignments 13-14|0 11-12|0.0 10-11|0.0.1 8-9|0.0.0 7-8|0.0.0.0 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:50.083
# ::node	0	apart	13-14
# ::node	0.0	float-01	11-12
# ::node	0.0.0	and	8-9
# ::node	0.0.0.0	angle	7-8
# ::node	0.0.0.0.0	lead-01	1-2
# ::node	0.0.1	rest	10-11
# ::root	0	apart
(a / apart 
      :mod-of (f / float-01 
            :ARG0 (a2 / and 
                  :op1 (a3 / angle 
                        :ARG1-of (l / lead-01))) 
            :ARG1 (r / rest)))

# ::snt it is shrugging off current market conditions to float the business via an introduction sponsored by schroders the merchant bank
# ::tok it is shrugging off current market conditions to float the business via an introduction sponsored by schroders the merchant bank
# ::alignments 19-20|0.0.1 18-19|0+0.0 14-15|0.0.0.1 13-14|0.0.0 10-11|0.0.0.1.0 8-9|0.0.0.1.0.0.0 6-7|0.0.0.1.0.0.0.0 5-6|0.0.0.1.0.0.0.0.0 4-5|0.0.0.0 3-4|0.0.0.1.0.0.0.0.1 0-1|0.0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:51.721
# ::node	0	merchandise-01	18-19
# ::node	0.0	person	18-19
# ::node	0.0.0	introduce-02	13-14
# ::node	0.0.0.0	current	4-5
# ::node	0.0.0.1	sponsor-01	14-15
# ::node	0.0.0.1.0	business	10-11
# ::node	0.0.0.1.0.0	it	0-1
# ::node	0.0.0.1.0.0.0	float-01	8-9
# ::node	0.0.0.1.0.0.0.0	condition	6-7
# ::node	0.0.0.1.0.0.0.0.0	market	5-6
# ::node	0.0.0.1.0.0.0.0.1	off	3-4
# ::node	0.0.1	bank	19-20
# ::root	0	merchandise-01
# ::edge	bank	mod	person	0.0.1	0.0	
# ::edge	business	poss	it	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	condition	mod	market	0.0.0.1.0.0.0.0	0.0.0.1.0.0.0.0.0	
# ::edge	float-01	ARG0	condition	0.0.0.1.0.0.0	0.0.0.1.0.0.0.0	
# ::edge	float-01	ARG1	it	0.0.0.1.0.0.0	0.0.0.1.0.0	
# ::edge	introduce-02	ARG0	person	0.0.0	0.0	
# ::edge	introduce-02	ARG1	current	0.0.0	0.0.0.0	
# ::edge	merchandise-01	ARG0	person	0	0.0	
# ::edge	off	op1	condition	0.0.0.1.0.0.0.0.1	0.0.0.1.0.0.0.0	
# ::edge	sponsor-01	ARG0	business	0.0.0.1	0.0.0.1.0	
# ::edge	sponsor-01	ARG1	introduce-02	0.0.0.1	0.0.0	
(m / merchandise-01 
      :ARG0 (p / person 
            :ARG0-of (i / introduce-02 
                  :ARG1 (c2 / current) 
                  :ARG1-of (s / sponsor-01 
                        :ARG0 (b2 / business 
                              :poss (i2 / it 
                                    :ARG1-of (f / float-01 
                                          :ARG0 (c / condition 
                                                :mod (m2 / market) 
                                                :op-of (o / off))))))) 
            :mod-of (b / bank)))

# ::snt nicholas ridley the secretary of state for trade and industry refused to rule out the possibility of the government dropping its veto on takeover bids for other stateowned businesses which have been floated on the stock market
# ::tok nicholas ridley the secretary of state for trade and industry refused to rule out the possibility of the government dropping its veto on takeover bids for other stateowned businesses which have been floated on the stock market
# ::alignments 36-37|0.1.0.1.0.0.0.0.0 35-36|0.1.0.1.0.0.0.0.0.0 32-33|0.1.0.1.0.0.0.0 28-29|0.1.0.1.0.0.0 26-27|0.1.0.1.0.0.0.1 23-24|0.1.0.1.1 21-22|0.1.0.1.0 19-20|0.1.0.1.0.0 15-16|0.1.0.1 12-13|0.1.0 10-11|0.1 9-10|0.1.0.0 8-9|0 7-8|0.0 5-6|0.0.0 3-4|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:52.116
# ::node	0	and	8-9
# ::node	0.0	trade-01	7-8
# ::node	0.0.0	state	5-6
# ::node	0.0.0.0	secretary	3-4
# ::node	0.1	refuse-01	10-11
# ::node	0.1.0	rule-03	12-13
# ::node	0.1.0.0	industry	9-10
# ::node	0.1.0.1	possible	15-16
# ::node	0.1.0.1.0	veto-01	21-22
# ::node	0.1.0.1.0.0	drop-04	19-20
# ::node	0.1.0.1.0.0.0	business	28-29
# ::node	0.1.0.1.0.0.0.0	float-01	32-33
# ::node	0.1.0.1.0.0.0.0.0	market	36-37
# ::node	0.1.0.1.0.0.0.0.0.0	stock	35-36
# ::node	0.1.0.1.0.0.0.1	other	26-27
# ::node	0.1.0.1.1	take-12	23-24
# ::root	0	and
# ::edge	and	op1	trade-01	0	0.0	
# ::edge	and	op2	refuse-01	0	0.1	
# ::edge	business	mod	other	0.1.0.1.0.0.0	0.1.0.1.0.0.0.1	
# ::edge	drop-04	ARG1	veto-01	0.1.0.1.0.0	0.1.0.1.0	
# ::edge	drop-04	ARG2	business	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	float-01	ARG1	business	0.1.0.1.0.0.0.0	0.1.0.1.0.0.0	
# ::edge	float-01	ARG2	market	0.1.0.1.0.0.0.0	0.1.0.1.0.0.0.0.0	
# ::edge	market	mod	stock	0.1.0.1.0.0.0.0.0	0.1.0.1.0.0.0.0.0.0	
# ::edge	refuse-01	ARG1	rule-03	0.1	0.1.0	
# ::edge	rule-03	ARG0	industry	0.1.0	0.1.0.0	
# ::edge	rule-03	ARG1	possible	0.1.0	0.1.0.1	
# ::edge	secretary	mod	state	0.0.0.0	0.0.0	
# ::edge	state	mod	trade-01	0.0.0	0.0	
# ::edge	take-12	ARG1	possible	0.1.0.1.1	0.1.0.1	
# ::edge	veto-01	ARG1	possible	0.1.0.1.0	0.1.0.1	
(a / and 
      :op1 (t2 / trade-01 
            :mod-of (s2 / state 
                  :mod-of (s3 / secretary))) 
      :op2 (r2 / refuse-01 
            :ARG1 (r / rule-03 
                  :ARG0 (i / industry) 
                  :ARG1 (p / possible 
                        :ARG1-of (v / veto-01 
                              :ARG1-of (d / drop-04 
                                    :ARG2 (b / business 
                                          :ARG1-of (f / float-01 
                                                :ARG2 (m / market 
                                                      :mod (s / stock))) 
                                          :mod (o / other)))) 
                        :ARG1-of (t / take-12)))))

# ::snt so he found them a tiny cottage just south of orvieto in the grounds of the villa of some italian friends of his who had departed for the northern mountains a villa with a pool and a shady veranda along one side and an unspeakably romantic view down the steep hillside towards the floating cathedral
# ::tok so he found them a tiny cottage just south of orvieto in the grounds of the villa of some italian friends of his who had departed for the northern mountains a villa with a pool and a shady veranda along one side and an unspeakably romantic view down the steep hillside towards the floating cathedral
# ::alignments 53-54|0.0 50-51|0.0.1.0.4.0 49-50|0.0.1.0.4.0.0 47-48|0.0.1.0.4 45-46|0.0.1.0.3 42-43|0 41-42|0.1 39-40|0.1.0 35-36|0.0.1 34-35|0.0.0 29-30|0.0.1.0.2 28-29|0.0.1.0.2.0 25-26|0.0.1.0 20-21|0.0.1.0.0.1.0+0.0.1.0.0.1 19-20|0.0.1.0.0.1.1.0.0+0.0.1.0.0.1.1.0+0.0.1.0.0.1.1 18-19|0.0.1.0.0.0.2 13-14|0.0.1.0.1 8-9|0.0.1.0.0.0.0.0 7-8|0.0.1.0.0.0.0 5-6|0.0.1.0.0.1.2 2-3|0.0.1.0.0.0 1-2|0.0.1.0.0 0-1|0.0.1.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:53.593
# ::node	0	and	42-43
# ::node	0.0	float-01	53-54
# ::node	0.0.0	pool	34-35
# ::node	0.0.1	and	35-36
# ::node	0.0.1.0	depart-01	25-26
# ::node	0.0.1.0.0	he	1-2
# ::node	0.0.1.0.0.0	find-01	2-3
# ::node	0.0.1.0.0.0.0	just	7-8
# ::node	0.0.1.0.0.0.0.0	south	8-9
# ::node	0.0.1.0.0.0.1	so	0-1
# ::node	0.0.1.0.0.0.2	some	18-19
# ::node	0.0.1.0.0.1	have-rel-role-91	20-21
# ::node	0.0.1.0.0.1.0	friend	20-21
# ::node	0.0.1.0.0.1.1	language	19-20
# ::node	0.0.1.0.0.1.1.0	name	19-20
# ::node	0.0.1.0.0.1.1.0.0	"Italian"	19-20
# ::node	0.0.1.0.0.1.2	tiny	5-6
# ::node	0.0.1.0.1	ground	13-14
# ::node	0.0.1.0.2	mountain	29-30
# ::node	0.0.1.0.2.0	north	28-29
# ::node	0.0.1.0.3	romantic	45-46
# ::node	0.0.1.0.4	down	47-48
# ::node	0.0.1.0.4.0	hillside	50-51
# ::node	0.0.1.0.4.0.0	steep-01	49-50
# ::node	0.1	side	41-42
# ::node	0.1.0	along	39-40
# ::root	0	and
# ::edge	along	op1	side	0.1.0	0.1	
# ::edge	and	op1	float-01	0.0.1	0.0	
# ::edge	and	op1	side	0	0.1	
# ::edge	depart-01	ARG0	he	0.0.1.0	0.0.1.0.0	
# ::edge	depart-01	ARG1	ground	0.0.1.0	0.0.1.0.1	
# ::edge	depart-01	ARG2	and	0.0.1.0	0.0.1	
# ::edge	depart-01	location	mountain	0.0.1.0	0.0.1.0.2	
# ::edge	depart-01	time	down	0.0.1.0	0.0.1.0.4	
# ::edge	down	op1	hillside	0.0.1.0.4	0.0.1.0.4.0	
# ::edge	find-01	ARG0	he	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	find-01	ARG1	just	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	float-01	ARG0	and	0.0	0	
# ::edge	float-01	ARG1	pool	0.0	0.0.0	
# ::edge	have-rel-role-91	ARG1	he	0.0.1.0.0.1	0.0.1.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.1.0.0.1	0.0.1.0.0.1.0	
# ::edge	have-rel-role-91	mod	language	0.0.1.0.0.1	0.0.1.0.0.1.1	
# ::edge	language	name	name	0.0.1.0.0.1.1	0.0.1.0.0.1.1.0	
# ::edge	mountain	mod	north	0.0.1.0.2	0.0.1.0.2.0	
# ::edge	name	op1	"Italian"	0.0.1.0.0.1.1.0	0.0.1.0.0.1.1.0.0	
# ::edge	romantic	op1	depart-01	0.0.1.0.3	0.0.1.0	
# ::edge	so	op1	find-01	0.0.1.0.0.0.1	0.0.1.0.0.0	
# ::edge	some	op1	find-01	0.0.1.0.0.0.2	0.0.1.0.0.0	
# ::edge	south	mod	just	0.0.1.0.0.0.0.0	0.0.1.0.0.0.0	
# ::edge	steep-01	ARG1	hillside	0.0.1.0.4.0.0	0.0.1.0.4.0	
# ::edge	tiny	op1	have-rel-role-91	0.0.1.0.0.1.2	0.0.1.0.0.1	
(a / and 
      :ARG0-of (f / float-01 
            :ARG1 (p / pool) 
            :op-of (a3 / and 
                  :ARG2-of (d2 / depart-01 
                        :ARG0 (h3 / he 
                              :ARG0-of (f3 / find-01 
                                    :ARG1 (j / just 
                                          :mod-of (s4 / south)) 
                                    :op-of (s5 / so) 
                                    :op-of (s3 / some)) 
                              :ARG1-of (h2 / have-rel-role-91 
                                    :ARG2 (f2 / friend) 
                                    :mod (l / language 
                                          :name (n2 / name 
                                                :op1 "Italian")) 
                                    :op-of (t / tiny))) 
                        :ARG1 (g / ground) 
                        :location (m / mountain 
                              :mod (n / north)) 
                        :op-of (r / romantic) 
                        :time (d / down 
                              :op1 (h / hillside 
                                    :ARG1-of (s / steep-01)))))) 
      :op1 (s2 / side 
            :op-of (a2 / along)))

# ::snt advice literally floating in midair over london one might think that cellphone listening could be profitable as well as entertaining
# ::tok advice literally floating in midair over london one might think that cellphone listening could be profitable as well as entertaining
# ::alignments 19-20|0.1.0.0 17-18|0.1.0.0.1 15-16|0.1 13-14|0.1.0.0.0 12-13|0.1.0 11-12|0.1.0.1 9-10|0 6-7|0.0.1.0.0+0.0.1.0+0.0.1 2-3|0.0 1-2|0.0.2 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:53.959
# ::node	0	think-01	9-10
# ::node	0.0	float-01	2-3
# ::node	0.0.0	advise-01	0-1
# ::node	0.0.1	city	6-7
# ::node	0.0.1.0	name	6-7
# ::node	0.0.1.0.0	"London"	6-7
# ::node	0.0.2	literal	1-2
# ::node	0.1	profit-01	15-16
# ::node	0.1.0	listen-01	12-13
# ::node	0.1.0.0	entertain-01	19-20
# ::node	0.1.0.0.0	possible	13-14
# ::node	0.1.0.0.1	well	17-18
# ::node	0.1.0.1	cellphone	11-12
# ::root	0	think-01
# ::edge	city	name	name	0.0.1	0.0.1.0	
# ::edge	entertain-01	ARG1	listen-01	0.1.0.0	0.1.0	
# ::edge	float-01	ARG1	advise-01	0.0	0.0.0	
# ::edge	float-01	location	city	0.0	0.0.1	
# ::edge	float-01	manner	literal	0.0	0.0.2	
# ::edge	listen-01	mod	cellphone	0.1.0	0.1.0.1	
# ::edge	name	op1	"London"	0.0.1.0	0.0.1.0.0	
# ::edge	possible	domain	entertain-01	0.1.0.0.0	0.1.0.0	
# ::edge	profit-01	ARG1	listen-01	0.1	0.1.0	
# ::edge	think-01	ARG0	float-01	0	0.0	
# ::edge	think-01	ARG1	profit-01	0	0.1	
# ::edge	well	op1	entertain-01	0.1.0.0.1	0.1.0.0	
(t / think-01 
      :ARG0 (f / float-01 
            :ARG1 (a / advise-01) 
            :location (c2 / city 
                  :name (n / name 
                        :op1 "London")) 
            :manner (l2 / literal)) 
      :ARG1 (p / profit-01 
            :ARG1 (l / listen-01 
                  :ARG1-of (e / entertain-01 
                        :domain-of (p2 / possible) 
                        :op-of (w / well)) 
                  :mod (c / cellphone))))

# ::snt his warning fell on deaf ears and despite growing protests from opposition mps and city investors alike mr parkinson has fought vigorously to ensure that the entire nuclear industry is floated into the private sector
# ::tok his warning fell on deaf ears and despite growing protests from opposition mps and city investors alike mr parkinson has fought vigorously to ensure that the entire nuclear industry is floated into the private sector
# ::alignments 34-35|0.0.0.0.0.0.0.1 33-34|0.0.0.0.0.0.0.1.0 30-31|0.0.0.0.0.0.0 28-29|0.0.0.0.0.0.0.0 27-28|0.0.0.0.0.0.0.0.1 26-27|0.0.0.0.0.0.0.0.0 23-24|0.0.0.0.0.0 21-22|0.0.0.0.0.0.1.1 20-21|0.0.0.0.0.0.1 16-17|0.0.0.0.0.0.1.0 15-16|0.1.0.0.0+0.1.0.0 14-15|0.1.0.0.0.0 13-14|0 11-12|0.0 9-10|0.1.0 8-9|0.1 6-7|0.0.0 5-6|0.0.0.1 2-3|0.0.0.0 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:54.601
# ::node	0	and	13-14
# ::node	0.0	oppose-01	11-12
# ::node	0.0.0	and	6-7
# ::node	0.0.0.0	fall-01	2-3
# ::node	0.0.0.0.0	warn-01	1-2
# ::node	0.0.0.0.0.0	ensure-01	23-24
# ::node	0.0.0.0.0.0.0	float-01	30-31
# ::node	0.0.0.0.0.0.0.0	industry	28-29
# ::node	0.0.0.0.0.0.0.0.0	entire	26-27
# ::node	0.0.0.0.0.0.0.0.1	nucleus	27-28
# ::node	0.0.0.0.0.0.0.1	sector	34-35
# ::node	0.0.0.0.0.0.0.1.0	private	33-34
# ::node	0.0.0.0.0.0.1	fight-01	20-21
# ::node	0.0.0.0.0.0.1.0	alike	16-17
# ::node	0.0.0.0.0.0.1.1	vigorous	21-22
# ::node	0.0.0.1	ear	5-6
# ::node	0.1	grow-01	8-9
# ::node	0.1.0	protest-01	9-10
# ::node	0.1.0.0	person	15-16
# ::node	0.1.0.0.0	invest-01	15-16
# ::node	0.1.0.0.0.0	city	14-15
# ::root	0	and
(a2 / and 
      :ARG1-of (o / oppose-01 
            :op-of (a3 / and 
                  :ARG0-of (f3 / fall-01 
                        :ARG1 (w / warn-01 
                              :ARG0-of (e2 / ensure-01 
                                    :ARG1 (f / float-01 
                                          :ARG1 (i / industry 
                                                :mod (e / entire) 
                                                :mod (n / nucleus)) 
                                          :location (s / sector 
                                                :mod (p / private))) 
                                    :ARG1-of (f2 / fight-01 
                                          :ARG0 (a / alike) 
                                          :manner (v / vigorous))))) 
                  :op1 (e3 / ear))) 
      :location-of (g / grow-01 
            :ARG1 (p3 / protest-01 
                  :ARG1 (p2 / person 
                        :ARG0-of (i2 / invest-01 
                              :location (c / city))))))

# ::snt the orange river picked up the rejection letter and open cigarette packet in its path and floated them over onto xs lap
# ::tok the orange river picked up the rejection letter and open cigarette packet in its path and floated them over onto xs lap
# ::alignments 21-22|0.3.1.1.0 19-20|0.3.1.1 16-17|0.3.1 15-16|0.3 14-15|0.2 11-12|0.3.0 10-11|0.3.0.0 8-9|0.3.1.0 7-8|0.1 6-7|0.1.0 3-4|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:54.915
# ::node	0	pick-04	3-4
# ::node	0.0	river	2-3
# ::node	0.0.0	orange	1-2
# ::node	0.1	letter	7-8
# ::node	0.1.0	reject-01	6-7
# ::node	0.2	path	14-15
# ::node	0.3	and	15-16
# ::node	0.3.0	packet	11-12
# ::node	0.3.0.0	cigarette	10-11
# ::node	0.3.1	float-01	16-17
# ::node	0.3.1.0	and	8-9
# ::node	0.3.1.1	onto	19-20
# ::node	0.3.1.1.0	lap	21-22
# ::root	0	pick-04
# ::edge	and	op1	pick-04	0.3	0	
# ::edge	and	op2	packet	0.3	0.3.0	
# ::edge	and	op3	float-01	0.3	0.3.1	
# ::edge	float-01	ARG1	and	0.3.1	0.3.1.0	
# ::edge	float-01	time	onto	0.3.1	0.3.1.1	
# ::edge	letter	mod	reject-01	0.1	0.1.0	
# ::edge	onto	op1	lap	0.3.1.1	0.3.1.1.0	
# ::edge	packet	mod	cigarette	0.3.0	0.3.0.0	
# ::edge	pick-04	ARG0	river	0	0.0	
# ::edge	pick-04	ARG1	letter	0	0.1	
# ::edge	pick-04	location	path	0	0.2	
# ::edge	river	mod	orange	0.0	0.0.0	
(p3 / pick-04 
      :ARG0 (r2 / river 
            :mod (o2 / orange)) 
      :ARG1 (l2 / letter 
            :mod (r / reject-01)) 
      :location (p / path) 
      :op-of (a / and 
            :op1 (p2 / packet 
                  :mod (c / cigarette)) 
            :op2 (f / float-01 
                  :ARG1 (a2 / and) 
                  :time (o / onto 
                        :op1 (l / lap)))))

# ::snt mgn is due to be floated on the stock market
# ::tok mgn is due to be floated on the stock market
# ::alignments 9-10|0.0 8-9|0 5-6|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:54.929
# ::node	0	stock	8-9
# ::node	0.0	market	9-10
# ::node	0.0.0	float-01	5-6
# ::root	0	stock
(s / stock 
      :mod-of (m / market 
            :ARG2-of (f / float-01)))

# ::snt navratilova next misjudged a floated backhand which nicked the line and a forehand winner followed by four first serves in the next game put graf back on course at 55
# ::tok navratilova next misjudged a floated backhand which nicked the line and a forehand winner followed by four first serves in the next game put graf back on course at 55
# ::alignments 29-30|0.1.0.0.0.0.0 25-26|0.1.0.0.0 22-23|0.1.0.0.0.0.1 21-22|0.1.0.0.0.0.1.0 18-19|0.1.0.0.0.0 16-17|0.1.0.0.0.0.2 14-15|0 10-11|0.1 9-10|0.1.0 4-5|0.1.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:55.123
# ::node	0	follow-01	14-15
# ::node	0.0	next	1-2
# ::node	0.1	and	10-11
# ::node	0.1.0	line	9-10
# ::node	0.1.0.0	float-01	4-5
# ::node	0.1.0.0.0	back	25-26
# ::node	0.1.0.0.0.0	serve-01	18-19
# ::node	0.1.0.0.0.0.0	55	29-30
# ::node	0.1.0.0.0.0.1	game	22-23
# ::node	0.1.0.0.0.0.1.0	next	21-22
# ::node	0.1.0.0.0.0.2	4	16-17
# ::root	0	follow-01
# ::edge	and	op1	line	0.1	0.1.0	
# ::edge	float-01	ARG0	back	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	line	0.1.0.0	0.1.0	
# ::edge	follow-01	ARG1	next	0	0.0	
# ::edge	follow-01	ARG2	and	0	0.1	
# ::edge	game	mod	next	0.1.0.0.0.0.1	0.1.0.0.0.0.1.0	
# ::edge	serve-01	ARG0	55	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	serve-01	ARG1	game	0.1.0.0.0.0	0.1.0.0.0.0.1	
# ::edge	serve-01	quant	4	0.1.0.0.0.0	0.1.0.0.0.0.2	
# ::edge	serve-01	time	back	0.1.0.0.0.0	0.1.0.0.0	
(f / follow-01 
      :ARG1 (n2 / next) 
      :ARG2 (a / and 
            :op1 (l / line 
                  :ARG1-of (f2 / float-01 
                        :ARG0 (b / back 
                              :time-of (s / serve-01 
                                    :ARG0 55 
                                    :ARG1 (g / game 
                                          :mod (n / next)) 
                                    :quant 4))))))

# ::snt in 1985 it was floated on the stock market to a rapturous city which valued the family stake at 292 million
# ::tok in 1985 it was floated on the stock market to a rapturous city which valued the family stake at 292 million
# ::alignments 17-18|0.2.0.0 16-17|0.2.0.0.0 14-15|0.2.0 12-13|0.2 8-9|0.1 7-8|0.1.0 4-5|0 2-3|0.0 1-2|0.3.0+0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:55.568
# ::node	0	float-01	4-5
# ::node	0.0	it	2-3
# ::node	0.1	market	8-9
# ::node	0.1.0	stock	7-8
# ::node	0.2	city	12-13
# ::node	0.2.0	value-01	14-15
# ::node	0.2.0.0	stake	17-18
# ::node	0.2.0.0.0	family	16-17
# ::node	0.3	date-entity	1-2
# ::node	0.3.0	1985	1-2
# ::root	0	float-01
# ::edge	date-entity	year	1985	0.3	0.3.0	
# ::edge	float-01	ARG1	it	0	0.0	
# ::edge	float-01	ARG2	market	0	0.1	
# ::edge	float-01	ARG3	city	0	0.2	
# ::edge	float-01	time	date-entity	0	0.3	
# ::edge	market	mod	stock	0.1	0.1.0	
# ::edge	stake	mod	family	0.2.0.0	0.2.0.0.0	
# ::edge	value-01	ARG0	city	0.2.0	0.2	
# ::edge	value-01	ARG1	stake	0.2.0	0.2.0.0	
(f2 / float-01 
      :ARG1 (i / it) 
      :ARG2 (m / market 
            :mod (s2 / stock)) 
      :ARG3 (c / city 
            :ARG0-of (v / value-01 
                  :ARG1 (s / stake 
                        :mod (f / family)))) 
      :time (d / date-entity 
            :year 1985))

# ::snt many believe this could be the time to try the package of reforms floated recently by dr nikolai shmelyov in moscow
# ::tok many believe this could be the time to try the package of reforms floated recently by dr nikolai shmelyov in moscow
# ::alignments 14-15|0.0.1 13-14|0.0 12-13|0.0.0 10-11|0 8-9|0.1 6-7|0.1.0 3-4|0.1.0.0 2-3|0.0.0.0 1-2|0.1.0.0.0 0-1|0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:55.769
# ::node	0	package	10-11
# ::node	0.0	float-01	13-14
# ::node	0.0.0	reform-01	12-13
# ::node	0.0.0.0	this	2-3
# ::node	0.0.1	recent	14-15
# ::node	0.1	try-01	8-9
# ::node	0.1.0	time	6-7
# ::node	0.1.0.0	possible	3-4
# ::node	0.1.0.0.0	believe-01	1-2
# ::node	0.1.0.0.0.0	many	0-1
# ::root	0	package
(p / package 
      :ARG0-of (f / float-01 
            :ARG1 (r2 / reform-01 
                  :ARG1 (t3 / this)) 
            :time (r / recent)) 
      :ARG1-of (t / try-01 
            :purpose-of (t2 / time 
                  :domain-of (p2 / possible 
                        :ARG1-of (b / believe-01 
                              :ARG0 (m / many))))))

# ::snt   on set shrader devotes most of his efforts to working out the movements of what he calls his floating rectangle dash
# ::tok on set shrader devotes most of his efforts to working out the movements of what he calls his floating rectangle dash
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:55.770
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt mountleigh has said it intends to float 60 per cent of gp on the madrid stock market but there was talk that a bidder had materialised
# ::tok mountleigh has said it intends to float 60 per cent of gp on the madrid stock market but there was talk that a bidder had materialised
# ::alignments 20-21|0.0.1.0 17-18|0.0.1 16-17|0.0.1.0.0.0 15-16|0.0.1.0.0 9-10|0.0.0.0.0+0.0.0.0 7-8|0.0.2 6-7|0.0.0 4-5|0.0 3-4|0.0.0.1 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:56.132
# ::node	0	say-01	2-3
# ::node	0.0	intend-01	4-5
# ::node	0.0.0	float-01	6-7
# ::node	0.0.0.0	monetary-quantity	9-10
# ::node	0.0.0.0.0	cent	9-10
# ::node	0.0.0.1	it	3-4
# ::node	0.0.1	contrast-01	17-18
# ::node	0.0.1.0	talk-01	20-21
# ::node	0.0.1.0.0	stock	15-16
# ::node	0.0.1.0.0.0	market	16-17
# ::node	0.0.2	60	7-8
# ::root	0	say-01
# ::edge	contrast-01	ARG1	intend-01	0.0.1	0.0	
# ::edge	contrast-01	ARG2	talk-01	0.0.1	0.0.1.0	
# ::edge	float-01	ARG0	monetary-quantity	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	it	0.0.0	0.0.0.1	
# ::edge	intend-01	ARG1	float-01	0.0	0.0.0	
# ::edge	intend-01	ARG3	60	0.0	0.0.2	
# ::edge	market	mod	stock	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	monetary-quantity	unit	cent	0.0.0.0	0.0.0.0.0	
# ::edge	say-01	ARG1	intend-01	0	0.0	
# ::edge	talk-01	ARG1	stock	0.0.1.0	0.0.1.0.0	
(s2 / say-01 
      :ARG1 (i / intend-01 
            :ARG1 (f / float-01 
                  :ARG0 (m2 / monetary-quantity 
                        :unit (c2 / cent)) 
                  :ARG1 (i2 / it)) 
            :ARG1-of (c / contrast-01 
                  :ARG2 (t / talk-01 
                        :ARG1 (s / stock 
                              :mod-of (m / market)))) 
            :ARG3 60))

# ::snt a freekick was tapped to richardson who floated the ball towards alan smith
# ::tok a freekick was tapped to richardson who floated the ball towards alan smith
# ::alignments 9-10|0 7-8|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:56.148
# ::node	0	ball	9-10
# ::node	0.0	float-01	7-8
# ::root	0	ball
(b / ball 
      :ARG1-of (f / float-01))

# ::snt even the railway track which was laid by irish navvies many of whom lost their lives in the process has to float in places on a sunken raft of floating pines and relies on each train to iron it flat as it passes
# ::tok even the railway track which was laid by irish navvies many of whom lost their lives in the process has to float in places on a sunken raft of floating pines and relies on each train to iron it flat as it passes
# ::alignments 41-42|0.2.3.1 39-40|0.2.3.0.0 38-39|0.2.3.0 37-38|0.2.3 35-36|0.2.1 34-35|0.2.1.0 32-33|0.2 31-32|0 29-30|0.0 26-27|0.2.2 23-24|0.1.1 21-22|0.1 18-19|0.1.0 15-16|0.1.0.0.1 13-14|0.1.0.0 10-11|0.1.0.0.0 6-7|0.2.0.0 3-4|0.2.0 2-3|0.2.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:56.850
# ::node	0	and	31-32
# ::node	0.0	float-01	29-30
# ::node	0.1	float-01	21-22
# ::node	0.1.0	process	18-19
# ::node	0.1.0.0	lose-02	13-14
# ::node	0.1.0.0.0	many	10-11
# ::node	0.1.0.0.1	life	15-16
# ::node	0.1.1	place	23-24
# ::node	0.2	rely-01	32-33
# ::node	0.2.0	track	3-4
# ::node	0.2.0.0	lay-02	6-7
# ::node	0.2.0.1	railway	2-3
# ::node	0.2.1	train	35-36
# ::node	0.2.1.0	each	34-35
# ::node	0.2.2	sink-01	26-27
# ::node	0.2.3	iron	37-38
# ::node	0.2.3.0	it	38-39
# ::node	0.2.3.0.0	flat	39-40
# ::node	0.2.3.1	it	41-42
# ::root	0	and
# ::edge	and	op1	float-01	0	0.1	
# ::edge	and	op2	rely-01	0	0.2	
# ::edge	flat	op1	it	0.2.3.0.0	0.2.3.0	
# ::edge	float-01	ARG0	process	0.1	0.1.0	
# ::edge	float-01	ARG1	and	0.0	0	
# ::edge	float-01	location	place	0.1	0.1.1	
# ::edge	iron	degree	it	0.2.3	0.2.3.0	
# ::edge	iron	name	it	0.2.3	0.2.3.1	
# ::edge	lay-02	ARG1	track	0.2.0.0	0.2.0	
# ::edge	lose-02	ARG0	many	0.1.0.0	0.1.0.0.0	
# ::edge	lose-02	ARG1	life	0.1.0.0	0.1.0.0.1	
# ::edge	lose-02	time	process	0.1.0.0	0.1.0	
# ::edge	rely-01	ARG0	track	0.2	0.2.0	
# ::edge	rely-01	ARG1	train	0.2	0.2.1	
# ::edge	rely-01	manner	sink-01	0.2	0.2.2	
# ::edge	rely-01	purpose	iron	0.2	0.2.3	
# ::edge	track	mod	railway	0.2.0	0.2.0.1	
# ::edge	train	mod	each	0.2.1	0.2.1.0	
(a / and 
      :ARG1-of (f2 / float-01) 
      :op1 (f3 / float-01 
            :ARG0 (p2 / process 
                  :time-of (l2 / lose-02 
                        :ARG0 (m / many) 
                        :ARG1 (l / life))) 
            :location (p / place)) 
      :op2 (r / rely-01 
            :ARG0 (t2 / track 
                  :ARG1-of (l3 / lay-02) 
                  :mod (r2 / railway)) 
            :ARG1 (t / train 
                  :mod (e / each)) 
            :manner (s / sink-01) 
            :purpose (i3 / iron 
                  :degree (i2 / it 
                        :op-of (f / flat)) 
                  :name (i / it))))

# ::snt their day however is filled by the reappearance of figures from pirosmanashvilis paintings and earlier life floating eerily into view in the huge glassfronted cabinet which forms the back of the set
# ::tok their day however is filled by the reappearance of figures from pirosmanashvilis paintings and earlier life floating eerily into view in the huge glassfronted cabinet which forms the back of the set
# ::alignments 28-29|0.0.0 26-27|0.0 24-25|0.0.1 22-23|0.0.1.0 16-17|0.3.1.0 15-16|0.3.1 14-15|0.3.0 13-14|0.3 12-13|0.2 9-10|0.2.0 4-5|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:56.978
# ::node	0	fill-01	4-5
# ::node	0.0	form	26-27
# ::node	0.0.0	back	28-29
# ::node	0.0.1	cabinet	24-25
# ::node	0.0.1.0	huge	22-23
# ::node	0.1	day	1-2
# ::node	0.2	paint-02	12-13
# ::node	0.2.0	figure	9-10
# ::node	0.3	and	13-14
# ::node	0.3.0	early	14-15
# ::node	0.3.1	life	15-16
# ::node	0.3.1.0	float-01	16-17
# ::root	0	fill-01
# ::edge	and	op1	fill-01	0.3	0	
# ::edge	and	op2	early	0.3	0.3.0	
# ::edge	and	op3	life	0.3	0.3.1	
# ::edge	cabinet	mod	huge	0.0.1	0.0.1.0	
# ::edge	fill-01	ARG0	form	0	0.0	
# ::edge	fill-01	ARG1	day	0	0.1	
# ::edge	fill-01	ARG2	paint-02	0	0.2	
# ::edge	float-01	ARG1	life	0.3.1.0	0.3.1	
# ::edge	form	direction	back	0.0	0.0.0	
# ::edge	form	mod	cabinet	0.0	0.0.1	
# ::edge	paint-02	ARG1	figure	0.2	0.2.0	
(f4 / fill-01 
      :ARG0 (f / form 
            :direction (b / back) 
            :mod (c / cabinet 
                  :mod (h / huge))) 
      :ARG1 (d / day) 
      :ARG2 (p / paint-02 
            :ARG1 (f3 / figure)) 
      :op-of (a / and 
            :op1 (e / early) 
            :op2 (l / life 
                  :ARG1-of (f2 / float-01))))

# ::snt nobody he said would be convinced by the government when they still have to pull their children out of the water when they see turds floating in the sea
# ::tok nobody he said would be convinced by the government when they still have to pull their children out of the water when they see turds floating in the sea
# ::alignments 28-29|0.1.0.0.0.1.1.0 25-26|0.1.0.0.0.1.1 23-24|0.1.0.0.0.1 22-23|0.1.0.0.0.1.0 20-21|0.1.0.0.0 16-17|0.1.0.0.0.0 11-12|0.1.0.1 10-11|0.1.0.0 5-6|0.1.0 2-3|0 1-2|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:57.313
# ::node	0	say-01	2-3
# ::node	0.0	he	1-2
# ::node	0.1	nobody	0-1
# ::node	0.1.0	convince-01	5-6
# ::node	0.1.0.0	they	10-11
# ::node	0.1.0.0.0	water	20-21
# ::node	0.1.0.0.0.0	child	16-17
# ::node	0.1.0.0.0.1	see-01	23-24
# ::node	0.1.0.0.0.1.0	they	22-23
# ::node	0.1.0.0.0.1.1	float-01	25-26
# ::node	0.1.0.0.0.1.1.0	sea	28-29
# ::node	0.1.0.1	still	11-12
# ::root	0	say-01
# ::edge	child	source	water	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	convince-01	ARG0	they	0.1.0	0.1.0.0	
# ::edge	convince-01	ARG1	nobody	0.1.0	0.1	
# ::edge	convince-01	concession	still	0.1.0	0.1.0.1	
# ::edge	float-01	location	sea	0.1.0.0.0.1.1	0.1.0.0.0.1.1.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	nobody	0	0.1	
# ::edge	see-01	ARG0	they	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	see-01	ARG1	float-01	0.1.0.0.0.1	0.1.0.0.0.1.1	
# ::edge	see-01	time	water	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	water	poss	they	0.1.0.0.0	0.1.0.0	
(s4 / say-01 
      :ARG0 (h / he) 
      :ARG1 (n / nobody 
            :ARG1-of (c2 / convince-01 
                  :ARG0 (t2 / they 
                        :poss-of (w / water 
                              :source-of (c / child) 
                              :time-of (s2 / see-01 
                                    :ARG0 (t / they) 
                                    :ARG1 (f / float-01 
                                          :location (s / sea))))) 
                  :concession (s3 / still))))

# ::snt ballot on flotation applicants for shares in harry ramsden the fish and chips restaurant which is being floated on the third market are to be balloted for their allocations
# ::tok ballot on flotation applicants for shares in harry ramsden the fish and chips restaurant which is being floated on the third market are to be balloted for their allocations
# ::alignments 28-29|0.0.0.0.0.0.0+0.0.0.0.0.0.0.0 21-22|0.0.1 17-18|0.0 13-14|0.0.0 12-13|0.0.0.1 11-12|0 10-11|0.1 5-6|0.0.0.0.1 3-4|0.0.0.0+0.0.0.0.0 0-1|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:57.628
# ::node	0	and	11-12
# ::node	0.0	float-01	17-18
# ::node	0.0.0	restaurant	13-14
# ::node	0.0.0.0	apply-02	3-4
# ::node	0.0.0.0.0	person	3-4
# ::node	0.0.0.0.0.0	ballot	0-1
# ::node	0.0.0.0.0.0.0	allocate-01	28-29
# ::node	0.0.0.0.0.0.0.0	thing	28-29
# ::node	0.0.0.0.1	share	5-6
# ::node	0.0.0.1	chip	12-13
# ::node	0.0.1	market	21-22
# ::node	0.1	fish	10-11
# ::root	0	and
# ::edge	allocate-01	ARG0	ballot	0.0.0.0.0.0.0	0.0.0.0.0.0	
# ::edge	allocate-01	ARG1	thing	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	and	op1	fish	0	0.1	
# ::edge	apply-02	ARG0	person	0.0.0.0	0.0.0.0.0	
# ::edge	apply-02	ARG1	share	0.0.0.0	0.0.0.0.1	
# ::edge	apply-02	ARG2	restaurant	0.0.0.0	0.0.0	
# ::edge	ballot	poss	person	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG0	and	0.0	0	
# ::edge	float-01	ARG1	restaurant	0.0	0.0.0	
# ::edge	float-01	ARG2	market	0.0	0.0.1	
# ::edge	restaurant	mod	chip	0.0.0	0.0.0.1	
(a2 / and 
      :ARG0-of (f / float-01 
            :ARG1 (r / restaurant 
                  :ARG2-of (a3 / apply-02 
                        :ARG0 (p / person 
                              :poss-of (b / ballot 
                                    :ARG0-of (a / allocate-01 
                                          :ARG1 (t / thing)))) 
                        :ARG1 (s / share)) 
                  :mod (c / chip)) 
            :ARG2 (m / market)) 
      :op1 (f2 / fish))

# ::snt her chin rose above the surface her hair floated out behind her and the nun was thrusting a white arm through it to hold her more firmly
# ::tok her chin rose above the surface her hair floated out behind her and the nun was thrusting a white arm through it to hold her more firmly
# ::alignments 26-27|0.0.0 21-22|0.1.1.1 19-20|0.1.1 18-19|0.1.1.0 12-13|0 10-11|0.1.2 8-9|0.1 7-8|0.1.0 5-6|0.0.1.0 3-4|0.0.1 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:57.701
# ::node	0	and	12-13
# ::node	0.0	rise-01	2-3
# ::node	0.0.0	firm	26-27
# ::node	0.0.1	above	3-4
# ::node	0.0.1.0	surface	5-6
# ::node	0.1	float-01	8-9
# ::node	0.1.0	hair	7-8
# ::node	0.1.1	arm	19-20
# ::node	0.1.1.0	white	18-19
# ::node	0.1.1.1	it	21-22
# ::node	0.1.2	behind	10-11
# ::root	0	and
# ::edge	above	op1	surface	0.0.1	0.0.1.0	
# ::edge	and	op1	rise-01	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	arm	mod	white	0.1.1	0.1.1.0	
# ::edge	arm	poss	it	0.1.1	0.1.1.1	
# ::edge	float-01	ARG0	hair	0.1	0.1.0	
# ::edge	float-01	ARG1	arm	0.1	0.1.1	
# ::edge	float-01	ARG2	behind	0.1	0.1.2	
# ::edge	rise-01	ARG1	firm	0.0	0.0.0	
# ::edge	rise-01	time	above	0.0	0.0.1	
(a2 / and 
      :op1 (r / rise-01 
            :ARG1 (f / firm) 
            :time (a3 / above 
                  :op1 (s / surface))) 
      :op2 (f2 / float-01 
            :ARG0 (h / hair) 
            :ARG1 (a / arm 
                  :mod (w / white) 
                  :poss (i / it)) 
            :ARG2 (b / behind)))

# ::snt and closing the window he saw the table outside the crockery he had left the bottles on the grass the stub of gerrards cigar floating beneath a chair
# ::tok and closing the window he saw the table outside the crockery he had left the bottles on the grass the stub of gerrards cigar floating beneath a chair
# ::alignments 27-28|0.1.1.0 25-26|0.1.1 24-25|0.1 18-19|0.1.0 15-16|0.1.0.0.0+0.1.0.0 11-12|0.0.2.0.0 8-9|0.0.1.0 7-8|0.0.1 5-6|0.0 4-5|0.0.0 3-4|0.0.2 1-2|0.0.2.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:58.682
# ::node	0	and	0-1
# ::node	0.0	see-01	5-6
# ::node	0.0.0	he	4-5
# ::node	0.0.1	table	7-8
# ::node	0.0.1.0	outside	8-9
# ::node	0.0.2	window	3-4
# ::node	0.0.2.0	close-01	1-2
# ::node	0.0.2.0.0	he	11-12
# ::node	0.1	float-01	24-25
# ::node	0.1.0	grass-roots	18-19
# ::node	0.1.0.0	volume-quantity	15-16
# ::node	0.1.0.0.0	bottle	15-16
# ::node	0.1.1	beneath	25-26
# ::node	0.1.1.0	chair	27-28
# ::root	0	and
# ::edge	and	op1	see-01	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	beneath	op1	chair	0.1.1	0.1.1.0	
# ::edge	close-01	ARG0	he	0.0.2.0	0.0.2.0.0	
# ::edge	close-01	ARG1	window	0.0.2.0	0.0.2	
# ::edge	float-01	ARG1	grass-roots	0.1	0.1.0	
# ::edge	float-01	ARG2	beneath	0.1	0.1.1	
# ::edge	see-01	ARG0	he	0.0	0.0.0	
# ::edge	see-01	ARG1	table	0.0	0.0.1	
# ::edge	see-01	ARG2	window	0.0	0.0.2	
# ::edge	table	location	outside	0.0.1	0.0.1.0	
# ::edge	volume-quantity	location	grass-roots	0.1.0.0	0.1.0	
# ::edge	volume-quantity	unit	bottle	0.1.0.0	0.1.0.0.0	
(a / and 
      :op1 (s / see-01 
            :ARG0 (h2 / he) 
            :ARG1 (t / table 
                  :location (o / outside)) 
            :ARG2 (w / window 
                  :ARG1-of (c2 / close-01 
                        :ARG0 (h / he)))) 
      :op2 (f / float-01 
            :ARG1 (g / grass-roots 
                  :location-of (v / volume-quantity 
                        :unit (b2 / bottle))) 
            :ARG2 (b / beneath 
                  :op1 (c / chair))))

# ::snt the car seemed to float towards him
# ::tok the car seemed to float towards him
# ::alignments 4-5|0.0 2-3|0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:58.692
# ::node	0	seem-01	2-3
# ::node	0.0	float-01	4-5
# ::node	0.0.0	car	1-2
# ::root	0	seem-01
# ::edge	float-01	ARG0	car	0.0	0.0.0	
# ::edge	seem-01	ARG1	float-01	0	0.0	
(s / seem-01 
      :ARG1 (f / float-01 
            :ARG0 (c / car)))

# ::snt   a serious threat to water privatisation was averted yesterday when it was announced that the crown prosecution service would be prosecuting south west waters public sector residiary body over the camelford pollution incident rather than the company which is about to be floated on the stock market
# ::tok a serious threat to water privatisation was averted yesterday when it was announced that the crown prosecution service would be prosecuting south west waters public sector residiary body over the camelford pollution incident rather than the company which is about to be floated on the stock market
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:58.693
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt for one who was not overlyrical he went on about the flowers flowers in the trees flowers in the drinks and then the flowercoloured floating dresses that the women wore
# ::tok for one who was not overlyrical he went on about the flowers flowers in the trees flowers in the drinks and then the flowercoloured floating dresses that the women wore
# ::alignments 29-30|0.0.1.0 28-29|0.0.1.0.0 24-25|0.0.0.0 21-22|0.3 20-21|0 19-20|0.2 16-17|0.1 15-16|0.1.0 12-13|0.0 11-12|0.0.0 6-7|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:58.783
# ::node	0	and	20-21
# ::node	0.0	flower	12-13
# ::node	0.0.0	flower	11-12
# ::node	0.0.0.0	float-01	24-25
# ::node	0.0.1	he	6-7
# ::node	0.0.1.0	wear-01	29-30
# ::node	0.0.1.0.0	woman	28-29
# ::node	0.1	flower	16-17
# ::node	0.1.0	tree	15-16
# ::node	0.2	drink	19-20
# ::node	0.3	then	21-22
# ::root	0	and
# ::edge	and	op1	flower	0	0.0	
# ::edge	and	op2	flower	0	0.1	
# ::edge	and	op3	drink	0	0.2	
# ::edge	and	op4	then	0	0.3	
# ::edge	float-01	ARG1	flower	0.0.0.0	0.0.0	
# ::edge	flower	mod	flower	0.0	0.0.0	
# ::edge	flower	mod	tree	0.1	0.1.0	
# ::edge	flower	poss	he	0.0	0.0.1	
# ::edge	wear-01	ARG0	he	0.0.1.0	0.0.1	
# ::edge	wear-01	ARG1	woman	0.0.1.0	0.0.1.0.0	
(a / and 
      :op1 (f3 / flower 
            :mod (f4 / flower 
                  :ARG1-of (f / float-01)) 
            :poss (h / he 
                  :ARG0-of (w / wear-01 
                        :ARG1 (w2 / woman)))) 
      :op2 (f2 / flower 
            :mod (t2 / tree)) 
      :op3 (d / drink) 
      :op4 (t / then))

# ::snt the resulting patterns were transferred to paper by carefully floating it on top
# ::tok the resulting patterns were transferred to paper by carefully floating it on top
# ::alignments 12-13|0.0.0.1 10-11|0.0.0.0 9-10|0.0.0 8-9|0.0.0.2 6-7|0.2 4-5|0 2-3|0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:58.827
# ::node	0	transfer-01	4-5
# ::node	0.0	pattern-01	2-3
# ::node	0.0.0	float-01	9-10
# ::node	0.0.0.0	it	10-11
# ::node	0.0.0.1	top	12-13
# ::node	0.0.0.2	careful	8-9
# ::node	0.1	result-01	1-2
# ::node	0.2	paper	6-7
# ::root	0	transfer-01
# ::edge	float-01	ARG0	pattern-01	0.0.0	0.0	
# ::edge	float-01	ARG1	it	0.0.0	0.0.0.0	
# ::edge	float-01	ARG2	top	0.0.0	0.0.0.1	
# ::edge	float-01	manner	careful	0.0.0	0.0.0.2	
# ::edge	result-01	ARG1	transfer-01	0.1	0	
# ::edge	transfer-01	ARG1	pattern-01	0	0.0	
# ::edge	transfer-01	ARG2	paper	0	0.2	
(t2 / transfer-01 
      :ARG1 (p2 / pattern-01 
            :ARG0-of (f / float-01 
                  :ARG1 (i / it) 
                  :ARG2 (t / top) 
                  :manner (c / careful))) 
      :ARG1-of (r / result-01) 
      :ARG2 (p / paper))

# ::snt float apple mixture on surface
# ::tok float apple mixture on surface
# ::alignments 4-5|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:58.834
# ::node	0	float-01	0-1
# ::node	0.0	surface	4-5
# ::root	0	float-01
# ::edge	float-01	ARG1	surface	0	0.0	
(f / float-01 
      :ARG1 (s / surface))

# ::snt eventually the lake was deep enough to float the ice dam and the waters poured out in a catastrophic flood that left ripples and canyons in the landscape miles across
# ::tok eventually the lake was deep enough to float the ice dam and the waters poured out in a catastrophic flood that left ripples and canyons in the landscape miles across
# ::alignments 29-30|0.0.0.2.0 28-29|0.0.0.2.1.0+0.0.0.2.1 23-24|0.0.0.2 19-20|0.2 18-19|0.2.0 14-15|0 13-14|0.1 11-12|0.0 10-11|0.0.0.1 9-10|0.0.0.1.0 7-8|0.0.0 5-6|0.0.0.3.0 4-5|0.0.0.3 2-3|0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:14:59.565
# ::node	0	pour-01	14-15
# ::node	0.0	and	11-12
# ::node	0.0.0	float-01	7-8
# ::node	0.0.0.0	lake	2-3
# ::node	0.0.0.0.0	eventual	0-1
# ::node	0.0.0.1	dam	10-11
# ::node	0.0.0.1.0	ice	9-10
# ::node	0.0.0.2	and	23-24
# ::node	0.0.0.2.0	across	29-30
# ::node	0.0.0.2.1	distance-quantity	28-29
# ::node	0.0.0.2.1.0	mile	28-29
# ::node	0.0.0.3	deep	4-5
# ::node	0.0.0.3.0	enough	5-6
# ::node	0.1	water	13-14
# ::node	0.2	flood-01	19-20
# ::node	0.2.0	catastrophic	18-19
# ::root	0	pour-01
# ::edge	and	location	across	0.0.0.2	0.0.0.2.0	
# ::edge	and	op1	float-01	0.0.0.2	0.0.0	
# ::edge	deep	degree	enough	0.0.0.3	0.0.0.3.0	
# ::edge	deep	purpose	float-01	0.0.0.3	0.0.0	
# ::edge	distance-quantity	location	and	0.0.0.2.1	0.0.0.2	
# ::edge	distance-quantity	unit	mile	0.0.0.2.1	0.0.0.2.1.0	
# ::edge	float-01	ARG0	lake	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	and	0.0.0	0.0	
# ::edge	float-01	ARG2	dam	0.0.0	0.0.0.1	
# ::edge	flood-01	mod	catastrophic	0.2	0.2.0	
# ::edge	ice	consist	dam	0.0.0.1.0	0.0.0.1	
# ::edge	lake	mod	eventual	0.0.0.0	0.0.0.0.0	
# ::edge	pour-01	ARG0	and	0	0.0	
# ::edge	pour-01	ARG1	water	0	0.1	
# ::edge	pour-01	time	flood-01	0	0.2	
(p / pour-01 
      :ARG0 (a3 / and 
            :ARG1-of (f2 / float-01 
                  :ARG0 (l / lake 
                        :mod (e2 / eventual)) 
                  :ARG2 (d2 / dam 
                        :consist-of (i / ice)) 
                  :op-of (a2 / and 
                        :location (a / across) 
                        :location-of (d / distance-quantity 
                              :unit (m / mile))) 
                  :purpose-of (d3 / deep 
                        :degree (e / enough)))) 
      :ARG1 (w / water) 
      :time (f / flood-01 
            :mod (c / catastrophic)))

# ::snt his interest in a technique of piano pedaling that would approximate breathing his wish for a music whose harmonic progressions although they might sound stifled in the concert hall would once out of doors enter into a collaboration with the open air and float joyfully over the tops of the trees his piano preludes whose titles voiles le vent dans la plaine les sons et les parfums tournent dans lair du soir ce qua vu le vent douest brouillards and so on repeatedly made aerial references the recollections by gabriel pierneacute
# ::tok his interest in a technique of piano pedaling that would approximate breathing his wish for a music whose harmonic progressions although they might sound stifled in the concert hall would once out of doors enter into a collaboration with the open air and float joyfully over the tops of the trees his piano preludes whose titles voiles le vent dans la plaine les sons et les parfums tournent dans lair du soir ce qua vu le vent douest brouillards and so on repeatedly made aerial references the recollections by gabriel pierneacute
# ::alignments 85-86|0 84-85|0.1 82-83|0.2.0 80-81|0.2.0.0 79-80|0.2 76-77|0.0.0.0.1.2.0.0 68-69|0.0.0.1.1.0.0+0.0.0.1.1.0+0.0.0.1.1 63-64|0.0.1+0.0 60-61|0.0.0 59-60|0.0.0.1.0.0+0.0.0.1.0+0.0.0.1 58-59|0.0.0.0 55-56|0.0.0.0.1.2.0 52-53|0.0.0.0.1.2.0.0.0 50-51|0.0.0.0.0 43-44|0.0.0.0.1.2.2.0 42-43|0.0.0.0.1.2.2 41-42|0.0.0.0.1.1 37-38|0.0.0.0.1 34-35|0.0.0.0.1.2 33-34|0.0.0.0.1.2.1 30-31|0.0.0.0.1.2.2.0.0 28-29|0.0.0.0.1.0 23-24|0.0.0.0.1.2.2.0.1.1.0.0.0.0 21-22|0.0.0.0.1.2.2.0.1.1.0.0.0 16-17|0.0.0.0.1.2.2.0.1.1.0.0.1 13-14|0.0.0.0.1.2.2.0.1.1.0.0 11-12|0.0.0.0.1.2.2.0.1.1.0 10-11|0.0.0.0.1.2.2.0.1.1.0.1 6-7|0.0.0.0.1.2.2.0.1.0 4-5|0.0.0.0.1.2.2.0.1.1 1-2|0.0.0.0.1.2.2.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:03.169
# ::node	0	reference-01	85-86
# ::node	0.0	have-rel-role-91	63-64
# ::node	0.0.0	"la"	60-61
# ::node	0.0.0.0	vent-00	58-59
# ::node	0.0.0.0.0	tree	50-51
# ::node	0.0.0.0.1	collaborate-01	37-38
# ::node	0.0.0.0.1.0	hall	28-29
# ::node	0.0.0.0.1.1	air	41-42
# ::node	0.0.0.0.1.2	enter-01	34-35
# ::node	0.0.0.0.1.2.0	title	55-56
# ::node	0.0.0.0.1.2.0.0	vent-00	76-77
# ::node	0.0.0.0.1.2.0.0.0	piano	52-53
# ::node	0.0.0.0.1.2.1	door	33-34
# ::node	0.0.0.0.1.2.2	and	42-43
# ::node	0.0.0.0.1.2.2.0	float-01	43-44
# ::node	0.0.0.0.1.2.2.0.0	once	30-31
# ::node	0.0.0.0.1.2.2.0.1	interest-01	1-2
# ::node	0.0.0.0.1.2.2.0.1.0	piano	6-7
# ::node	0.0.0.0.1.2.2.0.1.1	technique	4-5
# ::node	0.0.0.0.1.2.2.0.1.1.0	breathe-01	11-12
# ::node	0.0.0.0.1.2.2.0.1.1.0.0	wish-01	13-14
# ::node	0.0.0.0.1.2.2.0.1.1.0.0.0	they	21-22
# ::node	0.0.0.0.1.2.2.0.1.1.0.0.0.0	sound	23-24
# ::node	0.0.0.0.1.2.2.0.1.1.0.0.1	music	16-17
# ::node	0.0.0.0.1.2.2.0.1.1.0.1	approximately	10-11
# ::node	0.0.0.1	government-organization	59-60
# ::node	0.0.0.1.0	name	59-60
# ::node	0.0.0.1.0.0	"DANS"	59-60
# ::node	0.0.0.1.1	government-organization	68-69
# ::node	0.0.0.1.1.0	name	68-69
# ::node	0.0.0.1.1.0.0	"DANS"	68-69
# ::node	0.0.1	son	63-64
# ::node	0.1	aerial	84-85
# ::node	0.2	and	79-80
# ::node	0.2.0	repeat-01	82-83
# ::node	0.2.0.0	so	80-81
# ::root	0	reference-01
# ::edge	and	op1	enter-01	0.0.0.0.1.2.2	0.0.0.0.1.2	
# ::edge	and	op1	reference-01	0.2	0	
# ::edge	and	op2	float-01	0.0.0.0.1.2.2	0.0.0.0.1.2.2.0	
# ::edge	breathe-01	ARG0	technique	0.0.0.0.1.2.2.0.1.1.0	0.0.0.0.1.2.2.0.1.1	
# ::edge	breathe-01	ARG1	wish-01	0.0.0.0.1.2.2.0.1.1.0	0.0.0.0.1.2.2.0.1.1.0.0	
# ::edge	breathe-01	mod	approximately	0.0.0.0.1.2.2.0.1.1.0	0.0.0.0.1.2.2.0.1.1.0.1	
# ::edge	collaborate-01	ARG0	hall	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	collaborate-01	ARG1	air	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	collaborate-01	ARG2	vent-00	0.0.0.0.1	0.0.0.0	
# ::edge	enter-01	ARG0	title	0.0.0.0.1.2	0.0.0.0.1.2.0	
# ::edge	enter-01	ARG1	door	0.0.0.0.1.2	0.0.0.0.1.2.1	
# ::edge	enter-01	manner	collaborate-01	0.0.0.0.1.2	0.0.0.0.1	
# ::edge	float-01	ARG0	once	0.0.0.0.1.2.2.0	0.0.0.0.1.2.2.0.0	
# ::edge	float-01	ARG1	interest-01	0.0.0.0.1.2.2.0	0.0.0.0.1.2.2.0.1	
# ::edge	government-organization	mod	"la"	0.0.0.1	0.0.0	
# ::edge	government-organization	name	name	0.0.0.1	0.0.0.1.0	
# ::edge	government-organization	name	name	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	government-organization	part	government-organization	0.0.0.1.1	0.0.0.1	
# ::edge	have-rel-role-91	ARG1	"la"	0.0	0.0.0	
# ::edge	have-rel-role-91	ARG2	son	0.0	0.0.1	
# ::edge	interest-01	ARG1	piano	0.0.0.0.1.2.2.0.1	0.0.0.0.1.2.2.0.1.0	
# ::edge	interest-01	ARG2	technique	0.0.0.0.1.2.2.0.1	0.0.0.0.1.2.2.0.1.1	
# ::edge	name	op1	"DANS"	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	name	op1	"DANS"	0.0.0.1.1.0	0.0.0.1.1.0.0	
# ::edge	reference-01	ARG1	have-rel-role-91	0	0.0	
# ::edge	reference-01	mod	aerial	0	0.1	
# ::edge	repeat-01	ARG0	so	0.2.0	0.2.0.0	
# ::edge	repeat-01	ARG1	and	0.2.0	0.2	
# ::edge	sound	ARG0	they	0.0.0.0.1.2.2.0.1.1.0.0.0.0	0.0.0.0.1.2.2.0.1.1.0.0.0	
# ::edge	vent-00	ARG0	piano	0.0.0.0.1.2.0.0	0.0.0.0.1.2.0.0.0	
# ::edge	vent-00	ARG0	tree	0.0.0.0	0.0.0.0.0	
# ::edge	vent-00	ARG1	"la"	0.0.0.0	0.0.0	
# ::edge	vent-00	ARG1	title	0.0.0.0.1.2.0.0	0.0.0.0.1.2.0	
# ::edge	wish-01	ARG0	they	0.0.0.0.1.2.2.0.1.1.0.0	0.0.0.0.1.2.2.0.1.1.0.0.0	
# ::edge	wish-01	ARG1	music	0.0.0.0.1.2.2.0.1.1.0.0	0.0.0.0.1.2.2.0.1.1.0.0.1	
(r / reference-01 
      :ARG1 (h / have-rel-role-91 
            :ARG1 (l / "la" 
                  :ARG1-of (v2 / vent-00 
                        :ARG0 (t2 / tree) 
                        :ARG2-of (c / collaborate-01 
                              :ARG0 (h2 / hall) 
                              :ARG1 (a4 / air) 
                              :manner-of (e / enter-01 
                                    :ARG0 (t / title 
                                          :ARG1-of (v / vent-00 
                                                :ARG0 (p / piano))) 
                                    :ARG1 (d / door) 
                                    :op-of (a3 / and 
                                          :op1 (f / float-01 
                                                :ARG0 (o / once) 
                                                :ARG1 (i / interest-01 
                                                      :ARG1 (p2 / piano) 
                                                      :ARG2 (t4 / technique 
                                                            :ARG0-of (b / breathe-01 
                                                                  :ARG1 (w / wish-01 
                                                                        :ARG0 (t3 / they 
                                                                              :ARG0-of (s3 / sound)) 
                                                                        :ARG1 (m / music)) 
                                                                  :mod (a5 / approximately))))))))) 
                  :mod-of (g2 / government-organization 
                        :name (n2 / name 
                              :op1 "DANS") 
                        :part-of (g / government-organization 
                              :name (n / name 
                                    :op1 "DANS")))) 
            :ARG2 (s2 / son)) 
      :mod (a / aerial) 
      :op-of (a2 / and 
            :ARG1-of (r2 / repeat-01 
                  :ARG0 (s / so))))

# ::snt senior ministers said the plans would involve a quarter of the countrys stateowned assets and that in the next five years about 600million worth of utilities would be floated on the exchange
# ::tok senior ministers said the plans would involve a quarter of the countrys stateowned assets and that in the next five years about 600million worth of utilities would be floated on the exchange
# ::alignments 31-32|0.1.1.1 28-29|0.1.1 23-24|0.0 20-21|0.1.1.1.0.0+0.1.1.1.0.0.0 19-20|0.1.1.1.0.0.0.0 18-19|0.1.1.1.0 14-15|0.1 13-14|0.1.1.0 6-7|0.1.0 4-5|0.1.0.0 2-3|0 1-2|0.0.0.0+0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:03.488
# ::node	0	say-01	2-3
# ::node	0.0	worth	23-24
# ::node	0.0.0	have-org-role-91	1-2
# ::node	0.0.0.0	minister	1-2
# ::node	0.0.0.0.0	senior	0-1
# ::node	0.1	and	14-15
# ::node	0.1.0	involve-01	6-7
# ::node	0.1.0.0	plan-01	4-5
# ::node	0.1.1	float-01	28-29
# ::node	0.1.1.0	asset	13-14
# ::node	0.1.1.1	exchange-01	31-32
# ::node	0.1.1.1.0	next	18-19
# ::node	0.1.1.1.0.0	year	20-21
# ::node	0.1.1.1.0.0.0	temporal-quantity	20-21
# ::node	0.1.1.1.0.0.0.0	5	19-20
# ::root	0	say-01
# ::edge	and	op1	involve-01	0.1	0.1.0	
# ::edge	and	op2	float-01	0.1	0.1.1	
# ::edge	exchange-01	ARG1	next	0.1.1.1	0.1.1.1.0	
# ::edge	float-01	ARG1	asset	0.1.1	0.1.1.0	
# ::edge	float-01	ARG2	exchange-01	0.1.1	0.1.1.1	
# ::edge	have-org-role-91	ARG1	worth	0.0.0	0.0	
# ::edge	have-org-role-91	ARG2	minister	0.0.0	0.0.0.0	
# ::edge	involve-01	ARG0	plan-01	0.1.0	0.1.0.0	
# ::edge	minister	mod	senior	0.0.0.0	0.0.0.0.0	
# ::edge	say-01	ARG0	worth	0	0.0	
# ::edge	say-01	ARG1	and	0	0.1	
# ::edge	temporal-quantity	quant	5	0.1.1.1.0.0.0	0.1.1.1.0.0.0.0	
# ::edge	temporal-quantity	unit	year	0.1.1.1.0.0.0	0.1.1.1.0.0	
# ::edge	year	mod	next	0.1.1.1.0.0	0.1.1.1.0	
(s / say-01 
      :ARG0 (w / worth 
            :ARG1-of (h / have-org-role-91 
                  :ARG2 (m / minister 
                        :mod (s2 / senior)))) 
      :ARG1 (a / and 
            :op1 (i / involve-01 
                  :ARG0 (p / plan-01)) 
            :op2 (f / float-01 
                  :ARG1 (a2 / asset) 
                  :ARG2 (e / exchange-01 
                        :ARG1 (n / next 
                              :mod-of (y / year 
                                    :unit-of (t / temporal-quantity 
                                          :quant 5)))))))

# ::snt her reworking of voltaires parable on the evils of paternalistic government was coloured by her own experiences under the mccarthy witchhunt trials and where voltaire floated social criticism through the effervescent medium of ridicule hellmans attack was weightier
# ::tok her reworking of voltaires parable on the evils of paternalistic government was coloured by her own experiences under the mccarthy witchhunt trials and where voltaire floated social criticism through the effervescent medium of ridicule hellmans attack was weightier
# ::alignments 35-36|0.1.0 33-34|0.1.0.0 31-32|0.2 27-28|0 26-27|0.0 25-26|0.1 22-23|0.1.0.1 21-22|0.1.0.1.0 20-21|0.1.0.1.0.1 16-17|0.1.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:03.646
# ::node	0	criticize-01	27-28
# ::node	0.0	society	26-27
# ::node	0.1	float-01	25-26
# ::node	0.1.0	attack-01	35-36
# ::node	0.1.0.0	ridicule-01	33-34
# ::node	0.1.0.1	and	22-23
# ::node	0.1.0.1.0	trial	21-22
# ::node	0.1.0.1.0.0	experience-01	16-17
# ::node	0.1.0.1.0.1	witchhunt	20-21
# ::node	0.2	medium	31-32
# ::root	0	criticize-01
# ::edge	and	op1	trial	0.1.0.1	0.1.0.1.0	
# ::edge	and	op2	attack-01	0.1.0.1	0.1.0	
# ::edge	attack-01	ARG1	ridicule-01	0.1.0	0.1.0.0	
# ::edge	criticize-01	ARG0	society	0	0.0	
# ::edge	criticize-01	ARG2	medium	0	0.2	
# ::edge	experience-01	ARG1	trial	0.1.0.1.0.0	0.1.0.1.0	
# ::edge	float-01	ARG0	attack-01	0.1	0.1.0	
# ::edge	float-01	ARG1	criticize-01	0.1	0	
# ::edge	trial	mod	witchhunt	0.1.0.1.0	0.1.0.1.0.1	
(c / criticize-01 
      :ARG0 (s / society) 
      :ARG1-of (f / float-01 
            :ARG0 (a / attack-01 
                  :ARG1 (r / ridicule-01) 
                  :op-of (a2 / and 
                        :op1 (t / trial 
                              :ARG1-of (e / experience-01) 
                              :mod (w / witchhunt))))) 
      :ARG2 (m / medium))

# ::snt consider a rebel stretch of human dna that is capable of snipping itself out of its chromosome floating freely in the cell perhaps multiplying itself up into many copies and then splicing itself into another chromosome
# ::tok consider a rebel stretch of human dna that is capable of snipping itself out of its chromosome floating freely in the cell perhaps multiplying itself up into many copies and then splicing itself into another chromosome
# ::alignments 34-35|0.0.0 30-31|0.3 29-30|0 28-29|0.2 27-28|0.2.1 22-23|0.0.1.1.0 21-22|0.1.0 18-19|0.1.1 17-18|0.1 9-10|0.0 5-6|0.2.0 3-4|0.0.1.2+0.0.1 2-3|0.0.1.0 0-1|0.0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:03.812
# ::node	0	and	29-30
# ::node	0.0	capable-41	9-10
# ::node	0.0.0	another	34-35
# ::node	0.0.1	thing	3-4
# ::node	0.0.1.0	rebel-01	2-3
# ::node	0.0.1.1	consider-02	0-1
# ::node	0.0.1.1.0	perhaps	22-23
# ::node	0.0.1.2	stretch-01	3-4
# ::node	0.1	float-01	17-18
# ::node	0.1.0	cell	21-22
# ::node	0.1.1	free	18-19
# ::node	0.2	copy-01	28-29
# ::node	0.2.0	human	5-6
# ::node	0.2.1	many	27-28
# ::node	0.3	then	30-31
# ::root	0	and
# ::edge	and	condition	float-01	0	0.1	
# ::edge	and	op1	copy-01	0	0.2	
# ::edge	and	time	then	0	0.3	
# ::edge	capable-41	ARG0	another	0.0	0.0.0	
# ::edge	capable-41	ARG1	and	0.0	0	
# ::edge	capable-41	ARG2	thing	0.0	0.0.1	
# ::edge	consider-02	ARG0	perhaps	0.0.1.1	0.0.1.1.0	
# ::edge	consider-02	ARG1	thing	0.0.1.1	0.0.1	
# ::edge	copy-01	ARG1	human	0.2	0.2.0	
# ::edge	copy-01	quant	many	0.2	0.2.1	
# ::edge	float-01	ARG1	cell	0.1	0.1.0	
# ::edge	float-01	manner	free	0.1	0.1.1	
# ::edge	rebel-01	ARG0	thing	0.0.1.0	0.0.1	
# ::edge	stretch-01	ARG1	thing	0.0.1.2	0.0.1	
(a2 / and 
      :ARG1-of (c3 / capable-41 
            :ARG0 (a / another) 
            :ARG2 (t2 / thing 
                  :ARG0-of (r / rebel-01) 
                  :ARG1-of (c4 / consider-02 
                        :ARG0 (p / perhaps)) 
                  :ARG1-of (s / stretch-01))) 
      :condition (f2 / float-01 
            :ARG1 (c2 / cell) 
            :manner (f / free)) 
      :op1 (c / copy-01 
            :ARG1 (h / human) 
            :quant (m / many)) 
      :time (t / then))

# ::snt it has followed that advice to the letter allowing the currency to float flooding the market with gold and in the process wiping out the countrys once deeprooted blackmarket economy
# ::tok it has followed that advice to the letter allowing the currency to float flooding the market with gold and in the process wiping out the countrys once deeprooted blackmarket economy
# ::alignments 29-30|0.1.1 26-27|0.0.2.0.1.0 22-23|0.1 21-22|0.1.0 18-19|0 17-18|0.0.1.1.0 15-16|0.0.1.1 13-14|0.0.1 12-13|0.0 10-11|0.0.1.0 8-9|0.0.2 7-8|0.0.0 4-5|0.0.2.0.1 2-3|0.0.2.0.0 0-1|0.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:04.385
# ::node	0	and	18-19
# ::node	0.0	float-01	12-13
# ::node	0.0.0	letter	7-8
# ::node	0.0.1	flood-01	13-14
# ::node	0.0.1.0	currency	10-11
# ::node	0.0.1.1	market	15-16
# ::node	0.0.1.1.0	gold	17-18
# ::node	0.0.2	allow-01	8-9
# ::node	0.0.2.0	it	0-1
# ::node	0.0.2.0.0	follow-01	2-3
# ::node	0.0.2.0.1	advise-01	4-5
# ::node	0.0.2.0.1.0	once	26-27
# ::node	0.1	wipe-02	22-23
# ::node	0.1.0	process	21-22
# ::node	0.1.1	economy	29-30
# ::root	0	and
# ::edge	advise-01	ARG0	it	0.0.2.0.1	0.0.2.0	
# ::edge	advise-01	ARG1	once	0.0.2.0.1	0.0.2.0.1.0	
# ::edge	allow-01	ARG0	it	0.0.2	0.0.2.0	
# ::edge	allow-01	ARG1	float-01	0.0.2	0.0	
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op2	wipe-02	0	0.1	
# ::edge	float-01	ARG0	letter	0.0	0.0.0	
# ::edge	float-01	ARG1	flood-01	0.0	0.0.1	
# ::edge	flood-01	ARG0	currency	0.0.1	0.0.1.0	
# ::edge	flood-01	ARG1	market	0.0.1	0.0.1.1	
# ::edge	follow-01	ARG0	it	0.0.2.0.0	0.0.2.0	
# ::edge	market	location	gold	0.0.1.1	0.0.1.1.0	
# ::edge	wipe-02	ARG0	process	0.1	0.1.0	
# ::edge	wipe-02	ARG1	economy	0.1	0.1.1	
(a / and 
      :op1 (f2 / float-01 
            :ARG0 (l / letter) 
            :ARG1 (f / flood-01 
                  :ARG0 (c / currency) 
                  :ARG1 (m / market 
                        :location (g / gold))) 
            :ARG1-of (a2 / allow-01 
                  :ARG0 (i / it 
                        :ARG0-of (f3 / follow-01) 
                        :ARG0-of (a3 / advise-01 
                              :ARG1 (o / once))))) 
      :op2 (w / wipe-02 
            :ARG0 (p / process) 
            :ARG1 (e / economy)))

# ::snt he opened the door to let them float down upon the universe
# ::tok he opened the door to let them float down upon the universe
# ::alignments 11-12|0.0.0.0.0 8-9|0.0.0.0.1 7-8|0.0.0.0 5-6|0.0.0 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:04.410
# ::node	0	open-01	1-2
# ::node	0.0	he	0-1
# ::node	0.0.0	let-01	5-6
# ::node	0.0.0.0	float-01	7-8
# ::node	0.0.0.0.0	universe	11-12
# ::node	0.0.0.0.1	down	8-9
# ::node	0.1	door	3-4
# ::root	0	open-01
# ::edge	float-01	ARG1	universe	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG2	down	0.0.0.0	0.0.0.0.1	
# ::edge	let-01	ARG0	he	0.0.0	0.0	
# ::edge	let-01	ARG1	float-01	0.0.0	0.0.0.0	
# ::edge	open-01	ARG0	he	0	0.0	
# ::edge	open-01	ARG1	door	0	0.1	
(o / open-01 
      :ARG0 (h / he 
            :ARG0-of (l / let-01 
                  :ARG1 (f / float-01 
                        :ARG1 (u / universe) 
                        :ARG2 (d / down)))) 
      :ARG1 (d2 / door))

# ::snt it is inevitable that once the water industry is floated and begins to unravel into the ready made sector it is there will be clear winners and losers in terms of share price performance
# ::tok it is inevitable that once the water industry is floated and begins to unravel into the ready made sector it is there will be clear winners and losers in terms of share price performance
# ::alignments 33-34|0.0.0.0.1.1.0 32-33|0.0.0.0.1.1.0.0.0+0.0.0.0.1.1.0.0 31-32|0.0.0.0.1.1.0.1 29-30|0.0.0.0.1.1.0.2 26-27|0 24-25|0.0.0.0.0 19-20|0.0.0.0.1.1.1.0 18-19|0.0.0 16-17|0.0 13-14|0.0.0.0 11-12|0.0.0.0.1 10-11|0.0.0.0.1.1 9-10|0.0.0.0.1.1.1 7-8|0.0.0.0.1.1.1.1 6-7|0.0.0.0.1.1.1.1.0 4-5|0.0.0.0.1.1.1.2 2-3|0.0.0.0.1.0.0 0-1|0.0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:04.973
# ::node	0	and	26-27
# ::node	0.0	ready-01	16-17
# ::node	0.0.0	sector	18-19
# ::node	0.0.0.0	unravel-01	13-14
# ::node	0.0.0.0.0	clear	24-25
# ::node	0.0.0.0.1	begin-01	11-12
# ::node	0.0.0.0.1.0	it	0-1
# ::node	0.0.0.0.1.0.0	inevitable	2-3
# ::node	0.0.0.0.1.1	and	10-11
# ::node	0.0.0.0.1.1.0	perform-01	33-34
# ::node	0.0.0.0.1.1.0.0	thing	32-33
# ::node	0.0.0.0.1.1.0.0.0	price-01	32-33
# ::node	0.0.0.0.1.1.0.1	share-01	31-32
# ::node	0.0.0.0.1.1.0.2	term	29-30
# ::node	0.0.0.0.1.1.1	float-01	9-10
# ::node	0.0.0.0.1.1.1.0	it	19-20
# ::node	0.0.0.0.1.1.1.1	industry	7-8
# ::node	0.0.0.0.1.1.1.1.0	water	6-7
# ::node	0.0.0.0.1.1.1.2	once	4-5
# ::root	0	and
(a / and 
      :ARG2-of (r / ready-01 
            :ARG1 (s2 / sector 
                  :ARG2-of (u / unravel-01 
                        :ARG1 (c / clear) 
                        :ARG1-of (b / begin-01 
                              :ARG0 (i4 / it 
                                    :domain-of (i3 / inevitable)) 
                              :op-of (a2 / and 
                                    :ARG0-of (p / perform-01 
                                          :ARG1 (t / thing 
                                                :ARG2-of (p2 / price-01)) 
                                          :ARG1-of (s / share-01) 
                                          :mod-of (t2 / term)) 
                                    :op1 (f / float-01 
                                          :ARG0 (i / it) 
                                          :ARG1 (i2 / industry 
                                                :mod (w / water)) 
                                          :op-of (o / once))))))))

# ::snt pour the soup into soup cups add the mussels and float the eggcream glaze over the surface
# ::tok pour the soup into soup cups add the mussels and float the eggcream glaze over the surface
# ::alignments 16-17|0.0.0.1 10-11|0.0.1 9-10|0.0 6-7|0.0.0 5-6|0.0.1.0 4-5|0.0.1.0.0 2-3|0.0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:05.059
# ::node	0	pour-01	0-1
# ::node	0.0	and	9-10
# ::node	0.0.0	add-02	6-7
# ::node	0.0.0.0	soup	2-3
# ::node	0.0.0.1	surface	16-17
# ::node	0.0.1	float-01	10-11
# ::node	0.0.1.0	cup	5-6
# ::node	0.0.1.0.0	soup	4-5
# ::root	0	pour-01
# ::edge	add-02	ARG0	soup	0.0.0	0.0.0.0	
# ::edge	add-02	ARG1	surface	0.0.0	0.0.0.1	
# ::edge	and	op1	add-02	0.0	0.0.0	
# ::edge	and	op2	float-01	0.0	0.0.1	
# ::edge	cup	mod	soup	0.0.1.0	0.0.1.0.0	
# ::edge	float-01	ARG0	cup	0.0.1	0.0.1.0	
# ::edge	pour-01	ARG1	and	0	0.0	
(p / pour-01 
      :ARG1 (a / and 
            :op1 (a2 / add-02 
                  :ARG0 (s3 / soup) 
                  :ARG1 (s / surface)) 
            :op2 (f / float-01 
                  :ARG0 (c / cup 
                        :mod (s2 / soup)))))

# ::snt unfortunately i also notice a child who floats free of the glorious blue cape
# ::tok unfortunately i also notice a child who floats free of the glorious blue cape
# ::alignments 12-13|0 11-12|0.0.1 8-9|0.0.0.0.0.0 7-8|0.0.0.0 5-6|0.0.0.0.0 3-4|0.0.0.1.0 2-3|0.0.0.1 1-2|0.0.0 0-1|0.0.2+0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:05.133
# ::node	0	blue	12-13
# ::node	0.0	fortunate-41	0-1
# ::node	0.0.0	i	1-2
# ::node	0.0.0.0	float-01	7-8
# ::node	0.0.0.0.0	child	5-6
# ::node	0.0.0.0.0.0	free-41	8-9
# ::node	0.0.0.1	also	2-3
# ::node	0.0.0.1.0	notice	3-4
# ::node	0.0.1	glorious	11-12
# ::node	0.0.2	-	0-1
# ::root	0	blue
# ::edge	blue	op1	fortunate-41	0	0.0	
# ::edge	float-01	ARG0	child	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG1	i	0.0.0.0	0.0.0	
# ::edge	fortunate-41	ARG2	i	0.0	0.0.0	
# ::edge	fortunate-41	polarity	-	0.0	0.0.2	
# ::edge	free-41	ARG1	child	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	glorious	op1	fortunate-41	0.0.1	0.0	
# ::edge	i	mod	also	0.0.0	0.0.0.1	
# ::edge	notice	mod	also	0.0.0.1.0	0.0.0.1	
(b / blue 
      :op1 (f3 / fortunate-41 
            :ARG2 (i / i 
                  :ARG1-of (f2 / float-01 
                        :ARG0 (c / child 
                              :ARG1-of (f / free-41))) 
                  :mod (a / also 
                        :mod-of (n / notice))) 
            :op-of (g / glorious) 
            :polarity -))

# ::snt floating crust writes peter stone
# ::tok floating crust writes peter stone
# ::alignments 4-5|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:05.141
# ::node	0	write-01	2-3
# ::node	0.0	float-01	0-1
# ::node	0.1	stone	4-5
# ::root	0	write-01
# ::edge	write-01	ARG0	float-01	0	0.0	
# ::edge	write-01	ARG1	stone	0	0.1	
(w / write-01 
      :ARG0 (f / float-01) 
      :ARG1 (s / stone))

# ::snt it floats two or three inches high because the sculpture is placed on creosoted wooden blocks
# ::tok it floats two or three inches high because the sculpture is placed on creosoted wooden blocks
# ::alignments 15-16|0.0.0 14-15|0.0.0.0 11-12|0.0 7-8|0 6-7|0.1.0.0 5-6|0.1.2.0.1+0.1.2.0 4-5|0.1.2.0.0 3-4|0.1.2 2-3|0.1.1 1-2|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:05.195
# ::node	0	cause-01	7-8
# ::node	0.0	place-01	11-12
# ::node	0.0.0	block	15-16
# ::node	0.0.0.0	wood	14-15
# ::node	0.1	float-01	1-2
# ::node	0.1.0	it	0-1
# ::node	0.1.0.0	high	6-7
# ::node	0.1.1	2	2-3
# ::node	0.1.2	or	3-4
# ::node	0.1.2.0	distance-quantity	5-6
# ::node	0.1.2.0.0	3	4-5
# ::node	0.1.2.0.1	inch	5-6
# ::root	0	cause-01
# ::edge	block	mod	wood	0.0.0	0.0.0.0	
# ::edge	cause-01	ARG0	place-01	0	0.0	
# ::edge	cause-01	ARG1	float-01	0	0.1	
# ::edge	distance-quantity	quant	3	0.1.2.0	0.1.2.0.0	
# ::edge	distance-quantity	unit	inch	0.1.2.0	0.1.2.0.1	
# ::edge	float-01	ARG0	it	0.1	0.1.0	
# ::edge	float-01	ARG1	2	0.1	0.1.1	
# ::edge	high	domain	it	0.1.0.0	0.1.0	
# ::edge	or	op1	float-01	0.1.2	0.1	
# ::edge	or	op2	distance-quantity	0.1.2	0.1.2.0	
# ::edge	place-01	ARG2	block	0.0	0.0.0	
(c / cause-01 
      :ARG0 (p / place-01 
            :ARG2 (b / block 
                  :mod (w / wood))) 
      :ARG1 (f / float-01 
            :ARG0 (i2 / it 
                  :domain-of (h / high)) 
            :ARG1 2 
            :op-of (o / or 
                  :op1 (d / distance-quantity 
                        :quant 3 
                        :unit (i / inch)))))

# ::snt it began great britain has floated for two generations on a sea of illusions
# ::tok it began great britain has floated for two generations on a sea of illusions
# ::alignments 13-14|0.1.1.0.0 11-12|0.1.1.0 8-9|0.1.1 7-8|0.1.1.1 5-6|0.1 3-4|0.1.0.1.0+0.1.0.1+0.1.0 2-3|0.1.0.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:05.238
# ::node	0	begin-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	float-01	5-6
# ::node	0.1.0	country	3-4
# ::node	0.1.0.0	great	2-3
# ::node	0.1.0.1	name	3-4
# ::node	0.1.0.1.0	"Britain"	3-4
# ::node	0.1.1	generation	8-9
# ::node	0.1.1.0	sea	11-12
# ::node	0.1.1.0.0	illusion	13-14
# ::node	0.1.1.1	2	7-8
# ::root	0	begin-01
# ::edge	begin-01	ARG0	it	0	0.0	
# ::edge	begin-01	ARG1	float-01	0	0.1	
# ::edge	country	mod	great	0.1.0	0.1.0.0	
# ::edge	country	name	name	0.1.0	0.1.0.1	
# ::edge	float-01	ARG0	country	0.1	0.1.0	
# ::edge	float-01	ARG1	generation	0.1	0.1.1	
# ::edge	generation	quant	2	0.1.1	0.1.1.1	
# ::edge	name	op1	"Britain"	0.1.0.1	0.1.0.1.0	
# ::edge	sea	consist	generation	0.1.1.0	0.1.1	
# ::edge	sea	location	illusion	0.1.1.0	0.1.1.0.0	
(b / begin-01 
      :ARG0 (i2 / it) 
      :ARG1 (f / float-01 
            :ARG0 (c / country 
                  :mod (g2 / great) 
                  :name (n / name 
                        :op1 "Britain")) 
            :ARG1 (g / generation 
                  :consist-of (s / sea 
                        :location (i / illusion)) 
                  :quant 2)))

# ::snt just at the moment when the establishment figures on both sides of the atlantic were talking about substantial cuts in military spending when the role of the hawkish political leaders was being eclipsed when the united states seemed to be floating away from its international role and new selfconfident europe seemed to be on the verge of creation iraq invaded kuwait
# ::tok just at the moment when the establishment figures on both sides of the atlantic were talking about substantial cuts in military spending when the role of the hawkish political leaders was being eclipsed when the united states seemed to be floating away from its international role and new selfconfident europe seemed to be on the verge of creation iraq invaded kuwait
# ::alignments 59-60|0.3.0.0.0 57-58|0.3.0.0.0.0.0 55-56|0.3.0.0.0.0 50-51|0.3.0.2.1.0 49-50|0.3.0.2.1.1.1.0+0.3.0.2.1.1.1+0.3.0.2.1.1 47-48|0.3.0.2.1.1.0 46-47|0.3.0.2.1 45-46|0.3.0.2 44-45|0.3.0.2.0 41-42|0.3.0.1 40-41|0.3.0 37-38|0.3 35-37|0.3.0.0.1.0+0.3.0.0.1.1+0.3.0.0.1+0.3.0.0 32-33|0 29-30|0.1.0.0+0.1.0 28-29|0.1.0.1 24-25|0.1 21-22|0.2.1.0 20-21|0.2.1.0.1 18-19|0.2.1 17-18|0.2.1.1 15-16|0.2 10-11|0.0.1 9-10|0.0.1.0 7-8|0.0 6-7|0.0.0 3-4|0.2.0 0-1|0.2.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:06.279
# ::node	0	eclipse-01	32-33
# ::node	0.0	figure	7-8
# ::node	0.0.0	establish-01	6-7
# ::node	0.0.1	side	10-11
# ::node	0.0.1.0	both	9-10
# ::node	0.1	role	24-25
# ::node	0.1.0	person	29-30
# ::node	0.1.0.0	lead-02	29-30
# ::node	0.1.0.1	politics	28-29
# ::node	0.2	talk-01	15-16
# ::node	0.2.0	moment	3-4
# ::node	0.2.1	cut-02	18-19
# ::node	0.2.1.0	spend-01	21-22
# ::node	0.2.1.0.0	just	0-1
# ::node	0.2.1.0.1	military	20-21
# ::node	0.2.1.1	substantial	17-18
# ::node	0.3	seem-01	37-38
# ::node	0.3.0	float-01	40-41
# ::node	0.3.0.0	country	35-37
# ::node	0.3.0.0.0	invade-01	59-60
# ::node	0.3.0.0.0.0	verge-01	55-56
# ::node	0.3.0.0.0.0.0	create-01	57-58
# ::node	0.3.0.0.1	name	35-37
# ::node	0.3.0.0.1.0	"states"	35-37
# ::node	0.3.0.0.1.1	"united"	35-37
# ::node	0.3.0.1	away	41-42
# ::node	0.3.0.2	role	45-46
# ::node	0.3.0.2.0	international	44-45
# ::node	0.3.0.2.1	and	46-47
# ::node	0.3.0.2.1.0	seem-01	50-51
# ::node	0.3.0.2.1.1	continent	49-50
# ::node	0.3.0.2.1.1.0	new	47-48
# ::node	0.3.0.2.1.1.1	name	49-50
# ::node	0.3.0.2.1.1.1.0	"Europe"	49-50
# ::root	0	eclipse-01
# ::edge	and	op1	role	0.3.0.2.1	0.3.0.2	
# ::edge	and	op2	continent	0.3.0.2.1	0.3.0.2.1.1	
# ::edge	continent	mod	new	0.3.0.2.1.1	0.3.0.2.1.1.0	
# ::edge	continent	name	name	0.3.0.2.1.1	0.3.0.2.1.1.1	
# ::edge	country	name	name	0.3.0.0	0.3.0.0.1	
# ::edge	cut-02	ARG1	spend-01	0.2.1	0.2.1.0	
# ::edge	cut-02	degree	substantial	0.2.1	0.2.1.1	
# ::edge	eclipse-01	ARG0	figure	0	0.0	
# ::edge	eclipse-01	ARG1	role	0	0.1	
# ::edge	eclipse-01	time	seem-01	0	0.3	
# ::edge	establish-01	ARG1	figure	0.0.0	0.0	
# ::edge	figure	mod	side	0.0	0.0.1	
# ::edge	float-01	ARG0	country	0.3.0	0.3.0.0	
# ::edge	float-01	ARG2	away	0.3.0	0.3.0.1	
# ::edge	float-01	purpose	role	0.3.0	0.3.0.2	
# ::edge	invade-01	ARG0	country	0.3.0.0.0	0.3.0.0	
# ::edge	lead-02	ARG0	person	0.1.0.0	0.1.0	
# ::edge	name	op1	"Europe"	0.3.0.2.1.1.1	0.3.0.2.1.1.1.0	
# ::edge	name	op1	"states"	0.3.0.0.1	0.3.0.0.1.0	
# ::edge	name	op2	"united"	0.3.0.0.1	0.3.0.0.1.1	
# ::edge	person	mod	politics	0.1.0	0.1.0.1	
# ::edge	role	mod	international	0.3.0.2	0.3.0.2.0	
# ::edge	role	poss	person	0.1	0.1.0	
# ::edge	seem-01	ARG1	and	0.3.0.2.1.0	0.3.0.2.1	
# ::edge	seem-01	ARG1	float-01	0.3	0.3.0	
# ::edge	side	mod	both	0.0.1	0.0.1.0	
# ::edge	spend-01	ARG1	just	0.2.1.0	0.2.1.0.0	
# ::edge	spend-01	ARG4	military	0.2.1.0	0.2.1.0.1	
# ::edge	talk-01	ARG0	moment	0.2	0.2.0	
# ::edge	talk-01	ARG1	cut-02	0.2	0.2.1	
# ::edge	talk-01	purpose	eclipse-01	0.2	0	
# ::edge	verge-01	ARG1	invade-01	0.3.0.0.0.0	0.3.0.0.0	
# ::edge	verge-01	ARG2	create-01	0.3.0.0.0.0	0.3.0.0.0.0.0	
(e / eclipse-01 
      :ARG0 (f2 / figure 
            :ARG1-of (e2 / establish-01) 
            :mod (s5 / side 
                  :mod (b / both))) 
      :ARG1 (r2 / role 
            :poss (p / person 
                  :ARG0-of (l / lead-02) 
                  :mod (p2 / politics))) 
      :purpose-of (t / talk-01 
            :ARG0 (m2 / moment) 
            :ARG1 (c4 / cut-02 
                  :ARG1 (s3 / spend-01 
                        :ARG1 (j / just) 
                        :ARG4 (m / military)) 
                  :degree (s4 / substantial))) 
      :time (s2 / seem-01 
            :ARG1 (f / float-01 
                  :ARG0 (c3 / country 
                        :ARG0-of (i / invade-01 
                              :ARG1-of (v / verge-01 
                                    :ARG2 (c / create-01))) 
                        :name (n3 / name 
                              :op1 "states" 
                              :op2 "united")) 
                  :ARG2 (a2 / away) 
                  :purpose (r / role 
                        :mod (i2 / international) 
                        :op-of (a / and 
                              :ARG1-of (s / seem-01) 
                              :op1 (c2 / continent 
                                    :mod (n2 / new) 
                                    :name (n / name 
                                          :op1 "Europe")))))))

# ::snt theyre floating around in a very i mean today was the worst
# ::tok theyre floating around in a very i mean today was the worst
# ::alignments 11-12|0.1.0.0 8-9|0.1 7-8|0 6-7|0.0.0 5-6|0.0 2-3|0.1.0.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:06.321
# ::node	0	mean-01	7-8
# ::node	0.0	very	5-6
# ::node	0.0.0	i	6-7
# ::node	0.1	today	8-9
# ::node	0.1.0	float-01	1-2
# ::node	0.1.0.0	bad	11-12
# ::node	0.1.0.1	around	2-3
# ::root	0	mean-01
# ::edge	float-01	ARG0	bad	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	today	0.1.0	0.1	
# ::edge	float-01	location	around	0.1.0	0.1.0.1	
# ::edge	i	degree	very	0.0.0	0.0	
# ::edge	mean-01	ARG0	very	0	0.0	
# ::edge	mean-01	ARG1	today	0	0.1	
(m / mean-01 
      :ARG0 (v / very 
            :degree-of (i / i)) 
      :ARG1 (t / today 
            :ARG1-of (f / float-01 
                  :ARG0 (b / bad) 
                  :location (a / around))))

# ::snt the women floating high above the men like angels breaststroking through paradise
# ::tok the women floating high above the men like angels breaststroking through paradise
# ::alignments 11-12|0 6-7|0.0 4-5|0.0.1 3-4|0.0.0 2-3|0.0.0.0 1-2|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:06.342
# ::node	0	paradise	11-12
# ::node	0.0	man	6-7
# ::node	0.0.0	high	3-4
# ::node	0.0.0.0	float-01	2-3
# ::node	0.0.0.1	woman	1-2
# ::node	0.0.1	above	4-5
# ::root	0	paradise
(p / paradise 
      :location-of (m / man 
            :location-of (h / high 
                  :ARG0-of (f / float-01) 
                  :mod-of (w / woman)) 
            :op-of (a / above)))

# ::snt these have occasionally given rise to strange seafarers tales of  floating islands, no pumice will float indefinitely though
# ::tok these have occasionally given rise to strange seafarers tales of floating islands , no pumice will float indefinitely though
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:06.343
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt it consists of a metal needle rather like the stylus of a recordplayer that floats above the sample analysed
# ::tok it consists of a metal needle rather like the stylus of a recordplayer that floats above the sample analysed
# ::alignments 15-16|0.1.1 14-15|0.1 4-5|0.1.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:06.378
# ::node	0	consist-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	float-01	14-15
# ::node	0.1.0	metal	4-5
# ::node	0.1.1	above	15-16
# ::root	0	consist-01
# ::edge	consist-01	ARG0	it	0	0.0	
# ::edge	consist-01	ARG1	float-01	0	0.1	
# ::edge	float-01	ARG0	metal	0.1	0.1.0	
# ::edge	float-01	ARG2	above	0.1	0.1.1	
(c / consist-01 
      :ARG0 (i / it) 
      :ARG1 (f / float-01 
            :ARG0 (m / metal) 
            :ARG2 (a / above)))

# ::snt with a pot plant on a bamboo table a gadrooned silver tray on which callers were supposed to leave their cards and what i think was a genuine preraphaelite picture in black and white monochrome i think is the term of a lady in a sheet floating up the beam of a searchlight
# ::tok with a pot plant on a bamboo table a gadrooned silver tray on which callers were supposed to leave their cards and what i think was a genuine preraphaelite picture in black and white monochrome i think is the term of a lady in a sheet floating up the beam of a searchlight
# ::alignments 46-47|0.1.0.0.0 45-46|0.1.0.0.0.1 42-43|0.1.0.0.0.0 39-40|0.1.0.0.0.0.0 36-37|0.1.0.0 35-36|0.1.0 34-35|0.1.0.1.0.2 33-34|0.1.0.1.0.1 32-33|0.1.0.1.0 31-32|0.1.0.1.0.0 29-30|0.1.0.1 27-28|0.0 24-25|0.1.2.0 23-24|0.1.2.0.0 21-22|0.1.2 20-21|0.1.1 18-19|0.1 16-17|0 10-11|0.1.2.0.1 7-8|0.1.0.0.0.0.0.0.0 6-7|0.1.0.0.0.0.0.0.0.0 3-4|0.1.0.0.0.0.0.0 2-3|0.1.0.0.0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:07.412
# ::node	0	suppose-02	16-17
# ::node	0.0	genuine	27-28
# ::node	0.1	leave-01	18-19
# ::node	0.1.0	i	35-36
# ::node	0.1.0.0	think-01	36-37
# ::node	0.1.0.0.0	float-01	46-47
# ::node	0.1.0.0.0.0	lady	42-43
# ::node	0.1.0.0.0.0.0	term	39-40
# ::node	0.1.0.0.0.0.0.0	plant	3-4
# ::node	0.1.0.0.0.0.0.0.0	table	7-8
# ::node	0.1.0.0.0.0.0.0.0.0	bamboo	6-7
# ::node	0.1.0.0.0.0.0.0.1	pot	2-3
# ::node	0.1.0.0.0.1	sheet	45-46
# ::node	0.1.0.1	picture	29-30
# ::node	0.1.0.1.0	and	32-33
# ::node	0.1.0.1.0.0	black	31-32
# ::node	0.1.0.1.0.1	white	33-34
# ::node	0.1.0.1.0.2	monochrome	34-35
# ::node	0.1.1	card	20-21
# ::node	0.1.2	and	21-22
# ::node	0.1.2.0	think-01	24-25
# ::node	0.1.2.0.0	i	23-24
# ::node	0.1.2.0.1	silver	10-11
# ::root	0	suppose-02
# ::edge	and	op1	leave-01	0.1.2	0.1	
# ::edge	and	op1	picture	0.1.0.1.0	0.1.0.1	
# ::edge	and	op2	black	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	and	op2	think-01	0.1.2	0.1.2.0	
# ::edge	and	op3	white	0.1.0.1.0	0.1.0.1.0.1	
# ::edge	and	op4	monochrome	0.1.0.1.0	0.1.0.1.0.2	
# ::edge	float-01	ARG0	lady	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	float-01	ARG1	sheet	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	leave-01	ARG0	i	0.1	0.1.0	
# ::edge	leave-01	ARG1	card	0.1	0.1.1	
# ::edge	picture	poss	i	0.1.0.1	0.1.0	
# ::edge	plant	location	table	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0	
# ::edge	plant	mod	pot	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0.0.1	
# ::edge	plant	poss	term	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	suppose-02	ARG1	genuine	0	0.0	
# ::edge	suppose-02	ARG2	leave-01	0	0.1	
# ::edge	table	mod	bamboo	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.0	
# ::edge	term	prep-in	lady	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	think-01	ARG0	i	0.1.0.0	0.1.0	
# ::edge	think-01	ARG0	i	0.1.2.0	0.1.2.0.0	
# ::edge	think-01	ARG1	float-01	0.1.0.0	0.1.0.0.0	
# ::edge	think-01	ARG1	silver	0.1.2.0	0.1.2.0.1	
(s2 / suppose-02 
      :ARG1 (g / genuine) 
      :ARG2 (l2 / leave-01 
            :ARG0 (i / i 
                  :ARG0-of (t2 / think-01 
                        :ARG1 (f / float-01 
                              :ARG0 (l / lady 
                                    :prep-in-of (t / term 
                                          :poss-of (p2 / plant 
                                                :location (t4 / table 
                                                      :mod (b2 / bamboo)) 
                                                :mod (p3 / pot)))) 
                              :ARG1 (s / sheet))) 
                  :poss-of (p / picture 
                        :op-of (a / and 
                              :op1 (b / black) 
                              :op2 (w / white) 
                              :op3 (m / monochrome)))) 
            :ARG1 (c / card) 
            :op-of (a2 / and 
                  :op1 (t3 / think-01 
                        :ARG0 (i2 / i) 
                        :ARG1 (s3 / silver)))))

# ::snt when you round out the aircraft floats for a long way and flies very nose down
# ::tok when you round out the aircraft floats for a long way and flies very nose down
# ::alignments 15-16|0.2.1.0 14-15|0.2.1 13-14|0.1.0.0 12-13|0.2 11-12|0 10-11|0.1.0.1 6-7|0.1.0 5-6|0.1 2-3|0.0 1-2|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:07.518
# ::node	0	and	11-12
# ::node	0.0	round	2-3
# ::node	0.1	aircraft	5-6
# ::node	0.1.0	float-01	6-7
# ::node	0.1.0.0	very	13-14
# ::node	0.1.0.1	way	10-11
# ::node	0.2	fly-01	12-13
# ::node	0.2.0	you	1-2
# ::node	0.2.1	nose	14-15
# ::node	0.2.1.0	down	15-16
# ::root	0	and
# ::edge	and	op1	round	0	0.0	
# ::edge	and	op2	aircraft	0	0.1	
# ::edge	and	op3	fly-01	0	0.2	
# ::edge	down	path	nose	0.2.1.0	0.2.1	
# ::edge	float-01	ARG0	very	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	aircraft	0.1.0	0.1	
# ::edge	float-01	manner	way	0.1.0	0.1.0.1	
# ::edge	fly-01	ARG0	you	0.2	0.2.0	
# ::edge	fly-01	ARG1	nose	0.2	0.2.1	
(a / and 
      :op1 (r / round) 
      :op2 (a2 / aircraft 
            :ARG1-of (f2 / float-01 
                  :ARG0 (v / very) 
                  :manner (w / way))) 
      :op3 (f / fly-01 
            :ARG0 (y / you) 
            :ARG1 (n / nose 
                  :path-of (d / down))))

# ::snt if it kept on like this pump pump he would fill up like a balloon swell up until unanchored he would float away into the illiterate void above the schematic trees
# ::tok if it kept on like this pump pump he would fill up like a balloon swell up until unanchored he would float away into the illiterate void above the schematic trees
# ::alignments 30-31|0 27-28|0.0 26-27|0.0.1 25-26|0.0.1.1 22-23|0.0.1.0.1 21-22|0.0.1.0 19-20|0.0.1.0.0 17-18|0.0.1.0.2 10-11|0.0.0.0 8-9|0.0.0.0.0 7-8|0.0.0.0.1 6-7|0.0.0 5-6|0.0.0.1 2-3|0.0.0.0.1.0 1-2|0.0.0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:07.659
# ::node	0	tree	30-31
# ::node	0.0	above	27-28
# ::node	0.0.0	pump-01	6-7
# ::node	0.0.0.0	fill-02	10-11
# ::node	0.0.0.0.0	he	8-9
# ::node	0.0.0.0.1	pump-01	7-8
# ::node	0.0.0.0.1.0	keep-01	2-3
# ::node	0.0.0.0.1.0.0	it	1-2
# ::node	0.0.0.1	this	5-6
# ::node	0.0.1	void	26-27
# ::node	0.0.1.0	float-01	21-22
# ::node	0.0.1.0.0	he	19-20
# ::node	0.0.1.0.1	away	22-23
# ::node	0.0.1.0.2	until	17-18
# ::node	0.0.1.1	illiteracy	25-26
# ::root	0	tree
(t / tree 
      :op-of (a / above 
            :ARG1-of (p2 / pump-01 
                  :ARG1-of (f2 / fill-02 
                        :ARG0 (h2 / he) 
                        :ARG1-of (p / pump-01 
                              :ARG1-of (k / keep-01 
                                    :ARG0 (i2 / it)))) 
                  :mod (t2 / this)) 
            :degree (v / void 
                  :ARG1-of (f / float-01 
                        :ARG0 (h / he) 
                        :ARG2 (a2 / away) 
                        :op-of (u / until)) 
                  :mod (i / illiteracy))))

# ::snt but certain words like certain tunes have a way of floating on the top of the mind ready to jet out of the smallest leak in the sensibility
# ::tok but certain words like certain tunes have a way of floating on the top of the mind ready to jet out of the smallest leak in the sensibility
# ::alignments 27-28|0.1.1 24-25|0.1 23-24|0.1.3.0+0.1.3 19-20|0.1.2.0 17-18|0.1.2 16-17|0.1.2.1 13-14|0.1.2.1.0 10-11|0.1.2.1.0.0 8-9|0.1.2.1.0.0.0 4-5|0.1.0 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:08.085
# ::node	0	contrast-01	0-1
# ::node	0.0	word	2-3
# ::node	0.0.0	certain	1-2
# ::node	0.1	leak-01	24-25
# ::node	0.1.0	certain	4-5
# ::node	0.1.1	sensibility	27-28
# ::node	0.1.2	ready-01	17-18
# ::node	0.1.2.0	jet	19-20
# ::node	0.1.2.1	mind	16-17
# ::node	0.1.2.1.0	top	13-14
# ::node	0.1.2.1.0.0	float-01	10-11
# ::node	0.1.2.1.0.0.0	way	8-9
# ::node	0.1.3	small	23-24
# ::node	0.1.3.0	most	23-24
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	word	0	0.0	
# ::edge	float-01	ARG0	top	0.1.2.1.0.0	0.1.2.1.0	
# ::edge	float-01	instrument	way	0.1.2.1.0.0	0.1.2.1.0.0.0	
# ::edge	leak-01	ARG0	certain	0.1	0.1.0	
# ::edge	leak-01	ARG1	sensibility	0.1	0.1.1	
# ::edge	leak-01	ARG2	contrast-01	0.1	0	
# ::edge	leak-01	degree	small	0.1	0.1.3	
# ::edge	ready-01	ARG0	jet	0.1.2	0.1.2.0	
# ::edge	ready-01	ARG1	mind	0.1.2	0.1.2.1	
# ::edge	ready-01	ARG2	leak-01	0.1.2	0.1	
# ::edge	small	degree	most	0.1.3	0.1.3.0	
# ::edge	top	mod	mind	0.1.2.1.0	0.1.2.1	
# ::edge	word	mod	certain	0.0	0.0.0	
(c3 / contrast-01 
      :ARG1 (w2 / word 
            :mod (c2 / certain)) 
      :ARG2-of (l / leak-01 
            :ARG0 (c / certain) 
            :ARG1 (s / sensibility) 
            :ARG2-of (r / ready-01 
                  :ARG0 (j / jet) 
                  :ARG1 (m2 / mind 
                        :mod-of (t / top 
                              :ARG0-of (f / float-01 
                                    :instrument (w / way))))) 
            :degree (s2 / small 
                  :degree (m / most))))

# ::snt in the arrangement in my act the song floats on top of a piano sonata its the brechtian thing of throwing responsibility for the sentiment to your audience
# ::tok in the arrangement in my act the song floats on top of a piano sonata its the brechtian thing of throwing responsibility for the sentiment to your audience
# ::alignments 27-28|0 24-25|0.0.0.0.1.0.1 21-22|0.0.0.0.1.0.0 20-21|0.0.0.0.1.0 18-19|0.0.0.0.1 13-14|0.0.0.0.1.0.0.0 10-11|0.0.0.0.2 8-9|0.0.0.0 7-8|0.0.0.0.0 5-6|0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:08.246
# ::node	0	audience	27-28
# ::node	0.0	act-02	5-6
# ::node	0.0.0	arrange-01	2-3
# ::node	0.0.0.0	float-01	8-9
# ::node	0.0.0.0.0	song	7-8
# ::node	0.0.0.0.1	thing	18-19
# ::node	0.0.0.0.1.0	throw-01	20-21
# ::node	0.0.0.0.1.0.0	responsible-41	21-22
# ::node	0.0.0.0.1.0.0.0	piano	13-14
# ::node	0.0.0.0.1.0.1	sentiment	24-25
# ::node	0.0.0.0.2	top	10-11
# ::root	0	audience
(a / audience 
      :ARG1-of (a2 / act-02 
            :ARG1-of (a3 / arrange-01 
                  :prep-in-of (f / float-01 
                        :ARG0 (s2 / song) 
                        :ARG1 (t2 / thing 
                              :ARG0-of (t / throw-01 
                                    :ARG1 (r / responsible-41 
                                          :ARG1 (p / piano)) 
                                    :ARG2 (s / sentiment))) 
                        :location (t3 / top)))))

# ::snt in a day marked by furious rows abbey national yesterday became the first building society to be floated on the stock exchange
# ::tok in a day marked by furious rows abbey national yesterday became the first building society to be floated on the stock exchange
# ::alignments 21-22|0.0 20-21|0.0.0 17-18|0.0.1 14-15|0.0.1.0 13-14|0.0.1.0.0 10-11|0.0.1.0.1 9-10|0.0.1.0.1.0 8-9|0 5-6|0.0.1.0.0.0 3-4|0.0.1.0.1.0.0 2-3|0.0.1.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:08.334
# ::node	0	nation	8-9
# ::node	0.0	exchange-01	21-22
# ::node	0.0.0	stock	20-21
# ::node	0.0.1	float-01	17-18
# ::node	0.0.1.0	society	14-15
# ::node	0.0.1.0.0	build-01	13-14
# ::node	0.0.1.0.0.0	furious	5-6
# ::node	0.0.1.0.1	become-01	10-11
# ::node	0.0.1.0.1.0	yesterday	9-10
# ::node	0.0.1.0.1.0.0	mark-01	3-4
# ::node	0.0.1.0.1.0.0.0	day	2-3
# ::root	0	nation
(n / nation 
      :ARG0-of (e / exchange-01 
            :ARG1 (s / stock) 
            :ARG2-of (f / float-01 
                  :ARG1 (s2 / society 
                        :ARG0-of (b / build-01 
                              :ARG1 (f2 / furious)) 
                        :ARG1-of (b2 / become-01 
                              :ARG0 (y / yesterday 
                                    :time-of (m / mark-01 
                                          :ARG1 (d / day))))))))

# ::snt gazing across the trent one misty morning brian clough noted a log floating downstream
# ::tok gazing across the trent one misty morning brian clough noted a log floating downstream
# ::alignments 12-13|0.1 11-12|0.1.0 9-10|0 6-7|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:08.361
# ::node	0	note-01	9-10
# ::node	0.0	across	1-2
# ::node	0.0.0	morning	6-7
# ::node	0.1	float-01	12-13
# ::node	0.1.0	log-02	11-12
# ::root	0	note-01
# ::edge	across	op1	morning	0.0	0.0.0	
# ::edge	float-01	ARG1	log-02	0.1	0.1.0	
# ::edge	note-01	ARG0	across	0	0.0	
# ::edge	note-01	ARG1	float-01	0	0.1	
(n / note-01 
      :ARG0 (a / across 
            :op1 (m / morning)) 
      :ARG1 (f / float-01 
            :ARG1 (l / log-02)))

# ::snt nicholas ridley the secretary of state for trade and industry refused to rule out the possibility of the government dropping its veto on takeover bids for other stateowned businesses which have been floated on the stock market
# ::tok nicholas ridley the secretary of state for trade and industry refused to rule out the possibility of the government dropping its veto on takeover bids for other stateowned businesses which have been floated on the stock market
# ::alignments 36-37|0.1.0.1.0.0.0.0.0 35-36|0.1.0.1.0.0.0.0.0.0 32-33|0.1.0.1.0.0.0.0 28-29|0.1.0.1.0.0.0 26-27|0.1.0.1.0.0.0.1 23-24|0.1.0.1.1 21-22|0.1.0.1.0 19-20|0.1.0.1.0.0 15-16|0.1.0.1 12-13|0.1.0 10-11|0.1 9-10|0.1.0.0 8-9|0 7-8|0.0 5-6|0.0.0 3-4|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:08.532
# ::node	0	and	8-9
# ::node	0.0	trade-01	7-8
# ::node	0.0.0	state	5-6
# ::node	0.0.0.0	secretary	3-4
# ::node	0.1	refuse-01	10-11
# ::node	0.1.0	rule-03	12-13
# ::node	0.1.0.0	industry	9-10
# ::node	0.1.0.1	possible	15-16
# ::node	0.1.0.1.0	veto-01	21-22
# ::node	0.1.0.1.0.0	drop-04	19-20
# ::node	0.1.0.1.0.0.0	business	28-29
# ::node	0.1.0.1.0.0.0.0	float-01	32-33
# ::node	0.1.0.1.0.0.0.0.0	market	36-37
# ::node	0.1.0.1.0.0.0.0.0.0	stock	35-36
# ::node	0.1.0.1.0.0.0.1	other	26-27
# ::node	0.1.0.1.1	take-12	23-24
# ::root	0	and
# ::edge	and	op1	trade-01	0	0.0	
# ::edge	and	op2	refuse-01	0	0.1	
# ::edge	business	mod	other	0.1.0.1.0.0.0	0.1.0.1.0.0.0.1	
# ::edge	drop-04	ARG1	veto-01	0.1.0.1.0.0	0.1.0.1.0	
# ::edge	drop-04	ARG2	business	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	float-01	ARG1	business	0.1.0.1.0.0.0.0	0.1.0.1.0.0.0	
# ::edge	float-01	ARG2	market	0.1.0.1.0.0.0.0	0.1.0.1.0.0.0.0.0	
# ::edge	market	mod	stock	0.1.0.1.0.0.0.0.0	0.1.0.1.0.0.0.0.0.0	
# ::edge	refuse-01	ARG1	rule-03	0.1	0.1.0	
# ::edge	rule-03	ARG0	industry	0.1.0	0.1.0.0	
# ::edge	rule-03	ARG1	possible	0.1.0	0.1.0.1	
# ::edge	secretary	mod	state	0.0.0.0	0.0.0	
# ::edge	state	mod	trade-01	0.0.0	0.0	
# ::edge	take-12	ARG1	possible	0.1.0.1.1	0.1.0.1	
# ::edge	veto-01	ARG1	possible	0.1.0.1.0	0.1.0.1	
(a / and 
      :op1 (t2 / trade-01 
            :mod-of (s2 / state 
                  :mod-of (s3 / secretary))) 
      :op2 (r2 / refuse-01 
            :ARG1 (r / rule-03 
                  :ARG0 (i / industry) 
                  :ARG1 (p / possible 
                        :ARG1-of (v / veto-01 
                              :ARG1-of (d / drop-04 
                                    :ARG2 (b / business 
                                          :ARG1-of (f / float-01 
                                                :ARG2 (m / market 
                                                      :mod (s / stock))) 
                                          :mod (o / other)))) 
                        :ARG1-of (t / take-12)))))

# ::snt the vesicles are separated from one another by thin films of glass so that air can be  trapped inside enabling the pumice to float
# ::tok the vesicles are separated from one another by thin films of glass so that air can be trapped inside enabling the pumice to float
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:08.534
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the sanctuary lamp perpetually alight was of paduan silver hanging low on lattice chains its bowl pierced with holes containing the inner red bowl in which the sacred oil first glugged then swayed here too floated the wick with its tongue of sacred flame bespeaking the presence of christ
# ::tok the sanctuary lamp perpetually alight was of paduan silver hanging low on lattice chains its bowl pierced with holes containing the inner red bowl in which the sacred oil first glugged then swayed here too floated the wick with its tongue of sacred flame bespeaking the presence of christ
# ::alignments 46-47|0.2.0.0.0.1.0.1 43-44|0.2.0.0.0.1.0.0 42-43|0.2.0.0.0.1.0.0.0 40-41|0.2.0.0.0.1.0 35-36|0.2.0.0.0.1 34-35|0.2.0.0.0.1.1 33-34|0.2.0.0 32-33|0.2.0.0.0 31-32|0.2.0.0.0.0 28-29|0.0 27-28|0.0.0 22-23|0.2.0.3 21-22|0.2.0.0.0.1.3 19-20|0 18-19|0.1 16-17|0.2 12-13|0.2.0.0.0.1.2 10-11|0.2.0.1 9-10|0.2.0 8-9|0.2.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:09.049
# ::node	0	contain-01	19-20
# ::node	0.0	oil	28-29
# ::node	0.0.0	sacred	27-28
# ::node	0.1	hole	18-19
# ::node	0.2	pierce-01	16-17
# ::node	0.2.0	hang-01	9-10
# ::node	0.2.0.0	here	33-34
# ::node	0.2.0.0.0	sway-02	32-33
# ::node	0.2.0.0.0.0	then	31-32
# ::node	0.2.0.0.0.1	float-01	35-36
# ::node	0.2.0.0.0.1.0	tongue	40-41
# ::node	0.2.0.0.0.1.0.0	flame	43-44
# ::node	0.2.0.0.0.1.0.0.0	sacred	42-43
# ::node	0.2.0.0.0.1.0.1	presence	46-47
# ::node	0.2.0.0.0.1.1	too	34-35
# ::node	0.2.0.0.0.1.2	lattice	12-13
# ::node	0.2.0.0.0.1.3	inner	21-22
# ::node	0.2.0.1	low	10-11
# ::node	0.2.0.2	silver	8-9
# ::node	0.2.0.3	red	22-23
# ::root	0	contain-01
# ::edge	contain-01	ARG0	oil	0	0.0	
# ::edge	contain-01	ARG1	hole	0	0.1	
# ::edge	flame	mod	sacred	0.2.0.0.0.1.0.0	0.2.0.0.0.1.0.0.0	
# ::edge	float-01	ARG2	tongue	0.2.0.0.0.1	0.2.0.0.0.1.0	
# ::edge	float-01	manner	too	0.2.0.0.0.1	0.2.0.0.0.1.1	
# ::edge	hang-01	ARG0	here	0.2.0	0.2.0.0	
# ::edge	hang-01	ARG1	pierce-01	0.2.0	0.2	
# ::edge	hang-01	location	low	0.2.0	0.2.0.1	
# ::edge	hang-01	manner	silver	0.2.0	0.2.0.2	
# ::edge	inner	op1	float-01	0.2.0.0.0.1.3	0.2.0.0.0.1	
# ::edge	lattice	op1	float-01	0.2.0.0.0.1.2	0.2.0.0.0.1	
# ::edge	oil	mod	sacred	0.0	0.0.0	
# ::edge	pierce-01	ARG1	contain-01	0.2	0	
# ::edge	presence	poss	tongue	0.2.0.0.0.1.0.1	0.2.0.0.0.1.0	
# ::edge	red	op1	hang-01	0.2.0.3	0.2.0	
# ::edge	sway-02	ARG0	then	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	sway-02	ARG1	here	0.2.0.0.0	0.2.0.0	
# ::edge	sway-02	ARG2	float-01	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	tongue	mod	flame	0.2.0.0.0.1.0	0.2.0.0.0.1.0.0	
(c / contain-01 
      :ARG0 (o / oil 
            :mod (s3 / sacred)) 
      :ARG1 (h2 / hole) 
      :ARG1-of (p2 / pierce-01 
            :ARG1-of (h3 / hang-01 
                  :ARG0 (h / here 
                        :ARG1-of (s2 / sway-02 
                              :ARG0 (t3 / then) 
                              :ARG2 (f2 / float-01 
                                    :ARG2 (t / tongue 
                                          :mod (f / flame 
                                                :mod (s / sacred)) 
                                          :poss-of (p / presence)) 
                                    :manner (t2 / too) 
                                    :op-of (l / lattice) 
                                    :op-of (i / inner)))) 
                  :location (l2 / low) 
                  :manner (s4 / silver) 
                  :op-of (r / red))))

# ::snt the company was successfully floated and the network opened to selected members of the public
# ::tok the company was successfully floated and the network opened to selected members of the public
# ::alignments 14-15|0.1.1.0.0 11-12|0.1.1.0.1+0.1.1.0 10-11|0.1.1 8-9|0.1 7-8|0.1.0 5-6|0 4-5|0.0 3-4|0.0.1 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:09.181
# ::node	0	and	5-6
# ::node	0.0	float-01	4-5
# ::node	0.0.0	company	1-2
# ::node	0.0.1	succeed-01	3-4
# ::node	0.1	open-01	8-9
# ::node	0.1.0	network	7-8
# ::node	0.1.1	select-01	10-11
# ::node	0.1.1.0	have-org-role-91	11-12
# ::node	0.1.1.0.0	public	14-15
# ::node	0.1.1.0.1	member	11-12
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op2	open-01	0	0.1	
# ::edge	float-01	ARG1	company	0.0	0.0.0	
# ::edge	have-org-role-91	ARG1	public	0.1.1.0	0.1.1.0.0	
# ::edge	have-org-role-91	ARG2	member	0.1.1.0	0.1.1.0.1	
# ::edge	open-01	ARG1	network	0.1	0.1.0	
# ::edge	open-01	ARG2	select-01	0.1	0.1.1	
# ::edge	select-01	ARG1	have-org-role-91	0.1.1	0.1.1.0	
# ::edge	succeed-01	ARG1	float-01	0.0.1	0.0	
(a / and 
      :op1 (f / float-01 
            :ARG1 (c / company) 
            :ARG1-of (s2 / succeed-01)) 
      :op2 (o / open-01 
            :ARG1 (n / network) 
            :ARG2 (s / select-01 
                  :ARG1 (h / have-org-role-91 
                        :ARG1 (p / public) 
                        :ARG2 (m / member)))))

# ::snt and every step i have to be careful not to float off
# ::tok and every step i have to be careful not to float off
# ::alignments 11-12|0.1.1 10-11|0.1 7-8|0.1.2 3-4|0.1.0 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:09.207
# ::node	0	and	0-1
# ::node	0.0	every	1-2
# ::node	0.1	float-01	10-11
# ::node	0.1.0	i	3-4
# ::node	0.1.1	off	11-12
# ::node	0.1.2	careful	7-8
# ::root	0	and
# ::edge	and	op1	every	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	careful	compared-to	float-01	0.1.2	0.1	
# ::edge	float-01	ARG1	i	0.1	0.1.0	
# ::edge	float-01	ARG2	off	0.1	0.1.1	
(a / and 
      :op1 (e / every) 
      :op2 (f / float-01 
            :ARG1 (i / i) 
            :ARG2 (o / off) 
            :compared-to-of (c / careful)))

# ::snt its like im just floating down the street just a head bobbing along in the water
# ::tok its like im just floating down the street just a head bobbing along in the water
# ::alignments 15-16|0.1.0.0.1 12-13|0.0 10-11|0 8-9|0.1.0.0.0 7-8|0.1 5-6|0.1.0 4-5|0.1.0.0 3-4|0.1.0.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:09.283
# ::node	0	head-01	10-11
# ::node	0.0	along	12-13
# ::node	0.1	street	7-8
# ::node	0.1.0	down	5-6
# ::node	0.1.0.0	float-01	4-5
# ::node	0.1.0.0.0	just	8-9
# ::node	0.1.0.0.1	water	15-16
# ::node	0.1.0.0.2	just	3-4
# ::root	0	head-01
# ::edge	down	path	street	0.1.0	0.1	
# ::edge	float-01	ARG0	just	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	water	0.1.0.0	0.1.0.0.1	
# ::edge	float-01	direction	down	0.1.0.0	0.1.0	
# ::edge	float-01	mod	just	0.1.0.0	0.1.0.0.2	
# ::edge	head-01	ARG0	along	0	0.0	
# ::edge	head-01	ARG1	street	0	0.1	
(h / head-01 
      :ARG0 (a / along) 
      :ARG1 (s / street 
            :path-of (d / down 
                  :direction-of (f / float-01 
                        :ARG0 (j / just) 
                        :ARG1 (w / water) 
                        :mod (j2 / just)))))

# ::snt mrs thatcher would reserve the right to allow sterling to float up and down according to britains sovereign needs
# ::tok mrs thatcher would reserve the right to allow sterling to float up and down according to britains sovereign needs
# ::alignments 18-19|0.0.0.0.0 17-18|0.0.0.0.0.0 13-14|0.0.0.0.1 12-13|0.0.0.0 10-11|0.0.0 7-8|0.0 3-4|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:09.319
# ::node	0	reserve-01	3-4
# ::node	0.0	allow-01	7-8
# ::node	0.0.0	float-01	10-11
# ::node	0.0.0.0	and	12-13
# ::node	0.0.0.0.0	need-01	18-19
# ::node	0.0.0.0.0.0	sovereign	17-18
# ::node	0.0.0.0.1	down	13-14
# ::root	0	reserve-01
# ::edge	allow-01	ARG1	float-01	0.0	0.0.0	
# ::edge	and	op1	float-01	0.0.0.0	0.0.0	
# ::edge	and	op2	down	0.0.0.0	0.0.0.0.1	
# ::edge	need-01	ARG1	and	0.0.0.0.0	0.0.0.0	
# ::edge	need-01	mod	sovereign	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	reserve-01	ARG1	allow-01	0	0.0	
(r / reserve-01 
      :ARG1 (a2 / allow-01 
            :ARG1 (f / float-01 
                  :op-of (a / and 
                        :ARG1-of (n / need-01 
                              :mod (s / sovereign)) 
                        :op1 (d / down)))))

# ::snt this book of yours hadley had said just before pushing a national health prescription across the desk with the air of a man floating a paper aeroplane at a querulous child
# ::tok this book of yours hadley had said just before pushing a national health prescription across the desk with the air of a man floating a paper aeroplane at a querulous child
# ::alignments 30-31|0.3.1.0.2 25-26|0.1 23-24|0.3.1.0 22-23|0.3.1.0.1 19-20|0.3.1.0.0 14-15|0.3.1.1 12-13|0.3.0 11-12|0.3.0.0 9-10|0.3.1 8-9|0.3 7-8|0.2 6-7|0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:09.705
# ::node	0	say-01	6-7
# ::node	0.0	book	1-2
# ::node	0.0.0	this	0-1
# ::node	0.1	paper	25-26
# ::node	0.2	just	7-8
# ::node	0.3	before	8-9
# ::node	0.3.0	health	12-13
# ::node	0.3.0.0	nation	11-12
# ::node	0.3.1	push-02	9-10
# ::node	0.3.1.0	float-01	23-24
# ::node	0.3.1.0.0	air	19-20
# ::node	0.3.1.0.1	man	22-23
# ::node	0.3.1.0.2	child	30-31
# ::node	0.3.1.1	across	14-15
# ::root	0	say-01
# ::edge	before	op1	push-02	0.3	0.3.1	
# ::edge	book	mod	this	0.0	0.0.0	
# ::edge	float-01	ARG0	air	0.3.1.0	0.3.1.0.0	
# ::edge	float-01	ARG1	man	0.3.1.0	0.3.1.0.1	
# ::edge	float-01	manner	child	0.3.1.0	0.3.1.0.2	
# ::edge	health	domain	before	0.3.0	0.3	
# ::edge	health	mod	nation	0.3.0	0.3.0.0	
# ::edge	push-02	ARG1	float-01	0.3.1	0.3.1.0	
# ::edge	push-02	location	across	0.3.1	0.3.1.1	
# ::edge	say-01	ARG0	book	0	0.0	
# ::edge	say-01	ARG1	paper	0	0.1	
# ::edge	say-01	mod	just	0	0.2	
# ::edge	say-01	time	before	0	0.3	
(s / say-01 
      :ARG0 (b2 / book 
            :mod (t / this)) 
      :ARG1 (p / paper) 
      :mod (j / just) 
      :time (b / before 
            :domain-of (h / health 
                  :mod (n / nation)) 
            :op1 (p2 / push-02 
                  :ARG1 (f / float-01 
                        :ARG0 (a / air) 
                        :ARG1 (m / man) 
                        :manner (c / child)) 
                  :location (a2 / across))))

# ::snt  bretton woods the postwar system of fixed exchange rates broke down in march 1973 nine months after edward heath decided to float sterling
# ::tok bretton woods the postwar system of fixed exchange rates broke down in march 1973 nine months after edward heath decided to float sterling
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:09.706
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt before we floated on the stock market he swore if we didnt go to a big premium hed eat his hat laughs john
# ::tok before we floated on the stock market he swore if we didnt go to a big premium hed eat his hat laughs john
# ::alignments 20-21|0 18-19|0.0 15-16|0.0.1 10-11|0.0.0.0.1 8-9|0.0.0.0 7-8|0.0.0 6-7|0.0.0.0.2 5-6|0.0.0.0.2.0 2-3|0.0.0.0.0 1-2|0.0.0.0.0.0 0-1|0.0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:10.016
# ::node	0	hat	20-21
# ::node	0.0	eat-01	18-19
# ::node	0.0.0	he	7-8
# ::node	0.0.0.0	swear-01	8-9
# ::node	0.0.0.0.0	float-01	2-3
# ::node	0.0.0.0.0.0	we	1-2
# ::node	0.0.0.0.0.1	before	0-1
# ::node	0.0.0.0.1	we	10-11
# ::node	0.0.0.0.2	market	6-7
# ::node	0.0.0.0.2.0	stock	5-6
# ::node	0.0.1	big	15-16
# ::root	0	hat
(h / hat 
      :ARG1-of (e / eat-01 
            :ARG0 (h2 / he 
                  :ARG0-of (s / swear-01 
                        :ARG1-of (f / float-01 
                              :ARG0 (w2 / we) 
                              :op-of (b2 / before)) 
                        :ARG2 (w / we) 
                        :manner (m / market 
                              :mod (s2 / stock)))) 
            :mod (b / big)))

# ::snt tiny strangled sobs floated out of it and across the room
# ::tok tiny strangled sobs floated out of it and across the room
# ::alignments 10-11|0.1.0 8-9|0.1 7-8|0 6-7|0.0.0 3-4|0.0 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:10.034
# ::node	0	and	7-8
# ::node	0.0	float-01	3-4
# ::node	0.0.0	it	6-7
# ::node	0.0.1	tiny	0-1
# ::node	0.1	across	8-9
# ::node	0.1.0	room	10-11
# ::root	0	and
# ::edge	across	op1	room	0.1	0.1.0	
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op2	across	0	0.1	
# ::edge	float-01	ARG1	it	0.0	0.0.0	
# ::edge	float-01	ARG2	tiny	0.0	0.0.1	
(a2 / and 
      :op1 (f / float-01 
            :ARG1 (i / it) 
            :ARG2 (t / tiny)) 
      :op2 (a / across 
            :op1 (r / room)))

# ::snt as the searchlights played across the skies barrage balloons floated on their cables grimfaced men in khaki stared out across the north sea entertained each night it must be said by elsie and doris waters
# ::tok as the searchlights played across the skies barrage balloons floated on their cables grimfaced men in khaki stared out across the north sea entertained each night it must be said by elsie and doris waters
# ::alignments 34-35|0.3.1 32-33|0.3 29-30|0 26-27|0.1 25-26|0.2.1 24-25|0.2.1.0 23-24|0.2 22-23|0.0 21-22|0.0.0 19-20|0.0.1 14-15|0.2.0 9-10|0.3.0 4-5|0.3.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:10.490
# ::node	0	say-01	29-30
# ::node	0.0	sea	22-23
# ::node	0.0.0	north	21-22
# ::node	0.0.1	across	19-20
# ::node	0.1	it	26-27
# ::node	0.2	entertain-01	23-24
# ::node	0.2.0	man	14-15
# ::node	0.2.1	night	25-26
# ::node	0.2.1.0	each	24-25
# ::node	0.3	and	32-33
# ::node	0.3.0	float-01	9-10
# ::node	0.3.0.0	across	4-5
# ::node	0.3.1	water	34-35
# ::root	0	say-01
# ::edge	across	op1	float-01	0.3.0.0	0.3.0	
# ::edge	across	op1	sea	0.0.1	0.0	
# ::edge	and	op1	float-01	0.3	0.3.0	
# ::edge	and	op2	water	0.3	0.3.1	
# ::edge	entertain-01	ARG0	man	0.2	0.2.0	
# ::edge	entertain-01	ARG1	say-01	0.2	0	
# ::edge	entertain-01	time	night	0.2	0.2.1	
# ::edge	night	mod	each	0.2.1	0.2.1.0	
# ::edge	say-01	ARG0	sea	0	0.0	
# ::edge	say-01	ARG1	it	0	0.1	
# ::edge	say-01	ARG2	and	0	0.3	
# ::edge	sea	mod	north	0.0	0.0.0	
(s / say-01 
      :ARG0 (s2 / sea 
            :mod (n2 / north) 
            :op-of (a2 / across)) 
      :ARG1 (i / it) 
      :ARG1-of (e2 / entertain-01 
            :ARG0 (m / man) 
            :time (n / night 
                  :mod (e / each))) 
      :ARG2 (a / and 
            :op1 (f / float-01 
                  :op-of (a3 / across)) 
            :op2 (w / water)))

# ::snt a spider was floating down from the thatch spooling out its thread
# ::tok a spider was floating down from the thatch spooling out its thread
# ::alignments 11-12|0.0 4-5|0.1 3-4|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:10.500
# ::node	0	float-01	3-4
# ::node	0.0	thread	11-12
# ::node	0.1	down	4-5
# ::root	0	float-01
# ::edge	float-01	ARG1	thread	0	0.0	
# ::edge	float-01	direction	down	0	0.1	
(f / float-01 
      :ARG1 (t / thread) 
      :direction (d / down))

# ::snt mountleigh group the uk property company plans to float about 60 per cent of its spanish retail chain galerias preciados on the madrid stock market at the end of 1990 or early 1991
# ::tok mountleigh group the uk property company plans to float about 60 per cent of its spanish retail chain galerias preciados on the madrid stock market at the end of 1990 or early 1991
# ::alignments 32-33|0.1.1+0.1 31-32|0.1.0 30-31|0 29-30|0.0.1+0.0 24-25|0.0.0.3.0.1.0 23-24|0.0.0.3.0.1 17-18|0.0.0.3.1 16-17|0.0.0.3 15-16|0.0.0.3.0.0.0+0.0.0.3.0.0+0.0.0.3.0 12-13|0.0.0.2.0.0+0.0.0.2.0 10-11|0.0.0.2 8-9|0.0.0 6-7|0.0.0.1 5-6|0.0.0.1.0 4-5|0.0.0.1.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.087
# ::node	0	or	30-31
# ::node	0.0	date-entity	29-30
# ::node	0.0.0	float-01	8-9
# ::node	0.0.0.0	group	1-2
# ::node	0.0.0.1	plan-01	6-7
# ::node	0.0.0.1.0	company	5-6
# ::node	0.0.0.1.0.0	property	4-5
# ::node	0.0.0.2	60	10-11
# ::node	0.0.0.2.0	monetary-quantity	12-13
# ::node	0.0.0.2.0.0	cent	12-13
# ::node	0.0.0.3	retail-01	16-17
# ::node	0.0.0.3.0	language	15-16
# ::node	0.0.0.3.0.0	name	15-16
# ::node	0.0.0.3.0.0.0	"Spanish"	15-16
# ::node	0.0.0.3.0.1	stock	23-24
# ::node	0.0.0.3.0.1.0	market	24-25
# ::node	0.0.0.3.1	chain	17-18
# ::node	0.0.1	1990	29-30
# ::node	0.1	date-entity	32-33
# ::node	0.1.0	early	31-32
# ::node	0.1.1	1991	32-33
# ::root	0	or
# ::edge	60	name	monetary-quantity	0.0.0.2	0.0.0.2.0	
# ::edge	company	mod	property	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	date-entity	op1	float-01	0.0	0.0.0	
# ::edge	date-entity	year	1990	0.0	0.0.1	
# ::edge	date-entity	year	1991	0.1	0.1.1	
# ::edge	early	op1	date-entity	0.1.0	0.1	
# ::edge	float-01	ARG0	group	0.0.0	0.0.0.0	
# ::edge	float-01	ARG2	60	0.0.0	0.0.0.2	
# ::edge	language	name	name	0.0.0.3.0	0.0.0.3.0.0	
# ::edge	market	mod	stock	0.0.0.3.0.1.0	0.0.0.3.0.1	
# ::edge	monetary-quantity	unit	cent	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	name	op1	"Spanish"	0.0.0.3.0.0	0.0.0.3.0.0.0	
# ::edge	or	op1	date-entity	0	0.0	
# ::edge	or	op2	date-entity	0	0.1	
# ::edge	plan-01	ARG0	company	0.0.0.1	0.0.0.1.0	
# ::edge	plan-01	ARG1	float-01	0.0.0.1	0.0.0	
# ::edge	retail-01	ARG0	language	0.0.0.3	0.0.0.3.0	
# ::edge	retail-01	ARG1	chain	0.0.0.3	0.0.0.3.1	
# ::edge	retail-01	purpose	float-01	0.0.0.3	0.0.0	
# ::edge	stock	part	language	0.0.0.3.0.1	0.0.0.3.0	
(o / or 
      :op1 (d2 / date-entity 
            :op1 (f / float-01 
                  :ARG0 (g / group) 
                  :ARG1-of (p / plan-01 
                        :ARG0 (c3 / company 
                              :mod (p2 / property))) 
                  :ARG2 (6 / 60 
                        :name (m2 / monetary-quantity 
                              :unit (c2 / cent))) 
                  :purpose-of (r / retail-01 
                        :ARG0 (l / language 
                              :name (n / name 
                                    :op1 "Spanish") 
                              :part-of (s / stock 
                                    :mod-of (m / market))) 
                        :ARG1 (c / chain))) 
            :year 1990) 
      :op2 (d / date-entity 
            :op-of (e / early) 
            :year 1991))

# ::snt if the petals and leaves between the bowls start to float weight with ice cubes
# ::tok if the petals and leaves between the bowls start to float weight with ice cubes
# ::alignments 13-14|0.0.0.0.0 11-12|0.0.2 10-11|0.0 8-9|0 5-6|0.0.0.0.1 4-5|0.0.0.0 3-4|0.0.0 2-3|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.122
# ::node	0	start-01	8-9
# ::node	0.0	float-01	10-11
# ::node	0.0.0	and	3-4
# ::node	0.0.0.0	leave-01	4-5
# ::node	0.0.0.0.0	ice	13-14
# ::node	0.0.0.0.1	between	5-6
# ::node	0.0.1	petal	2-3
# ::node	0.0.2	weight	11-12
# ::root	0	start-01
# ::edge	and	op1	leave-01	0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	and	0.0	0.0.0	
# ::edge	float-01	ARG1	petal	0.0	0.0.1	
# ::edge	float-01	ARG2	weight	0.0	0.0.2	
# ::edge	leave-01	ARG1	ice	0.0.0.0	0.0.0.0.0	
# ::edge	leave-01	mod	between	0.0.0.0	0.0.0.0.1	
# ::edge	start-01	ARG1	float-01	0	0.0	
(s / start-01 
      :ARG1 (f / float-01 
            :ARG0 (a / and 
                  :op1 (l / leave-01 
                        :ARG1 (i / ice) 
                        :mod (b / between))) 
            :ARG1 (p / petal) 
            :ARG2 (w / weight)))

# ::snt mike simpson stanley vickers stick floated maggot near the willow in the bottom field for small roach dace and gudgeon for a winning 1110
# ::tok mike simpson stanley vickers stick floated maggot near the willow in the bottom field for small roach dace and gudgeon for a winning 1110
# ::alignments 23-24|0.2.0+0.2 22-23|0 18-19|0.0 15-16|0.0.0.2 13-14|0.0.0.0 12-13|0.0.0.0.0 7-8|0.1 5-6|0.0.0.1 4-5|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.296
# ::node	0	win-01	22-23
# ::node	0.0	and	18-19
# ::node	0.0.0	stick-01	4-5
# ::node	0.0.0.0	field	13-14
# ::node	0.0.0.0.0	bottom	12-13
# ::node	0.0.0.1	float-01	5-6
# ::node	0.0.0.2	small	15-16
# ::node	0.1	near	7-8
# ::node	0.2	date-entity	23-24
# ::node	0.2.0	1110	23-24
# ::root	0	win-01
# ::edge	date-entity	year	1110	0.2	0.2.0	
# ::edge	field	mod	bottom	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG0	stick-01	0.0.0.1	0.0.0	
# ::edge	near	op1	win-01	0.1	0	
# ::edge	stick-01	ARG0	field	0.0.0	0.0.0.0	
# ::edge	stick-01	ARG1	and	0.0.0	0.0	
# ::edge	stick-01	purpose	small	0.0.0	0.0.0.2	
# ::edge	win-01	ARG0	and	0	0.0	
# ::edge	win-01	time	date-entity	0	0.2	
(w / win-01 
      :ARG0 (a / and 
            :ARG1-of (s2 / stick-01 
                  :ARG0 (f / field 
                        :mod (b / bottom)) 
                  :ARG0-of (f2 / float-01) 
                  :purpose (s / small))) 
      :op-of (n / near) 
      :time (d / date-entity 
            :year 1110))

# ::snt i can float and that so if i fell in  thats what id do
# ::tok i can float and that so if i fell in thats what id do
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.297
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt scandinavian bank group is being bought back by the five shareholders responsible for floating it on the london stock market in march 1987
# ::tok scandinavian bank group is being bought back by the five shareholders responsible for floating it on the london stock market in march 1987
# ::alignments 21-23|0.1.0.0.0.1.1+0.1.0.0.0.1.0+0.1.0.0.0.1 19-20|0.1.0 18-19|0.2 17-18|0.2.0.0.0+0.2.0.0+0.2.0 14-15|0.0 13-14|0 11-12|0.1 9-10|0.2.0.1 6-7|0.1.0.0.0.0 5-6|0.1.0.0.0 2-3|0.1.0.0 1-2|0.1.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.458
# ::node	0	float-01	13-14
# ::node	0.0	it	14-15
# ::node	0.1	responsible-41	11-12
# ::node	0.1.0	market	19-20
# ::node	0.1.0.0	group	2-3
# ::node	0.1.0.0.0	buy-01	5-6
# ::node	0.1.0.0.0.0	back	6-7
# ::node	0.1.0.0.0.1	date-entity	21-23
# ::node	0.1.0.0.0.1.0	3	21-23
# ::node	0.1.0.0.0.1.1	1987	21-23
# ::node	0.1.0.0.1	bank	1-2
# ::node	0.2	stock	18-19
# ::node	0.2.0	city	17-18
# ::node	0.2.0.0	name	17-18
# ::node	0.2.0.0.0	"London"	17-18
# ::node	0.2.0.1	5	9-10
# ::root	0	float-01
# ::edge	buy-01	ARG1	group	0.1.0.0.0	0.1.0.0	
# ::edge	buy-01	direction	back	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	buy-01	time	date-entity	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	city	name	name	0.2.0	0.2.0.0	
# ::edge	city	quant	5	0.2.0	0.2.0.1	
# ::edge	date-entity	month	3	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	date-entity	year	1987	0.1.0.0.0.1	0.1.0.0.0.1.1	
# ::edge	float-01	ARG1	it	0	0.0	
# ::edge	float-01	time	stock	0	0.2	
# ::edge	group	mod	bank	0.1.0.0	0.1.0.0.1	
# ::edge	market	poss	group	0.1.0	0.1.0.0	
# ::edge	name	op1	"London"	0.2.0.0	0.2.0.0.0	
# ::edge	responsible-41	ARG1	market	0.1	0.1.0	
# ::edge	responsible-41	ARG2	float-01	0.1	0	
# ::edge	stock	mod	city	0.2	0.2.0	
(f / float-01 
      :ARG1 (i / it) 
      :ARG2-of (r / responsible-41 
            :ARG1 (m / market 
                  :poss (g / group 
                        :ARG1-of (b2 / buy-01 
                              :direction (b / back) 
                              :time (d / date-entity 
                                    :month 3 
                                    :year 1987)) 
                        :mod (b3 / bank)))) 
      :time (s / stock 
            :mod (c / city 
                  :name (n / name 
                        :op1 "London") 
                  :quant 5)))

# ::snt sir  if john smith really tries to make the department of trade and industry into a department equal to the treasury an idea last floated surprisingly enough by norman tebbit during his short tenure as secretary of state he will fail just as george brown did
# ::tok sir if john smith really tries to make the department of trade and industry into a department equal to the treasury an idea last floated surprisingly enough by norman tebbit during his short tenure as secretary of state he will fail just as george brown did
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.459
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt some of the time the germans at one end of the stadium were hearing the french translation while their own language was floating with the wind over the top of the stadium and down to lake geneva
# ::tok some of the time the germans at one end of the stadium were hearing the french translation while their own language was floating with the wind over the top of the stadium and down to lake geneva
# ::alignments 35-36|0 33-34|0.0.3 32-33|0.0 28-29|0.0.2 25-26|0.0.1.1 22-23|0.0.1 20-21|0.0.1.0 16-17|0.0.0.1.0+0.0.0.1 15-16|0.0.0.1.1.0.0+0.0.0.1.1.0+0.0.0.1.1 13-14|0.0.0 5-6|0.0.0.2.0.0.0+0.0.0.2.0.0+0.0.0.2.0+0.0.0.2 3-4|0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.809
# ::node	0	lake	35-36
# ::node	0.0	and	32-33
# ::node	0.0.0	hear-01	13-14
# ::node	0.0.0.0	time	3-4
# ::node	0.0.0.0.0	some	0-1
# ::node	0.0.0.1	thing	16-17
# ::node	0.0.0.1.0	translate-01	16-17
# ::node	0.0.0.1.1	country	15-16
# ::node	0.0.0.1.1.0	name	15-16
# ::node	0.0.0.1.1.0.0	"France"	15-16
# ::node	0.0.0.2	person	5-6
# ::node	0.0.0.2.0	country	5-6
# ::node	0.0.0.2.0.0	name	5-6
# ::node	0.0.0.2.0.0.0	"Germany"	5-6
# ::node	0.0.1	float-01	22-23
# ::node	0.0.1.0	language	20-21
# ::node	0.0.1.1	wind	25-26
# ::node	0.0.2	top	28-29
# ::node	0.0.3	down	33-34
# ::root	0	lake
(l / lake 
      :op-of (a / and 
            :condition-of (h / hear-01 
                  :ARG0 (t4 / time 
                        :mod (s / some)) 
                  :ARG1 (t2 / thing 
                        :ARG2-of (t3 / translate-01) 
                        :mod (c / country 
                              :name (n / name 
                                    :op1 "France"))) 
                  :ARG2 (p / person 
                        :mod (c2 / country 
                              :name (n2 / name 
                                    :op1 "Germany")))) 
            :op1 (f / float-01 
                  :ARG0 (l2 / language) 
                  :ARG1 (w / wind)) 
            :op2 (t / top) 
            :op3 (d / down)))

# ::snt gan publicly stated its intention to float on the stock market a year ago but these plans have had to be put back because general portfolio does not have sufficient distributable reserves from which to pay dividends to shareholders
# ::tok gan publicly stated its intention to float on the stock market a year ago but these plans have had to be put back because general portfolio does not have sufficient distributable reserves from which to pay dividends to shareholders
# ::alignments 36-37|0.0.1.0 35-36|0.0.1 31-32|0.0 29-30|0.0.0 24-25|0.1.1.0.0 23-24|0 22-23|0.2 16-17|0.1.1.0 14-15|0.1.1 12-13|0.1.0 10-11|0.1.3 9-10|0.1.3.0 6-7|0.1 4-5|0.1.2 2-3|0.1.2.0 1-2|0.1.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:11.980
# ::node	0	cause-01	23-24
# ::node	0.0	reserve-01	31-32
# ::node	0.0.0	suffice-01	29-30
# ::node	0.0.1	pay-01	35-36
# ::node	0.0.1.0	dividend	36-37
# ::node	0.1	float-01	6-7
# ::node	0.1.0	year	12-13
# ::node	0.1.1	contrast-01	14-15
# ::node	0.1.1.0	plan-01	16-17
# ::node	0.1.1.0.0	general	24-25
# ::node	0.1.2	intend-01	4-5
# ::node	0.1.2.0	state-01	2-3
# ::node	0.1.2.0.0	public	1-2
# ::node	0.1.3	market	10-11
# ::node	0.1.3.0	stock	9-10
# ::node	0.2	back	22-23
# ::root	0	cause-01
# ::edge	cause-01	ARG0	reserve-01	0	0.0	
# ::edge	cause-01	ARG1	float-01	0	0.1	
# ::edge	cause-01	mod	back	0	0.2	
# ::edge	contrast-01	ARG1	plan-01	0.1.1	0.1.1.0	
# ::edge	float-01	ARG0	year	0.1	0.1.0	
# ::edge	float-01	ARG1	contrast-01	0.1	0.1.1	
# ::edge	float-01	ARG2	market	0.1	0.1.3	
# ::edge	intend-01	ARG1	float-01	0.1.2	0.1	
# ::edge	market	mod	stock	0.1.3	0.1.3.0	
# ::edge	pay-01	ARG1	dividend	0.0.1	0.0.1.0	
# ::edge	plan-01	ARG1	general	0.1.1.0	0.1.1.0.0	
# ::edge	reserve-01	purpose	pay-01	0.0	0.0.1	
# ::edge	state-01	ARG1	intend-01	0.1.2.0	0.1.2	
# ::edge	state-01	manner	public	0.1.2.0	0.1.2.0.0	
# ::edge	suffice-01	ARG1	reserve-01	0.0.0	0.0	
(c / cause-01 
      :ARG0 (r / reserve-01 
            :ARG1-of (s / suffice-01) 
            :purpose (p / pay-01 
                  :ARG1 (d / dividend))) 
      :ARG1 (f / float-01 
            :ARG0 (y / year) 
            :ARG1 (c2 / contrast-01 
                  :ARG1 (p2 / plan-01 
                        :ARG1 (g / general))) 
            :ARG1-of (i / intend-01 
                  :ARG1-of (s3 / state-01 
                        :manner (p3 / public))) 
            :ARG2 (m / market 
                  :mod (s2 / stock))) 
      :mod (b / back))

# ::snt it looks like being a happy christmas for tom wilding of uk paper and for shareholders in the paper and packaging group brought out of bowater and floated less than two years ago
# ::tok it looks like being a happy christmas for tom wilding of uk paper and for shareholders in the paper and packaging group brought out of bowater and floated less than two years ago
# ::alignments 31-32|0.1.1.0.1.0.0.1+0.1.1.0.1.0.0 30-31|0.1.1.0.1.0 28-29|0.1.1.0.1.0.0.0 27-28|0.1 26-27|0 21-22|0.1.1 20-21|0.1.1.0.1 19-20|0.1.1.0 18-19|0.1.1.0.0 13-14|0.0 12-13|0.0.1 5-6|0.1.0 1-2|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.133
# ::node	0	and	26-27
# ::node	0.0	and	13-14
# ::node	0.0.0	look-02	1-2
# ::node	0.0.0.0	it	0-1
# ::node	0.0.1	paper	12-13
# ::node	0.1	float-01	27-28
# ::node	0.1.0	happy	5-6
# ::node	0.1.1	group	21-22
# ::node	0.1.1.0	and	19-20
# ::node	0.1.1.0.0	paper	18-19
# ::node	0.1.1.0.1	package-01	20-21
# ::node	0.1.1.0.1.0	2	30-31
# ::node	0.1.1.0.1.0.0	temporal-quantity	31-32
# ::node	0.1.1.0.1.0.0.0	less	28-29
# ::node	0.1.1.0.1.0.0.1	year	31-32
# ::root	0	and
# ::edge	and	op1	float-01	0	0.1	
# ::edge	and	op1	paper	0.0	0.0.1	
# ::edge	and	op1	paper	0.1.1.0	0.1.1.0.0	
# ::edge	and	op2	and	0.0	0	
# ::edge	and	op2	package-01	0.1.1.0	0.1.1.0.1	
# ::edge	and	op3	group	0.1.1.0	0.1.1	
# ::edge	float-01	ARG0	happy	0.1	0.1.0	
# ::edge	float-01	ARG1	group	0.1	0.1.1	
# ::edge	less	op1	temporal-quantity	0.1.1.0.1.0.0.0	0.1.1.0.1.0.0	
# ::edge	look-02	ARG0	it	0.0.0	0.0.0.0	
# ::edge	look-02	ARG1	and	0.0.0	0.0	
# ::edge	package-01	ARG1	2	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	temporal-quantity	quant	2	0.1.1.0.1.0.0	0.1.1.0.1.0	
# ::edge	temporal-quantity	unit	year	0.1.1.0.1.0.0	0.1.1.0.1.0.0.1	
(a / and 
      :op-of (a3 / and 
            :ARG1-of (l2 / look-02 
                  :ARG0 (i / it)) 
            :op1 (p3 / paper)) 
      :op1 (f / float-01 
            :ARG0 (h / happy) 
            :ARG1 (g / group 
                  :op-of (a2 / and 
                        :op1 (p2 / paper) 
                        :op2 (p / package-01 
                              :ARG1 (2 / 2 
                                    :quant-of (t / temporal-quantity 
                                          :op-of (l / less) 
                                          :unit (y / year))))))))

# ::snt the shares rose 72p to 620p compared with 135p when they were floated two years ago
# ::tok the shares rose 72p to 620p compared with 135p when they were floated two years ago
# ::alignments 14-15|0.0.0.0.0.0.0+0.0.0.0.0.0 13-14|0.0.0.0.0 12-13|0 10-11|0.0 6-7|0.0.0 2-3|0.0.0.0 1-2|0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.224
# ::node	0	float-01	12-13
# ::node	0.0	they	10-11
# ::node	0.0.0	compare-01	6-7
# ::node	0.0.0.0	rise-01	2-3
# ::node	0.0.0.0.0	2	13-14
# ::node	0.0.0.0.0.0	temporal-quantity	14-15
# ::node	0.0.0.0.0.0.0	year	14-15
# ::node	0.0.0.0.1	share	1-2
# ::root	0	float-01
# ::edge	compare-01	ARG0	they	0.0.0	0.0	
# ::edge	compare-01	ARG1	rise-01	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	they	0	0.0	
# ::edge	rise-01	ARG0	2	0.0.0.0	0.0.0.0.0	
# ::edge	rise-01	ARG1	share	0.0.0.0	0.0.0.0.1	
# ::edge	temporal-quantity	quant	2	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	temporal-quantity	unit	year	0.0.0.0.0.0	0.0.0.0.0.0.0	
(f / float-01 
      :ARG1 (t2 / they 
            :ARG0-of (c / compare-01 
                  :ARG1 (r / rise-01 
                        :ARG0 (2 / 2 
                              :quant-of (t / temporal-quantity 
                                    :unit (y / year))) 
                        :ARG1 (s / share)))))

# ::snt the solid result has provided robertson with a platform for the disposal next year of plateau mining its mining finance subsidiary which is to be floated in london
# ::tok the solid result has provided robertson with a platform for the disposal next year of plateau mining its mining finance subsidiary which is to be floated in london
# ::alignments 27-28|0.0.1.0.1.0.0.1.0.0+0.0.1.0.1.0.0.1.0+0.0.1.0.1.0.0.1 25-26|0.0.1.0.1.0.0 20-21|0.0.1.0.1.0 19-20|0.0.1.0.1 18-19|0.0.1 16-17|0.0 15-16|0 13-14|0.0.0 12-13|0.0.0.0 8-9|0.0.1.0.1.0.0.0 4-5|0.0.1.0.0 2-3|0.0.1.0 1-2|0.0.1.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.446
# ::node	0	plateau	15-16
# ::node	0.0	mine-01	16-17
# ::node	0.0.0	year	13-14
# ::node	0.0.0.0	next	12-13
# ::node	0.0.1	mine-01	18-19
# ::node	0.0.1.0	result-01	2-3
# ::node	0.0.1.0.0	provide-01	4-5
# ::node	0.0.1.0.1	finance-01	19-20
# ::node	0.0.1.0.1.0	subsidiary	20-21
# ::node	0.0.1.0.1.0.0	float-01	25-26
# ::node	0.0.1.0.1.0.0.0	platform	8-9
# ::node	0.0.1.0.1.0.0.1	city	27-28
# ::node	0.0.1.0.1.0.0.1.0	name	27-28
# ::node	0.0.1.0.1.0.0.1.0.0	"London"	27-28
# ::node	0.0.1.0.2	solid	1-2
# ::root	0	plateau
(p / plateau 
      :ARG1-of (m2 / mine-01 
            :ARG0 (y / year 
                  :mod (n2 / next)) 
            :ARG1-of (m / mine-01 
                  :ARG0 (r / result-01 
                        :ARG0-of (p3 / provide-01) 
                        :ARG0-of (f2 / finance-01 
                              :ARG1 (s / subsidiary 
                                    :ARG1-of (f / float-01 
                                          :ARG0 (p2 / platform) 
                                          :location (c / city 
                                                :name (n / name 
                                                      :op1 "London"))))) 
                        :mod (s2 / solid)))))

# ::snt nevertheless speculation about takeover has never fully lifted since it floated at 500p a share in 1986
# ::tok nevertheless speculation about takeover has never fully lifted since it floated at 500p a share in 1986
# ::alignments 16-17|0.0.0.0.0+0.0.0.0 14-15|0.2.0.1 10-11|0.2.0 9-10|0.2.0.0 8-9|0.2 7-8|0 6-7|0.1 3-4|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.494
# ::node	0	lift-01	7-8
# ::node	0.0	speculate-01	1-2
# ::node	0.0.0	take-12	3-4
# ::node	0.0.0.0	date-entity	16-17
# ::node	0.0.0.0.0	1986	16-17
# ::node	0.1	full	6-7
# ::node	0.2	since	8-9
# ::node	0.2.0	float-01	10-11
# ::node	0.2.0.0	it	9-10
# ::node	0.2.0.1	share-01	14-15
# ::root	0	lift-01
# ::edge	date-entity	year	1986	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG0	it	0.2.0	0.2.0.0	
# ::edge	float-01	ARG1	share-01	0.2.0	0.2.0.1	
# ::edge	lift-01	ARG0	speculate-01	0	0.0	
# ::edge	lift-01	degree	full	0	0.1	
# ::edge	lift-01	time	since	0	0.2	
# ::edge	since	op1	float-01	0.2	0.2.0	
# ::edge	speculate-01	ARG1	take-12	0.0	0.0.0	
# ::edge	take-12	ARG1	date-entity	0.0.0	0.0.0.0	
(l / lift-01 
      :ARG0 (s3 / speculate-01 
            :ARG1 (t / take-12 
                  :ARG1 (d / date-entity 
                        :year 1986))) 
      :degree (f2 / full) 
      :time (s2 / since 
            :op1 (f / float-01 
                  :ARG0 (i / it) 
                  :ARG1 (s / share-01))))

# ::snt she floated looking up
# ::tok she floated looking up
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.498
# ::node	0	float-01	1-2
# ::node	0.0	she	0-1
# ::root	0	float-01
# ::edge	float-01	ARG0	she	0	0.0	
(f / float-01 
      :ARG0 (s / she))

# ::snt a club  microphones floated before gailys eyes and singers with lameacute
# ::tok a club microphones floated before gailys eyes and singers with lameacute
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.499
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt there are fragments of dna that are not incorporated in chromosomes but float freely and multiply in the fluid contents of cells especially bacterial cells
# ::tok there are fragments of dna that are not incorporated in chromosomes but float freely and multiply in the fluid contents of cells especially bacterial cells
# ::alignments 24-25|0.1.1.0.0.0.0 22-23|0.0 21-22|0.1.1.0.0.0.0.0 19-20|0.1.1.0.0.0+0.1.1.0.0 18-19|0.1.1.0.0.1 15-16|0.1.1.0 14-15|0.1.1 13-14|0.1.0 12-13|0.1 11-12|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.569
# ::node	0	contrast-01	11-12
# ::node	0.0	especially	22-23
# ::node	0.1	float-01	12-13
# ::node	0.1.0	free	13-14
# ::node	0.1.1	and	14-15
# ::node	0.1.1.0	multiply-01	15-16
# ::node	0.1.1.0.0	thing	19-20
# ::node	0.1.1.0.0.0	contain-01	19-20
# ::node	0.1.1.0.0.0.0	cell	24-25
# ::node	0.1.1.0.0.0.0.0	cell	21-22
# ::node	0.1.1.0.0.1	fluid	18-19
# ::root	0	contrast-01
# ::edge	and	op1	float-01	0.1.1	0.1	
# ::edge	and	op2	multiply-01	0.1.1	0.1.1.0	
# ::edge	cell	location	cell	0.1.1.0.0.0.0	0.1.1.0.0.0.0.0	
# ::edge	contain-01	ARG0	cell	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	contain-01	ARG1	thing	0.1.1.0.0.0	0.1.1.0.0	
# ::edge	contrast-01	ARG1	especially	0	0.0	
# ::edge	contrast-01	ARG2	float-01	0	0.1	
# ::edge	float-01	manner	free	0.1	0.1.0	
# ::edge	multiply-01	ARG1	thing	0.1.1.0	0.1.1.0.0	
# ::edge	thing	mod	fluid	0.1.1.0.0	0.1.1.0.0.1	
(c4 / contrast-01 
      :ARG1 (e / especially) 
      :ARG2 (f3 / float-01 
            :manner (f2 / free) 
            :op-of (a / and 
                  :op1 (m / multiply-01 
                        :ARG1 (t / thing 
                              :ARG1-of (c3 / contain-01 
                                    :ARG0 (c / cell 
                                          :location (c2 / cell))) 
                              :mod (f / fluid))))))

# ::snt i still remember felicias canopy bed all creamy eyelet embroidery floating on the thick apricot rug in that apricot room
# ::tok i still remember felicias canopy bed all creamy eyelet embroidery floating on the thick apricot rug in that apricot room
# ::alignments 19-20|0.1 13-14|0.0.0.0 10-11|0.2.0 6-7|0.2.0.0 5-6|0.0 4-5|0.0.0 2-3|0 1-2|0.2.1 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.719
# ::node	0	remember-01	2-3
# ::node	0.0	bed	5-6
# ::node	0.0.0	canopy	4-5
# ::node	0.0.0.0	thick	13-14
# ::node	0.1	room	19-20
# ::node	0.2	i	0-1
# ::node	0.2.0	float-01	10-11
# ::node	0.2.0.0	all	6-7
# ::node	0.2.1	still	1-2
# ::root	0	remember-01
# ::edge	bed	mod	canopy	0.0	0.0.0	
# ::edge	float-01	ARG0	all	0.2.0	0.2.0.0	
# ::edge	float-01	ARG1	i	0.2.0	0.2	
# ::edge	i	mod	remember-01	0.2	0	
# ::edge	i	mod	still	0.2	0.2.1	
# ::edge	remember-01	ARG1	bed	0	0.0	
# ::edge	remember-01	ARG2	room	0	0.1	
# ::edge	thick	poss	canopy	0.0.0.0	0.0.0	
(r2 / remember-01 
      :ARG1 (b / bed 
            :mod (c / canopy 
                  :poss-of (t / thick))) 
      :ARG2 (r / room) 
      :mod-of (i / i 
            :ARG1-of (f / float-01 
                  :ARG0 (a / all)) 
            :mod (s / still)))

# ::snt the plates which carry the continents on top float on the semimolten material deeper down where the intense pressures and temperatures have liquefied rock
# ::tok the plates which carry the continents on top float on the semimolten material deeper down where the intense pressures and temperatures have liquefied rock
# ::alignments 23-24|0.3 20-21|0.2 19-20|0 18-19|0.1 17-18|0.1.2 14-15|0.1.0 13-14|0.1.1 12-13|0.0.1 8-9|0.0 7-8|0.0.2 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:12.799
# ::node	0	and	19-20
# ::node	0.0	float-01	8-9
# ::node	0.0.0	plate	1-2
# ::node	0.0.1	material	12-13
# ::node	0.0.2	top	7-8
# ::node	0.1	pressure-01	18-19
# ::node	0.1.0	down	14-15
# ::node	0.1.1	deep	13-14
# ::node	0.1.2	intense	17-18
# ::node	0.2	temperature	20-21
# ::node	0.3	rock	23-24
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op2	pressure-01	0	0.1	
# ::edge	and	op3	temperature	0	0.2	
# ::edge	and	op4	rock	0	0.3	
# ::edge	float-01	ARG0	plate	0.0	0.0.0	
# ::edge	float-01	ARG1	material	0.0	0.0.1	
# ::edge	float-01	mod	top	0.0	0.0.2	
# ::edge	pressure-01	ARG0	down	0.1	0.1.0	
# ::edge	pressure-01	ARG1	deep	0.1	0.1.1	
# ::edge	pressure-01	mod	intense	0.1	0.1.2	
(a / and 
      :op1 (f / float-01 
            :ARG0 (p2 / plate) 
            :ARG1 (m / material) 
            :mod (t2 / top)) 
      :op2 (p / pressure-01 
            :ARG0 (d / down) 
            :ARG1 (d2 / deep) 
            :mod (i / intense)) 
      :op3 (t / temperature) 
      :op4 (r / rock))

# ::snt youd think drinking all those stars would make you feel like floating instead of like this i sand
# ::tok youd think drinking all those stars would make you feel like floating instead of like this i sand
# ::alignments 17-18|0 16-17|0.0 15-16|0.1 12-13|0.0.0.0.1.0 11-12|0.0.0 9-10|0.0.0.0.1 8-9|0.0.0.0 5-6|0.0.0.0.0.0.0 3-4|0.0.0.0.0.0.0.0 2-3|0.0.0.0.0.0 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:13.071
# ::node	0	sand-01	17-18
# ::node	0.0	i	16-17
# ::node	0.0.0	float-01	11-12
# ::node	0.0.0.0	you	8-9
# ::node	0.0.0.0.0	think-01	1-2
# ::node	0.0.0.0.0.0	drink-01	2-3
# ::node	0.0.0.0.0.0.0	star	5-6
# ::node	0.0.0.0.0.0.0.0	all	3-4
# ::node	0.0.0.0.1	feel-01	9-10
# ::node	0.0.0.0.1.0	instead	12-13
# ::node	0.1	this	15-16
# ::root	0	sand-01
# ::edge	drink-01	ARG1	star	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	feel-01	ARG0	you	0.0.0.0.1	0.0.0.0	
# ::edge	feel-01	ARG1	instead	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	float-01	ARG0	you	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	i	0.0.0	0.0	
# ::edge	sand-01	ARG0	i	0	0.0	
# ::edge	sand-01	mod	this	0	0.1	
# ::edge	star	quant	all	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	think-01	ARG0	you	0.0.0.0.0	0.0.0.0	
# ::edge	think-01	ARG1	drink-01	0.0.0.0.0	0.0.0.0.0.0	
(s / sand-01 
      :ARG0 (i / i 
            :ARG1-of (f / float-01 
                  :ARG0 (y / you 
                        :ARG0-of (t2 / think-01 
                              :ARG1 (d / drink-01 
                                    :ARG1 (s2 / star 
                                          :quant (a / all)))) 
                        :ARG0-of (f2 / feel-01 
                              :ARG1 (i2 / instead))))) 
      :mod (t / this))

# ::snt it involved pressure suits that looked like balloons and weighed 185 lbs duplicated failsafe life support systems fuel cells food that wouldnt leave crumbs floating in freefall and everybody always asks this question plastic bags for postnutritive disposal substances
# ::tok it involved pressure suits that looked like balloons and weighed 185 lbs duplicated failsafe life support systems fuel cells food that wouldnt leave crumbs floating in freefall and everybody always asks this question plastic bags for postnutritive disposal substances
# ::alignments 38-39|0.1.2 34-35|0.1 33-34|0.0 32-33|0 31-32|0.1.1 30-31|0.1.0 29-30|0.1.0.0 28-29|0.1.0.1.0.0.2 27-28|0.1.0.1.0.0 24-25|0.1.0.1.0.0.1 22-23|0.1.0.1.0.0.0.1.0.0 19-20|0.1.0.1.0.0.0.1.0 18-19|0.1.0.1.0.0.0.1.0.1 17-18|0.1.0.1.0.0.0.1 16-17|0.1.0.1.0.0.0 15-16|0.1.0.1.0.0.0.0 14-15|0.1.0.1.0.0.0.0.0 10-11|0.1.0.1.1.0.1.0 9-10|0.1.0.1.1 8-9|0.1.0.1 5-6|0.1.0.1.0 3-4|0.1.0.1.1.0 2-3|0.1.0.1.1.0.1 1-2|0.1.0.1.1.0.0.0 0-1|0.1.0.1.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:13.776
# ::node	0	question-01	32-33
# ::node	0.0	plastic	33-34
# ::node	0.1	bag	34-35
# ::node	0.1.0	ask-02	30-31
# ::node	0.1.0.0	always	29-30
# ::node	0.1.0.1	and	8-9
# ::node	0.1.0.1.0	look-01	5-6
# ::node	0.1.0.1.0.0	and	27-28
# ::node	0.1.0.1.0.0.0	system	16-17
# ::node	0.1.0.1.0.0.0.0	support-01	15-16
# ::node	0.1.0.1.0.0.0.0.0	life	14-15
# ::node	0.1.0.1.0.0.0.1	fuel	17-18
# ::node	0.1.0.1.0.0.0.1.0	food	19-20
# ::node	0.1.0.1.0.0.0.1.0.0	leave-01	22-23
# ::node	0.1.0.1.0.0.0.1.0.1	cell	18-19
# ::node	0.1.0.1.0.0.1	float-01	24-25
# ::node	0.1.0.1.0.0.2	everybody	28-29
# ::node	0.1.0.1.1	weigh-01	9-10
# ::node	0.1.0.1.1.0	suit-01	3-4
# ::node	0.1.0.1.1.0.0	it	0-1
# ::node	0.1.0.1.1.0.0.0	involve-01	1-2
# ::node	0.1.0.1.1.0.1	pressure-01	2-3
# ::node	0.1.0.1.1.0.1.0	185	10-11
# ::node	0.1.1	this	31-32
# ::node	0.1.2	substance	38-39
# ::root	0	question-01
# ::edge	and	op1	look-01	0.1.0.1	0.1.0.1.0	
# ::edge	and	op1	system	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	and	op2	float-01	0.1.0.1.0.0	0.1.0.1.0.0.1	
# ::edge	and	op2	weigh-01	0.1.0.1	0.1.0.1.1	
# ::edge	and	op3	ask-02	0.1.0.1	0.1.0	
# ::edge	and	op3	everybody	0.1.0.1.0.0	0.1.0.1.0.0.2	
# ::edge	ask-02	ARG1	bag	0.1.0	0.1	
# ::edge	ask-02	manner	always	0.1.0	0.1.0.0	
# ::edge	bag	mod	this	0.1	0.1.1	
# ::edge	food	mod	cell	0.1.0.1.0.0.0.1.0	0.1.0.1.0.0.0.1.0.1	
# ::edge	food	mod	fuel	0.1.0.1.0.0.0.1.0	0.1.0.1.0.0.0.1	
# ::edge	fuel	mod	system	0.1.0.1.0.0.0.1	0.1.0.1.0.0.0	
# ::edge	involve-01	ARG1	it	0.1.0.1.1.0.0.0	0.1.0.1.1.0.0	
# ::edge	leave-01	ARG1	food	0.1.0.1.0.0.0.1.0.0	0.1.0.1.0.0.0.1.0	
# ::edge	look-01	ARG1	and	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	pressure-01	ARG1	185	0.1.0.1.1.0.1	0.1.0.1.1.0.1.0	
# ::edge	question-01	ARG0	plastic	0	0.0	
# ::edge	question-01	ARG1	bag	0	0.1	
# ::edge	substance	quant	bag	0.1.2	0.1	
# ::edge	suit-01	ARG0	it	0.1.0.1.1.0	0.1.0.1.1.0.0	
# ::edge	suit-01	ARG1	pressure-01	0.1.0.1.1.0	0.1.0.1.1.0.1	
# ::edge	support-01	ARG0	system	0.1.0.1.0.0.0.0	0.1.0.1.0.0.0	
# ::edge	support-01	ARG1	life	0.1.0.1.0.0.0.0	0.1.0.1.0.0.0.0.0	
# ::edge	weigh-01	ARG1	suit-01	0.1.0.1.1	0.1.0.1.1.0	
(q / question-01 
      :ARG0 (p / plastic) 
      :ARG1 (b / bag 
            :ARG1-of (a / ask-02 
                  :manner (a2 / always) 
                  :op-of (a4 / and 
                        :op1 (l3 / look-01 
                              :ARG1 (a3 / and 
                                    :op1 (s2 / system 
                                          :ARG0-of (s3 / support-01 
                                                :ARG1 (l2 / life)) 
                                          :mod-of (f3 / fuel 
                                                :mod-of (f2 / food 
                                                      :ARG1-of (l / leave-01) 
                                                      :mod (c / cell)))) 
                                    :op2 (f / float-01) 
                                    :op3 (e / everybody))) 
                        :op2 (w / weigh-01 
                              :ARG1 (s4 / suit-01 
                                    :ARG0 (i2 / it 
                                          :ARG1-of (i / involve-01)) 
                                    :ARG1 (p2 / pressure-01 
                                          :ARG1 185))))) 
            :mod (t / this) 
            :quant-of (s / substance)))

# ::snt when they had the chores done she would sit with the two girls over a coffee and a cigarette a few floating specks of dust showing in the stream of quiet sunshine that poured through the window
# ::tok when they had the chores done she would sit with the two girls over a coffee and a cigarette a few floating specks of dust showing in the stream of quiet sunshine that poured through the window
# ::alignments 36-37|0.1.2.1 33-34|0.1.2 31-32|0.1.1 30-31|0.1.1.0 28-29|0.1 25-26|0 24-25|0.0 21-22|0.1.2.2 20-21|0.1.1.0.0 18-19|0.1.0 16-17|0.1.2.0.0.1.0 15-16|0.1.2.0.0.1.0.0 12-13|0.1.2.0.0.1 11-12|0.1.2.0.0.1.1 8-9|0.1.2.0.0 6-7|0.1.2.0.0.0 1-2|0.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:14.173
# ::node	0	show-01	25-26
# ::node	0.0	dust	24-25
# ::node	0.1	stream-02	28-29
# ::node	0.1.0	cigarette	18-19
# ::node	0.1.1	sunshine	31-32
# ::node	0.1.1.0	quiet-41	30-31
# ::node	0.1.1.0.0	few	20-21
# ::node	0.1.2	pour-01	33-34
# ::node	0.1.2.0	they	1-2
# ::node	0.1.2.0.0	sit-01	8-9
# ::node	0.1.2.0.0.0	she	6-7
# ::node	0.1.2.0.0.1	girl	12-13
# ::node	0.1.2.0.0.1.0	and	16-17
# ::node	0.1.2.0.0.1.0.0	coffee	15-16
# ::node	0.1.2.0.0.1.1	2	11-12
# ::node	0.1.2.1	window	36-37
# ::node	0.1.2.2	float-01	21-22
# ::root	0	show-01
# ::edge	and	op1	girl	0.1.2.0.0.1.0	0.1.2.0.0.1	
# ::edge	and	op2	coffee	0.1.2.0.0.1.0	0.1.2.0.0.1.0.0	
# ::edge	float-01	ARG1	pour-01	0.1.2.2	0.1.2	
# ::edge	girl	quant	2	0.1.2.0.0.1	0.1.2.0.0.1.1	
# ::edge	pour-01	ARG0	they	0.1.2	0.1.2.0	
# ::edge	pour-01	ARG1	window	0.1.2	0.1.2.1	
# ::edge	pour-01	ARG2	stream-02	0.1.2	0.1	
# ::edge	quiet-41	ARG0	few	0.1.1.0	0.1.1.0.0	
# ::edge	quiet-41	ARG1	sunshine	0.1.1.0	0.1.1	
# ::edge	show-01	ARG1	dust	0	0.0	
# ::edge	show-01	time	stream-02	0	0.1	
# ::edge	sit-01	ARG0	they	0.1.2.0.0	0.1.2.0	
# ::edge	sit-01	ARG1	she	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	sit-01	ARG2	girl	0.1.2.0.0	0.1.2.0.0.1	
# ::edge	stream-02	ARG0	cigarette	0.1	0.1.0	
# ::edge	stream-02	ARG1	sunshine	0.1	0.1.1	
(s3 / show-01 
      :ARG1 (d / dust) 
      :time (s2 / stream-02 
            :ARG0 (c / cigarette) 
            :ARG1 (s / sunshine 
                  :ARG1-of (q / quiet-41 
                        :ARG0 (f2 / few))) 
            :ARG2-of (p / pour-01 
                  :ARG0 (t / they 
                        :ARG0-of (s4 / sit-01 
                              :ARG1 (s5 / she) 
                              :ARG2 (g / girl 
                                    :op-of (a / and 
                                          :op1 (c2 / coffee)) 
                                    :quant 2))) 
                  :ARG1 (w / window) 
                  :ARG1-of (f / float-01))))

# ::snt but yesterday morning david platt whose firsttime volley from gascoignes floated freekicktook england to a quarterfinal against cameroon in naples on sunday admitted the moment still had not sunk in
# ::tok but yesterday morning david platt whose firsttime volley from gascoignes floated freekicktook england to a quarterfinal against cameroon in naples on sunday admitted the moment still had not sunk in
# ::alignments 28-29|0.1.1 25-26|0.1.1.1 24-25|0.1.1.0 22-23|0.1 21-22|0.1.0 12-13|0.1.2.0.0.0+0.1.2.0.0+0.1.2.0 10-11|0.1.2 2-3|0.0 1-2|0.1.3 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:14.346
# ::node	0	contrast-01	0-1
# ::node	0.0	morning	2-3
# ::node	0.1	admit-01	22-23
# ::node	0.1.0	sunday	21-22
# ::node	0.1.1	sink-01	28-29
# ::node	0.1.1.0	moment	24-25
# ::node	0.1.1.1	still	25-26
# ::node	0.1.2	float-01	10-11
# ::node	0.1.2.0	country	12-13
# ::node	0.1.2.0.0	name	12-13
# ::node	0.1.2.0.0.0	"England"	12-13
# ::node	0.1.3	yesterday	1-2
# ::root	0	contrast-01
# ::edge	admit-01	ARG0	sunday	0.1	0.1.0	
# ::edge	admit-01	ARG1	sink-01	0.1	0.1.1	
# ::edge	contrast-01	ARG0	morning	0	0.0	
# ::edge	contrast-01	ARG1	admit-01	0	0.1	
# ::edge	country	name	name	0.1.2.0	0.1.2.0.0	
# ::edge	float-01	ARG0	country	0.1.2	0.1.2.0	
# ::edge	float-01	ARG1	admit-01	0.1.2	0.1	
# ::edge	name	op1	"England"	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	sink-01	ARG1	moment	0.1.1	0.1.1.0	
# ::edge	sink-01	mod	still	0.1.1	0.1.1.1	
# ::edge	yesterday	op1	admit-01	0.1.3	0.1	
(c2 / contrast-01 
      :ARG0 (m2 / morning) 
      :ARG1 (a / admit-01 
            :ARG0 (s3 / sunday) 
            :ARG1 (s / sink-01 
                  :ARG1 (m / moment) 
                  :mod (s2 / still)) 
            :ARG1-of (f / float-01 
                  :ARG0 (c / country 
                        :name (n / name 
                              :op1 "England"))) 
            :op-of (y / yesterday)))

# ::snt that is stylizing the trains of womens gowns into elongated flat curving shapes floating across the picture plane
# ::tok that is stylizing the trains of womens gowns into elongated flat curving shapes floating across the picture plane
# ::alignments 17-18|0.0 16-17|0 14-15|0.0.0.1 13-14|0.0.0 10-11|0.0.0.1.0 4-5|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:14.378
# ::node	0	picture	16-17
# ::node	0.0	plane	17-18
# ::node	0.0.0	float-01	13-14
# ::node	0.0.0.0	train	4-5
# ::node	0.0.0.1	across	14-15
# ::node	0.0.0.1.0	flat	10-11
# ::root	0	picture
(p2 / picture 
      :mod-of (p / plane 
            :ARG2-of (f / float-01 
                  :ARG1 (t / train) 
                  :location (a / across 
                        :time-of (f2 / flat)))))

# ::snt horrors we who prefer to flush our own ordure out of sight and let it be pumped out to sea and float up on the beaches cannot face ordure in the woods
# ::tok horrors we who prefer to flush our own ordure out of sight and let it be pumped out to sea and float up on the beaches cannot face ordure in the woods
# ::alignments 27-28|0.1.0.0.3.0.1.0 25-26|0.1.0.0.3.0.1 21-22|0.1.0.0.3.0 20-21|0.1.0.0.3 19-20|0.1.0.0.2 16-17|0.1.0.0 14-15|0.1.0.0.1 13-14|0.1.0 12-13|0.1 11-12|0.1.0.0.0 3-4|0 1-2|0.0 0-1|0.1.0.0.3.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:14.840
# ::node	0	prefer-01	3-4
# ::node	0.0	we	1-2
# ::node	0.1	and	12-13
# ::node	0.1.0	let-01	13-14
# ::node	0.1.0.0	pump-01	16-17
# ::node	0.1.0.0.0	sight-01	11-12
# ::node	0.1.0.0.1	it	14-15
# ::node	0.1.0.0.2	sea	19-20
# ::node	0.1.0.0.3	and	20-21
# ::node	0.1.0.0.3.0	float-01	21-22
# ::node	0.1.0.0.3.0.0	horror	0-1
# ::node	0.1.0.0.3.0.1	beach	25-26
# ::node	0.1.0.0.3.0.1.0	face-01	27-28
# ::root	0	prefer-01
# ::edge	and	op1	let-01	0.1	0.1.0	
# ::edge	and	op1	pump-01	0.1.0.0.3	0.1.0.0	
# ::edge	and	op2	float-01	0.1.0.0.3	0.1.0.0.3.0	
# ::edge	face-01	ARG1	beach	0.1.0.0.3.0.1.0	0.1.0.0.3.0.1	
# ::edge	float-01	ARG1	horror	0.1.0.0.3.0	0.1.0.0.3.0.0	
# ::edge	float-01	ARG2	beach	0.1.0.0.3.0	0.1.0.0.3.0.1	
# ::edge	let-01	ARG1	pump-01	0.1.0	0.1.0.0	
# ::edge	prefer-01	ARG0	we	0	0.0	
# ::edge	prefer-01	ARG1	and	0	0.1	
# ::edge	pump-01	ARG0	sight-01	0.1.0.0	0.1.0.0.0	
# ::edge	pump-01	ARG1	it	0.1.0.0	0.1.0.0.1	
# ::edge	pump-01	ARG2	sea	0.1.0.0	0.1.0.0.2	
(p2 / prefer-01 
      :ARG0 (w / we) 
      :ARG1 (a2 / and 
            :op1 (l / let-01 
                  :ARG1 (p / pump-01 
                        :ARG0 (s2 / sight-01) 
                        :ARG1 (i / it) 
                        :ARG2 (s / sea) 
                        :op-of (a / and 
                              :op1 (f2 / float-01 
                                    :ARG1 (h / horror) 
                                    :ARG2 (b / beach 
                                          :ARG1-of (f / face-01))))))))

# ::snt hard to steer to balance to float she had learned instead to consent to cast herself onto the wind and learn the whole length and depth and height of its strength and in perfect relaxation the stern corseting of gravity left far below her whole body had been open to power and loveliness
# ::tok hard to steer to balance to float she had learned instead to consent to cast herself onto the wind and learn the whole length and depth and height of its strength and in perfect relaxation the stern corseting of gravity left far below her whole body had been open to power and loveliness
# ::alignments 51-52|0.0.0.0 50-51|0.0.0.0.0 45-46|0.1.0.0 44-45|0.1.0.0.0 42-43|0.1.0.0.1 41-42|0.1.0 39-40|0.1.0.0.2 36-37|0.1.3.0.0 34-35|0.1.3.0.1.0.0 33-34|0.1.3.0.1.0 31-32|0.0.0 30-31|0.0 26-27|0 24-25|0.1.1 23-24|0.1.2 22-23|0.1.2.0 20-21|0.1 19-20|0.1.3 18-19|0.1.3.0.2.0 16-17|0.1.3.0.2 14-15|0.1.3.0 12-13|0.1.3.0.1 10-11|0.1.3.0.1.1.2 9-10|0.1.3.0.1.1 7-8|0.1.3.0.1.1.0 6-7|0.1.3.0.1.1.1 4-5|0.1.3.0.1.1.1.0 0-1|0.1.3.0.1.1.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:16.407
# ::node	0	and	26-27
# ::node	0.0	strength	30-31
# ::node	0.0.0	and	31-32
# ::node	0.0.0.0	and	51-52
# ::node	0.0.0.0.0	power	50-51
# ::node	0.1	learn-01	20-21
# ::node	0.1.0	far	41-42
# ::node	0.1.0.0	body	45-46
# ::node	0.1.0.0.0	whole	44-45
# ::node	0.1.0.0.1	below	42-43
# ::node	0.1.0.0.2	gravity	39-40
# ::node	0.1.1	and	24-25
# ::node	0.1.2	length	23-24
# ::node	0.1.2.0	whole	22-23
# ::node	0.1.3	and	19-20
# ::node	0.1.3.0	cast-01	14-15
# ::node	0.1.3.0.0	stern	36-37
# ::node	0.1.3.0.1	consent-01	12-13
# ::node	0.1.3.0.1.0	perfect	33-34
# ::node	0.1.3.0.1.0.0	relax-01	34-35
# ::node	0.1.3.0.1.1	learn-01	9-10
# ::node	0.1.3.0.1.1.0	she	7-8
# ::node	0.1.3.0.1.1.1	float-01	6-7
# ::node	0.1.3.0.1.1.1.0	balance-01	4-5
# ::node	0.1.3.0.1.1.1.0.0	hard	0-1
# ::node	0.1.3.0.1.1.2	instead	10-11
# ::node	0.1.3.0.2	onto	16-17
# ::node	0.1.3.0.2.0	wind	18-19
# ::root	0	and
# ::edge	and	mod	strength	0	0.0	
# ::edge	and	op1	and	0.0.0.0	0.0.0	
# ::edge	and	op1	cast-01	0.1.3	0.1.3.0	
# ::edge	and	op1	learn-01	0	0.1	
# ::edge	and	op1	strength	0.0.0	0.0	
# ::edge	and	op2	learn-01	0.1.3	0.1	
# ::edge	and	op2	power	0.0.0.0	0.0.0.0.0	
# ::edge	balance-01	ARG0	hard	0.1.3.0.1.1.1.0	0.1.3.0.1.1.1.0.0	
# ::edge	balance-01	ARG1	float-01	0.1.3.0.1.1.1.0	0.1.3.0.1.1.1	
# ::edge	below	op1	body	0.1.0.0.1	0.1.0.0	
# ::edge	body	extent	whole	0.1.0.0	0.1.0.0.0	
# ::edge	body	mod	far	0.1.0.0	0.1.0	
# ::edge	cast-01	ARG1	stern	0.1.3.0	0.1.3.0.0	
# ::edge	cast-01	time	onto	0.1.3.0	0.1.3.0.2	
# ::edge	consent-01	ARG0	perfect	0.1.3.0.1	0.1.3.0.1.0	
# ::edge	consent-01	ARG1	cast-01	0.1.3.0.1	0.1.3.0	
# ::edge	float-01	ARG1	learn-01	0.1.3.0.1.1.1	0.1.3.0.1.1	
# ::edge	gravity	time	body	0.1.0.0.2	0.1.0.0	
# ::edge	learn-01	ARG0	far	0.1	0.1.0	
# ::edge	learn-01	ARG0	she	0.1.3.0.1.1	0.1.3.0.1.1.0	
# ::edge	learn-01	ARG1	and	0.1	0.1.1	
# ::edge	learn-01	ARG1	consent-01	0.1.3.0.1.1	0.1.3.0.1	
# ::edge	learn-01	ARG2	length	0.1	0.1.2	
# ::edge	learn-01	mod	instead	0.1.3.0.1.1	0.1.3.0.1.1.2	
# ::edge	length	quant	whole	0.1.2	0.1.2.0	
# ::edge	onto	op1	wind	0.1.3.0.2	0.1.3.0.2.0	
# ::edge	relax-01	mod	perfect	0.1.3.0.1.0.0	0.1.3.0.1.0	
(a3 / and 
      :mod (s2 / strength 
            :op-of (a2 / and 
                  :op-of (a / and 
                        :op1 (p / power)))) 
      :op1 (l2 / learn-01 
            :ARG0 (f / far 
                  :mod-of (b / body 
                        :extent (w / whole) 
                        :op-of (b2 / below) 
                        :time-of (g / gravity))) 
            :ARG1 (a4 / and) 
            :ARG2 (l / length 
                  :quant (w2 / whole)) 
            :op-of (a5 / and 
                  :op1 (c / cast-01 
                        :ARG1 (s / stern) 
                        :ARG1-of (c2 / consent-01 
                              :ARG0 (p2 / perfect 
                                    :mod-of (r / relax-01)) 
                              :ARG1-of (l3 / learn-01 
                                    :ARG0 (s3 / she) 
                                    :ARG1-of (f2 / float-01 
                                          :ARG1-of (b3 / balance-01 
                                                :ARG0 (h / hard))) 
                                    :mod (i / instead))) 
                        :time (o / onto 
                              :op1 (w3 / wind))))))

# ::snt maggie was safe because she never thought to deny fennas powers and floated with them but the older women suffered under the assaults of this strange visitor from within the dreaming self
# ::tok maggie was safe because she never thought to deny fennas powers and floated with them but the older women suffered under the assaults of this strange visitor from within the dreaming self
# ::alignments 31-32|0.0.1.0.0.0.1.1.0.0.0 30-31|0.0.1.0.0.0.1.1.0.0.0.0 28-29|0.0.1.0.0.0.1.1.0.0.0.1 26-27|0.0.1.0.0.0.1.1.0.0+0.0.1.0.0.0.1.1.0 25-26|0.0.1.0.0.0.1.1.0.1 24-25|0.0.1.0.0.0.1.1.0.2 22-23|0.0.1.0.0.0.1.1 19-20|0.0.1.0.0.0.1 18-19|0.0.1.0.0.0.1.0 17-18|0.1 15-16|0 12-13|0.0.1.0.0 11-12|0.0.1.0.0.0 10-11|0.0.1.1 8-9|0.0.1 6-7|0.0 4-5|0.0.1.0 3-4|0.0.0 2-3|0.0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:17.131
# ::node	0	contrast-01	15-16
# ::node	0.0	think-01	6-7
# ::node	0.0.0	cause-01	3-4
# ::node	0.0.1	deny-01	8-9
# ::node	0.0.1.0	she	4-5
# ::node	0.0.1.0.0	float-01	12-13
# ::node	0.0.1.0.0.0	and	11-12
# ::node	0.0.1.0.0.0.0	safe-41	2-3
# ::node	0.0.1.0.0.0.1	suffer-01	19-20
# ::node	0.0.1.0.0.0.1.0	woman	18-19
# ::node	0.0.1.0.0.0.1.1	assault-01	22-23
# ::node	0.0.1.0.0.0.1.1.0	person	26-27
# ::node	0.0.1.0.0.0.1.1.0.0	visit-01	26-27
# ::node	0.0.1.0.0.0.1.1.0.0.0	self	31-32
# ::node	0.0.1.0.0.0.1.1.0.0.0.0	dream-01	30-31
# ::node	0.0.1.0.0.0.1.1.0.0.0.1	within	28-29
# ::node	0.0.1.0.0.0.1.1.0.1	strange	25-26
# ::node	0.0.1.0.0.0.1.1.0.2	this	24-25
# ::node	0.0.1.1	power	10-11
# ::node	0.1	old	17-18
# ::root	0	contrast-01
# ::edge	and	op1	float-01	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	and	op2	suffer-01	0.0.1.0.0.0	0.0.1.0.0.0.1	
# ::edge	assault-01	ARG0	person	0.0.1.0.0.0.1.1	0.0.1.0.0.0.1.1.0	
# ::edge	cause-01	ARG0	think-01	0.0.0	0.0	
# ::edge	contrast-01	ARG1	think-01	0	0.0	
# ::edge	contrast-01	ARG2	old	0	0.1	
# ::edge	deny-01	ARG0	she	0.0.1	0.0.1.0	
# ::edge	deny-01	ARG1	power	0.0.1	0.0.1.1	
# ::edge	dream-01	ARG1	self	0.0.1.0.0.0.1.1.0.0.0.0	0.0.1.0.0.0.1.1.0.0.0	
# ::edge	float-01	ARG0	she	0.0.1.0.0	0.0.1.0	
# ::edge	person	mod	strange	0.0.1.0.0.0.1.1.0	0.0.1.0.0.0.1.1.0.1	
# ::edge	person	mod	this	0.0.1.0.0.0.1.1.0	0.0.1.0.0.0.1.1.0.2	
# ::edge	safe-41	ARG2	and	0.0.1.0.0.0.0	0.0.1.0.0.0	
# ::edge	suffer-01	ARG0	woman	0.0.1.0.0.0.1	0.0.1.0.0.0.1.0	
# ::edge	suffer-01	ARG1	assault-01	0.0.1.0.0.0.1	0.0.1.0.0.0.1.1	
# ::edge	think-01	ARG1	deny-01	0.0	0.0.1	
# ::edge	visit-01	ARG0	person	0.0.1.0.0.0.1.1.0.0	0.0.1.0.0.0.1.1.0	
# ::edge	visit-01	ARG1	self	0.0.1.0.0.0.1.1.0.0	0.0.1.0.0.0.1.1.0.0.0	
# ::edge	within	op1	self	0.0.1.0.0.0.1.1.0.0.0.1	0.0.1.0.0.0.1.1.0.0.0	
(c / contrast-01 
      :ARG1 (t2 / think-01 
            :ARG0-of (c2 / cause-01) 
            :ARG1 (d2 / deny-01 
                  :ARG0 (s4 / she 
                        :ARG0-of (f / float-01 
                              :op-of (a2 / and 
                                    :ARG2-of (s5 / safe-41) 
                                    :op1 (s3 / suffer-01 
                                          :ARG0 (w2 / woman) 
                                          :ARG1 (a / assault-01 
                                                :ARG0 (p / person 
                                                      :ARG0-of (v / visit-01 
                                                            :ARG1 (s / self 
                                                                  :ARG1-of (d / dream-01) 
                                                                  :op-of (w / within))) 
                                                      :mod (s2 / strange) 
                                                      :mod (t / this))))))) 
                  :ARG1 (p2 / power))) 
      :ARG2 (o / old))

# ::snt one solution floated last week was to take into account the disciplinary records of the teams on that basis the teams which had seen the fewest red and yellow cards flourished against them would have finished top of a tied group f
# ::tok one solution floated last week was to take into account the disciplinary records of the teams on that basis the teams which had seen the fewest red and yellow cards flourished against them would have finished top of a tied group f
# ::alignments 41-42|0.0 40-41|0.1 39-40|0 36-37|0.1.0 35-36|0.1.0.0 29-30|0.1.0.0.0.0.0.2 28-29|0.1.0.0.0.0.0.2.0 27-28|0.1.0.0.0.0.0 26-27|0.1.0.0.0.0.0.1 23-24|0.1.0.0.0.0 20-21|0.1.0.0.0 15-16|0.1.0.0.0.0.1.1 12-13|0.1.0.0.0.0.1 11-12|0.1.0.0.0.0.1.0 9-10|0.1.0.0.0.0.2 4-5|0.1.0.0.0.0.0.0.1 3-4|0.1.0.0.0.0.0.0.1.0 2-3|0.1.0.0.0.0.0.0 1-2|0.1.0.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:17.838
# ::node	0	tie-01	39-40
# ::node	0.0	f	41-42
# ::node	0.1	group	40-41
# ::node	0.1.0	top	36-37
# ::node	0.1.0.0	finish-01	35-36
# ::node	0.1.0.0.0	team	20-21
# ::node	0.1.0.0.0.0	see-01	23-24
# ::node	0.1.0.0.0.0.0	and	27-28
# ::node	0.1.0.0.0.0.0.0	float-01	2-3
# ::node	0.1.0.0.0.0.0.0.0	solution	1-2
# ::node	0.1.0.0.0.0.0.0.1	week	4-5
# ::node	0.1.0.0.0.0.0.0.1.0	last	3-4
# ::node	0.1.0.0.0.0.0.1	red	26-27
# ::node	0.1.0.0.0.0.0.2	card	29-30
# ::node	0.1.0.0.0.0.0.2.0	yellow	28-29
# ::node	0.1.0.0.0.0.1	record	12-13
# ::node	0.1.0.0.0.0.1.0	discipline	11-12
# ::node	0.1.0.0.0.0.1.1	team	15-16
# ::node	0.1.0.0.0.0.2	account	9-10
# ::root	0	tie-01
# ::edge	account	op1	see-01	0.1.0.0.0.0.2	0.1.0.0.0.0	
# ::edge	and	op1	float-01	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	and	op2	red	0.1.0.0.0.0.0	0.1.0.0.0.0.0.1	
# ::edge	and	op3	card	0.1.0.0.0.0.0	0.1.0.0.0.0.0.2	
# ::edge	card	mod	yellow	0.1.0.0.0.0.0.2	0.1.0.0.0.0.0.2.0	
# ::edge	finish-01	ARG0	team	0.1.0.0	0.1.0.0.0	
# ::edge	finish-01	ARG1	top	0.1.0.0	0.1.0	
# ::edge	float-01	ARG1	solution	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0	
# ::edge	float-01	ARG2	week	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0.0.1	
# ::edge	record	mod	discipline	0.1.0.0.0.0.1	0.1.0.0.0.0.1.0	
# ::edge	record	topic	team	0.1.0.0.0.0.1	0.1.0.0.0.0.1.1	
# ::edge	see-01	ARG0	team	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	see-01	ARG1	and	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	see-01	ARG2	record	0.1.0.0.0.0	0.1.0.0.0.0.1	
# ::edge	tie-01	ARG0	f	0	0.0	
# ::edge	tie-01	ARG1	group	0	0.1	
# ::edge	top	poss	group	0.1.0	0.1	
# ::edge	week	mod	last	0.1.0.0.0.0.0.0.1	0.1.0.0.0.0.0.0.1.0	
(t / tie-01 
      :ARG0 (f / f) 
      :ARG1 (g / group 
            :poss-of (t2 / top 
                  :ARG1-of (f2 / finish-01 
                        :ARG0 (t3 / team 
                              :ARG0-of (s / see-01 
                                    :ARG1 (a / and 
                                          :op1 (f3 / float-01 
                                                :ARG1 (s2 / solution) 
                                                :ARG2 (w / week 
                                                      :mod (l / last))) 
                                          :op2 (r / red) 
                                          :op3 (c / card 
                                                :mod (y / yellow))) 
                                    :ARG2 (r2 / record 
                                          :mod (d / discipline) 
                                          :topic (t4 / team)) 
                                    :op-of (a2 / account)))))))

# ::snt these tears blind her so that the red tiles of the floor appear to be curving the roses on the bedspread float as if on a lake and the beaded eyes of the teddy bear glint at her with malice
# ::tok these tears blind her so that the red tiles of the floor appear to be curving the roses on the bedspread float as if on a lake and the beaded eyes of the teddy bear glint at her with malice
# ::alignments 39-40|0.0.1.0.1.0 34-35|0.0.1.0.1 30-31|0.2 27-28|0 26-27|0.1 21-22|0.0 17-18|0.0.1 12-13|0.0.1.0 11-12|0.0.1.0.2 7-8|0.0.0 4-5|0.0.1.0.0.0.0 2-3|0.0.1.0.0.0 1-2|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.185
# ::node	0	and	27-28
# ::node	0.0	float-01	21-22
# ::node	0.0.0	red	7-8
# ::node	0.0.1	rose	17-18
# ::node	0.0.1.0	appear-02	12-13
# ::node	0.0.1.0.0	tear	1-2
# ::node	0.0.1.0.0.0	blind-01	2-3
# ::node	0.0.1.0.0.0.0	so	4-5
# ::node	0.0.1.0.1	bear-02	34-35
# ::node	0.0.1.0.1.0	malice	39-40
# ::node	0.0.1.0.2	floor	11-12
# ::node	0.1	lake	26-27
# ::node	0.2	eye	30-31
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op2	lake	0	0.1	
# ::edge	and	op3	eye	0	0.2	
# ::edge	appear-02	ARG0	tear	0.0.1.0	0.0.1.0.0	
# ::edge	appear-02	ARG1	rose	0.0.1.0	0.0.1	
# ::edge	appear-02	manner	floor	0.0.1.0	0.0.1.0.2	
# ::edge	bear-02	ARG0	malice	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	bear-02	ARG1	appear-02	0.0.1.0.1	0.0.1.0	
# ::edge	blind-01	ARG1	tear	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	blind-01	manner	so	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	float-01	ARG0	red	0.0	0.0.0	
# ::edge	float-01	ARG1	rose	0.0	0.0.1	
(a / and 
      :op1 (f / float-01 
            :ARG0 (r2 / red) 
            :ARG1 (r / rose 
                  :ARG1-of (a2 / appear-02 
                        :ARG0 (t / tear 
                              :ARG1-of (b2 / blind-01 
                                    :manner (s / so))) 
                        :ARG1-of (b / bear-02 
                              :ARG0 (m / malice)) 
                        :manner (f2 / floor)))) 
      :op2 (l / lake) 
      :op3 (e / eye))

# ::snt ridiculous yet there was a kind of pleasure to be got from letting it float idly in the stream of ones thoughts driving to and from work
# ::tok ridiculous yet there was a kind of pleasure to be got from letting it float idly in the stream of ones thoughts driving to and from work
# ::alignments 24-25|0 22-23|0.0 20-21|0.0.2.0.0 18-19|0.0.1 14-15|0.0.2 13-14|0.0.2.0 12-13|0.0.2.1 7-8|0.0.2.1.0.1 5-6|0.0.2.1.0 1-2|0.0.2.1.0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.370
# ::node	0	and	24-25
# ::node	0.0	drive-01	22-23
# ::node	0.0.0	ridiculous	0-1
# ::node	0.0.1	stream-02	18-19
# ::node	0.0.2	float-01	14-15
# ::node	0.0.2.0	it	13-14
# ::node	0.0.2.0.0	one	20-21
# ::node	0.0.2.1	let-01	12-13
# ::node	0.0.2.1.0	kind	5-6
# ::node	0.0.2.1.0.0	yet	1-2
# ::node	0.0.2.1.0.1	pleasure	7-8
# ::root	0	and
(a / and 
      :ARG1-of (d / drive-01 
            :ARG0 (r / ridiculous) 
            :ARG1-of (s / stream-02) 
            :ARG2-of (f / float-01 
                  :ARG0 (i / it 
                        :domain-of (o / one)) 
                  :ARG1-of (l / let-01 
                        :ARG0 (k / kind 
                              :mod (y / yet) 
                              :mod-of (p / pleasure))))))

# ::snt   mr chapman is expecting to publish around 25 books in the first year and could float the company within five years
# ::tok mr chapman is expecting to publish around 25 books in the first year and could float the company within five years
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.370
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt he wanted to own up to those ghastly thoughts that floated into his head that in some awful way sustained him the things he didnt speak about even to himself
# ::tok he wanted to own up to those ghastly thoughts that floated into his head that in some awful way sustained him the things he didnt speak about even to himself
# ::alignments 25-26|0 23-24|0.0 22-23|0.1 19-20|0.1.0 18-19|0.1.0.0 17-18|0.1.0.0.1 16-17|0.1.0.0.0 13-14|0.0.0.0 10-11|0.0.0 1-2|0.0.0.1 0-1|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.556
# ::node	0	speak-01	25-26
# ::node	0.0	he	23-24
# ::node	0.0.0	float-01	10-11
# ::node	0.0.0.0	head-01	13-14
# ::node	0.0.0.1	want-01	1-2
# ::node	0.0.0.1.0	he	0-1
# ::node	0.1	thing	22-23
# ::node	0.1.0	sustain-01	19-20
# ::node	0.1.0.0	way	18-19
# ::node	0.1.0.0.0	some	16-17
# ::node	0.1.0.0.1	awful	17-18
# ::root	0	speak-01
# ::edge	float-01	ARG0	he	0.0.0	0.0	
# ::edge	float-01	ARG1	head-01	0.0.0	0.0.0.0	
# ::edge	speak-01	ARG0	he	0	0.0	
# ::edge	speak-01	ARG1	thing	0	0.1	
# ::edge	sustain-01	ARG0	way	0.1.0	0.1.0.0	
# ::edge	sustain-01	ARG1	thing	0.1.0	0.1	
# ::edge	want-01	ARG0	he	0.0.0.1	0.0.0.1.0	
# ::edge	want-01	ARG1	float-01	0.0.0.1	0.0.0	
# ::edge	way	mod	awful	0.1.0.0	0.1.0.0.1	
# ::edge	way	mod	some	0.1.0.0	0.1.0.0.0	
(s / speak-01 
      :ARG0 (h / he 
            :ARG0-of (f / float-01 
                  :ARG1 (h2 / head-01) 
                  :ARG1-of (w2 / want-01 
                        :ARG0 (h3 / he)))) 
      :ARG1 (t / thing 
            :ARG1-of (s2 / sustain-01 
                  :ARG0 (w / way 
                        :mod (s3 / some) 
                        :mod (a / awful)))))

# ::snt float thin slices of lemon lime or orange or sprinkle with strips of zest
# ::tok float thin slices of lemon lime or orange or sprinkle with strips of zest
# ::alignments 11-12|0.1 8-9|0 7-8|0.2.0.0 6-7|0.2.0 2-3|0.0 1-2|0.0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.610
# ::node	0	or	8-9
# ::node	0.0	slice	2-3
# ::node	0.0.0	thin	1-2
# ::node	0.1	strip	11-12
# ::node	0.2	float-01	0-1
# ::node	0.2.0	or	6-7
# ::node	0.2.0.0	orange	7-8
# ::root	0	or
# ::edge	float-01	ARG1	or	0.2	0.2.0	
# ::edge	or	location	strip	0	0.1	
# ::edge	or	op1	float-01	0	0.2	
# ::edge	or	op1	orange	0.2.0	0.2.0.0	
# ::edge	slice	example	or	0.0	0	
# ::edge	slice	mod	thin	0.0	0.0.0	
(o / or 
      :example-of (s2 / slice 
            :mod (t / thin)) 
      :location (s / strip) 
      :op1 (f / float-01 
            :ARG1 (o3 / or 
                  :op1 (o2 / orange))))

# ::snt the first duck to float past the downstream winning post will collect a 50 prize
# ::tok the first duck to float past the downstream winning post will collect a 50 prize
# ::alignments 14-15|0.1.0 13-14|0.1.0.0 11-12|0.1 9-10|0.0.0 8-9|0.0.0.0 5-6|0.0.1 4-5|0.0 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.692
# ::node	0	duck	2-3
# ::node	0.0	float-01	4-5
# ::node	0.0.0	post	9-10
# ::node	0.0.0.0	win-01	8-9
# ::node	0.0.1	past	5-6
# ::node	0.1	collect-01	11-12
# ::node	0.1.0	prize-01	14-15
# ::node	0.1.0.0	50	13-14
# ::root	0	duck
(d / duck 
      :ARG0-of (f / float-01 
            :ARG1 (p2 / post 
                  :ARG1-of (w / win-01)) 
            :ARG2 (p3 / past)) 
      :ARG0-of (c / collect-01 
            :ARG1 (p / prize-01 
                  :quant 50)))

# ::snt royal assent for a bill to move the market to northeast london is expected by the end of the year and the group hopes to complete the redevelopment by 1995  stock broking analysts are about to start making choices about which of the 10 water authorities being floated in early december are worth investing in
# ::tok royal assent for a bill to move the market to northeast london is expected by the end of the year and the group hopes to complete the redevelopment by 1995 stock broking analysts are about to start making choices about which of the 10 water authorities being floated in early december are worth investing in
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.694
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt it was a funny word to float into his mind but well chaste
# ::tok it was a funny word to float into his mind but well chaste
# ::alignments 11-12|0.0 10-11|0 9-10|0.1.1 6-7|0.1 4-5|0.1.0 3-4|0.1.0.1 0-1|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.726
# ::node	0	contrast-01	10-11
# ::node	0.0	well	11-12
# ::node	0.1	float-01	6-7
# ::node	0.1.0	word	4-5
# ::node	0.1.0.0	it	0-1
# ::node	0.1.0.1	funny	3-4
# ::node	0.1.1	mind	9-10
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	well	0	0.0	
# ::edge	float-01	ARG0	word	0.1	0.1.0	
# ::edge	float-01	ARG1	contrast-01	0.1	0	
# ::edge	float-01	location	mind	0.1	0.1.1	
# ::edge	word	domain	it	0.1.0	0.1.0.0	
# ::edge	word	mod	funny	0.1.0	0.1.0.1	
(c / contrast-01 
      :ARG1 (w / well) 
      :ARG1-of (f / float-01 
            :ARG0 (w2 / word 
                  :domain (i / it) 
                  :mod (f2 / funny)) 
            :location (m / mind)))

# ::snt the story that began when little gregory villemin was found floating on the dark waters of the vologne is not yet over
# ::tok the story that began when little gregory villemin was found floating on the dark waters of the vologne is not yet over
# ::alignments 20-21|0.0 14-15|0.1.0 13-14|0.1.0.0 10-11|0.1 9-10|0 5-6|0.2.1 3-4|0.2 1-2|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:18.813
# ::node	0	find-01	9-10
# ::node	0.0	yet	20-21
# ::node	0.1	float-01	10-11
# ::node	0.1.0	water	14-15
# ::node	0.1.0.0	dark	13-14
# ::node	0.2	begin-01	3-4
# ::node	0.2.0	story	1-2
# ::node	0.2.1	little	5-6
# ::root	0	find-01
# ::edge	begin-01	ARG0	story	0.2	0.2.0	
# ::edge	begin-01	ARG1	little	0.2	0.2.1	
# ::edge	begin-01	purpose	find-01	0.2	0	
# ::edge	find-01	ARG0	yet	0	0.0	
# ::edge	find-01	ARG1	float-01	0	0.1	
# ::edge	float-01	ARG1	water	0.1	0.1.0	
# ::edge	water	mod	dark	0.1.0	0.1.0.0	
(f2 / find-01 
      :ARG0 (y / yet) 
      :ARG1 (f / float-01 
            :ARG1 (w / water 
                  :mod (d / dark))) 
      :purpose-of (b / begin-01 
            :ARG0 (s / story) 
            :ARG1 (l / little)))

# ::snt a group claiming the support of thousands of outofpocket investors in abbey national has sent detailed compensation proposals to directors of the newly floated financial combine
# ::tok a group claiming the support of thousands of outofpocket investors in abbey national has sent detailed compensation proposals to directors of the newly floated financial combine
# ::alignments 25-26|0.4 24-25|0.4.1 23-24|0.4.0 19-20|0.2 17-18|0.1.2+0.1 16-17|0.1.0 15-16|0.1.1 14-15|0 12-13|0.3 9-10|0.0.0.0.0.0+0.0.0.0.0 4-5|0.0.0.0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:19.120
# ::node	0	send-01	14-15
# ::node	0.0	group	1-2
# ::node	0.0.0	claim-01	2-3
# ::node	0.0.0.0	support-01	4-5
# ::node	0.0.0.0.0	person	9-10
# ::node	0.0.0.0.0.0	invest-01	9-10
# ::node	0.1	thing	17-18
# ::node	0.1.0	compensate-01	16-17
# ::node	0.1.1	detail-01	15-16
# ::node	0.1.2	propose-01	17-18
# ::node	0.2	director	19-20
# ::node	0.3	nation	12-13
# ::node	0.4	combine-01	25-26
# ::node	0.4.0	float-01	23-24
# ::node	0.4.1	finance	24-25
# ::root	0	send-01
# ::edge	claim-01	ARG0	group	0.0.0	0.0	
# ::edge	claim-01	ARG1	support-01	0.0.0	0.0.0.0	
# ::edge	combine-01	mod	finance	0.4	0.4.1	
# ::edge	compensate-01	ARG1	thing	0.1.0	0.1	
# ::edge	detail-01	ARG1	thing	0.1.1	0.1	
# ::edge	float-01	ARG1	combine-01	0.4.0	0.4	
# ::edge	invest-01	ARG0	person	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	propose-01	ARG1	thing	0.1.2	0.1	
# ::edge	send-01	ARG0	group	0	0.0	
# ::edge	send-01	ARG1	thing	0	0.1	
# ::edge	send-01	ARG2	director	0	0.2	
# ::edge	send-01	manner	nation	0	0.3	
# ::edge	send-01	purpose	combine-01	0	0.4	
# ::edge	support-01	ARG1	person	0.0.0.0	0.0.0.0.0	
(s / send-01 
      :ARG0 (g / group 
            :ARG0-of (c3 / claim-01 
                  :ARG1 (s2 / support-01 
                        :ARG1 (p2 / person 
                              :ARG0-of (i / invest-01))))) 
      :ARG1 (t / thing 
            :ARG1-of (c2 / compensate-01) 
            :ARG1-of (d2 / detail-01) 
            :ARG1-of (p / propose-01)) 
      :ARG2 (d / director) 
      :manner (n / nation) 
      :purpose (c / combine-01 
            :ARG1-of (f2 / float-01) 
            :mod (f / finance)))

# ::snt the question of pace is not just musical but dramatic and the convention of a slow and for the singer very demanding porgi amor has a purpose more profound than mere soupy tone floating forth
# ::tok the question of pace is not just musical but dramatic and the convention of a slow and for the singer very demanding porgi amor has a purpose more profound than mere soupy tone floating forth
# ::alignments 34-35|0.0.1.0.2 33-34|0.0.1.0 32-33|0.0.1.0.1 30-31|0.0.1.0.1.0 28-29|0.0.1 26-27|0.1.0.0 21-22|0.0.1.0.3.0 20-21|0.0.1.0.3.0.1 19-20|0.0.1.0.3.0.0.0+0.0.1.0.3.0.0 16-17|0.0.1.0.3 12-13|0.0.1.0.0 10-11|0.0 9-10|0.1 8-9|0 7-8|0.1.0.2 6-7|0.0.0 3-4|0.1.0.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:19.813
# ::node	0	contrast-01	8-9
# ::node	0.0	and	10-11
# ::node	0.0.0	just	6-7
# ::node	0.0.1	profound	28-29
# ::node	0.0.1.0	float-01	33-34
# ::node	0.0.1.0.0	convention	12-13
# ::node	0.0.1.0.1	tone	32-33
# ::node	0.0.1.0.1.0	mere	30-31
# ::node	0.0.1.0.2	forth	34-35
# ::node	0.0.1.0.3	and	16-17
# ::node	0.0.1.0.3.0	demand-01	21-22
# ::node	0.0.1.0.3.0.0	person	19-20
# ::node	0.0.1.0.3.0.0.0	sing-01	19-20
# ::node	0.0.1.0.3.0.1	very	20-21
# ::node	0.1	dramatic	9-10
# ::node	0.1.0	question-01	1-2
# ::node	0.1.0.0	purpose	26-27
# ::node	0.1.0.1	pace	3-4
# ::node	0.1.0.2	music	7-8
# ::root	0	contrast-01
# ::edge	and	mod	just	0.0	0.0.0	
# ::edge	and	op1	float-01	0.0.1.0.3	0.0.1.0	
# ::edge	and	op1	profound	0.0	0.0.1	
# ::edge	contrast-01	ARG1	and	0	0.0	
# ::edge	contrast-01	ARG2	dramatic	0	0.1	
# ::edge	demand-01	ARG0	person	0.0.1.0.3.0	0.0.1.0.3.0.0	
# ::edge	demand-01	ARG1	and	0.0.1.0.3.0	0.0.1.0.3	
# ::edge	demand-01	degree	very	0.0.1.0.3.0	0.0.1.0.3.0.1	
# ::edge	dramatic	domain	question-01	0.1	0.1.0	
# ::edge	float-01	ARG0	convention	0.0.1.0	0.0.1.0.0	
# ::edge	float-01	ARG1	tone	0.0.1.0	0.0.1.0.1	
# ::edge	float-01	manner	forth	0.0.1.0	0.0.1.0.2	
# ::edge	music	domain	question-01	0.1.0.2	0.1.0	
# ::edge	profound	purpose	float-01	0.0.1	0.0.1.0	
# ::edge	question-01	ARG0	purpose	0.1.0	0.1.0.0	
# ::edge	question-01	ARG1	pace	0.1.0	0.1.0.1	
# ::edge	sing-01	ARG0	person	0.0.1.0.3.0.0.0	0.0.1.0.3.0.0	
# ::edge	tone	mod	mere	0.0.1.0.1	0.0.1.0.1.0	
(c2 / contrast-01 
      :ARG1 (a2 / and 
            :mod (j / just) 
            :op1 (p / profound 
                  :purpose (f2 / float-01 
                        :ARG0 (c / convention) 
                        :ARG1 (t / tone 
                              :mod (m / mere)) 
                        :manner (f / forth) 
                        :op-of (a / and 
                              :ARG1-of (d / demand-01 
                                    :ARG0 (p3 / person 
                                          :ARG0-of (s / sing-01)) 
                                    :degree (v / very)))))) 
      :ARG2 (d2 / dramatic 
            :domain (q / question-01 
                  :ARG0 (p2 / purpose) 
                  :ARG1 (p4 / pace) 
                  :domain-of (m2 / music))))

# ::snt she has suspended them from wires to create an apparition of a floating recumbent figure dash
# ::tok she has suspended them from wires to create an apparition of a floating recumbent figure dash
# ::alignments 14-15|0.0.0.0.0 12-13|0.0.0.0 7-8|0.0.0 5-6|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:19.868
# ::node	0	suspend-01	2-3
# ::node	0.0	she	0-1
# ::node	0.0.0	create-01	7-8
# ::node	0.0.0.0	float-01	12-13
# ::node	0.0.0.0.0	figure	14-15
# ::node	0.1	wire	5-6
# ::root	0	suspend-01
# ::edge	create-01	ARG0	she	0.0.0	0.0	
# ::edge	create-01	ARG1	float-01	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	figure	0.0.0.0	0.0.0.0.0	
# ::edge	suspend-01	ARG0	she	0	0.0	
# ::edge	suspend-01	ARG2	wire	0	0.1	
(s / suspend-01 
      :ARG0 (s2 / she 
            :ARG0-of (c / create-01 
                  :ARG1 (f2 / float-01 
                        :ARG1 (f / figure)))) 
      :ARG2 (w / wire))

# ::snt all floating like ships becalmed at a docile 54mph
# ::tok all floating like ships becalmed at a docile 54mph
# ::alignments 3-4|0.0 1-2|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:19.877
# ::node	0	float-01	1-2
# ::node	0.0	ship	3-4
# ::node	0.0.0	all	0-1
# ::root	0	float-01
# ::edge	float-01	ARG1	ship	0	0.0	
# ::edge	ship	quant	all	0.0	0.0.0	
(f / float-01 
      :ARG1 (s / ship 
            :quant (a / all)))

# ::snt i recall that i designed it as a wooden pole structure with a simple warehouselike frame with partitions and walls also of wood floating around independent of the frame dash
# ::tok i recall that i designed it as a wooden pole structure with a simple warehouselike frame with partitions and walls also of wood floating around independent of the frame dash
# ::alignments 28-29|0.1.0.1 25-26|0.1.0.0.0.2+0.1.0.0.0 24-25|0.1.0.0.0.1 23-24|0.1.0 22-23|0.1.0.0 20-21|0.1.0.0.0.0 19-20|0.1 18-19|0 15-16|0.2 13-14|0.2.0 10-11|0.0.3 9-10|0.0.3.1 8-9|0.0.3.0 5-6|0.0.1 4-5|0.0 3-4|0.0.0 1-2|0.0.2 0-1|0.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:20.118
# ::node	0	and	18-19
# ::node	0.0	design-01	4-5
# ::node	0.0.0	i	3-4
# ::node	0.0.1	it	5-6
# ::node	0.0.2	recall-02	1-2
# ::node	0.0.2.0	i	0-1
# ::node	0.0.3	structure	10-11
# ::node	0.0.3.0	wood	8-9
# ::node	0.0.3.1	pole	9-10
# ::node	0.1	wall	19-20
# ::node	0.1.0	float-01	23-24
# ::node	0.1.0.0	wood	22-23
# ::node	0.1.0.0.0	depend-01	25-26
# ::node	0.1.0.0.0.0	also	20-21
# ::node	0.1.0.0.0.1	around	24-25
# ::node	0.1.0.0.0.2	-	25-26
# ::node	0.1.0.1	frame	28-29
# ::node	0.2	frame	15-16
# ::node	0.2.0	simple	13-14
# ::root	0	and
# ::edge	and	op1	design-01	0	0.0	
# ::edge	and	op2	wall	0	0.1	
# ::edge	around	op1	depend-01	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	depend-01	ARG0	wood	0.1.0.0.0	0.1.0.0	
# ::edge	depend-01	ARG1	also	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	depend-01	polarity	-	0.1.0.0.0	0.1.0.0.0.2	
# ::edge	design-01	ARG0	i	0.0	0.0.0	
# ::edge	design-01	ARG1	it	0.0	0.0.1	
# ::edge	design-01	ARG2	structure	0.0	0.0.3	
# ::edge	float-01	ARG0	wall	0.1.0	0.1	
# ::edge	float-01	ARG1	wood	0.1.0	0.1.0.0	
# ::edge	float-01	duration	frame	0.1.0	0.1.0.1	
# ::edge	frame	mod	simple	0.2	0.2.0	
# ::edge	frame	poss	and	0.2	0	
# ::edge	recall-02	ARG0	i	0.0.2	0.0.2.0	
# ::edge	recall-02	ARG1	design-01	0.0.2	0.0	
# ::edge	structure	mod	pole	0.0.3	0.0.3.1	
# ::edge	structure	mod	wood	0.0.3	0.0.3.0	
(a3 / and 
      :op1 (d2 / design-01 
            :ARG0 (i2 / i) 
            :ARG1 (i / it) 
            :ARG1-of (r / recall-02 
                  :ARG0 (i3 / i)) 
            :ARG2 (s2 / structure 
                  :mod (w3 / wood) 
                  :mod (p / pole))) 
      :op2 (w2 / wall 
            :ARG0-of (f2 / float-01 
                  :ARG1 (w / wood 
                        :ARG0-of (d / depend-01 
                              :ARG1 (a2 / also) 
                              :op-of (a / around) 
                              :polarity -)) 
                  :duration (f / frame))) 
      :poss-of (f3 / frame 
            :mod (s / simple)))

# ::snt the company was floated in march at 125p and the share price rose to 188p by mid july
# ::tok the company was floated in march at 125p and the share price rose to 188p by mid july
# ::alignments 17-18|0.1.1.1+0.1.1 16-17|0.1.1.0 12-13|0.1 11-12|0.1.0.1+0.1.0 10-11|0.1.0.0 8-9|0 5-6|0.0.1.0+0.0.1 3-4|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:20.196
# ::node	0	and	8-9
# ::node	0.0	float-01	3-4
# ::node	0.0.0	company	1-2
# ::node	0.0.1	date-entity	5-6
# ::node	0.0.1.0	3	5-6
# ::node	0.1	rise-01	12-13
# ::node	0.1.0	thing	11-12
# ::node	0.1.0.0	share-01	10-11
# ::node	0.1.0.1	price-01	11-12
# ::node	0.1.1	date-entity	17-18
# ::node	0.1.1.0	mid	16-17
# ::node	0.1.1.1	7	17-18
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op2	rise-01	0	0.1	
# ::edge	date-entity	mod	mid	0.1.1	0.1.1.0	
# ::edge	date-entity	month	3	0.0.1	0.0.1.0	
# ::edge	date-entity	month	7	0.1.1	0.1.1.1	
# ::edge	float-01	ARG1	company	0.0	0.0.0	
# ::edge	float-01	time	date-entity	0.0	0.0.1	
# ::edge	price-01	ARG2	thing	0.1.0.1	0.1.0	
# ::edge	rise-01	ARG1	thing	0.1	0.1.0	
# ::edge	rise-01	time	date-entity	0.1	0.1.1	
# ::edge	share-01	ARG1	thing	0.1.0.0	0.1.0	
(a / and 
      :op1 (f / float-01 
            :ARG1 (c / company) 
            :time (d2 / date-entity 
                  :month 3)) 
      :op2 (r / rise-01 
            :ARG1 (t / thing 
                  :ARG1-of (s / share-01) 
                  :ARG2-of (p / price-01)) 
            :time (d / date-entity 
                  :mod (m / mid) 
                  :month 7)))

# ::snt  youre wrong alex he said at last his voice pensive floating
# ::tok youre wrong alex he said at last his voice pensive floating
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:20.197
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the company was floated on the new york stock exchange in august 1988 but has been a poor performer suffering in the subsequent weakening of the gold price
# ::tok the company was floated on the new york stock exchange in august 1988 but has been a poor performer suffering in the subsequent weakening of the gold price
# ::alignments 27-28|0.1.1.0.0+0.1.1.0 26-27|0.0.0 23-24|0.1.1 22-23|0.1.1.1 19-20|0.1 18-19|0.1.0.0+0.1.0 17-18|0.1.0.1 13-14|0 11-13|0.0.2.2.1+0.0.2.2.0+0.0.2.2 9-10|0.0.2 8-9|0.0.2.1 6-8|0.0.2.0.0.0+0.0.2.0.0.1+0.0.2.0.0+0.0.2.0 3-4|0.0 1-2|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:20.367
# ::node	0	contrast-01	13-14
# ::node	0.0	float-01	3-4
# ::node	0.0.0	gold	26-27
# ::node	0.0.1	company	1-2
# ::node	0.0.2	exchange-01	9-10
# ::node	0.0.2.0	country	6-8
# ::node	0.0.2.0.0	name	6-8
# ::node	0.0.2.0.0.0	"york"	6-8
# ::node	0.0.2.0.0.1	"new"	6-8
# ::node	0.0.2.1	stock	8-9
# ::node	0.0.2.2	date-entity	11-13
# ::node	0.0.2.2.0	8	11-13
# ::node	0.0.2.2.1	1988	11-13
# ::node	0.1	suffer-01	19-20
# ::node	0.1.0	person	18-19
# ::node	0.1.0.0	perform-01	18-19
# ::node	0.1.0.1	poor	17-18
# ::node	0.1.1	weaken-01	23-24
# ::node	0.1.1.0	thing	27-28
# ::node	0.1.1.0.0	price-01	27-28
# ::node	0.1.1.1	subsequent	22-23
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	float-01	0	0.0	
# ::edge	contrast-01	ARG2	suffer-01	0	0.1	
# ::edge	country	name	name	0.0.2.0	0.0.2.0.0	
# ::edge	date-entity	month	8	0.0.2.2	0.0.2.2.0	
# ::edge	date-entity	year	1988	0.0.2.2	0.0.2.2.1	
# ::edge	exchange-01	ARG0	country	0.0.2	0.0.2.0	
# ::edge	exchange-01	ARG1	stock	0.0.2	0.0.2.1	
# ::edge	exchange-01	time	date-entity	0.0.2	0.0.2.2	
# ::edge	float-01	ARG0	gold	0.0	0.0.0	
# ::edge	float-01	ARG1	company	0.0	0.0.1	
# ::edge	float-01	ARG2	exchange-01	0.0	0.0.2	
# ::edge	name	op1	"york"	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	name	op2	"new"	0.0.2.0.0	0.0.2.0.0.1	
# ::edge	perform-01	ARG0	person	0.1.0.0	0.1.0	
# ::edge	person	mod	poor	0.1.0	0.1.0.1	
# ::edge	price-01	ARG2	thing	0.1.1.0.0	0.1.1.0	
# ::edge	suffer-01	ARG0	person	0.1	0.1.0	
# ::edge	suffer-01	ARG1	weaken-01	0.1	0.1.1	
# ::edge	weaken-01	ARG1	thing	0.1.1	0.1.1.0	
# ::edge	weaken-01	time	subsequent	0.1.1	0.1.1.1	
(c / contrast-01 
      :ARG1 (f / float-01 
            :ARG0 (g / gold) 
            :ARG1 (c3 / company) 
            :ARG2 (e / exchange-01 
                  :ARG0 (c2 / country 
                        :name (n / name 
                              :op1 "york" 
                              :op2 "new")) 
                  :ARG1 (s3 / stock) 
                  :time (d / date-entity 
                        :month 8 
                        :year 1988))) 
      :ARG2 (s2 / suffer-01 
            :ARG0 (p2 / person 
                  :ARG0-of (p3 / perform-01) 
                  :mod (p4 / poor)) 
            :ARG1 (w / weaken-01 
                  :ARG1 (t / thing 
                        :ARG2-of (p / price-01)) 
                  :time (s / subsequent))))

# ::snt she saw her long hair floating like seaweed upon the waves
# ::tok she saw her long hair floating like seaweed upon the waves
# ::alignments 10-11|0.0.1 5-6|0.0.0 4-5|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:20.384
# ::node	0	see-01	1-2
# ::node	0.0	she	0-1
# ::node	0.0.0	float-01	5-6
# ::node	0.0.1	wave	10-11
# ::node	0.1	hair	4-5
# ::root	0	see-01
# ::edge	float-01	ARG0	she	0.0.0	0.0	
# ::edge	see-01	ARG0	she	0	0.0	
# ::edge	see-01	ARG1	hair	0	0.1	
# ::edge	wave	poss	she	0.0.1	0.0	
(s / see-01 
      :ARG0 (s2 / she 
            :ARG0-of (f / float-01) 
            :poss-of (w / wave)) 
      :ARG1 (h / hair))

# ::snt or of cold rides in the back of pickup trucks when your cheek nerves grew deadened to the insistent flapping of a lock of hair that now doesnt exist or of the print ad for maxell tape in which a man sits in an armchair and experiences a blast of la mer from his speakers that sinks him deep into the cushions and flings his tie over his shoulder and tips the shade of the standing lamp you began to think that if the real jet engines were to fail the plane would float to earth on the output of these tame little verniers alone as in the parlor trick in which ten guests each use one finger to lift a heavy volunteer dash
# ::tok or of cold rides in the back of pickup trucks when your cheek nerves grew deadened to the insistent flapping of a lock of hair that now doesnt exist or of the print ad for maxell tape in which a man sits in an armchair and experiences a blast of la mer from his speakers that sinks him deep into the cushions and flings his tie over his shoulder and tips the shade of the standing lamp you began to think that if the real jet engines were to fail the plane would float to earth on the output of these tame little verniers alone as in the parlor trick in which ten guests each use one finger to lift a heavy volunteer dash
# ::alignments 122-123|0.0.0.2.2.0.0.0.0 121-122|0.0.0.2.2.0.0.0.0.0 119-120|0.0.0.2.2.0.0 117-118|0.0.0.2.2.0.0.0 115-116|0.0.0.2.2.0.0.1 114-115|0.0.0.2.2.0 113-114|0.0.0.2.2.0.0.1.0 109-110|0.0.0.2.2.0.0.1.1 108-109|0.0.0.2.2.0.0.1.1.0 104-105|0.0.0.2.2.2 102-103|0.3 98-99|0.0.0.2.2.1.0 95-96|0.0.0.2.2.1 93-94|0.0.0.2.2 91-92|0.1.0.0 89-90|0.1.0 86-87|0.1 85-86|0.1.1 84-85|0.1.2 80-81|0 78-79|0.2 77-78|0.0 72-73|0.0.0.1.1.0 69-70|0.0.0.2 68-69|0.0.0.2.1 65-66|0.0.0.2.0 62-63|0.0.0.1.1 58-59|0.0.0.0.0 50-51|0.0.0.1.0.0.0.1 48-49|0.0.0.0 46-47|0.0.0 45-46|0.0.0.1 41-42|0.0.0.1.0 40-41|0.0.0.1.0.1 36-37|0.0.0.1.0.1.0.0 32-33|0.0.0.1.0.1.0 29-30|0.0.0.1.0.0 28-29|0.0.0.1.0.0.0 26-27|0.0.0.1.0.0.0.4 24-25|0.0.0.1.0.0.0.3.0 22-23|0.0.0.1.0.0.0.3 14-15|0.0.0.1.0.0.0.2 12-13|0.0.0.1.0.0.0.2.0 9-10|0.0.0.1.0.0.0.0 8-9|0.0.0.1.0.0.0.0.1 6-7|0.0.0.1.0.0.0.0.0 3-4|0.0.0.1.0.0.0.0.0.0 2-3|0.0.0.1.0.0.0.0.0.0.1 0-1|0.0.0.1.0.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:26.547
# ::node	0	think-01	80-81
# ::node	0.0	you	77-78
# ::node	0.0.0	experience-01	46-47
# ::node	0.0.0.0	blast-05	48-49
# ::node	0.0.0.0.0	deep	58-59
# ::node	0.0.0.1	and	45-46
# ::node	0.0.0.1.0	sit-01	41-42
# ::node	0.0.0.1.0.0	or	29-30
# ::node	0.0.0.1.0.0.0	exist-01	28-29
# ::node	0.0.0.1.0.0.0.0	truck	9-10
# ::node	0.0.0.1.0.0.0.0.0	back	6-7
# ::node	0.0.0.1.0.0.0.0.0.0	ride-01	3-4
# ::node	0.0.0.1.0.0.0.0.0.0.0	or	0-1
# ::node	0.0.0.1.0.0.0.0.0.0.1	cold	2-3
# ::node	0.0.0.1.0.0.0.0.1	pickup	8-9
# ::node	0.0.0.1.0.0.0.1	"la"	50-51
# ::node	0.0.0.1.0.0.0.2	grow-01	14-15
# ::node	0.0.0.1.0.0.0.2.0	cheek	12-13
# ::node	0.0.0.1.0.0.0.3	lock-01	22-23
# ::node	0.0.0.1.0.0.0.3.0	hair	24-25
# ::node	0.0.0.1.0.0.0.4	now	26-27
# ::node	0.0.0.1.0.1	man	40-41
# ::node	0.0.0.1.0.1.0	print-01	32-33
# ::node	0.0.0.1.0.1.0.0	tape	36-37
# ::node	0.0.0.1.1	and	62-63
# ::node	0.0.0.1.1.0	shade	72-73
# ::node	0.0.0.2	and	69-70
# ::node	0.0.0.2.0	tie	65-66
# ::node	0.0.0.2.1	shoulder	68-69
# ::node	0.0.0.2.2	float-01	93-94
# ::node	0.0.0.2.2.0	each	114-115
# ::node	0.0.0.2.2.0.0	lift-01	119-120
# ::node	0.0.0.2.2.0.0.0	finger	117-118
# ::node	0.0.0.2.2.0.0.0.0	volunteer-01	122-123
# ::node	0.0.0.2.2.0.0.0.0.0	heavy	121-122
# ::node	0.0.0.2.2.0.0.1	use-01	115-116
# ::node	0.0.0.2.2.0.0.1.0	guest	113-114
# ::node	0.0.0.2.2.0.0.1.1	trick	109-110
# ::node	0.0.0.2.2.0.0.1.1.0	parlor	108-109
# ::node	0.0.0.2.2.1	earth	95-96
# ::node	0.0.0.2.2.1.0	output	98-99
# ::node	0.0.0.2.2.2	alone	104-105
# ::node	0.1	engine	86-87
# ::node	0.1.0	fail-01	89-90
# ::node	0.1.0.0	plane	91-92
# ::node	0.1.1	jet	85-86
# ::node	0.1.2	real	84-85
# ::node	0.2	begin-01	78-79
# ::node	0.3	little	102-103
# ::root	0	think-01
# ::edge	and	op1	experience-01	0.0.0.2	0.0.0	
# ::edge	and	op1	shade	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	and	op1	sit-01	0.0.0.1	0.0.0.1.0	
# ::edge	and	op2	experience-01	0.0.0.1	0.0.0	
# ::edge	and	op2	tie	0.0.0.2	0.0.0.2.0	
# ::edge	and	op3	and	0.0.0.1	0.0.0.1.1	
# ::edge	and	op3	shoulder	0.0.0.2	0.0.0.2.1	
# ::edge	and	op4	float-01	0.0.0.2	0.0.0.2.2	
# ::edge	begin-01	ARG1	think-01	0.2	0	
# ::edge	deep	domain	blast-05	0.0.0.0.0	0.0.0.0	
# ::edge	earth	location	output	0.0.0.2.2.1	0.0.0.2.2.1.0	
# ::edge	engine	mod	jet	0.1	0.1.1	
# ::edge	engine	mod	real	0.1	0.1.2	
# ::edge	exist-01	ARG0	truck	0.0.0.1.0.0.0	0.0.0.1.0.0.0.0	
# ::edge	exist-01	ARG1	"la"	0.0.0.1.0.0.0	0.0.0.1.0.0.0.1	
# ::edge	exist-01	time	now	0.0.0.1.0.0.0	0.0.0.1.0.0.0.4	
# ::edge	experience-01	ARG0	you	0.0.0	0.0	
# ::edge	experience-01	ARG1	blast-05	0.0.0	0.0.0.0	
# ::edge	fail-01	ARG0	engine	0.1.0	0.1	
# ::edge	fail-01	ARG1	plane	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	each	0.0.0.2.2	0.0.0.2.2.0	
# ::edge	float-01	ARG4	earth	0.0.0.2.2	0.0.0.2.2.1	
# ::edge	float-01	mod	alone	0.0.0.2.2	0.0.0.2.2.2	
# ::edge	grow-01	ARG0	cheek	0.0.0.1.0.0.0.2	0.0.0.1.0.0.0.2.0	
# ::edge	grow-01	ARG1	exist-01	0.0.0.1.0.0.0.2	0.0.0.1.0.0.0	
# ::edge	lift-01	ARG0	finger	0.0.0.2.2.0.0	0.0.0.2.2.0.0.0	
# ::edge	lift-01	ARG1	each	0.0.0.2.2.0.0	0.0.0.2.2.0	
# ::edge	little	op1	think-01	0.3	0	
# ::edge	lock-01	ARG1	hair	0.0.0.1.0.0.0.3	0.0.0.1.0.0.0.3.0	
# ::edge	lock-01	ARG2	exist-01	0.0.0.1.0.0.0.3	0.0.0.1.0.0.0	
# ::edge	or	op1	exist-01	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	print-01	ARG0	man	0.0.0.1.0.1.0	0.0.0.1.0.1	
# ::edge	print-01	ARG1	tape	0.0.0.1.0.1.0	0.0.0.1.0.1.0.0	
# ::edge	ride-01	ARG0	or	0.0.0.1.0.0.0.0.0.0	0.0.0.1.0.0.0.0.0.0.0	
# ::edge	ride-01	ARG1	back	0.0.0.1.0.0.0.0.0.0	0.0.0.1.0.0.0.0.0	
# ::edge	ride-01	mod	cold	0.0.0.1.0.0.0.0.0.0	0.0.0.1.0.0.0.0.0.0.1	
# ::edge	sit-01	ARG0	or	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	sit-01	ARG1	man	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	think-01	ARG0	you	0	0.0	
# ::edge	think-01	ARG1	engine	0	0.1	
# ::edge	trick	mod	parlor	0.0.0.2.2.0.0.1.1	0.0.0.2.2.0.0.1.1.0	
# ::edge	truck	consist	back	0.0.0.1.0.0.0.0	0.0.0.1.0.0.0.0.0	
# ::edge	truck	mod	pickup	0.0.0.1.0.0.0.0	0.0.0.1.0.0.0.0.1	
# ::edge	use-01	ARG0	guest	0.0.0.2.2.0.0.1	0.0.0.2.2.0.0.1.0	
# ::edge	use-01	ARG1	trick	0.0.0.2.2.0.0.1	0.0.0.2.2.0.0.1.1	
# ::edge	use-01	ARG2	lift-01	0.0.0.2.2.0.0.1	0.0.0.2.2.0.0	
# ::edge	volunteer-01	ARG1	finger	0.0.0.2.2.0.0.0.0	0.0.0.2.2.0.0.0	
# ::edge	volunteer-01	mod	heavy	0.0.0.2.2.0.0.0.0	0.0.0.2.2.0.0.0.0.0	
(t2 / think-01 
      :ARG0 (y / you 
            :ARG0-of (e4 / experience-01 
                  :ARG1 (b2 / blast-05 
                        :domain-of (d / deep)) 
                  :op-of (a4 / and 
                        :op1 (s3 / sit-01 
                              :ARG0 (o2 / or 
                                    :op1 (e5 / exist-01 
                                          :ARG0 (t5 / truck 
                                                :consist (b3 / back 
                                                      :ARG1-of (r2 / ride-01 
                                                            :ARG0 (o3 / or) 
                                                            :mod (c2 / cold))) 
                                                :mod (p4 / pickup)) 
                                          :ARG1 "la" 
                                          :ARG1-of (g2 / grow-01 
                                                :ARG0 (c / cheek)) 
                                          :ARG2-of (l3 / lock-01 
                                                :ARG1 (h2 / hair)) 
                                          :time (n / now))) 
                              :ARG1 (m / man 
                                    :ARG0-of (p3 / print-01 
                                          :ARG1 (t4 / tape)))) 
                        :op2 (a3 / and 
                              :op1 (s / shade))) 
                  :op-of (a2 / and 
                        :op1 (t3 / tie) 
                        :op2 (s2 / shoulder) 
                        :op3 (f2 / float-01 
                              :ARG1 (e / each 
                                    :ARG1-of (l / lift-01 
                                          :ARG0 (f / finger 
                                                :ARG1-of (v / volunteer-01 
                                                      :mod (h / heavy))) 
                                          :ARG2-of (u / use-01 
                                                :ARG0 (g / guest) 
                                                :ARG1 (t / trick 
                                                      :mod (p / parlor))))) 
                              :ARG4 (e2 / earth 
                                    :location (o / output)) 
                              :mod (a / alone))))) 
      :ARG1 (e3 / engine 
            :ARG0-of (f3 / fail-01 
                  :ARG1 (p2 / plane)) 
            :mod (j / jet) 
            :mod (r / real)) 
      :ARG1-of (b / begin-01) 
      :op-of (l2 / little))

# ::snt in the summer dusk the pale hatched moths  float out over the riverside
# ::tok in the summer dusk the pale hatched moths float out over the riverside
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:26.549
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i dont know what i imagined everyone just floating around being beautiful somehow
# ::tok i dont know what i imagined everyone just floating around being beautiful somehow
# ::alignments 12-13|0.1.0.0.0.0 11-12|0.1.0.0.0.1 9-10|0.1.0.0.0 8-9|0.1.0.0 7-8|0.1.0.0.1 6-7|0.1.0 4-5|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:26.734
# ::node	0	know-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	i	4-5
# ::node	0.1.0	everyone	6-7
# ::node	0.1.0.0	float-01	8-9
# ::node	0.1.0.0.0	around	9-10
# ::node	0.1.0.0.0.0	somehow	12-13
# ::node	0.1.0.0.0.1	beautiful	11-12
# ::node	0.1.0.0.1	just	7-8
# ::root	0	know-01
# ::edge	around	location	somehow	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	around	op1	beautiful	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	everyone	mod	i	0.1.0	0.1	
# ::edge	float-01	ARG1	everyone	0.1.0.0	0.1.0	
# ::edge	float-01	ARG2	around	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	mod	just	0.1.0.0	0.1.0.0.1	
# ::edge	know-01	ARG0	i	0	0.0	
# ::edge	know-01	ARG1	i	0	0.1	
(k / know-01 
      :ARG0 (i2 / i) 
      :ARG1 (i / i 
            :mod-of (e / everyone 
                  :ARG1-of (f / float-01 
                        :ARG2 (a / around 
                              :location (s / somehow) 
                              :op1 (b / beautiful)) 
                        :mod (j / just)))))

# ::snt   the running order for floating the two generating companies has yet to be decided although the government may be forced into a joint flotation in early 1991 to meet its timetable
# ::tok the running order for floating the two generating companies has yet to be decided although the government may be forced into a joint flotation in early 1991 to meet its timetable
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:26.735
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt   jasons imagination floated quick sharp forays into reality and fantasy swiftly searching for the words that might be found in the gospel according to st alex
# ::tok jasons imagination floated quick sharp forays into reality and fantasy swiftly searching for the words that might be found in the gospel according to st alex
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:26.736
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt in this vacuum theories float freely like rubbish in space
# ::tok in this vacuum theories float freely like rubbish in space
# ::alignments 9-10|0.0.0.0 7-8|0.0.0 5-6|0.0.1 4-5|0.0 3-4|0 2-3|0.0.2 1-2|0.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:26.759
# ::node	0	theory	3-4
# ::node	0.0	float-01	4-5
# ::node	0.0.0	rubbish	7-8
# ::node	0.0.0.0	space	9-10
# ::node	0.0.1	free	5-6
# ::node	0.0.2	vacuum	2-3
# ::node	0.0.2.0	this	1-2
# ::root	0	theory
(t / theory 
      :ARG0-of (f2 / float-01 
            :ARG1 (r / rubbish 
                  :mod (s / space)) 
            :manner (f / free) 
            :time (v / vacuum 
                  :mod (t2 / this))))

# ::snt the electricity distribution companies which will be the first part of the industry to be floated off in a sale scheduled for may next year have taken the initiative as the best way to ensure competition in the deregulated market
# ::tok the electricity distribution companies which will be the first part of the industry to be floated off in a sale scheduled for may next year have taken the initiative as the best way to ensure competition in the deregulated market
# ::alignments 39-40|0.1.0.0.0.1.1 35-36|0.1.0.0.0.1 34-35|0.1.0.0.0.1.0 32-33|0.1.0.0 28-29|0.1.0 24-25|0.0.0 23-24|0.0 22-23|0.1.1+0.1 20-21|0 16-17|0.2.1 15-16|0.2 12-13|0.2.0 3-4|0.1.0.0.0 2-3|0.1.0.0.0.0 1-2|0.1.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:27.012
# ::node	0	schedule-01	20-21
# ::node	0.0	next	23-24
# ::node	0.0.0	year	24-25
# ::node	0.1	date-entity	22-23
# ::node	0.1.0	initiative	28-29
# ::node	0.1.0.0	way	32-33
# ::node	0.1.0.0.0	company	3-4
# ::node	0.1.0.0.0.0	distribute-01	2-3
# ::node	0.1.0.0.0.0.0	electricity	1-2
# ::node	0.1.0.0.0.1	compete-01	35-36
# ::node	0.1.0.0.0.1.0	ensure-01	34-35
# ::node	0.1.0.0.0.1.1	market	39-40
# ::node	0.1.1	5	22-23
# ::node	0.2	float-01	15-16
# ::node	0.2.0	industry	12-13
# ::node	0.2.1	off	16-17
# ::root	0	schedule-01
# ::edge	compete-01	ARG0	company	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	compete-01	ARG2	market	0.1.0.0.0.1	0.1.0.0.0.1.1	
# ::edge	date-entity	domain	initiative	0.1	0.1.0	
# ::edge	date-entity	month	5	0.1	0.1.1	
# ::edge	distribute-01	ARG0	company	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	distribute-01	ARG1	electricity	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	ensure-01	ARG1	compete-01	0.1.0.0.0.1.0	0.1.0.0.0.1	
# ::edge	float-01	ARG1	industry	0.2	0.2.0	
# ::edge	float-01	ARG2	off	0.2	0.2.1	
# ::edge	float-01	manner	schedule-01	0.2	0	
# ::edge	initiative	location	way	0.1.0	0.1.0.0	
# ::edge	schedule-01	ARG1	next	0	0.0	
# ::edge	schedule-01	ARG2	date-entity	0	0.1	
# ::edge	way	poss	company	0.1.0.0	0.1.0.0.0	
# ::edge	year	mod	next	0.0.0	0.0	
(s / schedule-01 
      :ARG1 (n / next 
            :mod-of (y / year)) 
      :ARG2 (d / date-entity 
            :domain (i / initiative 
                  :location (w / way 
                        :poss (c2 / company 
                              :ARG0-of (d2 / distribute-01 
                                    :ARG1 (e2 / electricity)) 
                              :ARG0-of (c / compete-01 
                                    :ARG1-of (e / ensure-01) 
                                    :ARG2 (m / market))))) 
            :month 5) 
      :manner-of (f / float-01 
            :ARG1 (i2 / industry) 
            :ARG2 (o / off)))

# ::snt vennes where blackveined whites in their hundreds were floating among fallen poplar down in the dappled sunlight
# ::tok vennes where blackveined whites in their hundreds were floating among fallen poplar down in the dappled sunlight
# ::alignments 16-17|0 12-13|0.2 10-11|0.1 9-10|0.0.1 8-9|0.0 3-4|0.0.0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:27.044
# ::node	0	sunlight	16-17
# ::node	0.0	float-01	8-9
# ::node	0.0.0	person	3-4
# ::node	0.0.0.0	white	3-4
# ::node	0.0.1	among	9-10
# ::node	0.1	fall-01	10-11
# ::node	0.2	down	12-13
# ::root	0	sunlight
# ::edge	fall-01	ARG1	sunlight	0.1	0	
# ::edge	float-01	ARG0	person	0.0	0.0.0	
# ::edge	float-01	ARG1	sunlight	0.0	0	
# ::edge	float-01	ARG2	among	0.0	0.0.1	
# ::edge	person	mod	white	0.0.0	0.0.0.0	
# ::edge	sunlight	direction	down	0	0.2	
(s / sunlight 
      :ARG1-of (f2 / float-01 
            :ARG0 (p / person 
                  :mod (w / white)) 
            :ARG2 (a / among)) 
      :ARG1-of (f / fall-01) 
      :direction (d / down))

# ::snt 6 million inhabitants of jordan are generally thought to be of palestinian origin although in recent months king hussein has floated a figure nearer 40 per cent
# ::tok 6 million inhabitants of jordan are generally thought to be of palestinian origin although in recent months king hussein has floated a figure nearer 40 per cent
# ::alignments 26-27|0.1.0.0.0+0.1.0.0 24-25|0.1.0.1 22-23|0.1.1 20-21|0.1 17-18|0.0.3 16-17|0.0.1.0+0.0.1 15-16|0.0.1.0.0 12-13|0.0 11-12|0.0.2.0.0+0.0.2.0+0.0.2 7-8|0 6-7|0.2 2-3|0.1.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:27.331
# ::node	0	think-01	7-8
# ::node	0.0	originate-01	12-13
# ::node	0.0.0	6	0-1
# ::node	0.0.1	temporal-quantity	16-17
# ::node	0.0.1.0	month	16-17
# ::node	0.0.1.0.0	recent	15-16
# ::node	0.0.2	country	11-12
# ::node	0.0.2.0	name	11-12
# ::node	0.0.2.0.0	"Palestine"	11-12
# ::node	0.0.3	king	17-18
# ::node	0.1	float-01	20-21
# ::node	0.1.0	inhabit-01	2-3
# ::node	0.1.0.0	monetary-quantity	26-27
# ::node	0.1.0.0.0	cent	26-27
# ::node	0.1.0.1	40	24-25
# ::node	0.1.1	figure	22-23
# ::node	0.2	general	6-7
# ::root	0	think-01
# ::edge	country	name	name	0.0.2	0.0.2.0	
# ::edge	float-01	ARG0	inhabit-01	0.1	0.1.0	
# ::edge	float-01	ARG1	figure	0.1	0.1.1	
# ::edge	inhabit-01	ARG0	monetary-quantity	0.1.0	0.1.0.0	
# ::edge	inhabit-01	ARG1	40	0.1.0	0.1.0.1	
# ::edge	monetary-quantity	unit	cent	0.1.0.0	0.1.0.0.0	
# ::edge	month	mod	recent	0.0.1.0	0.0.1.0.0	
# ::edge	name	op1	"Palestine"	0.0.2.0	0.0.2.0.0	
# ::edge	originate-01	ARG0	6	0.0	0.0.0	
# ::edge	originate-01	ARG1	temporal-quantity	0.0	0.0.1	
# ::edge	originate-01	ARG2	country	0.0	0.0.2	
# ::edge	originate-01	location	king	0.0	0.0.3	
# ::edge	temporal-quantity	unit	month	0.0.1	0.0.1.0	
# ::edge	think-01	ARG1	originate-01	0	0.0	
# ::edge	think-01	condition	float-01	0	0.1	
# ::edge	think-01	mod	general	0	0.2	
(t2 / think-01 
      :ARG1 (o / originate-01 
            :ARG0 6 
            :ARG1 (t / temporal-quantity 
                  :unit (m2 / month 
                        :mod (r / recent))) 
            :ARG2 (c2 / country 
                  :name (n / name 
                        :op1 "Palestine")) 
            :location (k / king)) 
      :condition (f2 / float-01 
            :ARG0 (i / inhabit-01 
                  :ARG0 (m / monetary-quantity 
                        :unit (c / cent)) 
                  :ARG1 40) 
            :ARG1 (f / figure)) 
      :mod (g / general))

# ::snt empowered by their voices she drew a deep breath and scarcely audible in that vast space where they were floating she said fenna its over go away
# ::tok empowered by their voices she drew a deep breath and scarcely audible in that vast space where they were floating she said fenna its over go away
# ::alignments 26-27|0.1.1.2 21-22|0 20-21|0.0 19-20|0.2 17-18|0.2.0 15-16|0.2.1 14-15|0.2.1.0 10-11|0.1.1.1.1 9-10|0.1 8-9|0.1.1.1 7-8|0.1.1.1.0 5-6|0.1.1 4-5|0.1.1.0 3-4|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:27.767
# ::node	0	say-01	21-22
# ::node	0.0	she	20-21
# ::node	0.1	and	9-10
# ::node	0.1.0	voice	3-4
# ::node	0.1.1	draw-02	5-6
# ::node	0.1.1.0	she	4-5
# ::node	0.1.1.1	breathe-01	8-9
# ::node	0.1.1.1.0	deep	7-8
# ::node	0.1.1.1.1	scarcely-more-than	10-11
# ::node	0.1.1.2	away	26-27
# ::node	0.2	float-01	19-20
# ::node	0.2.0	they	17-18
# ::node	0.2.1	space	15-16
# ::node	0.2.1.0	vast	14-15
# ::root	0	say-01
# ::edge	and	op1	voice	0.1	0.1.0	
# ::edge	and	op2	draw-02	0.1	0.1.1	
# ::edge	away	op1	draw-02	0.1.1.2	0.1.1	
# ::edge	breathe-01	degree	deep	0.1.1.1	0.1.1.1.0	
# ::edge	draw-02	ARG0	she	0.1.1	0.1.1.0	
# ::edge	draw-02	ARG1	breathe-01	0.1.1	0.1.1.1	
# ::edge	float-01	ARG0	they	0.2	0.2.0	
# ::edge	float-01	ARG2	space	0.2	0.2.1	
# ::edge	say-01	ARG0	she	0	0.0	
# ::edge	say-01	ARG1	and	0	0.1	
# ::edge	say-01	condition	float-01	0	0.2	
# ::edge	scarcely-more-than	op1	breathe-01	0.1.1.1.1	0.1.1.1	
# ::edge	space	mod	vast	0.2.1	0.2.1.0	
(s / say-01 
      :ARG0 (s2 / she) 
      :ARG1 (a2 / and 
            :op1 (v2 / voice) 
            :op2 (d2 / draw-02 
                  :ARG0 (s5 / she) 
                  :ARG1 (b / breathe-01 
                        :degree (d / deep) 
                        :op-of (s4 / scarcely-more-than)) 
                  :op-of (a / away))) 
      :condition (f / float-01 
            :ARG0 (t / they) 
            :ARG2 (s3 / space 
                  :mod (v / vast))))

# ::snt the escaping gases rise upwards  forming a turbulent dynamic wall while the denser part containing  most of the solid material hugs the ground and rolls rapidly over it  travelling at great speed since each particle of the solid material is  in a more or less floating condition cushioned by escaping gas like a  hovercraft
# ::tok the escaping gases rise upwards forming a turbulent dynamic wall while the denser part containing most of the solid material hugs the ground and rolls rapidly over it travelling at great speed since each particle of the solid material is in a more or less floating condition cushioned by escaping gas like a hovercraft
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:27.768
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt mr wakehams tight timetable means that national power and powergen are almost certain to be floated simultaneously in the spring of 1991 following the sale of the 12 area distribution boards next autumn
# ::tok mr wakehams tight timetable means that national power and powergen are almost certain to be floated simultaneously in the spring of 1991 following the sale of the 12 area distribution boards next autumn
# ::alignments 31-32|0.0.0.0 29-30|0.0.0.2.0 28-29|0.0.0.2.0.0 27-28|0.0.0.1.0.0 21-22|0.0.0.1.0.1.0+0.0.0.1.0.1 19-20|0.0.0.2 16-17|0.0.0.1.2 15-16|0.0.0 12-13|0.0.0.1 11-12|0.0.0.1.1 8-9|0 7-8|0.0 6-7|0.0.1 4-5|0.0.0.1.0 2-3|0.0.0.2.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:28.002
# ::node	0	and	8-9
# ::node	0.0	power	7-8
# ::node	0.0.0	float-01	15-16
# ::node	0.0.0.0	next	31-32
# ::node	0.0.0.1	certain	12-13
# ::node	0.0.0.1.0	mean-01	4-5
# ::node	0.0.0.1.0.0	12	27-28
# ::node	0.0.0.1.0.1	date-entity	21-22
# ::node	0.0.0.1.0.1.0	1991	21-22
# ::node	0.0.0.1.1	almost	11-12
# ::node	0.0.0.1.2	simultaneous	16-17
# ::node	0.0.0.2	spring	19-20
# ::node	0.0.0.2.0	distribute-01	29-30
# ::node	0.0.0.2.0.0	area	28-29
# ::node	0.0.0.2.0.1	tight	2-3
# ::node	0.0.1	nation	6-7
# ::root	0	and
# ::edge	12	op1	mean-01	0.0.0.1.0.0	0.0.0.1.0	
# ::edge	and	op1	power	0	0.0	
# ::edge	certain	degree	almost	0.0.0.1	0.0.0.1.1	
# ::edge	certain	domain	float-01	0.0.0.1	0.0.0	
# ::edge	certain	time	simultaneous	0.0.0.1	0.0.0.1.2	
# ::edge	date-entity	op1	mean-01	0.0.0.1.0.1	0.0.0.1.0	
# ::edge	date-entity	year	1991	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	distribute-01	ARG0	spring	0.0.0.2.0	0.0.0.2	
# ::edge	distribute-01	ARG1	area	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	float-01	ARG0	next	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	power	0.0.0	0.0	
# ::edge	float-01	duration	spring	0.0.0	0.0.0.2	
# ::edge	mean-01	ARG1	certain	0.0.0.1.0	0.0.0.1	
# ::edge	power	mod	nation	0.0	0.0.1	
# ::edge	tight	op1	distribute-01	0.0.0.2.0.1	0.0.0.2.0	
(a3 / and 
      :op1 (p / power 
            :ARG1-of (f / float-01 
                  :ARG0 (n / next) 
                  :domain-of (c / certain 
                        :ARG1-of (m / mean-01 
                              :op-of 12 
                              :op-of (d2 / date-entity 
                                    :year 1991)) 
                        :degree (a2 / almost) 
                        :time (s2 / simultaneous)) 
                  :duration (s / spring 
                        :ARG0-of (d / distribute-01 
                              :ARG1 (a / area) 
                              :op-of (t / tight)))) 
            :mod (n2 / nation)))

# ::snt if we try to shoe or float a horse and it decides to be uncooperative and we retaliate with force and anger so that the horse becomes anxious and fearful the horse will remember that such a situation terrified it
# ::tok if we try to shoe or float a horse and it decides to be uncooperative and we retaliate with force and anger so that the horse becomes anxious and fearful the horse will remember that such a situation terrified it
# ::alignments 39-40|0.0.0.1.1 38-39|0.0.0.1 37-38|0.0.0.1.0 35-36|0.0.0.1.2 33-34|0.0.0.0.0.1.0 31-32|0.0.0.0.0.1.0.0 29-30|0.0.0.0.0.1.0.0.0 28-29|0.0.0.0.0.1 27-28|0.0.0.0.0.1.1 26-27|0.0.0.0.0 25-26|0.0.0.0.0.0 22-23|0.0.0.3.0.1.0 21-22|0 20-21|0.0 19-20|0.0.0.2 17-18|0.0.0 16-17|0.0.0.0 15-16|0.0.0.3 14-15|0.0.0.3.0.1.1+0.0.0.3.0.1 11-12|0.0.0.3.0 10-11|0.0.0.3.0.0 9-10|0.0.0.3.0.2 8-9|0.0.0.3.0.2.0.0.0.0 6-7|0.0.0.3.0.2.0.0.0 5-6|0.0.0.3.0.2.0.0.0.1 4-5|0.0.0.3.0.2.0.1 2-3|0.0.0.3.0.2.0 1-2|0.0.0.3.0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:30.820
# ::node	0	anger-01	21-22
# ::node	0.0	and	20-21
# ::node	0.0.0	retaliate-01	17-18
# ::node	0.0.0.0	we	16-17
# ::node	0.0.0.0.0	become-01	26-27
# ::node	0.0.0.0.0.0	horse	25-26
# ::node	0.0.0.0.0.1	and	28-29
# ::node	0.0.0.0.0.1.0	remember-01	33-34
# ::node	0.0.0.0.0.1.0.0	horse	31-32
# ::node	0.0.0.0.0.1.0.0.0	fear-01	29-30
# ::node	0.0.0.0.0.1.1	anxious	27-28
# ::node	0.0.0.1	terrify-01	38-39
# ::node	0.0.0.1.0	situation	37-38
# ::node	0.0.0.1.1	it	39-40
# ::node	0.0.0.1.2	such	35-36
# ::node	0.0.0.2	force	19-20
# ::node	0.0.0.3	and	15-16
# ::node	0.0.0.3.0	decide-01	11-12
# ::node	0.0.0.3.0.0	it	10-11
# ::node	0.0.0.3.0.1	cooperate-01	14-15
# ::node	0.0.0.3.0.1.0	so	22-23
# ::node	0.0.0.3.0.1.1	-	14-15
# ::node	0.0.0.3.0.2	and	9-10
# ::node	0.0.0.3.0.2.0	try-01	2-3
# ::node	0.0.0.3.0.2.0.0	we	1-2
# ::node	0.0.0.3.0.2.0.0.0	float-01	6-7
# ::node	0.0.0.3.0.2.0.0.0.0	horse	8-9
# ::node	0.0.0.3.0.2.0.0.0.1	or	5-6
# ::node	0.0.0.3.0.2.0.1	shoe-in	4-5
# ::root	0	anger-01
(a3 / anger-01 
      :op-of (a4 / and 
            :ARG1-of (r2 / retaliate-01 
                  :ARG0 (w / we 
                        :ARG0-of (b / become-01 
                              :ARG1 (h2 / horse) 
                              :op-of (a / and 
                                    :ARG0-of (r / remember-01 
                                          :ARG1 (h / horse 
                                                :ARG1-of (f / fear-01))) 
                                    :op1 (a2 / anxious)))) 
                  :ARG2-of (t / terrify-01 
                        :ARG0 (s / situation) 
                        :ARG1 (i / it) 
                        :quant (s2 / such)) 
                  :manner (f2 / force) 
                  :op-of (a5 / and 
                        :op1 (d / decide-01 
                              :ARG0 (i2 / it) 
                              :ARG1 (c / cooperate-01 
                                    :ARG1 (s3 / so) 
                                    :polarity -) 
                              :op-of (a6 / and 
                                    :op1 (t2 / try-01 
                                          :ARG0 (w2 / we 
                                                :ARG0-of (f3 / float-01 
                                                      :ARG1 (h3 / horse) 
                                                      :op-of (o / or))) 
                                          :ARG1 (s4 / shoe-in))))))))

# ::snt behind the familiar nineteenthcentury ghost of jules verne the wraith of another victorian writer floated through last nights instalment of around the world in eighty days bbc 1 robert louis stevenson who observed that it is better to travel hopefully than to arrive
# ::tok behind the familiar nineteenthcentury ghost of jules verne the wraith of another victorian writer floated through last nights instalment of around the world in eighty days bbc 1 robert louis stevenson who observed that it is better to travel hopefully than to arrive
# ::alignments 42-43|0.0.0.1.0.1.3 39-40|0.0.0.1.0.1.2 38-39|0.0.0.1.0.1 34-35|0.0.0.1.0.1.1.0 32-33|0.0.0.1.0.1.1 27-28|0.0.0.1.0.1.3.0 25-26|0.0.0.1.0.3.0+0.0.0.1.0.3 22-23|0.0.0.1.0.4 20-21|0.0.0.1.0.4.0 17-18|0.0.0.1.0.1.0 16-17|0.0.0.1.0.1.0.0 14-15|0.0.0.1 13-14|0.0.0.1.0.0+0.0.0.1.0 11-12|0.0.0.1.0.2 6-8|0.0.0.0.0.0+0.0.0.0.0.1+0.0.0.0.0+0.0.0.0 4-5|0.0 2-3|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:31.484
# ::node	0	familiarize-01	2-3
# ::node	0.0	ghost	4-5
# ::node	0.0.0	behind	0-1
# ::node	0.0.0.0	person	6-8
# ::node	0.0.0.0.0	name	6-8
# ::node	0.0.0.0.0.0	"verne"	6-8
# ::node	0.0.0.0.0.1	"jules"	6-8
# ::node	0.0.0.1	float-01	14-15
# ::node	0.0.0.1.0	person	13-14
# ::node	0.0.0.1.0.0	write-01	13-14
# ::node	0.0.0.1.0.1	travel-01	38-39
# ::node	0.0.0.1.0.1.0	night	17-18
# ::node	0.0.0.1.0.1.0.0	last	16-17
# ::node	0.0.0.1.0.1.1	observe-01	32-33
# ::node	0.0.0.1.0.1.1.0	it	34-35
# ::node	0.0.0.1.0.1.2	hope-01	39-40
# ::node	0.0.0.1.0.1.3	arrive-01	42-43
# ::node	0.0.0.1.0.1.3.0	1	27-28
# ::node	0.0.0.1.0.2	another	11-12
# ::node	0.0.0.1.0.3	temporal-quantity	25-26
# ::node	0.0.0.1.0.3.0	day	25-26
# ::node	0.0.0.1.0.4	world	22-23
# ::node	0.0.0.1.0.4.0	around	20-21
# ::root	0	familiarize-01
# ::edge	around	op1	world	0.0.0.1.0.4.0	0.0.0.1.0.4	
# ::edge	arrive-01	ARG1	1	0.0.0.1.0.1.3	0.0.0.1.0.1.3.0	
# ::edge	behind	op1	ghost	0.0.0	0.0	
# ::edge	behind	op2	float-01	0.0.0	0.0.0.1	
# ::edge	familiarize-01	ARG1	ghost	0	0.0	
# ::edge	float-01	ARG1	person	0.0.0.1	0.0.0.1.0	
# ::edge	hope-01	ARG1	travel-01	0.0.0.1.0.1.2	0.0.0.1.0.1	
# ::edge	name	op1	"verne"	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	name	op2	"jules"	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	night	mod	last	0.0.0.1.0.1.0	0.0.0.1.0.1.0.0	
# ::edge	observe-01	ARG0	it	0.0.0.1.0.1.1	0.0.0.1.0.1.1.0	
# ::edge	observe-01	ARG1	travel-01	0.0.0.1.0.1.1	0.0.0.1.0.1	
# ::edge	person	location	behind	0.0.0.0	0.0.0	
# ::edge	person	mod	another	0.0.0.1.0	0.0.0.1.0.2	
# ::edge	person	name	name	0.0.0.0	0.0.0.0.0	
# ::edge	temporal-quantity	mod	person	0.0.0.1.0.3	0.0.0.1.0	
# ::edge	temporal-quantity	unit	day	0.0.0.1.0.3	0.0.0.1.0.3.0	
# ::edge	travel-01	ARG0	person	0.0.0.1.0.1	0.0.0.1.0	
# ::edge	travel-01	ARG1	night	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	travel-01	time	arrive-01	0.0.0.1.0.1	0.0.0.1.0.1.3	
# ::edge	world	mod	person	0.0.0.1.0.4	0.0.0.1.0	
# ::edge	write-01	ARG0	person	0.0.0.1.0.0	0.0.0.1.0	
(f2 / familiarize-01 
      :ARG1 (g / ghost 
            :op-of (b / behind 
                  :location-of (p2 / person 
                        :name (n2 / name 
                              :op1 "verne" 
                              :op2 "jules")) 
                  :op1 (f / float-01 
                        :ARG1 (p / person 
                              :ARG0-of (w2 / write-01) 
                              :ARG0-of (t / travel-01 
                                    :ARG1 (n / night 
                                          :mod (l / last)) 
                                    :ARG1-of (o / observe-01 
                                          :ARG0 (i / it)) 
                                    :ARG1-of (h / hope-01) 
                                    :time (a / arrive-01 
                                          :ARG1 1)) 
                              :mod (a3 / another) 
                              :mod-of (t2 / temporal-quantity 
                                    :unit (d / day)) 
                              :mod-of (w / world 
                                    :op-of (a2 / around)))))))

# ::snt at 1423 the tide turned and began to empty the solent and anyhting floating on it through the narrow needles channel
# ::tok at 1423 the tide turned and began to empty the solent and anyhting floating on it through the narrow needles channel
# ::alignments 20-21|0.1.0.2 19-20|0.1.0.2.1 18-19|0.1.0.2.0 15-16|0.0.0 13-14|0.0 11-12|0 8-9|0.1 6-7|0.1.0 5-6|0.1.0.1 3-4|0.1.0.0 1-2|0.1.0.1.0.0+0.1.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:31.802
# ::node	0	and	11-12
# ::node	0.0	float-01	13-14
# ::node	0.0.0	it	15-16
# ::node	0.1	empty	8-9
# ::node	0.1.0	begin-01	6-7
# ::node	0.1.0.0	tide	3-4
# ::node	0.1.0.1	and	5-6
# ::node	0.1.0.1.0	date-entity	1-2
# ::node	0.1.0.1.0.0	1423	1-2
# ::node	0.1.0.2	channel	20-21
# ::node	0.1.0.2.0	narrow-01	18-19
# ::node	0.1.0.2.1	needle	19-20
# ::root	0	and
# ::edge	and	op1	begin-01	0.1.0.1	0.1.0	
# ::edge	and	op1	empty	0	0.1	
# ::edge	and	time	date-entity	0.1.0.1	0.1.0.1.0	
# ::edge	begin-01	ARG0	tide	0.1.0	0.1.0.0	
# ::edge	begin-01	ARG1	empty	0.1.0	0.1	
# ::edge	begin-01	time	channel	0.1.0	0.1.0.2	
# ::edge	channel	mod	needle	0.1.0.2	0.1.0.2.1	
# ::edge	date-entity	year	1423	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	float-01	ARG1	and	0.0	0	
# ::edge	float-01	ARG2	it	0.0	0.0.0	
# ::edge	narrow-01	ARG1	channel	0.1.0.2.0	0.1.0.2	
(a / and 
      :ARG1-of (f / float-01 
            :ARG2 (i / it)) 
      :op1 (e / empty 
            :ARG1-of (b / begin-01 
                  :ARG0 (t / tide) 
                  :op-of (a2 / and 
                        :time (d / date-entity 
                              :year 1423)) 
                  :time (c / channel 
                        :ARG1-of (n2 / narrow-01) 
                        :mod (n / needle)))))

# ::snt only one area was more or less clear showing two naked female figures hand in hand as if swimming or floating in midair
# ::tok only one area was more or less clear showing two naked female figures hand in hand as if swimming or floating in midair
# ::alignments 20-21|0.0.1.0.0.0.0 19-20|0.0.1.0.0.0 18-19|0.0.1.0.0 15-16|0.0.1.0.4 13-14|0.0.1.0 12-13|0.0.1.0.1 11-12|0.0.1.0.2 10-11|0.0.1.0.3 9-10|0.0.1.0.5 8-9|0.0.1 7-8|0.0 6-7|0.1 5-6|0 2-3|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.044
# ::node	0	or	5-6
# ::node	0.0	clear	7-8
# ::node	0.0.0	area	2-3
# ::node	0.0.0.0	only	0-1
# ::node	0.0.1	show-01	8-9
# ::node	0.0.1.0	hand	13-14
# ::node	0.0.1.0.0	swim-01	18-19
# ::node	0.0.1.0.0.0	or	19-20
# ::node	0.0.1.0.0.0.0	float-01	20-21
# ::node	0.0.1.0.1	figure	12-13
# ::node	0.0.1.0.2	female	11-12
# ::node	0.0.1.0.3	naked	10-11
# ::node	0.0.1.0.4	hand	15-16
# ::node	0.0.1.0.5	2	9-10
# ::node	0.1	less	6-7
# ::root	0	or
# ::edge	area	mod	only	0.0.0	0.0.0.0	
# ::edge	clear	domain	area	0.0	0.0.0	
# ::edge	clear	example	or	0.0	0	
# ::edge	hand	mod	female	0.0.1.0	0.0.1.0.2	
# ::edge	hand	mod	figure	0.0.1.0	0.0.1.0.1	
# ::edge	hand	mod	naked	0.0.1.0	0.0.1.0.3	
# ::edge	hand	prep-at	hand	0.0.1.0	0.0.1.0.4	
# ::edge	hand	quant	2	0.0.1.0	0.0.1.0.5	
# ::edge	or	op1	less	0	0.1	
# ::edge	or	op1	swim-01	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	or	op2	float-01	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	show-01	ARG1	hand	0.0.1	0.0.1.0	
# ::edge	show-01	manner	clear	0.0.1	0.0	
# ::edge	swim-01	ARG1	hand	0.0.1.0.0	0.0.1.0	
(o2 / or 
      :example-of (c / clear 
            :domain (a / area 
                  :mod (o3 / only)) 
            :manner-of (s2 / show-01 
                  :ARG1 (h2 / hand 
                        :ARG1-of (s / swim-01 
                              :op-of (o / or 
                                    :op1 (f / float-01))) 
                        :mod (f2 / figure) 
                        :mod (f3 / female) 
                        :mod (n / naked) 
                        :prep-at (h / hand) 
                        :quant 2))) 
      :op1 (l / less))

# ::snt or rather seems to float dash
# ::tok or rather seems to float dash
# ::alignments 4-5|0.0 2-3|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.050
# ::node	0	or	0-1
# ::node	0.0	float-01	4-5
# ::node	0.0.0	seem-01	2-3
# ::root	0	or
(o / or 
      :ARG0-of (f / float-01 
            :ARG1-of (s / seem-01)))

# ::snt one shoe floated empty the other was still on a foot
# ::tok one shoe floated empty the other was still on a foot
# ::alignments 10-11|0.0.1 7-8|0.0.0.0.0 5-6|0.0.0.0 3-4|0.0.0 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.092
# ::node	0	shoe-in	1-2
# ::node	0.0	float-01	2-3
# ::node	0.0.0	empty	3-4
# ::node	0.0.0.0	other	5-6
# ::node	0.0.0.0.0	still	7-8
# ::node	0.0.1	foot	10-11
# ::root	0	shoe-in
(s2 / shoe-in 
      :ARG0-of (f2 / float-01 
            :ARG1 (e / empty 
                  :degree-of (o / other 
                        :mod-of (s / still))) 
            :ARG2 (f / foot)))

# ::snt if sears is not interested speculates dolier littlewoods may float the division
# ::tok if sears is not interested speculates dolier littlewoods may float the division
# ::alignments 11-12|0.0.0.0 9-10|0.0.0 8-9|0.0.1+0.0 4-5|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.110
# ::node	0	interest-01	4-5
# ::node	0.0	date-entity	8-9
# ::node	0.0.0	float-01	9-10
# ::node	0.0.0.0	division	11-12
# ::node	0.0.1	5	8-9
# ::root	0	interest-01
# ::edge	date-entity	month	5	0.0	0.0.1	
# ::edge	float-01	ARG1	division	0.0.0	0.0.0.0	
# ::edge	float-01	mod	date-entity	0.0.0	0.0	
# ::edge	interest-01	ARG1	date-entity	0	0.0	
(i / interest-01 
      :ARG1 (d2 / date-entity 
            :mod-of (f / float-01 
                  :ARG1 (d / division)) 
            :month 5))

# ::snt of vacuum cleaners encased in plexiglass basketballs floating in aquariums and a stainlesssteel bunny dash
# ::tok of vacuum cleaners encased in plexiglass basketballs floating in aquariums and a stainlesssteel bunny dash
# ::alignments 10-11|0 7-8|0.0 2-3|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.128
# ::node	0	and	10-11
# ::node	0.0	float-01	7-8
# ::node	0.0.0	clean-01	2-3
# ::node	0.0.0.0	vacuum	1-2
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	clean-01	ARG1	vacuum	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	clean-01	0.0	0.0.0	
(a / and 
      :op1 (f / float-01 
            :ARG1 (c / clean-01 
                  :ARG1 (v / vacuum))))

# ::snt as eisenhower remarks with unusual wit only the great number of barrage balloons floating constantly in british skies kept the islands from sinking under the seas
# ::tok as eisenhower remarks with unusual wit only the great number of barrage balloons floating constantly in british skies kept the islands from sinking under the seas
# ::alignments 25-26|0.0.0.0.0.0.0 22-23|0.0.0.0.0.0 20-21|0.0.0.0.0.0.1.0 18-19|0.0.0.0.0.0.1 14-15|0.0.0.1 13-14|0.0.0 9-10|0.0 8-9|0 6-7|0.0.1 5-6|0.0.0.0 4-5|0.0.0.0.1.0+0.0.0.0.1 2-3|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.197
# ::node	0	great	8-9
# ::node	0.0	number	9-10
# ::node	0.0.0	float-01	13-14
# ::node	0.0.0.0	wit	5-6
# ::node	0.0.0.0.0	remark-01	2-3
# ::node	0.0.0.0.0.0	sink-01	22-23
# ::node	0.0.0.0.0.0.0	sea	25-26
# ::node	0.0.0.0.0.0.1	keep-01	18-19
# ::node	0.0.0.0.0.0.1.0	island	20-21
# ::node	0.0.0.0.1	usual	4-5
# ::node	0.0.0.0.1.0	-	4-5
# ::node	0.0.0.1	constant	14-15
# ::node	0.0.1	only	6-7
# ::root	0	great
(g / great 
      :mod-of (n / number 
            :ARG0-of (f / float-01 
                  :ARG1 (w / wit 
                        :ARG1-of (r / remark-01 
                              :ARG0-of (s2 / sink-01 
                                    :ARG1 (s / sea) 
                                    :ARG2-of (k / keep-01 
                                          :ARG1 (i / island)))) 
                        :mod (u / usual 
                              :polarity -)) 
                  :manner (c / constant)) 
            :mod (o / only)))

# ::snt the hottest parts of a liquid are also the least dense or lightest and so they tend to rise upwards to float above the denser cooler liquid
# ::tok the hottest parts of a liquid are also the least dense or lightest and so they tend to rise upwards to float above the denser cooler liquid
# ::alignments 26-27|0.1.0.0.1.0.0 22-23|0.1.0.0.1.0 21-22|0.1.0.0.1 19-20|0.1.0.0.0 18-19|0.1.0.0 16-17|0.1 15-16|0.1.0 14-15|0.1.2 13-14|0 11-12|0.1.1 10-11|0.1.1.0 7-8|0.1.1.0.0 5-6|0.0.0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.398
# ::node	0	and	13-14
# ::node	0.0	part	2-3
# ::node	0.0.0	liquid	5-6
# ::node	0.1	tend-02	16-17
# ::node	0.1.0	they	15-16
# ::node	0.1.0.0	rise-01	18-19
# ::node	0.1.0.0.0	upwards	19-20
# ::node	0.1.0.0.1	float-01	21-22
# ::node	0.1.0.0.1.0	above	22-23
# ::node	0.1.0.0.1.0.0	liquid	26-27
# ::node	0.1.1	or	11-12
# ::node	0.1.1.0	dense	10-11
# ::node	0.1.1.0.0	also	7-8
# ::node	0.1.2	so	14-15
# ::root	0	and
# ::edge	above	op1	liquid	0.1.0.0.1.0	0.1.0.0.1.0.0	
# ::edge	and	op1	part	0	0.0	
# ::edge	and	op2	tend-02	0	0.1	
# ::edge	dense	mod	also	0.1.1.0	0.1.1.0.0	
# ::edge	float-01	ARG2	above	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	liquid	part	part	0.0.0	0.0	
# ::edge	or	op1	dense	0.1.1	0.1.1.0	
# ::edge	or	op2	tend-02	0.1.1	0.1	
# ::edge	rise-01	ARG0	they	0.1.0.0	0.1.0	
# ::edge	rise-01	ARG1	upwards	0.1.0.0	0.1.0.0.0	
# ::edge	rise-01	ARG2	float-01	0.1.0.0	0.1.0.0.1	
# ::edge	so	op1	tend-02	0.1.2	0.1	
# ::edge	tend-02	ARG1	they	0.1	0.1.0	
(a2 / and 
      :op1 (p / part 
            :part-of (l2 / liquid)) 
      :op2 (t / tend-02 
            :ARG1 (t2 / they 
                  :ARG0-of (r / rise-01 
                        :ARG1 (u / upwards) 
                        :ARG2 (f / float-01 
                              :ARG2 (a / above 
                                    :op1 (l / liquid))))) 
            :op-of (o / or 
                  :op1 (d / dense 
                        :mod (a3 / also))) 
            :op-of (s / so)))

# ::snt they may also have been buying shares in the companies floated last week
# ::tok they may also have been buying shares in the companies floated last week
# ::alignments 12-13|0.2.0.0 11-12|0.2.0.0.0 10-11|0.2.0 9-10|0.2 6-7|0.1 5-6|0 2-3|0.4 1-2|0.3.0+0.3 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.445
# ::node	0	buy-01	5-6
# ::node	0.0	they	0-1
# ::node	0.1	share	6-7
# ::node	0.2	company	9-10
# ::node	0.2.0	float-01	10-11
# ::node	0.2.0.0	week	12-13
# ::node	0.2.0.0.0	last	11-12
# ::node	0.3	date-entity	1-2
# ::node	0.3.0	5	1-2
# ::node	0.4	also	2-3
# ::root	0	buy-01
# ::edge	buy-01	ARG0	they	0	0.0	
# ::edge	buy-01	ARG1	share	0	0.1	
# ::edge	buy-01	ARG2	company	0	0.2	
# ::edge	buy-01	mod	also	0	0.4	
# ::edge	date-entity	domain	buy-01	0.3	0	
# ::edge	date-entity	month	5	0.3	0.3.0	
# ::edge	float-01	ARG1	company	0.2.0	0.2	
# ::edge	float-01	time	week	0.2.0	0.2.0.0	
# ::edge	week	mod	last	0.2.0.0	0.2.0.0.0	
(b / buy-01 
      :ARG0 (t / they) 
      :ARG1 (s / share) 
      :ARG2 (c / company 
            :ARG1-of (f / float-01 
                  :time (w / week 
                        :mod (l / last)))) 
      :domain-of (d / date-entity 
            :month 5) 
      :mod (a / also))

# ::snt this is the kind of dreamy hollywood fantasy i like to float in when im lying flat on my back under some dirty platform desperately trying to tack a loose wire or stubborn piece of baize into position dash
# ::tok this is the kind of dreamy hollywood fantasy i like to float in when im lying flat on my back under some dirty platform desperately trying to tack a loose wire or stubborn piece of baize into position dash
# ::alignments 37-38|0.0.0.0.0.0.2.0 33-34|0.0 32-33|0 31-32|0.0.0 30-31|0.0.0.0 29-30|0.0.0.0.1 25-26|0.0.0.0.0.0 24-25|0.0.0.0.0.0.1 23-24|0.0.0.0.0 22-23|0.0.0.0.0.1 21-22|0.0.0.0.0.2 19-20|0.0.0.0.0.0.2.2 16-17|0.0.0.0.0.0.2.1 15-16|0.0.0.0.0.0.2 11-12|0.0.0.0.0.0.0.0.0.0 8-9|0.0.0.0.0.0.0.0.0.0.0 7-8|0.0.0.0.0.0.0.0 6-7|0.0.0.0.0.0.0.1.0+0.0.0.0.0.0.0.1+0.0.0.0.0.0.0 3-4|0.0.0.0.0.0.0.0.0 0-1|0.0.0.0.0.0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:32.953
# ::node	0	stubborn	32-33
# ::node	0.0	piece	33-34
# ::node	0.0.0	or	31-32
# ::node	0.0.0.0	wire-01	30-31
# ::node	0.0.0.0.0	platform	23-24
# ::node	0.0.0.0.0.0	try-01	25-26
# ::node	0.0.0.0.0.0.0	organization	6-7
# ::node	0.0.0.0.0.0.0.0	fantasy	7-8
# ::node	0.0.0.0.0.0.0.0.0	kind	3-4
# ::node	0.0.0.0.0.0.0.0.0.0	float-01	11-12
# ::node	0.0.0.0.0.0.0.0.0.0.0	i	8-9
# ::node	0.0.0.0.0.0.0.0.0.1	this	0-1
# ::node	0.0.0.0.0.0.0.1	name	6-7
# ::node	0.0.0.0.0.0.0.1.0	"Hollywood"	6-7
# ::node	0.0.0.0.0.0.1	desperate	24-25
# ::node	0.0.0.0.0.0.2	lie-01	15-16
# ::node	0.0.0.0.0.0.2.0	position	37-38
# ::node	0.0.0.0.0.0.2.1	flat	16-17
# ::node	0.0.0.0.0.0.2.2	back	19-20
# ::node	0.0.0.0.0.1	dirty	22-23
# ::node	0.0.0.0.0.2	some	21-22
# ::node	0.0.0.0.1	loose-01	29-30
# ::root	0	stubborn
(s / stubborn 
      :mod-of (p2 / piece 
            :op-of (o / or 
                  :op1 (w / wire-01 
                        :ARG1 (p3 / platform 
                              :ARG1-of (t / try-01 
                                    :ARG0 (o2 / organization 
                                          :mod-of (f3 / fantasy 
                                                :mod-of (k / kind 
                                                      :ARG1-of (f2 / float-01 
                                                            :ARG0 (i / i)) 
                                                      :domain (t2 / this))) 
                                          :name (n / name 
                                                :op1 "Hollywood")) 
                                    :manner (d / desperate) 
                                    :purpose-of (l2 / lie-01 
                                          :ARG0 (p / position) 
                                          :ARG1 (f / flat) 
                                          :ARG2 (b / back))) 
                              :mod (d2 / dirty) 
                              :quant (s2 / some)) 
                        :ARG1-of (l / loose-01)))))

# ::snt and i found myself floating quite calmly above my body
# ::tok and i found myself floating quite calmly above my body
# ::alignments 9-10|0.0.1.1 7-8|0.0.1.1.0 5-6|0.0.1.0 4-5|0.0.1 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:33.010
# ::node	0	and	0-1
# ::node	0.0	find-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	float-01	4-5
# ::node	0.0.1.0	quite	5-6
# ::node	0.0.1.1	body	9-10
# ::node	0.0.1.1.0	above	7-8
# ::root	0	and
# ::edge	above	op1	body	0.0.1.1.0	0.0.1.1	
# ::edge	and	op1	find-01	0	0.0	
# ::edge	find-01	ARG0	i	0.0	0.0.0	
# ::edge	find-01	ARG1	float-01	0.0	0.0.1	
# ::edge	float-01	ARG1	quite	0.0.1	0.0.1.0	
# ::edge	float-01	ARG3	body	0.0.1	0.0.1.1	
(a2 / and 
      :op1 (f2 / find-01 
            :ARG0 (i / i) 
            :ARG1 (f / float-01 
                  :ARG1 (q / quite) 
                  :ARG3 (b / body 
                        :op-of (a / above)))))

# ::snt floating into the night warner 925 8591 by julee cruise sounds insubstantial with julees strangely ethereal voice delivering lyrics written by filmmaker david lynch who gave you blue velvet and set to music by keyboardist angelo badalamenti
# ::tok floating into the night warner 925 8591 by julee cruise sounds insubstantial with julees strangely ethereal voice delivering lyrics written by filmmaker david lynch who gave you blue velvet and set to music by keyboardist angelo badalamenti
# ::alignments 32-33|0.0.2.1 29-30|0 27-28|0.0.2.2 26-27|0.0.1.0.0.0 21-22|0.0.0.1 19-20|0.0.1.0.0 18-19|0.0.1.0 17-18|0.0.1 16-17|0.0 10-11|0.0.2 9-10|0.0.2.0 5-7|0.0.0.0.2+0.0.0.0.1+0.0.0.0.0+0.0.0.0 3-4|0.0.1.0.0.1 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:33.391
# ::node	0	and	29-30
# ::node	0.0	voice	16-17
# ::node	0.0.0	float-01	0-1
# ::node	0.0.0.0	date-entity	5-7
# ::node	0.0.0.0.0	91	5-7
# ::node	0.0.0.0.1	85	5-7
# ::node	0.0.0.0.2	925	5-7
# ::node	0.0.0.1	film	21-22
# ::node	0.0.1	deliver-01	17-18
# ::node	0.0.1.0	lyric	18-19
# ::node	0.0.1.0.0	write-01	19-20
# ::node	0.0.1.0.0.0	you	26-27
# ::node	0.0.1.0.0.1	night	3-4
# ::node	0.0.2	sound-01	10-11
# ::node	0.0.2.0	cruise	9-10
# ::node	0.0.2.1	music	32-33
# ::node	0.0.2.2	blue	27-28
# ::root	0	and
# ::edge	and	op1	voice	0	0.0	
# ::edge	blue	op1	sound-01	0.0.2.2	0.0.2	
# ::edge	date-entity	day	91	0.0.0.0	0.0.0.0.0	
# ::edge	date-entity	month	85	0.0.0.0	0.0.0.0.1	
# ::edge	date-entity	year	925	0.0.0.0	0.0.0.0.2	
# ::edge	deliver-01	ARG0	voice	0.0.1	0.0	
# ::edge	deliver-01	ARG1	lyric	0.0.1	0.0.1.0	
# ::edge	film	op1	float-01	0.0.0.1	0.0.0	
# ::edge	float-01	ARG0	voice	0.0.0	0.0	
# ::edge	float-01	ARG1	date-entity	0.0.0	0.0.0.0	
# ::edge	music	op1	sound-01	0.0.2.1	0.0.2	
# ::edge	night	op1	write-01	0.0.1.0.0.1	0.0.1.0.0	
# ::edge	sound-01	ARG0	cruise	0.0.2	0.0.2.0	
# ::edge	sound-01	ARG1	voice	0.0.2	0.0	
# ::edge	write-01	ARG0	you	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	write-01	ARG1	lyric	0.0.1.0.0	0.0.1.0	
(a / and 
      :op1 (v / voice 
            :ARG0-of (f2 / float-01 
                  :ARG1 (d2 / date-entity 
                        :day 91 
                        :month 85 
                        :year 925) 
                  :op-of (f / film)) 
            :ARG0-of (d / deliver-01 
                  :ARG1 (l / lyric 
                        :ARG1-of (w / write-01 
                              :ARG0 (y / you) 
                              :op-of (n / night)))) 
            :ARG1-of (s / sound-01 
                  :ARG0 (c / cruise) 
                  :op-of (m / music) 
                  :op-of (b / blue))))

# ::snt upon the water the mist floated in a golden veil spotted with the dancing of a myriad tiny flies
# ::tok upon the water the mist floated in a golden veil spotted with the dancing of a myriad tiny flies
# ::alignments 18-19|0.0.1 17-18|0.0.1.0 16-17|0 10-11|0.0.2.0 9-10|0.0.2 8-9|0.0.2.1 5-6|0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:33.456
# ::node	0	myriad	16-17
# ::node	0.0	float-01	5-6
# ::node	0.0.0	water	2-3
# ::node	0.0.1	fly-01	18-19
# ::node	0.0.1.0	tiny	17-18
# ::node	0.0.2	veil	9-10
# ::node	0.0.2.0	spot-01	10-11
# ::node	0.0.2.1	gold	8-9
# ::root	0	myriad
(m / myriad 
      :ARG0-of (f2 / float-01 
            :ARG1 (w / water) 
            :ARG2 (f / fly-01 
                  :mod (t / tiny)) 
            :location (v / veil 
                  :ARG1-of (s / spot-01) 
                  :mod (g / gold))))

# ::snt another difficulty is that the technique can give false positive results because of contamination by dna floating in the air
# ::tok another difficulty is that the technique can give false positive results because of contamination by dna floating in the air
# ::alignments 19-20|0.0.0.0 16-17|0.0.0 13-14|0.0 11-12|0 10-11|0.0.1 9-10|0.0.1.2 8-9|0.0.1.1 7-8|0.0.1.0 6-7|0.0.1.0.1 5-6|0.0.1.0.0 1-2|0.0.1.0.1.0 0-1|0.0.1.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:33.613
# ::node	0	cause-01	11-12
# ::node	0.0	contaminate-01	13-14
# ::node	0.0.0	float-01	16-17
# ::node	0.0.0.0	air	19-20
# ::node	0.0.1	result-01	10-11
# ::node	0.0.1.0	give-01	7-8
# ::node	0.0.1.0.0	technique	5-6
# ::node	0.0.1.0.1	possible	6-7
# ::node	0.0.1.0.1.0	difficult	1-2
# ::node	0.0.1.0.1.0.0	another	0-1
# ::node	0.0.1.1	false	8-9
# ::node	0.0.1.2	positive	9-10
# ::root	0	cause-01
# ::edge	cause-01	ARG0	contaminate-01	0	0.0	
# ::edge	contaminate-01	ARG1	float-01	0.0	0.0.0	
# ::edge	difficult	mod	another	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	difficult	mod	possible	0.0.1.0.1.0	0.0.1.0.1	
# ::edge	float-01	ARG1	air	0.0.0	0.0.0.0	
# ::edge	give-01	ARG0	technique	0.0.1.0	0.0.1.0.0	
# ::edge	give-01	ARG1	result-01	0.0.1.0	0.0.1	
# ::edge	possible	domain	give-01	0.0.1.0.1	0.0.1.0	
# ::edge	result-01	ARG3	contaminate-01	0.0.1	0.0	
# ::edge	result-01	mod	false	0.0.1	0.0.1.1	
# ::edge	result-01	mod	positive	0.0.1	0.0.1.2	
(c2 / cause-01 
      :ARG0 (c / contaminate-01 
            :ARG1 (f / float-01 
                  :ARG1 (a / air)) 
            :ARG3-of (r / result-01 
                  :ARG1-of (g / give-01 
                        :ARG0 (t / technique) 
                        :domain-of (p2 / possible 
                              :mod-of (d / difficult 
                                    :mod (a2 / another)))) 
                  :mod (f2 / false) 
                  :mod (p / positive))))

# ::snt a cottonwool mist was floating down towards the lake from the ridge in the moonlight
# ::tok a cottonwool mist was floating down towards the lake from the ridge in the moonlight
# ::alignments 8-9|0.1 5-6|0.0 4-5|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:33.636
# ::node	0	float-01	4-5
# ::node	0.0	down	5-6
# ::node	0.1	lake	8-9
# ::root	0	float-01
# ::edge	float-01	direction	down	0	0.0	
# ::edge	float-01	location	lake	0	0.1	
(f / float-01 
      :direction (d / down) 
      :location (l / lake))

# ::snt their voices float down angelically from a room hidden somewhere above the chapel is too small to let them into the main body of the kirk
# ::tok their voices float down angelically from a room hidden somewhere above the chapel is too small to let them into the main body of the kirk
# ::alignments 22-23|0.0 21-22|0.0.0 17-18|0 15-16|0.2 14-15|0.1.0.0.1 10-11|0.1.1 9-10|0.1.2 8-9|0.1 7-8|0.1.0 3-4|0.1.0.0.2 2-3|0.1.0.0 1-2|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:33.767
# ::node	0	let-01	17-18
# ::node	0.0	body	22-23
# ::node	0.0.0	main	21-22
# ::node	0.1	hide-01	8-9
# ::node	0.1.0	room	7-8
# ::node	0.1.0.0	float-01	2-3
# ::node	0.1.0.0.0	voice	1-2
# ::node	0.1.0.0.1	too	14-15
# ::node	0.1.0.0.2	down	3-4
# ::node	0.1.1	above	10-11
# ::node	0.1.2	somewhere	9-10
# ::node	0.2	small	15-16
# ::root	0	let-01
# ::edge	body	mod	main	0.0	0.0.0	
# ::edge	float-01	ARG0	voice	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	too	0.1.0.0	0.1.0.0.1	
# ::edge	float-01	ARG2	down	0.1.0.0	0.1.0.0.2	
# ::edge	float-01	location	room	0.1.0.0	0.1.0	
# ::edge	hide-01	ARG1	room	0.1	0.1.0	
# ::edge	hide-01	condition	let-01	0.1	0	
# ::edge	hide-01	location	above	0.1	0.1.1	
# ::edge	hide-01	mod	somewhere	0.1	0.1.2	
# ::edge	let-01	ARG1	body	0	0.0	
# ::edge	small	domain	let-01	0.2	0	
(l / let-01 
      :ARG1 (b / body 
            :mod (m / main)) 
      :condition-of (h / hide-01 
            :ARG1 (r / room 
                  :location-of (f / float-01 
                        :ARG0 (v / voice) 
                        :ARG1 (t / too) 
                        :ARG2 (d / down))) 
            :location (a / above) 
            :mod (s2 / somewhere)) 
      :domain-of (s / small))

# ::snt bazza lay unconscious like a beached whale by a brown lake of vomited guinness in which floated intact the six speed capsules
# ::tok bazza lay unconscious like a beached whale by a brown lake of vomited guinness in which floated intact the six speed capsules
# ::alignments 20-21|0 19-20|0.1 17-18|0.0.1.1 16-17|0.0.1 10-11|0.0.1.0 9-10|0.0.1.0.0 6-7|0.0.2 2-3|0.0.0.0+0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:33.903
# ::node	0	speed	20-21
# ::node	0.0	lay-01	1-2
# ::node	0.0.0	conscious	2-3
# ::node	0.0.0.0	-	2-3
# ::node	0.0.1	float-01	16-17
# ::node	0.0.1.0	lake	10-11
# ::node	0.0.1.0.0	brown	9-10
# ::node	0.0.1.1	intact	17-18
# ::node	0.0.2	whale	6-7
# ::node	0.1	6	19-20
# ::root	0	speed
# ::edge	conscious	polarity	-	0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	lake	0.0.1	0.0.1.0	
# ::edge	float-01	ARG1	intact	0.0.1	0.0.1.1	
# ::edge	lake	mod	brown	0.0.1.0	0.0.1.0.0	
# ::edge	lay-01	ARG1	conscious	0.0	0.0.0	
# ::edge	lay-01	ARG2	float-01	0.0	0.0.1	
# ::edge	lay-01	time	whale	0.0	0.0.2	
# ::edge	speed	op1	lay-01	0	0.0	
# ::edge	speed	quant	6	0	0.1	
(s / speed 
      :op1 (l2 / lay-01 
            :ARG1 (c / conscious 
                  :polarity -) 
            :ARG2 (f / float-01 
                  :ARG0 (l / lake 
                        :mod (b / brown)) 
                  :ARG1 (i / intact)) 
            :time (w / whale)) 
      :quant 6)

# ::snt adherence to the northern crown code see the other lot larger in number and mainly southernbased floating primly up and down their rinks clad in whites and uttering cries of well bowled rodney
# ::tok adherence to the northern crown code see the other lot larger in number and mainly southernbased floating primly up and down their rinks clad in whites and uttering cries of well bowled rodney
# ::alignments 30-31|0.0 26-27|0.1.0.0.0 25-26|0.1.0.0.0.1.0+0.1.0.0.0.1 20-21|0.1.0.0.0.0.1.0 19-20|0.1.0.0.0.0.1 16-17|0.1.0.0.0.0 14-15|0.1.0.0.0.0.0.1.0 13-14|0.1.0.0.0.0.0.1 12-13|0.1.0.0.0.0.0.0 10-11|0.1.0.0.0.0.0 9-10|0.1.0.0.1 8-9|0.1.0.0.1.0 6-7|0.1.0.0 5-6|0.1 4-5|0 3-4|0.1.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:34.514
# ::node	0	crown-01	4-5
# ::node	0.0	well	30-31
# ::node	0.1	code	5-6
# ::node	0.1.0	adhere-02	0-1
# ::node	0.1.0.0	see-01	6-7
# ::node	0.1.0.0.0	and	26-27
# ::node	0.1.0.0.0.0	float-01	16-17
# ::node	0.1.0.0.0.0.0	large	10-11
# ::node	0.1.0.0.0.0.0.0	number	12-13
# ::node	0.1.0.0.0.0.0.1	and	13-14
# ::node	0.1.0.0.0.0.0.1.0	main	14-15
# ::node	0.1.0.0.0.0.1	and	19-20
# ::node	0.1.0.0.0.0.1.0	down	20-21
# ::node	0.1.0.0.0.1	person	25-26
# ::node	0.1.0.0.0.1.0	white	25-26
# ::node	0.1.0.0.1	lot	9-10
# ::node	0.1.0.0.1.0	other	8-9
# ::node	0.1.1	north	3-4
# ::root	0	crown-01
# ::edge	adhere-02	ARG1	code	0.1.0	0.1	
# ::edge	and	direction	down	0.1.0.0.0.0.1	0.1.0.0.0.0.1.0	
# ::edge	and	op1	float-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	and	op1	float-01	0.1.0.0.0.0.1	0.1.0.0.0.0	
# ::edge	and	op1	large	0.1.0.0.0.0.0.1	0.1.0.0.0.0.0	
# ::edge	and	op2	main	0.1.0.0.0.0.0.1	0.1.0.0.0.0.0.1.0	
# ::edge	and	op2	person	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	code	mod	crown-01	0.1	0	
# ::edge	code	mod	north	0.1	0.1.1	
# ::edge	crown-01	ARG1	well	0	0.0	
# ::edge	float-01	ARG1	large	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	large	compared-to	number	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	lot	mod	other	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	person	mod	white	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	see-01	ARG0	adhere-02	0.1.0.0	0.1.0	
# ::edge	see-01	ARG1	and	0.1.0.0	0.1.0.0.0	
# ::edge	see-01	ARG2	lot	0.1.0.0	0.1.0.0.1	
(c2 / crown-01 
      :ARG1 (w / well) 
      :mod-of (c / code 
            :ARG1-of (a4 / adhere-02 
                  :ARG0-of (s / see-01 
                        :ARG1 (a / and 
                              :op1 (f / float-01 
                                    :ARG1 (l / large 
                                          :compared-to (n / number) 
                                          :op-of (a3 / and 
                                                :op1 (m / main))) 
                                    :op-of (a2 / and 
                                          :direction (d / down))) 
                              :op2 (p / person 
                                    :mod (w2 / white))) 
                        :ARG2 (l2 / lot 
                              :mod (o / other)))) 
            :mod (n2 / north)))

# ::snt sheep floated into houses and were marooned on the tops of hedges
# ::tok sheep floated into houses and were marooned on the tops of hedges
# ::alignments 4-5|0 3-4|0.0.1 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:34.527
# ::node	0	and	4-5
# ::node	0.0	float-01	1-2
# ::node	0.0.0	sheep	0-1
# ::node	0.0.1	house	3-4
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	float-01	ARG0	sheep	0.0	0.0.0	
# ::edge	float-01	location	house	0.0	0.0.1	
(a / and 
      :op1 (f / float-01 
            :ARG0 (s / sheep) 
            :location (h / house)))

# ::snt this years arty attractions is the bubble a transparent sphere as big as a sixstorey building in which a flautist will perform music of the spheres while suspended in the exact centre floating on the river thames
# ::tok this years arty attractions is the bubble a transparent sphere as big as a sixstorey building in which a flautist will perform music of the spheres while suspended in the exact centre floating on the river thames
# ::alignments 35-36|0.0.0.1.1.0.1 32-33|0.0.0.1.1.0.0 30-31|0.0.0.0 27-28|0.0.0.1.1 25-26|0.0.0.1.1.0 22-23|0.0.0.1.0 21-22|0.0.0.1 15-16|0.0.0 11-12|0.0.0.2 9-10|0.0 8-9|0 3-4|0.0.0.1.1.0.0.0.0+0.0.0.1.1.0.0.0 1-2|0.0.0.1.1.0.0.0.0.0.0+0.0.0.1.1.0.0.0.0.0 0-1|0.0.0.1.1.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:34.971
# ::node	0	transparent	8-9
# ::node	0.0	sphere	9-10
# ::node	0.0.0	build-01	15-16
# ::node	0.0.0.0	exact	30-31
# ::node	0.0.0.1	perform-01	21-22
# ::node	0.0.0.1.0	music	22-23
# ::node	0.0.0.1.1	suspend-01	27-28
# ::node	0.0.0.1.1.0	sphere	25-26
# ::node	0.0.0.1.1.0.0	float-01	32-33
# ::node	0.0.0.1.1.0.0.0	thing	3-4
# ::node	0.0.0.1.1.0.0.0.0	attract-01	3-4
# ::node	0.0.0.1.1.0.0.0.0.0	temporal-quantity	1-2
# ::node	0.0.0.1.1.0.0.0.0.0.0	year	1-2
# ::node	0.0.0.1.1.0.0.0.1	this	0-1
# ::node	0.0.0.1.1.0.1	river	35-36
# ::node	0.0.0.2	big	11-12
# ::root	0	transparent
(t / transparent 
      :mod-of (s3 / sphere 
            :op1 (b / build-01 
                  :ARG1 (e / exact) 
                  :time-of (p / perform-01 
                        :ARG1 (m / music) 
                        :ARG1-of (s / suspend-01 
                              :ARG0 (s2 / sphere 
                                    :ARG0-of (f / float-01 
                                          :ARG1 (t2 / thing 
                                                :ARG0-of (a / attract-01 
                                                      :ARG1 (t3 / temporal-quantity 
                                                            :unit (y / year))) 
                                                :mod (t4 / this))) 
                                    :topic-of (r / river)))) 
                  :topic-of (b2 / big))))

# ::snt the most convincing explanation floated to explain the oppositions reluctance was that it was not yet sufficiently confident of its strength outside prague and other cities to put it to such a test
# ::tok the most convincing explanation floated to explain the oppositions reluctance was that it was not yet sufficiently confident of its strength outside prague and other cities to put it to such a test
# ::alignments 32-33|0.2.1.0 30-31|0.2.1.0.1 28-29|0.2.1.0.0 25-26|0.2.0.1 24-25|0.2.0.1.0 23-24|0.2.1 21-22|0.2.0 20-21|0.2 17-18|0 16-17|0.1 15-16|0.3 12-13|0.0 9-10|0.2.0.0.0.0 6-7|0.2.0.0.0 4-5|0.2.0.0.0.1 3-4|0.2.0.0 2-3|0.2.0.0.1 1-2|0.2.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:35.184
# ::node	0	confident-41	17-18
# ::node	0.0	it	12-13
# ::node	0.1	suffice-01	16-17
# ::node	0.2	strength	20-21
# ::node	0.2.0	outside	21-22
# ::node	0.2.0.0	explain-01	3-4
# ::node	0.2.0.0.0	explain-01	6-7
# ::node	0.2.0.0.0.0	reluctant	9-10
# ::node	0.2.0.0.0.1	float-01	4-5
# ::node	0.2.0.0.1	convince-01	2-3
# ::node	0.2.0.0.1.0	most	1-2
# ::node	0.2.0.1	city	25-26
# ::node	0.2.0.1.0	other	24-25
# ::node	0.2.1	and	23-24
# ::node	0.2.1.0	test-01	32-33
# ::node	0.2.1.0.0	it	28-29
# ::node	0.2.1.0.1	such	30-31
# ::node	0.3	yet	15-16
# ::root	0	confident-41
# ::edge	and	op1	strength	0.2.1	0.2	
# ::edge	and	op2	test-01	0.2.1	0.2.1.0	
# ::edge	city	mod	other	0.2.0.1	0.2.0.1.0	
# ::edge	confident-41	ARG1	it	0	0.0	
# ::edge	confident-41	medium	strength	0	0.2	
# ::edge	confident-41	time	yet	0	0.3	
# ::edge	convince-01	ARG1	explain-01	0.2.0.0.1	0.2.0.0	
# ::edge	convince-01	degree	most	0.2.0.0.1	0.2.0.0.1.0	
# ::edge	explain-01	ARG0	explain-01	0.2.0.0.0	0.2.0.0	
# ::edge	explain-01	ARG1	outside	0.2.0.0	0.2.0	
# ::edge	explain-01	ARG1	reluctant	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	float-01	ARG1	explain-01	0.2.0.0.0.1	0.2.0.0.0	
# ::edge	outside	op1	city	0.2.0	0.2.0.1	
# ::edge	strength	location	outside	0.2	0.2.0	
# ::edge	suffice-01	ARG1	confident-41	0.1	0	
# ::edge	test-01	ARG1	it	0.2.1.0	0.2.1.0.0	
# ::edge	test-01	mod	such	0.2.1.0	0.2.1.0.1	
(c2 / confident-41 
      :ARG1 (i2 / it) 
      :ARG1-of (s3 / suffice-01) 
      :medium (s2 / strength 
            :location (o2 / outside 
                  :ARG1-of (e2 / explain-01 
                        :ARG0-of (e / explain-01 
                              :ARG1 (r / reluctant) 
                              :ARG1-of (f / float-01)) 
                        :ARG1-of (c3 / convince-01 
                              :degree (m / most))) 
                  :op1 (c / city 
                        :mod (o / other))) 
            :op-of (a / and 
                  :op1 (t / test-01 
                        :ARG1 (i / it) 
                        :mod (s / such)))) 
      :time (y / yet))

# ::snt the scope of the polish programme should help to build confidence in the zloty when it floats on 1 january
# ::tok the scope of the polish programme should help to build confidence in the zloty when it floats on 1 january
# ::alignments 19-20|0.0.1.0.0.0.0+0.0.1.0.0.0 18-19|0.0.1.0.0.0.1 16-17|0.0.1.0.0 15-16|0.0.1.0 10-11|0.0.1.1 9-10|0.0.1 7-8|0.0 6-7|0 5-6|0.0.0.0 4-5|0.0.0.0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:35.348
# ::node	0	recommend-01	6-7
# ::node	0.0	help-01	7-8
# ::node	0.0.0	scope	1-2
# ::node	0.0.0.0	program	5-6
# ::node	0.0.0.0.0	polish	4-5
# ::node	0.0.1	build-01	9-10
# ::node	0.0.1.0	it	15-16
# ::node	0.0.1.0.0	float-01	16-17
# ::node	0.0.1.0.0.0	date-entity	19-20
# ::node	0.0.1.0.0.0.0	1	19-20
# ::node	0.0.1.0.0.0.1	1	18-19
# ::node	0.0.1.1	confidence	10-11
# ::root	0	recommend-01
# ::edge	build-01	ARG0	it	0.0.1	0.0.1.0	
# ::edge	build-01	ARG1	confidence	0.0.1	0.0.1.1	
# ::edge	date-entity	month	1	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	date-entity	quant	1	0.0.1.0.0.0	0.0.1.0.0.0.1	
# ::edge	float-01	ARG0	it	0.0.1.0.0	0.0.1.0	
# ::edge	float-01	ARG1	date-entity	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	help-01	ARG0	scope	0.0	0.0.0	
# ::edge	help-01	ARG1	build-01	0.0	0.0.1	
# ::edge	program	mod	polish	0.0.0.0	0.0.0.0.0	
# ::edge	recommend-01	ARG1	help-01	0	0.0	
# ::edge	scope	mod	program	0.0.0	0.0.0.0	
(r / recommend-01 
      :ARG1 (h / help-01 
            :ARG0 (s / scope 
                  :mod (p / program 
                        :mod (p2 / polish))) 
            :ARG1 (b / build-01 
                  :ARG0 (i / it 
                        :ARG0-of (f / float-01 
                              :ARG1 (d / date-entity 
                                    :month 1 
                                    :quant 1))) 
                  :ARG1 (c / confidence))))

# ::snt welsh water plc which has inherited 97000 acres of territory from the old welsh water authority is the second largest of the 10 new regional water companies being floated on the stock market later this month
# ::tok welsh water plc which has inherited 97000 acres of territory from the old welsh water authority is the second largest of the 10 new regional water companies being floated on the stock market later this month
# ::alignments 35-36|0.0.0.0.0.3.0.0+0.0.0.0.0.3.0 34-35|0.0.0.0.0.3.0.0.0 33-34|0.0.0.0.0.3 32-33|0.0.0.0.0.0 31-32|0.0.0.0.0.0.0 28-29|0.0.0.0.0 26-27|0.0.0.0 25-26|0.0.0.0.1.0 24-25|0.0.0.0.1 23-24|0.0.0.0.2 22-23|0.0.0.0.0.2 19-20|0.0.1.0.0.0.0+0.0.1.0.0.0 15-16|0.0.1.0.0 14-15|0.0.1.0 12-13|0.0.0.0.0.1 9-10|0.0.1 7-8|0+0.0 5-6|0.0.0 1-2|0.0.0.0.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:35.664
# ::node	0	acre	7-8
# ::node	0.0	area-quantity	7-8
# ::node	0.0.0	inherit-01	5-6
# ::node	0.0.0.0	company	26-27
# ::node	0.0.0.0.0	float-01	28-29
# ::node	0.0.0.0.0.0	market	32-33
# ::node	0.0.0.0.0.0.0	stock	31-32
# ::node	0.0.0.0.0.1	old	12-13
# ::node	0.0.0.0.0.2	10	22-23
# ::node	0.0.0.0.0.2.0	water	1-2
# ::node	0.0.0.0.0.3	late	33-34
# ::node	0.0.0.0.0.3.0	temporal-quantity	35-36
# ::node	0.0.0.0.0.3.0.0	month	35-36
# ::node	0.0.0.0.0.3.0.0.0	this	34-35
# ::node	0.0.0.0.1	region	24-25
# ::node	0.0.0.0.1.0	water	25-26
# ::node	0.0.0.0.2	new	23-24
# ::node	0.0.1	territory	9-10
# ::node	0.0.1.0	water	14-15
# ::node	0.0.1.0.0	authority	15-16
# ::node	0.0.1.0.0.0	large	19-20
# ::node	0.0.1.0.0.0.0	most	19-20
# ::root	0	acre
(a3 / acre 
      :unit-of (a2 / area-quantity 
            :ARG1-of (i / inherit-01 
                  :ARG0 (c / company 
                        :ARG1-of (f / float-01 
                              :ARG2 (m2 / market 
                                    :mod (s / stock)) 
                              :op-of (o / old) 
                              :quant (1 / 10 
                                    :poss (w3 / water)) 
                              :time (l / late 
                                    :op1 (t / temporal-quantity 
                                          :unit (m / month 
                                                :mod (t2 / this))))) 
                        :mod (r / region 
                              :mod-of (w / water)) 
                        :mod (n / new))) 
            :part-of (t3 / territory 
                  :prep-for (w2 / water 
                        :mod-of (a / authority 
                              :mod (l2 / large 
                                    :degree (m3 / most)))))))

# ::snt but she was not resting in the hollow she was floating in it
# ::tok but she was not resting in the hollow she was floating in it
# ::alignments 12-13|0.1.2 10-11|0.1 8-9|0.1.0 7-8|0.1.1 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:35.707
# ::node	0	contrast-01	0-1
# ::node	0.0	she	1-2
# ::node	0.1	float-01	10-11
# ::node	0.1.0	she	8-9
# ::node	0.1.1	hollow	7-8
# ::node	0.1.2	it	12-13
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	she	0	0.0	
# ::edge	float-01	ARG0	she	0.1	0.1.0	
# ::edge	float-01	ARG1	hollow	0.1	0.1.1	
# ::edge	float-01	ARG2	it	0.1	0.1.2	
# ::edge	float-01	condition	contrast-01	0.1	0	
(c / contrast-01 
      :ARG1 (s2 / she) 
      :condition-of (f / float-01 
            :ARG0 (s / she) 
            :ARG1 (h / hollow) 
            :ARG2 (i / it)))

# ::snt a lot of designers would say no that should be floated
# ::tok a lot of designers would say no that should be floated
# ::alignments 10-11|0.0 8-9|0.0.1 6-7|0.1 5-6|0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:35.721
# ::node	0	say-01	5-6
# ::node	0.0	float-01	10-11
# ::node	0.0.0	lot	1-2
# ::node	0.0.1	recommend-01	8-9
# ::node	0.1	-	6-7
# ::root	0	say-01
# ::edge	float-01	ARG0	lot	0.0	0.0.0	
# ::edge	recommend-01	ARG1	float-01	0.0.1	0.0	
# ::edge	say-01	ARG1	float-01	0	0.0	
# ::edge	say-01	manner	-	0	0.1	
(s / say-01 
      :ARG1 (f / float-01 
            :ARG0 (l / lot) 
            :ARG1-of (r / recommend-01)) 
      :manner (- / -))

# ::snt city speculation has also highlighted the interest abbey national which floated on the stock market earlier this year has displayed in expanding its range of products into fund management
# ::tok city speculation has also highlighted the interest abbey national which floated on the stock market earlier this year has displayed in expanding its range of products into fund management
# ::alignments 28-29|0.0.0.2.0 27-28|0.0.0.2 25-26|0.0.0.0.0 23-24|0.0.0.0 21-22|0.0.0 19-20|0.0.0.1 17-18|0.0.0.1.1 16-17|0.0.0.1.1.0.0 15-16|0.0.0.1.1.0 14-15|0.0.0.1.0.1 13-14|0.0.0.1.0.1.0 10-11|0.0.0.1.0 8-9|0.0.0.1.0.0 6-7|0.1 4-5|0 3-4|0.2 1-2|0.0 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:35.976
# ::node	0	highlight-01	4-5
# ::node	0.0	speculate-01	1-2
# ::node	0.0.0	expand-01	21-22
# ::node	0.0.0.0	range-01	23-24
# ::node	0.0.0.0.0	product	25-26
# ::node	0.0.0.1	display-01	19-20
# ::node	0.0.0.1.0	float-01	10-11
# ::node	0.0.0.1.0.0	nation	8-9
# ::node	0.0.0.1.0.1	market	14-15
# ::node	0.0.0.1.0.1.0	stock	13-14
# ::node	0.0.0.1.1	year	17-18
# ::node	0.0.0.1.1.0	early	15-16
# ::node	0.0.0.1.1.0.0	this	16-17
# ::node	0.0.0.2	fund-01	27-28
# ::node	0.0.0.2.0	manage-01	28-29
# ::node	0.0.1	city	0-1
# ::node	0.1	interest-01	6-7
# ::node	0.2	also	3-4
# ::root	0	highlight-01
# ::edge	display-01	ARG0	float-01	0.0.0.1	0.0.0.1.0	
# ::edge	display-01	ARG1	year	0.0.0.1	0.0.0.1.1	
# ::edge	display-01	ARG2	expand-01	0.0.0.1	0.0.0	
# ::edge	early	mod	this	0.0.0.1.1.0	0.0.0.1.1.0.0	
# ::edge	expand-01	ARG0	speculate-01	0.0.0	0.0	
# ::edge	expand-01	ARG1	range-01	0.0.0	0.0.0.0	
# ::edge	expand-01	ARG3	fund-01	0.0.0	0.0.0.2	
# ::edge	float-01	ARG0	nation	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	float-01	ARG2	market	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	highlight-01	ARG0	speculate-01	0	0.0	
# ::edge	highlight-01	ARG1	interest-01	0	0.1	
# ::edge	highlight-01	mod	also	0	0.2	
# ::edge	manage-01	ARG1	fund-01	0.0.0.2.0	0.0.0.2	
# ::edge	market	mod	stock	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	range-01	ARG1	product	0.0.0.0	0.0.0.0.0	
# ::edge	speculate-01	ARG1	city	0.0	0.0.1	
# ::edge	year	degree	early	0.0.0.1.1	0.0.0.1.1.0	
(h / highlight-01 
      :ARG0 (s2 / speculate-01 
            :ARG0-of (e / expand-01 
                  :ARG1 (r / range-01 
                        :ARG1 (p / product)) 
                  :ARG2-of (d / display-01 
                        :ARG0 (f2 / float-01 
                              :ARG0 (n / nation) 
                              :ARG2 (m2 / market 
                                    :mod (s / stock))) 
                        :ARG1 (y / year 
                              :degree (e2 / early 
                                    :mod (t / this)))) 
                  :ARG3 (f / fund-01 
                        :ARG1-of (m / manage-01))) 
            :ARG1 (c / city)) 
      :ARG1 (i / interest-01) 
      :mod (a / also))

# ::snt by now his essence is floating in the jet stream 112 miles above yugoslavia
# ::tok by now his essence is floating in the jet stream 112 miles above yugoslavia
# ::alignments 12-13|0.2 11-12|0.1.0+0.1 9-10|0.2.0.0 8-9|0.2.0 5-6|0 3-4|0.0 1-2|0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:36.001
# ::node	0	float-01	5-6
# ::node	0.0	essence	3-4
# ::node	0.1	distance-quantity	11-12
# ::node	0.1.0	mile	11-12
# ::node	0.2	above	12-13
# ::node	0.2.0	jet	8-9
# ::node	0.2.0.0	stream-02	9-10
# ::node	0.3	now	1-2
# ::root	0	float-01
# ::edge	above	op1	jet	0.2	0.2.0	
# ::edge	distance-quantity	unit	mile	0.1	0.1.0	
# ::edge	float-01	ARG0	essence	0	0.0	
# ::edge	float-01	ARG1	distance-quantity	0	0.1	
# ::edge	float-01	time	above	0	0.2	
# ::edge	float-01	time	now	0	0.3	
# ::edge	stream-02	ARG1	jet	0.2.0.0	0.2.0	
(f / float-01 
      :ARG0 (e / essence) 
      :ARG1 (d / distance-quantity 
            :unit (m / mile)) 
      :time (a / above 
            :op1 (j / jet 
                  :ARG1-of (s / stream-02))) 
      :time (n / now))

# ::snt i never go round by myself without seeing one because i hear feet scrabbling on the bark or i see bits of fir cone floating down
# ::tok i never go round by myself without seeing one because i hear feet scrabbling on the bark or i see bits of fir cone floating down
# ::alignments 25-26|0.0.0 24-25|0.0 23-24|0 20-21|0.1 19-20|0.1.0 18-19|0.1.0.0 17-18|0.1.0.0.0 16-17|0.1.0.0.0.0 12-13|0.1.0.1.0.0.0.0 11-12|0.1.0.1.0.0.0 10-11|0.1.0.1.0.0 9-10|0.1.0.1 7-8|0.1.0.1.0 3-4|0.1.0.1.0.1 0-1|0.1.0.1.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:36.619
# ::node	0	cone	23-24
# ::node	0.0	float-01	24-25
# ::node	0.0.0	down	25-26
# ::node	0.1	bit	20-21
# ::node	0.1.0	see-01	19-20
# ::node	0.1.0.0	i	18-19
# ::node	0.1.0.0.0	or	17-18
# ::node	0.1.0.0.0.0	bark-01	16-17
# ::node	0.1.0.1	cause-01	9-10
# ::node	0.1.0.1.0	see-01	7-8
# ::node	0.1.0.1.0.0	i	10-11
# ::node	0.1.0.1.0.0.0	hear-01	11-12
# ::node	0.1.0.1.0.0.0.0	foot	12-13
# ::node	0.1.0.1.0.1	round	3-4
# ::node	0.1.0.1.0.1.0	i	0-1
# ::root	0	cone
# ::edge	cause-01	ARG0	see-01	0.1.0.1	0.1.0	
# ::edge	cause-01	ARG1	see-01	0.1.0.1	0.1.0.1.0	
# ::edge	cone	quant	bit	0	0.1	
# ::edge	float-01	ARG1	cone	0.0	0	
# ::edge	float-01	direction	down	0.0	0.0.0	
# ::edge	hear-01	ARG0	i	0.1.0.1.0.0.0	0.1.0.1.0.0	
# ::edge	hear-01	ARG1	foot	0.1.0.1.0.0.0	0.1.0.1.0.0.0.0	
# ::edge	or	op1	bark-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	or	op2	i	0.1.0.0.0	0.1.0.0	
# ::edge	round	poss	i	0.1.0.1.0.1	0.1.0.1.0.1.0	
# ::edge	see-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	see-01	ARG0	i	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	see-01	ARG1	bit	0.1.0	0.1	
# ::edge	see-01	ARG1	round	0.1.0.1.0	0.1.0.1.0.1	
(c / cone 
      :ARG1-of (f / float-01 
            :direction (d / down)) 
      :quant (b / bit 
            :ARG1-of (s / see-01 
                  :ARG0 (i / i 
                        :op-of (o / or 
                              :op1 (b2 / bark-01))) 
                  :ARG0-of (c2 / cause-01 
                        :ARG1 (s2 / see-01 
                              :ARG0 (i2 / i 
                                    :ARG0-of (h / hear-01 
                                          :ARG1 (f2 / foot))) 
                              :ARG1 (r / round 
                                    :poss (i3 / i)))))))

# ::snt riberas treatment of the dramatic asymmetric shape of the saint floating above the ground makes an imposing and extraordinary composition
# ::tok riberas treatment of the dramatic asymmetric shape of the saint floating above the ground makes an imposing and extraordinary composition
# ::alignments 19-20|0 18-19|0.1.1 17-18|0.1 16-17|0.1.0 13-14|0.0.0.1 11-12|0.0.0 10-11|0.0.0.0 9-10|0.0.0.0.0 6-7|0.0.1 4-5|0.1.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:36.692
# ::node	0	compose-01	19-20
# ::node	0.0	treat-03	1-2
# ::node	0.0.0	above	11-12
# ::node	0.0.0.0	float-01	10-11
# ::node	0.0.0.0.0	saint	9-10
# ::node	0.0.0.1	ground	13-14
# ::node	0.0.1	shape-01	6-7
# ::node	0.1	and	17-18
# ::node	0.1.0	impose-01	16-17
# ::node	0.1.0.0	dramatic	4-5
# ::node	0.1.1	extraordinary	18-19
# ::root	0	compose-01
# ::edge	above	op1	ground	0.0.0	0.0.0.1	
# ::edge	and	op1	impose-01	0.1	0.1.0	
# ::edge	and	op2	extraordinary	0.1	0.1.1	
# ::edge	compose-01	ARG1	treat-03	0	0.0	
# ::edge	compose-01	ARG2	and	0	0.1	
# ::edge	float-01	ARG1	above	0.0.0.0	0.0.0	
# ::edge	float-01	degree	saint	0.0.0.0	0.0.0.0.0	
# ::edge	impose-01	ARG1	dramatic	0.1.0	0.1.0.0	
# ::edge	treat-03	ARG1	above	0.0	0.0.0	
# ::edge	treat-03	ARG2	shape-01	0.0	0.0.1	
(c / compose-01 
      :ARG1 (t / treat-03 
            :ARG1 (a2 / above 
                  :ARG1-of (f / float-01 
                        :degree (s / saint)) 
                  :op1 (g / ground)) 
            :ARG2 (s2 / shape-01)) 
      :ARG2 (a / and 
            :op1 (i / impose-01 
                  :ARG1 (d / dramatic)) 
            :op2 (e / extraordinary)))

# ::snt the 12 area distribution boards will be floated next autumn while the two large generating companies to emerge from the cegb national power and powergen are not due to be floated until the spring of 1991
# ::tok the 12 area distribution boards will be floated next autumn while the two large generating companies to emerge from the cegb national power and powergen are not due to be floated until the spring of 1991
# ::alignments 35-36|0.1.0+0.1 33-34|0.0.1.1 31-32|0.0.1.2 30-31|0.0.1 23-24|0.0.0.1 22-23|0.0.0.1.1 21-22|0.0.0.1.1.0 17-18|0.0.0 15-16|0.0 14-15|0 13-14|0.0.2 12-13|0.0.3 8-9|0.0.1.0 7-8|0.0.2.0 3-4|0.0.0.1.0 2-3|0.0.0.1.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:37.017
# ::node	0	generate-01	14-15
# ::node	0.0	company	15-16
# ::node	0.0.0	emerge-01	17-18
# ::node	0.0.0.0	12	1-2
# ::node	0.0.0.1	and	23-24
# ::node	0.0.0.1.0	distribute-01	3-4
# ::node	0.0.0.1.0.0	area	2-3
# ::node	0.0.0.1.1	power	22-23
# ::node	0.0.0.1.1.0	nation	21-22
# ::node	0.0.1	float-01	30-31
# ::node	0.0.1.0	next	8-9
# ::node	0.0.1.1	spring	33-34
# ::node	0.0.1.2	until	31-32
# ::node	0.0.2	large	13-14
# ::node	0.0.2.0	float-01	7-8
# ::node	0.0.3	2	12-13
# ::node	0.1	date-entity	35-36
# ::node	0.1.0	1991	35-36
# ::root	0	generate-01
# ::edge	and	op1	emerge-01	0.0.0.1	0.0.0	
# ::edge	and	op2	power	0.0.0.1	0.0.0.1.1	
# ::edge	company	mod	large	0.0	0.0.2	
# ::edge	company	quant	2	0.0	0.0.3	
# ::edge	date-entity	year	1991	0.1	0.1.0	
# ::edge	distribute-01	ARG0	and	0.0.0.1.0	0.0.0.1	
# ::edge	distribute-01	ARG1	area	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	emerge-01	ARG0	company	0.0.0	0.0	
# ::edge	emerge-01	ARG1	12	0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	large	0.0.2.0	0.0.2	
# ::edge	float-01	ARG0	next	0.0.1	0.0.1.0	
# ::edge	float-01	ARG1	company	0.0.1	0.0	
# ::edge	float-01	location	spring	0.0.1	0.0.1.1	
# ::edge	float-01	time	until	0.0.1	0.0.1.2	
# ::edge	generate-01	ARG0	company	0	0.0	
# ::edge	generate-01	ARG1	date-entity	0	0.1	
# ::edge	power	mod	nation	0.0.0.1.1	0.0.0.1.1.0	
(g / generate-01 
      :ARG0 (c / company 
            :ARG0-of (e / emerge-01 
                  :ARG1 12 
                  :op-of (a / and 
                        :ARG0-of (d2 / distribute-01 
                              :ARG1 (a2 / area)) 
                        :op1 (p / power 
                              :mod (n / nation)))) 
            :ARG1-of (f / float-01 
                  :ARG0 (n2 / next) 
                  :location (s / spring) 
                  :time (u / until)) 
            :mod (l / large 
                  :ARG0-of (f2 / float-01)) 
            :quant 2) 
      :ARG1 (d / date-entity 
            :year 1991))

# ::snt he floated there sick at heart looking up at the two kriegsmarine ratings in sidecaps and peajackets who looked down at him
# ::tok he floated there sick at heart looking up at the two kriegsmarine ratings in sidecaps and peajackets who looked down at him
# ::alignments 19-20|0.0.1 18-19|0.0 15-16|0 10-11|0.1.0.0 5-6|0.0.0 3-4|0.1.1 1-2|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:37.089
# ::node	0	and	15-16
# ::node	0.0	look-01	18-19
# ::node	0.0.0	heart	5-6
# ::node	0.0.1	down	19-20
# ::node	0.1	float-01	1-2
# ::node	0.1.0	he	0-1
# ::node	0.1.0.0	2	10-11
# ::node	0.1.1	sick	3-4
# ::root	0	and
# ::edge	2	poss	he	0.1.0.0	0.1.0	
# ::edge	and	op1	float-01	0	0.1	
# ::edge	float-01	ARG0	he	0.1	0.1.0	
# ::edge	float-01	ARG1	sick	0.1	0.1.1	
# ::edge	look-01	ARG0	and	0.0	0	
# ::edge	look-01	ARG1	heart	0.0	0.0.0	
# ::edge	look-01	direction	down	0.0	0.0.1	
(a / and 
      :ARG0-of (l / look-01 
            :ARG1 (h / heart) 
            :direction (d / down)) 
      :op1 (f / float-01 
            :ARG0 (h2 / he 
                  :poss-of 2) 
            :ARG1 (s / sick)))

# ::snt wittily warner uses this spectacle to float another notion too
# ::tok wittily warner uses this spectacle to float another notion too
# ::alignments 9-10|0.1.1 8-9|0.1.0 7-8|0.1.0.0 6-7|0.1 4-5|0.0 3-4|0.0.0 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:37.137
# ::node	0	use-01	2-3
# ::node	0.0	spectacle	4-5
# ::node	0.0.0	this	3-4
# ::node	0.1	float-01	6-7
# ::node	0.1.0	notion	8-9
# ::node	0.1.0.0	another	7-8
# ::node	0.1.1	too	9-10
# ::root	0	use-01
# ::edge	float-01	ARG1	notion	0.1	0.1.0	
# ::edge	float-01	mod	too	0.1	0.1.1	
# ::edge	notion	mod	another	0.1.0	0.1.0.0	
# ::edge	spectacle	mod	this	0.0	0.0.0	
# ::edge	use-01	ARG1	spectacle	0	0.0	
# ::edge	use-01	ARG2	float-01	0	0.1	
(u / use-01 
      :ARG1 (s / spectacle 
            :mod (t2 / this)) 
      :ARG2 (f / float-01 
            :ARG1 (n / notion 
                  :mod (a / another)) 
            :mod (t / too)))

# ::snt they can then float the newly created company on the stock exchange by issuing shares as in any other privatisation
# ::tok they can then float the newly created company on the stock exchange by issuing shares as in any other privatisation
# ::alignments 18-19|0.0.1.0.0.0 17-18|0.0.1.0.0 14-15|0.0.0.0.0 13-14|0.0.0.0 11-12|0.0.0.0.1 10-11|0.0.0.0.1.0 7-8|0.0.1 6-7|0.0.1.0 3-4|0.0 2-3|0.0.2 1-2|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:37.224
# ::node	0	possible	1-2
# ::node	0.0	float-01	3-4
# ::node	0.0.0	they	0-1
# ::node	0.0.0.0	issue-01	13-14
# ::node	0.0.0.0.0	share	14-15
# ::node	0.0.0.0.1	exchange-01	11-12
# ::node	0.0.0.0.1.0	stock	10-11
# ::node	0.0.1	company	7-8
# ::node	0.0.1.0	create-01	6-7
# ::node	0.0.1.0.0	any	17-18
# ::node	0.0.1.0.0.0	other	18-19
# ::node	0.0.2	then	2-3
# ::root	0	possible
# ::edge	create-01	ARG0	any	0.0.1.0	0.0.1.0.0	
# ::edge	create-01	ARG1	company	0.0.1.0	0.0.1	
# ::edge	exchange-01	ARG1	stock	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	exchange-01	ARG3	issue-01	0.0.0.0.1	0.0.0.0	
# ::edge	float-01	ARG0	they	0.0	0.0.0	
# ::edge	float-01	ARG1	company	0.0	0.0.1	
# ::edge	float-01	time	then	0.0	0.0.2	
# ::edge	issue-01	ARG0	they	0.0.0.0	0.0.0	
# ::edge	issue-01	ARG1	share	0.0.0.0	0.0.0.0.0	
# ::edge	other	mod	any	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	possible	domain	float-01	0	0.0	
(p / possible 
      :domain (f / float-01 
            :ARG0 (t2 / they 
                  :ARG0-of (i / issue-01 
                        :ARG1 (s / share) 
                        :ARG3-of (e / exchange-01 
                              :ARG1 (s2 / stock)))) 
            :ARG1 (c / company 
                  :ARG1-of (c2 / create-01 
                        :ARG0 (a / any 
                              :mod-of (o / other)))) 
            :time (t / then)))

# ::snt us drug police announced they plan to train kgb agents to snare drug traffickers and and a plan was floated to cut back on flights of its famous nuclear war command planes known as looking glass
# ::tok us drug police announced they plan to train kgb agents to snare drug traffickers and and a plan was floated to cut back on flights of its famous nuclear war command planes known as looking glass
# ::alignments 35-36|0.1.0.0.0.2.1 32-33|0.1.0.0 31-32|0.1.0.0.0 30-31|0.1.0.0.0.2 29-30|0.1.0.0.0.2.0 28-29|0.1.0.0.0.1 27-28|0.1.0.0.0.0 22-23|0.1.2.2.0.0 19-20|0.1.2.2 17-18|0.1.2.2.0 15-16|0.1.2.2.1 14-15|0.1.2 13-14|0.1.2.1.0+0.1.2.1 12-13|0.1.2.1.0.0 9-10|0.1.2.0 7-8|0.1.1 5-6|0.1 4-5|0.1.0 3-4|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:37.696
# ::node	0	announce-01	3-4
# ::node	0.0	police	2-3
# ::node	0.0.0	drug	1-2
# ::node	0.1	plan-01	5-6
# ::node	0.1.0	they	4-5
# ::node	0.1.0.0	know-01	32-33
# ::node	0.1.0.0.0	plane	31-32
# ::node	0.1.0.0.0.0	famous	27-28
# ::node	0.1.0.0.0.1	nucleus	28-29
# ::node	0.1.0.0.0.2	command-02	30-31
# ::node	0.1.0.0.0.2.0	war	29-30
# ::node	0.1.0.0.0.2.1	glass	35-36
# ::node	0.1.1	train	7-8
# ::node	0.1.2	and	14-15
# ::node	0.1.2.0	agent	9-10
# ::node	0.1.2.1	person	13-14
# ::node	0.1.2.1.0	traffic-00	13-14
# ::node	0.1.2.1.0.0	drug	12-13
# ::node	0.1.2.2	float-01	19-20
# ::node	0.1.2.2.0	plan-01	17-18
# ::node	0.1.2.2.0.0	back	22-23
# ::node	0.1.2.2.1	and	15-16
# ::root	0	announce-01
# ::edge	and	op1	float-01	0.1.2.2.1	0.1.2.2	
# ::edge	and	op1	plan-01	0.1.2	0.1	
# ::edge	and	op2	agent	0.1.2	0.1.2.0	
# ::edge	and	op3	person	0.1.2	0.1.2.1	
# ::edge	and	op4	float-01	0.1.2	0.1.2.2	
# ::edge	announce-01	ARG0	police	0	0.0	
# ::edge	announce-01	ARG1	plan-01	0	0.1	
# ::edge	command-02	ARG0	war	0.1.0.0.0.2	0.1.0.0.0.2.0	
# ::edge	command-02	ARG1	glass	0.1.0.0.0.2	0.1.0.0.0.2.1	
# ::edge	float-01	ARG1	plan-01	0.1.2.2	0.1.2.2.0	
# ::edge	know-01	ARG0	they	0.1.0.0	0.1.0	
# ::edge	know-01	ARG1	plane	0.1.0.0	0.1.0.0.0	
# ::edge	plan-01	ARG0	they	0.1	0.1.0	
# ::edge	plan-01	ARG1	back	0.1.2.2.0	0.1.2.2.0.0	
# ::edge	plan-01	ARG1	train	0.1	0.1.1	
# ::edge	plane	mod	famous	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	plane	mod	nucleus	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	plane	purpose	command-02	0.1.0.0.0	0.1.0.0.0.2	
# ::edge	police	mod	drug	0.0	0.0.0	
# ::edge	traffic-00	ARG0	person	0.1.2.1.0	0.1.2.1	
# ::edge	traffic-00	ARG1	drug	0.1.2.1.0	0.1.2.1.0.0	
(a4 / announce-01 
      :ARG0 (p5 / police 
            :mod (d2 / drug)) 
      :ARG1 (p4 / plan-01 
            :ARG0 (t3 / they 
                  :ARG0-of (k / know-01 
                        :ARG1 (p / plane 
                              :mod (f / famous) 
                              :mod (n / nucleus) 
                              :purpose (c / command-02 
                                    :ARG0 (w / war) 
                                    :ARG1 (g / glass))))) 
            :ARG1 (t2 / train) 
            :op-of (a2 / and 
                  :op1 (a3 / agent) 
                  :op2 (p3 / person 
                        :ARG0-of (t / traffic-00 
                              :ARG1 (d / drug))) 
                  :op3 (f2 / float-01 
                        :ARG1 (p2 / plan-01 
                              :ARG1 (b / back)) 
                        :op-of (a / and)))))

# ::snt we ate quails eggs drank star tiger swam in the warm sea floating from sun into shade and back again under trailing vines
# ::tok we ate quails eggs drank star tiger swam in the warm sea floating from sun into shade and back again under trailing vines
# ::alignments 19-20|0.2.0 18-19|0.2 17-18|0 16-17|0.1.1 14-15|0.1.2 12-13|0.1 11-12|0.1.0 10-11|0.1.0.0 6-7|0.1.1.0 5-6|0.1.1.0.0 3-4|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:37.790
# ::node	0	and	17-18
# ::node	0.0	egg	3-4
# ::node	0.0.0	we	0-1
# ::node	0.1	float-01	12-13
# ::node	0.1.0	sea	11-12
# ::node	0.1.0.0	warm	10-11
# ::node	0.1.1	shade	16-17
# ::node	0.1.1.0	tiger	6-7
# ::node	0.1.1.0.0	star	5-6
# ::node	0.1.2	sun	14-15
# ::node	0.2	back	18-19
# ::node	0.2.0	again	19-20
# ::root	0	and
# ::edge	again	mod	back	0.2.0	0.2	
# ::edge	and	op1	float-01	0	0.1	
# ::edge	and	op2	back	0	0.2	
# ::edge	egg	domain	we	0.0	0.0.0	
# ::edge	egg	location	and	0.0	0	
# ::edge	float-01	ARG1	sea	0.1	0.1.0	
# ::edge	float-01	beneficiary	shade	0.1	0.1.1	
# ::edge	float-01	location	sun	0.1	0.1.2	
# ::edge	sea	mod	warm	0.1.0	0.1.0.0	
# ::edge	shade	mod	tiger	0.1.1	0.1.1.0	
# ::edge	tiger	mod	star	0.1.1.0	0.1.1.0.0	
(a2 / and 
      :location-of (e / egg 
            :domain (w2 / we)) 
      :op1 (f / float-01 
            :ARG1 (s3 / sea 
                  :mod (w / warm)) 
            :beneficiary (s / shade 
                  :mod (t / tiger 
                        :mod (s4 / star))) 
            :location (s2 / sun)) 
      :op2 (b / back 
            :mod-of (a / again)))

# ::snt in the next few months he should garner the fruits of his 100 million purchase of the mirror group when it is floated on the market for 500 million or more
# ::tok in the next few months he should garner the fruits of his 100 million purchase of the mirror group when it is floated on the market for 500 million or more
# ::alignments 29-30|0.2.0.2 27-28|0.0 25-26|0.2.0.1 22-23|0.2.0 20-21|0.2.0.0 18-19|0.2.0.3 17-18|0.2.0.3.1 14-15|0.2.0.3.0 12-13|0.2.0.3.0.1 9-10|0.1 6-7|0 5-6|0.2 4-5|0.2.0.3.0.0.0.0+0.2.0.3.0.0.0 3-4|0.2.0.3.0.0 2-3|0.2.0.3.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:38.344
# ::node	0	recommend-01	6-7
# ::node	0.0	500	27-28
# ::node	0.1	fruit	9-10
# ::node	0.2	he	5-6
# ::node	0.2.0	float-01	22-23
# ::node	0.2.0.0	it	20-21
# ::node	0.2.0.1	market	25-26
# ::node	0.2.0.2	or	29-30
# ::node	0.2.0.3	group	18-19
# ::node	0.2.0.3.0	purchase-01	14-15
# ::node	0.2.0.3.0.0	few	3-4
# ::node	0.2.0.3.0.0.0	temporal-quantity	4-5
# ::node	0.2.0.3.0.0.0.0	month	4-5
# ::node	0.2.0.3.0.0.0.0.0	next	2-3
# ::node	0.2.0.3.0.1	100	12-13
# ::node	0.2.0.3.1	mirror	17-18
# ::root	0	recommend-01
# ::edge	few	op1	temporal-quantity	0.2.0.3.0.0	0.2.0.3.0.0.0	
# ::edge	float-01	ARG0	he	0.2.0	0.2	
# ::edge	float-01	ARG1	it	0.2.0	0.2.0.0	
# ::edge	float-01	ARG2	market	0.2.0	0.2.0.1	
# ::edge	float-01	duration	or	0.2.0	0.2.0.2	
# ::edge	float-01	time	group	0.2.0	0.2.0.3	
# ::edge	group	mod	mirror	0.2.0.3	0.2.0.3.1	
# ::edge	month	mod	next	0.2.0.3.0.0.0.0	0.2.0.3.0.0.0.0.0	
# ::edge	purchase-01	ARG0	few	0.2.0.3.0	0.2.0.3.0.0	
# ::edge	purchase-01	ARG1	group	0.2.0.3.0	0.2.0.3	
# ::edge	purchase-01	ARG2	100	0.2.0.3.0	0.2.0.3.0.1	
# ::edge	recommend-01	ARG0	500	0	0.0	
# ::edge	recommend-01	ARG1	fruit	0	0.1	
# ::edge	recommend-01	ARG2	he	0	0.2	
# ::edge	temporal-quantity	unit	month	0.2.0.3.0.0.0	0.2.0.3.0.0.0.0	
(r / recommend-01 
      :ARG0 500 
      :ARG1 (f2 / fruit) 
      :ARG2 (h / he 
            :ARG0-of (f / float-01 
                  :ARG1 (i / it) 
                  :ARG2 (m / market) 
                  :duration (o / or) 
                  :time (g / group 
                        :ARG1-of (p / purchase-01 
                              :ARG0 (f3 / few 
                                    :op1 (t / temporal-quantity 
                                          :unit (m3 / month 
                                                :mod (n / next)))) 
                              :ARG2 100) 
                        :mod (m2 / mirror)))))

# ::snt north grimaced as judge gesell went on to abort his political ambitions before they had even begun banning him from holding any public office and puncturing the trial balloon launched by the right to float him as a possible republican candidate for congress
# ::tok north grimaced as judge gesell went on to abort his political ambitions before they had even begun banning him from holding any public office and puncturing the trial balloon launched by the right to float him as a possible republican candidate for congress
# ::alignments 42-43|0.0.1.0.0+0.0.1.0+0.0.1 40-41|0.0 39-40|0.0.0.0.0.0+0.0.0.0.0+0.0.0.0 38-39|0 34-35|0.0.0 29-30|0.0.0.1 27-28|0.0.0.1.0 24-25|0.0.0.1.1 23-24|0.0.0.1.1.0.1.0 22-23|0.0.0.1.1.0.1.0.0 21-22|0.0.0.1.1.0.1.0.1 20-21|0.0.0.1.1.0.1 17-18|0.0.0.1.1.0 16-17|0.0.0.1.1.0.0.0 13-14|0.0.0.1.1.0.0 12-13|0.0.0.1.1.0.0.0.1 11-12|0.0.0.1.1.0.0.0.0 10-11|0.0.0.1.1.0.0.0.0.1 3-4|0.0.0.1.1.0.0.0.0.0 0-1|0.0.0.1.1.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:40.245
# ::node	0	possible	38-39
# ::node	0.0	candidate	40-41
# ::node	0.0.0	float-01	34-35
# ::node	0.0.0.0	political-party	39-40
# ::node	0.0.0.0.0	name	39-40
# ::node	0.0.0.0.0.0	"Republican"	39-40
# ::node	0.0.0.1	launch-01	29-30
# ::node	0.0.0.1.0	trial	27-28
# ::node	0.0.0.1.1	and	24-25
# ::node	0.0.0.1.1.0	ban-01	17-18
# ::node	0.0.0.1.1.0.0	they	13-14
# ::node	0.0.0.1.1.0.0.0	begin-01	16-17
# ::node	0.0.0.1.1.0.0.0.0	ambition	11-12
# ::node	0.0.0.1.1.0.0.0.0.0	judge-01	3-4
# ::node	0.0.0.1.1.0.0.0.0.0.0	north	0-1
# ::node	0.0.0.1.1.0.0.0.0.1	politics	10-11
# ::node	0.0.0.1.1.0.0.0.1	before	12-13
# ::node	0.0.0.1.1.0.1	hold-01	20-21
# ::node	0.0.0.1.1.0.1.0	office	23-24
# ::node	0.0.0.1.1.0.1.0.0	public	22-23
# ::node	0.0.0.1.1.0.1.0.1	any	21-22
# ::node	0.0.1	government-organization	42-43
# ::node	0.0.1.0	name	42-43
# ::node	0.0.1.0.0	"Congress"	42-43
# ::root	0	possible
(p2 / possible 
      :mod-of (c / candidate 
            :ARG2-of (f / float-01 
                  :ARG1 (p / political-party 
                        :name (n2 / name 
                              :op1 "Republican")) 
                  :purpose-of (l / launch-01 
                        :ARG0 (t / trial) 
                        :op-of (a / and 
                              :op1 (b / ban-01 
                                    :ARG0 (t2 / they 
                                          :ARG0-of (b2 / begin-01 
                                                :ARG1 (a3 / ambition 
                                                      :ARG1-of (j / judge-01 
                                                            :ARG0 (n3 / north)) 
                                                      :mod (p4 / politics)) 
                                                :op-of (b3 / before))) 
                                    :ARG1 (h / hold-01 
                                          :ARG1 (o / office 
                                                :mod (p3 / public) 
                                                :mod (a2 / any))))))) 
            :mod (g / government-organization 
                  :name (n / name 
                        :op1 "Congress"))))

# ::snt i remember the sequence well the bit immediately after all that is grand and beautiful in the foaming cataract the glassy lake and the floating mist
# ::tok i remember the sequence well the bit immediately after all that is grand and beautiful in the foaming cataract the glassy lake and the floating mist
# ::alignments 24-25|0.2 22-23|0.2.0.1 21-22|0.2.0 17-18|0.2.0.0 14-15|0.1 13-14|0 12-13|0.0 9-10|0.2.1.0.0.2.1 8-9|0.2.1.0.0.2 7-8|0.2.1.0.0.2.0 6-7|0.2.1.0.0.0 4-5|0.2.1.0.0.1 3-4|0.2.1 1-2|0.2.1.0.0 0-1|0.2.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:40.437
# ::node	0	and	13-14
# ::node	0.0	grand	12-13
# ::node	0.1	beautiful	14-15
# ::node	0.2	float-01	24-25
# ::node	0.2.0	lake	21-22
# ::node	0.2.0.0	foam-01	17-18
# ::node	0.2.0.1	and	22-23
# ::node	0.2.1	sequence-00	3-4
# ::node	0.2.1.0	i	0-1
# ::node	0.2.1.0.0	remember-01	1-2
# ::node	0.2.1.0.0.0	bit	6-7
# ::node	0.2.1.0.0.1	well	4-5
# ::node	0.2.1.0.0.2	after	8-9
# ::node	0.2.1.0.0.2.0	immediate	7-8
# ::node	0.2.1.0.0.2.1	all	9-10
# ::root	0	and
# ::edge	after	mod	immediate	0.2.1.0.0.2	0.2.1.0.0.2.0	
# ::edge	after	op1	all	0.2.1.0.0.2	0.2.1.0.0.2.1	
# ::edge	and	op1	grand	0	0.0	
# ::edge	and	op1	lake	0.2.0.1	0.2.0	
# ::edge	and	op2	beautiful	0	0.1	
# ::edge	and	op3	float-01	0	0.2	
# ::edge	float-01	ARG1	lake	0.2	0.2.0	
# ::edge	foam-01	ARG1	lake	0.2.0.0	0.2.0	
# ::edge	remember-01	ARG0	i	0.2.1.0.0	0.2.1.0	
# ::edge	remember-01	degree	bit	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	remember-01	mod	well	0.2.1.0.0	0.2.1.0.0.1	
# ::edge	remember-01	time	after	0.2.1.0.0	0.2.1.0.0.2	
# ::edge	sequence-00	ARG0	i	0.2.1	0.2.1.0	
# ::edge	sequence-00	ARG1	float-01	0.2.1	0.2	
(a2 / and 
      :op1 (g / grand) 
      :op2 (b / beautiful) 
      :op3 (f / float-01 
            :ARG1 (l / lake 
                  :ARG1-of (f2 / foam-01) 
                  :op-of (a / and)) 
            :ARG1-of (s / sequence-00 
                  :ARG0 (i2 / i 
                        :ARG0-of (r / remember-01 
                              :degree (b2 / bit) 
                              :mod (w / well) 
                              :time (a4 / after 
                                    :mod (i / immediate) 
                                    :op1 (a3 / all)))))))

# ::snt and teaches him all that is grand and beautiful in the foaming cataract the glassy lake and the floating mist
# ::tok and teaches him all that is grand and beautiful in the foaming cataract the glassy lake and the floating mist
# ::alignments 18-19|0.0.0.1 16-17|0.0.0.1.0 15-16|0.0.0.1.0.0 11-12|0.0.0.1.0.0.0 8-9|0.1 7-8|0 6-7|0.0 3-4|0.0.0.1.0.0.0.0 1-2|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:40.497
# ::node	0	and	7-8
# ::node	0.0	grand	6-7
# ::node	0.0.0	teach-01	1-2
# ::node	0.0.0.0	and	0-1
# ::node	0.0.0.1	float-01	18-19
# ::node	0.0.0.1.0	and	16-17
# ::node	0.0.0.1.0.0	lake	15-16
# ::node	0.0.0.1.0.0.0	foam-01	11-12
# ::node	0.0.0.1.0.0.0.0	all	3-4
# ::node	0.1	beautiful	8-9
# ::root	0	and
# ::edge	and	op1	grand	0	0.0	
# ::edge	and	op1	lake	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	and	op2	beautiful	0	0.1	
# ::edge	and	op2	float-01	0.0.0.1.0	0.0.0.1	
# ::edge	float-01	ARG1	teach-01	0.0.0.1	0.0.0	
# ::edge	foam-01	ARG0	all	0.0.0.1.0.0.0	0.0.0.1.0.0.0.0	
# ::edge	foam-01	ARG1	lake	0.0.0.1.0.0.0	0.0.0.1.0.0	
# ::edge	teach-01	ARG0	and	0.0.0	0.0.0.0	
# ::edge	teach-01	ARG1	grand	0.0.0	0.0	
(a2 / and 
      :op1 (g / grand 
            :ARG1-of (t / teach-01 
                  :ARG0 (a4 / and) 
                  :ARG1-of (f / float-01 
                        :op-of (a / and 
                              :op1 (l / lake 
                                    :ARG1-of (f2 / foam-01 
                                          :ARG0 (a3 / all))))))) 
      :op2 (b / beautiful))

# ::snt the governments efforts to ensure that all 10 water authorities are successfully floated on the stock exchange in december are becoming more than a little disingenuous
# ::tok the governments efforts to ensure that all 10 water authorities are successfully floated on the stock exchange in december are becoming more than a little disingenuous
# ::alignments 24-25|0.2.2.0 20-21|0.2.2.1.0 18-19|0.0.0+0.0 16-17|0 15-16|0.1 12-13|0.2 11-12|0.2.1 9-10|0.2.0 8-9|0.2.0.0 7-8|0.2.2.1.0.0 6-7|0.2.0.1 4-5|0.2.2 2-3|0.2.2.1 1-2|0.2.2.1.1.0+0.2.2.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:40.804
# ::node	0	exchange-01	16-17
# ::node	0.0	date-entity	18-19
# ::node	0.0.0	12	18-19
# ::node	0.1	stock	15-16
# ::node	0.2	float-01	12-13
# ::node	0.2.0	authority	9-10
# ::node	0.2.0.0	water	8-9
# ::node	0.2.0.1	all	6-7
# ::node	0.2.1	succeed-01	11-12
# ::node	0.2.2	ensure-01	4-5
# ::node	0.2.2.0	little	24-25
# ::node	0.2.2.1	effort	2-3
# ::node	0.2.2.1.0	become-01	20-21
# ::node	0.2.2.1.0.0	10	7-8
# ::node	0.2.2.1.1	government-organization	1-2
# ::node	0.2.2.1.1.0	govern-01	1-2
# ::root	0	exchange-01
# ::edge	authority	mod	all	0.2.0	0.2.0.1	
# ::edge	authority	mod	water	0.2.0	0.2.0.0	
# ::edge	become-01	ARG0	10	0.2.2.1.0	0.2.2.1.0.0	
# ::edge	become-01	ARG1	effort	0.2.2.1.0	0.2.2.1	
# ::edge	date-entity	month	12	0.0	0.0.0	
# ::edge	effort	poss	government-organization	0.2.2.1	0.2.2.1.1	
# ::edge	effort	purpose	ensure-01	0.2.2.1	0.2.2	
# ::edge	ensure-01	ARG0	little	0.2.2	0.2.2.0	
# ::edge	ensure-01	ARG1	float-01	0.2.2	0.2	
# ::edge	exchange-01	ARG0	date-entity	0	0.0	
# ::edge	exchange-01	ARG1	stock	0	0.1	
# ::edge	float-01	ARG1	authority	0.2	0.2.0	
# ::edge	float-01	ARG2	exchange-01	0.2	0	
# ::edge	govern-01	ARG0	government-organization	0.2.2.1.1.0	0.2.2.1.1	
# ::edge	succeed-01	ARG1	float-01	0.2.1	0.2	
(e / exchange-01 
      :ARG0 (d / date-entity 
            :month 12) 
      :ARG1 (s / stock) 
      :ARG2-of (f / float-01 
            :ARG1 (a / authority 
                  :mod (w / water) 
                  :mod (a2 / all)) 
            :ARG1-of (s2 / succeed-01) 
            :ARG1-of (e2 / ensure-01 
                  :ARG0 (l / little) 
                  :purpose-of (e3 / effort 
                        :ARG1-of (b / become-01 
                              :ARG0 10) 
                        :poss (g / government-organization 
                              :ARG0-of (g2 / govern-01))))))

# ::snt she was wearing something pink and delicate that floated around her body when she moved
# ::tok she was wearing something pink and delicate that floated around her body when she moved
# ::alignments 14-15|0 13-14|0.0 11-12|0.1.1 9-10|0.1.1.0 8-9|0.1 6-7|0.1.0.0.0.1 5-6|0.1.0.0.0 4-5|0.1.0.0 3-4|0.1.0 2-3|0.1.0.0.0.0 0-1|0.1.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:41.122
# ::node	0	move-01	14-15
# ::node	0.0	she	13-14
# ::node	0.1	float-01	8-9
# ::node	0.1.0	something	3-4
# ::node	0.1.0.0	pink	4-5
# ::node	0.1.0.0.0	and	5-6
# ::node	0.1.0.0.0.0	wear-01	2-3
# ::node	0.1.0.0.0.0.0	she	0-1
# ::node	0.1.0.0.0.1	delicate	6-7
# ::node	0.1.1	body	11-12
# ::node	0.1.1.0	around	9-10
# ::root	0	move-01
# ::edge	and	op1	pink	0.1.0.0.0	0.1.0.0	
# ::edge	and	op2	delicate	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	around	op1	body	0.1.1.0	0.1.1	
# ::edge	float-01	ARG0	something	0.1	0.1.0	
# ::edge	float-01	ARG3	body	0.1	0.1.1	
# ::edge	float-01	condition	move-01	0.1	0	
# ::edge	move-01	ARG0	she	0	0.0	
# ::edge	something	mod	pink	0.1.0	0.1.0.0	
# ::edge	wear-01	ARG0	she	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	wear-01	ARG1	and	0.1.0.0.0.0	0.1.0.0.0	
(m / move-01 
      :ARG0 (s / she) 
      :condition-of (f / float-01 
            :ARG0 (s2 / something 
                  :mod (p / pink 
                        :op-of (a2 / and 
                              :ARG1-of (w / wear-01 
                                    :ARG0 (s3 / she)) 
                              :op1 (d / delicate)))) 
            :ARG3 (b / body 
                  :op-of (a / around))))

# ::snt his second an artist of the floating world was shortlisted for the booker prize and won the whitbread book of the year award for 1986
# ::tok his second an artist of the floating world was shortlisted for the booker prize and won the whitbread book of the year award for 1986
# ::alignments 24-25|0.0.2.0+0.0.2 22-23|0.0.0.0 21-22|0.0.0.0.0 18-19|0.0.0 15-16|0.0 14-15|0 13-14|0.1 7-8|0.0.1 6-7|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:41.330
# ::node	0	and	14-15
# ::node	0.0	win-01	15-16
# ::node	0.0.0	book	18-19
# ::node	0.0.0.0	award-01	22-23
# ::node	0.0.0.0.0	year	21-22
# ::node	0.0.1	world	7-8
# ::node	0.0.1.0	float-01	6-7
# ::node	0.0.2	date-entity	24-25
# ::node	0.0.2.0	1986	24-25
# ::node	0.1	prize-01	13-14
# ::root	0	and
# ::edge	and	op1	prize-01	0	0.1	
# ::edge	award-01	ARG1	year	0.0.0.0	0.0.0.0.0	
# ::edge	book	topic	award-01	0.0.0	0.0.0.0	
# ::edge	date-entity	year	1986	0.0.2	0.0.2.0	
# ::edge	float-01	ARG1	world	0.0.1.0	0.0.1	
# ::edge	win-01	ARG0	and	0.0	0	
# ::edge	win-01	ARG1	book	0.0	0.0.0	
# ::edge	win-01	ARG2	world	0.0	0.0.1	
# ::edge	win-01	time	date-entity	0.0	0.0.2	
(a2 / and 
      :ARG0-of (w / win-01 
            :ARG1 (b / book 
                  :topic (a / award-01 
                        :ARG1 (y / year))) 
            :ARG2 (w2 / world 
                  :ARG1-of (f / float-01)) 
            :time (d / date-entity 
                  :year 1986)) 
      :op1 (p / prize-01))

# ::snt a quarter of its price when floated on the stock market three years ago
# ::tok a quarter of its price when floated on the stock market three years ago
# ::alignments 12-13|0.0.0.0.0.0.0.0+0.0.0.0.0.0.0 11-12|0.0.0.0.0.0 10-11|0.0 9-10|0 6-7|0.0.0 4-5|0.0.0.0.0+0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:41.356
# ::node	0	stock	9-10
# ::node	0.0	market	10-11
# ::node	0.0.0	float-01	6-7
# ::node	0.0.0.0	thing	4-5
# ::node	0.0.0.0.0	price-01	4-5
# ::node	0.0.0.0.0.0	3	11-12
# ::node	0.0.0.0.0.0.0	temporal-quantity	12-13
# ::node	0.0.0.0.0.0.0.0	year	12-13
# ::root	0	stock
(s / stock 
      :mod-of (m / market 
            :ARG2-of (f / float-01 
                  :ARG1 (t2 / thing 
                        :ARG2-of (p / price-01 
                              :ARG1 (3 / 3 
                                    :quant-of (t / temporal-quantity 
                                          :unit (y / year))))))))

# ::snt behind it a pillow floated gently to a halt
# ::tok behind it a pillow floated gently to a halt
# ::alignments 8-9|0.0 4-5|0 1-2|0.1.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:41.375
# ::node	0	float-01	4-5
# ::node	0.0	halt-01	8-9
# ::node	0.1	behind	0-1
# ::node	0.1.0	it	1-2
# ::root	0	float-01
# ::edge	behind	op1	it	0.1	0.1.0	
# ::edge	float-01	ARG2	halt-01	0	0.0	
# ::edge	float-01	time	behind	0	0.1	
(f / float-01 
      :ARG2 (h / halt-01) 
      :time (b / behind 
            :op1 (i / it)))

# ::snt one of the five or six terraced houses with a tiled hallway and a stainedglass fanlight over the door that shone ruby or blue or green floating patterns on the floor depending on the position of the sun
# ::tok one of the five or six terraced houses with a tiled hallway and a stainedglass fanlight over the door that shone ruby or blue or green floating patterns on the floor depending on the position of the sun
# ::alignments 37-38|0.0.0.1.0 34-35|0.0.0.1 31-32|0.0.0 30-31|0.0.3.1 27-28|0.0.3 26-27|0.0.3.2 25-26|0 24-25|0.0 23-24|0.0.2 22-23|0.0.1 18-19|0.0.3.0 12-13|0.0.0.0 11-12|0.0.0.0.0 7-8|0.0.0.0.1 5-6|0.0.0.2.0 4-5|0.0.0.2 3-4|0.0.3.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:41.823
# ::node	0	green	25-26
# ::node	0.0	or	24-25
# ::node	0.0.0	depend-01	31-32
# ::node	0.0.0.0	and	12-13
# ::node	0.0.0.0.0	hallway	11-12
# ::node	0.0.0.0.1	house	7-8
# ::node	0.0.0.1	position	34-35
# ::node	0.0.0.1.0	sun	37-38
# ::node	0.0.0.2	or	4-5
# ::node	0.0.0.2.0	6	5-6
# ::node	0.0.1	or	22-23
# ::node	0.0.2	blue	23-24
# ::node	0.0.3	pattern-01	27-28
# ::node	0.0.3.0	door	18-19
# ::node	0.0.3.1	floor	30-31
# ::node	0.0.3.2	float-01	26-27
# ::node	0.0.3.2.0	5	3-4
# ::root	0	green
(g / green 
      :op-of (o / or 
            :ARG1-of (d / depend-01 
                  :ARG0 (a / and 
                        :op1 (h / hallway) 
                        :source-of (h2 / house)) 
                  :ARG2 (p / position 
                        :poss (s / sun)) 
                  :op-of (o3 / or 
                        :op1 6)) 
            :op-of (o2 / or) 
            :op1 (b / blue) 
            :op2 (p2 / pattern-01 
                  :ARG0 (d2 / door) 
                  :ARG1 (f / floor) 
                  :ARG1-of (f2 / float-01 
                        :ARG0 5))))

# ::snt he and his straight man bulganin came by battle cruiser which was the target of much curiosity in portsmouth harbour especially since the body of a naval frogman commander buster crabbe had been found floating there during another russian naval visit the previous autumn
# ::tok he and his straight man bulganin came by battle cruiser which was the target of much curiosity in portsmouth harbour especially since the body of a naval frogman commander buster crabbe had been found floating there during another russian naval visit the previous autumn
# ::alignments 42-43|0.1.1.0 40-41|0.1.1.1.0 37-38|0.1.1.1 34-35|0.1.1 33-34|0.1 28-29|0.0.0.0.0+0.0.0.0 23-24|0.1.0 21-22|0.1.3 20-21|0.1.3.0 19-20|0.1.1.1.0.1 15-16|0.1.1.1.0.0 13-14|0 8-9|0.1.2 4-5|0.0.1 3-4|0.0.1.0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:42.341
# ::node	0	target-01	13-14
# ::node	0.0	and	1-2
# ::node	0.0.0	he	0-1
# ::node	0.0.0.0	have-org-role-91	28-29
# ::node	0.0.0.0.0	commander	28-29
# ::node	0.0.1	man	4-5
# ::node	0.0.1.0	straight	3-4
# ::node	0.1	find-01	33-34
# ::node	0.1.0	body	23-24
# ::node	0.1.1	float-01	34-35
# ::node	0.1.1.0	previous	42-43
# ::node	0.1.1.1	another	37-38
# ::node	0.1.1.1.0	visit-01	40-41
# ::node	0.1.1.1.0.0	much	15-16
# ::node	0.1.1.1.0.1	harbour	19-20
# ::node	0.1.2	battle-01	8-9
# ::node	0.1.3	since	21-22
# ::node	0.1.3.0	especially	20-21
# ::root	0	target-01
# ::edge	and	op1	he	0.0	0.0.0	
# ::edge	and	op2	man	0.0	0.0.1	
# ::edge	battle-01	ARG1	find-01	0.1.2	0.1	
# ::edge	find-01	ARG0	body	0.1	0.1.0	
# ::edge	find-01	ARG1	float-01	0.1	0.1.1	
# ::edge	float-01	ARG0	previous	0.1.1	0.1.1.0	
# ::edge	float-01	ARG1	another	0.1.1	0.1.1.1	
# ::edge	have-org-role-91	ARG0	he	0.0.0.0	0.0.0	
# ::edge	have-org-role-91	ARG2	commander	0.0.0.0	0.0.0.0.0	
# ::edge	man	mod	straight	0.0.1	0.0.1.0	
# ::edge	since	mod	especially	0.1.3	0.1.3.0	
# ::edge	since	op1	find-01	0.1.3	0.1	
# ::edge	target-01	ARG1	and	0	0.0	
# ::edge	target-01	condition	find-01	0	0.1	
# ::edge	visit-01	ARG0	much	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	visit-01	ARG1	harbour	0.1.1.1.0	0.1.1.1.0.1	
# ::edge	visit-01	mod	another	0.1.1.1.0	0.1.1.1	
(t / target-01 
      :ARG1 (a2 / and 
            :op1 (h3 / he 
                  :ARG0-of (h / have-org-role-91 
                        :ARG2 (c / commander))) 
            :op2 (m2 / man 
                  :mod (s2 / straight))) 
      :condition (f2 / find-01 
            :ARG0 (b / body) 
            :ARG1 (f / float-01 
                  :ARG0 (p / previous) 
                  :ARG1 (a / another 
                        :mod-of (v / visit-01 
                              :ARG0 (m / much) 
                              :ARG1 (h2 / harbour)))) 
            :ARG1-of (b2 / battle-01) 
            :op-of (s / since 
                  :mod (e / especially))))

# ::snt opposition circles outside parliament floated the suggestion that czechoslovakias most famous explorer jiri hanzelka might break the deadlock by standing as a unity candidate
# ::tok opposition circles outside parliament floated the suggestion that czechoslovakias most famous explorer jiri hanzelka might break the deadlock by standing as a unity candidate
# ::alignments 23-24|0.2.0 22-23|0.2.1+0.2 17-18|0 10-11|0.1.0 9-10|0.1 6-7|0.0.0+0.0 4-5|0.0.1 3-4|0.0.0.0.1.0.0+0.0.0.0.1.0+0.0.0.0.1 2-3|0.0.0.0.1.1 1-2|0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:42.503
# ::node	0	deadlock-01	17-18
# ::node	0.0	thing	6-7
# ::node	0.0.0	suggest-01	6-7
# ::node	0.0.0.0	circle	1-2
# ::node	0.0.0.0.0	oppose-01	0-1
# ::node	0.0.0.0.1	government-organization	3-4
# ::node	0.0.0.0.1.0	name	3-4
# ::node	0.0.0.0.1.0.0	"Parliament"	3-4
# ::node	0.0.0.0.1.1	outside	2-3
# ::node	0.0.1	float-01	4-5
# ::node	0.1	most	9-10
# ::node	0.1.0	famous	10-11
# ::node	0.2	name	22-23
# ::node	0.2.0	candidate	23-24
# ::node	0.2.1	"Unity"	22-23
# ::root	0	deadlock-01
# ::edge	candidate	name	name	0.2.0	0.2	
# ::edge	circle	location	government-organization	0.0.0.0	0.0.0.0.1	
# ::edge	deadlock-01	ARG0	thing	0	0.0	
# ::edge	deadlock-01	ARG1	most	0	0.1	
# ::edge	deadlock-01	ARG2	name	0	0.2	
# ::edge	famous	degree	most	0.1.0	0.1	
# ::edge	float-01	ARG1	thing	0.0.1	0.0	
# ::edge	government-organization	name	name	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	name	op1	"Parliament"	0.0.0.0.1.0	0.0.0.0.1.0.0	
# ::edge	name	op1	"Unity"	0.2	0.2.1	
# ::edge	oppose-01	ARG0	circle	0.0.0.0.0	0.0.0.0	
# ::edge	outside	op1	government-organization	0.0.0.0.1.1	0.0.0.0.1	
# ::edge	suggest-01	ARG0	circle	0.0.0	0.0.0.0	
# ::edge	suggest-01	ARG1	thing	0.0.0	0.0	
(d / deadlock-01 
      :ARG0 (t / thing 
            :ARG1-of (s / suggest-01 
                  :ARG0 (c2 / circle 
                        :ARG0-of (o2 / oppose-01) 
                        :location (g / government-organization 
                              :name (n2 / name 
                                    :op1 "Parliament") 
                              :op-of (o / outside)))) 
            :ARG1-of (f2 / float-01)) 
      :ARG1 (m / most 
            :degree-of (f / famous)) 
      :ARG2 (n / name 
            :name-of (c / candidate) 
            :op1 "Unity"))

# ::snt quigley described his own idea of floating balloons with kevlar ropes attached to grenades with the aim of entangling the rope in the helicopters rotor blades thus drawing the grenade into the body of the helicopter it said
# ::tok quigley described his own idea of floating balloons with kevlar ropes attached to grenades with the aim of entangling the rope in the helicopters rotor blades thus drawing the grenade into the body of the helicopter it said
# ::alignments 37-38|0 36-37|0.0 35-36|0.1 32-33|0.1.0 27-28|0.1.0.0 23-24|0.0.0.1.0 20-21|0.0.0.1 16-17|0.0.0 13-14|0.0.0.0.0 11-12|0.0.0.0 6-7|0.0.0.0.1 4-5|0.0.0.0.1.0 1-2|0.0.0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:42.778
# ::node	0	say-01	37-38
# ::node	0.0	it	36-37
# ::node	0.0.0	aim-01	16-17
# ::node	0.0.0.0	attach-01	11-12
# ::node	0.0.0.0.0	grenade	13-14
# ::node	0.0.0.0.1	float-01	6-7
# ::node	0.0.0.0.1.0	idea	4-5
# ::node	0.0.0.0.1.0.0	describe-01	1-2
# ::node	0.0.0.1	rope	20-21
# ::node	0.0.0.1.0	helicopter	23-24
# ::node	0.1	helicopter	35-36
# ::node	0.1.0	body	32-33
# ::node	0.1.0.0	draw-02	27-28
# ::root	0	say-01
# ::edge	aim-01	ARG0	it	0.0.0	0.0	
# ::edge	aim-01	ARG1	attach-01	0.0.0	0.0.0.0	
# ::edge	aim-01	ARG2	rope	0.0.0	0.0.0.1	
# ::edge	attach-01	ARG1	grenade	0.0.0.0	0.0.0.0.0	
# ::edge	body	location	helicopter	0.1.0	0.1	
# ::edge	describe-01	ARG1	idea	0.0.0.0.1.0.0	0.0.0.0.1.0	
# ::edge	draw-02	ARG1	body	0.1.0.0	0.1.0	
# ::edge	float-01	ARG0	idea	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	float-01	ARG1	attach-01	0.0.0.0.1	0.0.0.0	
# ::edge	rope	location	helicopter	0.0.0.1	0.0.0.1.0	
# ::edge	say-01	ARG0	it	0	0.0	
# ::edge	say-01	ARG1	helicopter	0	0.1	
(s / say-01 
      :ARG0 (i / it 
            :ARG0-of (a / aim-01 
                  :ARG1 (a2 / attach-01 
                        :ARG1 (g / grenade) 
                        :ARG1-of (f / float-01 
                              :ARG0 (i2 / idea 
                                    :ARG1-of (d2 / describe-01)))) 
                  :ARG2 (r / rope 
                        :location (h2 / helicopter)))) 
      :ARG1 (h / helicopter 
            :location-of (b / body 
                  :ARG1-of (d / draw-02))))

# ::snt aldrin on one of his missions had thrown some food bags out into the shining blackness they floated at five miles a second alongside the spacecraft and reflected light back at him and within minutes he mistook them for stars
# ::tok aldrin on one of his missions had thrown some food bags out into the shining blackness they floated at five miles a second alongside the spacecraft and reflected light back at him and within minutes he mistook them for stars
# ::alignments 39-40|0.1.3.0.1.0.0.0.0.1 36-37|0.1.3.0.1.0.0.0.0 35-36|0.1.3.0.1.0.0.0.0.0 34-35|0.1.3.0.1.0.0.0.1+0.1.3.0.1.0.0.0 33-34|0.1.3.0.1.0.0 32-33|0.1.3.0.1.0 29-30|0.1.3.0.0 28-29|0.1.3.1 26-27|0.1.3 25-26|0.0 23-24|0 20-21|0.1.2.1+0.1.2 19-20|0.1.2.0 17-18|0.1 16-17|0.1.0 10-11|0.1.3.0.1 9-10|0.1.3.0.1.1 8-9|0.1.3.0.1.2 7-8|0.1.3.0 5-6|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:43.299
# ::node	0	alongside	23-24
# ::node	0.0	spacecraft	25-26
# ::node	0.1	float-01	17-18
# ::node	0.1.0	they	16-17
# ::node	0.1.1	mission	5-6
# ::node	0.1.2	distance-quantity	20-21
# ::node	0.1.2.0	5	19-20
# ::node	0.1.2.1	mile	20-21
# ::node	0.1.3	and	26-27
# ::node	0.1.3.0	throw-01	7-8
# ::node	0.1.3.0.0	back	29-30
# ::node	0.1.3.0.1	bag	10-11
# ::node	0.1.3.0.1.0	and	32-33
# ::node	0.1.3.0.1.0.0	within	33-34
# ::node	0.1.3.0.1.0.0.0	temporal-quantity	34-35
# ::node	0.1.3.0.1.0.0.0.0	mistake-01	36-37
# ::node	0.1.3.0.1.0.0.0.0.0	he	35-36
# ::node	0.1.3.0.1.0.0.0.0.1	star	39-40
# ::node	0.1.3.0.1.0.0.0.1	minute	34-35
# ::node	0.1.3.0.1.1	food	9-10
# ::node	0.1.3.0.1.2	some	8-9
# ::node	0.1.3.1	light	28-29
# ::root	0	alongside
# ::edge	alongside	op1	spacecraft	0	0.0	
# ::edge	and	op1	throw-01	0.1.3	0.1.3.0	
# ::edge	and	op1	within	0.1.3.0.1.0	0.1.3.0.1.0.0	
# ::edge	and	op2	float-01	0.1.3	0.1	
# ::edge	and	op3	light	0.1.3	0.1.3.1	
# ::edge	bag	location	and	0.1.3.0.1	0.1.3.0.1.0	
# ::edge	bag	mod	food	0.1.3.0.1	0.1.3.0.1.1	
# ::edge	bag	quant	some	0.1.3.0.1	0.1.3.0.1.2	
# ::edge	distance-quantity	quant	5	0.1.2	0.1.2.0	
# ::edge	distance-quantity	unit	mile	0.1.2	0.1.2.1	
# ::edge	float-01	ARG0	they	0.1	0.1.0	
# ::edge	float-01	ARG1	mission	0.1	0.1.1	
# ::edge	float-01	ARG2	distance-quantity	0.1	0.1.2	
# ::edge	float-01	time	alongside	0.1	0	
# ::edge	mistake-01	ARG0	he	0.1.3.0.1.0.0.0.0	0.1.3.0.1.0.0.0.0.0	
# ::edge	mistake-01	ARG1	temporal-quantity	0.1.3.0.1.0.0.0.0	0.1.3.0.1.0.0.0	
# ::edge	mistake-01	ARG2	star	0.1.3.0.1.0.0.0.0	0.1.3.0.1.0.0.0.0.1	
# ::edge	temporal-quantity	unit	minute	0.1.3.0.1.0.0.0	0.1.3.0.1.0.0.0.1	
# ::edge	throw-01	ARG0	back	0.1.3.0	0.1.3.0.0	
# ::edge	throw-01	ARG1	bag	0.1.3.0	0.1.3.0.1	
# ::edge	within	op1	temporal-quantity	0.1.3.0.1.0.0	0.1.3.0.1.0.0.0	
(a3 / alongside 
      :op1 (s2 / spacecraft) 
      :time-of (f / float-01 
            :ARG0 (t2 / they) 
            :ARG1 (m4 / mission) 
            :ARG2 (d / distance-quantity 
                  :quant 5 
                  :unit (m3 / mile)) 
            :op-of (a2 / and 
                  :op1 (t3 / throw-01 
                        :ARG0 (b / back) 
                        :ARG1 (b2 / bag 
                              :location (a / and 
                                    :op1 (w / within 
                                          :op1 (t / temporal-quantity 
                                                :ARG1-of (m / mistake-01 
                                                      :ARG0 (h / he) 
                                                      :ARG2 (s / star)) 
                                                :unit (m2 / minute)))) 
                              :mod (f2 / food) 
                              :quant (s3 / some))) 
                  :op2 (l / light))))

# ::snt mr erman said the government would not intervene in the exchange market but would allow argentinas national currency the austral to float free and clean when the markets open today for the first time in a week
# ::tok mr erman said the government would not intervene in the exchange market but would allow argentinas national currency the austral to float free and clean when the markets open today for the first time in a week
# ::alignments 36-37|0.0.2.0 33-34|0.0.0 29-30|0.0.1.0 27-28|0.0.2.1.1.0 24-25|0.0.2.1.2.0 23-24|0.0.2.1.2 22-23|0.0.2.1.1 21-22|0.0.2.1 17-18|0.0.2.1.0 16-17|0.0.2.1.0.0 14-15|0.0.2 12-13|0.0 11-12|0.0.1.1 10-11|0.0.1.1.0 7-8|0.0.1 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:43.519
# ::node	0	say-01	2-3
# ::node	0.0	contrast-01	12-13
# ::node	0.0.0	time	33-34
# ::node	0.0.1	intervene-01	7-8
# ::node	0.0.1.0	today	29-30
# ::node	0.0.1.1	market	11-12
# ::node	0.0.1.1.0	exchange-01	10-11
# ::node	0.0.2	allow-01	14-15
# ::node	0.0.2.0	week	36-37
# ::node	0.0.2.1	float-01	21-22
# ::node	0.0.2.1.0	currency	17-18
# ::node	0.0.2.1.0.0	nation	16-17
# ::node	0.0.2.1.1	free-41	22-23
# ::node	0.0.2.1.1.0	market	27-28
# ::node	0.0.2.1.2	and	23-24
# ::node	0.0.2.1.2.0	clean	24-25
# ::root	0	say-01
# ::edge	allow-01	ARG0	week	0.0.2	0.0.2.0	
# ::edge	allow-01	ARG1	float-01	0.0.2	0.0.2.1	
# ::edge	and	op1	clean	0.0.2.1.2	0.0.2.1.2.0	
# ::edge	contrast-01	ARG0	time	0.0	0.0.0	
# ::edge	contrast-01	ARG1	intervene-01	0.0	0.0.1	
# ::edge	contrast-01	ARG2	allow-01	0.0	0.0.2	
# ::edge	currency	mod	nation	0.0.2.1.0	0.0.2.1.0.0	
# ::edge	float-01	ARG0	currency	0.0.2.1	0.0.2.1.0	
# ::edge	float-01	ARG1	free-41	0.0.2.1	0.0.2.1.1	
# ::edge	float-01	ARG2	and	0.0.2.1	0.0.2.1.2	
# ::edge	free-41	ARG1	market	0.0.2.1.1	0.0.2.1.1.0	
# ::edge	intervene-01	ARG0	today	0.0.1	0.0.1.0	
# ::edge	intervene-01	ARG1	market	0.0.1	0.0.1.1	
# ::edge	market	mod	exchange-01	0.0.1.1	0.0.1.1.0	
# ::edge	say-01	ARG1	contrast-01	0	0.0	
(s / say-01 
      :ARG1 (c3 / contrast-01 
            :ARG0 (t / time) 
            :ARG1 (i / intervene-01 
                  :ARG0 (t2 / today) 
                  :ARG1 (m2 / market 
                        :mod (e / exchange-01))) 
            :ARG2 (a2 / allow-01 
                  :ARG0 (w / week) 
                  :ARG1 (f2 / float-01 
                        :ARG0 (c2 / currency 
                              :mod (n / nation)) 
                        :ARG1 (f / free-41 
                              :ARG1 (m / market)) 
                        :ARG2 (a / and 
                              :op1 (c / clean))))))

# ::snt c first floated on the stock market in october 1988
# ::tok c first floated on the stock market in october 1988
# ::alignments 8-10|0.2.1+0.2.0+0.2 6-7|0.1 5-6|0.1.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:43.539
# ::node	0	float-01	2-3
# ::node	0.0	c	0-1
# ::node	0.1	market	6-7
# ::node	0.1.0	stock	5-6
# ::node	0.2	date-entity	8-10
# ::node	0.2.0	10	8-10
# ::node	0.2.1	1988	8-10
# ::root	0	float-01
# ::edge	date-entity	month	10	0.2	0.2.0	
# ::edge	date-entity	year	1988	0.2	0.2.1	
# ::edge	float-01	ARG1	c	0	0.0	
# ::edge	float-01	ARG2	market	0	0.1	
# ::edge	float-01	time	date-entity	0	0.2	
# ::edge	market	mod	stock	0.1	0.1.0	
(f / float-01 
      :ARG1 (c / c) 
      :ARG2 (m / market 
            :mod (s / stock)) 
      :time (d / date-entity 
            :month 10 
            :year 1988))

# ::snt it admits problems in floating the industry at a defensible price while taking expensive measures to protect the environment paying for a nuclear power programme and at the same time introducing competition
# ::tok it admits problems in floating the industry at a defensible price while taking expensive measures to protect the environment paying for a nuclear power programme and at the same time introducing competition
# ::alignments 31-32|0.1 30-31|0 29-30|0.1.0 28-29|0.1.0.0 25-26|0.0.1.1 24-25|0.0.1.0 23-24|0.0.1.0.0 22-23|0.0.1.0.0.0 19-20|0.0.1 18-19|0.0 16-17|0.0.0 14-15|0.0.0.0 13-14|0.0.0.0.1 10-11|0.0.0.0.0+0.0.0.0.0.0 6-7|0.0.0.0.0.0.0 4-5|0.0.0.0.0.0.0.0 2-3|0.0.0.0.0.0.0.0.0.1 1-2|0.0.0.0.0.0.0.0.0 0-1|0.0.0.0.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:43.930
# ::node	0	introduce-02	30-31
# ::node	0.0	environment	18-19
# ::node	0.0.0	protect-01	16-17
# ::node	0.0.0.0	measure	14-15
# ::node	0.0.0.0.0	price-01	10-11
# ::node	0.0.0.0.0.0	thing	10-11
# ::node	0.0.0.0.0.0.0	industry	6-7
# ::node	0.0.0.0.0.0.0.0	float-01	4-5
# ::node	0.0.0.0.0.0.0.0.0	admit-02	1-2
# ::node	0.0.0.0.0.0.0.0.0.0	it	0-1
# ::node	0.0.0.0.0.0.0.0.0.1	problem	2-3
# ::node	0.0.0.0.1	expensive	13-14
# ::node	0.0.1	pay-01	19-20
# ::node	0.0.1.0	program	24-25
# ::node	0.0.1.0.0	power	23-24
# ::node	0.0.1.0.0.0	nucleus	22-23
# ::node	0.0.1.1	and	25-26
# ::node	0.1	compete-01	31-32
# ::node	0.1.0	time	29-30
# ::node	0.1.0.0	same-41	28-29
# ::root	0	introduce-02
# ::edge	admit-02	ARG0	it	0.0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0.0.0	
# ::edge	admit-02	ARG1	problem	0.0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0.0.1	
# ::edge	admit-02	ARG2	float-01	0.0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	and	op1	pay-01	0.0.1.1	0.0.1	
# ::edge	compete-01	ARG0	time	0.1	0.1.0	
# ::edge	float-01	ARG1	industry	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	industry	poss	thing	0.0.0.0.0.0.0	0.0.0.0.0.0	
# ::edge	introduce-02	ARG0	environment	0	0.0	
# ::edge	introduce-02	ARG1	compete-01	0	0.1	
# ::edge	measure	mod	expensive	0.0.0.0	0.0.0.0.1	
# ::edge	pay-01	ARG1	environment	0.0.1	0.0	
# ::edge	pay-01	ARG3	program	0.0.1	0.0.1.0	
# ::edge	power	mod	nucleus	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	price-01	ARG1	measure	0.0.0.0.0	0.0.0.0	
# ::edge	price-01	ARG2	thing	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	program	mod	power	0.0.1.0	0.0.1.0.0	
# ::edge	protect-01	ARG0	measure	0.0.0	0.0.0.0	
# ::edge	protect-01	ARG1	environment	0.0.0	0.0	
# ::edge	same-41	ARG1	time	0.1.0.0	0.1.0	
(i / introduce-02 
      :ARG0 (e / environment 
            :ARG1-of (p4 / protect-01 
                  :ARG0 (m / measure 
                        :ARG1-of (p5 / price-01 
                              :ARG2 (t2 / thing 
                                    :poss-of (i2 / industry 
                                          :ARG1-of (f / float-01 
                                                :ARG2-of (a2 / admit-02 
                                                      :ARG0 (i3 / it) 
                                                      :ARG1 (p6 / problem)))))) 
                        :mod (e2 / expensive))) 
            :ARG1-of (p3 / pay-01 
                  :ARG3 (p / program 
                        :mod (p2 / power 
                              :mod (n / nucleus))) 
                  :op-of (a / and))) 
      :ARG1 (c / compete-01 
            :ARG0 (t / time 
                  :ARG1-of (s / same-41))))

# ::snt the soviet union edged closer to this when its delegate at the international human rights conference in paris this summer said of wallenberg his fate like that of thousands of others is unknown as are the circumstances surrounding it ellip rumours floated in the west that he is alive are not true
# ::tok the soviet union edged closer to this when its delegate at the international human rights conference in paris this summer said of wallenberg his fate like that of thousands of others is unknown as are the circumstances surrounding it ellip rumours floated in the west that he is alive are not true
# ::alignments 51-52|0.2.1 46-47|0.2.2.0.1.0 44-45|0.2.3 41-42|0.2 38-39|0.2.2 37-38|0.2.2.0 36-37|0.2.2.0.0 32-33|0.2.2.0.1.2+0.2.2.0.1 30-31|0.2.2.0.1.1 24-25|0.0.0.2.1 20-21|0 19-20|0.0.0.2 18-19|0.0.0.2.0 15-16|0.0.0 14-15|0.0.0.0 13-14|0.0.0.0.0 12-13|0.0.0.1 9-10|0.0 6-7|0.0.1 4-5|0.1 2-3|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:44.545
# ::node	0	say-01	20-21
# ::node	0.0	delegate-01	9-10
# ::node	0.0.0	conference	15-16
# ::node	0.0.0.0	right	14-15
# ::node	0.0.0.0.0	human	13-14
# ::node	0.0.0.1	international	12-13
# ::node	0.0.0.2	summer	19-20
# ::node	0.0.0.2.0	this	18-19
# ::node	0.0.0.2.1	fate	24-25
# ::node	0.0.1	this	6-7
# ::node	0.1	close	4-5
# ::node	0.2	float-01	41-42
# ::node	0.2.0	union	2-3
# ::node	0.2.1	true	51-52
# ::node	0.2.2	it	38-39
# ::node	0.2.2.0	surround-01	37-38
# ::node	0.2.2.0.0	circumstance	36-37
# ::node	0.2.2.0.1	know-01	32-33
# ::node	0.2.2.0.1.0	he	46-47
# ::node	0.2.2.0.1.1	other	30-31
# ::node	0.2.2.0.1.2	-	32-33
# ::node	0.2.3	west	44-45
# ::root	0	say-01
# ::edge	conference	mod	international	0.0.0	0.0.0.1	
# ::edge	conference	mod	right	0.0.0	0.0.0.0	
# ::edge	conference	time	summer	0.0.0	0.0.0.2	
# ::edge	delegate-01	ARG0	conference	0.0	0.0.0	
# ::edge	delegate-01	ARG1	this	0.0	0.0.1	
# ::edge	fate	poss	summer	0.0.0.2.1	0.0.0.2	
# ::edge	float-01	ARG0	union	0.2	0.2.0	
# ::edge	float-01	ARG1	true	0.2	0.2.1	
# ::edge	float-01	ARG2	it	0.2	0.2.2	
# ::edge	float-01	location	west	0.2	0.2.3	
# ::edge	know-01	ARG0	he	0.2.2.0.1	0.2.2.0.1.0	
# ::edge	know-01	ARG1	other	0.2.2.0.1	0.2.2.0.1.1	
# ::edge	know-01	polarity	-	0.2.2.0.1	0.2.2.0.1.2	
# ::edge	right	mod	human	0.0.0.0	0.0.0.0.0	
# ::edge	say-01	ARG0	delegate-01	0	0.0	
# ::edge	say-01	ARG1	close	0	0.1	
# ::edge	say-01	ARG2	float-01	0	0.2	
# ::edge	summer	mod	this	0.0.0.2	0.0.0.2.0	
# ::edge	surround-01	ARG0	circumstance	0.2.2.0	0.2.2.0.0	
# ::edge	surround-01	ARG1	it	0.2.2.0	0.2.2	
# ::edge	surround-01	ARG2	know-01	0.2.2.0	0.2.2.0.1	
(s2 / say-01 
      :ARG0 (d / delegate-01 
            :ARG0 (c2 / conference 
                  :mod (r / right 
                        :mod (h2 / human)) 
                  :mod (i2 / international) 
                  :time (s3 / summer 
                        :mod (t2 / this) 
                        :poss-of (f2 / fate))) 
            :ARG1 (t3 / this)) 
      :ARG1 (c3 / close) 
      :ARG2 (f / float-01 
            :ARG0 (u / union) 
            :ARG1 (t / true) 
            :ARG2 (i / it 
                  :ARG1-of (s / surround-01 
                        :ARG0 (c / circumstance) 
                        :ARG2 (k / know-01 
                              :ARG0 (h / he) 
                              :ARG1 (o / other) 
                              :polarity -))) 
            :location (w / west)))

# ::snt he had a pond dug for them so pretty and sweet surrounded by bullrushes with a delicate arched bridge and floating with water lilies dash
# ::tok he had a pond dug for them so pretty and sweet surrounded by bullrushes with a delicate arched bridge and floating with water lilies dash
# ::alignments 23-24|0.0.0.1.1 22-23|0.0.0.1.2 20-21|0.0.0 19-20|0.0.0.1 18-19|0.0 16-17|0 11-12|0.0.0.1.0 10-11|0.0.0.1.0.1.1 9-10|0.0.0.1.0.1 8-9|0.0.0.1.0.1.0 7-8|0.0.0.1.0.1.0.0 3-4|0.0.0.0 0-1|0.0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:44.627
# ::node	0	delicate	16-17
# ::node	0.0	bridge	18-19
# ::node	0.0.0	float-01	20-21
# ::node	0.0.0.0	pond	3-4
# ::node	0.0.0.1	and	19-20
# ::node	0.0.0.1.0	surround-01	11-12
# ::node	0.0.0.1.0.0	he	0-1
# ::node	0.0.0.1.0.1	and	9-10
# ::node	0.0.0.1.0.1.0	pretty	8-9
# ::node	0.0.0.1.0.1.0.0	so	7-8
# ::node	0.0.0.1.0.1.1	sweet	10-11
# ::node	0.0.0.1.1	lily	23-24
# ::node	0.0.0.1.2	water	22-23
# ::root	0	delicate
(d / delicate 
      :mod-of (b / bridge 
            :ARG1-of (f / float-01 
                  :ARG0 (p2 / pond) 
                  :op-of (a / and 
                        :ARG1-of (s / surround-01 
                              :ARG0 (h / he) 
                              :op-of (a2 / and 
                                    :op1 (p / pretty 
                                          :degree (s3 / so)) 
                                    :op2 (s2 / sweet))) 
                        :op1 (l / lily) 
                        :time (w / water)))))

# ::snt cod and shares will be on the third markets menu on monday when the worlds largest fish and chip restaurant is floated
# ::tok cod and shares will be on the third markets menu on monday when the worlds largest fish and chip restaurant is floated
# ::alignments 21-22|0.0 19-20|0.3 18-19|0.2 17-18|0 16-17|0.1 15-16|0.1.0.0+0.1.0 14-15|0.1.0.1 8-9|0.0.1 2-3|0.0.0.1 1-2|0.0.0 0-1|0.0.0.0.0.0+0.0.0.0.0+0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:44.788
# ::node	0	and	17-18
# ::node	0.0	float-01	21-22
# ::node	0.0.0	and	1-2
# ::node	0.0.0.0	product	0-1
# ::node	0.0.0.0.0	name	0-1
# ::node	0.0.0.0.0.0	"COD"	0-1
# ::node	0.0.0.1	share	2-3
# ::node	0.0.1	market	8-9
# ::node	0.1	fish	16-17
# ::node	0.1.0	large	15-16
# ::node	0.1.0.0	most	15-16
# ::node	0.1.0.1	world	14-15
# ::node	0.2	chip	18-19
# ::node	0.3	restaurant	19-20
# ::root	0	and
# ::edge	and	op1	fish	0	0.1	
# ::edge	and	op1	product	0.0.0	0.0.0.0	
# ::edge	and	op2	chip	0	0.2	
# ::edge	and	op2	share	0.0.0	0.0.0.1	
# ::edge	and	op3	restaurant	0	0.3	
# ::edge	fish	mod	large	0.1	0.1.0	
# ::edge	float-01	ARG0	and	0.0	0.0.0	
# ::edge	float-01	ARG1	and	0.0	0	
# ::edge	large	degree	most	0.1.0	0.1.0.0	
# ::edge	large	mod	world	0.1.0	0.1.0.1	
# ::edge	market	op1	float-01	0.0.1	0.0	
# ::edge	name	op1	"COD"	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	product	name	name	0.0.0.0	0.0.0.0.0	
(a / and 
      :ARG1-of (f / float-01 
            :ARG0 (a2 / and 
                  :op1 (p / product 
                        :name (n / name 
                              :op1 "COD")) 
                  :op2 (s / share)) 
            :op-of (m2 / market)) 
      :op1 (f2 / fish 
            :mod (l / large 
                  :degree (m / most) 
                  :mod (w / world))) 
      :op2 (c / chip) 
      :op3 (r / restaurant))

# ::snt single horse floats are too claustrophobic for a horse and there is no room for a companion, a companion horse who is used to being floated if  floated with the beginner can make the difference between success and disaster
# ::tok single horse floats are too claustrophobic for a horse and there is no room for a companion , a companion horse who is used to being floated if floated with the beginner can make the difference between success and disaster
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:44.790
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the supermarket the fastfood joint the parking lot have all been projects of the practice but a macdonalds which floats a parking lot with 20 cars deeply buried under asphalt and its most celebrated work the series of catalogue stores for the best company where boxes are smashed into and eroded with trees growing through them faccedilla
# ::tok the supermarket the fastfood joint the parking lot have all been projects of the practice but a macdonalds which floats a parking lot with 20 cars deeply buried under asphalt and its most celebrated work the series of catalogue stores for the best company where boxes are smashed into and eroded with trees growing through them faccedilla
# ::alignments 53-54|0.0.0 52-53|0.0 50-51|0 49-50|0.2 45-46|0.1 43-44|0.2.0.2.0.0.0.0 39-40|0.2.0.2.0.0.0 36-37|0.2.0.2.0.0 33-34|0.2.0.0.0.1 32-33|0.2.0.0.0.1.0 30-31|0.2.0.2 27-28|0.2.0 26-27|0.2.0.1 25-26|0.2.0.0 24-25|0.2.0.0.1 22-23|0.2.0.0.0.2 19-20|0.2.0.0.0 15-16|0.2.0.2.0 14-15|0.2.0.2.0.1.1 11-12|0.2.0.2.0.1 9-10|0.2.0.2.1 7-8|0.2.0.0.0.0 4-5|0.2.0.2.0.1.0.0 1-2|0.2.0.2.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:45.902
# ::node	0	erode-01	50-51
# ::node	0.0	tree	52-53
# ::node	0.0.0	grow-01	53-54
# ::node	0.1	box	45-46
# ::node	0.2	and	49-50
# ::node	0.2.0	bury-01	27-28
# ::node	0.2.0.0	car	25-26
# ::node	0.2.0.0.0	float-01	19-20
# ::node	0.2.0.0.0.0	lot	7-8
# ::node	0.2.0.0.0.1	celebrate-01	33-34
# ::node	0.2.0.0.0.1.0	most	32-33
# ::node	0.2.0.0.0.2	lot	22-23
# ::node	0.2.0.0.1	20	24-25
# ::node	0.2.0.1	deep	26-27
# ::node	0.2.0.2	and	30-31
# ::node	0.2.0.2.0	contrast-01	15-16
# ::node	0.2.0.2.0.0	series	36-37
# ::node	0.2.0.2.0.0.0	store	39-40
# ::node	0.2.0.2.0.0.0.0	company	43-44
# ::node	0.2.0.2.0.1	project	11-12
# ::node	0.2.0.2.0.1.0	supermarket	1-2
# ::node	0.2.0.2.0.1.0.0	joint	4-5
# ::node	0.2.0.2.0.1.1	practice-01	14-15
# ::node	0.2.0.2.1	all	9-10
# ::root	0	erode-01
# ::edge	and	mod	all	0.2.0.2	0.2.0.2.1	
# ::edge	and	op1	bury-01	0.2	0.2.0	
# ::edge	and	op1	bury-01	0.2.0.2	0.2.0	
# ::edge	and	op2	erode-01	0.2	0	
# ::edge	bury-01	ARG1	car	0.2.0	0.2.0.0	
# ::edge	bury-01	manner	deep	0.2.0	0.2.0.1	
# ::edge	car	quant	20	0.2.0.0	0.2.0.0.1	
# ::edge	celebrate-01	ARG1	float-01	0.2.0.0.0.1	0.2.0.0.0	
# ::edge	celebrate-01	degree	most	0.2.0.0.0.1	0.2.0.0.0.1.0	
# ::edge	contrast-01	ARG0	series	0.2.0.2.0	0.2.0.2.0.0	
# ::edge	contrast-01	ARG1	project	0.2.0.2.0	0.2.0.2.0.1	
# ::edge	contrast-01	ARG2	and	0.2.0.2.0	0.2.0.2	
# ::edge	erode-01	ARG0	tree	0	0.0	
# ::edge	erode-01	ARG1	box	0	0.1	
# ::edge	float-01	ARG0	lot	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	float-01	ARG1	car	0.2.0.0.0	0.2.0.0	
# ::edge	float-01	ARG2	lot	0.2.0.0.0	0.2.0.0.0.2	
# ::edge	grow-01	ARG1	tree	0.0.0	0.0	
# ::edge	joint	mod	supermarket	0.2.0.2.0.1.0.0	0.2.0.2.0.1.0	
# ::edge	project	domain	supermarket	0.2.0.2.0.1	0.2.0.2.0.1.0	
# ::edge	project	topic	practice-01	0.2.0.2.0.1	0.2.0.2.0.1.1	
# ::edge	store	extent	company	0.2.0.2.0.0.0	0.2.0.2.0.0.0.0	
# ::edge	store	quant	series	0.2.0.2.0.0.0	0.2.0.2.0.0	
(e / erode-01 
      :ARG0 (t / tree 
            :ARG1-of (g / grow-01)) 
      :ARG1 (b / box) 
      :op-of (a / and 
            :op1 (b2 / bury-01 
                  :ARG1 (c3 / car 
                        :ARG1-of (f / float-01 
                              :ARG0 (l2 / lot) 
                              :ARG1-of (c2 / celebrate-01 
                                    :degree (m / most)) 
                              :ARG2 (l / lot)) 
                        :quant 20) 
                  :manner (d / deep) 
                  :op-of (a2 / and 
                        :ARG2-of (c4 / contrast-01 
                              :ARG0 (s2 / series 
                                    :quant-of (s / store 
                                          :extent (c / company))) 
                              :ARG1 (p2 / project 
                                    :domain (s3 / supermarket 
                                          :mod-of (j / joint)) 
                                    :topic (p / practice-01))) 
                        :mod (a3 / all)))))

# ::snt in the swamps of the libel land the crocodiles float very close to the surface
# ::tok in the swamps of the libel land the crocodiles float very close to the surface
# ::alignments 14-15|0.0 10-11|0.1.0 9-10|0 6-7|0.1.1 5-6|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:45.926
# ::node	0	float-01	9-10
# ::node	0.0	surface	14-15
# ::node	0.1	libel-01	5-6
# ::node	0.1.0	very	10-11
# ::node	0.1.1	land	6-7
# ::root	0	float-01
# ::edge	float-01	ARG1	surface	0	0.0	
# ::edge	land	purpose	libel-01	0.1.1	0.1	
# ::edge	libel-01	ARG0	very	0.1	0.1.0	
# ::edge	libel-01	ARG2	float-01	0.1	0	
(f / float-01 
      :ARG1 (s / surface) 
      :ARG2-of (l2 / libel-01 
            :ARG0 (v / very) 
            :purpose-of (l / land)))

# ::snt the largest hall was devoted to all that floated other than sailboards and powerboats
# ::tok the largest hall was devoted to all that floated other than sailboards and powerboats
# ::alignments 12-13|0 9-10|0.0.0 8-9|0.0 6-7|0.0.1 4-5|0.0.1.0 2-3|0.0.1.0.0 1-2|0.0.1.0.0.0.0+0.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:45.952
# ::node	0	and	12-13
# ::node	0.0	float-01	8-9
# ::node	0.0.0	other	9-10
# ::node	0.0.1	all	6-7
# ::node	0.0.1.0	devote-01	4-5
# ::node	0.0.1.0.0	hall	2-3
# ::node	0.0.1.0.0.0	large	1-2
# ::node	0.0.1.0.0.0.0	most	1-2
# ::root	0	and
(a / and 
      :topic-of (f / float-01 
            :ARG1 (o / other) 
            :mod (a2 / all 
                  :ARG0-of (d / devote-01 
                        :ARG1 (h / hall 
                              :mod (l / large 
                                    :degree (m / most)))))))

# ::snt previous attempts by the communists to frustrate mr havels election by floating other candidates and making the superficially enticing suggestion that a nationwide ballot rather than a vote of mps should elect the president have failed
# ::tok previous attempts by the communists to frustrate mr havels election by floating other candidates and making the superficially enticing suggestion that a nationwide ballot rather than a vote of mps should elect the president have failed
# ::alignments 35-36|0.0.1.2.0.1 33-34|0.0.1.1.0.0+0.0.1.1.0.0.0 31-32|0.0.1.1.0 30-31|0.0.1.1 27-28|0.0.1.1.0.1 23-24|0.0.1.0 22-23|0.0.1.0.0 19-20|0.1.0+0.1 14-15|0 13-14|0.0.0 12-13|0.0.0.0 11-12|0.0 9-10|0.0.1 6-7|0.0.1.2 4-5|0.0.1.2.0.0 1-2|0.0.1.2.0 0-1|0.0.1.2.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:46.807
# ::node	0	and	14-15
# ::node	0.0	float-01	11-12
# ::node	0.0.0	candidate	13-14
# ::node	0.0.0.0	other	12-13
# ::node	0.0.1	elect-01	9-10
# ::node	0.0.1.0	ballot	23-24
# ::node	0.0.1.0.0	nationwide	22-23
# ::node	0.0.1.1	recommend-01	30-31
# ::node	0.0.1.1.0	elect-01	31-32
# ::node	0.0.1.1.0.0	president	33-34
# ::node	0.0.1.1.0.0.0	have-org-role-91	33-34
# ::node	0.0.1.1.0.1	vote-01	27-28
# ::node	0.0.1.2	frustrate-01	6-7
# ::node	0.0.1.2.0	attempt-01	1-2
# ::node	0.0.1.2.0.0	communism	4-5
# ::node	0.0.1.2.0.1	fail-01	35-36
# ::node	0.0.1.2.0.2	previous	0-1
# ::node	0.1	thing	19-20
# ::node	0.1.0	suggest-01	19-20
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op2	thing	0	0.1	
# ::edge	attempt-01	ARG0	communism	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	attempt-01	ARG1	frustrate-01	0.0.1.2.0	0.0.1.2	
# ::edge	attempt-01	time	previous	0.0.1.2.0	0.0.1.2.0.2	
# ::edge	ballot	mod	nationwide	0.0.1.0	0.0.1.0.0	
# ::edge	candidate	mod	other	0.0.0	0.0.0.0	
# ::edge	elect-01	ARG0	ballot	0.0.1	0.0.1.0	
# ::edge	elect-01	ARG1	president	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	elect-01	ARG1	recommend-01	0.0.1	0.0.1.1	
# ::edge	elect-01	ARG2	float-01	0.0.1	0.0	
# ::edge	fail-01	ARG1	attempt-01	0.0.1.2.0.1	0.0.1.2.0	
# ::edge	float-01	ARG1	candidate	0.0	0.0.0	
# ::edge	frustrate-01	ARG1	elect-01	0.0.1.2	0.0.1	
# ::edge	have-org-role-91	ARG2	president	0.0.1.1.0.0.0	0.0.1.1.0.0	
# ::edge	recommend-01	ARG1	elect-01	0.0.1.1	0.0.1.1.0	
# ::edge	suggest-01	ARG1	thing	0.1.0	0.1	
# ::edge	vote-01	ARG1	elect-01	0.0.1.1.0.1	0.0.1.1.0	
(a / and 
      :op1 (f2 / float-01 
            :ARG1 (c / candidate 
                  :mod (o / other)) 
            :ARG2-of (e2 / elect-01 
                  :ARG0 (b / ballot 
                        :mod (n / nationwide)) 
                  :ARG1 (r / recommend-01 
                        :ARG1 (e / elect-01 
                              :ARG1 (p / president 
                                    :ARG2-of (h / have-org-role-91)) 
                              :ARG1-of (v / vote-01))) 
                  :ARG1-of (f3 / frustrate-01 
                        :ARG1-of (a2 / attempt-01 
                              :ARG0 (c2 / communism) 
                              :ARG1-of (f / fail-01) 
                              :time (p2 / previous))))) 
      :op2 (t / thing 
            :ARG1-of (s / suggest-01)))

# ::snt it now seems increasingly likely that ministers will be forced to float national power and powergen simultaneously early in 1991
# ::tok it now seems increasingly likely that ministers will be forced to float national power and powergen simultaneously early in 1991
# ::alignments 19-20|0.0.0+0.0 17-18|0.1.1.2.1 16-17|0.1.1.2.1.0 14-15|0.1.1.2.0 13-14|0.1.1.2.0.0 12-13|0.1.1.2.0.0.0 11-12|0.1.1.2 9-10|0.1.1 6-7|0.1.1.1.0+0.1.1.1 4-5|0.1 3-4|0.1.0 2-3|0 1-2|0.2 0-1|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:15:47.112
# ::node	0	seem-01	2-3
# ::node	0.0	date-entity	19-20
# ::node	0.0.0	1991	19-20
# ::node	0.1	likely	4-5
# ::node	0.1.0	increase-01	3-4
# ::node	0.1.1	force-01	9-10
# ::node	0.1.1.0	it	0-1
# ::node	0.1.1.1	have-org-role-91	6-7
# ::node	0.1.1.1.0	minister	6-7
# ::node	0.1.1.2	float-01	11-12
# ::node	0.1.1.2.0	and	14-15
# ::node	0.1.1.2.0.0	power	13-14
# ::node	0.1.1.2.0.0.0	nation	12-13
# ::node	0.1.1.2.1	early	17-18
# ::node	0.1.1.2.1.0	simultaneous	16-17
# ::node	0.2	now	1-2
# ::root	0	seem-01
# ::edge	and	op1	power	0.1.1.2.0	0.1.1.2.0.0	
# ::edge	date-entity	year	1991	0.0	0.0.0	
# ::edge	early	mod	simultaneous	0.1.1.2.1	0.1.1.2.1.0	
# ::edge	float-01	ARG1	and	0.1.1.2	0.1.1.2.0	
# ::edge	float-01	time	early	0.1.1.2	0.1.1.2.1	
# ::edge	force-01	ARG0	it	0.1.1	0.1.1.0	
# ::edge	force-01	ARG1	have-org-role-91	0.1.1	0.1.1.1	
# ::edge	force-01	ARG2	float-01	0.1.1	0.1.1.2	
# ::edge	have-org-role-91	ARG2	minister	0.1.1.1	0.1.1.1.0	
# ::edge	increase-01	ARG1	likely	0.1.0	0.1	
# ::edge	likely	domain	force-01	0.1	0.1.1	
# ::edge	power	mod	nation	0.1.1.2.0.0	0.1.1.2.0.0.0	
# ::edge	seem-01	ARG0	date-entity	0	0.0	
# ::edge	seem-01	ARG1	likely	0	0.1	
# ::edge	seem-01	time	now	0	0.2	
(s2 / seem-01 
      :ARG0 (d / date-entity 
            :year 1991) 
      :ARG1 (l / likely 
            :ARG1-of (i / increase-01) 
            :domain (f2 / force-01 
                  :ARG0 (i2 / it) 
                  :ARG1 (h / have-org-role-91 
                        :ARG2 (m / minister)) 
                  :ARG2 (f / float-01 
                        :ARG1 (a / and 
                              :op1 (p / power 
                                    :mod (n / nation))) 
                        :time (e / early 
                              :mod (s / simultaneous))))) 
      :time (n2 / now))

