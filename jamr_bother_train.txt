# ::snt wexford thought all these things and he knew burden was following his thoughts matching them so he didnt bother to say anything
# ::tok wexford thought all these things and he knew burden was following his thoughts matching them so he didnt bother to say anything
# ::alignments 21-22|0.0.0.0 20-21|0 18-19|0.0.0 16-17|0.0 15-16|0.0.0.2 13-14|0.0.0.1 8-9|0.0.0.1.0 7-8|0.0.0.1.0.1 6-7|0.0.0.1.0.0 5-6|0.0.0.1.0.1.0 4-5|0.0.0.1.0.1.1 2-3|0.0.0.1.0.1.1.0 1-2|0.0.0.1.0.1.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:11.545
# ::node	0	say-01	20-21
# ::node	0.0	he	16-17
# ::node	0.0.0	bother-02	18-19
# ::node	0.0.0.0	anything	21-22
# ::node	0.0.0.1	match-01	13-14
# ::node	0.0.0.1.0	burden-01	8-9
# ::node	0.0.0.1.0.0	he	6-7
# ::node	0.0.0.1.0.1	know-01	7-8
# ::node	0.0.0.1.0.1.0	and	5-6
# ::node	0.0.0.1.0.1.1	thing	4-5
# ::node	0.0.0.1.0.1.1.0	all	2-3
# ::node	0.0.0.1.0.1.2	think-01	1-2
# ::node	0.0.0.2	so	15-16
# ::root	0	say-01
# ::edge	bother-02	ARG0	he	0.0.0	0.0	
# ::edge	bother-02	ARG1	anything	0.0.0	0.0.0.0	
# ::edge	burden-01	ARG0	he	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	know-01	ARG0	and	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	know-01	ARG1	thing	0.0.0.1.0.1	0.0.0.1.0.1.1	
# ::edge	know-01	ARG2	burden-01	0.0.0.1.0.1	0.0.0.1.0	
# ::edge	match-01	ARG0	burden-01	0.0.0.1	0.0.0.1.0	
# ::edge	match-01	ARG1	bother-02	0.0.0.1	0.0.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	so	op1	bother-02	0.0.0.2	0.0.0	
# ::edge	thing	domain	all	0.0.0.1.0.1.1	0.0.0.1.0.1.1.0	
# ::edge	think-01	ARG1	know-01	0.0.0.1.0.1.2	0.0.0.1.0.1	
(s / say-01 
      :ARG0 (h / he 
            :ARG0-of (b / bother-02 
                  :ARG1 (a / anything) 
                  :ARG1-of (m / match-01 
                        :ARG0 (b2 / burden-01 
                              :ARG0 (h2 / he) 
                              :ARG2-of (k / know-01 
                                    :ARG0 (a2 / and) 
                                    :ARG1 (t / thing 
                                          :domain (a3 / all)) 
                                    :ARG1-of (t2 / think-01)))) 
                  :op-of (s2 / so))))

# ::snt poor philip was particularly bothered by this symptom because he had perfect pitch and being in the music business used to go over music in his mind most of his waking hours, when he was seen in the special department after blood tests for syphilis taken as a last resort had turned out strongly positive he remembered having noticed a sore on his penis some five months earlier but had not bothered with it as it was not painful and had gone away after a couple of weeks
# ::tok poor philip was particularly bothered by this symptom because he had perfect pitch and being in the music business used to go over music in his mind most of his waking hours , when he was seen in the special department after blood tests for syphilis taken as a last resort had turned out strongly positive he remembered having noticed a sore on his penis some five months earlier but had not bothered with it as it was not painful and had gone away after a couple of weeks
# ::alignments 88-89|0.2.2.1.1.1.0.0+0.2.2.1.1.1.0 86-87|0.2.2.1.1.1 84-85|0.2.2.1.1 83-84|0.2.2.1.1.0 80-81|0.2.2.1 79-80|0.2.2 76-77|0.2.2.0 74-75|0.2.1 72-73|0.2 69-70|0 68-69|0.0 67-68|0.0.0.1+0.0.0 66-67|0.0.0.0 65-66|0.0.0.1.0 59-60|0.2.0.0 57-58|0.2.0.1 56-57|0.2.0 55-56|0.1 54-55|0.1.0 50-51|0.2.0.1.0 49-50|0.2.0.1.0.0 43-44|0.2.2.1.0.1.0.0.2.0 42-43|0.2.2.1.0.1.0.0.2.0.0 41-42|0.2.2.1.0.1.0.0.2 40-41|0.2.2.1.0.1.0 39-40|0.2.2.1.0.1.0.1 36-37|0.2.2.1.0.1.0.0 34-35|0.2.2.1.0.1.0.0.0 31-32|0.2.2.1.0.1.0.0.1.1+0.2.2.1.0.1.0.0.1 30-31|0.2.2.1.0.1.0.0.1.0 27-28|0.2.2.1.0.1.2 26-27|0.2.2.1.0.1.3.0 23-24|0.2.2.1.0.1.3 19-20|0.2.2.1.0.1 18-19|0.2.2.1.0.1.1 17-18|0.2.2.1.0.1.1.0 13-14|0.2.2.1.0 12-13|0.2.2.1.0.2 11-12|0.2.2.1.0.2.2 9-10|0.2.2.1.0.2.0 8-9|0.2.2.1.0.0 7-8|0.2.2.1.0.0.0.0 6-7|0.2.2.1.0.0.0.0.0 4-5|0.2.2.1.0.0.0 3-4|0.2.2.1.0.0.0.1 0-1|0.2.2.1.0.2.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:16.182
# ::node	0	contrast-01	69-70
# ::node	0.0	early	68-69
# ::node	0.0.0	temporal-quantity	67-68
# ::node	0.0.0.0	5	66-67
# ::node	0.0.0.1	month	67-68
# ::node	0.0.0.1.0	some	65-66
# ::node	0.1	positive	55-56
# ::node	0.1.0	strong	54-55
# ::node	0.2	bother-01	72-73
# ::node	0.2.0	he	56-57
# ::node	0.2.0.0	notice-01	59-60
# ::node	0.2.0.1	remember-01	57-58
# ::node	0.2.0.1.0	resort-01	50-51
# ::node	0.2.0.1.0.0	last	49-50
# ::node	0.2.1	it	74-75
# ::node	0.2.2	pain-01	79-80
# ::node	0.2.2.0	it	76-77
# ::node	0.2.2.1	and	80-81
# ::node	0.2.2.1.0	and	13-14
# ::node	0.2.2.1.0.0	cause-01	8-9
# ::node	0.2.2.1.0.0.0	bother-01	4-5
# ::node	0.2.2.1.0.0.0.0	symptom	7-8
# ::node	0.2.2.1.0.0.0.0.0	this	6-7
# ::node	0.2.2.1.0.0.0.1	particular	3-4
# ::node	0.2.2.1.0.1	use-01	19-20
# ::node	0.2.2.1.0.1.0	department	40-41
# ::node	0.2.2.1.0.1.0.0	see-01	36-37
# ::node	0.2.2.1.0.1.0.0.0	he	34-35
# ::node	0.2.2.1.0.1.0.0.1	temporal-quantity	31-32
# ::node	0.2.2.1.0.1.0.0.1.0	wake-02	30-31
# ::node	0.2.2.1.0.1.0.0.1.1	hour	31-32
# ::node	0.2.2.1.0.1.0.0.2	after	41-42
# ::node	0.2.2.1.0.1.0.0.2.0	test-01	43-44
# ::node	0.2.2.1.0.1.0.0.2.0.0	blood	42-43
# ::node	0.2.2.1.0.1.0.1	special	39-40
# ::node	0.2.2.1.0.1.1	business	18-19
# ::node	0.2.2.1.0.1.1.0	music	17-18
# ::node	0.2.2.1.0.1.2	most	27-28
# ::node	0.2.2.1.0.1.3	music	23-24
# ::node	0.2.2.1.0.1.3.0	mind	26-27
# ::node	0.2.2.1.0.2	pitch-03	12-13
# ::node	0.2.2.1.0.2.0	he	9-10
# ::node	0.2.2.1.0.2.1	poor	0-1
# ::node	0.2.2.1.0.2.2	perfect	11-12
# ::node	0.2.2.1.1	after	84-85
# ::node	0.2.2.1.1.0	away	83-84
# ::node	0.2.2.1.1.1	couple	86-87
# ::node	0.2.2.1.1.1.0	temporal-quantity	88-89
# ::node	0.2.2.1.1.1.0.0	week	88-89
# ::root	0	contrast-01
# ::edge	after	mod	away	0.2.2.1.1	0.2.2.1.1.0	
# ::edge	after	op1	couple	0.2.2.1.1	0.2.2.1.1.1	
# ::edge	after	op1	test-01	0.2.2.1.0.1.0.0.2	0.2.2.1.0.1.0.0.2.0	
# ::edge	and	manner	use-01	0.2.2.1.0	0.2.2.1.0.1	
# ::edge	and	op1	pain-01	0.2.2.1	0.2.2	
# ::edge	and	op1	pitch-03	0.2.2.1.0	0.2.2.1.0.2	
# ::edge	and	op2	and	0.2.2.1.0	0.2.2.1	
# ::edge	and	time	after	0.2.2.1	0.2.2.1.1	
# ::edge	bother-01	ARG0	he	0.2	0.2.0	
# ::edge	bother-01	ARG1	it	0.2	0.2.1	
# ::edge	bother-01	ARG1	symptom	0.2.2.1.0.0.0	0.2.2.1.0.0.0.0	
# ::edge	bother-01	degree	particular	0.2.2.1.0.0.0	0.2.2.1.0.0.0.1	
# ::edge	bother-01	purpose	pain-01	0.2	0.2.2	
# ::edge	business	topic	music	0.2.2.1.0.1.1	0.2.2.1.0.1.1.0	
# ::edge	cause-01	ARG0	and	0.2.2.1.0.0	0.2.2.1.0	
# ::edge	cause-01	ARG1	bother-01	0.2.2.1.0.0	0.2.2.1.0.0.0	
# ::edge	contrast-01	ARG0	early	0	0.0	
# ::edge	contrast-01	ARG1	positive	0	0.1	
# ::edge	contrast-01	ARG2	bother-01	0	0.2	
# ::edge	couple	op1	temporal-quantity	0.2.2.1.1.1	0.2.2.1.1.1.0	
# ::edge	department	mod	special	0.2.2.1.0.1.0	0.2.2.1.0.1.0.1	
# ::edge	early	quant	temporal-quantity	0.0	0.0.0	
# ::edge	month	mod	some	0.0.0.1	0.0.0.1.0	
# ::edge	music	location	mind	0.2.2.1.0.1.3	0.2.2.1.0.1.3.0	
# ::edge	notice-01	ARG0	he	0.2.0.0	0.2.0	
# ::edge	pain-01	ARG1	it	0.2.2	0.2.2.0	
# ::edge	pitch-03	ARG0	he	0.2.2.1.0.2	0.2.2.1.0.2.0	
# ::edge	pitch-03	ARG1	poor	0.2.2.1.0.2	0.2.2.1.0.2.1	
# ::edge	pitch-03	mod	perfect	0.2.2.1.0.2	0.2.2.1.0.2.2	
# ::edge	positive	extent	strong	0.1	0.1.0	
# ::edge	remember-01	ARG0	he	0.2.0.1	0.2.0	
# ::edge	remember-01	ARG1	resort-01	0.2.0.1	0.2.0.1.0	
# ::edge	resort-01	mod	last	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	see-01	ARG0	he	0.2.2.1.0.1.0.0	0.2.2.1.0.1.0.0.0	
# ::edge	see-01	ARG1	department	0.2.2.1.0.1.0.0	0.2.2.1.0.1.0	
# ::edge	see-01	location	temporal-quantity	0.2.2.1.0.1.0.0	0.2.2.1.0.1.0.0.1	
# ::edge	see-01	time	after	0.2.2.1.0.1.0.0	0.2.2.1.0.1.0.0.2	
# ::edge	symptom	mod	this	0.2.2.1.0.0.0.0	0.2.2.1.0.0.0.0.0	
# ::edge	temporal-quantity	quant	5	0.0.0	0.0.0.0	
# ::edge	temporal-quantity	unit	hour	0.2.2.1.0.1.0.0.1	0.2.2.1.0.1.0.0.1.1	
# ::edge	temporal-quantity	unit	month	0.0.0	0.0.0.1	
# ::edge	temporal-quantity	unit	week	0.2.2.1.1.1.0	0.2.2.1.1.1.0.0	
# ::edge	test-01	ARG1	blood	0.2.2.1.0.1.0.0.2.0	0.2.2.1.0.1.0.0.2.0.0	
# ::edge	use-01	ARG0	department	0.2.2.1.0.1	0.2.2.1.0.1.0	
# ::edge	use-01	ARG1	business	0.2.2.1.0.1	0.2.2.1.0.1.1	
# ::edge	use-01	degree	most	0.2.2.1.0.1	0.2.2.1.0.1.2	
# ::edge	use-01	location	music	0.2.2.1.0.1	0.2.2.1.0.1.3	
# ::edge	wake-02	ARG1	temporal-quantity	0.2.2.1.0.1.0.0.1.0	0.2.2.1.0.1.0.0.1	
(c2 / contrast-01 
      :ARG0 (e / early 
            :quant (t2 / temporal-quantity 
                  :quant 5 
                  :unit (m / month 
                        :mod (s / some)))) 
      :ARG1 (p2 / positive 
            :extent (s2 / strong)) 
      :ARG2 (b / bother-01 
            :ARG0 (h / he 
                  :ARG0-of (n / notice-01) 
                  :ARG0-of (r / remember-01 
                        :ARG1 (r2 / resort-01 
                              :mod (l / last)))) 
            :ARG1 (i2 / it) 
            :purpose (p / pain-01 
                  :ARG1 (i / it) 
                  :op-of (a3 / and 
                        :op-of (a5 / and 
                              :ARG0-of (c3 / cause-01 
                                    :ARG1 (b4 / bother-01 
                                          :ARG1 (s5 / symptom 
                                                :mod (t5 / this)) 
                                          :degree (p5 / particular))) 
                              :manner (u / use-01 
                                    :ARG0 (d / department 
                                          :ARG1-of (s4 / see-01 
                                                :ARG0 (h2 / he) 
                                                :location (t4 / temporal-quantity 
                                                      :ARG1-of (w2 / wake-02) 
                                                      :unit (h3 / hour)) 
                                                :time (a4 / after 
                                                      :op1 (t3 / test-01 
                                                            :ARG1 (b2 / blood)))) 
                                          :mod (s3 / special)) 
                                    :ARG1 (b3 / business 
                                          :topic (m5 / music)) 
                                    :degree (m2 / most) 
                                    :location (m4 / music 
                                          :location (m3 / mind))) 
                              :op1 (p3 / pitch-03 
                                    :ARG0 (h4 / he) 
                                    :ARG1 (p6 / poor) 
                                    :mod (p4 / perfect))) 
                        :time (a / after 
                              :mod (a2 / away) 
                              :op1 (c / couple 
                                    :op1 (t / temporal-quantity 
                                          :unit (w / week))))))))

# ::snt i enjoy doing it and it doesnt bother me much
# ::tok i enjoy doing it and it doesnt bother me much
# ::alignments 9-10|0.0.0 7-8|0.0 5-6|0.1 4-5|0 3-4|0.0.1.0 2-3|0.0.1 1-2|0.0.1.1 0-1|0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:16.902
# ::node	0	and	4-5
# ::node	0.0	bother-02	7-8
# ::node	0.0.0	much	9-10
# ::node	0.0.1	do-02	2-3
# ::node	0.0.1.0	it	3-4
# ::node	0.0.1.1	enjoy-01	1-2
# ::node	0.0.1.1.0	i	0-1
# ::node	0.1	it	5-6
# ::root	0	and
# ::edge	and	op1	it	0	0.1	
# ::edge	bother-02	ARG0	and	0.0	0	
# ::edge	bother-02	ARG1	much	0.0	0.0.0	
# ::edge	do-02	ARG1	it	0.0.1	0.0.1.0	
# ::edge	do-02	ARG2	bother-02	0.0.1	0.0	
# ::edge	enjoy-01	ARG0	i	0.0.1.1	0.0.1.1.0	
# ::edge	enjoy-01	ARG1	do-02	0.0.1.1	0.0.1	
(a / and 
      :ARG0-of (b / bother-02 
            :ARG1 (m / much) 
            :ARG2-of (d / do-02 
                  :ARG1 (i2 / it) 
                  :ARG1-of (e / enjoy-01 
                        :ARG0 (i3 / i)))) 
      :op1 (i / it))

# ::snt theatrical fashion has changed again and if the angry generation was reacting against gentlemanliness the new generation is rejecting the dont bother to like me attitude
# ::tok theatrical fashion has changed again and if the angry generation was reacting against gentlemanliness the new generation is rejecting the dont bother to like me attitude
# ::alignments 25-26|0.0 21-22|0 16-17|0.1.1.1 15-16|0.1.1.1.0 11-12|0.1.1 9-10|0.1.1.0 8-9|0.1.1.0.0 5-6|0.1 4-5|0.1.0.1 3-4|0.1.0 1-2|0.1.0.0 0-1|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:17.116
# ::node	0	bother-02	21-22
# ::node	0.0	attitude	25-26
# ::node	0.1	and	5-6
# ::node	0.1.0	change-01	3-4
# ::node	0.1.0.0	fashion	1-2
# ::node	0.1.0.0.0	theater	0-1
# ::node	0.1.0.1	again	4-5
# ::node	0.1.1	react-01	11-12
# ::node	0.1.1.0	generation	9-10
# ::node	0.1.1.0.0	angry	8-9
# ::node	0.1.1.1	generation	16-17
# ::node	0.1.1.1.0	new	15-16
# ::root	0	bother-02
# ::edge	and	op1	change-01	0.1	0.1.0	
# ::edge	and	op2	react-01	0.1	0.1.1	
# ::edge	and	op3	bother-02	0.1	0	
# ::edge	bother-02	ARG1	attitude	0	0.0	
# ::edge	change-01	ARG1	fashion	0.1.0	0.1.0.0	
# ::edge	change-01	mod	again	0.1.0	0.1.0.1	
# ::edge	fashion	mod	theater	0.1.0.0	0.1.0.0.0	
# ::edge	generation	mod	angry	0.1.1.0	0.1.1.0.0	
# ::edge	generation	mod	new	0.1.1.1	0.1.1.1.0	
# ::edge	react-01	ARG0	generation	0.1.1	0.1.1.0	
# ::edge	react-01	ARG1	generation	0.1.1	0.1.1.1	
(b / bother-02 
      :ARG1 (a / attitude) 
      :op-of (a3 / and 
            :op1 (c / change-01 
                  :ARG1 (f / fashion 
                        :mod (t / theater)) 
                  :mod (a4 / again)) 
            :op2 (r / react-01 
                  :ARG0 (g2 / generation 
                        :mod (a2 / angry)) 
                  :ARG1 (g / generation 
                        :mod (n / new)))))

# ::snt gerrard concluded  habit made gower walk on towards the cash machine although he did not bother to use it because he had drawn out the last of the cash
# ::tok gerrard concluded habit made gower walk on towards the cash machine although he did not bother to use it because he had drawn out the last of the cash
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:17.117
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt it bothers them not a jot that in the process they have driven a coach and horses through the spirit of rugby unions amateur bylaws
# ::tok it bothers them not a jot that in the process they have driven a coach and horses through the spirit of rugby unions amateur bylaws
# ::alignments 22-23|0.0.2.0 19-20|0.0.2 16-17|0.1 15-16|0 14-15|0.0.0.0+0.0.0.0.0 12-13|0.0 10-11|0.0.0 9-10|0.0.3 1-2|0.0.1 0-1|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:17.447
# ::node	0	and	15-16
# ::node	0.0	drive-02	12-13
# ::node	0.0.0	they	10-11
# ::node	0.0.0.0	coach-01	14-15
# ::node	0.0.0.0.0	person	14-15
# ::node	0.0.1	bother-01	1-2
# ::node	0.0.1.0	it	0-1
# ::node	0.0.2	spirit	19-20
# ::node	0.0.2.0	union	22-23
# ::node	0.0.3	process	9-10
# ::node	0.1	horse	16-17
# ::root	0	and
# ::edge	and	op1	horse	0	0.1	
# ::edge	bother-01	ARG0	it	0.0.1	0.0.1.0	
# ::edge	bother-01	ARG1	drive-02	0.0.1	0.0	
# ::edge	coach-01	ARG0	person	0.0.0.0	0.0.0.0.0	
# ::edge	coach-01	ARG1	they	0.0.0.0	0.0.0	
# ::edge	drive-02	ARG0	they	0.0	0.0.0	
# ::edge	drive-02	ARG1	and	0.0	0	
# ::edge	drive-02	ARG2	spirit	0.0	0.0.2	
# ::edge	drive-02	time	process	0.0	0.0.3	
# ::edge	spirit	poss	union	0.0.2	0.0.2.0	
(a / and 
      :ARG1-of (d / drive-02 
            :ARG0 (t / they 
                  :ARG1-of (c / coach-01 
                        :ARG0 (p / person))) 
            :ARG1-of (b / bother-01 
                  :ARG0 (i / it)) 
            :ARG2 (s / spirit 
                  :poss (u / union)) 
            :time (p2 / process)) 
      :op1 (h / horse))

# ::snt   if robyn had shown any sign of being bothered by this vic would have taken everthorpe aside and told him to leave it out but she responded with stony indifference and vic wasnt averse to keeping everthorpe guessing whether he and robyn penrose were having an affair ridiculous as the idea was
# ::tok if robyn had shown any sign of being bothered by this vic would have taken everthorpe aside and told him to leave it out but she responded with stony indifference and vic wasnt averse to keeping everthorpe guessing whether he and robyn penrose were having an affair ridiculous as the idea was
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:17.449
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt he wont bother us
# ::tok he wont bother us
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:17.457
# ::node	0	bother-02	2-3
# ::node	0.0	he	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG0	he	0	0.0	
(b / bother-02 
      :ARG0 (h / he))

# ::snt he apologized for bothering him during a weekend but said it was imperative for gerrard to be free to help with something on monday
# ::tok he apologized for bothering him during a weekend but said it was imperative for gerrard to be free to help with something on monday
# ::alignments 21-22|0.1.0.0.0.0.0 19-20|0.1.0.0.0.0 17-18|0.1.0.0.0 12-13|0.1.0 10-11|0.1.0.0 9-10|0.1 8-9|0 7-8|0.0.0.0.0 3-4|0.0.0.0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:17.733
# ::node	0	contrast-01	8-9
# ::node	0.0	apologize-01	1-2
# ::node	0.0.0	he	0-1
# ::node	0.0.0.0	bother-01	3-4
# ::node	0.0.0.0.0	weekend	7-8
# ::node	0.1	say-01	9-10
# ::node	0.1.0	imperative	12-13
# ::node	0.1.0.0	it	10-11
# ::node	0.1.0.0.0	free-41	17-18
# ::node	0.1.0.0.0.0	help-01	19-20
# ::node	0.1.0.0.0.0.0	something	21-22
# ::root	0	contrast-01
# ::edge	apologize-01	ARG0	he	0.0	0.0.0	
# ::edge	bother-01	ARG0	he	0.0.0.0	0.0.0	
# ::edge	bother-01	time	weekend	0.0.0.0	0.0.0.0.0	
# ::edge	contrast-01	ARG1	apologize-01	0	0.0	
# ::edge	contrast-01	ARG2	say-01	0	0.1	
# ::edge	free-41	ARG1	it	0.1.0.0.0	0.1.0.0	
# ::edge	free-41	ARG2	help-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	help-01	ARG1	something	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	imperative	domain	it	0.1.0	0.1.0.0	
# ::edge	say-01	ARG1	imperative	0.1	0.1.0	
(c / contrast-01 
      :ARG1 (a / apologize-01 
            :ARG0 (h2 / he 
                  :ARG0-of (b / bother-01 
                        :time (w / weekend)))) 
      :ARG2 (s2 / say-01 
            :ARG1 (i / imperative 
                  :domain (i2 / it 
                        :ARG1-of (f / free-41 
                              :ARG2 (h / help-01 
                                    :ARG1 (s / something)))))))

# ::snt she did not bother to say it again again again that faith lavender was dead
# ::tok she did not bother to say it again again again that faith lavender was dead
# ::alignments 12-13|0.0.1.0.0 11-12|0.0.1.0 9-10|0.0.2 8-9|0.0.2.0 7-8|0.0.2.0.0 6-7|0.0.1 5-6|0.0 3-4|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:17.981
# ::node	0	bother-02	3-4
# ::node	0.0	say-01	5-6
# ::node	0.0.0	she	0-1
# ::node	0.0.1	it	6-7
# ::node	0.0.1.0	faith	11-12
# ::node	0.0.1.0.0	lavender	12-13
# ::node	0.0.2	again	9-10
# ::node	0.0.2.0	again	8-9
# ::node	0.0.2.0.0	again	7-8
# ::root	0	bother-02
# ::edge	again	degree	again	0.0.2.0	0.0.2.0.0	
# ::edge	again	mod	again	0.0.2	0.0.2.0	
# ::edge	bother-02	ARG1	say-01	0	0.0	
# ::edge	it	location	faith	0.0.1	0.0.1.0	
# ::edge	lavender	mod	faith	0.0.1.0.0	0.0.1.0	
# ::edge	say-01	ARG0	she	0.0	0.0.0	
# ::edge	say-01	ARG1	it	0.0	0.0.1	
# ::edge	say-01	mod	again	0.0	0.0.2	
(b / bother-02 
      :ARG1 (s / say-01 
            :ARG0 (s2 / she) 
            :ARG1 (i / it 
                  :location (f / faith 
                        :mod-of (l / lavender))) 
            :mod (a / again 
                  :mod (a2 / again 
                        :degree (a3 / again)))))

# ::snt that i noticed and was first bothered by a rough stowage of the tray table behind me by an adult and even then i initially thought not with irritation but with surprise and interest that my absorption in a piece of learned intellectual biography could be interrupted simply by some dufe closing a latch at my back and i went on to wonder whether in twenty years when boeing was begging for loan guarantees and sleek airships by daewoo and honda with perfect safety records were taxied on every runway the humble latches on the tray table would be one of the first things in the new nonu
# ::tok that i noticed and was first bothered by a rough stowage of the tray table behind me by an adult and even then i initially thought not with irritation but with surprise and interest that my absorption in a piece of learned intellectual biography could be interrupted simply by some dufe closing a latch at my back and i went on to wonder whether in twenty years when boeing was begging for loan guarantees and sleek airships by daewoo and honda with perfect safety records were taxied on every runway the humble latches on the tray table would be one of the first things in the new nonu
# ::alignments 106-107|0.1.1.1.2.1.2.0.0.1 103-104|0.1.1.1.2.1.2.0.1.1.0 96-97|0.1.1.1.2.1.2.0.1.1 91-92|0.1.1.1.2.1.1 89-90|0.1.1.1.2.1.2.0.1.0.0 88-89|0.1.1.1.2.1.2.0.1.0 84-85|0.1.1.1.2.1.2.0.0.0 83-84|0.1.1.1.2.1.2.0.0 82-83|0.1.1.1.2.1.2.0.0.2 79-80|0.1.1.1.2.1.0 74-75|0.1.1.1.2.1.2 73-74|0.1.1.1.2.1.2.0 72-73|0.1.1.1.2.1.2.0.1 70-71|0.1.1.1.2.1 66-67|0.1.1.1.2.1.3+0.1.1.1.2.1.3.0 62-63|0.1.1.1.2 58-59|0.1.1.1.2.0 57-58|0.1.1.1 56-57|0.1.1.1.1.1 51-52|0.1.1.1.1 49-50|0.1.1.1.1.0 47-48|0.1.1.1.1.2 46-47|0.1.1.0 44-45|0.1.1 43-44|0.1.1.1.0.0.0 42-43|0.1.1.1.0.0.0.1 41-42|0.1.1.1.0.0.0.0 39-40|0.1.1.1.0.0 36-37|0.1.1.1.0 33-34|0.0 32-33|0.0.1 31-32|0.0.1.1 29-30|0 28-29|0.0.1.0 25-26|0.1 24-25|0.1.2 23-24|0.1.0 22-23|0.1.3 20-21|0.0.0.0.0.0.0 19-20|0.0.0.0.0.0.0.0 15-16|0.0.0.0.0.1.0 14-15|0.0.0.0.0.1 9-10|0.0.1.1.0 6-7|0.0.0.0.0.0 3-4|0.0.0.0.0 2-3|0.0.0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:22.846
# ::node	0	contrast-01	29-30
# ::node	0.0	interest-01	33-34
# ::node	0.0.0	i	1-2
# ::node	0.0.0.0	notice-01	2-3
# ::node	0.0.0.0.0	and	3-4
# ::node	0.0.0.0.0.0	bother-01	6-7
# ::node	0.0.0.0.0.0.0	and	20-21
# ::node	0.0.0.0.0.0.0.0	adult	19-20
# ::node	0.0.0.0.0.1	table	14-15
# ::node	0.0.0.0.0.1.0	behind	15-16
# ::node	0.0.1	and	32-33
# ::node	0.0.1.0	irritation	28-29
# ::node	0.0.1.1	surprise-01	31-32
# ::node	0.0.1.1.0	rough	9-10
# ::node	0.1	think-01	25-26
# ::node	0.1.0	i	23-24
# ::node	0.1.1	possible	44-45
# ::node	0.1.1.0	interrupt-01	46-47
# ::node	0.1.1.1	and	57-58
# ::node	0.1.1.1.0	absorb-01	36-37
# ::node	0.1.1.1.0.0	piece	39-40
# ::node	0.1.1.1.0.0.0	biography	43-44
# ::node	0.1.1.1.0.0.0.0	learn-01	41-42
# ::node	0.1.1.1.0.0.0.1	intellectual	42-43
# ::node	0.1.1.1.1	close-01	51-52
# ::node	0.1.1.1.1.0	some	49-50
# ::node	0.1.1.1.1.1	back	56-57
# ::node	0.1.1.1.1.2	simple	47-48
# ::node	0.1.1.1.2	wonder-01	62-63
# ::node	0.1.1.1.2.0	i	58-59
# ::node	0.1.1.1.2.1	beg-01	70-71
# ::node	0.1.1.1.2.1.0	and	79-80
# ::node	0.1.1.1.2.1.1	humble	91-92
# ::node	0.1.1.1.2.1.2	and	74-75
# ::node	0.1.1.1.2.1.2.0	guarantee-01	73-74
# ::node	0.1.1.1.2.1.2.0.0	safe-41	83-84
# ::node	0.1.1.1.2.1.2.0.0.0	record	84-85
# ::node	0.1.1.1.2.1.2.0.0.1	new	106-107
# ::node	0.1.1.1.2.1.2.0.0.2	perfect	82-83
# ::node	0.1.1.1.2.1.2.0.1	loan-01	72-73
# ::node	0.1.1.1.2.1.2.0.1.0	every	88-89
# ::node	0.1.1.1.2.1.2.0.1.0.0	runway	89-90
# ::node	0.1.1.1.2.1.2.0.1.1	table	96-97
# ::node	0.1.1.1.2.1.2.0.1.1.0	thing	103-104
# ::node	0.1.1.1.2.1.3	year	66-67
# ::node	0.1.1.1.2.1.3.0	temporal-quantity	66-67
# ::node	0.1.2	initial	24-25
# ::node	0.1.3	then	22-23
# ::root	0	contrast-01
# ::edge	absorb-01	ARG0	and	0.1.1.1.0	0.1.1.1	
# ::edge	absorb-01	ARG1	piece	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	and	op1	beg-01	0.1.1.1.2.1.2	0.1.1.1.2.1	
# ::edge	and	op1	bother-01	0.0.0.0.0.0.0	0.0.0.0.0.0	
# ::edge	and	op1	irritation	0.0.1	0.0.1.0	
# ::edge	and	op1	notice-01	0.0.0.0.0	0.0.0.0	
# ::edge	and	op1	possible	0.1.1.1	0.1.1	
# ::edge	and	op2	adult	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	and	op2	bother-01	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	and	op2	close-01	0.1.1.1	0.1.1.1.1	
# ::edge	and	op2	guarantee-01	0.1.1.1.2.1.2	0.1.1.1.2.1.2.0	
# ::edge	and	op2	surprise-01	0.0.1	0.0.1.1	
# ::edge	and	op3	interest-01	0.0.1	0.0	
# ::edge	and	op3	table	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	and	op3	wonder-01	0.1.1.1	0.1.1.1.2	
# ::edge	beg-01	ARG0	and	0.1.1.1.2.1	0.1.1.1.2.1.0	
# ::edge	beg-01	ARG1	humble	0.1.1.1.2.1	0.1.1.1.2.1.1	
# ::edge	biography	mod	intellectual	0.1.1.1.0.0.0	0.1.1.1.0.0.0.1	
# ::edge	close-01	ARG0	some	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	close-01	location	back	0.1.1.1.1	0.1.1.1.1.1	
# ::edge	close-01	mod	simple	0.1.1.1.1	0.1.1.1.1.2	
# ::edge	contrast-01	ARG1	interest-01	0	0.0	
# ::edge	contrast-01	ARG2	think-01	0	0.1	
# ::edge	guarantee-01	ARG1	safe-41	0.1.1.1.2.1.2.0	0.1.1.1.2.1.2.0.0	
# ::edge	guarantee-01	ARG2	loan-01	0.1.1.1.2.1.2.0	0.1.1.1.2.1.2.0.1	
# ::edge	interest-01	ARG1	i	0.0	0.0.0	
# ::edge	learn-01	ARG1	biography	0.1.1.1.0.0.0.0	0.1.1.1.0.0.0	
# ::edge	loan-01	ARG0	every	0.1.1.1.2.1.2.0.1	0.1.1.1.2.1.2.0.1.0	
# ::edge	loan-01	ARG1	table	0.1.1.1.2.1.2.0.1	0.1.1.1.2.1.2.0.1.1	
# ::edge	notice-01	ARG0	i	0.0.0.0	0.0.0	
# ::edge	piece	domain	biography	0.1.1.1.0.0	0.1.1.1.0.0.0	
# ::edge	possible	domain	interrupt-01	0.1.1	0.1.1.0	
# ::edge	runway	mod	every	0.1.1.1.2.1.2.0.1.0.0	0.1.1.1.2.1.2.0.1.0	
# ::edge	safe-41	ARG0	record	0.1.1.1.2.1.2.0.0	0.1.1.1.2.1.2.0.0.0	
# ::edge	safe-41	ARG1	new	0.1.1.1.2.1.2.0.0	0.1.1.1.2.1.2.0.0.1	
# ::edge	safe-41	mod	perfect	0.1.1.1.2.1.2.0.0	0.1.1.1.2.1.2.0.0.2	
# ::edge	surprise-01	ARG1	rough	0.0.1.1	0.0.1.1.0	
# ::edge	table	location	behind	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	temporal-quantity	unit	year	0.1.1.1.2.1.3.0	0.1.1.1.2.1.3	
# ::edge	thing	mod	table	0.1.1.1.2.1.2.0.1.1.0	0.1.1.1.2.1.2.0.1.1	
# ::edge	think-01	ARG0	i	0.1	0.1.0	
# ::edge	think-01	ARG1	possible	0.1	0.1.1	
# ::edge	think-01	time	initial	0.1	0.1.2	
# ::edge	think-01	time	then	0.1	0.1.3	
# ::edge	wonder-01	ARG0	i	0.1.1.1.2	0.1.1.1.2.0	
# ::edge	wonder-01	ARG1	beg-01	0.1.1.1.2	0.1.1.1.2.1	
# ::edge	year	time	beg-01	0.1.1.1.2.1.3	0.1.1.1.2.1	
(c2 / contrast-01 
      :ARG1 (i4 / interest-01 
            :ARG1 (i8 / i 
                  :ARG0-of (n2 / notice-01 
                        :op-of (a8 / and 
                              :op1 (b5 / bother-01 
                                    :op-of (a6 / and 
                                          :op1 (a7 / adult))) 
                              :op2 (t6 / table 
                                    :location (b4 / behind))))) 
            :op-of (a5 / and 
                  :op1 (i5 / irritation) 
                  :op2 (s4 / surprise-01 
                        :ARG1 (r3 / rough)))) 
      :ARG2 (t4 / think-01 
            :ARG0 (i7 / i) 
            :ARG1 (p2 / possible 
                  :domain (i2 / interrupt-01) 
                  :op-of (a3 / and 
                        :ARG0-of (a4 / absorb-01 
                              :ARG1 (p3 / piece 
                                    :domain (b3 / biography 
                                          :ARG1-of (l2 / learn-01) 
                                          :mod (i3 / intellectual)))) 
                        :op1 (c / close-01 
                              :ARG0 (s2 / some) 
                              :location (b2 / back) 
                              :mod (s3 / simple)) 
                        :op2 (w / wonder-01 
                              :ARG0 (i / i) 
                              :ARG1 (b / beg-01 
                                    :ARG0 (a / and) 
                                    :ARG1 (h / humble) 
                                    :op-of (a2 / and 
                                          :op1 (g / guarantee-01 
                                                :ARG1 (s / safe-41 
                                                      :ARG0 (r2 / record) 
                                                      :ARG1 (n / new) 
                                                      :mod (p / perfect)) 
                                                :ARG2 (l / loan-01 
                                                      :ARG0 (e / every 
                                                            :mod-of (r / runway)) 
                                                      :ARG1 (t2 / table 
                                                            :mod-of (t / thing))))) 
                                    :time-of (y / year 
                                          :unit-of (t3 / temporal-quantity)))))) 
            :time (i6 / initial) 
            :time (t5 / then)))

# ::snt malvolio is the bursar sir toby is a failed lecturer in a corduroy jacket aguecheek is a mature student olivia is an academic highflyer and feste the hungover undergrad who would have got a double first if hed bothered to turn up for the exams
# ::tok malvolio is the bursar sir toby is a failed lecturer in a corduroy jacket aguecheek is a mature student olivia is an academic highflyer and feste the hungover undergrad who would have got a double first if hed bothered to turn up for the exams
# ::alignments 38-39|0.0 34-35|0.0.1 24-25|0 22-23|0.0.0 18-19|0.0.2.0.0+0.0.2.0 17-18|0.0.2 13-14|0.0.2.0.1.0 8-9|0.0.2.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:22.980
# ::node	0	and	24-25
# ::node	0.0	bother-01	38-39
# ::node	0.0.0	academia	22-23
# ::node	0.0.1	double	34-35
# ::node	0.0.2	mature-01	17-18
# ::node	0.0.2.0	person	18-19
# ::node	0.0.2.0.0	study-01	18-19
# ::node	0.0.2.0.1	fail-01	8-9
# ::node	0.0.2.0.1.0	jacket	13-14
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.0	
# ::edge	bother-01	ARG0	academia	0.0	0.0.0	
# ::edge	bother-01	ARG1	double	0.0	0.0.1	
# ::edge	fail-01	ARG0	jacket	0.0.2.0.1	0.0.2.0.1.0	
# ::edge	fail-01	ARG1	person	0.0.2.0.1	0.0.2.0	
# ::edge	mature-01	ARG0	person	0.0.2	0.0.2.0	
# ::edge	mature-01	ARG1	bother-01	0.0.2	0.0	
# ::edge	study-01	ARG0	person	0.0.2.0.0	0.0.2.0	
(a / and 
      :op1 (b / bother-01 
            :ARG0 (a2 / academia) 
            :ARG1 (d / double) 
            :ARG1-of (m / mature-01 
                  :ARG0 (p / person 
                        :ARG0-of (s / study-01) 
                        :ARG1-of (f / fail-01 
                              :ARG0 (j / jacket))))))

# ::snt they might just as well not have bothered
# ::tok they might just as well not have bothered
# ::alignments 7-8|0 4-5|0.1 2-3|0.2 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:22.996
# ::node	0	bother-01	7-8
# ::node	0.0	they	0-1
# ::node	0.1	well	4-5
# ::node	0.2	just	2-3
# ::root	0	bother-01
# ::edge	bother-01	ARG0	they	0	0.0	
# ::edge	bother-01	ARG1	well	0	0.1	
# ::edge	bother-01	mod	just	0	0.2	
(b / bother-01 
      :ARG0 (t / they) 
      :ARG1 (w / well) 
      :mod (j / just))

# ::snt many book programmes fill the screen with personality and anecdote because they cant be bothered to chase the elusive skittish flight of literary style
# ::tok many book programmes fill the screen with personality and anecdote because they cant be bothered to chase the elusive skittish flight of literary style
# ::alignments 23-24|0.1.3.0 22-23|0.1.2 18-19|0.1.3.1.1 16-17|0.1.3.1 14-15|0.1.3 11-12|0.1.3.1.0 10-11|0 8-9|0.0 7-8|0.0.0 5-6|0.1.1 3-4|0.1 2-3|0.1.0 1-2|0.1.0.0 0-1|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:23.534
# ::node	0	cause-01	10-11
# ::node	0.0	and	8-9
# ::node	0.0.0	personality	7-8
# ::node	0.1	fill-02	3-4
# ::node	0.1.0	program	2-3
# ::node	0.1.0.0	book	1-2
# ::node	0.1.0.0.0	many	0-1
# ::node	0.1.1	screen	5-6
# ::node	0.1.2	literary	22-23
# ::node	0.1.3	bother-01	14-15
# ::node	0.1.3.0	style	23-24
# ::node	0.1.3.1	chase-01	16-17
# ::node	0.1.3.1.0	they	11-12
# ::node	0.1.3.1.1	elusive	18-19
# ::root	0	cause-01
# ::edge	and	op1	personality	0.0	0.0.0	
# ::edge	book	mod	many	0.1.0.0	0.1.0.0.0	
# ::edge	bother-01	ARG0	style	0.1.3	0.1.3.0	
# ::edge	bother-01	ARG1	chase-01	0.1.3	0.1.3.1	
# ::edge	cause-01	ARG0	and	0	0.0	
# ::edge	cause-01	ARG1	fill-02	0	0.1	
# ::edge	chase-01	ARG0	they	0.1.3.1	0.1.3.1.0	
# ::edge	chase-01	ARG1	elusive	0.1.3.1	0.1.3.1.1	
# ::edge	fill-02	ARG0	program	0.1	0.1.0	
# ::edge	fill-02	ARG1	screen	0.1	0.1.1	
# ::edge	fill-02	time	bother-01	0.1	0.1.3	
# ::edge	literary	op1	fill-02	0.1.2	0.1	
# ::edge	program	mod	book	0.1.0	0.1.0.0	
(c2 / cause-01 
      :ARG0 (a / and 
            :op1 (p / personality)) 
      :ARG1 (f / fill-02 
            :ARG0 (p2 / program 
                  :mod (b2 / book 
                        :mod (m / many))) 
            :ARG1 (s2 / screen) 
            :op-of (l / literary) 
            :time (b / bother-01 
                  :ARG0 (s / style) 
                  :ARG1 (c / chase-01 
                        :ARG0 (t / they) 
                        :ARG1 (e / elusive)))))

# ::snt anyway daniel went on with malice why bother to keep people out
# ::tok anyway daniel went on with malice why bother to keep people out
# ::alignments 7-8|0 5-6|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:23.558
# ::node	0	bother-02	7-8
# ::node	0.0	malice	5-6
# ::node	0.1	anyway	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG0	malice	0	0.0	
# ::edge	bother-02	ARG1	anyway	0	0.1	
(b / bother-02 
      :ARG0 (m / malice) 
      :ARG1 (a / anyway))

# ::snt   but i breezed along hardly bothered by guilt
# ::tok but i breezed along hardly bothered by guilt
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:23.559
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt fewer and fewer of them bothered to master the discipline of raqs sharqi proper and today few performers reveal much of its original purity and range
# ::tok fewer and fewer of them bothered to master the discipline of raqs sharqi proper and today few performers reveal much of its original purity and range
# ::alignments 25-26|0.1.1 24-25|0.1 22-23|0.1.1.1 19-20|0.1.0 18-19|0 17-18|0.0 16-17|0.0.1 15-16|0.3 14-15|0.2 13-14|0.2.1 9-10|0.2.1.0 7-8|0.2.0.0 5-6|0.2.0 2-3|0.1.1.0 1-2|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:24.011
# ::node	0	reveal-01	18-19
# ::node	0.0	perform-01	17-18
# ::node	0.0.0	and	1-2
# ::node	0.0.0.0	few	0-1
# ::node	0.0.1	few	16-17
# ::node	0.1	and	24-25
# ::node	0.1.0	much	19-20
# ::node	0.1.1	range-01	25-26
# ::node	0.1.1.0	few	2-3
# ::node	0.1.1.1	original	22-23
# ::node	0.2	and	14-15
# ::node	0.2.0	bother-01	5-6
# ::node	0.2.0.0	master	7-8
# ::node	0.2.1	proper	13-14
# ::node	0.2.1.0	discipline	9-10
# ::node	0.3	today	15-16
# ::root	0	reveal-01
# ::edge	and	degree	much	0.1	0.1.0	
# ::edge	and	op1	bother-01	0.2	0.2.0	
# ::edge	and	op1	few	0.0.0	0.0.0.0	
# ::edge	and	op1	range-01	0.1	0.1.1	
# ::edge	and	op2	proper	0.2	0.2.1	
# ::edge	and	op3	reveal-01	0.2	0	
# ::edge	bother-01	ARG1	master	0.2.0	0.2.0.0	
# ::edge	perform-01	ARG0	and	0.0	0.0.0	
# ::edge	perform-01	ARG1	few	0.0	0.0.1	
# ::edge	proper	domain	discipline	0.2.1	0.2.1.0	
# ::edge	range-01	ARG0	few	0.1.1	0.1.1.0	
# ::edge	range-01	ARG1	original	0.1.1	0.1.1.1	
# ::edge	reveal-01	ARG0	perform-01	0	0.0	
# ::edge	reveal-01	ARG1	and	0	0.1	
# ::edge	reveal-01	time	today	0	0.3	
(r2 / reveal-01 
      :ARG0 (p / perform-01 
            :ARG0 (a3 / and 
                  :op1 (f3 / few)) 
            :ARG1 (f / few)) 
      :ARG1 (a / and 
            :degree (m / much) 
            :op1 (r / range-01 
                  :ARG0 (f2 / few) 
                  :ARG1 (o / original))) 
      :op-of (a2 / and 
            :op1 (b / bother-01 
                  :ARG1 (m2 / master)) 
            :op2 (p2 / proper 
                  :domain (d / discipline))) 
      :time (t / today))

# ::snt but if you are at the track dont bother looking for the trainer dash
# ::tok but if you are at the track dont bother looking for the trainer dash
# ::alignments 12-13|0.0.0 8-9|0.1 6-7|0.1.0 2-3|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:24.039
# ::node	0	contrast-01	0-1
# ::node	0.0	you	2-3
# ::node	0.0.0	train-01	12-13
# ::node	0.1	bother-02	8-9
# ::node	0.1.0	track	6-7
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	track	0.1	0.1.0	
# ::edge	bother-02	ARG1	contrast-01	0.1	0	
# ::edge	contrast-01	ARG1	you	0	0.0	
# ::edge	train-01	ARG1	you	0.0.0	0.0	
(c / contrast-01 
      :ARG1 (y / you 
            :ARG1-of (t / train-01)) 
      :ARG1-of (b / bother-02 
            :ARG0 (t2 / track)))

# ::snt and he did not regret having told gerrard about the children and the dog and the man who bothered him
# ::tok and he did not regret having told gerrard about the children and the dog and the man who bothered him
# ::alignments 18-19|0.1.0.2.0.0 16-17|0.1.0.2.0 14-15|0.1.0.2 13-14|0.1.0.1 11-12|0.1.0 10-11|0.1.0.0 6-7|0.1 4-5|0 1-2|0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:24.180
# ::node	0	regret-01	4-5
# ::node	0.0	he	1-2
# ::node	0.1	tell-01	6-7
# ::node	0.1.0	and	11-12
# ::node	0.1.0.0	child	10-11
# ::node	0.1.0.1	dog	13-14
# ::node	0.1.0.2	and	14-15
# ::node	0.1.0.2.0	man	16-17
# ::node	0.1.0.2.0.0	bother-01	18-19
# ::node	0.2	and	0-1
# ::root	0	regret-01
# ::edge	and	op1	child	0.1.0	0.1.0.0	
# ::edge	and	op1	man	0.1.0.2	0.1.0.2.0	
# ::edge	and	op1	regret-01	0.2	0	
# ::edge	and	op2	dog	0.1.0	0.1.0.1	
# ::edge	and	op3	and	0.1.0	0.1.0.2	
# ::edge	bother-01	ARG1	man	0.1.0.2.0.0	0.1.0.2.0	
# ::edge	regret-01	ARG0	he	0	0.0	
# ::edge	regret-01	ARG1	tell-01	0	0.1	
# ::edge	tell-01	ARG1	and	0.1	0.1.0	
(r / regret-01 
      :ARG0 (h / he) 
      :ARG1 (t / tell-01 
            :ARG1 (a2 / and 
                  :op1 (c / child) 
                  :op2 (d / dog) 
                  :op3 (a / and 
                        :op1 (m / man 
                              :ARG1-of (b / bother-01))))) 
      :op-of (a3 / and))

# ::snt on the generous assumption that the callers are insomniac fans and not the studio staff heard laughing off camera you wonder why they bother
# ::tok on the generous assumption that the callers are insomniac fans and not the studio staff heard laughing off camera you wonder why they bother
# ::alignments 23-24|0 22-23|0.1 20-21|0.0.0 19-20|0.0 18-19|0.0.0.0 17-18|0.0.0.0.0.1 16-17|0.0.0.0.0 15-16|0.0.0.0.0.0 14-15|0.0.0.0.0.0.0.0+0.0.0.0.0.0.0 10-11|0.0.0.0.0.0.0.1 9-10|0.0.0.0.0.0.0.1.0 2-3|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:24.525
# ::node	0	bother-02	23-24
# ::node	0.0	you	19-20
# ::node	0.0.0	wonder-01	20-21
# ::node	0.0.0.0	camera	18-19
# ::node	0.0.0.0.0	laugh-01	16-17
# ::node	0.0.0.0.0.0	hear-01	15-16
# ::node	0.0.0.0.0.0.0	person	14-15
# ::node	0.0.0.0.0.0.0.0	staff-01	14-15
# ::node	0.0.0.0.0.0.0.1	and	10-11
# ::node	0.0.0.0.0.0.0.1.0	fan	9-10
# ::node	0.0.0.0.0.1	off	17-18
# ::node	0.1	they	22-23
# ::node	0.2	generous-41	2-3
# ::root	0	bother-02
# ::edge	and	op1	fan	0.0.0.0.0.0.0.1	0.0.0.0.0.0.0.1.0	
# ::edge	and	op2	person	0.0.0.0.0.0.0.1	0.0.0.0.0.0.0	
# ::edge	bother-02	ARG0	you	0	0.0	
# ::edge	bother-02	ARG1	they	0	0.1	
# ::edge	generous-41	ARG1	bother-02	0.2	0	
# ::edge	hear-01	ARG0	person	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	hear-01	ARG1	laugh-01	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	laugh-01	ARG1	camera	0.0.0.0.0	0.0.0.0	
# ::edge	laugh-01	ARG3	off	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	staff-01	ARG2	person	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	wonder-01	ARG0	you	0.0.0	0.0	
# ::edge	wonder-01	ARG1	camera	0.0.0	0.0.0.0	
(b / bother-02 
      :ARG0 (y / you 
            :ARG0-of (w / wonder-01 
                  :ARG1 (c / camera 
                        :ARG1-of (l / laugh-01 
                              :ARG1-of (h / hear-01 
                                    :ARG0 (p / person 
                                          :ARG2-of (s / staff-01) 
                                          :op-of (a / and 
                                                :op1 (f / fan)))) 
                              :ARG3 (o / off))))) 
      :ARG1 (t / they) 
      :ARG1-of (g / generous-41))

# ::snt imagine noams being bothered by mere physical impotence
# ::tok imagine noams being bothered by mere physical impotence
# ::alignments 6-7|0.2 5-6|0.0 3-4|0.1 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:24.545
# ::node	0	imagine-01	0-1
# ::node	0.0	mere	5-6
# ::node	0.1	bother-01	3-4
# ::node	0.2	physical	6-7
# ::root	0	imagine-01
# ::edge	imagine-01	ARG0	mere	0	0.0	
# ::edge	imagine-01	ARG1	bother-01	0	0.1	
# ::edge	physical	op1	imagine-01	0.2	0	
(i / imagine-01 
      :ARG0 (m / mere) 
      :ARG1 (b / bother-01) 
      :op-of (p / physical))

# ::snt  listen in point of fact i wouldnt have bothered you id have got on to the police straight away only i dont like to see people in more trouble than they need be
# ::tok listen in point of fact i wouldnt have bothered you id have got on to the police straight away only i dont like to see people in more trouble than they need be
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:24.546
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt later bunty said in the dark i wish we could just go away somewhere lovely and peaceful where no one would bother us
# ::tok later bunty said in the dark i wish we could just go away somewhere lovely and peaceful where no one would bother us
# ::alignments 21-22|0.0.4.1.0 18-19|0.0.2 16-17|0.0.4.1 15-16|0.0.4 14-15|0.0.4.0 13-14|0.0.4.0.0.0 12-13|0.0.4.0.0 10-11|0.0.1.0 9-10|0.0.1 8-9|0.0.4.1.0.0 7-8|0.0 6-7|0.0.0 5-6|0.0.3 2-3|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:25.175
# ::node	0	say-01	2-3
# ::node	0.0	wish-01	7-8
# ::node	0.0.0	i	6-7
# ::node	0.0.1	possible	9-10
# ::node	0.0.1.0	just	10-11
# ::node	0.0.2	-	18-19
# ::node	0.0.3	dark	5-6
# ::node	0.0.4	and	15-16
# ::node	0.0.4.0	lovely	14-15
# ::node	0.0.4.0.0	away	12-13
# ::node	0.0.4.0.0.0	somewhere	13-14
# ::node	0.0.4.1	peaceful	16-17
# ::node	0.0.4.1.0	bother-02	21-22
# ::node	0.0.4.1.0.0	we	8-9
# ::node	0.1	late	0-1
# ::root	0	say-01
# ::edge	-	op1	wish-01	0.0.2	0.0	
# ::edge	and	op1	lovely	0.0.4	0.0.4.0	
# ::edge	and	op2	peaceful	0.0.4	0.0.4.1	
# ::edge	away	mod	somewhere	0.0.4.0.0	0.0.4.0.0.0	
# ::edge	bother-02	ARG0	we	0.0.4.1.0	0.0.4.1.0.0	
# ::edge	bother-02	ARG1	peaceful	0.0.4.1.0	0.0.4.1	
# ::edge	lovely	mod	away	0.0.4.0	0.0.4.0.0	
# ::edge	possible	mod	just	0.0.1	0.0.1.0	
# ::edge	say-01	ARG1	wish-01	0	0.0	
# ::edge	say-01	time	late	0	0.1	
# ::edge	wish-01	ARG0	i	0.0	0.0.0	
# ::edge	wish-01	ARG1	possible	0.0	0.0.1	
# ::edge	wish-01	prep-at	dark	0.0	0.0.3	
# ::edge	wish-01	time	and	0.0	0.0.4	
(s2 / say-01 
      :ARG1 (w2 / wish-01 
            :ARG0 (i / i) 
            :ARG1 (p2 / possible 
                  :mod (j / just)) 
            :op-of (- / -) 
            :prep-at (d / dark) 
            :time (a / and 
                  :op1 (l / lovely 
                        :mod (a2 / away 
                              :mod (s / somewhere))) 
                  :op2 (p / peaceful 
                        :ARG1-of (b / bother-02 
                              :ARG0 (w / we))))) 
      :time (l2 / late))

# ::snt it isnt simply that they say what you expect them to say it is that half the time they dont bother to say it
# ::tok it isnt simply that they say what you expect them to say it is that half the time they dont bother to say it
# ::alignments 23-24|0.1 22-23|0 20-21|0.0.0 18-19|0.0 17-18|0.0.0.0 15-16|0.0.0.0.0 12-13|0.2.0.0.0 11-12|0.2.0.0 8-9|0.2 7-8|0.2.0 5-6|0.2.1 4-5|0.2.1.0 2-3|0.2.1.2 0-1|0.2.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:26.120
# ::node	0	say-01	22-23
# ::node	0.0	they	18-19
# ::node	0.0.0	bother-02	20-21
# ::node	0.0.0.0	time	17-18
# ::node	0.0.0.0.0	half	15-16
# ::node	0.1	it	23-24
# ::node	0.2	expect-01	8-9
# ::node	0.2.0	you	7-8
# ::node	0.2.0.0	say-01	11-12
# ::node	0.2.0.0.0	it	12-13
# ::node	0.2.1	say-01	5-6
# ::node	0.2.1.0	they	4-5
# ::node	0.2.1.1	it	0-1
# ::node	0.2.1.2	simple	2-3
# ::root	0	say-01
# ::edge	bother-02	ARG0	they	0.0.0	0.0	
# ::edge	bother-02	ARG1	time	0.0.0	0.0.0.0	
# ::edge	expect-01	ARG0	you	0.2	0.2.0	
# ::edge	expect-01	ARG1	say-01	0.2	0	
# ::edge	say-01	ARG0	they	0	0.0	
# ::edge	say-01	ARG0	they	0.2.1	0.2.1.0	
# ::edge	say-01	ARG0	you	0.2.0.0	0.2.0	
# ::edge	say-01	ARG1	expect-01	0.2.1	0.2	
# ::edge	say-01	ARG1	it	0	0.1	
# ::edge	say-01	ARG1	it	0.2.0.0	0.2.0.0.0	
# ::edge	say-01	ARG3	it	0.2.1	0.2.1.1	
# ::edge	simple	degree	say-01	0.2.1.2	0.2.1	
# ::edge	time	mod	half	0.0.0.0	0.0.0.0.0	
(s / say-01 
      :ARG0 (t / they 
            :ARG0-of (b / bother-02 
                  :ARG1 (t2 / time 
                        :mod (h / half)))) 
      :ARG1 (i / it) 
      :ARG1-of (e / expect-01 
            :ARG0 (y / you 
                  :ARG0-of (s2 / say-01 
                        :ARG1 (i2 / it))) 
            :ARG1-of (s3 / say-01 
                  :ARG0 (t3 / they) 
                  :ARG3 (i3 / it) 
                  :degree-of (s4 / simple))))

# ::snt jamila abbas showed such contempt for the writer that she did not bother to clean the wall but merely plastered a picture of saleh abbas on the opposite side of her front door
# ::tok jamila abbas showed such contempt for the writer that she did not bother to clean the wall but merely plastered a picture of saleh abbas on the opposite side of her front door
# ::alignments 32-33|0.0.0.2.0.1 31-32|0.0.0.2.0.1.0 28-29|0.0.0.2.0 27-28|0.0.0.2.0.0 21-22|0.0.0.2 18-19|0.1.0 17-18|0 16-17|0.0.1 14-15|0.0.0.0 12-13|0.0 9-10|0.0.0 7-8|0.0.0.1+0.0.0.1.0 4-5|0.1.1 3-4|0.1.1.0 2-3|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:26.999
# ::node	0	contrast-01	17-18
# ::node	0.0	bother-02	12-13
# ::node	0.0.0	she	9-10
# ::node	0.0.0.0	clean	14-15
# ::node	0.0.0.1	write-01	7-8
# ::node	0.0.0.1.0	person	7-8
# ::node	0.0.0.2	picture	21-22
# ::node	0.0.0.2.0	side	28-29
# ::node	0.0.0.2.0.0	opposite-41	27-28
# ::node	0.0.0.2.0.1	door	32-33
# ::node	0.0.0.2.0.1.0	front	31-32
# ::node	0.0.1	wall	16-17
# ::node	0.1	show-01	2-3
# ::node	0.1.0	mere	18-19
# ::node	0.1.1	contempt	4-5
# ::node	0.1.1.0	such	3-4
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	she	0.0	0.0.0	
# ::edge	bother-02	ARG1	wall	0.0	0.0.1	
# ::edge	clean	ARG0	she	0.0.0.0	0.0.0	
# ::edge	contempt	mod	such	0.1.1	0.1.1.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.0	
# ::edge	door	mod	front	0.0.0.2.0.1	0.0.0.2.0.1.0	
# ::edge	door	poss	side	0.0.0.2.0.1	0.0.0.2.0	
# ::edge	opposite-41	ARG1	side	0.0.0.2.0.0	0.0.0.2.0	
# ::edge	picture	example	side	0.0.0.2	0.0.0.2.0	
# ::edge	picture	poss	she	0.0.0.2	0.0.0	
# ::edge	show-01	ARG0	mere	0.1	0.1.0	
# ::edge	show-01	ARG1	contempt	0.1	0.1.1	
# ::edge	show-01	ARG4	contrast-01	0.1	0	
# ::edge	write-01	ARG0	person	0.0.0.1	0.0.0.1.0	
# ::edge	write-01	ARG1	she	0.0.0.1	0.0.0	
(c / contrast-01 
      :ARG1 (b / bother-02 
            :ARG0 (s2 / she 
                  :ARG0-of (c2 / clean) 
                  :ARG1-of (w2 / write-01 
                        :ARG0 (p2 / person)) 
                  :poss-of (p / picture 
                        :example (s / side 
                              :ARG1-of (o / opposite-41) 
                              :poss-of (d / door 
                                    :mod (f / front))))) 
            :ARG1 (w / wall)) 
      :ARG4-of (s4 / show-01 
            :ARG0 (m / mere) 
            :ARG1 (c3 / contempt 
                  :mod (s3 / such))))

# ::snt the republicans also picked up an estimated 14000 votes from the social democrats and yet more from people who have not bothered to vote before
# ::tok the republicans also picked up an estimated 14000 votes from the social democrats and yet more from people who have not bothered to vote before
# ::alignments 24-25|0.2.0.1 23-24|0.2.0 21-22|0.2.0.0 14-15|0.2.2 13-14|0.2 12-13|0.2.1.0 11-12|0.2.1.0.0 8-9|0.2.1 7-8|0.2.1.2 6-7|0.2.1.1 3-4|0 2-3|0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:27.090
# ::node	0	pick-04	3-4
# ::node	0.0	republican	1-2
# ::node	0.1	also	2-3
# ::node	0.2	and	13-14
# ::node	0.2.0	vote-01	23-24
# ::node	0.2.0.0	bother-01	21-22
# ::node	0.2.0.1	before	24-25
# ::node	0.2.1	vote-01	8-9
# ::node	0.2.1.0	democrat	12-13
# ::node	0.2.1.0.0	society	11-12
# ::node	0.2.1.1	estimate-01	6-7
# ::node	0.2.1.2	14000	7-8
# ::node	0.2.2	yet	14-15
# ::root	0	pick-04
# ::edge	and	op1	pick-04	0.2	0	
# ::edge	and	op2	vote-01	0.2	0.2.1	
# ::edge	and	op3	yet	0.2	0.2.2	
# ::edge	bother-01	ARG1	vote-01	0.2.0.0	0.2.0	
# ::edge	democrat	mod	society	0.2.1.0	0.2.1.0.0	
# ::edge	estimate-01	ARG1	vote-01	0.2.1.1	0.2.1	
# ::edge	pick-04	ARG0	republican	0	0.0	
# ::edge	pick-04	mod	also	0	0.1	
# ::edge	vote-01	ARG1	and	0.2.0	0.2	
# ::edge	vote-01	ARG1	democrat	0.2.1	0.2.1.0	
# ::edge	vote-01	quant	14000	0.2.1	0.2.1.2	
# ::edge	vote-01	time	before	0.2.0	0.2.0.1	
(p / pick-04 
      :ARG0 (r / republican) 
      :mod (a2 / also) 
      :op-of (a / and 
            :ARG1-of (v / vote-01 
                  :ARG1-of (b2 / bother-01) 
                  :time (b / before)) 
            :op1 (v2 / vote-01 
                  :ARG1 (d / democrat 
                        :mod (s / society)) 
                  :ARG1-of (e / estimate-01) 
                  :quant 14000) 
            :op2 (y / yet)))

# ::snt many of the wrenboys did not bother to wear disguises
# ::tok many of the wrenboys did not bother to wear disguises
# ::alignments 9-10|0.0.1 8-9|0.0 6-7|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:27.106
# ::node	0	bother-02	6-7
# ::node	0.0	wear-01	8-9
# ::node	0.0.0	many	0-1
# ::node	0.0.1	disguise-01	9-10
# ::root	0	bother-02
# ::edge	bother-02	ARG1	wear-01	0	0.0	
# ::edge	wear-01	ARG0	many	0.0	0.0.0	
# ::edge	wear-01	ARG1	disguise-01	0.0	0.0.1	
(b / bother-02 
      :ARG1 (w / wear-01 
            :ARG0 (m / many) 
            :ARG1 (d / disguise-01)))

# ::snt the trip was slickly organised the only problem came on the return journey from berlin when the airport security were rather alarmed to discover that many passengers were in possession of large hammers and chisels interestingly this hadnt bothered security at luton
# ::tok the trip was slickly organised the only problem came on the return journey from berlin when the airport security were rather alarmed to discover that many passengers were in possession of large hammers and chisels interestingly this hadnt bothered security at luton
# ::alignments 39-40|0.0.0 38-39|0.0 36-37|0.0.0.0 33-34|0.1 31-32|0.1.0.3.0 29-30|0 26-27|0.1.0.2.0 25-26|0.1.0.2.0.0 23-24|0.1.0 21-22|0.1.0.2 18-19|0.1.0.0 17-18|0.1.0.0.0 12-13|0.1.0.3 7-8|0.1.0.1.0.0 6-7|0.1.0.1.0.0.0 4-5|0.1.0.1.0 1-2|0.1.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:27.884
# ::node	0	possess-01	29-30
# ::node	0.0	bother-01	38-39
# ::node	0.0.0	security	39-40
# ::node	0.0.0.0	this	36-37
# ::node	0.1	and	33-34
# ::node	0.1.0	discover-01	23-24
# ::node	0.1.0.0	security	18-19
# ::node	0.1.0.0.0	airport	17-18
# ::node	0.1.0.1	trip-01	1-2
# ::node	0.1.0.1.0	organize-01	4-5
# ::node	0.1.0.1.0.0	problem	7-8
# ::node	0.1.0.1.0.0.0	only	6-7
# ::node	0.1.0.2	alarm-01	21-22
# ::node	0.1.0.2.0	passenger	26-27
# ::node	0.1.0.2.0.0	many	25-26
# ::node	0.1.0.3	journey-01	12-13
# ::node	0.1.0.3.0	large	31-32
# ::root	0	possess-01
# ::edge	alarm-01	ARG0	passenger	0.1.0.2	0.1.0.2.0	
# ::edge	alarm-01	ARG1	discover-01	0.1.0.2	0.1.0	
# ::edge	bother-01	ARG0	possess-01	0.0	0	
# ::edge	bother-01	ARG1	security	0.0	0.0.0	
# ::edge	discover-01	ARG0	security	0.1.0	0.1.0.0	
# ::edge	discover-01	ARG1	and	0.1.0	0.1	
# ::edge	journey-01	ARG0	large	0.1.0.3	0.1.0.3.0	
# ::edge	journey-01	purpose	discover-01	0.1.0.3	0.1.0	
# ::edge	organize-01	ARG0	problem	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	organize-01	ARG1	trip-01	0.1.0.1.0	0.1.0.1	
# ::edge	passenger	quant	many	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	possess-01	ARG1	and	0	0.1	
# ::edge	problem	mod	only	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	security	mod	airport	0.1.0.0	0.1.0.0.0	
# ::edge	security	mod	this	0.0.0	0.0.0.0	
# ::edge	trip-01	ARG1	discover-01	0.1.0.1	0.1.0	
(p / possess-01 
      :ARG0-of (b / bother-01 
            :ARG1 (s / security 
                  :mod (t / this))) 
      :ARG1 (a / and 
            :ARG1-of (d / discover-01 
                  :ARG0 (s2 / security 
                        :mod (a3 / airport)) 
                  :ARG1-of (t2 / trip-01 
                        :ARG1-of (o2 / organize-01 
                              :ARG0 (p3 / problem 
                                    :mod (o / only)))) 
                  :ARG1-of (a2 / alarm-01 
                        :ARG0 (p2 / passenger 
                              :quant (m / many))) 
                  :purpose-of (j / journey-01 
                        :ARG0 (l / large)))))

# ::snt only one in three brits bothered to vote last year
# ::tok only one in three brits bothered to vote last year
# ::alignments 9-10|0.0.1 8-9|0.0.1.0 7-8|0.0 5-6|0 3-4|0.0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:27.904
# ::node	0	bother-01	5-6
# ::node	0.0	vote-01	7-8
# ::node	0.0.0	3	3-4
# ::node	0.0.1	year	9-10
# ::node	0.0.1.0	last	8-9
# ::node	0.1	only	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG1	vote-01	0	0.0	
# ::edge	bother-01	time	only	0	0.1	
# ::edge	vote-01	ARG1	3	0.0	0.0.0	
# ::edge	vote-01	time	year	0.0	0.0.1	
# ::edge	year	mod	last	0.0.1	0.0.1.0	
(b / bother-01 
      :ARG1 (v / vote-01 
            :ARG1 3 
            :time (y / year 
                  :mod (l / last))) 
      :time (o / only))

# ::snt today i dont bother to read the new statesman
# ::tok today i dont bother to read the new statesman
# ::alignments 7-8|0.1.0.0 5-6|0.1 3-4|0 1-2|0.1.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:27.922
# ::node	0	bother-02	3-4
# ::node	0.0	today	0-1
# ::node	0.1	read-01	5-6
# ::node	0.1.0	i	1-2
# ::node	0.1.0.0	new	7-8
# ::root	0	bother-02
# ::edge	bother-02	ARG0	today	0	0.0	
# ::edge	bother-02	ARG1	read-01	0	0.1	
# ::edge	i	op1	new	0.1.0	0.1.0.0	
# ::edge	read-01	ARG0	i	0.1	0.1.0	
(b / bother-02 
      :ARG0 (t / today) 
      :ARG1 (r / read-01 
            :ARG0 (i / i 
                  :op1 (n / new))))

# ::snt they wear a special rimless steel helmet but you dont need to bother about that
# ::tok they wear a special rimless steel helmet but you dont need to bother about that
# ::alignments 12-13|0.1.0 10-11|0.1 8-9|0.1.0.0 7-8|0 6-7|0.0.1 5-6|0.0.1.1 3-4|0.0.1.0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:28.097
# ::node	0	contrast-01	7-8
# ::node	0.0	wear-01	1-2
# ::node	0.0.0	they	0-1
# ::node	0.0.1	helmet	6-7
# ::node	0.0.1.0	special	3-4
# ::node	0.0.1.1	steel	5-6
# ::node	0.1	need-01	10-11
# ::node	0.1.0	bother-02	12-13
# ::node	0.1.0.0	you	8-9
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	you	0.1.0	0.1.0.0	
# ::edge	contrast-01	ARG1	wear-01	0	0.0	
# ::edge	contrast-01	ARG2	need-01	0	0.1	
# ::edge	helmet	mod	special	0.0.1	0.0.1.0	
# ::edge	helmet	mod	steel	0.0.1	0.0.1.1	
# ::edge	need-01	ARG1	bother-02	0.1	0.1.0	
# ::edge	wear-01	ARG0	they	0.0	0.0.0	
# ::edge	wear-01	ARG1	helmet	0.0	0.0.1	
(c / contrast-01 
      :ARG1 (w / wear-01 
            :ARG0 (t / they) 
            :ARG1 (h / helmet 
                  :mod (s2 / special) 
                  :mod (s / steel))) 
      :ARG2 (n / need-01 
            :ARG1 (b / bother-02 
                  :ARG0 (y / you))))

# ::snt   i have no worries about that it doesnt bother me he said
# ::tok i have no worries about that it doesnt bother me he said
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:28.098
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt he asked her what was bothering her and she told him she had a splitting headache
# ::tok he asked her what was bothering her and she told him she had a splitting headache
# ::alignments 15-16|0.0.0.0.0 14-15|0.0.0.0 11-12|0.0.0 9-10|0.0 8-9|0.2 7-8|0 5-6|0.1 1-2|0.1.0.0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:28.279
# ::node	0	and	7-8
# ::node	0.0	tell-01	9-10
# ::node	0.0.0	she	11-12
# ::node	0.0.0.0	split-01	14-15
# ::node	0.0.0.0.0	headache	15-16
# ::node	0.1	bother-01	5-6
# ::node	0.1.0	he	0-1
# ::node	0.1.0.0	ask-02	1-2
# ::node	0.2	she	8-9
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.1	
# ::edge	and	op2	she	0	0.2	
# ::edge	ask-02	ARG0	he	0.1.0.0	0.1.0	
# ::edge	bother-01	ARG0	he	0.1	0.1.0	
# ::edge	split-01	ARG0	she	0.0.0.0	0.0.0	
# ::edge	split-01	ARG1	headache	0.0.0.0	0.0.0.0.0	
# ::edge	tell-01	ARG0	and	0.0	0	
# ::edge	tell-01	ARG2	she	0.0	0.0.0	
(a / and 
      :ARG0-of (t / tell-01 
            :ARG2 (s2 / she 
                  :ARG0-of (s / split-01 
                        :ARG1 (h / headache)))) 
      :op1 (b / bother-01 
            :ARG0 (h2 / he 
                  :ARG0-of (a2 / ask-02))) 
      :op2 (s3 / she))

# ::snt the first edition of his book late last year was titled the germans rich bothered and divided
# ::tok the first edition of his book late last year was titled the germans rich bothered and divided
# ::alignments 16-17|0.1 15-16|0 14-15|0.0.1.0 13-14|0.0.2 12-13|0.0.1.1.0.0+0.0.1.1.0+0.0.1.1+0.0.1 10-11|0.0 8-9|0.0.0 7-8|0.0.0.0 6-7|0.1.0.1 5-6|0.1.0.0 2-3|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:28.554
# ::node	0	and	15-16
# ::node	0.0	title-01	10-11
# ::node	0.0.0	year	8-9
# ::node	0.0.0.0	last	7-8
# ::node	0.0.1	person	12-13
# ::node	0.0.1.0	bother-01	14-15
# ::node	0.0.1.1	country	12-13
# ::node	0.0.1.1.0	name	12-13
# ::node	0.0.1.1.0.0	"Germany"	12-13
# ::node	0.0.2	rich	13-14
# ::node	0.1	divide-02	16-17
# ::node	0.1.0	edition	2-3
# ::node	0.1.0.0	book	5-6
# ::node	0.1.0.1	late	6-7
# ::root	0	and
# ::edge	and	op1	title-01	0	0.0	
# ::edge	and	op2	divide-02	0	0.1	
# ::edge	bother-01	ARG1	person	0.0.1.0	0.0.1	
# ::edge	country	name	name	0.0.1.1	0.0.1.1.0	
# ::edge	divide-02	ARG1	edition	0.1	0.1.0	
# ::edge	edition	location	book	0.1.0	0.1.0.0	
# ::edge	edition	time	late	0.1.0	0.1.0.1	
# ::edge	name	op1	"Germany"	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	person	mod	country	0.0.1	0.0.1.1	
# ::edge	title-01	ARG0	year	0.0	0.0.0	
# ::edge	title-01	ARG1	person	0.0	0.0.1	
# ::edge	title-01	manner	rich	0.0	0.0.2	
# ::edge	year	mod	last	0.0.0	0.0.0.0	
(a / and 
      :op1 (t / title-01 
            :ARG0 (y / year 
                  :mod (l / last)) 
            :ARG1 (p / person 
                  :ARG1-of (b / bother-01) 
                  :mod (c / country 
                        :name (n / name 
                              :op1 "Germany"))) 
            :manner (r / rich)) 
      :op2 (d / divide-02 
            :ARG1 (e / edition 
                  :location (b2 / book) 
                  :time (l2 / late))))

# ::snt answer number two turns on another price that bothers him
# ::tok answer number two turns on another price that bothers him
# ::alignments 8-9|0.1.0 6-7|0.1.1+0.1 5-6|0.1.2 2-3|0.1.0.0 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:28.619
# ::node	0	answer-01	0-1
# ::node	0.0	number	1-2
# ::node	0.1	thing	6-7
# ::node	0.1.0	bother-01	8-9
# ::node	0.1.0.0	2	2-3
# ::node	0.1.1	price-01	6-7
# ::node	0.1.2	another	5-6
# ::root	0	answer-01
# ::edge	answer-01	ARG1	number	0	0.0	
# ::edge	answer-01	ARG2	thing	0	0.1	
# ::edge	bother-01	ARG0	2	0.1.0	0.1.0.0	
# ::edge	bother-01	ARG1	thing	0.1.0	0.1	
# ::edge	price-01	ARG2	thing	0.1.1	0.1	
# ::edge	thing	mod	another	0.1	0.1.2	
(a2 / answer-01 
      :ARG1 (n / number) 
      :ARG2 (t / thing 
            :ARG1-of (b / bother-01 
                  :ARG0 2) 
            :ARG2-of (p / price-01) 
            :mod (a / another)))

# ::snt that was when sharpe bothered to show himself at the princes headquarters at all he evidently preferred to spend his days riding the french frontier which was a job that properly belonged to the pompous general dornberg which thought reminded the prince that dornbergs noon report should have arrived
# ::tok that was when sharpe bothered to show himself at the princes headquarters at all he evidently preferred to spend his days riding the french frontier which was a job that properly belonged to the pompous general dornberg which thought reminded the prince that dornbergs noon report should have arrived
# ::alignments 48-49|0.1.1.1.0.0 46-47|0.1.1.1.0.0.1 45-46|0.1.1.1.0.0.0 44-45|0.1.1.1.0.0.0.0 41-42|0.1.1.1.0.0.2.1 39-40|0.1.1.1.0.0.2 38-39|0.1.1.1.0.0.2.0 35-36|0.1.1.0 31-32|0.1.1.1.0.0.2.0.0 30-31|0.1.1.1.0.0.2.0.0.1 28-29|0.1.1.1.0.0.2.0.0.0 24-25|0.1.1.1 23-24|0.1.1.1.0.1.0+0.1.1.1.0.1+0.1.1.1.0 21-22|0.1.1 20-21|0.1.0.0+0.1.0 18-19|0.1 16-17|0 15-16|0.2 14-15|0.0 13-14|0.3 11-12|0.0.0.0 6-7|0.0.0 4-5|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:30.210
# ::node	0	prefer-01	16-17
# ::node	0.0	he	14-15
# ::node	0.0.0	show-01	6-7
# ::node	0.0.0.0	headquarters	11-12
# ::node	0.0.0.1	bother-01	4-5
# ::node	0.1	spend-01	18-19
# ::node	0.1.0	temporal-quantity	20-21
# ::node	0.1.0.0	day	20-21
# ::node	0.1.1	ride-01	21-22
# ::node	0.1.1.0	general	35-36
# ::node	0.1.1.1	frontier	24-25
# ::node	0.1.1.1.0	country	23-24
# ::node	0.1.1.1.0.0	arrive-01	48-49
# ::node	0.1.1.1.0.0.0	report	45-46
# ::node	0.1.1.1.0.0.0.0	noon	44-45
# ::node	0.1.1.1.0.0.1	recommend-01	46-47
# ::node	0.1.1.1.0.0.2	remind-01	39-40
# ::node	0.1.1.1.0.0.2.0	think-01	38-39
# ::node	0.1.1.1.0.0.2.0.0	belong-01	31-32
# ::node	0.1.1.1.0.0.2.0.0.0	job	28-29
# ::node	0.1.1.1.0.0.2.0.0.1	proper	30-31
# ::node	0.1.1.1.0.0.2.1	prince	41-42
# ::node	0.1.1.1.0.1	name	23-24
# ::node	0.1.1.1.0.1.0	"France"	23-24
# ::node	0.2	evident	15-16
# ::node	0.3	all	13-14
# ::root	0	prefer-01
# ::edge	arrive-01	ARG1	report	0.1.1.1.0.0	0.1.1.1.0.0.0	
# ::edge	arrive-01	ARG4	country	0.1.1.1.0.0	0.1.1.1.0	
# ::edge	belong-01	ARG0	job	0.1.1.1.0.0.2.0.0	0.1.1.1.0.0.2.0.0.0	
# ::edge	belong-01	ARG1	think-01	0.1.1.1.0.0.2.0.0	0.1.1.1.0.0.2.0	
# ::edge	belong-01	manner	proper	0.1.1.1.0.0.2.0.0	0.1.1.1.0.0.2.0.0.1	
# ::edge	bother-01	ARG1	show-01	0.0.0.1	0.0.0	
# ::edge	country	name	name	0.1.1.1.0	0.1.1.1.0.1	
# ::edge	frontier	mod	country	0.1.1.1	0.1.1.1.0	
# ::edge	name	op1	"France"	0.1.1.1.0.1	0.1.1.1.0.1.0	
# ::edge	prefer-01	ARG0	he	0	0.0	
# ::edge	prefer-01	ARG1	spend-01	0	0.1	
# ::edge	prefer-01	manner	evident	0	0.2	
# ::edge	prefer-01	mod	all	0	0.3	
# ::edge	recommend-01	ARG1	arrive-01	0.1.1.1.0.0.1	0.1.1.1.0.0	
# ::edge	remind-01	ARG1	arrive-01	0.1.1.1.0.0.2	0.1.1.1.0.0	
# ::edge	remind-01	ARG2	prince	0.1.1.1.0.0.2	0.1.1.1.0.0.2.1	
# ::edge	report	mod	noon	0.1.1.1.0.0.0	0.1.1.1.0.0.0.0	
# ::edge	ride-01	ARG0	general	0.1.1	0.1.1.0	
# ::edge	ride-01	ARG1	frontier	0.1.1	0.1.1.1	
# ::edge	show-01	ARG0	he	0.0.0	0.0	
# ::edge	show-01	ARG1	headquarters	0.0.0	0.0.0.0	
# ::edge	spend-01	ARG1	temporal-quantity	0.1	0.1.0	
# ::edge	spend-01	ARG2	ride-01	0.1	0.1.1	
# ::edge	temporal-quantity	unit	day	0.1.0	0.1.0.0	
# ::edge	think-01	ARG1	remind-01	0.1.1.1.0.0.2.0	0.1.1.1.0.0.2	
(p3 / prefer-01 
      :ARG0 (h / he 
            :ARG0-of (s2 / show-01 
                  :ARG1 (h2 / headquarters) 
                  :ARG1-of (b2 / bother-01))) 
      :ARG1 (s / spend-01 
            :ARG1 (t2 / temporal-quantity 
                  :unit (d / day)) 
            :ARG2 (r4 / ride-01 
                  :ARG0 (g / general) 
                  :ARG1 (f / frontier 
                        :mod (c / country 
                              :ARG4-of (a / arrive-01 
                                    :ARG1 (r2 / report 
                                          :mod (n / noon)) 
                                    :ARG1-of (r / recommend-01) 
                                    :ARG1-of (r3 / remind-01 
                                          :ARG1-of (t / think-01 
                                                :ARG1-of (b / belong-01 
                                                      :ARG0 (j / job) 
                                                      :manner (p2 / proper))) 
                                          :ARG2 (p / prince))) 
                              :name (n2 / name 
                                    :op1 "France"))))) 
      :manner (e / evident) 
      :mod (a2 / all))

# ::snt maggie had never bothered to resist their reasoning and she folded her clothes partly from the natural instinct of obedience and partly because she had never been entirely sure that these external appendages did indeed belong to her maggie petherington or if perhaps they were loans from the mysterious outer world loans that would doubtless be called in some day
# ::tok maggie had never bothered to resist their reasoning and she folded her clothes partly from the natural instinct of obedience and partly because she had never been entirely sure that these external appendages did indeed belong to her maggie petherington or if perhaps they were loans from the mysterious outer world loans that would doubtless be called in some day
# ::alignments 59-60|0.3.0.1.1.2.1.0 58-59|0.3.0.1.1.2.1 54-55|0.3.0.1.0 51-52|0.3.0.1.1.2 50-51|0.3.0.1.1.2.0 49-50|0.3.0.1.1.2.3 48-49|0.3.0.1.1.2.2 45-46|0.3.0.1.1 43-44|0.3.0.1.1.1 42-43|0.1 40-41|0.3.0.1 35-36|0.3.0 34-35|0.3.0.0 31-32|0.3.0.1.1.0 27-28|0.3.1.4.0.1.0 23-24|0.0 22-23|0 21-22|0.2 20-21|0.3 17-18|0.3.1.2 16-17|0.3.1.2.0 13-14|0.3.1.3 12-13|0.3.1.1 10-11|0.3.1 9-10|0.3.1.0 8-9|0.3.1.4 7-8|0.3.1.4.0.0 5-6|0.3.1.4.0 3-4|0.3.1.4.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:30.833
# ::node	0	cause-01	22-23
# ::node	0.0	she	23-24
# ::node	0.1	perhaps	42-43
# ::node	0.2	partly	21-22
# ::node	0.3	and	20-21
# ::node	0.3.0	belong-01	35-36
# ::node	0.3.0.0	indeed	34-35
# ::node	0.3.0.1	or	40-41
# ::node	0.3.0.1.0	doubt-01	54-55
# ::node	0.3.0.1.1	loan-01	45-46
# ::node	0.3.0.1.1.0	external	31-32
# ::node	0.3.0.1.1.1	they	43-44
# ::node	0.3.0.1.1.2	loan-01	51-52
# ::node	0.3.0.1.1.2.0	world	50-51
# ::node	0.3.0.1.1.2.1	some	58-59
# ::node	0.3.0.1.1.2.1.0	day	59-60
# ::node	0.3.0.1.1.2.2	mystery	48-49
# ::node	0.3.0.1.1.2.3	outer	49-50
# ::node	0.3.1	fold-03	10-11
# ::node	0.3.1.0	she	9-10
# ::node	0.3.1.1	clothes	12-13
# ::node	0.3.1.2	instinct	17-18
# ::node	0.3.1.2.0	natural	16-17
# ::node	0.3.1.3	partly	13-14
# ::node	0.3.1.4	and	8-9
# ::node	0.3.1.4.0	resist-01	5-6
# ::node	0.3.1.4.0.0	reason-01	7-8
# ::node	0.3.1.4.0.1	bother-01	3-4
# ::node	0.3.1.4.0.1.0	entire	27-28
# ::root	0	cause-01
# ::edge	and	op1	cause-01	0.3	0	
# ::edge	and	op1	resist-01	0.3.1.4	0.3.1.4.0	
# ::edge	and	op2	fold-03	0.3.1.4	0.3.1	
# ::edge	belong-01	ARG1	and	0.3.0	0.3	
# ::edge	belong-01	mod	indeed	0.3.0	0.3.0.0	
# ::edge	bother-01	ARG0	entire	0.3.1.4.0.1	0.3.1.4.0.1.0	
# ::edge	bother-01	ARG1	resist-01	0.3.1.4.0.1	0.3.1.4.0	
# ::edge	cause-01	ARG0	she	0	0.0	
# ::edge	cause-01	ARG1	perhaps	0	0.1	
# ::edge	cause-01	mod	partly	0	0.2	
# ::edge	day	quant	some	0.3.0.1.1.2.1.0	0.3.0.1.1.2.1	
# ::edge	doubt-01	ARG1	or	0.3.0.1.0	0.3.0.1	
# ::edge	fold-03	ARG0	she	0.3.1	0.3.1.0	
# ::edge	fold-03	ARG1	clothes	0.3.1	0.3.1.1	
# ::edge	fold-03	ARG2	and	0.3.1	0.3	
# ::edge	fold-03	ARG3	instinct	0.3.1	0.3.1.2	
# ::edge	fold-03	ARG4	partly	0.3.1	0.3.1.3	
# ::edge	instinct	mod	natural	0.3.1.2	0.3.1.2.0	
# ::edge	loan-01	ARG0	external	0.3.0.1.1	0.3.0.1.1.0	
# ::edge	loan-01	ARG0	world	0.3.0.1.1.2	0.3.0.1.1.2.0	
# ::edge	loan-01	ARG1	some	0.3.0.1.1.2	0.3.0.1.1.2.1	
# ::edge	loan-01	ARG1	they	0.3.0.1.1	0.3.0.1.1.1	
# ::edge	loan-01	ARG2	loan-01	0.3.0.1.1	0.3.0.1.1.2	
# ::edge	loan-01	mod	mystery	0.3.0.1.1.2	0.3.0.1.1.2.2	
# ::edge	loan-01	mod	outer	0.3.0.1.1.2	0.3.0.1.1.2.3	
# ::edge	or	op1	belong-01	0.3.0.1	0.3.0	
# ::edge	or	op2	loan-01	0.3.0.1	0.3.0.1.1	
# ::edge	resist-01	ARG1	reason-01	0.3.1.4.0	0.3.1.4.0.0	
(c / cause-01 
      :ARG0 (s2 / she) 
      :ARG1 (p / perhaps) 
      :mod (p2 / partly) 
      :op-of (a / and 
            :ARG1-of (b / belong-01 
                  :mod (i / indeed) 
                  :op-of (o2 / or 
                        :ARG1-of (d2 / doubt-01) 
                        :op1 (l2 / loan-01 
                              :ARG0 (e / external) 
                              :ARG1 (t / they) 
                              :ARG2 (l / loan-01 
                                    :ARG0 (w / world) 
                                    :ARG1 (s / some 
                                          :quant-of (d / day)) 
                                    :mod (m / mystery) 
                                    :mod (o / outer))))) 
            :ARG2-of (f / fold-03 
                  :ARG0 (s3 / she) 
                  :ARG1 (c2 / clothes) 
                  :ARG3 (i2 / instinct 
                        :mod (n / natural)) 
                  :ARG4 (p3 / partly) 
                  :op-of (a2 / and 
                        :op1 (r2 / resist-01 
                              :ARG1 (r / reason-01) 
                              :ARG1-of (b2 / bother-01 
                                    :ARG0 (e2 / entire)))))))

# ::snt was he worried about money mrs hatton  charlie never bothered me with things like that
# ::tok was he worried about money mrs hatton charlie never bothered me with things like that
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:30.835
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt nobody had bothered to register it until nineteen sixty six
# ::tok nobody had bothered to register it until nineteen sixty six
# ::alignments 9-10|0.0 6-7|0.1.2 5-6|0.1.1 4-5|0.1 2-3|0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:30.866
# ::node	0	bother-01	2-3
# ::node	0.0	6	9-10
# ::node	0.1	register-02	4-5
# ::node	0.1.0	nobody	0-1
# ::node	0.1.1	it	5-6
# ::node	0.1.2	until	6-7
# ::root	0	bother-01
# ::edge	bother-01	ARG0	6	0	0.0	
# ::edge	bother-01	ARG1	register-02	0	0.1	
# ::edge	register-02	ARG0	nobody	0.1	0.1.0	
# ::edge	register-02	ARG1	it	0.1	0.1.1	
# ::edge	register-02	time	until	0.1	0.1.2	
(b / bother-01 
      :ARG0 6 
      :ARG1 (r / register-02 
            :ARG0 (n / nobody) 
            :ARG1 (i / it) 
            :time (u / until)))

# ::snt she had accepted phoebes calm at face value because she had not been paying attention and because somewhere deep down she had not wanted to bother
# ::tok she had accepted phoebes calm at face value because she had not been paying attention and because somewhere deep down she had not wanted to bother
# ::alignments 25-26|0.0.0 23-24|0.0 20-21|0.0.0.0 19-20|0.0.1 18-19|0.0.1.0 17-18|0.0.1.0.0 16-17|0 15-16|0.0.2 14-15|0.0.2.0.2 13-14|0.0.2.0 9-10|0.0.2.0.0 8-9|0.0.2.0.1 7-8|0.0.2.0.1.0.1.0 6-7|0.0.2.0.1.0.1.0.0 4-5|0.0.2.0.1.0.1 2-3|0.0.2.0.1.0 0-1|0.0.2.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.143
# ::node	0	cause-01	16-17
# ::node	0.0	want-01	23-24
# ::node	0.0.0	bother-02	25-26
# ::node	0.0.0.0	she	20-21
# ::node	0.0.1	down	19-20
# ::node	0.0.1.0	deep	18-19
# ::node	0.0.1.0.0	somewhere	17-18
# ::node	0.0.2	and	15-16
# ::node	0.0.2.0	pay-01	13-14
# ::node	0.0.2.0.0	she	9-10
# ::node	0.0.2.0.1	cause-01	8-9
# ::node	0.0.2.0.1.0	accept-01	2-3
# ::node	0.0.2.0.1.0.0	she	0-1
# ::node	0.0.2.0.1.0.1	calm	4-5
# ::node	0.0.2.0.1.0.1.0	value-01	7-8
# ::node	0.0.2.0.1.0.1.0.0	face-01	6-7
# ::node	0.0.2.0.2	attention	14-15
# ::root	0	cause-01
# ::edge	accept-01	ARG0	she	0.0.2.0.1.0	0.0.2.0.1.0.0	
# ::edge	accept-01	ARG1	calm	0.0.2.0.1.0	0.0.2.0.1.0.1	
# ::edge	and	op1	pay-01	0.0.2	0.0.2.0	
# ::edge	and	op2	want-01	0.0.2	0.0	
# ::edge	bother-02	ARG0	she	0.0.0	0.0.0.0	
# ::edge	calm	topic	value-01	0.0.2.0.1.0.1	0.0.2.0.1.0.1.0	
# ::edge	cause-01	ARG0	pay-01	0.0.2.0.1	0.0.2.0	
# ::edge	cause-01	ARG0	want-01	0	0.0	
# ::edge	cause-01	ARG1	accept-01	0.0.2.0.1	0.0.2.0.1.0	
# ::edge	deep	degree	somewhere	0.0.1.0	0.0.1.0.0	
# ::edge	down	mod	deep	0.0.1	0.0.1.0	
# ::edge	pay-01	ARG0	she	0.0.2.0	0.0.2.0.0	
# ::edge	pay-01	ARG1	attention	0.0.2.0	0.0.2.0.2	
# ::edge	value-01	ARG1	face-01	0.0.2.0.1.0.1.0	0.0.2.0.1.0.1.0.0	
# ::edge	want-01	ARG1	bother-02	0.0	0.0.0	
# ::edge	want-01	mod	down	0.0	0.0.1	
(c / cause-01 
      :ARG0 (w / want-01 
            :ARG1 (b / bother-02 
                  :ARG0 (s / she)) 
            :mod (d / down 
                  :mod (d2 / deep 
                        :degree (s2 / somewhere))) 
            :op-of (a / and 
                  :op1 (p / pay-01 
                        :ARG0 (s3 / she) 
                        :ARG0-of (c2 / cause-01 
                              :ARG1 (a3 / accept-01 
                                    :ARG0 (s4 / she) 
                                    :ARG1 (c3 / calm 
                                          :topic (v / value-01 
                                                :ARG1 (f / face-01))))) 
                        :ARG1 (a2 / attention)))))

# ::snt this time it hasnt bothered me at all
# ::tok this time it hasnt bothered me at all
# ::alignments 7-8|0.2 4-5|0 2-3|0.0 1-2|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.187
# ::node	0	bother-01	4-5
# ::node	0.0	it	2-3
# ::node	0.1	time	1-2
# ::node	0.1.0	this	0-1
# ::node	0.2	all	7-8
# ::root	0	bother-01
# ::edge	bother-01	ARG0	it	0	0.0	
# ::edge	bother-01	ARG1	time	0	0.1	
# ::edge	bother-01	ARG2	all	0	0.2	
# ::edge	time	mod	this	0.1	0.1.0	
(b / bother-01 
      :ARG0 (i / it) 
      :ARG1 (t / time 
            :mod (t2 / this)) 
      :ARG2 (a / all))

# ::snt nobody bothers these days
# ::tok nobody bothers these days
# ::alignments 3-4|0.0.0+0.0 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.196
# ::node	0	bother-01	1-2
# ::node	0.0	temporal-quantity	3-4
# ::node	0.0.0	day	3-4
# ::node	0.1	nobody	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG0	temporal-quantity	0	0.0	
# ::edge	bother-01	ARG1	nobody	0	0.1	
# ::edge	temporal-quantity	unit	day	0.0	0.0.0	
(b / bother-01 
      :ARG0 (t / temporal-quantity 
            :unit (d / day)) 
      :ARG1 (n / nobody))

# ::snt he didnt bother too much where the flag was he was just interested in where he was going to land the ball
# ::tok he didnt bother too much where the flag was he was just interested in where he was going to land the ball
# ::alignments 21-22|0.1.2.1 19-20|0.1.2.0 15-16|0.1.2 12-13|0.1 11-12|0.1.0.0 9-10|0.1.1 7-8|0.1.0 4-5|0.2 3-4|0.2.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.463
# ::node	0	bother-02	2-3
# ::node	0.0	he	0-1
# ::node	0.1	interest-01	12-13
# ::node	0.1.0	flag	7-8
# ::node	0.1.0.0	just	11-12
# ::node	0.1.1	he	9-10
# ::node	0.1.2	he	15-16
# ::node	0.1.2.0	land	19-20
# ::node	0.1.2.1	ball	21-22
# ::node	0.2	much	4-5
# ::node	0.2.0	too	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG0	he	0	0.0	
# ::edge	bother-02	ARG1	interest-01	0	0.1	
# ::edge	bother-02	mod	much	0	0.2	
# ::edge	he	part	ball	0.1.2	0.1.2.1	
# ::edge	interest-01	ARG0	flag	0.1	0.1.0	
# ::edge	interest-01	ARG1	he	0.1	0.1.1	
# ::edge	interest-01	ARG2	he	0.1	0.1.2	
# ::edge	just	poss	flag	0.1.0.0	0.1.0	
# ::edge	land	ARG0	he	0.1.2.0	0.1.2	
# ::edge	much	degree	too	0.2	0.2.0	
(b2 / bother-02 
      :ARG0 (h3 / he) 
      :ARG1 (i / interest-01 
            :ARG0 (f / flag 
                  :poss-of (j / just)) 
            :ARG1 (h2 / he) 
            :ARG2 (h / he 
                  :ARG0-of (l / land) 
                  :part (b / ball))) 
      :mod (m / much 
            :degree (t / too)))

# ::snt i reckon i was the only one he bothered to talk to in the end and that was because of the library books you see
# ::tok i reckon i was the only one he bothered to talk to in the end and that was because of the library books you see
# ::alignments 24-25|0.0 23-24|0.0.0 22-23|0.0.1 21-22|0.0.1.0 18-19|0 15-16|0.1 10-11|0.1.0.0.0 8-9|0.1.0 7-8|0.1.0.0 5-6|0.1.0.0.0.0 2-3|0.1.0.1 1-2|0.1.0.1.0 0-1|0.1.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.628
# ::node	0	cause-01	18-19
# ::node	0.0	see-01	24-25
# ::node	0.0.0	you	23-24
# ::node	0.0.1	book	22-23
# ::node	0.0.1.0	library	21-22
# ::node	0.1	and	15-16
# ::node	0.1.0	bother-01	8-9
# ::node	0.1.0.0	he	7-8
# ::node	0.1.0.0.0	talk-01	10-11
# ::node	0.1.0.0.0.0	only	5-6
# ::node	0.1.0.1	i	2-3
# ::node	0.1.0.1.0	reckon-01	1-2
# ::node	0.1.0.1.0.0	i	0-1
# ::root	0	cause-01
# ::edge	and	op1	bother-01	0.1	0.1.0	
# ::edge	book	mod	library	0.0.1	0.0.1.0	
# ::edge	bother-01	ARG0	he	0.1.0	0.1.0.0	
# ::edge	bother-01	ARG1	i	0.1.0	0.1.0.1	
# ::edge	cause-01	ARG0	see-01	0	0.0	
# ::edge	cause-01	ARG1	and	0	0.1	
# ::edge	reckon-01	ARG0	i	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	reckon-01	ARG1	i	0.1.0.1.0	0.1.0.1	
# ::edge	see-01	ARG0	you	0.0	0.0.0	
# ::edge	see-01	ARG1	book	0.0	0.0.1	
# ::edge	talk-01	ARG0	he	0.1.0.0.0	0.1.0.0	
# ::edge	talk-01	ARG1	only	0.1.0.0.0	0.1.0.0.0.0	
(c / cause-01 
      :ARG0 (s / see-01 
            :ARG0 (y / you) 
            :ARG1 (b / book 
                  :mod (l / library))) 
      :ARG1 (a / and 
            :op1 (b2 / bother-01 
                  :ARG0 (h / he 
                        :ARG0-of (t / talk-01 
                              :ARG1 (o / only))) 
                  :ARG1 (i / i 
                        :ARG1-of (r / reckon-01 
                              :ARG0 (i2 / i))))))

# ::snt jack did not like flowers or rather said he was bothered by them and they were banished from the upstairs rooms
# ::tok jack did not like flowers or rather said he was bothered by them and they were banished from the upstairs rooms
# ::alignments 20-21|0.0 19-20|0 14-15|0.0.0.0.0.0 13-14|0.0.0.0 10-11|0.0.0.0.0 8-9|0.0.0.0.0.1 7-8|0.0.0 5-6|0.0.0.1 4-5|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.769
# ::node	0	upstairs	19-20
# ::node	0.0	room	20-21
# ::node	0.0.0	say-01	7-8
# ::node	0.0.0.0	and	13-14
# ::node	0.0.0.0.0	bother-01	10-11
# ::node	0.0.0.0.0.0	they	14-15
# ::node	0.0.0.0.0.1	he	8-9
# ::node	0.0.0.1	or	5-6
# ::node	0.0.0.1.0	flower	4-5
# ::root	0	upstairs
(u / upstairs 
      :mod-of (r / room 
            :ARG0-of (s / say-01 
                  :ARG1 (a / and 
                        :op1 (b / bother-01 
                              :ARG0 (t / they) 
                              :ARG1 (h / he))) 
                  :op-of (o / or 
                        :op1 (f / flower)))))

# ::snt we have been vaccinated for so long with centralisation that many employers have not been bothered with their labour costs
# ::tok we have been vaccinated for so long with centralisation that many employers have not been bothered with their labour costs
# ::alignments 19-20|0.0.0.1 18-19|0.0.0.1.0 15-16|0.0.0 10-11|0.0.0.0.0 5-6|0.0.0.0 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.824
# ::node	0	vaccinate-00	3-4
# ::node	0.0	we	0-1
# ::node	0.0.0	bother-01	15-16
# ::node	0.0.0.0	so	5-6
# ::node	0.0.0.0.0	many	10-11
# ::node	0.0.0.1	cost-01	19-20
# ::node	0.0.0.1.0	labour	18-19
# ::root	0	vaccinate-00
# ::edge	bother-01	ARG0	we	0.0.0	0.0	
# ::edge	bother-01	ARG1	so	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG2	cost-01	0.0.0	0.0.0.1	
# ::edge	cost-01	ARG1	labour	0.0.0.1	0.0.0.1.0	
# ::edge	many	degree	so	0.0.0.0.0	0.0.0.0	
# ::edge	vaccinate-00	ARG1	we	0	0.0	
(v / vaccinate-00 
      :ARG1 (w / we 
            :ARG0-of (b / bother-01 
                  :ARG1 (s / so 
                        :degree-of (m / many)) 
                  :ARG2 (c / cost-01 
                        :ARG1 (l / labour)))))

# ::snt why bother
# ::tok why bother
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.827
# ::node	0	bother-02	1-2
# ::root	0	bother-02
(b / bother-02)

# ::snt i would not bother you again only i have a last request
# ::tok i would not bother you again only i have a last request
# ::alignments 11-12|0.1.0 10-11|0.1.0.1 7-8|0.1.0.0 6-7|0.1.0.0.0 5-6|0.2 4-5|0.1 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:31.920
# ::node	0	bother-02	3-4
# ::node	0.0	i	0-1
# ::node	0.1	you	4-5
# ::node	0.1.0	request-01	11-12
# ::node	0.1.0.0	i	7-8
# ::node	0.1.0.0.0	only	6-7
# ::node	0.1.0.1	last	10-11
# ::node	0.2	again	5-6
# ::root	0	bother-02
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	you	0	0.1	
# ::edge	bother-02	mod	again	0	0.2	
# ::edge	only	mod	i	0.1.0.0.0	0.1.0.0	
# ::edge	request-01	ARG0	you	0.1.0	0.1	
# ::edge	request-01	ARG1	i	0.1.0	0.1.0.0	
# ::edge	request-01	mod	last	0.1.0	0.1.0.1	
(b / bother-02 
      :ARG0 (i2 / i) 
      :ARG1 (y / you 
            :ARG0-of (r / request-01 
                  :ARG1 (i / i 
                        :mod-of (o / only)) 
                  :mod (l / last))) 
      :mod (a / again))

# ::snt only last night a bookmaker offered me a bet of 25000 to 100 each way but i told him i wouldnt bother
# ::tok only last night a bookmaker offered me a bet of 25000 to 100 each way but i told him i wouldnt bother
# ::alignments 21-22|0.1.0.0 19-20|0.0.0.0 17-18|0.1.0 16-17|0.1 15-16|0 14-15|0.0.0.1.0 13-14|0.0.0.1 12-13|0.1.0.1 10-11|0.1.0.0.0 8-9|0.0.0 5-6|0.0 2-3|0.0.1 1-2|0.0.1.0 0-1|0.0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:32.153
# ::node	0	contrast-01	15-16
# ::node	0.0	offer-01	5-6
# ::node	0.0.0	bet-01	8-9
# ::node	0.0.0.0	i	19-20
# ::node	0.0.0.1	each	13-14
# ::node	0.0.0.1.0	way	14-15
# ::node	0.0.1	night	2-3
# ::node	0.0.1.0	last	1-2
# ::node	0.0.1.1	only	0-1
# ::node	0.1	i	16-17
# ::node	0.1.0	tell-01	17-18
# ::node	0.1.0.0	bother-02	21-22
# ::node	0.1.0.0.0	25000	10-11
# ::node	0.1.0.1	100	12-13
# ::root	0	contrast-01
# ::edge	bet-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	bet-01	ARG1	each	0.0.0	0.0.0.1	
# ::edge	bother-02	ARG1	25000	0.1.0.0	0.1.0.0.0	
# ::edge	contrast-01	ARG1	offer-01	0	0.0	
# ::edge	contrast-01	ARG2	i	0	0.1	
# ::edge	night	mod	last	0.0.1	0.0.1.0	
# ::edge	night	mod	only	0.0.1	0.0.1.1	
# ::edge	offer-01	ARG1	bet-01	0.0	0.0.0	
# ::edge	offer-01	time	night	0.0	0.0.1	
# ::edge	tell-01	ARG0	bother-02	0.1.0	0.1.0.0	
# ::edge	tell-01	ARG1	100	0.1.0	0.1.0.1	
# ::edge	tell-01	ARG2	i	0.1.0	0.1	
# ::edge	way	mod	each	0.0.0.1.0	0.0.0.1	
(c / contrast-01 
      :ARG1 (o / offer-01 
            :ARG1 (b2 / bet-01 
                  :ARG0 (i / i) 
                  :ARG1 (e / each 
                        :mod-of (w / way))) 
            :time (n / night 
                  :mod (l / last) 
                  :mod (o2 / only))) 
      :ARG2 (i2 / i 
            :ARG2-of (t / tell-01 
                  :ARG0 (b / bother-02 
                        :ARG1 25000) 
                  :ARG1 100)))

# ::snt neither did the steward bother to tell customers about the new poached salmon sandwich with chinese leaf dill and dijon mustard or the corned beef and tomato sandwich both created for the br buffet car by sir clement freud
# ::tok neither did the steward bother to tell customers about the new poached salmon sandwich with chinese leaf dill and dijon mustard or the corned beef and tomato sandwich both created for the br buffet car by sir clement freud
# ::alignments 34-35|0.0.1.0.1 29-30|0.0.1.0 28-29|0.0.1.0.0 27-28|0.2 26-27|0.2.0 25-26|0 24-25|0.0.1 21-22|0.0 18-19|0.0.0 16-17|0.1 15-16|0.0.0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0 13-14|0.0.0.1 10-11|0.0.0.1.0 7-8|0.0.0.0.2 6-7|0.0.0.0 4-5|0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:32.483
# ::node	0	and	25-26
# ::node	0.0	or	21-22
# ::node	0.0.0	and	18-19
# ::node	0.0.0.0	tell-01	6-7
# ::node	0.0.0.0.0	person	15-16
# ::node	0.0.0.0.0.0	country	15-16
# ::node	0.0.0.0.0.0.0	name	15-16
# ::node	0.0.0.0.0.0.0.0	"China"	15-16
# ::node	0.0.0.0.1	bother-02	4-5
# ::node	0.0.0.0.2	customer	7-8
# ::node	0.0.0.1	sandwich	13-14
# ::node	0.0.0.1.0	new	10-11
# ::node	0.0.1	beef	24-25
# ::node	0.0.1.0	create-01	29-30
# ::node	0.0.1.0.0	both	28-29
# ::node	0.0.1.0.1	car	34-35
# ::node	0.1	leaf	16-17
# ::node	0.2	sandwich	27-28
# ::node	0.2.0	tomato	26-27
# ::root	0	and
# ::edge	and	op1	leaf	0	0.1	
# ::edge	and	op1	or	0.0.0	0.0	
# ::edge	and	op2	sandwich	0	0.2	
# ::edge	and	part	sandwich	0.0.0	0.0.0.1	
# ::edge	bother-02	ARG1	tell-01	0.0.0.0.1	0.0.0.0	
# ::edge	country	name	name	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	create-01	ARG0	both	0.0.1.0	0.0.1.0.0	
# ::edge	create-01	ARG1	beef	0.0.1.0	0.0.1	
# ::edge	create-01	location	car	0.0.1.0	0.0.1.0.1	
# ::edge	name	op1	"China"	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	or	op1	beef	0.0	0.0.1	
# ::edge	or	op2	and	0.0	0	
# ::edge	person	mod	country	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	sandwich	mod	new	0.0.0.1	0.0.0.1.0	
# ::edge	sandwich	mod	tomato	0.2	0.2.0	
# ::edge	tell-01	ARG0	person	0.0.0.0	0.0.0.0.0	
# ::edge	tell-01	ARG1	and	0.0.0.0	0.0.0	
# ::edge	tell-01	ARG2	customer	0.0.0.0	0.0.0.0.2	
(a / and 
      :op-of (o / or 
            :op-of (a2 / and 
                  :ARG1-of (t2 / tell-01 
                        :ARG0 (p / person 
                              :mod (c3 / country 
                                    :name (n / name 
                                          :op1 "China"))) 
                        :ARG1-of (b3 / bother-02) 
                        :ARG2 (c4 / customer)) 
                  :part (s2 / sandwich 
                        :mod (n2 / new))) 
            :op1 (b2 / beef 
                  :ARG1-of (c2 / create-01 
                        :ARG0 (b / both) 
                        :location (c / car)))) 
      :op1 (l / leaf) 
      :op2 (s / sandwich 
            :mod (t / tomato)))

# ::snt we desperately need to do controlled experiments in space says smith but nasa has not bothered
# ::tok we desperately need to do controlled experiments in space says smith but nasa has not bothered
# ::alignments 15-16|0.0 11-12|0 9-10|0.0.0 8-9|0.0.0.0.0 6-7|0.0.0.0 5-6|0.0.0.0.2 2-3|0.0.0.0.1 1-2|0.0.0.0.1.1 0-1|0.0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:32.529
# ::node	0	contrast-01	11-12
# ::node	0.0	bother-01	15-16
# ::node	0.0.0	say-01	9-10
# ::node	0.0.0.0	experiment-01	6-7
# ::node	0.0.0.0.0	space	8-9
# ::node	0.0.0.0.1	need-01	2-3
# ::node	0.0.0.0.1.0	we	0-1
# ::node	0.0.0.0.1.1	desperate	1-2
# ::node	0.0.0.0.2	control-01	5-6
# ::root	0	contrast-01
(c / contrast-01 
      :ARG1-of (b / bother-01 
            :ARG1-of (s / say-01 
                  :ARG0 (e / experiment-01 
                        :ARG1 (s2 / space) 
                        :ARG1-of (n / need-01 
                              :ARG0 (w / we) 
                              :manner (d / desperate)) 
                        :ARG1-of (c2 / control-01)))))

# ::snt we mightnt have bothered
# ::tok we mightnt have bothered
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:32.534
# ::node	0	bother-01	3-4
# ::node	0.0	we	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG1	we	0	0.0	
(b / bother-01 
      :ARG1 (w / we))

# ::snt i was with him to pursue adaptations of my own work not to bother about dead playwrights and missing authors
# ::tok i was with him to pursue adaptations of my own work not to bother about dead playwrights and missing authors
# ::alignments 19-20|0.1 18-19|0.1.0 17-18|0 13-14|0.0 5-6|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:32.575
# ::node	0	and	17-18
# ::node	0.0	bother-02	13-14
# ::node	0.0.0	pursue-01	5-6
# ::node	0.0.0.0	i	0-1
# ::node	0.1	author-01	19-20
# ::node	0.1.0	miss-01	18-19
# ::root	0	and
# ::edge	and	op1	author-01	0	0.1	
# ::edge	bother-02	ARG0	and	0.0	0	
# ::edge	miss-01	ARG1	author-01	0.1.0	0.1	
# ::edge	pursue-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	pursue-01	ARG1	bother-02	0.0.0	0.0	
(a2 / and 
      :ARG0-of (b / bother-02 
            :ARG1-of (p / pursue-01 
                  :ARG0 (i / i))) 
      :op1 (a / author-01 
            :ARG1-of (m / miss-01)))

# ::snt she doesnt want to bother you with it
# ::tok she doesnt want to bother you with it
# ::alignments 7-8|0.2 5-6|0.0 4-5|0 2-3|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:32.588
# ::node	0	bother-02	4-5
# ::node	0.0	you	5-6
# ::node	0.1	want-01	2-3
# ::node	0.1.0	she	0-1
# ::node	0.2	it	7-8
# ::root	0	bother-02
# ::edge	bother-02	ARG1	you	0	0.0	
# ::edge	bother-02	ARG2	it	0	0.2	
# ::edge	want-01	ARG0	she	0.1	0.1.0	
# ::edge	want-01	ARG1	bother-02	0.1	0	
(b / bother-02 
      :ARG1 (y / you) 
      :ARG1-of (w / want-01 
            :ARG0 (s / she)) 
      :ARG2 (i / it))

# ::snt video evidence of the match is not available but englands attitude was summarised by the captain bryan robson who said were not too bothered
# ::tok video evidence of the match is not available but englands attitude was summarised by the captain bryan robson who said were not too bothered
# ::alignments 23-24|0.1 22-23|0.1.1 19-20|0 16-18|0.0.1.0+0.0.1.1+0.0.1+0.0 15-16|0.0.0.0+0.0.0 10-11|0.1.0.0.0.0.0 8-9|0.1.0.0.0.0 7-8|0.1.0.0.0 4-5|0.1.0 1-2|0.1.0.0 0-1|0.1.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:33.776
# ::node	0	say-01	19-20
# ::node	0.0	person	16-18
# ::node	0.0.0	have-org-role-91	15-16
# ::node	0.0.0.0	captain	15-16
# ::node	0.0.1	name	16-18
# ::node	0.0.1.0	"robson"	16-18
# ::node	0.0.1.1	"bryan"	16-18
# ::node	0.1	bother-01	23-24
# ::node	0.1.0	match-01	4-5
# ::node	0.1.0.0	evidence-01	1-2
# ::node	0.1.0.0.0	available	7-8
# ::node	0.1.0.0.0.0	contrast-01	8-9
# ::node	0.1.0.0.0.0.0	attitude	10-11
# ::node	0.1.0.0.1	video	0-1
# ::node	0.1.1	too	22-23
# ::root	0	say-01
# ::edge	available	domain	evidence-01	0.1.0.0.0	0.1.0.0	
# ::edge	bother-01	degree	too	0.1	0.1.1	
# ::edge	contrast-01	ARG1	available	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	contrast-01	ARG2	attitude	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	evidence-01	ARG1	match-01	0.1.0.0	0.1.0	
# ::edge	evidence-01	mod	video	0.1.0.0	0.1.0.0.1	
# ::edge	have-org-role-91	ARG0	person	0.0.0	0.0	
# ::edge	have-org-role-91	ARG2	captain	0.0.0	0.0.0.0	
# ::edge	match-01	ARG1	bother-01	0.1.0	0.1	
# ::edge	name	op1	"robson"	0.0.1	0.0.1.0	
# ::edge	name	op2	"bryan"	0.0.1	0.0.1.1	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	say-01	ARG0	person	0	0.0	
# ::edge	say-01	ARG1	bother-01	0	0.1	
(s / say-01 
      :ARG0 (p / person 
            :ARG0-of (h / have-org-role-91 
                  :ARG2 (c / captain)) 
            :name (n / name 
                  :op1 "robson" 
                  :op2 "bryan")) 
      :ARG1 (b / bother-01 
            :ARG1-of (m / match-01 
                  :ARG1-of (e / evidence-01 
                        :domain-of (a2 / available 
                              :ARG1-of (c2 / contrast-01 
                                    :ARG2 (a / attitude))) 
                        :mod (v / video))) 
            :degree (t / too)))

# ::snt we dont as a rule bother with dessert
# ::tok we dont as a rule bother with dessert
# ::alignments 5-6|0 4-5|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:33.785
# ::node	0	bother-02	5-6
# ::node	0.0	we	0-1
# ::node	0.1	rule-03	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	we	0	0.0	
# ::edge	bother-02	ARG1	rule-03	0	0.1	
(b / bother-02 
      :ARG0 (w / we) 
      :ARG1 (r / rule-03))

# ::snt at the heart of this remarkable voters onslaught was not just dismay at mr gandhi and his sordid fall from grace it rather represented a mass outpouring of contempt and disgust with ordinary indian politicians who never keep their promises and who only bother with their constituents when they need their votes
# ::tok at the heart of this remarkable voters onslaught was not just dismay at mr gandhi and his sordid fall from grace it rather represented a mass outpouring of contempt and disgust with ordinary indian politicians who never keep their promises and who only bother with their constituents when they need their votes
# ::alignments 51-52|0.1.0.2.2.0.0 49-50|0.1.0.2.2 48-49|0.1.0.2.2.0 46-47|0.1.0.0 43-44|0.1.0 42-43|0.1.0.1 40-41|0.1.0.2 39-40|0.1.0.2.1 34-35|0.1.0.2.1.0 32-33|0.1.0.2.1.0.0 30-31|0.2 29-30|0 28-29|0.1 25-26|0.1.0.2.2.1 23-24|0.1.0.2.0 21-22|0.1.0.2.0.0 20-21|0.1.0.2.0.0.0 15-16|0.1.0.2.1.1 10-11|0.2.0 7-8|0.0.1 6-7|0.0.0+0.0 5-6|0.0.1.0 4-5|0.0.1.1 2-3|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.364
# ::node	0	and	29-30
# ::node	0.0	person	6-7
# ::node	0.0.0	vote-01	6-7
# ::node	0.0.0.0	heart	2-3
# ::node	0.0.1	onslaught	7-8
# ::node	0.0.1.0	remarkable	5-6
# ::node	0.0.1.1	this	4-5
# ::node	0.1	contempt	28-29
# ::node	0.1.0	bother-02	43-44
# ::node	0.1.0.0	constituent	46-47
# ::node	0.1.0.1	only	42-43
# ::node	0.1.0.2	and	40-41
# ::node	0.1.0.2.0	represent-01	23-24
# ::node	0.1.0.2.0.0	it	21-22
# ::node	0.1.0.2.0.0.0	grace-01	20-21
# ::node	0.1.0.2.1	promise-01	39-40
# ::node	0.1.0.2.1.0	politician	34-35
# ::node	0.1.0.2.1.0.0	ordinary	32-33
# ::node	0.1.0.2.1.1	and	15-16
# ::node	0.1.0.2.2	need-01	49-50
# ::node	0.1.0.2.2.0	they	48-49
# ::node	0.1.0.2.2.0.0	vote-01	51-52
# ::node	0.1.0.2.2.1	mass	25-26
# ::node	0.2	disgust-01	30-31
# ::node	0.2.0	just	10-11
# ::root	0	and
# ::edge	and	op1	person	0	0.0	
# ::edge	and	op1	promise-01	0.1.0.2	0.1.0.2.1	
# ::edge	and	op2	bother-02	0.1.0.2	0.1.0	
# ::edge	and	op2	contempt	0	0.1	
# ::edge	and	op3	disgust-01	0	0.2	
# ::edge	and	op3	need-01	0.1.0.2	0.1.0.2.2	
# ::edge	bother-02	ARG1	contempt	0.1.0	0.1	
# ::edge	bother-02	ARG2	constituent	0.1.0	0.1.0.0	
# ::edge	bother-02	mod	only	0.1.0	0.1.0.1	
# ::edge	disgust-01	ARG1	just	0.2	0.2.0	
# ::edge	grace-01	ARG1	it	0.1.0.2.0.0.0	0.1.0.2.0.0	
# ::edge	need-01	ARG0	they	0.1.0.2.2	0.1.0.2.2.0	
# ::edge	need-01	ARG1	mass	0.1.0.2.2	0.1.0.2.2.1	
# ::edge	onslaught	mod	person	0.0.1	0.0	
# ::edge	onslaught	mod	remarkable	0.0.1	0.0.1.0	
# ::edge	onslaught	mod	this	0.0.1	0.0.1.1	
# ::edge	politician	mod	ordinary	0.1.0.2.1.0	0.1.0.2.1.0.0	
# ::edge	promise-01	ARG0	politician	0.1.0.2.1	0.1.0.2.1.0	
# ::edge	promise-01	ARG2	and	0.1.0.2.1	0.1.0.2.1.1	
# ::edge	represent-01	ARG0	and	0.1.0.2.0	0.1.0.2	
# ::edge	represent-01	ARG1	it	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	vote-01	ARG0	person	0.0.0	0.0	
# ::edge	vote-01	ARG1	heart	0.0.0	0.0.0.0	
# ::edge	vote-01	ARG1	they	0.1.0.2.2.0.0	0.1.0.2.2.0	
(a2 / and 
      :op1 (p3 / person 
            :ARG0-of (v2 / vote-01 
                  :ARG1 (h / heart)) 
            :mod-of (o3 / onslaught 
                  :mod (r2 / remarkable) 
                  :mod (t2 / this))) 
      :op2 (c2 / contempt 
            :ARG1-of (b / bother-02 
                  :ARG2 (c / constituent) 
                  :mod (o / only) 
                  :op-of (a / and 
                        :ARG0-of (r / represent-01 
                              :ARG1 (i / it 
                                    :ARG1-of (g / grace-01))) 
                        :op1 (p / promise-01 
                              :ARG0 (p2 / politician 
                                    :mod (o2 / ordinary)) 
                              :ARG2 (a3 / and)) 
                        :op2 (n / need-01 
                              :ARG0 (t / they 
                                    :ARG1-of (v / vote-01)) 
                              :ARG1 (m / mass))))) 
      :op3 (d / disgust-01 
            :ARG1 (j / just)))

# ::snt she wore it to her shoulders and there were more than a few threads of silver which bothered the children more than they did sarah
# ::tok she wore it to her shoulders and there were more than a few threads of silver which bothered the children more than they did sarah
# ::alignments 22-23|0.0.3 19-20|0.0.2 17-18|0.1.0 15-16|0.1.0.0 13-14|0.1 12-13|0.1.1 6-7|0 2-3|0.0.1 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.643
# ::node	0	and	6-7
# ::node	0.0	wear-01	1-2
# ::node	0.0.0	she	0-1
# ::node	0.0.1	it	2-3
# ::node	0.0.2	child	19-20
# ::node	0.0.3	they	22-23
# ::node	0.1	thread	13-14
# ::node	0.1.0	bother-01	17-18
# ::node	0.1.0.0	silver	15-16
# ::node	0.1.1	few	12-13
# ::root	0	and
# ::edge	and	op1	wear-01	0	0.0	
# ::edge	and	op2	thread	0	0.1	
# ::edge	bother-01	ARG0	thread	0.1.0	0.1	
# ::edge	bother-01	ARG1	silver	0.1.0	0.1.0.0	
# ::edge	they	op1	wear-01	0.0.3	0.0	
# ::edge	thread	quant	few	0.1	0.1.1	
# ::edge	wear-01	ARG0	she	0.0	0.0.0	
# ::edge	wear-01	ARG1	it	0.0	0.0.1	
# ::edge	wear-01	ARG2	child	0.0	0.0.2	
(a / and 
      :op1 (w / wear-01 
            :ARG0 (s2 / she) 
            :ARG1 (i / it) 
            :ARG2 (c / child) 
            :op-of (t / they)) 
      :op2 (t2 / thread 
            :ARG0-of (b / bother-01 
                  :ARG1 (s / silver)) 
            :quant (f / few)))

# ::snt id written you oft as another journalist who wasnt going to bother
# ::tok id written you oft as another journalist who wasnt going to bother
# ::alignments 11-12|0.2 6-7|0.4 5-6|0.4.0 3-4|0.1 2-3|0.3 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.711
# ::node	0	write-01	1-2
# ::node	0.0	id	0-1
# ::node	0.1	oft	3-4
# ::node	0.2	bother-02	11-12
# ::node	0.3	you	2-3
# ::node	0.4	journalist	6-7
# ::node	0.4.0	another	5-6
# ::root	0	write-01
# ::edge	bother-02	ARG1	write-01	0.2	0	
# ::edge	journalist	mod	another	0.4	0.4.0	
# ::edge	write-01	ARG0	id	0	0.0	
# ::edge	write-01	ARG1	oft	0	0.1	
# ::edge	write-01	ARG2	you	0	0.3	
# ::edge	write-01	medium	journalist	0	0.4	
(w / write-01 
      :ARG0 (i / id) 
      :ARG1 (o / oft) 
      :ARG1-of (b / bother-02) 
      :ARG2 (y / you) 
      :medium (j / journalist 
            :mod (a / another)))

# ::snt so why bother with the religious forms anne did bother marrying in a tiny saxon church rituals are very important to people
# ::tok so why bother with the religious forms anne did bother marrying in a tiny saxon church rituals are very important to people
# ::alignments 19-20|0.2.2 18-19|0.2.2.0 15-16|0.1 13-14|0.0 9-10|0.2 6-7|0.2.1 2-3|0 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.817
# ::node	0	bother-02	2-3
# ::node	0.0	tiny	13-14
# ::node	0.1	church	15-16
# ::node	0.2	bother-02	9-10
# ::node	0.2.0	so	0-1
# ::node	0.2.1	form	6-7
# ::node	0.2.2	important	19-20
# ::node	0.2.2.0	very	18-19
# ::root	0	bother-02
# ::edge	bother-02	ARG0	so	0.2	0.2.0	
# ::edge	bother-02	ARG0	tiny	0	0.0	
# ::edge	bother-02	ARG1	church	0	0.1	
# ::edge	bother-02	ARG1	form	0.2	0.2.1	
# ::edge	bother-02	ARG2	bother-02	0	0.2	
# ::edge	important	degree	very	0.2.2	0.2.2.0	
# ::edge	important	time	bother-02	0.2.2	0.2	
(b2 / bother-02 
      :ARG0 (t / tiny) 
      :ARG1 (c / church) 
      :ARG2 (b / bother-02 
            :ARG0 (s / so) 
            :ARG1 (f / form) 
            :time-of (i / important 
                  :degree (v / very))))

# ::snt anyway theyd never bother a couple a couple
# ::tok anyway theyd never bother a couple a couple
# ::alignments 7-8|0.0 5-6|0.1 3-4|0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.830
# ::node	0	bother-02	3-4
# ::node	0.0	couple	7-8
# ::node	0.1	couple	5-6
# ::node	0.2	anyway	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG0	couple	0	0.0	
# ::edge	bother-02	ARG1	couple	0	0.1	
# ::edge	bother-02	mod	anyway	0	0.2	
(b / bother-02 
      :ARG0 (c / couple) 
      :ARG1 (c2 / couple) 
      :mod (a / anyway))

# ::snt does the wrong sort of rehearsal bother him
# ::tok does the wrong sort of rehearsal bother him
# ::alignments 6-7|0 3-4|0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.839
# ::node	0	bother-02	6-7
# ::node	0.0	sort	3-4
# ::node	0.0.0	wrong-41	2-3
# ::root	0	bother-02
# ::edge	bother-02	mod	sort	0	0.0	
# ::edge	wrong-41	ARG1	sort	0.0.0	0.0	
(b / bother-02 
      :mod (s / sort 
            :ARG1-of (w / wrong-41)))

# ::snt dont bother with that
# ::tok dont bother with that
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.842
# ::node	0	bother-02	1-2
# ::root	0	bother-02
(b / bother-02)

# ::snt nor does the kremlin seem unduly bothered that disagreements with the americans still persist
# ::tok nor does the kremlin seem unduly bothered that disagreements with the americans still persist
# ::alignments 13-14|0.0.0 12-13|0.0.0.1 11-12|0.0.0.0.1.0.0+0.0.0.0.1.0+0.0.0.0.1+0.0.0.0 8-9|0.0.0.0.0 6-7|0.0 4-5|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.874
# ::node	0	seem-01	4-5
# ::node	0.0	bother-01	6-7
# ::node	0.0.0	persist-01	13-14
# ::node	0.0.0.0	person	11-12
# ::node	0.0.0.0.0	disagree-01	8-9
# ::node	0.0.0.0.1	country	11-12
# ::node	0.0.0.0.1.0	name	11-12
# ::node	0.0.0.0.1.0.0	"America"	11-12
# ::node	0.0.0.1	still	12-13
# ::root	0	seem-01
# ::edge	bother-01	ARG1	persist-01	0.0	0.0.0	
# ::edge	country	name	name	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	disagree-01	ARG0	person	0.0.0.0.0	0.0.0.0	
# ::edge	name	op1	"America"	0.0.0.0.1.0	0.0.0.0.1.0.0	
# ::edge	persist-01	ARG0	person	0.0.0	0.0.0.0	
# ::edge	persist-01	mod	still	0.0.0	0.0.0.1	
# ::edge	person	mod	country	0.0.0.0	0.0.0.0.1	
# ::edge	seem-01	ARG1	bother-01	0	0.0	
(s2 / seem-01 
      :ARG1 (b / bother-01 
            :ARG1 (p / persist-01 
                  :ARG0 (p2 / person 
                        :ARG0-of (d / disagree-01) 
                        :mod (c / country 
                              :name (n / name 
                                    :op1 "America"))) 
                  :mod (s / still))))

# ::snt without it some of us mightnt even bother to slither out from under the slumberdown in the mornings dash
# ::tok without it some of us mightnt even bother to slither out from under the slumberdown in the mornings dash
# ::alignments 7-8|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:34.893
# ::node	0	bother-02	7-8
# ::node	0.0	some	2-3
# ::node	0.0.0	it	1-2
# ::root	0	bother-02
# ::edge	bother-02	ARG1	some	0	0.0	
# ::edge	it	quant	some	0.0.0	0.0	
(b / bother-02 
      :ARG1 (s / some 
            :quant-of (i / it)))

# ::snt a womans voice speaking like someone trying to sell him a washing machine or a particularly unappealing flight in an aeroplane said im extremely sorry to bother you but would it be possible to speak briefly with mr harry caldecote
# ::tok a womans voice speaking like someone trying to sell him a washing machine or a particularly unappealing flight in an aeroplane said im extremely sorry to bother you but would it be possible to speak briefly with mr harry caldecote
# ::alignments 34-35|0.0.1.1.0.0 32-33|0.0.1.1.0 30-31|0.0.1.1.0.0.0 28-29|0.0.1.1 27-28|0.0.1.0 26-27|0.0.1 24-25|0.0 23-24|0.0.2 21-22|0 15-16|0.0.1.0.0.0.1.0.0.0 13-14|0.0.1.0.0.0.1 12-13|0.0.1.0.0.0.1.0 11-12|0.0.1.0.0.0.1.0.0 8-9|0.0.1.0.0.0 6-7|0.0.1.0.0 5-6|0.0.1.0.0.0.0 3-4|0.0.1.0.0.0.0.0 2-3|0.0.1.0.0.0.0.0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:35.390
# ::node	0	say-01	21-22
# ::node	0.0	sorry-41	24-25
# ::node	0.0.0	woman	1-2
# ::node	0.0.1	bother-02	26-27
# ::node	0.0.1.0	you	27-28
# ::node	0.0.1.0.0	try-01	6-7
# ::node	0.0.1.0.0.0	sell-01	8-9
# ::node	0.0.1.0.0.0.0	someone	5-6
# ::node	0.0.1.0.0.0.0.0	speak-01	3-4
# ::node	0.0.1.0.0.0.0.0.0	voice	2-3
# ::node	0.0.1.0.0.0.1	or	13-14
# ::node	0.0.1.0.0.0.1.0	machine	12-13
# ::node	0.0.1.0.0.0.1.0.0	wash-01	11-12
# ::node	0.0.1.0.0.0.1.0.0.0	particular	15-16
# ::node	0.0.1.1	contrast-01	28-29
# ::node	0.0.1.1.0	possible	32-33
# ::node	0.0.1.1.0.0	speak-01	34-35
# ::node	0.0.1.1.0.0.0	it	30-31
# ::node	0.0.2	extreme	23-24
# ::root	0	say-01
# ::edge	bother-02	ARG1	you	0.0.1	0.0.1.0	
# ::edge	contrast-01	ARG1	bother-02	0.0.1.1	0.0.1	
# ::edge	contrast-01	ARG2	possible	0.0.1.1	0.0.1.1.0	
# ::edge	or	op1	machine	0.0.1.0.0.0.1	0.0.1.0.0.0.1.0	
# ::edge	possible	domain	speak-01	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	say-01	ARG1	sorry-41	0	0.0	
# ::edge	sell-01	ARG0	someone	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	sell-01	ARG2	or	0.0.1.0.0.0	0.0.1.0.0.0.1	
# ::edge	sorry-41	ARG0	woman	0.0	0.0.0	
# ::edge	sorry-41	ARG1	bother-02	0.0	0.0.1	
# ::edge	sorry-41	degree	extreme	0.0	0.0.2	
# ::edge	speak-01	ARG0	it	0.0.1.1.0.0	0.0.1.1.0.0.0	
# ::edge	speak-01	ARG0	someone	0.0.1.0.0.0.0.0	0.0.1.0.0.0.0	
# ::edge	speak-01	ARG1	voice	0.0.1.0.0.0.0.0	0.0.1.0.0.0.0.0.0	
# ::edge	try-01	ARG0	you	0.0.1.0.0	0.0.1.0	
# ::edge	try-01	ARG1	sell-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	wash-01	ARG0	machine	0.0.1.0.0.0.1.0.0	0.0.1.0.0.0.1.0	
# ::edge	wash-01	ARG1	particular	0.0.1.0.0.0.1.0.0	0.0.1.0.0.0.1.0.0.0	
(s3 / say-01 
      :ARG1 (s2 / sorry-41 
            :ARG0 (w2 / woman) 
            :ARG1 (b / bother-02 
                  :ARG1 (y / you 
                        :ARG0-of (t / try-01 
                              :ARG1 (s4 / sell-01 
                                    :ARG0 (s5 / someone 
                                          :ARG0-of (s6 / speak-01 
                                                :ARG1 (v / voice))) 
                                    :ARG2 (o / or 
                                          :op1 (m / machine 
                                                :ARG0-of (w / wash-01 
                                                      :ARG1 (p2 / particular))))))) 
                  :ARG1-of (c / contrast-01 
                        :ARG2 (p / possible 
                              :domain (s / speak-01 
                                    :ARG0 (i / it))))) 
            :degree (e / extreme)))

# ::snt they know theres people sleeping rough and they dont really bother you
# ::tok they know theres people sleeping rough and they dont really bother you
# ::alignments 11-12|0.1 10-11|0 9-10|0.2 7-8|0.0 6-7|0.3 5-6|0.3.0.0.0.0 4-5|0.3.0.0.0 1-2|0.3.0 0-1|0.3.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:35.423
# ::node	0	bother-02	10-11
# ::node	0.0	they	7-8
# ::node	0.1	you	11-12
# ::node	0.2	really	9-10
# ::node	0.3	and	6-7
# ::node	0.3.0	know-01	1-2
# ::node	0.3.0.0	they	0-1
# ::node	0.3.0.0.0	sleep-01	4-5
# ::node	0.3.0.0.0.0	rough	5-6
# ::root	0	bother-02
# ::edge	and	op1	bother-02	0.3	0	
# ::edge	bother-02	ARG0	they	0	0.0	
# ::edge	bother-02	ARG1	you	0	0.1	
# ::edge	bother-02	degree	really	0	0.2	
# ::edge	know-01	ARG0	they	0.3.0	0.3.0.0	
# ::edge	know-01	ARG1	and	0.3.0	0.3	
# ::edge	sleep-01	ARG0	they	0.3.0.0.0	0.3.0.0	
# ::edge	sleep-01	ARG1	rough	0.3.0.0.0	0.3.0.0.0.0	
(b / bother-02 
      :ARG0 (t / they) 
      :ARG1 (y / you) 
      :degree (r / really) 
      :op-of (a / and 
            :ARG1-of (k / know-01 
                  :ARG0 (t2 / they 
                        :ARG0-of (s / sleep-01 
                              :ARG1 (r2 / rough))))))

# ::snt nobody seemed particulary bothered
# ::tok nobody seemed particulary bothered
# ::alignments 3-4|0.0 1-2|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:35.430
# ::node	0	seem-01	1-2
# ::node	0.0	bother-01	3-4
# ::node	0.0.0	nobody	0-1
# ::root	0	seem-01
# ::edge	bother-01	ARG1	nobody	0.0	0.0.0	
# ::edge	seem-01	ARG1	bother-01	0	0.0	
(s / seem-01 
      :ARG1 (b / bother-01 
            :ARG1 (n / nobody)))

# ::snt on the way out i have a few words with lindsey the nursery supervisor about any thing that might be bothering yasmin that day
# ::tok on the way out i have a few words with lindsey the nursery supervisor about any thing that might be bothering yasmin that day
# ::alignments 23-24|0.0.2.1 20-21|0.0.1.0 16-17|0.0.1 15-16|0.0.1.1 13-14|0.0 12-13|0 8-9|0.0.0 7-8|0.0.0.0 4-5|0.0.2.0 2-3|0.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:35.561
# ::node	0	nursery	12-13
# ::node	0.0	supervise-01	13-14
# ::node	0.0.0	word	8-9
# ::node	0.0.0.0	few	7-8
# ::node	0.0.1	thing	16-17
# ::node	0.0.1.0	bother-01	20-21
# ::node	0.0.1.1	any	15-16
# ::node	0.0.2	way	2-3
# ::node	0.0.2.0	i	4-5
# ::node	0.0.2.1	day	23-24
# ::root	0	nursery
(n / nursery 
      :ARG1-of (s / supervise-01 
            :ARG0 (w / word 
                  :quant (f / few)) 
            :ARG2 (t / thing 
                  :ARG1-of (b / bother-01) 
                  :mod (a / any)) 
            :domain-of (w2 / way 
                  :poss (i / i) 
                  :poss-of (d / day))))

# ::snt this is what really gets my goat about this place what is the point of bothering to use different coloured chalks when the vegetables all come sprinkled with the same chopped parsley and the oil that dresses the leeks renders them inedible
# ::tok this is what really gets my goat about this place what is the point of bothering to use different coloured chalks when the vegetables all come sprinkled with the same chopped parsley and the oil that dresses the leeks renders them inedible
# ::alignments 34-35|0.3 32-33|0 29-30|0.1 24-25|0.2.0 18-19|0.0 17-18|0.2 15-16|0.2.1 13-14|0.2.1.1 9-10|0.1.0.0 8-9|0.1.0 3-4|0.1.1 0-1|0.2.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:35.720
# ::node	0	and	32-33
# ::node	0.0	differ-02	18-19
# ::node	0.1	same-41	29-30
# ::node	0.1.0	this	8-9
# ::node	0.1.0.0	place	9-10
# ::node	0.1.1	really	3-4
# ::node	0.2	use-01	17-18
# ::node	0.2.0	all	24-25
# ::node	0.2.1	bother-01	15-16
# ::node	0.2.1.0	this	0-1
# ::node	0.2.1.1	point	13-14
# ::node	0.3	oil	34-35
# ::root	0	and
# ::edge	and	op1	use-01	0	0.2	
# ::edge	and	op2	oil	0	0.3	
# ::edge	bother-01	ARG0	this	0.2.1	0.2.1.0	
# ::edge	bother-01	ARG1	use-01	0.2.1	0.2	
# ::edge	differ-02	ARG1	and	0.0	0	
# ::edge	place	mod	this	0.1.0.0	0.1.0	
# ::edge	point	mod	bother-01	0.2.1.1	0.2.1	
# ::edge	same-41	ARG0	this	0.1	0.1.0	
# ::edge	same-41	ARG1	and	0.1	0	
# ::edge	same-41	mod	really	0.1	0.1.1	
# ::edge	use-01	ARG0	all	0.2	0.2.0	
(a / and 
      :ARG1-of (d / differ-02) 
      :ARG1-of (s / same-41 
            :ARG0 (t / this 
                  :mod-of (p2 / place)) 
            :mod (r / really)) 
      :op1 (u / use-01 
            :ARG0 (a2 / all) 
            :ARG1-of (b / bother-01 
                  :ARG0 (t2 / this) 
                  :mod-of (p / point))) 
      :op2 (o / oil))

# ::snt if it took just money to win the whitbread round the world race and many think that is probably the case then all but four of the 23 yachts crossing the start line of the third leg here today may as well not bother to flog the next 3600 miles to auckland
# ::tok if it took just money to win the whitbread round the world race and many think that is probably the case then all but four of the 23 yachts crossing the start line of the third leg here today may as well not bother to flog the next 3600 miles to auckland
# ::alignments 49-50|0.1.0.0.0.0.1.0.0.1+0.1.0.0.0.0.1.0.0 48-49|0.1.0.0.0.0.1.0.0.0 47-48|0.1.0.0.0.0.0 43-44|0.1.0.0.0.0.1.0 41-42|0.1.0.0.0.0.1.0.2 39-40|0.1.0.0.0.0.1.0.1.0+0.1.0.0.0.0.1.0.1 38-39|0.1.0.0.1 37-38|0.1.0.0.0.0.1.2.0.0 36-37|0.1.0.0.0.0.1.2.0 32-33|0.1.0.0.0 31-32|0.1.0.0.0.0 29-30|0.1.0.0 28-29|0.1.0 27-28|0.1.0.0.0.0.1.2.1.1.2 24-25|0.3 23-24|0 22-23|0.1 21-22|0.0 20-21|0.2.0 18-19|0.2 15-16|0.1.0.0.0.0.1.2 14-15|0.1.0.0.0.0.1.2.2 13-14|0.1.0.0.0.0.1 12-13|0.1.0.0.0.0.1.1 11-12|0.1.0.0.0.0.1.1.0 9-10|0.1.0.0.0.0.1.2.1.1.1 6-7|0.1.0.0.0.0.1.2.1.1 4-5|0.1.0.0.0.0.1.2.1 3-4|0.1.0.0.0.0.1.2.1.0 1-2|0.1.0.0.0.0.1.2.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.053
# ::node	0	contrast-01	23-24
# ::node	0.0	then	21-22
# ::node	0.1	all	22-23
# ::node	0.1.0	yacht	28-29
# ::node	0.1.0.0	cross-02	29-30
# ::node	0.1.0.0.0	line	32-33
# ::node	0.1.0.0.0.0	start-01	31-32
# ::node	0.1.0.0.0.0.0	next	47-48
# ::node	0.1.0.0.0.0.1	and	13-14
# ::node	0.1.0.0.0.0.1.0	bother-02	43-44
# ::node	0.1.0.0.0.0.1.0.0	distance-quantity	49-50
# ::node	0.1.0.0.0.0.1.0.0.0	3600	48-49
# ::node	0.1.0.0.0.0.1.0.0.1	mile	49-50
# ::node	0.1.0.0.0.0.1.0.1	date-entity	39-40
# ::node	0.1.0.0.0.0.1.0.1.0	5	39-40
# ::node	0.1.0.0.0.0.1.0.2	well	41-42
# ::node	0.1.0.0.0.0.1.1	race	12-13
# ::node	0.1.0.0.0.0.1.1.0	world	11-12
# ::node	0.1.0.0.0.0.1.2	think-01	15-16
# ::node	0.1.0.0.0.0.1.2.0	leg	36-37
# ::node	0.1.0.0.0.0.1.2.0.0	here	37-38
# ::node	0.1.0.0.0.0.1.2.1	money	4-5
# ::node	0.1.0.0.0.0.1.2.1.0	just	3-4
# ::node	0.1.0.0.0.0.1.2.1.1	win-01	6-7
# ::node	0.1.0.0.0.0.1.2.1.1.0	it	1-2
# ::node	0.1.0.0.0.0.1.2.1.1.1	round	9-10
# ::node	0.1.0.0.0.0.1.2.1.1.2	23	27-28
# ::node	0.1.0.0.0.0.1.2.2	many	14-15
# ::node	0.1.0.0.1	today	38-39
# ::node	0.2	probable	18-19
# ::node	0.2.0	case	20-21
# ::node	0.3	4	24-25
# ::root	0	contrast-01
# ::edge	23	op1	win-01	0.1.0.0.0.0.1.2.1.1.2	0.1.0.0.0.0.1.2.1.1	
# ::edge	and	op1	race	0.1.0.0.0.0.1	0.1.0.0.0.0.1.1	
# ::edge	and	op2	think-01	0.1.0.0.0.0.1	0.1.0.0.0.0.1.2	
# ::edge	and	op3	start-01	0.1.0.0.0.0.1	0.1.0.0.0.0	
# ::edge	bother-02	ARG0	and	0.1.0.0.0.0.1.0	0.1.0.0.0.0.1	
# ::edge	bother-02	ARG1	distance-quantity	0.1.0.0.0.0.1.0	0.1.0.0.0.0.1.0.0	
# ::edge	bother-02	condition	date-entity	0.1.0.0.0.0.1.0	0.1.0.0.0.0.1.0.1	
# ::edge	bother-02	mod	well	0.1.0.0.0.0.1.0	0.1.0.0.0.0.1.0.2	
# ::edge	case	time	probable	0.2.0	0.2	
# ::edge	contrast-01	ARG0	then	0	0.0	
# ::edge	contrast-01	ARG1	all	0	0.1	
# ::edge	contrast-01	ARG2	probable	0	0.2	
# ::edge	contrast-01	ARG4	4	0	0.3	
# ::edge	cross-02	ARG0	yacht	0.1.0.0	0.1.0	
# ::edge	cross-02	ARG1	line	0.1.0.0	0.1.0.0.0	
# ::edge	cross-02	time	today	0.1.0.0	0.1.0.0.1	
# ::edge	date-entity	month	5	0.1.0.0.0.0.1.0.1	0.1.0.0.0.0.1.0.1.0	
# ::edge	distance-quantity	quant	3600	0.1.0.0.0.0.1.0.0	0.1.0.0.0.0.1.0.0.0	
# ::edge	distance-quantity	unit	mile	0.1.0.0.0.0.1.0.0	0.1.0.0.0.0.1.0.0.1	
# ::edge	leg	location	here	0.1.0.0.0.0.1.2.0	0.1.0.0.0.0.1.2.0.0	
# ::edge	money	mod	just	0.1.0.0.0.0.1.2.1	0.1.0.0.0.0.1.2.1.0	
# ::edge	money	purpose	win-01	0.1.0.0.0.0.1.2.1	0.1.0.0.0.0.1.2.1.1	
# ::edge	race	mod	world	0.1.0.0.0.0.1.1	0.1.0.0.0.0.1.1.0	
# ::edge	start-01	ARG0	line	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	start-01	ARG1	next	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	think-01	ARG0	leg	0.1.0.0.0.0.1.2	0.1.0.0.0.0.1.2.0	
# ::edge	think-01	ARG1	money	0.1.0.0.0.0.1.2	0.1.0.0.0.0.1.2.1	
# ::edge	think-01	quant	many	0.1.0.0.0.0.1.2	0.1.0.0.0.0.1.2.2	
# ::edge	win-01	ARG0	it	0.1.0.0.0.0.1.2.1.1	0.1.0.0.0.0.1.2.1.1.0	
# ::edge	win-01	ARG1	round	0.1.0.0.0.0.1.2.1.1	0.1.0.0.0.0.1.2.1.1.1	
# ::edge	yacht	quant	all	0.1.0	0.1	
(c2 / contrast-01 
      :ARG0 (t2 / then) 
      :ARG1 (a / all 
            :quant-of (y / yacht 
                  :ARG0-of (c / cross-02 
                        :ARG1 (l2 / line 
                              :ARG0-of (s / start-01 
                                    :ARG1 (n / next) 
                                    :op-of (a2 / and 
                                          :ARG0-of (b / bother-02 
                                                :ARG1 (d / distance-quantity 
                                                      :quant 3600 
                                                      :unit (m / mile)) 
                                                :condition (d2 / date-entity 
                                                      :month 5) 
                                                :mod (w / well)) 
                                          :op1 (r / race 
                                                :mod (w2 / world)) 
                                          :op2 (t3 / think-01 
                                                :ARG0 (l / leg 
                                                      :location (h / here)) 
                                                :ARG1 (m3 / money 
                                                      :mod (j / just) 
                                                      :purpose (w3 / win-01 
                                                            :ARG0 (i / it) 
                                                            :ARG1 (r2 / round) 
                                                            :op-of 23)) 
                                                :quant (m2 / many))))) 
                        :time (t / today)))) 
      :ARG2 (p / probable 
            :time-of (c3 / case)) 
      :ARG4 4)

# ::snt the poll was declared null and void after less than the statutory 50 per cent of the electorate bothered to turn out to vote
# ::tok the poll was declared null and void after less than the statutory 50 per cent of the electorate bothered to turn out to vote
# ::alignments 23-24|0 18-19|0.0.0 17-18|0.0 14-15|0.0.1+0.0.1.0 12-13|0.1.0 8-9|0.1.1.1.0 7-8|0.1.1.1 6-7|0.1.1.0.1 5-6|0.1.1.0 4-5|0.1.1.0.0 3-4|0.1.1 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.281
# ::node	0	vote-01	23-24
# ::node	0.0	electorate	17-18
# ::node	0.0.0	bother-01	18-19
# ::node	0.0.1	cent	14-15
# ::node	0.0.1.0	monetary-quantity	14-15
# ::node	0.1	poll-01	1-2
# ::node	0.1.0	50	12-13
# ::node	0.1.1	declare-02	3-4
# ::node	0.1.1.0	and	5-6
# ::node	0.1.1.0.0	null	4-5
# ::node	0.1.1.0.1	void	6-7
# ::node	0.1.1.1	after	7-8
# ::node	0.1.1.1.0	less	8-9
# ::root	0	vote-01
# ::edge	and	op1	null	0.1.1.0	0.1.1.0.0	
# ::edge	and	op2	void	0.1.1.0	0.1.1.0.1	
# ::edge	bother-01	ARG1	electorate	0.0.0	0.0	
# ::edge	cent	location	electorate	0.0.1	0.0	
# ::edge	declare-02	ARG1	poll-01	0.1.1	0.1	
# ::edge	declare-02	ARG2	and	0.1.1	0.1.1.0	
# ::edge	declare-02	time	after	0.1.1	0.1.1.1	
# ::edge	less	mod	after	0.1.1.1.0	0.1.1.1	
# ::edge	monetary-quantity	unit	cent	0.0.1.0	0.0.1	
# ::edge	poll-01	ARG0	50	0.1	0.1.0	
# ::edge	poll-01	ARG1	vote-01	0.1	0	
# ::edge	vote-01	ARG0	electorate	0	0.0	
(v / vote-01 
      :ARG0 (e / electorate 
            :ARG1-of (b / bother-01) 
            :location-of (c / cent 
                  :unit-of (m / monetary-quantity))) 
      :ARG1-of (p / poll-01 
            :ARG0 50 
            :ARG1-of (d / declare-02 
                  :ARG2 (a2 / and 
                        :op1 (n / null) 
                        :op2 (v2 / void)) 
                  :time (a / after 
                        :mod-of (l / less)))))

# ::snt   i shouldnt bother said brian everthorpe
# ::tok i shouldnt bother said brian everthorpe
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.282
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt looks per se dont bother me
# ::tok looks per se dont bother me
# ::alignments 4-5|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.290
# ::node	0	bother-02	4-5
# ::node	0.0	look-02	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG1	look-02	0	0.0	
(b / bother-02 
      :ARG1 (l / look-02))

# ::snt where did he put the gum while the reed was in his mouth  its the kind of thing the audience would have been bothered by at a less exciting gig
# ::tok where did he put the gum while the reed was in his mouth its the kind of thing the audience would have been bothered by at a less exciting gig
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.291
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt was he attracted by women  the fact that he had not so far been had bothered toby till this moment not a whit
# ::tok was he attracted by women the fact that he had not so far been had bothered toby till this moment not a whit
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.292
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the police had taken the two notebooks from her scarcely bothering to complain that she had removed them from the squat
# ::tok the police had taken the two notebooks from her scarcely bothering to complain that she had removed them from the squat
# ::alignments 16-17|0 14-15|0.0 12-13|0.2 10-11|0.2.0 9-10|0.2.0.1 5-6|0.1 1-2|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.351
# ::node	0	remove-01	16-17
# ::node	0.0	she	14-15
# ::node	0.1	2	5-6
# ::node	0.2	complain-01	12-13
# ::node	0.2.0	bother-01	10-11
# ::node	0.2.0.0	police	1-2
# ::node	0.2.0.1	scarcely-more-than	9-10
# ::root	0	remove-01
# ::edge	bother-01	ARG0	police	0.2.0	0.2.0.0	
# ::edge	bother-01	ARG1	complain-01	0.2.0	0.2	
# ::edge	bother-01	manner	scarcely-more-than	0.2.0	0.2.0.1	
# ::edge	complain-01	ARG1	remove-01	0.2	0	
# ::edge	remove-01	ARG0	she	0	0.0	
# ::edge	remove-01	ARG1	2	0	0.1	
(r / remove-01 
      :ARG0 (s / she) 
      :ARG1 2 
      :ARG1-of (c / complain-01 
            :ARG1-of (b / bother-01 
                  :ARG0 (p / police) 
                  :manner (s2 / scarcely-more-than))))

# ::snt he did not bother to shut it letting it swing open behind him
# ::tok he did not bother to shut it letting it swing open behind him
# ::alignments 11-12|0.1.1 8-9|0.1.0 7-8|0.1 6-7|0.0.0.0 5-6|0.0.0 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.471
# ::node	0	bother-02	3-4
# ::node	0.0	he	0-1
# ::node	0.0.0	shut-05	5-6
# ::node	0.0.0.0	it	6-7
# ::node	0.1	let-01	7-8
# ::node	0.1.0	it	8-9
# ::node	0.1.1	behind	11-12
# ::root	0	bother-02
# ::edge	bother-02	ARG0	he	0	0.0	
# ::edge	bother-02	ARG1	let-01	0	0.1	
# ::edge	let-01	ARG0	it	0.1	0.1.0	
# ::edge	let-01	ARG1	behind	0.1	0.1.1	
# ::edge	shut-05	ARG0	he	0.0.0	0.0	
# ::edge	shut-05	ARG1	it	0.0.0	0.0.0.0	
(b2 / bother-02 
      :ARG0 (h / he 
            :ARG0-of (s / shut-05 
                  :ARG1 (i2 / it))) 
      :ARG1 (l / let-01 
            :ARG0 (i / it) 
            :ARG1 (b / behind)))

# ::snt midanis own views on uniteds management are private but it is not too difficult to foresee that a manager who has worked abroad and bothered to learn the language like kendall would have appeal to a man who has business interests in spain and is cosmopolitan in his outlook
# ::tok midanis own views on uniteds management are private but it is not too difficult to foresee that a manager who has worked abroad and bothered to learn the language like kendall would have appeal to a man who has business interests in spain and is cosmopolitan in his outlook
# ::alignments 48-49|0.2.0.0 43-44|0.2.0.2.0.0.0.0.0.0 40-41|0.2.0.2.0.0.0.0.0.0.0 39-40|0.2.0.2.0.0.0.1 36-37|0.2.0.2.0.0.0.0.0 33-34|0.2.0.2.0.0.0.0 28-29|0.2.0.1 26-27|0.2.0 24-25|0.2.0.2 23-24|0.2.0.2.0 22-23|0.2.0.2.0.0.1 21-22|0.2.0.2.0.0 18-19|0.2.0.2.0.0.0 13-14|0.1 12-13|0.1.0 9-10|0.1.1 8-9|0 7-8|0.0 5-6|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.804
# ::node	0	contrast-01	8-9
# ::node	0.0	private	7-8
# ::node	0.1	difficult	13-14
# ::node	0.1.0	too	12-13
# ::node	0.1.1	it	9-10
# ::node	0.2	manage-01	5-6
# ::node	0.2.0	learn-01	26-27
# ::node	0.2.0.0	outlook	48-49
# ::node	0.2.0.1	language	28-29
# ::node	0.2.0.2	bother-01	24-25
# ::node	0.2.0.2.0	and	23-24
# ::node	0.2.0.2.0.0	work-01	21-22
# ::node	0.2.0.2.0.0.0	manage-01	18-19
# ::node	0.2.0.2.0.0.0.0	appeal-02	33-34
# ::node	0.2.0.2.0.0.0.0.0	man	36-37
# ::node	0.2.0.2.0.0.0.0.0.0	and	43-44
# ::node	0.2.0.2.0.0.0.0.0.0.0	interest	40-41
# ::node	0.2.0.2.0.0.0.1	business	39-40
# ::node	0.2.0.2.0.0.1	abroad	22-23
# ::root	0	contrast-01
# ::edge	and	op1	man	0.2.0.2.0.0.0.0.0.0	0.2.0.2.0.0.0.0.0	
# ::edge	and	op1	work-01	0.2.0.2.0	0.2.0.2.0.0	
# ::edge	and	op2	bother-01	0.2.0.2.0	0.2.0.2	
# ::edge	and	op2	interest	0.2.0.2.0.0.0.0.0.0	0.2.0.2.0.0.0.0.0.0.0	
# ::edge	appeal-02	ARG0	manage-01	0.2.0.2.0.0.0.0	0.2.0.2.0.0.0	
# ::edge	appeal-02	ARG1	man	0.2.0.2.0.0.0.0	0.2.0.2.0.0.0.0.0	
# ::edge	bother-01	ARG1	learn-01	0.2.0.2	0.2.0	
# ::edge	contrast-01	ARG1	private	0	0.0	
# ::edge	contrast-01	ARG2	difficult	0	0.1	
# ::edge	contrast-01	ARG3	manage-01	0	0.2	
# ::edge	difficult	degree	too	0.1	0.1.0	
# ::edge	difficult	domain	it	0.1	0.1.1	
# ::edge	learn-01	ARG0	outlook	0.2.0	0.2.0.0	
# ::edge	learn-01	ARG1	language	0.2.0	0.2.0.1	
# ::edge	manage-01	ARG1	business	0.2.0.2.0.0.0	0.2.0.2.0.0.0.1	
# ::edge	manage-01	ARG1	learn-01	0.2	0.2.0	
# ::edge	work-01	ARG1	manage-01	0.2.0.2.0.0	0.2.0.2.0.0.0	
# ::edge	work-01	location	abroad	0.2.0.2.0.0	0.2.0.2.0.0.1	
(c / contrast-01 
      :ARG1 (p / private) 
      :ARG2 (d / difficult 
            :degree (t / too) 
            :domain (i2 / it)) 
      :ARG3 (m3 / manage-01 
            :ARG1 (l2 / learn-01 
                  :ARG0 (o / outlook) 
                  :ARG1 (l / language) 
                  :ARG1-of (b2 / bother-01 
                        :op-of (a3 / and 
                              :op1 (w / work-01 
                                    :ARG1 (m2 / manage-01 
                                          :ARG0-of (a2 / appeal-02 
                                                :ARG1 (m / man 
                                                      :op-of (a / and 
                                                            :op1 (i / interest)))) 
                                          :ARG1 (b / business)) 
                                    :location (a4 / abroad)))))))

# ::snt   and because that was true he did not bother to walk back up the drive and peep through the window with its clear view of the typewriter on the table
# ::tok and because that was true he did not bother to walk back up the drive and peep through the window with its clear view of the typewriter on the table
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.805
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt and no one seemed too bothered
# ::tok and no one seemed too bothered
# ::alignments 5-6|0.1 4-5|0.1.1 3-4|0 1-2|0.1.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.817
# ::node	0	seem-01	3-4
# ::node	0.0	and	0-1
# ::node	0.1	bother-01	5-6
# ::node	0.1.0	-	1-2
# ::node	0.1.1	too	4-5
# ::root	0	seem-01
# ::edge	bother-01	ARG1	-	0.1	0.1.0	
# ::edge	bother-01	degree	too	0.1	0.1.1	
# ::edge	seem-01	ARG0	and	0	0.0	
# ::edge	seem-01	ARG1	bother-01	0	0.1	
(s / seem-01 
      :ARG0 (a / and) 
      :ARG1 (b / bother-01 
            :ARG1 (- / -) 
            :degree (t / too)))

# ::snt im terribly sorry to bother you michael but something awful has happened
# ::tok im terribly sorry to bother you michael but something awful has happened
# ::alignments 11-12|0.0 9-10|0.0.0 8-9|0.0.1 7-8|0 5-6|0.1.1 4-5|0.1 2-3|0.1.0 1-2|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:37.909
# ::node	0	contrast-01	7-8
# ::node	0.0	happen-01	11-12
# ::node	0.0.0	awful	9-10
# ::node	0.0.1	something	8-9
# ::node	0.1	bother-02	4-5
# ::node	0.1.0	sorry-41	2-3
# ::node	0.1.0.0	terrible	1-2
# ::node	0.1.1	you	5-6
# ::root	0	contrast-01
# ::edge	bother-02	ARG1	contrast-01	0.1	0	
# ::edge	bother-02	ARG2	you	0.1	0.1.1	
# ::edge	contrast-01	ARG1	happen-01	0	0.0	
# ::edge	happen-01	ARG0	awful	0.0	0.0.0	
# ::edge	happen-01	ARG1	something	0.0	0.0.1	
# ::edge	sorry-41	ARG1	bother-02	0.1.0	0.1	
# ::edge	sorry-41	degree	terrible	0.1.0	0.1.0.0	
(c / contrast-01 
      :ARG1 (h / happen-01 
            :ARG0 (a / awful) 
            :ARG1 (s / something)) 
      :ARG1-of (b / bother-02 
            :ARG1-of (s2 / sorry-41 
                  :degree (t / terrible)) 
            :ARG2 (y / you)))

# ::snt what that exhibition in fact is doing is that its not saying heres a new spirit in painting its saying that we the organizers having not bothered to show you these things in the sixties and seventies will now allow you to see them in the eighties and we will pretend theres a new spirit because we think its good for the art world to have new fashions new movements or at least something new going on that will produce some kind of emotional pressure
# ::tok what that exhibition in fact is doing is that its not saying heres a new spirit in painting its saying that we the organizers having not bothered to show you these things in the sixties and seventies will now allow you to see them in the eighties and we will pretend theres a new spirit because we think its good for the art world to have new fashions new movements or at least something new going on that will produce some kind of emotional pressure
# ::alignments 84-85|0.0.0.0.0.0.1.0.0.1.0 83-84|0.0.0.0.0.0.1.0.0.1.0.2 81-82|0.0.0.0.0.0.1.0.0.1.0.1 80-81|0.0.0.0.0.0.1.0.0.1.0.1.1 79-80|0.0.0.0.0.0.1.0.0.1.0.1.0 74-75|0.0.0.0.0.0.1.0.0.2.0.1 73-74|0.0.0.0.0.0.1.0.0.1.0.1.0.0 70-71|0.0.0.0.0.0.1.0.0.2.0.0.0.2 69-70|0.0.0.0.0.0.1.0.0.2.0.0.0 68-69|0.0.0.0.0.0.1.0.0.2.0.0.0.1 66-67|0.0.0.0.0.0.1.0.0.2.0.0.0.1.0 63-64|0.0.0.0.0.0.1.0.0.1 62-63|0.0.0.0.0.0.1.0.0.1.1 59-60|0.0.0.0.0.0.1.0.0.1.0.0 57-58|0.0.0.0.0.0.1.0.0.2.0.0.0.0.0 56-57|0.0.0.0.0.0.1.0.0.2.0.0.0.0 55-56|0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.0 54-55|0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.1 53-54|0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.1.0 50-51|0.0.0.0.0.0.1.0.0.2.0 48-49|0.0.0.0.0.0.1.0.0.2.0.0 47-48|0.0.0.0.0.0.1.0.0.2 42-43|0.0.0.0.0.0.1.0.0 40-41|0.0.0.0.0.0.1.0.0.0 39-40|0.0.0.0.0.0.1.0 38-39|0.0.0.0.0.0.1.0.1 35-36|0.0.0.0.0.0.1.2 31-32|0.0.0.0.0.0.1 29-30|0.0.0.0.0.0.0 28-29|0.0.0.0.0.0 26-27|0.0.0.0.0 23-24|0.0.0+0.0 21-22|0.0.0.0 19-20|0 17-18|0.1 15-16|0.1.0 14-15|0.1.0.0 11-12|0.0.0.0.0.0.1.2.0 6-7|0.0.0.0.0.0.1.1 4-5|0.0.0.0.0.0.1.1.0.0 2-3|0.0.0.0.0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:41.116
# ::node	0	say-01	19-20
# ::node	0.0	person	23-24
# ::node	0.0.0	organize-01	23-24
# ::node	0.0.0.0	we	21-22
# ::node	0.0.0.0.0	bother-01	26-27
# ::node	0.0.0.0.0.0	show-01	28-29
# ::node	0.0.0.0.0.0.0	you	29-30
# ::node	0.0.0.0.0.0.1	thing	31-32
# ::node	0.0.0.0.0.0.1.0	allow-01	39-40
# ::node	0.0.0.0.0.0.1.0.0	see-01	42-43
# ::node	0.0.0.0.0.0.1.0.0.0	you	40-41
# ::node	0.0.0.0.0.0.1.0.0.1	world	63-64
# ::node	0.0.0.0.0.0.1.0.0.1.0	pressure-01	84-85
# ::node	0.0.0.0.0.0.1.0.0.1.0.0	good	59-60
# ::node	0.0.0.0.0.0.1.0.0.1.0.1	kind	81-82
# ::node	0.0.0.0.0.0.1.0.0.1.0.1.0	produce-01	79-80
# ::node	0.0.0.0.0.0.1.0.0.1.0.1.0.0	something	73-74
# ::node	0.0.0.0.0.0.1.0.0.1.0.1.1	some	80-81
# ::node	0.0.0.0.0.0.1.0.0.1.0.2	emotion	83-84
# ::node	0.0.0.0.0.0.1.0.0.1.1	art	62-63
# ::node	0.0.0.0.0.0.1.0.0.2	and	47-48
# ::node	0.0.0.0.0.0.1.0.0.2.0	pretend-01	50-51
# ::node	0.0.0.0.0.0.1.0.0.2.0.0	we	48-49
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0	move-01	69-70
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.0	we	56-57
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0	think-01	57-58
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.0	cause-01	55-56
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.1	spirit	54-55
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.1.0	new	53-54
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.1	new	68-69
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.1.0	new	66-67
# ::node	0.0.0.0.0.0.1.0.0.2.0.0.0.2	or	70-71
# ::node	0.0.0.0.0.0.1.0.0.2.0.1	new	74-75
# ::node	0.0.0.0.0.0.1.0.1	now	38-39
# ::node	0.0.0.0.0.0.1.1	do-02	6-7
# ::node	0.0.0.0.0.0.1.1.0	exhibit-01	2-3
# ::node	0.0.0.0.0.0.1.1.0.0	fact	4-5
# ::node	0.0.0.0.0.0.1.2	and	35-36
# ::node	0.0.0.0.0.0.1.2.0	say-01	11-12
# ::node	0.1	paint-02	17-18
# ::node	0.1.0	spirit	15-16
# ::node	0.1.0.0	new	14-15
# ::root	0	say-01
# ::edge	allow-01	ARG0	thing	0.0.0.0.0.0.1.0	0.0.0.0.0.0.1	
# ::edge	allow-01	ARG1	see-01	0.0.0.0.0.0.1.0	0.0.0.0.0.0.1.0.0	
# ::edge	allow-01	time	now	0.0.0.0.0.0.1.0	0.0.0.0.0.0.1.0.1	
# ::edge	and	op1	see-01	0.0.0.0.0.0.1.0.0.2	0.0.0.0.0.0.1.0.0	
# ::edge	and	op2	pretend-01	0.0.0.0.0.0.1.0.0.2	0.0.0.0.0.0.1.0.0.2.0	
# ::edge	bother-01	ARG0	we	0.0.0.0.0	0.0.0.0	
# ::edge	bother-01	ARG1	show-01	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	cause-01	ARG0	think-01	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.0	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0	
# ::edge	do-02	ARG0	exhibit-01	0.0.0.0.0.0.1.1	0.0.0.0.0.0.1.1.0	
# ::edge	do-02	ARG1	thing	0.0.0.0.0.0.1.1	0.0.0.0.0.0.1	
# ::edge	exhibit-01	ARG1	fact	0.0.0.0.0.0.1.1.0	0.0.0.0.0.0.1.1.0.0	
# ::edge	kind	mod	some	0.0.0.0.0.0.1.0.0.1.0.1	0.0.0.0.0.0.1.0.0.1.0.1.1	
# ::edge	move-01	ARG0	we	0.0.0.0.0.0.1.0.0.2.0.0.0	0.0.0.0.0.0.1.0.0.2.0.0.0.0	
# ::edge	move-01	ARG1	we	0.0.0.0.0.0.1.0.0.2.0.0.0	0.0.0.0.0.0.1.0.0.2.0.0	
# ::edge	move-01	mod	new	0.0.0.0.0.0.1.0.0.2.0.0.0	0.0.0.0.0.0.1.0.0.2.0.0.0.1	
# ::edge	new	mod	new	0.0.0.0.0.0.1.0.0.2.0.0.0.1	0.0.0.0.0.0.1.0.0.2.0.0.0.1.0	
# ::edge	or	op1	move-01	0.0.0.0.0.0.1.0.0.2.0.0.0.2	0.0.0.0.0.0.1.0.0.2.0.0.0	
# ::edge	organize-01	ARG0	person	0.0.0	0.0	
# ::edge	organize-01	ARG1	we	0.0.0	0.0.0.0	
# ::edge	paint-02	ARG0	spirit	0.1	0.1.0	
# ::edge	paint-02	ARG1	say-01	0.1	0	
# ::edge	pressure-01	ARG0	world	0.0.0.0.0.0.1.0.0.1.0	0.0.0.0.0.0.1.0.0.1	
# ::edge	pressure-01	ARG1	good	0.0.0.0.0.0.1.0.0.1.0	0.0.0.0.0.0.1.0.0.1.0.0	
# ::edge	pressure-01	mod	emotion	0.0.0.0.0.0.1.0.0.1.0	0.0.0.0.0.0.1.0.0.1.0.2	
# ::edge	pressure-01	mod	kind	0.0.0.0.0.0.1.0.0.1.0	0.0.0.0.0.0.1.0.0.1.0.1	
# ::edge	pretend-01	ARG0	we	0.0.0.0.0.0.1.0.0.2.0	0.0.0.0.0.0.1.0.0.2.0.0	
# ::edge	pretend-01	ARG1	new	0.0.0.0.0.0.1.0.0.2.0	0.0.0.0.0.0.1.0.0.2.0.1	
# ::edge	produce-01	ARG0	something	0.0.0.0.0.0.1.0.0.1.0.1.0	0.0.0.0.0.0.1.0.0.1.0.1.0.0	
# ::edge	produce-01	ARG1	kind	0.0.0.0.0.0.1.0.0.1.0.1.0	0.0.0.0.0.0.1.0.0.1.0.1	
# ::edge	say-01	ARG0	person	0	0.0	
# ::edge	say-01	ARG1	and	0.0.0.0.0.0.1.2.0	0.0.0.0.0.0.1.2	
# ::edge	see-01	ARG0	you	0.0.0.0.0.0.1.0.0	0.0.0.0.0.0.1.0.0.0	
# ::edge	see-01	ARG1	world	0.0.0.0.0.0.1.0.0	0.0.0.0.0.0.1.0.0.1	
# ::edge	show-01	ARG0	you	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	show-01	ARG1	thing	0.0.0.0.0.0	0.0.0.0.0.0.1	
# ::edge	spirit	mod	new	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.1	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.1.0	
# ::edge	spirit	mod	new	0.1.0	0.1.0.0	
# ::edge	thing	example	and	0.0.0.0.0.0.1	0.0.0.0.0.0.1.2	
# ::edge	think-01	ARG0	we	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0	0.0.0.0.0.0.1.0.0.2.0.0.0.0	
# ::edge	think-01	ARG1	spirit	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0	0.0.0.0.0.0.1.0.0.2.0.0.0.0.0.1	
# ::edge	world	mod	art	0.0.0.0.0.0.1.0.0.1	0.0.0.0.0.0.1.0.0.1.1	
(s6 / say-01 
      :ARG0 (p4 / person 
            :ARG0-of (o2 / organize-01 
                  :ARG1 (w4 / we 
                        :ARG0-of (b / bother-01 
                              :ARG1 (s5 / show-01 
                                    :ARG0 (y2 / you) 
                                    :ARG1 (t2 / thing 
                                          :ARG0-of (a3 / allow-01 
                                                :ARG1 (s4 / see-01 
                                                      :ARG0 (y / you) 
                                                      :ARG1 (w / world 
                                                            :ARG0-of (p / pressure-01 
                                                                  :ARG1 (g / good) 
                                                                  :mod (k / kind 
                                                                        :ARG1-of (p2 / produce-01 
                                                                              :ARG0 (s2 / something)) 
                                                                        :mod (s / some)) 
                                                                  :mod (e / emotion)) 
                                                            :mod (a / art)) 
                                                      :op-of (a2 / and 
                                                            :op1 (p3 / pretend-01 
                                                                  :ARG0 (w3 / we 
                                                                        :ARG1-of (m / move-01 
                                                                              :ARG0 (w2 / we 
                                                                                    :ARG0-of (t / think-01 
                                                                                          :ARG0-of (c / cause-01) 
                                                                                          :ARG1 (s3 / spirit 
                                                                                                :mod (n4 / new)))) 
                                                                              :mod (n2 / new 
                                                                                    :mod (n3 / new)) 
                                                                              :op-of (o / or))) 
                                                                  :ARG1 (n / new)))) 
                                                :time (n5 / now)) 
                                          :ARG1-of (d / do-02 
                                                :ARG0 (e2 / exhibit-01 
                                                      :ARG1 (f / fact))) 
                                          :example (a4 / and 
                                                :ARG1-of (s8 / say-01)))))))) 
      :ARG1-of (p5 / paint-02 
            :ARG0 (s7 / spirit 
                  :mod (n6 / new))))

# ::snt one interviewee in kemerovo capital of the kuzbass region bitterly complained that the regional leader of the official trade union body was on holiday somewhere and had not even bothered to put in an appearance during the strike
# ::tok one interviewee in kemerovo capital of the kuzbass region bitterly complained that the regional leader of the official trade union body was on holiday somewhere and had not even bothered to put in an appearance during the strike
# ::alignments 37-38|0.1.1.0 34-35|0.1.1 29-30|0.1 25-26|0 24-25|0.1.1.0.0 23-24|0.1.0.0.0.0.1.0 20-21|0.1.0.0.0 19-20|0.1.0.0.0.0 18-19|0.1.0.0.0.0.1 17-18|0.1.0.0.0.0.0.0+0.1.0.0.0.0.0 14-15|0.1.0.0+0.1.0 13-14|0.1.0.0.1 10-11|0.0 9-10|0.0.1 8-9|0.0.0 4-5|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:41.450
# ::node	0	and	25-26
# ::node	0.0	complain-01	10-11
# ::node	0.0.0	region	8-9
# ::node	0.0.0.0	capital	4-5
# ::node	0.0.1	bitter	9-10
# ::node	0.1	bother-01	29-30
# ::node	0.1.0	person	14-15
# ::node	0.1.0.0	lead-02	14-15
# ::node	0.1.0.0.0	body	20-21
# ::node	0.1.0.0.0.0	union	19-20
# ::node	0.1.0.0.0.0.0	have-org-role-91	17-18
# ::node	0.1.0.0.0.0.0.0	official	17-18
# ::node	0.1.0.0.0.0.1	trade-01	18-19
# ::node	0.1.0.0.0.0.1.0	holiday	23-24
# ::node	0.1.0.0.1	region	13-14
# ::node	0.1.1	appear-01	34-35
# ::node	0.1.1.0	strike-01	37-38
# ::node	0.1.1.0.0	somewhere	24-25
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.1	
# ::edge	appear-01	ARG1	strike-01	0.1.1	0.1.1.0	
# ::edge	body	mod	union	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	bother-01	ARG0	person	0.1	0.1.0	
# ::edge	bother-01	ARG1	appear-01	0.1	0.1.1	
# ::edge	capital	location	region	0.0.0.0	0.0.0	
# ::edge	complain-01	ARG0	region	0.0	0.0.0	
# ::edge	complain-01	ARG1	and	0.0	0	
# ::edge	complain-01	mod	bitter	0.0	0.0.1	
# ::edge	have-org-role-91	ARG1	union	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	have-org-role-91	ARG2	official	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	lead-02	ARG0	person	0.1.0.0	0.1.0	
# ::edge	lead-02	ARG1	body	0.1.0.0	0.1.0.0.0	
# ::edge	lead-02	mod	region	0.1.0.0	0.1.0.0.1	
# ::edge	strike-01	ARG1	somewhere	0.1.1.0	0.1.1.0.0	
# ::edge	trade-01	ARG1	holiday	0.1.0.0.0.0.1	0.1.0.0.0.0.1.0	
# ::edge	union	mod	trade-01	0.1.0.0.0.0	0.1.0.0.0.0.1	
(a2 / and 
      :ARG1-of (c / complain-01 
            :ARG0 (r2 / region 
                  :location-of (c2 / capital)) 
            :mod (b3 / bitter)) 
      :op1 (b / bother-01 
            :ARG0 (p / person 
                  :ARG0-of (l / lead-02 
                        :ARG1 (b2 / body 
                              :mod (u / union 
                                    :ARG1-of (h2 / have-org-role-91 
                                          :ARG2 (o / official)) 
                                    :mod (t / trade-01 
                                          :ARG1 (h / holiday)))) 
                        :mod (r / region))) 
            :ARG1 (a / appear-01 
                  :ARG1 (s / strike-01 
                        :ARG1 (s2 / somewhere)))))

# ::snt the smell doesnt bother me as i am used to it although other people have complained
# ::tok the smell doesnt bother me as i am used to it although other people have complained
# ::alignments 15-16|0.1.2 12-13|0.0.0 10-11|0.1.1 8-9|0.1 6-7|0.1.0 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:41.531
# ::node	0	bother-02	3-4
# ::node	0.0	smell-01	1-2
# ::node	0.0.0	other	12-13
# ::node	0.1	use-01	8-9
# ::node	0.1.0	i	6-7
# ::node	0.1.1	it	10-11
# ::node	0.1.2	complain-01	15-16
# ::root	0	bother-02
# ::edge	bother-02	concession	use-01	0	0.1	
# ::edge	smell-01	ARG0	other	0.0	0.0.0	
# ::edge	smell-01	ARG1	bother-02	0.0	0	
# ::edge	use-01	ARG0	i	0.1	0.1.0	
# ::edge	use-01	ARG1	it	0.1	0.1.1	
# ::edge	use-01	condition	complain-01	0.1	0.1.2	
(b / bother-02 
      :ARG1-of (s / smell-01 
            :ARG0 (o / other)) 
      :concession (u / use-01 
            :ARG0 (i2 / i) 
            :ARG1 (i / it) 
            :condition (c / complain-01)))

# ::snt despite owning more than 50 houses trevor lloyd and his wife valerie are not at all bothered by rising interest rates and falling house prices
# ::tok despite owning more than 50 houses trevor lloyd and his wife valerie are not at all bothered by rising interest rates and falling house prices
# ::alignments 24-25|0.0.1.2.1 23-24|0.0.1.2.1.0 22-23|0.0.1.2.0 21-22|0.0.1.2 20-21|0.0 19-20|0 18-19|0.0.0 16-17|0.0.1 15-16|0.0.0.0 10-11|0.0.1.0.0.0+0.0.1.0.0 8-9|0.0.1.1 5-6|0.0.1.0 4-5|0.0.1.0.2 1-2|0.0.1.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:41.781
# ::node	0	interest-01	19-20
# ::node	0.0	rate	20-21
# ::node	0.0.0	rise-01	18-19
# ::node	0.0.0.0	all	15-16
# ::node	0.0.1	bother-01	16-17
# ::node	0.0.1.0	house	5-6
# ::node	0.0.1.0.0	have-rel-role-91	10-11
# ::node	0.0.1.0.0.0	wife	10-11
# ::node	0.0.1.0.1	own-01	1-2
# ::node	0.0.1.0.2	50	4-5
# ::node	0.0.1.1	and	8-9
# ::node	0.0.1.2	and	21-22
# ::node	0.0.1.2.0	fall-01	22-23
# ::node	0.0.1.2.1	price-01	24-25
# ::node	0.0.1.2.1.0	house	23-24
# ::root	0	interest-01
(i / interest-01 
      :mod-of (r / rate 
            :ARG1-of (r2 / rise-01 
                  :ARG0 (a2 / all)) 
            :ARG2-of (b / bother-01 
                  :ARG0 (h3 / house 
                        :ARG1-of (h2 / have-rel-role-91 
                              :ARG2 (w / wife)) 
                        :ARG1-of (o / own-01) 
                        :quant 50) 
                  :ARG1 (a3 / and) 
                  :op-of (a / and 
                        :op1 (f / fall-01) 
                        :op2 (p / price-01 
                              :ARG1 (h / house))))))

# ::snt here in west germany the terrorists no longer bother to ally themselves to the people with whom they have long since become disenchanted
# ::tok here in west germany the terrorists no longer bother to ally themselves to the people with whom they have long since become disenchanted
# ::alignments 21-22|0.1.1 20-21|0.1.1.2 17-18|0.1.1.0 10-11|0.1 8-9|0 7-8|0.3 6-7|0.2 5-6|0.0 2-3|0.1.1.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:41.888
# ::node	0	bother-02	8-9
# ::node	0.0	terrorist	5-6
# ::node	0.1	ally-01	10-11
# ::node	0.1.0	here	0-1
# ::node	0.1.1	become-01	21-22
# ::node	0.1.1.0	they	17-18
# ::node	0.1.1.1	west	2-3
# ::node	0.1.1.2	since	20-21
# ::node	0.2	-	6-7
# ::node	0.3	long	7-8
# ::root	0	bother-02
# ::edge	ally-01	ARG0	here	0.1	0.1.0	
# ::edge	ally-01	ARG3	become-01	0.1	0.1.1	
# ::edge	become-01	ARG1	they	0.1.1	0.1.1.0	
# ::edge	become-01	time	since	0.1.1	0.1.1.2	
# ::edge	bother-02	ARG0	terrorist	0	0.0	
# ::edge	bother-02	ARG1	ally-01	0	0.1	
# ::edge	bother-02	manner	-	0	0.2	
# ::edge	bother-02	mod	long	0	0.3	
# ::edge	west	op1	become-01	0.1.1.1	0.1.1	
(b2 / bother-02 
      :ARG0 (t2 / terrorist) 
      :ARG1 (a / ally-01 
            :ARG0 (h / here) 
            :ARG3 (b / become-01 
                  :ARG1 (t / they) 
                  :op-of (w / west) 
                  :time (s / since))) 
      :manner (- / -) 
      :mod (l / long))

# ::snt then she said in the slightly hoarse voice and the slightly bothered or complaining tone that bunty could never get enough of right on time as usual darling i dont know how you do it
# ::tok then she said in the slightly hoarse voice and the slightly bothered or complaining tone that bunty could never get enough of right on time as usual darling i dont know how you do it
# ::alignments 34-35|0.1.1.3.0.0 32-33|0.1.1.1 30-31|0.1.3 28-29|0.1.3.0 27-28|0.1.3.0.0 26-27|0.2 24-25|0.1.4 20-21|0.1.3.1 17-18|0.1.2 14-15|0.1.1.3.1 13-14|0.1.1.3.0 12-13|0.1.1.3 11-12|0.1.1 10-11|0.1.1.2 8-9|0.1 7-8|0.1.0 5-6|0.1.1.0 2-3|0 1-2|0.0 0-1|0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:42.517
# ::node	0	say-01	2-3
# ::node	0.0	she	1-2
# ::node	0.1	and	8-9
# ::node	0.1.0	voice	7-8
# ::node	0.1.1	bother-01	11-12
# ::node	0.1.1.0	slight	5-6
# ::node	0.1.1.1	you	32-33
# ::node	0.1.1.2	slight	10-11
# ::node	0.1.1.3	or	12-13
# ::node	0.1.1.3.0	complain-01	13-14
# ::node	0.1.1.3.0.0	it	34-35
# ::node	0.1.1.3.1	tone	14-15
# ::node	0.1.2	possible	17-18
# ::node	0.1.3	know-01	30-31
# ::node	0.1.3.0	i	28-29
# ::node	0.1.3.0.0	darling	27-28
# ::node	0.1.3.1	enough	20-21
# ::node	0.1.4	time	24-25
# ::node	0.2	usual	26-27
# ::node	0.3	then	0-1
# ::root	0	say-01
# ::edge	and	op1	voice	0.1	0.1.0	
# ::edge	and	op2	bother-01	0.1	0.1.1	
# ::edge	and	op3	possible	0.1	0.1.2	
# ::edge	and	op4	know-01	0.1	0.1.3	
# ::edge	bother-01	ARG0	slight	0.1.1	0.1.1.0	
# ::edge	bother-01	ARG1	you	0.1.1	0.1.1.1	
# ::edge	bother-01	degree	slight	0.1.1	0.1.1.2	
# ::edge	complain-01	ARG1	it	0.1.1.3.0	0.1.1.3.0.0	
# ::edge	enough	domain	know-01	0.1.3.1	0.1.3	
# ::edge	i	mod	darling	0.1.3.0	0.1.3.0.0	
# ::edge	know-01	ARG0	i	0.1.3	0.1.3.0	
# ::edge	or	op1	bother-01	0.1.1.3	0.1.1	
# ::edge	or	op2	complain-01	0.1.1.3	0.1.1.3.0	
# ::edge	or	op3	tone	0.1.1.3	0.1.1.3.1	
# ::edge	say-01	ARG0	she	0	0.0	
# ::edge	say-01	ARG1	and	0	0.1	
# ::edge	say-01	time	then	0	0.3	
# ::edge	time	poss	and	0.1.4	0.1	
# ::edge	usual	op1	say-01	0.2	0	
(s3 / say-01 
      :ARG0 (s4 / she) 
      :ARG1 (a / and 
            :op1 (v / voice) 
            :op2 (b / bother-01 
                  :ARG0 (s2 / slight) 
                  :ARG1 (y / you) 
                  :degree (s / slight) 
                  :op-of (o / or 
                        :op1 (c / complain-01 
                              :ARG1 (i / it)) 
                        :op2 (t2 / tone))) 
            :op3 (p / possible) 
            :op4 (k / know-01 
                  :ARG0 (i2 / i 
                        :mod (d / darling)) 
                  :domain-of (e / enough)) 
            :poss-of (t / time)) 
      :op-of (u / usual) 
      :time (t3 / then))

# ::snt i would not bother to comment except that the woolworths building was designed by a very distinguished architect sir william holford who undertook the difficult task of building something that met the needs of retail commerce in some sort of conformity with the city in a street which had always been a trading street its very name is evidence
# ::tok i would not bother to comment except that the woolworths building was designed by a very distinguished architect sir william holford who undertook the difficult task of building something that met the needs of retail commerce in some sort of conformity with the city in a street which had always been a trading street its very name is evidence
# ::alignments 58-59|0.1.0.0.0.0.0.1.0.0 55-56|0.1.0.0.0.0.1.1.0.0 53-54|0.1.0.0.0.0.1.1.0 52-53|0.1.0.0.0.0.1.1 49-50|0.1.0.0.0.0.1.1.0.1 46-47|0.1.0.0.0.0.1.3 43-44|0.1.0.0.0.0.1.2 38-39|0.1.0.0.0.0.0.1 37-38|0.1.0.0.0.0.0.1.0 35-36|0.1.0.0.0.0.0 34-35|0.1.0.0.0.0.0.0 32-33|0.1.0.0.0.0 30-31|0.1.0.0.0.0.1 28-29|0.1.0.0.0.0.1.0.0.0 27-28|0.1.0.0.0.0.1.0.0.0.0 25-26|0.1.0.0.0.0.1.0 24-25|0.1.0.0.0.0.1.0.2 22-23|0.1.0.0.0.0.1.0.0 16-17|0.1.0.0.0.0.1.0.1 15-16|0.1.0.0.0.0.1.0.1.0 12-13|0.1.0 10-11|0.1.0.0 9-10|0.1.0.0.0.1.0+0.1.0.0.0.1+0.1.0.0.0 6-7|0.2 5-6|0.1 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:43.985
# ::node	0	bother-02	3-4
# ::node	0.0	i	0-1
# ::node	0.1	comment-01	5-6
# ::node	0.1.0	design-01	12-13
# ::node	0.1.0.0	build-01	10-11
# ::node	0.1.0.0.0	company	9-10
# ::node	0.1.0.0.0.0	need-01	32-33
# ::node	0.1.0.0.0.0.0	commerce	35-36
# ::node	0.1.0.0.0.0.0.0	retail-01	34-35
# ::node	0.1.0.0.0.0.0.1	sort	38-39
# ::node	0.1.0.0.0.0.0.1.0	some	37-38
# ::node	0.1.0.0.0.0.0.1.0.0	evidence-01	58-59
# ::node	0.1.0.0.0.0.1	meet-03	30-31
# ::node	0.1.0.0.0.0.1.0	task	25-26
# ::node	0.1.0.0.0.0.1.0.0	undertake-01	22-23
# ::node	0.1.0.0.0.0.1.0.0.0	something	28-29
# ::node	0.1.0.0.0.0.1.0.0.0.0	build-01	27-28
# ::node	0.1.0.0.0.0.1.0.1	distinguish-01	16-17
# ::node	0.1.0.0.0.0.1.0.1.0	very	15-16
# ::node	0.1.0.0.0.0.1.0.2	difficult	24-25
# ::node	0.1.0.0.0.0.1.1	trade-01	52-53
# ::node	0.1.0.0.0.0.1.1.0	street	53-54
# ::node	0.1.0.0.0.0.1.1.0.0	very	55-56
# ::node	0.1.0.0.0.0.1.1.0.1	always	49-50
# ::node	0.1.0.0.0.0.1.2	city	43-44
# ::node	0.1.0.0.0.0.1.3	street	46-47
# ::node	0.1.0.0.0.1	name	9-10
# ::node	0.1.0.0.0.1.0	"Woolworths"	9-10
# ::node	0.2	except-00	6-7
# ::root	0	bother-02
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	comment-01	0	0.1	
# ::edge	build-01	ARG1	company	0.1.0.0	0.1.0.0.0	
# ::edge	build-01	ARG1	something	0.1.0.0.0.0.1.0.0.0.0	0.1.0.0.0.0.1.0.0.0	
# ::edge	comment-01	ARG1	design-01	0.1	0.1.0	
# ::edge	commerce	mod	retail-01	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	commerce	mod	sort	0.1.0.0.0.0.0	0.1.0.0.0.0.0.1	
# ::edge	company	name	name	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	design-01	ARG1	build-01	0.1.0	0.1.0.0	
# ::edge	distinguish-01	ARG1	task	0.1.0.0.0.0.1.0.1	0.1.0.0.0.0.1.0	
# ::edge	distinguish-01	degree	very	0.1.0.0.0.0.1.0.1	0.1.0.0.0.0.1.0.1.0	
# ::edge	evidence-01	ARG1	some	0.1.0.0.0.0.0.1.0.0	0.1.0.0.0.0.0.1.0	
# ::edge	except-00	ARG1	bother-02	0.2	0	
# ::edge	meet-03	ARG0	task	0.1.0.0.0.0.1	0.1.0.0.0.0.1.0	
# ::edge	meet-03	ARG1	need-01	0.1.0.0.0.0.1	0.1.0.0.0.0	
# ::edge	meet-03	location	city	0.1.0.0.0.0.1	0.1.0.0.0.0.1.2	
# ::edge	meet-03	location	street	0.1.0.0.0.0.1	0.1.0.0.0.0.1.3	
# ::edge	name	op1	"Woolworths"	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	need-01	ARG0	company	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	need-01	ARG1	commerce	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	sort	mod	some	0.1.0.0.0.0.0.1	0.1.0.0.0.0.0.1.0	
# ::edge	street	time	always	0.1.0.0.0.0.1.1.0	0.1.0.0.0.0.1.1.0.1	
# ::edge	task	mod	difficult	0.1.0.0.0.0.1.0	0.1.0.0.0.0.1.0.2	
# ::edge	trade-01	ARG0	street	0.1.0.0.0.0.1.1	0.1.0.0.0.0.1.1.0	
# ::edge	trade-01	ARG1	meet-03	0.1.0.0.0.0.1.1	0.1.0.0.0.0.1	
# ::edge	undertake-01	ARG1	task	0.1.0.0.0.0.1.0.0	0.1.0.0.0.0.1.0	
# ::edge	undertake-01	ARG2	something	0.1.0.0.0.0.1.0.0	0.1.0.0.0.0.1.0.0.0	
# ::edge	very	poss	street	0.1.0.0.0.0.1.1.0.0	0.1.0.0.0.0.1.1.0	
(b3 / bother-02 
      :ARG0 (i / i) 
      :ARG1 (c4 / comment-01 
            :ARG1 (d3 / design-01 
                  :ARG1 (b2 / build-01 
                        :ARG1 (c3 / company 
                              :ARG0-of (n / need-01 
                                    :ARG1 (c2 / commerce 
                                          :mod (r / retail-01) 
                                          :mod (s3 / sort 
                                                :mod (s4 / some 
                                                      :ARG1-of (e / evidence-01)))) 
                                    :ARG1-of (m / meet-03 
                                          :ARG0 (t2 / task 
                                                :ARG1-of (u / undertake-01 
                                                      :ARG2 (s5 / something 
                                                            :ARG1-of (b / build-01))) 
                                                :ARG1-of (d2 / distinguish-01 
                                                      :degree (v2 / very)) 
                                                :mod (d / difficult)) 
                                          :ARG1-of (t / trade-01 
                                                :ARG0 (s / street 
                                                      :poss-of (v / very) 
                                                      :time (a / always))) 
                                          :location (c / city) 
                                          :location (s2 / street))) 
                              :name (n2 / name 
                                    :op1 "Woolworths"))))) 
      :ARG1-of (e2 / except-00))

# ::snt many women i spoke to hardly bothered with a dupatta indoors while others told me in whispers that they wore it only because their mothersinlaw insisted
# ::tok many women i spoke to hardly bothered with a dupatta indoors while others told me in whispers that they wore it only because their mothersinlaw insisted
# ::alignments 25-26|0.0 22-23|0 21-22|0.2 20-21|0.1.1 19-20|0.1 18-19|0.1.0 13-14|0.1.1.0 12-13|0.1.1.0.0 6-7|0.1.1.0.1.0.0 5-6|0.1.1.0.1.0.0.0 3-4|0.1.1.0.1.0 2-3|0.1.1.0.1 1-2|0.1.1.0.1.1 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:44.509
# ::node	0	cause-01	22-23
# ::node	0.0	insist-01	25-26
# ::node	0.0.0	many	0-1
# ::node	0.1	wear-01	19-20
# ::node	0.1.0	they	18-19
# ::node	0.1.1	it	20-21
# ::node	0.1.1.0	tell-01	13-14
# ::node	0.1.1.0.0	other	12-13
# ::node	0.1.1.0.1	i	2-3
# ::node	0.1.1.0.1.0	speak-01	3-4
# ::node	0.1.1.0.1.0.0	bother-01	6-7
# ::node	0.1.1.0.1.0.0.0	hardly	5-6
# ::node	0.1.1.0.1.1	woman	1-2
# ::node	0.2	only	21-22
# ::root	0	cause-01
# ::edge	bother-01	mod	hardly	0.1.1.0.1.0.0	0.1.1.0.1.0.0.0	
# ::edge	cause-01	ARG0	insist-01	0	0.0	
# ::edge	cause-01	ARG1	wear-01	0	0.1	
# ::edge	cause-01	mod	only	0	0.2	
# ::edge	insist-01	ARG1	many	0.0	0.0.0	
# ::edge	speak-01	ARG0	i	0.1.1.0.1.0	0.1.1.0.1	
# ::edge	speak-01	ARG1	bother-01	0.1.1.0.1.0	0.1.1.0.1.0.0	
# ::edge	tell-01	ARG0	other	0.1.1.0	0.1.1.0.0	
# ::edge	tell-01	ARG1	it	0.1.1.0	0.1.1	
# ::edge	tell-01	ARG2	i	0.1.1.0	0.1.1.0.1	
# ::edge	wear-01	ARG0	they	0.1	0.1.0	
# ::edge	wear-01	ARG1	it	0.1	0.1.1	
# ::edge	woman	part	i	0.1.1.0.1.1	0.1.1.0.1	
(c / cause-01 
      :ARG0 (i / insist-01 
            :ARG1 (m / many)) 
      :ARG1 (w / wear-01 
            :ARG0 (t / they) 
            :ARG1 (i2 / it 
                  :ARG1-of (t2 / tell-01 
                        :ARG0 (o2 / other) 
                        :ARG2 (i3 / i 
                              :ARG0-of (s / speak-01 
                                    :ARG1 (b / bother-01 
                                          :mod (h / hardly))) 
                              :part-of (w2 / woman))))) 
      :mod (o / only))

# ::snt why should he bother with political demonstrations
# ::tok why should he bother with political demonstrations
# ::alignments 6-7|0.2 5-6|0.2.0 3-4|0 2-3|0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:44.521
# ::node	0	bother-02	3-4
# ::node	0.0	he	2-3
# ::node	0.1	recommend-01	1-2
# ::node	0.2	demonstrate-01	6-7
# ::node	0.2.0	politics	5-6
# ::root	0	bother-02
# ::edge	bother-02	ARG0	he	0	0.0	
# ::edge	bother-02	ARG2	demonstrate-01	0	0.2	
# ::edge	demonstrate-01	ARG1	politics	0.2	0.2.0	
# ::edge	recommend-01	ARG1	bother-02	0.1	0	
(b / bother-02 
      :ARG0 (h / he) 
      :ARG1-of (r / recommend-01) 
      :ARG2 (d / demonstrate-01 
            :ARG1 (p / politics)))

# ::snt vic had seen them all before at one time or another though he didnt know their names since raymond never bothered to introduce them nor did they seem capable of introducing themselves
# ::tok vic had seen them all before at one time or another though he didnt know their names since raymond never bothered to introduce them nor did they seem capable of introducing themselves
# ::alignments 30-31|0.0.0.0.1.0.0.0 28-29|0.0.0.0.1.0.0 27-28|0.0.0.0.1 26-27|0.0.0.0.1.0 22-23|0 20-21|0.0 17-18|0.0.0 16-17|0.0.0.0.0.1 14-15|0.0.0.0 12-13|0.0.0.0.0 10-11|0.0.0.0.0.0.1.0.0 9-10|0.0.0.0.0.0.1.0 8-9|0.0.0.0.0.0.1 5-6|0.0.0.0.0.0.0 4-5|0.0.0.0.0.0.0.0 2-3|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:44.976
# ::node	0	introduce-02	22-23
# ::node	0.0	bother-01	20-21
# ::node	0.0.0	since	17-18
# ::node	0.0.0.0	know-01	14-15
# ::node	0.0.0.0.0	he	12-13
# ::node	0.0.0.0.0.0	see-01	2-3
# ::node	0.0.0.0.0.0.0	before	5-6
# ::node	0.0.0.0.0.0.0.0	all	4-5
# ::node	0.0.0.0.0.0.1	time	8-9
# ::node	0.0.0.0.0.0.1.0	or	9-10
# ::node	0.0.0.0.0.0.1.0.0	another	10-11
# ::node	0.0.0.0.0.1	name	16-17
# ::node	0.0.0.0.1	seem-01	27-28
# ::node	0.0.0.0.1.0	they	26-27
# ::node	0.0.0.0.1.0.0	capable-41	28-29
# ::node	0.0.0.0.1.0.0.0	introduce-02	30-31
# ::root	0	introduce-02
(i2 / introduce-02 
      :ARG1-of (b / bother-01 
            :op-of (s2 / since 
                  :ARG4-of (k / know-01 
                        :ARG0 (h / he 
                              :ARG0-of (s3 / see-01 
                                    :ARG1 (b2 / before 
                                          :mod (a2 / all)) 
                                    :time (t2 / time 
                                          :op-of (o / or 
                                                :op1 (a / another)))) 
                              :poss-of (n / name)) 
                        :ARG2-of (s / seem-01 
                              :ARG1 (t / they 
                                    :ARG1-of (c / capable-41 
                                          :ARG2 (i / introduce-02))))))))

# ::snt the fact that prints are available in multiple impressions is irrelevant in relation to their status as originals but if mr luciesmith is bothered by this it is strange that he should use as his examples works which employ not only printed surfaces but also collage marbling and handcolouring to achieve images unique in detail and texture
# ::tok the fact that prints are available in multiple impressions is irrelevant in relation to their status as originals but if mr luciesmith is bothered by this it is strange that he should use as his examples works which employ not only printed surfaces but also collage marbling and handcolouring to achieve images unique in detail and texture
# ::alignments 56-57|0.1.0.0.0.1.3.1 55-56|0.1.0.0.0.1.3 54-55|0.1.0.0.0.1.3.0 52-53|0.0.0.0.0.0.0 51-52|0.0.0.0.0.0 50-51|0.0.0.0.0 47-48|0.0.0.0 44-45|0.0.0 43-44|0 41-42|0.0 40-41|0.1.1 38-39|0.1 35-36|0.1.0 32-33|0.1.0.0.0 31-32|0.1.0.0.0.1 30-31|0.1.0.0 28-29|0.1.0.0.0.1.2 26-27|0.1.0.0.0.1.2.0 25-26|0.1.0.0.0.0 23-24|0.1.0.0.0.1.1.1 18-19|0.1.0.0.0.1.1 15-16|0.1.0.0.0.1.1.2 12-13|0.1.0.0.0.1.1.2.0 8-9|0.1.0.0.0.1.0 7-8|0.1.0.0.0.1.0.0 5-6|0.1.0.0.0.1.1.1.0 1-2|0.1.0.0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:46.053
# ::node	0	contrast-01	43-44
# ::node	0.0	print-01	41-42
# ::node	0.0.0	also	44-45
# ::node	0.0.0.0	and	47-48
# ::node	0.0.0.0.0	achieve-01	50-51
# ::node	0.0.0.0.0.0	image	51-52
# ::node	0.0.0.0.0.0.0	unique	52-53
# ::node	0.1	employ-02	38-39
# ::node	0.1.0	example	35-36
# ::node	0.1.0.0	he	30-31
# ::node	0.1.0.0.0	use-01	32-33
# ::node	0.1.0.0.0.0	this	25-26
# ::node	0.1.0.0.0.1	recommend-01	31-32
# ::node	0.1.0.0.0.1.0	impression	8-9
# ::node	0.1.0.0.0.1.0.0	multiple	7-8
# ::node	0.1.0.0.0.1.1	contrast-01	18-19
# ::node	0.1.0.0.0.1.1.0	fact	1-2
# ::node	0.1.0.0.0.1.1.1	bother-01	23-24
# ::node	0.1.0.0.0.1.1.1.0	available	5-6
# ::node	0.1.0.0.0.1.1.2	status	15-16
# ::node	0.1.0.0.0.1.1.2.0	relate-01	12-13
# ::node	0.1.0.0.0.1.2	strange	28-29
# ::node	0.1.0.0.0.1.2.0	it	26-27
# ::node	0.1.0.0.0.1.3	and	55-56
# ::node	0.1.0.0.0.1.3.0	detail-01	54-55
# ::node	0.1.0.0.0.1.3.1	texture	56-57
# ::node	0.1.1	only	40-41
# ::root	0	contrast-01
(c / contrast-01 
      :ARG1-of (p / print-01 
            :ARG0 (a4 / also 
                  :mod-of (a3 / and 
                        :op1 (a2 / achieve-01 
                              :ARG1 (i / image 
                                    :mod (u / unique)))))) 
      :ARG1-of (e / employ-02 
            :ARG0 (e2 / example 
                  :poss (h / he 
                        :ARG0-of (u2 / use-01 
                              :ARG1 (t2 / this) 
                              :ARG1-of (r / recommend-01 
                                    :ARG0 (i3 / impression 
                                          :quant (m / multiple)) 
                                    :ARG2-of (c2 / contrast-01 
                                          :ARG0 (f / fact) 
                                          :ARG1 (b / bother-01 
                                                :ARG1 (a5 / available)) 
                                          :duration (s2 / status 
                                                :ARG1-of (r2 / relate-01))) 
                                    :domain-of (s / strange 
                                          :domain (i2 / it)) 
                                    :op-of (a / and 
                                          :op1 (d / detail-01) 
                                          :op2 (t / texture)))))) 
            :ARG2 (o / only)))

# ::snt phoebe ceased even to bother to calm him down to open herself to him
# ::tok phoebe ceased even to bother to calm him down to open herself to him
# ::alignments 8-9|0.1 6-7|0 4-5|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:46.069
# ::node	0	calm	6-7
# ::node	0.0	bother-02	4-5
# ::node	0.0.0	cease-01	1-2
# ::node	0.1	down	8-9
# ::root	0	calm
# ::edge	bother-02	ARG1	calm	0.0	0	
# ::edge	calm	mod	down	0	0.1	
# ::edge	cease-01	ARG1	bother-02	0.0.0	0.0	
(c / calm 
      :ARG1-of (b / bother-02 
            :ARG1-of (c2 / cease-01)) 
      :mod (d / down))

# ::snt why bother about the poor and the persecuted
# ::tok why bother about the poor and the persecuted
# ::alignments 7-8|0.0.1 5-6|0.0 4-5|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:46.079
# ::node	0	bother-02	1-2
# ::node	0.0	and	5-6
# ::node	0.0.0	poor	4-5
# ::node	0.0.1	persecute-01	7-8
# ::root	0	bother-02
# ::edge	and	op1	poor	0.0	0.0.0	
# ::edge	and	op2	persecute-01	0.0	0.0.1	
# ::edge	bother-02	ARG1	and	0	0.0	
(b / bother-02 
      :ARG1 (a / and 
            :op1 (p2 / poor) 
            :op2 (p / persecute-01)))

# ::snt they had turned their backs on a troubled europe and plunged into a superficially untroubled africa not bothered by the things that should have bothered  them
# ::tok they had turned their backs on a troubled europe and plunged into a superficially untroubled africa not bothered by the things that should have bothered them
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:46.081
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt why should they impose these restrictions  it is total hypocrisy which nobody has bothered to challenge but i couldnt see the european court of human rights backing the rugby authorities
# ::tok why should they impose these restrictions it is total hypocrisy which nobody has bothered to challenge but i couldnt see the european court of human rights backing the rugby authorities
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:46.083
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt they shouldnt have bothered the stupid buggers
# ::tok they shouldnt have bothered the stupid buggers
# ::alignments 5-6|0 3-4|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:46.092
# ::node	0	stupid	5-6
# ::node	0.0	bother-01	3-4
# ::node	0.0.0	they	0-1
# ::root	0	stupid
(s / stupid 
      :ARG1-of (b / bother-01 
            :ARG0 (t / they)))

# ::snt when i do not take much notice of her she says i am paying her back because she did not bother about me when i was a kid
# ::tok when i do not take much notice of her she says i am paying her back because she did not bother about me when i was a kid
# ::alignments 27-28|0.0.1.0 24-25|0.0.1 20-21|0.0 17-18|0.0.0 16-17|0 15-16|0.1.3 13-14|0.1 11-12|0.1.2 10-11|0.1.0.0 9-10|0.1.0 6-7|0.1.1 5-6|0.1.1.1 1-2|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:46.623
# ::node	0	cause-01	16-17
# ::node	0.0	bother-02	20-21
# ::node	0.0.0	she	17-18
# ::node	0.0.1	i	24-25
# ::node	0.0.1.0	kid	27-28
# ::node	0.1	pay-01	13-14
# ::node	0.1.0	she	9-10
# ::node	0.1.0.0	say-01	10-11
# ::node	0.1.1	notice	6-7
# ::node	0.1.1.0	i	1-2
# ::node	0.1.1.1	much	5-6
# ::node	0.1.2	i	11-12
# ::node	0.1.3	back	15-16
# ::root	0	cause-01
# ::edge	bother-02	ARG0	she	0.0	0.0.0	
# ::edge	bother-02	ARG1	i	0.0	0.0.1	
# ::edge	cause-01	ARG0	bother-02	0	0.0	
# ::edge	cause-01	ARG1	pay-01	0	0.1	
# ::edge	kid	domain	i	0.0.1.0	0.0.1	
# ::edge	notice	poss	i	0.1.1	0.1.1.0	
# ::edge	notice	quant	much	0.1.1	0.1.1.1	
# ::edge	pay-01	ARG0	she	0.1	0.1.0	
# ::edge	pay-01	ARG1	notice	0.1	0.1.1	
# ::edge	pay-01	ARG2	i	0.1	0.1.2	
# ::edge	pay-01	ARG4	back	0.1	0.1.3	
# ::edge	say-01	ARG0	she	0.1.0.0	0.1.0	
(c / cause-01 
      :ARG0 (b / bother-02 
            :ARG0 (s / she) 
            :ARG1 (i / i 
                  :domain-of (k / kid))) 
      :ARG1 (p / pay-01 
            :ARG0 (s3 / she 
                  :ARG0-of (s2 / say-01)) 
            :ARG1 (n / notice 
                  :poss (i3 / i) 
                  :quant (m / much)) 
            :ARG2 (i2 / i) 
            :ARG4 (b2 / back)))

# ::snt he delayed his pass inordinately yet no one bothered to pick up the young channel islander who spirited the ball elegantly away from two challenges and stroked it between the diving dave beasant and the near post
# ::tok he delayed his pass inordinately yet no one bothered to pick up the young channel islander who spirited the ball elegantly away from two challenges and stroked it between the diving dave beasant and the near post
# ::alignments 36-37|0.0 35-36|0.0.1 33-34|0 30-31|0.0.0 28-29|0.0.2 27-28|0.0.2.0.0 25-26|0.0.2.0.3 24-25|0.0.2.0.0.0.0+0.0.2.0.0.0 23-24|0.0.2.0.0.0.1 21-22|0.0.2.0.2 19-20|0.0.2.0.1 17-18|0.0.2.0 14-15|0.0.2.0.3.0.0 13-14|0.0.0.0 10-11|0.0.2.0.3.0 8-9|0.0.2.0.3.0.1 6-7|0.0.2.0.3.0.1.1 5-6|0.0.2.0.3.0.1.0.0.0 1-2|0.0.2.0.3.0.1.0.0 0-1|0.0.2.0.3.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:47.198
# ::node	0	and	33-34
# ::node	0.0	post	36-37
# ::node	0.0.0	dive-01	30-31
# ::node	0.0.0.0	young	13-14
# ::node	0.0.1	near	35-36
# ::node	0.0.2	between	28-29
# ::node	0.0.2.0	spirit-01	17-18
# ::node	0.0.2.0.0	it	27-28
# ::node	0.0.2.0.0.0	thing	24-25
# ::node	0.0.2.0.0.0.0	challenge-01	24-25
# ::node	0.0.2.0.0.0.1	2	23-24
# ::node	0.0.2.0.1	ball	19-20
# ::node	0.0.2.0.2	away	21-22
# ::node	0.0.2.0.3	and	25-26
# ::node	0.0.2.0.3.0	pick-01	10-11
# ::node	0.0.2.0.3.0.0	channel	14-15
# ::node	0.0.2.0.3.0.1	bother-01	8-9
# ::node	0.0.2.0.3.0.1.0	he	0-1
# ::node	0.0.2.0.3.0.1.0.0	delay-01	1-2
# ::node	0.0.2.0.3.0.1.0.0.0	yet	5-6
# ::node	0.0.2.0.3.0.1.1	-	6-7
# ::root	0	and
# ::edge	and	op1	pick-01	0.0.2.0.3	0.0.2.0.3.0	
# ::edge	and	op1	post	0	0.0	
# ::edge	and	op2	spirit-01	0.0.2.0.3	0.0.2.0	
# ::edge	between	op1	post	0.0.2	0.0	
# ::edge	bother-01	ARG0	he	0.0.2.0.3.0.1	0.0.2.0.3.0.1.0	
# ::edge	bother-01	ARG1	pick-01	0.0.2.0.3.0.1	0.0.2.0.3.0	
# ::edge	bother-01	time	-	0.0.2.0.3.0.1	0.0.2.0.3.0.1.1	
# ::edge	challenge-01	ARG2	thing	0.0.2.0.0.0.0	0.0.2.0.0.0	
# ::edge	delay-01	ARG0	he	0.0.2.0.3.0.1.0.0	0.0.2.0.3.0.1.0	
# ::edge	delay-01	ARG1	yet	0.0.2.0.3.0.1.0.0	0.0.2.0.3.0.1.0.0.0	
# ::edge	dive-01	ARG0	young	0.0.0	0.0.0.0	
# ::edge	dive-01	ARG1	post	0.0.0	0.0	
# ::edge	it	part	thing	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	pick-01	ARG1	channel	0.0.2.0.3.0	0.0.2.0.3.0.0	
# ::edge	post	mod	near	0.0	0.0.1	
# ::edge	spirit-01	ARG0	it	0.0.2.0	0.0.2.0.0	
# ::edge	spirit-01	ARG1	ball	0.0.2.0	0.0.2.0.1	
# ::edge	spirit-01	concession	between	0.0.2.0	0.0.2	
# ::edge	spirit-01	manner	away	0.0.2.0	0.0.2.0.2	
# ::edge	thing	quant	2	0.0.2.0.0.0	0.0.2.0.0.0.1	
(a / and 
      :op1 (p / post 
            :ARG1-of (d / dive-01 
                  :ARG0 (y / young)) 
            :mod (n / near) 
            :op-of (b / between 
                  :concession-of (s / spirit-01 
                        :ARG0 (i / it 
                              :part (t / thing 
                                    :ARG2-of (c / challenge-01) 
                                    :quant 2)) 
                        :ARG1 (b2 / ball) 
                        :manner (a3 / away) 
                        :op-of (a2 / and 
                              :op1 (p2 / pick-01 
                                    :ARG1 (c2 / channel) 
                                    :ARG1-of (b3 / bother-01 
                                          :ARG0 (h / he 
                                                :ARG0-of (d2 / delay-01 
                                                      :ARG1 (y2 / yet))) 
                                          :time (- / -))))))))

# ::snt a group without rights without money without a music and a culture of its own a group to which nobody bothered to listen
# ::tok a group without rights without money without a music and a culture of its own a group to which nobody bothered to listen
# ::alignments 22-23|0.1.0.0 20-21|0.1.0.0.1 19-20|0.1.0.0.0 16-17|0.1.0.0.2 11-12|0.2 9-10|0 8-9|0.1.0 5-6|0.1 3-4|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:47.593
# ::node	0	and	9-10
# ::node	0.0	group	1-2
# ::node	0.0.0	right	3-4
# ::node	0.1	money	5-6
# ::node	0.1.0	music	8-9
# ::node	0.1.0.0	listen-01	22-23
# ::node	0.1.0.0.0	nobody	19-20
# ::node	0.1.0.0.1	bother-01	20-21
# ::node	0.1.0.0.2	group	16-17
# ::node	0.2	culture	11-12
# ::root	0	and
# ::edge	and	op1	group	0	0.0	
# ::edge	and	op2	money	0	0.1	
# ::edge	and	op3	culture	0	0.2	
# ::edge	bother-01	ARG1	listen-01	0.1.0.0.1	0.1.0.0	
# ::edge	listen-01	ARG0	nobody	0.1.0.0	0.1.0.0.0	
# ::edge	listen-01	ARG1	music	0.1.0.0	0.1.0	
# ::edge	listen-01	ARG2	group	0.1.0.0	0.1.0.0.2	
# ::edge	money	beneficiary	music	0.1	0.1.0	
# ::edge	right	consist	group	0.0.0	0.0	
(a / and 
      :op1 (g2 / group 
            :consist-of (r / right)) 
      :op2 (m2 / money 
            :beneficiary (m / music 
                  :ARG1-of (l / listen-01 
                        :ARG0 (n / nobody) 
                        :ARG1-of (b / bother-01) 
                        :ARG2 (g / group)))) 
      :op3 (c / culture))

# ::snt the essays illustrate the line where prose becomes poetry but he did not bother to map the mark
# ::tok the essays illustrate the line where prose becomes poetry but he did not bother to map the mark
# ::alignments 17-18|0.0.0 15-16|0.1 13-14|0 10-11|0.0 9-10|0.2 8-9|0.2.0 7-8|0.2.0.0 4-5|0.2.0.0.0.0 2-3|0.2.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:47.636
# ::node	0	bother-02	13-14
# ::node	0.0	he	10-11
# ::node	0.0.0	mark-01	17-18
# ::node	0.1	map	15-16
# ::node	0.2	contrast-01	9-10
# ::node	0.2.0	poetry	8-9
# ::node	0.2.0.0	become-01	7-8
# ::node	0.2.0.0.0	illustrate-01	2-3
# ::node	0.2.0.0.0.0	line	4-5
# ::root	0	bother-02
# ::edge	become-01	ARG1	poetry	0.2.0.0	0.2.0	
# ::edge	become-01	condition	illustrate-01	0.2.0.0	0.2.0.0.0	
# ::edge	bother-02	ARG0	he	0	0.0	
# ::edge	bother-02	ARG1	map	0	0.1	
# ::edge	contrast-01	ARG1	poetry	0.2	0.2.0	
# ::edge	contrast-01	ARG2	bother-02	0.2	0	
# ::edge	illustrate-01	ARG1	line	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	mark-01	ARG0	he	0.0.0	0.0	
(b / bother-02 
      :ARG0 (h / he 
            :ARG0-of (m / mark-01)) 
      :ARG1 (m2 / map) 
      :ARG2-of (c / contrast-01 
            :ARG1 (p / poetry 
                  :ARG1-of (b2 / become-01 
                        :condition (i / illustrate-01 
                              :ARG1 (l / line))))))

# ::snt like where were all the antiwar songs when the falklands were turned into a mass graveyard for the young men of england and argentina  only crass seemed to bother and they got questions in the house for their troubles
# ::tok like where were all the antiwar songs when the falklands were turned into a mass graveyard for the young men of england and argentina only crass seemed to bother and they got questions in the house for their troubles
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:47.638
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt instead of this considerable racket which seemed not to affect the bug and didnt bother me most of the time although occasionally i would have fits of indignation that made me think of schopenhauers fury at the idle cracking of buggy whips by coachmen on his street there was at the moment no floor noise at all which meant that nothing could distract the bug and me from the pleasurable experience of the irregular topography of the floor itself as it was conveyed mutely and sleepinducingly up through the chair to our bodies
# ::tok instead of this considerable racket which seemed not to affect the bug and didnt bother me most of the time although occasionally i would have fits of indignation that made me think of schopenhauers fury at the idle cracking of buggy whips by coachmen on his street there was at the moment no floor noise at all which meant that nothing could distract the bug and me from the pleasurable experience of the irregular topography of the floor itself as it was conveyed mutely and sleepinducingly up through the chair to our bodies
# ::alignments 92-93|0.2.0.0.0.0.2.1.0.0.0 89-90|0.2.0.0.0.0.2.1.0.0.0.0 84-85|0.2.0.0.0.0.2.2 80-81|0.2.0.0.0.0.2.0.0 77-78|0.2.0.0.0.0.2.1.0.0.1 70-71|0.2.0.0.0.0.2.1.0.0 65-66|0.2.0.0.0.0.2.1 64-65|0.2.0.0.0.0.2.1.0 61-62|0.2.0.0.0.0.2 60-61|0.2.0.0.0.0.2.0.1 58-59|0.2.0.0.0.0.2.0 56-57|0.2.0.0.0.0.2.0.2 54-55|0.2.0.0.0.0.2.0.2.0 53-54|0.2.0.0.0.0.2.0.2.0.0 52-53|0.2.0.0.0.0.2.0.2.0.1 51-52|0.2.0.0.0.0.0 46-47|0.2.0.0.0.0.3 38-39|0.2.0.0.0.0 37-38|0.2.0.0.0.0.1 34-35|0.2.0.0.0 31-32|0.2.0.0 25-26|0.2 22-23|0.2.0 21-22|0.2.0.1 19-20|0.0.0 16-17|0.0 14-15|0 12-13|0.1 11-12|0.1.0.1 9-10|0.1.0 6-7|0.1.0.2 3-4|0.2.1 2-3|0.2.2 0-1|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:49.370
# ::node	0	bother-02	14-15
# ::node	0.0	most	16-17
# ::node	0.0.0	time	19-20
# ::node	0.1	and	12-13
# ::node	0.1.0	affect-01	9-10
# ::node	0.1.0.0	instead	0-1
# ::node	0.1.0.1	bug	11-12
# ::node	0.1.0.2	seem-01	6-7
# ::node	0.2	fit-01	25-26
# ::node	0.2.0	i	22-23
# ::node	0.2.0.0	think-01	31-32
# ::node	0.2.0.0.0	fury	34-35
# ::node	0.2.0.0.0.0	crack-02	38-39
# ::node	0.2.0.0.0.0.0	moment	51-52
# ::node	0.2.0.0.0.0.1	idle	37-38
# ::node	0.2.0.0.0.0.2	possible	61-62
# ::node	0.2.0.0.0.0.2.0	mean-01	58-59
# ::node	0.2.0.0.0.0.2.0.0	it	80-81
# ::node	0.2.0.0.0.0.2.0.1	nothing	60-61
# ::node	0.2.0.0.0.0.2.0.2	all	56-57
# ::node	0.2.0.0.0.0.2.0.2.0	noise	54-55
# ::node	0.2.0.0.0.0.2.0.2.0.0	floor	53-54
# ::node	0.2.0.0.0.0.2.0.2.0.1	-	52-53
# ::node	0.2.0.0.0.0.2.1	and	65-66
# ::node	0.2.0.0.0.0.2.1.0	bug	64-65
# ::node	0.2.0.0.0.0.2.1.0.0	experience-01	70-71
# ::node	0.2.0.0.0.0.2.1.0.0.0	body	92-93
# ::node	0.2.0.0.0.0.2.1.0.0.0.0	chair	89-90
# ::node	0.2.0.0.0.0.2.1.0.0.1	floor	77-78
# ::node	0.2.0.0.0.0.2.2	and	84-85
# ::node	0.2.0.0.0.0.3	street	46-47
# ::node	0.2.0.1	occasional	21-22
# ::node	0.2.1	considerable	3-4
# ::node	0.2.2	this	2-3
# ::root	0	bother-02
# ::edge	affect-01	ARG0	instead	0.1.0	0.1.0.0	
# ::edge	affect-01	ARG1	bug	0.1.0	0.1.0.1	
# ::edge	and	op1	affect-01	0.1	0.1.0	
# ::edge	and	op1	bug	0.2.0.0.0.0.2.1	0.2.0.0.0.0.2.1.0	
# ::edge	and	op1	possible	0.2.0.0.0.0.2.2	0.2.0.0.0.0.2	
# ::edge	bother-02	ARG0	most	0	0.0	
# ::edge	bother-02	ARG1	and	0	0.1	
# ::edge	bother-02	purpose	fit-01	0	0.2	
# ::edge	chair	poss	body	0.2.0.0.0.0.2.1.0.0.0.0	0.2.0.0.0.0.2.1.0.0.0	
# ::edge	considerable	op1	fit-01	0.2.1	0.2	
# ::edge	crack-02	ARG0	moment	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	crack-02	ARG1	fury	0.2.0.0.0.0	0.2.0.0.0	
# ::edge	crack-02	mod	idle	0.2.0.0.0.0	0.2.0.0.0.0.1	
# ::edge	crack-02	mod	possible	0.2.0.0.0.0	0.2.0.0.0.0.2	
# ::edge	experience-01	ARG0	bug	0.2.0.0.0.0.2.1.0.0	0.2.0.0.0.0.2.1.0	
# ::edge	experience-01	ARG1	body	0.2.0.0.0.0.2.1.0.0	0.2.0.0.0.0.2.1.0.0.0	
# ::edge	experience-01	prep-on	floor	0.2.0.0.0.0.2.1.0.0	0.2.0.0.0.0.2.1.0.0.1	
# ::edge	fit-01	ARG0	i	0.2	0.2.0	
# ::edge	mean-01	ARG0	it	0.2.0.0.0.0.2.0	0.2.0.0.0.0.2.0.0	
# ::edge	mean-01	ARG1	possible	0.2.0.0.0.0.2.0	0.2.0.0.0.0.2	
# ::edge	mean-01	ARG2	nothing	0.2.0.0.0.0.2.0	0.2.0.0.0.0.2.0.1	
# ::edge	mean-01	mod	all	0.2.0.0.0.0.2.0	0.2.0.0.0.0.2.0.2	
# ::edge	noise	mod	floor	0.2.0.0.0.0.2.0.2.0	0.2.0.0.0.0.2.0.2.0.0	
# ::edge	noise	polarity	-	0.2.0.0.0.0.2.0.2.0	0.2.0.0.0.0.2.0.2.0.1	
# ::edge	noise	prep-at	all	0.2.0.0.0.0.2.0.2.0	0.2.0.0.0.0.2.0.2	
# ::edge	occasional	mod	i	0.2.0.1	0.2.0	
# ::edge	possible	domain	and	0.2.0.0.0.0.2	0.2.0.0.0.0.2.1	
# ::edge	seem-01	ARG1	affect-01	0.1.0.2	0.1.0	
# ::edge	street	op1	crack-02	0.2.0.0.0.0.3	0.2.0.0.0.0	
# ::edge	think-01	ARG0	i	0.2.0.0	0.2.0	
# ::edge	think-01	ARG2	fury	0.2.0.0	0.2.0.0.0	
# ::edge	this	op1	fit-01	0.2.2	0.2	
# ::edge	time	quant	most	0.0.0	0.0	
(b3 / bother-02 
      :ARG0 (m3 / most 
            :quant-of (t2 / time)) 
      :ARG1 (a4 / and 
            :op1 (a5 / affect-01 
                  :ARG0 (i4 / instead) 
                  :ARG1 (b4 / bug) 
                  :ARG1-of (s2 / seem-01))) 
      :purpose (f4 / fit-01 
            :ARG0 (i3 / i 
                  :ARG0-of (t / think-01 
                        :ARG2 (f3 / fury 
                              :ARG1-of (c2 / crack-02 
                                    :ARG0 (m2 / moment) 
                                    :mod (i2 / idle) 
                                    :mod (p / possible 
                                          :ARG1-of (m / mean-01 
                                                :ARG0 (i / it) 
                                                :ARG2 (n / nothing) 
                                                :mod (a3 / all 
                                                      :prep-at-of (n2 / noise 
                                                            :mod (f2 / floor) 
                                                            :polarity (- / -)))) 
                                          :domain (a2 / and 
                                                :op1 (b2 / bug 
                                                      :ARG0-of (e / experience-01 
                                                            :ARG1 (b / body 
                                                                  :poss-of (c / chair)) 
                                                            :prep-on (f / floor)))) 
                                          :op-of (a / and)) 
                                    :op-of (s / street)))) 
                  :mod-of (o / occasional)) 
            :op-of (c3 / considerable) 
            :op-of (t3 / this)))

# ::snt people bother me g b s told his housekeeper near the end of his life
# ::tok people bother me g b s told his housekeeper near the end of his life
# ::alignments 14-15|0.0.2 9-10|0.0.1 6-7|0.0 4-5|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:49.391
# ::node	0	bother-02	1-2
# ::node	0.0	tell-01	6-7
# ::node	0.0.0	b	4-5
# ::node	0.0.1	near	9-10
# ::node	0.0.2	life	14-15
# ::root	0	bother-02
# ::edge	bother-02	ARG1	tell-01	0	0.0	
# ::edge	tell-01	ARG1	b	0.0	0.0.0	
# ::edge	tell-01	ARG4	near	0.0	0.0.1	
# ::edge	tell-01	duration	life	0.0	0.0.2	
(b2 / bother-02 
      :ARG1 (t / tell-01 
            :ARG1 (b / b) 
            :ARG4 (n / near) 
            :duration (l / life)))

# ::snt   paulette did not bother with tact but just let her scorn flow
# ::tok paulette did not bother with tact but just let her scorn flow
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:49.392
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the trouble is ordinary people dont understand what theyre about and the universities dont really bother to explain themselves to the community
# ::tok the trouble is ordinary people dont understand what theyre about and the universities dont really bother to explain themselves to the community
# ::alignments 21-22|0.1.1 17-18|0.1 15-16|0 14-15|0.3 12-13|0.2.0 10-11|0.0 6-7|0.2 3-4|0.1.0 1-2|0.2.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:49.438
# ::node	0	bother-02	15-16
# ::node	0.0	and	10-11
# ::node	0.1	explain-01	17-18
# ::node	0.1.0	ordinary	3-4
# ::node	0.1.1	community	21-22
# ::node	0.2	understand-01	6-7
# ::node	0.2.0	university	12-13
# ::node	0.2.1	trouble-01	1-2
# ::node	0.3	really	14-15
# ::root	0	bother-02
# ::edge	bother-02	ARG0	and	0	0.0	
# ::edge	bother-02	ARG1	explain-01	0	0.1	
# ::edge	bother-02	mod	really	0	0.3	
# ::edge	explain-01	ARG1	ordinary	0.1	0.1.0	
# ::edge	explain-01	ARG2	community	0.1	0.1.1	
# ::edge	trouble-01	ARG0	understand-01	0.2.1	0.2	
# ::edge	understand-01	ARG0	university	0.2	0.2.0	
# ::edge	understand-01	ARG1	bother-02	0.2	0	
(b / bother-02 
      :ARG0 (a / and) 
      :ARG1 (e / explain-01 
            :ARG1 (o / ordinary) 
            :ARG2 (c / community)) 
      :ARG1-of (u2 / understand-01 
            :ARG0 (u / university) 
            :ARG0-of (t / trouble-01)) 
      :mod (r / really))

# ::snt but daviss publisher didnt bother bringing it out in hardback
# ::tok but daviss publisher didnt bother bringing it out in hardback
# ::alignments 6-7|0.0.0.0 5-6|0.0.0 4-5|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:49.450
# ::node	0	contrast-01	0-1
# ::node	0.0	bother-02	4-5
# ::node	0.0.0	bring-01	5-6
# ::node	0.0.0.0	it	6-7
# ::root	0	contrast-01
# ::edge	bother-02	ARG1	bring-01	0.0	0.0.0	
# ::edge	bring-01	ARG1	it	0.0.0	0.0.0.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.0	
(c / contrast-01 
      :ARG1 (b2 / bother-02 
            :ARG1 (b / bring-01 
                  :ARG1 (i / it))))

# ::snt look at all the big women who have hit records alison moyet alyson williams chakka khan ellip  i dont bother to answer him back when he goes on like that
# ::tok look at all the big women who have hit records alison moyet alyson williams chakka khan ellip i dont bother to answer him back when he goes on like that
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:49.452
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt we cant be bothered being anything but ourselves
# ::tok we cant be bothered being anything but ourselves
# ::alignments 6-7|0 5-6|0.0 3-4|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:49.476
# ::node	0	contrast-01	6-7
# ::node	0.0	anything	5-6
# ::node	0.1	bother-01	3-4
# ::node	0.1.0	we	0-1
# ::root	0	contrast-01
# ::edge	bother-01	ARG1	we	0.1	0.1.0	
# ::edge	bother-01	ARG2	contrast-01	0.1	0	
# ::edge	contrast-01	ARG1	anything	0	0.0	
(c / contrast-01 
      :ARG1 (a / anything) 
      :ARG2-of (b / bother-01 
            :ARG1 (w / we)))

# ::snt it is most curious to see that you have so much time on your hands that you are able to simply wander about this house bothering others with gratuitous comments
# ::tok it is most curious to see that you have so much time on your hands that you are able to simply wander about this house bothering others with gratuitous comments
# ::alignments 29-30|0 26-27|0.0 25-26|0.1 24-25|0.1.0 23-24|0.1.0.0 21-22|0.1.1 20-21|0.1.1.3 18-19|0.1.1.2 16-17|0.1.1.0 14-15|0.1.1.2.0.1.1 11-12|0.1.1.1 10-11|0.1.1.1.0 9-10|0.1.1.1.0.0 7-8|0.1.1.2.0.1.0 5-6|0.1.1.2.0.1 3-4|0.1.1.2.0 2-3|0.1.1.2.0.2 0-1|0.1.1.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.210
# ::node	0	comment-01	29-30
# ::node	0.0	other	26-27
# ::node	0.1	bother-01	25-26
# ::node	0.1.0	house	24-25
# ::node	0.1.0.0	this	23-24
# ::node	0.1.1	wander-01	21-22
# ::node	0.1.1.0	you	16-17
# ::node	0.1.1.1	time	11-12
# ::node	0.1.1.1.0	much	10-11
# ::node	0.1.1.1.0.0	so	9-10
# ::node	0.1.1.2	possible	18-19
# ::node	0.1.1.2.0	curious-41	3-4
# ::node	0.1.1.2.0.0	it	0-1
# ::node	0.1.1.2.0.1	see-01	5-6
# ::node	0.1.1.2.0.1.0	you	7-8
# ::node	0.1.1.2.0.1.1	hand	14-15
# ::node	0.1.1.2.0.2	most	2-3
# ::node	0.1.1.3	simple	20-21
# ::root	0	comment-01
# ::edge	bother-01	ARG1	house	0.1	0.1.0	
# ::edge	bother-01	ARG2	comment-01	0.1	0	
# ::edge	comment-01	ARG1	other	0	0.0	
# ::edge	curious-41	ARG0	it	0.1.1.2.0	0.1.1.2.0.0	
# ::edge	curious-41	ARG1	possible	0.1.1.2.0	0.1.1.2	
# ::edge	curious-41	ARG2	see-01	0.1.1.2.0	0.1.1.2.0.1	
# ::edge	curious-41	degree	most	0.1.1.2.0	0.1.1.2.0.2	
# ::edge	house	mod	this	0.1.0	0.1.0.0	
# ::edge	much	degree	so	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	possible	domain	wander-01	0.1.1.2	0.1.1	
# ::edge	see-01	ARG0	you	0.1.1.2.0.1	0.1.1.2.0.1.0	
# ::edge	see-01	ARG1	hand	0.1.1.2.0.1	0.1.1.2.0.1.1	
# ::edge	time	mod	much	0.1.1.1	0.1.1.1.0	
# ::edge	wander-01	ARG0	you	0.1.1	0.1.1.0	
# ::edge	wander-01	ARG1	time	0.1.1	0.1.1.1	
# ::edge	wander-01	mod	simple	0.1.1	0.1.1.3	
# ::edge	wander-01	time	bother-01	0.1.1	0.1	
(c / comment-01 
      :ARG1 (o / other) 
      :ARG2-of (b / bother-01 
            :ARG1 (h / house 
                  :mod (t / this)) 
            :time-of (w / wander-01 
                  :ARG0 (y / you) 
                  :ARG1 (t2 / time 
                        :mod (m / much 
                              :degree (s2 / so))) 
                  :domain-of (p / possible 
                        :ARG1-of (c2 / curious-41 
                              :ARG0 (i / it) 
                              :ARG2 (s3 / see-01 
                                    :ARG0 (y2 / you) 
                                    :ARG1 (h2 / hand)) 
                              :degree (m2 / most))) 
                  :mod (s / simple))))

# ::snt at college i did this project on images of black women in the media because it bothered me
# ::tok at college i did this project on images of black women in the media because it bothered me
# ::alignments 16-17|0.0 15-16|0.0.1 14-15|0 13-14|0.2 10-11|0.2.0 9-10|0.2.0.0 7-8|0.2.0.1 5-6|0.1 4-5|0.1.0 2-3|0.0.0 1-2|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.468
# ::node	0	cause-01	14-15
# ::node	0.0	bother-01	16-17
# ::node	0.0.0	i	2-3
# ::node	0.0.1	it	15-16
# ::node	0.1	project	5-6
# ::node	0.1.0	this	4-5
# ::node	0.1.1	college	1-2
# ::node	0.2	media	13-14
# ::node	0.2.0	woman	10-11
# ::node	0.2.0.0	black	9-10
# ::node	0.2.0.1	image	7-8
# ::root	0	cause-01
# ::edge	bother-01	ARG0	i	0.0	0.0.0	
# ::edge	bother-01	ARG1	it	0.0	0.0.1	
# ::edge	cause-01	ARG0	bother-01	0	0.0	
# ::edge	cause-01	ARG1	project	0	0.1	
# ::edge	image	topic	woman	0.2.0.1	0.2.0	
# ::edge	media	time	cause-01	0.2	0	
# ::edge	project	mod	this	0.1	0.1.0	
# ::edge	project	source	college	0.1	0.1.1	
# ::edge	woman	mod	black	0.2.0	0.2.0.0	
# ::edge	woman	mod	media	0.2.0	0.2	
(c / cause-01 
      :ARG0 (b / bother-01 
            :ARG0 (i3 / i) 
            :ARG1 (i / it)) 
      :ARG1 (p / project 
            :mod (t / this) 
            :source (c2 / college)) 
      :time-of (m / media 
            :mod-of (w / woman 
                  :mod (b2 / black) 
                  :topic-of (i2 / image))))

# ::snt because theyd have to take off their overalls said wilcox and they cant be bothered
# ::tok because theyd have to take off their overalls said wilcox and they cant be bothered
# ::alignments 14-15|0.0.1 11-12|0.0.1.0 10-11|0.0 8-9|0 5-6|0.0.0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.494
# ::node	0	say-01	8-9
# ::node	0.0	and	10-11
# ::node	0.0.0	cause-01	0-1
# ::node	0.0.0.0	off	5-6
# ::node	0.0.1	bother-01	14-15
# ::node	0.0.1.0	they	11-12
# ::root	0	say-01
# ::edge	and	op1	bother-01	0.0	0.0.1	
# ::edge	bother-01	ARG1	they	0.0.1	0.0.1.0	
# ::edge	cause-01	ARG0	and	0.0.0	0.0	
# ::edge	cause-01	ARG1	off	0.0.0	0.0.0.0	
# ::edge	say-01	ARG1	and	0	0.0	
(s / say-01 
      :ARG1 (a / and 
            :ARG0-of (c / cause-01 
                  :ARG1 (o / off)) 
            :op1 (b / bother-01 
                  :ARG1 (t / they))))

# ::snt what bothered you
# ::tok what bothered you
# ::alignments 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.498
# ::node	0	bother-01	1-2
# ::node	0.0	you	2-3
# ::root	0	bother-01
# ::edge	bother-01	ARG1	you	0	0.0	
(b / bother-01 
      :ARG1 (y / you))

# ::snt dont bother me with such considerations
# ::tok dont bother me with such considerations
# ::alignments 5-6|0.0 4-5|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.506
# ::node	0	bother-02	1-2
# ::node	0.0	consider-01	5-6
# ::node	0.0.0	such	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG2	consider-01	0	0.0	
# ::edge	consider-01	mod	such	0.0	0.0.0	
(b / bother-02 
      :ARG2 (c / consider-01 
            :mod (s / such)))

# ::snt it matters to europeans where mr bushs emphasis lies on such issues and it bothers them when they cant quite figure it out
# ::tok it matters to europeans where mr bushs emphasis lies on such issues and it bothers them when they cant quite figure it out
# ::alignments 21-22|0.0.0.0 20-21|0.0.1.2.0 19-20|0.0.1.2.0.0 17-18|0.0.1.2 14-15|0.0.1 13-14|0.0.1.1 12-13|0.0 11-12|0.0.0.1 10-11|0.0.0.1.0 8-9|0.0.0 7-8|0.0.1.0 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.628
# ::node	0	matter	1-2
# ::node	0.0	and	12-13
# ::node	0.0.0	lie-01	8-9
# ::node	0.0.0.0	it	21-22
# ::node	0.0.0.1	issue	11-12
# ::node	0.0.0.1.0	such	10-11
# ::node	0.0.1	bother-01	14-15
# ::node	0.0.1.0	emphasize-01	7-8
# ::node	0.0.1.1	it	13-14
# ::node	0.0.1.2	they	17-18
# ::node	0.0.1.2.0	figure	20-21
# ::node	0.0.1.2.0.0	quite	19-20
# ::node	0.1	it	0-1
# ::root	0	matter
# ::edge	and	op1	lie-01	0.0	0.0.0	
# ::edge	and	op2	bother-01	0.0	0.0.1	
# ::edge	bother-01	ARG0	emphasize-01	0.0.1	0.0.1.0	
# ::edge	bother-01	ARG1	it	0.0.1	0.0.1.1	
# ::edge	bother-01	ARG2	they	0.0.1	0.0.1.2	
# ::edge	figure	ARG0	they	0.0.1.2.0	0.0.1.2	
# ::edge	figure	degree	quite	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	issue	mod	such	0.0.0.1	0.0.0.1.0	
# ::edge	lie-01	ARG1	it	0.0.0	0.0.0.0	
# ::edge	lie-01	ARG2	issue	0.0.0	0.0.0.1	
# ::edge	matter	condition	and	0	0.0	
# ::edge	matter	domain	it	0	0.1	
(m / matter 
      :condition (a / and 
            :op1 (l / lie-01 
                  :ARG1 (i / it) 
                  :ARG2 (i3 / issue 
                        :mod (s / such))) 
            :op2 (b / bother-01 
                  :ARG0 (e / emphasize-01) 
                  :ARG1 (i2 / it) 
                  :ARG2 (t / they 
                        :ARG0-of (f / figure 
                              :degree (q / quite))))) 
      :domain (i4 / it))

# ::snt why we never bother with locking the gates said the nun
# ::tok why we never bother with locking the gates said the nun
# ::alignments 8-9|0 7-8|0.0 5-6|0.1 3-4|0.1.0.0 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.644
# ::node	0	say-01	8-9
# ::node	0.0	gate	7-8
# ::node	0.1	lock-03	5-6
# ::node	0.1.0	we	1-2
# ::node	0.1.0.0	bother-02	3-4
# ::root	0	say-01
# ::edge	bother-02	ARG0	we	0.1.0.0	0.1.0	
# ::edge	lock-03	ARG0	we	0.1	0.1.0	
# ::edge	lock-03	ARG1	say-01	0.1	0	
# ::edge	say-01	ARG0	gate	0	0.0	
(s / say-01 
      :ARG0 (g / gate) 
      :ARG1-of (l / lock-03 
            :ARG0 (w / we 
                  :ARG0-of (b / bother-02))))

# ::snt but she looked bothered and tried to contact dan to discuss making an offer themselves
# ::tok but she looked bothered and tried to contact dan to discuss making an offer themselves
# ::alignments 13-14|0.0.1.2.0.0 10-11|0.0.1.2.0 7-8|0.0.1.2 5-6|0.0.1.1 4-5|0.0.1 3-4|0.0.1.0 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.681
# ::node	0	contrast-01	0-1
# ::node	0.0	look-01	2-3
# ::node	0.0.0	she	1-2
# ::node	0.0.1	and	4-5
# ::node	0.0.1.0	bother-01	3-4
# ::node	0.0.1.1	try-01	5-6
# ::node	0.0.1.2	contact-01	7-8
# ::node	0.0.1.2.0	discuss-01	10-11
# ::node	0.0.1.2.0.0	offer-01	13-14
# ::root	0	contrast-01
# ::edge	and	op1	look-01	0.0.1	0.0	
# ::edge	and	op2	bother-01	0.0.1	0.0.1.0	
# ::edge	and	op3	try-01	0.0.1	0.0.1.1	
# ::edge	and	op4	contact-01	0.0.1	0.0.1.2	
# ::edge	contact-01	purpose	discuss-01	0.0.1.2	0.0.1.2.0	
# ::edge	contrast-01	ARG2	look-01	0	0.0	
# ::edge	discuss-01	ARG1	offer-01	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	look-01	ARG0	she	0.0	0.0.0	
(c2 / contrast-01 
      :ARG2 (l / look-01 
            :ARG0 (s / she) 
            :op-of (a / and 
                  :op1 (b / bother-01) 
                  :op2 (t / try-01) 
                  :op3 (c / contact-01 
                        :purpose (d / discuss-01 
                              :ARG1 (o / offer-01))))))

# ::snt none of the reviews were great and john candy isnt one of those mustsee stars so why did you bother
# ::tok none of the reviews were great and john candy isnt one of those mustsee stars so why did you bother
# ::alignments 19-20|0 18-19|0.0 15-16|0.1.0 14-15|0.1 6-7|0.1.1 5-6|0.2 3-4|0.1.1.0.0 0-1|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.781
# ::node	0	bother-02	19-20
# ::node	0.0	you	18-19
# ::node	0.1	star	14-15
# ::node	0.1.0	so	15-16
# ::node	0.1.1	and	6-7
# ::node	0.1.1.0	none	0-1
# ::node	0.1.1.0.0	review-01	3-4
# ::node	0.2	great	5-6
# ::root	0	bother-02
# ::edge	and	domain	none	0.1.1	0.1.1.0	
# ::edge	and	op1	star	0.1.1	0.1	
# ::edge	bother-02	ARG0	you	0	0.0	
# ::edge	bother-02	ARG1	star	0	0.1	
# ::edge	great	op1	bother-02	0.2	0	
# ::edge	review-01	quant	none	0.1.1.0.0	0.1.1.0	
# ::edge	star	mod	so	0.1	0.1.0	
(b / bother-02 
      :ARG0 (y / you) 
      :ARG1 (s2 / star 
            :mod (s / so) 
            :op-of (a / and 
                  :domain (n / none 
                        :quant-of (r / review-01)))) 
      :op-of (g / great))

# ::snt youre bothered because there were no keys and no other identification in that expensive handbag
# ::tok youre bothered because there were no keys and no other identification in that expensive handbag
# ::alignments 13-14|0.1.0 10-11|0.0.1 9-10|0.0.1.0 8-9|0.0.1.1 7-8|0.0 6-7|0.0.0 5-6|0.0.0.0 2-3|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:50.993
# ::node	0	cause-01	2-3
# ::node	0.0	and	7-8
# ::node	0.0.0	key	6-7
# ::node	0.0.0.0	-	5-6
# ::node	0.0.1	identify-02	10-11
# ::node	0.0.1.0	other	9-10
# ::node	0.0.1.1	-	8-9
# ::node	0.1	bother-01	1-2
# ::node	0.1.0	expensive	13-14
# ::root	0	cause-01
# ::edge	and	op1	key	0.0	0.0.0	
# ::edge	and	op2	identify-02	0.0	0.0.1	
# ::edge	bother-01	ARG1	expensive	0.1	0.1.0	
# ::edge	cause-01	ARG0	and	0	0.0	
# ::edge	cause-01	ARG1	bother-01	0	0.1	
# ::edge	identify-02	mod	other	0.0.1	0.0.1.0	
# ::edge	identify-02	polarity	-	0.0.1	0.0.1.1	
# ::edge	key	polarity	-	0.0.0	0.0.0.0	
(c / cause-01 
      :ARG0 (a / and 
            :op1 (k / key 
                  :polarity (-2 / -)) 
            :op2 (i / identify-02 
                  :mod (o / other) 
                  :polarity (- / -))) 
      :ARG1 (b / bother-01 
            :ARG1 (e / expensive)))

# ::snt dont want to bother about his opinions
# ::tok dont want to bother about his opinions
# ::alignments 6-7|0.0.0 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:51.011
# ::node	0	want-01	1-2
# ::node	0.0	bother-02	3-4
# ::node	0.0.0	opine-01	6-7
# ::root	0	want-01
# ::edge	bother-02	ARG2	opine-01	0.0	0.0.0	
# ::edge	want-01	ARG1	bother-02	0	0.0	
(w / want-01 
      :ARG1 (b / bother-02 
            :ARG2 (o / opine-01)))

# ::snt this meant that in each case a secondary modern school which would have been too small to survive was absorbed quietly and without fuss into the grammar school which did not bother to change its name
# ::tok this meant that in each case a secondary modern school which would have been too small to survive was absorbed quietly and without fuss into the grammar school which did not bother to change its name
# ::alignments 33-34|0.1.0.1.0.0 31-32|0.1.0.1.0 27-28|0.1.0.1 26-27|0.1.0.1.1 23-24|0.1.0 21-22|0.1.0.2 20-21|0.1.0.2.0 19-20|0.1 17-18|0.1.1 15-16|0.1.1.1 14-15|0.1.0.0 9-10|0.1.1.0 8-9|0.1.1.0.0 7-8|0.1.0.1.0.0.0 5-6|0.1.2 4-5|0.1.2.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:51.379
# ::node	0	mean-01	1-2
# ::node	0.0	this	0-1
# ::node	0.1	absorb-01	19-20
# ::node	0.1.0	fuss-01	23-24
# ::node	0.1.0.0	too	14-15
# ::node	0.1.0.1	school	27-28
# ::node	0.1.0.1.0	bother-02	31-32
# ::node	0.1.0.1.0.0	change-01	33-34
# ::node	0.1.0.1.0.0.0	secondary	7-8
# ::node	0.1.0.1.1	grammar	26-27
# ::node	0.1.0.2	and	21-22
# ::node	0.1.0.2.0	quiet	20-21
# ::node	0.1.1	survive-01	17-18
# ::node	0.1.1.0	school	9-10
# ::node	0.1.1.0.0	modern	8-9
# ::node	0.1.1.1	small	15-16
# ::node	0.1.2	case	5-6
# ::node	0.1.2.0	each	4-5
# ::root	0	mean-01
# ::edge	absorb-01	ARG1	fuss-01	0.1	0.1.0	
# ::edge	absorb-01	prep-with	case	0.1	0.1.2	
# ::edge	and	op1	quiet	0.1.0.2	0.1.0.2.0	
# ::edge	and	op2	fuss-01	0.1.0.2	0.1.0	
# ::edge	bother-02	ARG0	school	0.1.0.1.0	0.1.0.1	
# ::edge	bother-02	ARG1	change-01	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	case	mod	each	0.1.2	0.1.2.0	
# ::edge	change-01	ARG1	secondary	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	fuss-01	ARG0	too	0.1.0	0.1.0.0	
# ::edge	fuss-01	ARG1	school	0.1.0	0.1.0.1	
# ::edge	mean-01	ARG0	this	0	0.0	
# ::edge	mean-01	ARG1	absorb-01	0	0.1	
# ::edge	school	mod	grammar	0.1.0.1	0.1.0.1.1	
# ::edge	school	mod	modern	0.1.1.0	0.1.1.0.0	
# ::edge	small	domain	survive-01	0.1.1.1	0.1.1	
# ::edge	survive-01	ARG0	school	0.1.1	0.1.1.0	
# ::edge	survive-01	ARG1	absorb-01	0.1.1	0.1	
(m2 / mean-01 
      :ARG0 (t2 / this) 
      :ARG1 (a2 / absorb-01 
            :ARG1 (f / fuss-01 
                  :ARG0 (t / too) 
                  :ARG1 (s / school 
                        :ARG0-of (b / bother-02 
                              :ARG1 (c / change-01 
                                    :ARG1 (s5 / secondary))) 
                        :mod (g / grammar)) 
                  :op-of (a / and 
                        :op1 (q / quiet))) 
            :ARG1-of (s2 / survive-01 
                  :ARG0 (s4 / school 
                        :mod (m / modern)) 
                  :domain-of (s3 / small)) 
            :prep-with (c2 / case 
                  :mod (e / each))))

# ::snt so why bother
# ::tok so why bother
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:51.386
# ::node	0	bother-02	2-3
# ::node	0.0	so	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG1	so	0	0.0	
(b / bother-02 
      :ARG1 (s / so))

# ::snt why would they bother anyway
# ::tok why would they bother anyway
# ::alignments 4-5|0.1 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:51.396
# ::node	0	bother-02	3-4
# ::node	0.0	they	2-3
# ::node	0.1	anyway	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	they	0	0.0	
# ::edge	bother-02	mod	anyway	0	0.1	
(b / bother-02 
      :ARG0 (t / they) 
      :mod (a / anyway))

# ::snt noel apologised for having bothered her by appearing at imber
# ::tok noel apologised for having bothered her by appearing at imber
# ::alignments 7-8|0 4-5|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:51.405
# ::node	0	appear-02	7-8
# ::node	0.0	bother-01	4-5
# ::root	0	appear-02
(a / appear-02 
      :ARG1-of (b / bother-01))

# ::snt now this does not bother me as my presence is usually taken for granted
# ::tok now this does not bother me as my presence is usually taken for granted
# ::alignments 13-14|0.2.0 10-11|0.2.1 8-9|0.2 4-5|0 1-2|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:51.476
# ::node	0	bother-02	4-5
# ::node	0.0	now	0-1
# ::node	0.1	this	1-2
# ::node	0.2	presence	8-9
# ::node	0.2.0	grant-01	13-14
# ::node	0.2.1	usual	10-11
# ::root	0	bother-02
# ::edge	bother-02	ARG0	now	0	0.0	
# ::edge	bother-02	ARG1	this	0	0.1	
# ::edge	bother-02	time	presence	0	0.2	
# ::edge	grant-01	ARG0	presence	0.2.0	0.2	
# ::edge	presence	mod	usual	0.2	0.2.1	
(b / bother-02 
      :ARG0 (n / now) 
      :ARG1 (t / this) 
      :time (p / presence 
            :ARG0-of (g / grant-01) 
            :mod (u / usual)))

# ::snt   this witticism received rapturous applause and left his speechwriters beaming no one seemingly bothered by the fact that it made no sense
# ::tok this witticism received rapturous applause and left his speechwriters beaming no one seemingly bothered by the fact that it made no sense
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:51.477
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt before a recent week off in sicily i read 100 guide books all of which went into tiresome detail about greek and roman remains but none of which bothered to say anything about sicilian driving habits
# ::tok before a recent week off in sicily i read 100 guide books all of which went into tiresome detail about greek and roman remains but none of which bothered to say anything about sicilian driving habits
# ::alignments 35-36|0.1.0 34-35|0.1.0.0 31-32|0.1 30-31|0 28-29|0.2 25-26|0.2.0 24-25|0.2.0.0 23-24|0.2.0.0.0.0.0 21-22|0.2.0.0.0.0 18-19|0.2.0.0.0 12-13|0.0.0.0.1 11-12|0.0.0.0 10-11|0.0.0.0.0 9-10|0.1.0.0.0 8-9|0.0.0 7-8|0.0 4-5|0.0.0.0.0.0 3-4|0.0.0.2 2-3|0.0.0.2.0 0-1|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.154
# ::node	0	say-01	30-31
# ::node	0.0	i	7-8
# ::node	0.0.0	read-01	8-9
# ::node	0.0.0.0	book	11-12
# ::node	0.0.0.0.0	guide-01	10-11
# ::node	0.0.0.0.0.0	off	4-5
# ::node	0.0.0.0.1	all	12-13
# ::node	0.0.0.1	before	0-1
# ::node	0.0.0.2	week	3-4
# ::node	0.0.0.2.0	recent	2-3
# ::node	0.1	anything	31-32
# ::node	0.1.0	habit	35-36
# ::node	0.1.0.0	drive-01	34-35
# ::node	0.1.0.0.0	100	9-10
# ::node	0.2	bother-01	28-29
# ::node	0.2.0	none	25-26
# ::node	0.2.0.0	contrast-01	24-25
# ::node	0.2.0.0.0	detail-01	18-19
# ::node	0.2.0.0.0.0	and	21-22
# ::node	0.2.0.0.0.0.0	remain-01	23-24
# ::root	0	say-01
# ::edge	and	op1	remain-01	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	before	op1	read-01	0.0.0.1	0.0.0	
# ::edge	book	mod	all	0.0.0.0	0.0.0.0.1	
# ::edge	bother-01	ARG0	none	0.2	0.2.0	
# ::edge	bother-01	ARG1	say-01	0.2	0	
# ::edge	contrast-01	ARG2	none	0.2.0.0	0.2.0	
# ::edge	detail-01	ARG0	contrast-01	0.2.0.0.0	0.2.0.0	
# ::edge	detail-01	ARG1	and	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	drive-01	ARG1	100	0.1.0.0	0.1.0.0.0	
# ::edge	guide-01	ARG0	off	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	guide-01	ARG1	book	0.0.0.0.0	0.0.0.0	
# ::edge	habit	mod	drive-01	0.1.0	0.1.0.0	
# ::edge	habit	quant	anything	0.1.0	0.1	
# ::edge	read-01	ARG0	i	0.0.0	0.0	
# ::edge	read-01	ARG1	book	0.0.0	0.0.0.0	
# ::edge	read-01	time	week	0.0.0	0.0.0.2	
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	anything	0	0.1	
# ::edge	week	time	recent	0.0.0.2	0.0.0.2.0	
(s / say-01 
      :ARG0 (i / i 
            :ARG0-of (r2 / read-01 
                  :ARG1 (b2 / book 
                        :ARG1-of (g / guide-01 
                              :ARG0 (o / off)) 
                        :mod (a3 / all)) 
                  :op-of (b3 / before) 
                  :time (w / week 
                        :time (r3 / recent)))) 
      :ARG1 (a / anything 
            :quant-of (h / habit 
                  :mod (d / drive-01 
                        :ARG1 100))) 
      :ARG1-of (b / bother-01 
            :ARG0 (n / none 
                  :ARG2-of (c / contrast-01 
                        :ARG0-of (d2 / detail-01 
                              :ARG1 (a2 / and 
                                    :op1 (r / remain-01)))))))

# ::snt you can hear andre on radio oxford just after 10am on friday but dont bother to write the recipe down dash
# ::tok you can hear andre on radio oxford just after 10am on friday but dont bother to write the recipe down dash
# ::alignments 19-20|0.1.0.1 16-17|0.1.0 14-15|0.1 12-13|0 11-12|0.0 8-9|0.1.1 7-8|0.1.1.0 5-6|0.1.1.1 2-3|0.1.0.0.0 1-2|0.1.0.0.0.0 0-1|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.460
# ::node	0	contrast-01	12-13
# ::node	0.0	friday	11-12
# ::node	0.1	bother-02	14-15
# ::node	0.1.0	write-01	16-17
# ::node	0.1.0.0	you	0-1
# ::node	0.1.0.0.0	hear-01	2-3
# ::node	0.1.0.0.0.0	possible	1-2
# ::node	0.1.0.1	down	19-20
# ::node	0.1.1	after	8-9
# ::node	0.1.1.0	just	7-8
# ::node	0.1.1.1	radio	5-6
# ::root	0	contrast-01
# ::edge	after	mod	just	0.1.1	0.1.1.0	
# ::edge	after	op1	radio	0.1.1	0.1.1.1	
# ::edge	after	op2	bother-02	0.1.1	0.1	
# ::edge	bother-02	ARG1	write-01	0.1	0.1.0	
# ::edge	contrast-01	ARG1	friday	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	hear-01	ARG0	you	0.1.0.0.0	0.1.0.0	
# ::edge	possible	domain	hear-01	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	write-01	ARG0	you	0.1.0	0.1.0.0	
# ::edge	write-01	time	down	0.1.0	0.1.0.1	
(c / contrast-01 
      :ARG1 (f / friday) 
      :ARG2 (b / bother-02 
            :ARG1 (w / write-01 
                  :ARG0 (y / you 
                        :ARG0-of (h / hear-01 
                              :domain-of (p / possible))) 
                  :time (d / down)) 
            :op-of (a / after 
                  :mod (j / just) 
                  :op1 (r / radio))))

# ::snt the corridor was full of old ladies anyway and no one else seemed bothered by this least of all the old ladies themselves
# ::tok the corridor was full of old ladies anyway and no one else seemed bothered by this least of all the old ladies themselves
# ::alignments 21-22|0.3 20-21|0.3.0 18-19|0.3.2 15-16|0.2 13-14|0.1 12-13|0 11-12|0.3.2.0 9-10|0.1.0 8-9|0.4 7-8|0.3.1 6-7|0.4.0 5-6|0.4.0.0 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.701
# ::node	0	seem-01	12-13
# ::node	0.0	full	3-4
# ::node	0.1	bother-01	13-14
# ::node	0.1.0	-	9-10
# ::node	0.2	this	15-16
# ::node	0.3	lady	21-22
# ::node	0.3.0	old	20-21
# ::node	0.3.1	anyway	7-8
# ::node	0.3.2	all	18-19
# ::node	0.3.2.0	else	11-12
# ::node	0.4	and	8-9
# ::node	0.4.0	lady	6-7
# ::node	0.4.0.0	old	5-6
# ::root	0	seem-01
# ::edge	all	mod	else	0.3.2	0.3.2.0	
# ::edge	and	op1	lady	0.4	0.4.0	
# ::edge	and	op2	seem-01	0.4	0	
# ::edge	anyway	poss	lady	0.3.1	0.3	
# ::edge	bother-01	ARG2	-	0.1	0.1.0	
# ::edge	lady	mod	old	0.3	0.3.0	
# ::edge	lady	mod	old	0.4.0	0.4.0.0	
# ::edge	lady	op1	seem-01	0.3	0	
# ::edge	lady	quant	all	0.3	0.3.2	
# ::edge	seem-01	ARG0	full	0	0.0	
# ::edge	seem-01	ARG1	bother-01	0	0.1	
# ::edge	this	op1	seem-01	0.2	0	
(s / seem-01 
      :ARG0 (f / full) 
      :ARG1 (b / bother-01 
            :ARG2 (- / -)) 
      :op-of (t / this) 
      :op-of (l / lady 
            :mod (o / old) 
            :poss-of (a3 / anyway) 
            :quant (a / all 
                  :mod (e / else))) 
      :op-of (a2 / and 
            :op1 (l2 / lady 
                  :mod (o2 / old))))

# ::snt now go on and coop up the fowls and dont bother me any more with your obstinacy
# ::tok now go on and coop up the fowls and dont bother me any more with your obstinacy
# ::alignments 12-13|0.1.0 10-11|0.1 8-9|0 3-4|0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.730
# ::node	0	and	8-9
# ::node	0.0	and	3-4
# ::node	0.1	bother-02	10-11
# ::node	0.1.0	any	12-13
# ::node	0.2	now	0-1
# ::root	0	and
# ::edge	and	op1	and	0	0.0	
# ::edge	and	op2	bother-02	0	0.1	
# ::edge	and	time	now	0	0.2	
# ::edge	bother-02	ARG1	any	0.1	0.1.0	
(a2 / and 
      :op1 (a3 / and) 
      :op2 (b / bother-02 
            :ARG1 (a / any)) 
      :time (n / now))

# ::snt no thats not what was bothering me not as such
# ::tok no thats not what was bothering me not as such
# ::alignments 9-10|0.1 5-6|0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.747
# ::node	0	bother-01	5-6
# ::node	0.0	that	1-2
# ::node	0.0.0	-	0-1
# ::node	0.1	such	9-10
# ::root	0	bother-01
# ::edge	bother-01	ARG0	that	0	0.0	
# ::edge	bother-01	ARG1	such	0	0.1	
# ::edge	that	polarity	-	0.0	0.0.0	
(b / bother-01 
      :ARG0 (t / that 
            :polarity (- / -)) 
      :ARG1 (s / such))

# ::snt often i wouldnt bother to try things on dash
# ::tok often i wouldnt bother to try things on dash
# ::alignments 6-7|0.1.0 5-6|0.1 3-4|0 1-2|0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.766
# ::node	0	bother-02	3-4
# ::node	0.0	i	1-2
# ::node	0.1	try-01	5-6
# ::node	0.1.0	thing	6-7
# ::node	0.2	often	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	try-01	0	0.1	
# ::edge	bother-02	manner	often	0	0.2	
# ::edge	try-01	ARG1	thing	0.1	0.1.0	
(b / bother-02 
      :ARG0 (i / i) 
      :ARG1 (t2 / try-01 
            :ARG1 (t / thing)) 
      :manner (o / often))

# ::snt   i bet bernhardt never bothered about her teeth said wexford to annoy her
# ::tok i bet bernhardt never bothered about her teeth said wexford to annoy her
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.767
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt spains quirky parliamentary habits are also to blame outside election time mps seldom bother to visit their home constituencies
# ::tok spains quirky parliamentary habits are also to blame outside election time mps seldom bother to visit their home constituencies
# ::alignments 18-19|0.0.1.0 17-18|0.0.1.0.0 15-16|0.0.1 13-14|0.0 12-13|0 10-11|0.0.0.0.0 9-10|0.0.0.0.0.0 8-9|0.0.0.0.0.0.1 7-8|0.0.0.0 5-6|0.0.0.0.0.0.0 3-4|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:52.982
# ::node	0	seldom	12-13
# ::node	0.0	bother-02	13-14
# ::node	0.0.0	habit	3-4
# ::node	0.0.0.0	blame-01	7-8
# ::node	0.0.0.0.0	time	10-11
# ::node	0.0.0.0.0.0	elect-01	9-10
# ::node	0.0.0.0.0.0.0	also	5-6
# ::node	0.0.0.0.0.0.1	outside	8-9
# ::node	0.0.1	visit-01	15-16
# ::node	0.0.1.0	constituency	18-19
# ::node	0.0.1.0.0	home	17-18
# ::root	0	seldom
(s / seldom 
      :frequency-of (b / bother-02 
            :ARG0 (h2 / habit 
                  :ARG0-of (b2 / blame-01 
                        :ARG1 (t / time 
                              :ARG0-of (e / elect-01 
                                    :ARG1 (a / also) 
                                    :mod (o / outside))))) 
            :ARG1 (v / visit-01 
                  :ARG1 (c / constituency 
                        :mod (h / home)))))

# ::snt the 123 runs he scored in this game included 98 in boundaries it really is a sign of impending old age when a batsman cannot even be bothered to run any more
# ::tok the 123 runs he scored in this game included 98 in boundaries it really is a sign of impending old age when a batsman cannot even be bothered to run any more
# ::alignments 30-31|0.1 27-28|0.3 20-21|0 19-20|0.4 18-19|0.2 13-14|0.3.0.0.0.1.1 12-13|0.3.0.0.0.0.0 11-12|0.3.0.0.0.0 9-10|0.0 8-9|0.3.0.0.0 7-8|0.3.0.0 6-7|0.3.0 4-5|0.3.0.0.0.1 3-4|0.3.0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:53.212
# ::node	0	age-01	20-21
# ::node	0.0	98	9-10
# ::node	0.1	any	30-31
# ::node	0.2	impend-01	18-19
# ::node	0.3	bother-01	27-28
# ::node	0.3.0	this	6-7
# ::node	0.3.0.0	game	7-8
# ::node	0.3.0.0.0	include-01	8-9
# ::node	0.3.0.0.0.0	boundary	11-12
# ::node	0.3.0.0.0.0.0	it	12-13
# ::node	0.3.0.0.0.1	score-01	4-5
# ::node	0.3.0.0.0.1.0	he	3-4
# ::node	0.3.0.0.0.1.1	really	13-14
# ::node	0.4	old	19-20
# ::root	0	age-01
# ::edge	age-01	ARG0	98	0	0.0	
# ::edge	age-01	ARG1	any	0	0.1	
# ::edge	age-01	mod	old	0	0.4	
# ::edge	bother-01	ARG0	this	0.3	0.3.0	
# ::edge	bother-01	ARG1	age-01	0.3	0	
# ::edge	boundary	poss	it	0.3.0.0.0.0	0.3.0.0.0.0.0	
# ::edge	game	mod	this	0.3.0.0	0.3.0	
# ::edge	impend-01	ARG1	age-01	0.2	0	
# ::edge	include-01	ARG0	boundary	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	include-01	ARG1	game	0.3.0.0.0	0.3.0.0	
# ::edge	score-01	ARG0	he	0.3.0.0.0.1	0.3.0.0.0.1.0	
# ::edge	score-01	ARG1	really	0.3.0.0.0.1	0.3.0.0.0.1.1	
# ::edge	score-01	time	include-01	0.3.0.0.0.1	0.3.0.0.0	
(a2 / age-01 
      :ARG0 98 
      :ARG1 (a / any) 
      :ARG1-of (i / impend-01) 
      :ARG1-of (b / bother-01 
            :ARG0 (t / this 
                  :mod-of (g / game 
                        :ARG1-of (i3 / include-01 
                              :ARG0 (b2 / boundary 
                                    :poss (i2 / it)) 
                              :time-of (s / score-01 
                                    :ARG0 (h / he) 
                                    :ARG1 (r / really)))))) 
      :mod (o / old))

# ::snt i dont think it bothers folks around here too much
# ::tok i dont think it bothers folks around here too much
# ::alignments 9-10|0.1.2 8-9|0.1.2.0 7-8|0.1.3.0 6-7|0.1.3 5-6|0.1.1 4-5|0.1 3-4|0.1.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:53.305
# ::node	0	think-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	bother-01	4-5
# ::node	0.1.0	it	3-4
# ::node	0.1.1	folk	5-6
# ::node	0.1.2	much	9-10
# ::node	0.1.2.0	too	8-9
# ::node	0.1.3	around	6-7
# ::node	0.1.3.0	here	7-8
# ::root	0	think-01
# ::edge	bother-01	ARG0	it	0.1	0.1.0	
# ::edge	bother-01	ARG1	folk	0.1	0.1.1	
# ::edge	bother-01	degree	much	0.1	0.1.2	
# ::edge	bother-01	location	around	0.1	0.1.3	
# ::edge	here	direction	around	0.1.3.0	0.1.3	
# ::edge	much	degree	too	0.1.2	0.1.2.0	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	bother-01	0	0.1	
(t2 / think-01 
      :ARG0 (i2 / i) 
      :ARG1 (b / bother-01 
            :ARG0 (i / it) 
            :ARG1 (f / folk) 
            :degree (m / much 
                  :degree (t / too)) 
            :location (a / around 
                  :direction-of (h / here))))

# ::snt she had closed her eyes and not bothered to reply but she had frequently used the incident as a joke since
# ::tok she had closed her eyes and not bothered to reply but she had frequently used the incident as a joke since
# ::alignments 20-21|0.1.2.0 19-20|0.1.2 16-17|0.1.1 14-15|0.1 13-14|0.1.3 11-12|0.1.0 10-11|0 9-10|0.0 7-8|0.0.0 5-6|0.0.0.0 4-5|0.0.0.0.0.1 2-3|0.0.0.0.0 0-1|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:53.507
# ::node	0	contrast-01	10-11
# ::node	0.0	reply-01	9-10
# ::node	0.0.0	bother-01	7-8
# ::node	0.0.0.0	and	5-6
# ::node	0.0.0.0.0	close-01	2-3
# ::node	0.0.0.0.0.0	she	0-1
# ::node	0.0.0.0.0.1	eye	4-5
# ::node	0.1	use-01	14-15
# ::node	0.1.0	she	11-12
# ::node	0.1.1	incident	16-17
# ::node	0.1.2	joke-01	19-20
# ::node	0.1.2.0	since	20-21
# ::node	0.1.3	frequent	13-14
# ::root	0	contrast-01
# ::edge	and	op1	close-01	0.0.0.0	0.0.0.0.0	
# ::edge	and	op2	bother-01	0.0.0.0	0.0.0	
# ::edge	bother-01	ARG1	reply-01	0.0.0	0.0	
# ::edge	close-01	ARG0	she	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	close-01	ARG1	eye	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	contrast-01	ARG1	reply-01	0	0.0	
# ::edge	contrast-01	ARG2	use-01	0	0.1	
# ::edge	joke-01	ARG1	since	0.1.2	0.1.2.0	
# ::edge	use-01	ARG0	she	0.1	0.1.0	
# ::edge	use-01	ARG1	incident	0.1	0.1.1	
# ::edge	use-01	ARG2	joke-01	0.1	0.1.2	
# ::edge	use-01	frequency	frequent	0.1	0.1.3	
(c / contrast-01 
      :ARG1 (r / reply-01 
            :ARG1-of (b / bother-01 
                  :op-of (a / and 
                        :op1 (c2 / close-01 
                              :ARG0 (s3 / she) 
                              :ARG1 (e / eye))))) 
      :ARG2 (u / use-01 
            :ARG0 (s2 / she) 
            :ARG1 (i / incident) 
            :ARG2 (j / joke-01 
                  :ARG1 (s / since)) 
            :frequency (f / frequent)))

# ::snt no they were not bothered about us but about a rival clan whose village they had just visited on a payback in revenge for a violent killing
# ::tok no they were not bothered about us but about a rival clan whose village they had just visited on a payback in revenge for a violent killing
# ::alignments 26-27|0.0.1.0 25-26|0.0.1.0.1 22-23|0.0.1.0.0 20-21|0.0.0.0.2 17-18|0.0.0.0 16-17|0.0.0.0.1 14-15|0.0.0 13-14|0.0.0.0.0 11-12|0.0.2 10-11|0.0.2.0 7-8|0 4-5|0.0 1-2|0.0.1 0-1|0.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:53.674
# ::node	0	contrast-01	7-8
# ::node	0.0	bother-01	4-5
# ::node	0.0.0	they	14-15
# ::node	0.0.0.0	visit-01	17-18
# ::node	0.0.0.0.0	village	13-14
# ::node	0.0.0.0.1	just	16-17
# ::node	0.0.0.0.2	payback	20-21
# ::node	0.0.1	they	1-2
# ::node	0.0.1.0	kill-01	26-27
# ::node	0.0.1.0.0	revenge-00	22-23
# ::node	0.0.1.0.0.0	-	0-1
# ::node	0.0.1.0.1	violent	25-26
# ::node	0.0.2	clan	11-12
# ::node	0.0.2.0	rival-01	10-11
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	they	0.0	0.0.0	
# ::edge	bother-01	ARG1	they	0.0	0.0.1	
# ::edge	bother-01	ARG2	clan	0.0	0.0.2	
# ::edge	contrast-01	ARG2	bother-01	0	0.0	
# ::edge	kill-01	ARG0	they	0.0.1.0	0.0.1	
# ::edge	kill-01	manner	violent	0.0.1.0	0.0.1.0.1	
# ::edge	revenge-00	ARG0	-	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	revenge-00	ARG1	kill-01	0.0.1.0.0	0.0.1.0	
# ::edge	rival-01	ARG0	clan	0.0.2.0	0.0.2	
# ::edge	visit-01	ARG0	they	0.0.0.0	0.0.0	
# ::edge	visit-01	ARG1	village	0.0.0.0	0.0.0.0.0	
# ::edge	visit-01	time	just	0.0.0.0	0.0.0.0.1	
# ::edge	visit-01	time	payback	0.0.0.0	0.0.0.0.2	
(c2 / contrast-01 
      :ARG2 (b / bother-01 
            :ARG0 (t / they 
                  :ARG0-of (v2 / visit-01 
                        :ARG1 (v3 / village) 
                        :time (j / just) 
                        :time (p / payback))) 
            :ARG1 (t2 / they 
                  :ARG0-of (k / kill-01 
                        :ARG1-of (r / revenge-00 
                              :ARG0 (- / -)) 
                        :manner (v / violent))) 
            :ARG2 (c / clan 
                  :ARG0-of (r2 / rival-01))))

# ::snt its certainly not down to fertiliser as we dont bother to feed it
# ::tok its certainly not down to fertiliser as we dont bother to feed it
# ::alignments 12-13|0.0.0.0 11-12|0.0.0 9-10|0 7-8|0.0 3-4|0.1 1-2|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:53.787
# ::node	0	bother-02	9-10
# ::node	0.0	we	7-8
# ::node	0.0.0	feed-01	11-12
# ::node	0.0.0.0	it	12-13
# ::node	0.0.0.1	certain	1-2
# ::node	0.1	down	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG0	we	0	0.0	
# ::edge	bother-02	ARG1	down	0	0.1	
# ::edge	certain	op1	feed-01	0.0.0.1	0.0.0	
# ::edge	feed-01	ARG0	we	0.0.0	0.0	
# ::edge	feed-01	ARG1	it	0.0.0	0.0.0.0	
(b / bother-02 
      :ARG0 (w / we 
            :ARG0-of (f / feed-01 
                  :ARG1 (i / it) 
                  :op-of (c / certain))) 
      :ARG1 (d / down))

# ::snt i mean i wouldnt bother normally sir but just pro tem i do have this unfortunate staffing difficulty
# ::tok i mean i wouldnt bother normally sir but just pro tem i do have this unfortunate staffing difficulty
# ::alignments 17-18|0.0.0 15-16|0.0 14-15|0.0.1 11-12|0.0.0.0 8-9|0.2 7-8|0 5-6|0.3 4-5|0.1 2-3|0.1.0.0.0 1-2|0.1.0.0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:54.075
# ::node	0	contrast-01	7-8
# ::node	0.0	fortunate-41	15-16
# ::node	0.0.0	difficult	17-18
# ::node	0.0.0.0	i	11-12
# ::node	0.0.1	this	14-15
# ::node	0.1	bother-02	4-5
# ::node	0.1.0	i	0-1
# ::node	0.1.0.0	mean-01	1-2
# ::node	0.1.0.0.0	i	2-3
# ::node	0.2	just	8-9
# ::node	0.3	normal	5-6
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	i	0.1	0.1.0	
# ::edge	bother-02	ARG1	contrast-01	0.1	0	
# ::edge	contrast-01	ARG1	fortunate-41	0	0.0	
# ::edge	contrast-01	ARG2	just	0	0.2	
# ::edge	contrast-01	frequency	normal	0	0.3	
# ::edge	difficult	poss	i	0.0.0	0.0.0.0	
# ::edge	fortunate-41	ARG1	difficult	0.0	0.0.0	
# ::edge	fortunate-41	polarity	this	0.0	0.0.1	
# ::edge	mean-01	ARG0	i	0.1.0.0	0.1.0	
# ::edge	mean-01	ARG1	i	0.1.0.0	0.1.0.0.0	
(c / contrast-01 
      :ARG1 (f / fortunate-41 
            :ARG1 (d / difficult 
                  :poss (i / i)) 
            :polarity (t / this)) 
      :ARG1-of (b / bother-02 
            :ARG0 (i3 / i 
                  :ARG0-of (m / mean-01 
                        :ARG1 (i2 / i)))) 
      :ARG2 (j / just) 
      :frequency (n / normal))

# ::snt jodie foster fresh from her triumphs in the accused released on video last month is the only reason to bother as with five corners 15 pathe 13 oct where she is almost raped again and is carted about unconscious by a psychopath
# ::tok jodie foster fresh from her triumphs in the accused released on video last month is the only reason to bother as with five corners 15 pathe 13 oct where she is almost raped again and is carted about unconscious by a psychopath
# ::alignments 38-39|0.2.0.0.0.1.0.0+0.2.0.0.0.1.0 34-35|0.4 33-34|0.4.0.2 32-33|0.4.0 31-32|0.4.0.3 29-30|0.4.0.1 27-28|0.4.0.0.0+0.4.0.0 26-27|0.4.0.0.0.0 24-25|0.0 23-24|0.3.0 22-23|0.1 19-20|0.2.0.0.0.1 17-18|0.2.0.0.0 16-17|0.2.0.0.0.0 13-14|0.2.0.0.0.1.1.0+0.2.0.0.0.1.1 12-13|0.2.0.0.0.1.1.0.0 11-12|0.3.1 9-10|0.3 8-9|0 5-6|0.2 2-3|0.2.0 1-2|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:54.624
# ::node	0	accuse-01	8-9
# ::node	0.0	15	24-25
# ::node	0.1	5	22-23
# ::node	0.2	triumph-01	5-6
# ::node	0.2.0	fresh	2-3
# ::node	0.2.0.0	foster	1-2
# ::node	0.2.0.0.0	reason	17-18
# ::node	0.2.0.0.0.0	only	16-17
# ::node	0.2.0.0.0.1	bother-02	19-20
# ::node	0.2.0.0.0.1.0	conscious	38-39
# ::node	0.2.0.0.0.1.0.0	-	38-39
# ::node	0.2.0.0.0.1.1	temporal-quantity	13-14
# ::node	0.2.0.0.0.1.1.0	month	13-14
# ::node	0.2.0.0.0.1.1.0.0	last	12-13
# ::node	0.3	release-01	9-10
# ::node	0.3.0	corner	23-24
# ::node	0.3.1	video	11-12
# ::node	0.4	and	34-35
# ::node	0.4.0	rape-01	32-33
# ::node	0.4.0.0	date-entity	27-28
# ::node	0.4.0.0.0	10	27-28
# ::node	0.4.0.0.0.0	13	26-27
# ::node	0.4.0.1	she	29-30
# ::node	0.4.0.2	again	33-34
# ::node	0.4.0.3	almost	31-32
# ::root	0	accuse-01
# ::edge	10	quant	13	0.4.0.0.0	0.4.0.0.0.0	
# ::edge	accuse-01	ARG0	15	0	0.0	
# ::edge	accuse-01	ARG1	5	0	0.1	
# ::edge	accuse-01	ARG2	and	0	0.4	
# ::edge	bother-02	ARG0	conscious	0.2.0.0.0.1	0.2.0.0.0.1.0	
# ::edge	bother-02	ARG1	temporal-quantity	0.2.0.0.0.1	0.2.0.0.0.1.1	
# ::edge	conscious	polarity	-	0.2.0.0.0.1.0	0.2.0.0.0.1.0.0	
# ::edge	date-entity	month	10	0.4.0.0	0.4.0.0.0	
# ::edge	foster	mod	fresh	0.2.0.0	0.2.0	
# ::edge	fresh	beneficiary	triumph-01	0.2.0	0.2	
# ::edge	month	mod	last	0.2.0.0.0.1.1.0	0.2.0.0.0.1.1.0.0	
# ::edge	rape-01	ARG0	date-entity	0.4.0	0.4.0.0	
# ::edge	rape-01	ARG1	she	0.4.0	0.4.0.1	
# ::edge	rape-01	manner	and	0.4.0	0.4	
# ::edge	rape-01	mod	again	0.4.0	0.4.0.2	
# ::edge	rape-01	mod	almost	0.4.0	0.4.0.3	
# ::edge	reason	domain	foster	0.2.0.0.0	0.2.0.0	
# ::edge	reason	mod	only	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	reason	purpose	bother-02	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	release-01	ARG0	corner	0.3	0.3.0	
# ::edge	release-01	ARG1	accuse-01	0.3	0	
# ::edge	release-01	medium	video	0.3	0.3.1	
# ::edge	temporal-quantity	unit	month	0.2.0.0.0.1.1	0.2.0.0.0.1.1.0	
# ::edge	triumph-01	ARG1	accuse-01	0.2	0	
(a4 / accuse-01 
      :ARG0 15 
      :ARG1 5 
      :ARG1-of (t2 / triumph-01 
            :beneficiary-of (f / fresh 
                  :mod-of (f2 / foster 
                        :domain-of (r2 / reason 
                              :mod (o / only) 
                              :purpose (b / bother-02 
                                    :ARG0 (c / conscious 
                                          :polarity -) 
                                    :ARG1 (t / temporal-quantity 
                                          :unit (m / month 
                                                :mod (l / last)))))))) 
      :ARG1-of (r3 / release-01 
            :ARG0 (c2 / corner) 
            :medium (v / video)) 
      :ARG2 (a / and 
            :manner-of (r / rape-01 
                  :ARG0 (d / date-entity 
                        :month (1 / 10 
                              :quant 13)) 
                  :ARG1 (s / she) 
                  :mod (a2 / again) 
                  :mod (a3 / almost))))

# ::snt we wont bother you much longer
# ::tok we wont bother you much longer
# ::alignments 5-6|0.2 4-5|0.0.0 3-4|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:54.635
# ::node	0	bother-02	2-3
# ::node	0.0	we	0-1
# ::node	0.0.0	much	4-5
# ::node	0.1	you	3-4
# ::node	0.2	long	5-6
# ::root	0	bother-02
# ::edge	bother-02	ARG0	we	0	0.0	
# ::edge	bother-02	ARG1	you	0	0.1	
# ::edge	bother-02	time	long	0	0.2	
# ::edge	much	op1	we	0.0.0	0.0	
(b / bother-02 
      :ARG0 (w / we 
            :op-of (m / much)) 
      :ARG1 (y / you) 
      :time (l / long))

# ::snt the leader of the house is now a man to whom ministers often dont bother to circulate papers
# ::tok the leader of the house is now a man to whom ministers often dont bother to circulate papers
# ::alignments 17-18|0.1 14-15|0 12-13|0.0.0.2 11-12|0.0.0.1+0.0.0 8-9|0.0 6-7|0.0.1 4-5|0.0.0.0.0.0 1-2|0.0.0.0.0+0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:54.780
# ::node	0	bother-02	14-15
# ::node	0.0	man	8-9
# ::node	0.0.0	have-org-role-91	11-12
# ::node	0.0.0.0	person	1-2
# ::node	0.0.0.0.0	lead-02	1-2
# ::node	0.0.0.0.0.0	house	4-5
# ::node	0.0.0.1	minister	11-12
# ::node	0.0.0.2	often	12-13
# ::node	0.0.1	now	6-7
# ::node	0.1	paper	17-18
# ::root	0	bother-02
# ::edge	bother-02	ARG0	man	0	0.0	
# ::edge	bother-02	ARG1	paper	0	0.1	
# ::edge	have-org-role-91	ARG0	person	0.0.0	0.0.0.0	
# ::edge	have-org-role-91	ARG1	man	0.0.0	0.0	
# ::edge	have-org-role-91	ARG2	minister	0.0.0	0.0.0.1	
# ::edge	have-org-role-91	direction	often	0.0.0	0.0.0.2	
# ::edge	lead-02	ARG0	person	0.0.0.0.0	0.0.0.0	
# ::edge	lead-02	ARG1	house	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	man	time	now	0.0	0.0.1	
(b / bother-02 
      :ARG0 (m2 / man 
            :ARG1-of (h / have-org-role-91 
                  :ARG0 (p2 / person 
                        :ARG0-of (l / lead-02 
                              :ARG1 (h2 / house))) 
                  :ARG2 (m / minister) 
                  :direction (o / often)) 
            :time (n / now)) 
      :ARG1 (p / paper))

# ::snt i think about making some coffee but i dont bother in the end dash
# ::tok i think about making some coffee but i dont bother in the end dash
# ::alignments 9-10|0.0 7-8|0.1 6-7|0 5-6|0.0.0.1 4-5|0.0.0.1.0 1-2|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:54.824
# ::node	0	contrast-01	6-7
# ::node	0.0	bother-02	9-10
# ::node	0.0.0	think-01	1-2
# ::node	0.0.0.0	i	0-1
# ::node	0.0.0.1	coffee	5-6
# ::node	0.0.0.1.0	some	4-5
# ::node	0.1	i	7-8
# ::root	0	contrast-01
# ::edge	bother-02	ARG1	think-01	0.0	0.0.0	
# ::edge	coffee	quant	some	0.0.0.1	0.0.0.1.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.0	
# ::edge	contrast-01	ARG2	i	0	0.1	
# ::edge	think-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	think-01	ARG1	coffee	0.0.0	0.0.0.1	
(c / contrast-01 
      :ARG1 (b / bother-02 
            :ARG1 (t / think-01 
                  :ARG0 (i2 / i) 
                  :ARG1 (c2 / coffee 
                        :quant (s / some)))) 
      :ARG2 (i / i))

# ::snt few if any ever bother to call
# ::tok few if any ever bother to call
# ::alignments 4-5|0 3-4|0.2 2-3|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:54.834
# ::node	0	bother-02	4-5
# ::node	0.0	any	2-3
# ::node	0.1	few	0-1
# ::node	0.2	ever	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG0	any	0	0.0	
# ::edge	bother-02	ARG1	few	0	0.1	
# ::edge	bother-02	time	ever	0	0.2	
(b / bother-02 
      :ARG0 (a / any) 
      :ARG1 (f / few) 
      :time (e / ever))

# ::snt he had been whistling and probably not bothering to tread softly
# ::tok he had been whistling and probably not bothering to tread softly
# ::alignments 9-10|0.1.1 7-8|0.1 5-6|0.0 4-5|0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:54.849
# ::node	0	and	4-5
# ::node	0.0	probable	5-6
# ::node	0.1	bother-01	7-8
# ::node	0.1.0	he	0-1
# ::node	0.1.1	tread-01	9-10
# ::root	0	and
# ::edge	and	op1	probable	0	0.0	
# ::edge	and	op2	bother-01	0	0.1	
# ::edge	bother-01	ARG0	he	0.1	0.1.0	
# ::edge	bother-01	ARG1	tread-01	0.1	0.1.1	
(a / and 
      :op1 (p / probable) 
      :op2 (b / bother-01 
            :ARG0 (h / he) 
            :ARG1 (t / tread-01)))

# ::snt lloyds believes many customers would not bother to return a letter giving express consent to the charge even if they were willing to pay it and wanted to keep their accounts open
# ::tok lloyds believes many customers would not bother to return a letter giving express consent to the charge even if they were willing to pay it and wanted to keep their accounts open
# ::alignments 30-31|0.1.2.0.0.0.0.0 26-27|0.1.2.0.0 25-26|0.1.2.0.0.0 24-25|0.1.2.0.0.0.0.1 23-24|0.1.2.0.0.0.0 21-22|0.1.2.0.0.0.0.2 19-20|0.1.2.0.0.0.0.2.0 13-14|0.0 12-13|0 10-11|0.1.1 6-7|0.1 3-4|0.1.0 2-3|0.1.0.0 1-2|0.1.2 0-1|0.1.2.0.1.0+0.1.2.0.1+0.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:55.318
# ::node	0	express-01	12-13
# ::node	0.0	consent-01	13-14
# ::node	0.1	bother-02	6-7
# ::node	0.1.0	customer	3-4
# ::node	0.1.0.0	many	2-3
# ::node	0.1.1	letter	10-11
# ::node	0.1.2	believe-01	1-2
# ::node	0.1.2.0	company	0-1
# ::node	0.1.2.0.0	want-01	26-27
# ::node	0.1.2.0.0.0	and	25-26
# ::node	0.1.2.0.0.0.0	pay-01	23-24
# ::node	0.1.2.0.0.0.0.0	account	30-31
# ::node	0.1.2.0.0.0.0.1	it	24-25
# ::node	0.1.2.0.0.0.0.2	will-02	21-22
# ::node	0.1.2.0.0.0.0.2.0	they	19-20
# ::node	0.1.2.0.1	name	0-1
# ::node	0.1.2.0.1.0	"Lloyds"	0-1
# ::root	0	express-01
# ::edge	and	op1	want-01	0.1.2.0.0.0	0.1.2.0.0	
# ::edge	believe-01	ARG0	company	0.1.2	0.1.2.0	
# ::edge	believe-01	ARG1	bother-02	0.1.2	0.1	
# ::edge	bother-02	ARG0	customer	0.1	0.1.0	
# ::edge	bother-02	ARG1	letter	0.1	0.1.1	
# ::edge	company	name	name	0.1.2.0	0.1.2.0.1	
# ::edge	customer	quant	many	0.1.0	0.1.0.0	
# ::edge	express-01	ARG1	consent-01	0	0.0	
# ::edge	express-01	ARG2	bother-02	0	0.1	
# ::edge	name	op1	"Lloyds"	0.1.2.0.1	0.1.2.0.1.0	
# ::edge	pay-01	ARG0	account	0.1.2.0.0.0.0	0.1.2.0.0.0.0.0	
# ::edge	pay-01	ARG1	it	0.1.2.0.0.0.0	0.1.2.0.0.0.0.1	
# ::edge	pay-01	ARG3	and	0.1.2.0.0.0.0	0.1.2.0.0.0	
# ::edge	want-01	ARG0	company	0.1.2.0.0	0.1.2.0	
# ::edge	will-02	ARG0	they	0.1.2.0.0.0.0.2	0.1.2.0.0.0.0.2.0	
# ::edge	will-02	ARG1	pay-01	0.1.2.0.0.0.0.2	0.1.2.0.0.0.0	
(e / express-01 
      :ARG1 (c / consent-01) 
      :ARG2 (b / bother-02 
            :ARG0 (c2 / customer 
                  :quant (m / many)) 
            :ARG1 (l / letter) 
            :ARG1-of (b2 / believe-01 
                  :ARG0 (c3 / company 
                        :ARG0-of (w / want-01 
                              :op-of (a2 / and 
                                    :ARG3-of (p / pay-01 
                                          :ARG0 (a / account) 
                                          :ARG1 (i / it) 
                                          :ARG1-of (w2 / will-02 
                                                :ARG0 (t / they))))) 
                        :name (n / name 
                              :op1 "Lloyds")))))

# ::snt if anyone fell overboard in future he would prefer to know whether to bother searching for something buoyant to throw to him and he would want a clue about how long he had to drag him out
# ::tok if anyone fell overboard in future he would prefer to know whether to bother searching for something buoyant to throw to him and he would want a clue about how long he had to drag him out
# ::alignments 34-35|0.1.0.1.1.1.0 31-32|0.1.0.1.1.1.0.0 27-28|0.1.0.1.1.1 25-26|0.1.0.1.1 23-24|0.1.0.1.1.0 22-23|0.1.0.1 19-20|0.1.0.1.1.0.0 16-17|0.0.0 14-15|0.0 13-14|0 10-11|0.1 8-9|0.1.0 6-7|0.1.0.0 5-6|0.1.0.2 2-3|0.1.0.1.0 1-2|0.1.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.444
# ::node	0	bother-02	13-14
# ::node	0.0	search-01	14-15
# ::node	0.0.0	something	16-17
# ::node	0.1	know-01	10-11
# ::node	0.1.0	prefer-01	8-9
# ::node	0.1.0.0	he	6-7
# ::node	0.1.0.1	and	22-23
# ::node	0.1.0.1.0	fall-01	2-3
# ::node	0.1.0.1.0.0	anyone	1-2
# ::node	0.1.0.1.1	want-01	25-26
# ::node	0.1.0.1.1.0	he	23-24
# ::node	0.1.0.1.1.0.0	throw-01	19-20
# ::node	0.1.0.1.1.1	clue	27-28
# ::node	0.1.0.1.1.1.0	drag-01	34-35
# ::node	0.1.0.1.1.1.0.0	he	31-32
# ::node	0.1.0.2	future	5-6
# ::root	0	bother-02
# ::edge	and	op1	fall-01	0.1.0.1	0.1.0.1.0	
# ::edge	and	op2	prefer-01	0.1.0.1	0.1.0	
# ::edge	and	op3	want-01	0.1.0.1	0.1.0.1.1	
# ::edge	bother-02	ARG1	search-01	0	0.0	
# ::edge	drag-01	ARG0	he	0.1.0.1.1.1.0	0.1.0.1.1.1.0.0	
# ::edge	drag-01	ARG1	clue	0.1.0.1.1.1.0	0.1.0.1.1.1	
# ::edge	fall-01	ARG0	anyone	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	know-01	ARG1	bother-02	0.1	0	
# ::edge	prefer-01	ARG0	he	0.1.0	0.1.0.0	
# ::edge	prefer-01	ARG1	know-01	0.1.0	0.1	
# ::edge	prefer-01	time	future	0.1.0	0.1.0.2	
# ::edge	search-01	destination	something	0.0	0.0.0	
# ::edge	throw-01	ARG0	he	0.1.0.1.1.0.0	0.1.0.1.1.0	
# ::edge	want-01	ARG0	he	0.1.0.1.1	0.1.0.1.1.0	
# ::edge	want-01	ARG1	clue	0.1.0.1.1	0.1.0.1.1.1	
(b / bother-02 
      :ARG1 (s2 / search-01 
            :destination (s / something)) 
      :ARG1-of (k / know-01 
            :ARG1-of (p / prefer-01 
                  :ARG0 (h3 / he) 
                  :op-of (a / and 
                        :op1 (f2 / fall-01 
                              :ARG0 (a2 / anyone)) 
                        :op2 (w / want-01 
                              :ARG0 (h2 / he 
                                    :ARG0-of (t / throw-01)) 
                              :ARG1 (c / clue 
                                    :ARG1-of (d / drag-01 
                                          :ARG0 (h / he))))) 
                  :time (f / future))))

# ::snt it was what happened afterwards that bothered me he said
# ::tok it was what happened afterwards that bothered me he said
# ::alignments 9-10|0 8-9|0.0 6-7|0.0.0 4-5|0.0.0.0.1 3-4|0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.468
# ::node	0	say-01	9-10
# ::node	0.0	he	8-9
# ::node	0.0.0	bother-01	6-7
# ::node	0.0.0.0	happen-01	3-4
# ::node	0.0.0.0.0	it	0-1
# ::node	0.0.0.0.1	afterwards	4-5
# ::root	0	say-01
# ::edge	bother-01	ARG1	happen-01	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG2	he	0.0.0	0.0	
# ::edge	happen-01	ARG1	it	0.0.0.0	0.0.0.0.0	
# ::edge	happen-01	time	afterwards	0.0.0.0	0.0.0.0.1	
# ::edge	say-01	ARG0	he	0	0.0	
(s / say-01 
      :ARG0 (h / he 
            :ARG2-of (b / bother-01 
                  :ARG1 (h2 / happen-01 
                        :ARG1 (i / it) 
                        :time (a / afterwards)))))

# ::snt bother
# ::tok bother
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.470
# ::node	0	bother-02	0-1
# ::root	0	bother-02
(b / bother-02)

# ::snt is that it  is that what is bothering you
# ::tok is that it is that what is bothering you
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.471
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt   she didnt bother to sit down
# ::tok she didnt bother to sit down
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.472
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt   irina said to franca im sorry to bother you but could you give me the name and address of that doctor
# ::tok irina said to franca im sorry to bother you but could you give me the name and address of that doctor
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.473
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt when fiona heard that she felt better again and sat down in her dressinggown in front of the tv with a marlboro and not bothering to go back to the jacobean tumbler she had been drinking out of punished the white nun out of her teamug until it was time to dress
# ::tok when fiona heard that she felt better again and sat down in her dressinggown in front of the tv with a marlboro and not bothering to go back to the jacobean tumbler she had been drinking out of punished the white nun out of her teamug until it was time to dress
# ::alignments 51-52|0 49-50|0.0 47-48|0.0.0.0 46-47|0.0.0.2.1.3 40-41|0.0.0.2.1.0 38-39|0.0.0 35-36|0.0.0.1 32-33|0.0.0.1.0 27-28|0.0.0.2.1.1 24-25|0.0.0.2.1 22-23|0.0.0.2 15-16|0.0.0.2.0 10-11|0.0.0.2.1.2.0.1 8-9|0.0.0.2.1.2 7-8|0.0.0.2.1.2.0.3 5-6|0.0.0.2.1.2.0 4-5|0.0.0.2.1.2.0.0 2-3|0.0.0.2.1.2.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.968
# ::node	0	dress	51-52
# ::node	0.0	time	49-50
# ::node	0.0.0	punish-01	38-39
# ::node	0.0.0.0	it	47-48
# ::node	0.0.0.1	drink-01	35-36
# ::node	0.0.0.1.0	she	32-33
# ::node	0.0.0.2	and	22-23
# ::node	0.0.0.2.0	front	15-16
# ::node	0.0.0.2.1	bother-01	24-25
# ::node	0.0.0.2.1.0	white	40-41
# ::node	0.0.0.2.1.1	back	27-28
# ::node	0.0.0.2.1.2	and	8-9
# ::node	0.0.0.2.1.2.0	feel-01	5-6
# ::node	0.0.0.2.1.2.0.0	she	4-5
# ::node	0.0.0.2.1.2.0.1	down	10-11
# ::node	0.0.0.2.1.2.0.2	hear-01	2-3
# ::node	0.0.0.2.1.2.0.3	again	7-8
# ::node	0.0.0.2.1.3	until	46-47
# ::root	0	dress
(d / dress 
      :purpose-of (t / time 
            :ARG0-of (p / punish-01 
                  :ARG1 (i / it) 
                  :ARG1-of (d2 / drink-01 
                        :ARG0 (s / she)) 
                  :op-of (a / and 
                        :op1 (f / front) 
                        :op2 (b2 / bother-01 
                              :ARG0 (w / white) 
                              :ARG1 (b / back) 
                              :op-of (a2 / and 
                                    :op1 (f2 / feel-01 
                                          :ARG0 (s2 / she) 
                                          :ARG1 (d3 / down) 
                                          :ARG1-of (h / hear-01) 
                                          :mod (a3 / again))) 
                              :op-of (u / until))))))

# ::snt cowley was not as bothered as he might have been
# ::tok cowley was not as bothered as he might have been
# ::alignments 6-7|0.0 4-5|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:56.977
# ::node	0	bother-01	4-5
# ::node	0.0	he	6-7
# ::root	0	bother-01
# ::edge	bother-01	ARG2	he	0	0.0	
(b / bother-01 
      :ARG2 (h / he))

# ::snt the issues relating to the power she has now and her ancestors have had do not bother her
# ::tok the issues relating to the power she has now and her ancestors have had do not bother her
# ::alignments 16-17|0 11-12|0.0.0.0.0.1+0.0.0.0.0 9-10|0.0.0.0.0.0.0.0 8-9|0.0.0.0.0.0 6-7|0.0.0.0.0.0.0 5-6|0.0.0.0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:57.089
# ::node	0	bother-02	16-17
# ::node	0.0	issue	1-2
# ::node	0.0.0	relate-01	2-3
# ::node	0.0.0.0	power	5-6
# ::node	0.0.0.0.0	have-rel-role-91	11-12
# ::node	0.0.0.0.0.0	now	8-9
# ::node	0.0.0.0.0.0.0	she	6-7
# ::node	0.0.0.0.0.0.0.0	and	9-10
# ::node	0.0.0.0.0.1	ancestor	11-12
# ::root	0	bother-02
# ::edge	and	op1	she	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	bother-02	ARG1	issue	0	0.0	
# ::edge	have-rel-role-91	ARG0	power	0.0.0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG1	now	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	have-rel-role-91	ARG2	ancestor	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	now	domain	she	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	relate-01	ARG1	issue	0.0.0	0.0	
# ::edge	relate-01	ARG2	power	0.0.0	0.0.0.0	
(b / bother-02 
      :ARG1 (i / issue 
            :ARG1-of (r / relate-01 
                  :ARG2 (p / power 
                        :ARG0-of (h / have-rel-role-91 
                              :ARG1 (n / now 
                                    :domain (s / she 
                                          :op-of (a2 / and))) 
                              :ARG2 (a / ancestor))))))

# ::snt no one bothered this time
# ::tok no one bothered this time
# ::alignments 4-5|0.0 3-4|0.0.0 2-3|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:57.097
# ::node	0	bother-01	2-3
# ::node	0.0	time	4-5
# ::node	0.0.0	this	3-4
# ::node	0.1	-	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG1	time	0	0.0	
# ::edge	bother-01	polarity	-	0	0.1	
# ::edge	time	mod	this	0.0	0.0.0	
(b / bother-01 
      :ARG1 (t / time 
            :mod (t2 / this)) 
      :polarity (- / -))

# ::snt  well he doesnt bother to mention that the king also had an  official welcome at carfax which was the normal place what  was known as the penniless bench which was at the end of st  martins church  only the inaudible seconds1 of that remains at the moment  now
# ::tok well he doesnt bother to mention that the king also had an official welcome at carfax which was the normal place what was known as the penniless bench which was at the end of st martins church only the inaudible seconds1 of that remains at the moment now
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:57.098
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt are you on our side or their side he did not bother to explain what he meant by their side
# ::tok are you on our side or their side he did not bother to explain what he meant by their side
# ::alignments 19-20|0.0.0.0.0.0 16-17|0.0.0.0 15-16|0.0.0.0.0 13-14|0.0.0 11-12|0 8-9|0.0 7-8|0.1 5-6|0.1.0 4-5|0.1.1 1-2|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:57.207
# ::node	0	bother-02	11-12
# ::node	0.0	he	8-9
# ::node	0.0.0	explain-01	13-14
# ::node	0.0.0.0	mean-01	16-17
# ::node	0.0.0.0.0	he	15-16
# ::node	0.0.0.0.0.0	side	19-20
# ::node	0.0.0.1	you	1-2
# ::node	0.1	side	7-8
# ::node	0.1.0	or	5-6
# ::node	0.1.1	side	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	he	0	0.0	
# ::edge	bother-02	ARG1	side	0	0.1	
# ::edge	explain-01	ARG0	he	0.0.0	0.0	
# ::edge	explain-01	ARG1	mean-01	0.0.0	0.0.0.0	
# ::edge	explain-01	ARG2	you	0.0.0	0.0.0.1	
# ::edge	mean-01	ARG0	he	0.0.0.0	0.0.0.0.0	
# ::edge	or	op1	side	0.1.0	0.1	
# ::edge	side	poss	he	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	side	poss	side	0.1	0.1.1	
(b / bother-02 
      :ARG0 (h2 / he 
            :ARG0-of (e / explain-01 
                  :ARG1 (m / mean-01 
                        :ARG0 (h / he 
                              :poss-of (s / side))) 
                  :ARG2 (y / you))) 
      :ARG1 (s2 / side 
            :op-of (o / or) 
            :poss (s3 / side)))

# ::snt there isnt a procedural calculus which could be written in a formal notation chiefly because data processing innovators havent bothered to write it
# ::tok there isnt a procedural calculus which could be written in a formal notation chiefly because data processing innovators havent bothered to write it
# ::alignments 22-23|0.0.0.1 21-22|0.0.0 19-20|0.0 16-17|0.1.0 15-16|0.1.0.0 14-15|0 13-14|0.2 11-12|0.0.0.0 8-9|0.1 6-7|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:57.311
# ::node	0	cause-01	14-15
# ::node	0.0	bother-01	19-20
# ::node	0.0.0	write-01	21-22
# ::node	0.0.0.0	formal	11-12
# ::node	0.0.0.1	it	22-23
# ::node	0.1	write-01	8-9
# ::node	0.1.0	process-01	16-17
# ::node	0.1.0.0	data	15-16
# ::node	0.1.1	possible	6-7
# ::node	0.2	chiefly	13-14
# ::root	0	cause-01
# ::edge	bother-01	ARG1	write-01	0.0	0.0.0	
# ::edge	cause-01	ARG0	bother-01	0	0.0	
# ::edge	cause-01	ARG1	write-01	0	0.1	
# ::edge	cause-01	mod	chiefly	0	0.2	
# ::edge	possible	domain	write-01	0.1.1	0.1	
# ::edge	process-01	ARG1	data	0.1.0	0.1.0.0	
# ::edge	write-01	ARG0	formal	0.0.0	0.0.0.0	
# ::edge	write-01	ARG1	it	0.0.0	0.0.0.1	
# ::edge	write-01	ARG1	process-01	0.1	0.1.0	
(c / cause-01 
      :ARG0 (b / bother-01 
            :ARG1 (w / write-01 
                  :ARG0 (f / formal) 
                  :ARG1 (i / it))) 
      :ARG1 (w2 / write-01 
            :ARG1 (p / process-01 
                  :ARG1 (d / data)) 
            :domain-of (p2 / possible)) 
      :mod (c2 / chiefly))

# ::snt for example if you smell burning in the middle of the night you will respond immediately and fully and not bother to consult any body clock to see if you should calm down and be asleep
# ::tok for example if you smell burning in the middle of the night you will respond immediately and fully and not bother to consult any body clock to see if you should calm down and be asleep
# ::alignments 33-34|0.2.1 32-33|0.1.2.1.0.0 31-32|0.1.2.1.0 30-31|0.1.2.1 29-30|0.1.2.1.1 27-28|0.1.2 25-26|0.1.1 24-25|0.1.2.0 23-24|0.1.1.0 22-23|0.1 20-21|0 18-19|0.2 17-18|0.0.0.1.0 16-17|0.0.0.1 15-16|0.2.0 14-15|0.0.0 12-13|0.0 11-12|0.1.0 8-9|0.0.0.0 5-6|0.0.0.0.0 4-5|0.0.0.0.0.0.0 3-4|0.0.0.0.0.0 1-2|0.0.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:57.960
# ::node	0	bother-02	20-21
# ::node	0.0	you	12-13
# ::node	0.0.0	respond-01	14-15
# ::node	0.0.0.0	middle	8-9
# ::node	0.0.0.0.0	burn-01	5-6
# ::node	0.0.0.0.0.0	you	3-4
# ::node	0.0.0.0.0.0.0	smell-01	4-5
# ::node	0.0.0.0.0.0.0.0	example	1-2
# ::node	0.0.0.1	and	16-17
# ::node	0.0.0.1.0	full	17-18
# ::node	0.1	consult-01	22-23
# ::node	0.1.0	night	11-12
# ::node	0.1.1	clock	25-26
# ::node	0.1.1.0	any	23-24
# ::node	0.1.2	see-01	27-28
# ::node	0.1.2.0	body	24-25
# ::node	0.1.2.1	recommend-01	30-31
# ::node	0.1.2.1.0	calm	31-32
# ::node	0.1.2.1.0.0	down	32-33
# ::node	0.1.2.1.1	you	29-30
# ::node	0.2	and	18-19
# ::node	0.2.0	immediate	15-16
# ::node	0.2.1	and	33-34
# ::root	0	bother-02
# ::edge	and	op1	immediate	0.2	0.2.0	
# ::edge	and	op1	respond-01	0.0.0.1	0.0.0	
# ::edge	and	op2	bother-02	0.2	0	
# ::edge	and	op2	full	0.0.0.1	0.0.0.1.0	
# ::edge	and	op3	and	0.2	0.2.1	
# ::edge	bother-02	ARG0	you	0	0.0	
# ::edge	bother-02	ARG1	consult-01	0	0.1	
# ::edge	burn-01	ARG0	you	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	burn-01	location	middle	0.0.0.0.0	0.0.0.0	
# ::edge	calm	direction	down	0.1.2.1.0	0.1.2.1.0.0	
# ::edge	clock	mod	any	0.1.1	0.1.1.0	
# ::edge	consult-01	ARG0	night	0.1	0.1.0	
# ::edge	consult-01	ARG1	clock	0.1	0.1.1	
# ::edge	consult-01	purpose	see-01	0.1	0.1.2	
# ::edge	recommend-01	ARG1	calm	0.1.2.1	0.1.2.1.0	
# ::edge	recommend-01	ARG2	you	0.1.2.1	0.1.2.1.1	
# ::edge	respond-01	ARG0	you	0.0.0	0.0	
# ::edge	respond-01	ARG1	middle	0.0.0	0.0.0.0	
# ::edge	see-01	ARG0	body	0.1.2	0.1.2.0	
# ::edge	see-01	ARG1	recommend-01	0.1.2	0.1.2.1	
# ::edge	smell-01	ARG0	you	0.0.0.0.0.0.0	0.0.0.0.0.0	
# ::edge	smell-01	ARG1	example	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
(b2 / bother-02 
      :ARG0 (y2 / you 
            :ARG0-of (r2 / respond-01 
                  :ARG1 (m / middle 
                        :location-of (b3 / burn-01 
                              :ARG0 (y3 / you 
                                    :ARG0-of (s2 / smell-01 
                                          :ARG1 (e / example))))) 
                  :op-of (a4 / and 
                        :op1 (f / full)))) 
      :ARG1 (c3 / consult-01 
            :ARG0 (n / night) 
            :ARG1 (c2 / clock 
                  :mod (a2 / any)) 
            :purpose (s / see-01 
                  :ARG0 (b / body) 
                  :ARG1 (r / recommend-01 
                        :ARG1 (c / calm 
                              :direction (d / down)) 
                        :ARG2 (y / you)))) 
      :op-of (a3 / and 
            :op1 (i / immediate) 
            :op2 (a / and)))

# ::snt i spent a long time wandering over it into all sorts of parts where i had never been before where the mullioned windows are dark with ivy that no one has bothered to cut since the war emptied the rooms they belong to
# ::tok i spent a long time wandering over it into all sorts of parts where i had never been before where the mullioned windows are dark with ivy that no one has bothered to cut since the war emptied the rooms they belong to
# ::alignments 41-42|0.0.0.0.0.0 40-41|0.0.0.0.0.0.0 39-40|0.0.0.0.0 37-38|0.0.0.0 36-37|0.0.0.0.1.1 34-35|0.0.0.0.1 31-32|0.0.0.0.1.0 28-29|0.1.2.0 24-25|0.0 22-23|0 18-19|0.0.0 14-15|0.0.0.0.1.0.0 12-13|0.0.0.0.1.0.0.0 10-11|0.0.0.0.1.0.0.0.0 9-10|0.0.0.0.1.0.0.0.0.0 7-8|0.1.2.1 5-6|0.1.2 4-5|0.1.1 1-2|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:58.871
# ::node	0	window	22-23
# ::node	0.0	dark	24-25
# ::node	0.0.0	before	18-19
# ::node	0.0.0.0	empty-01	37-38
# ::node	0.0.0.0.0	room	39-40
# ::node	0.0.0.0.0.0	belong-01	41-42
# ::node	0.0.0.0.0.0.0	they	40-41
# ::node	0.0.0.0.1	since	34-35
# ::node	0.0.0.0.1.0	bother-01	31-32
# ::node	0.0.0.0.1.0.0	i	14-15
# ::node	0.0.0.0.1.0.0.0	part	12-13
# ::node	0.0.0.0.1.0.0.0.0	sort	10-11
# ::node	0.0.0.0.1.0.0.0.0.0	all	9-10
# ::node	0.0.0.0.1.1	war	36-37
# ::node	0.1	spend-01	1-2
# ::node	0.1.0	i	0-1
# ::node	0.1.1	time	4-5
# ::node	0.1.2	wander-01	5-6
# ::node	0.1.2.0	-	28-29
# ::node	0.1.2.1	it	7-8
# ::root	0	window
# ::edge	before	op1	dark	0.0.0	0.0	
# ::edge	belong-01	ARG0	they	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	belong-01	ARG1	room	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	bother-01	ARG0	i	0.0.0.0.1.0	0.0.0.0.1.0.0	
# ::edge	bother-01	ARG1	since	0.0.0.0.1.0	0.0.0.0.1	
# ::edge	dark	domain	window	0.0	0	
# ::edge	empty-01	ARG0	before	0.0.0.0	0.0.0	
# ::edge	empty-01	ARG1	room	0.0.0.0	0.0.0.0.0	
# ::edge	part	mod	sort	0.0.0.0.1.0.0.0	0.0.0.0.1.0.0.0.0	
# ::edge	part	poss	i	0.0.0.0.1.0.0.0	0.0.0.0.1.0.0	
# ::edge	since	op1	war	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	since	op2	empty-01	0.0.0.0.1	0.0.0.0	
# ::edge	sort	mod	all	0.0.0.0.1.0.0.0.0	0.0.0.0.1.0.0.0.0.0	
# ::edge	spend-01	ARG0	i	0.1	0.1.0	
# ::edge	spend-01	ARG1	time	0.1	0.1.1	
# ::edge	spend-01	ARG2	wander-01	0.1	0.1.2	
# ::edge	wander-01	ARG0	-	0.1.2	0.1.2.0	
# ::edge	wander-01	ARG1	it	0.1.2	0.1.2.1	
# ::edge	window	op1	spend-01	0	0.1	
(w2 / window 
      :domain-of (d / dark 
            :op-of (b3 / before 
                  :ARG0-of (e / empty-01 
                        :ARG1 (r / room 
                              :ARG1-of (b / belong-01 
                                    :ARG0 (t / they))) 
                        :op-of (s / since 
                              :ARG1-of (b2 / bother-01 
                                    :ARG0 (i / i 
                                          :poss-of (p / part 
                                                :mod (s2 / sort 
                                                      :mod (a / all))))) 
                              :op1 (w / war))))) 
      :op1 (s3 / spend-01 
            :ARG0 (i3 / i) 
            :ARG1 (t2 / time) 
            :ARG2 (w3 / wander-01 
                  :ARG0 (- / -) 
                  :ARG1 (i2 / it))))

# ::snt much of the text is speculative because nobody bothered to record caravaggios life
# ::tok much of the text is speculative because nobody bothered to record caravaggios life
# ::alignments 12-13|0.0.0.0 10-11|0.0.1 8-9|0.0 7-8|0.0.0 6-7|0 3-4|0.1.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:58.918
# ::node	0	cause-01	6-7
# ::node	0.0	bother-01	8-9
# ::node	0.0.0	nobody	7-8
# ::node	0.0.0.0	life	12-13
# ::node	0.0.1	record	10-11
# ::node	0.1	much	0-1
# ::node	0.1.0	text	3-4
# ::root	0	cause-01
# ::edge	bother-01	ARG0	nobody	0.0	0.0.0	
# ::edge	bother-01	ARG1	record	0.0	0.0.1	
# ::edge	cause-01	ARG0	bother-01	0	0.0	
# ::edge	cause-01	ARG1	much	0	0.1	
# ::edge	life	mod	nobody	0.0.0.0	0.0.0	
# ::edge	text	quant	much	0.1.0	0.1	
(c / cause-01 
      :ARG0 (b / bother-01 
            :ARG0 (n / nobody 
                  :mod-of (l / life)) 
            :ARG1 (r / record)) 
      :ARG1 (m / much 
            :quant-of (t / text)))

# ::snt we live in walthamstow just far enough outside central london to be tolerably leadfree any closer in and we would not have bothered
# ::tok we live in walthamstow just far enough outside central london to be tolerably leadfree any closer in and we would not have bothered
# ::alignments 22-23|0.0.0.0 18-19|0.0.0.0.0 17-18|0 15-16|0.0.1 14-15|0.0.1.0 9-10|0.0.2.1.1.0+0.0.2.1.1+0.0.2.1 8-9|0.0.2.1.0 7-8|0.0.2 6-7|0.0.2.0 5-6|0.0.3.0 4-5|0.0.3 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:59.036
# ::node	0	and	17-18
# ::node	0.0	live-01	1-2
# ::node	0.0.0	we	0-1
# ::node	0.0.0.0	bother-01	22-23
# ::node	0.0.0.0.0	we	18-19
# ::node	0.0.1	close	15-16
# ::node	0.0.1.0	any	14-15
# ::node	0.0.2	outside	7-8
# ::node	0.0.2.0	enough	6-7
# ::node	0.0.2.1	city	9-10
# ::node	0.0.2.1.0	central	8-9
# ::node	0.0.2.1.1	name	9-10
# ::node	0.0.2.1.1.0	"London"	9-10
# ::node	0.0.3	just	4-5
# ::node	0.0.3.0	far	5-6
# ::root	0	and
# ::edge	and	op1	live-01	0	0.0	
# ::edge	bother-01	ARG0	we	0.0.0.0	0.0.0.0.0	
# ::edge	bother-01	ARG1	we	0.0.0.0	0.0.0	
# ::edge	city	mod	central	0.0.2.1	0.0.2.1.0	
# ::edge	city	name	name	0.0.2.1	0.0.2.1.1	
# ::edge	close	mod	any	0.0.1	0.0.1.0	
# ::edge	far	degree	just	0.0.3.0	0.0.3	
# ::edge	live-01	ARG0	we	0.0	0.0.0	
# ::edge	live-01	degree	close	0.0	0.0.1	
# ::edge	live-01	time	just	0.0	0.0.3	
# ::edge	name	op1	"London"	0.0.2.1.1	0.0.2.1.1.0	
# ::edge	outside	mod	enough	0.0.2	0.0.2.0	
# ::edge	outside	op1	live-01	0.0.2	0.0	
# ::edge	outside	op2	city	0.0.2	0.0.2.1	
(a / and 
      :op1 (l / live-01 
            :ARG0 (w2 / we 
                  :ARG1-of (b / bother-01 
                        :ARG0 (w / we))) 
            :degree (c / close 
                  :mod (a2 / any)) 
            :op-of (o / outside 
                  :mod (e / enough) 
                  :op1 (c2 / city 
                        :mod (c3 / central) 
                        :name (n / name 
                              :op1 "London"))) 
            :time (j / just 
                  :degree-of (f / far))))

# ::snt those most likely to be bothered by neighbourhood noise are relatively young between 25 and 34 and the people least likely to be bothered are those over 65 living in detached houses, in spite of the establishments findings less than half of those bothered took action
# ::tok those most likely to be bothered by neighbourhood noise are relatively young between 25 and 34 and the people least likely to be bothered are those over 65 living in detached houses , in spite of the establishments findings less than half of those bothered took action
# ::alignments 46-47|0.1.1.0.1.0.0 44-45|0.1.1.0.1.0.1 41-42|0.1.1.0.1.0.1.1 39-40|0.1.1.0.1.0.1.0 38-39|0.0.0.0.0+0.0.0.0 34-35|0.0.0 31-32|0.0.1 28-29|0.0 27-28|0.1.0 23-24|0.1.1.0.1.0 20-21|0.1.1.0.1 16-17|0 15-16|0.1.1.0.0.0 14-15|0.1.1.0 13-14|0.3 12-13|0.1.1.0.0 11-12|0.2 10-11|0.2.0 8-9|0.1.1 5-6|0.1 2-3|0.1.2 1-2|0.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:59.570
# ::node	0	and	16-17
# ::node	0.0	live-01	28-29
# ::node	0.0.0	spite	34-35
# ::node	0.0.0.0	thing	38-39
# ::node	0.0.0.0.0	find-01	38-39
# ::node	0.0.1	house	31-32
# ::node	0.1	bother-01	5-6
# ::node	0.1.0	65	27-28
# ::node	0.1.1	noise	8-9
# ::node	0.1.1.0	and	14-15
# ::node	0.1.1.0.0	between	12-13
# ::node	0.1.1.0.0.0	34	15-16
# ::node	0.1.1.0.1	likely	20-21
# ::node	0.1.1.0.1.0	bother-01	23-24
# ::node	0.1.1.0.1.0.0	action	46-47
# ::node	0.1.1.0.1.0.1	bother-01	44-45
# ::node	0.1.1.0.1.0.1.0	less	39-40
# ::node	0.1.1.0.1.0.1.1	half	41-42
# ::node	0.1.2	likely	2-3
# ::node	0.1.2.0	most	1-2
# ::node	0.2	young	11-12
# ::node	0.2.0	relative	10-11
# ::node	0.3	25	13-14
# ::root	0	and
# ::edge	and	op1	noise	0.1.1.0	0.1.1	
# ::edge	and	op1	young	0	0.2	
# ::edge	and	op2	likely	0.1.1.0	0.1.1.0.1	
# ::edge	and	time	25	0	0.3	
# ::edge	between	op1	and	0.1.1.0.0	0.1.1.0	
# ::edge	between	op2	34	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	bother-01	ARG0	65	0.1	0.1.0	
# ::edge	bother-01	ARG0	action	0.1.1.0.1.0	0.1.1.0.1.0.0	
# ::edge	bother-01	ARG0	less	0.1.1.0.1.0.1	0.1.1.0.1.0.1.0	
# ::edge	bother-01	ARG1	half	0.1.1.0.1.0.1	0.1.1.0.1.0.1.1	
# ::edge	bother-01	ARG1	noise	0.1	0.1.1	
# ::edge	bother-01	ARG2	and	0.1	0	
# ::edge	bother-01	ARG2	bother-01	0.1.1.0.1.0.1	0.1.1.0.1.0	
# ::edge	find-01	ARG1	thing	0.0.0.0.0	0.0.0.0	
# ::edge	likely	degree	most	0.1.2	0.1.2.0	
# ::edge	likely	domain	bother-01	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	likely	domain	bother-01	0.1.2	0.1	
# ::edge	live-01	ARG0	and	0.0	0	
# ::edge	live-01	ARG1	spite	0.0	0.0.0	
# ::edge	live-01	location	house	0.0	0.0.1	
# ::edge	spite	prep-for	thing	0.0.0	0.0.0.0	
# ::edge	young	degree	relative	0.2	0.2.0	
(a2 / and 
      :ARG0-of (l2 / live-01 
            :ARG1 (s / spite 
                  :prep-for (t / thing 
                        :ARG1-of (f / find-01))) 
            :location (h2 / house)) 
      :ARG2-of (b4 / bother-01 
            :ARG0 65 
            :ARG1 (n / noise 
                  :op-of (a3 / and 
                        :op-of (b3 / between 
                              :op1 34) 
                        :op1 (l3 / likely 
                              :domain (b2 / bother-01 
                                    :ARG0 (a / action) 
                                    :ARG2-of (b / bother-01 
                                          :ARG0 (l / less) 
                                          :ARG1 (h / half)))))) 
            :domain-of (l4 / likely 
                  :degree (m / most))) 
      :op1 (y / young 
            :degree (r / relative)) 
      :time 25)

# ::snt the noises swirl round me but it dont bother me
# ::tok the noises swirl round me but it dont bother me
# ::alignments 8-9|0.1 6-7|0.1.0 5-6|0 3-4|0.0 1-2|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:59.585
# ::node	0	contrast-01	5-6
# ::node	0.0	round	3-4
# ::node	0.1	bother-02	8-9
# ::node	0.1.0	it	6-7
# ::node	0.2	noise	1-2
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	it	0.1	0.1.0	
# ::edge	contrast-01	ARG1	round	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	contrast-01	time	noise	0	0.2	
(c / contrast-01 
      :ARG1 (r / round) 
      :ARG2 (b / bother-02 
            :ARG0 (i / it)) 
      :time (n / noise))

# ::snt did they make the record just to make money too  if somebodys very famous it doesnt bother me
# ::tok did they make the record just to make money too if somebodys very famous it doesnt bother me
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:06:59.586
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt these days he had trouble recalling the troublesome fragments of his education he had bothered to memorize in the first place the names of a few acquaintances were jumbled together with old verb forms and things he thought were childhood haunts turned out to be places he had only just discovered
# ::tok these days he had trouble recalling the troublesome fragments of his education he had bothered to memorize in the first place the names of a few acquaintances were jumbled together with old verb forms and things he thought were childhood haunts turned out to be places he had only just discovered
# ::alignments 50-51|0.3.2 49-50|0.3.2.2 48-49|0.3.2.3 46-47|0.3.2.0 45-46|0.3.2.1 39-40|0.2 37-38|0 36-37|0.0 35-36|0.3.1 34-35|0.3 33-34|0.1 31-32|0.1.0 29-30|0.3.2.4 25-26|0.3.0.1.0.0 22-23|0.3.0.0.1.0 20-21|0.3.0.0.1 14-15|0.3.0.0.0 12-13|0.3.0.0 11-12|0.3.0 7-8|0.3.0.0.0.0 4-5|0.3.0.1 2-3|0.3.0.1.1 1-2|0.3.0.1.0.1+0.3.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:00.244
# ::node	0	think-01	37-38
# ::node	0.0	he	36-37
# ::node	0.1	form	33-34
# ::node	0.1.0	old	31-32
# ::node	0.2	childhood	39-40
# ::node	0.3	and	34-35
# ::node	0.3.0	educate-01	11-12
# ::node	0.3.0.0	he	12-13
# ::node	0.3.0.0.0	bother-01	14-15
# ::node	0.3.0.0.0.0	troublesome	7-8
# ::node	0.3.0.0.1	place	20-21
# ::node	0.3.0.0.1.0	name	22-23
# ::node	0.3.0.1	trouble-01	4-5
# ::node	0.3.0.1.0	temporal-quantity	1-2
# ::node	0.3.0.1.0.0	few	25-26
# ::node	0.3.0.1.0.1	day	1-2
# ::node	0.3.0.1.1	he	2-3
# ::node	0.3.1	thing	35-36
# ::node	0.3.2	discover-01	50-51
# ::node	0.3.2.0	he	46-47
# ::node	0.3.2.1	place	45-46
# ::node	0.3.2.2	just	49-50
# ::node	0.3.2.3	only	48-49
# ::node	0.3.2.4	together	29-30
# ::root	0	think-01
# ::edge	and	op1	educate-01	0.3	0.3.0	
# ::edge	and	op2	thing	0.3	0.3.1	
# ::edge	and	op3	think-01	0.3	0	
# ::edge	and	op4	discover-01	0.3	0.3.2	
# ::edge	bother-01	ARG0	he	0.3.0.0.0	0.3.0.0	
# ::edge	bother-01	ARG1	troublesome	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	discover-01	ARG0	he	0.3.2	0.3.2.0	
# ::edge	discover-01	ARG1	place	0.3.2	0.3.2.1	
# ::edge	discover-01	mod	just	0.3.2	0.3.2.2	
# ::edge	discover-01	mod	only	0.3.2	0.3.2.3	
# ::edge	educate-01	ARG0	he	0.3.0	0.3.0.0	
# ::edge	educate-01	ARG1	trouble-01	0.3.0	0.3.0.1	
# ::edge	few	op1	temporal-quantity	0.3.0.1.0.0	0.3.0.1.0	
# ::edge	form	mod	old	0.1	0.1.0	
# ::edge	place	mod	name	0.3.0.0.1	0.3.0.0.1.0	
# ::edge	place	poss	he	0.3.0.0.1	0.3.0.0	
# ::edge	temporal-quantity	unit	day	0.3.0.1.0	0.3.0.1.0.1	
# ::edge	think-01	ARG0	he	0	0.0	
# ::edge	think-01	ARG1	form	0	0.1	
# ::edge	think-01	ARG2	childhood	0	0.2	
# ::edge	together	op1	discover-01	0.3.2.4	0.3.2	
# ::edge	trouble-01	ARG0	temporal-quantity	0.3.0.1	0.3.0.1.0	
# ::edge	trouble-01	ARG1	he	0.3.0.1	0.3.0.1.1	
(t / think-01 
      :ARG0 (h2 / he) 
      :ARG1 (f / form 
            :mod (o2 / old)) 
      :ARG2 (c / childhood) 
      :op-of (a / and 
            :op1 (e / educate-01 
                  :ARG0 (h3 / he 
                        :ARG0-of (b / bother-01 
                              :ARG1 (t4 / troublesome)) 
                        :poss-of (p2 / place 
                              :mod (n / name))) 
                  :ARG1 (t5 / trouble-01 
                        :ARG0 (t6 / temporal-quantity 
                              :op-of (f2 / few) 
                              :unit (d2 / day)) 
                        :ARG1 (h4 / he))) 
            :op2 (t2 / thing) 
            :op3 (d / discover-01 
                  :ARG0 (h / he) 
                  :ARG1 (p / place) 
                  :mod (j / just) 
                  :mod (o / only) 
                  :op-of (t3 / together))))

# ::snt   but lawmakers have to share the blame as many hardly bothered to attend the classified briefings
# ::tok but lawmakers have to share the blame as many hardly bothered to attend the classified briefings
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:00.245
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the occasion and the competition never bothers seve its the same with the course he might be playing
# ::tok the occasion and the competition never bothers seve its the same with the course he might be playing
# ::alignments 17-18|0.0 14-15|0.0.0 10-11|0 6-7|0.0.1.0 4-5|0.0.1 2-3|0.0.1.0.0 1-2|0.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:00.309
# ::node	0	same-41	10-11
# ::node	0.0	play-01	17-18
# ::node	0.0.0	he	14-15
# ::node	0.0.1	compete-01	4-5
# ::node	0.0.1.0	bother-01	6-7
# ::node	0.0.1.0.0	and	2-3
# ::node	0.0.1.0.0.0	occasion	1-2
# ::root	0	same-41
# ::edge	and	op1	occasion	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	bother-01	ARG0	and	0.0.1.0	0.0.1.0.0	
# ::edge	bother-01	ARG1	compete-01	0.0.1.0	0.0.1	
# ::edge	compete-01	ARG1	play-01	0.0.1	0.0	
# ::edge	play-01	ARG0	he	0.0	0.0.0	
# ::edge	same-41	ARG1	play-01	0	0.0	
(s / same-41 
      :ARG1 (p / play-01 
            :ARG0 (h / he) 
            :ARG1-of (c / compete-01 
                  :ARG1-of (b / bother-01 
                        :ARG0 (a / and 
                              :op1 (o / occasion))))))

# ::snt the state scarcely had to bother
# ::tok the state scarcely had to bother
# ::alignments 5-6|0.0 2-3|0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:00.316
# ::node	0	scarcely-more-than	2-3
# ::node	0.0	bother-02	5-6
# ::node	0.0.0	state	1-2
# ::root	0	scarcely-more-than
(s / scarcely-more-than 
      :mod-of (b / bother-02 
            :ARG0 (s2 / state)))

# ::snt so we can get progress  chair could i make could i suggest maybe that in future when you ask organisations inaudible seconds3 you make it harder for getting a license for street collection that you tell them that youll want to know exactly the proportions but i mean put it back on to them rather than be you having to bother to it in the future
# ::tok so we can get progress chair could i make could i suggest maybe that in future when you ask organisations inaudible seconds3 you make it harder for getting a license for street collection that you tell them that youll want to know exactly the proportions but i mean put it back on to them rather than be you having to bother to it in the future
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:00.317
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i know i shouldnt perhaps bother with a help here shes nearly as old as i am anyway but shes marvellous and shell clean through and hoover
# ::tok i know i shouldnt perhaps bother with a help here shes nearly as old as i am anyway but shes marvellous and shell clean through and hoover
# ::alignments 25-26|0.1.1 23-24|0.1.1.0 22-23|0.1.0.0 21-22|0.1.0 19-20|0.1 18-19|0 17-18|0.2 15-16|0.0.0.0.0.0.0 13-14|0.0.0.0.0.0.1 11-12|0.0.0.0.0.0.1.0 10-11|0.0.0.0.0 9-10|0.0.0.0.0.0.2 8-9|0.0.0.0.0.0 5-6|0.0.0.0 4-5|0.0.1 2-3|0.0.2 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:01.485
# ::node	0	contrast-01	18-19
# ::node	0.0	know-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.0.0	bother-02	5-6
# ::node	0.0.0.0.0	she	10-11
# ::node	0.0.0.0.0.0	help-01	8-9
# ::node	0.0.0.0.0.0.0	i	15-16
# ::node	0.0.0.0.0.0.1	old	13-14
# ::node	0.0.0.0.0.0.1.0	nearly	11-12
# ::node	0.0.0.0.0.0.2	here	9-10
# ::node	0.0.1	perhaps	4-5
# ::node	0.0.2	i	2-3
# ::node	0.1	she	19-20
# ::node	0.1.0	and	21-22
# ::node	0.1.0.0	shell	22-23
# ::node	0.1.1	and	25-26
# ::node	0.1.1.0	clean	23-24
# ::node	0.2	anyway	17-18
# ::root	0	contrast-01
# ::edge	and	op1	she	0.1.0	0.1	
# ::edge	and	op1	she	0.1.1	0.1	
# ::edge	and	op2	clean	0.1.1	0.1.1.0	
# ::edge	and	op2	shell	0.1.0	0.1.0.0	
# ::edge	bother-02	ARG0	she	0.0.0.0	0.0.0.0.0	
# ::edge	bother-02	ARG1	i	0.0.0.0	0.0.0	
# ::edge	contrast-01	ARG1	know-01	0	0.0	
# ::edge	contrast-01	ARG2	she	0	0.1	
# ::edge	contrast-01	direction	anyway	0	0.2	
# ::edge	help-01	ARG0	i	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	help-01	ARG1	old	0.0.0.0.0.0	0.0.0.0.0.0.1	
# ::edge	help-01	location	here	0.0.0.0.0.0	0.0.0.0.0.0.2	
# ::edge	know-01	ARG0	i	0.0	0.0.0	
# ::edge	know-01	ARG1	perhaps	0.0	0.0.1	
# ::edge	know-01	instrument	i	0.0	0.0.2	
# ::edge	old	mod	nearly	0.0.0.0.0.0.1	0.0.0.0.0.0.1.0	
# ::edge	she	domain	help-01	0.0.0.0.0	0.0.0.0.0.0	
(c2 / contrast-01 
      :ARG1 (k / know-01 
            :ARG0 (i3 / i 
                  :ARG1-of (b / bother-02 
                        :ARG0 (s3 / she 
                              :domain (h2 / help-01 
                                    :ARG0 (i / i) 
                                    :ARG1 (o / old 
                                          :mod (n / nearly)) 
                                    :location (h / here))))) 
            :ARG1 (p / perhaps) 
            :instrument (i2 / i)) 
      :ARG2 (s2 / she 
            :op-of (a2 / and 
                  :op1 (s / shell)) 
            :op-of (a / and 
                  :op1 (c / clean))) 
      :direction (a3 / anyway))

# ::snt john showed high intelligence in the subjects that interested him such as geography history and music but would not bother with anything that bored him
# ::tok john showed high intelligence in the subjects that interested him such as geography history and music but would not bother with anything that bored him
# ::alignments 23-24|0.1.0 21-22|0.1.0.0 19-20|0.1 16-17|0 15-16|0.2.1 14-15|0.2 13-14|0.2.0 12-13|0.2.0.0 10-11|0.0.1 8-9|0.0 6-7|0.0.0 3-4|0.0.0.0 2-3|0.0.0.0.1 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:01.730
# ::node	0	contrast-01	16-17
# ::node	0.0	interest-01	8-9
# ::node	0.0.0	subject	6-7
# ::node	0.0.0.0	intelligence	3-4
# ::node	0.0.0.0.0	show-01	1-2
# ::node	0.0.0.0.1	high	2-3
# ::node	0.0.1	such	10-11
# ::node	0.1	bother-02	19-20
# ::node	0.1.0	bore-02	23-24
# ::node	0.1.0.0	anything	21-22
# ::node	0.2	and	14-15
# ::node	0.2.0	history	13-14
# ::node	0.2.0.0	geography	12-13
# ::node	0.2.1	music	15-16
# ::root	0	contrast-01
# ::edge	and	op1	history	0.2	0.2.0	
# ::edge	and	op2	music	0.2	0.2.1	
# ::edge	and	op3	contrast-01	0.2	0	
# ::edge	bore-02	ARG1	anything	0.1.0	0.1.0.0	
# ::edge	bother-02	manner	bore-02	0.1	0.1.0	
# ::edge	contrast-01	ARG1	interest-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	history	mod	geography	0.2.0	0.2.0.0	
# ::edge	intelligence	location	subject	0.0.0.0	0.0.0	
# ::edge	intelligence	mod	high	0.0.0.0	0.0.0.0.1	
# ::edge	interest-01	ARG0	subject	0.0	0.0.0	
# ::edge	interest-01	ARG1	such	0.0	0.0.1	
# ::edge	show-01	ARG1	intelligence	0.0.0.0.0	0.0.0.0	
(c / contrast-01 
      :ARG1 (i / interest-01 
            :ARG0 (s2 / subject 
                  :location-of (i2 / intelligence 
                        :ARG1-of (s3 / show-01) 
                        :mod (h2 / high))) 
            :ARG1 (s / such)) 
      :ARG2 (b2 / bother-02 
            :manner (b / bore-02 
                  :ARG1 (a / anything))) 
      :op-of (a2 / and 
            :op1 (h / history 
                  :mod (g / geography)) 
            :op2 (m / music)))

# ::snt   her plainness clearly bothers here
# ::tok her plainness clearly bothers here
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:01.731
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt edible berries which nobody in england bothers to eat they just occasionally make them into wine
# ::tok edible berries which nobody in england bothers to eat they just occasionally make them into wine
# ::alignments 15-16|0.0 11-12|0.1.2 10-11|0.1.1.0 9-10|0.1.1 8-9|0.1 6-7|0 5-6|0.2.0.0+0.2.0+0.2 3-4|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:01.839
# ::node	0	bother-01	6-7
# ::node	0.0	wine	15-16
# ::node	0.1	eat-01	8-9
# ::node	0.1.0	nobody	3-4
# ::node	0.1.1	they	9-10
# ::node	0.1.1.0	just	10-11
# ::node	0.1.2	occasional	11-12
# ::node	0.2	country	5-6
# ::node	0.2.0	name	5-6
# ::node	0.2.0.0	"England"	5-6
# ::root	0	bother-01
# ::edge	bother-01	ARG0	wine	0	0.0	
# ::edge	bother-01	ARG1	eat-01	0	0.1	
# ::edge	bother-01	mod	country	0	0.2	
# ::edge	country	name	name	0.2	0.2.0	
# ::edge	eat-01	ARG0	nobody	0.1	0.1.0	
# ::edge	eat-01	ARG1	they	0.1	0.1.1	
# ::edge	eat-01	ARG2	occasional	0.1	0.1.2	
# ::edge	just	prep-in	they	0.1.1.0	0.1.1	
# ::edge	name	op1	"England"	0.2.0	0.2.0.0	
(b / bother-01 
      :ARG0 (w / wine) 
      :ARG1 (e / eat-01 
            :ARG0 (n2 / nobody) 
            :ARG1 (t / they 
                  :prep-in-of (j / just)) 
            :ARG2 (o / occasional)) 
      :mod (c / country 
            :name (n / name 
                  :op1 "England")))

# ::snt if you want the exact quantities buy my book he said at one point one eye in the direction of the bbc publicity department before adding as the other swivelled down towards his drink if i can be bothered to write it
# ::tok if you want the exact quantities buy my book he said at one point one eye in the direction of the bbc publicity department before adding as the other swivelled down towards his drink if i can be bothered to write it
# ::alignments 41-42|0.2.0.1.1.0 40-41|0.2.0.1.1 38-39|0.2.0.1 36-37|0.2.0.1.2 35-36|0.2.0.1.2.0.0 33-34|0.2.0.1.2.0 30-31|0.2.0.1.2.0.1 28-29|0.1.0.1 25-26|0.2.0 24-25|0.2 23-24|0.2.0.0 22-23|0.2.0.0.1 18-19|0.2.0.0.0 15-16|0.2.0.0.0.0 13-14|0.2.0.1.0 10-11|0 9-10|0.0 8-9|0.1 6-7|0.1.0 5-6|0.1.0.0 4-5|0.1.0.0.1 2-3|0.1.0.0.0 1-2|0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:02.926
# ::node	0	say-01	10-11
# ::node	0.0	he	9-10
# ::node	0.1	book	8-9
# ::node	0.1.0	buy-01	6-7
# ::node	0.1.0.0	quantity	5-6
# ::node	0.1.0.0.0	want-01	2-3
# ::node	0.1.0.0.0.0	you	1-2
# ::node	0.1.0.0.1	exact	4-5
# ::node	0.1.0.1	other	28-29
# ::node	0.2	before	24-25
# ::node	0.2.0	add-02	25-26
# ::node	0.2.0.0	department	23-24
# ::node	0.2.0.0.0	direction	18-19
# ::node	0.2.0.0.0.0	eye	15-16
# ::node	0.2.0.0.1	publicity	22-23
# ::node	0.2.0.1	bother-01	38-39
# ::node	0.2.0.1.0	point	13-14
# ::node	0.2.0.1.1	write-01	40-41
# ::node	0.2.0.1.1.0	it	41-42
# ::node	0.2.0.1.2	possible	36-37
# ::node	0.2.0.1.2.0	drink-01	33-34
# ::node	0.2.0.1.2.0.0	i	35-36
# ::node	0.2.0.1.2.0.1	down	30-31
# ::root	0	say-01
# ::edge	add-02	ARG0	department	0.2.0	0.2.0.0	
# ::edge	add-02	ARG1	bother-01	0.2.0	0.2.0.1	
# ::edge	before	op1	add-02	0.2	0.2.0	
# ::edge	bother-01	ARG0	point	0.2.0.1	0.2.0.1.0	
# ::edge	bother-01	ARG1	write-01	0.2.0.1	0.2.0.1.1	
# ::edge	buy-01	ARG0	quantity	0.1.0	0.1.0.0	
# ::edge	buy-01	ARG1	book	0.1.0	0.1	
# ::edge	department	mod	publicity	0.2.0.0	0.2.0.0.1	
# ::edge	direction	location	department	0.2.0.0.0	0.2.0.0	
# ::edge	drink-01	ARG0	i	0.2.0.1.2.0	0.2.0.1.2.0.0	
# ::edge	drink-01	ARG1	possible	0.2.0.1.2.0	0.2.0.1.2	
# ::edge	drink-01	direction	down	0.2.0.1.2.0	0.2.0.1.2.0.1	
# ::edge	eye	location	direction	0.2.0.0.0.0	0.2.0.0.0	
# ::edge	other	op1	buy-01	0.1.0.1	0.1.0	
# ::edge	possible	domain	bother-01	0.2.0.1.2	0.2.0.1	
# ::edge	quantity	degree	exact	0.1.0.0	0.1.0.0.1	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	book	0	0.1	
# ::edge	say-01	time	before	0	0.2	
# ::edge	want-01	ARG0	you	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	want-01	ARG1	quantity	0.1.0.0.0	0.1.0.0	
# ::edge	write-01	ARG1	it	0.2.0.1.1	0.2.0.1.1.0	
(s / say-01 
      :ARG0 (h / he) 
      :ARG1 (b3 / book 
            :ARG1-of (b4 / buy-01 
                  :ARG0 (q / quantity 
                        :ARG1-of (w2 / want-01 
                              :ARG0 (y / you)) 
                        :degree (e2 / exact)) 
                  :op-of (o / other))) 
      :time (b2 / before 
            :op1 (a / add-02 
                  :ARG0 (d3 / department 
                        :location-of (d4 / direction 
                              :location-of (e / eye)) 
                        :mod (p2 / publicity)) 
                  :ARG1 (b / bother-01 
                        :ARG0 (p3 / point) 
                        :ARG1 (w / write-01 
                              :ARG1 (i / it)) 
                        :domain-of (p / possible 
                              :ARG1-of (d / drink-01 
                                    :ARG0 (i2 / i) 
                                    :direction (d2 / down)))))))

# ::snt   he eyed the airline labels which she had not bothered to remove from her bags
# ::tok he eyed the airline labels which she had not bothered to remove from her bags
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:02.927
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i remember feeling very reverential and flattered that she had bothered to look me up for dee was eight or nine years older and had already published several books and one of which had won a governor generals medal
# ::tok i remember feeling very reverential and flattered that she had bothered to look me up for dee was eight or nine years older and had already published several books and one of which had won a governor generals medal
# ::alignments 38-39|0.3.1.1 37-38|0.3.1.1.1.0+0.3.1.1.1 36-37|0.3.1.1.0.0+0.3.1.1.0 34-35|0.3.1 29-30|0.2 28-29|0.1 27-28|0.1.0 26-27|0 25-26|0.4 23-24|0.3 22-23|0.3.0 21-22|0.3.0.1.2+0.3.0.1 20-21|0.3.0.1.1 19-20|0.3.0.1.0 18-19|0.3.1.0 10-11|0.3.0.0 8-9|0.3.0.0.0 5-6|0.3.0.0.1 3-4|0.0 2-3|0.3.0.0.1.0 1-2|0.3.0.0.1.0.0.0 0-1|0.3.0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:03.623
# ::node	0	publish-01	26-27
# ::node	0.0	very	3-4
# ::node	0.1	book	28-29
# ::node	0.1.0	several	27-28
# ::node	0.2	and	29-30
# ::node	0.3	and	23-24
# ::node	0.3.0	old	22-23
# ::node	0.3.0.0	bother-01	10-11
# ::node	0.3.0.0.0	she	8-9
# ::node	0.3.0.0.1	and	5-6
# ::node	0.3.0.0.1.0	feel-01	2-3
# ::node	0.3.0.0.1.0.0	i	0-1
# ::node	0.3.0.0.1.0.0.0	remember-01	1-2
# ::node	0.3.0.1	temporal-quantity	21-22
# ::node	0.3.0.1.0	or	19-20
# ::node	0.3.0.1.1	9	20-21
# ::node	0.3.0.1.2	year	21-22
# ::node	0.3.1	win-01	34-35
# ::node	0.3.1.0	8	18-19
# ::node	0.3.1.1	medal	38-39
# ::node	0.3.1.1.0	have-org-role-91	36-37
# ::node	0.3.1.1.0.0	governor	36-37
# ::node	0.3.1.1.1	have-org-role-91	37-38
# ::node	0.3.1.1.1.0	general	37-38
# ::node	0.4	already	25-26
# ::root	0	publish-01
# ::edge	and	op1	bother-01	0.3.0.0.1	0.3.0.0	
# ::edge	and	op1	old	0.3	0.3.0	
# ::edge	and	op1	publish-01	0.2	0	
# ::edge	and	op2	publish-01	0.3	0	
# ::edge	and	op3	win-01	0.3	0.3.1	
# ::edge	book	quant	several	0.1	0.1.0	
# ::edge	bother-01	ARG0	she	0.3.0.0	0.3.0.0.0	
# ::edge	bother-01	ARG1	old	0.3.0.0	0.3.0	
# ::edge	feel-01	ARG0	i	0.3.0.0.1.0	0.3.0.0.1.0.0	
# ::edge	feel-01	ARG1	and	0.3.0.0.1.0	0.3.0.0.1	
# ::edge	have-org-role-91	ARG0	medal	0.3.1.1.0	0.3.1.1	
# ::edge	have-org-role-91	ARG0	medal	0.3.1.1.1	0.3.1.1	
# ::edge	have-org-role-91	ARG2	general	0.3.1.1.1	0.3.1.1.1.0	
# ::edge	have-org-role-91	ARG2	governor	0.3.1.1.0	0.3.1.1.0.0	
# ::edge	old	degree	temporal-quantity	0.3.0	0.3.0.1	
# ::edge	or	op1	temporal-quantity	0.3.0.1.0	0.3.0.1	
# ::edge	publish-01	ARG0	very	0	0.0	
# ::edge	publish-01	ARG1	book	0	0.1	
# ::edge	publish-01	time	already	0	0.4	
# ::edge	remember-01	ARG0	i	0.3.0.0.1.0.0.0	0.3.0.0.1.0.0	
# ::edge	temporal-quantity	quant	9	0.3.0.1	0.3.0.1.1	
# ::edge	temporal-quantity	unit	year	0.3.0.1	0.3.0.1.2	
# ::edge	win-01	ARG0	8	0.3.1	0.3.1.0	
# ::edge	win-01	ARG1	medal	0.3.1	0.3.1.1	
(p / publish-01 
      :ARG0 (v / very) 
      :ARG1 (b / book 
            :quant (s / several)) 
      :op-of (a / and) 
      :op-of (a3 / and 
            :op1 (o / old 
                  :ARG1-of (b2 / bother-01 
                        :ARG0 (s2 / she) 
                        :op-of (a4 / and 
                              :ARG1-of (f / feel-01 
                                    :ARG0 (i / i 
                                          :ARG0-of (r / remember-01))))) 
                  :degree (t / temporal-quantity 
                        :op-of (o2 / or) 
                        :quant 9 
                        :unit (y / year))) 
            :op2 (w / win-01 
                  :ARG0 8 
                  :ARG1 (m / medal 
                        :ARG0-of (h2 / have-org-role-91 
                              :ARG2 (g2 / governor)) 
                        :ARG0-of (h / have-org-role-91 
                              :ARG2 (g / general))))) 
      :time (a2 / already))

# ::snt the birds of the sahel would not bother to migrate to britain if such evidences of an older and scruffier land management were not hanging on
# ::tok the birds of the sahel would not bother to migrate to britain if such evidences of an older and scruffier land management were not hanging on
# ::alignments 24-25|0.2 21-22|0.2.0.1 20-21|0.2.0.1.1 18-19|0.2.0 17-18|0.2.0.0 13-14|0.2.0.1.0 11-12|0.1.0.0.0+0.1.0.0+0.1.0 9-10|0.1 7-8|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:03.739
# ::node	0	bother-02	7-8
# ::node	0.0	bird	1-2
# ::node	0.1	migrate-01	9-10
# ::node	0.1.0	country	11-12
# ::node	0.1.0.0	name	11-12
# ::node	0.1.0.0.0	"Britain"	11-12
# ::node	0.2	hang-01	24-25
# ::node	0.2.0	and	18-19
# ::node	0.2.0.0	old	17-18
# ::node	0.2.0.1	manage-01	21-22
# ::node	0.2.0.1.0	such	13-14
# ::node	0.2.0.1.1	land	20-21
# ::root	0	bother-02
# ::edge	and	op1	old	0.2.0	0.2.0.0	
# ::edge	and	op2	manage-01	0.2.0	0.2.0.1	
# ::edge	bother-02	ARG0	bird	0	0.0	
# ::edge	bother-02	ARG1	migrate-01	0	0.1	
# ::edge	bother-02	condition	hang-01	0	0.2	
# ::edge	country	name	name	0.1.0	0.1.0.0	
# ::edge	hang-01	ARG1	and	0.2	0.2.0	
# ::edge	manage-01	ARG0	such	0.2.0.1	0.2.0.1.0	
# ::edge	manage-01	ARG1	land	0.2.0.1	0.2.0.1.1	
# ::edge	migrate-01	ARG1	country	0.1	0.1.0	
# ::edge	name	op1	"Britain"	0.1.0.0	0.1.0.0.0	
(b / bother-02 
      :ARG0 (b2 / bird) 
      :ARG1 (m2 / migrate-01 
            :ARG1 (c / country 
                  :name (n / name 
                        :op1 "Britain"))) 
      :condition (h / hang-01 
            :ARG1 (a / and 
                  :op1 (o / old) 
                  :op2 (m / manage-01 
                        :ARG0 (s / such) 
                        :ARG1 (l / land)))))

# ::snt fewer than 100 shareholders bothered to turn out dash
# ::tok fewer than 100 shareholders bothered to turn out dash
# ::alignments 4-5|0 2-3|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:03.748
# ::node	0	bother-01	4-5
# ::node	0.0	100	2-3
# ::node	0.1	few	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG0	100	0	0.0	
# ::edge	bother-01	ARG1	few	0	0.1	
(b / bother-01 
      :ARG0 100 
      :ARG1 (f / few))

# ::snt the state scarcely had to bother
# ::tok the state scarcely had to bother
# ::alignments 5-6|0.0 2-3|0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:03.755
# ::node	0	scarcely-more-than	2-3
# ::node	0.0	bother-02	5-6
# ::node	0.0.0	state	1-2
# ::root	0	scarcely-more-than
(s / scarcely-more-than 
      :mod-of (b / bother-02 
            :ARG0 (s2 / state)))

# ::snt think of the petrol youre saving not having to bother with that needless journey home
# ::tok think of the petrol youre saving not having to bother with that needless journey home
# ::alignments 14-15|0.1 13-14|0.1.0 9-10|0 5-6|0.0 3-4|0.1.0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:03.785
# ::node	0	bother-02	9-10
# ::node	0.0	save-02	5-6
# ::node	0.0.0	think-01	0-1
# ::node	0.1	home	14-15
# ::node	0.1.0	journey-01	13-14
# ::node	0.1.0.0	petrol	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG2	save-02	0	0.0	
# ::edge	bother-02	location	home	0	0.1	
# ::edge	journey-01	ARG0	petrol	0.1.0	0.1.0.0	
# ::edge	journey-01	ARG1	home	0.1.0	0.1	
# ::edge	think-01	ARG1	save-02	0.0.0	0.0	
(b / bother-02 
      :ARG2 (s / save-02 
            :ARG1-of (t / think-01)) 
      :location (h / home 
            :ARG1-of (j / journey-01 
                  :ARG0 (p / petrol))))

# ::snt the recipient turned out to be a jew a briton living in israel but this did not bother mr usta a muslim
# ::tok the recipient turned out to be a jew a briton living in israel but this did not bother mr usta a muslim
# ::alignments 17-18|0.1 14-15|0.1.0 13-14|0 12-13|0.0.0.0.0+0.0.0.0+0.0.0 10-11|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:03.816
# ::node	0	contrast-01	13-14
# ::node	0.0	live-01	10-11
# ::node	0.0.0	country	12-13
# ::node	0.0.0.0	name	12-13
# ::node	0.0.0.0.0	"Israel"	12-13
# ::node	0.1	bother-02	17-18
# ::node	0.1.0	this	14-15
# ::root	0	contrast-01
# ::edge	bother-02	ARG1	this	0.1	0.1.0	
# ::edge	contrast-01	ARG1	live-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	country	name	name	0.0.0	0.0.0.0	
# ::edge	live-01	location	country	0.0	0.0.0	
# ::edge	name	op1	"Israel"	0.0.0.0	0.0.0.0.0	
(c / contrast-01 
      :ARG1 (l / live-01 
            :location (c2 / country 
                  :name (n / name 
                        :op1 "Israel"))) 
      :ARG2 (b / bother-02 
            :ARG1 (t / this)))

# ::snt i must admit i was quite impressed actually with the demos and thought why are they bothering to go back into the studio again
# ::tok i must admit i was quite impressed actually with the demos and thought why are they bothering to go back into the studio again
# ::alignments 23-24|0.1 19-20|0.0.0.1.1.1.1 16-17|0.0.0.1.1.1 15-16|0.0.0.1.1.1.0 12-13|0.0.0.1.1 11-12|0.0.0.1 7-8|0.0.0.1.0 6-7|0.0.0 5-6|0.0.0.0 3-4|0.0.0.1.1.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:04.193
# ::node	0	admit-01	2-3
# ::node	0.0	i	0-1
# ::node	0.0.0	impress-01	6-7
# ::node	0.0.0.0	quite	5-6
# ::node	0.0.0.1	and	11-12
# ::node	0.0.0.1.0	actual	7-8
# ::node	0.0.0.1.1	think-01	12-13
# ::node	0.0.0.1.1.0	i	3-4
# ::node	0.0.0.1.1.1	bother-01	16-17
# ::node	0.0.0.1.1.1.0	they	15-16
# ::node	0.0.0.1.1.1.1	back	19-20
# ::node	0.1	again	23-24
# ::root	0	admit-01
# ::edge	admit-01	ARG0	i	0	0.0	
# ::edge	admit-01	ARG1	again	0	0.1	
# ::edge	and	mod	actual	0.0.0.1	0.0.0.1.0	
# ::edge	and	op1	impress-01	0.0.0.1	0.0.0	
# ::edge	and	op2	think-01	0.0.0.1	0.0.0.1.1	
# ::edge	bother-01	ARG0	they	0.0.0.1.1.1	0.0.0.1.1.1.0	
# ::edge	bother-01	ARG1	back	0.0.0.1.1.1	0.0.0.1.1.1.1	
# ::edge	impress-01	ARG1	i	0.0.0	0.0	
# ::edge	impress-01	degree	quite	0.0.0	0.0.0.0	
# ::edge	think-01	ARG0	i	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	think-01	ARG1	bother-01	0.0.0.1.1	0.0.0.1.1.1	
(a4 / admit-01 
      :ARG0 (i3 / i 
            :ARG1-of (i / impress-01 
                  :degree (q / quite) 
                  :op-of (a2 / and 
                        :mod (a3 / actual) 
                        :op1 (t2 / think-01 
                              :ARG0 (i2 / i) 
                              :ARG1 (b2 / bother-01 
                                    :ARG0 (t / they) 
                                    :ARG1 (b / back)))))) 
      :ARG1 (a / again))

# ::snt e who had had something done to her hair you were meant to say something about and who was wearing a new kind of sunglasses he could not be bothered to consider at all closely and who now said well well well so its goodbye america
# ::tok e who had had something done to her hair you were meant to say something about and who was wearing a new kind of sunglasses he could not be bothered to consider at all closely and who now said well well well so its goodbye america
# ::alignments 45-46|0.3.0.0.0.0.0+0.3.0.0.0.0+0.3.0.0.0 42-43|0.2.1.0 41-42|0.2.1 40-41|0.2 39-40|0.2.0 38-39|0 37-38|0.4 35-36|0.3 34-35|0.3.0.0.2 33-34|0.3.0.0.1 31-32|0.3.0.0 29-30|0.3.0 26-27|0.3.0.1 25-26|0.0 22-23|0.1.1.1 21-22|0.1.1.1.0 19-20|0.1.1 16-17|0.1 14-15|0.1.0.1.1 13-14|0.1.0.1 11-12|0.1.0 9-10|0.1.0.0 8-9|0.1.0.1.0 4-5|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:05.710
# ::node	0	say-01	38-39
# ::node	0.0	he	25-26
# ::node	0.1	and	16-17
# ::node	0.1.0	mean-01	11-12
# ::node	0.1.0.0	you	9-10
# ::node	0.1.0.1	say-01	13-14
# ::node	0.1.0.1.0	hair	8-9
# ::node	0.1.0.1.1	something	14-15
# ::node	0.1.1	wear-01	19-20
# ::node	0.1.1.0	something	4-5
# ::node	0.1.1.1	kind	22-23
# ::node	0.1.1.1.0	new	21-22
# ::node	0.2	well	40-41
# ::node	0.2.0	well	39-40
# ::node	0.2.1	well	41-42
# ::node	0.2.1.0	so	42-43
# ::node	0.3	and	35-36
# ::node	0.3.0	bother-01	29-30
# ::node	0.3.0.0	consider-02	31-32
# ::node	0.3.0.0.0	country	45-46
# ::node	0.3.0.0.0.0	name	45-46
# ::node	0.3.0.0.0.0.0	"America"	45-46
# ::node	0.3.0.0.1	all	33-34
# ::node	0.3.0.0.2	close	34-35
# ::node	0.3.0.1	possible	26-27
# ::node	0.4	now	37-38
# ::root	0	say-01
# ::edge	and	op1	bother-01	0.3	0.3.0	
# ::edge	and	op1	mean-01	0.1	0.1.0	
# ::edge	and	op2	say-01	0.3	0	
# ::edge	and	op2	wear-01	0.1	0.1.1	
# ::edge	bother-01	ARG1	consider-02	0.3.0	0.3.0.0	
# ::edge	consider-02	ARG0	country	0.3.0.0	0.3.0.0.0	
# ::edge	consider-02	ARG1	all	0.3.0.0	0.3.0.0.1	
# ::edge	consider-02	mod	close	0.3.0.0	0.3.0.0.2	
# ::edge	country	name	name	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	kind	mod	new	0.1.1.1	0.1.1.1.0	
# ::edge	mean-01	ARG1	you	0.1.0	0.1.0.0	
# ::edge	mean-01	ARG2	say-01	0.1.0	0.1.0.1	
# ::edge	name	op1	"America"	0.3.0.0.0.0	0.3.0.0.0.0.0	
# ::edge	possible	domain	bother-01	0.3.0.1	0.3.0	
# ::edge	say-01	ARG0	hair	0.1.0.1	0.1.0.1.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	and	0	0.1	
# ::edge	say-01	ARG1	something	0.1.0.1	0.1.0.1.1	
# ::edge	say-01	manner	well	0	0.2	
# ::edge	say-01	time	now	0	0.4	
# ::edge	wear-01	ARG0	something	0.1.1	0.1.1.0	
# ::edge	wear-01	ARG1	kind	0.1.1	0.1.1.1	
# ::edge	well	degree	well	0.2	0.2.0	
# ::edge	well	degree	well	0.2.1	0.2	
# ::edge	well	mod	so	0.2.1	0.2.1.0	
(s2 / say-01 
      :ARG0 (h / he) 
      :ARG1 (a3 / and 
            :op1 (m / mean-01 
                  :ARG1 (y / you) 
                  :ARG2 (s4 / say-01 
                        :ARG0 (h2 / hair) 
                        :ARG1 (s3 / something))) 
            :op2 (w4 / wear-01 
                  :ARG0 (s5 / something) 
                  :ARG1 (k / kind 
                        :mod (n3 / new)))) 
      :manner (w2 / well 
            :degree (w3 / well) 
            :degree-of (w / well 
                  :mod (s / so))) 
      :op-of (a / and 
            :op1 (b / bother-01 
                  :ARG1 (c3 / consider-02 
                        :ARG0 (c / country 
                              :name (n / name 
                                    :op1 "America")) 
                        :ARG1 (a2 / all) 
                        :mod (c2 / close)) 
                  :domain-of (p / possible))) 
      :time (n2 / now))

# ::snt the park story aimed at embarrassing mr rohs ties to mr chun recalls the apparent shock of mr chun who after staging a coup during the confusion following parks death discovered that park had not bothered to amass a personal fortune while in office
# ::tok the park story aimed at embarrassing mr rohs ties to mr chun recalls the apparent shock of mr chun who after staging a coup during the confusion following parks death discovered that park had not bothered to amass a personal fortune while in office
# ::alignments 43-44|0.0.0 40-41|0.0.2.0.0.1.0 39-40|0.0.2.0.0.1 35-36|0.0.2.0.1 32-33|0.0.2.0.1.1 30-31|0.0.2.0 29-30|0.0.2.0.1.0 26-27|0 23-24|0.0.1 21-22|0.0 20-21|0.0.2 15-16|0.0.2.0.0 14-15|0.0.2.0.0.3 12-13|0.0.2.0.0.2 8-9|0.0.2.0.0.0.0.0 3-4|0.0.2.0.0.0.0 2-3|0.0.2.0.0.0 1-2|0.0.2.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:06.211
# ::node	0	confusion	26-27
# ::node	0.0	stage-01	21-22
# ::node	0.0.0	office	43-44
# ::node	0.0.1	coup	23-24
# ::node	0.0.2	after	20-21
# ::node	0.0.2.0	discover-01	30-31
# ::node	0.0.2.0.0	shock-01	15-16
# ::node	0.0.2.0.0.0	story	2-3
# ::node	0.0.2.0.0.0.0	aim-02	3-4
# ::node	0.0.2.0.0.0.0.0	tie-01	8-9
# ::node	0.0.2.0.0.0.1	park	1-2
# ::node	0.0.2.0.0.1	personal	39-40
# ::node	0.0.2.0.0.1.0	fortune	40-41
# ::node	0.0.2.0.0.2	recall-02	12-13
# ::node	0.0.2.0.0.3	apparent	14-15
# ::node	0.0.2.0.1	bother-01	35-36
# ::node	0.0.2.0.1.0	die-01	29-30
# ::node	0.0.2.0.1.1	park	32-33
# ::root	0	confusion
(c / confusion 
      :location-of (s / stage-01 
            :ARG0 (o / office) 
            :ARG1 (c2 / coup) 
            :op-of (a / after 
                  :time-of (d / discover-01 
                        :ARG0 (s2 / shock-01 
                              :ARG0 (s3 / story 
                                    :ARG1-of (a3 / aim-02 
                                          :ARG2 (t / tie-01)) 
                                    :topic (p3 / park)) 
                              :ARG1 (p / personal 
                                    :mod-of (f / fortune)) 
                              :ARG1-of (r / recall-02) 
                              :mod (a2 / apparent)) 
                        :ARG1 (b / bother-01 
                              :ARG0 (d2 / die-01) 
                              :ARG1 (p2 / park))))))

# ::snt if investments have already been made in recent years the average investor will not bother to make further improvements until energy prices begin to hurt
# ::tok if investments have already been made in recent years the average investor will not bother to make further improvements until energy prices begin to hurt
# ::alignments 24-25|0.0 22-23|0.0.1 21-22|0 20-21|0.1 19-20|0.0.1.1 18-19|0.1.0 17-18|0.1.0.1 14-15|0.1.0.0.1 11-12|0.1.0.0.0+0.1.0.0 8-9|0.1.0.0.1.0.1+0.1.0.0.1.0 7-8|0.1.0.0.1.0.0 3-4|0.0.0 1-2|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:06.437
# ::node	0	price-01	21-22
# ::node	0.0	hurt-01	24-25
# ::node	0.0.0	already	3-4
# ::node	0.0.1	begin-01	22-23
# ::node	0.0.1.0	invest-01	1-2
# ::node	0.0.1.1	until	19-20
# ::node	0.1	energy	20-21
# ::node	0.1.0	improve-01	18-19
# ::node	0.1.0.0	person	11-12
# ::node	0.1.0.0.0	invest-01	11-12
# ::node	0.1.0.0.1	bother-02	14-15
# ::node	0.1.0.0.1.0	temporal-quantity	8-9
# ::node	0.1.0.0.1.0.0	recent	7-8
# ::node	0.1.0.0.1.0.1	year	8-9
# ::node	0.1.0.1	further	17-18
# ::root	0	price-01
# ::edge	begin-01	ARG1	hurt-01	0.0.1	0.0	
# ::edge	bother-02	ARG0	person	0.1.0.0.1	0.1.0.0	
# ::edge	bother-02	ARG1	temporal-quantity	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	hurt-01	ARG0	price-01	0.0	0	
# ::edge	hurt-01	ARG1	already	0.0	0.0.0	
# ::edge	improve-01	ARG0	person	0.1.0	0.1.0.0	
# ::edge	improve-01	ARG1	energy	0.1.0	0.1	
# ::edge	improve-01	degree	further	0.1.0	0.1.0.1	
# ::edge	invest-01	ARG0	person	0.1.0.0.0	0.1.0.0	
# ::edge	invest-01	ARG1	begin-01	0.0.1.0	0.0.1	
# ::edge	price-01	ARG1	energy	0	0.1	
# ::edge	temporal-quantity	time	recent	0.1.0.0.1.0	0.1.0.0.1.0.0	
# ::edge	temporal-quantity	unit	year	0.1.0.0.1.0	0.1.0.0.1.0.1	
# ::edge	until	op1	begin-01	0.0.1.1	0.0.1	
(p / price-01 
      :ARG0-of (h / hurt-01 
            :ARG1 (a / already) 
            :ARG1-of (b / begin-01 
                  :ARG1-of (i3 / invest-01) 
                  :op-of (u / until))) 
      :ARG1 (e / energy 
            :ARG1-of (i / improve-01 
                  :ARG0 (p2 / person 
                        :ARG0-of (i2 / invest-01) 
                        :ARG0-of (b2 / bother-02 
                              :ARG1 (t / temporal-quantity 
                                    :time (r / recent) 
                                    :unit (y / year)))) 
                  :degree (f / further))))

# ::snt alison my dear dont bother me so
# ::tok alison my dear dont bother me so
# ::alignments 6-7|0.1 4-5|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:06.448
# ::node	0	bother-02	4-5
# ::node	0.0	dear	2-3
# ::node	0.1	so	6-7
# ::root	0	bother-02
# ::edge	bother-02	ARG1	dear	0	0.0	
# ::edge	bother-02	ARG2	so	0	0.1	
(b / bother-02 
      :ARG1 (d / dear) 
      :ARG2 (s / so))

# ::snt the fa were brusque with fleet street often hardly bothering to organize press conferences or explain themselves
# ::tok the fa were brusque with fleet street often hardly bothering to organize press conferences or explain themselves
# ::alignments 15-16|0.0.0.1.0.0 14-15|0.0.0.1.0 13-14|0.0.0.0 12-13|0.0.0.0.0 11-12|0.0.0 9-10|0.0.0.1 8-9|0.0.0.1.1 7-8|0.0.0.1.2 6-7|0.0 5-6|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:06.789
# ::node	0	fleet	5-6
# ::node	0.0	street	6-7
# ::node	0.0.0	organize-01	11-12
# ::node	0.0.0.0	conference	13-14
# ::node	0.0.0.0.0	press	12-13
# ::node	0.0.0.1	bother-01	9-10
# ::node	0.0.0.1.0	or	14-15
# ::node	0.0.0.1.0.0	explain-01	15-16
# ::node	0.0.0.1.1	hardly	8-9
# ::node	0.0.0.1.2	often	7-8
# ::root	0	fleet
(f / fleet 
      :mod-of (s / street 
            :ARG0-of (o2 / organize-01 
                  :ARG1 (c / conference 
                        :mod (p / press)) 
                  :ARG2-of (b / bother-01 
                        :ARG1 (o / or 
                              :op1 (e / explain-01)) 
                        :mod (h / hardly) 
                        :time (o3 / often)))))

# ::snt in sketching future policies officials do not even bother with the democratic nicety if we win
# ::tok in sketching future policies officials do not even bother with the democratic nicety if we win
# ::alignments 15-16|0.0.0 14-15|0.0 11-12|0.0.0.0.0 8-9|0 4-5|0.0.0.0.1+0.0.0.0 3-4|0.1 2-3|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:06.823
# ::node	0	bother-02	8-9
# ::node	0.0	we	14-15
# ::node	0.0.0	win-01	15-16
# ::node	0.0.0.0	have-org-role-91	4-5
# ::node	0.0.0.0.0	democracy	11-12
# ::node	0.0.0.0.1	official	4-5
# ::node	0.1	policy	3-4
# ::node	0.1.0	future	2-3
# ::root	0	bother-02
# ::edge	bother-02	ARG0	we	0	0.0	
# ::edge	bother-02	ARG1	policy	0	0.1	
# ::edge	have-org-role-91	ARG1	democracy	0.0.0.0	0.0.0.0.0	
# ::edge	have-org-role-91	ARG2	official	0.0.0.0	0.0.0.0.1	
# ::edge	policy	mod	future	0.1	0.1.0	
# ::edge	win-01	ARG0	we	0.0.0	0.0	
# ::edge	win-01	ARG1	have-org-role-91	0.0.0	0.0.0.0	
(b / bother-02 
      :ARG0 (w2 / we 
            :ARG0-of (w / win-01 
                  :ARG1 (h / have-org-role-91 
                        :ARG1 (d / democracy) 
                        :ARG2 (o / official)))) 
      :ARG1 (p / policy 
            :mod (f / future)))

# ::snt your social life does become very unpredictable but my husband is in the film business and works similar hours so late nights dont bother me
# ::tok your social life does become very unpredictable but my husband is in the film business and works similar hours so late nights dont bother me
# ::alignments 23-24|0.0.3.1 21-22|0.0.0.0 20-21|0.0.4.0 19-20|0.0.4 18-19|0.0.3.1.0.0+0.0.3.1.0 15-16|0.0.3 14-15|0.1 13-14|0.1.0 9-10|0.0.0.1+0.0.0 7-8|0 6-7|0.0 5-6|0.0.2 4-5|0.0.1 2-3|0.0.3.0 1-2|0.0.3.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:06.952
# ::node	0	contrast-01	7-8
# ::node	0.0	predict-01	6-7
# ::node	0.0.0	have-rel-role-91	9-10
# ::node	0.0.0.0	night	21-22
# ::node	0.0.0.1	husband	9-10
# ::node	0.0.1	become-01	4-5
# ::node	0.0.2	very	5-6
# ::node	0.0.3	and	15-16
# ::node	0.0.3.0	life	2-3
# ::node	0.0.3.0.0	society	1-2
# ::node	0.0.3.1	bother-02	23-24
# ::node	0.0.3.1.0	temporal-quantity	18-19
# ::node	0.0.3.1.0.0	hour	18-19
# ::node	0.0.4	so	19-20
# ::node	0.0.4.0	late	20-21
# ::node	0.1	business	14-15
# ::node	0.1.0	film	13-14
# ::root	0	contrast-01
# ::edge	and	op1	life	0.0.3	0.0.3.0	
# ::edge	and	op2	predict-01	0.0.3	0.0	
# ::edge	and	op3	bother-02	0.0.3	0.0.3.1	
# ::edge	become-01	ARG2	predict-01	0.0.1	0.0	
# ::edge	bother-02	ARG1	temporal-quantity	0.0.3.1	0.0.3.1.0	
# ::edge	business	example	contrast-01	0.1	0	
# ::edge	business	mod	film	0.1	0.1.0	
# ::edge	contrast-01	ARG1	predict-01	0	0.0	
# ::edge	have-rel-role-91	ARG1	night	0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	husband	0.0.0	0.0.0.1	
# ::edge	life	mod	society	0.0.3.0	0.0.3.0.0	
# ::edge	predict-01	ARG0	have-rel-role-91	0.0	0.0.0	
# ::edge	predict-01	degree	very	0.0	0.0.2	
# ::edge	predict-01	time	so	0.0	0.0.4	
# ::edge	so	topic	late	0.0.4	0.0.4.0	
# ::edge	temporal-quantity	unit	hour	0.0.3.1.0	0.0.3.1.0.0	
(c / contrast-01 
      :ARG1 (p / predict-01 
            :ARG0 (h2 / have-rel-role-91 
                  :ARG1 (n / night) 
                  :ARG2 (h3 / husband)) 
            :ARG2-of (b3 / become-01) 
            :degree (v / very) 
            :op-of (a / and 
                  :op1 (l2 / life 
                        :mod (s2 / society)) 
                  :op2 (b / bother-02 
                        :ARG1 (t / temporal-quantity 
                              :unit (h / hour)))) 
            :time (s / so 
                  :topic (l / late))) 
      :example-of (b2 / business 
            :mod (f / film)))

# ::snt sportsmen do not shoot birds that cannot be bothered to fly
# ::tok sportsmen do not shoot birds that cannot be bothered to fly
# ::alignments 10-11|0.0.0.0 8-9|0.0.0 4-5|0.0 3-4|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.007
# ::node	0	shoot-05	3-4
# ::node	0.0	bird	4-5
# ::node	0.0.0	bother-01	8-9
# ::node	0.0.0.0	fly-01	10-11
# ::root	0	shoot-05
# ::edge	bother-01	ARG0	bird	0.0.0	0.0	
# ::edge	bother-01	ARG1	fly-01	0.0.0	0.0.0.0	
# ::edge	shoot-05	ARG1	bird	0	0.0	
(s / shoot-05 
      :ARG1 (b2 / bird 
            :ARG0-of (b / bother-01 
                  :ARG1 (f / fly-01))))

# ::snt they went back but she stayed on and worked as a cook in an indian restaurant where adding to the pileup of cultural incongruities she introduced to the menu the kind of traditional south african dish that only exiles ever bother to cook
# ::tok they went back but she stayed on and worked as a cook in an indian restaurant where adding to the pileup of cultural incongruities she introduced to the menu the kind of traditional south african dish that only exiles ever bother to cook
# ::alignments 40-41|0.1.3.0.0.0 39-40|0.1.3.0.0.0.0 38-39|0.1.3.0.0.1+0.1.3.0.0 37-38|0.1.3.0.0.2 33-34|0.1.3.0.2.0 32-33|0.1.3.0.1 30-31|0.1.3.1.1 25-26|0.1.3.1 24-25|0.1.3.1.0 22-23|0.0 17-18|0.1.3.0.2 15-16|0.1.3.0.3 8-9|0.1.3.0 7-8|0.1.3 5-6|0.1 4-5|0.1.1 3-4|0 2-3|0.1.2 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.601
# ::node	0	contrast-01	3-4
# ::node	0.0	culture	22-23
# ::node	0.1	stay-01	5-6
# ::node	0.1.0	they	0-1
# ::node	0.1.1	she	4-5
# ::node	0.1.2	back	2-3
# ::node	0.1.3	and	7-8
# ::node	0.1.3.0	work-01	8-9
# ::node	0.1.3.0.0	person	38-39
# ::node	0.1.3.0.0.0	bother-02	40-41
# ::node	0.1.3.0.0.0.0	ever	39-40
# ::node	0.1.3.0.0.1	exile-01	38-39
# ::node	0.1.3.0.0.2	only	37-38
# ::node	0.1.3.0.1	tradition	32-33
# ::node	0.1.3.0.2	add-02	17-18
# ::node	0.1.3.0.2.0	south	33-34
# ::node	0.1.3.0.3	restaurant	15-16
# ::node	0.1.3.1	introduce-02	25-26
# ::node	0.1.3.1.0	she	24-25
# ::node	0.1.3.1.1	kind	30-31
# ::root	0	contrast-01
# ::edge	add-02	ARG0	south	0.1.3.0.2	0.1.3.0.2.0	
# ::edge	add-02	ARG1	work-01	0.1.3.0.2	0.1.3.0	
# ::edge	and	op1	stay-01	0.1.3	0.1	
# ::edge	and	op2	work-01	0.1.3	0.1.3.0	
# ::edge	and	op3	introduce-02	0.1.3	0.1.3.1	
# ::edge	bother-02	ARG0	person	0.1.3.0.0.0	0.1.3.0.0	
# ::edge	bother-02	time	ever	0.1.3.0.0.0	0.1.3.0.0.0.0	
# ::edge	contrast-01	ARG1	culture	0	0.0	
# ::edge	contrast-01	ARG2	stay-01	0	0.1	
# ::edge	exile-01	ARG1	person	0.1.3.0.0.1	0.1.3.0.0	
# ::edge	introduce-02	ARG0	she	0.1.3.1	0.1.3.1.0	
# ::edge	introduce-02	ARG1	kind	0.1.3.1	0.1.3.1.1	
# ::edge	person	mod	only	0.1.3.0.0	0.1.3.0.0.2	
# ::edge	stay-01	ARG0	they	0.1	0.1.0	
# ::edge	stay-01	ARG1	she	0.1	0.1.1	
# ::edge	stay-01	concession	back	0.1	0.1.2	
# ::edge	work-01	ARG0	person	0.1.3.0	0.1.3.0.0	
# ::edge	work-01	ARG1	tradition	0.1.3.0	0.1.3.0.1	
# ::edge	work-01	location	restaurant	0.1.3.0	0.1.3.0.3	
(c2 / contrast-01 
      :ARG1 (c / culture) 
      :ARG2 (s3 / stay-01 
            :ARG0 (t2 / they) 
            :ARG1 (s4 / she) 
            :concession (b2 / back) 
            :op-of (a2 / and 
                  :op1 (w / work-01 
                        :ARG0 (p / person 
                              :ARG0-of (b / bother-02 
                                    :time (e / ever)) 
                              :ARG1-of (e2 / exile-01) 
                              :mod (o / only)) 
                        :ARG1 (t / tradition) 
                        :ARG1-of (a / add-02 
                              :ARG0 (s / south)) 
                        :location (r / restaurant)) 
                  :op2 (i / introduce-02 
                        :ARG0 (s2 / she) 
                        :ARG1 (k / kind)))))

# ::snt the team probably wouldnt bother travelling to frinton without this outstanding player
# ::tok the team probably wouldnt bother travelling to frinton without this outstanding player
# ::alignments 10-11|0.0 9-10|0.2 5-6|0.1 4-5|0 2-3|0.1.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.649
# ::node	0	bother-02	4-5
# ::node	0.0	outstanding	10-11
# ::node	0.1	travel-01	5-6
# ::node	0.1.0	team	1-2
# ::node	0.1.1	probable	2-3
# ::node	0.2	this	9-10
# ::root	0	bother-02
# ::edge	bother-02	ARG0	outstanding	0	0.0	
# ::edge	bother-02	ARG1	travel-01	0	0.1	
# ::edge	bother-02	ARG2	this	0	0.2	
# ::edge	travel-01	ARG0	team	0.1	0.1.0	
# ::edge	travel-01	ARG1	probable	0.1	0.1.1	
(b / bother-02 
      :ARG0 (o / outstanding) 
      :ARG1 (t2 / travel-01 
            :ARG0 (t3 / team) 
            :ARG1 (p / probable)) 
      :ARG2 (t / this))

# ::snt the acrimony bothered her less than the silence that followed it
# ::tok the acrimony bothered her less than the silence that followed it
# ::alignments 10-11|0.0.0.0 9-10|0.0.0 7-8|0.0 4-5|0.1 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.722
# ::node	0	bother-01	2-3
# ::node	0.0	silence-01	7-8
# ::node	0.0.0	follow-01	9-10
# ::node	0.0.0.0	it	10-11
# ::node	0.1	less	4-5
# ::root	0	bother-01
# ::edge	bother-01	ARG1	silence-01	0	0.0	
# ::edge	bother-01	ARG2	less	0	0.1	
# ::edge	follow-01	ARG0	silence-01	0.0.0	0.0	
# ::edge	follow-01	ARG1	it	0.0.0	0.0.0.0	
(b / bother-01 
      :ARG1 (s / silence-01 
            :ARG0-of (f / follow-01 
                  :ARG1 (i / it))) 
      :ARG2 (l / less))

# ::snt yet while sceptics go bother about ubus new tack i rather enjoy it
# ::tok yet while sceptics go bother about ubus new tack i rather enjoy it
# ::alignments 12-13|0.1 11-12|0 9-10|0.0 7-8|0.2.1 4-5|0.2 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.765
# ::node	0	enjoy-01	11-12
# ::node	0.0	i	9-10
# ::node	0.1	it	12-13
# ::node	0.2	bother-02	4-5
# ::node	0.2.0	yet	0-1
# ::node	0.2.1	new	7-8
# ::root	0	enjoy-01
# ::edge	bother-02	ARG0	yet	0.2	0.2.0	
# ::edge	bother-02	ARG1	new	0.2	0.2.1	
# ::edge	bother-02	time	enjoy-01	0.2	0	
# ::edge	enjoy-01	ARG0	i	0	0.0	
# ::edge	enjoy-01	ARG1	it	0	0.1	
(e / enjoy-01 
      :ARG0 (i2 / i) 
      :ARG1 (i / it) 
      :time-of (b / bother-02 
            :ARG0 (y / yet) 
            :ARG1 (n / new)))

# ::snt but he wasnt bothered by them
# ::tok but he wasnt bothered by them
# ::alignments 3-4|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.772
# ::node	0	contrast-01	0-1
# ::node	0.0	bother-01	3-4
# ::node	0.0.0	he	1-2
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	he	0.0	0.0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.0	
(c / contrast-01 
      :ARG2 (b / bother-01 
            :ARG0 (h / he)))

# ::snt the problem is that for every handful of investors who stick their heads above the parapet dozens more cannot be bothered
# ::tok the problem is that for every handful of investors who stick their heads above the parapet dozens more cannot be bothered
# ::alignments 20-21|0.0.0 13-14|0.2 10-11|0 8-9|0.1.0+0.1 6-7|0.0.0.0 5-6|0.0.0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.835
# ::node	0	stick-01	10-11
# ::node	0.0	problem	1-2
# ::node	0.0.0	bother-01	20-21
# ::node	0.0.0.0	handful	6-7
# ::node	0.0.0.0.0	every	5-6
# ::node	0.1	person	8-9
# ::node	0.1.0	invest-01	8-9
# ::node	0.2	above	13-14
# ::root	0	stick-01
# ::edge	bother-01	ARG0	problem	0.0.0	0.0	
# ::edge	bother-01	ARG1	handful	0.0.0	0.0.0.0	
# ::edge	handful	mod	every	0.0.0.0	0.0.0.0.0	
# ::edge	invest-01	ARG0	person	0.1.0	0.1	
# ::edge	stick-01	ARG0	problem	0	0.0	
# ::edge	stick-01	ARG1	person	0	0.1	
# ::edge	stick-01	ARG4	above	0	0.2	
(s / stick-01 
      :ARG0 (p2 / problem 
            :ARG0-of (b / bother-01 
                  :ARG1 (h / handful 
                        :mod (e / every)))) 
      :ARG1 (p / person 
            :ARG0-of (i / invest-01)) 
      :ARG4 (a / above))

# ::snt im the only one to bother
# ::tok im the only one to bother
# ::alignments 5-6|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:07.841
# ::node	0	bother-02	5-6
# ::node	0.0	only	2-3
# ::root	0	bother-02
(b / bother-02 
      :concession-of (o / only))

# ::snt it is a pity but in that case he does not matter a great deal anyhow and it would be silly to bother about him
# ::tok it is a pity but in that case he does not matter a great deal anyhow and it would be silly to bother about him
# ::alignments 22-23|0.0.0 20-21|0.0 17-18|0.0.0.0 16-17|0.2 15-16|0.2.0.0.0 14-15|0.2.0.0.0.0 13-14|0.2.0.0.0.1 11-12|0.2.0 8-9|0.2.0.0 7-8|0.2.0.1 4-5|0 3-4|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:08.195
# ::node	0	contrast-01	4-5
# ::node	0.0	silly	20-21
# ::node	0.0.0	bother-02	22-23
# ::node	0.0.0.0	it	17-18
# ::node	0.1	pity	3-4
# ::node	0.1.0	it	0-1
# ::node	0.2	and	16-17
# ::node	0.2.0	matter	11-12
# ::node	0.2.0.0	he	8-9
# ::node	0.2.0.0.0	anyhow	15-16
# ::node	0.2.0.0.0.0	deal-01	14-15
# ::node	0.2.0.0.0.1	great	13-14
# ::node	0.2.0.1	case	7-8
# ::root	0	contrast-01
# ::edge	and	op1	matter	0.2	0.2.0	
# ::edge	anyhow	mod	great	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	anyhow	poss	he	0.2.0.0.0	0.2.0.0	
# ::edge	bother-02	ARG0	it	0.0.0	0.0.0.0	
# ::edge	contrast-01	ARG0	silly	0	0.0	
# ::edge	contrast-01	ARG1	pity	0	0.1	
# ::edge	contrast-01	ARG2	and	0	0.2	
# ::edge	deal-01	ARG0	anyhow	0.2.0.0.0.0	0.2.0.0.0	
# ::edge	matter	ARG0	he	0.2.0	0.2.0.0	
# ::edge	matter	topic	case	0.2.0	0.2.0.1	
# ::edge	pity	domain	it	0.1	0.1.0	
# ::edge	silly	domain	bother-02	0.0	0.0.0	
(c2 / contrast-01 
      :ARG0 (s / silly 
            :domain (b / bother-02 
                  :ARG0 (i / it))) 
      :ARG1 (p / pity 
            :domain (i2 / it)) 
      :ARG2 (a / and 
            :op1 (m / matter 
                  :ARG0 (h / he 
                        :poss-of (a2 / anyhow 
                              :ARG0-of (d / deal-01) 
                              :mod (g / great))) 
                  :topic (c / case))))

# ::snt it wouldnt have bothered me but it bothered her
# ::tok it wouldnt have bothered me but it bothered her
# ::alignments 7-8|0.1 6-7|0.1.0 5-6|0 3-4|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:08.208
# ::node	0	contrast-01	5-6
# ::node	0.0	bother-01	3-4
# ::node	0.0.0	it	0-1
# ::node	0.1	bother-01	7-8
# ::node	0.1.0	it	6-7
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	it	0.0	0.0.0	
# ::edge	bother-01	ARG0	it	0.1	0.1.0	
# ::edge	contrast-01	ARG1	bother-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.1	
(c / contrast-01 
      :ARG1 (b2 / bother-01 
            :ARG0 (i2 / it)) 
      :ARG2 (b / bother-01 
            :ARG0 (i / it)))

# ::snt despite daily cajoling over recent weeks only 7000 of the average audience of 6 million bothered to vote
# ::tok despite daily cajoling over recent weeks only 7000 of the average audience of 6 million bothered to vote
# ::alignments 17-18|0 15-16|0.2 13-14|0.2.0 11-12|0.2.1 7-8|0.1 6-7|0.0 5-6|0.1.0.0+0.1.0 4-5|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:08.323
# ::node	0	vote-01	17-18
# ::node	0.0	only	6-7
# ::node	0.1	7000	7-8
# ::node	0.1.0	temporal-quantity	5-6
# ::node	0.1.0.0	week	5-6
# ::node	0.1.0.0.0	recent	4-5
# ::node	0.2	bother-01	15-16
# ::node	0.2.0	6	13-14
# ::node	0.2.1	audience	11-12
# ::root	0	vote-01
# ::edge	bother-01	ARG0	6	0.2	0.2.0	
# ::edge	bother-01	ARG1	vote-01	0.2	0	
# ::edge	bother-01	ARG2	audience	0.2	0.2.1	
# ::edge	temporal-quantity	quant	7000	0.1.0	0.1	
# ::edge	temporal-quantity	unit	week	0.1.0	0.1.0.0	
# ::edge	vote-01	ARG0	only	0	0.0	
# ::edge	vote-01	ARG1	7000	0	0.1	
# ::edge	week	mod	recent	0.1.0.0	0.1.0.0.0	
(v / vote-01 
      :ARG0 (o / only) 
      :ARG1 (7 / 7000 
            :quant-of (t / temporal-quantity 
                  :unit (w / week 
                        :mod (r / recent)))) 
      :ARG1-of (b / bother-01 
            :ARG0 6 
            :ARG2 (a / audience)))

# ::snt youre bothered by it personally but you still have professional pride tony la russa the oakland manager said
# ::tok youre bothered by it personally but you still have professional pride tony la russa the oakland manager said
# ::alignments 17-18|0.0.0.0.0 16-17|0.0.0.0.0.0 11-14|0.0.0.0.3.0+0.0.0.0.3.1+0.0.0.0.3.2+0.0.0.0.3+0.0.0.0 10-11|0.0.0.0.1 9-10|0.0.0.0.2 7-8|0.1 6-7|0.0.0 5-6|0 4-5|0.0.2 3-4|0.0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:08.538
# ::node	0	contrast-01	5-6
# ::node	0.0	bother-01	1-2
# ::node	0.0.0	you	6-7
# ::node	0.0.0.0	person	11-14
# ::node	0.0.0.0.0	say-01	17-18
# ::node	0.0.0.0.0.0	manage-01	16-17
# ::node	0.0.0.0.1	pride-01	10-11
# ::node	0.0.0.0.2	professional	9-10
# ::node	0.0.0.0.3	name	11-14
# ::node	0.0.0.0.3.0	"russa"	11-14
# ::node	0.0.0.0.3.1	"la"	11-14
# ::node	0.0.0.0.3.2	"tony"	11-14
# ::node	0.0.1	it	3-4
# ::node	0.0.2	personal	4-5
# ::node	0.1	still	7-8
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	you	0.0	0.0.0	
# ::edge	bother-01	ARG1	contrast-01	0.0	0	
# ::edge	bother-01	ARG2	it	0.0	0.0.1	
# ::edge	bother-01	mod	personal	0.0	0.0.2	
# ::edge	contrast-01	mod	still	0	0.1	
# ::edge	name	op1	"russa"	0.0.0.0.3	0.0.0.0.3.0	
# ::edge	name	op2	"la"	0.0.0.0.3	0.0.0.0.3.1	
# ::edge	name	op3	"tony"	0.0.0.0.3	0.0.0.0.3.2	
# ::edge	person	mod	pride-01	0.0.0.0	0.0.0.0.1	
# ::edge	person	mod	professional	0.0.0.0	0.0.0.0.2	
# ::edge	person	name	name	0.0.0.0	0.0.0.0.3	
# ::edge	person	poss	you	0.0.0.0	0.0.0	
# ::edge	say-01	ARG0	manage-01	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	say-01	ARG1	person	0.0.0.0.0	0.0.0.0	
(c / contrast-01 
      :ARG1-of (b / bother-01 
            :ARG0 (y / you 
                  :poss-of (p / person 
                        :ARG1-of (s / say-01 
                              :ARG0 (m / manage-01)) 
                        :mod (p2 / pride-01) 
                        :mod (p3 / professional) 
                        :name (n / name 
                              :op1 "russa" 
                              :op2 "la" 
                              :op3 "tony"))) 
            :ARG2 (i / it) 
            :mod (p4 / personal)) 
      :mod (s2 / still))

# ::snt people might think i am letting all that money slip through my hands but it doesnt bother me
# ::tok people might think i am letting all that money slip through my hands but it doesnt bother me
# ::alignments 16-17|0.1 14-15|0.1.0 13-14|0 12-13|0.0.1.0 9-10|0.0.1 8-9|0.0.1.1 6-7|0.0.1.2 5-6|0.0 3-4|0.0.0 2-3|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:08.600
# ::node	0	contrast-01	13-14
# ::node	0.0	let-01	5-6
# ::node	0.0.0	i	3-4
# ::node	0.0.0.0	think-01	2-3
# ::node	0.0.1	slip-01	9-10
# ::node	0.0.1.0	hand	12-13
# ::node	0.0.1.1	money	8-9
# ::node	0.0.1.2	all	6-7
# ::node	0.1	bother-02	16-17
# ::node	0.1.0	it	14-15
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	it	0.1	0.1.0	
# ::edge	contrast-01	ARG1	let-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	let-01	ARG0	i	0.0	0.0.0	
# ::edge	let-01	ARG1	slip-01	0.0	0.0.1	
# ::edge	slip-01	ARG1	hand	0.0.1	0.0.1.0	
# ::edge	slip-01	mod	money	0.0.1	0.0.1.1	
# ::edge	slip-01	quant	all	0.0.1	0.0.1.2	
# ::edge	think-01	ARG0	i	0.0.0.0	0.0.0	
(c / contrast-01 
      :ARG1 (l / let-01 
            :ARG0 (i2 / i 
                  :ARG0-of (t / think-01)) 
            :ARG1 (s / slip-01 
                  :ARG1 (h / hand) 
                  :mod (m / money) 
                  :quant (a / all))) 
      :ARG2 (b / bother-02 
            :ARG0 (i / it)))

# ::snt perhaps hes nursing some plot like to get all the rawlinsons business for himself and then next time they reorder increase the prices without having to bother about competition from us
# ::tok perhaps hes nursing some plot like to get all the rawlinsons business for himself and then next time they reorder increase the prices without having to bother about competition from us
# ::alignments 28-29|0.1 26-27|0 22-23|0.0 20-21|0.0.1 18-19|0.0.1.0 17-18|0.0.1.1 16-17|0.0.1.1.0 15-16|0.0.1.2.0.0 14-15|0.0.1.2 11-12|0.0.1.2.1 8-9|0.0.1.2.1.0 4-5|0.0.1.2.0 3-4|0.0.1.2.0.1 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.038
# ::node	0	bother-02	26-27
# ::node	0.0	price-01	22-23
# ::node	0.0.0	perhaps	0-1
# ::node	0.0.1	increase-01	20-21
# ::node	0.0.1.0	they	18-19
# ::node	0.0.1.1	time	17-18
# ::node	0.0.1.1.0	next	16-17
# ::node	0.0.1.2	and	14-15
# ::node	0.0.1.2.0	plot-01	4-5
# ::node	0.0.1.2.0.0	then	15-16
# ::node	0.0.1.2.0.1	some	3-4
# ::node	0.0.1.2.1	business	11-12
# ::node	0.0.1.2.1.0	all	8-9
# ::node	0.1	compete-01	28-29
# ::root	0	bother-02
# ::edge	and	op1	plot-01	0.0.1.2	0.0.1.2.0	
# ::edge	and	op2	business	0.0.1.2	0.0.1.2.1	
# ::edge	and	op3	increase-01	0.0.1.2	0.0.1	
# ::edge	bother-02	ARG0	price-01	0	0.0	
# ::edge	bother-02	ARG2	compete-01	0	0.1	
# ::edge	business	quant	all	0.0.1.2.1	0.0.1.2.1.0	
# ::edge	increase-01	ARG0	they	0.0.1	0.0.1.0	
# ::edge	increase-01	ARG1	price-01	0.0.1	0.0	
# ::edge	increase-01	duration	time	0.0.1	0.0.1.1	
# ::edge	plot-01	ARG1	then	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	plot-01	quant	some	0.0.1.2.0	0.0.1.2.0.1	
# ::edge	price-01	ARG1	perhaps	0.0	0.0.0	
# ::edge	time	mod	next	0.0.1.1	0.0.1.1.0	
(b / bother-02 
      :ARG0 (p / price-01 
            :ARG1 (p3 / perhaps) 
            :ARG1-of (i / increase-01 
                  :ARG0 (t / they) 
                  :duration (t2 / time 
                        :mod (n / next)) 
                  :op-of (a / and 
                        :op1 (p2 / plot-01 
                              :ARG1 (t3 / then) 
                              :quant (s / some)) 
                        :op2 (b2 / business 
                              :quant (a2 / all))))) 
      :ARG2 (c / compete-01))

# ::snt do you want to come out  well im not bothered ellip  well im not bothered either
# ::tok do you want to come out well im not bothered ellip well im not bothered either
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.039
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i dont give my home phone number out im not bothered in the streets of derby too much and i dont go where theres going to be a lot of publicity
# ::tok i dont give my home phone number out im not bothered in the streets of derby too much and i dont go where theres going to be a lot of publicity
# ::alignments 30-31|0.0.0 28-29|0.0.0.0 19-20|0.2 18-19|0 17-18|0.1 16-17|0.1.0 13-14|0.0.2 10-11|0.0 6-7|0.0.1 5-6|0.0.1.0.1 4-5|0.0.1.0.1.0 2-3|0.0.1.0 0-1|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.317
# ::node	0	and	18-19
# ::node	0.0	bother-01	10-11
# ::node	0.0.0	publicity	30-31
# ::node	0.0.0.0	lot	28-29
# ::node	0.0.1	number	6-7
# ::node	0.0.1.0	give-01	2-3
# ::node	0.0.1.0.0	i	0-1
# ::node	0.0.1.0.1	phone	5-6
# ::node	0.0.1.0.1.0	home	4-5
# ::node	0.0.2	street	13-14
# ::node	0.1	much	17-18
# ::node	0.1.0	too	16-17
# ::node	0.2	i	19-20
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.0	
# ::edge	and	op2	much	0	0.1	
# ::edge	and	op3	i	0	0.2	
# ::edge	bother-01	ARG0	publicity	0.0	0.0.0	
# ::edge	bother-01	ARG1	number	0.0	0.0.1	
# ::edge	bother-01	location	street	0.0	0.0.2	
# ::edge	give-01	ARG0	i	0.0.1.0	0.0.1.0.0	
# ::edge	give-01	ARG1	number	0.0.1.0	0.0.1	
# ::edge	give-01	ARG2	phone	0.0.1.0	0.0.1.0.1	
# ::edge	much	degree	too	0.1	0.1.0	
# ::edge	phone	mod	home	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	publicity	quant	lot	0.0.0	0.0.0.0	
(a / and 
      :op1 (b / bother-01 
            :ARG0 (p / publicity 
                  :quant (l / lot)) 
            :ARG1 (n / number 
                  :ARG1-of (g / give-01 
                        :ARG0 (i2 / i) 
                        :ARG2 (p2 / phone 
                              :mod (h / home)))) 
            :location (s / street)) 
      :op2 (m / much 
            :degree (t / too)) 
      :op3 (i / i))

# ::snt but doesnt it bother you at all robyn said
# ::tok but doesnt it bother you at all robyn said
# ::alignments 8-9|0.1.2 6-7|0.0 4-5|0.1.1 3-4|0.1 2-3|0.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.341
# ::node	0	contrast-01	0-1
# ::node	0.0	all	6-7
# ::node	0.1	bother-02	3-4
# ::node	0.1.0	it	2-3
# ::node	0.1.1	you	4-5
# ::node	0.1.2	say-01	8-9
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	it	0.1	0.1.0	
# ::edge	bother-02	ARG1	you	0.1	0.1.1	
# ::edge	contrast-01	ARG1	all	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	say-01	ARG1	bother-02	0.1.2	0.1	
(c / contrast-01 
      :ARG1 (a / all) 
      :ARG2 (b / bother-02 
            :ARG0 (i / it) 
            :ARG1 (y / you) 
            :ARG1-of (s / say-01)))

# ::snt only yourself to bother about
# ::tok only yourself to bother about
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.346
# ::node	0	bother-02	3-4
# ::node	0.0	only	0-1
# ::root	0	bother-02
# ::edge	bother-02	mod	only	0	0.0	
(b / bother-02 
      :mod (o / only))

# ::snt dont try to get me back and dont bother about the things ive left ive taken what i need
# ::tok dont try to get me back and dont bother about the things ive left ive taken what i need
# ::alignments 18-19|0.0.0.0.0 17-18|0.0.0.0 11-12|0.0.0.0.0.0 8-9|0 6-7|0.0 5-6|0.0.0.1 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.459
# ::node	0	bother-02	8-9
# ::node	0.0	and	6-7
# ::node	0.0.0	try-01	1-2
# ::node	0.0.0.0	i	17-18
# ::node	0.0.0.0.0	need-01	18-19
# ::node	0.0.0.0.0.0	thing	11-12
# ::node	0.0.0.1	back	5-6
# ::root	0	bother-02
(b / bother-02 
      :op-of (a / and 
            :ARG1-of (t2 / try-01 
                  :ARG0 (i / i 
                        :ARG0-of (n / need-01 
                              :ARG1 (t / thing))) 
                  :location (b2 / back))))

# ::snt that didnt bother clark
# ::tok that didnt bother clark
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.462
# ::node	0	bother-02	2-3
# ::root	0	bother-02
(b / bother-02)

# ::snt and dont bother reminding me im jewish
# ::tok and dont bother reminding me im jewish
# ::alignments 6-7|0.0.0.0.0+0.0.0.0+0.0.0 2-3|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.485
# ::node	0	and	0-1
# ::node	0.0	bother-02	2-3
# ::node	0.0.0	ethnic-group	6-7
# ::node	0.0.0.0	name	6-7
# ::node	0.0.0.0.0	"Jew"	6-7
# ::root	0	and
(a / and 
      :ARG1-of (b / bother-02 
            :ARG0 (e / ethnic-group 
                  :name (n / name 
                        :op1 "Jew"))))

# ::snt you never bothered to look after me but i take my responsibilities more seriously
# ::tok you never bothered to look after me but i take my responsibilities more seriously
# ::alignments 13-14|0.0.0 11-12|0.1.0.0+0.1.0.0.0 8-9|0.0 7-8|0 5-6|0.1.1 2-3|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.575
# ::node	0	contrast-01	7-8
# ::node	0.0	i	8-9
# ::node	0.0.0	serious	13-14
# ::node	0.1	bother-01	2-3
# ::node	0.1.0	you	0-1
# ::node	0.1.0.0	responsible-41	11-12
# ::node	0.1.0.0.0	thing	11-12
# ::node	0.1.1	after	5-6
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	you	0.1	0.1.0	
# ::edge	bother-01	ARG1	after	0.1	0.1.1	
# ::edge	contrast-01	ARG1	i	0	0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.1	
# ::edge	responsible-41	ARG1	you	0.1.0.0	0.1.0	
# ::edge	responsible-41	ARG2	thing	0.1.0.0	0.1.0.0.0	
# ::edge	serious	op1	i	0.0.0	0.0	
(c / contrast-01 
      :ARG1 (i / i 
            :op-of (s / serious)) 
      :ARG2 (b / bother-01 
            :ARG0 (y / you 
                  :ARG1-of (r / responsible-41 
                        :ARG2 (t / thing))) 
            :ARG1 (a / after)))

# ::snt dont bother with the map
# ::tok dont bother with the map
# ::alignments 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.580
# ::node	0	bother-02	1-2
# ::node	0.0	map	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG1	map	0	0.0	
(b / bother-02 
      :ARG1 (m / map))

# ::snt footing a police bill is new to the eagles who were not accustomed to bothering the constabulary with the threefigure gatherings of their owlerton days
# ::tok footing a police bill is new to the eagles who were not accustomed to bothering the constabulary with the threefigure gatherings of their owlerton days
# ::alignments 24-25|0.1.0.0+0.1.0 20-21|0.1 14-15|0 5-6|0.0.0.0 3-4|0.0.0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.626
# ::node	0	bother-01	14-15
# ::node	0.0	police	2-3
# ::node	0.0.0	bill	3-4
# ::node	0.0.0.0	new	5-6
# ::node	0.1	gather-01	20-21
# ::node	0.1.0	temporal-quantity	24-25
# ::node	0.1.0.0	day	24-25
# ::root	0	bother-01
# ::edge	bill	mod	police	0.0.0	0.0	
# ::edge	bother-01	ARG1	police	0	0.0	
# ::edge	bother-01	ARG2	gather-01	0	0.1	
# ::edge	gather-01	ARG1	temporal-quantity	0.1	0.1.0	
# ::edge	new	domain	bill	0.0.0.0	0.0.0	
# ::edge	temporal-quantity	unit	day	0.1.0	0.1.0.0	
(b / bother-01 
      :ARG1 (p / police 
            :mod-of (b2 / bill 
                  :domain-of (n / new))) 
      :ARG2 (g / gather-01 
            :ARG1 (t / temporal-quantity 
                  :unit (d / day))))

# ::snt those most likely to be bothered by neighbourhood noise are relatively young between 25 and 34 and the people least likely to be bothered are those over 65 living in detached houses
# ::tok those most likely to be bothered by neighbourhood noise are relatively young between 25 and 34 and the people least likely to be bothered are those over 65 living in detached houses
# ::alignments 31-32|0.0.2.0.0.0 28-29|0.0.2.0.0 27-28|0.0.0 23-24|0.0.2.0 20-21|0.0.2.0.1 16-17|0 15-16|0.0.1.0.0.0 14-15|0.0.1.0 13-14|0.2 12-13|0.0.1.0.0 11-12|0.1 10-11|0.1.0 8-9|0.0.1 5-6|0.0 2-3|0.0.2 1-2|0.0.2.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:09.820
# ::node	0	and	16-17
# ::node	0.0	bother-01	5-6
# ::node	0.0.0	65	27-28
# ::node	0.0.1	noise	8-9
# ::node	0.0.1.0	and	14-15
# ::node	0.0.1.0.0	between	12-13
# ::node	0.0.1.0.0.0	34	15-16
# ::node	0.0.2	likely	2-3
# ::node	0.0.2.0	bother-01	23-24
# ::node	0.0.2.0.0	live-01	28-29
# ::node	0.0.2.0.0.0	house	31-32
# ::node	0.0.2.0.1	likely	20-21
# ::node	0.0.2.1	most	1-2
# ::node	0.1	young	11-12
# ::node	0.1.0	relative	10-11
# ::node	0.2	25	13-14
# ::root	0	and
# ::edge	and	op1	noise	0.0.1.0	0.0.1	
# ::edge	and	op1	young	0	0.1	
# ::edge	and	time	25	0	0.2	
# ::edge	between	op1	and	0.0.1.0.0	0.0.1.0	
# ::edge	between	op2	34	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	bother-01	ARG0	65	0.0	0.0.0	
# ::edge	bother-01	ARG1	likely	0.0.2.0	0.0.2	
# ::edge	bother-01	ARG1	noise	0.0	0.0.1	
# ::edge	bother-01	ARG2	and	0.0	0	
# ::edge	likely	degree	most	0.0.2	0.0.2.1	
# ::edge	likely	domain	bother-01	0.0.2	0.0	
# ::edge	likely	domain	bother-01	0.0.2.0.1	0.0.2.0	
# ::edge	live-01	ARG0	house	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	live-01	ARG1	bother-01	0.0.2.0.0	0.0.2.0	
# ::edge	young	degree	relative	0.1	0.1.0	
(a / and 
      :ARG2-of (b3 / bother-01 
            :ARG0 65 
            :ARG1 (n / noise 
                  :op-of (a2 / and 
                        :op-of (b2 / between 
                              :op1 34))) 
            :domain-of (l3 / likely 
                  :ARG1-of (b / bother-01 
                        :ARG1-of (l / live-01 
                              :ARG0 (h / house)) 
                        :domain-of (l2 / likely)) 
                  :degree (m / most))) 
      :op1 (y / young 
            :degree (r / relative)) 
      :time 25)

# ::snt they always photograph me with kylie because  shes my wife on screen but they never bother to photograph  me with any other girls
# ::tok they always photograph me with kylie because shes my wife on screen but they never bother to photograph me with any other girls
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.176
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt and he was the only one that really bothered me
# ::tok and he was the only one that really bothered me
# ::alignments 8-9|0.1 7-8|0.1.1 4-5|0.1.0 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.199
# ::node	0	and	0-1
# ::node	0.0	he	1-2
# ::node	0.1	bother-01	8-9
# ::node	0.1.0	only	4-5
# ::node	0.1.1	really	7-8
# ::root	0	and
# ::edge	and	op1	he	0	0.0	
# ::edge	and	op2	bother-01	0	0.1	
# ::edge	bother-01	ARG0	only	0.1	0.1.0	
# ::edge	bother-01	mod	really	0.1	0.1.1	
(a / and 
      :op1 (h / he) 
      :op2 (b / bother-01 
            :ARG0 (o / only) 
            :mod (r / really)))

# ::snt hes not going to be bothered by the trivialities that concern you so much
# ::tok hes not going to be bothered by the trivialities that concern you so much
# ::alignments 13-14|0.2 12-13|0.2.0 11-12|0.1 10-11|0 5-6|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.219
# ::node	0	concern-01	10-11
# ::node	0.0	bother-01	5-6
# ::node	0.1	you	11-12
# ::node	0.2	much	13-14
# ::node	0.2.0	so	12-13
# ::root	0	concern-01
# ::edge	concern-01	ARG1	bother-01	0	0.0	
# ::edge	concern-01	ARG2	you	0	0.1	
# ::edge	concern-01	mod	much	0	0.2	
# ::edge	much	degree	so	0.2	0.2.0	
(c / concern-01 
      :ARG1 (b / bother-01) 
      :ARG2 (y / you) 
      :mod (m / much 
            :degree (s / so)))

# ::snt do you want to come out  well im not bothered ellip
# ::tok do you want to come out well im not bothered ellip
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.219
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt a surprising number of holidaymakers still dont bother but the penalty could be fatal
# ::tok a surprising number of holidaymakers still dont bother but the penalty could be fatal
# ::alignments 13-14|0.0.0 11-12|0.0 10-11|0.0.0.0 8-9|0 7-8|0.1 5-6|0.0.0.0.0 2-3|0.1.0 1-2|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.345
# ::node	0	contrast-01	8-9
# ::node	0.0	possible	11-12
# ::node	0.0.0	fatal	13-14
# ::node	0.0.0.0	penalize-01	10-11
# ::node	0.0.0.0.0	still	5-6
# ::node	0.1	bother-02	7-8
# ::node	0.1.0	number	2-3
# ::node	0.1.0.0	surprise-01	1-2
# ::root	0	contrast-01
# ::edge	bother-02	ARG1	number	0.1	0.1.0	
# ::edge	contrast-01	ARG1	possible	0	0.0	
# ::edge	contrast-01	ARG4	bother-02	0	0.1	
# ::edge	fatal	domain	penalize-01	0.0.0	0.0.0.0	
# ::edge	penalize-01	ARG1	still	0.0.0.0	0.0.0.0.0	
# ::edge	possible	domain	fatal	0.0	0.0.0	
# ::edge	surprise-01	ARG1	number	0.1.0.0	0.1.0	
(c / contrast-01 
      :ARG1 (p / possible 
            :domain (f / fatal 
                  :domain (p2 / penalize-01 
                        :ARG1 (s / still)))) 
      :ARG4 (b / bother-02 
            :ARG1 (n / number 
                  :ARG1-of (s2 / surprise-01))))

# ::snt it opens its doors for one week of the year and thereafter well do not bother
# ::tok it opens its doors for one week of the year and thereafter well do not bother
# ::alignments 15-16|0.1 12-13|0.1.0 10-11|0 9-10|0.0.3 6-7|0.0.2 3-4|0.0.1 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.377
# ::node	0	and	10-11
# ::node	0.0	open-01	1-2
# ::node	0.0.0	it	0-1
# ::node	0.0.1	door	3-4
# ::node	0.0.2	week	6-7
# ::node	0.0.3	year	9-10
# ::node	0.1	bother-02	15-16
# ::node	0.1.0	well	12-13
# ::root	0	and
# ::edge	and	op1	open-01	0	0.0	
# ::edge	and	op2	bother-02	0	0.1	
# ::edge	bother-02	degree	well	0.1	0.1.0	
# ::edge	open-01	ARG0	it	0.0	0.0.0	
# ::edge	open-01	ARG1	door	0.0	0.0.1	
# ::edge	open-01	time	week	0.0	0.0.2	
# ::edge	open-01	time	year	0.0	0.0.3	
(a / and 
      :op1 (o / open-01 
            :ARG0 (i / it) 
            :ARG1 (d / door) 
            :time (w2 / week) 
            :time (y / year)) 
      :op2 (b / bother-02 
            :degree (w / well)))

# ::snt but just watch where you land will you please  hold on said gower not bothering to mention that he was not a longdistance jumper
# ::tok but just watch where you land will you please hold on said gower not bothering to mention that he was not a longdistance jumper
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.378
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt we might even not bother with sleep after all dash
# ::tok we might even not bother with sleep after all dash
# ::alignments 8-9|0.1.0 7-8|0.2 6-7|0.1 4-5|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:10.392
# ::node	0	bother-02	4-5
# ::node	0.0	we	0-1
# ::node	0.1	sleep-01	6-7
# ::node	0.1.0	all	8-9
# ::node	0.2	after	7-8
# ::root	0	bother-02
# ::edge	bother-02	ARG0	we	0	0.0	
# ::edge	bother-02	ARG1	sleep-01	0	0.1	
# ::edge	bother-02	time	after	0	0.2	
# ::edge	sleep-01	ARG1	all	0.1	0.1.0	
(b / bother-02 
      :ARG0 (w / we) 
      :ARG1 (s / sleep-01 
            :ARG1 (a / all)) 
      :time (a2 / after))

# ::snt that is three wellheeled welltrained orderly and obliging citizens for every one who is homeless luckless jobless witless or in general hopeless will have improved to the 51 society we used to have and which didnt bother us too much and might even get to something like 61 and we would be respected and envied by the other nations of the world
# ::tok that is three wellheeled welltrained orderly and obliging citizens for every one who is homeless luckless jobless witless or in general hopeless will have improved to the 51 society we used to have and which didnt bother us too much and might even get to something like 61 and we would be respected and envied by the other nations of the world
# ::alignments 61-62|0.3.0.0 58-59|0.3.0 57-58|0.3 53-54|0.0.0.2.0 52-53|0.0.0.2.0.0 49-50|0.0.0.2.0.0.1 48-49|0.0.0.2 47-48|0.0.0.2.0.0.0 45-46|0.0.1.3 40-41|0.2 39-40|0.1 38-39|0.1.0 36-37|0 33-34|0.0.0.1 30-31|0.0.0 29-30|0.0 28-29|0.0.1.1 27-28|0.0.1.1.0 24-25|0.0.1 21-22|0.0.1.0 20-21|0.0.1.0.1 18-19|0.0.1.0.2 16-17|0.0.0.0 10-11|0.0.1.0.0 8-9|0.0.1.2.1 6-7|0.0.1.2 5-6|0.0.1.2.0 2-3|0.0.1.4 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:11.192
# ::node	0	bother-02	36-37
# ::node	0.0	we	29-30
# ::node	0.0.0	use-01	30-31
# ::node	0.0.0.0	jobless	16-17
# ::node	0.0.0.1	and	33-34
# ::node	0.0.0.2	and	48-49
# ::node	0.0.0.2.0	and	53-54
# ::node	0.0.0.2.0.0	respect-01	52-53
# ::node	0.0.0.2.0.0.0	61	47-48
# ::node	0.0.0.2.0.0.1	we	49-50
# ::node	0.0.1	improve-01	24-25
# ::node	0.0.1.0	hope-01	21-22
# ::node	0.0.1.0.0	every	10-11
# ::node	0.0.1.0.1	general	20-21
# ::node	0.0.1.0.2	or	18-19
# ::node	0.0.1.1	society	28-29
# ::node	0.0.1.1.0	51	27-28
# ::node	0.0.1.2	and	6-7
# ::node	0.0.1.2.0	order	5-6
# ::node	0.0.1.2.1	citizen	8-9
# ::node	0.0.1.3	something	45-46
# ::node	0.0.1.4	3	2-3
# ::node	0.1	much	39-40
# ::node	0.1.0	too	38-39
# ::node	0.2	and	40-41
# ::node	0.3	other	57-58
# ::node	0.3.0	nation	58-59
# ::node	0.3.0.0	world	61-62
# ::root	0	bother-02
# ::edge	3	op1	improve-01	0.0.1.4	0.0.1	
# ::edge	and	op1	bother-02	0.2	0	
# ::edge	and	op1	order	0.0.1.2	0.0.1.2.0	
# ::edge	and	op1	respect-01	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	and	op1	use-01	0.0.0.1	0.0.0	
# ::edge	and	op1	use-01	0.0.0.2	0.0.0	
# ::edge	and	op2	and	0.0.0.2	0.0.0.2.0	
# ::edge	and	op2	citizen	0.0.1.2	0.0.1.2.1	
# ::edge	and	op3	improve-01	0.0.1.2	0.0.1	
# ::edge	bother-02	ARG0	we	0	0.0	
# ::edge	bother-02	mod	much	0	0.1	
# ::edge	hope-01	ARG1	every	0.0.1.0	0.0.1.0.0	
# ::edge	hope-01	mod	general	0.0.1.0	0.0.1.0.1	
# ::edge	improve-01	ARG0	we	0.0.1	0.0	
# ::edge	improve-01	ARG1	hope-01	0.0.1	0.0.1.0	
# ::edge	improve-01	ARG2	society	0.0.1	0.0.1.1	
# ::edge	much	degree	too	0.1	0.1.0	
# ::edge	nation	location	world	0.3.0	0.3.0.0	
# ::edge	nation	mod	other	0.3.0	0.3	
# ::edge	or	op1	hope-01	0.0.1.0.2	0.0.1.0	
# ::edge	other	op1	bother-02	0.3	0	
# ::edge	respect-01	ARG0	61	0.0.0.2.0.0	0.0.0.2.0.0.0	
# ::edge	respect-01	ARG1	we	0.0.0.2.0.0	0.0.0.2.0.0.1	
# ::edge	society	quant	51	0.0.1.1	0.0.1.1.0	
# ::edge	something	op1	improve-01	0.0.1.3	0.0.1	
# ::edge	use-01	ARG0	we	0.0.0	0.0	
# ::edge	use-01	ARG1	jobless	0.0.0	0.0.0.0	
(b / bother-02 
      :ARG0 (w3 / we 
            :ARG0-of (u / use-01 
                  :ARG1 (j / jobless) 
                  :op-of (a4 / and) 
                  :op-of (a2 / and 
                        :op1 (a / and 
                              :op1 (r / respect-01 
                                    :ARG0 61 
                                    :ARG1 (w2 / we))))) 
            :ARG0-of (i / improve-01 
                  :ARG1 (h / hope-01 
                        :ARG1 (e / every) 
                        :mod (g / general) 
                        :op-of (o2 / or)) 
                  :ARG2 (s2 / society 
                        :quant 51) 
                  :op-of (a5 / and 
                        :op1 (o3 / order) 
                        :op2 (c / citizen)) 
                  :op-of (s / something) 
                  :op-of 3)) 
      :mod (m / much 
            :degree (t / too)) 
      :op-of (a3 / and) 
      :op-of (o / other 
            :mod-of (n / nation 
                  :location (w / world))))

# ::snt   to understand why jews should be bothered by catholics praying at this site it is necessary to go back to the role played by the catholic church in fomenting antisemitism the passivity of the pope during the war while the exterminations were underway and even the suspicions caused by the reception of austrian president kurt waldheim with his dubious war record by the present pope john paul ii from poland
# ::tok to understand why jews should be bothered by catholics praying at this site it is necessary to go back to the role played by the catholic church in fomenting antisemitism the passivity of the pope during the war while the exterminations were underway and even the suspicions caused by the reception of austrian president kurt waldheim with his dubious war record by the present pope john paul ii from poland
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:11.193
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt morris panov approached the intersection still bothered by the curious telephone conversation he had had ten minutes ago still trying to recall each segment of the plan he was to follow afraid to look at his watch to see if he had reached a specific place within a specific time span dash
# ::tok morris panov approached the intersection still bothered by the curious telephone conversation he had had ten minutes ago still trying to recall each segment of the plan he was to follow afraid to look at his watch to see if he had reached a specific place within a specific time span dash
# ::alignments 50-51|0.0.0.0.0.3 49-50|0.0.0.0.0.3.0 48-49|0.0.0.0.0.3.0.0 46-47|0.0.0.0.0.2 45-46|0.0.0.0.0.1 44-45|0.0.0.0.0.1.0 42-43|0.0.0.0.0 40-41|0.0.0.0.0.0 38-39|0.0.0.0 36-37|0.0.0.0.1 30-31|0.0 27-28|0.0.0 26-27|0 23-24|0.1.1 22-23|0.1.2.0.0.0 21-22|0.1 19-20|0.1.2 18-19|0.1.2.1 16-17|0.1.0.0+0.1.0 12-13|0.1.2.0.0.1.1.0 11-12|0.1.2.0.0.1.1 10-11|0.1.2.0.0.1.1.1 9-10|0.1.2.0.0.1.1.2 6-7|0.1.2.0.0.1 5-6|0.1.2.0.0.1.0 4-5|0.1.2.0.0 2-3|0.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:12.449
# ::node	0	plan-01	26-27
# ::node	0.0	follow-02	30-31
# ::node	0.0.0	he	27-28
# ::node	0.0.0.0	see-01	38-39
# ::node	0.0.0.0.0	reach-01	42-43
# ::node	0.0.0.0.0.0	he	40-41
# ::node	0.0.0.0.0.1	place	45-46
# ::node	0.0.0.0.0.1.0	specific	44-45
# ::node	0.0.0.0.0.2	within	46-47
# ::node	0.0.0.0.0.3	span-01	50-51
# ::node	0.0.0.0.0.3.0	time	49-50
# ::node	0.0.0.0.0.3.0.0	specific	48-49
# ::node	0.0.0.0.1	watch-01	36-37
# ::node	0.1	recall-02	21-22
# ::node	0.1.0	temporal-quantity	16-17
# ::node	0.1.0.0	minute	16-17
# ::node	0.1.1	segment	23-24
# ::node	0.1.2	try-01	19-20
# ::node	0.1.2.0	approach-02	2-3
# ::node	0.1.2.0.0	intersect-01	4-5
# ::node	0.1.2.0.0.0	each	22-23
# ::node	0.1.2.0.0.1	bother-01	6-7
# ::node	0.1.2.0.0.1.0	still	5-6
# ::node	0.1.2.0.0.1.1	converse-01	11-12
# ::node	0.1.2.0.0.1.1.0	he	12-13
# ::node	0.1.2.0.0.1.1.1	telephone-01	10-11
# ::node	0.1.2.0.0.1.1.2	curious-41	9-10
# ::node	0.1.2.1	still	18-19
# ::root	0	plan-01
(p2 / plan-01 
      :ARG1-of (f / follow-02 
            :ARG0 (h2 / he 
                  :ARG0-of (s4 / see-01 
                        :ARG1 (r / reach-01 
                              :ARG0 (h / he) 
                              :ARG1 (p / place 
                                    :mod (s3 / specific)) 
                              :location (w / within) 
                              :prep-in (s / span-01 
                                    :ARG1 (t / time 
                                          :mod (s2 / specific)))) 
                        :ARG1-of (w2 / watch-01)))) 
      :ARG2-of (r2 / recall-02 
            :ARG0 (t3 / temporal-quantity 
                  :unit (m / minute)) 
            :ARG1 (s5 / segment) 
            :ARG1-of (t2 / try-01 
                  :purpose-of (a / approach-02 
                        :ARG1 (i / intersect-01 
                              :ARG1 (e / each) 
                              :ARG1-of (b / bother-01 
                                    :time (s7 / still) 
                                    :time (c / converse-01 
                                          :ARG0 (h3 / he) 
                                          :ARG1 (t4 / telephone-01) 
                                          :ARG1-of (c2 / curious-41))))) 
                  :time (s6 / still))))

# ::snt italian cuisine is so good we dont bother to comment but youll find some hints about catering in cannigione on page 45
# ::tok italian cuisine is so good we dont bother to comment but youll find some hints about catering in cannigione on page 45
# ::alignments 21-22|0.2.0.1 20-21|0.0 16-17|0.2.0.0.0.0 14-15|0.2.0.0.0 13-14|0.2.0.0.0.1 10-11|0 9-10|0.2.0 7-8|0.2 5-6|0.2.0.0 4-5|0.1 3-4|0.1.0 1-2|0.1.1 0-1|0.1.1.0.0.0+0.1.1.0.0+0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:12.596
# ::node	0	contrast-01	10-11
# ::node	0.0	page	20-21
# ::node	0.1	good	4-5
# ::node	0.1.0	so	3-4
# ::node	0.1.1	cuisine	1-2
# ::node	0.1.1.0	language	0-1
# ::node	0.1.1.0.0	name	0-1
# ::node	0.1.1.0.0.0	"Italian"	0-1
# ::node	0.2	bother-02	7-8
# ::node	0.2.0	comment-01	9-10
# ::node	0.2.0.0	we	5-6
# ::node	0.2.0.0.0	hint-01	14-15
# ::node	0.2.0.0.0.0	cater-01	16-17
# ::node	0.2.0.0.0.1	some	13-14
# ::node	0.2.0.1	45	21-22
# ::root	0	contrast-01
# ::edge	bother-02	ARG1	comment-01	0.2	0.2.0	
# ::edge	comment-01	ARG0	we	0.2.0	0.2.0.0	
# ::edge	comment-01	ARG1	45	0.2.0	0.2.0.1	
# ::edge	contrast-01	ARG0	page	0	0.0	
# ::edge	contrast-01	ARG1	good	0	0.1	
# ::edge	contrast-01	ARG2	bother-02	0	0.2	
# ::edge	cuisine	mod	language	0.1.1	0.1.1.0	
# ::edge	good	degree	so	0.1	0.1.0	
# ::edge	good	domain	cuisine	0.1	0.1.1	
# ::edge	hint-01	ARG0	we	0.2.0.0.0	0.2.0.0	
# ::edge	hint-01	ARG1	cater-01	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	hint-01	quant	some	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	language	name	name	0.1.1.0	0.1.1.0.0	
# ::edge	name	op1	"Italian"	0.1.1.0.0	0.1.1.0.0.0	
(c2 / contrast-01 
      :ARG0 (p / page) 
      :ARG1 (g / good 
            :degree (s2 / so) 
            :domain (c4 / cuisine 
                  :mod (l / language 
                        :name (n / name 
                              :op1 "Italian")))) 
      :ARG2 (b / bother-02 
            :ARG1 (c3 / comment-01 
                  :ARG0 (w / we 
                        :ARG0-of (h / hint-01 
                              :ARG1 (c / cater-01) 
                              :quant (s / some))) 
                  :ARG1 45)))

# ::snt they fought amongst themselves occasionally but i never saw them bother humans apart from butchers whose doorways they haunted
# ::tok they fought amongst themselves occasionally but i never saw them bother humans apart from butchers whose doorways they haunted
# ::alignments 17-18|0.0.1.0 12-13|0.0.1.2 11-12|0.0.1.1 10-11|0.0.1 8-9|0.0 6-7|0.0.0 5-6|0 4-5|0.1.2 2-3|0.1.1 1-2|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:12.851
# ::node	0	contrast-01	5-6
# ::node	0.0	see-01	8-9
# ::node	0.0.0	i	6-7
# ::node	0.0.1	bother-02	10-11
# ::node	0.0.1.0	they	17-18
# ::node	0.0.1.1	human	11-12
# ::node	0.0.1.2	apart	12-13
# ::node	0.1	fight-01	1-2
# ::node	0.1.0	they	0-1
# ::node	0.1.1	amongst	2-3
# ::node	0.1.2	occasional	4-5
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	they	0.0.1	0.0.1.0	
# ::edge	bother-02	ARG1	human	0.0.1	0.0.1.1	
# ::edge	bother-02	mod	apart	0.0.1	0.0.1.2	
# ::edge	contrast-01	ARG1	see-01	0	0.0	
# ::edge	fight-01	ARG0	they	0.1	0.1.0	
# ::edge	fight-01	ARG1	contrast-01	0.1	0	
# ::edge	fight-01	ARG2	amongst	0.1	0.1.1	
# ::edge	fight-01	manner	occasional	0.1	0.1.2	
# ::edge	see-01	ARG0	i	0.0	0.0.0	
# ::edge	see-01	ARG1	bother-02	0.0	0.0.1	
(c / contrast-01 
      :ARG1 (s / see-01 
            :ARG0 (i / i) 
            :ARG1 (b / bother-02 
                  :ARG0 (t / they) 
                  :ARG1 (h / human) 
                  :mod (a / apart))) 
      :ARG1-of (f / fight-01 
            :ARG0 (t2 / they) 
            :ARG2 (a2 / amongst) 
            :manner (o / occasional)))

# ::snt i cant remember it was so awful it seemed a lifetime why do you endlessly bother me why do you carp so
# ::tok i cant remember it was so awful it seemed a lifetime why do you endlessly bother me why do you carp so
# ::alignments 21-22|0.2 19-20|0.0.2.0.1 15-16|0.0.2.0 13-14|0.0.2.0.0 10-11|0.1 8-9|0 7-8|0.1.0 6-7|0.0 5-6|0.0.1 3-4|0.0.2 2-3|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:13.181
# ::node	0	seem-01	8-9
# ::node	0.0	awful	6-7
# ::node	0.0.0	remember-01	2-3
# ::node	0.0.0.0	i	0-1
# ::node	0.0.1	so	5-6
# ::node	0.0.2	it	3-4
# ::node	0.0.2.0	bother-02	15-16
# ::node	0.0.2.0.0	you	13-14
# ::node	0.0.2.0.1	you	19-20
# ::node	0.1	lifetime	10-11
# ::node	0.1.0	it	7-8
# ::node	0.2	so	21-22
# ::root	0	seem-01
# ::edge	awful	degree	so	0.0	0.0.1	
# ::edge	awful	domain	it	0.0	0.0.2	
# ::edge	bother-02	ARG0	it	0.0.2.0	0.0.2	
# ::edge	bother-02	ARG1	you	0.0.2.0	0.0.2.0.0	
# ::edge	bother-02	ARG2	you	0.0.2.0	0.0.2.0.1	
# ::edge	lifetime	domain	it	0.1	0.1.0	
# ::edge	remember-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	remember-01	ARG1	awful	0.0.0	0.0	
# ::edge	seem-01	ARG0	awful	0	0.0	
# ::edge	seem-01	ARG2	lifetime	0	0.1	
# ::edge	seem-01	mod	so	0	0.2	
(s2 / seem-01 
      :ARG0 (a / awful 
            :ARG1-of (r / remember-01 
                  :ARG0 (i3 / i)) 
            :degree (s3 / so) 
            :domain (i2 / it 
                  :ARG0-of (b / bother-02 
                        :ARG1 (y2 / you) 
                        :ARG2 (y / you)))) 
      :ARG2 (l / lifetime 
            :domain (i / it)) 
      :mod (s / so))

# ::snt once this woman from an agency stopped me in the street and offered me a job and i travelled to manchester to her agency but they said youd need to lose a few pounds and get rid of this spot and things like that and i thought i cant be bothered
# ::tok once this woman from an agency stopped me in the street and offered me a job and i travelled to manchester to her agency but they said youd need to lose a few pounds and get rid of this spot and things like that and i thought i cant be bothered
# ::alignments 50-51|0.1.2.0.0.0 47-48|0.1.2.0.1 46-47|0.1.2.0 45-46|0.1.2.0.0 44-45|0.1.2.0.2 41-42|0.1.1.1.1.0 40-41|0.1.1.1.1 39-40|0.1.1.1.0 38-39|0.1.1.1.1.0.0 36-37|0.1.1.1 34-35|0.1.1 32-33|0.0.2.1.0 30-31|0.1.1.0 28-29|0.1.1.0.1 26-27|0.1 25-26|0.1.1.0.0 24-25|0 23-24|0.0.1.1 20-21|0.0.1.0.0+0.0.1.0+0.0.1 18-19|0.0 17-18|0.0.0 16-17|0.1.2 15-16|0.1.0 12-13|0.0.2.1 11-12|0.0.2 10-11|0.0.2.0.1 6-7|0.0.2.0 5-6|0.0.2.0.0.1 2-3|0.0.2.0.0 1-2|0.0.2.0.0.0 0-1|0.0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:16.262
# ::node	0	contrast-01	24-25
# ::node	0.0	travel-01	18-19
# ::node	0.0.0	i	17-18
# ::node	0.0.1	city	20-21
# ::node	0.0.1.0	name	20-21
# ::node	0.0.1.0.0	"Manchester"	20-21
# ::node	0.0.1.1	agency	23-24
# ::node	0.0.2	and	11-12
# ::node	0.0.2.0	stop-01	6-7
# ::node	0.0.2.0.0	woman	2-3
# ::node	0.0.2.0.0.0	this	1-2
# ::node	0.0.2.0.0.1	agency	5-6
# ::node	0.0.2.0.1	street	10-11
# ::node	0.0.2.1	offer-01	12-13
# ::node	0.0.2.1.0	few	32-33
# ::node	0.0.3	once	0-1
# ::node	0.1	say-01	26-27
# ::node	0.1.0	job	15-16
# ::node	0.1.1	and	34-35
# ::node	0.1.1.0	lose-02	30-31
# ::node	0.1.1.0.0	they	25-26
# ::node	0.1.1.0.1	need-01	28-29
# ::node	0.1.1.1	rid-01	36-37
# ::node	0.1.1.1.0	spot	39-40
# ::node	0.1.1.1.1	and	40-41
# ::node	0.1.1.1.1.0	thing	41-42
# ::node	0.1.1.1.1.0.0	this	38-39
# ::node	0.1.2	and	16-17
# ::node	0.1.2.0	think-01	46-47
# ::node	0.1.2.0.0	i	45-46
# ::node	0.1.2.0.0.0	bother-01	50-51
# ::node	0.1.2.0.1	i	47-48
# ::node	0.1.2.0.2	and	44-45
# ::root	0	contrast-01
# ::edge	and	op1	lose-02	0.1.1	0.1.1.0	
# ::edge	and	op1	rid-01	0.1.1.1.1	0.1.1.1	
# ::edge	and	op1	say-01	0.1.2	0.1	
# ::edge	and	op1	stop-01	0.0.2	0.0.2.0	
# ::edge	and	op1	think-01	0.1.2.0.2	0.1.2.0	
# ::edge	and	op2	offer-01	0.0.2	0.0.2.1	
# ::edge	and	op2	rid-01	0.1.1	0.1.1.1	
# ::edge	and	op2	thing	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	and	op2	think-01	0.1.2	0.1.2.0	
# ::edge	bother-01	ARG1	i	0.1.2.0.0.0	0.1.2.0.0	
# ::edge	city	name	name	0.0.1	0.0.1.0	
# ::edge	city	purpose	agency	0.0.1	0.0.1.1	
# ::edge	contrast-01	ARG1	travel-01	0	0.0	
# ::edge	contrast-01	ARG2	say-01	0	0.1	
# ::edge	lose-02	ARG0	they	0.1.1.0	0.1.1.0.0	
# ::edge	name	op1	"Manchester"	0.0.1.0	0.0.1.0.0	
# ::edge	need-01	ARG1	lose-02	0.1.1.0.1	0.1.1.0	
# ::edge	offer-01	ARG1	few	0.0.2.1	0.0.2.1.0	
# ::edge	rid-01	ARG1	spot	0.1.1.1	0.1.1.1.0	
# ::edge	say-01	ARG0	job	0.1	0.1.0	
# ::edge	say-01	ARG1	and	0.1	0.1.1	
# ::edge	stop-01	ARG0	woman	0.0.2.0	0.0.2.0.0	
# ::edge	stop-01	ARG1	street	0.0.2.0	0.0.2.0.1	
# ::edge	thing	mod	this	0.1.1.1.1.0	0.1.1.1.1.0.0	
# ::edge	think-01	ARG0	i	0.1.2.0	0.1.2.0.0	
# ::edge	think-01	ARG2	i	0.1.2.0	0.1.2.0.1	
# ::edge	travel-01	ARG0	i	0.0	0.0.0	
# ::edge	travel-01	ARG1	city	0.0	0.0.1	
# ::edge	travel-01	condition	and	0.0	0.0.2	
# ::edge	travel-01	time	once	0.0	0.0.3	
# ::edge	woman	mod	this	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	woman	poss	agency	0.0.2.0.0	0.0.2.0.0.1	
(c / contrast-01 
      :ARG1 (t5 / travel-01 
            :ARG0 (i3 / i) 
            :ARG1 (c2 / city 
                  :name (n2 / name 
                        :op1 "Manchester") 
                  :purpose (a4 / agency)) 
            :condition (a6 / and 
                  :op1 (s4 / stop-01 
                        :ARG0 (w / woman 
                              :mod (t6 / this) 
                              :poss (a7 / agency)) 
                        :ARG1 (s3 / street)) 
                  :op2 (o / offer-01 
                        :ARG1 (f / few))) 
            :time (o2 / once)) 
      :ARG2 (s2 / say-01 
            :ARG0 (j / job) 
            :ARG1 (a3 / and 
                  :op1 (l / lose-02 
                        :ARG0 (t4 / they) 
                        :ARG1-of (n / need-01)) 
                  :op2 (r / rid-01 
                        :ARG1 (s / spot) 
                        :op-of (a2 / and 
                              :op1 (t2 / thing 
                                    :mod (t3 / this))))) 
            :op-of (a5 / and 
                  :op1 (t / think-01 
                        :ARG0 (i2 / i 
                              :ARG1-of (b / bother-01)) 
                        :ARG2 (i / i) 
                        :op-of (a / and)))))

# ::snt if it was they neednt have bothered
# ::tok if it was they neednt have bothered
# ::alignments 6-7|0 3-4|0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:16.269
# ::node	0	bother-01	6-7
# ::node	0.0	they	3-4
# ::node	0.1	it	1-2
# ::root	0	bother-01
# ::edge	bother-01	ARG0	they	0	0.0	
# ::edge	bother-01	ARG1	it	0	0.1	
(b / bother-01 
      :ARG0 (t / they) 
      :ARG1 (i / it))

# ::snt    i was objecting that whatever you thought of reagan the united states was the archetypal democracy mr healey was remarking how very few people bothered to vote there at all only one in five of the eligible voters having been enough to elect bush and then we arrived obliquely at the part played in politics by exhaustion
# ::tok i was objecting that whatever you thought of reagan the united states was the archetypal democracy mr healey was remarking how very few people bothered to vote there at all only one in five of the eligible voters having been enough to elect bush and then we arrived obliquely at the part played in politics by exhaustion
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:16.270
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt irate customers who bother to complain to their local water executives will be told the rises are no higher than were forecast
# ::tok irate customers who bother to complain to their local water executives will be told the rises are no higher than were forecast
# ::alignments 21-22|0.0.0.0.0 18-19|0.0.0.0.1 17-18|0.0.0.0.0.0 15-16|0.0.0.0 13-14|0.0.0 10-11|0.1.0.1+0.1.0 9-10|0.1.0.0 8-9|0.1.0.0.0 5-6|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:16.486
# ::node	0	bother-02	3-4
# ::node	0.0	customer	1-2
# ::node	0.0.0	tell-01	13-14
# ::node	0.0.0.0	rise-01	15-16
# ::node	0.0.0.0.0	forecast-01	21-22
# ::node	0.0.0.0.0.0	-	17-18
# ::node	0.0.0.0.1	high	18-19
# ::node	0.1	complain-01	5-6
# ::node	0.1.0	have-org-role-91	10-11
# ::node	0.1.0.0	water	9-10
# ::node	0.1.0.0.0	local	8-9
# ::node	0.1.0.1	executive	10-11
# ::root	0	bother-02
# ::edge	bother-02	ARG0	customer	0	0.0	
# ::edge	bother-02	ARG1	complain-01	0	0.1	
# ::edge	complain-01	ARG1	have-org-role-91	0.1	0.1.0	
# ::edge	forecast-01	ARG0	-	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	forecast-01	ARG1	rise-01	0.0.0.0.0	0.0.0.0	
# ::edge	have-org-role-91	ARG1	water	0.1.0	0.1.0.0	
# ::edge	have-org-role-91	ARG2	executive	0.1.0	0.1.0.1	
# ::edge	high	domain	rise-01	0.0.0.0.1	0.0.0.0	
# ::edge	rise-01	ARG2	tell-01	0.0.0.0	0.0.0	
# ::edge	tell-01	ARG1	customer	0.0.0	0.0	
# ::edge	water	mod	local	0.1.0.0	0.1.0.0.0	
(b / bother-02 
      :ARG0 (c2 / customer 
            :ARG1-of (t / tell-01 
                  :ARG2-of (r / rise-01 
                        :ARG1-of (f / forecast-01 
                              :ARG0 (- / -)) 
                        :domain-of (h / high)))) 
      :ARG1 (c / complain-01 
            :ARG1 (h2 / have-org-role-91 
                  :ARG1 (w / water 
                        :mod (l / local)) 
                  :ARG2 (e / executive))))

# ::snt why then did chinas leaders bother to be nice
# ::tok why then did chinas leaders bother to be nice
# ::alignments 8-9|0.1 5-6|0 4-5|0.0.0+0.0 1-2|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:16.543
# ::node	0	bother-02	5-6
# ::node	0.0	person	4-5
# ::node	0.0.0	lead-02	4-5
# ::node	0.1	nice-42	8-9
# ::node	0.2	then	1-2
# ::root	0	bother-02
# ::edge	bother-02	ARG0	person	0	0.0	
# ::edge	bother-02	ARG1	nice-42	0	0.1	
# ::edge	bother-02	ARG2	then	0	0.2	
# ::edge	lead-02	ARG0	person	0.0.0	0.0	
(b / bother-02 
      :ARG0 (p / person 
            :ARG0-of (l / lead-02)) 
      :ARG1 (n / nice-42) 
      :ARG2 (t / then))

# ::snt so what exactly is the point of trying to be allinclusive  vidal hasnt bothered to give this history any shape its just served up like a cold stew
# ::tok so what exactly is the point of trying to be allinclusive vidal hasnt bothered to give this history any shape its just served up like a cold stew
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:16.544
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt he then passes the shoes on to me claiming he cant be bothered to rethread the new laces
# ::tok he then passes the shoes on to me claiming he cant be bothered to rethread the new laces
# ::alignments 16-17|0.0.0.0 12-13|0.0.1 9-10|0.1 8-9|0 4-5|0.0.0 1-2|0.0.0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:16.571
# ::node	0	claim-01	8-9
# ::node	0.0	he	0-1
# ::node	0.0.0	shoe-01	4-5
# ::node	0.0.0.0	new	16-17
# ::node	0.0.0.1	then	1-2
# ::node	0.0.1	bother-01	12-13
# ::node	0.1	he	9-10
# ::root	0	claim-01
# ::edge	bother-01	ARG0	he	0.0.1	0.0	
# ::edge	claim-01	ARG0	he	0	0.0	
# ::edge	claim-01	ARG1	he	0	0.1	
# ::edge	shoe-01	ARG0	he	0.0.0	0.0	
# ::edge	shoe-01	ARG1	new	0.0.0	0.0.0.0	
# ::edge	shoe-01	time	then	0.0.0	0.0.0.1	
(c / claim-01 
      :ARG0 (h2 / he 
            :ARG0-of (s / shoe-01 
                  :ARG1 (n / new) 
                  :time (t / then)) 
            :ARG0-of (b / bother-01)) 
      :ARG1 (h / he))

# ::snt the tragic irony of chinas recent internal troubles did not escape him in the week that 2000 students in china were arrested or shot only 40 per cent of the british electorate bothered to turn out to vote in local elections he said
# ::tok the tragic irony of chinas recent internal troubles did not escape him in the week that 2000 students in china were arrested or shot only 40 per cent of the british electorate bothered to turn out to vote in local elections he said
# ::alignments 42-43|0 41-42|0.0 40-41|0.1 39-40|0.1.2 37-38|0.1.1 32-33|0.1.1.0.0 31-32|0.1.1.0 27-28|0.1.0.1.2.0.0+0.1.0.1.2.0 25-26|0.1.0.1.2.1.1 24-25|0.2 23-24|0.1.0.1.2.1 22-23|0.1.0.1.2 21-22|0.1.0.1 19-20|0.1.0.2.0.0+0.1.0.2.0+0.1.0.2 17-18|0.1.0.0+0.1.0 16-17|0.1.0.0.0.0+0.1.0.0.0 14-15|0.1.0.1.1.1 10-11|0.1.0.1.1 7-8|0.1.0.1.0 6-7|0.1.0.1.0.0 5-6|0.1.0.1.0.1 2-3|0.1.0.1.1.0 1-2|0.1.0.1.2.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:17.520
# ::node	0	say-01	42-43
# ::node	0.0	he	41-42
# ::node	0.1	elect-01	40-41
# ::node	0.1.0	person	17-18
# ::node	0.1.0.0	study-01	17-18
# ::node	0.1.0.0.0	date-entity	16-17
# ::node	0.1.0.0.0.0	2000	16-17
# ::node	0.1.0.1	arrest-01	21-22
# ::node	0.1.0.1.0	trouble	7-8
# ::node	0.1.0.1.0.0	internal	6-7
# ::node	0.1.0.1.0.1	recent	5-6
# ::node	0.1.0.1.1	escape-01	10-11
# ::node	0.1.0.1.1.0	irony	2-3
# ::node	0.1.0.1.1.1	week	14-15
# ::node	0.1.0.1.2	or	22-23
# ::node	0.1.0.1.2.0	monetary-quantity	27-28
# ::node	0.1.0.1.2.0.0	cent	27-28
# ::node	0.1.0.1.2.1	shoot-02	23-24
# ::node	0.1.0.1.2.1.0	tragic	1-2
# ::node	0.1.0.1.2.1.1	40	25-26
# ::node	0.1.0.2	country	19-20
# ::node	0.1.0.2.0	name	19-20
# ::node	0.1.0.2.0.0	"China"	19-20
# ::node	0.1.1	vote-01	37-38
# ::node	0.1.1.0	electorate	31-32
# ::node	0.1.1.0.0	bother-01	32-33
# ::node	0.1.2	local	39-40
# ::node	0.2	only	24-25
# ::root	0	say-01
# ::edge	arrest-01	ARG0	trouble	0.1.0.1	0.1.0.1.0	
# ::edge	arrest-01	ARG1	person	0.1.0.1	0.1.0	
# ::edge	bother-01	ARG1	electorate	0.1.1.0.0	0.1.1.0	
# ::edge	country	name	name	0.1.0.2	0.1.0.2.0	
# ::edge	date-entity	year	2000	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	elect-01	ARG1	person	0.1	0.1.0	
# ::edge	elect-01	mod	local	0.1	0.1.2	
# ::edge	escape-01	ARG0	irony	0.1.0.1.1	0.1.0.1.1.0	
# ::edge	escape-01	ARG1	arrest-01	0.1.0.1.1	0.1.0.1	
# ::edge	escape-01	time	week	0.1.0.1.1	0.1.0.1.1.1	
# ::edge	monetary-quantity	unit	cent	0.1.0.1.2.0	0.1.0.1.2.0.0	
# ::edge	name	op1	"China"	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	or	location	monetary-quantity	0.1.0.1.2	0.1.0.1.2.0	
# ::edge	or	op1	arrest-01	0.1.0.1.2	0.1.0.1	
# ::edge	or	op2	shoot-02	0.1.0.1.2	0.1.0.1.2.1	
# ::edge	person	location	country	0.1.0	0.1.0.2	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	elect-01	0	0.1	
# ::edge	say-01	manner	only	0	0.2	
# ::edge	shoot-02	ARG0	tragic	0.1.0.1.2.1	0.1.0.1.2.1.0	
# ::edge	shoot-02	ARG1	40	0.1.0.1.2.1	0.1.0.1.2.1.1	
# ::edge	study-01	ARG0	person	0.1.0.0	0.1.0	
# ::edge	study-01	time	date-entity	0.1.0.0	0.1.0.0.0	
# ::edge	trouble	mod	internal	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	trouble	time	recent	0.1.0.1.0	0.1.0.1.0.1	
# ::edge	vote-01	ARG0	electorate	0.1.1	0.1.1.0	
# ::edge	vote-01	ARG1	elect-01	0.1.1	0.1	
(s / say-01 
      :ARG0 (h / he) 
      :ARG1 (e / elect-01 
            :ARG1 (p / person 
                  :ARG0-of (s3 / study-01 
                        :time (d / date-entity 
                              :year 2000)) 
                  :ARG1-of (a / arrest-01 
                        :ARG0 (t / trouble 
                              :mod (i / internal) 
                              :time (r / recent)) 
                        :ARG1-of (e3 / escape-01 
                              :ARG0 (i2 / irony) 
                              :time (w / week)) 
                        :op-of (o2 / or 
                              :location (m / monetary-quantity 
                                    :unit (c / cent)) 
                              :op1 (s2 / shoot-02 
                                    :ARG0 (t2 / tragic) 
                                    :ARG1 40))) 
                  :location (c2 / country 
                        :name (n / name 
                              :op1 "China"))) 
            :ARG1-of (v / vote-01 
                  :ARG0 (e2 / electorate 
                        :ARG1-of (b / bother-01))) 
            :mod (l / local)) 
      :manner (o / only))

# ::snt   that fact didnt bother you before craig told him
# ::tok that fact didnt bother you before craig told him
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:17.521
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt now she was among the shops including the bistro where the man shouted at the customers and the art place where the pictures on display really made you wonder why the artist had bothered until you noticed the pricetags on them and reached the post office or rather the postofficecumstationerscumnewsagentscumtobacconistsconfectionersdelicatessencumvideolibrarycumfrom next weekdrycleaningestablishment it had progressively but swiftly turned into
# ::tok now she was among the shops including the bistro where the man shouted at the customers and the art place where the pictures on display really made you wonder why the artist had bothered until you noticed the pricetags on them and reached the post office or rather the postofficecumstationerscumnewsagentscumtobacconistsconfectionersdelicatessencumvideolibrarycumfrom next weekdrycleaningestablishment it had progressively but swiftly turned into
# ::alignments 56-57|0.1 55-56|0 54-55|0.0 52-53|0.2.0.0.0 50-51|0.3 46-47|0.2.1.0.0.0.0.1 45-46|0.2.1.0.0.0.0 44-45|0.2.1.0.0.0.0.0 42-43|0.2.1.0.0.0 41-42|0.2.1.0.0.0.1 36-37|0.2.1.0 35-36|0.2.1.0.0 34-35|0.2.1 33-34|0.2 28-29|0.2.0.0 27-28|0.2.0 25-26|0.2.1.0.1 24-25|0.2.0.1.1.0 22-23|0.2.0.1.1 19-20|0.2.0.1.2.1 18-19|0.2.0.1.2.1.0 16-17|0.2.0.1.2 15-16|0.2.0.1.2.0 12-13|0.2.0.1 11-12|0.2.0.1.0 5-6|0.2.0.1.1.0.1.1 3-4|0.2.0.1.1.0.1 1-2|0.2.0.1.1.0.1.0 0-1|0.2.0.1.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:18.644
# ::node	0	contrast-01	55-56
# ::node	0.0	progressive	54-55
# ::node	0.1	swift	56-57
# ::node	0.2	bother-01	33-34
# ::node	0.2.0	you	27-28
# ::node	0.2.0.0	wonder-01	28-29
# ::node	0.2.0.0.0	it	52-53
# ::node	0.2.0.1	shout-01	12-13
# ::node	0.2.0.1.0	man	11-12
# ::node	0.2.0.1.1	picture	22-23
# ::node	0.2.0.1.1.0	display-01	24-25
# ::node	0.2.0.1.1.0.0	now	0-1
# ::node	0.2.0.1.1.0.1	among	3-4
# ::node	0.2.0.1.1.0.1.0	she	1-2
# ::node	0.2.0.1.1.0.1.1	shop	5-6
# ::node	0.2.0.1.2	and	16-17
# ::node	0.2.0.1.2.0	customer	15-16
# ::node	0.2.0.1.2.1	place	19-20
# ::node	0.2.0.1.2.1.0	art	18-19
# ::node	0.2.1	until	34-35
# ::node	0.2.1.0	notice-01	36-37
# ::node	0.2.1.0.0	you	35-36
# ::node	0.2.1.0.0.0	reach-01	42-43
# ::node	0.2.1.0.0.0.0	office	45-46
# ::node	0.2.1.0.0.0.0.0	post	44-45
# ::node	0.2.1.0.0.0.0.1	or	46-47
# ::node	0.2.1.0.0.0.1	and	41-42
# ::node	0.2.1.0.1	really	25-26
# ::node	0.3	next	50-51
# ::root	0	contrast-01
# ::edge	among	domain	she	0.2.0.1.1.0.1	0.2.0.1.1.0.1.0	
# ::edge	among	op1	shop	0.2.0.1.1.0.1	0.2.0.1.1.0.1.1	
# ::edge	and	op1	customer	0.2.0.1.2	0.2.0.1.2.0	
# ::edge	and	op1	reach-01	0.2.1.0.0.0.1	0.2.1.0.0.0	
# ::edge	and	op2	place	0.2.0.1.2	0.2.0.1.2.1	
# ::edge	bother-01	ARG0	you	0.2	0.2.0	
# ::edge	bother-01	time	until	0.2	0.2.1	
# ::edge	contrast-01	ARG0	progressive	0	0.0	
# ::edge	contrast-01	ARG1	swift	0	0.1	
# ::edge	contrast-01	ARG2	bother-01	0	0.2	
# ::edge	display-01	ARG0	now	0.2.0.1.1.0	0.2.0.1.1.0.0	
# ::edge	display-01	ARG1	among	0.2.0.1.1.0	0.2.0.1.1.0.1	
# ::edge	next	op1	contrast-01	0.3	0	
# ::edge	notice-01	ARG0	you	0.2.1.0	0.2.1.0.0	
# ::edge	notice-01	ARG1	really	0.2.1.0	0.2.1.0.1	
# ::edge	office	mod	post	0.2.1.0.0.0.0	0.2.1.0.0.0.0.0	
# ::edge	or	op1	office	0.2.1.0.0.0.0.1	0.2.1.0.0.0.0	
# ::edge	picture	topic	display-01	0.2.0.1.1	0.2.0.1.1.0	
# ::edge	place	topic	art	0.2.0.1.2.1	0.2.0.1.2.1.0	
# ::edge	reach-01	ARG0	you	0.2.1.0.0.0	0.2.1.0.0	
# ::edge	reach-01	ARG1	office	0.2.1.0.0.0	0.2.1.0.0.0.0	
# ::edge	shout-01	ARG0	man	0.2.0.1	0.2.0.1.0	
# ::edge	shout-01	ARG1	picture	0.2.0.1	0.2.0.1.1	
# ::edge	shout-01	ARG2	you	0.2.0.1	0.2.0	
# ::edge	shout-01	prep-with	and	0.2.0.1	0.2.0.1.2	
# ::edge	until	op1	notice-01	0.2.1	0.2.1.0	
# ::edge	wonder-01	ARG0	you	0.2.0.0	0.2.0	
# ::edge	wonder-01	ARG1	it	0.2.0.0	0.2.0.0.0	
(c / contrast-01 
      :ARG0 (p / progressive) 
      :ARG1 (s / swift) 
      :ARG2 (b / bother-01 
            :ARG0 (y2 / you 
                  :ARG0-of (w / wonder-01 
                        :ARG1 (i / it)) 
                  :ARG2-of (s2 / shout-01 
                        :ARG0 (m / man) 
                        :ARG1 (p3 / picture 
                              :topic (d / display-01 
                                    :ARG0 (n3 / now) 
                                    :ARG1 (a4 / among 
                                          :domain (s4 / she) 
                                          :op1 (s3 / shop)))) 
                        :prep-with (a3 / and 
                              :op1 (c2 / customer) 
                              :op2 (p4 / place 
                                    :topic (a2 / art))))) 
            :time (u / until 
                  :op1 (n2 / notice-01 
                        :ARG0 (y / you 
                              :ARG0-of (r / reach-01 
                                    :ARG1 (o2 / office 
                                          :mod (p2 / post) 
                                          :op-of (o / or)) 
                                    :op-of (a / and))) 
                        :ARG1 (r2 / really)))) 
      :op-of (n / next))

# ::snt vic swings on to the motorway going northwest and for a few miles gives the jaguar its head moving smoothly up the outside lane at 9o keeping a watchful eye on the rearview mirror though the police rarely bother you in the rush hour they are as eager as anyone to keep the traffic flowing
# ::tok vic swings on to the motorway going northwest and for a few miles gives the jaguar its head moving smoothly up the outside lane at 9o keeping a watchful eye on the rearview mirror though the police rarely bother you in the rush hour they are as eager as anyone to keep the traffic flowing
# ::alignments 54-55|0.3.0 53-54|0.3.0.1 49-50|0.3 47-48|0 44-45|0.0 43-44|0.1.0+0.1 42-43|0.2 39-40|0.1.0.0.1 38-39|0.1.0.0 37-38|0.1.0.0.2 36-37|0.1.0.0.0 33-34|0.1.0.0.1.0 32-33|0.3.0.0 29-30|0.1.0.0.1.0.0.0.1 22-23|0.2.0 19-20|0.1.0.0.1.0.0.2 18-19|0.1.0.0.1.0.0 17-18|0.1.0.0.1.0.0.0 13-14|0.1.0.0.1.0.0.0.2 12-13|0.1.0.0.1.0.0.0.2.0.0+0.1.0.0.1.0.0.0.2.0 11-12|0.1.0.0.1.0.0.0.2.0.0.0 8-9|0.1.0.0.1.0.0.1 7-8|0.1.0.0.1.0.0.0.0 5-6|0.1.0.0.1.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:19.476
# ::node	0	eager-41	47-48
# ::node	0.0	they	44-45
# ::node	0.1	temporal-quantity	43-44
# ::node	0.1.0	hour	43-44
# ::node	0.1.0.0	bother-02	38-39
# ::node	0.1.0.0.0	police	36-37
# ::node	0.1.0.0.1	you	39-40
# ::node	0.1.0.0.1.0	mirror	33-34
# ::node	0.1.0.0.1.0.0	move-01	18-19
# ::node	0.1.0.0.1.0.0.0	head-01	17-18
# ::node	0.1.0.0.1.0.0.0.0	northwest	7-8
# ::node	0.1.0.0.1.0.0.0.0.0	motorway	5-6
# ::node	0.1.0.0.1.0.0.0.1	eye	29-30
# ::node	0.1.0.0.1.0.0.0.2	give-01	13-14
# ::node	0.1.0.0.1.0.0.0.2.0	distance-quantity	12-13
# ::node	0.1.0.0.1.0.0.0.2.0.0	mile	12-13
# ::node	0.1.0.0.1.0.0.0.2.0.0.0	few	11-12
# ::node	0.1.0.0.1.0.0.1	and	8-9
# ::node	0.1.0.0.1.0.0.2	smooth	19-20
# ::node	0.1.0.0.2	rare	37-38
# ::node	0.2	rush-01	42-43
# ::node	0.2.0	outside	22-23
# ::node	0.3	anyone	49-50
# ::node	0.3.0	flow-01	54-55
# ::node	0.3.0.0	rearview	32-33
# ::node	0.3.0.1	traffic	53-54
# ::root	0	eager-41
# ::edge	bother-02	ARG0	police	0.1.0.0	0.1.0.0.0	
# ::edge	bother-02	ARG1	you	0.1.0.0	0.1.0.0.1	
# ::edge	bother-02	frequency	rare	0.1.0.0	0.1.0.0.2	
# ::edge	bother-02	time	hour	0.1.0.0	0.1.0	
# ::edge	distance-quantity	unit	mile	0.1.0.0.1.0.0.0.2.0	0.1.0.0.1.0.0.0.2.0.0	
# ::edge	eager-41	ARG0	they	0	0.0	
# ::edge	eager-41	ARG1	temporal-quantity	0	0.1	
# ::edge	eager-41	ARG2	anyone	0	0.3	
# ::edge	flow-01	ARG0	rearview	0.3.0	0.3.0.0	
# ::edge	flow-01	ARG1	traffic	0.3.0	0.3.0.1	
# ::edge	flow-01	manner	anyone	0.3.0	0.3	
# ::edge	give-01	ARG0	distance-quantity	0.1.0.0.1.0.0.0.2	0.1.0.0.1.0.0.0.2.0	
# ::edge	give-01	ARG1	head-01	0.1.0.0.1.0.0.0.2	0.1.0.0.1.0.0.0	
# ::edge	head-01	ARG0	northwest	0.1.0.0.1.0.0.0	0.1.0.0.1.0.0.0.0	
# ::edge	head-01	ARG1	eye	0.1.0.0.1.0.0.0	0.1.0.0.1.0.0.0.1	
# ::edge	mile	quant	few	0.1.0.0.1.0.0.0.2.0.0	0.1.0.0.1.0.0.0.2.0.0.0	
# ::edge	mirror	poss	you	0.1.0.0.1.0	0.1.0.0.1	
# ::edge	move-01	ARG0	mirror	0.1.0.0.1.0.0	0.1.0.0.1.0	
# ::edge	move-01	ARG1	head-01	0.1.0.0.1.0.0	0.1.0.0.1.0.0.0	
# ::edge	move-01	ARG2	and	0.1.0.0.1.0.0	0.1.0.0.1.0.0.1	
# ::edge	move-01	direction	smooth	0.1.0.0.1.0.0	0.1.0.0.1.0.0.2	
# ::edge	northwest	mod	motorway	0.1.0.0.1.0.0.0.0	0.1.0.0.1.0.0.0.0.0	
# ::edge	rush-01	ARG0	outside	0.2	0.2.0	
# ::edge	rush-01	ARG1	eager-41	0.2	0	
# ::edge	temporal-quantity	unit	hour	0.1	0.1.0	
(e / eager-41 
      :ARG0 (t2 / they) 
      :ARG1 (t3 / temporal-quantity 
            :unit (h / hour 
                  :time-of (b / bother-02 
                        :ARG0 (p / police) 
                        :ARG1 (y / you 
                              :poss-of (m / mirror 
                                    :ARG0-of (m2 / move-01 
                                          :ARG1 (h2 / head-01 
                                                :ARG0 (n / northwest 
                                                      :mod (m4 / motorway)) 
                                                :ARG1 (e2 / eye) 
                                                :ARG1-of (g / give-01 
                                                      :ARG0 (d / distance-quantity 
                                                            :unit (m3 / mile 
                                                                  :quant (f2 / few))))) 
                                          :ARG2 (a2 / and) 
                                          :direction (s / smooth)))) 
                        :frequency (r2 / rare)))) 
      :ARG1-of (r / rush-01 
            :ARG0 (o / outside)) 
      :ARG2 (a / anyone 
            :manner-of (f / flow-01 
                  :ARG0 (r3 / rearview) 
                  :ARG1 (t / traffic))))

# ::snt with candidates put up by more than 80 political parties and dozens of associations local fire brigades teachers unions most voters could not be bothered to choose between one vague programme and another
# ::tok with candidates put up by more than 80 political parties and dozens of associations local fire brigades teachers unions most voters could not be bothered to choose between one vague programme and another
# ::alignments 32-33|0.1.0.1.1 31-32|0.1.0.1 30-31|0.1.0 29-30|0.1.0.0 27-28|0.1 26-27|0 24-25|0.0.1 21-22|0.0.1.1 20-21|0.0.0+0.0 19-20|0.0.2 18-19|0.0.0.0 17-18|0.0.0.0.0.0+0.0.0.0.0 14-15|0.0.0.0.0.0.0.0 13-14|0.0.0.0.0.0.0 10-11|0.1.0.1.0 9-10|0.1.0.1.0.0 8-9|0.1.0.1.0.0.0 7-8|0.1.0.1.0.0.1 1-2|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:20.178
# ::node	0	choose-01	26-27
# ::node	0.0	person	20-21
# ::node	0.0.0	vote-01	20-21
# ::node	0.0.0.0	union	18-19
# ::node	0.0.0.0.0	person	17-18
# ::node	0.0.0.0.0.0	teach-01	17-18
# ::node	0.0.0.0.0.0.0	association	13-14
# ::node	0.0.0.0.0.0.0.0	local	14-15
# ::node	0.0.1	bother-01	24-25
# ::node	0.0.1.0	candidate	1-2
# ::node	0.0.1.1	possible	21-22
# ::node	0.0.2	most	19-20
# ::node	0.1	between	27-28
# ::node	0.1.0	program	30-31
# ::node	0.1.0.0	vague	29-30
# ::node	0.1.0.1	and	31-32
# ::node	0.1.0.1.0	and	10-11
# ::node	0.1.0.1.0.0	party	9-10
# ::node	0.1.0.1.0.0.0	politics	8-9
# ::node	0.1.0.1.0.0.1	80	7-8
# ::node	0.1.0.1.1	another	32-33
# ::root	0	choose-01
# ::edge	and	op1	party	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	and	op1	program	0.1.0.1	0.1.0	
# ::edge	and	op2	and	0.1.0.1.0	0.1.0.1	
# ::edge	and	op2	another	0.1.0.1	0.1.0.1.1	
# ::edge	between	op1	program	0.1	0.1.0	
# ::edge	bother-01	ARG0	candidate	0.0.1	0.0.1.0	
# ::edge	bother-01	ARG1	person	0.0.1	0.0	
# ::edge	choose-01	ARG0	person	0	0.0	
# ::edge	choose-01	ARG1	between	0	0.1	
# ::edge	local	mod	association	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	party	mod	politics	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	party	quant	80	0.1.0.1.0.0	0.1.0.1.0.0.1	
# ::edge	person	quant	most	0.0	0.0.2	
# ::edge	possible	domain	bother-01	0.0.1.1	0.0.1	
# ::edge	program	mod	vague	0.1.0	0.1.0.0	
# ::edge	teach-01	ARG0	person	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	teach-01	ARG1	association	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	union	mod	person	0.0.0.0	0.0.0.0.0	
# ::edge	vote-01	ARG0	person	0.0.0	0.0	
# ::edge	vote-01	ARG1	union	0.0.0	0.0.0.0	
(c / choose-01 
      :ARG0 (p3 / person 
            :ARG0-of (v2 / vote-01 
                  :ARG1 (u / union 
                        :mod (p4 / person 
                              :ARG0-of (t / teach-01 
                                    :ARG1 (a3 / association 
                                          :mod-of (l / local)))))) 
            :ARG1-of (b2 / bother-01 
                  :ARG0 (c2 / candidate) 
                  :domain-of (p2 / possible)) 
            :quant (m / most)) 
      :ARG1 (b / between 
            :op1 (p / program 
                  :mod (v / vague) 
                  :op-of (a2 / and 
                        :op-of (a4 / and 
                              :op1 (p5 / party 
                                    :mod (p6 / politics) 
                                    :quant 80)) 
                        :op1 (a / another)))))

# ::snt when i was sacked from aachen no one bothered to tell me
# ::tok when i was sacked from aachen no one bothered to tell me
# ::alignments 10-11|0 8-9|0.0 6-7|0.0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:20.194
# ::node	0	tell-01	10-11
# ::node	0.0	bother-01	8-9
# ::node	0.0.0	-	6-7
# ::node	0.1	i	1-2
# ::root	0	tell-01
# ::edge	bother-01	ARG1	tell-01	0.0	0	
# ::edge	bother-01	time	-	0.0	0.0.0	
# ::edge	tell-01	ARG2	i	0	0.1	
(t / tell-01 
      :ARG1-of (b / bother-01 
            :time (- / -)) 
      :ARG2 (i / i))

# ::snt i wont bother you for long camb said gently
# ::tok i wont bother you for long camb said gently
# ::alignments 7-8|0.0.0 3-4|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:20.204
# ::node	0	bother-02	2-3
# ::node	0.0	i	0-1
# ::node	0.0.0	say-01	7-8
# ::node	0.1	you	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	you	0	0.1	
# ::edge	say-01	ARG0	i	0.0.0	0.0	
(b / bother-02 
      :ARG0 (i / i 
            :ARG0-of (s / say-01)) 
      :ARG1 (y / you))

# ::snt although they still dont bother about netsukes those elaborately carved ivory buttons so beloved of western collectors they display an obsessive interest in anything to do with the tea ceremony and are the major buyers of older japanese ceramics
# ::tok although they still dont bother about netsukes those elaborately carved ivory buttons so beloved of western collectors they display an obsessive interest in anything to do with the tea ceremony and are the major buyers of older japanese ceramics
# ::alignments 36-37|0.2.0.0.4 34-35|0.2.1.0+0.2.1 33-34|0.2.1.1 30-31|0.2 29-30|0.2.0 28-29|0.2.0.1 23-24|0.2.0.0.2 21-22|0.2.0.0 18-19|0.2.0.0.1 17-18|0.2.0.0.1.0 15-16|0.2.0.0.0.0.0+0.2.0.0.0.0+0.2.0.0.0 12-13|0.1 4-5|0 2-3|0.2.0.0.3 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:20.534
# ::node	0	bother-02	4-5
# ::node	0.0	they	1-2
# ::node	0.1	so	12-13
# ::node	0.2	and	30-31
# ::node	0.2.0	ceremony	29-30
# ::node	0.2.0.0	interest-01	21-22
# ::node	0.2.0.0.0	world-region	15-16
# ::node	0.2.0.0.0.0	name	15-16
# ::node	0.2.0.0.0.0.0	"West"	15-16
# ::node	0.2.0.0.1	display-01	18-19
# ::node	0.2.0.0.1.0	they	17-18
# ::node	0.2.0.0.2	anything	23-24
# ::node	0.2.0.0.3	still	2-3
# ::node	0.2.0.0.4	old	36-37
# ::node	0.2.0.1	tea	28-29
# ::node	0.2.1	person	34-35
# ::node	0.2.1.0	buy-01	34-35
# ::node	0.2.1.1	major	33-34
# ::root	0	bother-02
# ::edge	and	op1	bother-02	0.2	0	
# ::edge	and	op2	ceremony	0.2	0.2.0	
# ::edge	and	op3	person	0.2	0.2.1	
# ::edge	bother-02	ARG0	they	0	0.0	
# ::edge	bother-02	ARG1	so	0	0.1	
# ::edge	buy-01	ARG0	person	0.2.1.0	0.2.1	
# ::edge	ceremony	mod	tea	0.2.0	0.2.0.1	
# ::edge	display-01	ARG0	they	0.2.0.0.1	0.2.0.0.1.0	
# ::edge	display-01	ARG1	interest-01	0.2.0.0.1	0.2.0.0	
# ::edge	interest-01	ARG1	world-region	0.2.0.0	0.2.0.0.0	
# ::edge	interest-01	ARG2	anything	0.2.0.0	0.2.0.0.2	
# ::edge	interest-01	medium	ceremony	0.2.0.0	0.2.0	
# ::edge	name	op1	"West"	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	old	op1	interest-01	0.2.0.0.4	0.2.0.0	
# ::edge	person	mod	major	0.2.1	0.2.1.1	
# ::edge	still	op1	interest-01	0.2.0.0.3	0.2.0.0	
# ::edge	world-region	name	name	0.2.0.0.0	0.2.0.0.0.0	
(b2 / bother-02 
      :ARG0 (t3 / they) 
      :ARG1 (s / so) 
      :op-of (a / and 
            :op1 (c / ceremony 
                  :medium-of (i / interest-01 
                        :ARG1 (w / world-region 
                              :name (n / name 
                                    :op1 "West")) 
                        :ARG1-of (d / display-01 
                              :ARG0 (t2 / they)) 
                        :ARG2 (a2 / anything) 
                        :op-of (s2 / still) 
                        :op-of (o / old)) 
                  :mod (t / tea)) 
            :op2 (p / person 
                  :ARG0-of (b / buy-01) 
                  :mod (m / major))))

# ::snt we cant be bothered being anything but ourselves, anyone who can be bothered to see us will go away having watched a proper band
# ::tok we cant be bothered being anything but ourselves , anyone who can be bothered to see us will go away having watched a proper band
# ::alignments 24-25|0.1.0 23-24|0.1.0.1 21-22|0.1.0.0 19-20|0.1.0.0.0.0.0.0 15-16|0.1.0.0.0.0.0 13-14|0.1.0.0.0.0 11-12|0.1.0.0.0.0.1 9-10|0.1.0.0.0 6-7|0 5-6|0.0 3-4|0.1 0-1|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:20.920
# ::node	0	contrast-01	6-7
# ::node	0.0	anything	5-6
# ::node	0.1	bother-01	3-4
# ::node	0.1.0	band	24-25
# ::node	0.1.0.0	watch-01	21-22
# ::node	0.1.0.0.0	anyone	9-10
# ::node	0.1.0.0.0.0	bother-01	13-14
# ::node	0.1.0.0.0.0.0	see-01	15-16
# ::node	0.1.0.0.0.0.0.0	away	19-20
# ::node	0.1.0.0.0.0.1	possible	11-12
# ::node	0.1.0.1	proper	23-24
# ::node	0.1.1	we	0-1
# ::root	0	contrast-01
# ::edge	band	mod	proper	0.1.0	0.1.0.1	
# ::edge	bother-01	ARG0	anyone	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	bother-01	ARG0	band	0.1	0.1.0	
# ::edge	bother-01	ARG1	see-01	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	bother-01	ARG1	we	0.1	0.1.1	
# ::edge	bother-01	ARG2	contrast-01	0.1	0	
# ::edge	contrast-01	ARG1	anything	0	0.0	
# ::edge	possible	domain	bother-01	0.1.0.0.0.0.1	0.1.0.0.0.0	
# ::edge	see-01	ARG1	away	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	watch-01	ARG0	anyone	0.1.0.0	0.1.0.0.0	
# ::edge	watch-01	ARG1	band	0.1.0.0	0.1.0	
(c / contrast-01 
      :ARG1 (a3 / anything) 
      :ARG2-of (b3 / bother-01 
            :ARG0 (b / band 
                  :ARG1-of (w / watch-01 
                        :ARG0 (a2 / anyone 
                              :ARG0-of (b2 / bother-01 
                                    :ARG1 (s / see-01 
                                          :ARG1 (a / away)) 
                                    :domain-of (p2 / possible)))) 
                  :mod (p / proper)) 
            :ARG1 (w2 / we)))

# ::snt they are interested if they have the right politics but the others dont bother
# ::tok they are interested if they have the right politics but the others dont bother
# ::alignments 13-14|0.1 11-12|0.0.0 9-10|0 8-9|0.1.1 4-5|0.1.0 2-3|0.0 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:21.024
# ::node	0	contrast-01	9-10
# ::node	0.0	interest-01	2-3
# ::node	0.0.0	other	11-12
# ::node	0.0.1	they	0-1
# ::node	0.1	bother-02	13-14
# ::node	0.1.0	they	4-5
# ::node	0.1.1	politics	8-9
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	they	0.1	0.1.0	
# ::edge	bother-02	ARG1	politics	0.1	0.1.1	
# ::edge	contrast-01	ARG1	interest-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	interest-01	ARG0	other	0.0	0.0.0	
# ::edge	interest-01	ARG1	they	0.0	0.0.1	
(c / contrast-01 
      :ARG1 (i / interest-01 
            :ARG0 (o / other) 
            :ARG1 (t2 / they)) 
      :ARG2 (b / bother-02 
            :ARG0 (t / they) 
            :ARG1 (p / politics)))

# ::snt the last quality is interesting because it has sometimes been suggested that his musicmaking lacks humour one of those generalizing statements that typically posits a judgement without bothering to examine the evidence
# ::tok the last quality is interesting because it has sometimes been suggested that his musicmaking lacks humour one of those generalizing statements that typically posits a judgement without bothering to examine the evidence
# ::alignments 31-32|0.1.0.0.0.0 29-30|0.1.0.0.0 27-28|0.1.0.0 25-26|0.1.0 22-23|0.0 20-21|0+0.1 15-16|0.1.0.0.0.0.0.1.0 14-15|0.1.0.0.0.0.0.1 10-11|0.1.0.0.0.0.0 8-9|0.1.0.0.0.0.0.2 6-7|0.1.0.0.0.0.0.1.0.0 5-6|0.1.0.0.0.0.0.0 4-5|0.1.0.0.0.0.0.0.0 2-3|0.1.0.0.0.0.0.0.0.0 1-2|0.1.0.0.0.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:21.428
# ::node	0	state-01	20-21
# ::node	0.0	typical	22-23
# ::node	0.1	thing	20-21
# ::node	0.1.0	judge-01	25-26
# ::node	0.1.0.0	bother-01	27-28
# ::node	0.1.0.0.0	examine-01	29-30
# ::node	0.1.0.0.0.0	evidence-01	31-32
# ::node	0.1.0.0.0.0.0	suggest-01	10-11
# ::node	0.1.0.0.0.0.0.0	cause-01	5-6
# ::node	0.1.0.0.0.0.0.0.0	interesting	4-5
# ::node	0.1.0.0.0.0.0.0.0.0	quality	2-3
# ::node	0.1.0.0.0.0.0.0.0.0.0	last	1-2
# ::node	0.1.0.0.0.0.0.1	lack-01	14-15
# ::node	0.1.0.0.0.0.0.1.0	humour	15-16
# ::node	0.1.0.0.0.0.0.1.0.0	it	6-7
# ::node	0.1.0.0.0.0.0.2	sometimes	8-9
# ::root	0	state-01
# ::edge	bother-01	ARG1	examine-01	0.1.0.0	0.1.0.0.0	
# ::edge	cause-01	ARG0	suggest-01	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	cause-01	ARG1	interesting	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0	
# ::edge	evidence-01	ARG1	suggest-01	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	examine-01	ARG1	evidence-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	humour	poss	it	0.1.0.0.0.0.0.1.0	0.1.0.0.0.0.0.1.0.0	
# ::edge	interesting	domain	quality	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.0	
# ::edge	judge-01	ARG0	thing	0.1.0	0.1	
# ::edge	judge-01	ARG1	bother-01	0.1.0	0.1.0.0	
# ::edge	lack-01	ARG1	humour	0.1.0.0.0.0.0.1	0.1.0.0.0.0.0.1.0	
# ::edge	quality	mod	last	0.1.0.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.0.0	
# ::edge	state-01	ARG0	typical	0	0.0	
# ::edge	state-01	ARG1	thing	0	0.1	
# ::edge	suggest-01	ARG1	lack-01	0.1.0.0.0.0.0	0.1.0.0.0.0.0.1	
# ::edge	suggest-01	frequency	sometimes	0.1.0.0.0.0.0	0.1.0.0.0.0.0.2	
(s / state-01 
      :ARG0 (t / typical) 
      :ARG1 (t2 / thing 
            :ARG0-of (j / judge-01 
                  :ARG1 (b / bother-01 
                        :ARG1 (e2 / examine-01 
                              :ARG1 (e / evidence-01 
                                    :ARG1 (s2 / suggest-01 
                                          :ARG0-of (c / cause-01 
                                                :ARG1 (i2 / interesting 
                                                      :domain (q / quality 
                                                            :mod (l2 / last)))) 
                                          :ARG1 (l / lack-01 
                                                :ARG1 (h / humour 
                                                      :poss (i / it))) 
                                          :frequency (s3 / sometimes))))))))

# ::snt the evening departure of the latter usually took place with unashamed punctuality it would be an easy matter for toby about whose activities at that hour nobody would be bothering instead of putting the tractor away to drive it into the wood near the old barn
# ::tok the evening departure of the latter usually took place with unashamed punctuality it would be an easy matter for toby about whose activities at that hour nobody would be bothering instead of putting the tractor away to drive it into the wood near the old barn
# ::alignments 44-45|0.5.1 42-43|0.5.2.0 41-42|0.5.2 38-39|0.5.0 37-38|0.5 35-36|0.2 34-35|0.1 32-33|0 30-31|0.4 29-30|0.3 26-27|0.3.0 25-26|0.3.0.0.1+0.3.0.0 22-23|0.3.1 17-18|0.0 16-17|0.0.1 12-13|0.0.0 8-9|0.3.2 6-7|0.3.3 5-6|0.3.0.0.0.1 2-3|0.3.0.0.0 1-2|0.3.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:21.957
# ::node	0	put-01	32-33
# ::node	0.0	matter	17-18
# ::node	0.0.0	it	12-13
# ::node	0.0.1	easy	16-17
# ::node	0.1	tractor	34-35
# ::node	0.2	away	35-36
# ::node	0.3	bother-01	29-30
# ::node	0.3.0	nobody	26-27
# ::node	0.3.0.0	temporal-quantity	25-26
# ::node	0.3.0.0.0	depart-01	2-3
# ::node	0.3.0.0.0.0	evening	1-2
# ::node	0.3.0.0.0.1	latter	5-6
# ::node	0.3.0.0.1	hour	25-26
# ::node	0.3.1	activity	22-23
# ::node	0.3.2	place	8-9
# ::node	0.3.3	usual	6-7
# ::node	0.4	instead	30-31
# ::node	0.5	drive-01	37-38
# ::node	0.5.0	it	38-39
# ::node	0.5.1	old	44-45
# ::node	0.5.2	wood	41-42
# ::node	0.5.2.0	near	42-43
# ::root	0	put-01
# ::edge	bother-01	ARG0	nobody	0.3	0.3.0	
# ::edge	bother-01	ARG1	activity	0.3	0.3.1	
# ::edge	bother-01	ARG2	put-01	0.3	0	
# ::edge	depart-01	ARG0	evening	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	depart-01	ARG1	latter	0.3.0.0.0	0.3.0.0.0.1	
# ::edge	drive-01	ARG1	it	0.5	0.5.0	
# ::edge	drive-01	ARG4	old	0.5	0.5.1	
# ::edge	drive-01	instrument	wood	0.5	0.5.2	
# ::edge	matter	domain	it	0.0	0.0.0	
# ::edge	matter	mod	easy	0.0	0.0.1	
# ::edge	nobody	duration	temporal-quantity	0.3.0	0.3.0.0	
# ::edge	place	op1	bother-01	0.3.2	0.3	
# ::edge	put-01	ARG0	matter	0	0.0	
# ::edge	put-01	ARG1	tractor	0	0.1	
# ::edge	put-01	ARG2	away	0	0.2	
# ::edge	put-01	mod	instead	0	0.4	
# ::edge	put-01	purpose	drive-01	0	0.5	
# ::edge	temporal-quantity	op1	depart-01	0.3.0.0	0.3.0.0.0	
# ::edge	temporal-quantity	unit	hour	0.3.0.0	0.3.0.0.1	
# ::edge	usual	op1	bother-01	0.3.3	0.3	
# ::edge	wood	location	near	0.5.2	0.5.2.0	
(p / put-01 
      :ARG0 (m / matter 
            :domain (i3 / it) 
            :mod (e / easy)) 
      :ARG1 (t / tractor) 
      :ARG2 (a / away) 
      :ARG2-of (b / bother-01 
            :ARG0 (n2 / nobody 
                  :duration (t2 / temporal-quantity 
                        :op1 (d2 / depart-01 
                              :ARG0 (e2 / evening) 
                              :ARG1 (l / latter)) 
                        :unit (h / hour))) 
            :ARG1 (a2 / activity) 
            :op-of (p2 / place) 
            :op-of (u / usual)) 
      :mod (i2 / instead) 
      :purpose (d / drive-01 
            :ARG1 (i / it) 
            :ARG4 (o / old) 
            :instrument (w / wood 
                  :location (n / near))))

# ::snt many people made jokes but few bothered to fill up their home emergency kits
# ::tok many people made jokes but few bothered to fill up their home emergency kits
# ::alignments 13-14|0.1.1.1 12-13|0.1.1.1.0 11-12|0.1.1.1.1 8-9|0.1.1 6-7|0.1 5-6|0.1.1.0 4-5|0 3-4|0.0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:22.060
# ::node	0	contrast-01	4-5
# ::node	0.0	joke-01	3-4
# ::node	0.1	bother-01	6-7
# ::node	0.1.0	many	0-1
# ::node	0.1.1	fill-02	8-9
# ::node	0.1.1.0	few	5-6
# ::node	0.1.1.1	kit	13-14
# ::node	0.1.1.1.0	emergency	12-13
# ::node	0.1.1.1.1	home	11-12
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	many	0.1	0.1.0	
# ::edge	bother-01	ARG1	fill-02	0.1	0.1.1	
# ::edge	contrast-01	ARG1	joke-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.1	
# ::edge	fill-02	ARG0	few	0.1.1	0.1.1.0	
# ::edge	fill-02	ARG1	kit	0.1.1	0.1.1.1	
# ::edge	kit	mod	emergency	0.1.1.1	0.1.1.1.0	
# ::edge	kit	mod	home	0.1.1.1	0.1.1.1.1	
(c / contrast-01 
      :ARG1 (j / joke-01) 
      :ARG2 (b / bother-01 
            :ARG0 (m / many) 
            :ARG1 (f / fill-02 
                  :ARG0 (f2 / few) 
                  :ARG1 (k / kit 
                        :mod (e / emergency) 
                        :mod (h / home)))))

# ::snt brian smith the exwallaby making his irish debut at standoff has the kicking capacity to accumulate points in the unlikely event of the all blacks discipline falling down and his tactical kicking will bother john gallagher if the new zealand fullback is as uncertain as he was against munster last saturday
# ::tok brian smith the exwallaby making his irish debut at standoff has the kicking capacity to accumulate points in the unlikely event of the all blacks discipline falling down and his tactical kicking will bother john gallagher if the new zealand fullback is as uncertain as he was against munster last saturday
# ::alignments 50-51|0.0.2.1.1.1.1 49-50|0.0.2.1.0.0 45-46|0.0.2.1.1.0.0 43-44|0.0.2.1.1.1 40-41|0.0.2.1.1.1.0 38-40|0.0.2.1.1.1.0.0.0.0+0.0.2.1.1.1.0.0.0.1+0.0.2.1.1.1.0.0.0+0.0.2.1.1.1.0.0 33-34|0.0.2.1.1 31-32|0.0.2.1.1.0 30-31|0.0.2.1.1.0.1 28-29|0.0.2.1 27-28|0.0.2.1.0.2 26-27|0.0.2.1.0 25-26|0.0.2.1.0.1 24-25|0.0.2.1.0.1.0.0+0.0.2.1.0.1.0 23-24|0.0.2.1.0.1.1 20-21|0.0.1 19-20|0.0.1.0.0+0.0.1.0 16-17|0.0.0 15-16|0.0 13-14|0.0.2 12-13|0.0.2.0 9-10|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:22.745
# ::node	0	standoff	9-10
# ::node	0.0	accumulate-01	15-16
# ::node	0.0.0	point	16-17
# ::node	0.0.1	event	20-21
# ::node	0.0.1.0	likely	19-20
# ::node	0.0.1.0.0	-	19-20
# ::node	0.0.2	capacity	13-14
# ::node	0.0.2.0	kick-01	12-13
# ::node	0.0.2.1	and	28-29
# ::node	0.0.2.1.0	fall-01	26-27
# ::node	0.0.2.1.0.0	last	49-50
# ::node	0.0.2.1.0.1	discipline	25-26
# ::node	0.0.2.1.0.1.0	person	24-25
# ::node	0.0.2.1.0.1.0.0	black	24-25
# ::node	0.0.2.1.0.1.1	all	23-24
# ::node	0.0.2.1.0.2	down	27-28
# ::node	0.0.2.1.1	bother-02	33-34
# ::node	0.0.2.1.1.0	kick-01	31-32
# ::node	0.0.2.1.1.0.0	he	45-46
# ::node	0.0.2.1.1.0.1	tactic	30-31
# ::node	0.0.2.1.1.1	certain	43-44
# ::node	0.0.2.1.1.1.0	fullback	40-41
# ::node	0.0.2.1.1.1.0.0	country	38-40
# ::node	0.0.2.1.1.1.0.0.0	name	38-40
# ::node	0.0.2.1.1.1.0.0.0.0	"zealand"	38-40
# ::node	0.0.2.1.1.1.0.0.0.1	"new"	38-40
# ::node	0.0.2.1.1.1.1	saturday	50-51
# ::root	0	standoff
(s2 / standoff 
      :ARG0-of (a3 / accumulate-01 
            :ARG1 (p2 / point) 
            :ARG2 (e / event 
                  :domain-of (l2 / likely 
                        :polarity -)) 
            :purpose-of (c3 / capacity 
                  :mod (k2 / kick-01) 
                  :op-of (a / and 
                        :op1 (f2 / fall-01 
                              :ARG0 (l / last) 
                              :ARG1 (d2 / discipline 
                                    :mod (p / person 
                                          :mod (b2 / black)) 
                                    :quant (a2 / all)) 
                              :direction (d / down)) 
                        :op2 (b / bother-02 
                              :ARG0 (k / kick-01 
                                    :ARG1 (h / he) 
                                    :mod (t / tactic)) 
                              :ARG1 (c / certain 
                                    :domain (f / fullback 
                                          :mod (c2 / country 
                                                :name (n / name 
                                                      :op1 "zealand" 
                                                      :op2 "new"))) 
                                    :time (s / saturday)))))))

# ::snt   if the response is oh no its alright dont bother dash
# ::tok if the response is oh no its alright dont bother dash
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:22.746
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt shed done it before you mean  well shed been late a good many times and sometimes she didnt bother to come in after a late night
# ::tok shed done it before you mean well shed been late a good many times and sometimes she didnt bother to come in after a late night
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:22.747
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt president gorbachevas far as im concerned ive got nothing to apologise for nothing to explain and no future in politics so no reason to bother unless there is some financial benefit to me and my family
# ::tok president gorbachevas far as im concerned ive got nothing to apologise for nothing to explain and no future in politics so no reason to bother unless there is some financial benefit to me and my family
# ::alignments 35-36|0.0.0 33-34|0.0 30-31|0 29-30|0.2 28-29|0.3 24-25|0.1 22-23|0.1.0 21-22|0.1.0.0 20-21|0.1.1 19-20|0.1.1.0.1 17-18|0.1.1.0 16-17|0.1.1.0.0 15-16|0.0.0.0.0.0.1 14-15|0.0.0.0.0 12-13|0.0.0.0.0.0.1.1 10-11|0.0.0.0.0.0 8-9|0.0.0.0.0.0.0 5-6|0.0.0.0.0.0.1.0 2-3|0.0.0.0.0.0.1.0.0 0-1|0.0.0.0.1+0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.168
# ::node	0	benefit-01	30-31
# ::node	0.0	and	33-34
# ::node	0.0.0	family	35-36
# ::node	0.0.0.0	have-org-role-91	0-1
# ::node	0.0.0.0.0	explain-01	14-15
# ::node	0.0.0.0.0.0	apologize-01	10-11
# ::node	0.0.0.0.0.0.0	nothing	8-9
# ::node	0.0.0.0.0.0.1	and	15-16
# ::node	0.0.0.0.0.0.1.0	concern-01	5-6
# ::node	0.0.0.0.0.0.1.0.0	far	2-3
# ::node	0.0.0.0.0.0.1.1	nothing	12-13
# ::node	0.0.0.0.1	president	0-1
# ::node	0.1	bother-02	24-25
# ::node	0.1.0	reason	22-23
# ::node	0.1.0.0	-	21-22
# ::node	0.1.1	so	20-21
# ::node	0.1.1.0	future	17-18
# ::node	0.1.1.0.0	-	16-17
# ::node	0.1.1.0.1	politics	19-20
# ::node	0.2	finance	29-30
# ::node	0.3	some	28-29
# ::root	0	benefit-01
# ::edge	and	op1	family	0.0	0.0.0	
# ::edge	apologize-01	ARG0	nothing	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	apologize-01	ARG1	and	0.0.0.0.0.0	0.0.0.0.0.0.1	
# ::edge	apologize-01	ARG2	explain-01	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	benefit-01	ARG0	and	0	0.0	
# ::edge	benefit-01	mod	finance	0	0.2	
# ::edge	benefit-01	mod	some	0	0.3	
# ::edge	bother-02	ARG0	reason	0.1	0.1.0	
# ::edge	bother-02	ARG1	benefit-01	0.1	0	
# ::edge	bother-02	mod	so	0.1	0.1.1	
# ::edge	concern-01	ARG0	and	0.0.0.0.0.0.1.0	0.0.0.0.0.0.1	
# ::edge	concern-01	ARG1	far	0.0.0.0.0.0.1.0	0.0.0.0.0.0.1.0.0	
# ::edge	explain-01	ARG0	have-org-role-91	0.0.0.0.0	0.0.0.0	
# ::edge	future	polarity	-	0.1.1.0	0.1.1.0.0	
# ::edge	future	poss	politics	0.1.1.0	0.1.1.0.1	
# ::edge	future	time	so	0.1.1.0	0.1.1	
# ::edge	have-org-role-91	ARG1	family	0.0.0.0	0.0.0	
# ::edge	have-org-role-91	ARG2	president	0.0.0.0	0.0.0.0.1	
# ::edge	nothing	purpose	and	0.0.0.0.0.0.1.1	0.0.0.0.0.0.1	
# ::edge	reason	polarity	-	0.1.0	0.1.0.0	
(b / benefit-01 
      :ARG0 (a / and 
            :op1 (f / family 
                  :ARG1-of (h / have-org-role-91 
                        :ARG0-of (e / explain-01 
                              :ARG2-of (a3 / apologize-01 
                                    :ARG0 (n2 / nothing) 
                                    :ARG1 (a2 / and 
                                          :ARG0-of (c / concern-01 
                                                :ARG1 (f4 / far)) 
                                          :purpose-of (n / nothing)))) 
                        :ARG2 (p2 / president)))) 
      :ARG1-of (b2 / bother-02 
            :ARG0 (r / reason 
                  :polarity (- / -)) 
            :mod (s2 / so 
                  :time-of (f3 / future 
                        :polarity (-2 / -) 
                        :poss (p / politics)))) 
      :mod (f2 / finance) 
      :mod (s / some))

# ::snt perhaps ellip  but whatever the reason whether it was that everyone had been so busy reassuring everyone that no one had bothered to talk to the crematorium whether they had got the time wrong or whether the vicar had simply had a brainstorm he now you could tell was dimly aware that he had not given an exemplary performance
# ::tok perhaps ellip but whatever the reason whether it was that everyone had been so busy reassuring everyone that no one had bothered to talk to the crematorium whether they had got the time wrong or whether the vicar had simply had a brainstorm he now you could tell was dimly aware that he had not given an exemplary performance
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.169
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt it got dark pretty soon after but i didnt bother to move
# ::tok it got dark pretty soon after but i didnt bother to move
# ::alignments 9-10|0.0 7-8|0.0.0 6-7|0 5-6|0.0.1 4-5|0.0.1.0 3-4|0.0.1.0.0 2-3|0.0.1.1 0-1|0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.193
# ::node	0	contrast-01	6-7
# ::node	0.0	bother-02	9-10
# ::node	0.0.0	i	7-8
# ::node	0.0.1	after	5-6
# ::node	0.0.1.0	soon	4-5
# ::node	0.0.1.0.0	pretty	3-4
# ::node	0.0.1.1	dark	2-3
# ::node	0.0.1.1.0	it	0-1
# ::root	0	contrast-01
# ::edge	after	mod	soon	0.0.1	0.0.1.0	
# ::edge	after	op1	bother-02	0.0.1	0.0	
# ::edge	bother-02	ARG0	i	0.0	0.0.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.0	
# ::edge	dark	domain	it	0.0.1.1	0.0.1.1.0	
# ::edge	dark	time	after	0.0.1.1	0.0.1	
# ::edge	soon	mod	pretty	0.0.1.0	0.0.1.0.0	
(c / contrast-01 
      :ARG1 (b / bother-02 
            :ARG0 (i / i) 
            :op-of (a / after 
                  :mod (s / soon 
                        :mod (p / pretty)) 
                  :time-of (d / dark 
                        :domain (i2 / it)))))

# ::snt i try to be a bit middleoftheroad saying yes im not particularly bothered about how i look
# ::tok i try to be a bit middleoftheroad saying yes im not particularly bothered about how i look
# ::alignments 15-16|0.1.0 12-13|0.1 11-12|0.1.1 8-9|0.1.2 7-8|0 5-6|0.0 1-2|0.2 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.296
# ::node	0	say-01	7-8
# ::node	0.0	bit	5-6
# ::node	0.1	bother-01	12-13
# ::node	0.1.0	i	15-16
# ::node	0.1.1	particular	11-12
# ::node	0.1.2	yes	8-9
# ::node	0.2	try-01	1-2
# ::node	0.2.0	i	0-1
# ::root	0	say-01
# ::edge	bother-01	ARG1	i	0.1	0.1.0	
# ::edge	bother-01	degree	particular	0.1	0.1.1	
# ::edge	bother-01	time	yes	0.1	0.1.2	
# ::edge	say-01	ARG0	bit	0	0.0	
# ::edge	say-01	ARG1	bother-01	0	0.1	
# ::edge	try-01	ARG0	i	0.2	0.2.0	
# ::edge	try-01	ARG1	say-01	0.2	0	
(s / say-01 
      :ARG0 (b2 / bit) 
      :ARG1 (b / bother-01 
            :ARG1 (i / i) 
            :degree (p / particular) 
            :time (y / yes)) 
      :ARG1-of (t / try-01 
            :ARG0 (i2 / i)))

# ::snt need not bother hughes
# ::tok need not bother hughes
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.300
# ::node	0	bother-02	2-3
# ::node	0.0	need-01	0-1
# ::root	0	bother-02
(b / bother-02 
      :ARG1-of (n / need-01))

# ::snt it never bothered to ask listeners what they wanted to hear
# ::tok it never bothered to ask listeners what they wanted to hear
# ::alignments 10-11|0 8-9|0.0.0 7-8|0.0 4-5|0.0.0.0 2-3|0.0.0.0.1 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.337
# ::node	0	hear-01	10-11
# ::node	0.0	they	7-8
# ::node	0.0.0	want-01	8-9
# ::node	0.0.0.0	ask-01	4-5
# ::node	0.0.0.0.0	it	0-1
# ::node	0.0.0.0.1	bother-01	2-3
# ::root	0	hear-01
# ::edge	ask-01	ARG0	it	0.0.0.0	0.0.0.0.0	
# ::edge	ask-01	ARG1	want-01	0.0.0.0	0.0.0	
# ::edge	bother-01	ARG1	ask-01	0.0.0.0.1	0.0.0.0	
# ::edge	hear-01	ARG0	they	0	0.0	
# ::edge	want-01	ARG0	they	0.0.0	0.0	
(h / hear-01 
      :ARG0 (t / they 
            :ARG0-of (w / want-01 
                  :ARG1-of (a / ask-01 
                        :ARG0 (i / it) 
                        :ARG1-of (b / bother-01)))))

# ::snt i am too hot to bother with them
# ::tok i am too hot to bother with them
# ::alignments 5-6|0.1 3-4|0 2-3|0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.346
# ::node	0	hot	3-4
# ::node	0.0	too	2-3
# ::node	0.1	bother-02	5-6
# ::node	0.2	i	0-1
# ::root	0	hot
# ::edge	hot	degree	too	0	0.0	
# ::edge	hot	domain	bother-02	0	0.1	
# ::edge	hot	domain	i	0	0.2	
(h / hot 
      :degree (t / too) 
      :domain (b / bother-02) 
      :domain (i / i))

# ::snt that was a wonderful thing about noel and made him so unlike paul he never bothered about little things such as ones coming to lunch with him and then suddenly deciding to go away
# ::tok that was a wonderful thing about noel and made him so unlike paul he never bothered about little things such as ones coming to lunch with him and then suddenly deciding to go away
# ::alignments 33-34|0.0.1 30-31|0.0 29-30|0.0.3 28-29|0.0.5 27-28|0 24-25|0.0.2 21-22|0.0.0.0.0.0 19-20|0.0.0.0.0.2 18-19|0.0.0.0.0 17-18|0.0.0.0.0.1 15-16|0.0.0.0 13-14|0.0.0 10-11|0.0.0.0.1 7-8|0.0.4 4-5|0.0.4.0 3-4|0.0.4.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.566
# ::node	0	and	27-28
# ::node	0.0	decide-01	30-31
# ::node	0.0.0	he	13-14
# ::node	0.0.0.0	bother-01	15-16
# ::node	0.0.0.0.0	thing	18-19
# ::node	0.0.0.0.0.0	one	21-22
# ::node	0.0.0.0.0.1	little	17-18
# ::node	0.0.0.0.0.2	such	19-20
# ::node	0.0.0.0.1	so	10-11
# ::node	0.0.1	away	33-34
# ::node	0.0.2	lunch-01	24-25
# ::node	0.0.3	sudden	29-30
# ::node	0.0.4	and	7-8
# ::node	0.0.4.0	thing	4-5
# ::node	0.0.4.0.0	wonderful	3-4
# ::node	0.0.5	then	28-29
# ::root	0	and
# ::edge	and	op1	decide-01	0	0.0	
# ::edge	and	op1	thing	0.0.4	0.0.4.0	
# ::edge	and	op2	decide-01	0.0.4	0.0	
# ::edge	bother-01	ARG0	he	0.0.0.0	0.0.0	
# ::edge	bother-01	ARG1	thing	0.0.0.0	0.0.0.0.0	
# ::edge	bother-01	mod	so	0.0.0.0	0.0.0.0.1	
# ::edge	decide-01	ARG0	he	0.0	0.0.0	
# ::edge	decide-01	ARG1	away	0.0	0.0.1	
# ::edge	decide-01	ARG2	lunch-01	0.0	0.0.2	
# ::edge	decide-01	manner	sudden	0.0	0.0.3	
# ::edge	decide-01	time	then	0.0	0.0.5	
# ::edge	such	mod	thing	0.0.0.0.0.2	0.0.0.0.0	
# ::edge	thing	example	one	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	thing	mod	little	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	thing	mod	wonderful	0.0.4.0	0.0.4.0.0	
(a2 / and 
      :op1 (d / decide-01 
            :ARG0 (h / he 
                  :ARG0-of (b / bother-01 
                        :ARG1 (t2 / thing 
                              :example (o / one) 
                              :mod (l2 / little) 
                              :mod-of (s2 / such)) 
                        :mod (s3 / so))) 
            :ARG1 (a / away) 
            :ARG2 (l / lunch-01) 
            :manner (s / sudden) 
            :op-of (a3 / and 
                  :op1 (t3 / thing 
                        :mod (w / wonderful))) 
            :time (t / then)))

# ::snt i wont bother with the tits and sparrows this time said peter
# ::tok i wont bother with the tits and sparrows this time said peter
# ::alignments 10-11|0.1.0 9-10|0.1.0.0 8-9|0.1.0.0.0 6-7|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.599
# ::node	0	bother-02	2-3
# ::node	0.0	i	0-1
# ::node	0.1	and	6-7
# ::node	0.1.0	say-01	10-11
# ::node	0.1.0.0	time	9-10
# ::node	0.1.0.0.0	this	8-9
# ::root	0	bother-02
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	and	0	0.1	
# ::edge	say-01	ARG0	time	0.1.0	0.1.0.0	
# ::edge	say-01	ARG1	and	0.1.0	0.1	
# ::edge	time	mod	this	0.1.0.0	0.1.0.0.0	
(b / bother-02 
      :ARG0 (i / i) 
      :ARG1 (a / and 
            :ARG1-of (s / say-01 
                  :ARG0 (t / time 
                        :mod (t2 / this)))))

# ::snt i wouldnt be surprised if i was one of very few who said they were either not bothered with how they look or happy
# ::tok i wouldnt be surprised if i was one of very few who said they were either not bothered with how they look or happy
# ::alignments 23-24|0.0.0.1.0 22-23|0.0.0.1 20-21|0.1.0 17-18|0.1 15-16|0.1.2 13-14|0.1.1 12-13|0 10-11|0.2 9-10|0.2.0 5-6|0.0 3-4|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.841
# ::node	0	say-01	12-13
# ::node	0.0	i	5-6
# ::node	0.0.0	surprise-01	3-4
# ::node	0.0.0.0	i	0-1
# ::node	0.0.0.1	or	22-23
# ::node	0.0.0.1.0	happy	23-24
# ::node	0.1	bother-01	17-18
# ::node	0.1.0	they	20-21
# ::node	0.1.1	they	13-14
# ::node	0.1.2	either	15-16
# ::node	0.2	few	10-11
# ::node	0.2.0	very	9-10
# ::root	0	say-01
# ::edge	bother-01	ARG0	they	0.1	0.1.0	
# ::edge	bother-01	ARG1	they	0.1	0.1.1	
# ::edge	bother-01	mod	either	0.1	0.1.2	
# ::edge	few	degree	very	0.2	0.2.0	
# ::edge	or	op1	surprise-01	0.0.0.1	0.0.0	
# ::edge	or	op2	happy	0.0.0.1	0.0.0.1.0	
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	bother-01	0	0.1	
# ::edge	say-01	mod	few	0	0.2	
# ::edge	surprise-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	surprise-01	ARG1	i	0.0.0	0.0	
(s / say-01 
      :ARG0 (i / i 
            :ARG1-of (s2 / surprise-01 
                  :ARG0 (i2 / i) 
                  :op-of (o / or 
                        :op1 (h / happy)))) 
      :ARG1 (b / bother-01 
            :ARG0 (t / they) 
            :ARG1 (t2 / they) 
            :mod (e / either)) 
      :mod (f / few 
            :degree (v / very)))

# ::snt and those who make it are hardly bothered by the remoter political consequences
# ::tok and those who make it are hardly bothered by the remoter political consequences
# ::alignments 12-13|0.2 11-12|0.2.0 7-8|0 6-7|0.3 4-5|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.861
# ::node	0	bother-01	7-8
# ::node	0.0	and	0-1
# ::node	0.1	it	4-5
# ::node	0.2	consequence	12-13
# ::node	0.2.0	politics	11-12
# ::node	0.3	hardly	6-7
# ::root	0	bother-01
# ::edge	bother-01	ARG0	and	0	0.0	
# ::edge	bother-01	ARG1	it	0	0.1	
# ::edge	bother-01	ARG2	consequence	0	0.2	
# ::edge	bother-01	mod	hardly	0	0.3	
# ::edge	consequence	mod	politics	0.2	0.2.0	
(b / bother-01 
      :ARG0 (a / and) 
      :ARG1 (i / it) 
      :ARG2 (c / consequence 
            :mod (p / politics)) 
      :mod (h / hardly))

# ::snt was the weather bothering him
# ::tok was the weather bothering him
# ::alignments 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.865
# ::node	0	bother-01	3-4
# ::node	0.0	weather	2-3
# ::root	0	bother-01
# ::edge	bother-01	ARG1	weather	0	0.0	
(b / bother-01 
      :ARG1 (w / weather))

# ::snt who can blame  them when most traditional methods of weight control fail in  the long term  others seeing what so many people put  themselves through in the quest for slimness just decide  not to bother
# ::tok who can blame them when most traditional methods of weight control fail in the long term others seeing what so many people put themselves through in the quest for slimness just decide not to bother
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.866
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt however that statement is not what bothered the erratic fanatic
# ::tok however that statement is not what bothered the erratic fanatic
# ::alignments 9-10|0.0.0 8-9|0.0.0.0 6-7|0.0 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.877
# ::node	0	state-01	2-3
# ::node	0.0	bother-01	6-7
# ::node	0.0.0	fanatic	9-10
# ::node	0.0.0.0	erratic	8-9
# ::root	0	state-01
# ::edge	bother-01	ARG1	fanatic	0.0	0.0.0	
# ::edge	fanatic	mod	erratic	0.0.0	0.0.0.0	
# ::edge	state-01	ARG1	bother-01	0	0.0	
(s / state-01 
      :ARG1 (b / bother-01 
            :ARG1 (f / fanatic 
                  :mod (e / erratic))))

# ::snt she didnt bother tapping on the door but pushed it open and straightaway saw that her sister wasnt in the room
# ::tok she didnt bother tapping on the door but pushed it open and straightaway saw that her sister wasnt in the room
# ::alignments 20-21|0.0 16-17|0.1.0.2.0+0.1.0.2 13-14|0.1.0.0 11-12|0.1.0.0.0 9-10|0.1.1 8-9|0.1 7-8|0 6-7|0.1.1.0 2-3|0.1.0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.927
# ::node	0	contrast-01	7-8
# ::node	0.0	room	20-21
# ::node	0.1	push-01	8-9
# ::node	0.1.0	she	0-1
# ::node	0.1.0.0	see-01	13-14
# ::node	0.1.0.0.0	and	11-12
# ::node	0.1.0.1	bother-02	2-3
# ::node	0.1.0.2	have-rel-role-91	16-17
# ::node	0.1.0.2.0	sister	16-17
# ::node	0.1.1	it	9-10
# ::node	0.1.1.0	door	6-7
# ::root	0	contrast-01
# ::edge	and	op1	see-01	0.1.0.0.0	0.1.0.0	
# ::edge	bother-02	ARG0	she	0.1.0.1	0.1.0	
# ::edge	contrast-01	ARG1	room	0	0.0	
# ::edge	contrast-01	ARG2	push-01	0	0.1	
# ::edge	have-rel-role-91	ARG1	she	0.1.0.2	0.1.0	
# ::edge	have-rel-role-91	ARG2	sister	0.1.0.2	0.1.0.2.0	
# ::edge	it	part	door	0.1.1	0.1.1.0	
# ::edge	push-01	ARG0	she	0.1	0.1.0	
# ::edge	push-01	ARG1	it	0.1	0.1.1	
# ::edge	see-01	ARG0	she	0.1.0.0	0.1.0	
(c / contrast-01 
      :ARG1 (r / room) 
      :ARG2 (p / push-01 
            :ARG0 (s3 / she 
                  :ARG0-of (s2 / see-01 
                        :op-of (a / and)) 
                  :ARG0-of (b / bother-02) 
                  :ARG1-of (h / have-rel-role-91 
                        :ARG2 (s / sister))) 
            :ARG1 (i / it 
                  :part (d / door))))

# ::snt   a special school said bernard who hadnt yet bothered to say hello
# ::tok a special school said bernard who hadnt yet bothered to say hello
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.927
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt why bother
# ::tok why bother
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:23.929
# ::node	0	bother-02	1-2
# ::root	0	bother-02
(b / bother-02)

# ::snt unbeatable among the less educated urban classes so he has not even bothered to plan any speeches or rallies
# ::tok unbeatable among the less educated urban classes so he has not even bothered to plan any speeches or rallies
# ::alignments 18-19|0 17-18|0.0 16-17|0.0.1.0.1 15-16|0.0.0 14-15|0.0.1.0 12-13|0.0.1 8-9|0.0.1.0.0 7-8|0.0.1.1 6-7|0.0.1.1.0 5-6|0.0.1.1.0.1 4-5|0.0.1.1.0.0 3-4|0.0.1.1.0.0.0 1-2|0.0.1.1.0.2 0-1|0.0.1.1.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:24.482
# ::node	0	rally-01	18-19
# ::node	0.0	or	17-18
# ::node	0.0.0	any	15-16
# ::node	0.0.1	bother-01	12-13
# ::node	0.0.1.0	plan-01	14-15
# ::node	0.0.1.0.0	he	8-9
# ::node	0.0.1.0.1	speech	16-17
# ::node	0.0.1.1	so	7-8
# ::node	0.0.1.1.0	class	6-7
# ::node	0.0.1.1.0.0	educate-01	4-5
# ::node	0.0.1.1.0.0.0	less	3-4
# ::node	0.0.1.1.0.1	urban	5-6
# ::node	0.0.1.1.0.2	among	1-2
# ::node	0.0.1.1.0.2.0	beat-03	0-1
# ::root	0	rally-01
(r / rally-01 
      :op-of (o / or 
            :mod (a / any) 
            :op1 (b / bother-01 
                  :ARG1 (p / plan-01 
                        :ARG0 (h / he) 
                        :ARG1 (s / speech)) 
                  :mod (s2 / so 
                        :quant (c / class 
                              :ARG1-of (e / educate-01 
                                    :degree (l / less)) 
                              :mod (u / urban) 
                              :op-of (a2 / among 
                                    :ARG1-of (b2 / beat-03)))))))

# ::snt gower did not always bother to fictionalize knowing that he could later sift out the true events he did not want and substitute others more in keeping with the story line
# ::tok gower did not always bother to fictionalize knowing that he could later sift out the true events he did not want and substitute others more in keeping with the story line
# ::alignments 30-31|0.0.0 29-30|0.0 23-24|0.1.0.0.0.0.0.0 22-23|0.1.0.0.0.0.0 21-22|0.1.0.0.0.1 20-21|0.1.0.0.0 17-18|0.1.0.0.0.0 16-17|0.1.0.0 15-16|0.1.0.0.1 11-12|0.1.1.0 10-11|0.1.1 9-10|0.1.0 7-8|0.1 4-5|0 3-4|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:25.036
# ::node	0	bother-02	4-5
# ::node	0.0	story	29-30
# ::node	0.0.0	line	30-31
# ::node	0.1	know-01	7-8
# ::node	0.1.0	he	9-10
# ::node	0.1.0.0	event	16-17
# ::node	0.1.0.0.0	want-01	20-21
# ::node	0.1.0.0.0.0	he	17-18
# ::node	0.1.0.0.0.0.0	substitute-01	22-23
# ::node	0.1.0.0.0.0.0.0	other	23-24
# ::node	0.1.0.0.0.1	and	21-22
# ::node	0.1.0.0.1	true	15-16
# ::node	0.1.1	possible	10-11
# ::node	0.1.1.0	late	11-12
# ::node	0.2	always	3-4
# ::root	0	bother-02
# ::edge	and	op1	want-01	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	bother-02	ARG1	story	0	0.0	
# ::edge	bother-02	ARG2	know-01	0	0.1	
# ::edge	bother-02	time	always	0	0.2	
# ::edge	event	mod	true	0.1.0.0	0.1.0.0.1	
# ::edge	event	poss	he	0.1.0.0	0.1.0	
# ::edge	know-01	ARG0	he	0.1	0.1.0	
# ::edge	know-01	ARG1	possible	0.1	0.1.1	
# ::edge	line	mod	story	0.0.0	0.0	
# ::edge	possible	mod	late	0.1.1	0.1.1.0	
# ::edge	substitute-01	ARG0	he	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	substitute-01	ARG1	other	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	want-01	ARG0	he	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	want-01	ARG1	event	0.1.0.0.0	0.1.0.0	
(b / bother-02 
      :ARG1 (s / story 
            :mod-of (l / line)) 
      :ARG2 (k / know-01 
            :ARG0 (h2 / he 
                  :poss-of (e / event 
                        :ARG1-of (w / want-01 
                              :ARG0 (h / he 
                                    :ARG0-of (s2 / substitute-01 
                                          :ARG1 (o / other))) 
                              :op-of (a / and)) 
                        :mod (t / true))) 
            :ARG1 (p / possible 
                  :mod (l2 / late))) 
      :time (a2 / always))

# ::snt while one woman may tolerate the nail varnish she may hate the shaved legs another may be less bothered by this than by the possibility of neighbours seeing him when he goes out dressed
# ::tok while one woman may tolerate the nail varnish she may hate the shaved legs another may be less bothered by this than by the possibility of neighbours seeing him when he goes out dressed
# ::alignments 33-34|0.1.0.0.0 30-31|0.1.0.0 27-28|0.1.0 26-27|0.1 24-25|0 20-21|0.1.0.0.0.0 18-19|0.0 17-18|0.0.2 15-16|0.0.3.0+0.0.3 14-15|0.0.1 13-14|0.0.0 12-13|0.0.0.1 10-11|0.0.0.0 9-10|0.0.0.0.1.0+0.0.0.0.1 8-9|0.0.0.0.0 6-7|0.0.0.0.2 4-5|0.0.0.0.0.0 3-4|0.0.0.0.0.0.1.0+0.0.0.0.0.0.1 2-3|0.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:25.549
# ::node	0	possible	24-25
# ::node	0.0	bother-01	18-19
# ::node	0.0.0	leg	13-14
# ::node	0.0.0.0	hate-01	10-11
# ::node	0.0.0.0.0	she	8-9
# ::node	0.0.0.0.0.0	tolerate-01	4-5
# ::node	0.0.0.0.0.0.0	woman	2-3
# ::node	0.0.0.0.0.0.1	date-entity	3-4
# ::node	0.0.0.0.0.0.1.0	5	3-4
# ::node	0.0.0.0.1	date-entity	9-10
# ::node	0.0.0.0.1.0	5	9-10
# ::node	0.0.0.0.2	nail	6-7
# ::node	0.0.0.1	shave-01	12-13
# ::node	0.0.1	another	14-15
# ::node	0.0.2	less	17-18
# ::node	0.0.3	date-entity	15-16
# ::node	0.0.3.0	5	15-16
# ::node	0.1	neighbour	26-27
# ::node	0.1.0	see-01	27-28
# ::node	0.1.0.0	he	30-31
# ::node	0.1.0.0.0	dress-01	33-34
# ::node	0.1.0.0.0.0	this	20-21
# ::root	0	possible
# ::edge	bother-01	ARG0	leg	0.0	0.0.0	
# ::edge	bother-01	ARG1	another	0.0	0.0.1	
# ::edge	bother-01	ARG2	possible	0.0	0	
# ::edge	bother-01	degree	less	0.0	0.0.2	
# ::edge	date-entity	domain	bother-01	0.0.3	0.0	
# ::edge	date-entity	domain	hate-01	0.0.0.0.1	0.0.0.0	
# ::edge	date-entity	month	5	0.0.0.0.0.0.1	0.0.0.0.0.0.1.0	
# ::edge	date-entity	month	5	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	date-entity	month	5	0.0.3	0.0.3.0	
# ::edge	dress-01	ARG0	he	0.1.0.0.0	0.1.0.0	
# ::edge	dress-01	ARG1	this	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	hate-01	ARG0	she	0.0.0.0	0.0.0.0.0	
# ::edge	hate-01	ARG1	leg	0.0.0.0	0.0.0	
# ::edge	hate-01	time	nail	0.0.0.0	0.0.0.0.2	
# ::edge	possible	domain	neighbour	0	0.1	
# ::edge	see-01	ARG0	he	0.1.0	0.1.0.0	
# ::edge	see-01	ARG1	neighbour	0.1.0	0.1	
# ::edge	shave-01	ARG1	leg	0.0.0.1	0.0.0	
# ::edge	tolerate-01	ARG1	woman	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	tolerate-01	ARG2	she	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	tolerate-01	mod	date-entity	0.0.0.0.0.0	0.0.0.0.0.0.1	
(p / possible 
      :ARG2-of (b / bother-01 
            :ARG0 (l2 / leg 
                  :ARG1-of (h2 / hate-01 
                        :ARG0 (s3 / she 
                              :ARG2-of (t2 / tolerate-01 
                                    :ARG1 (w / woman) 
                                    :mod (d4 / date-entity 
                                          :month 5))) 
                        :domain-of (d3 / date-entity 
                              :month 5) 
                        :time (n2 / nail)) 
                  :ARG1-of (s2 / shave-01)) 
            :ARG1 (a / another) 
            :degree (l / less) 
            :domain-of (d2 / date-entity 
                  :month 5)) 
      :domain (n / neighbour 
            :ARG1-of (s / see-01 
                  :ARG0 (h / he 
                        :ARG0-of (d / dress-01 
                              :ARG1 (t / this))))))

# ::snt about then she started feeling rather disgusted with what was going on and also bothered by the lights which were going on and off very fast now and the stereo going full blast
# ::tok about then she started feeling rather disgusted with what was going on and also bothered by the lights which were going on and off very fast now and the stereo going full blast
# ::alignments 32-33|0.1.0.0 31-32|0.1.0.0.0 27-28|0.1.2.0 26-27|0.1.2.0.0.1 25-26|0.1.2.0.0 24-25|0.1.2.0.0.0 23-24|0.0 22-23|0 17-18|0.1.1.0.0.0 14-15|0.1.1.0.0 13-14|0.1.1.0.0.1 12-13|0.1.1.0 6-7|0.1.1 4-5|0.1 3-4|0.1.2 2-3|0.1.0 1-2|0.1.2.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:25.849
# ::node	0	and	22-23
# ::node	0.0	off	23-24
# ::node	0.1	feel-01	4-5
# ::node	0.1.0	she	2-3
# ::node	0.1.0.0	blast-05	32-33
# ::node	0.1.0.0.0	full	31-32
# ::node	0.1.1	disgust-01	6-7
# ::node	0.1.1.0	and	12-13
# ::node	0.1.1.0.0	bother-01	14-15
# ::node	0.1.1.0.0.0	light	17-18
# ::node	0.1.1.0.0.1	also	13-14
# ::node	0.1.2	start-01	3-4
# ::node	0.1.2.0	and	27-28
# ::node	0.1.2.0.0	fast	25-26
# ::node	0.1.2.0.0.0	very	24-25
# ::node	0.1.2.0.0.1	now	26-27
# ::node	0.1.2.1	then	1-2
# ::root	0	and
# ::edge	and	op1	disgust-01	0.1.1.0	0.1.1	
# ::edge	and	op1	fast	0.1.2.0	0.1.2.0.0	
# ::edge	and	op1	feel-01	0	0.1	
# ::edge	and	op2	bother-01	0.1.1.0	0.1.1.0.0	
# ::edge	blast-05	ARG1	she	0.1.0.0	0.1.0	
# ::edge	blast-05	degree	full	0.1.0.0	0.1.0.0.0	
# ::edge	bother-01	ARG1	light	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	bother-01	mod	also	0.1.1.0.0	0.1.1.0.0.1	
# ::edge	fast	degree	very	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	fast	op1	now	0.1.2.0.0	0.1.2.0.0.1	
# ::edge	feel-01	ARG0	she	0.1	0.1.0	
# ::edge	feel-01	ARG1	disgust-01	0.1	0.1.1	
# ::edge	off	mod	and	0.0	0	
# ::edge	start-01	ARG0	and	0.1.2	0.1.2.0	
# ::edge	start-01	ARG1	feel-01	0.1.2	0.1	
# ::edge	start-01	time	then	0.1.2	0.1.2.1	
(a2 / and 
      :mod-of (o / off) 
      :op1 (f3 / feel-01 
            :ARG0 (s2 / she 
                  :ARG1-of (b / blast-05 
                        :degree (f / full))) 
            :ARG1 (d / disgust-01 
                  :op-of (a4 / and 
                        :op1 (b2 / bother-01 
                              :ARG1 (l / light) 
                              :mod (a3 / also)))) 
            :ARG1-of (s / start-01 
                  :ARG0 (a / and 
                        :op1 (f2 / fast 
                              :degree (v / very) 
                              :op1 (n / now))) 
                  :time (t / then))))

# ::snt from the moment that la pietras anchor was safely biting again watch those mooring chains a superb air of idleness overtook everyone on board so much so that no one could be bothered to put up the awning and we lay and baked in the sweltering afternoon heat
# ::tok from the moment that la pietras anchor was safely biting again watch those mooring chains a superb air of idleness overtook everyone on board so much so that no one could be bothered to put up the awning and we lay and baked in the sweltering afternoon heat
# ::alignments 47-48|0.0.1.1 46-47|0.0.1.1.0 41-42|0.0.1.2 40-41|0.0.1 39-40|0.0.1.0 38-39|0.0 32-33|0.0.0 30-31|0 28-29|0.0.0.1 26-27|0.0.1.2.0.3.0.0 25-26|0.0.1.2.0.3.0 24-25|0.0.1.2.0.3 21-22|0.0.1.2.0.0.0 17-18|0.0.1.2.0.0 11-12|0.0.1.2.0 10-11|0.0.1.2.0.2 8-9|0.0.1.2.0.1 4-5|0.0.0.0 2-3|0.0.1.2.0.4 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:26.209
# ::node	0	possible	30-31
# ::node	0.0	and	38-39
# ::node	0.0.0	bother-01	32-33
# ::node	0.0.0.0	"la"	4-5
# ::node	0.0.0.1	-	28-29
# ::node	0.0.1	lay-01	40-41
# ::node	0.0.1.0	we	39-40
# ::node	0.0.1.1	heat	47-48
# ::node	0.0.1.1.0	afternoon	46-47
# ::node	0.0.1.2	and	41-42
# ::node	0.0.1.2.0	watch-01	11-12
# ::node	0.0.1.2.0.0	air	17-18
# ::node	0.0.1.2.0.0.0	everyone	21-22
# ::node	0.0.1.2.0.1	safe-41	8-9
# ::node	0.0.1.2.0.2	again	10-11
# ::node	0.0.1.2.0.3	so	24-25
# ::node	0.0.1.2.0.3.0	much	25-26
# ::node	0.0.1.2.0.3.0.0	so	26-27
# ::node	0.0.1.2.0.4	moment	2-3
# ::root	0	possible
(p / possible 
      :op-of (a3 / and 
            :op1 (b / bother-01 
                  :ARG1 "la" 
                  :polarity (- / -)) 
            :op2 (l / lay-01 
                  :ARG0 (w / we) 
                  :ARG1 (h / heat 
                        :mod (a / afternoon)) 
                  :op-of (a2 / and 
                        :ARG0-of (w2 / watch-01 
                              :ARG1 (a4 / air 
                                    :poss (e / everyone)) 
                              :manner (s3 / safe-41) 
                              :manner (a5 / again) 
                              :mod (s2 / so 
                                    :degree-of (m / much 
                                          :degree (s / so))) 
                              :time (m2 / moment))))))

# ::snt so why bother with the religious forms
# ::tok so why bother with the religious forms
# ::alignments 6-7|0.0 2-3|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:26.219
# ::node	0	bother-02	2-3
# ::node	0.0	form	6-7
# ::node	0.1	so	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG0	form	0	0.0	
# ::edge	bother-02	ARG1	so	0	0.1	
(b / bother-02 
      :ARG0 (f / form) 
      :ARG1 (s / so))

# ::snt one was that the second half of his talk proved far more enlightening than the first bergmans clothes are a feminine mirror of bogarts and so on the other was that mckee never bothered to mention the name of casablancas writers
# ::tok one was that the second half of his talk proved far more enlightening than the first bergmans clothes are a feminine mirror of bogarts and so on the other was that mckee never bothered to mention the name of casablancas writers
# ::alignments 40-41|0.0.0.1.1.0+0.0.0.1.1 35-36|0.0.0.1 33-34|0.0.0 28-29|0.0.0.1.0 25-26|0.0.1.0.0 24-25|0 21-22|0.1.0 17-18|0.1 10-11|0.0.0.0 9-10|0.0.1.0 8-9|0.0 5-6|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:26.564
# ::node	0	and	24-25
# ::node	0.0	talk-01	8-9
# ::node	0.0.0	bother-01	33-34
# ::node	0.0.0.0	far	10-11
# ::node	0.0.0.1	mention-01	35-36
# ::node	0.0.0.1.0	other	28-29
# ::node	0.0.0.1.1	person	40-41
# ::node	0.0.0.1.1.0	write-01	40-41
# ::node	0.0.1	half	5-6
# ::node	0.0.1.0	prove-01	9-10
# ::node	0.0.1.0.0	so	25-26
# ::node	0.1	clothes	17-18
# ::node	0.1.0	mirror	21-22
# ::root	0	and
# ::edge	and	op1	clothes	0	0.1	
# ::edge	bother-01	ARG0	far	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG1	mention-01	0.0.0	0.0.0.1	
# ::edge	half	op1	talk-01	0.0.1	0.0	
# ::edge	mention-01	ARG0	other	0.0.0.1	0.0.0.1.0	
# ::edge	mention-01	ARG1	person	0.0.0.1	0.0.0.1.1	
# ::edge	mirror	domain	clothes	0.1.0	0.1	
# ::edge	prove-01	ARG0	so	0.0.1.0	0.0.1.0.0	
# ::edge	prove-01	ARG1	half	0.0.1.0	0.0.1	
# ::edge	talk-01	ARG0	and	0.0	0	
# ::edge	talk-01	ARG1	bother-01	0.0	0.0.0	
# ::edge	write-01	ARG0	person	0.0.0.1.1.0	0.0.0.1.1	
(a / and 
      :ARG0-of (t / talk-01 
            :ARG1 (b / bother-01 
                  :ARG0 (f / far) 
                  :ARG1 (m / mention-01 
                        :ARG0 (o / other) 
                        :ARG1 (p / person 
                              :ARG0-of (w / write-01)))) 
            :op-of (h / half 
                  :ARG1-of (p2 / prove-01 
                        :ARG0 (s / so)))) 
      :op1 (c / clothes 
            :domain-of (m2 / mirror)))

# ::snt the upshot then was that whoever might or might not have won this fribbling charade he had lost and his routine counter of childishness inability to be bothered on his part etc
# ::tok the upshot then was that whoever might or might not have won this fribbling charade he had lost and his routine counter of childishness inability to be bothered on his part etc
# ::alignments 27-28|0.2.1.0 24-25|0.2.1.1+0.2.1 21-22|0.2 20-21|0.2.2 18-19|0 17-18|0.1 15-16|0.1.0 12-13|0.2.0 11-12|0.0 7-8|0.0.1 5-6|0.0.0 2-3|0.2.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:26.694
# ::node	0	and	18-19
# ::node	0.0	win-01	11-12
# ::node	0.0.0	whoever	5-6
# ::node	0.0.1	or	7-8
# ::node	0.1	lose-02	17-18
# ::node	0.1.0	he	15-16
# ::node	0.2	counter-01	21-22
# ::node	0.2.0	this	12-13
# ::node	0.2.1	ability	24-25
# ::node	0.2.1.0	bother-01	27-28
# ::node	0.2.1.0.0	then	2-3
# ::node	0.2.1.1	-	24-25
# ::node	0.2.2	routine	20-21
# ::root	0	and
# ::edge	ability	polarity	-	0.2.1	0.2.1.1	
# ::edge	and	op1	win-01	0	0.0	
# ::edge	and	op2	lose-02	0	0.1	
# ::edge	and	op3	counter-01	0	0.2	
# ::edge	bother-01	ARG0	then	0.2.1.0	0.2.1.0.0	
# ::edge	bother-01	ARG1	ability	0.2.1.0	0.2.1	
# ::edge	counter-01	ARG0	this	0.2	0.2.0	
# ::edge	counter-01	ARG1	ability	0.2	0.2.1	
# ::edge	counter-01	mod	routine	0.2	0.2.2	
# ::edge	lose-02	ARG0	he	0.1	0.1.0	
# ::edge	win-01	ARG0	whoever	0.0	0.0.0	
# ::edge	win-01	ARG1	or	0.0	0.0.1	
(a2 / and 
      :op1 (w / win-01 
            :ARG0 (w2 / whoever) 
            :ARG1 (o / or)) 
      :op2 (l / lose-02 
            :ARG0 (h / he)) 
      :op3 (c / counter-01 
            :ARG0 (t / this) 
            :ARG1 (a / ability 
                  :ARG1-of (b / bother-01 
                        :ARG0 (t2 / then)) 
                  :polarity -) 
            :mod (r / routine)))

# ::snt in newspapers magazines in some turn of her flatmates expression when too idle to bother she failed to cook or clean
# ::tok in newspapers magazines in some turn of her flatmates expression when too idle to bother she failed to cook or clean
# ::alignments 20-21|0.1.1.0 19-20|0.1.1 16-17|0.1 15-16|0.1.0 14-15|0.1.2 12-13|0.1.2.1 11-12|0.1.2.1.0 9-10|0 4-5|0.1.2.0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:26.865
# ::node	0	express-01	9-10
# ::node	0.0	newspaper	1-2
# ::node	0.0.0	magazine	2-3
# ::node	0.1	fail-01	16-17
# ::node	0.1.0	she	15-16
# ::node	0.1.1	or	19-20
# ::node	0.1.1.0	clean	20-21
# ::node	0.1.2	bother-02	14-15
# ::node	0.1.2.0	some	4-5
# ::node	0.1.2.1	idle	12-13
# ::node	0.1.2.1.0	too	11-12
# ::root	0	express-01
# ::edge	bother-02	ARG0	some	0.1.2	0.1.2.0	
# ::edge	bother-02	ARG1	fail-01	0.1.2	0.1	
# ::edge	express-01	ARG0	newspaper	0	0.0	
# ::edge	express-01	ARG1	fail-01	0	0.1	
# ::edge	fail-01	ARG0	she	0.1	0.1.0	
# ::edge	fail-01	ARG1	or	0.1	0.1.1	
# ::edge	idle	degree	too	0.1.2.1	0.1.2.1.0	
# ::edge	idle	domain	bother-02	0.1.2.1	0.1.2	
# ::edge	magazine	mod	newspaper	0.0.0	0.0	
# ::edge	or	op1	clean	0.1.1	0.1.1.0	
(e / express-01 
      :ARG0 (n / newspaper 
            :mod-of (m / magazine)) 
      :ARG1 (f / fail-01 
            :ARG0 (s / she) 
            :ARG1 (o / or 
                  :op1 (c / clean)) 
            :ARG1-of (b / bother-02 
                  :ARG0 (s2 / some) 
                  :domain-of (i / idle 
                        :degree (t / too)))))

# ::snt the bed was of course supposed to be turned into a sofa by day but fiona only bothered with that when she was expecting someone round and sometimes not even then
# ::tok the bed was of course supposed to be turned into a sofa by day but fiona only bothered with that when she was expecting someone round and sometimes not even then
# ::alignments 30-31|0.1.1.3 27-28|0.1.1.2 26-27|0.1.1 25-26|0.1.1.1 24-25|0.1.1.0.1 23-24|0.1.1.0 21-22|0.1.1.0.0 17-18|0.0 16-17|0.0.0 14-15|0 13-14|0.1.1.4 5-6|0.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:07:27.081
# ::node	0	contrast-01	14-15
# ::node	0.0	bother-01	17-18
# ::node	0.0.0	only	16-17
# ::node	0.1	suppose-02	5-6
# ::node	0.1.0	bed	1-2
# ::node	0.1.1	and	26-27
# ::node	0.1.1.0	expect-01	23-24
# ::node	0.1.1.0.0	she	21-22
# ::node	0.1.1.0.1	someone	24-25
# ::node	0.1.1.1	round	25-26
# ::node	0.1.1.2	sometimes	27-28
# ::node	0.1.1.3	then	30-31
# ::node	0.1.1.4	day	13-14
# ::root	0	contrast-01
# ::edge	and	op1	expect-01	0.1.1	0.1.1.0	
# ::edge	and	op2	round	0.1.1	0.1.1.1	
# ::edge	and	op3	sometimes	0.1.1	0.1.1.2	
# ::edge	and	op4	then	0.1.1	0.1.1.3	
# ::edge	and	time	day	0.1.1	0.1.1.4	
# ::edge	bother-01	mod	only	0.0	0.0.0	
# ::edge	contrast-01	ARG1	bother-01	0	0.0	
# ::edge	contrast-01	ARG2	suppose-02	0	0.1	
# ::edge	expect-01	ARG0	she	0.1.1.0	0.1.1.0.0	
# ::edge	expect-01	ARG1	someone	0.1.1.0	0.1.1.0.1	
# ::edge	suppose-02	ARG0	bed	0.1	0.1.0	
# ::edge	suppose-02	ARG1	and	0.1	0.1.1	
(c / contrast-01 
      :ARG1 (b / bother-01 
            :mod (o / only)) 
      :ARG2 (s4 / suppose-02 
            :ARG0 (b2 / bed) 
            :ARG1 (a / and 
                  :op1 (e / expect-01 
                        :ARG0 (s3 / she) 
                        :ARG1 (s2 / someone)) 
                  :op2 (r / round) 
                  :op3 (s / sometimes) 
                  :op4 (t / then) 
                  :time (d / day))))

