# ::snt the effort of persuading it to do so make her whole body feel hollow and also light kept from floating off sideways only by the weight of her clothes and boots
# ::tok the effort of persuading it to do so make her whole body feel hollow and also light kept from floating off sideways only by the weight of her clothes and boots
# ::alignments 29-30|0 28-29|0.0 25-26|0.0.0 22-23|0.0.0.0.3 20-21|0.0.0.0.1 19-20|0.0.0.0 17-18|0.0.0.0.2 16-17|0.0.0.0.2.1 15-16|0.0.0.0.2.2 14-15|0.0.0.0.2.3 13-14|0.0.0.0.2.3.0.1 12-13|0.0.0.0.2.3.0 11-12|0.0.0.0.2.3.0.0 10-11|0.0.0.0.2.3.0.0.0 7-8|0.0.0.0.0 4-5|0.0.0.0.4 1-2|0.0.0.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:02.333
# ::node	0	and	29-30
# ::node	0.0	clothes	28-29
# ::node	0.0.0	weight	25-26
# ::node	0.0.0.0	float-01	19-20
# ::node	0.0.0.0.0	so	7-8
# ::node	0.0.0.0.1	off	20-21
# ::node	0.0.0.0.2	keep-01	17-18
# ::node	0.0.0.0.2.0	effort	1-2
# ::node	0.0.0.0.2.1	light	16-17
# ::node	0.0.0.0.2.2	also	15-16
# ::node	0.0.0.0.2.3	and	14-15
# ::node	0.0.0.0.2.3.0	feel-01	12-13
# ::node	0.0.0.0.2.3.0.0	body	11-12
# ::node	0.0.0.0.2.3.0.0.0	whole	10-11
# ::node	0.0.0.0.2.3.0.1	hollow	13-14
# ::node	0.0.0.0.3	only	22-23
# ::node	0.0.0.0.4	it	4-5
# ::root	0	and
# ::edge	and	op1	clothes	0	0.0	
# ::edge	and	op1	feel-01	0.0.0.0.2.3	0.0.0.0.2.3.0	
# ::edge	and	op2	keep-01	0.0.0.0.2.3	0.0.0.0.2	
# ::edge	body	extent	whole	0.0.0.0.2.3.0.0	0.0.0.0.2.3.0.0.0	
# ::edge	feel-01	ARG0	body	0.0.0.0.2.3.0	0.0.0.0.2.3.0.0	
# ::edge	feel-01	ARG1	hollow	0.0.0.0.2.3.0	0.0.0.0.2.3.0.1	
# ::edge	float-01	ARG0	so	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG2	off	0.0.0.0	0.0.0.0.1	
# ::edge	float-01	location	weight	0.0.0.0	0.0.0	
# ::edge	float-01	manner	only	0.0.0.0	0.0.0.0.3	
# ::edge	it	op1	float-01	0.0.0.0.4	0.0.0.0	
# ::edge	keep-01	ARG0	effort	0.0.0.0.2	0.0.0.0.2.0	
# ::edge	keep-01	ARG1	light	0.0.0.0.2	0.0.0.0.2.1	
# ::edge	keep-01	ARG2	float-01	0.0.0.0.2	0.0.0.0	
# ::edge	keep-01	mod	also	0.0.0.0.2	0.0.0.0.2.2	
# ::edge	weight	location	clothes	0.0.0	0.0	
(a / and 
      :op1 (c / clothes 
            :location-of (w / weight 
                  :location-of (f / float-01 
                        :ARG0 (s / so) 
                        :ARG2 (o2 / off) 
                        :ARG2-of (k / keep-01 
                              :ARG0 (e / effort) 
                              :ARG1 (l / light) 
                              :mod (a2 / also) 
                              :op-of (a3 / and 
                                    :op1 (f2 / feel-01 
                                          :ARG0 (b / body 
                                                :extent (w2 / whole)) 
                                          :ARG1 (h / hollow)))) 
                        :manner (o / only) 
                        :op-of (i / it)))))

# ::snt high above the house the room floated lightly
# ::tok high above the house the room floated lightly
# ::alignments 7-8|0.0.1 6-7|0.0 5-6|0 3-4|0.0.0.0 1-2|0.0.0.0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:02.400
# ::node	0	room	5-6
# ::node	0.0	float-01	6-7
# ::node	0.0.0	high	0-1
# ::node	0.0.0.0	house	3-4
# ::node	0.0.0.0.0	above	1-2
# ::node	0.0.1	light	7-8
# ::root	0	room
(r / room 
      :ARG1-of (f / float-01 
            :domain-of (h2 / high 
                  :location (h / house 
                        :op-of (a / above))) 
            :manner (l / light)))

# ::snt the script floated round hollywood and elsewhere seeking finance as a movie and you wonder how much of the difficulty was its rigour
# ::tok the script floated round hollywood and elsewhere seeking finance as a movie and you wonder how much of the difficulty was its rigour
# ::alignments 19-20|0 16-17|0.0 14-15|0.0.0 13-14|0.0.0.0 12-13|0.0.0.1 11-12|0.0.0.1.1 8-9|0.0.0.1.0.1 7-8|0.0.0.1.0 6-7|0.0.0.1.0.2 5-6|0.0.0.1.0.3 4-5|0.0.0.1.0.3.1.0.0+0.0.0.1.0.3.1.0+0.0.0.1.0.3.1 3-4|0.0.0.1.0.0 2-3|0.0.0.1.0.3.0 1-2|0.0.0.1.0.3.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:02.769
# ::node	0	difficult	19-20
# ::node	0.0	much	16-17
# ::node	0.0.0	wonder-01	14-15
# ::node	0.0.0.0	you	13-14
# ::node	0.0.0.1	and	12-13
# ::node	0.0.0.1.0	seek-01	7-8
# ::node	0.0.0.1.0.0	round	3-4
# ::node	0.0.0.1.0.1	finance-01	8-9
# ::node	0.0.0.1.0.2	elsewhere	6-7
# ::node	0.0.0.1.0.3	and	5-6
# ::node	0.0.0.1.0.3.0	float-01	2-3
# ::node	0.0.0.1.0.3.0.0	script	1-2
# ::node	0.0.0.1.0.3.1	organization	4-5
# ::node	0.0.0.1.0.3.1.0	name	4-5
# ::node	0.0.0.1.0.3.1.0.0	"Hollywood"	4-5
# ::node	0.0.0.1.1	movie	11-12
# ::root	0	difficult
# ::edge	and	op1	float-01	0.0.0.1.0.3	0.0.0.1.0.3.0	
# ::edge	and	op1	seek-01	0.0.0.1	0.0.0.1.0	
# ::edge	and	op2	movie	0.0.0.1	0.0.0.1.1	
# ::edge	and	op2	organization	0.0.0.1.0.3	0.0.0.1.0.3.1	
# ::edge	and	op3	seek-01	0.0.0.1.0.3	0.0.0.1.0	
# ::edge	and	op3	wonder-01	0.0.0.1	0.0.0	
# ::edge	difficult	quant	much	0	0.0	
# ::edge	float-01	ARG1	script	0.0.0.1.0.3.0	0.0.0.1.0.3.0.0	
# ::edge	name	op1	"Hollywood"	0.0.0.1.0.3.1.0	0.0.0.1.0.3.1.0.0	
# ::edge	organization	name	name	0.0.0.1.0.3.1	0.0.0.1.0.3.1.0	
# ::edge	seek-01	ARG0	round	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	seek-01	ARG1	finance-01	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	seek-01	degree	elsewhere	0.0.0.1.0	0.0.0.1.0.2	
# ::edge	wonder-01	ARG0	you	0.0.0	0.0.0.0	
# ::edge	wonder-01	ARG1	much	0.0.0	0.0	
(d / difficult 
      :quant (m / much 
            :ARG1-of (w / wonder-01 
                  :ARG0 (y / you) 
                  :op-of (a / and 
                        :op1 (s / seek-01 
                              :ARG0 (r / round) 
                              :ARG1 (f / finance-01) 
                              :degree (e / elsewhere) 
                              :op-of (a2 / and 
                                    :op1 (f2 / float-01 
                                          :ARG1 (s2 / script)) 
                                    :op2 (o / organization 
                                          :name (n / name 
                                                :op1 "Hollywood")))) 
                        :op2 (m2 / movie)))))

# ::snt charsky heard a voice float up are you all right
# ::tok charsky heard a voice float up are you all right
# ::alignments 8-9|0.0.0.0.0 7-8|0.0.0.0 4-5|0.0 3-4|0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:02.897
# ::node	0	voice	3-4
# ::node	0.0	float-01	4-5
# ::node	0.0.0	hear-01	1-2
# ::node	0.0.0.0	you	7-8
# ::node	0.0.0.0.0	all	8-9
# ::root	0	voice
(v / voice 
      :ARG1-of (f / float-01 
            :ARG1-of (h / hear-01 
                  :ARG0 (y / you 
                        :quant (a / all)))))

# ::snt the faster  the stream the heavier the material chosen while  those species occupying slowflowing rivers or  ditches construct a case of wood around themselves  to help them float to fresh feeding grounds
# ::tok the faster the stream the heavier the material chosen while those species occupying slowflowing rivers or ditches construct a case of wood around themselves to help them float to fresh feeding grounds
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:02.899
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt they passed a luggage shop and victorias chanel handbag floated into her consciousness
# ::tok they passed a luggage shop and victorias chanel handbag floated into her consciousness
# ::alignments 12-13|0.1.1 9-10|0.1 5-6|0 4-5|0.0 3-4|0.0.0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:03.143
# ::node	0	and	5-6
# ::node	0.0	shop	4-5
# ::node	0.0.0	luggage	3-4
# ::node	0.1	float-01	9-10
# ::node	0.1.0	they	0-1
# ::node	0.1.1	consciousness	12-13
# ::root	0	and
# ::edge	and	op1	shop	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	float-01	ARG0	they	0.1	0.1.0	
# ::edge	float-01	medium	consciousness	0.1	0.1.1	
# ::edge	shop	mod	luggage	0.0	0.0.0	
(a / and 
      :op1 (s / shop 
            :mod (l / luggage)) 
      :op2 (f / float-01 
            :ARG0 (t / they) 
            :medium (c / consciousness)))

# ::snt allowing in other words their currencies to float freely dash
# ::tok allowing in other words their currencies to float freely dash
# ::alignments 8-9|0.1.1 7-8|0.1 5-6|0.1.0 3-4|0.0 2-3|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:03.223
# ::node	0	allow-01	0-1
# ::node	0.0	word	3-4
# ::node	0.0.0	other	2-3
# ::node	0.1	float-01	7-8
# ::node	0.1.0	currency	5-6
# ::node	0.1.1	free	8-9
# ::root	0	allow-01
# ::edge	allow-01	ARG1	word	0	0.0	
# ::edge	allow-01	purpose	float-01	0	0.1	
# ::edge	float-01	ARG1	currency	0.1	0.1.0	
# ::edge	float-01	manner	free	0.1	0.1.1	
# ::edge	word	mod	other	0.0	0.0.0	
(a / allow-01 
      :ARG1 (w / word 
            :mod (o / other)) 
      :purpose (f2 / float-01 
            :ARG1 (c / currency) 
            :manner (f / free)))

# ::snt floating his spinners in on the breeze he bamboozled the batsmen and took 440 while dave simons also used the conditions to good effect and ended with the excellent figures of 415
# ::tok floating his spinners in on the breeze he bamboozled the batsmen and took 440 while dave simons also used the conditions to good effect and ended with the excellent figures of 415
# ::alignments 29-30|0.0 28-29|0 25-26|0.0.0 24-25|0.0.0.0 23-24|0.0.0.0.0.2 22-23|0.0.0.0.0.2.0 20-21|0.0.0.0.0.1 18-19|0.0.0.0.0 17-18|0.0.0.0.0.3 13-14|0.0.0.0.0.4.1 11-12|0.0.0.0.0.4 7-8|0.0.0.0.0.0 0-1|0.0.0.0.0.4.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:03.406
# ::node	0	excellent	28-29
# ::node	0.0	figure	29-30
# ::node	0.0.0	end-01	25-26
# ::node	0.0.0.0	and	24-25
# ::node	0.0.0.0.0	use-01	18-19
# ::node	0.0.0.0.0.0	he	7-8
# ::node	0.0.0.0.0.1	condition	20-21
# ::node	0.0.0.0.0.2	effect-01	23-24
# ::node	0.0.0.0.0.2.0	good	22-23
# ::node	0.0.0.0.0.3	also	17-18
# ::node	0.0.0.0.0.4	and	11-12
# ::node	0.0.0.0.0.4.0	float-01	0-1
# ::node	0.0.0.0.0.4.1	440	13-14
# ::root	0	excellent
(e / excellent 
      :mod-of (f / figure 
            :ARG1-of (e2 / end-01 
                  :op-of (a / and 
                        :op1 (u / use-01 
                              :ARG0 (h / he) 
                              :ARG1 (c / condition) 
                              :ARG2 (e3 / effect-01 
                                    :mod (g / good)) 
                              :mod (a2 / also) 
                              :purpose-of (a3 / and 
                                    :op1 (f2 / float-01) 
                                    :op2 440))))))

# ::snt and that the voices calling for the food part of his trio of responsibilities to be floated off independently or transferred to the department of health should be if not silenced at least be made to pipe down a little
# ::tok and that the voices calling for the food part of his trio of responsibilities to be floated off independently or transferred to the department of health should be if not silenced at least be made to pipe down a little
# ::alignments 39-40|0.1.2.0.0.0 37-38|0.1.2.0.0 36-37|0.0.0 26-27|0.0 25-26|0.1.1.0 23-24|0.1.1 20-21|0.1 19-20|0.1.2 18-19|0.1.2.0.3 17-18|0.1.2.0.2 16-17|0.1.2.0 13-14|0.1.2.0.1.0+0.1.2.0.1 11-12|0.1.2.0.1.1 7-8|0.1.2.0.1.1.0 3-4|0.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:04.339
# ::node	0	and	0-1
# ::node	0.0	recommend-01	26-27
# ::node	0.0.0	pipe	36-37
# ::node	0.1	transfer-01	20-21
# ::node	0.1.0	voice	3-4
# ::node	0.1.1	department	23-24
# ::node	0.1.1.0	health	25-26
# ::node	0.1.2	or	19-20
# ::node	0.1.2.0	float-01	16-17
# ::node	0.1.2.0.0	down	37-38
# ::node	0.1.2.0.0.0	little	39-40
# ::node	0.1.2.0.1	thing	13-14
# ::node	0.1.2.0.1.0	responsible-41	13-14
# ::node	0.1.2.0.1.1	trio	11-12
# ::node	0.1.2.0.1.1.0	food	7-8
# ::node	0.1.2.0.2	off	17-18
# ::node	0.1.2.0.3	independent	18-19
# ::root	0	and
# ::edge	and	op1	transfer-01	0	0.1	
# ::edge	float-01	ARG0	down	0.1.2.0	0.1.2.0.0	
# ::edge	float-01	ARG1	thing	0.1.2.0	0.1.2.0.1	
# ::edge	float-01	ARG2	off	0.1.2.0	0.1.2.0.2	
# ::edge	float-01	manner	independent	0.1.2.0	0.1.2.0.3	
# ::edge	food	purpose	trio	0.1.2.0.1.1.0	0.1.2.0.1.1	
# ::edge	health	part	department	0.1.1.0	0.1.1	
# ::edge	little	mod	down	0.1.2.0.0.0	0.1.2.0.0	
# ::edge	or	op1	float-01	0.1.2	0.1.2.0	
# ::edge	or	op2	transfer-01	0.1.2	0.1	
# ::edge	recommend-01	ARG0	pipe	0.0	0.0.0	
# ::edge	recommend-01	ARG1	and	0.0	0	
# ::edge	responsible-41	ARG2	thing	0.1.2.0.1.0	0.1.2.0.1	
# ::edge	transfer-01	ARG1	voice	0.1	0.1.0	
# ::edge	transfer-01	ARG2	department	0.1	0.1.1	
# ::edge	trio	name	thing	0.1.2.0.1.1	0.1.2.0.1	
(a / and 
      :ARG1-of (r / recommend-01 
            :ARG0 (p / pipe)) 
      :op1 (t / transfer-01 
            :ARG1 (v / voice) 
            :ARG2 (d2 / department 
                  :part-of (h / health)) 
            :op-of (o / or 
                  :op1 (f / float-01 
                        :ARG0 (d / down 
                              :mod-of (l / little)) 
                        :ARG1 (t2 / thing 
                              :ARG2-of (r2 / responsible-41) 
                              :name-of (t3 / trio 
                                    :purpose-of (f2 / food))) 
                        :ARG2 (o2 / off) 
                        :manner (i / independent)))))

# ::snt they floated there alone
# ::tok they floated there alone
# ::alignments 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:04.350
# ::node	0	float-01	1-2
# ::node	0.0	they	0-1
# ::node	0.1	alone	3-4
# ::root	0	float-01
# ::edge	float-01	ARG0	they	0	0.0	
# ::edge	float-01	ARG2	alone	0	0.1	
(f / float-01 
      :ARG0 (t / they) 
      :ARG2 (a / alone))

# ::snt the transatlantic fki operation it is thought would make an ideal fit with btrs us division which is due to be floated
# ::tok the transatlantic fki operation it is thought would make an ideal fit with btrs us division which is due to be floated
# ::alignments 21-22|0.1.0.0.0 15-16|0.1.0.0 11-12|0.1.0 10-11|0.1.0.0.0.0 6-7|0 4-5|0.0 3-4|0.1 1-2|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:04.668
# ::node	0	think-01	6-7
# ::node	0.0	it	4-5
# ::node	0.1	operation	3-4
# ::node	0.1.0	fit-01	11-12
# ::node	0.1.0.0	division	15-16
# ::node	0.1.0.0.0	float-01	21-22
# ::node	0.1.0.0.0.0	ideal	10-11
# ::node	0.1.1	transatlantic	1-2
# ::root	0	think-01
# ::edge	fit-01	ARG0	operation	0.1.0	0.1	
# ::edge	fit-01	ARG1	division	0.1.0	0.1.0.0	
# ::edge	float-01	ARG0	division	0.1.0.0.0	0.1.0.0	
# ::edge	float-01	ARG1	ideal	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	operation	mod	transatlantic	0.1	0.1.1	
# ::edge	think-01	ARG0	it	0	0.0	
# ::edge	think-01	ARG1	operation	0	0.1	
(t / think-01 
      :ARG0 (i2 / it) 
      :ARG1 (o / operation 
            :ARG0-of (f2 / fit-01 
                  :ARG1 (d / division 
                        :ARG0-of (f / float-01 
                              :ARG1 (i / ideal)))) 
            :mod (t2 / transatlantic)))

# ::snt hungary yesterday announced the partial privatisation of its leading travel agent ibusz including an unprecedented plan to float shares in the company on a western stock exchange writes peter torday
# ::tok hungary yesterday announced the partial privatisation of its leading travel agent ibusz including an unprecedented plan to float shares in the company on a western stock exchange writes peter torday
# ::alignments 27-28|0.0.0.0 26-27|0.0.0 25-26|0.0.0.1 24-25|0.0.0.2.0.0+0.0.0.2.0+0.0.0.2 21-22|0.0 18-19|0.1.0.0 17-18|0.1.0 15-16|0.1 14-15|0.1.2.0+0.1.2 10-11|0.1.1.0 9-10|0.1.1 8-9|0.1.1.1 4-5|0.0.0.0.0 2-3|0 1-2|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:04.908
# ::node	0	announce-01	2-3
# ::node	0.0	company	21-22
# ::node	0.0.0	exchange-01	26-27
# ::node	0.0.0.0	write-01	27-28
# ::node	0.0.0.0.0	partial	4-5
# ::node	0.0.0.1	stock	25-26
# ::node	0.0.0.2	world-region	24-25
# ::node	0.0.0.2.0	name	24-25
# ::node	0.0.0.2.0.0	"West"	24-25
# ::node	0.1	plan-01	15-16
# ::node	0.1.0	float-01	17-18
# ::node	0.1.0.0	share	18-19
# ::node	0.1.1	travel-01	9-10
# ::node	0.1.1.0	agent	10-11
# ::node	0.1.1.1	lead-01	8-9
# ::node	0.1.2	precedent	14-15
# ::node	0.1.2.0	-	14-15
# ::node	0.2	yesterday	1-2
# ::root	0	announce-01
# ::edge	announce-01	ARG0	company	0	0.0	
# ::edge	announce-01	ARG1	plan-01	0	0.1	
# ::edge	announce-01	time	yesterday	0	0.2	
# ::edge	exchange-01	ARG1	stock	0.0.0	0.0.0.1	
# ::edge	exchange-01	ARG2	company	0.0.0	0.0	
# ::edge	exchange-01	mod	world-region	0.0.0	0.0.0.2	
# ::edge	float-01	ARG1	share	0.1.0	0.1.0.0	
# ::edge	lead-01	ARG1	travel-01	0.1.1.1	0.1.1	
# ::edge	name	op1	"West"	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	plan-01	ARG1	float-01	0.1	0.1.0	
# ::edge	plan-01	mod	precedent	0.1	0.1.2	
# ::edge	precedent	polarity	-	0.1.2	0.1.2.0	
# ::edge	travel-01	ARG0	agent	0.1.1	0.1.1.0	
# ::edge	travel-01	ARG1	plan-01	0.1.1	0.1	
# ::edge	world-region	name	name	0.0.0.2	0.0.0.2.0	
# ::edge	write-01	ARG0	exchange-01	0.0.0.0	0.0.0	
# ::edge	write-01	ARG1	partial	0.0.0.0	0.0.0.0.0	
(a2 / announce-01 
      :ARG0 (c / company 
            :ARG2-of (e / exchange-01 
                  :ARG0-of (w / write-01 
                        :ARG1 (p3 / partial)) 
                  :ARG1 (s / stock) 
                  :mod (w2 / world-region 
                        :name (n / name 
                              :op1 "West")))) 
      :ARG1 (p / plan-01 
            :ARG1 (f / float-01 
                  :ARG1 (s2 / share)) 
            :ARG1-of (t / travel-01 
                  :ARG0 (a / agent) 
                  :ARG1-of (l / lead-01)) 
            :mod (p2 / precedent 
                  :polarity -)) 
      :time (y / yesterday))

# ::snt it seemed so feeble and spindly floating there next to the toilet paper in the lavatory bowl
# ::tok it seemed so feeble and spindly floating there next to the toilet paper in the lavatory bowl
# ::alignments 12-13|0.1.0.0.0 11-12|0.1.0.0.0.0 8-9|0.1.0.0 6-7|0.1.0 4-5|0.1 2-3|0.1.0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:05.046
# ::node	0	seem-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	and	4-5
# ::node	0.1.0	float-01	6-7
# ::node	0.1.0.0	next	8-9
# ::node	0.1.0.0.0	paper	12-13
# ::node	0.1.0.0.0.0	toilet	11-12
# ::node	0.1.0.1	so	2-3
# ::root	0	seem-01
# ::edge	and	op1	float-01	0.1	0.1.0	
# ::edge	float-01	ARG1	next	0.1.0	0.1.0.0	
# ::edge	float-01	degree	so	0.1.0	0.1.0.1	
# ::edge	next	prep-to	paper	0.1.0.0	0.1.0.0.0	
# ::edge	paper	mod	toilet	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	seem-01	ARG1	it	0	0.0	
# ::edge	seem-01	ARG2	and	0	0.1	
(s2 / seem-01 
      :ARG1 (i / it) 
      :ARG2 (a / and 
            :op1 (f / float-01 
                  :ARG1 (n / next 
                        :prep-to (p / paper 
                              :mod (t / toilet))) 
                  :degree (s / so))))

# ::snt if we do not act and something is not done thousands and thousands and thousands more of the vietnamese boat people will come floating in on the early spring tides
# ::tok if we do not act and something is not done thousands and thousands and thousands more of the vietnamese boat people will come floating in on the early spring tides
# ::alignments 29-30|0.0.0.2.0.1 28-29|0.0.0.2.0.2.0 27-28|0.0.0.2.0.2 23-24|0.0.0.2.0 19-20|0.0.0.2.0.0 13-14|0 11-12|0.0 6-7|0.0.0.1 5-6|0.0.0.2 4-5|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:05.163
# ::node	0	and	13-14
# ::node	0.0	and	11-12
# ::node	0.0.0	act-02	4-5
# ::node	0.0.0.0	we	1-2
# ::node	0.0.0.1	something	6-7
# ::node	0.0.0.2	and	5-6
# ::node	0.0.0.2.0	float-01	23-24
# ::node	0.0.0.2.0.0	boat	19-20
# ::node	0.0.0.2.0.1	tide	29-30
# ::node	0.0.0.2.0.2	early	27-28
# ::node	0.0.0.2.0.2.0	spring	28-29
# ::root	0	and
(a / and 
      :op-of (a2 / and 
            :op1 (a4 / act-02 
                  :ARG0 (w / we) 
                  :ARG1 (s2 / something) 
                  :op-of (a3 / and 
                        :op1 (f / float-01 
                              :ARG1 (b / boat) 
                              :ARG2 (t / tide) 
                              :time (e / early 
                                    :mod-of (s / spring)))))))

# ::snt slowly at first but with gathering speed it would float like a majestic space clipper into martian orbit
# ::tok slowly at first but with gathering speed it would float like a majestic space clipper into martian orbit
# ::alignments 17-18|0.1.0.0.0.0 13-14|0.1.0.0.1 9-10|0.1.0.0 7-8|0.1.0.0.0 6-7|0.1.0 5-6|0.1 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:05.429
# ::node	0	contrast-01	3-4
# ::node	0.0	slow	0-1
# ::node	0.1	gather-01	5-6
# ::node	0.1.0	speed	6-7
# ::node	0.1.0.0	float-01	9-10
# ::node	0.1.0.0.0	it	7-8
# ::node	0.1.0.0.0.0	orbit-01	17-18
# ::node	0.1.0.0.1	space	13-14
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	slow	0	0.0	
# ::edge	contrast-01	ARG2	gather-01	0	0.1	
# ::edge	float-01	ARG0	it	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	speed	0.1.0.0	0.1.0	
# ::edge	float-01	location	space	0.1.0.0	0.1.0.0.1	
# ::edge	gather-01	ARG1	speed	0.1	0.1.0	
# ::edge	orbit-01	ARG1	it	0.1.0.0.0.0	0.1.0.0.0	
(c / contrast-01 
      :ARG1 (s3 / slow) 
      :ARG2 (g / gather-01 
            :ARG1 (s2 / speed 
                  :ARG1-of (f / float-01 
                        :ARG0 (i / it 
                              :ARG1-of (o / orbit-01)) 
                        :location (s / space)))))

# ::snt now liz didnt win our first second or third prize vocal soundum last year but she she made it to the final twelve vocal soundum her her fulllength novel now has now been accepted by collins and thats going to be published next february theres talk of a big american contract for liz and liz has now been floated away in to the world of big time professional writing
# ::tok now liz didnt win our first second or third prize vocal soundum last year but she she made it to the final twelve vocal soundum her her fulllength novel now has now been accepted by collins and thats going to be published next february theres talk of a big american contract for liz and liz has now been floated away in to the world of big time professional writing
# ::alignments 68-69|0.0.0.0.0.1.0.0 67-68|0.0.0.0.0.1.0.0.1 66-67|0.0.0.0.0.1.0.0.0 65-66|0.0.0.0.0.1.0.0.0.0 63-64|0.0.0.0.0.1.0.0.0.1 59-60|0.0.0.0.0.1.0.1 58-59|0.0.0.0.0.1.0 56-57|0.0.0.0.0.1.0.2 53-54|0.0.0.0.0.1 50-51|0.0.0.0.0 49-50|0.0.0.0.0.0.0.0+0.0.0.0.0.0.0+0.0.0.0.0.0 48-49|0.0.0.0.0.2 45-46|0.0.0.0 43-44|0.1.1.0.1.1+0.1.1.0.1 42-43|0.1.1.0.1.0 41-42|0.1.1.0 37-38|0.1.1 36-37|0.1 33-34|0.1.0 31-32|0.1.0.2 29-30|0.1.0.3 28-29|0.1.0.1 23-24|0.1.0.1.0 21-22|0.1.0.1.0.0 18-19|0.1.1.0.0 16-17|0.1.0.0 15-16|0.0.0 14-15|0 13-14|0.0.3 12-13|0.0.3.0 10-11|0.0.1.1 9-10|0.0.1.0 7-8|0.0.1 3-4|0.0 0-1|0.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:08.975
# ::node	0	contrast-01	14-15
# ::node	0.0	win-01	3-4
# ::node	0.0.0	she	15-16
# ::node	0.0.0.0	talk-01	45-46
# ::node	0.0.0.0.0	contract-02	50-51
# ::node	0.0.0.0.0.0	country	49-50
# ::node	0.0.0.0.0.0.0	name	49-50
# ::node	0.0.0.0.0.0.0.0	"America"	49-50
# ::node	0.0.0.0.0.1	and	53-54
# ::node	0.0.0.0.0.1.0	float-01	58-59
# ::node	0.0.0.0.0.1.0.0	write-01	68-69
# ::node	0.0.0.0.0.1.0.0.0	time	66-67
# ::node	0.0.0.0.0.1.0.0.0.0	big	65-66
# ::node	0.0.0.0.0.1.0.0.0.1	world	63-64
# ::node	0.0.0.0.0.1.0.0.1	professional	67-68
# ::node	0.0.0.0.0.1.0.1	away	59-60
# ::node	0.0.0.0.0.1.0.2	now	56-57
# ::node	0.0.0.0.0.2	big	48-49
# ::node	0.0.1	or	7-8
# ::node	0.0.1.0	prize-01	9-10
# ::node	0.0.1.1	vocal	10-11
# ::node	0.0.2	now	0-1
# ::node	0.0.3	year	13-14
# ::node	0.0.3.0	last	12-13
# ::node	0.1	and	36-37
# ::node	0.1.0	accept-01	33-34
# ::node	0.1.0.0	she	16-17
# ::node	0.1.0.1	novel	28-29
# ::node	0.1.0.1.0	vocal	23-24
# ::node	0.1.0.1.0.0	final	21-22
# ::node	0.1.0.2	now	31-32
# ::node	0.1.0.3	now	29-30
# ::node	0.1.1	that	37-38
# ::node	0.1.1.0	publish-01	41-42
# ::node	0.1.1.0.0	it	18-19
# ::node	0.1.1.0.1	date-entity	43-44
# ::node	0.1.1.0.1.0	next	42-43
# ::node	0.1.1.0.1.1	2	43-44
# ::root	0	contrast-01
# ::edge	accept-01	ARG0	she	0.1.0	0.1.0.0	
# ::edge	accept-01	ARG1	novel	0.1.0	0.1.0.1	
# ::edge	accept-01	location	and	0.1.0	0.1	
# ::edge	accept-01	time	now	0.1.0	0.1.0.2	
# ::edge	accept-01	time	now	0.1.0	0.1.0.3	
# ::edge	and	op1	that	0.1	0.1.1	
# ::edge	contract-02	ARG0	country	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	contract-02	ARG1	and	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	contract-02	mod	big	0.0.0.0.0	0.0.0.0.0.2	
# ::edge	contrast-01	ARG1	win-01	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.1	
# ::edge	country	name	name	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	date-entity	mod	next	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	date-entity	month	2	0.1.1.0.1	0.1.1.0.1.1	
# ::edge	float-01	ARG0	and	0.0.0.0.0.1.0	0.0.0.0.0.1	
# ::edge	float-01	ARG1	write-01	0.0.0.0.0.1.0	0.0.0.0.0.1.0.0	
# ::edge	float-01	ARG2	away	0.0.0.0.0.1.0	0.0.0.0.0.1.0.1	
# ::edge	float-01	time	now	0.0.0.0.0.1.0	0.0.0.0.0.1.0.2	
# ::edge	name	op1	"America"	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	novel	poss	vocal	0.1.0.1	0.1.0.1.0	
# ::edge	or	op1	vocal	0.0.1	0.0.1.1	
# ::edge	prize-01	ARG1	or	0.0.1.0	0.0.1	
# ::edge	publish-01	ARG0	it	0.1.1.0	0.1.1.0.0	
# ::edge	publish-01	ARG1	that	0.1.1.0	0.1.1	
# ::edge	publish-01	time	date-entity	0.1.1.0	0.1.1.0.1	
# ::edge	talk-01	ARG0	she	0.0.0.0	0.0.0	
# ::edge	talk-01	ARG1	contract-02	0.0.0.0	0.0.0.0.0	
# ::edge	time	mod	big	0.0.0.0.0.1.0.0.0	0.0.0.0.0.1.0.0.0.0	
# ::edge	vocal	mod	final	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	win-01	ARG0	she	0.0	0.0.0	
# ::edge	win-01	ARG1	or	0.0	0.0.1	
# ::edge	win-01	time	now	0.0	0.0.2	
# ::edge	win-01	time	year	0.0	0.0.3	
# ::edge	world	mod	time	0.0.0.0.0.1.0.0.0.1	0.0.0.0.0.1.0.0.0	
# ::edge	write-01	location	time	0.0.0.0.0.1.0.0	0.0.0.0.0.1.0.0.0	
# ::edge	write-01	mod	professional	0.0.0.0.0.1.0.0	0.0.0.0.0.1.0.0.1	
# ::edge	year	mod	last	0.0.3	0.0.3.0	
(c3 / contrast-01 
      :ARG1 (w3 / win-01 
            :ARG0 (s2 / she 
                  :ARG0-of (t2 / talk-01 
                        :ARG1 (c / contract-02 
                              :ARG0 (c2 / country 
                                    :name (n2 / name 
                                          :op1 "America")) 
                              :ARG1 (a2 / and 
                                    :ARG0-of (f / float-01 
                                          :ARG1 (w / write-01 
                                                :location (t / time 
                                                      :mod (b / big) 
                                                      :mod-of (w2 / world)) 
                                                :mod (p / professional)) 
                                          :ARG2 (a / away) 
                                          :time (n / now))) 
                              :mod (b2 / big)))) 
            :ARG1 (o / or 
                  :ARG1-of (p3 / prize-01) 
                  :op1 (v2 / vocal)) 
            :time (n7 / now) 
            :time (y / year 
                  :mod (l / last))) 
      :ARG2 (a3 / and 
            :location-of (a4 / accept-01 
                  :ARG0 (s / she) 
                  :ARG1 (n6 / novel 
                        :poss (v / vocal 
                              :mod (f2 / final))) 
                  :time (n4 / now) 
                  :time (n5 / now)) 
            :op1 (t3 / that 
                  :ARG1-of (p2 / publish-01 
                        :ARG0 (i / it) 
                        :time (d / date-entity 
                              :mod (n3 / next) 
                              :month 2)))))

# ::snt it was mutton stew with potatoes and onions floating in the thickened parsley sauce
# ::tok it was mutton stew with potatoes and onions floating in the thickened parsley sauce
# ::alignments 8-9|0.1 6-7|0 5-6|0.0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.008
# ::node	0	and	6-7
# ::node	0.0	potatoe	5-6
# ::node	0.1	float-01	8-9
# ::node	0.1.0	it	0-1
# ::root	0	and
# ::edge	and	op1	potatoe	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	float-01	ARG1	it	0.1	0.1.0	
(a / and 
      :op1 (p / potatoe) 
      :op2 (f / float-01 
            :ARG1 (i / it)))

# ::snt 3bn more than jaguars asset value and compares with the 283m the company brought when it was floated on the market
# ::tok 3bn more than jaguars asset value and compares with the 283m the company brought when it was floated on the market
# ::alignments 20-21|0.1.0.0.0 17-18|0.1.0.0 15-16|0.1.0 12-13|0.1 6-7|0 5-6|0.0 4-5|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.051
# ::node	0	and	6-7
# ::node	0.0	value-01	5-6
# ::node	0.0.0	asset	4-5
# ::node	0.1	company	12-13
# ::node	0.1.0	it	15-16
# ::node	0.1.0.0	float-01	17-18
# ::node	0.1.0.0.0	market	20-21
# ::root	0	and
# ::edge	and	op1	value-01	0	0.0	
# ::edge	and	op2	company	0	0.1	
# ::edge	company	poss	it	0.1	0.1.0	
# ::edge	float-01	ARG1	it	0.1.0.0	0.1.0	
# ::edge	float-01	ARG2	market	0.1.0.0	0.1.0.0.0	
# ::edge	value-01	ARG1	asset	0.0	0.0.0	
(a / and 
      :op1 (v / value-01 
            :ARG1 (a2 / asset)) 
      :op2 (c / company 
            :poss (i / it 
                  :ARG1-of (f / float-01 
                        :ARG2 (m / market)))))

# ::snt in addition bat is floating argos and the paper interests
# ::tok in addition bat is floating argos and the paper interests
# ::alignments 9-10|0.1 8-9|0.1.0 6-7|0 5-6|0.0.1.0+0.0.1+0.0 4-5|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.075
# ::node	0	and	6-7
# ::node	0.0	company	5-6
# ::node	0.0.0	float-01	4-5
# ::node	0.0.1	name	5-6
# ::node	0.0.1.0	"Argos"	5-6
# ::node	0.1	interest	9-10
# ::node	0.1.0	paper	8-9
# ::root	0	and
# ::edge	and	op1	company	0	0.0	
# ::edge	and	op2	interest	0	0.1	
# ::edge	company	name	name	0.0	0.0.1	
# ::edge	float-01	ARG1	company	0.0.0	0.0	
# ::edge	interest	poss	paper	0.1	0.1.0	
# ::edge	name	op1	"Argos"	0.0.1	0.0.1.0	
(a / and 
      :op1 (c / company 
            :ARG1-of (f / float-01) 
            :name (n / name 
                  :op1 "Argos")) 
      :op2 (i / interest 
            :poss (p / paper)))

# ::snt some value them at their original cost until they are floated on the stock market or sold while others update at regular intervals
# ::tok some value them at their original cost until they are floated on the stock market or sold while others update at regular intervals
# ::alignments 22-23|0.1.0.0.0.0.0 21-22|0.1.0.0.0.0.0.0 19-20|0.1.0.0.0.0 18-19|0.1.0.0.0.0.1 16-17|0.1.0.0.0 15-16|0.1.0.0.0.1 14-15|0.1.0.1 13-14|0.1.0.1.0 10-11|0.1.0 8-9|0.1.0.0 7-8|0.1 6-7|0.0 5-6|0.0.1 1-2|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.240
# ::node	0	value-01	1-2
# ::node	0.0	cost-01	6-7
# ::node	0.0.0	some	0-1
# ::node	0.0.1	original	5-6
# ::node	0.1	until	7-8
# ::node	0.1.0	float-01	10-11
# ::node	0.1.0.0	they	8-9
# ::node	0.1.0.0.0	sell-01	16-17
# ::node	0.1.0.0.0.0	update-01	19-20
# ::node	0.1.0.0.0.0.0	interval	22-23
# ::node	0.1.0.0.0.0.0.0	regular	21-22
# ::node	0.1.0.0.0.0.1	other	18-19
# ::node	0.1.0.0.0.1	or	15-16
# ::node	0.1.0.1	market	14-15
# ::node	0.1.0.1.0	stock	13-14
# ::root	0	value-01
# ::edge	cost-01	ARG1	some	0.0	0.0.0	
# ::edge	cost-01	mod	original	0.0	0.0.1	
# ::edge	float-01	ARG1	they	0.1.0	0.1.0.0	
# ::edge	float-01	ARG2	market	0.1.0	0.1.0.1	
# ::edge	interval	mod	regular	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	market	mod	stock	0.1.0.1	0.1.0.1.0	
# ::edge	or	op1	sell-01	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	sell-01	ARG1	they	0.1.0.0.0	0.1.0.0	
# ::edge	sell-01	condition	update-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	until	op1	float-01	0.1	0.1.0	
# ::edge	update-01	ARG0	interval	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	update-01	ARG1	other	0.1.0.0.0.0	0.1.0.0.0.0.1	
# ::edge	value-01	prep-by	cost-01	0	0.0	
# ::edge	value-01	time	until	0	0.1	
(v / value-01 
      :prep-by (c / cost-01 
            :ARG1 (s3 / some) 
            :mod (o3 / original)) 
      :time (u2 / until 
            :op1 (f / float-01 
                  :ARG1 (t / they 
                        :ARG1-of (s / sell-01 
                              :condition (u / update-01 
                                    :ARG0 (i / interval 
                                          :mod (r / regular)) 
                                    :ARG1 (o / other)) 
                              :op-of (o2 / or))) 
                  :ARG2 (m / market 
                        :mod (s2 / stock)))))

# ::snt small bubbles of  steam form and these float upwards expanding as they go and the  expansion of the bubbles pushes some of the water out of the top of the  column
# ::tok small bubbles of steam form and these float upwards expanding as they go and the expansion of the bubbles pushes some of the water out of the top of the column
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.241
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt last year shares in yves saint laurent were floated on the french stock exchange and oversubscribed 27 times
# ::tok last year shares in yves saint laurent were floated on the french stock exchange and oversubscribed 27 times
# ::alignments 14-15|0 13-14|0.0.1 12-13|0.0.1.1 11-12|0.0.1.2.0.0+0.0.1.2.0+0.0.1.2 8-9|0.0 5-6|0.0.1.0 2-3|0.0.0 1-2|0.0.0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.400
# ::node	0	and	14-15
# ::node	0.0	float-01	8-9
# ::node	0.0.0	share	2-3
# ::node	0.0.0.0	last	0-1
# ::node	0.0.0.0.0	year	1-2
# ::node	0.0.1	exchange-01	13-14
# ::node	0.0.1.0	saint	5-6
# ::node	0.0.1.1	stock	12-13
# ::node	0.0.1.2	country	11-12
# ::node	0.0.1.2.0	name	11-12
# ::node	0.0.1.2.0.0	"France"	11-12
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	country	name	name	0.0.1.2	0.0.1.2.0	
# ::edge	exchange-01	ARG0	saint	0.0.1	0.0.1.0	
# ::edge	exchange-01	ARG1	stock	0.0.1	0.0.1.1	
# ::edge	exchange-01	mod	country	0.0.1	0.0.1.2	
# ::edge	float-01	ARG1	share	0.0	0.0.0	
# ::edge	float-01	ARG2	exchange-01	0.0	0.0.1	
# ::edge	name	op1	"France"	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	share	mod	last	0.0.0	0.0.0.0	
# ::edge	year	mod	last	0.0.0.0.0	0.0.0.0	
(a / and 
      :op1 (f / float-01 
            :ARG1 (s3 / share 
                  :mod (l / last 
                        :mod-of (y / year))) 
            :ARG2 (e / exchange-01 
                  :ARG0 (s2 / saint) 
                  :ARG1 (s / stock) 
                  :mod (c / country 
                        :name (n / name 
                              :op1 "France")))))

# ::snt mr popple upon returning home alone found the spider floating in the toiletbowl
# ::tok mr popple upon returning home alone found the spider floating in the toiletbowl
# ::alignments 9-10|0.1 6-7|0 5-6|0.0.0.0 4-5|0.0 3-4|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.442
# ::node	0	find-01	6-7
# ::node	0.0	home	4-5
# ::node	0.0.0	return-01	3-4
# ::node	0.0.0.0	alone	5-6
# ::node	0.1	float-01	9-10
# ::root	0	find-01
# ::edge	find-01	ARG0	home	0	0.0	
# ::edge	find-01	ARG1	float-01	0	0.1	
# ::edge	return-01	ARG4	home	0.0.0	0.0	
# ::edge	return-01	manner	alone	0.0.0	0.0.0.0	
(f2 / find-01 
      :ARG0 (h / home 
            :ARG4-of (r / return-01 
                  :manner (a / alone))) 
      :ARG1 (f / float-01))

# ::snt it was sometime after midnight if i remember that sounds of singing and cheering began floating through the night air from the brandenburg gate
# ::tok it was sometime after midnight if i remember that sounds of singing and cheering began floating through the night air from the brandenburg gate
# ::alignments 19-20|0.0.0.1 18-19|0.0.0.1.0 15-16|0.0.0.0 14-15|0.0.0 12-13|0 11-12|0.1 9-10|0.0 7-8|0.0.0.0.0.0 6-7|0.0.0.0.0 4-5|0.0.0.0.0.0.0.0.1 3-4|0.0.0.0.0.0.0.0 2-3|0.0.0.0.0.0.0.0.0 0-1|0.0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.777
# ::node	0	and	12-13
# ::node	0.0	sound-01	9-10
# ::node	0.0.0	begin-01	14-15
# ::node	0.0.0.0	float-01	15-16
# ::node	0.0.0.0.0	i	6-7
# ::node	0.0.0.0.0.0	remember-01	7-8
# ::node	0.0.0.0.0.0.0	it	0-1
# ::node	0.0.0.0.0.0.0.0	after	3-4
# ::node	0.0.0.0.0.0.0.0.0	sometime	2-3
# ::node	0.0.0.0.0.0.0.0.1	midnight	4-5
# ::node	0.0.0.1	air	19-20
# ::node	0.0.0.1.0	night	18-19
# ::node	0.1	sing-01	11-12
# ::root	0	and
# ::edge	after	domain	it	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	after	op1	midnight	0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0.1	
# ::edge	air	time	night	0.0.0.1	0.0.0.1.0	
# ::edge	and	op1	sing-01	0	0.1	
# ::edge	begin-01	ARG0	sound-01	0.0.0	0.0	
# ::edge	begin-01	ARG1	float-01	0.0.0	0.0.0.0	
# ::edge	begin-01	ARG2	air	0.0.0	0.0.0.1	
# ::edge	float-01	ARG0	i	0.0.0.0	0.0.0.0.0	
# ::edge	remember-01	ARG0	i	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	remember-01	ARG1	it	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	sometime	op1	after	0.0.0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	sound-01	ARG1	and	0.0	0	
(a2 / and 
      :ARG1-of (s2 / sound-01 
            :ARG0-of (b / begin-01 
                  :ARG1 (f / float-01 
                        :ARG0 (i / i 
                              :ARG0-of (r / remember-01 
                                    :ARG1 (i2 / it 
                                          :domain-of (a3 / after 
                                                :op-of (s3 / sometime) 
                                                :op1 (m / midnight)))))) 
                  :ARG2 (a / air 
                        :time (n / night)))) 
      :op1 (s / sing-01))

# ::snt his car was battered blue and silver its fat black  rubber skirting apparently floating him above the tide of time and maggie with a delighted grin entered with him into the music and the skill and the dance which suddenly became as graceful and fluid as hippopotami swimming under water
# ::tok his car was battered blue and silver its fat black rubber skirting apparently floating him above the tide of time and maggie with a delighted grin entered with him into the music and the skill and the dance which suddenly became as graceful and fluid as hippopotami swimming under water
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.779
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt it has already indicated it hopes to float its leisure division which includes the belhaven brewery at dunbar
# ::tok it has already indicated it hopes to float its leisure division which includes the belhaven brewery at dunbar
# ::alignments 12-13|0.1.0.1.0 10-11|0.1.0.1 7-8|0.1.0 5-6|0.1 4-5|0.1.0.0 3-4|0 2-3|0.2 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:09.938
# ::node	0	indicate-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	hope-01	5-6
# ::node	0.1.0	float-01	7-8
# ::node	0.1.0.0	it	4-5
# ::node	0.1.0.1	division	10-11
# ::node	0.1.0.1.0	include-01	12-13
# ::node	0.2	already	2-3
# ::root	0	indicate-01
# ::edge	float-01	ARG0	it	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	division	0.1.0	0.1.0.1	
# ::edge	hope-01	ARG1	float-01	0.1	0.1.0	
# ::edge	include-01	ARG1	division	0.1.0.1.0	0.1.0.1	
# ::edge	indicate-01	ARG0	it	0	0.0	
# ::edge	indicate-01	ARG1	hope-01	0	0.1	
# ::edge	indicate-01	time	already	0	0.2	
(i3 / indicate-01 
      :ARG0 (i4 / it) 
      :ARG1 (h / hope-01 
            :ARG1 (f / float-01 
                  :ARG0 (i2 / it) 
                  :ARG1 (d / division 
                        :ARG1-of (i / include-01)))) 
      :time (a / already))

# ::snt its like church with the sun shining through them coloured windows and pictures of jesus with light all round and angels floating in the sky and the sun shining and all that
# ::tok its like church with the sun shining through them coloured windows and pictures of jesus with light all round and angels floating in the sky and the sun shining and all that
# ::alignments 30-31|0.1 29-30|0 27-28|0.0.0.0.0 25-26|0.0.0.0 24-25|0.0 21-22|0.0.0 19-20|0.0.0.1 18-19|0.0.0.1.2 17-18|0.0.0.1.2.0 16-17|0.0.0.1.2.0.0 12-13|0.0.0.1.1.1 11-12|0.0.0.1.1 10-11|0.0.0.1.1.0 5-6|0.0.0.1.0.0 2-3|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:10.174
# ::node	0	and	29-30
# ::node	0.0	sky	24-25
# ::node	0.0.0	float-01	21-22
# ::node	0.0.0.0	and	25-26
# ::node	0.0.0.0.0	sun	27-28
# ::node	0.0.0.1	and	19-20
# ::node	0.0.0.1.0	church	2-3
# ::node	0.0.0.1.0.0	sun	5-6
# ::node	0.0.0.1.1	and	11-12
# ::node	0.0.0.1.1.0	window	10-11
# ::node	0.0.0.1.1.1	picture	12-13
# ::node	0.0.0.1.2	round	18-19
# ::node	0.0.0.1.2.0	all	17-18
# ::node	0.0.0.1.2.0.0	light	16-17
# ::node	0.1	all	30-31
# ::root	0	and
# ::edge	all	degree	light	0.0.0.1.2.0	0.0.0.1.2.0.0	
# ::edge	and	op1	and	0.0.0.1	0.0.0.1.1	
# ::edge	and	op1	sky	0	0.0	
# ::edge	and	op1	sun	0.0.0.0	0.0.0.0.0	
# ::edge	and	op1	window	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	and	op2	picture	0.0.0.1.1	0.0.0.1.1.1	
# ::edge	and	op2	round	0.0.0.1	0.0.0.1.2	
# ::edge	and	quant	all	0	0.1	
# ::edge	church	example	and	0.0.0.1.0	0.0.0.1	
# ::edge	church	location	sun	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	float-01	ARG0	and	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	and	0.0.0	0.0.0.1	
# ::edge	float-01	ARG4	sky	0.0.0	0.0	
# ::edge	round	quant	all	0.0.0.1.2	0.0.0.1.2.0	
(a2 / and 
      :op1 (s2 / sky 
            :ARG4-of (f / float-01 
                  :ARG0 (a3 / and 
                        :op1 (s / sun)) 
                  :ARG1 (a4 / and 
                        :example-of (c / church 
                              :location (s3 / sun)) 
                        :op1 (a6 / and 
                              :op1 (w / window) 
                              :op2 (p / picture)) 
                        :op2 (r / round 
                              :quant (a5 / all 
                                    :degree (l / light)))))) 
      :quant (a / all))

# ::snt fifty yards away a pair of swans floated between green banks and that stream led a few miles further on into the river avon shakespeares river
# ::tok fifty yards away a pair of swans floated between green banks and that stream led a few miles further on into the river avon shakespeares river
# ::alignments 25-26|0.0.1 22-23|0.0.0.1 18-19|0.0.0 17-18|0.0.0.2.0+0.0.0.2 16-17|0.0.0.0 14-15|0.0 13-14|0 11-12|0.1.0.0 10-11|0.1.0.1 9-10|0.1.0.1.0 8-9|0.1 7-8|0.1.0 2-3|0.1.0.2 1-2|0.1.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:10.357
# ::node	0	stream-02	13-14
# ::node	0.0	lead-02	14-15
# ::node	0.0.0	further	18-19
# ::node	0.0.0.0	few	16-17
# ::node	0.0.0.1	river	22-23
# ::node	0.0.0.2	distance-quantity	17-18
# ::node	0.0.0.2.0	mile	17-18
# ::node	0.0.1	river	25-26
# ::node	0.1	between	8-9
# ::node	0.1.0	float-01	7-8
# ::node	0.1.0.0	and	11-12
# ::node	0.1.0.1	bank	10-11
# ::node	0.1.0.1.0	green	9-10
# ::node	0.1.0.2	away	2-3
# ::node	0.1.0.2.0	yard	1-2
# ::root	0	stream-02
(s / stream-02 
      :ARG1-of (l / lead-02 
            :ARG0 (f / further 
                  :op1 (f2 / few) 
                  :op2 (r2 / river) 
                  :quant (d / distance-quantity 
                        :unit (m / mile))) 
            :time (r / river)) 
      :op-of (b2 / between 
            :ARG2-of (f3 / float-01 
                  :ARG0 (a / and) 
                  :ARG1 (b / bank 
                        :mod (g / green)) 
                  :concession (a2 / away 
                        :direction-of (y / yard)))))

# ::snt which is not a problem in rachmaninovs third piano concerto whose first movement floats gently like a mournful ghost even with the inclusion of the more difficult alternative cadenza dash
# ::tok which is not a problem in rachmaninovs third piano concerto whose first movement floats gently like a mournful ghost even with the inclusion of the more difficult alternative cadenza dash
# ::alignments 27-28|0.0 26-27|0 18-19|0.1.2 13-14|0.1 12-13|0.1.1 8-9|0.0.0 4-5|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:10.451
# ::node	0	difficult	26-27
# ::node	0.0	alternative	27-28
# ::node	0.0.0	piano	8-9
# ::node	0.1	float-01	13-14
# ::node	0.1.0	problem	4-5
# ::node	0.1.1	movement	12-13
# ::node	0.1.2	ghost	18-19
# ::root	0	difficult
# ::edge	alternative	mod	difficult	0.0	0	
# ::edge	alternative	mod	piano	0.0	0.0.0	
# ::edge	difficult	op1	float-01	0	0.1	
# ::edge	float-01	ARG0	problem	0.1	0.1.0	
# ::edge	float-01	ARG1	movement	0.1	0.1.1	
# ::edge	float-01	manner	ghost	0.1	0.1.2	
(d / difficult 
      :mod-of (a / alternative 
            :mod (p / piano)) 
      :op1 (f / float-01 
            :ARG0 (p2 / problem) 
            :ARG1 (m / movement) 
            :manner (g / ghost)))

# ::snt as their orange balloons float around the bull and gate popping in time with the music the lollies inject heart and soul into songs like your sun and disinheritance while their enthusiastic following cavort wildly
# ::tok as their orange balloons float around the bull and gate popping in time with the music the lollies inject heart and soul into songs like your sun and disinheritance while their enthusiastic following cavort wildly
# ::alignments 27-28|0.1 26-27|0.1.2.0 23-24|0.1.2 21-22|0.0 20-21|0 19-20|0.1.0 15-16|0.2.0 12-13|0.2 8-9|0.1.1.1.1 7-8|0.1.1.1.0 5-6|0.1.1.1 4-5|0.1.1 2-3|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:10.565
# ::node	0	and	20-21
# ::node	0.0	soul	21-22
# ::node	0.1	and	27-28
# ::node	0.1.0	heart	19-20
# ::node	0.1.1	float-01	4-5
# ::node	0.1.1.0	orange	2-3
# ::node	0.1.1.1	around	5-6
# ::node	0.1.1.1.0	bull	7-8
# ::node	0.1.1.1.1	and	8-9
# ::node	0.1.2	song	23-24
# ::node	0.1.2.0	sun	26-27
# ::node	0.2	time	12-13
# ::node	0.2.0	music	15-16
# ::root	0	and
# ::edge	and	consist	heart	0.1	0.1.0	
# ::edge	and	op1	float-01	0.1	0.1.1	
# ::edge	and	op1	soul	0	0.0	
# ::edge	and	op2	and	0	0.1	
# ::edge	and	op2	song	0.1	0.1.2	
# ::edge	around	op1	bull	0.1.1.1	0.1.1.1.0	
# ::edge	around	op2	and	0.1.1.1	0.1.1.1.1	
# ::edge	float-01	ARG1	orange	0.1.1	0.1.1.0	
# ::edge	float-01	ARG2	around	0.1.1	0.1.1.1	
# ::edge	song	location	sun	0.1.2	0.1.2.0	
# ::edge	time	location	music	0.2	0.2.0	
# ::edge	time	purpose	and	0.2	0	
(a2 / and 
      :op1 (s3 / soul) 
      :op2 (a / and 
            :consist (h / heart) 
            :op1 (f / float-01 
                  :ARG1 (o / orange) 
                  :ARG2 (a4 / around 
                        :op1 (b / bull) 
                        :op2 (a3 / and))) 
            :op2 (s2 / song 
                  :location (s / sun))) 
      :purpose-of (t / time 
            :location (m / music)))

# ::snt i dont know what i imagined everyone just floating around being beautiful somehow,  well nobody floats around here
# ::tok i dont know what i imagined everyone just floating around being beautiful somehow , well nobody floats around here
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:10.567
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt as she gazed benignly at alison eating ginger cake she had a sudden very clear vision of the dead babies floating in the bath
# ::tok as she gazed benignly at alison eating ginger cake she had a sudden very clear vision of the dead babies floating in the bath
# ::alignments 23-24|0 20-21|0.2 19-20|0.2.0 14-15|0.1.0 13-14|0.1 12-13|0.0 9-10|0.2.0.0 8-9|0.2.0.0.0.1 6-7|0.2.0.0.0 1-2|0.2.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:10.917
# ::node	0	bathe-01	23-24
# ::node	0.0	sudden	12-13
# ::node	0.1	very	13-14
# ::node	0.1.0	clear	14-15
# ::node	0.2	float-01	20-21
# ::node	0.2.0	baby	19-20
# ::node	0.2.0.0	she	9-10
# ::node	0.2.0.0.0	eat-01	6-7
# ::node	0.2.0.0.0.0	she	1-2
# ::node	0.2.0.0.0.1	cake	8-9
# ::root	0	bathe-01
# ::edge	baby	poss	she	0.2.0	0.2.0.0	
# ::edge	bathe-01	ARG0	sudden	0	0.0	
# ::edge	bathe-01	ARG1	very	0	0.1	
# ::edge	clear	degree	very	0.1.0	0.1	
# ::edge	eat-01	ARG0	she	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	eat-01	ARG1	cake	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	eat-01	ARG2	she	0.2.0.0.0	0.2.0.0	
# ::edge	float-01	ARG1	baby	0.2	0.2.0	
# ::edge	float-01	ARG2	bathe-01	0.2	0	
(b / bathe-01 
      :ARG0 (s / sudden) 
      :ARG1 (v / very 
            :degree-of (c / clear)) 
      :ARG2-of (f / float-01 
            :ARG1 (b2 / baby 
                  :poss (s2 / she 
                        :ARG2-of (e / eat-01 
                              :ARG0 (s3 / she) 
                              :ARG1 (c2 / cake))))))

# ::snt   after a meeting lasting more than four hours at old trafford manchester united chairman martin edwards the majority shareholder said that the proposal to float a share issue had been debated in a friendly and full manner
# ::tok after a meeting lasting more than four hours at old trafford manchester united chairman martin edwards the majority shareholder said that the proposal to float a share issue had been debated in a friendly and full manner
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:10.918
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the sound of the water the rocking and splashing ellip sometimes at night the music of boatmen would come floating up blown by the waves and wind a flute playing the music of the river
# ::tok the sound of the water the rocking and splashing ellip sometimes at night the music of boatmen would come floating up blown by the waves and wind a flute playing the music of the river
# ::alignments 34-35|0.0.2.0.2 31-32|0.0.2.0.1 29-30|0.0.2.0 26-27|0.0.2 25-26|0.0 24-25|0.0.1 19-20|0.0.0.0 16-17|0.0.0.0.0 14-15|0.0.0 12-13|0.0.0.1 10-11|0.0.2.0.0 7-8|0 4-5|0.1.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:11.272
# ::node	0	and	7-8
# ::node	0.0	and	25-26
# ::node	0.0.0	music	14-15
# ::node	0.0.0.0	float-01	19-20
# ::node	0.0.0.0.0	boatman	16-17
# ::node	0.0.0.1	night	12-13
# ::node	0.0.1	wave	24-25
# ::node	0.0.2	wind	26-27
# ::node	0.0.2.0	play-01	29-30
# ::node	0.0.2.0.0	sometimes	10-11
# ::node	0.0.2.0.1	music	31-32
# ::node	0.0.2.0.2	river	34-35
# ::node	0.1	sound	1-2
# ::node	0.1.0	water	4-5
# ::root	0	and
# ::edge	and	op1	and	0.0	0	
# ::edge	and	op1	sound	0	0.1	
# ::edge	and	op2	music	0.0	0.0.0	
# ::edge	and	op3	wave	0.0	0.0.1	
# ::edge	and	op4	wind	0.0	0.0.2	
# ::edge	float-01	ARG0	music	0.0.0.0	0.0.0	
# ::edge	float-01	ARG1	boatman	0.0.0.0	0.0.0.0.0	
# ::edge	music	poss	night	0.0.0	0.0.0.1	
# ::edge	play-01	ARG0	sometimes	0.0.2.0	0.0.2.0.0	
# ::edge	play-01	ARG1	music	0.0.2.0	0.0.2.0.1	
# ::edge	play-01	location	river	0.0.2.0	0.0.2.0.2	
# ::edge	sound	location	water	0.1	0.1.0	
# ::edge	wind	op1	play-01	0.0.2	0.0.2.0	
(a2 / and 
      :op-of (a / and 
            :op1 (m2 / music 
                  :ARG0-of (f / float-01 
                        :ARG1 (b / boatman)) 
                  :poss (n / night)) 
            :op2 (w2 / wave) 
            :op3 (w / wind 
                  :op1 (p / play-01 
                        :ARG0 (s / sometimes) 
                        :ARG1 (m / music) 
                        :location (r / river)))) 
      :op1 (s2 / sound 
            :location (w3 / water)))

# ::snt that idea floated about a week ago immediately gave rise to a spate of sick jokes a cartoon in one paper depicted two doctors operating under the hallowed socialistrealist frescoes on the ailing figures of lenin and marx
# ::tok that idea floated about a week ago immediately gave rise to a spate of sick jokes a cartoon in one paper depicted two doctors operating under the hallowed socialistrealist frescoes on the ailing figures of lenin and marx
# ::alignments 36-37|0 33-34|0.2 24-25|0.1 23-24|0.1.0 22-23|0.1.0.0 21-22|0.1.1 20-21|0.1.1.0 17-18|0.1.1.1 15-16|0.0 14-15|0.0.0 9-10|0.1.1.1.0 7-8|0.1.1.1.0.0 5-6|0.1.1.1.0.1.1 2-3|0.1.1.1.0.1 1-2|0.1.1.1.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:12.132
# ::node	0	and	36-37
# ::node	0.0	joke-01	15-16
# ::node	0.0.0	sick	14-15
# ::node	0.1	operate-01	24-25
# ::node	0.1.0	doctor	23-24
# ::node	0.1.0.0	2	22-23
# ::node	0.1.1	depict-01	21-22
# ::node	0.1.1.0	paper	20-21
# ::node	0.1.1.1	cartoon	17-18
# ::node	0.1.1.1.0	rise-01	9-10
# ::node	0.1.1.1.0.0	immediate	7-8
# ::node	0.1.1.1.0.1	float-01	2-3
# ::node	0.1.1.1.0.1.0	idea	1-2
# ::node	0.1.1.1.0.1.1	week	5-6
# ::node	0.2	figure	33-34
# ::root	0	and
# ::edge	and	op1	joke-01	0	0.0	
# ::edge	and	op2	operate-01	0	0.1	
# ::edge	depict-01	ARG0	paper	0.1.1	0.1.1.0	
# ::edge	depict-01	ARG1	operate-01	0.1.1	0.1	
# ::edge	depict-01	consist	cartoon	0.1.1	0.1.1.1	
# ::edge	doctor	quant	2	0.1.0	0.1.0.0	
# ::edge	figure	source	and	0.2	0	
# ::edge	float-01	ARG0	rise-01	0.1.1.1.0.1	0.1.1.1.0	
# ::edge	float-01	ARG1	idea	0.1.1.1.0.1	0.1.1.1.0.1.0	
# ::edge	float-01	time	week	0.1.1.1.0.1	0.1.1.1.0.1.1	
# ::edge	joke-01	mod	sick	0.0	0.0.0	
# ::edge	operate-01	ARG1	doctor	0.1	0.1.0	
# ::edge	rise-01	ARG0	immediate	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	rise-01	ARG1	cartoon	0.1.1.1.0	0.1.1.1	
(a / and 
      :op1 (j / joke-01 
            :mod (s / sick)) 
      :op2 (o / operate-01 
            :ARG1 (d / doctor 
                  :quant 2) 
            :ARG1-of (d2 / depict-01 
                  :ARG0 (p / paper) 
                  :consist (c / cartoon 
                        :ARG1-of (r / rise-01 
                              :ARG0 (i / immediate) 
                              :ARG0-of (f2 / float-01 
                                    :ARG1 (i2 / idea) 
                                    :time (w / week)))))) 
      :source-of (f / figure))

# ::snt his eyebrows floated over glasgow and his mouth seemed to toy with eating leeds
# ::tok his eyebrows floated over glasgow and his mouth seemed to toy with eating leeds
# ::alignments 12-13|0.0.0 8-9|0 7-8|0.0.2 5-6|0.0 2-3|0.0.1 1-2|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:12.161
# ::node	0	seem-01	8-9
# ::node	0.0	and	5-6
# ::node	0.0.0	eat-01	12-13
# ::node	0.0.1	float-01	2-3
# ::node	0.0.1.0	eyebrow	1-2
# ::node	0.0.2	mouth	7-8
# ::root	0	seem-01
# ::edge	and	op1	float-01	0.0	0.0.1	
# ::edge	and	op2	mouth	0.0	0.0.2	
# ::edge	eat-01	ARG1	and	0.0.0	0.0	
# ::edge	float-01	ARG1	eyebrow	0.0.1	0.0.1.0	
# ::edge	seem-01	ARG0	and	0	0.0	
(s / seem-01 
      :ARG0 (a / and 
            :ARG1-of (e / eat-01) 
            :op1 (f / float-01 
                  :ARG1 (e2 / eyebrow)) 
            :op2 (m / mouth)))

# ::snt milton had floated over the jumpoff fences before walzerkoenig jetted across them to win by 2
# ::tok milton had floated over the jumpoff fences before walzerkoenig jetted across them to win by 2
# ::alignments 15-16|0.1.0.0 13-14|0 10-11|0.0 7-8|0.1.0.1 6-7|0.1 2-3|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:12.218
# ::node	0	win-01	13-14
# ::node	0.0	across	10-11
# ::node	0.1	fence	6-7
# ::node	0.1.0	float-01	2-3
# ::node	0.1.0.0	2	15-16
# ::node	0.1.0.1	before	7-8
# ::root	0	win-01
# ::edge	float-01	ARG0	2	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	fence	0.1.0	0.1	
# ::edge	float-01	time	before	0.1.0	0.1.0.1	
# ::edge	win-01	ARG0	across	0	0.0	
# ::edge	win-01	ARG1	fence	0	0.1	
(w / win-01 
      :ARG0 (a / across) 
      :ARG1 (f / fence 
            :ARG1-of (f2 / float-01 
                  :ARG0 2 
                  :time (b / before))))

# ::snt privileged access and the intuitive support of such notable literary figures as norman mailer and budd schulberg enabled jose torres to compile float like a butterfly a penetrating study of the young muhammad ali
# ::tok privileged access and the intuitive support of such notable literary figures as norman mailer and budd schulberg enabled jose torres to compile float like a butterfly a penetrating study of the young muhammad ali
# ::alignments 31-32|0.0.0.2.0 28-29|0.0.0.1.0 27-28|0.0.0.1.0.0 22-23|0.0.0.0 17-18|0.0 14-15|0 10-11|0.1 9-10|0.1.1 7-8|0.1.0 5-6|0.0.0.2 2-3|0.0.0 1-2|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:12.408
# ::node	0	and	14-15
# ::node	0.0	enable-01	17-18
# ::node	0.0.0	and	2-3
# ::node	0.0.0.0	float-01	22-23
# ::node	0.0.0.1	access-01	1-2
# ::node	0.0.0.1.0	study-01	28-29
# ::node	0.0.0.1.0.0	penetrate-01	27-28
# ::node	0.0.0.2	support-01	5-6
# ::node	0.0.0.2.0	young	31-32
# ::node	0.1	figure	10-11
# ::node	0.1.0	such	7-8
# ::node	0.1.1	literary	9-10
# ::root	0	and
(a / and 
      :ARG1-of (e / enable-01 
            :ARG0 (a2 / and 
                  :ARG1-of (f / float-01) 
                  :op1 (a3 / access-01 
                        :ARG1-of (s / study-01 
                              :ARG1-of (p / penetrate-01))) 
                  :op2 (s3 / support-01 
                        :ARG1 (y / young)))) 
      :source-of (f2 / figure 
            :mod (s2 / such) 
            :mod (l / literary)))

# ::snt government advisers are known to have recommended recently that it should abandon the sale of national power this side of the election and float just powergen and the distribution companies
# ::tok government advisers are known to have recommended recently that it should abandon the sale of national power this side of the election and float just powergen and the distribution companies
# ::alignments 29-30|0.2 28-29|0.2.0 26-27|0 24-25|0.1 23-24|0.0 22-23|0.0.0 21-22|0.2.0.0.0 18-19|0.2.0.0 17-18|0.2.0.0.1 16-17|0.0.0.1.1 15-16|0.0.0.1.1.0 11-12|0.0.0.1 10-11|0.0.0.1.2 9-10|0.0.0.1.0 7-8|0.0.0.0.1 6-7|0.0.0.0 3-4|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:13.431
# ::node	0	and	26-27
# ::node	0.0	float-01	23-24
# ::node	0.0.0	and	22-23
# ::node	0.0.0.0	recommend-01	6-7
# ::node	0.0.0.0.0	know-01	3-4
# ::node	0.0.0.0.1	recent	7-8
# ::node	0.0.0.1	abandon-01	11-12
# ::node	0.0.0.1.0	it	9-10
# ::node	0.0.0.1.1	power	16-17
# ::node	0.0.0.1.1.0	nation	15-16
# ::node	0.0.0.1.2	recommend-01	10-11
# ::node	0.1	just	24-25
# ::node	0.2	company	29-30
# ::node	0.2.0	distribute-01	28-29
# ::node	0.2.0.0	side	18-19
# ::node	0.2.0.0.0	elect-01	21-22
# ::node	0.2.0.0.1	this	17-18
# ::root	0	and
# ::edge	abandon-01	ARG0	it	0.0.0.1	0.0.0.1.0	
# ::edge	abandon-01	ARG1	power	0.0.0.1	0.0.0.1.1	
# ::edge	and	mod	just	0	0.1	
# ::edge	and	op1	abandon-01	0.0.0	0.0.0.1	
# ::edge	and	op1	company	0	0.2	
# ::edge	and	op2	float-01	0.0.0	0.0	
# ::edge	distribute-01	ARG0	company	0.2.0	0.2	
# ::edge	distribute-01	ARG1	side	0.2.0	0.2.0.0	
# ::edge	elect-01	ARG0	side	0.2.0.0.0	0.2.0.0	
# ::edge	float-01	ARG1	and	0.0	0	
# ::edge	know-01	ARG1	recommend-01	0.0.0.0.0	0.0.0.0	
# ::edge	power	mod	nation	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	recommend-01	ARG1	abandon-01	0.0.0.1.2	0.0.0.1	
# ::edge	recommend-01	ARG1	and	0.0.0.0	0.0.0	
# ::edge	recommend-01	time	recent	0.0.0.0	0.0.0.0.1	
# ::edge	side	mod	this	0.2.0.0	0.2.0.0.1	
(a / and 
      :ARG1-of (f / float-01 
            :op-of (a2 / and 
                  :ARG1-of (r3 / recommend-01 
                        :ARG1-of (k / know-01) 
                        :time (r2 / recent)) 
                  :op1 (a3 / abandon-01 
                        :ARG0 (i / it) 
                        :ARG1 (p / power 
                              :mod (n / nation)) 
                        :ARG1-of (r / recommend-01)))) 
      :mod (j / just) 
      :op1 (c / company 
            :ARG0-of (d / distribute-01 
                  :ARG1 (s / side 
                        :ARG0-of (e / elect-01) 
                        :mod (t / this)))))

# ::snt serve with very thinly sliced cucumber and chopped dill floating on top
# ::tok serve with very thinly sliced cucumber and chopped dill floating on top
# ::alignments 11-12|0.0.1.0 9-10|0.0.1 6-7|0.0 4-5|0.0.0 2-3|0.0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:13.509
# ::node	0	serve-01	0-1
# ::node	0.0	and	6-7
# ::node	0.0.0	slice-01	4-5
# ::node	0.0.0.0	very	2-3
# ::node	0.0.1	float-01	9-10
# ::node	0.0.1.0	top	11-12
# ::root	0	serve-01
# ::edge	float-01	ARG1	and	0.0.1	0.0	
# ::edge	float-01	location	top	0.0.1	0.0.1.0	
# ::edge	serve-01	ARG1	and	0	0.0	
# ::edge	slice-01	ARG1	and	0.0.0	0.0	
# ::edge	slice-01	degree	very	0.0.0	0.0.0.0	
(s2 / serve-01 
      :ARG1 (a / and 
            :ARG1-of (s / slice-01 
                  :degree (v / very)) 
            :ARG1-of (f / float-01 
                  :location (t / top))))

# ::snt angel has the opposite effect presenting something that you know to be solid yet making it insubstantial shrouding it in a blue so brilliant that it seems to shift and float in space
# ::tok angel has the opposite effect presenting something that you know to be solid yet making it insubstantial shrouding it in a blue so brilliant that it seems to shift and float in space
# ::alignments 32-33|0.1.0.0.1 30-31|0.1 29-30|0 28-29|0.1.0.0 26-27|0.0 25-26|0.1.0 22-23|0.0.1 21-22|0.0.0 18-19|0.1.1 15-16|0.1.0.0.0.0.1 13-14|0.1.0.0.0.0.0.0.0.0.0.0 12-13|0.1.0.0.0.0.0.0.0.0.0 9-10|0.1.0.0.0.0.0.0.0 8-9|0.1.0.0.0.0.0.0.0.0 6-7|0.1.0.0.0.0.0.0 5-6|0.1.0.0.0.0.0 4-5|0.1.0.0.0.0 3-4|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:14.326
# ::node	0	and	29-30
# ::node	0.0	seem-01	26-27
# ::node	0.0.0	blue	21-22
# ::node	0.0.1	so	22-23
# ::node	0.1	float-01	30-31
# ::node	0.1.0	it	25-26
# ::node	0.1.0.0	shift-01	28-29
# ::node	0.1.0.0.0	opposite-41	3-4
# ::node	0.1.0.0.0.0	effect-01	4-5
# ::node	0.1.0.0.0.0.0	present-01	5-6
# ::node	0.1.0.0.0.0.0.0	something	6-7
# ::node	0.1.0.0.0.0.0.0.0	know-01	9-10
# ::node	0.1.0.0.0.0.0.0.0.0	you	8-9
# ::node	0.1.0.0.0.0.0.0.0.0.0	solid	12-13
# ::node	0.1.0.0.0.0.0.0.0.0.0.0	yet	13-14
# ::node	0.1.0.0.0.0.1	it	15-16
# ::node	0.1.0.0.1	space	32-33
# ::node	0.1.1	it	18-19
# ::root	0	and
# ::edge	and	op1	float-01	0	0.1	
# ::edge	effect-01	ARG1	it	0.1.0.0.0.0	0.1.0.0.0.0.1	
# ::edge	float-01	ARG0	it	0.1	0.1.0	
# ::edge	float-01	ARG1	it	0.1	0.1.1	
# ::edge	know-01	ARG0	you	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.0	
# ::edge	know-01	ARG1	something	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	opposite-41	ARG1	effect-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	present-01	ARG0	effect-01	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	present-01	ARG1	something	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	seem-01	ARG0	blue	0.0	0.0.0	
# ::edge	seem-01	ARG1	and	0.0	0	
# ::edge	shift-01	ARG0	it	0.1.0.0	0.1.0	
# ::edge	shift-01	ARG1	opposite-41	0.1.0.0	0.1.0.0.0	
# ::edge	shift-01	location	space	0.1.0.0	0.1.0.0.1	
# ::edge	so	condition	seem-01	0.0.1	0.0	
# ::edge	solid	domain	you	0.1.0.0.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.0	
# ::edge	solid	time	yet	0.1.0.0.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.0.0.0	
(a / and 
      :ARG1-of (s3 / seem-01 
            :ARG0 (b / blue) 
            :condition-of (s4 / so)) 
      :op1 (f / float-01 
            :ARG0 (i / it 
                  :ARG0-of (s2 / shift-01 
                        :ARG1 (o / opposite-41 
                              :ARG1 (e / effect-01 
                                    :ARG0-of (p / present-01 
                                          :ARG1 (s6 / something 
                                                :ARG1-of (k / know-01 
                                                      :ARG0 (y2 / you 
                                                            :domain-of (s5 / solid 
                                                                  :time (y / yet)))))) 
                                    :ARG1 (i3 / it))) 
                        :location (s / space))) 
            :ARG1 (i2 / it)))

# ::snt the words were distinct enough though weird words droning insidiously into a young mind floating on a ninesailed ship into the ocean of sleep the other world he had already come to cherish
# ::tok the words were distinct enough though weird words droning insidiously into a young mind floating on a ninesailed ship into the ocean of sleep the other world he had already come to cherish
# ::alignments 29-30|0.2.0.2.0.0 27-28|0.2.0.0 26-27|0.2.0.1 25-26|0.2.0.1.0 23-24|0.2.0 21-22|0.2.0.2 18-19|0.2.0.2.0.2 14-15|0.2.0.2.0 13-14|0.2.0.2.0.1 12-13|0.2.0.2.0.1.0 7-8|0.2 6-7|0.2.1 4-5|0.0 3-4|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:14.616
# ::node	0	distinct	3-4
# ::node	0.0	enough	4-5
# ::node	0.1	word	1-2
# ::node	0.2	word	7-8
# ::node	0.2.0	sleep-01	23-24
# ::node	0.2.0.0	he	27-28
# ::node	0.2.0.1	world	26-27
# ::node	0.2.0.1.0	other	25-26
# ::node	0.2.0.2	ocean	21-22
# ::node	0.2.0.2.0	float-01	14-15
# ::node	0.2.0.2.0.0	already	29-30
# ::node	0.2.0.2.0.1	mind	13-14
# ::node	0.2.0.2.0.1.0	young	12-13
# ::node	0.2.0.2.0.2	ship	18-19
# ::node	0.2.1	weird	6-7
# ::root	0	distinct
# ::edge	distinct	degree	enough	0	0.0	
# ::edge	distinct	domain	word	0	0.1	
# ::edge	float-01	ARG0	already	0.2.0.2.0	0.2.0.2.0.0	
# ::edge	float-01	ARG1	mind	0.2.0.2.0	0.2.0.2.0.1	
# ::edge	float-01	ARG2	ship	0.2.0.2.0	0.2.0.2.0.2	
# ::edge	float-01	location	ocean	0.2.0.2.0	0.2.0.2	
# ::edge	mind	mod	young	0.2.0.2.0.1	0.2.0.2.0.1.0	
# ::edge	ocean	topic	sleep-01	0.2.0.2	0.2.0	
# ::edge	sleep-01	ARG0	he	0.2.0	0.2.0.0	
# ::edge	sleep-01	ARG1	word	0.2.0	0.2	
# ::edge	sleep-01	ARG2	world	0.2.0	0.2.0.1	
# ::edge	word	manner	distinct	0.2	0	
# ::edge	word	mod	weird	0.2	0.2.1	
# ::edge	world	mod	other	0.2.0.1	0.2.0.1.0	
(d / distinct 
      :degree (e / enough) 
      :domain (w4 / word) 
      :manner-of (w2 / word 
            :ARG1-of (s / sleep-01 
                  :ARG0 (h / he) 
                  :ARG2 (w / world 
                        :mod (o / other)) 
                  :topic-of (o2 / ocean 
                        :location-of (f / float-01 
                              :ARG0 (a / already) 
                              :ARG1 (m / mind 
                                    :mod (y / young)) 
                              :ARG2 (s2 / ship)))) 
            :mod (w3 / weird)))

# ::snt gordon jones chairman of yorkshire water and of the water authorities association has pledged to shave off his beard as soon as the 10 water companies are floated
# ::tok gordon jones chairman of yorkshire water and of the water authorities association has pledged to shave off his beard as soon as the 10 water companies are floated
# ::alignments 27-28|0.0.1.0.1.0 25-26|0.0.1.0.1 24-25|0.0.1.0.1.1 23-24|0.0.1.0.0 20-21|0.0.1.2 16-17|0.0.1.1 15-16|0.0.1 13-14|0.0 11-12|0.0.2 10-11|0.0.2.0 9-10|0.0.2.1 6-7|0 5-6|0.0.0 2-3|0.0.1.0.2+0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:14.937
# ::node	0	and	6-7
# ::node	0.0	pledge-01	13-14
# ::node	0.0.0	water	5-6
# ::node	0.0.1	shave-01	15-16
# ::node	0.0.1.0	have-org-role-91	2-3
# ::node	0.0.1.0.0	10	23-24
# ::node	0.0.1.0.1	company	25-26
# ::node	0.0.1.0.1.0	float-01	27-28
# ::node	0.0.1.0.1.1	water	24-25
# ::node	0.0.1.0.2	chairman	2-3
# ::node	0.0.1.1	off	16-17
# ::node	0.0.1.2	soon	20-21
# ::node	0.0.2	associate-01	11-12
# ::node	0.0.2.0	authority	10-11
# ::node	0.0.2.1	water	9-10
# ::root	0	and
(a3 / and 
      :ARG0-of (p / pledge-01 
            :ARG1 (w3 / water) 
            :ARG2 (s2 / shave-01 
                  :ARG1 (h / have-org-role-91 
                        :ARG0 10 
                        :ARG1 (c / company 
                              :ARG1-of (f / float-01) 
                              :mod (w / water)) 
                        :ARG2 (c2 / chairman)) 
                  :direction (o / off) 
                  :time (s / soon)) 
            :time (a / associate-01 
                  :ARG0 (a2 / authority) 
                  :ARG1 (w2 / water))))

# ::snt two men are due to appear in court today in connection with an incident in which petrol bombs were thrown in the park village area of wolverhampton west midlands  eleven people were arrested after police stopped a convoy of vehicles and siezed sound and stage equipment intended for use at an acid house party at rushington near totton in hampshire a severed human leg wrapped in a plastic bag was found floating in the grand union canal in regents park central london
# ::tok two men are due to appear in court today in connection with an incident in which petrol bombs were thrown in the park village area of wolverhampton west midlands eleven people were arrested after police stopped a convoy of vehicles and siezed sound and stage equipment intended for use at an acid house party at rushington near totton in hampshire a severed human leg wrapped in a plastic bag was found floating in the grand union canal in regents park central london
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:14.940
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt since floating at the equivalent of 35p in 1978 the de haans have found that it has been impossible to reconcile its desire to retain a dominant position on the share register with the need to diversify away from an increasingly cyclical travel industry
# ::tok since floating at the equivalent of 35p in 1978 the de haans have found that it has been impossible to reconcile its desire to retain a dominant position on the share register with the need to diversify away from an increasingly cyclical travel industry
# ::alignments 43-44|0.0.1.0.0.0 42-43|0.0.1.0.0.0.1 40-41|0.0.1.0.0.0.0 37-38|0.0.1.0.0.1.1 36-37|0.0.1.0.0.1 34-35|0.0.1.0.0 31-32|0.0.1.0 30-31|0.0.1.0.0.1.0 27-28|0.0.1.0.0.1.0.1.1.0 26-27|0.0.1.0.0.1.0.1.1.0.0 24-25|0.0.1.0.0.1.0.1.1 22-23|0.0.1.0.0.1.0.1 15-16|0.0.1.0.0.1.0.1.0 13-14|0 8-9|0.0.1.0.0.1.0.0.0+0.0.1.0.0.1.0.0 4-5|0.0.0 1-2|0.0 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:15.329
# ::node	0	find-01	13-14
# ::node	0.0	float-01	1-2
# ::node	0.0.0	equivalent	4-5
# ::node	0.0.1	since	0-1
# ::node	0.0.1.0	register-02	31-32
# ::node	0.0.1.0.0	need-01	34-35
# ::node	0.0.1.0.0.0	industry	43-44
# ::node	0.0.1.0.0.0.0	increase-01	40-41
# ::node	0.0.1.0.0.0.1	travel-01	42-43
# ::node	0.0.1.0.0.1	diversify-01	36-37
# ::node	0.0.1.0.0.1.0	share-01	30-31
# ::node	0.0.1.0.0.1.0.0	date-entity	8-9
# ::node	0.0.1.0.0.1.0.0.0	1978	8-9
# ::node	0.0.1.0.0.1.0.1	desire-01	22-23
# ::node	0.0.1.0.0.1.0.1.0	it	15-16
# ::node	0.0.1.0.0.1.0.1.1	retain-01	24-25
# ::node	0.0.1.0.0.1.0.1.1.0	position	27-28
# ::node	0.0.1.0.0.1.0.1.1.0.0	dominate-01	26-27
# ::node	0.0.1.0.0.1.1	away	37-38
# ::root	0	find-01
(f / find-01 
      :ARG1-of (f2 / float-01 
            :ARG0 (e / equivalent) 
            :op-of (s2 / since 
                  :op1 (r / register-02 
                        :ARG0 (n / need-01 
                              :ARG0 (i / industry 
                                    :ARG1-of (i2 / increase-01) 
                                    :mod (t / travel-01)) 
                              :ARG1 (d / diversify-01 
                                    :ARG0 (s / share-01 
                                          :ARG0 (d4 / date-entity 
                                                :year 1978) 
                                          :ARG1 (d3 / desire-01 
                                                :ARG0 (i3 / it) 
                                                :ARG1 (r2 / retain-01 
                                                      :ARG1 (p / position 
                                                            :ARG1-of (d2 / dominate-01))))) 
                                    :direction (a / away)))))))

# ::snt the sale of the shares in big which was partially floated by mr bond last year came as his hong kong subsidiary disclosed that the master bond corporation had failed to repay part of a loan on schedule
# ::tok the sale of the shares in big which was partially floated by mr bond last year came as his hong kong subsidiary disclosed that the master bond corporation had failed to repay part of a loan on schedule
# ::alignments 37-38|0 35-36|0.0 31-32|0.0.0 29-30|0.0.0.1 27-28|0.0.0.0 25-26|0.0.0.1.0 22-23|0.0.0.1.2 21-22|0.0.0.1.2.0 19-21|0.0.0.1.2.0.0.0.0+0.0.0.1.2.0.0.0.1+0.0.0.1.2.0.0.0+0.0.0.1.2.0.0 15-16|0.0.0.1.2.0.1 14-15|0.0.0.1.2.0.1.0 10-11|0.0.0.1.2.0.1.1 9-10|0.0.0.1.2.0.1.1.1 6-7|0.0.0.1.1 4-5|0.0.0.1.2.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:15.500
# ::node	0	schedule-01	37-38
# ::node	0.0	loan-01	35-36
# ::node	0.0.0	repay-01	31-32
# ::node	0.0.0.0	corporation	27-28
# ::node	0.0.0.1	fail-01	29-30
# ::node	0.0.0.1.0	master	25-26
# ::node	0.0.0.1.1	big	6-7
# ::node	0.0.0.1.2	disclose-01	22-23
# ::node	0.0.0.1.2.0	subsidiary	21-22
# ::node	0.0.0.1.2.0.0	country	19-21
# ::node	0.0.0.1.2.0.0.0	name	19-21
# ::node	0.0.0.1.2.0.0.0.0	"kong"	19-21
# ::node	0.0.0.1.2.0.0.0.1	"hong"	19-21
# ::node	0.0.0.1.2.0.1	year	15-16
# ::node	0.0.0.1.2.0.1.0	last	14-15
# ::node	0.0.0.1.2.0.1.1	float-01	10-11
# ::node	0.0.0.1.2.0.1.1.0	share	4-5
# ::node	0.0.0.1.2.0.1.1.1	partial	9-10
# ::root	0	schedule-01
(s / schedule-01 
      :ARG1-of (l / loan-01 
            :ARG1-of (r / repay-01 
                  :ARG0 (c / corporation) 
                  :ARG2-of (f / fail-01 
                        :ARG0 (m / master) 
                        :ARG1 (b / big) 
                        :ARG1-of (d / disclose-01 
                              :ARG0 (s2 / subsidiary 
                                    :location (c2 / country 
                                          :name (n / name 
                                                :op1 "kong" 
                                                :op2 "hong")) 
                                    :poss (y / year 
                                          :mod (l2 / last) 
                                          :time-of (f2 / float-01 
                                                :ARG1 (s3 / share) 
                                                :manner (p / partial)))))))))

# ::snt the thirtysomethings hovered over their offspring words floating from them like identity therapist and loudest of all midlife review
# ::tok the thirtysomethings hovered over their offspring words floating from them like identity therapist and loudest of all midlife review
# ::alignments 18-19|0.1.0.0.1 16-17|0.1.0.0.1.0 14-15|0.0.0+0.0 13-14|0 12-13|0.1 11-12|0.1.0 7-8|0.1.0.0 6-7|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:15.551
# ::node	0	and	13-14
# ::node	0.0	loud	14-15
# ::node	0.0.0	most	14-15
# ::node	0.1	therapist	12-13
# ::node	0.1.0	identity	11-12
# ::node	0.1.0.0	float-01	7-8
# ::node	0.1.0.0.0	word	6-7
# ::node	0.1.0.0.1	review-01	18-19
# ::node	0.1.0.0.1.0	all	16-17
# ::root	0	and
# ::edge	and	op1	therapist	0	0.1	
# ::edge	float-01	ARG0	word	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	identity	0.1.0.0	0.1.0	
# ::edge	loud	degree	most	0.0	0.0.0	
# ::edge	loud	mod	and	0.0	0	
# ::edge	review-01	ARG1	float-01	0.1.0.0.1	0.1.0.0	
# ::edge	review-01	quant	all	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	therapist	mod	identity	0.1	0.1.0	
(a2 / and 
      :mod-of (l / loud 
            :degree (m / most)) 
      :op1 (t / therapist 
            :mod (i / identity 
                  :ARG1-of (f / float-01 
                        :ARG0 (w / word) 
                        :ARG1-of (r / review-01 
                              :quant (a / all))))))

# ::snt at a crowded meeting in london shareholders approved the resolutions which will allow bat to sell its us retailing interests and to float off argos and its paper interests
# ::tok at a crowded meeting in london shareholders approved the resolutions which will allow bat to sell its us retailing interests and to float off argos and its paper interests
# ::alignments 28-29|0.2.0.1 27-28|0.2.0.0.1 25-26|0.2.0 24-25|0.2.0.0.0.0+0.2.0.0.0+0.2.0.0 23-24|0.2.1 22-23|0.2 20-21|0 19-20|0.1.0 15-16|0.1 12-13|0.0 9-10|0.0.0 7-8|0.0.0.0 5-6|0.0.0.0.0.1.0.0+0.0.0.0.0.1.0+0.0.0.0.0.1 3-4|0.0.0.0.0 2-3|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:15.940
# ::node	0	and	20-21
# ::node	0.0	allow-01	12-13
# ::node	0.0.0	resolution	9-10
# ::node	0.0.0.0	approve-01	7-8
# ::node	0.0.0.0.0	meet-03	3-4
# ::node	0.0.0.0.0.0	crowd-01	2-3
# ::node	0.0.0.0.0.1	city	5-6
# ::node	0.0.0.0.0.1.0	name	5-6
# ::node	0.0.0.0.0.1.0.0	"London"	5-6
# ::node	0.1	sell-01	15-16
# ::node	0.1.0	interest	19-20
# ::node	0.2	float-01	22-23
# ::node	0.2.0	and	25-26
# ::node	0.2.0.0	company	24-25
# ::node	0.2.0.0.0	name	24-25
# ::node	0.2.0.0.0.0	"Argos"	24-25
# ::node	0.2.0.0.1	paper	27-28
# ::node	0.2.0.1	interest	28-29
# ::node	0.2.1	off	23-24
# ::root	0	and
# ::edge	allow-01	ARG0	resolution	0.0	0.0.0	
# ::edge	allow-01	ARG1	and	0.0	0	
# ::edge	and	op1	company	0.2.0	0.2.0.0	
# ::edge	and	op1	sell-01	0	0.1	
# ::edge	and	op2	float-01	0	0.2	
# ::edge	and	op2	interest	0.2.0	0.2.0.1	
# ::edge	approve-01	ARG1	resolution	0.0.0.0	0.0.0	
# ::edge	approve-01	medium	meet-03	0.0.0.0	0.0.0.0.0	
# ::edge	city	name	name	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	company	name	name	0.2.0.0	0.2.0.0.0	
# ::edge	crowd-01	ARG1	meet-03	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG1	and	0.2	0.2.0	
# ::edge	float-01	ARG2	off	0.2	0.2.1	
# ::edge	meet-03	location	city	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	name	op1	"Argos"	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	name	op1	"London"	0.0.0.0.0.1.0	0.0.0.0.0.1.0.0	
# ::edge	paper	poss	company	0.2.0.0.1	0.2.0.0	
# ::edge	sell-01	ARG1	interest	0.1	0.1.0	
(a2 / and 
      :ARG1-of (a3 / allow-01 
            :ARG0 (r / resolution 
                  :ARG1-of (a4 / approve-01 
                        :medium (m / meet-03 
                              :ARG1-of (c3 / crowd-01) 
                              :location (c2 / city 
                                    :name (n2 / name 
                                          :op1 "London")))))) 
      :op1 (s / sell-01 
            :ARG1 (i2 / interest)) 
      :op2 (f / float-01 
            :ARG1 (a / and 
                  :op1 (c / company 
                        :name (n / name 
                              :op1 "Argos") 
                        :poss-of (p / paper)) 
                  :op2 (i / interest)) 
            :ARG2 (o / off)))

# ::snt it was so cold that she didnt even feel her body go numb simply floated in a kind of limbo watching the reeds sway in the breeze the trees beyond
# ::tok it was so cold that she didnt even feel her body go numb simply floated in a kind of limbo watching the reeds sway in the breeze the trees beyond
# ::alignments 29-30|0.2.0 28-29|0.2 23-24|0 20-21|0.1 17-18|0.1.0 14-15|0.1.1 13-14|0.1.1.0 10-11|0.0.0.0.1 8-9|0.0.0.0 5-6|0.0.0.0.0 3-4|0.0.0 2-3|0.0 0-1|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:16.173
# ::node	0	sway-01	23-24
# ::node	0.0	so	2-3
# ::node	0.0.0	cold	3-4
# ::node	0.0.0.0	feel-01	8-9
# ::node	0.0.0.0.0	she	5-6
# ::node	0.0.0.0.1	body	10-11
# ::node	0.0.0.1	it	0-1
# ::node	0.1	watch-01	20-21
# ::node	0.1.0	kind	17-18
# ::node	0.1.1	float-01	14-15
# ::node	0.1.1.0	simple	13-14
# ::node	0.2	tree	28-29
# ::node	0.2.0	beyond	29-30
# ::root	0	sway-01
# ::edge	cold	condition	feel-01	0.0.0	0.0.0.0	
# ::edge	cold	degree	so	0.0.0	0.0	
# ::edge	cold	domain	it	0.0.0	0.0.0.1	
# ::edge	feel-01	ARG0	she	0.0.0.0	0.0.0.0.0	
# ::edge	feel-01	ARG1	body	0.0.0.0	0.0.0.0.1	
# ::edge	float-01	ARG1	watch-01	0.1.1	0.1	
# ::edge	float-01	manner	simple	0.1.1	0.1.1.0	
# ::edge	sway-01	ARG1	so	0	0.0	
# ::edge	sway-01	time	tree	0	0.2	
# ::edge	tree	location	beyond	0.2	0.2.0	
# ::edge	watch-01	ARG0	kind	0.1	0.1.0	
# ::edge	watch-01	ARG1	sway-01	0.1	0	
(s / sway-01 
      :ARG1 (s4 / so 
            :degree-of (c / cold 
                  :condition (f2 / feel-01 
                        :ARG0 (s3 / she) 
                        :ARG1 (b2 / body)) 
                  :domain (i / it))) 
      :ARG1-of (w / watch-01 
            :ARG0 (k / kind) 
            :ARG1-of (f / float-01 
                  :manner (s2 / simple))) 
      :time (t / tree 
            :location (b / beyond)))

# ::snt floating crust writes peter stone, the method adopted by john harrison might surprise some people but in the right circumstances a piece of crust floating downriver is a winning method as he proved
# ::tok floating crust writes peter stone , the method adopted by john harrison might surprise some people but in the right circumstances a piece of crust floating downriver is a winning method as he proved
# ::alignments 33-34|0.0.0.2.0 32-33|0.0.0.2 30-31|0.0.0.2.0.0 29-30|0.0.0.2.0.0.0 25-26|0.0.0.1 22-23|0.0.0.1.0 20-21|0.0 16-17|0 14-15|0.0.0.0.0.0.0 13-14|0.0.0 10-12|0.0.0.0.1.0.0.0+0.0.0.0.1.0.0.1+0.0.0.0.1.0.0+0.0.0.0.1.0 8-9|0.0.0.0.1 7-8|0.0.0.0 4-5|0.0.0.0.0.0.1 2-3|0.0.0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:17.164
# ::node	0	contrast-01	16-17
# ::node	0.0	circumstance	20-21
# ::node	0.0.0	surprise-01	13-14
# ::node	0.0.0.0	method	7-8
# ::node	0.0.0.0.0	float-01	0-1
# ::node	0.0.0.0.0.0	write-01	2-3
# ::node	0.0.0.0.0.0.0	some	14-15
# ::node	0.0.0.0.0.0.1	stone	4-5
# ::node	0.0.0.0.1	adopt-01	8-9
# ::node	0.0.0.0.1.0	person	10-12
# ::node	0.0.0.0.1.0.0	name	10-12
# ::node	0.0.0.0.1.0.0.0	"harrison"	10-12
# ::node	0.0.0.0.1.0.0.1	"john"	10-12
# ::node	0.0.0.1	float-01	25-26
# ::node	0.0.0.1.0	piece	22-23
# ::node	0.0.0.2	he	32-33
# ::node	0.0.0.2.0	prove-01	33-34
# ::node	0.0.0.2.0.0	method	30-31
# ::node	0.0.0.2.0.0.0	win-01	29-30
# ::root	0	contrast-01
# ::edge	adopt-01	ARG0	person	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	adopt-01	ARG1	method	0.0.0.0.1	0.0.0.0	
# ::edge	contrast-01	ARG2	circumstance	0	0.0	
# ::edge	float-01	ARG0	method	0.0.0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	piece	0.0.0.1	0.0.0.1.0	
# ::edge	float-01	ARG1	surprise-01	0.0.0.1	0.0.0	
# ::edge	float-01	ARG1	write-01	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	name	op1	"harrison"	0.0.0.0.1.0.0	0.0.0.0.1.0.0.0	
# ::edge	name	op2	"john"	0.0.0.0.1.0.0	0.0.0.0.1.0.0.1	
# ::edge	person	name	name	0.0.0.0.1.0	0.0.0.0.1.0.0	
# ::edge	prove-01	ARG0	he	0.0.0.2.0	0.0.0.2	
# ::edge	prove-01	ARG1	method	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	surprise-01	ARG0	method	0.0.0	0.0.0.0	
# ::edge	surprise-01	ARG1	circumstance	0.0.0	0.0	
# ::edge	surprise-01	ARG2	he	0.0.0	0.0.0.2	
# ::edge	win-01	ARG1	method	0.0.0.2.0.0.0	0.0.0.2.0.0	
# ::edge	write-01	ARG0	some	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	write-01	ARG1	stone	0.0.0.0.0.0	0.0.0.0.0.0.1	
(c2 / contrast-01 
      :ARG2 (c / circumstance 
            :ARG1-of (s2 / surprise-01 
                  :ARG0 (m2 / method 
                        :ARG0-of (f2 / float-01 
                              :ARG1 (w2 / write-01 
                                    :ARG0 (s / some) 
                                    :ARG1 (s3 / stone))) 
                        :ARG1-of (a / adopt-01 
                              :ARG0 (p3 / person 
                                    :name (n / name 
                                          :op1 "harrison" 
                                          :op2 "john")))) 
                  :ARG1-of (f / float-01 
                        :ARG0 (p2 / piece)) 
                  :ARG2 (h / he 
                        :ARG0-of (p / prove-01 
                              :ARG1 (m / method 
                                    :ARG1-of (w / win-01)))))))

# ::snt the old clyde workhorse seems to be floating on a sea of raw sewage a roadie is syphoning diesel oil into the generator tanks with his mouth while keyboardist greg kane stands beside his greg porsche signing autograph books
# ::tok the old clyde workhorse seems to be floating on a sea of raw sewage a roadie is syphoning diesel oil into the generator tanks with his mouth while keyboardist greg kane stands beside his greg porsche signing autograph books
# ::alignments 38-39|0.1 36-37|0 32-33|0.3 26-27|0.2.0.0 23-24|0.2.0.0.0 22-23|0.2.0.0.0.1 19-20|0.2.0.0.0.0 18-19|0.2.0.0.0.0.0 13-14|0.0 12-13|0.0.0 10-11|0.2.1 7-8|0.2 4-5|0.2.0 1-2|0.2.0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:17.309
# ::node	0	sign-02	36-37
# ::node	0.0	sewage	13-14
# ::node	0.0.0	raw	12-13
# ::node	0.1	book	38-39
# ::node	0.2	float-01	7-8
# ::node	0.2.0	seem-01	4-5
# ::node	0.2.0.0	mouth	26-27
# ::node	0.2.0.0.0	tank	23-24
# ::node	0.2.0.0.0.0	oil	19-20
# ::node	0.2.0.0.0.0.0	diesel-electric	18-19
# ::node	0.2.0.0.0.1	generator	22-23
# ::node	0.2.0.0.0.1.0	old	1-2
# ::node	0.2.1	sea	10-11
# ::node	0.3	beside	32-33
# ::root	0	sign-02
# ::edge	float-01	ARG1	sign-02	0.2	0	
# ::edge	float-01	location	sea	0.2	0.2.1	
# ::edge	oil	location	tank	0.2.0.0.0.0	0.2.0.0.0	
# ::edge	oil	mod	diesel-electric	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	old	poss	generator	0.2.0.0.0.1.0	0.2.0.0.0.1	
# ::edge	seem-01	ARG0	mouth	0.2.0	0.2.0.0	
# ::edge	seem-01	ARG1	float-01	0.2.0	0.2	
# ::edge	sewage	mod	raw	0.0	0.0.0	
# ::edge	sign-02	ARG0	sewage	0	0.0	
# ::edge	sign-02	ARG1	book	0	0.1	
# ::edge	sign-02	ARG2	beside	0	0.3	
# ::edge	tank	location	mouth	0.2.0.0.0	0.2.0.0	
# ::edge	tank	mod	generator	0.2.0.0.0	0.2.0.0.0.1	
(s / sign-02 
      :ARG0 (s2 / sewage 
            :mod (r / raw)) 
      :ARG1 (b / book) 
      :ARG1-of (f / float-01 
            :ARG1-of (s4 / seem-01 
                  :ARG0 (m / mouth 
                        :location-of (t / tank 
                              :location-of (o / oil 
                                    :mod (d / diesel-electric)) 
                              :mod (g / generator 
                                    :poss-of (o2 / old))))) 
            :location (s3 / sea)) 
      :ARG2 (b2 / beside))

# ::snt and they do not have to resort any more to the sort of fancy guarantees that were the only way mexicana de cobre mexicos copper company and telemex the countrys national telephone firm could keep floating new debt over the past ten years
# ::tok and they do not have to resort any more to the sort of fancy guarantees that were the only way mexicana de cobre mexicos copper company and telemex the countrys national telephone firm could keep floating new debt over the past ten years
# ::alignments 42-43|0.0.0.0.0.1.0.0+0.0.0.0.0.1.0 40-41|0.0.0.0.0.1 37-38|0.0.0.0.0.0 36-37|0.0.0.0.0.0.0 35-36|0.0.0.0.0 33-34|0.0.0.0.0.2 32-33|0.0.0.0 31-32|0.0.0.0.1 30-31|0.0.0.0.1.1 26-27|0.0.0.0.0.2.0.0.0 25-26|0.0.0.0.0.2.0.0.0.1 24-25|0.0.0.0.0.2.0.0.0.1.0 19-20|0.0.0.0.0.2.0.0.0.0 18-19|0.0.0.0.0.2.0.0.0.0.0 14-15|0.0 13-14|0 11-12|0.0.0 7-8|0.0.0.0.1.0 6-7|0.0.0.0.0.2.0 1-2|0.0.0.0.0.2.0.0 0-1|0.0.0.0.0.2.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:18.231
# ::node	0	fancy-02	13-14
# ::node	0.0	guarantee-01	14-15
# ::node	0.0.0	sort	11-12
# ::node	0.0.0.0	firm	32-33
# ::node	0.0.0.0.0	float-01	35-36
# ::node	0.0.0.0.0.0	debt	37-38
# ::node	0.0.0.0.0.0.0	new	36-37
# ::node	0.0.0.0.0.1	past	40-41
# ::node	0.0.0.0.0.1.0	temporal-quantity	42-43
# ::node	0.0.0.0.0.1.0.0	year	42-43
# ::node	0.0.0.0.0.2	possible	33-34
# ::node	0.0.0.0.0.2.0	resort-01	6-7
# ::node	0.0.0.0.0.2.0.0	they	1-2
# ::node	0.0.0.0.0.2.0.0.0	and	26-27
# ::node	0.0.0.0.0.2.0.0.0.0	way	19-20
# ::node	0.0.0.0.0.2.0.0.0.0.0	only	18-19
# ::node	0.0.0.0.0.2.0.0.0.1	company	25-26
# ::node	0.0.0.0.0.2.0.0.0.1.0	copper	24-25
# ::node	0.0.0.0.0.2.0.1	and	0-1
# ::node	0.0.0.0.1	telephone-01	31-32
# ::node	0.0.0.0.1.0	any	7-8
# ::node	0.0.0.0.1.1	nation	30-31
# ::root	0	fancy-02
(f3 / fancy-02 
      :mod-of (g / guarantee-01 
            :mod (s / sort 
                  :topic (f2 / firm 
                        :ARG0-of (f / float-01 
                              :ARG1 (d / debt 
                                    :mod (n / new)) 
                              :ARG2 (p / past 
                                    :op1 (t / temporal-quantity 
                                          :unit (y / year))) 
                              :domain-of (p2 / possible 
                                    :ARG1-of (r / resort-01 
                                          :ARG0 (t3 / they 
                                                :poss-of (a / and 
                                                      :op1 (w / way 
                                                            :mod (o / only)) 
                                                      :op2 (c / company 
                                                            :time-of (c2 / copper)))) 
                                          :op-of (a3 / and)))) 
                        :mod (t2 / telephone-01 
                              :ARG1 (a2 / any) 
                              :mod (n2 / nation))))))

# ::snt   newspaper magnate robert maxwell is set to test the markets rating for his shares by floating his mirror group newspapers on the stock exchange in the first half of next year
# ::tok newspaper magnate robert maxwell is set to test the markets rating for his shares by floating his mirror group newspapers on the stock exchange in the first half of next year
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:18.232
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt his predecessor calculated it from the evidence of an eyewitness who saw what she thought was a bundle in a blue plastic dustbin liner floating in the vologne just before 5
# ::tok his predecessor calculated it from the evidence of an eyewitness who saw what she thought was a bundle in a blue plastic dustbin liner floating in the vologne just before 5
# ::alignments 30-31|0.2.0.0.0 29-30|0.0.0.1.0.0 28-29|0.0.0.0 24-25|0.0.0.1.0 21-22|0.1 20-21|0.2.0.0.1.0 17-18|0.0.0+0.0.0.1 14-15|0 13-14|0.0 11-12|0.2 9-10|0.2.0 6-7|0.2.0.0 3-4|0.2.0.0.1.1 2-3|0.2.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:18.643
# ::node	0	think-01	14-15
# ::node	0.0	she	13-14
# ::node	0.0.0	bundle-01	17-18
# ::node	0.0.0.0	just	28-29
# ::node	0.0.0.1	thing	17-18
# ::node	0.0.0.1.0	float-01	24-25
# ::node	0.0.0.1.0.0	before	29-30
# ::node	0.1	plastic	21-22
# ::node	0.2	see-01	11-12
# ::node	0.2.0	eyewitness	9-10
# ::node	0.2.0.0	evidence-01	6-7
# ::node	0.2.0.0.0	5	30-31
# ::node	0.2.0.0.1	calculate-01	2-3
# ::node	0.2.0.0.1.0	blue	20-21
# ::node	0.2.0.0.1.1	it	3-4
# ::root	0	think-01
# ::edge	bundle-01	ARG0	she	0.0.0	0.0	
# ::edge	bundle-01	ARG1	just	0.0.0	0.0.0.0	
# ::edge	bundle-01	ARG2	thing	0.0.0	0.0.0.1	
# ::edge	calculate-01	ARG0	blue	0.2.0.0.1	0.2.0.0.1.0	
# ::edge	calculate-01	ARG1	it	0.2.0.0.1	0.2.0.0.1.1	
# ::edge	calculate-01	ARG2	evidence-01	0.2.0.0.1	0.2.0.0	
# ::edge	evidence-01	ARG0	5	0.2.0.0	0.2.0.0.0	
# ::edge	evidence-01	ARG1	eyewitness	0.2.0.0	0.2.0	
# ::edge	float-01	ARG1	thing	0.0.0.1.0	0.0.0.1	
# ::edge	float-01	time	before	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	see-01	ARG0	eyewitness	0.2	0.2.0	
# ::edge	see-01	ARG1	think-01	0.2	0	
# ::edge	think-01	ARG0	she	0	0.0	
# ::edge	think-01	ARG1	plastic	0	0.1	
(t2 / think-01 
      :ARG0 (s / she 
            :ARG0-of (b3 / bundle-01 
                  :ARG1 (j / just) 
                  :ARG2 (t / thing 
                        :ARG1-of (f / float-01 
                              :time (b / before))))) 
      :ARG1 (p / plastic) 
      :ARG1-of (s2 / see-01 
            :ARG0 (e / eyewitness 
                  :ARG1-of (e2 / evidence-01 
                        :ARG0 5 
                        :ARG2-of (c / calculate-01 
                              :ARG0 (b2 / blue) 
                              :ARG1 (i / it))))))

# ::snt i weigh myself in the bathroom at a friends house and i feel jubilant euphoric lightasafeather almost floating
# ::tok i weigh myself in the bathroom at a friends house and i feel jubilant euphoric lightasafeather almost floating
# ::alignments 17-18|0.0.0 16-17|0.0.0.0 14-15|0.1 12-13|0 11-12|0.0 10-11|0.0.1.0.0.0 9-10|0.0.1.0 8-9|0.0.1.1+0.0.1 5-6|0.0.1.0.0 1-2|0.0.1.0.0.0.0 0-1|0.0.1.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:18.854
# ::node	0	feel-01	12-13
# ::node	0.0	i	11-12
# ::node	0.0.0	float-01	17-18
# ::node	0.0.0.0	almost	16-17
# ::node	0.0.1	have-rel-role-91	8-9
# ::node	0.0.1.0	house	9-10
# ::node	0.0.1.0.0	bathroom	5-6
# ::node	0.0.1.0.0.0	and	10-11
# ::node	0.0.1.0.0.0.0	weigh-03	1-2
# ::node	0.0.1.0.0.0.0.0	i	0-1
# ::node	0.0.1.1	friend	8-9
# ::node	0.1	euphoria	14-15
# ::root	0	feel-01
# ::edge	and	op1	weigh-03	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	and	op2	bathroom	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	bathroom	location	house	0.0.1.0.0	0.0.1.0	
# ::edge	feel-01	ARG0	i	0	0.0	
# ::edge	feel-01	ARG1	euphoria	0	0.1	
# ::edge	float-01	ARG1	i	0.0.0	0.0	
# ::edge	float-01	degree	almost	0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG0	house	0.0.1	0.0.1.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.1	0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.1	0.0.1.1	
# ::edge	weigh-03	ARG0	i	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0	
(f2 / feel-01 
      :ARG0 (i / i 
            :ARG1-of (f / float-01 
                  :degree (a / almost)) 
            :ARG1-of (h2 / have-rel-role-91 
                  :ARG0 (h / house 
                        :location-of (b / bathroom 
                              :op-of (a2 / and 
                                    :op1 (w / weigh-03 
                                          :ARG0 (i2 / i))))) 
                  :ARG2 (f3 / friend))) 
      :ARG1 (e / euphoria))

# ::snt floated at 245p a year ago the 55
# ::tok floated at 245p a year ago the 55
# ::alignments 7-8|0.1 4-5|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:18.869
# ::node	0	float-01	0-1
# ::node	0.0	year	4-5
# ::node	0.1	55	7-8
# ::root	0	float-01
# ::edge	float-01	ARG0	year	0	0.0	
# ::edge	float-01	ARG1	55	0	0.1	
(f / float-01 
      :ARG0 (y / year) 
      :ARG1 55)

# ::snt the most obvious example brought luton their equaliser steve williams floating a freekick over a bunched defence to the unmarked ian dowie whose header came back off john lukic for lars elstrup to score
# ::tok the most obvious example brought luton their equaliser steve williams floating a freekick over a bunched defence to the unmarked ian dowie whose header came back off john lukic for lars elstrup to score
# ::alignments 33-34|0.0 27-29|0.2.0.0+0.2.0.1+0.2.0+0.2 26-27|0 25-26|0.1 16-17|0.0.0.1 10-11|0.0.0 3-4|0.0.0.0 2-3|0.0.0.0.0 1-2|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:18.998
# ::node	0	off	26-27
# ::node	0.0	score-01	33-34
# ::node	0.0.0	float-01	10-11
# ::node	0.0.0.0	example	3-4
# ::node	0.0.0.0.0	obvious-41	2-3
# ::node	0.0.0.0.0.0	most	1-2
# ::node	0.0.0.1	defend-01	16-17
# ::node	0.1	back	25-26
# ::node	0.2	person	27-29
# ::node	0.2.0	name	27-29
# ::node	0.2.0.0	"lukic"	27-29
# ::node	0.2.0.1	"john"	27-29
# ::root	0	off
# ::edge	float-01	ARG0	example	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	defend-01	0.0.0	0.0.0.1	
# ::edge	name	op1	"lukic"	0.2.0	0.2.0.0	
# ::edge	name	op2	"john"	0.2.0	0.2.0.1	
# ::edge	obvious-41	ARG1	example	0.0.0.0.0	0.0.0.0	
# ::edge	obvious-41	degree	most	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	off	mod	back	0	0.1	
# ::edge	off	op1	person	0	0.2	
# ::edge	person	name	name	0.2	0.2.0	
# ::edge	score-01	ARG1	float-01	0.0	0.0.0	
# ::edge	score-01	location	off	0.0	0	
(o / off 
      :location-of (s / score-01 
            :ARG1 (f / float-01 
                  :ARG0 (e / example 
                        :ARG1-of (o2 / obvious-41 
                              :degree (m / most))) 
                  :ARG1 (d / defend-01))) 
      :mod (b / back) 
      :op1 (p / person 
            :name (n / name 
                  :op1 "lukic" 
                  :op2 "john")))

# ::snt its thought they just go away out on the ocean and float there all the winter
# ::tok its thought they just go away out on the ocean and float there all the winter
# ::alignments 15-16|0.0.0.2 13-14|0.0.0.2.0 11-12|0.0.0 10-11|0.0.0.1 9-10|0.0.0.1.0 5-6|0.0.0.0 3-4|0.1 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:19.090
# ::node	0	think-01	1-2
# ::node	0.0	they	2-3
# ::node	0.0.0	float-01	11-12
# ::node	0.0.0.0	away	5-6
# ::node	0.0.0.1	and	10-11
# ::node	0.0.0.1.0	ocean	9-10
# ::node	0.0.0.2	winter	15-16
# ::node	0.0.0.2.0	all	13-14
# ::node	0.1	just	3-4
# ::root	0	think-01
# ::edge	and	op1	ocean	0.0.0.1	0.0.0.1.0	
# ::edge	and	op2	float-01	0.0.0.1	0.0.0	
# ::edge	float-01	ARG0	they	0.0.0	0.0	
# ::edge	float-01	ARG1	away	0.0.0	0.0.0.0	
# ::edge	float-01	time	winter	0.0.0	0.0.0.2	
# ::edge	think-01	ARG0	they	0	0.0	
# ::edge	think-01	mod	just	0	0.1	
# ::edge	winter	quant	all	0.0.0.2	0.0.0.2.0	
(t2 / think-01 
      :ARG0 (t / they 
            :ARG0-of (f / float-01 
                  :ARG1 (a3 / away) 
                  :op-of (a2 / and 
                        :op1 (o / ocean)) 
                  :time (w / winter 
                        :quant (a / all)))) 
      :mod (j / just))

# ::snt eurodisney though is already under construction which eurotunnel was not when it was floated and as one stockbroking analyst commented it is on budget overground and only twoandahalf years from completion
# ::tok eurodisney though is already under construction which eurotunnel was not when it was floated and as one stockbroking analyst commented it is on budget overground and only twoandahalf years from completion
# ::alignments 30-31|0.2.0 28-29|0.2.0.0.0+0.2.0.0 26-27|0.2.1.0.0 25-26|0.2.1.0.1 23-24|0.1.0 20-21|0.0 19-20|0 18-19|0.1 14-15|0.2 13-14|0.2.1 11-12|0.2.1.1 5-6|0.2.1.0 3-4|0.2.1.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:19.237
# ::node	0	comment-01	19-20
# ::node	0.0	it	20-21
# ::node	0.1	analyze-01	18-19
# ::node	0.1.0	budget	23-24
# ::node	0.2	and	14-15
# ::node	0.2.0	complete-01	30-31
# ::node	0.2.0.0	temporal-quantity	28-29
# ::node	0.2.0.0.0	year	28-29
# ::node	0.2.1	float-01	13-14
# ::node	0.2.1.0	construct-01	5-6
# ::node	0.2.1.0.0	only	26-27
# ::node	0.2.1.0.1	and	25-26
# ::node	0.2.1.0.2	already	3-4
# ::node	0.2.1.1	it	11-12
# ::root	0	comment-01
# ::edge	analyze-01	ARG1	budget	0.1	0.1.0	
# ::edge	and	op1	construct-01	0.2.1.0.1	0.2.1.0	
# ::edge	and	op1	float-01	0.2	0.2.1	
# ::edge	and	op2	comment-01	0.2	0	
# ::edge	comment-01	ARG0	it	0	0.0	
# ::edge	comment-01	ARG1	analyze-01	0	0.1	
# ::edge	complete-01	ARG1	and	0.2.0	0.2	
# ::edge	construct-01	ARG1	only	0.2.1.0	0.2.1.0.0	
# ::edge	construct-01	time	already	0.2.1.0	0.2.1.0.2	
# ::edge	float-01	ARG0	construct-01	0.2.1	0.2.1.0	
# ::edge	float-01	ARG1	it	0.2.1	0.2.1.1	
# ::edge	temporal-quantity	time	complete-01	0.2.0.0	0.2.0	
# ::edge	temporal-quantity	unit	year	0.2.0.0	0.2.0.0.0	
(c2 / comment-01 
      :ARG0 (i / it) 
      :ARG1 (a2 / analyze-01 
            :ARG1 (b / budget)) 
      :op-of (a3 / and 
            :ARG1-of (c / complete-01 
                  :time-of (t / temporal-quantity 
                        :unit (y / year))) 
            :op1 (f / float-01 
                  :ARG0 (c3 / construct-01 
                        :ARG1 (o / only) 
                        :op-of (a / and) 
                        :time (a4 / already)) 
                  :ARG1 (i2 / it))))

# ::snt the coventry goalkeeper steve ogrizovic at first advanced towards merson and then tried to retrace his steps but the arsenal striker neatly floated the ball over his head and in at the far post
# ::tok the coventry goalkeeper steve ogrizovic at first advanced towards merson and then tried to retrace his steps but the arsenal striker neatly floated the ball over his head and in at the far post
# ::alignments 33-34|0.0.1.0 32-33|0.0.1.0.0 28-29|0.0.2.1 27-28|0.0.2 24-25|0.0.0 22-23|0.0 21-22|0.0.3 19-20|0.0.2.0 17-18|0 16-17|0.0.1.1.1 12-13|0.0.1 11-12|0.0.1.2 10-11|0.0.1.1 7-8|0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:19.403
# ::node	0	contrast-01	17-18
# ::node	0.0	float-01	22-23
# ::node	0.0.0	ball	24-25
# ::node	0.0.1	try-01	12-13
# ::node	0.0.1.0	post	33-34
# ::node	0.0.1.0.0	far	32-33
# ::node	0.0.1.1	and	10-11
# ::node	0.0.1.1.0	advance-01	7-8
# ::node	0.0.1.1.1	step-01	16-17
# ::node	0.0.1.2	then	11-12
# ::node	0.0.2	head-01	27-28
# ::node	0.0.2.0	arsenal	19-20
# ::node	0.0.2.1	and	28-29
# ::node	0.0.3	neat	21-22
# ::root	0	contrast-01
# ::edge	and	op1	advance-01	0.0.1.1	0.0.1.1.0	
# ::edge	and	op1	head-01	0.0.2.1	0.0.2	
# ::edge	and	op2	try-01	0.0.1.1	0.0.1	
# ::edge	and	op3	step-01	0.0.1.1	0.0.1.1.1	
# ::edge	contrast-01	ARG1	float-01	0	0.0	
# ::edge	float-01	ARG1	ball	0.0	0.0.0	
# ::edge	float-01	location	head-01	0.0	0.0.2	
# ::edge	float-01	manner	neat	0.0	0.0.3	
# ::edge	head-01	ARG0	arsenal	0.0.2	0.0.2.0	
# ::edge	post	mod	far	0.0.1.0	0.0.1.0.0	
# ::edge	try-01	ARG0	post	0.0.1	0.0.1.0	
# ::edge	try-01	ARG1	float-01	0.0.1	0.0	
# ::edge	try-01	time	then	0.0.1	0.0.1.2	
(c / contrast-01 
      :ARG1 (f2 / float-01 
            :ARG1 (b / ball) 
            :ARG1-of (t / try-01 
                  :ARG0 (p / post 
                        :mod (f / far)) 
                  :op-of (a3 / and 
                        :op1 (a4 / advance-01) 
                        :op2 (s / step-01)) 
                  :time (t2 / then)) 
            :location (h / head-01 
                  :ARG0 (a2 / arsenal) 
                  :op-of (a / and)) 
            :manner (n / neat)))

# ::snt sir matt busby uniteds most successful manager has added his voice to the campaign to float the clubs shares
# ::tok sir matt busby uniteds most successful manager has added his voice to the campaign to float the clubs shares
# ::alignments 18-19|0.3.0 17-18|0.2.0 15-16|0.3 13-14|0.2 10-11|0.1 8-9|0 6-7|0.0 5-6|0.0.0 4-5|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:19.646
# ::node	0	add-01	8-9
# ::node	0.0	manage-01	6-7
# ::node	0.0.0	succeed-01	5-6
# ::node	0.0.0.0	most	4-5
# ::node	0.1	voice	10-11
# ::node	0.2	campaign-01	13-14
# ::node	0.2.0	club	17-18
# ::node	0.3	float-01	15-16
# ::node	0.3.0	share	18-19
# ::root	0	add-01
# ::edge	add-01	ARG0	manage-01	0	0.0	
# ::edge	add-01	ARG1	voice	0	0.1	
# ::edge	add-01	ARG2	campaign-01	0	0.2	
# ::edge	add-01	purpose	float-01	0	0.3	
# ::edge	campaign-01	ARG2	club	0.2	0.2.0	
# ::edge	float-01	ARG1	share	0.3	0.3.0	
# ::edge	succeed-01	ARG1	manage-01	0.0.0	0.0	
# ::edge	succeed-01	degree	most	0.0.0	0.0.0.0	
(a / add-01 
      :ARG0 (m / manage-01 
            :ARG1-of (s2 / succeed-01 
                  :degree (m2 / most))) 
      :ARG1 (v / voice) 
      :ARG2 (c2 / campaign-01 
            :ARG2 (c / club)) 
      :purpose (f / float-01 
            :ARG1 (s / share)))

# ::snt a large boat was floating round a misty loch
# ::tok a large boat was floating round a misty loch
# ::alignments 5-6|0.0.0 4-5|0.0 2-3|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:19.657
# ::node	0	boat	2-3
# ::node	0.0	float-01	4-5
# ::node	0.0.0	round	5-6
# ::node	0.1	large	1-2
# ::root	0	boat
# ::edge	boat	mod	large	0	0.1	
# ::edge	float-01	ARG0	boat	0.0	0	
# ::edge	float-01	ARG1	round	0.0	0.0.0	
(b / boat 
      :ARG0-of (f / float-01 
            :ARG1 (r / round)) 
      :mod (l / large))

# ::snt g will soon follow the abbey national and demutualise either by converting to a public company and floating on the stockmarket or by agreeing to be taken over by another financial institution
# ::tok g will soon follow the abbey national and demutualise either by converting to a public company and floating on the stockmarket or by agreeing to be taken over by another financial institution
# ::alignments 31-32|0.0.0.0 30-31|0.0.0.0.0 29-30|0.0.0.0.1 23-24|0.3.0 21-22|0.3 17-18|0.2 16-17|0 15-16|0.1.1 14-15|0.1.1.0 11-12|0.1 9-10|0.1.0 7-8|0.0.0 6-7|0.3.0.0 3-4|0.0 2-3|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:19.780
# ::node	0	and	16-17
# ::node	0.0	follow-02	3-4
# ::node	0.0.0	and	7-8
# ::node	0.0.0.0	institution	31-32
# ::node	0.0.0.0.0	finance	30-31
# ::node	0.0.0.0.1	another	29-30
# ::node	0.0.1	soon	2-3
# ::node	0.1	convert-01	11-12
# ::node	0.1.0	either	9-10
# ::node	0.1.1	company	15-16
# ::node	0.1.1.0	public	14-15
# ::node	0.2	float-01	17-18
# ::node	0.3	or	21-22
# ::node	0.3.0	agree-01	23-24
# ::node	0.3.0.0	nation	6-7
# ::root	0	and
# ::edge	agree-01	ARG0	nation	0.3.0	0.3.0.0	
# ::edge	and	op1	convert-01	0	0.1	
# ::edge	and	op1	institution	0.0.0	0.0.0.0	
# ::edge	and	op2	float-01	0	0.2	
# ::edge	and	op3	or	0	0.3	
# ::edge	company	mod	public	0.1.1	0.1.1.0	
# ::edge	convert-01	ARG1	either	0.1	0.1.0	
# ::edge	convert-01	ARG2	company	0.1	0.1.1	
# ::edge	follow-02	ARG1	and	0.0	0.0.0	
# ::edge	follow-02	manner	and	0.0	0	
# ::edge	follow-02	time	soon	0.0	0.0.1	
# ::edge	institution	mod	another	0.0.0.0	0.0.0.0.1	
# ::edge	institution	mod	finance	0.0.0.0	0.0.0.0.0	
# ::edge	or	op1	agree-01	0.3	0.3.0	
(a3 / and 
      :manner-of (f3 / follow-02 
            :ARG1 (a4 / and 
                  :op1 (i / institution 
                        :mod (f / finance) 
                        :mod (a / another))) 
            :time (s / soon)) 
      :op1 (c2 / convert-01 
            :ARG1 (e / either) 
            :ARG2 (c / company 
                  :mod (p / public))) 
      :op2 (f2 / float-01) 
      :op3 (o / or 
            :op1 (a2 / agree-01 
                  :ARG0 (n / nation))))

# ::snt a walk in the winter air will improve my circulation clear my eyes and allow me a little more time to think about the material which is now thanks to my own trusting nature in the hands of a man whom i would like to see floating face down in the dirty river
# ::tok a walk in the winter air will improve my circulation clear my eyes and allow me a little more time to think about the material which is now thanks to my own trusting nature in the hands of a man whom i would like to see floating face down in the dirty river
# ::alignments 52-53|0.1.0 51-52|0.1.0.0 48-49|0.1.1 47-48|0.1 46-47|0.1.2 45-46|0 41-42|0.0 39-40|0.0.1 36-37|0.0.1.0 33-34|0.0.0.0.0.0 28-29|0.0.0.0.0 27-28|0.0.0.0.0.1 24-25|0.0.0.0 21-22|0.0.0 19-20|0.0.0.1.2 17-18|0.0.0.1.1.0 14-15|0.0.0.1.1 13-14|0.0.0.1 12-13|0.0.0.1.0.1 10-11|0.0.0.1.0 9-10|0.0.0.1.0.1.0 7-8|0.0.0.1.0.0 5-6|0.0.0.1.0.1.0.0 4-5|0.0.0.1.0.1.0.0.0 1-2|0.0.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:20.947
# ::node	0	see-01	45-46
# ::node	0.0	i	41-42
# ::node	0.0.0	think-01	21-22
# ::node	0.0.0.0	material	24-25
# ::node	0.0.0.0.0	thank-01	28-29
# ::node	0.0.0.0.0.0	nature	33-34
# ::node	0.0.0.0.0.1	now	27-28
# ::node	0.0.0.1	and	13-14
# ::node	0.0.0.1.0	clear	10-11
# ::node	0.0.0.1.0.0	improve-01	7-8
# ::node	0.0.0.1.0.0.0	walk-01	1-2
# ::node	0.0.0.1.0.1	eye	12-13
# ::node	0.0.0.1.0.1.0	circulate-01	9-10
# ::node	0.0.0.1.0.1.0.0	air	5-6
# ::node	0.0.0.1.0.1.0.0.0	winter	4-5
# ::node	0.0.0.1.1	allow-01	14-15
# ::node	0.0.0.1.1.0	little	17-18
# ::node	0.0.0.1.2	time	19-20
# ::node	0.0.1	man	39-40
# ::node	0.0.1.0	hand	36-37
# ::node	0.1	face-01	47-48
# ::node	0.1.0	river	52-53
# ::node	0.1.0.0	dirty	51-52
# ::node	0.1.1	down	48-49
# ::node	0.1.2	float-01	46-47
# ::root	0	see-01
# ::edge	air	mod	winter	0.0.0.1.0.1.0.0	0.0.0.1.0.1.0.0.0	
# ::edge	allow-01	ARG1	little	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	and	op1	clear	0.0.0.1	0.0.0.1.0	
# ::edge	and	op2	allow-01	0.0.0.1	0.0.0.1.1	
# ::edge	and	op3	think-01	0.0.0.1	0.0.0	
# ::edge	and	time	time	0.0.0.1	0.0.0.1.2	
# ::edge	circulate-01	ARG0	air	0.0.0.1.0.1.0	0.0.0.1.0.1.0.0	
# ::edge	clear	part	eye	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	eye	poss	circulate-01	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	face-01	ARG0	river	0.1	0.1.0	
# ::edge	face-01	ARG1	down	0.1	0.1.1	
# ::edge	float-01	ARG1	face-01	0.1.2	0.1	
# ::edge	improve-01	ARG0	walk-01	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	improve-01	ARG1	clear	0.0.0.1.0.0	0.0.0.1.0	
# ::edge	man	part	hand	0.0.1	0.0.1.0	
# ::edge	man	poss	i	0.0.1	0.0	
# ::edge	river	mod	dirty	0.1.0	0.1.0.0	
# ::edge	see-01	ARG0	i	0	0.0	
# ::edge	see-01	ARG1	face-01	0	0.1	
# ::edge	thank-01	ARG0	material	0.0.0.0.0	0.0.0.0	
# ::edge	thank-01	ARG1	nature	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	thank-01	time	now	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	think-01	ARG0	i	0.0.0	0.0	
# ::edge	think-01	ARG2	material	0.0.0	0.0.0.0	
(s / see-01 
      :ARG0 (i / i 
            :ARG0-of (t2 / think-01 
                  :ARG2 (m2 / material 
                        :ARG0-of (t / thank-01 
                              :ARG1 (n / nature) 
                              :time (n2 / now))) 
                  :op-of (a2 / and 
                        :op1 (c / clear 
                              :ARG1-of (i2 / improve-01 
                                    :ARG0 (w2 / walk-01)) 
                              :part (e / eye 
                                    :poss (c2 / circulate-01 
                                          :ARG0 (a3 / air 
                                                :mod (w / winter))))) 
                        :op2 (a / allow-01 
                              :ARG1 (l / little)) 
                        :time (t3 / time))) 
            :poss-of (m / man 
                  :part (h / hand))) 
      :ARG1 (f / face-01 
            :ARG0 (r / river 
                  :mod (d / dirty)) 
            :ARG1 (d2 / down) 
            :ARG1-of (f2 / float-01)))

# ::snt french connection was floated on the unlisted securities market at 123p in 1983
# ::tok french connection was floated on the unlisted securities market at 123p in 1983
# ::alignments 12-13|0.1.0.0+0.1.0 8-9|0.1 3-4|0 1-2|0.0 0-1|0.0.0.0.0+0.0.0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:20.980
# ::node	0	float-01	3-4
# ::node	0.0	connect-01	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	"France"	0-1
# ::node	0.1	market	8-9
# ::node	0.1.0	date-entity	12-13
# ::node	0.1.0.0	1983	12-13
# ::root	0	float-01
# ::edge	connect-01	ARG1	country	0.0	0.0.0	
# ::edge	country	name	name	0.0.0	0.0.0.0	
# ::edge	date-entity	year	1983	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	connect-01	0	0.0	
# ::edge	float-01	ARG2	market	0	0.1	
# ::edge	market	time	date-entity	0.1	0.1.0	
# ::edge	name	op1	"France"	0.0.0.0	0.0.0.0.0	
(f / float-01 
      :ARG1 (c / connect-01 
            :ARG1 (c2 / country 
                  :name (n / name 
                        :op1 "France"))) 
      :ARG2 (m / market 
            :time (d / date-entity 
                  :year 1983)))

# ::snt a finnish group has launched a 263m agreed takeover for uk paper the printing paper manufacturer which was floated on the stock market in march 1988 with a 108m price tag
# ::tok a finnish group has launched a 263m agreed takeover for uk paper the printing paper manufacturer which was floated on the stock market in march 1988 with a 108m price tag
# ::alignments 29-30|0.0.0.0+0.0.0 24-26|0.0.2.0.0.1.1.1+0.0.2.0.0.1.1.0+0.0.2.0.0.1.1 22-23|0.0.2.0.0.1.0 21-22|0.0.2.0.0.1.0.0 18-19|0.0.2.0.0.1 15-16|0.0.2.0.0 14-15|0.0.2.0.0.0 11-12|0.0.1 8-9|0.0 7-8|0 4-5|0.0.2 2-3|0.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:21.240
# ::node	0	agree-01	7-8
# ::node	0.0	take-12	8-9
# ::node	0.0.0	thing	29-30
# ::node	0.0.0.0	price-01	29-30
# ::node	0.0.1	paper	11-12
# ::node	0.0.2	launch-01	4-5
# ::node	0.0.2.0	group	2-3
# ::node	0.0.2.0.0	manufacture-01	15-16
# ::node	0.0.2.0.0.0	paper	14-15
# ::node	0.0.2.0.0.1	float-01	18-19
# ::node	0.0.2.0.0.1.0	market	22-23
# ::node	0.0.2.0.0.1.0.0	stock	21-22
# ::node	0.0.2.0.0.1.1	date-entity	24-26
# ::node	0.0.2.0.0.1.1.0	3	24-26
# ::node	0.0.2.0.0.1.1.1	1988	24-26
# ::root	0	agree-01
(a / agree-01 
      :manner-of (t2 / take-12 
            :ARG0 (t / thing 
                  :ARG2-of (p / price-01)) 
            :ARG1 (p3 / paper) 
            :ARG1-of (l / launch-01 
                  :ARG0 (g / group 
                        :ARG0-of (m2 / manufacture-01 
                              :ARG1 (p2 / paper) 
                              :ARG1-of (f / float-01 
                                    :ARG2 (m / market 
                                          :mod (s / stock)) 
                                    :time (d / date-entity 
                                          :month 3 
                                          :year 1988)))))))

# ::snt if the opening is meant to lift off however as ligeti has described it then towards the end the bubble floats higher and higher before being identified as such and promptly pricked
# ::tok if the opening is meant to lift off however as ligeti has described it then towards the end the bubble floats higher and higher before being identified as such and promptly pricked
# ::alignments 30-31|0.0.0.0.0.0 29-30|0.0.0.0.0.1 28-29|0.0.0.0.0.1.0.0 26-27|0.0.0.0.0.1.0 24-25|0.0.0.0.0.1.0.1 23-24|0.0.0.0.0.1.0.1.0 22-23|0.0.0.0 21-22|0.0.0.0.1 20-21|0.0.0.0.0 14-15|0.0.2.1 13-14|0.0.2.0 12-13|0.0.2 7-8|0.0.1 6-7|0.0 4-5|0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:21.388
# ::node	0	mean-01	4-5
# ::node	0.0	lift-01	6-7
# ::node	0.0.0	open-01	2-3
# ::node	0.0.0.0	and	22-23
# ::node	0.0.0.0.0	float-01	20-21
# ::node	0.0.0.0.0.0	prompt	30-31
# ::node	0.0.0.0.0.1	and	29-30
# ::node	0.0.0.0.0.1.0	identify-01	26-27
# ::node	0.0.0.0.0.1.0.0	such	28-29
# ::node	0.0.0.0.0.1.0.1	before	24-25
# ::node	0.0.0.0.0.1.0.1.0	high	23-24
# ::node	0.0.0.0.1	high	21-22
# ::node	0.0.1	off	7-8
# ::node	0.0.2	describe-01	12-13
# ::node	0.0.2.0	it	13-14
# ::node	0.0.2.1	then	14-15
# ::root	0	mean-01
# ::edge	and	op1	open-01	0.0.0.0	0.0.0	
# ::edge	and	op2	high	0.0.0.0	0.0.0.0.1	
# ::edge	before	op1	identify-01	0.0.0.0.0.1.0.1	0.0.0.0.0.1.0	
# ::edge	describe-01	ARG1	it	0.0.2	0.0.2.0	
# ::edge	describe-01	time	then	0.0.2	0.0.2.1	
# ::edge	float-01	ARG0	prompt	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	float-01	ARG1	and	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	float-01	manner	and	0.0.0.0.0	0.0.0.0	
# ::edge	high	time	before	0.0.0.0.0.1.0.1.0	0.0.0.0.0.1.0.1	
# ::edge	identify-01	ARG1	such	0.0.0.0.0.1.0	0.0.0.0.0.1.0.0	
# ::edge	identify-01	ARG2	and	0.0.0.0.0.1.0	0.0.0.0.0.1	
# ::edge	lift-01	ARG0	open-01	0.0	0.0.0	
# ::edge	lift-01	direction	off	0.0	0.0.1	
# ::edge	lift-01	time	describe-01	0.0	0.0.2	
# ::edge	mean-01	ARG1	lift-01	0	0.0	
(m / mean-01 
      :ARG1 (l / lift-01 
            :ARG0 (o2 / open-01 
                  :op-of (a2 / and 
                        :manner-of (f / float-01 
                              :ARG0 (p / prompt) 
                              :ARG1 (a / and 
                                    :ARG2-of (i / identify-01 
                                          :ARG1 (s / such) 
                                          :op-of (b / before 
                                                :time-of (h / high))))) 
                        :op1 (h2 / high))) 
            :direction (o / off) 
            :time (d / describe-01 
                  :ARG1 (i2 / it) 
                  :time (t / then))))

# ::snt when the company was floated in 1987 the shares were priced at 120p
# ::tok when the company was floated in 1987 the shares were priced at 120p
# ::alignments 10-11|0.0 8-9|0 6-7|0.0.0.0.0.0+0.0.0.0.0 4-5|0.0.0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:21.412
# ::node	0	share	8-9
# ::node	0.0	price-01	10-11
# ::node	0.0.0	company	2-3
# ::node	0.0.0.0	float-01	4-5
# ::node	0.0.0.0.0	date-entity	6-7
# ::node	0.0.0.0.0.0	1987	6-7
# ::root	0	share
(s / share 
      :ARG1-of (p / price-01 
            :ARG0 (c / company 
                  :ARG1-of (f / float-01 
                        :time (d / date-entity 
                              :year 1987)))))

# ::snt but the four national flags behind the catafalque were overwhelmed by the sea of placards and flags floating above the enormous throng which packed in front of it
# ::tok but the four national flags behind the catafalque were overwhelmed by the sea of placards and flags floating above the enormous throng which packed in front of it
# ::alignments 27-28|0.1.0.0.0.0.0.0.0.0 25-26|0.1.0.0.0.0.0.0.0.2 23-24|0.1.0.0.0.0.0.0.0 20-21|0.1.0.0.0.0.1.0 18-19|0.1.0.0.0.0.0.0 17-18|0.1.0.0.0.0.0 16-17|0.1.0.0.0.0.2 15-16|0.1.0.0.0.0 14-15|0.1.0.0.0.0.1 12-13|0.1.0.0.0 9-10|0.1.0.0 5-6|0.1.0.0.0.0.0.0.0.1 4-5|0.1.0 3-4|0.1 2-3|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:21.631
# ::node	0	contrast-01	0-1
# ::node	0.0	4	2-3
# ::node	0.1	nation	3-4
# ::node	0.1.0	flag	4-5
# ::node	0.1.0.0	overwhelm-01	9-10
# ::node	0.1.0.0.0	sea	12-13
# ::node	0.1.0.0.0.0	and	15-16
# ::node	0.1.0.0.0.0.0	float-01	17-18
# ::node	0.1.0.0.0.0.0.0	above	18-19
# ::node	0.1.0.0.0.0.0.0.0	pack-01	23-24
# ::node	0.1.0.0.0.0.0.0.0.0	it	27-28
# ::node	0.1.0.0.0.0.0.0.0.1	behind	5-6
# ::node	0.1.0.0.0.0.0.0.0.2	front	25-26
# ::node	0.1.0.0.0.0.1	placard	14-15
# ::node	0.1.0.0.0.0.1.0	enormous	20-21
# ::node	0.1.0.0.0.0.2	flag	16-17
# ::root	0	contrast-01
# ::edge	and	op1	sea	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	and	op2	placard	0.1.0.0.0.0	0.1.0.0.0.0.1	
# ::edge	and	op3	flag	0.1.0.0.0.0	0.1.0.0.0.0.2	
# ::edge	contrast-01	ARG1	4	0	0.0	
# ::edge	contrast-01	ARG2	nation	0	0.1	
# ::edge	flag	mod	nation	0.1.0	0.1	
# ::edge	float-01	ARG1	and	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	float-01	ARG2	above	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	overwhelm-01	ARG0	sea	0.1.0.0	0.1.0.0.0	
# ::edge	overwhelm-01	ARG1	flag	0.1.0.0	0.1.0	
# ::edge	pack-01	ARG0	above	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	pack-01	ARG1	it	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.0	
# ::edge	pack-01	ARG2	behind	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.1	
# ::edge	pack-01	location	front	0.1.0.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0.2	
# ::edge	placard	mod	enormous	0.1.0.0.0.0.1	0.1.0.0.0.0.1.0	
(c / contrast-01 
      :ARG1 4 
      :ARG2 (n / nation 
            :mod-of (f4 / flag 
                  :ARG1-of (o / overwhelm-01 
                        :ARG0 (s / sea 
                              :op-of (a2 / and 
                                    :ARG1-of (f2 / float-01 
                                          :ARG2 (a / above 
                                                :ARG0-of (p / pack-01 
                                                      :ARG1 (i / it) 
                                                      :ARG2 (b / behind) 
                                                      :location (f / front)))) 
                                    :op1 (p2 / placard 
                                          :mod (e / enormous)) 
                                    :op2 (f3 / flag)))))))

# ::snt some city analysts said they thought it would have been extremely difficult to float a company which was being prosecuted over an incident which involved its core business dash
# ::tok some city analysts said they thought it would have been extremely difficult to float a company which was being prosecuted over an incident which involved its core business dash
# ::alignments 27-28|0.1.1.1.1.0.0.0.0 26-27|0.1.1.1.1.0.0.0.0.0 24-25|0.1.1.1.1.0.0.0 22-23|0.1.1.1.1.0.0 19-20|0.1.1.1.1.0 15-16|0.1.1.1.1 13-14|0.1.1.1 11-12|0.1.1 10-11|0.1.1.0 6-7|0.1.1.1.0 5-6|0.1 4-5|0.1.0 3-4|0 2-3|0.0.0+0.0 1-2|0.0.0.0 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:22.094
# ::node	0	say-01	3-4
# ::node	0.0	person	2-3
# ::node	0.0.0	analyze-01	2-3
# ::node	0.0.0.0	city	1-2
# ::node	0.0.1	some	0-1
# ::node	0.1	think-01	5-6
# ::node	0.1.0	they	4-5
# ::node	0.1.1	difficult	11-12
# ::node	0.1.1.0	extreme	10-11
# ::node	0.1.1.1	float-01	13-14
# ::node	0.1.1.1.0	it	6-7
# ::node	0.1.1.1.1	company	15-16
# ::node	0.1.1.1.1.0	prosecute-01	19-20
# ::node	0.1.1.1.1.0.0	incident	22-23
# ::node	0.1.1.1.1.0.0.0	involve-01	24-25
# ::node	0.1.1.1.1.0.0.0.0	business	27-28
# ::node	0.1.1.1.1.0.0.0.0.0	core	26-27
# ::root	0	say-01
# ::edge	analyze-01	ARG0	person	0.0.0	0.0	
# ::edge	analyze-01	ARG1	city	0.0.0	0.0.0.0	
# ::edge	business	mod	core	0.1.1.1.1.0.0.0.0	0.1.1.1.1.0.0.0.0.0	
# ::edge	difficult	degree	extreme	0.1.1	0.1.1.0	
# ::edge	difficult	domain	float-01	0.1.1	0.1.1.1	
# ::edge	float-01	ARG0	it	0.1.1.1	0.1.1.1.0	
# ::edge	float-01	ARG1	company	0.1.1.1	0.1.1.1.1	
# ::edge	involve-01	ARG0	business	0.1.1.1.1.0.0.0	0.1.1.1.1.0.0.0.0	
# ::edge	involve-01	ARG1	incident	0.1.1.1.1.0.0.0	0.1.1.1.1.0.0	
# ::edge	person	quant	some	0.0	0.0.1	
# ::edge	prosecute-01	ARG0	company	0.1.1.1.1.0	0.1.1.1.1	
# ::edge	prosecute-01	ARG1	incident	0.1.1.1.1.0	0.1.1.1.1.0.0	
# ::edge	say-01	ARG0	person	0	0.0	
# ::edge	say-01	ARG1	think-01	0	0.1	
# ::edge	think-01	ARG0	they	0.1	0.1.0	
# ::edge	think-01	ARG1	difficult	0.1	0.1.1	
(s / say-01 
      :ARG0 (p2 / person 
            :ARG0-of (a / analyze-01 
                  :ARG1 (c3 / city)) 
            :quant (s2 / some)) 
      :ARG1 (t / think-01 
            :ARG0 (t2 / they) 
            :ARG1 (d / difficult 
                  :degree (e / extreme) 
                  :domain (f / float-01 
                        :ARG0 (i3 / it) 
                        :ARG1 (c2 / company 
                              :ARG0-of (p / prosecute-01 
                                    :ARG1 (i2 / incident 
                                          :ARG1-of (i / involve-01 
                                                :ARG0 (b / business 
                                                      :mod (c / core))))))))))

# ::snt its pretty good fun but itd be better if i could float
# ::tok its pretty good fun but itd be better if i could float
# ::alignments 11-12|0.1.0 10-11|0.1 9-10|0.1.0.0 4-5|0 3-4|0.0 2-3|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:22.124
# ::node	0	contrast-01	4-5
# ::node	0.0	fun	3-4
# ::node	0.0.0	good	2-3
# ::node	0.0.0.0	pretty	1-2
# ::node	0.1	possible	10-11
# ::node	0.1.0	float-01	11-12
# ::node	0.1.0.0	i	9-10
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	fun	0	0.0	
# ::edge	contrast-01	ARG2	possible	0	0.1	
# ::edge	float-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	fun	mod	good	0.0	0.0.0	
# ::edge	good	degree	pretty	0.0.0	0.0.0.0	
# ::edge	possible	domain	float-01	0.1	0.1.0	
(c / contrast-01 
      :ARG1 (f2 / fun 
            :mod (g / good 
                  :degree (p2 / pretty))) 
      :ARG2 (p / possible 
            :domain (f / float-01 
                  :ARG0 (i / i))))

# ::snt in dealing with one of the most taxing roles in the repertory frances ginzer made a staunch lucia not always floating in the upper register but firm of line while mark holland was a boldvoiced enrico
# ::tok in dealing with one of the most taxing roles in the repertory frances ginzer made a staunch lucia not always floating in the upper register but firm of line while mark holland was a boldvoiced enrico
# ::alignments 30-31|0.1.0.0 28-29|0.1.0 26-27|0.1 25-26|0 24-25|0.0 23-24|0.0.1 20-21|0.0.0 19-20|0.0.0.0 16-17|0.1.0.0.0 8-9|0.1.0.0.1.1 7-8|0.1.0.0.1 6-7|0.1.0.0.1.0 1-2|0.1.0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:22.338
# ::node	0	contrast-01	25-26
# ::node	0.0	register-02	24-25
# ::node	0.0.0	float-01	20-21
# ::node	0.0.0.0	always	19-20
# ::node	0.0.1	upper	23-24
# ::node	0.1	firm	26-27
# ::node	0.1.0	line	28-29
# ::node	0.1.0.0	mark-01	30-31
# ::node	0.1.0.0.0	staunch	16-17
# ::node	0.1.0.0.1	tax-01	7-8
# ::node	0.1.0.0.1.0	most	6-7
# ::node	0.1.0.0.1.1	role	8-9
# ::node	0.1.0.0.1.1.0	deal-01	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	firm	0	0.1	
# ::edge	deal-01	ARG1	role	0.1.0.0.1.1.0	0.1.0.0.1.1	
# ::edge	firm	mod	line	0.1	0.1.0	
# ::edge	float-01	ARG1	register-02	0.0.0	0.0	
# ::edge	float-01	time	always	0.0.0	0.0.0.0	
# ::edge	mark-01	ARG0	line	0.1.0.0	0.1.0	
# ::edge	mark-01	ARG1	staunch	0.1.0.0	0.1.0.0.0	
# ::edge	register-02	ARG1	contrast-01	0.0	0	
# ::edge	register-02	mod	upper	0.0	0.0.1	
# ::edge	role	mod	tax-01	0.1.0.0.1.1	0.1.0.0.1	
# ::edge	tax-01	ARG1	mark-01	0.1.0.0.1	0.1.0.0	
# ::edge	tax-01	degree	most	0.1.0.0.1	0.1.0.0.1.0	
(c / contrast-01 
      :ARG1-of (r / register-02 
            :ARG1-of (f2 / float-01 
                  :time (a / always)) 
            :mod (u / upper)) 
      :ARG2 (f / firm 
            :mod (l / line 
                  :ARG0-of (m / mark-01 
                        :ARG1 (s / staunch) 
                        :ARG1-of (t / tax-01 
                              :degree (m2 / most) 
                              :mod-of (r2 / role 
                                    :ARG1-of (d / deal-01)))))))

# ::snt when henry kissinger floated the idea of a formal dialogue between the superpowers the idea was quickly rejected in the west as too redolent of condominium
# ::tok when henry kissinger floated the idea of a formal dialogue between the superpowers the idea was quickly rejected in the west as too redolent of condominium
# ::alignments 22-23|0.0.0.1.0 20-21|0.0.0.1 17-18|0.0.0 16-17|0.0.0.2 14-15|0.0.0.0 12-13|0.1.0.0.0 10-11|0.1.0.0 9-10|0.1.0 8-9|0.1.0.1 5-6|0.1 3-4|0 1-3|0.0.1.0+0.0.1.1+0.0.1+0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:22.548
# ::node	0	float-01	3-4
# ::node	0.0	person	1-3
# ::node	0.0.0	reject-01	17-18
# ::node	0.0.0.0	idea	14-15
# ::node	0.0.0.1	west	20-21
# ::node	0.0.0.1.0	too	22-23
# ::node	0.0.0.2	quick	16-17
# ::node	0.0.1	name	1-3
# ::node	0.0.1.0	"kissinger"	1-3
# ::node	0.0.1.1	"henry"	1-3
# ::node	0.1	idea	5-6
# ::node	0.1.0	dialogue	9-10
# ::node	0.1.0.0	between	10-11
# ::node	0.1.0.0.0	superpower	12-13
# ::node	0.1.0.1	formal	8-9
# ::root	0	float-01
# ::edge	between	op1	superpower	0.1.0.0	0.1.0.0.0	
# ::edge	dialogue	mod	between	0.1.0	0.1.0.0	
# ::edge	dialogue	mod	formal	0.1.0	0.1.0.1	
# ::edge	float-01	ARG0	person	0	0.0	
# ::edge	float-01	ARG1	idea	0	0.1	
# ::edge	idea	topic	dialogue	0.1	0.1.0	
# ::edge	name	op1	"kissinger"	0.0.1	0.0.1.0	
# ::edge	name	op2	"henry"	0.0.1	0.0.1.1	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	reject-01	ARG0	person	0.0.0	0.0	
# ::edge	reject-01	ARG1	idea	0.0.0	0.0.0.0	
# ::edge	reject-01	location	west	0.0.0	0.0.0.1	
# ::edge	reject-01	manner	quick	0.0.0	0.0.0.2	
# ::edge	west	source	too	0.0.0.1	0.0.0.1.0	
(f2 / float-01 
      :ARG0 (p / person 
            :ARG0-of (r / reject-01 
                  :ARG1 (i / idea) 
                  :location (w / west 
                        :source (t / too)) 
                  :manner (q / quick)) 
            :name (n / name 
                  :op1 "kissinger" 
                  :op2 "henry")) 
      :ARG1 (i2 / idea 
            :topic (d / dialogue 
                  :mod (b / between 
                        :op1 (s / superpower)) 
                  :mod (f / formal))))

# ::snt it is expected the company floated would be the enlarged group coatings which mr youngman said could include any business in the orkem group that is involved in surface coatings
# ::tok it is expected the company floated would be the enlarged group coatings which mr youngman said could include any business in the orkem group that is involved in surface coatings
# ::alignments 28-29|0.0.1.0.1.1 26-27|0.0.1.0 23-24|0.0.1.0.0 19-20|0.0.1 18-19|0.0.1.1 17-18|0.0 16-17|0.0.2 15-16|0 10-11|0.0.0 5-6|0.0.1.0.1 4-5|0.0.1.0.1.0 2-3|0.0.1.0.1.2 0-1|0.0.1.0.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:22.851
# ::node	0	say-01	15-16
# ::node	0.0	include-01	17-18
# ::node	0.0.0	group	10-11
# ::node	0.0.1	business	19-20
# ::node	0.0.1.0	involve-01	26-27
# ::node	0.0.1.0.0	group	23-24
# ::node	0.0.1.0.1	float-01	5-6
# ::node	0.0.1.0.1.0	company	4-5
# ::node	0.0.1.0.1.1	surface	28-29
# ::node	0.0.1.0.1.2	expect-01	2-3
# ::node	0.0.1.0.1.2.0	it	0-1
# ::node	0.0.1.1	any	18-19
# ::node	0.0.2	possible	16-17
# ::root	0	say-01
# ::edge	business	mod	any	0.0.1	0.0.1.1	
# ::edge	expect-01	ARG0	it	0.0.1.0.1.2	0.0.1.0.1.2.0	
# ::edge	expect-01	ARG1	float-01	0.0.1.0.1.2	0.0.1.0.1	
# ::edge	float-01	ARG0	company	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	float-01	ARG1	surface	0.0.1.0.1	0.0.1.0.1.1	
# ::edge	float-01	ARG2	involve-01	0.0.1.0.1	0.0.1.0	
# ::edge	include-01	ARG0	group	0.0	0.0.0	
# ::edge	include-01	ARG1	business	0.0	0.0.1	
# ::edge	involve-01	ARG0	business	0.0.1.0	0.0.1	
# ::edge	involve-01	ARG1	group	0.0.1.0	0.0.1.0.0	
# ::edge	possible	domain	include-01	0.0.2	0.0	
# ::edge	say-01	ARG1	include-01	0	0.0	
(s2 / say-01 
      :ARG1 (i2 / include-01 
            :ARG0 (g2 / group) 
            :ARG1 (b / business 
                  :ARG0-of (i / involve-01 
                        :ARG1 (g / group) 
                        :ARG2-of (f / float-01 
                              :ARG0 (c / company) 
                              :ARG1 (s / surface) 
                              :ARG1-of (e / expect-01 
                                    :ARG0 (i3 / it)))) 
                  :mod (a / any)) 
            :domain-of (p / possible)))

# ::snt its like church with the sun shining through them coloured windows and pictures of jesus with light all round and angels floating in the sky and the sun shining and all that, it just falls all over  all round me like a firework going off and floating down the sky
# ::tok its like church with the sun shining through them coloured windows and pictures of jesus with light all round and angels floating in the sky and the sun shining and all that , it just falls all over all round me like a firework going off and floating down the sky
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:22.854
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i wonder who else remembers those neat 5guinea hmv windup gramophones which we used to take down to the river during the long summer evenings  the sounds of no no nanette and the desert song would float out of those delicious creeks
# ::tok i wonder who else remembers those neat 5guinea hmv windup gramophones which we used to take down to the river during the long summer evenings the sounds of no no nanette and the desert song would float out of those delicious creeks
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:22.857
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i floated about getting as much experience with different golfers as i could
# ::tok i floated about getting as much experience with different golfers as i could
# ::alignments 12-13|0 11-12|0.0.1 9-10|0.0+0.0.0 8-9|0.0.0.1 6-7|0.0.0.0 5-6|0.0.0.0.0 1-2|0.0.1.0 0-1|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.084
# ::node	0	possible	12-13
# ::node	0.0	golf-01	9-10
# ::node	0.0.0	person	9-10
# ::node	0.0.0.0	experience-01	6-7
# ::node	0.0.0.0.0	much	5-6
# ::node	0.0.0.1	differ-02	8-9
# ::node	0.0.1	i	11-12
# ::node	0.0.1.0	float-01	1-2
# ::node	0.0.1.0.0	i	0-1
# ::root	0	possible
(p / possible 
      :ARG1-of (g / golf-01 
            :ARG0 (p2 / person 
                  :ARG0-of (e / experience-01 
                        :degree (m / much)) 
                  :ARG1-of (d / differ-02)) 
            :ARG2 (i / i 
                  :ARG1-of (f / float-01 
                        :ARG0 (i2 / i)))))

# ::snt n offshoot will next week float off its midlands engineering businesses in a company called prospect
# ::tok n offshoot will next week float off its midlands engineering businesses in a company called prospect
# ::alignments 15-16|0.0.0 13-14|0.0 10-11|0.1 9-10|0.1.0 6-7|0.2 5-6|0 4-5|0.3 3-4|0.3.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.117
# ::node	0	float-01	5-6
# ::node	0.0	company	13-14
# ::node	0.0.0	prospect	15-16
# ::node	0.1	business	10-11
# ::node	0.1.0	engineer-01	9-10
# ::node	0.2	off	6-7
# ::node	0.3	week	4-5
# ::node	0.3.0	next	3-4
# ::root	0	float-01
# ::edge	business	mod	engineer-01	0.1	0.1.0	
# ::edge	float-01	ARG0	company	0	0.0	
# ::edge	float-01	ARG1	business	0	0.1	
# ::edge	float-01	ARG2	off	0	0.2	
# ::edge	float-01	time	week	0	0.3	
# ::edge	prospect	mod	company	0.0.0	0.0	
# ::edge	week	mod	next	0.3	0.3.0	
(f / float-01 
      :ARG0 (c / company 
            :mod-of (p / prospect)) 
      :ARG1 (b / business 
            :mod (e / engineer-01)) 
      :ARG2 (o / off) 
      :time (w / week 
            :mod (n / next)))

# ::snt listen while you float dash
# ::tok listen while you float dash
# ::alignments 3-4|0.0 2-3|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.124
# ::node	0	listen-01	0-1
# ::node	0.0	float-01	3-4
# ::node	0.0.0	you	2-3
# ::root	0	listen-01
# ::edge	float-01	ARG0	you	0.0	0.0.0	
# ::edge	listen-01	ARG1	float-01	0	0.0	
(l / listen-01 
      :ARG1 (f / float-01 
            :ARG0 (y / you)))

# ::snt mountleigh expects galerias to earn about 25m in profits in the current year and hopes it will float on a priceearnings multiple of 1214 times valuing it at 325m
# ::tok mountleigh expects galerias to earn about 25m in profits in the current year and hopes it will float on a priceearnings multiple of 1214 times valuing it at 325m
# ::alignments 26-27|0.1.0 23-24|0.0.2.0+0.0.2 21-22|0.1.1.2 17-18|0.1.1 15-16|0.1.1.1 14-15|0.1 13-14|0 12-13|0.1.1.0 11-12|0.0.0 8-9|0.1.1.0.0 4-5|0.0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.332
# ::node	0	and	13-14
# ::node	0.0	expect-01	1-2
# ::node	0.0.0	current	11-12
# ::node	0.0.1	earn-01	4-5
# ::node	0.0.2	date-entity	23-24
# ::node	0.0.2.0	1214	23-24
# ::node	0.1	hope-01	14-15
# ::node	0.1.0	it	26-27
# ::node	0.1.1	float-01	17-18
# ::node	0.1.1.0	year	12-13
# ::node	0.1.1.0.0	profit-01	8-9
# ::node	0.1.1.1	it	15-16
# ::node	0.1.1.2	multiple	21-22
# ::root	0	and
# ::edge	and	op1	expect-01	0	0.0	
# ::edge	and	op2	hope-01	0	0.1	
# ::edge	date-entity	op1	expect-01	0.0.2	0.0	
# ::edge	date-entity	year	1214	0.0.2	0.0.2.0	
# ::edge	expect-01	ARG0	current	0.0	0.0.0	
# ::edge	expect-01	ARG1	earn-01	0.0	0.0.1	
# ::edge	float-01	ARG0	year	0.1.1	0.1.1.0	
# ::edge	float-01	ARG1	it	0.1.1	0.1.1.1	
# ::edge	float-01	ARG2	multiple	0.1.1	0.1.1.2	
# ::edge	hope-01	ARG0	it	0.1	0.1.0	
# ::edge	hope-01	ARG1	float-01	0.1	0.1.1	
# ::edge	profit-01	time	year	0.1.1.0.0	0.1.1.0	
(a / and 
      :op1 (e2 / expect-01 
            :ARG0 (c / current) 
            :ARG1 (e / earn-01) 
            :op-of (d / date-entity 
                  :year 1214)) 
      :op2 (h / hope-01 
            :ARG0 (i / it) 
            :ARG1 (f / float-01 
                  :ARG0 (y / year 
                        :time-of (p / profit-01)) 
                  :ARG1 (i2 / it) 
                  :ARG2 (m / multiple))))

# ::snt i had the sensation of literally floating through it in a state of enormous contentment
# ::tok i had the sensation of literally floating through it in a state of enormous contentment
# ::alignments 13-14|0 11-12|0.0 8-9|0.0.0.1 6-7|0.0.0 5-6|0.0.0.2 3-4|0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.363
# ::node	0	enormous	13-14
# ::node	0.0	state	11-12
# ::node	0.0.0	float-01	6-7
# ::node	0.0.0.0	sensation	3-4
# ::node	0.0.0.0.0	i	0-1
# ::node	0.0.0.1	it	8-9
# ::node	0.0.0.2	literal	5-6
# ::root	0	enormous
(e / enormous 
      :poss-of (s / state 
            :location-of (f / float-01 
                  :ARG0 (s2 / sensation 
                        :example (i2 / i)) 
                  :ARG1 (i / it) 
                  :manner (l / literal))))

# ::snt they float to the top for the poacher to grab and spirit away
# ::tok they float to the top for the poacher to grab and spirit away
# ::alignments 12-13|0.1.0 11-12|0.2 10-11|0 9-10|0.1 4-5|0.0.1 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.386
# ::node	0	and	10-11
# ::node	0.0	float-01	1-2
# ::node	0.0.0	they	0-1
# ::node	0.0.1	top	4-5
# ::node	0.1	grab-01	9-10
# ::node	0.1.0	away	12-13
# ::node	0.2	spirit	11-12
# ::root	0	and
# ::edge	and	op1	grab-01	0	0.1	
# ::edge	and	op2	spirit	0	0.2	
# ::edge	float-01	ARG0	they	0.0	0.0.0	
# ::edge	float-01	ARG1	and	0.0	0	
# ::edge	float-01	ARG2	top	0.0	0.0.1	
# ::edge	grab-01	ARG1	away	0.1	0.1.0	
(a2 / and 
      :ARG1-of (f / float-01 
            :ARG0 (t2 / they) 
            :ARG2 (t / top)) 
      :op1 (g / grab-01 
            :ARG1 (a / away)) 
      :op2 (s / spirit))

# ::snt eleven years ago they argued against this saying that in heavy rain the tanks would float he said
# ::tok eleven years ago they argued against this saying that in heavy rain the tanks would float he said
# ::alignments 17-18|0.0.0.0.1 16-17|0.0.0.0.1.0 15-16|0.0.0.0 13-14|0.0.0.0.0 11-12|0.0.0.0.1.1 10-11|0.0.0.0.1.1.0 7-8|0 6-7|0.2 4-5|0.0.0 3-4|0.0 1-2|0.1.0+0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.831
# ::node	0	say-01	7-8
# ::node	0.0	they	3-4
# ::node	0.0.0	argue-01	4-5
# ::node	0.0.0.0	float-01	15-16
# ::node	0.0.0.0.0	tank	13-14
# ::node	0.0.0.0.1	say-01	17-18
# ::node	0.0.0.0.1.0	he	16-17
# ::node	0.0.0.0.1.1	rain-01	11-12
# ::node	0.0.0.0.1.1.0	heavy	10-11
# ::node	0.1	temporal-quantity	1-2
# ::node	0.1.0	year	1-2
# ::node	0.2	this	6-7
# ::root	0	say-01
# ::edge	argue-01	ARG0	they	0.0.0	0.0	
# ::edge	argue-01	ARG1	float-01	0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	tank	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG1	say-01	0.0.0.0	0.0.0.0.1	
# ::edge	rain-01	ARG1	say-01	0.0.0.0.1.1	0.0.0.0.1	
# ::edge	rain-01	mod	heavy	0.0.0.0.1.1	0.0.0.0.1.1.0	
# ::edge	say-01	ARG0	he	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	say-01	ARG0	they	0	0.0	
# ::edge	say-01	ARG1	temporal-quantity	0	0.1	
# ::edge	say-01	mod	this	0	0.2	
# ::edge	temporal-quantity	unit	year	0.1	0.1.0	
(s2 / say-01 
      :ARG0 (t3 / they 
            :ARG0-of (a / argue-01 
                  :ARG1 (f / float-01 
                        :ARG0 (t / tank) 
                        :ARG1 (s / say-01 
                              :ARG0 (h / he) 
                              :ARG1-of (r / rain-01 
                                    :mod (h2 / heavy)))))) 
      :ARG1 (t4 / temporal-quantity 
            :unit (y / year)) 
      :mod (t2 / this))

# ::snt something from the era just started floating around in the present day and influenced a lot of things that took place on the set
# ::tok something from the era just started floating around in the present day and influenced a lot of things that took place on the set
# ::alignments 20-21|0.1.0.0 17-18|0.1.0 15-16|0.1.0.1 13-14|0.1 12-13|0 11-12|0.0.0.3 10-11|0.0.0.3.0 7-8|0.0.0.2 6-7|0.0.0 5-6|0.0 4-5|0.0.1 3-4|0.0.0.1 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.924
# ::node	0	and	12-13
# ::node	0.0	start-01	5-6
# ::node	0.0.0	float-01	6-7
# ::node	0.0.0.0	something	0-1
# ::node	0.0.0.1	era	3-4
# ::node	0.0.0.2	around	7-8
# ::node	0.0.0.3	day	11-12
# ::node	0.0.0.3.0	present	10-11
# ::node	0.0.1	just	4-5
# ::node	0.1	influence-01	13-14
# ::node	0.1.0	thing	17-18
# ::node	0.1.0.0	place	20-21
# ::node	0.1.0.1	lot	15-16
# ::root	0	and
# ::edge	and	op1	start-01	0	0.0	
# ::edge	and	op2	influence-01	0	0.1	
# ::edge	day	mod	present	0.0.0.3	0.0.0.3.0	
# ::edge	float-01	ARG0	something	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	era	0.0.0	0.0.0.1	
# ::edge	float-01	location	around	0.0.0	0.0.0.2	
# ::edge	float-01	time	day	0.0.0	0.0.0.3	
# ::edge	influence-01	ARG1	thing	0.1	0.1.0	
# ::edge	place	mod	thing	0.1.0.0	0.1.0	
# ::edge	start-01	ARG1	float-01	0.0	0.0.0	
# ::edge	start-01	time	just	0.0	0.0.1	
# ::edge	thing	quant	lot	0.1.0	0.1.0.1	
(a / and 
      :op1 (s / start-01 
            :ARG1 (f / float-01 
                  :ARG0 (s2 / something) 
                  :ARG1 (e / era) 
                  :location (a2 / around) 
                  :time (d / day 
                        :mod (p2 / present))) 
            :time (j / just)) 
      :op2 (i / influence-01 
            :ARG1 (t / thing 
                  :mod-of (p / place) 
                  :quant (l / lot))))

# ::snt out over the marshes flocks of starlings rise and fall floating like shoals of fish in an ocean of emptiness and the hare races in circles  among the hooves of the quiet cattle
# ::tok out over the marshes flocks of starlings rise and fall floating like shoals of fish in an ocean of emptiness and the hare races in circles among the hooves of the quiet cattle
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:23.926
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the bloodstock company sangster floated in ireland with trainer vincent obrien has also disappointed investors as the partnership responsible five times for acquiring and training the leading number of british winners has hit a comparative losing streak
# ::tok the bloodstock company sangster floated in ireland with trainer vincent obrien has also disappointed investors as the partnership responsible five times for acquiring and training the leading number of british winners has hit a comparative losing streak
# ::alignments 35-36|0.3 32-33|0.1.1.0.0 27-28|0.1.1 26-27|0.1.1.0 24-25|0.2 23-24|0 22-23|0.1 19-20|0.1.0 18-19|0.0.1.2 17-18|0.0.1.0 14-15|0.0.1.1+0.0.1 13-14|0.0 12-13|0.0.2 8-9|0.2.0 4-5|0.1.1.0.1 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:24.225
# ::node	0	and	23-24
# ::node	0.0	disappoint-01	13-14
# ::node	0.0.0	company	2-3
# ::node	0.0.1	person	14-15
# ::node	0.0.1.0	partner-01	17-18
# ::node	0.0.1.1	invest-01	14-15
# ::node	0.0.1.2	responsible-41	18-19
# ::node	0.0.2	also	12-13
# ::node	0.1	acquire-01	22-23
# ::node	0.1.0	5	19-20
# ::node	0.1.1	number	27-28
# ::node	0.1.1.0	lead-01	26-27
# ::node	0.1.1.0.0	hit-01	32-33
# ::node	0.1.1.0.1	float-01	4-5
# ::node	0.2	train-01	24-25
# ::node	0.2.0	train-01	8-9
# ::node	0.3	lose-02	35-36
# ::root	0	and
# ::edge	acquire-01	ARG0	5	0.1	0.1.0	
# ::edge	acquire-01	ARG1	number	0.1	0.1.1	
# ::edge	and	op1	acquire-01	0	0.1	
# ::edge	and	op2	train-01	0	0.2	
# ::edge	and	op3	lose-02	0	0.3	
# ::edge	disappoint-01	ARG0	company	0.0	0.0.0	
# ::edge	disappoint-01	ARG1	person	0.0	0.0.1	
# ::edge	disappoint-01	manner	and	0.0	0	
# ::edge	disappoint-01	mod	also	0.0	0.0.2	
# ::edge	float-01	ARG1	lead-01	0.1.1.0.1	0.1.1.0	
# ::edge	hit-01	ARG1	lead-01	0.1.1.0.0	0.1.1.0	
# ::edge	invest-01	ARG0	person	0.0.1.1	0.0.1	
# ::edge	lead-01	ARG0	number	0.1.1.0	0.1.1	
# ::edge	partner-01	ARG0	person	0.0.1.0	0.0.1	
# ::edge	responsible-41	ARG1	person	0.0.1.2	0.0.1	
# ::edge	train-01	ARG2	train-01	0.2.0	0.2	
(a / and 
      :manner-of (d / disappoint-01 
            :ARG0 (c / company) 
            :ARG1 (p2 / person 
                  :ARG0-of (p / partner-01) 
                  :ARG0-of (i / invest-01) 
                  :ARG1-of (r / responsible-41)) 
            :mod (a3 / also)) 
      :op1 (a2 / acquire-01 
            :ARG0 5 
            :ARG1 (n / number 
                  :ARG0-of (l2 / lead-01 
                        :ARG1-of (h / hit-01) 
                        :ARG1-of (f / float-01)))) 
      :op2 (t / train-01 
            :ARG2-of (t2 / train-01)) 
      :op3 (l / lose-02))

# ::snt we usually finish by floating to some relaxing music played on jills taperecorder
# ::tok we usually finish by floating to some relaxing music played on jills taperecorder
# ::alignments 8-9|0.0.0.0 6-7|0.0.0.0.0 4-5|0.0.0 2-3|0 1-2|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:24.245
# ::node	0	finish-01	2-3
# ::node	0.0	we	0-1
# ::node	0.0.0	float-01	4-5
# ::node	0.0.0.0	music	8-9
# ::node	0.0.0.0.0	some	6-7
# ::node	0.1	usual	1-2
# ::root	0	finish-01
# ::edge	finish-01	ARG0	we	0	0.0	
# ::edge	finish-01	mod	usual	0	0.1	
# ::edge	float-01	ARG0	we	0.0.0	0.0	
# ::edge	float-01	ARG1	music	0.0.0	0.0.0.0	
# ::edge	music	quant	some	0.0.0.0	0.0.0.0.0	
(f2 / finish-01 
      :ARG0 (w / we 
            :ARG0-of (f / float-01 
                  :ARG1 (m / music 
                        :quant (s / some)))) 
      :mod (u / usual))

# ::snt btr gained 10p to 453p as chief executive john cahill confirmed that it was considering floating off some of its us operations
# ::tok btr gained 10p to 453p as chief executive john cahill confirmed that it was considering floating off some of its us operations
# ::alignments 21-22|0.0.0.0.1.0 17-18|0.0.0.0.2 16-17|0.0.0.0.1.1 15-16|0.0.0.0.1 14-15|0.0.0.0 12-13|0.0.0.0.0 10-11|0.0.0 8-10|0.0.2.0+0.0.2.1+0.0.2+0.0 7-8|0.0.1.0 6-7|0.0.1.1+0.0.1 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:24.543
# ::node	0	gain-02	1-2
# ::node	0.0	person	8-10
# ::node	0.0.0	confirm-01	10-11
# ::node	0.0.0.0	consider-02	14-15
# ::node	0.0.0.0.0	it	12-13
# ::node	0.0.0.0.1	float-01	15-16
# ::node	0.0.0.0.1.0	operation	21-22
# ::node	0.0.0.0.1.1	off	16-17
# ::node	0.0.0.0.2	some	17-18
# ::node	0.0.1	have-org-role-91	6-7
# ::node	0.0.1.0	executive	7-8
# ::node	0.0.1.1	chief	6-7
# ::node	0.0.2	name	8-10
# ::node	0.0.2.0	"cahill"	8-10
# ::node	0.0.2.1	"john"	8-10
# ::root	0	gain-02
# ::edge	confirm-01	ARG0	person	0.0.0	0.0	
# ::edge	confirm-01	ARG1	consider-02	0.0.0	0.0.0.0	
# ::edge	consider-02	ARG0	it	0.0.0.0	0.0.0.0.0	
# ::edge	consider-02	ARG1	float-01	0.0.0.0	0.0.0.0.1	
# ::edge	consider-02	ARG2	some	0.0.0.0	0.0.0.0.2	
# ::edge	float-01	ARG1	operation	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	float-01	ARG2	off	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	gain-02	ARG1	person	0	0.0	
# ::edge	have-org-role-91	ARG0	person	0.0.1	0.0	
# ::edge	have-org-role-91	ARG1	executive	0.0.1	0.0.1.0	
# ::edge	have-org-role-91	ARG2	chief	0.0.1	0.0.1.1	
# ::edge	name	op1	"cahill"	0.0.2	0.0.2.0	
# ::edge	name	op2	"john"	0.0.2	0.0.2.1	
# ::edge	person	name	name	0.0	0.0.2	
(g / gain-02 
      :ARG1 (p / person 
            :ARG0-of (c2 / confirm-01 
                  :ARG1 (c / consider-02 
                        :ARG0 (i / it) 
                        :ARG1 (f / float-01 
                              :ARG1 (o / operation) 
                              :ARG2 (o2 / off)) 
                        :ARG2 (s / some))) 
            :ARG0-of (h / have-org-role-91 
                  :ARG1 (e / executive) 
                  :ARG2 (c3 / chief)) 
            :name (n / name 
                  :op1 "cahill" 
                  :op2 "john")))

# ::snt jo complacently shook out her biascut tunic of mintgreen embroidered chiffon that floated to thigh level over a fortunypleated skirt and congratulated herself on at least learning how to dress while she was in europe
# ::tok jo complacently shook out her biascut tunic of mintgreen embroidered chiffon that floated to thigh level over a fortunypleated skirt and congratulated herself on at least learning how to dress while she was in europe
# ::alignments 34-35|0.0.1.0.0.0.0.0+0.0.1.0.0.0.0+0.0.1.0.0.0 31-32|0.0.0 29-30|0 26-27|0.0 21-22|0.0.1 20-21|0.0.1.0 15-16|0.0.1.0.0.1 12-13|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:24.634
# ::node	0	dress	29-30
# ::node	0.0	learn-01	26-27
# ::node	0.0.0	she	31-32
# ::node	0.0.1	congratulate-01	21-22
# ::node	0.0.1.0	and	20-21
# ::node	0.0.1.0.0	float-01	12-13
# ::node	0.0.1.0.0.0	continent	34-35
# ::node	0.0.1.0.0.0.0	name	34-35
# ::node	0.0.1.0.0.0.0.0	"Europe"	34-35
# ::node	0.0.1.0.0.1	level	15-16
# ::root	0	dress
(d / dress 
      :ARG1-of (l / learn-01 
            :ARG0 (s / she) 
            :manner-of (c2 / congratulate-01 
                  :op-of (a / and 
                        :op1 (f / float-01 
                              :ARG0 (c / continent 
                                    :name (n / name 
                                          :op1 "Europe")) 
                              :ARG1 (l2 / level))))))

# ::snt the idea of unscrambling the gpt joint venture in return for gecs abandoning its bid was first floated two months ago by plessey
# ::tok the idea of unscrambling the gpt joint venture in return for gecs abandoning its bid was first floated two months ago by plessey
# ::alignments 19-20|0.2.1.0.0+0.2.1.0 18-19|0.2.1 17-18|0.1 14-15|0 12-13|0.2 7-8|0.0 6-7|0.0.0 1-2|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:24.765
# ::node	0	bid-01	14-15
# ::node	0.0	venture	7-8
# ::node	0.0.0	joint	6-7
# ::node	0.1	float-01	17-18
# ::node	0.2	abandon-01	12-13
# ::node	0.2.0	idea	1-2
# ::node	0.2.1	2	18-19
# ::node	0.2.1.0	temporal-quantity	19-20
# ::node	0.2.1.0.0	month	19-20
# ::root	0	bid-01
# ::edge	abandon-01	ARG0	idea	0.2	0.2.0	
# ::edge	abandon-01	ARG1	bid-01	0.2	0	
# ::edge	abandon-01	ARG2	2	0.2	0.2.1	
# ::edge	bid-01	ARG1	venture	0	0.0	
# ::edge	float-01	ARG1	bid-01	0.1	0	
# ::edge	temporal-quantity	quant	2	0.2.1.0	0.2.1	
# ::edge	temporal-quantity	unit	month	0.2.1.0	0.2.1.0.0	
# ::edge	venture	mod	joint	0.0	0.0.0	
(b / bid-01 
      :ARG1 (v / venture 
            :mod (j / joint)) 
      :ARG1-of (f / float-01) 
      :ARG1-of (a / abandon-01 
            :ARG0 (i / idea) 
            :ARG2 (2 / 2 
                  :quant-of (t / temporal-quantity 
                        :unit (m / month)))))

# ::snt patricof which manages funds for a number of uk institutions including eagle star and standard life hopes to float the company on the stock market in five years
# ::tok patricof which manages funds for a number of uk institutions including eagle star and standard life hopes to float the company on the stock market in five years
# ::alignments 27-28|0.1.0.1.0.0+0.1.0.1.0 26-27|0.1.0.1 24-25|0.1.3 23-24|0.1.3.0 20-21|0.1.1 18-19|0.1 16-17|0.1.2 15-16|0.1.0 14-15|0.1.0.0 13-14|0 12-13|0.0 9-10|0.1.2.0 6-7|0.1.2.0.0 3-4|0.1.2.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:25.169
# ::node	0	and	13-14
# ::node	0.0	star	12-13
# ::node	0.1	float-01	18-19
# ::node	0.1.0	life	15-16
# ::node	0.1.0.0	standard	14-15
# ::node	0.1.0.1	5	26-27
# ::node	0.1.0.1.0	temporal-quantity	27-28
# ::node	0.1.0.1.0.0	year	27-28
# ::node	0.1.1	company	20-21
# ::node	0.1.2	hope-01	16-17
# ::node	0.1.2.0	institution	9-10
# ::node	0.1.2.0.0	number	6-7
# ::node	0.1.2.0.0.0	fund	3-4
# ::node	0.1.3	market	24-25
# ::node	0.1.3.0	stock	23-24
# ::root	0	and
# ::edge	and	op1	star	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	float-01	ARG0	life	0.1	0.1.0	
# ::edge	float-01	ARG1	company	0.1	0.1.1	
# ::edge	float-01	location	market	0.1	0.1.3	
# ::edge	fund	poss	number	0.1.2.0.0.0	0.1.2.0.0	
# ::edge	hope-01	ARG0	institution	0.1.2	0.1.2.0	
# ::edge	hope-01	ARG1	float-01	0.1.2	0.1	
# ::edge	institution	quant	number	0.1.2.0	0.1.2.0.0	
# ::edge	life	mod	standard	0.1.0	0.1.0.0	
# ::edge	life	quant	5	0.1.0	0.1.0.1	
# ::edge	market	mod	stock	0.1.3	0.1.3.0	
# ::edge	temporal-quantity	quant	5	0.1.0.1.0	0.1.0.1	
# ::edge	temporal-quantity	unit	year	0.1.0.1.0	0.1.0.1.0.0	
(a / and 
      :op1 (s3 / star) 
      :op2 (f / float-01 
            :ARG0 (l / life 
                  :mod (s2 / standard) 
                  :quant (5 / 5 
                        :quant-of (t / temporal-quantity 
                              :unit (y / year)))) 
            :ARG1 (c / company) 
            :ARG1-of (h / hope-01 
                  :ARG0 (i / institution 
                        :quant (n / number 
                              :poss-of (f2 / fund)))) 
            :location (m / market 
                  :mod (s / stock))))

# ::snt gan publicly stated its intention to float on the stock market a year ago but these plans have had to be put back because general portfolio does not have sufficient distributable reserves from which to pay dividends to shareholders, gan intends to float the company in time however
# ::tok gan publicly stated its intention to float on the stock market a year ago but these plans have had to be put back because general portfolio does not have sufficient distributable reserves from which to pay dividends to shareholders , gan intends to float the company in time however
# ::alignments 47-48|0.1.1.0.0.0.0 45-46|0.1.1.0.0.0 43-44|0.1.1.0.0 41-42|0.1.1.0 36-37|0.0.1.0 35-36|0.0.1 31-32|0.0 29-30|0.0.0 24-25|0.1.0.0 23-24|0 22-23|0.2 16-17|0.1.0 14-15|0.1.1 12-13|0.1.2.0 10-11|0.1.2.2 9-10|0.1.2.2.0 6-7|0.1.2 4-5|0.1.2.1 2-3|0.1 1-2|0.1.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:26.318
# ::node	0	cause-01	23-24
# ::node	0.0	reserve-01	31-32
# ::node	0.0.0	suffice-01	29-30
# ::node	0.0.1	pay-01	35-36
# ::node	0.0.1.0	dividend	36-37
# ::node	0.1	state-01	2-3
# ::node	0.1.0	plan-01	16-17
# ::node	0.1.0.0	general	24-25
# ::node	0.1.1	contrast-01	14-15
# ::node	0.1.1.0	intend-01	41-42
# ::node	0.1.1.0.0	float-01	43-44
# ::node	0.1.1.0.0.0	company	45-46
# ::node	0.1.1.0.0.0.0	time	47-48
# ::node	0.1.2	float-01	6-7
# ::node	0.1.2.0	year	12-13
# ::node	0.1.2.1	intend-01	4-5
# ::node	0.1.2.2	market	10-11
# ::node	0.1.2.2.0	stock	9-10
# ::node	0.1.3	public	1-2
# ::node	0.2	back	22-23
# ::root	0	cause-01
# ::edge	cause-01	ARG0	reserve-01	0	0.0	
# ::edge	cause-01	ARG1	state-01	0	0.1	
# ::edge	cause-01	mod	back	0	0.2	
# ::edge	company	mod	time	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	contrast-01	ARG1	intend-01	0.1.1	0.1.1.0	
# ::edge	float-01	ARG1	company	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	float-01	ARG1	year	0.1.2	0.1.2.0	
# ::edge	float-01	ARG2	market	0.1.2	0.1.2.2	
# ::edge	intend-01	ARG1	float-01	0.1.1.0	0.1.1.0.0	
# ::edge	intend-01	ARG1	float-01	0.1.2.1	0.1.2	
# ::edge	market	mod	stock	0.1.2.2	0.1.2.2.0	
# ::edge	pay-01	ARG1	dividend	0.0.1	0.0.1.0	
# ::edge	plan-01	ARG1	general	0.1.0	0.1.0.0	
# ::edge	reserve-01	purpose	pay-01	0.0	0.0.1	
# ::edge	state-01	ARG0	plan-01	0.1	0.1.0	
# ::edge	state-01	ARG1	contrast-01	0.1	0.1.1	
# ::edge	state-01	ARG2	float-01	0.1	0.1.2	
# ::edge	state-01	manner	public	0.1	0.1.3	
# ::edge	suffice-01	ARG1	reserve-01	0.0.0	0.0	
(c2 / cause-01 
      :ARG0 (r / reserve-01 
            :ARG1-of (s / suffice-01) 
            :purpose (p / pay-01 
                  :ARG1 (d / dividend))) 
      :ARG1 (s3 / state-01 
            :ARG0 (p2 / plan-01 
                  :ARG1 (g / general)) 
            :ARG1 (c3 / contrast-01 
                  :ARG1 (i / intend-01 
                        :ARG1 (f / float-01 
                              :ARG1 (c / company 
                                    :mod (t / time))))) 
            :ARG2 (f2 / float-01 
                  :ARG1 (y / year) 
                  :ARG1-of (i2 / intend-01) 
                  :ARG2 (m / market 
                        :mod (s2 / stock))) 
            :manner (p3 / public)) 
      :mod (b / back))

# ::snt michael richardson said that the government was going to have difficulty floating the distribution companies and then national power and powergen
# ::tok michael richardson said that the government was going to have difficulty floating the distribution companies and then national power and powergen
# ::alignments 19-20|0.0.1.1 18-19|0.0.1 17-18|0.0.1.0 16-17|0.0.1.2 15-16|0.0 14-15|0.0.0.0 13-14|0.0.0.0.0 11-12|0.0.0 10-11|0.0.0.1 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:26.496
# ::node	0	say-01	2-3
# ::node	0.0	and	15-16
# ::node	0.0.0	float-01	11-12
# ::node	0.0.0.0	company	14-15
# ::node	0.0.0.0.0	distribute-01	13-14
# ::node	0.0.0.1	difficult	10-11
# ::node	0.0.1	power	18-19
# ::node	0.0.1.0	nation	17-18
# ::node	0.0.1.1	and	19-20
# ::node	0.0.1.2	then	16-17
# ::root	0	say-01
# ::edge	and	op1	float-01	0.0	0.0.0	
# ::edge	and	op1	power	0.0.1.1	0.0.1	
# ::edge	and	op2	power	0.0	0.0.1	
# ::edge	distribute-01	ARG0	company	0.0.0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	company	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	difficult	0.0.0	0.0.0.1	
# ::edge	power	mod	nation	0.0.1	0.0.1.0	
# ::edge	power	time	then	0.0.1	0.0.1.2	
# ::edge	say-01	ARG1	and	0	0.0	
(s / say-01 
      :ARG1 (a2 / and 
            :op1 (f / float-01 
                  :ARG0 (c / company 
                        :ARG0-of (d / distribute-01)) 
                  :ARG1 (d2 / difficult)) 
            :op2 (p / power 
                  :mod (n / nation) 
                  :op-of (a / and) 
                  :time (t / then))))

# ::snt again a very vocal soundum entertaining game vocal soundum in the fiftieth minute on a break almondsburys alex stocker was nearest to scoring for them when he floated a long ball forward which mark sibble was very glad to tip over the bar
# ::tok again a very vocal soundum entertaining game vocal soundum in the fiftieth minute on a break almondsburys alex stocker was nearest to scoring for them when he floated a long ball forward which mark sibble was very glad to tip over the bar
# ::alignments 42-43|0.2.0 39-40|0.2 37-38|0 36-37|0.1 33-34|0.0.3.0 31-32|0.0.3 30-31|0.0.1 27-28|0.0 26-27|0.0.0 20-21|0.2.0.0.0+0.2.0.0 12-13|0.0.3.0.1.0+0.0.3.0.1 7-8|0.0.3.0.0 6-7|0.0.2.1 5-6|0.0.2 3-4|0.0.2.0.0 2-3|0.0.2.0 0-1|0.0.2.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:26.907
# ::node	0	glad	37-38
# ::node	0.0	float-01	27-28
# ::node	0.0.0	he	26-27
# ::node	0.0.1	ball	30-31
# ::node	0.0.2	entertain-01	5-6
# ::node	0.0.2.0	very	2-3
# ::node	0.0.2.0.0	vocal	3-4
# ::node	0.0.2.0.0.0	again	0-1
# ::node	0.0.2.1	game	6-7
# ::node	0.0.3	forward	31-32
# ::node	0.0.3.0	mark-01	33-34
# ::node	0.0.3.0.0	vocal	7-8
# ::node	0.0.3.0.1	temporal-quantity	12-13
# ::node	0.0.3.0.1.0	minute	12-13
# ::node	0.1	very	36-37
# ::node	0.2	tip	39-40
# ::node	0.2.0	bar-01	42-43
# ::node	0.2.0.0	near	20-21
# ::node	0.2.0.0.0	most	20-21
# ::root	0	glad
# ::edge	again	example	vocal	0.0.2.0.0.0	0.0.2.0.0	
# ::edge	bar-01	ARG0	near	0.2.0	0.2.0.0	
# ::edge	bar-01	part	tip	0.2.0	0.2	
# ::edge	entertain-01	ARG0	very	0.0.2	0.0.2.0	
# ::edge	entertain-01	ARG1	game	0.0.2	0.0.2.1	
# ::edge	entertain-01	ARG2	float-01	0.0.2	0.0	
# ::edge	float-01	ARG0	he	0.0	0.0.0	
# ::edge	float-01	ARG1	ball	0.0	0.0.1	
# ::edge	float-01	ARG4	glad	0.0	0	
# ::edge	float-01	direction	forward	0.0	0.0.3	
# ::edge	glad	degree	very	0	0.1	
# ::edge	glad	domain	tip	0	0.2	
# ::edge	mark-01	ARG0	vocal	0.0.3.0	0.0.3.0.0	
# ::edge	mark-01	ARG1	forward	0.0.3.0	0.0.3	
# ::edge	near	degree	most	0.2.0.0	0.2.0.0.0	
# ::edge	temporal-quantity	op1	mark-01	0.0.3.0.1	0.0.3.0	
# ::edge	temporal-quantity	unit	minute	0.0.3.0.1	0.0.3.0.1.0	
# ::edge	vocal	degree	very	0.0.2.0.0	0.0.2.0	
(g / glad 
      :ARG4-of (f2 / float-01 
            :ARG0 (h / he) 
            :ARG1 (b2 / ball) 
            :ARG2-of (e / entertain-01 
                  :ARG0 (v4 / very 
                        :degree-of (v3 / vocal 
                              :example-of (a / again))) 
                  :ARG1 (g2 / game)) 
            :direction (f / forward 
                  :ARG1-of (m / mark-01 
                        :ARG0 (v2 / vocal) 
                        :op-of (t2 / temporal-quantity 
                              :unit (m3 / minute))))) 
      :degree (v / very) 
      :domain (t / tip 
            :part-of (b / bar-01 
                  :ARG0 (n / near 
                        :degree (m2 / most)))))

# ::snt because of the heat generated these filters burn out fairly quickly and it has been known for whole sheets of burnt but completely legible paper to float about the surrounding area
# ::tok because of the heat generated these filters burn out fairly quickly and it has been known for whole sheets of burnt but completely legible paper to float about the surrounding area
# ::alignments 30-31|0.0.0.0.0 29-30|0.0.0.0.0.0 26-27|0.0.0.0 24-25|0.0.0 22-23|0.0.0.0.1.0.0.1.0 21-22|0 20-21|0.0 18-19|0.0.0.0.1.2 17-18|0.0.0.0.1.2.0 15-16|0.0.0.0.1 12-13|0.0.0.0.1.1 11-12|0.0.0.0.1.0.1.1 10-11|0.0.0.0.1.0.1.0 9-10|0.0.0.0.1.0.1.0.0 7-8|0.0.0.0.1.0.1 6-7|0.0.0.0.1.0 4-5|0.0.0.0.1.0.0 3-4|0.0.0.0.1.0.0.0 0-1|0.0.0.0.1.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:27.310
# ::node	0	contrast-01	21-22
# ::node	0.0	burn-01	20-21
# ::node	0.0.0	paper	24-25
# ::node	0.0.0.0	float-01	26-27
# ::node	0.0.0.0.0	area	30-31
# ::node	0.0.0.0.0.0	surround-01	29-30
# ::node	0.0.0.0.1	know-01	15-16
# ::node	0.0.0.0.1.0	filter-02	6-7
# ::node	0.0.0.0.1.0.0	generate-01	4-5
# ::node	0.0.0.0.1.0.0.0	heat	3-4
# ::node	0.0.0.0.1.0.0.1	cause-01	0-1
# ::node	0.0.0.0.1.0.0.1.0	complete	22-23
# ::node	0.0.0.0.1.0.1	burn-01	7-8
# ::node	0.0.0.0.1.0.1.0	quick	10-11
# ::node	0.0.0.0.1.0.1.0.0	fair	9-10
# ::node	0.0.0.0.1.0.1.1	and	11-12
# ::node	0.0.0.0.1.1	it	12-13
# ::node	0.0.0.0.1.2	sheet	18-19
# ::node	0.0.0.0.1.2.0	whole	17-18
# ::root	0	contrast-01
# ::edge	and	op1	burn-01	0.0.0.0.1.0.1.1	0.0.0.0.1.0.1	
# ::edge	burn-01	ARG1	filter-02	0.0.0.0.1.0.1	0.0.0.0.1.0	
# ::edge	burn-01	manner	quick	0.0.0.0.1.0.1	0.0.0.0.1.0.1.0	
# ::edge	cause-01	ARG0	generate-01	0.0.0.0.1.0.0.1	0.0.0.0.1.0.0	
# ::edge	cause-01	ARG1	complete	0.0.0.0.1.0.0.1	0.0.0.0.1.0.0.1.0	
# ::edge	contrast-01	ARG1	burn-01	0	0.0	
# ::edge	float-01	ARG0	paper	0.0.0.0	0.0.0	
# ::edge	float-01	location	area	0.0.0.0	0.0.0.0.0	
# ::edge	generate-01	ARG0	heat	0.0.0.0.1.0.0	0.0.0.0.1.0.0.0	
# ::edge	generate-01	ARG1	filter-02	0.0.0.0.1.0.0	0.0.0.0.1.0	
# ::edge	know-01	ARG0	filter-02	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	know-01	ARG1	it	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	know-01	ARG2	sheet	0.0.0.0.1	0.0.0.0.1.2	
# ::edge	know-01	purpose	float-01	0.0.0.0.1	0.0.0.0	
# ::edge	paper	mod	burn-01	0.0.0	0.0	
# ::edge	quick	mod	fair	0.0.0.0.1.0.1.0	0.0.0.0.1.0.1.0.0	
# ::edge	sheet	mod	whole	0.0.0.0.1.2	0.0.0.0.1.2.0	
# ::edge	surround-01	ARG1	area	0.0.0.0.0.0	0.0.0.0.0	
(c2 / contrast-01 
      :ARG1 (b / burn-01 
            :mod-of (p / paper 
                  :ARG0-of (f / float-01 
                        :location (a / area 
                              :ARG1-of (s / surround-01)) 
                        :purpose-of (k / know-01 
                              :ARG0 (f3 / filter-02 
                                    :ARG1-of (g / generate-01 
                                          :ARG0 (h / heat) 
                                          :ARG0-of (c3 / cause-01 
                                                :ARG1 (c / complete))) 
                                    :ARG1-of (b2 / burn-01 
                                          :manner (q / quick 
                                                :mod (f2 / fair)) 
                                          :op-of (a2 / and))) 
                              :ARG1 (i / it) 
                              :ARG2 (s2 / sheet 
                                    :mod (w / whole)))))))

# ::snt this could be awkward at night but friends advise me that a modest punt launched upon the tide at kinsale with myself in it would float me to innishannon within 90 minutes with no need of my steering it
# ::tok this could be awkward at night but friends advise me that a modest punt launched upon the tide at kinsale with myself in it would float me to innishannon within 90 minutes with no need of my steering it
# ::alignments 38-39|0.1.1.1.1.1.1.0 37-38|0.1.1.1.1.1.1 34-35|0.1.1.1.1.1 33-34|0.1.1.1.1.1.2 31-32|0.1.1.1.1.0.1+0.1.1.1.1.0 30-31|0.1.1.1.1.0.0 29-30|0.1.1.1.1 25-26|0.1.1.1 23-24|0.1.1.1.0 17-18|0.1.1.0 14-15|0.1.1 12-13|0.1.1.1.1.1.0 8-9|0.1 7-8|0.0.0.0+0.0.0 6-7|0 5-6|0.0.2 3-4|0.0 1-2|0.0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:29.001
# ::node	0	contrast-01	6-7
# ::node	0.0	awkward	3-4
# ::node	0.0.0	have-rel-role-91	7-8
# ::node	0.0.0.0	friend	7-8
# ::node	0.0.1	possible	1-2
# ::node	0.0.2	night	5-6
# ::node	0.1	advise-01	8-9
# ::node	0.1.0	this	0-1
# ::node	0.1.1	launch-01	14-15
# ::node	0.1.1.0	tide	17-18
# ::node	0.1.1.1	float-01	25-26
# ::node	0.1.1.1.0	it	23-24
# ::node	0.1.1.1.1	within	29-30
# ::node	0.1.1.1.1.0	temporal-quantity	31-32
# ::node	0.1.1.1.1.0.0	90	30-31
# ::node	0.1.1.1.1.0.1	minute	31-32
# ::node	0.1.1.1.1.1	need-01	34-35
# ::node	0.1.1.1.1.1.0	modest	12-13
# ::node	0.1.1.1.1.1.1	steer-01	37-38
# ::node	0.1.1.1.1.1.1.0	it	38-39
# ::node	0.1.1.1.1.1.2	-	33-34
# ::root	0	contrast-01
# ::edge	advise-01	ARG0	this	0.1	0.1.0	
# ::edge	advise-01	ARG1	launch-01	0.1	0.1.1	
# ::edge	awkward	time	night	0.0	0.0.2	
# ::edge	contrast-01	ARG1	awkward	0	0.0	
# ::edge	contrast-01	ARG2	advise-01	0	0.1	
# ::edge	float-01	ARG0	it	0.1.1.1	0.1.1.1.0	
# ::edge	float-01	ARG1	within	0.1.1.1	0.1.1.1.1	
# ::edge	have-rel-role-91	ARG0	awkward	0.0.0	0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.0	0.0.0.0	
# ::edge	launch-01	ARG0	tide	0.1.1	0.1.1.0	
# ::edge	launch-01	ARG1	float-01	0.1.1	0.1.1.1	
# ::edge	need-01	ARG0	modest	0.1.1.1.1.1	0.1.1.1.1.1.0	
# ::edge	need-01	ARG1	steer-01	0.1.1.1.1.1	0.1.1.1.1.1.1	
# ::edge	need-01	polarity	-	0.1.1.1.1.1	0.1.1.1.1.1.2	
# ::edge	possible	domain	awkward	0.0.1	0.0	
# ::edge	steer-01	ARG1	it	0.1.1.1.1.1.1	0.1.1.1.1.1.1.0	
# ::edge	temporal-quantity	quant	90	0.1.1.1.1.0	0.1.1.1.1.0.0	
# ::edge	temporal-quantity	unit	minute	0.1.1.1.1.0	0.1.1.1.1.0.1	
# ::edge	within	op1	temporal-quantity	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	within	op2	need-01	0.1.1.1.1	0.1.1.1.1.1	
(c / contrast-01 
      :ARG1 (a2 / awkward 
            :ARG0-of (h / have-rel-role-91 
                  :ARG2 (f2 / friend)) 
            :domain-of (p / possible) 
            :time (n2 / night)) 
      :ARG2 (a / advise-01 
            :ARG0 (t3 / this) 
            :ARG1 (l / launch-01 
                  :ARG0 (t2 / tide) 
                  :ARG1 (f / float-01 
                        :ARG0 (i2 / it) 
                        :ARG1 (w / within 
                              :op1 (t / temporal-quantity 
                                    :quant 90 
                                    :unit (m / minute)) 
                              :op2 (n / need-01 
                                    :ARG0 (m2 / modest) 
                                    :ARG1 (s / steer-01 
                                          :ARG1 (i / it)) 
                                    :polarity (- / -)))))))

# ::snt mr greg meredith a bond specialist at salomon brothers notes that only two recent junkbond issues have been floated successfully by goldman sachs for kroger and by merrill lynch for sullivan graphics
# ::tok mr greg meredith a bond specialist at salomon brothers notes that only two recent junkbond issues have been floated successfully by goldman sachs for kroger and by merrill lynch for sullivan graphics
# ::alignments 27-29|0.0.0.0+0.0.0.1+0.0.0+0.0 25-26|0 21-23|0.1.0.3.0.0+0.1.0.3.0.1+0.1.0.3.0+0.1.0.3 19-20|0.1 18-19|0.1.0 15-16|0.1.0.1 13-14|0.1.0.1.2 12-13|0.1.0.1.1 11-12|0.1.0.1.0 9-10|0.1.0.0.0.0 8-9|0.1.0.2.0+0.1.0.2 5-6|0.1.0.0.0+0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:29.367
# ::node	0	and	25-26
# ::node	0.0	organization	27-29
# ::node	0.0.0	name	27-29
# ::node	0.0.0.0	"lynch"	27-29
# ::node	0.0.0.1	"merrill"	27-29
# ::node	0.1	succeed-01	19-20
# ::node	0.1.0	float-01	18-19
# ::node	0.1.0.0	person	5-6
# ::node	0.1.0.0.0	specialize-01	5-6
# ::node	0.1.0.0.0.0	note	9-10
# ::node	0.1.0.1	issue	15-16
# ::node	0.1.0.1.0	only	11-12
# ::node	0.1.0.1.1	2	12-13
# ::node	0.1.0.1.2	recent	13-14
# ::node	0.1.0.2	have-rel-role-91	8-9
# ::node	0.1.0.2.0	brother	8-9
# ::node	0.1.0.3	organization	21-23
# ::node	0.1.0.3.0	name	21-23
# ::node	0.1.0.3.0.0	"sachs"	21-23
# ::node	0.1.0.3.0.1	"goldman"	21-23
# ::root	0	and
# ::edge	and	op1	organization	0	0.0	
# ::edge	and	time	succeed-01	0	0.1	
# ::edge	float-01	ARG0	person	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	issue	0.1.0	0.1.0.1	
# ::edge	float-01	ARG2	organization	0.1.0	0.1.0.3	
# ::edge	have-rel-role-91	ARG1	float-01	0.1.0.2	0.1.0	
# ::edge	have-rel-role-91	ARG2	brother	0.1.0.2	0.1.0.2.0	
# ::edge	issue	location	only	0.1.0.1	0.1.0.1.0	
# ::edge	issue	quant	2	0.1.0.1	0.1.0.1.1	
# ::edge	issue	time	recent	0.1.0.1	0.1.0.1.2	
# ::edge	name	op1	"lynch"	0.0.0	0.0.0.0	
# ::edge	name	op1	"sachs"	0.1.0.3.0	0.1.0.3.0.0	
# ::edge	name	op2	"goldman"	0.1.0.3.0	0.1.0.3.0.1	
# ::edge	name	op2	"merrill"	0.0.0	0.0.0.1	
# ::edge	organization	name	name	0.0	0.0.0	
# ::edge	organization	name	name	0.1.0.3	0.1.0.3.0	
# ::edge	specialize-01	ARG0	person	0.1.0.0.0	0.1.0.0	
# ::edge	specialize-01	ARG1	note	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	succeed-01	ARG1	float-01	0.1	0.1.0	
(a / and 
      :op1 (o / organization 
            :name (n / name 
                  :op1 "lynch" 
                  :op2 "merrill")) 
      :time (s / succeed-01 
            :ARG1 (f / float-01 
                  :ARG0 (p / person 
                        :ARG0-of (s2 / specialize-01 
                              :ARG1 (n3 / note))) 
                  :ARG1 (i / issue 
                        :location (o3 / only) 
                        :quant 2 
                        :time (r / recent)) 
                  :ARG1-of (h / have-rel-role-91 
                        :ARG2 (b / brother)) 
                  :ARG2 (o2 / organization 
                        :name (n2 / name 
                              :op1 "sachs" 
                              :op2 "goldman")))))

# ::snt broken pieces of many  water plants have the ability to root again others have seeds which float or seeds  which resist digestion in the stomachs of birds and so can be transported  upstream
# ::tok broken pieces of many water plants have the ability to root again others have seeds which float or seeds which resist digestion in the stomachs of birds and so can be transported upstream
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:29.367
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt its important to realize that the particles dont actually float on  the gas stream like pingpong balls at a fairground shooting gallery  they remain in intermittent contact with one another and only part of  their weight is taken by the gas stream
# ::tok its important to realize that the particles dont actually float on the gas stream like pingpong balls at a fairground shooting gallery they remain in intermittent contact with one another and only part of their weight is taken by the gas stream
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:29.370
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt finally to ensure a flashflood with  the advent of august thunderstorms the mossy webs of crowfoot floating in the  foreground could raise the mean summer waterlevel of the stream by as much  as a metre
# ::tok finally to ensure a flashflood with the advent of august thunderstorms the mossy webs of crowfoot floating in the foreground could raise the mean summer waterlevel of the stream by as much as a metre
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:29.371
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt with his sort of finishing speed he might have broken the kenyan but he could find no finishing kick at this sort of pace and ondieki floated away to a time 7min 41
# ::tok with his sort of finishing speed he might have broken the kenyan but he could find no finishing kick at this sort of pace and ondieki floated away to a time 7min 41
# ::alignments 32-33|0.0 30-31|0.1.1.0.0.0 27-28|0.1.1.0.1.0.0 26-27|0.1.1.0.1.0 24-25|0.1.1.0.1 23-24|0.1.1.0.1.1 21-22|0.1.1.0.1.1.0 20-21|0.1.1.0.1.1.0.0 18-19|0.1.1.0 17-18|0.1.1.0.0 16-17|0.1.1.0.2 14-15|0.2 13-14|0.1.0 12-13|0 9-10|0.1 6-7|0.1.1 5-6|0.1.2 4-5|0.1.2.0 2-3|0.1.2.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:30.131
# ::node	0	contrast-01	12-13
# ::node	0.0	41	32-33
# ::node	0.1	break-01	9-10
# ::node	0.1.0	he	13-14
# ::node	0.1.1	he	6-7
# ::node	0.1.1.0	kick-01	18-19
# ::node	0.1.1.0.0	finish-01	17-18
# ::node	0.1.1.0.0.0	time	30-31
# ::node	0.1.1.0.1	and	24-25
# ::node	0.1.1.0.1.0	float-01	26-27
# ::node	0.1.1.0.1.0.0	away	27-28
# ::node	0.1.1.0.1.1	pace	23-24
# ::node	0.1.1.0.1.1.0	sort	21-22
# ::node	0.1.1.0.1.1.0.0	this	20-21
# ::node	0.1.1.0.2	-	16-17
# ::node	0.1.2	speed	5-6
# ::node	0.1.2.0	finish-01	4-5
# ::node	0.1.2.1	sort	2-3
# ::node	0.2	possible	14-15
# ::root	0	contrast-01
# ::edge	and	op1	kick-01	0.1.1.0.1	0.1.1.0	
# ::edge	and	op2	pace	0.1.1.0.1	0.1.1.0.1.1	
# ::edge	break-01	ARG0	he	0.1	0.1.0	
# ::edge	break-01	ARG1	he	0.1	0.1.1	
# ::edge	break-01	duration	speed	0.1	0.1.2	
# ::edge	contrast-01	ARG0	41	0	0.0	
# ::edge	contrast-01	ARG1	break-01	0	0.1	
# ::edge	contrast-01	ARG2	possible	0	0.2	
# ::edge	finish-01	ARG1	time	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	float-01	ARG1	and	0.1.1.0.1.0	0.1.1.0.1	
# ::edge	float-01	ARG2	away	0.1.1.0.1.0	0.1.1.0.1.0.0	
# ::edge	kick-01	ARG1	he	0.1.1.0	0.1.1	
# ::edge	kick-01	mod	finish-01	0.1.1.0	0.1.1.0.0	
# ::edge	kick-01	polarity	-	0.1.1.0	0.1.1.0.2	
# ::edge	pace	mod	sort	0.1.1.0.1.1	0.1.1.0.1.1.0	
# ::edge	sort	mod	this	0.1.1.0.1.1.0	0.1.1.0.1.1.0.0	
# ::edge	speed	mod	finish-01	0.1.2	0.1.2.0	
# ::edge	speed	mod	sort	0.1.2	0.1.2.1	
(c / contrast-01 
      :ARG0 41 
      :ARG1 (b / break-01 
            :ARG0 (h / he) 
            :ARG1 (h2 / he 
                  :ARG1-of (k / kick-01 
                        :mod (f2 / finish-01 
                              :ARG1 (t / time)) 
                        :op-of (a2 / and 
                              :ARG1-of (f / float-01 
                                    :ARG2 (a / away)) 
                              :op1 (p / pace 
                                    :mod (s / sort 
                                          :mod (t2 / this)))) 
                        :polarity (- / -))) 
            :duration (s2 / speed 
                  :mod (f3 / finish-01) 
                  :mod (s3 / sort))) 
      :ARG2 (p2 / possible))

# ::snt fordham floated on between the drummer and the percussionist looking relaxed in fact she may well have been asleep
# ::tok fordham floated on between the drummer and the percussionist looking relaxed in fact she may well have been asleep
# ::alignments 15-16|0.0.0.0.0.0 14-15|0.0.0.0.0.1+0.0.0.0.0 13-14|0.0.0.0 12-13|0.0.0.1 10-11|0.0.0 6-7|0 3-4|0.0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:30.196
# ::node	0	and	6-7
# ::node	0.0	float-01	1-2
# ::node	0.0.0	relax-01	10-11
# ::node	0.0.0.0	she	13-14
# ::node	0.0.0.0.0	date-entity	14-15
# ::node	0.0.0.0.0.0	well	15-16
# ::node	0.0.0.0.0.1	5	14-15
# ::node	0.0.0.1	fact	12-13
# ::node	0.0.1	between	3-4
# ::root	0	and
# ::edge	and	op1	float-01	0	0.0	
# ::edge	date-entity	degree	she	0.0.0.0.0	0.0.0.0	
# ::edge	date-entity	mod	well	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	date-entity	month	5	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	float-01	ARG1	relax-01	0.0	0.0.0	
# ::edge	float-01	ARG2	between	0.0	0.0.1	
# ::edge	relax-01	ARG0	she	0.0.0	0.0.0.0	
# ::edge	relax-01	ARG1	fact	0.0.0	0.0.0.1	
(a / and 
      :op1 (f2 / float-01 
            :ARG1 (r / relax-01 
                  :ARG0 (s / she 
                        :degree-of (d / date-entity 
                              :mod (w / well) 
                              :month 5)) 
                  :ARG1 (f / fact)) 
            :ARG2 (b / between)))

# ::snt a boat floats abudah on a cool stream past hanging rocks and woods of spice towards a temple with a chest at its centre
# ::tok a boat floats abudah on a cool stream past hanging rocks and woods of spice towards a temple with a chest at its centre
# ::alignments 20-21|0.0.3 17-18|0.0.2 11-12|0 10-11|0.0.1 9-10|0.0 8-9|0.0.0 7-8|0.0.0.0 6-7|0.0.0.2 2-3|0.0.0.1 1-2|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:30.401
# ::node	0	and	11-12
# ::node	0.0	hang-01	9-10
# ::node	0.0.0	past	8-9
# ::node	0.0.0.0	stream-02	7-8
# ::node	0.0.0.1	float-01	2-3
# ::node	0.0.0.1.0	boat	1-2
# ::node	0.0.0.2	cool	6-7
# ::node	0.0.1	rock	10-11
# ::node	0.0.2	temple	17-18
# ::node	0.0.3	chest	20-21
# ::root	0	and
(a / and 
      :ARG1-of (h / hang-01 
            :ARG0 (p / past 
                  :ARG0-of (s / stream-02) 
                  :ARG2-of (f / float-01 
                        :ARG0 (b / boat)) 
                  :mod (c2 / cool)) 
            :ARG2 (r / rock) 
            :concession (t / temple) 
            :duration (c / chest)))

# ::snt the upper windows blazed with light quiet laughter and the growl of patti smith floated down the graceful halfspiral of the stairs
# ::tok the upper windows blazed with light quiet laughter and the growl of patti smith floated down the graceful halfspiral of the stairs
# ::alignments 15-16|0.1.2 14-15|0.1 8-9|0 6-7|0.0 5-6|0.1.0 2-3|0.1.1 1-2|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:30.443
# ::node	0	and	8-9
# ::node	0.0	quiet-41	6-7
# ::node	0.1	float-01	14-15
# ::node	0.1.0	light	5-6
# ::node	0.1.1	window	2-3
# ::node	0.1.1.0	upper	1-2
# ::node	0.1.2	down	15-16
# ::root	0	and
# ::edge	and	op1	float-01	0	0.1	
# ::edge	float-01	ARG0	light	0.1	0.1.0	
# ::edge	float-01	ARG1	window	0.1	0.1.1	
# ::edge	float-01	direction	down	0.1	0.1.2	
# ::edge	quiet-41	ARG1	and	0.0	0	
# ::edge	window	mod	upper	0.1.1	0.1.1.0	
(a / and 
      :ARG1-of (q / quiet-41) 
      :op1 (f / float-01 
            :ARG0 (l / light) 
            :ARG1 (w / window 
                  :mod (u / upper)) 
            :direction (d / down)))

# ::snt in april its financial advisers the merchant bank lazards was warning that the fundamental and unprecedented problems of floating national power might force the government into a cutprice sale
# ::tok in april its financial advisers the merchant bank lazards was warning that the fundamental and unprecedented problems of floating national power might force the government into a cutprice sale
# ::alignments 22-23|0.3 20-21|0.2.1 19-20|0.2.1.0 18-19|0.2 16-17|0.1 15-16|0.1.0.0+0.1.0 14-15|0 13-14|0.0 10-11|0.3.0 7-8|0.3.0.0.0.0 6-7|0.3.0.0.0+0.3.0.0 3-4|0.2.0.1 1-2|0.2.0.0+0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:30.691
# ::node	0	and	14-15
# ::node	0.0	fundamental	13-14
# ::node	0.1	problem	16-17
# ::node	0.1.0	precedent	15-16
# ::node	0.1.0.0	-	15-16
# ::node	0.2	float-01	18-19
# ::node	0.2.0	date-entity	1-2
# ::node	0.2.0.0	4	1-2
# ::node	0.2.0.1	finance	3-4
# ::node	0.2.1	power	20-21
# ::node	0.2.1.0	nation	19-20
# ::node	0.3	force	22-23
# ::node	0.3.0	warn-01	10-11
# ::node	0.3.0.0	person	6-7
# ::node	0.3.0.0.0	merchandise-01	6-7
# ::node	0.3.0.0.0.0	bank	7-8
# ::root	0	and
# ::edge	and	op1	fundamental	0	0.0	
# ::edge	and	op2	problem	0	0.1	
# ::edge	and	purpose	float-01	0	0.2	
# ::edge	date-entity	month	4	0.2.0	0.2.0.0	
# ::edge	finance	quant	date-entity	0.2.0.1	0.2.0	
# ::edge	float-01	ARG0	date-entity	0.2	0.2.0	
# ::edge	float-01	ARG1	power	0.2	0.2.1	
# ::edge	force	source	and	0.3	0	
# ::edge	merchandise-01	ARG0	person	0.3.0.0.0	0.3.0.0	
# ::edge	merchandise-01	ARG1	bank	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	power	mod	nation	0.2.1	0.2.1.0	
# ::edge	precedent	polarity	-	0.1.0	0.1.0.0	
# ::edge	problem	mod	precedent	0.1	0.1.0	
# ::edge	warn-01	ARG0	person	0.3.0	0.3.0.0	
# ::edge	warn-01	ARG1	force	0.3.0	0.3	
(a / and 
      :op1 (f3 / fundamental) 
      :op2 (p2 / problem 
            :mod (p3 / precedent 
                  :polarity -)) 
      :purpose (f2 / float-01 
            :ARG0 (d / date-entity 
                  :month 4 
                  :quant-of (f4 / finance)) 
            :ARG1 (p / power 
                  :mod (n / nation))) 
      :source-of (f / force 
            :ARG1-of (w / warn-01 
                  :ARG0 (p4 / person 
                        :ARG0-of (m / merchandise-01 
                              :ARG1 (b / bank))))))

# ::snt since the war young people have been encouraged to come to west berlin by authorities who were worried the place would become a depopulated aged island floating in the gdr
# ::tok since the war young people have been encouraged to come to west berlin by authorities who were worried the place would become a depopulated aged island floating in the gdr
# ::alignments 26-27|0.0.0 25-26|0.0 24-25|0 21-22|0.0.1 19-20|0.0.1.0 17-18|0.0.1.1 14-15|0.0.1.1.0 11-12|0.0.1.2.1.0 7-8|0.0.1.2.1 3-4|0.0.0.0 2-3|0.0.1.2.0 0-1|0.0.1.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:30.857
# ::node	0	age-01	24-25
# ::node	0.0	island	25-26
# ::node	0.0.0	float-01	26-27
# ::node	0.0.0.0	young	3-4
# ::node	0.0.1	become-01	21-22
# ::node	0.0.1.0	place	19-20
# ::node	0.0.1.1	worry-02	17-18
# ::node	0.0.1.1.0	authority	14-15
# ::node	0.0.1.2	since	0-1
# ::node	0.0.1.2.0	war	2-3
# ::node	0.0.1.2.1	encourage-01	7-8
# ::node	0.0.1.2.1.0	west	11-12
# ::root	0	age-01
# ::edge	age-01	ARG1	island	0	0.0	
# ::edge	become-01	ARG1	place	0.0.1	0.0.1.0	
# ::edge	become-01	ARG2	island	0.0.1	0.0	
# ::edge	become-01	time	since	0.0.1	0.0.1.2	
# ::edge	encourage-01	ARG1	west	0.0.1.2.1	0.0.1.2.1.0	
# ::edge	encourage-01	time	since	0.0.1.2.1	0.0.1.2	
# ::edge	float-01	ARG0	young	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	island	0.0.0	0.0	
# ::edge	since	op1	war	0.0.1.2	0.0.1.2.0	
# ::edge	worry-02	ARG0	authority	0.0.1.1	0.0.1.1.0	
# ::edge	worry-02	ARG1	become-01	0.0.1.1	0.0.1	
(a / age-01 
      :ARG1 (i / island 
            :ARG1-of (f / float-01 
                  :ARG0 (y / young)) 
            :ARG2-of (b / become-01 
                  :ARG1 (p / place) 
                  :ARG1-of (w / worry-02 
                        :ARG0 (a2 / authority)) 
                  :time (s / since 
                        :op1 (w3 / war) 
                        :time-of (e / encourage-01 
                              :ARG1 (w2 / west))))))

# ::snt should i wear a skirt and sweater in one of the pale beiges or apricots that suit my coloring so well an image of daniel korpers hands floated before me and i changed into my tightest pair of jeans stuck them into a pair of highheeled black suede boots and wrapped a filmy violet silk blouse against my chest
# ::tok should i wear a skirt and sweater in one of the pale beiges or apricots that suit my coloring so well an image of daniel korpers hands floated before me and i changed into my tightest pair of jeans stuck them into a pair of highheeled black suede boots and wrapped a filmy violet silk blouse against my chest
# ::alignments 58-59|0.1.0 50-51|0.1 49-50|0 46-47|0.0.2.0.1 39-40|0.0 38-39|0.0.1 32-33|0.0.0.1.0 31-32|0.0.0.1 30-31|0.0.0 28-29|0.0.2 27-28|0.0.2.0 26-27|0.0.0.0 22-23|0.0.2.0.0 20-21|0.0.2.0.2.2.0 19-20|0.0.2.0.2.2 16-17|0.0.2.0.2 13-14|0.0.2.0.2.0 11-12|0.0.0.1.0.0 5-6|0.0.2.0.2.1 2-3|0.0.2.0.2.1.0 1-2|0.0.2.0.2.1.0.0.0 0-1|0.0.2.0.2.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:31.420
# ::node	0	and	49-50
# ::node	0.0	stick-01	39-40
# ::node	0.0.0	and	30-31
# ::node	0.0.0.0	hand	26-27
# ::node	0.0.0.1	i	31-32
# ::node	0.0.0.1.0	change-01	32-33
# ::node	0.0.0.1.0.0	pale	11-12
# ::node	0.0.1	jeans	38-39
# ::node	0.0.2	before	28-29
# ::node	0.0.2.0	float-01	27-28
# ::node	0.0.2.0.0	image	22-23
# ::node	0.0.2.0.1	black	46-47
# ::node	0.0.2.0.2	suit-01	16-17
# ::node	0.0.2.0.2.0	or	13-14
# ::node	0.0.2.0.2.1	and	5-6
# ::node	0.0.2.0.2.1.0	wear-01	2-3
# ::node	0.0.2.0.2.1.0.0	recommend-01	0-1
# ::node	0.0.2.0.2.1.0.0.0	i	1-2
# ::node	0.0.2.0.2.2	so	19-20
# ::node	0.0.2.0.2.2.0	well	20-21
# ::node	0.1	wrap-01	50-51
# ::node	0.1.0	chest	58-59
# ::root	0	and
# ::edge	and	op1	hand	0.0.0	0.0.0.0	
# ::edge	and	op1	stick-01	0	0.0	
# ::edge	and	op2	i	0.0.0	0.0.0.1	
# ::edge	and	op2	wrap-01	0	0.1	
# ::edge	before	op1	stick-01	0.0.2	0.0	
# ::edge	change-01	ARG0	i	0.0.0.1.0	0.0.0.1	
# ::edge	change-01	ARG1	pale	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	float-01	ARG0	image	0.0.2.0	0.0.2.0.0	
# ::edge	float-01	ARG1	black	0.0.2.0	0.0.2.0.1	
# ::edge	float-01	time	before	0.0.2.0	0.0.2	
# ::edge	recommend-01	ARG0	i	0.0.2.0.2.1.0.0	0.0.2.0.2.1.0.0.0	
# ::edge	recommend-01	ARG1	wear-01	0.0.2.0.2.1.0.0	0.0.2.0.2.1.0	
# ::edge	stick-01	ARG0	and	0.0	0.0.0	
# ::edge	stick-01	ARG1	jeans	0.0	0.0.1	
# ::edge	suit-01	ARG0	or	0.0.2.0.2	0.0.2.0.2.0	
# ::edge	suit-01	ARG1	and	0.0.2.0.2	0.0.2.0.2.1	
# ::edge	suit-01	ARG4	so	0.0.2.0.2	0.0.2.0.2.2	
# ::edge	suit-01	purpose	float-01	0.0.2.0.2	0.0.2.0	
# ::edge	wear-01	ARG1	and	0.0.2.0.2.1.0	0.0.2.0.2.1	
# ::edge	well	degree	so	0.0.2.0.2.2.0	0.0.2.0.2.2	
# ::edge	wrap-01	ARG2	chest	0.1	0.1.0	
(a / and 
      :op1 (s / stick-01 
            :ARG0 (a2 / and 
                  :op1 (h / hand) 
                  :op2 (i / i 
                        :ARG0-of (c2 / change-01 
                              :ARG1 (p / pale)))) 
            :ARG1 (j / jeans) 
            :op-of (b2 / before 
                  :time-of (f / float-01 
                        :ARG0 (i2 / image) 
                        :ARG1 (b / black) 
                        :purpose-of (s3 / suit-01 
                              :ARG0 (o / or) 
                              :ARG1 (a3 / and 
                                    :ARG1-of (w3 / wear-01 
                                          :ARG1-of (r / recommend-01 
                                                :ARG0 (i3 / i)))) 
                              :ARG4 (s2 / so 
                                    :degree-of (w2 / well)))))) 
      :op2 (w / wrap-01 
            :ARG2 (c / chest)))

# ::snt yet actually the companies they head would be worth more if they did not exist if none of the functions they perform were done at all and all the businesses they manage were simply floated off on the market as individual companies
# ::tok yet actually the companies they head would be worth more if they did not exist if none of the functions they perform were done at all and all the businesses they manage were simply floated off on the market as individual companies
# ::alignments 41-42|0.0.0.0.0.2.0 40-41|0.0.0.0.0.0.1.0 38-39|0.0.0.0.0.2 35-36|0.0.0.0.0.1 34-35|0.0.0.0.0 33-34|0.0.0.0.0.3 31-32|0.0.0 30-31|0.0.0.0 29-30|0.0 27-28|0.0.1 26-27|0 25-26|0.1 21-22|0.0.0.0.0.0 20-21|0.0.0.0.0.0.0 19-20|0.0.0.0.0.0.1 16-17|0.0.0.0.0.0.1.1 14-15|0.0.0.1.1 11-12|0.0.0.1.1.0 8-9|0.0.0.1.2 5-6|0.0.0.1.0 4-5|0.0.0.1 3-4|0.0.0.1.0.0 1-2|0.0.0.1.0.0.0 0-1|0.0.0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:32.667
# ::node	0	and	26-27
# ::node	0.0	business	29-30
# ::node	0.0.0	manage-01	31-32
# ::node	0.0.0.0	they	30-31
# ::node	0.0.0.0.0	float-01	34-35
# ::node	0.0.0.0.0.0	perform-01	21-22
# ::node	0.0.0.0.0.0.0	they	20-21
# ::node	0.0.0.0.0.0.1	function-01	19-20
# ::node	0.0.0.0.0.0.1.0	individual	40-41
# ::node	0.0.0.0.0.0.1.1	none	16-17
# ::node	0.0.0.0.0.1	off	35-36
# ::node	0.0.0.0.0.2	market	38-39
# ::node	0.0.0.0.0.2.0	company	41-42
# ::node	0.0.0.0.0.3	simple	33-34
# ::node	0.0.0.1	they	4-5
# ::node	0.0.0.1.0	head-01	5-6
# ::node	0.0.0.1.0.0	company	3-4
# ::node	0.0.0.1.0.0.0	actual	1-2
# ::node	0.0.0.1.0.0.0.0	yet	0-1
# ::node	0.0.0.1.1	exist-01	14-15
# ::node	0.0.0.1.1.0	they	11-12
# ::node	0.0.0.1.2	worth	8-9
# ::node	0.0.1	all	27-28
# ::node	0.1	all	25-26
# ::root	0	and
# ::edge	and	op1	business	0	0.0	
# ::edge	and	quant	all	0	0.1	
# ::edge	business	quant	all	0.0	0.0.1	
# ::edge	company	mod	actual	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	exist-01	ARG0	they	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	exist-01	ARG1	they	0.0.0.1.1	0.0.0.1	
# ::edge	float-01	ARG0	they	0.0.0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	perform-01	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	float-01	ARG2	off	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	float-01	location	market	0.0.0.0.0	0.0.0.0.0.2	
# ::edge	float-01	manner	simple	0.0.0.0.0	0.0.0.0.0.3	
# ::edge	function-01	ARG1	individual	0.0.0.0.0.0.1	0.0.0.0.0.0.1.0	
# ::edge	function-01	quant	none	0.0.0.0.0.0.1	0.0.0.0.0.0.1.1	
# ::edge	head-01	ARG0	they	0.0.0.1.0	0.0.0.1	
# ::edge	head-01	ARG1	company	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	manage-01	ARG0	they	0.0.0	0.0.0.0	
# ::edge	manage-01	ARG1	they	0.0.0	0.0.0.1	
# ::edge	manage-01	ARG2	business	0.0.0	0.0	
# ::edge	market	mod	company	0.0.0.0.0.2	0.0.0.0.0.2.0	
# ::edge	perform-01	ARG0	they	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	perform-01	ARG1	function-01	0.0.0.0.0.0	0.0.0.0.0.0.1	
# ::edge	worth	domain	they	0.0.0.1.2	0.0.0.1	
# ::edge	yet	topic	actual	0.0.0.1.0.0.0.0	0.0.0.1.0.0.0	
(a2 / and 
      :op1 (b / business 
            :ARG2-of (m2 / manage-01 
                  :ARG0 (t / they 
                        :ARG0-of (f / float-01 
                              :ARG1 (p / perform-01 
                                    :ARG0 (t2 / they) 
                                    :ARG1 (f2 / function-01 
                                          :ARG1 (i / individual) 
                                          :quant (n / none))) 
                              :ARG2 (o / off) 
                              :location (m / market 
                                    :mod (c / company)) 
                              :manner (s / simple))) 
                  :ARG1 (t4 / they 
                        :ARG0-of (h / head-01 
                              :ARG1 (c2 / company 
                                    :mod (a4 / actual 
                                          :topic-of (y / yet)))) 
                        :ARG1-of (e / exist-01 
                              :ARG0 (t3 / they)) 
                        :domain-of (w / worth))) 
            :quant (a / all)) 
      :quant (a3 / all))

# ::snt with mortgage rates floating around the stratosphere once again borrowers are naturally looking for ways to keep down their monthly payments
# ::tok with mortgage rates floating around the stratosphere once again borrowers are naturally looking for ways to keep down their monthly payments
# ::alignments 20-21|0 19-20|0.0.0.2.0+0.0.0.2 17-18|0.0 14-15|0.0.0.1.0.0 11-12|0.0.0.0 8-9|0.0.0.1.0.2 7-8|0.0.0.1.0.2.0 4-5|0.0.0.1.0.1 3-4|0.0.0.1.0 2-3|0.0.0.1 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:32.760
# ::node	0	payment	20-21
# ::node	0.0	down	17-18
# ::node	0.0.0	mortgage-01	1-2
# ::node	0.0.0.0	natural	11-12
# ::node	0.0.0.1	rate	2-3
# ::node	0.0.0.1.0	float-01	3-4
# ::node	0.0.0.1.0.0	way	14-15
# ::node	0.0.0.1.0.1	around	4-5
# ::node	0.0.0.1.0.2	again	8-9
# ::node	0.0.0.1.0.2.0	once	7-8
# ::node	0.0.0.2	temporal-quantity	19-20
# ::node	0.0.0.2.0	month	19-20
# ::root	0	payment
(p / payment 
      :path-of (d / down 
            :ARG0-of (m2 / mortgage-01 
                  :ARG1 (n / natural) 
                  :ARG3 (r / rate 
                        :ARG1-of (f / float-01 
                              :ARG0 (w / way) 
                              :ARG2 (a2 / around) 
                              :mod (a / again 
                                    :mod (o / once)))) 
                  :prep-with (t / temporal-quantity 
                        :unit (m / month)))))

# ::snt the small sail of the boat was furled as he floated on the trickle of sunlight across the water and i was invisible being up to my private parts in the bog the basket having sunk
# ::tok the small sail of the boat was furled as he floated on the trickle of sunlight across the water and i was invisible being up to my private parts in the bog the basket having sunk
# ::alignments 35-36|0.1.0.2 28-29|0.1.0.2.0 27-28|0.1.0.2.0.0 22-23|0.2+0 20-21|0.0 19-20|0.1 18-19|0.1.0.3.0 16-17|0.1.0.3 15-16|0.1.1 10-11|0.1.0 9-10|0.1.0.0 5-6|0.1.0.1 1-2|0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:33.174
# ::node	0	visible	22-23
# ::node	0.0	i	20-21
# ::node	0.1	and	19-20
# ::node	0.1.0	float-01	10-11
# ::node	0.1.0.0	he	9-10
# ::node	0.1.0.1	boat	5-6
# ::node	0.1.0.2	sink-01	35-36
# ::node	0.1.0.2.0	part	28-29
# ::node	0.1.0.2.0.0	private	27-28
# ::node	0.1.0.3	across	16-17
# ::node	0.1.0.3.0	water	18-19
# ::node	0.1.1	sunlight	15-16
# ::node	0.2	-	22-23
# ::node	0.3	small	1-2
# ::root	0	visible
# ::edge	across	op1	water	0.1.0.3	0.1.0.3.0	
# ::edge	and	op1	float-01	0.1	0.1.0	
# ::edge	and	op2	sunlight	0.1	0.1.1	
# ::edge	and	op3	visible	0.1	0	
# ::edge	float-01	ARG0	he	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	boat	0.1.0	0.1.0.1	
# ::edge	float-01	location	across	0.1.0	0.1.0.3	
# ::edge	part	mod	private	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	sink-01	ARG0	part	0.1.0.2	0.1.0.2.0	
# ::edge	sink-01	ARG1	float-01	0.1.0.2	0.1.0	
# ::edge	visible	domain	i	0	0.0	
# ::edge	visible	polarity	-	0	0.2	
# ::edge	visible	poss	small	0	0.3	
(v / visible 
      :domain (i / i) 
      :op-of (a / and 
            :op1 (f / float-01 
                  :ARG0 (h / he) 
                  :ARG1 (b / boat) 
                  :ARG1-of (s / sink-01 
                        :ARG0 (p / part 
                              :mod (p2 / private))) 
                  :location (a2 / across 
                        :op1 (w / water))) 
            :op2 (s2 / sunlight)) 
      :polarity - 
      :poss (s3 / small))

# ::snt on the rivers northern bank a troop of blackuniformed prussian hussars shadowed the red lancers and it was those hussars who rounding a bend in the sambre valley discovered a party of french engineers floating a pontoon bridge off the southern bank
# ::tok on the rivers northern bank a troop of blackuniformed prussian hussars shadowed the red lancers and it was those hussars who rounding a bend in the sambre valley discovered a party of french engineers floating a pontoon bridge off the southern bank
# ::alignments 41-42|0.1.1.0.1.2 40-41|0.1.1.0.1.2.0 38-39|0.1.1.0.1.1 37-38|0.1.1.0.1.0 34-35|0.1.1.0.1 33-34|0.1.1.0.0+0.1.1.0 32-33|0.1.1.0.2.0.0+0.1.1.0.2.0+0.1.1.0.2 30-31|0.1.1.1 28-29|0.1.1 21-22|0.2 16-17|0.1.0.0 15-16|0 13-14|0.2.0 11-12|0.1.0+0.1 6-7|0.0 4-5|0.0.0 3-4|0.1.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:33.750
# ::node	0	and	15-16
# ::node	0.0	troop	6-7
# ::node	0.0.0	bank	4-5
# ::node	0.1	person	11-12
# ::node	0.1.0	shadow-01	11-12
# ::node	0.1.0.0	it	16-17
# ::node	0.1.1	discover-01	28-29
# ::node	0.1.1.0	person	33-34
# ::node	0.1.1.0.0	engineer-01	33-34
# ::node	0.1.1.0.1	float-01	34-35
# ::node	0.1.1.0.1.0	bridge	37-38
# ::node	0.1.1.0.1.1	off	38-39
# ::node	0.1.1.0.1.2	bank	41-42
# ::node	0.1.1.0.1.2.0	south	40-41
# ::node	0.1.1.0.2	country	32-33
# ::node	0.1.1.0.2.0	name	32-33
# ::node	0.1.1.0.2.0.0	"France"	32-33
# ::node	0.1.1.1	party	30-31
# ::node	0.1.2	north	3-4
# ::node	0.2	round-02	21-22
# ::node	0.2.0	red	13-14
# ::root	0	and
# ::edge	and	op1	troop	0	0.0	
# ::edge	and	op2	person	0	0.1	
# ::edge	and	op3	round-02	0	0.2	
# ::edge	bank	mod	south	0.1.1.0.1.2	0.1.1.0.1.2.0	
# ::edge	country	name	name	0.1.1.0.2	0.1.1.0.2.0	
# ::edge	discover-01	ARG0	person	0.1.1	0.1.1.0	
# ::edge	discover-01	ARG1	party	0.1.1	0.1.1.1	
# ::edge	discover-01	accompanier	person	0.1.1	0.1	
# ::edge	engineer-01	ARG0	person	0.1.1.0.0	0.1.1.0	
# ::edge	float-01	ARG0	person	0.1.1.0.1	0.1.1.0	
# ::edge	float-01	ARG1	bridge	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	float-01	ARG2	off	0.1.1.0.1	0.1.1.0.1.1	
# ::edge	float-01	manner	bank	0.1.1.0.1	0.1.1.0.1.2	
# ::edge	name	op1	"France"	0.1.1.0.2.0	0.1.1.0.2.0.0	
# ::edge	person	mod	country	0.1.1.0	0.1.1.0.2	
# ::edge	person	mod	north	0.1	0.1.2	
# ::edge	round-02	ARG1	red	0.2	0.2.0	
# ::edge	shadow-01	ARG0	it	0.1.0	0.1.0.0	
# ::edge	shadow-01	ARG1	person	0.1.0	0.1	
# ::edge	troop	poss	bank	0.0	0.0.0	
(a / and 
      :op1 (t / troop 
            :poss (b3 / bank)) 
      :op2 (p3 / person 
            :ARG1-of (s2 / shadow-01 
                  :ARG0 (i / it)) 
            :accompanier-of (d / discover-01 
                  :ARG0 (p / person 
                        :ARG0-of (e / engineer-01) 
                        :ARG0-of (f / float-01 
                              :ARG1 (b2 / bridge) 
                              :ARG2 (o / off) 
                              :manner (b / bank 
                                    :mod (s / south))) 
                        :mod (c / country 
                              :name (n / name 
                                    :op1 "France"))) 
                  :ARG1 (p2 / party)) 
            :mod (n2 / north)) 
      :op3 (r / round-02 
            :ARG1 (r2 / red)))

# ::snt once the companies have been floated there will be an internal review of salary levels for executive directors which in some cases will be supplemented by the introduction of bonuses and performance related pay
# ::tok once the companies have been floated there will be an internal review of salary levels for executive directors which in some cases will be supplemented by the introduction of bonuses and performance related pay
# ::alignments 33-34|0.0.2 32-33|0.0.2.1 31-32|0.0.2.0 30-31|0.0 29-30|0.0.1 27-28|0 21-22|0.0.1.0 20-21|0.0.1.0.0 17-18|0.0.2.0.0.0.0 16-17|0.0.2.0.0.0.0.0 14-15|0.0.2.0.0.0 13-14|0.0.2.0.0.0.1 11-12|0.0.2.0.0 10-11|0.0.2.0.0.1 5-6|0.0.0 2-3|0.0.0.0 0-1|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:34.152
# ::node	0	introduce-02	27-28
# ::node	0.0	and	30-31
# ::node	0.0.0	float-01	5-6
# ::node	0.0.0.0	company	2-3
# ::node	0.0.0.1	once	0-1
# ::node	0.0.1	bonus	29-30
# ::node	0.0.1.0	case	21-22
# ::node	0.0.1.0.0	some	20-21
# ::node	0.0.2	pay-01	33-34
# ::node	0.0.2.0	perform-01	31-32
# ::node	0.0.2.0.0	review-01	11-12
# ::node	0.0.2.0.0.0	level	14-15
# ::node	0.0.2.0.0.0.0	director	17-18
# ::node	0.0.2.0.0.0.0.0	executive	16-17
# ::node	0.0.2.0.0.0.1	salary	13-14
# ::node	0.0.2.0.0.1	internal	10-11
# ::node	0.0.2.1	relate-01	32-33
# ::root	0	introduce-02
# ::edge	and	op1	float-01	0.0	0.0.0	
# ::edge	and	op2	bonus	0.0	0.0.1	
# ::edge	and	op3	pay-01	0.0	0.0.2	
# ::edge	bonus	poss	case	0.0.1	0.0.1.0	
# ::edge	case	quant	some	0.0.1.0	0.0.1.0.0	
# ::edge	director	consist	level	0.0.2.0.0.0.0	0.0.2.0.0.0	
# ::edge	director	mod	executive	0.0.2.0.0.0.0	0.0.2.0.0.0.0.0	
# ::edge	float-01	ARG1	company	0.0.0	0.0.0.0	
# ::edge	introduce-02	ARG1	and	0	0.0	
# ::edge	level	mod	salary	0.0.2.0.0.0	0.0.2.0.0.0.1	
# ::edge	once	op1	float-01	0.0.0.1	0.0.0	
# ::edge	pay-01	ARG1	perform-01	0.0.2	0.0.2.0	
# ::edge	perform-01	ARG1	review-01	0.0.2.0	0.0.2.0.0	
# ::edge	relate-01	ARG1	pay-01	0.0.2.1	0.0.2	
# ::edge	review-01	ARG1	level	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	review-01	mod	internal	0.0.2.0.0	0.0.2.0.0.1	
(i / introduce-02 
      :ARG1 (a / and 
            :op1 (f / float-01 
                  :ARG1 (c2 / company) 
                  :op-of (o / once)) 
            :op2 (b / bonus 
                  :poss (c / case 
                        :quant (s / some))) 
            :op3 (p / pay-01 
                  :ARG1 (p2 / perform-01 
                        :ARG1 (r2 / review-01 
                              :ARG1 (l / level 
                                    :consist-of (d / director 
                                          :mod (e / executive)) 
                                    :mod (s2 / salary)) 
                              :mod (i2 / internal))) 
                  :ARG1-of (r / relate-01))))

# ::snt he said exchange rate policy was an essential element in the financial discipline required to get inflation down and recognised that sterling could either be allowed to float or be held relatively stable
# ::tok he said exchange rate policy was an essential element in the financial discipline required to get inflation down and recognised that sterling could either be allowed to float or be held relatively stable
# ::alignments 32-33|0.1.2.0.2.0.0.1.0 31-32|0.1.2.0.2.0.0.1.0.0 28-29|0.1.2.0.2.0.0 27-28|0.1.2.0.2.0.0.1.1 25-26|0.1.2.0.2.0.0.1 23-24|0.1.2.0.2.0.0.1.1.0 22-23|0.1.2.0.2.0.0.0 19-20|0.1.2.0.2.0 18-19|0.1.2.0.2 17-18|0.1.2.0.1 16-17|0.1.2.0.0 13-14|0.1.2.0 12-13|0.1.2 11-12|0.1.2.1 8-9|0.1 7-8|0.1.1 4-5|0.1.0 3-4|0.1.0.0 2-3|0.0.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:34.763
# ::node	0	say-01	1-2
# ::node	0.0	he	0-1
# ::node	0.0.0	exchange-01	2-3
# ::node	0.1	element	8-9
# ::node	0.1.0	policy	4-5
# ::node	0.1.0.0	rate	3-4
# ::node	0.1.1	essential	7-8
# ::node	0.1.2	discipline	12-13
# ::node	0.1.2.0	require-01	13-14
# ::node	0.1.2.0.0	inflation	16-17
# ::node	0.1.2.0.1	down	17-18
# ::node	0.1.2.0.2	and	18-19
# ::node	0.1.2.0.2.0	recognize-01	19-20
# ::node	0.1.2.0.2.0.0	or	28-29
# ::node	0.1.2.0.2.0.0.0	possible	22-23
# ::node	0.1.2.0.2.0.0.1	allow-01	25-26
# ::node	0.1.2.0.2.0.0.1.0	stable	32-33
# ::node	0.1.2.0.2.0.0.1.0.0	relative	31-32
# ::node	0.1.2.0.2.0.0.1.1	float-01	27-28
# ::node	0.1.2.0.2.0.0.1.1.0	either	23-24
# ::node	0.1.2.1	finance	11-12
# ::root	0	say-01
# ::edge	allow-01	ARG0	stable	0.1.2.0.2.0.0.1	0.1.2.0.2.0.0.1.0	
# ::edge	allow-01	ARG1	float-01	0.1.2.0.2.0.0.1	0.1.2.0.2.0.0.1.1	
# ::edge	and	op1	require-01	0.1.2.0.2	0.1.2.0	
# ::edge	and	op2	recognize-01	0.1.2.0.2	0.1.2.0.2.0	
# ::edge	discipline	mod	finance	0.1.2	0.1.2.1	
# ::edge	element	mod	essential	0.1	0.1.1	
# ::edge	element	poss	discipline	0.1	0.1.2	
# ::edge	exchange-01	ARG0	he	0.0.0	0.0	
# ::edge	float-01	ARG1	either	0.1.2.0.2.0.0.1.1	0.1.2.0.2.0.0.1.1.0	
# ::edge	or	op1	possible	0.1.2.0.2.0.0	0.1.2.0.2.0.0.0	
# ::edge	or	op2	allow-01	0.1.2.0.2.0.0	0.1.2.0.2.0.0.1	
# ::edge	policy	domain	element	0.1.0	0.1	
# ::edge	policy	mod	rate	0.1.0	0.1.0.0	
# ::edge	recognize-01	ARG1	or	0.1.2.0.2.0	0.1.2.0.2.0.0	
# ::edge	require-01	ARG0	discipline	0.1.2.0	0.1.2	
# ::edge	require-01	ARG1	inflation	0.1.2.0	0.1.2.0.0	
# ::edge	require-01	ARG2	down	0.1.2.0	0.1.2.0.1	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	element	0	0.1	
# ::edge	stable	mod	relative	0.1.2.0.2.0.0.1.0	0.1.2.0.2.0.0.1.0.0	
(s2 / say-01 
      :ARG0 (h / he 
            :ARG0-of (e4 / exchange-01)) 
      :ARG1 (e2 / element 
            :domain-of (p2 / policy 
                  :mod (r4 / rate)) 
            :mod (e3 / essential) 
            :poss (d2 / discipline 
                  :ARG0-of (r3 / require-01 
                        :ARG1 (i / inflation) 
                        :ARG2 (d / down) 
                        :op-of (a2 / and 
                              :op1 (r2 / recognize-01 
                                    :ARG1 (o / or 
                                          :op1 (p / possible) 
                                          :op2 (a / allow-01 
                                                :ARG0 (s / stable 
                                                      :mod (r / relative)) 
                                                :ARG1 (f / float-01 
                                                      :ARG1 (e / either))))))) 
                  :mod (f2 / finance))))

# ::snt as the largest shareholder in racal electronics millicom last year argued fiercely against plans to float off racals cellular radio company vodafone
# ::tok as the largest shareholder in racal electronics millicom last year argued fiercely against plans to float off racals cellular radio company vodafone
# ::alignments 20-21|0.0.1.0 19-20|0.0.1.0.0 18-19|0.0.1 16-17|0.0.3 15-16|0.0 13-14|0.0.2 10-11|0 9-10|0.1 8-9|0.1.0 6-7|0.0.0 2-3|0.0.2.0.0+0.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:34.897
# ::node	0	argue-01	10-11
# ::node	0.0	float-01	15-16
# ::node	0.0.0	electronic	6-7
# ::node	0.0.1	cell	18-19
# ::node	0.0.1.0	company	20-21
# ::node	0.0.1.0.0	radio	19-20
# ::node	0.0.2	plan-01	13-14
# ::node	0.0.2.0	large	2-3
# ::node	0.0.2.0.0	most	2-3
# ::node	0.0.3	off	16-17
# ::node	0.1	year	9-10
# ::node	0.1.0	last	8-9
# ::root	0	argue-01
# ::edge	argue-01	ARG1	float-01	0	0.0	
# ::edge	argue-01	time	year	0	0.1	
# ::edge	company	mod	cell	0.0.1.0	0.0.1	
# ::edge	company	mod	radio	0.0.1.0	0.0.1.0.0	
# ::edge	float-01	ARG0	electronic	0.0	0.0.0	
# ::edge	float-01	ARG1	cell	0.0	0.0.1	
# ::edge	float-01	ARG2	off	0.0	0.0.3	
# ::edge	large	degree	most	0.0.2.0	0.0.2.0.0	
# ::edge	plan-01	ARG0	large	0.0.2	0.0.2.0	
# ::edge	plan-01	ARG1	float-01	0.0.2	0.0	
# ::edge	year	mod	last	0.1	0.1.0	
(a / argue-01 
      :ARG1 (f / float-01 
            :ARG0 (e / electronic) 
            :ARG1 (c2 / cell 
                  :mod-of (c / company 
                        :mod (r / radio))) 
            :ARG1-of (p / plan-01 
                  :ARG0 (l2 / large 
                        :degree (m / most))) 
            :ARG2 (o / off)) 
      :time (y / year 
            :mod (l / last)))

# ::snt i feel that the doctors might accidentally tear me up or that i might flap off the bed in a gust of wind and float away
# ::tok i feel that the doctors might accidentally tear me up or that i might flap off the bed in a gust of wind and float away
# ::alignments 25-26|0.0.1 24-25|0.0 23-24|0.0.2 22-23|0 17-18|0.0.2.1 15-16|0.0.2.1.0 12-13|0.0.0 10-11|0.0.2.0 7-8|0.0.2.0.0 6-7|0.0.2.0.0.2 4-5|0.0.2.0.0.0 1-2|0.0.2.0.0.1 0-1|0.0.2.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.085
# ::node	0	wind	22-23
# ::node	0.0	float-01	24-25
# ::node	0.0.0	i	12-13
# ::node	0.0.1	away	25-26
# ::node	0.0.2	and	23-24
# ::node	0.0.2.0	or	10-11
# ::node	0.0.2.0.0	tear-01	7-8
# ::node	0.0.2.0.0.0	doctor	4-5
# ::node	0.0.2.0.0.1	feel-01	1-2
# ::node	0.0.2.0.0.1.0	i	0-1
# ::node	0.0.2.0.0.2	accidental	6-7
# ::node	0.0.2.1	bed	17-18
# ::node	0.0.2.1.0	off	15-16
# ::root	0	wind
(w / wind 
      :ARG1-of (f / float-01 
            :ARG0 (i / i) 
            :ARG2 (a / away) 
            :op-of (a2 / and 
                  :op-of (o2 / or 
                        :op1 (t / tear-01 
                              :ARG0 (d / doctor) 
                              :ARG1-of (f2 / feel-01 
                                    :ARG0 (i2 / i)) 
                              :degree (a3 / accidental))) 
                  :poss-of (b / bed 
                        :op-of (o / off)))))

# ::snt however using graphics as a research medium suppose that a dot is dimensionless and floating in a void
# ::tok however using graphics as a research medium suppose that a dot is dimensionless and floating in a void
# ::alignments 17-18|0.2.0 14-15|0.2 13-14|0 7-8|0.0 6-7|0.0.0 5-6|0.0.0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.119
# ::node	0	and	13-14
# ::node	0.0	suppose-01	7-8
# ::node	0.0.0	medium	6-7
# ::node	0.0.0.0	research-01	5-6
# ::node	0.1	use-01	1-2
# ::node	0.2	float-01	14-15
# ::node	0.2.0	void	17-18
# ::root	0	and
# ::edge	and	op1	use-01	0	0.1	
# ::edge	and	op2	float-01	0	0.2	
# ::edge	float-01	ARG1	void	0.2	0.2.0	
# ::edge	medium	mod	research-01	0.0.0	0.0.0.0	
# ::edge	suppose-01	ARG0	medium	0.0	0.0.0	
# ::edge	suppose-01	ARG1	and	0.0	0	
(a / and 
      :ARG1-of (s / suppose-01 
            :ARG0 (m / medium 
                  :mod (r / research-01))) 
      :op1 (u / use-01) 
      :op2 (f / float-01 
            :ARG1 (v / void)))

# ::snt euro disney floated at 707p last month ran into a bout of profit taking falling 15p to 940p
# ::tok euro disney floated at 707p last month ran into a bout of profit taking falling 15p to 940p
# ::alignments 14-15|0.0.1 12-13|0.0 6-7|0.0.0.0+0.0.0 5-6|0.0.0.0.0 2-3|0 0-1|0.0.1.0.0+0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.187
# ::node	0	float-01	2-3
# ::node	0.0	profit-01	12-13
# ::node	0.0.0	temporal-quantity	6-7
# ::node	0.0.0.0	month	6-7
# ::node	0.0.0.0.0	last	5-6
# ::node	0.0.1	fall-01	14-15
# ::node	0.0.1.0	monetary-quantity	0-1
# ::node	0.0.1.0.0	euro	0-1
# ::root	0	float-01
# ::edge	fall-01	ARG1	profit-01	0.0.1	0.0	
# ::edge	fall-01	ARG2	monetary-quantity	0.0.1	0.0.1.0	
# ::edge	float-01	ARG1	profit-01	0	0.0	
# ::edge	monetary-quantity	unit	euro	0.0.1.0	0.0.1.0.0	
# ::edge	month	mod	last	0.0.0.0	0.0.0.0.0	
# ::edge	profit-01	ARG1	temporal-quantity	0.0	0.0.0	
# ::edge	temporal-quantity	unit	month	0.0.0	0.0.0.0	
(f2 / float-01 
      :ARG1 (p / profit-01 
            :ARG1 (t / temporal-quantity 
                  :unit (m / month 
                        :mod (l / last))) 
            :ARG1-of (f / fall-01 
                  :ARG2 (m2 / monetary-quantity 
                        :unit (e / euro)))))

# ::snt that exchange rates are best managed and not left to float challenged mrs thatchers instinct directly
# ::tok that exchange rates are best managed and not left to float challenged mrs thatchers instinct directly
# ::alignments 15-16|0.0.0 14-15|0.0.1.0.0.0 11-12|0.0.1.0.0 10-11|0.0.1.0 6-7|0 5-6|0.0 2-3|0.0.1 1-2|0.0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.242
# ::node	0	and	6-7
# ::node	0.0	manage-02	5-6
# ::node	0.0.0	direct	15-16
# ::node	0.0.1	rate	2-3
# ::node	0.0.1.0	float-01	10-11
# ::node	0.0.1.0.0	challenge-01	11-12
# ::node	0.0.1.0.0.0	instinct	14-15
# ::node	0.0.1.1	exchange-01	1-2
# ::root	0	and
# ::edge	and	op1	manage-02	0	0.0	
# ::edge	challenge-01	ARG1	instinct	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	exchange-01	ARG1	rate	0.0.1.1	0.0.1	
# ::edge	float-01	ARG0	rate	0.0.1.0	0.0.1	
# ::edge	float-01	ARG1	challenge-01	0.0.1.0	0.0.1.0.0	
# ::edge	manage-02	ARG0	direct	0.0	0.0.0	
# ::edge	manage-02	ARG1	rate	0.0	0.0.1	
(a / and 
      :op1 (m / manage-02 
            :ARG0 (d / direct) 
            :ARG1 (r / rate 
                  :ARG0-of (f / float-01 
                        :ARG1 (c / challenge-01 
                              :ARG1 (i / instinct))) 
                  :ARG1-of (e / exchange-01))))

# ::snt we have seen that this response tends to erase the corporeality of the observing male presence as it retreats outside the frame and floats in space
# ::tok we have seen that this response tends to erase the corporeality of the observing male presence as it retreats outside the frame and floats in space
# ::alignments 25-26|0.1.2 23-24|0.1 22-23|0 21-22|0.1.0.0 19-20|0.1.0 17-18|0.1.1 15-16|0.1.1.0 14-15|0.1.1.0.0.0 13-14|0.1.1.0.0 6-7|0.0 5-6|0.0.0 4-5|0.0.0.0 2-3|0.0.1 0-1|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.489
# ::node	0	and	22-23
# ::node	0.0	tend-02	6-7
# ::node	0.0.0	respond-01	5-6
# ::node	0.0.0.0	this	4-5
# ::node	0.0.1	see-01	2-3
# ::node	0.0.1.0	we	0-1
# ::node	0.1	float-01	23-24
# ::node	0.1.0	outside	19-20
# ::node	0.1.0.0	frame	21-22
# ::node	0.1.1	it	17-18
# ::node	0.1.1.0	presence	15-16
# ::node	0.1.1.0.0	observe-01	13-14
# ::node	0.1.1.0.0.0	male	14-15
# ::node	0.1.2	space	25-26
# ::root	0	and
# ::edge	and	op1	tend-02	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	float-01	ARG0	outside	0.1	0.1.0	
# ::edge	float-01	ARG1	it	0.1	0.1.1	
# ::edge	float-01	location	space	0.1	0.1.2	
# ::edge	observe-01	ARG0	male	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	observe-01	ARG1	presence	0.1.1.0.0	0.1.1.0	
# ::edge	outside	op1	frame	0.1.0	0.1.0.0	
# ::edge	presence	poss	it	0.1.1.0	0.1.1	
# ::edge	respond-01	mod	this	0.0.0	0.0.0.0	
# ::edge	see-01	ARG0	we	0.0.1	0.0.1.0	
# ::edge	see-01	ARG1	tend-02	0.0.1	0.0	
# ::edge	tend-02	ARG1	respond-01	0.0	0.0.0	
(a / and 
      :op1 (t / tend-02 
            :ARG1 (r / respond-01 
                  :mod (t2 / this)) 
            :ARG1-of (s2 / see-01 
                  :ARG0 (w / we))) 
      :op2 (f / float-01 
            :ARG0 (o / outside 
                  :op1 (f2 / frame)) 
            :ARG1 (i / it 
                  :poss-of (p / presence 
                        :ARG1-of (o2 / observe-01 
                              :ARG0 (m / male)))) 
            :location (s / space)))

# ::snt but the vaporous presences that float through this slender and anaemic first novel by a notable poet would appear to support the claim
# ::tok but the vaporous presences that float through this slender and anaemic first novel by a notable poet would appear to support the claim
# ::alignments 22-23|0.0.1.1 20-21|0.0.1 18-19|0.0 16-17|0.0.1.0 12-13|0.0.0.0.0 9-10|0.0.0.0 7-8|0.0.0.0.0.0 5-6|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.589
# ::node	0	contrast-01	0-1
# ::node	0.0	appear-02	18-19
# ::node	0.0.0	float-01	5-6
# ::node	0.0.0.0	and	9-10
# ::node	0.0.0.0.0	novel	12-13
# ::node	0.0.0.0.0.0	this	7-8
# ::node	0.0.1	support-01	20-21
# ::node	0.0.1.0	poet	16-17
# ::node	0.0.1.1	claim-01	22-23
# ::root	0	contrast-01
# ::edge	and	op1	novel	0.0.0.0	0.0.0.0.0	
# ::edge	appear-02	ARG0	float-01	0.0	0.0.0	
# ::edge	appear-02	ARG2	support-01	0.0	0.0.1	
# ::edge	contrast-01	ARG2	appear-02	0	0.0	
# ::edge	float-01	ARG1	and	0.0.0	0.0.0.0	
# ::edge	novel	mod	this	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	support-01	ARG0	poet	0.0.1	0.0.1.0	
# ::edge	support-01	ARG1	claim-01	0.0.1	0.0.1.1	
(c2 / contrast-01 
      :ARG2 (a / appear-02 
            :ARG0 (f / float-01 
                  :ARG1 (a2 / and 
                        :op1 (n / novel 
                              :mod (t / this)))) 
            :ARG2 (s / support-01 
                  :ARG0 (p / poet) 
                  :ARG1 (c / claim-01))))

# ::snt that exchange rates are best managed and not left to float challenged mrs thatchers instinct directly
# ::tok that exchange rates are best managed and not left to float challenged mrs thatchers instinct directly
# ::alignments 15-16|0.0.0 14-15|0.0.1.0.0.0 11-12|0.0.1.0.0 10-11|0.0.1.0 6-7|0 5-6|0.0 2-3|0.0.1 1-2|0.0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.643
# ::node	0	and	6-7
# ::node	0.0	manage-02	5-6
# ::node	0.0.0	direct	15-16
# ::node	0.0.1	rate	2-3
# ::node	0.0.1.0	float-01	10-11
# ::node	0.0.1.0.0	challenge-01	11-12
# ::node	0.0.1.0.0.0	instinct	14-15
# ::node	0.0.1.1	exchange-01	1-2
# ::root	0	and
# ::edge	and	op1	manage-02	0	0.0	
# ::edge	challenge-01	ARG1	instinct	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	exchange-01	ARG1	rate	0.0.1.1	0.0.1	
# ::edge	float-01	ARG0	rate	0.0.1.0	0.0.1	
# ::edge	float-01	ARG1	challenge-01	0.0.1.0	0.0.1.0.0	
# ::edge	manage-02	ARG0	direct	0.0	0.0.0	
# ::edge	manage-02	ARG1	rate	0.0	0.0.1	
(a / and 
      :op1 (m / manage-02 
            :ARG0 (d / direct) 
            :ARG1 (r / rate 
                  :ARG0-of (f / float-01 
                        :ARG1 (c / challenge-01 
                              :ARG1 (i / instinct))) 
                  :ARG1-of (e / exchange-01))))

# ::snt a rancid stuffing with the turkey bottled chipolatas and another brown sauce with bits of turkey liver floating in it
# ::tok a rancid stuffing with the turkey bottled chipolatas and another brown sauce with bits of turkey liver floating in it
# ::alignments 19-20|0.0.0.1.0.0 17-18|0.0.0.1.0 16-17|0 13-14|0.0 10-11|0.0.0.2 9-10|0.0.0.0 8-9|0.0.0.1 6-7|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:35.785
# ::node	0	liver	16-17
# ::node	0.0	bit	13-14
# ::node	0.0.0	bottle-01	6-7
# ::node	0.0.0.0	another	9-10
# ::node	0.0.0.1	and	8-9
# ::node	0.0.0.1.0	float-01	17-18
# ::node	0.0.0.1.0.0	it	19-20
# ::node	0.0.0.2	brown	10-11
# ::root	0	liver
# ::edge	bottle-01	ARG0	another	0.0.0	0.0.0.0	
# ::edge	bottle-01	ARG1	and	0.0.0	0.0.0.1	
# ::edge	bottle-01	ARG2	bit	0.0.0	0.0	
# ::edge	bottle-01	time	brown	0.0.0	0.0.0.2	
# ::edge	float-01	ARG0	and	0.0.0.1.0	0.0.0.1	
# ::edge	float-01	ARG1	it	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	liver	quant	bit	0	0.0	
(l / liver 
      :quant (b / bit 
            :ARG2-of (b3 / bottle-01 
                  :ARG0 (a / another) 
                  :ARG1 (a2 / and 
                        :ARG0-of (f / float-01 
                              :ARG1 (i / it))) 
                  :time (b2 / brown))))

# ::snt it was floated by a senior foreign ministry official mr lucio garcia del solar a year ago under president raul alfonsins government but appeared to go nowhere after buenos aires and london failed to agree on exactly what it meant
# ::tok it was floated by a senior foreign ministry official mr lucio garcia del solar a year ago under president raul alfonsins government but appeared to go nowhere after buenos aires and london failed to agree on exactly what it meant
# ::alignments 39-40|0.1.2.1.1.1 38-39|0.1.2.1.1.1.0 36-37|0.0 34-35|0.1.2.1.1 32-33|0.1.2.1 31-32|0.1.2.1.0.0.0.0+0.1.2.1.0.0.0+0.1.2.1.0.0 30-31|0.1.2.1.0 28-30|0.1.2.1.1.0.1.0+0.1.2.1.1.0.1.1+0.1.2.1.1.0.1+0.1.2.1.1.0 27-28|0.1.2 26-27|0.1.2.0 23-24|0.1 22-23|0 18-19|0.1.2.1.1.0.0.0+0.1.2.1.1.0.0 15-16|0.1.2.1.1.1.1 13-14|0.1.0 8-9|0.1.1.0.1+0.1.1.0 7-8|0.1.1.0.0 6-7|0.1.1.0.0.0 5-6|0.1.1.0.1.0 2-3|0.1.1.1 0-1|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:36.415
# ::node	0	contrast-01	22-23
# ::node	0.0	exact	36-37
# ::node	0.1	appear-01	23-24
# ::node	0.1.0	solar	13-14
# ::node	0.1.1	it	0-1
# ::node	0.1.1.0	have-org-role-91	8-9
# ::node	0.1.1.0.0	ministry	7-8
# ::node	0.1.1.0.0.0	foreign	6-7
# ::node	0.1.1.0.1	official	8-9
# ::node	0.1.1.0.1.0	senior	5-6
# ::node	0.1.1.1	float-01	2-3
# ::node	0.1.2	after	27-28
# ::node	0.1.2.0	nowhere	26-27
# ::node	0.1.2.1	fail-01	32-33
# ::node	0.1.2.1.0	and	30-31
# ::node	0.1.2.1.0.0	city	31-32
# ::node	0.1.2.1.0.0.0	name	31-32
# ::node	0.1.2.1.0.0.0.0	"London"	31-32
# ::node	0.1.2.1.1	agree-01	34-35
# ::node	0.1.2.1.1.0	country	28-30
# ::node	0.1.2.1.1.0.0	have-org-role-91	18-19
# ::node	0.1.2.1.1.0.0.0	president	18-19
# ::node	0.1.2.1.1.0.1	name	28-30
# ::node	0.1.2.1.1.0.1.0	"aires"	28-30
# ::node	0.1.2.1.1.0.1.1	"buenos"	28-30
# ::node	0.1.2.1.1.1	mean-01	39-40
# ::node	0.1.2.1.1.1.0	it	38-39
# ::node	0.1.2.1.1.1.1	year	15-16
# ::root	0	contrast-01
# ::edge	after	mod	nowhere	0.1.2	0.1.2.0	
# ::edge	after	op1	fail-01	0.1.2	0.1.2.1	
# ::edge	agree-01	ARG0	country	0.1.2.1.1	0.1.2.1.1.0	
# ::edge	agree-01	ARG1	mean-01	0.1.2.1.1	0.1.2.1.1.1	
# ::edge	and	op1	city	0.1.2.1.0	0.1.2.1.0.0	
# ::edge	appear-01	ARG0	solar	0.1	0.1.0	
# ::edge	appear-01	ARG1	it	0.1	0.1.1	
# ::edge	appear-01	time	after	0.1	0.1.2	
# ::edge	city	name	name	0.1.2.1.0.0	0.1.2.1.0.0.0	
# ::edge	contrast-01	ARG1	exact	0	0.0	
# ::edge	contrast-01	ARG2	appear-01	0	0.1	
# ::edge	country	name	name	0.1.2.1.1.0	0.1.2.1.1.0.1	
# ::edge	fail-01	ARG1	and	0.1.2.1	0.1.2.1.0	
# ::edge	fail-01	ARG2	agree-01	0.1.2.1	0.1.2.1.1	
# ::edge	float-01	ARG1	it	0.1.1.1	0.1.1	
# ::edge	have-org-role-91	ARG0	it	0.1.1.0	0.1.1	
# ::edge	have-org-role-91	ARG1	country	0.1.2.1.1.0.0	0.1.2.1.1.0	
# ::edge	have-org-role-91	ARG1	ministry	0.1.1.0	0.1.1.0.0	
# ::edge	have-org-role-91	ARG2	official	0.1.1.0	0.1.1.0.1	
# ::edge	have-org-role-91	ARG2	president	0.1.2.1.1.0.0	0.1.2.1.1.0.0.0	
# ::edge	mean-01	ARG0	it	0.1.2.1.1.1	0.1.2.1.1.1.0	
# ::edge	mean-01	ARG1	year	0.1.2.1.1.1	0.1.2.1.1.1.1	
# ::edge	ministry	mod	foreign	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	name	op1	"London"	0.1.2.1.0.0.0	0.1.2.1.0.0.0.0	
# ::edge	name	op1	"aires"	0.1.2.1.1.0.1	0.1.2.1.1.0.1.0	
# ::edge	name	op2	"buenos"	0.1.2.1.1.0.1	0.1.2.1.1.0.1.1	
# ::edge	official	mod	senior	0.1.1.0.1	0.1.1.0.1.0	
(c3 / contrast-01 
      :ARG1 (e / exact) 
      :ARG2 (a4 / appear-01 
            :ARG0 (s / solar) 
            :ARG1 (i2 / it 
                  :ARG0-of (h2 / have-org-role-91 
                        :ARG1 (m2 / ministry 
                              :mod (f2 / foreign)) 
                        :ARG2 (o / official 
                              :mod (s2 / senior))) 
                  :ARG1-of (f3 / float-01)) 
            :time (a3 / after 
                  :mod (n3 / nowhere) 
                  :op1 (f / fail-01 
                        :ARG1 (a2 / and 
                              :op1 (c / city 
                                    :name (n / name 
                                          :op1 "London"))) 
                        :ARG2 (a / agree-01 
                              :ARG0 (c2 / country 
                                    :ARG1-of (h / have-org-role-91 
                                          :ARG2 (p / president)) 
                                    :name (n2 / name 
                                          :op1 "aires" 
                                          :op2 "buenos")) 
                              :ARG1 (m / mean-01 
                                    :ARG0 (i / it) 
                                    :ARG1 (y / year)))))))

# ::snt a sinister white vapour was floating over the autobahn
# ::tok a sinister white vapour was floating over the autobahn
# ::alignments 5-6|0.0 2-3|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:36.427
# ::node	0	sinister	1-2
# ::node	0.0	float-01	5-6
# ::node	0.0.0	white	2-3
# ::root	0	sinister
# ::edge	float-01	ARG0	white	0.0	0.0.0	
# ::edge	sinister	condition	float-01	0	0.0	
(s / sinister 
      :condition (f / float-01 
            :ARG0 (w / white)))

# ::snt unknowing it floated away an orange speck becoming a black one above a blue swimming pool
# ::tok unknowing it floated away an orange speck becoming a black one above a blue swimming pool
# ::alignments 15-16|0.0 14-15|0.0.1 13-14|0 11-12|0.0.0.2 9-10|0.0.0.1.2 7-8|0.0.0 5-6|0.0.0.0 3-4|0.0.0.1.1 2-3|0.0.0.1 1-2|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:36.549
# ::node	0	blue	13-14
# ::node	0.0	pool	15-16
# ::node	0.0.0	become-01	7-8
# ::node	0.0.0.0	orange	5-6
# ::node	0.0.0.1	float-01	2-3
# ::node	0.0.0.1.0	it	1-2
# ::node	0.0.0.1.1	away	3-4
# ::node	0.0.0.1.2	black	9-10
# ::node	0.0.0.2	above	11-12
# ::node	0.0.1	swim-01	14-15
# ::root	0	blue
(b / blue 
      :mod-of (p / pool 
            :ARG1-of (b3 / become-01 
                  :ARG0 (o / orange) 
                  :ARG1-of (f / float-01 
                        :ARG0 (i / it) 
                        :ARG2 (a2 / away) 
                        :manner (b2 / black)) 
                  :ARG2 (a / above)) 
            :mod (s / swim-01)))

# ::snt water was floated along brimfull channels as described by  thomas hardy on a plan so rectangular that on a fine day they look like silver  gridirons
# ::tok water was floated along brimfull channels as described by thomas hardy on a plan so rectangular that on a fine day they look like silver gridirons
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:36.550
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt did you see much of the goal or as it was a free kick floated in and martin foyle headed it back across the face of goal and vocal soundum your partner in crime really at the back put it in
# ::tok did you see much of the goal or as it was a free kick floated in and martin foyle headed it back across the face of goal and vocal soundum your partner in crime really at the back put it in
# ::alignments 39-40|0.0.0 37-38|0.2 34-35|0.0.1.1.4.1 33-34|0.0.1.1.4.0.1 31-32|0.0.1.1.4.0 28-29|0.0.1.1.4.0.0 27-28|0.0.1.1.4 26-27|0.1.0.0 24-25|0.1.0 22-23|0.1.0.1 21-22|0.1.0.1.0 20-21|0.1.0.2 17-19|0.1.1.0+0.1.1.1+0.1.1+0.1 16-17|0 14-15|0.0 13-14|0.0.1 12-13|0.0.1.2 9-10|0.0.1.0 7-8|0.0.1.1.3 6-7|0.0.1.1.1 3-4|0.0.1.1.2 2-3|0.0.1.1 1-2|0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:37.289
# ::node	0	and	16-17
# ::node	0.0	float-01	14-15
# ::node	0.0.0	it	39-40
# ::node	0.0.1	kick-01	13-14
# ::node	0.0.1.0	it	9-10
# ::node	0.0.1.1	see-01	2-3
# ::node	0.0.1.1.0	you	1-2
# ::node	0.0.1.1.1	goal	6-7
# ::node	0.0.1.1.2	much	3-4
# ::node	0.0.1.1.3	or	7-8
# ::node	0.0.1.1.4	and	27-28
# ::node	0.0.1.1.4.0	partner-01	31-32
# ::node	0.0.1.1.4.0.0	vocal	28-29
# ::node	0.0.1.1.4.0.1	crime	33-34
# ::node	0.0.1.1.4.1	really	34-35
# ::node	0.0.1.2	free-41	12-13
# ::node	0.1	person	17-19
# ::node	0.1.0	face-01	24-25
# ::node	0.1.0.0	goal	26-27
# ::node	0.1.0.1	across	22-23
# ::node	0.1.0.1.0	back	21-22
# ::node	0.1.0.2	it	20-21
# ::node	0.1.1	name	17-19
# ::node	0.1.1.0	"foyle"	17-19
# ::node	0.1.1.1	"martin"	17-19
# ::node	0.2	back	37-38
# ::root	0	and
# ::edge	across	mod	back	0.1.0.1	0.1.0.1.0	
# ::edge	across	op1	face-01	0.1.0.1	0.1.0	
# ::edge	and	op1	float-01	0	0.0	
# ::edge	and	op1	see-01	0.0.1.1.4	0.0.1.1	
# ::edge	and	op2	partner-01	0.0.1.1.4	0.0.1.1.4.0	
# ::edge	and	op2	person	0	0.1	
# ::edge	and	time	really	0.0.1.1.4	0.0.1.1.4.1	
# ::edge	back	poss	and	0.2	0	
# ::edge	face-01	ARG0	person	0.1.0	0.1	
# ::edge	face-01	ARG1	goal	0.1.0	0.1.0.0	
# ::edge	float-01	ARG0	it	0.0	0.0.0	
# ::edge	float-01	ARG1	kick-01	0.0	0.0.1	
# ::edge	free-41	ARG1	kick-01	0.0.1.2	0.0.1	
# ::edge	it	topic	face-01	0.1.0.2	0.1.0	
# ::edge	kick-01	ARG0	it	0.0.1	0.0.1.0	
# ::edge	kick-01	ARG1	see-01	0.0.1	0.0.1.1	
# ::edge	name	op1	"foyle"	0.1.1	0.1.1.0	
# ::edge	name	op2	"martin"	0.1.1	0.1.1.1	
# ::edge	partner-01	ARG0	vocal	0.0.1.1.4.0	0.0.1.1.4.0.0	
# ::edge	partner-01	ARG1	crime	0.0.1.1.4.0	0.0.1.1.4.0.1	
# ::edge	person	name	name	0.1	0.1.1	
# ::edge	see-01	ARG0	you	0.0.1.1	0.0.1.1.0	
# ::edge	see-01	ARG1	goal	0.0.1.1	0.0.1.1.1	
# ::edge	see-01	degree	much	0.0.1.1	0.0.1.1.2	
# ::edge	see-01	location	or	0.0.1.1	0.0.1.1.3	
(a3 / and 
      :op1 (f2 / float-01 
            :ARG0 (i / it) 
            :ARG1 (k / kick-01 
                  :ARG0 (i3 / it) 
                  :ARG1 (s / see-01 
                        :ARG0 (y / you) 
                        :ARG1 (g2 / goal) 
                        :degree (m / much) 
                        :location (o / or) 
                        :op-of (a / and 
                              :op1 (p / partner-01 
                                    :ARG0 (v / vocal) 
                                    :ARG1 (c / crime)) 
                              :time (r / really))) 
                  :ARG1-of (f3 / free-41))) 
      :op2 (p2 / person 
            :ARG0-of (f / face-01 
                  :ARG1 (g / goal) 
                  :op-of (a2 / across 
                        :mod (b2 / back)) 
                  :topic-of (i2 / it)) 
            :name (n / name 
                  :op1 "foyle" 
                  :op2 "martin")) 
      :poss-of (b / back))

# ::snt at times she was very subjective at others quite detached as if floating outside her body
# ::tok at times she was very subjective at others quite detached as if floating outside her body
# ::alignments 15-16|0.0.0.1 13-14|0.0.0.1.0 12-13|0.0.0 8-9|0.0.0.0 7-8|0.0 5-6|0 4-5|0.1 2-3|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:37.332
# ::node	0	subjective	5-6
# ::node	0.0	other	7-8
# ::node	0.0.0	float-01	12-13
# ::node	0.0.0.0	quite	8-9
# ::node	0.0.0.1	body	15-16
# ::node	0.0.0.1.0	outside	13-14
# ::node	0.1	very	4-5
# ::node	0.2	she	2-3
# ::root	0	subjective
# ::edge	float-01	ARG0	quite	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	other	0.0.0	0.0	
# ::edge	float-01	ARG3	body	0.0.0	0.0.0.1	
# ::edge	outside	op1	body	0.0.0.1.0	0.0.0.1	
# ::edge	subjective	compared-to	other	0	0.0	
# ::edge	subjective	degree	very	0	0.1	
# ::edge	subjective	domain	she	0	0.2	
(s / subjective 
      :compared-to (o2 / other 
            :ARG1-of (f / float-01 
                  :ARG0 (q / quite) 
                  :ARG3 (b / body 
                        :op-of (o / outside)))) 
      :degree (v / very) 
      :domain (s2 / she))

# ::snt englands a shit hole floated in
# ::tok englands a shit hole floated in
# ::alignments 4-5|0.0 3-4|0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:37.344
# ::node	0	hole	3-4
# ::node	0.0	float-01	4-5
# ::node	0.0.0	shit	2-3
# ::root	0	hole
(h / hole 
      :ARG1-of (f / float-01 
            :ARG0 (s / shit)))

# ::snt strictly speaking though pumice is only a kind of highly vesicular glassy rock with a low density so low that many types will float on  water and it may be anywhere between basalt and rhyolite in  composition
# ::tok strictly speaking though pumice is only a kind of highly vesicular glassy rock with a low density so low that many types will float on water and it may be anywhere between basalt and rhyolite in composition
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:37.346
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt 3 per cent compared to more than 17 per cent for eurotunnel when it was floated
# ::tok 3 per cent compared to more than 17 per cent for eurotunnel when it was floated
# ::alignments 15-16|0.2 13-14|0.2.0 9-10|0.0.0.0+0.0.0 7-8|0.0 3-4|0 2-3|0.1.0+0.1 0-1|0.2.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:37.472
# ::node	0	compare-01	3-4
# ::node	0.0	17	7-8
# ::node	0.0.0	monetary-quantity	9-10
# ::node	0.0.0.0	cent	9-10
# ::node	0.1	monetary-quantity	2-3
# ::node	0.1.0	cent	2-3
# ::node	0.2	float-01	15-16
# ::node	0.2.0	it	13-14
# ::node	0.2.1	3	0-1
# ::root	0	compare-01
# ::edge	17	name	monetary-quantity	0.0	0.0.0	
# ::edge	3	op1	float-01	0.2.1	0.2	
# ::edge	compare-01	ARG0	17	0	0.0	
# ::edge	compare-01	ARG1	monetary-quantity	0	0.1	
# ::edge	float-01	ARG1	it	0.2	0.2.0	
# ::edge	float-01	ARG2	compare-01	0.2	0	
# ::edge	monetary-quantity	unit	cent	0.0.0	0.0.0.0	
# ::edge	monetary-quantity	unit	cent	0.1	0.1.0	
(c2 / compare-01 
      :ARG0 (1 / 17 
            :name (m / monetary-quantity 
                  :unit (c / cent))) 
      :ARG1 (m2 / monetary-quantity 
            :unit (c3 / cent)) 
      :ARG2-of (f / float-01 
            :ARG1 (i / it) 
            :op-of 3))

# ::snt it felt reassuring to think that if the plane packed up we would splash down and float safely rather than sink
# ::tok it felt reassuring to think that if the plane packed up we would splash down and float safely rather than sink
# ::alignments 20-21|0.0.0.0.1 17-18|0.0.0.0.0.2 16-17|0.0.0.0.0 15-16|0.0.0.0 14-15|0.0.0.0.0.0.0.0 13-14|0.0.0.0.0.0.0 11-12|0.0.0.0.0.0 9-10|0.0.0.0.0.1 8-9|0.0.0.0.0.1.0 4-5|0.0.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:37.530
# ::node	0	feel-01	1-2
# ::node	0.0	it	0-1
# ::node	0.0.0	think-01	4-5
# ::node	0.0.0.0	and	15-16
# ::node	0.0.0.0.0	float-01	16-17
# ::node	0.0.0.0.0.0	we	11-12
# ::node	0.0.0.0.0.0.0	splash-02	13-14
# ::node	0.0.0.0.0.0.0.0	down	14-15
# ::node	0.0.0.0.0.1	pack-01	9-10
# ::node	0.0.0.0.0.1.0	plane	8-9
# ::node	0.0.0.0.0.2	safe-41	17-18
# ::node	0.0.0.0.1	sink-01	20-21
# ::root	0	feel-01
# ::edge	and	op1	float-01	0.0.0.0	0.0.0.0.0	
# ::edge	and	op2	sink-01	0.0.0.0	0.0.0.0.1	
# ::edge	feel-01	ARG0	it	0	0.0	
# ::edge	float-01	ARG0	we	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	float-01	ARG1	pack-01	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	float-01	manner	safe-41	0.0.0.0.0	0.0.0.0.0.2	
# ::edge	pack-01	ARG1	plane	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	splash-02	ARG0	we	0.0.0.0.0.0.0	0.0.0.0.0.0	
# ::edge	splash-02	direction	down	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	think-01	ARG0	it	0.0.0	0.0	
# ::edge	think-01	ARG1	and	0.0.0	0.0.0.0	
(f2 / feel-01 
      :ARG0 (i / it 
            :ARG0-of (t / think-01 
                  :ARG1 (a / and 
                        :op1 (f / float-01 
                              :ARG0 (w / we 
                                    :ARG0-of (s3 / splash-02 
                                          :direction (d / down))) 
                              :ARG1 (p / pack-01 
                                    :ARG1 (p2 / plane)) 
                              :manner (s2 / safe-41)) 
                        :op2 (s / sink-01)))))

# ::snt le mondes cartoon yesterday showed other world leaders arriving in paris on parachutes made from revolutionary bonnets while mrs thatcher floated down on a union jack
# ::tok le mondes cartoon yesterday showed other world leaders arriving in paris on parachutes made from revolutionary bonnets while mrs thatcher floated down on a union jack
# ::alignments 24-25|0.3.0.0.0 21-22|0.3.0.0 20-21|0.3.0 15-16|0.0.1.0 8-9|0.0.1 7-8|0.0.0+0.0 6-7|0.1 5-6|0.0.2 4-5|0 3-4|0.3 2-3|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:37.772
# ::node	0	show-01	4-5
# ::node	0.0	person	7-8
# ::node	0.0.0	lead-02	7-8
# ::node	0.0.1	arrive-01	8-9
# ::node	0.0.1.0	revolution	15-16
# ::node	0.0.2	other	5-6
# ::node	0.1	world	6-7
# ::node	0.2	cartoon	2-3
# ::node	0.3	yesterday	3-4
# ::node	0.3.0	float-01	20-21
# ::node	0.3.0.0	down	21-22
# ::node	0.3.0.0.0	union	24-25
# ::root	0	show-01
# ::edge	arrive-01	ARG0	revolution	0.0.1	0.0.1.0	
# ::edge	arrive-01	ARG1	person	0.0.1	0.0	
# ::edge	down	op1	union	0.3.0.0	0.3.0.0.0	
# ::edge	float-01	ARG0	yesterday	0.3.0	0.3	
# ::edge	float-01	direction	down	0.3.0	0.3.0.0	
# ::edge	lead-02	ARG0	person	0.0.0	0.0	
# ::edge	person	mod	other	0.0	0.0.2	
# ::edge	show-01	ARG0	person	0	0.0	
# ::edge	show-01	ARG1	world	0	0.1	
# ::edge	show-01	mod	cartoon	0	0.2	
# ::edge	show-01	time	yesterday	0	0.3	
(s / show-01 
      :ARG0 (p / person 
            :ARG0-of (l / lead-02) 
            :ARG1-of (a / arrive-01 
                  :ARG0 (r / revolution)) 
            :mod (o / other)) 
      :ARG1 (w / world) 
      :mod (c / cartoon) 
      :time (y / yesterday 
            :ARG0-of (f / float-01 
                  :direction (d / down 
                        :op1 (u / union)))))

# ::snt hands and ankles bound woollen bonnet pulled down over his face a thin cord around his neck the fouryearold floated quietly face down in his blue anorak like some discarded package thrown on to the water
# ::tok hands and ankles bound woollen bonnet pulled down over his face a thin cord around his neck the fouryearold floated quietly face down in his blue anorak like some discarded package thrown on to the water
# ::alignments 35-36|0.0.0.0.0.1 31-32|0.0.0.0.0 30-31|0.0.0.0.0.0 28-29|0.0.0.0.0.0.0 25-26|0 22-23|0.0.1.1 21-22|0.0.1 20-21|0.0.1.2 19-20|0.0 16-17|0.0.0.1.0 14-15|0.0.0.1 13-14|0.0.0 12-13|0.0.0.2 10-11|0.0.0.0 7-8|0.0.0.3 1-2|0.0.1.0 0-1|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:38.042
# ::node	0	blue	25-26
# ::node	0.0	float-01	19-20
# ::node	0.0.0	cord	13-14
# ::node	0.0.0.0	face-01	10-11
# ::node	0.0.0.0.0	throw-01	31-32
# ::node	0.0.0.0.0.0	package	30-31
# ::node	0.0.0.0.0.0.0	some	28-29
# ::node	0.0.0.0.0.1	water	35-36
# ::node	0.0.0.1	around	14-15
# ::node	0.0.0.1.0	neck	16-17
# ::node	0.0.0.2	thin	12-13
# ::node	0.0.0.3	down	7-8
# ::node	0.0.1	face-01	21-22
# ::node	0.0.1.0	and	1-2
# ::node	0.0.1.0.0	hand	0-1
# ::node	0.0.1.1	down	22-23
# ::node	0.0.1.2	quiet	20-21
# ::root	0	blue
(b / blue 
      :ARG0-of (f2 / float-01 
            :ARG1 (c / cord 
                  :ARG1-of (f3 / face-01 
                        :ARG2 (t / throw-01 
                              :ARG1 (p / package 
                                    :quant (s / some)) 
                              :ARG2 (w / water))) 
                  :location (a / around 
                        :op1 (n / neck)) 
                  :mod (t2 / thin) 
                  :path-of (d2 / down)) 
            :ARG2 (f / face-01 
                  :ARG1 (a2 / and 
                        :op1 (h / hand)) 
                  :direction (d / down) 
                  :mod (q / quiet))))

# ::snt if mrs thatcher still hankers after a floating exchange rate she should try to persuade her colleagues of that policy, assuming that she cannot persuade them and since in any case she would detest a pound which floated quickly down she must strengthen the credibility of the exchangerate element in the governments antiinflation strategy by supporting our early entry into the erm
# ::tok if mrs thatcher still hankers after a floating exchange rate she should try to persuade her colleagues of that policy , assuming that she cannot persuade them and since in any case she would detest a pound which floated quickly down she must strengthen the credibility of the exchangerate element in the governments antiinflation strategy by supporting our early entry into the erm
# ::alignments 58-59|0.0.1.0 56-57|0.0.0.0 54-55|0.0.0.0.0 52-53|0.0.0.0.0.1.0+0.0.0.0.0.1 49-50|0.0.0.0.0.0 45-46|0 43-44|0.0 41-42|0.0.0 40-41|0.0.1.1 39-40|0.0.1.1.0 38-39|0.0.1 34-35|0.0.2.1.0.0 32-33|0.0.2.1.0.0.0 31-32|0.0.2.1.0.0.2 30-31|0.0.2.1.0.0.2.0 28-29|0.0.2.1.0.0.1 27-28|0.0.2 25-26|0.0.2.1 23-24|0.0.2.1.0 21-22|0.0.2.1.2 19-20|0.0.2.0.0.0.1.0.0 14-15|0.0.2.0.0.0 12-13|0.0.2.0.0.0.1 11-12|0.0.2.0 10-11|0.0.2.0.0 9-10|0.0.2.0.0.0.0 8-9|0.0.2.0.0.0.1.1 7-8|0.0.2.0.0.0.0.0 5-6|0.0.2.0.0.0.1.0 3-4|0.0.2.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:39.651
# ::node	0	credibility	45-46
# ::node	0.0	strengthen-01	43-44
# ::node	0.0.0	she	41-42
# ::node	0.0.0.0	support-01	56-57
# ::node	0.0.0.0.0	strategy	54-55
# ::node	0.0.0.0.0.0	element	49-50
# ::node	0.0.0.0.0.1	government-organization	52-53
# ::node	0.0.0.0.0.1.0	govern-01	52-53
# ::node	0.0.1	float-01	38-39
# ::node	0.0.1.0	early	58-59
# ::node	0.0.1.1	down	40-41
# ::node	0.0.1.1.0	quick	39-40
# ::node	0.0.2	and	27-28
# ::node	0.0.2.0	recommend-01	11-12
# ::node	0.0.2.0.0	she	10-11
# ::node	0.0.2.0.0.0	persuade-01	14-15
# ::node	0.0.2.0.0.0.0	rate	9-10
# ::node	0.0.2.0.0.0.0.0	float-01	7-8
# ::node	0.0.2.0.0.0.1	try-01	12-13
# ::node	0.0.2.0.0.0.1.0	after	5-6
# ::node	0.0.2.0.0.0.1.0.0	policy	19-20
# ::node	0.0.2.0.0.0.1.1	exchange-01	8-9
# ::node	0.0.2.1	persuade-01	25-26
# ::node	0.0.2.1.0	she	23-24
# ::node	0.0.2.1.0.0	detest-01	34-35
# ::node	0.0.2.1.0.0.0	she	32-33
# ::node	0.0.2.1.0.0.1	since	28-29
# ::node	0.0.2.1.0.0.2	case	31-32
# ::node	0.0.2.1.0.0.2.0	any	30-31
# ::node	0.0.2.1.1	still	3-4
# ::node	0.0.2.1.2	assume-02	21-22
# ::root	0	credibility
(c / credibility 
      :ARG1-of (s3 / strengthen-01 
            :ARG0 (s4 / she 
                  :ARG0-of (s / support-01 
                        :ARG1 (s2 / strategy 
                              :location-of (e2 / element) 
                              :mod (g / government-organization 
                                    :ARG0-of (g2 / govern-01))))) 
            :ARG1-of (f / float-01 
                  :ARG0 (e / early) 
                  :ARG2 (d / down 
                        :degree (q / quick))) 
            :op-of (a2 / and 
                  :ARG1-of (r / recommend-01 
                        :ARG2 (s8 / she 
                              :ARG0-of (p3 / persuade-01 
                                    :ARG1 (r2 / rate 
                                          :ARG1-of (f2 / float-01)) 
                                    :ARG1-of (t / try-01 
                                          :ARG0 (a4 / after 
                                                :op1 (p2 / policy)) 
                                          :ARG1-of (e3 / exchange-01))))) 
                  :op1 (p / persuade-01 
                        :ARG0 (s7 / she 
                              :ARG1-of (d2 / detest-01 
                                    :ARG0 (s5 / she) 
                                    :op-of (s6 / since) 
                                    :time (c2 / case 
                                          :mod (a / any)))) 
                        :ARG1 (s9 / still) 
                        :ARG1-of (a3 / assume-02)))))

# ::snt but then it reviews each investment every six months revaluing particularly if the company is about to be floated
# ::tok but then it reviews each investment every six months revaluing particularly if the company is about to be floated
# ::alignments 18-19|0.1.1.0.0 13-14|0.1.1.0 10-11|0.0 8-9|0.1.1.0.0.0.1+0.1.1.0.0.0 7-8|0.1.1.0.0.0.0 6-7|0.1.1.0.0.0.1.0 5-6|0.1.1 4-5|0.1.1.1 3-4|0.1 2-3|0.1.0 1-2|0.1.2 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:39.881
# ::node	0	contrast-01	0-1
# ::node	0.0	particular	10-11
# ::node	0.1	review-01	3-4
# ::node	0.1.0	it	2-3
# ::node	0.1.1	invest-01	5-6
# ::node	0.1.1.0	company	13-14
# ::node	0.1.1.0.0	float-01	18-19
# ::node	0.1.1.0.0.0	temporal-quantity	8-9
# ::node	0.1.1.0.0.0.0	6	7-8
# ::node	0.1.1.0.0.0.1	month	8-9
# ::node	0.1.1.0.0.0.1.0	every	6-7
# ::node	0.1.1.1	each	4-5
# ::node	0.1.2	then	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG0	particular	0	0.0	
# ::edge	contrast-01	ARG1	review-01	0	0.1	
# ::edge	float-01	ARG0	temporal-quantity	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	float-01	ARG1	company	0.1.1.0.0	0.1.1.0	
# ::edge	invest-01	ARG0	company	0.1.1	0.1.1.0	
# ::edge	invest-01	mod	each	0.1.1	0.1.1.1	
# ::edge	month	mod	every	0.1.1.0.0.0.1	0.1.1.0.0.0.1.0	
# ::edge	review-01	ARG0	it	0.1	0.1.0	
# ::edge	review-01	ARG1	invest-01	0.1	0.1.1	
# ::edge	review-01	time	then	0.1	0.1.2	
# ::edge	temporal-quantity	quant	6	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	temporal-quantity	unit	month	0.1.1.0.0.0	0.1.1.0.0.0.1	
(c2 / contrast-01 
      :ARG0 (p / particular) 
      :ARG1 (r / review-01 
            :ARG0 (i2 / it) 
            :ARG1 (i / invest-01 
                  :ARG0 (c / company 
                        :ARG1-of (f / float-01 
                              :ARG0 (t / temporal-quantity 
                                    :quant 6 
                                    :unit (m / month 
                                          :mod (e / every))))) 
                  :mod (e2 / each)) 
            :time (t2 / then)))

# ::snt for kunert the political divide is compounded by the breakdown of continuity with the past which deprives modern berlin of its inner reality leaving it floating like a dream city on the frontiers of time
# ::tok for kunert the political divide is compounded by the breakdown of continuity with the past which deprives modern berlin of its inner reality leaving it floating like a dream city on the frontiers of time
# ::alignments 34-35|0.1.2 29-30|0.0 28-29|0 25-26|0.0.0 24-25|0.0.0.1 23-24|0.0.0.2 22-23|0.0.0.0 21-22|0.0.0.0.0 17-18|0.0.0.3.0 14-15|0.1.1 11-12|0.1.0 9-10|0.1 4-5|0.0.0.3 3-4|0.0.0.3.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.173
# ::node	0	dream-01	28-29
# ::node	0.0	city	29-30
# ::node	0.0.0	float-01	25-26
# ::node	0.0.0.0	reality	22-23
# ::node	0.0.0.0.0	inner	21-22
# ::node	0.0.0.1	it	24-25
# ::node	0.0.0.2	leave-01	23-24
# ::node	0.0.0.3	divide-02	4-5
# ::node	0.0.0.3.0	modern	17-18
# ::node	0.0.0.3.1	politics	3-4
# ::node	0.1	break-12	9-10
# ::node	0.1.0	continuity	11-12
# ::node	0.1.1	past	14-15
# ::node	0.1.2	time	34-35
# ::root	0	dream-01
# ::edge	break-12	ARG1	continuity	0.1	0.1.0	
# ::edge	break-12	location	past	0.1	0.1.1	
# ::edge	divide-02	ARG0	modern	0.0.0.3	0.0.0.3.0	
# ::edge	divide-02	mod	politics	0.0.0.3	0.0.0.3.1	
# ::edge	dream-01	ARG0	city	0	0.0	
# ::edge	dream-01	ARG1	break-12	0	0.1	
# ::edge	float-01	ARG0	reality	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	it	0.0.0	0.0.0.1	
# ::edge	float-01	ARG2	divide-02	0.0.0	0.0.0.3	
# ::edge	float-01	location	city	0.0.0	0.0	
# ::edge	leave-01	ARG1	float-01	0.0.0.2	0.0.0	
# ::edge	reality	mod	inner	0.0.0.0	0.0.0.0.0	
# ::edge	time	op1	break-12	0.1.2	0.1	
(d / dream-01 
      :ARG0 (c / city 
            :location-of (f / float-01 
                  :ARG0 (r / reality 
                        :mod (i2 / inner)) 
                  :ARG1 (i / it) 
                  :ARG1-of (l / leave-01) 
                  :ARG2 (d2 / divide-02 
                        :ARG0 (m / modern) 
                        :mod (p2 / politics)))) 
      :ARG1 (b / break-12 
            :ARG1 (c2 / continuity) 
            :location (p / past) 
            :op-of (t / time)))

# ::snt mr maxwell confirmed plans to float berlitz later this month through an international share offering and to sell maxwell graphics the north american printing business
# ::tok mr maxwell confirmed plans to float berlitz later this month through an international share offering and to sell maxwell graphics the north american printing business
# ::alignments 24-25|0.1.1.0 22-23|0.0.0.0.0+0.0.0.0+0.0.0 21-22|0.1.1.1 17-18|0.1.1 15-16|0.1 14-15|0.1.0.0 13-14|0.1.0.0.0 12-13|0.1.0.0.0.0 9-10|0.1.0.1.0.0+0.1.0.1.0 8-9|0.1.0.1.0.0.0 7-8|0.1.0.1 5-6|0.1.0 3-4|0.0 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.364
# ::node	0	confirm-01	2-3
# ::node	0.0	plan-01	3-4
# ::node	0.0.0	country	22-23
# ::node	0.0.0.0	name	22-23
# ::node	0.0.0.0.0	"America"	22-23
# ::node	0.1	and	15-16
# ::node	0.1.0	float-01	5-6
# ::node	0.1.0.0	offer-01	14-15
# ::node	0.1.0.0.0	share-01	13-14
# ::node	0.1.0.0.0.0	international	12-13
# ::node	0.1.0.1	late	7-8
# ::node	0.1.0.1.0	temporal-quantity	9-10
# ::node	0.1.0.1.0.0	month	9-10
# ::node	0.1.0.1.0.0.0	this	8-9
# ::node	0.1.1	sell-01	17-18
# ::node	0.1.1.0	business	24-25
# ::node	0.1.1.1	north	21-22
# ::root	0	confirm-01
# ::edge	and	op1	confirm-01	0.1	0	
# ::edge	and	op2	float-01	0.1	0.1.0	
# ::edge	and	op3	sell-01	0.1	0.1.1	
# ::edge	confirm-01	ARG1	plan-01	0	0.0	
# ::edge	country	name	name	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	offer-01	0.1.0	0.1.0.0	
# ::edge	float-01	time	late	0.1.0	0.1.0.1	
# ::edge	late	op1	temporal-quantity	0.1.0.1	0.1.0.1.0	
# ::edge	month	mod	this	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	name	op1	"America"	0.0.0.0	0.0.0.0.0	
# ::edge	offer-01	ARG1	share-01	0.1.0.0	0.1.0.0.0	
# ::edge	plan-01	ARG0	country	0.0	0.0.0	
# ::edge	sell-01	ARG1	business	0.1.1	0.1.1.0	
# ::edge	sell-01	ARG2	north	0.1.1	0.1.1.1	
# ::edge	share-01	mod	international	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	temporal-quantity	unit	month	0.1.0.1.0	0.1.0.1.0.0	
(c2 / confirm-01 
      :ARG1 (p / plan-01 
            :ARG0 (c / country 
                  :name (n / name 
                        :op1 "America"))) 
      :op-of (a / and 
            :op1 (f / float-01 
                  :ARG1 (o / offer-01 
                        :ARG1 (s2 / share-01 
                              :mod (i / international))) 
                  :time (l / late 
                        :op1 (t / temporal-quantity 
                              :unit (m / month 
                                    :mod (t2 / this))))) 
            :op2 (s / sell-01 
                  :ARG1 (b / business) 
                  :ARG2 (n2 / north))))

# ::snt at first there will be little  to see other than an area of dirty discoloured water possibly hot or  boiling and probably with a good many dead fish floating around in  it
# ::tok at first there will be little to see other than an area of dirty discoloured water possibly hot or boiling and probably with a good many dead fish floating around in it
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.366
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt in french intelligence circles however there are rumours of a soviet spy ring linked to gikman operating out of the soviet mission to unesco on the rue miollis and of a soviet embassy staff member found dead floating down the seine last spring
# ::tok in french intelligence circles however there are rumours of a soviet spy ring linked to gikman operating out of the soviet mission to unesco on the rue miollis and of a soviet embassy staff member found dead floating down the seine last spring
# ::alignments 42-43|0.1.0.0.0.0 41-42|0.1.0.0.0 38-39|0.1.0.0.2 37-38|0.1.0.0 35-36|0.1.0.0.1 34-35|0.1.0.2+0.1.0 33-34|0.1.1+0.1 32-33|0.1.0.1 28-29|0 21-22|0.0.1 16-17|0.0 13-14|0.0.0 12-13|0.0.0.0 11-12|0.0.0.0.0 3-4|0.0.2.0 2-3|0.0.2.0.0 1-2|0.0.2.1.0+0.0.2.1+0.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.798
# ::node	0	and	28-29
# ::node	0.0	operate-01	16-17
# ::node	0.0.0	link-01	13-14
# ::node	0.0.0.0	ring	12-13
# ::node	0.0.0.0.0	spy-01	11-12
# ::node	0.0.1	mission	21-22
# ::node	0.0.2	country	1-2
# ::node	0.0.2.0	circle	3-4
# ::node	0.0.2.0.0	intelligence	2-3
# ::node	0.0.2.1	name	1-2
# ::node	0.0.2.1.0	"France"	1-2
# ::node	0.1	person	33-34
# ::node	0.1.0	have-org-role-91	34-35
# ::node	0.1.0.0	float-01	37-38
# ::node	0.1.0.0.0	last	41-42
# ::node	0.1.0.0.0.0	spring	42-43
# ::node	0.1.0.0.1	find-01	35-36
# ::node	0.1.0.0.2	down	38-39
# ::node	0.1.0.1	embassy	32-33
# ::node	0.1.0.2	member	34-35
# ::node	0.1.1	staff-01	33-34
# ::root	0	and
# ::edge	and	op1	person	0	0.1	
# ::edge	circle	mod	country	0.0.2.0	0.0.2	
# ::edge	circle	mod	intelligence	0.0.2.0	0.0.2.0.0	
# ::edge	country	name	name	0.0.2	0.0.2.1	
# ::edge	find-01	ARG1	float-01	0.1.0.0.1	0.1.0.0	
# ::edge	float-01	ARG0	have-org-role-91	0.1.0.0	0.1.0	
# ::edge	float-01	ARG1	last	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	direction	down	0.1.0.0	0.1.0.0.2	
# ::edge	have-org-role-91	ARG0	person	0.1.0	0.1	
# ::edge	have-org-role-91	ARG1	embassy	0.1.0	0.1.0.1	
# ::edge	have-org-role-91	ARG2	member	0.1.0	0.1.0.2	
# ::edge	link-01	ARG1	ring	0.0.0	0.0.0.0	
# ::edge	link-01	ARG2	operate-01	0.0.0	0.0	
# ::edge	name	op1	"France"	0.0.2.1	0.0.2.1.0	
# ::edge	operate-01	ARG1	and	0.0	0	
# ::edge	operate-01	ARG3	mission	0.0	0.0.1	
# ::edge	operate-01	location	country	0.0	0.0.2	
# ::edge	spring	mod	last	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	spy-01	ARG0	ring	0.0.0.0.0	0.0.0.0	
# ::edge	staff-01	ARG2	person	0.1.1	0.1	
(a / and 
      :ARG1-of (o / operate-01 
            :ARG2-of (l2 / link-01 
                  :ARG1 (r / ring 
                        :ARG0-of (s3 / spy-01))) 
            :ARG3 (m2 / mission) 
            :location (c2 / country 
                  :mod-of (c / circle 
                        :mod (i / intelligence)) 
                  :name (n / name 
                        :op1 "France"))) 
      :op1 (p / person 
            :ARG0-of (h / have-org-role-91 
                  :ARG0-of (f / float-01 
                        :ARG1 (l / last 
                              :mod-of (s / spring)) 
                        :ARG1-of (f2 / find-01) 
                        :direction (d / down)) 
                  :ARG1 (e / embassy) 
                  :ARG2 (m / member)) 
            :ARG2-of (s2 / staff-01)))

# ::snt it contained spiced and sweetened mulled ale with baked apples floating in the liquor
# ::tok it contained spiced and sweetened mulled ale with baked apples floating in the liquor
# ::alignments 13-14|0.1.0.0 10-11|0.1.0 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.819
# ::node	0	contain-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	and	3-4
# ::node	0.1.0	float-01	10-11
# ::node	0.1.0.0	liquor	13-14
# ::root	0	contain-01
# ::edge	contain-01	ARG0	it	0	0.0	
# ::edge	contain-01	ARG1	and	0	0.1	
# ::edge	float-01	ARG0	and	0.1.0	0.1	
# ::edge	float-01	ARG1	liquor	0.1.0	0.1.0.0	
(c / contain-01 
      :ARG0 (i / it) 
      :ARG1 (a / and 
            :ARG0-of (f / float-01 
                  :ARG1 (l / liquor))))

# ::snt 3bn when the 10 water authorities of england and wales are floated on the stock market early next month
# ::tok 3bn when the 10 water authorities of england and wales are floated on the stock market early next month
# ::alignments 18-19|0.0.0.0+0.0.0 17-18|0.0.0.0.0 16-17|0.0 15-16|0.2 14-15|0.2.0 11-12|0 8-9|0.3 7-8|0.3.0.0.0+0.3.0.0+0.3.0 5-6|0.1 4-5|0.1.0 3-4|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.914
# ::node	0	float-01	11-12
# ::node	0.0	early	16-17
# ::node	0.0.0	temporal-quantity	18-19
# ::node	0.0.0.0	month	18-19
# ::node	0.0.0.0.0	next	17-18
# ::node	0.1	authority	5-6
# ::node	0.1.0	water	4-5
# ::node	0.2	market	15-16
# ::node	0.2.0	stock	14-15
# ::node	0.2.0.0	10	3-4
# ::node	0.3	and	8-9
# ::node	0.3.0	country	7-8
# ::node	0.3.0.0	name	7-8
# ::node	0.3.0.0.0	"England"	7-8
# ::root	0	float-01
# ::edge	10	poss	stock	0.2.0.0	0.2.0	
# ::edge	and	op1	country	0.3	0.3.0	
# ::edge	and	op2	float-01	0.3	0	
# ::edge	authority	mod	water	0.1	0.1.0	
# ::edge	country	name	name	0.3.0	0.3.0.0	
# ::edge	early	op1	temporal-quantity	0.0	0.0.0	
# ::edge	float-01	ARG0	early	0	0.0	
# ::edge	float-01	ARG1	authority	0	0.1	
# ::edge	float-01	ARG2	market	0	0.2	
# ::edge	market	mod	stock	0.2	0.2.0	
# ::edge	month	mod	next	0.0.0.0	0.0.0.0.0	
# ::edge	name	op1	"England"	0.3.0.0	0.3.0.0.0	
# ::edge	temporal-quantity	unit	month	0.0.0	0.0.0.0	
(f / float-01 
      :ARG0 (e / early 
            :op1 (t / temporal-quantity 
                  :unit (m / month 
                        :mod (n / next)))) 
      :ARG1 (a2 / authority 
            :mod (w / water)) 
      :ARG2 (m2 / market 
            :mod (s / stock 
                  :poss-of 10)) 
      :op-of (a / and 
            :op1 (c / country 
                  :name (n2 / name 
                        :op1 "England"))))

# ::snt the lift floated lightly steadied and the door opened
# ::tok the lift floated lightly steadied and the door opened
# ::alignments 8-9|0.0.0.0 7-8|0.0.0.0.0 5-6|0.0.0 3-4|0.0.1 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.930
# ::node	0	lift-01	1-2
# ::node	0.0	float-01	2-3
# ::node	0.0.0	and	5-6
# ::node	0.0.0.0	open-01	8-9
# ::node	0.0.0.0.0	door	7-8
# ::node	0.0.1	light	3-4
# ::root	0	lift-01
(l2 / lift-01 
      :ARG1-of (f / float-01 
            :ARG4 (a / and 
                  :op1 (o / open-01 
                        :ARG1 (d / door))) 
            :manner (l / light)))

# ::snt the banshee shuddered to a halt its fin and rudder ripped out by a gate floating just below the surface
# ::tok the banshee shuddered to a halt its fin and rudder ripped out by a gate floating just below the surface
# ::alignments 19-20|0.1.1 17-18|0.1 16-17|0.1.0 15-16|0 10-11|0.0 8-9|0.0.0 5-6|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:40.960
# ::node	0	float-01	15-16
# ::node	0.0	rip-01	10-11
# ::node	0.0.0	and	8-9
# ::node	0.0.0.0	halt-01	5-6
# ::node	0.1	below	17-18
# ::node	0.1.0	just	16-17
# ::node	0.1.1	surface	19-20
# ::root	0	float-01
# ::edge	and	time	halt-01	0.0.0	0.0.0.0	
# ::edge	below	mod	just	0.1	0.1.0	
# ::edge	below	op1	surface	0.1	0.1.1	
# ::edge	float-01	time	below	0	0.1	
# ::edge	rip-01	ARG1	and	0.0	0.0.0	
# ::edge	rip-01	manner	float-01	0.0	0	
(f / float-01 
      :manner-of (r / rip-01 
            :ARG1 (a / and 
                  :time (h / halt-01))) 
      :time (b / below 
            :mod (j / just) 
            :op1 (s / surface)))

# ::snt in a series of meetings with the distcos today and generation companies tomorrow mr parkinson will urge the need for compromise in the interests of floating the industry along what is increasingly seen as a very tight timetable
# ::tok in a series of meetings with the distcos today and generation companies tomorrow mr parkinson will urge the need for compromise in the interests of floating the industry along what is increasingly seen as a very tight timetable
# ::alignments 36-37|0.1.0.0.2.0 35-36|0.1.0.0.2.0.0 32-33|0 31-32|0.0 28-29|0.1.2 27-28|0.1.1 25-26|0.1 23-24|0.1.0 20-21|0.1.0.0.2 18-19|0.1.0.0 16-17|0.1.0.0.1 12-13|0.1.0.0.0.2 11-12|0.1.0.0.0.1 10-11|0.1.0.0.0.1.0 9-10|0.1.0.0.0 8-9|0.1.0.0.0.0.1 4-5|0.1.0.0.0.0 2-3|0.1.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:41.697
# ::node	0	see-01	32-33
# ::node	0.0	increase-01	31-32
# ::node	0.1	float-01	25-26
# ::node	0.1.0	interest	23-24
# ::node	0.1.0.0	need-01	18-19
# ::node	0.1.0.0.0	and	9-10
# ::node	0.1.0.0.0.0	meet-03	4-5
# ::node	0.1.0.0.0.0.0	series	2-3
# ::node	0.1.0.0.0.0.1	today	8-9
# ::node	0.1.0.0.0.1	company	11-12
# ::node	0.1.0.0.0.1.0	generation	10-11
# ::node	0.1.0.0.0.2	tomorrow	12-13
# ::node	0.1.0.0.1	urge-01	16-17
# ::node	0.1.0.0.2	compromise-01	20-21
# ::node	0.1.0.0.2.0	tight	36-37
# ::node	0.1.0.0.2.0.0	very	35-36
# ::node	0.1.1	industry	27-28
# ::node	0.1.2	along	28-29
# ::root	0	see-01
(s / see-01 
      :ARG1-of (i / increase-01) 
      :ARG2-of (f / float-01 
            :ARG0 (i3 / interest 
                  :ARG1-of (n / need-01 
                        :ARG0 (a2 / and 
                              :op1 (m / meet-03 
                                    :consist (s2 / series) 
                                    :time (t3 / today)) 
                              :op2 (c2 / company 
                                    :mod (g / generation)) 
                              :op3 (t2 / tomorrow)) 
                        :ARG1-of (u / urge-01) 
                        :ARG2 (c / compromise-01 
                              :ARG1 (t / tight 
                                    :degree (v / very))))) 
            :ARG1 (i2 / industry) 
            :path (a / along)))

# ::snt john sheridan too made a distinct impression with his handsome passing though he did waste an opportunity in the first half with a chip that floated rather sadly into grobbelaars arms
# ::tok john sheridan too made a distinct impression with his handsome passing though he did waste an opportunity in the first half with a chip that floated rather sadly into grobbelaars arms
# ::alignments 30-31|0.2.0.1.0.0 25-26|0.2.0.1.0 23-24|0.2.0.1 20-21|0.2.0.0.0 16-17|0.2.0.0 14-15|0.2.0 12-13|0.2 6-7|0 5-6|0.0 2-3|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:41.779
# ::node	0	impression	6-7
# ::node	0.0	distinct	5-6
# ::node	0.1	too	2-3
# ::node	0.2	he	12-13
# ::node	0.2.0	waste-01	14-15
# ::node	0.2.0.0	opportunity	16-17
# ::node	0.2.0.0.0	half	20-21
# ::node	0.2.0.1	chip	23-24
# ::node	0.2.0.1.0	float-01	25-26
# ::node	0.2.0.1.0.0	arm	30-31
# ::root	0	impression
# ::edge	float-01	ARG0	chip	0.2.0.1.0	0.2.0.1	
# ::edge	float-01	manner	arm	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	impression	mod	distinct	0	0.0	
# ::edge	impression	mod	too	0	0.1	
# ::edge	impression	poss	he	0	0.2	
# ::edge	opportunity	beneficiary	half	0.2.0.0	0.2.0.0.0	
# ::edge	waste-01	ARG0	he	0.2.0	0.2	
# ::edge	waste-01	ARG1	opportunity	0.2.0	0.2.0.0	
# ::edge	waste-01	ARG2	chip	0.2.0	0.2.0.1	
(i / impression 
      :mod (d / distinct) 
      :mod (t / too) 
      :poss (h2 / he 
            :ARG0-of (w / waste-01 
                  :ARG1 (o / opportunity 
                        :beneficiary (h / half)) 
                  :ARG2 (c / chip 
                        :ARG0-of (f / float-01 
                              :manner (a / arm))))))

# ::snt the deep eyes floating in lonesomeness the bitter beat look the scorn on the lip
# ::tok the deep eyes floating in lonesomeness the bitter beat look the scorn on the lip
# ::alignments 8-9|0.0 7-8|0 3-4|0.0.0 2-3|0.0.0.0 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:41.814
# ::node	0	bitter	7-8
# ::node	0.0	beat-01	8-9
# ::node	0.0.0	float-01	3-4
# ::node	0.0.0.0	eye	2-3
# ::node	0.0.0.0.0	deep	1-2
# ::root	0	bitter
(b2 / bitter 
      :mod-of (b / beat-01 
            :ARG1 (f / float-01 
                  :ARG1 (e / eye 
                        :degree (d / deep)))))

# ::snt i can float and that so if i fell in  thats what id do, id just lie on my back like marie showed me and float like a fag packet
# ::tok i can float and that so if i fell in thats what id do , id just lie on my back like marie showed me and float like a fag packet
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:41.815
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt a thunderous psychedelicious affair the storm floats along on the ghostly groove touching on early 80s electro pop a late80s dance feel and even the danker ends of the late60s trip while the bside offers a sprucedup version of the rolling stones shes a rainbow
# ::tok a thunderous psychedelicious affair the storm floats along on the ghostly groove touching on early 80s electro pop a late80s dance feel and even the danker ends of the late60s trip while the bside offers a sprucedup version of the rolling stones shes a rainbow
# ::alignments 44-45|0.0.0.0.1.1 42-43|0.0.0.0.2 41-42|0.0.0.0.2.0.0 40-41|0.0.0.0.2.0 37-38|0.0.0.0.1.2.1 34-35|0.0.0.0.1.2.1.0 30-31|0.0.0.0.1.2 26-27|0.0.0.0.1 22-23|0.0.0.0 21-22|0.0.0 20-21|0.0 17-18|0.0.0.0.0 16-17|0.0.0.0.1.0.0.2.0 15-16|0.0.0.0.1.2.0 14-15|0.0.0.0.1.0.0.2.1 12-13|0.0.0.0.1.0.0.2 10-11|0 7-8|0.0.0.0.1.0.0.1 6-7|0.0.0.0.1.0.0 5-6|0.0.0.0.1.0.0.0 3-4|0.0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:42.476
# ::node	0	ghostly	10-11
# ::node	0.0	dance-01	20-21
# ::node	0.0.0	feel-01	21-22
# ::node	0.0.0.0	and	22-23
# ::node	0.0.0.0.0	pop	17-18
# ::node	0.0.0.0.1	end-01	26-27
# ::node	0.0.0.0.1.0	affair	3-4
# ::node	0.0.0.0.1.0.0	float-01	6-7
# ::node	0.0.0.0.1.0.0.0	storm	5-6
# ::node	0.0.0.0.1.0.0.1	along	7-8
# ::node	0.0.0.0.1.0.0.2	touch-01	12-13
# ::node	0.0.0.0.1.0.0.2.0	electronics	16-17
# ::node	0.0.0.0.1.0.0.2.1	early	14-15
# ::node	0.0.0.0.1.1	rainbow	44-45
# ::node	0.0.0.0.1.2	trip-01	30-31
# ::node	0.0.0.0.1.2.0	80	15-16
# ::node	0.0.0.0.1.2.1	version	37-38
# ::node	0.0.0.0.1.2.1.0	offer-01	34-35
# ::node	0.0.0.0.2	she	42-43
# ::node	0.0.0.0.2.0	roll-01	40-41
# ::node	0.0.0.0.2.0.0	stone	41-42
# ::root	0	ghostly
(g / ghostly 
      :ARG1-of (d / dance-01 
            :ARG0-of (f / feel-01 
                  :op-of (a / and 
                        :op1 (p / pop) 
                        :op2 (e / end-01 
                              :ARG0 (a3 / affair 
                                    :ARG1-of (f2 / float-01 
                                          :ARG0 (s3 / storm) 
                                          :ARG2 (a2 / along) 
                                          :time (t2 / touch-01 
                                                :ARG1 (e2 / electronics) 
                                                :time (e3 / early)))) 
                              :ARG1 (r / rainbow) 
                              :time (t / trip-01 
                                    :ARG1 80 
                                    :topic (v / version 
                                          :ARG1-of (o / offer-01)))) 
                        :op3 (s / she 
                              :ARG0-of (r2 / roll-01 
                                    :ARG1 (s2 / stone)))))))

# ::snt gordon jones chairman of yorkshire water and of the water authorities association has pledged to shave off his beard as soon as the 10 water companies are floated, provincial building societys decision this week to shelve indefinitely its decision on whether to renounce its mutual status and float on the stock market will please andrew longhurst managing director of the rival cheltenham and
# ::tok gordon jones chairman of yorkshire water and of the water authorities association has pledged to shave off his beard as soon as the 10 water companies are floated , provincial building societys decision this week to shelve indefinitely its decision on whether to renounce its mutual status and float on the stock market will please andrew longhurst managing director of the rival cheltenham and
# ::alignments 63-64|0.1.0.0.0 61-62|0.1.0.0.0.0 58-59|0.0.0.0+0.0.0 57-58|0.1.0.0 54-55|0.1.0 52-53|0.1.1.0 51-52|0.1.1.0.0 48-49|0.1.1 47-48|0.1 46-47|0.0 45-46|0.0.1 43-44|0 39-40|0.1.0.1 37-38|0.1.0.1.0.1 34-35|0.1.0.1.0.0.0 33-34|0.1.0.1.0.0 32-33|0.1.0.1.0 30-31|0.1.0.1.0.2 29-30|0.1.0.1.0.2.0 27-28|0.1.0.1.0.3.0.1.0.1.0 25-26|0.1.0.1.0.3.0.1.0.1 24-25|0.1.0.1.0.3.0.1.0.1.1 23-24|0.1.0.1.0.3.0.1.0.0 20-21|0.1.0.1.0.3.0.1.2 16-17|0.1.0.1.0.3.0.1.1 15-16|0.1.0.1.0.3.0.1 13-14|0.1.0.1.0.3.0 11-12|0.1.0.1.0.3.0.2 10-11|0.1.0.1.0.3.0.2.0 9-10|0.1.0.1.0.3.0.2.1 6-7|0.1.0.1.0.3 5-6|0.1.0.1.0.3.0.0 2-3|0.1.0.1.0.3.0.1.0.2+0.1.0.1.0.3.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:44.004
# ::node	0	renounce-01	43-44
# ::node	0.0	status	46-47
# ::node	0.0.0	have-org-role-91	58-59
# ::node	0.0.0.0	director	58-59
# ::node	0.0.1	mutual	45-46
# ::node	0.1	and	47-48
# ::node	0.1.0	please-01	54-55
# ::node	0.1.0.0	manage-01	57-58
# ::node	0.1.0.0.0	and	63-64
# ::node	0.1.0.0.0.0	rival-01	61-62
# ::node	0.1.0.1	decide-01	39-40
# ::node	0.1.0.1.0	decide-01	32-33
# ::node	0.1.0.1.0.0	this	33-34
# ::node	0.1.0.1.0.0.0	week	34-35
# ::node	0.1.0.1.0.1	indefinite	37-38
# ::node	0.1.0.1.0.2	build-01	30-31
# ::node	0.1.0.1.0.2.0	province	29-30
# ::node	0.1.0.1.0.3	and	6-7
# ::node	0.1.0.1.0.3.0	pledge-01	13-14
# ::node	0.1.0.1.0.3.0.0	water	5-6
# ::node	0.1.0.1.0.3.0.1	shave-01	15-16
# ::node	0.1.0.1.0.3.0.1.0	have-org-role-91	2-3
# ::node	0.1.0.1.0.3.0.1.0.0	10	23-24
# ::node	0.1.0.1.0.3.0.1.0.1	company	25-26
# ::node	0.1.0.1.0.3.0.1.0.1.0	float-01	27-28
# ::node	0.1.0.1.0.3.0.1.0.1.1	water	24-25
# ::node	0.1.0.1.0.3.0.1.0.2	chairman	2-3
# ::node	0.1.0.1.0.3.0.1.1	off	16-17
# ::node	0.1.0.1.0.3.0.1.2	soon	20-21
# ::node	0.1.0.1.0.3.0.2	associate-01	11-12
# ::node	0.1.0.1.0.3.0.2.0	authority	10-11
# ::node	0.1.0.1.0.3.0.2.1	water	9-10
# ::node	0.1.1	float-01	48-49
# ::node	0.1.1.0	market	52-53
# ::node	0.1.1.0.0	stock	51-52
# ::root	0	renounce-01
# ::edge	and	op1	decide-01	0.1.0.1.0.3	0.1.0.1.0	
# ::edge	and	op1	renounce-01	0.1	0	
# ::edge	and	op1	rival-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	and	op2	float-01	0.1	0.1.1	
# ::edge	associate-01	ARG0	authority	0.1.0.1.0.3.0.2	0.1.0.1.0.3.0.2.0	
# ::edge	associate-01	ARG1	water	0.1.0.1.0.3.0.2	0.1.0.1.0.3.0.2.1	
# ::edge	build-01	ARG0	province	0.1.0.1.0.2	0.1.0.1.0.2.0	
# ::edge	build-01	ARG1	decide-01	0.1.0.1.0.2	0.1.0.1.0	
# ::edge	company	mod	water	0.1.0.1.0.3.0.1.0.1	0.1.0.1.0.3.0.1.0.1.1	
# ::edge	decide-01	ARG0	decide-01	0.1.0.1	0.1.0.1.0	
# ::edge	decide-01	ARG0	this	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	decide-01	ARG1	indefinite	0.1.0.1.0	0.1.0.1.0.1	
# ::edge	decide-01	ARG1	please-01	0.1.0.1	0.1.0	
# ::edge	float-01	ARG1	company	0.1.0.1.0.3.0.1.0.1.0	0.1.0.1.0.3.0.1.0.1	
# ::edge	float-01	ARG2	market	0.1.1	0.1.1.0	
# ::edge	have-org-role-91	ARG0	10	0.1.0.1.0.3.0.1.0	0.1.0.1.0.3.0.1.0.0	
# ::edge	have-org-role-91	ARG1	company	0.1.0.1.0.3.0.1.0	0.1.0.1.0.3.0.1.0.1	
# ::edge	have-org-role-91	ARG1	status	0.0.0	0.0	
# ::edge	have-org-role-91	ARG2	chairman	0.1.0.1.0.3.0.1.0	0.1.0.1.0.3.0.1.0.2	
# ::edge	have-org-role-91	ARG2	director	0.0.0	0.0.0.0	
# ::edge	manage-01	ARG1	and	0.1.0.0	0.1.0.0.0	
# ::edge	market	mod	stock	0.1.1.0	0.1.1.0.0	
# ::edge	please-01	ARG0	and	0.1.0	0.1	
# ::edge	please-01	ARG1	manage-01	0.1.0	0.1.0.0	
# ::edge	pledge-01	ARG0	and	0.1.0.1.0.3.0	0.1.0.1.0.3	
# ::edge	pledge-01	ARG1	water	0.1.0.1.0.3.0	0.1.0.1.0.3.0.0	
# ::edge	pledge-01	ARG2	shave-01	0.1.0.1.0.3.0	0.1.0.1.0.3.0.1	
# ::edge	pledge-01	time	associate-01	0.1.0.1.0.3.0	0.1.0.1.0.3.0.2	
# ::edge	renounce-01	ARG1	status	0	0.0	
# ::edge	shave-01	ARG1	have-org-role-91	0.1.0.1.0.3.0.1	0.1.0.1.0.3.0.1.0	
# ::edge	shave-01	direction	off	0.1.0.1.0.3.0.1	0.1.0.1.0.3.0.1.1	
# ::edge	shave-01	time	soon	0.1.0.1.0.3.0.1	0.1.0.1.0.3.0.1.2	
# ::edge	status	mod	mutual	0.0	0.0.1	
# ::edge	week	mod	this	0.1.0.1.0.0.0	0.1.0.1.0.0	
(r2 / renounce-01 
      :ARG1 (s2 / status 
            :ARG1-of (h / have-org-role-91 
                  :ARG2 (d / director)) 
            :mod (m3 / mutual)) 
      :op-of (a2 / and 
            :ARG0-of (p / please-01 
                  :ARG1 (m / manage-01 
                        :ARG1 (a / and 
                              :op1 (r / rival-01))) 
                  :ARG1-of (d2 / decide-01 
                        :ARG0 (d3 / decide-01 
                              :ARG0 (t / this 
                                    :mod-of (w / week)) 
                              :ARG1 (i / indefinite) 
                              :ARG1-of (b / build-01 
                                    :ARG0 (p2 / province)) 
                              :op-of (a5 / and 
                                    :ARG0-of (p3 / pledge-01 
                                          :ARG1 (w4 / water) 
                                          :ARG2 (s4 / shave-01 
                                                :ARG1 (h2 / have-org-role-91 
                                                      :ARG0 10 
                                                      :ARG1 (c / company 
                                                            :ARG1-of (f2 / float-01) 
                                                            :mod (w2 / water)) 
                                                      :ARG2 (c2 / chairman)) 
                                                :direction (o / off) 
                                                :time (s3 / soon)) 
                                          :time (a3 / associate-01 
                                                :ARG0 (a4 / authority) 
                                                :ARG1 (w3 / water))))))) 
            :op1 (f / float-01 
                  :ARG2 (m2 / market 
                        :mod (s / stock)))))

# ::snt unmanned they float about like driftwood secure in the knowledge that theyve already lost
# ::tok unmanned they float about like driftwood secure in the knowledge that theyve already lost
# ::alignments 13-14|0.0.0.0.0 12-13|0.0.0.0.0.0 9-10|0 6-7|0.0 2-3|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:44.030
# ::node	0	knowledge	9-10
# ::node	0.0	secure-02	6-7
# ::node	0.0.0	float-01	2-3
# ::node	0.0.0.0	they	1-2
# ::node	0.0.0.0.0	lose-02	13-14
# ::node	0.0.0.0.0.0	already	12-13
# ::root	0	knowledge
(k / knowledge 
      :ARG1-of (s / secure-02 
            :ARG1-of (f / float-01 
                  :ARG0 (t / they 
                        :ARG0-of (l / lose-02 
                              :time (a / already))))))

# ::snt the management offer is believed to involve ich changing its domicile and floating a small percentage of its shares on wall street where the groups fulton prebon operations have a strong reputation
# ::tok the management offer is believed to involve ich changing its domicile and floating a small percentage of its shares on wall street where the groups fulton prebon operations have a strong reputation
# ::alignments 31-32|0.0.1.0.0 30-31|0.0.1.0 27-28|0.0.2 24-25|0.0.0.0.0 21-22|0.0.1.1.0.1 20-21|0.0.1.1.0.1.0 18-19|0.0.1.1.0.0.1 15-16|0.0.1.1.0.0 14-15|0.0.1.1.0.0.0 12-13|0.0.1.1.0 11-12|0.0.1.1 8-9|0.0.1 6-7|0.0 4-5|0 2-3|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:44.236
# ::node	0	believe-01	4-5
# ::node	0.0	involve-01	6-7
# ::node	0.0.0	offer-01	2-3
# ::node	0.0.0.0	manage-01	1-2
# ::node	0.0.0.0.0	group	24-25
# ::node	0.0.1	change-01	8-9
# ::node	0.0.1.0	strong	30-31
# ::node	0.0.1.0.0	reputation	31-32
# ::node	0.0.1.1	and	11-12
# ::node	0.0.1.1.0	float-01	12-13
# ::node	0.0.1.1.0.0	percentage	15-16
# ::node	0.0.1.1.0.0.0	small	14-15
# ::node	0.0.1.1.0.0.1	share	18-19
# ::node	0.0.1.1.0.1	street	21-22
# ::node	0.0.1.1.0.1.0	wall	20-21
# ::node	0.0.2	operation	27-28
# ::root	0	believe-01
# ::edge	and	op1	change-01	0.0.1.1	0.0.1	
# ::edge	and	op2	float-01	0.0.1.1	0.0.1.1.0	
# ::edge	believe-01	ARG1	involve-01	0	0.0	
# ::edge	change-01	ARG1	strong	0.0.1	0.0.1.0	
# ::edge	float-01	ARG1	percentage	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	float-01	ARG2	street	0.0.1.1.0	0.0.1.1.0.1	
# ::edge	involve-01	ARG0	offer-01	0.0	0.0.0	
# ::edge	involve-01	ARG1	change-01	0.0	0.0.1	
# ::edge	involve-01	ARG2	operation	0.0	0.0.2	
# ::edge	manage-01	ARG1	group	0.0.0.0	0.0.0.0.0	
# ::edge	offer-01	ARG1	manage-01	0.0.0	0.0.0.0	
# ::edge	percentage	mod	small	0.0.1.1.0.0	0.0.1.1.0.0.0	
# ::edge	reputation	mod	strong	0.0.1.0.0	0.0.1.0	
# ::edge	share	part	percentage	0.0.1.1.0.0.1	0.0.1.1.0.0	
# ::edge	street	mod	wall	0.0.1.1.0.1	0.0.1.1.0.1.0	
(b / believe-01 
      :ARG1 (i / involve-01 
            :ARG0 (o2 / offer-01 
                  :ARG1 (m / manage-01 
                        :ARG1 (g / group))) 
            :ARG1 (c / change-01 
                  :ARG1 (s / strong 
                        :mod-of (r / reputation)) 
                  :op-of (a / and 
                        :op1 (f / float-01 
                              :ARG1 (p / percentage 
                                    :mod (s4 / small) 
                                    :part-of (s3 / share)) 
                              :ARG2 (s2 / street 
                                    :mod (w / wall))))) 
            :ARG2 (o / operation)))

# ::snt then very faintly a sound floated through the hot jasminescented air
# ::tok then very faintly a sound floated through the hot jasminescented air
# ::alignments 10-11|0.0.1 8-9|0.0.1.0 5-6|0.0 4-5|0 1-2|0.0.0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:44.254
# ::node	0	sound	4-5
# ::node	0.0	float-01	5-6
# ::node	0.0.0	then	0-1
# ::node	0.0.0.0	very	1-2
# ::node	0.0.1	air	10-11
# ::node	0.0.1.0	hot	8-9
# ::root	0	sound
(s / sound 
      :ARG0-of (f / float-01 
            :ARG1 (t / then 
                  :degree-of (v / very)) 
            :location (a / air 
                  :mod (h / hot))))

# ::snt they certainly made up for lost time 11 years on he is now the most social director in america one of the few who understand the use of an ensemble on film the strains of concord and discord which float around a bunch of people
# ::tok they certainly made up for lost time 11 years on he is now the most social director in america one of the few who understand the use of an ensemble on film the strains of concord and discord which float around a bunch of people
# ::alignments 42-43|0.4.0.1.0 40-41|0.4.0.1 39-40|0.4.0 36-37|0.4 33-34|0.4.1 31-32|0.2 26-27|0.1 24-25|0 22-23|0.3 18-19|0.4.0.0.1.0.0+0.4.0.0.1.0+0.4.0.0.1 16-17|0.4.0.0.2+0.4.0.0 15-16|0.4.2 14-15|0.4.2.0 12-13|0.4.0.0.3 10-11|0.0 8-9|0.4.0.0.0.1+0.4.0.0.0 7-8|0.4.0.0.0.0 6-7|0.4.3.1 5-6|0.4.3 1-2|0.1.0 0-1|0.4.3.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:45.315
# ::node	0	understand-01	24-25
# ::node	0.0	he	10-11
# ::node	0.1	use-01	26-27
# ::node	0.1.0	certain	1-2
# ::node	0.2	film	31-32
# ::node	0.3	few	22-23
# ::node	0.4	and	36-37
# ::node	0.4.0	float-01	39-40
# ::node	0.4.0.0	have-org-role-91	16-17
# ::node	0.4.0.0.0	temporal-quantity	8-9
# ::node	0.4.0.0.0.0	11	7-8
# ::node	0.4.0.0.0.1	year	8-9
# ::node	0.4.0.0.1	country	18-19
# ::node	0.4.0.0.1.0	name	18-19
# ::node	0.4.0.0.1.0.0	"America"	18-19
# ::node	0.4.0.0.2	director	16-17
# ::node	0.4.0.0.3	now	12-13
# ::node	0.4.0.1	around	40-41
# ::node	0.4.0.1.0	bunch	42-43
# ::node	0.4.1	strain-01	33-34
# ::node	0.4.2	society	15-16
# ::node	0.4.2.0	most	14-15
# ::node	0.4.3	lose-02	5-6
# ::node	0.4.3.0	they	0-1
# ::node	0.4.3.1	time	6-7
# ::root	0	understand-01
# ::edge	and	mod	society	0.4	0.4.2	
# ::edge	and	op1	lose-02	0.4	0.4.3	
# ::edge	and	op2	understand-01	0.4	0	
# ::edge	around	op1	bunch	0.4.0.1	0.4.0.1.0	
# ::edge	country	name	name	0.4.0.0.1	0.4.0.0.1.0	
# ::edge	float-01	ARG0	and	0.4.0	0.4	
# ::edge	float-01	ARG1	have-org-role-91	0.4.0	0.4.0.0	
# ::edge	float-01	ARG2	around	0.4.0	0.4.0.1	
# ::edge	have-org-role-91	ARG0	temporal-quantity	0.4.0.0	0.4.0.0.0	
# ::edge	have-org-role-91	ARG1	country	0.4.0.0	0.4.0.0.1	
# ::edge	have-org-role-91	ARG2	director	0.4.0.0	0.4.0.0.2	
# ::edge	have-org-role-91	time	now	0.4.0.0	0.4.0.0.3	
# ::edge	lose-02	ARG0	they	0.4.3	0.4.3.0	
# ::edge	lose-02	ARG1	time	0.4.3	0.4.3.1	
# ::edge	name	op1	"America"	0.4.0.0.1.0	0.4.0.0.1.0.0	
# ::edge	society	degree	most	0.4.2	0.4.2.0	
# ::edge	strain-01	ARG1	and	0.4.1	0.4	
# ::edge	temporal-quantity	quant	11	0.4.0.0.0	0.4.0.0.0.0	
# ::edge	temporal-quantity	unit	year	0.4.0.0.0	0.4.0.0.0.1	
# ::edge	understand-01	ARG0	he	0	0.0	
# ::edge	understand-01	ARG1	use-01	0	0.1	
# ::edge	understand-01	ARG2	film	0	0.2	
# ::edge	understand-01	mod	few	0	0.3	
# ::edge	use-01	ARG1	certain	0.1	0.1.0	
(u2 / understand-01 
      :ARG0 (h2 / he) 
      :ARG1 (u / use-01 
            :ARG1 (c2 / certain)) 
      :ARG2 (f2 / film) 
      :mod (f3 / few) 
      :op-of (a2 / and 
            :ARG0-of (f / float-01 
                  :ARG1 (h / have-org-role-91 
                        :ARG0 (t / temporal-quantity 
                              :quant 11 
                              :unit (y / year)) 
                        :ARG1 (c / country 
                              :name (n / name 
                                    :op1 "America")) 
                        :ARG2 (d / director) 
                        :time (n2 / now)) 
                  :ARG2 (a / around 
                        :op1 (b / bunch))) 
            :ARG1-of (s / strain-01) 
            :mod (s2 / society 
                  :degree (m / most)) 
            :op1 (l / lose-02 
                  :ARG0 (t3 / they) 
                  :ARG1 (t2 / time))))

# ::snt after you have looked for a long time at some set of opinions you have never looked closely at before which have done service for a very long period after all sorts of qualifications to them have floated up from those peculiar depths you are now plumbing you realise with what disconnected and halfconsidered fragments of thought many of your conversations on these matters have been conducted
# ::tok after you have looked for a long time at some set of opinions you have never looked closely at before which have done service for a very long period after all sorts of qualifications to them have floated up from those peculiar depths you are now plumbing you realise with what disconnected and halfconsidered fragments of thought many of your conversations on these matters have been conducted
# ::alignments 66-67|0.0.0 63-64|0.0.0.0.1.1.0.0 57-58|0.0.0.0.0.1 56-57|0.0.0.0.0 52-53|0.0.0.0 51-52|0.0.0.0.2 48-49|0 47-48|0.0 45-46|0.0.0.0.1.0.1.1 43-44|0.0.0.0.0.0 42-43|0.0.0.0.1.1 41-42|0.0.0.0.1.1.0 37-38|0.0.0.0.1 33-34|0.0.0.0.1.0.1 31-32|0.0.0.0.1.0 30-31|0.0.0.0.1.0.0 29-30|0.0.0.0.1.2 28-29|0.0.0.0.1.2.0 26-27|0.1 19-20|0.0.0.0.1.2.1.2 17-18|0.0.0.0.1.2.1.2.0 16-17|0.0.0.0.1.2.1 13-14|0.0.0.0.1.2.1.0 12-13|0.0.0.0.1.2.1.1 9-10|0.0.0.0.1.0.1.0 7-8|0.0.0.0.1.2.1.1.0.0.1 3-4|0.0.0.0.1.2.1.1.0.0 1-2|0.0.0.0.1.2.1.1.0.0.0 0-1|0.0.0.0.1.2.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:47.043
# ::node	0	realize-01	48-49
# ::node	0.0	you	47-48
# ::node	0.0.0	conduct-01	66-67
# ::node	0.0.0.0	and	52-53
# ::node	0.0.0.0.0	think-01	56-57
# ::node	0.0.0.0.0.0	you	43-44
# ::node	0.0.0.0.0.1	many	57-58
# ::node	0.0.0.0.1	float-01	37-38
# ::node	0.0.0.0.1.0	sort	31-32
# ::node	0.0.0.0.1.0.0	all	30-31
# ::node	0.0.0.0.1.0.1	qualify-02	33-34
# ::node	0.0.0.0.1.0.1.0	some	9-10
# ::node	0.0.0.0.1.0.1.1	now	45-46
# ::node	0.0.0.0.1.1	depth	42-43
# ::node	0.0.0.0.1.1.0	peculiar-41	41-42
# ::node	0.0.0.0.1.1.0.0	matter	63-64
# ::node	0.0.0.0.1.2	after	29-30
# ::node	0.0.0.0.1.2.0	period	28-29
# ::node	0.0.0.0.1.2.1	look-01	16-17
# ::node	0.0.0.0.1.2.1.0	you	13-14
# ::node	0.0.0.0.1.2.1.1	opine-01	12-13
# ::node	0.0.0.0.1.2.1.1.0	after	0-1
# ::node	0.0.0.0.1.2.1.1.0.0	look-01	3-4
# ::node	0.0.0.0.1.2.1.1.0.0.0	you	1-2
# ::node	0.0.0.0.1.2.1.1.0.0.1	time	7-8
# ::node	0.0.0.0.1.2.1.2	before	19-20
# ::node	0.0.0.0.1.2.1.2.0	close	17-18
# ::node	0.0.0.0.2	disconnect-01	51-52
# ::node	0.1	very	26-27
# ::root	0	realize-01
# ::edge	after	op1	float-01	0.0.0.0.1.2	0.0.0.0.1	
# ::edge	after	op1	look-01	0.0.0.0.1.2.1.1.0	0.0.0.0.1.2.1.1.0.0	
# ::edge	after	op2	opine-01	0.0.0.0.1.2.1.1.0	0.0.0.0.1.2.1.1	
# ::edge	and	op1	float-01	0.0.0.0	0.0.0.0.1	
# ::edge	and	op2	disconnect-01	0.0.0.0	0.0.0.0.2	
# ::edge	close	compared-to	before	0.0.0.0.1.2.1.2.0	0.0.0.0.1.2.1.2	
# ::edge	conduct-01	ARG0	you	0.0.0	0.0	
# ::edge	conduct-01	ARG1	and	0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	sort	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	float-01	ARG1	depth	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	look-01	ARG0	you	0.0.0.0.1.2.1	0.0.0.0.1.2.1.0	
# ::edge	look-01	ARG0	you	0.0.0.0.1.2.1.1.0.0	0.0.0.0.1.2.1.1.0.0.0	
# ::edge	look-01	ARG1	opine-01	0.0.0.0.1.2.1	0.0.0.0.1.2.1.1	
# ::edge	look-01	ARG1	time	0.0.0.0.1.2.1.1.0.0	0.0.0.0.1.2.1.1.0.0.1	
# ::edge	look-01	time	after	0.0.0.0.1.2.1	0.0.0.0.1.2	
# ::edge	look-01	time	before	0.0.0.0.1.2.1	0.0.0.0.1.2.1.2	
# ::edge	peculiar-41	ARG0	matter	0.0.0.0.1.1.0	0.0.0.0.1.1.0.0	
# ::edge	peculiar-41	ARG1	depth	0.0.0.0.1.1.0	0.0.0.0.1.1	
# ::edge	period	location	after	0.0.0.0.1.2.0	0.0.0.0.1.2	
# ::edge	qualify-02	ARG0	some	0.0.0.0.1.0.1	0.0.0.0.1.0.1.0	
# ::edge	qualify-02	ARG1	now	0.0.0.0.1.0.1	0.0.0.0.1.0.1.1	
# ::edge	qualify-02	mod	sort	0.0.0.0.1.0.1	0.0.0.0.1.0	
# ::edge	realize-01	ARG0	you	0	0.0	
# ::edge	realize-01	ARG1	very	0	0.1	
# ::edge	sort	mod	all	0.0.0.0.1.0	0.0.0.0.1.0.0	
# ::edge	think-01	ARG0	you	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	think-01	ARG1	and	0.0.0.0.0	0.0.0.0	
# ::edge	think-01	quant	many	0.0.0.0.0	0.0.0.0.0.1	
(r / realize-01 
      :ARG0 (y / you 
            :ARG0-of (c / conduct-01 
                  :ARG1 (a / and 
                        :ARG1-of (t / think-01 
                              :ARG0 (y2 / you) 
                              :quant (m2 / many)) 
                        :op1 (f / float-01 
                              :ARG0 (s / sort 
                                    :mod (a2 / all) 
                                    :mod-of (q / qualify-02 
                                          :ARG0 (s2 / some) 
                                          :ARG1 (n / now))) 
                              :ARG1 (d2 / depth 
                                    :ARG1-of (p / peculiar-41 
                                          :ARG0 (m / matter))) 
                              :op-of (a3 / after 
                                    :location-of (p2 / period) 
                                    :time-of (l / look-01 
                                          :ARG0 (y3 / you) 
                                          :ARG1 (o / opine-01 
                                                :op-of (a4 / after 
                                                      :op1 (l2 / look-01 
                                                            :ARG0 (y4 / you) 
                                                            :ARG1 (t2 / time)))) 
                                          :time (b / before 
                                                :compared-to-of (c2 / close))))) 
                        :op2 (d / disconnect-01)))) 
      :ARG1 (v / very))

# ::snt during an experiment the air in the cellar is compressed to 3 pounds per square inch about 21 kilonewtons per square metre and the table floats
# ::tok during an experiment the air in the cellar is compressed to 3 pounds per square inch about 21 kilonewtons per square metre and the table floats
# ::alignments 25-26|0.1 24-25|0.1.0 22-23|0 20-21|0.0.0 17-18|0.1.1.0 15-16|0.1.1.2.1+0.1.1.2 14-15|0.1.1.2.0 11-12|0.1.1.1 9-10|0.0 4-5|0.0.1 2-3|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:47.271
# ::node	0	and	22-23
# ::node	0.0	compress-01	9-10
# ::node	0.0.0	square	20-21
# ::node	0.0.1	air	4-5
# ::node	0.1	float-01	25-26
# ::node	0.1.0	table	24-25
# ::node	0.1.1	experiment-01	2-3
# ::node	0.1.1.0	21	17-18
# ::node	0.1.1.1	3	11-12
# ::node	0.1.1.2	distance-quantity	15-16
# ::node	0.1.1.2.0	square	14-15
# ::node	0.1.1.2.1	inch	15-16
# ::root	0	and
# ::edge	and	op1	compress-01	0	0.0	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	compress-01	ARG0	square	0.0	0.0.0	
# ::edge	compress-01	ARG1	air	0.0	0.0.1	
# ::edge	distance-quantity	mod	square	0.1.1.2	0.1.1.2.0	
# ::edge	distance-quantity	op1	experiment-01	0.1.1.2	0.1.1	
# ::edge	distance-quantity	unit	inch	0.1.1.2	0.1.1.2.1	
# ::edge	experiment-01	ARG0	21	0.1.1	0.1.1.0	
# ::edge	experiment-01	ARG1	3	0.1.1	0.1.1.1	
# ::edge	float-01	ARG0	table	0.1	0.1.0	
# ::edge	float-01	ARG1	experiment-01	0.1	0.1.1	
(a / and 
      :op1 (c / compress-01 
            :ARG0 (s / square) 
            :ARG1 (a2 / air)) 
      :op2 (f / float-01 
            :ARG0 (t / table) 
            :ARG1 (e / experiment-01 
                  :ARG0 21 
                  :ARG1 3 
                  :op-of (d / distance-quantity 
                        :mod (s2 / square) 
                        :unit (i / inch)))))

# ::snt french stock market analysts have been predicting keen demand ever since the first attempt to float ysl attracted a colossal 103 million applications for just 400000 shares
# ::tok french stock market analysts have been predicting keen demand ever since the first attempt to float ysl attracted a colossal 103 million applications for just 400000 shares
# ::alignments 26-27|0.0.1.0.1 25-26|0.1.0.2+0.1.0.1+0.1.0.0+0.1.0 24-25|0.0.1.0.1.0 22-23|0.0.1.0.0 17-18|0.0.1.0 15-16|0.0.1 13-14|0.0.1.1 10-11|0.2 9-10|0.2.0 8-9|0.1 7-8|0.1.1 6-7|0 3-4|0.0.0+0.0 2-3|0.0.0.0 1-2|0.0.0.0.0 0-1|0.0.2.0.0+0.0.2.0+0.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:47.638
# ::node	0	predict-01	6-7
# ::node	0.0	person	3-4
# ::node	0.0.0	analyze-01	3-4
# ::node	0.0.0.0	market	2-3
# ::node	0.0.0.0.0	stock	1-2
# ::node	0.0.1	float-01	15-16
# ::node	0.0.1.0	attract-01	17-18
# ::node	0.0.1.0.0	application	22-23
# ::node	0.0.1.0.1	share	26-27
# ::node	0.0.1.0.1.0	just	24-25
# ::node	0.0.1.1	attempt-01	13-14
# ::node	0.0.2	country	0-1
# ::node	0.0.2.0	name	0-1
# ::node	0.0.2.0.0	"France"	0-1
# ::node	0.1	demand-01	8-9
# ::node	0.1.0	date-entity	25-26
# ::node	0.1.0.0	0	25-26
# ::node	0.1.0.1	0	25-26
# ::node	0.1.0.2	40	25-26
# ::node	0.1.1	keen-41	7-8
# ::node	0.2	since	10-11
# ::node	0.2.0	ever	9-10
# ::root	0	predict-01
# ::edge	analyze-01	ARG0	person	0.0.0	0.0	
# ::edge	analyze-01	ARG1	market	0.0.0	0.0.0.0	
# ::edge	attempt-01	ARG1	float-01	0.0.1.1	0.0.1	
# ::edge	attract-01	ARG1	application	0.0.1.0	0.0.1.0.0	
# ::edge	attract-01	ARG2	share	0.0.1.0	0.0.1.0.1	
# ::edge	country	name	name	0.0.2	0.0.2.0	
# ::edge	date-entity	day	0	0.1.0	0.1.0.0	
# ::edge	date-entity	month	0	0.1.0	0.1.0.1	
# ::edge	date-entity	year	40	0.1.0	0.1.0.2	
# ::edge	demand-01	ARG1	date-entity	0.1	0.1.0	
# ::edge	float-01	ARG0	person	0.0.1	0.0	
# ::edge	float-01	ARG1	attract-01	0.0.1	0.0.1.0	
# ::edge	keen-41	ARG1	demand-01	0.1.1	0.1	
# ::edge	market	mod	stock	0.0.0.0	0.0.0.0.0	
# ::edge	name	op1	"France"	0.0.2.0	0.0.2.0.0	
# ::edge	person	mod	country	0.0	0.0.2	
# ::edge	predict-01	ARG0	person	0	0.0	
# ::edge	predict-01	ARG1	demand-01	0	0.1	
# ::edge	predict-01	time	since	0	0.2	
# ::edge	share	mod	just	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	since	time	ever	0.2	0.2.0	
(p / predict-01 
      :ARG0 (p2 / person 
            :ARG0-of (a4 / analyze-01 
                  :ARG1 (m / market 
                        :mod (s3 / stock))) 
            :ARG0-of (f / float-01 
                  :ARG1 (a2 / attract-01 
                        :ARG1 (a / application) 
                        :ARG2 (s / share 
                              :mod (j / just))) 
                  :ARG1-of (a3 / attempt-01)) 
            :mod (c / country 
                  :name (n / name 
                        :op1 "France"))) 
      :ARG1 (d2 / demand-01 
            :ARG1 (d / date-entity 
                  :day 0 
                  :month 0 
                  :year 40) 
            :ARG1-of (k / keen-41)) 
      :time (s2 / since 
            :time (e / ever)))

# ::snt dykes brim  with frogbit swallowtail butterflies are commonplace and suddenly as one crests a humpbacked bridge the huge shadow of a henharrier floats up over the immense levels of his huntinggrounds
# ::tok dykes brim with frogbit swallowtail butterflies are commonplace and suddenly as one crests a humpbacked bridge the huge shadow of a henharrier floats up over the immense levels of his huntinggrounds
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:47.639
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt floated at 115p clk shares were suspended at 43p
# ::tok floated at 115p clk shares were suspended at 43p
# ::alignments 6-7|0 4-5|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:47.666
# ::node	0	suspend-01	6-7
# ::node	0.0	share	4-5
# ::node	0.0.0	float-01	0-1
# ::root	0	suspend-01
# ::edge	float-01	ARG1	share	0.0.0	0.0	
# ::edge	suspend-01	ARG1	share	0	0.0	
(s / suspend-01 
      :ARG1 (s2 / share 
            :ARG1-of (f / float-01)))

# ::snt when british gas was floated three years ago before the october 1987 crash there were 4
# ::tok when british gas was floated three years ago before the october 1987 crash there were 4
# ::alignments 15-16|0.1.0.1 12-13|0.1.0 10-12|0.1.0.0.1+0.1.0.0.0+0.1.0.0 8-9|0.1 6-7|0.1.1+0.1.1.0 5-6|0.1.1.0.0 4-5|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:47.717
# ::node	0	float-01	4-5
# ::node	0.0	gas	2-3
# ::node	0.1	before	8-9
# ::node	0.1.0	crash-01	12-13
# ::node	0.1.0.0	date-entity	10-12
# ::node	0.1.0.0.0	10	10-12
# ::node	0.1.0.0.1	1987	10-12
# ::node	0.1.0.1	4	15-16
# ::node	0.1.1	year	6-7
# ::node	0.1.1.0	temporal-quantity	6-7
# ::node	0.1.1.0.0	3	5-6
# ::root	0	float-01
# ::edge	before	op1	crash-01	0.1	0.1.0	
# ::edge	crash-01	ARG0	date-entity	0.1.0	0.1.0.0	
# ::edge	crash-01	ARG1	4	0.1.0	0.1.0.1	
# ::edge	date-entity	month	10	0.1.0.0	0.1.0.0.0	
# ::edge	date-entity	year	1987	0.1.0.0	0.1.0.0.1	
# ::edge	float-01	ARG1	gas	0	0.0	
# ::edge	float-01	time	before	0	0.1	
# ::edge	temporal-quantity	quant	3	0.1.1.0	0.1.1.0.0	
# ::edge	temporal-quantity	unit	year	0.1.1.0	0.1.1	
# ::edge	year	time	before	0.1.1	0.1	
(f / float-01 
      :ARG1 (g / gas) 
      :time (b / before 
            :op1 (c / crash-01 
                  :ARG0 (d / date-entity 
                        :month 10 
                        :year 1987) 
                  :ARG1 4) 
            :time-of (y / year 
                  :unit-of (t / temporal-quantity 
                        :quant 3))))

# ::snt unit group which obtained the distinction of being the first company to float on the third market is about to make an important diversification into the engineering sector
# ::tok unit group which obtained the distinction of being the first company to float on the third market is about to make an important diversification into the engineering sector
# ::alignments 27-28|0.1.0 26-27|0.1 22-23|0.0.0.0 16-17|0.0.0.1 12-13|0.0.0 10-11|0.0 5-6|0 3-4|0.2 1-2|0.2.0 0-1|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:47.777
# ::node	0	distinguish-01	5-6
# ::node	0.0	company	10-11
# ::node	0.0.0	float-01	12-13
# ::node	0.0.0.0	important	22-23
# ::node	0.0.0.1	market	16-17
# ::node	0.1	engineer-01	26-27
# ::node	0.1.0	sector	27-28
# ::node	0.2	obtain-01	3-4
# ::node	0.2.0	group	1-2
# ::node	0.2.0.0	unit	0-1
# ::root	0	distinguish-01
# ::edge	distinguish-01	ARG1	company	0	0.0	
# ::edge	engineer-01	ARG1	distinguish-01	0.1	0	
# ::edge	float-01	ARG0	company	0.0.0	0.0	
# ::edge	float-01	ARG1	important	0.0.0	0.0.0.0	
# ::edge	float-01	ARG2	market	0.0.0	0.0.0.1	
# ::edge	group	mod	unit	0.2.0	0.2.0.0	
# ::edge	obtain-01	ARG0	group	0.2	0.2.0	
# ::edge	obtain-01	ARG1	distinguish-01	0.2	0	
# ::edge	sector	mod	engineer-01	0.1.0	0.1	
(d / distinguish-01 
      :ARG1 (c / company 
            :ARG0-of (f / float-01 
                  :ARG1 (i / important) 
                  :ARG2 (m / market))) 
      :ARG1-of (e / engineer-01 
            :mod-of (s / sector)) 
      :ARG1-of (o / obtain-01 
            :ARG0 (g / group 
                  :mod (u / unit))))

# ::snt last month at the height of terrorist violence in colombia he also floated a compromise plan between the us and the cartel leaders under which the drug lords would stand trial in the us but return to colombia to serve their sentences
# ::tok last month at the height of terrorist violence in colombia he also floated a compromise plan between the us and the cartel leaders under which the drug lords would stand trial in the us but return to colombia to serve their sentences
# ::alignments 41-42|0.1.3.0.1 39-40|0.1.3.0.1.1 34-35|0 30-31|0.1.3.0.1.0 27-28|0.1.1.0.0 26-27|0.1.1.0.0.0 22-23|0.1.3.0.0+0.1.3.0 21-22|0.1.3.0.0.0 19-20|0.1.3 16-17|0.1.1.1 15-16|0.1.1 14-15|0.1.1.0 12-13|0.1 11-12|0.1.2 10-11|0.1.0 7-8|0.1.0.0 6-7|0.1.0.0.0 1-2|0.1.1.0.1.0+0.1.1.0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:48.200
# ::node	0	contrast-01	34-35
# ::node	0.0	last	0-1
# ::node	0.1	float-01	12-13
# ::node	0.1.0	he	10-11
# ::node	0.1.0.0	violence	7-8
# ::node	0.1.0.0.0	terrorist	6-7
# ::node	0.1.1	plan-01	15-16
# ::node	0.1.1.0	compromise-01	14-15
# ::node	0.1.1.0.0	lord	27-28
# ::node	0.1.1.0.0.0	drug	26-27
# ::node	0.1.1.0.1	temporal-quantity	1-2
# ::node	0.1.1.0.1.0	month	1-2
# ::node	0.1.1.1	between	16-17
# ::node	0.1.2	also	11-12
# ::node	0.1.3	and	19-20
# ::node	0.1.3.0	person	22-23
# ::node	0.1.3.0.0	lead-02	22-23
# ::node	0.1.3.0.0.0	cartel	21-22
# ::node	0.1.3.0.1	sentence-01	41-42
# ::node	0.1.3.0.1.0	trial	30-31
# ::node	0.1.3.0.1.1	serve-01	39-40
# ::root	0	contrast-01
# ::edge	and	op1	float-01	0.1.3	0.1	
# ::edge	and	op2	person	0.1.3	0.1.3.0	
# ::edge	compromise-01	ARG0	lord	0.1.1.0	0.1.1.0.0	
# ::edge	compromise-01	ARG1	temporal-quantity	0.1.1.0	0.1.1.0.1	
# ::edge	contrast-01	ARG1	last	0	0.0	
# ::edge	contrast-01	ARG2	float-01	0	0.1	
# ::edge	float-01	ARG0	he	0.1	0.1.0	
# ::edge	float-01	ARG1	plan-01	0.1	0.1.1	
# ::edge	float-01	mod	also	0.1	0.1.2	
# ::edge	lead-02	ARG0	person	0.1.3.0.0	0.1.3.0	
# ::edge	lead-02	ARG1	cartel	0.1.3.0.0	0.1.3.0.0.0	
# ::edge	lord	mod	drug	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	plan-01	ARG1	compromise-01	0.1.1	0.1.1.0	
# ::edge	plan-01	location	between	0.1.1	0.1.1.1	
# ::edge	sentence-01	ARG0	trial	0.1.3.0.1	0.1.3.0.1.0	
# ::edge	sentence-01	ARG1	person	0.1.3.0.1	0.1.3.0	
# ::edge	serve-01	ARG1	sentence-01	0.1.3.0.1.1	0.1.3.0.1	
# ::edge	temporal-quantity	unit	month	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	violence	mod	terrorist	0.1.0.0	0.1.0.0.0	
# ::edge	violence	poss	he	0.1.0.0	0.1.0	
(c / contrast-01 
      :ARG1 (l3 / last) 
      :ARG2 (f / float-01 
            :ARG0 (h / he 
                  :poss-of (v / violence 
                        :mod (t2 / terrorist))) 
            :ARG1 (p2 / plan-01 
                  :ARG1 (c3 / compromise-01 
                        :ARG0 (l / lord 
                              :mod (d / drug)) 
                        :ARG1 (t3 / temporal-quantity 
                              :unit (m / month))) 
                  :location (b / between)) 
            :mod (a2 / also) 
            :op-of (a / and 
                  :op1 (p / person 
                        :ARG0-of (l2 / lead-02 
                              :ARG1 (c2 / cartel)) 
                        :ARG1-of (s / sentence-01 
                              :ARG0 (t / trial) 
                              :ARG1-of (s2 / serve-01))))))

# ::snt there they were innocently acting for the company assuming that the utility would be floated just like any other privatisation issue and all of a sudden there they are in a bid battle except that the seller has its own merchant banks and will not recognise the expensive preliminary slog undertaken by warburgs
# ::tok there they were innocently acting for the company assuming that the utility would be floated just like any other privatisation issue and all of a sudden there they are in a bid battle except that the seller has its own merchant banks and will not recognise the expensive preliminary slog undertaken by warburgs
# ::alignments 50-51|0.1 48-49|0.0.1 47-48|0.0.3.0.0.1.0 45-46|0 42-43|0.2 41-42|0.0.3 40-41|0.0.2+0.0.2.0 36-37|0.0 33-34|0.0.3.0.0.1 32-33|0.0.3.0.0 31-32|0.0.3.0.0.0 27-28|0.0.3.0 25-26|0.0.0 22-23|0.2.0.0.0.0.0.0 21-22|0.2.0 20-21|0.2.0.1.1 18-19|0.2.0.1.1.1 17-18|0.2.0.1.1.0 15-16|0.2.0.1.2 14-15|0.2.0.1 11-12|0.2.0.1.0 8-9|0.2.0.0 7-8|0.2.0.0.0 4-5|0.2.0.0.0.0 1-2|0.2.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:49.427
# ::node	0	recognize-02	45-46
# ::node	0.0	sell-01	36-37
# ::node	0.0.0	sudden	25-26
# ::node	0.0.1	preliminary	48-49
# ::node	0.0.2	merchandise-01	40-41
# ::node	0.0.2.0	person	40-41
# ::node	0.0.3	bank	41-42
# ::node	0.0.3.0	they	27-28
# ::node	0.0.3.0.0	battle-01	32-33
# ::node	0.0.3.0.0.0	bid-01	31-32
# ::node	0.0.3.0.0.1	except-00	33-34
# ::node	0.0.3.0.0.1.0	expensive	47-48
# ::node	0.1	undertake-01	50-51
# ::node	0.2	and	42-43
# ::node	0.2.0	and	21-22
# ::node	0.2.0.0	assume-02	8-9
# ::node	0.2.0.0.0	company	7-8
# ::node	0.2.0.0.0.0	act-01	4-5
# ::node	0.2.0.0.0.0.0	they	1-2
# ::node	0.2.0.0.0.0.0.0	all	22-23
# ::node	0.2.0.1	float-01	14-15
# ::node	0.2.0.1.0	utility	11-12
# ::node	0.2.0.1.1	issue	20-21
# ::node	0.2.0.1.1.0	any	17-18
# ::node	0.2.0.1.1.1	other	18-19
# ::node	0.2.0.1.2	just	15-16
# ::root	0	recognize-02
# ::edge	act-01	ARG0	they	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	act-01	ARG1	company	0.2.0.0.0.0	0.2.0.0.0	
# ::edge	and	op1	and	0.2	0.2.0	
# ::edge	and	op1	assume-02	0.2.0	0.2.0.0	
# ::edge	and	op2	float-01	0.2.0	0.2.0.1	
# ::edge	and	op2	recognize-02	0.2	0	
# ::edge	assume-02	ARG1	company	0.2.0.0	0.2.0.0.0	
# ::edge	bank	poss	sell-01	0.0.3	0.0	
# ::edge	bank	poss	they	0.0.3	0.0.3.0	
# ::edge	battle-01	ARG0	they	0.0.3.0.0	0.0.3.0	
# ::edge	battle-01	ARG1	bid-01	0.0.3.0.0	0.0.3.0.0.0	
# ::edge	battle-01	time	except-00	0.0.3.0.0	0.0.3.0.0.1	
# ::edge	except-00	ARG1	expensive	0.0.3.0.0.1	0.0.3.0.0.1.0	
# ::edge	float-01	ARG1	utility	0.2.0.1	0.2.0.1.0	
# ::edge	float-01	ARG2	issue	0.2.0.1	0.2.0.1.1	
# ::edge	float-01	mod	just	0.2.0.1	0.2.0.1.2	
# ::edge	issue	mod	any	0.2.0.1.1	0.2.0.1.1.0	
# ::edge	issue	mod	other	0.2.0.1.1	0.2.0.1.1.1	
# ::edge	merchandise-01	ARG0	person	0.0.2	0.0.2.0	
# ::edge	merchandise-01	ARG1	sell-01	0.0.2	0.0	
# ::edge	recognize-02	ARG0	sell-01	0	0.0	
# ::edge	recognize-02	ARG1	undertake-01	0	0.1	
# ::edge	sell-01	ARG0	sudden	0.0	0.0.0	
# ::edge	sell-01	ARG1	preliminary	0.0	0.0.1	
# ::edge	they	quant	all	0.2.0.0.0.0.0	0.2.0.0.0.0.0.0	
(r / recognize-02 
      :ARG0 (s / sell-01 
            :ARG0 (s2 / sudden) 
            :ARG1 (p / preliminary) 
            :ARG1-of (m / merchandise-01 
                  :ARG0 (p2 / person)) 
            :poss-of (b / bank 
                  :poss (t / they 
                        :ARG0-of (b2 / battle-01 
                              :ARG1 (b3 / bid-01) 
                              :time (e2 / except-00 
                                    :ARG1 (e / expensive)))))) 
      :ARG1 (u / undertake-01) 
      :op-of (a / and 
            :op1 (a3 / and 
                  :op1 (a5 / assume-02 
                        :ARG1 (c / company 
                              :ARG1-of (a6 / act-01 
                                    :ARG0 (t2 / they 
                                          :quant (a2 / all))))) 
                  :op2 (f / float-01 
                        :ARG1 (u2 / utility) 
                        :ARG2 (i / issue 
                              :mod (a4 / any) 
                              :mod (o / other)) 
                        :mod (j / just)))))

# ::snt but it is in the employees that parker places his faith this is a peopleintensive business he proclaims and points out that 77 of the workforce bought shares when the firm was floated in september 1989 and that 75 still hold them
# ::tok but it is in the employees that parker places his faith this is a peopleintensive business he proclaims and points out that 77 of the workforce bought shares when the firm was floated in september 1989 and that 75 still hold them
# ::alignments 39-40|0.2.1.0.0.1.0.0 38-39|0.2.1.0.0.2.1 36-37|0.2.1.0.0.1 34-36|0.2.1.0.0.1.0.2.1+0.2.1.0.0.1.0.2.0+0.2.1.0.0.1.0.2 32-33|0.2.1.0.0.1.0 30-31|0.2.1.0.0.1.0.1 27-28|0.2.1.0.0.0 26-27|0.2.1.0.0 25-26|0.2.1.0.0.2 22-23|0.0 19-20|0.2.1 18-19|0.2 16-17|0.2.1.0 15-16|0.2.0 11-12|0.2.0.0 10-11|0.1.0 8-9|0.1 5-6|0.2.1.0.0.2.0.0+0.2.1.0.0.2.0 1-2|0.2.1.0.0.2.0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:50.358
# ::node	0	contrast-01	0-1
# ::node	0.0	77	22-23
# ::node	0.1	place	8-9
# ::node	0.1.0	faith	10-11
# ::node	0.2	and	18-19
# ::node	0.2.0	business	15-16
# ::node	0.2.0.0	this	11-12
# ::node	0.2.1	point	19-20
# ::node	0.2.1.0	he	16-17
# ::node	0.2.1.0.0	buy-01	26-27
# ::node	0.2.1.0.0.0	share	27-28
# ::node	0.2.1.0.0.1	and	36-37
# ::node	0.2.1.0.0.1.0	float-01	32-33
# ::node	0.2.1.0.0.1.0.0	still	39-40
# ::node	0.2.1.0.0.1.0.1	firm	30-31
# ::node	0.2.1.0.0.1.0.2	date-entity	34-36
# ::node	0.2.1.0.0.1.0.2.0	9	34-36
# ::node	0.2.1.0.0.1.0.2.1	1989	34-36
# ::node	0.2.1.0.0.2	work-01	25-26
# ::node	0.2.1.0.0.2.0	person	5-6
# ::node	0.2.1.0.0.2.0.0	employ-01	5-6
# ::node	0.2.1.0.0.2.0.0.0	it	1-2
# ::node	0.2.1.0.0.2.1	75	38-39
# ::root	0	contrast-01
# ::edge	and	op1	business	0.2	0.2.0	
# ::edge	and	op1	buy-01	0.2.1.0.0.1	0.2.1.0.0	
# ::edge	and	op2	float-01	0.2.1.0.0.1	0.2.1.0.0.1.0	
# ::edge	and	op2	point	0.2	0.2.1	
# ::edge	business	domain	this	0.2.0	0.2.0.0	
# ::edge	buy-01	ARG0	he	0.2.1.0.0	0.2.1.0	
# ::edge	buy-01	ARG1	share	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	buy-01	time	work-01	0.2.1.0.0	0.2.1.0.0.2	
# ::edge	contrast-01	ARG0	77	0	0.0	
# ::edge	contrast-01	ARG1	place	0	0.1	
# ::edge	contrast-01	ARG2	and	0	0.2	
# ::edge	date-entity	month	9	0.2.1.0.0.1.0.2	0.2.1.0.0.1.0.2.0	
# ::edge	date-entity	year	1989	0.2.1.0.0.1.0.2	0.2.1.0.0.1.0.2.1	
# ::edge	employ-01	ARG0	it	0.2.1.0.0.2.0.0	0.2.1.0.0.2.0.0.0	
# ::edge	employ-01	ARG1	person	0.2.1.0.0.2.0.0	0.2.1.0.0.2.0	
# ::edge	float-01	ARG0	still	0.2.1.0.0.1.0	0.2.1.0.0.1.0.0	
# ::edge	float-01	ARG1	firm	0.2.1.0.0.1.0	0.2.1.0.0.1.0.1	
# ::edge	float-01	time	date-entity	0.2.1.0.0.1.0	0.2.1.0.0.1.0.2	
# ::edge	place	part	faith	0.1	0.1.0	
# ::edge	point	domain	he	0.2.1	0.2.1.0	
# ::edge	work-01	ARG0	person	0.2.1.0.0.2	0.2.1.0.0.2.0	
# ::edge	work-01	ARG1	75	0.2.1.0.0.2	0.2.1.0.0.2.1	
(c / contrast-01 
      :ARG0 77 
      :ARG1 (p2 / place 
            :part (f3 / faith)) 
      :ARG2 (a2 / and 
            :op1 (b2 / business 
                  :domain (t / this)) 
            :op2 (p / point 
                  :domain (h / he 
                        :ARG0-of (b / buy-01 
                              :ARG1 (s2 / share) 
                              :op-of (a / and 
                                    :op1 (f / float-01 
                                          :ARG0 (s / still) 
                                          :ARG1 (f2 / firm) 
                                          :time (d / date-entity 
                                                :month 9 
                                                :year 1989))) 
                              :time (w / work-01 
                                    :ARG0 (p3 / person 
                                          :ARG1-of (e / employ-01 
                                                :ARG0 (i / it))) 
                                    :ARG1 75))))))

# ::snt   the welsh development agency yesterday denied that a management buyout plan floated by two senior executives who wanted to take over the agencys functions in west wales was a precursor to privatisation
# ::tok the welsh development agency yesterday denied that a management buyout plan floated by two senior executives who wanted to take over the agencys functions in west wales was a precursor to privatisation
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:50.359
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt many people had raw sewage floating into their homes because floodwaters got into the sewerage system
# ::tok many people had raw sewage floating into their homes because floodwaters got into the sewerage system
# ::alignments 15-16|0.0 9-10|0 8-9|0.1.1 5-6|0.1 4-5|0.1.0 3-4|0.1.0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:50.427
# ::node	0	cause-01	9-10
# ::node	0.0	system	15-16
# ::node	0.1	float-01	5-6
# ::node	0.1.0	sewage	4-5
# ::node	0.1.0.0	raw	3-4
# ::node	0.1.1	home	8-9
# ::node	0.2	many	0-1
# ::root	0	cause-01
# ::edge	cause-01	ARG0	system	0	0.0	
# ::edge	cause-01	ARG1	float-01	0	0.1	
# ::edge	cause-01	ARG2	many	0	0.2	
# ::edge	float-01	ARG1	sewage	0.1	0.1.0	
# ::edge	float-01	medium	home	0.1	0.1.1	
# ::edge	sewage	mod	raw	0.1.0	0.1.0.0	
(c / cause-01 
      :ARG0 (s / system) 
      :ARG1 (f / float-01 
            :ARG1 (s2 / sewage 
                  :mod (r / raw)) 
            :medium (h / home)) 
      :ARG2 (m / many))

# ::snt provincial building society has indefinitely shelved any immediate plans to convert to a company and float on the stock market
# ::tok provincial building society has indefinitely shelved any immediate plans to convert to a company and float on the stock market
# ::alignments 19-20|0.2.0.0 18-19|0.2.0.0.0 15-16|0.2.0 14-15|0.2 13-14|0.1.1.0 10-11|0.1.1 8-9|0.1 7-8|0.1.0 6-7|0.1.2 5-6|0 4-5|0.3 2-3|0.0 1-2|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:50.527
# ::node	0	shelve-01	5-6
# ::node	0.0	society	2-3
# ::node	0.0.0	build-01	1-2
# ::node	0.0.0.0	province	0-1
# ::node	0.1	plan-01	8-9
# ::node	0.1.0	immediate	7-8
# ::node	0.1.1	convert-01	10-11
# ::node	0.1.1.0	company	13-14
# ::node	0.1.2	any	6-7
# ::node	0.2	and	14-15
# ::node	0.2.0	float-01	15-16
# ::node	0.2.0.0	market	19-20
# ::node	0.2.0.0.0	stock	18-19
# ::node	0.3	indefinite	4-5
# ::root	0	shelve-01
# ::edge	and	op1	float-01	0.2	0.2.0	
# ::edge	build-01	ARG0	society	0.0.0	0.0	
# ::edge	build-01	ARG1	province	0.0.0	0.0.0.0	
# ::edge	convert-01	ARG2	company	0.1.1	0.1.1.0	
# ::edge	float-01	ARG2	market	0.2.0	0.2.0.0	
# ::edge	market	mod	stock	0.2.0.0	0.2.0.0.0	
# ::edge	plan-01	ARG0	immediate	0.1	0.1.0	
# ::edge	plan-01	ARG1	convert-01	0.1	0.1.1	
# ::edge	plan-01	mod	any	0.1	0.1.2	
# ::edge	shelve-01	ARG0	society	0	0.0	
# ::edge	shelve-01	ARG1	plan-01	0	0.1	
# ::edge	shelve-01	ARG2	and	0	0.2	
# ::edge	shelve-01	manner	indefinite	0	0.3	
(s2 / shelve-01 
      :ARG0 (s3 / society 
            :ARG0-of (b / build-01 
                  :ARG1 (p2 / province))) 
      :ARG1 (p / plan-01 
            :ARG0 (i / immediate) 
            :ARG1 (c2 / convert-01 
                  :ARG2 (c / company)) 
            :mod (a2 / any)) 
      :ARG2 (a / and 
            :op1 (f / float-01 
                  :ARG2 (m / market 
                        :mod (s / stock)))) 
      :manner (i2 / indefinite))

# ::snt 5billion to help cover decommissioning costs after the industry is floated will be inadequate
# ::tok 5billion to help cover decommissioning costs after the industry is floated will be inadequate
# ::alignments 13-14|0.1.1.0.0+0.1.1.0 10-11|0.1.0 8-9|0.1.0.0 6-7|0.1 5-6|0 4-5|0.0 2-3|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:50.551
# ::node	0	cost-01	5-6
# ::node	0.0	decommission-01	4-5
# ::node	0.1	after	6-7
# ::node	0.1.0	float-01	10-11
# ::node	0.1.0.0	industry	8-9
# ::node	0.1.1	help-01	2-3
# ::node	0.1.1.0	adequate	13-14
# ::node	0.1.1.0.0	-	13-14
# ::root	0	cost-01
# ::edge	adequate	polarity	-	0.1.1.0	0.1.1.0.0	
# ::edge	after	op1	float-01	0.1	0.1.0	
# ::edge	cost-01	ARG1	decommission-01	0	0.0	
# ::edge	cost-01	time	after	0	0.1	
# ::edge	float-01	ARG1	industry	0.1.0	0.1.0.0	
# ::edge	help-01	ARG1	adequate	0.1.1	0.1.1.0	
# ::edge	help-01	time	after	0.1.1	0.1	
(c / cost-01 
      :ARG1 (d / decommission-01) 
      :time (a2 / after 
            :op1 (f / float-01 
                  :ARG1 (i / industry)) 
            :time-of (h / help-01 
                  :ARG1 (a / adequate 
                        :polarity -))))

# ::snt 5p helped ironically by firmer crude oil prices and next months share bonus for shareholders who have stayed with the issue since it was floated three years ago
# ::tok 5p helped ironically by firmer crude oil prices and next months share bonus for shareholders who have stayed with the issue since it was floated three years ago
# ::alignments 26-27|0.0.0.0.0+0.0.0.0 25-26|0.0.0 24-25|0.0.1.0 22-23|0.0.1.0.0 21-22|0.0.1 20-21|0.2.0.0 17-18|0.2.0 12-13|0.2 11-12|0.2.1 10-11|0.2.1.0.0+0.2.1.0 9-10|0.2.3 8-9|0 7-8|0.1 6-7|0.1.0 5-6|0.2.2 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:50.814
# ::node	0	and	8-9
# ::node	0.0	help-01	1-2
# ::node	0.0.0	3	25-26
# ::node	0.0.0.0	temporal-quantity	26-27
# ::node	0.0.0.0.0	year	26-27
# ::node	0.0.1	since	21-22
# ::node	0.0.1.0	float-01	24-25
# ::node	0.0.1.0.0	it	22-23
# ::node	0.1	price-01	7-8
# ::node	0.1.0	oil	6-7
# ::node	0.2	bonus	12-13
# ::node	0.2.0	stay-01	17-18
# ::node	0.2.0.0	issue	20-21
# ::node	0.2.1	share-01	11-12
# ::node	0.2.1.0	temporal-quantity	10-11
# ::node	0.2.1.0.0	month	10-11
# ::node	0.2.2	crude	5-6
# ::node	0.2.3	next	9-10
# ::root	0	and
# ::edge	and	op1	price-01	0	0.1	
# ::edge	and	op2	bonus	0	0.2	
# ::edge	bonus	mod	crude	0.2	0.2.2	
# ::edge	bonus	mod	next	0.2	0.2.3	
# ::edge	float-01	ARG1	it	0.0.1.0	0.0.1.0.0	
# ::edge	help-01	ARG0	3	0.0	0.0.0	
# ::edge	help-01	ARG1	and	0.0	0	
# ::edge	help-01	time	since	0.0	0.0.1	
# ::edge	price-01	ARG1	oil	0.1	0.1.0	
# ::edge	share-01	ARG0	temporal-quantity	0.2.1	0.2.1.0	
# ::edge	share-01	ARG1	bonus	0.2.1	0.2	
# ::edge	since	op1	float-01	0.0.1	0.0.1.0	
# ::edge	stay-01	ARG0	bonus	0.2.0	0.2	
# ::edge	stay-01	ARG1	issue	0.2.0	0.2.0.0	
# ::edge	temporal-quantity	quant	3	0.0.0.0	0.0.0	
# ::edge	temporal-quantity	unit	month	0.2.1.0	0.2.1.0.0	
# ::edge	temporal-quantity	unit	year	0.0.0.0	0.0.0.0.0	
(a / and 
      :ARG1-of (h / help-01 
            :ARG0 (3 / 3 
                  :quant-of (t / temporal-quantity 
                        :unit (y / year))) 
            :time (s / since 
                  :op1 (f / float-01 
                        :ARG1 (i / it)))) 
      :op1 (p / price-01 
            :ARG1 (o / oil)) 
      :op2 (b / bonus 
            :ARG0-of (s2 / stay-01 
                  :ARG1 (i2 / issue)) 
            :ARG1-of (s3 / share-01 
                  :ARG0 (t2 / temporal-quantity 
                        :unit (m / month))) 
            :mod (c / crude) 
            :mod (n / next)))

# ::snt it is expected the company floated would be the enlarged group coatings which mr youngman said could include any business in the orkem group that is involved in surface coatings
# ::tok it is expected the company floated would be the enlarged group coatings which mr youngman said could include any business in the orkem group that is involved in surface coatings
# ::alignments 28-29|0.0.1.0.1.1 26-27|0.0.1.0 23-24|0.0.1.0.0 19-20|0.0.1 18-19|0.0.1.1 17-18|0.0 16-17|0.0.2 15-16|0 10-11|0.0.0 5-6|0.0.1.0.1 4-5|0.0.1.0.1.0 2-3|0.0.1.0.1.2 0-1|0.0.1.0.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:51.091
# ::node	0	say-01	15-16
# ::node	0.0	include-01	17-18
# ::node	0.0.0	group	10-11
# ::node	0.0.1	business	19-20
# ::node	0.0.1.0	involve-01	26-27
# ::node	0.0.1.0.0	group	23-24
# ::node	0.0.1.0.1	float-01	5-6
# ::node	0.0.1.0.1.0	company	4-5
# ::node	0.0.1.0.1.1	surface	28-29
# ::node	0.0.1.0.1.2	expect-01	2-3
# ::node	0.0.1.0.1.2.0	it	0-1
# ::node	0.0.1.1	any	18-19
# ::node	0.0.2	possible	16-17
# ::root	0	say-01
# ::edge	business	mod	any	0.0.1	0.0.1.1	
# ::edge	expect-01	ARG0	it	0.0.1.0.1.2	0.0.1.0.1.2.0	
# ::edge	expect-01	ARG1	float-01	0.0.1.0.1.2	0.0.1.0.1	
# ::edge	float-01	ARG0	company	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	float-01	ARG1	surface	0.0.1.0.1	0.0.1.0.1.1	
# ::edge	float-01	ARG2	involve-01	0.0.1.0.1	0.0.1.0	
# ::edge	include-01	ARG0	group	0.0	0.0.0	
# ::edge	include-01	ARG1	business	0.0	0.0.1	
# ::edge	involve-01	ARG0	business	0.0.1.0	0.0.1	
# ::edge	involve-01	ARG1	group	0.0.1.0	0.0.1.0.0	
# ::edge	possible	domain	include-01	0.0.2	0.0	
# ::edge	say-01	ARG1	include-01	0	0.0	
(s2 / say-01 
      :ARG1 (i2 / include-01 
            :ARG0 (g2 / group) 
            :ARG1 (b / business 
                  :ARG0-of (i / involve-01 
                        :ARG1 (g / group) 
                        :ARG2-of (f / float-01 
                              :ARG0 (c / company) 
                              :ARG1 (s / surface) 
                              :ARG1-of (e / expect-01 
                                    :ARG0 (i3 / it)))) 
                  :mod (a / any)) 
            :domain-of (p / possible)))

# ::snt float out
# ::tok float out
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:51.094
# ::node	0	float-01	0-1
# ::root	0	float-01
(f / float-01)

# ::snt she felt cold all over she said was it because the owls hooting had come after the sound of the chopper had died away thus showing the criminal uncaught and triumphant or was it as the gullible tilda was only too prone to believe because the bad karma of that evil woman mrs hyde in the gardens had floated up to her in her perch above the trees and told her of the approaching crime
# ::tok she felt cold all over she said was it because the owls hooting had come after the sound of the chopper had died away thus showing the criminal uncaught and triumphant or was it as the gullible tilda was only too prone to believe because the bad karma of that evil woman mrs hyde in the gardens had floated up to her in her perch above the trees and told her of the approaching crime
# ::alignments 74-75|0.0.2.1.0.1 73-74|0.0.2.1.0.1.0 69-70|0.0.2.1.0 68-69|0.0.2.1 67-68|0.0.2.0 65-66|0.0.2.0.0 64-65|0.0.2 58-59|0.0 56-57|0.0.1 51-52|0.0.0 50-51|0.0.2.1.0.1.0.0 46-47|0.0.2.1.0.0.0.1.1.0.0.1.0.0 44-45|0 43-44|0.1 41-42|0.1.0 40-41|0.1.0.0 39-40|0.1.0.1 33-34|0.0.2.1.0.0.0.1.1.0.0.2 31-32|0.0.2.1.0.0.0.1.1.0.0 29-30|0.0.2.1.0.0.0.1.1.0.0.1 27-28|0.0.2.1.0.0.0.1.1.0.0.0 25-26|0.0.2.1.0.0.0.1.1.0.0.1.0 23-24|0.0.2.1.0.0.0.1.1.0.0.1.0.2 22-23|0.0.2.1.0.0.0.1.1.0.0.1.0.1 17-18|0.0.2.1.0.0.0.1.1.0.0.1.0.1.0 15-16|0.0.2.1.0.0.0.1.1.0.0.1.0.1.1 9-10|0.0.2.1.0.0.0.1.1.0 8-9|0.0.2.1.0.0.0.1.1 6-7|0.0.2.1.0.0.0.1 5-6|0.0.2.1.0.0.0.1.0 3-4|0.0.2.1.0.0.0.1.1.0.0.1.0.3 2-3|0.0.2.1.0.0.0.0 1-2|0.0.2.1.0.0.0 0-1|0.0.2.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.138
# ::node	0	cause-01	44-45
# ::node	0.0	float-01	58-59
# ::node	0.0.0	woman	51-52
# ::node	0.0.1	garden	56-57
# ::node	0.0.2	perch-01	64-65
# ::node	0.0.2.0	tree	67-68
# ::node	0.0.2.0.0	above	65-66
# ::node	0.0.2.1	and	68-69
# ::node	0.0.2.1.0	tell-01	69-70
# ::node	0.0.2.1.0.0	she	0-1
# ::node	0.0.2.1.0.0.0	feel-01	1-2
# ::node	0.0.2.1.0.0.0.0	cold	2-3
# ::node	0.0.2.1.0.0.0.1	say-01	6-7
# ::node	0.0.2.1.0.0.0.1.0	she	5-6
# ::node	0.0.2.1.0.0.0.1.1	it	8-9
# ::node	0.0.2.1.0.0.0.1.1.0	cause-01	9-10
# ::node	0.0.2.1.0.0.0.1.1.0.0	or	31-32
# ::node	0.0.2.1.0.0.0.1.1.0.0.0	crime	27-28
# ::node	0.0.2.1.0.0.0.1.1.0.0.1	and	29-30
# ::node	0.0.2.1.0.0.0.1.1.0.0.1.0	show-01	25-26
# ::node	0.0.2.1.0.0.0.1.1.0.0.1.0.0	bad	46-47
# ::node	0.0.2.1.0.0.0.1.1.0.0.1.0.1	die-01	22-23
# ::node	0.0.2.1.0.0.0.1.1.0.0.1.0.1.0	sound	17-18
# ::node	0.0.2.1.0.0.0.1.1.0.0.1.0.1.1	after	15-16
# ::node	0.0.2.1.0.0.0.1.1.0.0.1.0.2	away	23-24
# ::node	0.0.2.1.0.0.0.1.1.0.0.1.0.3	all	3-4
# ::node	0.0.2.1.0.0.0.1.1.0.0.2	it	33-34
# ::node	0.0.2.1.0.1	crime	74-75
# ::node	0.0.2.1.0.1.0	approach-01	73-74
# ::node	0.0.2.1.0.1.0.0	evil	50-51
# ::node	0.1	believe-01	43-44
# ::node	0.1.0	prone	41-42
# ::node	0.1.0.0	too	40-41
# ::node	0.1.0.1	only	39-40
# ::root	0	cause-01
# ::edge	above	op1	tree	0.0.2.0.0	0.0.2.0	
# ::edge	after	op1	die-01	0.0.2.1.0.0.0.1.1.0.0.1.0.1.1	0.0.2.1.0.0.0.1.1.0.0.1.0.1	
# ::edge	and	op1	or	0.0.2.1.0.0.0.1.1.0.0.1	0.0.2.1.0.0.0.1.1.0.0	
# ::edge	and	op1	perch-01	0.0.2.1	0.0.2	
# ::edge	and	op2	tell-01	0.0.2.1	0.0.2.1.0	
# ::edge	approach-01	ARG0	evil	0.0.2.1.0.1.0	0.0.2.1.0.1.0.0	
# ::edge	approach-01	ARG1	crime	0.0.2.1.0.1.0	0.0.2.1.0.1	
# ::edge	cause-01	ARG0	float-01	0	0.0	
# ::edge	cause-01	ARG0	or	0.0.2.1.0.0.0.1.1.0	0.0.2.1.0.0.0.1.1.0.0	
# ::edge	cause-01	ARG1	believe-01	0	0.1	
# ::edge	cause-01	ARG1	it	0.0.2.1.0.0.0.1.1.0	0.0.2.1.0.0.0.1.1	
# ::edge	die-01	ARG1	sound	0.0.2.1.0.0.0.1.1.0.0.1.0.1	0.0.2.1.0.0.0.1.1.0.0.1.0.1.0	
# ::edge	die-01	ARG2	show-01	0.0.2.1.0.0.0.1.1.0.0.1.0.1	0.0.2.1.0.0.0.1.1.0.0.1.0	
# ::edge	feel-01	ARG0	she	0.0.2.1.0.0.0	0.0.2.1.0.0	
# ::edge	feel-01	ARG1	cold	0.0.2.1.0.0.0	0.0.2.1.0.0.0.0	
# ::edge	feel-01	condition	say-01	0.0.2.1.0.0.0	0.0.2.1.0.0.0.1	
# ::edge	float-01	ARG0	woman	0.0	0.0.0	
# ::edge	float-01	ARG1	garden	0.0	0.0.1	
# ::edge	float-01	ARG2	perch-01	0.0	0.0.2	
# ::edge	or	mod	crime	0.0.2.1.0.0.0.1.1.0.0	0.0.2.1.0.0.0.1.1.0.0.0	
# ::edge	or	op1	it	0.0.2.1.0.0.0.1.1.0.0	0.0.2.1.0.0.0.1.1.0.0.2	
# ::edge	perch-01	ARG1	tree	0.0.2	0.0.2.0	
# ::edge	prone	degree	too	0.1.0	0.1.0.0	
# ::edge	prone	domain	believe-01	0.1.0	0.1	
# ::edge	prone	mod	only	0.1.0	0.1.0.1	
# ::edge	say-01	ARG0	she	0.0.2.1.0.0.0.1	0.0.2.1.0.0.0.1.0	
# ::edge	say-01	ARG1	it	0.0.2.1.0.0.0.1	0.0.2.1.0.0.0.1.1	
# ::edge	show-01	ARG0	bad	0.0.2.1.0.0.0.1.1.0.0.1.0	0.0.2.1.0.0.0.1.1.0.0.1.0.0	
# ::edge	show-01	ARG1	and	0.0.2.1.0.0.0.1.1.0.0.1.0	0.0.2.1.0.0.0.1.1.0.0.1	
# ::edge	show-01	manner	away	0.0.2.1.0.0.0.1.1.0.0.1.0	0.0.2.1.0.0.0.1.1.0.0.1.0.2	
# ::edge	show-01	mod	all	0.0.2.1.0.0.0.1.1.0.0.1.0	0.0.2.1.0.0.0.1.1.0.0.1.0.3	
# ::edge	tell-01	ARG0	she	0.0.2.1.0	0.0.2.1.0.0	
# ::edge	tell-01	ARG2	crime	0.0.2.1.0	0.0.2.1.0.1	
(c2 / cause-01 
      :ARG0 (f / float-01 
            :ARG0 (w / woman) 
            :ARG1 (g / garden) 
            :ARG2 (p / perch-01 
                  :ARG1 (t2 / tree 
                        :op-of (a3 / above)) 
                  :op-of (a2 / and 
                        :op1 (t / tell-01 
                              :ARG0 (s5 / she 
                                    :ARG0-of (f2 / feel-01 
                                          :ARG1 (c5 / cold) 
                                          :condition (s3 / say-01 
                                                :ARG0 (s4 / she) 
                                                :ARG1 (i2 / it 
                                                      :ARG1-of (c4 / cause-01 
                                                            :ARG0 (o2 / or 
                                                                  :mod (c3 / crime) 
                                                                  :op-of (a4 / and 
                                                                        :ARG1-of (s / show-01 
                                                                              :ARG0 (b / bad) 
                                                                              :ARG2-of (d / die-01 
                                                                                    :ARG1 (s2 / sound) 
                                                                                    :op-of (a6 / after)) 
                                                                              :manner (a5 / away) 
                                                                              :mod (a7 / all))) 
                                                                  :op1 (i / it))))))) 
                              :ARG2 (c / crime 
                                    :ARG1-of (a / approach-01 
                                          :ARG0 (e / evil))))))) 
      :ARG1 (b2 / believe-01 
            :domain-of (p2 / prone 
                  :degree (t3 / too) 
                  :mod (o / only))))

# ::snt county dairies of langford lane kidlington supplied the milk with bits of dirt floating in it dash
# ::tok county dairies of langford lane kidlington supplied the milk with bits of dirt floating in it dash
# ::alignments 15-16|0.0 13-14|0.2 12-13|0.2.1 10-11|0.2.1.0 8-9|0.1 6-7|0 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.201
# ::node	0	supply-01	6-7
# ::node	0.0	it	15-16
# ::node	0.1	milk	8-9
# ::node	0.2	float-01	13-14
# ::node	0.2.0	county	0-1
# ::node	0.2.1	dirt	12-13
# ::node	0.2.1.0	bit	10-11
# ::root	0	supply-01
# ::edge	dirt	part	bit	0.2.1	0.2.1.0	
# ::edge	float-01	ARG0	county	0.2	0.2.0	
# ::edge	float-01	ARG1	dirt	0.2	0.2.1	
# ::edge	supply-01	ARG0	it	0	0.0	
# ::edge	supply-01	ARG1	milk	0	0.1	
# ::edge	supply-01	ARG2	float-01	0	0.2	
(s / supply-01 
      :ARG0 (i / it) 
      :ARG1 (m / milk) 
      :ARG2 (f / float-01 
            :ARG0 (c / county) 
            :ARG1 (d / dirt 
                  :part (b / bit))))

# ::snt on occasion over highfrequency undulations the gt will follow the roads contours a little too religiously setting up a fast bobbing motion but this is preferable to the car floating or leaping from crest to crest
# ::tok on occasion over highfrequency undulations the gt will follow the roads contours a little too religiously setting up a fast bobbing motion but this is preferable to the car floating or leaping from crest to crest
# ::alignments 30-31|0.1.2.0.0 29-30|0.1.2.0 28-29|0.1.2 25-26|0.1 23-24|0.1.1 22-23|0 21-22|0.1.0.0.0 19-20|0.1.0.1.0 16-17|0.1.0.0 14-15|0.1.0.0.1.0 13-14|0.1.0.0.1 10-11|0.1.0 8-9|0.1.0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.517
# ::node	0	contrast-01	22-23
# ::node	0.0	occasion	1-2
# ::node	0.1	prefer-01	25-26
# ::node	0.1.0	road	10-11
# ::node	0.1.0.0	set-02	16-17
# ::node	0.1.0.0.0	motion	21-22
# ::node	0.1.0.0.1	little	13-14
# ::node	0.1.0.0.1.0	too	14-15
# ::node	0.1.0.1	follow-02	8-9
# ::node	0.1.0.1.0	fast	19-20
# ::node	0.1.1	this	23-24
# ::node	0.1.2	car	28-29
# ::node	0.1.2.0	float-01	29-30
# ::node	0.1.2.0.0	or	30-31
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	occasion	0	0.0	
# ::edge	contrast-01	ARG2	prefer-01	0	0.1	
# ::edge	float-01	ARG1	car	0.1.2.0	0.1.2	
# ::edge	follow-02	ARG0	fast	0.1.0.1	0.1.0.1.0	
# ::edge	follow-02	ARG1	road	0.1.0.1	0.1.0	
# ::edge	or	op1	float-01	0.1.2.0.0	0.1.2.0	
# ::edge	prefer-01	ARG0	road	0.1	0.1.0	
# ::edge	prefer-01	ARG1	this	0.1	0.1.1	
# ::edge	prefer-01	ARG2	car	0.1	0.1.2	
# ::edge	set-02	ARG0	road	0.1.0.0	0.1.0	
# ::edge	set-02	ARG1	motion	0.1.0.0	0.1.0.0.0	
# ::edge	set-02	ARG2	little	0.1.0.0	0.1.0.0.1	
# ::edge	too	degree	little	0.1.0.0.1.0	0.1.0.0.1	
(c2 / contrast-01 
      :ARG1 (o2 / occasion) 
      :ARG2 (p / prefer-01 
            :ARG0 (r / road 
                  :ARG0-of (s / set-02 
                        :ARG1 (m / motion) 
                        :ARG2 (l / little 
                              :degree-of (t2 / too))) 
                  :ARG1-of (f3 / follow-02 
                        :ARG0 (f2 / fast))) 
            :ARG1 (t / this) 
            :ARG2 (c / car 
                  :ARG1-of (f / float-01 
                        :op-of (o / or)))))

# ::snt milken told murdoch that instead of floating junk bonds for news corporation drexel would have to issue 1
# ::tok milken told murdoch that instead of floating junk bonds for news corporation drexel would have to issue 1
# ::alignments 17-18|0.0.0.4.0 16-17|0.0.0.0 11-12|0.0.0.1 10-11|0.0.0.2 8-9|0.0 7-8|0 6-7|0.0.0 4-5|0.0.0.3 1-2|0.0.0.4 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.592
# ::node	0	junk	7-8
# ::node	0.0	bond	8-9
# ::node	0.0.0	float-01	6-7
# ::node	0.0.0.0	issue	16-17
# ::node	0.0.0.1	corporation	11-12
# ::node	0.0.0.2	news	10-11
# ::node	0.0.0.3	instead	4-5
# ::node	0.0.0.4	tell-01	1-2
# ::node	0.0.0.4.0	1	17-18
# ::root	0	junk
(j / junk 
      :mod-of (b / bond 
            :ARG1-of (f / float-01 
                  :ARG0 (i / issue) 
                  :ARG2 (c / corporation) 
                  :medium (n / news) 
                  :mod (i2 / instead) 
                  :prep-instead (t / tell-01 
                        :ARG1 1))))

# ::snt it is music that invites you to lose yourself in wonder and ultimately leaves you floating on air
# ::tok it is music that invites you to lose yourself in wonder and ultimately leaves you floating on air
# ::alignments 17-18|0.0.2.0.0.2 15-16|0.0.2.0.0 14-15|0.0.2.0.0.0 13-14|0.0.2.0 12-13|0.0.2.0.1 11-12|0.0.2 10-11|0 7-8|0.0 5-6|0.0.0 2-3|0.0.1 0-1|0.0.2.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.640
# ::node	0	wonder-01	10-11
# ::node	0.0	lose-02	7-8
# ::node	0.0.0	you	5-6
# ::node	0.0.1	music	2-3
# ::node	0.0.2	and	11-12
# ::node	0.0.2.0	leave-01	13-14
# ::node	0.0.2.0.0	float-01	15-16
# ::node	0.0.2.0.0.0	you	14-15
# ::node	0.0.2.0.0.1	it	0-1
# ::node	0.0.2.0.0.2	air	17-18
# ::node	0.0.2.0.1	ultimate	12-13
# ::root	0	wonder-01
(w / wonder-01 
      :ARG2-of (l2 / lose-02 
            :ARG0 (y2 / you) 
            :ARG1 (m / music) 
            :op-of (a2 / and 
                  :op1 (l / leave-01 
                        :ARG1 (f / float-01 
                              :ARG0 (y / you) 
                              :ARG1 (i / it) 
                              :location (a / air)) 
                        :mod (u / ultimate)))))

# ::snt page 27 mountleigh float mountleigh plans to float about 60 per cent of its spanish retail chain galerias preciados on the madrid stock market
# ::tok page 27 mountleigh float mountleigh plans to float about 60 per cent of its spanish retail chain galerias preciados on the madrid stock market
# ::alignments 23-24|0.0.1.2.0.0 22-23|0.0.1.2.0 16-17|0 15-16|0.0 14-15|0.0.0.0.0+0.0.0.0+0.0.0 11-12|0.0.1.1.0+0.0.1.1 9-10|0.0.1.0 7-8|0.0.1 5-6|0.0.1.2 3-4|0.0.1.2.1 0-1|0.0.1.2.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.862
# ::node	0	chain	16-17
# ::node	0.0	retail-01	15-16
# ::node	0.0.0	language	14-15
# ::node	0.0.0.0	name	14-15
# ::node	0.0.0.0.0	"Spanish"	14-15
# ::node	0.0.1	float-01	7-8
# ::node	0.0.1.0	60	9-10
# ::node	0.0.1.1	monetary-quantity	11-12
# ::node	0.0.1.1.0	cent	11-12
# ::node	0.0.1.2	plan-01	5-6
# ::node	0.0.1.2.0	stock	22-23
# ::node	0.0.1.2.0.0	market	23-24
# ::node	0.0.1.2.1	float-01	3-4
# ::node	0.0.1.2.1.0	page	0-1
# ::root	0	chain
(c / chain 
      :ARG1-of (r / retail-01 
            :ARG0 (l / language 
                  :name (n / name 
                        :op1 "Spanish")) 
            :purpose-of (f / float-01 
                  :ARG0 60 
                  :ARG1 (m2 / monetary-quantity 
                        :unit (c2 / cent)) 
                  :ARG1-of (p / plan-01 
                        :ARG0 (s / stock 
                              :mod-of (m / market)) 
                        :ARG1-of (f2 / float-01 
                              :ARG0 (p2 / page))))))

# ::snt citicorp scrimgeour vickers expects the water authorities to be floated on the stock market with dividend yields of between 6
# ::tok citicorp scrimgeour vickers expects the water authorities to be floated on the stock market with dividend yields of between 6
# ::alignments 19-20|0.0.2.0.0 18-19|0.0.2.0 16-17|0.0.2 13-14|0.0.1 12-13|0.0.1.0 9-10|0.0 6-7|0.0.0 5-6|0.0.0.0 3-4|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.954
# ::node	0	expect-01	3-4
# ::node	0.0	float-01	9-10
# ::node	0.0.0	authority	6-7
# ::node	0.0.0.0	water	5-6
# ::node	0.0.1	market	13-14
# ::node	0.0.1.0	stock	12-13
# ::node	0.0.2	yield-02	16-17
# ::node	0.0.2.0	between	18-19
# ::node	0.0.2.0.0	6	19-20
# ::root	0	expect-01
# ::edge	authority	mod	water	0.0.0	0.0.0.0	
# ::edge	between	op1	6	0.0.2.0	0.0.2.0.0	
# ::edge	expect-01	ARG1	float-01	0	0.0	
# ::edge	float-01	ARG1	authority	0.0	0.0.0	
# ::edge	float-01	ARG2	market	0.0	0.0.1	
# ::edge	float-01	ARG4	yield-02	0.0	0.0.2	
# ::edge	market	mod	stock	0.0.1	0.0.1.0	
# ::edge	yield-02	ARG1	between	0.0.2	0.0.2.0	
(e / expect-01 
      :ARG1 (f / float-01 
            :ARG1 (a / authority 
                  :mod (w / water)) 
            :ARG2 (m / market 
                  :mod (s / stock)) 
            :ARG4 (y / yield-02 
                  :ARG1 (b / between 
                        :op1 6))))

# ::snt 5p a miserable premium to the 100p they were floated at three years ago
# ::tok 5p a miserable premium to the 100p they were floated at three years ago
# ::alignments 12-13|0.2.1+0.2 11-12|0.2.0 9-10|0 7-8|0.1 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:53.984
# ::node	0	float-01	9-10
# ::node	0.0	miserable	2-3
# ::node	0.1	they	7-8
# ::node	0.2	temporal-quantity	12-13
# ::node	0.2.0	3	11-12
# ::node	0.2.1	year	12-13
# ::root	0	float-01
# ::edge	float-01	ARG0	miserable	0	0.0	
# ::edge	float-01	ARG1	they	0	0.1	
# ::edge	temporal-quantity	op1	float-01	0.2	0	
# ::edge	temporal-quantity	quant	3	0.2	0.2.0	
# ::edge	temporal-quantity	unit	year	0.2	0.2.1	
(f / float-01 
      :ARG0 (m / miserable) 
      :ARG1 (t2 / they) 
      :op-of (t / temporal-quantity 
            :quant 3 
            :unit (y / year)))

# ::snt if a company was floated after may 1979 the date of its market debut is the base
# ::tok if a company was floated after may 1979 the date of its market debut is the base
# ::alignments 16-17|0.0.1.0.0.0 12-13|0 9-10|0.0.1.0.0 6-8|0.0.1.0.2+0.0.1.0.1+0.0.1.0 5-6|0.0.1 4-5|0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.067
# ::node	0	market	12-13
# ::node	0.0	float-01	4-5
# ::node	0.0.0	company	2-3
# ::node	0.0.1	after	5-6
# ::node	0.0.1.0	date-entity	6-8
# ::node	0.0.1.0.0	date	9-10
# ::node	0.0.1.0.0.0	base	16-17
# ::node	0.0.1.0.1	5	6-8
# ::node	0.0.1.0.2	1979	6-8
# ::root	0	market
# ::edge	after	op1	date-entity	0.0.1	0.0.1.0	
# ::edge	base	domain	date	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	date	mod	date-entity	0.0.1.0.0	0.0.1.0	
# ::edge	date-entity	month	5	0.0.1.0	0.0.1.0.1	
# ::edge	date-entity	year	1979	0.0.1.0	0.0.1.0.2	
# ::edge	float-01	ARG1	company	0.0	0.0.0	
# ::edge	float-01	time	after	0.0	0.0.1	
# ::edge	market	op1	float-01	0	0.0	
(m / market 
      :op1 (f / float-01 
            :ARG1 (c / company) 
            :time (a / after 
                  :op1 (d2 / date-entity 
                        :mod-of (d / date 
                              :domain-of (b / base)) 
                        :month 5 
                        :year 1979))))

# ::snt the results are the first since the firm was floated
# ::tok the results are the first since the firm was floated
# ::alignments 9-10|0.0 7-8|0.0.0 5-6|0.0.1 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.092
# ::node	0	result-01	1-2
# ::node	0.0	float-01	9-10
# ::node	0.0.0	firm	7-8
# ::node	0.0.1	since	5-6
# ::root	0	result-01
(r / result-01 
      :ARG0-of (f / float-01 
            :ARG1 (f2 / firm) 
            :op-of (s / since)))

# ::snt in the summer at the end of an exhausting day we take a drink and get into the boat and float
# ::tok in the summer at the end of an exhausting day we take a drink and get into the boat and float
# ::alignments 20-21|0.1 19-20|0 18-19|0.0 14-15|0.1.2 13-14|0.1.0.0 10-11|0.1.0 9-10|0.1.1 2-3|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.182
# ::node	0	and	19-20
# ::node	0.0	boat	18-19
# ::node	0.1	float-01	20-21
# ::node	0.1.0	we	10-11
# ::node	0.1.0.0	drink-01	13-14
# ::node	0.1.0.0.0	summer	2-3
# ::node	0.1.1	day	9-10
# ::node	0.1.2	and	14-15
# ::root	0	and
# ::edge	and	op1	boat	0	0.0	
# ::edge	and	op1	float-01	0.1.2	0.1	
# ::edge	and	op2	float-01	0	0.1	
# ::edge	drink-01	ARG0	we	0.1.0.0	0.1.0	
# ::edge	drink-01	ARG1	summer	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	ARG0	we	0.1	0.1.0	
# ::edge	float-01	ARG1	day	0.1	0.1.1	
(a / and 
      :op1 (b / boat) 
      :op2 (f / float-01 
            :ARG0 (w / we 
                  :ARG0-of (d / drink-01 
                        :ARG1 (s / summer))) 
            :ARG1 (d2 / day) 
            :op-of (a2 / and)))

# ::snt with mortgage rates floating around the stratosphere once again borrowers are naturally looking for ways to keep down their monthly payments
# ::tok with mortgage rates floating around the stratosphere once again borrowers are naturally looking for ways to keep down their monthly payments
# ::alignments 20-21|0 19-20|0.0.0.2.0+0.0.0.2 17-18|0.0 14-15|0.0.0.1.0.0 11-12|0.0.0.0 8-9|0.0.0.1.0.2 7-8|0.0.0.1.0.2.0 4-5|0.0.0.1.0.1 3-4|0.0.0.1.0 2-3|0.0.0.1 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.290
# ::node	0	payment	20-21
# ::node	0.0	down	17-18
# ::node	0.0.0	mortgage-01	1-2
# ::node	0.0.0.0	natural	11-12
# ::node	0.0.0.1	rate	2-3
# ::node	0.0.0.1.0	float-01	3-4
# ::node	0.0.0.1.0.0	way	14-15
# ::node	0.0.0.1.0.1	around	4-5
# ::node	0.0.0.1.0.2	again	8-9
# ::node	0.0.0.1.0.2.0	once	7-8
# ::node	0.0.0.2	temporal-quantity	19-20
# ::node	0.0.0.2.0	month	19-20
# ::root	0	payment
(p / payment 
      :path-of (d / down 
            :ARG0-of (m2 / mortgage-01 
                  :ARG1 (n / natural) 
                  :ARG3 (r / rate 
                        :ARG1-of (f / float-01 
                              :ARG0 (w / way) 
                              :ARG2 (a2 / around) 
                              :mod (a / again 
                                    :mod (o / once)))) 
                  :prep-with (t / temporal-quantity 
                        :unit (m / month)))))

# ::snt waterlily roots float like corks and  so dredging has frequently sent them sailing off down the river never to be seen  again
# ::tok waterlily roots float like corks and so dredging has frequently sent them sailing off down the river never to be seen again
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.291
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt and  rains floating a story that the typescript was stolen
# ::tok and rains floating a story that the typescript was stolen
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.292
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt theres some seagulls floating on the water
# ::tok theres some seagulls floating on the water
# ::alignments 6-7|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.300
# ::node	0	float-01	3-4
# ::node	0.0	some	1-2
# ::node	0.1	water	6-7
# ::root	0	float-01
# ::edge	float-01	ARG0	some	0	0.0	
# ::edge	float-01	ARG1	water	0	0.1	
(f / float-01 
      :ARG0 (s / some) 
      :ARG1 (w / water))

# ::snt it sounds crazy to think some jap mother might see a diaper floating down out of the sky lit up by flares and fires and grab it to put on her crying baby
# ::tok it sounds crazy to think some jap mother might see a diaper floating down out of the sky lit up by flares and fires and grab it to put on her crying baby
# ::alignments 32-33|0.1.0.0.0 31-32|0.1.0.0.0.0 26-27|0.2.0 25-26|0.2 24-25|0 23-24|0.2.1.0 22-23|0.2.1 17-18|0.1.1.1 13-14|0.1.1.0 12-13|0.1.1 9-10|0.1 7-8|0.1.0+0.1.0.0 5-6|0.1.0.1 4-5|0.0 2-3|0.0.0 1-2|0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.854
# ::node	0	and	24-25
# ::node	0.0	think-01	4-5
# ::node	0.0.0	crazy	2-3
# ::node	0.0.0.0	sound-01	1-2
# ::node	0.0.0.0.0	it	0-1
# ::node	0.1	see-01	9-10
# ::node	0.1.0	mother	7-8
# ::node	0.1.0.0	have-rel-role-91	7-8
# ::node	0.1.0.0.0	baby	32-33
# ::node	0.1.0.0.0.0	cry-02	31-32
# ::node	0.1.0.1	some	5-6
# ::node	0.1.1	float-01	12-13
# ::node	0.1.1.0	down	13-14
# ::node	0.1.1.1	sky	17-18
# ::node	0.2	grab-01	25-26
# ::node	0.2.0	it	26-27
# ::node	0.2.1	and	22-23
# ::node	0.2.1.0	fire	23-24
# ::root	0	and
# ::edge	and	op1	fire	0.2.1	0.2.1.0	
# ::edge	and	op1	see-01	0	0.1	
# ::edge	and	op2	grab-01	0	0.2	
# ::edge	and	op2	grab-01	0.2.1	0.2	
# ::edge	cry-02	ARG1	baby	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	down	0.1.1	0.1.1.0	
# ::edge	float-01	time	sky	0.1.1	0.1.1.1	
# ::edge	grab-01	ARG1	it	0.2	0.2.0	
# ::edge	have-rel-role-91	ARG1	baby	0.1.0.0	0.1.0.0.0	
# ::edge	have-rel-role-91	ARG2	mother	0.1.0.0	0.1.0	
# ::edge	mother	quant	some	0.1.0	0.1.0.1	
# ::edge	see-01	ARG0	mother	0.1	0.1.0	
# ::edge	see-01	ARG1	float-01	0.1	0.1.1	
# ::edge	sound-01	ARG1	it	0.0.0.0	0.0.0.0.0	
# ::edge	sound-01	ARG2	crazy	0.0.0.0	0.0.0	
# ::edge	think-01	ARG0	crazy	0.0	0.0.0	
# ::edge	think-01	ARG1	and	0.0	0	
(a / and 
      :ARG1-of (t / think-01 
            :ARG0 (c2 / crazy 
                  :ARG2-of (s4 / sound-01 
                        :ARG1 (i2 / it)))) 
      :op1 (s2 / see-01 
            :ARG0 (m / mother 
                  :ARG2-of (h / have-rel-role-91 
                        :ARG1 (b / baby 
                              :ARG1-of (c / cry-02))) 
                  :quant (s3 / some)) 
            :ARG1 (f2 / float-01 
                  :ARG1 (d / down) 
                  :time (s / sky))) 
      :op2 (g / grab-01 
            :ARG1 (i / it) 
            :op-of (a2 / and 
                  :op1 (f / fire))))

# ::snt then  when the air is still the elegant adults the spinners float upwards in their  thousands and perform their mating dance
# ::tok then when the air is still the elegant adults the spinners float upwards in their thousands and perform their mating dance
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.855
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt its lucky i wasnt in the water then floating cos that wouldve been dangerous with that boat going past
# ::tok its lucky i wasnt in the water then floating cos that wouldve been dangerous with that boat going past
# ::alignments 18-19|0.3 16-17|0 13-14|0.0 8-9|0.3.0 7-8|0.3.0.1 6-7|0.3.0.0 2-3|0.1 1-2|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.914
# ::node	0	boat	16-17
# ::node	0.0	dangerous	13-14
# ::node	0.1	i	2-3
# ::node	0.2	lucky	1-2
# ::node	0.3	past	18-19
# ::node	0.3.0	float-01	8-9
# ::node	0.3.0.0	water	6-7
# ::node	0.3.0.1	then	7-8
# ::root	0	boat
# ::edge	boat	time	past	0	0.3	
# ::edge	dangerous	compared-to	boat	0.0	0	
# ::edge	float-01	ARG0	past	0.3.0	0.3	
# ::edge	float-01	ARG1	water	0.3.0	0.3.0.0	
# ::edge	float-01	time	then	0.3.0	0.3.0.1	
# ::edge	i	poss	boat	0.1	0	
# ::edge	lucky	poss	boat	0.2	0	
(b / boat 
      :compared-to-of (d / dangerous) 
      :poss-of (i / i) 
      :poss-of (l / lucky) 
      :time (p / past 
            :ARG0-of (f / float-01 
                  :ARG1 (w / water) 
                  :time (t / then))))

# ::snt the best chance of making this plan work comes from a new idea now being secretly floated in the electronics industry
# ::tok the best chance of making this plan work comes from a new idea now being secretly floated in the electronics industry
# ::alignments 20-21|0.0.0.1 19-20|0.0.0.1.0 16-17|0.0.0 15-16|0.0.0.2 13-14|0.0.0.3 12-13|0.0.0.0 11-12|0.0.0.0.0 6-7|0 5-6|0.1 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.971
# ::node	0	plan-01	6-7
# ::node	0.0	chance	2-3
# ::node	0.0.0	float-01	16-17
# ::node	0.0.0.0	idea	12-13
# ::node	0.0.0.0.0	new	11-12
# ::node	0.0.0.1	industry	20-21
# ::node	0.0.0.1.0	electronic	19-20
# ::node	0.0.0.2	secret	15-16
# ::node	0.0.0.3	now	13-14
# ::node	0.1	this	5-6
# ::root	0	plan-01
# ::edge	float-01	ARG0	chance	0.0.0	0.0	
# ::edge	float-01	ARG1	idea	0.0.0	0.0.0.0	
# ::edge	float-01	location	industry	0.0.0	0.0.0.1	
# ::edge	float-01	manner	secret	0.0.0	0.0.0.2	
# ::edge	float-01	time	now	0.0.0	0.0.0.3	
# ::edge	idea	mod	new	0.0.0.0	0.0.0.0.0	
# ::edge	industry	mod	electronic	0.0.0.1	0.0.0.1.0	
# ::edge	plan-01	ARG0	chance	0	0.0	
# ::edge	plan-01	mod	this	0	0.1	
(p / plan-01 
      :ARG0 (c / chance 
            :ARG0-of (f / float-01 
                  :ARG1 (i2 / idea 
                        :mod (n2 / new)) 
                  :location (i / industry 
                        :mod (e / electronic)) 
                  :manner (s / secret) 
                  :time (n / now))) 
      :mod (t / this))

# ::snt she maybe floated in
# ::tok she maybe floated in
# ::alignments 2-3|0 1-2|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.977
# ::node	0	float-01	2-3
# ::node	0.0	she	0-1
# ::node	0.1	maybe	1-2
# ::root	0	float-01
# ::edge	float-01	ARG0	she	0	0.0	
# ::edge	float-01	mod	maybe	0	0.1	
(f / float-01 
      :ARG0 (s / she) 
      :mod (m / maybe))

# ::snt when england were leading 100 a balloon floated on to the pitch
# ::tok when england were leading 100 a balloon floated on to the pitch
# ::alignments 11-12|0 7-8|0.0 4-5|0.0.0.1 3-4|0.0.0 1-2|0.0.0.0.0.0+0.0.0.0.0+0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:54.997
# ::node	0	pitch-03	11-12
# ::node	0.0	float-01	7-8
# ::node	0.0.0	lead-01	3-4
# ::node	0.0.0.0	country	1-2
# ::node	0.0.0.0.0	name	1-2
# ::node	0.0.0.0.0.0	"England"	1-2
# ::node	0.0.0.1	100	4-5
# ::root	0	pitch-03
(p / pitch-03 
      :ARG2-of (f / float-01 
            :ARG1 (l / lead-01 
                  :ARG0 (c / country 
                        :name (n / name 
                              :op1 "England")) 
                  :ARG1 100)))

# ::snt the plan had previously been to float the company
# ::tok the plan had previously been to float the company
# ::alignments 8-9|0.0.0 6-7|0.0 3-4|0.0.1 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:55.039
# ::node	0	plan-01	1-2
# ::node	0.0	float-01	6-7
# ::node	0.0.0	company	8-9
# ::node	0.0.1	previous	3-4
# ::root	0	plan-01
(p2 / plan-01 
      :ARG0-of (f / float-01 
            :ARG1 (c / company) 
            :mod (p / previous)))

# ::snt pechiney floated its international activities to help finance its acquisition and rhone poulenc has developed sophisticated financing instruments
# ::tok pechiney floated its international activities to help finance its acquisition and rhone poulenc has developed sophisticated financing instruments
# ::alignments 17-18|0.1.0.0.0 16-17|0.1.0.0.0.0 15-16|0.0.0 14-15|0.0 11-13|0.2.0.0+0.2.0.1+0.2.0+0.2 10-11|0 9-10|0.1 7-8|0.1.0 6-7|0.1.0.0 4-5|0.1.0.0.1.0 3-4|0.1.0.0.1.0.0 1-2|0.1.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:55.319
# ::node	0	and	10-11
# ::node	0.0	develop-02	14-15
# ::node	0.0.0	sophisticated	15-16
# ::node	0.1	acquire-01	9-10
# ::node	0.1.0	finance-01	7-8
# ::node	0.1.0.0	help-01	6-7
# ::node	0.1.0.0.0	instrument	17-18
# ::node	0.1.0.0.0.0	finance-01	16-17
# ::node	0.1.0.0.1	float-01	1-2
# ::node	0.1.0.0.1.0	activity	4-5
# ::node	0.1.0.0.1.0.0	international	3-4
# ::node	0.2	organization	11-13
# ::node	0.2.0	name	11-13
# ::node	0.2.0.0	"poulenc"	11-13
# ::node	0.2.0.1	"rhone"	11-13
# ::root	0	and
# ::edge	activity	mod	international	0.1.0.0.1.0	0.1.0.0.1.0.0	
# ::edge	and	op1	acquire-01	0	0.1	
# ::edge	and	op2	organization	0	0.2	
# ::edge	develop-02	ARG0	and	0.0	0	
# ::edge	develop-02	ARG2	sophisticated	0.0	0.0.0	
# ::edge	finance-01	ARG1	acquire-01	0.1.0	0.1	
# ::edge	finance-01	ARG1	instrument	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	activity	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	float-01	ARG2	help-01	0.1.0.0.1	0.1.0.0	
# ::edge	help-01	ARG0	instrument	0.1.0.0	0.1.0.0.0	
# ::edge	help-01	ARG1	finance-01	0.1.0.0	0.1.0	
# ::edge	name	op1	"poulenc"	0.2.0	0.2.0.0	
# ::edge	name	op2	"rhone"	0.2.0	0.2.0.1	
# ::edge	organization	name	name	0.2	0.2.0	
(a / and 
      :ARG0-of (d / develop-02 
            :ARG2 (s / sophisticated)) 
      :op1 (a2 / acquire-01 
            :ARG1-of (f2 / finance-01 
                  :ARG1-of (h / help-01 
                        :ARG0 (i / instrument 
                              :ARG1-of (f / finance-01)) 
                        :ARG2-of (f3 / float-01 
                              :ARG1 (a3 / activity 
                                    :mod (i2 / international)))))) 
      :op2 (o / organization 
            :name (n / name 
                  :op1 "poulenc" 
                  :op2 "rhone")))

# ::snt it is possible that the new chairman will decide that there is something to be said for holding the whole network together and then eventually floating the holding company rather than privatising the sectors one by one
# ::tok it is possible that the new chairman will decide that there is something to be said for holding the whole network together and then eventually floating the holding company rather than privatising the sectors one by one
# ::alignments 33-34|0.1.2.0.0 28-29|0.1.2.0.1 27-28|0.1.2.0.1.0 25-26|0.1.2.0 24-25|0.1.2.0.2 23-24|0.1.2.0.3 22-23|0.1.2 21-22|0.1.1 20-21|0.1.0 19-20|0.1.0.0 17-18|0.1 15-16|0 12-13|0.0 8-9|0.0.0 6-7|0.0.0.0+0.0.0.0.0 5-6|0.0.0.0.0.0 2-3|0.0.0.1 0-1|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:55.917
# ::node	0	say-01	15-16
# ::node	0.0	something	12-13
# ::node	0.0.0	decide-01	8-9
# ::node	0.0.0.0	chairman	6-7
# ::node	0.0.0.0.0	have-org-role-91	6-7
# ::node	0.0.0.0.0.0	new	5-6
# ::node	0.0.0.1	possible	2-3
# ::node	0.0.0.1.0	it	0-1
# ::node	0.1	hold-01	17-18
# ::node	0.1.0	network	20-21
# ::node	0.1.0.0	whole	19-20
# ::node	0.1.1	together	21-22
# ::node	0.1.2	and	22-23
# ::node	0.1.2.0	float-01	25-26
# ::node	0.1.2.0.0	sector	33-34
# ::node	0.1.2.0.1	company	28-29
# ::node	0.1.2.0.1.0	hold-01	27-28
# ::node	0.1.2.0.2	eventual	24-25
# ::node	0.1.2.0.3	then	23-24
# ::root	0	say-01
# ::edge	and	op1	hold-01	0.1.2	0.1	
# ::edge	and	op2	float-01	0.1.2	0.1.2.0	
# ::edge	decide-01	ARG0	chairman	0.0.0	0.0.0.0	
# ::edge	decide-01	ARG1	something	0.0.0	0.0	
# ::edge	float-01	ARG0	sector	0.1.2.0	0.1.2.0.0	
# ::edge	float-01	ARG1	company	0.1.2.0	0.1.2.0.1	
# ::edge	float-01	time	eventual	0.1.2.0	0.1.2.0.2	
# ::edge	float-01	time	then	0.1.2.0	0.1.2.0.3	
# ::edge	have-org-role-91	ARG2	chairman	0.0.0.0.0	0.0.0.0	
# ::edge	have-org-role-91	mod	new	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	hold-01	ARG1	company	0.1.2.0.1.0	0.1.2.0.1	
# ::edge	hold-01	ARG1	network	0.1	0.1.0	
# ::edge	hold-01	mod	together	0.1	0.1.1	
# ::edge	network	mod	whole	0.1.0	0.1.0.0	
# ::edge	possible	domain	decide-01	0.0.0.1	0.0.0	
# ::edge	possible	domain	it	0.0.0.1	0.0.0.1.0	
# ::edge	say-01	ARG1	something	0	0.0	
# ::edge	say-01	ARG2	hold-01	0	0.1	
(s2 / say-01 
      :ARG1 (s3 / something 
            :ARG1-of (d / decide-01 
                  :ARG0 (c2 / chairman 
                        :ARG2-of (h3 / have-org-role-91 
                              :mod (n2 / new))) 
                  :domain-of (p / possible 
                        :domain (i / it)))) 
      :ARG2 (h2 / hold-01 
            :ARG1 (n / network 
                  :mod (w / whole)) 
            :mod (t2 / together) 
            :op-of (a / and 
                  :op1 (f / float-01 
                        :ARG0 (s / sector) 
                        :ARG1 (c / company 
                              :ARG1-of (h / hold-01)) 
                        :time (e / eventual) 
                        :time (t / then)))))

# ::snt the distribution businesses are the first part of the electricity industry to be floated early next year
# ::tok the distribution businesses are the first part of the electricity industry to be floated early next year
# ::alignments 16-17|0.2 15-16|0.2.0 14-15|0.2.1 13-14|0 10-11|0.0 9-10|0.0.0 2-3|0.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:55.982
# ::node	0	float-01	13-14
# ::node	0.0	industry	10-11
# ::node	0.0.0	electricity	9-10
# ::node	0.1	business	2-3
# ::node	0.1.0	distribute-01	1-2
# ::node	0.2	year	16-17
# ::node	0.2.0	next	15-16
# ::node	0.2.1	early	14-15
# ::root	0	float-01
# ::edge	business	mod	distribute-01	0.1	0.1.0	
# ::edge	early	op1	year	0.2.1	0.2	
# ::edge	float-01	ARG0	industry	0	0.0	
# ::edge	float-01	ARG1	business	0	0.1	
# ::edge	float-01	time	year	0	0.2	
# ::edge	industry	mod	electricity	0.0	0.0.0	
# ::edge	year	mod	next	0.2	0.2.0	
(f / float-01 
      :ARG0 (i / industry 
            :mod (e2 / electricity)) 
      :ARG1 (b / business 
            :mod (d / distribute-01)) 
      :time (y / year 
            :mod (n / next) 
            :op-of (e / early)))

# ::snt quoting the old ming saying power is a boat the people represent the water that can either float it or sink it he pitted himself from the very depths of his soul against the power of the people
# ::tok quoting the old ming saying power is a boat the people represent the water that can either float it or sink it he pitted himself from the very depths of his soul against the power of the people
# ::alignments 34-35|0.0.0.0.0.1.0 31-32|0.0.0.0.0.1.1.0 28-29|0.0.0.0.0.1.1 27-28|0.0.0.0.0.1.1.1 22-23|0.0.0.0.0.1 21-22|0.0.0.0 20-21|0.0.0.0.0 19-20|0.0.0.0.0.2 18-19|0.0.0.0.0.2.0.1 17-18|0.0.0.0.0.2.0 16-17|0.0.0.0.0.2.0.0 15-16|0.0.0.0.0.2.0.2 13-14|0.0 11-12|0.0.1 8-9|0.0.1.0 5-6|0.1 4-5|0 2-3|0.0.0.0.0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:56.520
# ::node	0	say-01	4-5
# ::node	0.0	water	13-14
# ::node	0.0.0	quote-01	0-1
# ::node	0.0.0.0	it	21-22
# ::node	0.0.0.0.0	sink-01	20-21
# ::node	0.0.0.0.0.0	old	2-3
# ::node	0.0.0.0.0.1	he	22-23
# ::node	0.0.0.0.0.1.0	power	34-35
# ::node	0.0.0.0.0.1.1	depth	28-29
# ::node	0.0.0.0.0.1.1.0	soul	31-32
# ::node	0.0.0.0.0.1.1.1	very	27-28
# ::node	0.0.0.0.0.2	or	19-20
# ::node	0.0.0.0.0.2.0	float-01	17-18
# ::node	0.0.0.0.0.2.0.0	either	16-17
# ::node	0.0.0.0.0.2.0.1	it	18-19
# ::node	0.0.0.0.0.2.0.2	possible	15-16
# ::node	0.0.1	represent-01	11-12
# ::node	0.0.1.0	boat	8-9
# ::node	0.1	power	5-6
# ::root	0	say-01
# ::edge	depth	location	soul	0.0.0.0.0.1.1	0.0.0.0.0.1.1.0	
# ::edge	depth	mod	very	0.0.0.0.0.1.1	0.0.0.0.0.1.1.1	
# ::edge	depth	poss	he	0.0.0.0.0.1.1	0.0.0.0.0.1	
# ::edge	float-01	ARG0	either	0.0.0.0.0.2.0	0.0.0.0.0.2.0.0	
# ::edge	float-01	ARG1	it	0.0.0.0.0.2.0	0.0.0.0.0.2.0.1	
# ::edge	or	op1	float-01	0.0.0.0.0.2	0.0.0.0.0.2.0	
# ::edge	or	op2	sink-01	0.0.0.0.0.2	0.0.0.0.0	
# ::edge	possible	domain	float-01	0.0.0.0.0.2.0.2	0.0.0.0.0.2.0	
# ::edge	power	poss	he	0.0.0.0.0.1.0	0.0.0.0.0.1	
# ::edge	quote-01	ARG0	water	0.0.0	0.0	
# ::edge	quote-01	ARG1	it	0.0.0	0.0.0.0	
# ::edge	represent-01	ARG0	boat	0.0.1	0.0.1.0	
# ::edge	represent-01	ARG1	water	0.0.1	0.0	
# ::edge	say-01	ARG0	water	0	0.0	
# ::edge	say-01	ARG1	power	0	0.1	
# ::edge	sink-01	ARG0	old	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	sink-01	ARG1	it	0.0.0.0.0	0.0.0.0	
# ::edge	sink-01	ARG2	he	0.0.0.0.0	0.0.0.0.0.1	
(s3 / say-01 
      :ARG0 (w / water 
            :ARG0-of (q / quote-01 
                  :ARG1 (i / it 
                        :ARG1-of (s2 / sink-01 
                              :ARG0 (o2 / old) 
                              :ARG2 (h / he 
                                    :poss-of (p / power) 
                                    :poss-of (d / depth 
                                          :location (s / soul) 
                                          :mod (v / very))) 
                              :op-of (o / or 
                                    :op1 (f / float-01 
                                          :ARG0 (e / either) 
                                          :ARG1 (i2 / it) 
                                          :domain-of (p2 / possible)))))) 
            :ARG1-of (r / represent-01 
                  :ARG0 (b / boat))) 
      :ARG1 (p3 / power))

# ::snt in turn mr liem bailed the government out by floating 10 of indocements shares on the booming jakarta stockmarket last december raising 335m and then using the money to repay most of the governments investment
# ::tok in turn mr liem bailed the government out by floating 10 of indocements shares on the booming jakarta stockmarket last december raising 335m and then using the money to repay most of the governments investment
# ::alignments 34-35|0.1 33-34|0.1.0.0+0.1.0 30-31|0.0 29-30|0 27-28|0.2.0 25-26|0.2 24-25|0.2.2 23-24|0.2.1 21-22|0.2.1.0 20-21|0.2.1.0.1.1+0.2.1.0.1 19-20|0.2.1.0.1.0 13-14|0.2.1.0.0 10-11|0.2.1.0.0.0.0.0 9-10|0.2.1.0.0.0.0 4-5|0.2.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:56.767
# ::node	0	repay-01	29-30
# ::node	0.0	most	30-31
# ::node	0.1	invest-01	34-35
# ::node	0.1.0	government-organization	33-34
# ::node	0.1.0.0	govern-01	33-34
# ::node	0.2	use-01	25-26
# ::node	0.2.0	money	27-28
# ::node	0.2.1	and	23-24
# ::node	0.2.1.0	raise-01	21-22
# ::node	0.2.1.0.0	share	13-14
# ::node	0.2.1.0.0.0	bail-02	4-5
# ::node	0.2.1.0.0.0.0	float-01	9-10
# ::node	0.2.1.0.0.0.0.0	10	10-11
# ::node	0.2.1.0.1	date-entity	20-21
# ::node	0.2.1.0.1.0	last	19-20
# ::node	0.2.1.0.1.1	12	20-21
# ::node	0.2.2	then	24-25
# ::root	0	repay-01
# ::edge	and	op1	raise-01	0.2.1	0.2.1.0	
# ::edge	and	op2	use-01	0.2.1	0.2	
# ::edge	bail-02	ARG0	share	0.2.1.0.0.0	0.2.1.0.0	
# ::edge	bail-02	manner	float-01	0.2.1.0.0.0	0.2.1.0.0.0.0	
# ::edge	date-entity	mod	last	0.2.1.0.1	0.2.1.0.1.0	
# ::edge	date-entity	month	12	0.2.1.0.1	0.2.1.0.1.1	
# ::edge	float-01	ARG1	10	0.2.1.0.0.0.0	0.2.1.0.0.0.0.0	
# ::edge	govern-01	ARG0	government-organization	0.1.0.0	0.1.0	
# ::edge	invest-01	ARG0	government-organization	0.1	0.1.0	
# ::edge	raise-01	ARG0	share	0.2.1.0	0.2.1.0.0	
# ::edge	raise-01	ARG1	date-entity	0.2.1.0	0.2.1.0.1	
# ::edge	repay-01	ARG0	most	0	0.0	
# ::edge	repay-01	ARG1	invest-01	0	0.1	
# ::edge	use-01	ARG1	money	0.2	0.2.0	
# ::edge	use-01	ARG2	repay-01	0.2	0	
# ::edge	use-01	time	then	0.2	0.2.2	
(r / repay-01 
      :ARG0 (m / most) 
      :ARG1 (i / invest-01 
            :ARG0 (g / government-organization 
                  :ARG0-of (g2 / govern-01))) 
      :ARG2-of (u / use-01 
            :ARG1 (m2 / money) 
            :op-of (a / and 
                  :op1 (r2 / raise-01 
                        :ARG0 (s / share 
                              :ARG0-of (b / bail-02 
                                    :manner (f / float-01 
                                          :ARG1 10))) 
                        :ARG1 (d / date-entity 
                              :mod (l / last) 
                              :month 12))) 
            :time (t / then)))

# ::snt everything now is set in ice masthigh floating by as green as emerald as green as her eyes
# ::tok everything now is set in ice masthigh floating by as green as emerald as green as her eyes
# ::alignments 17-18|0.1 14-15|0 10-11|0.0.1 7-8|0.0 5-6|0.0.0.0 1-2|0.0.0.1 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:56.810
# ::node	0	green	14-15
# ::node	0.0	float-01	7-8
# ::node	0.0.0	everything	0-1
# ::node	0.0.0.0	ice	5-6
# ::node	0.0.0.1	now	1-2
# ::node	0.0.1	green	10-11
# ::node	0.1	eye	17-18
# ::root	0	green
# ::edge	everything	location	ice	0.0.0	0.0.0.0	
# ::edge	everything	mod	now	0.0.0	0.0.0.1	
# ::edge	float-01	ARG0	everything	0.0	0.0.0	
# ::edge	float-01	ARG1	green	0.0	0	
# ::edge	float-01	ARG2	green	0.0	0.0.1	
# ::edge	green	medium	eye	0	0.1	
(g / green 
      :ARG1-of (f / float-01 
            :ARG0 (e2 / everything 
                  :location (i / ice) 
                  :mod (n / now)) 
            :ARG2 (g2 / green)) 
      :medium (e / eye))

# ::snt the pond water  crowfoot has broadlobed leaves which float on the still surface in addition to  dissected underwater foliage
# ::tok the pond water crowfoot has broadlobed leaves which float on the still surface in addition to dissected underwater foliage
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:56.811
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt pain and anger floated down the slow stream with the debris of the nights celebration
# ::tok pain and anger floated down the slow stream with the debris of the nights celebration
# ::alignments 14-15|0.2.0 13-14|0.2.0.0 10-11|0.0.0.0 7-8|0.0.0 4-5|0.0.0.1 3-4|0.0 2-3|0.2 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:56.844
# ::node	0	and	1-2
# ::node	0.0	float-01	3-4
# ::node	0.0.0	stream-02	7-8
# ::node	0.0.0.0	debris	10-11
# ::node	0.0.0.1	down	4-5
# ::node	0.1	pain-01	0-1
# ::node	0.2	anger-01	2-3
# ::node	0.2.0	celebrate-02	14-15
# ::node	0.2.0.0	night	13-14
# ::root	0	and
# ::edge	and	op1	pain-01	0	0.1	
# ::edge	and	op2	anger-01	0	0.2	
# ::edge	anger-01	ARG1	celebrate-02	0.2	0.2.0	
# ::edge	celebrate-02	ARG1	night	0.2.0	0.2.0.0	
# ::edge	down	path	stream-02	0.0.0.1	0.0.0	
# ::edge	float-01	ARG0	and	0.0	0	
# ::edge	float-01	ARG1	stream-02	0.0	0.0.0	
# ::edge	stream-02	ARG1	debris	0.0.0	0.0.0.0	
(a2 / and 
      :ARG0-of (f / float-01 
            :ARG1 (s / stream-02 
                  :ARG1 (d / debris) 
                  :path-of (d2 / down))) 
      :op1 (p / pain-01) 
      :op2 (a / anger-01 
            :ARG1 (c / celebrate-02 
                  :ARG1 (n / night))))

# ::snt route 1  societies may choose to convert to public limited companies and float on the stock market as abbey national did last summer and offer their saving and borrowing members free or discounted shares
# ::tok route 1 societies may choose to convert to public limited companies and float on the stock market as abbey national did last summer and offer their saving and borrowing members free or discounted shares
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:56.845
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt ministers are resisting pressure from the water authorities for shares in the industry to be priced according to a common yield when they are floated on the stock market next month writes jeremy warner
# ::tok ministers are resisting pressure from the water authorities for shares in the industry to be priced according to a common yield when they are floated on the stock market next month writes jeremy warner
# ::alignments 31-32|0.0.3 30-31|0.0.3.0.0+0.0.3.0 29-30|0.0.3.0.0.0 28-29|0.0.2.1.0.1 27-28|0.0.2.1.0.1.0 24-25|0.0.2.1.0 22-23|0.0.2.1.0.0 20-21|0.0.2.1 19-20|0.0.2.1.1 15-16|0.0.2 12-13|0.0.2.0 9-10|0.0.2.0.0 7-8|0.0.0 6-7|0.0.0.0 3-4|0.0 2-3|0 0-1|0.0.1+0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:57.553
# ::node	0	resist-01	2-3
# ::node	0.0	pressure-01	3-4
# ::node	0.0.0	authority	7-8
# ::node	0.0.0.0	water	6-7
# ::node	0.0.1	minister	0-1
# ::node	0.0.1.0	have-org-role-91	0-1
# ::node	0.0.2	price-01	15-16
# ::node	0.0.2.0	industry	12-13
# ::node	0.0.2.0.0	share	9-10
# ::node	0.0.2.1	yield-02	20-21
# ::node	0.0.2.1.0	float-01	24-25
# ::node	0.0.2.1.0.0	they	22-23
# ::node	0.0.2.1.0.1	market	28-29
# ::node	0.0.2.1.0.1.0	stock	27-28
# ::node	0.0.2.1.1	common	19-20
# ::node	0.0.3	write-01	31-32
# ::node	0.0.3.0	temporal-quantity	30-31
# ::node	0.0.3.0.0	month	30-31
# ::node	0.0.3.0.0.0	next	29-30
# ::root	0	resist-01
# ::edge	authority	mod	water	0.0.0	0.0.0.0	
# ::edge	float-01	ARG0	yield-02	0.0.2.1.0	0.0.2.1	
# ::edge	float-01	ARG1	they	0.0.2.1.0	0.0.2.1.0.0	
# ::edge	float-01	ARG2	market	0.0.2.1.0	0.0.2.1.0.1	
# ::edge	have-org-role-91	ARG2	minister	0.0.1.0	0.0.1	
# ::edge	market	mod	stock	0.0.2.1.0.1	0.0.2.1.0.1.0	
# ::edge	month	mod	next	0.0.3.0.0	0.0.3.0.0.0	
# ::edge	pressure-01	ARG0	authority	0.0	0.0.0	
# ::edge	pressure-01	ARG1	minister	0.0	0.0.1	
# ::edge	price-01	ARG0	industry	0.0.2	0.0.2.0	
# ::edge	price-01	ARG1	pressure-01	0.0.2	0.0	
# ::edge	price-01	ARG2	yield-02	0.0.2	0.0.2.1	
# ::edge	resist-01	ARG1	pressure-01	0	0.0	
# ::edge	share	mod	industry	0.0.2.0.0	0.0.2.0	
# ::edge	temporal-quantity	unit	month	0.0.3.0	0.0.3.0.0	
# ::edge	write-01	ARG0	temporal-quantity	0.0.3	0.0.3.0	
# ::edge	write-01	ARG1	pressure-01	0.0.3	0.0	
# ::edge	yield-02	mod	common	0.0.2.1	0.0.2.1.1	
(r / resist-01 
      :ARG1 (p2 / pressure-01 
            :ARG0 (a / authority 
                  :mod (w2 / water)) 
            :ARG1 (m3 / minister 
                  :ARG2-of (h / have-org-role-91)) 
            :ARG1-of (p / price-01 
                  :ARG0 (i / industry 
                        :mod-of (s2 / share)) 
                  :ARG2 (y / yield-02 
                        :ARG0-of (f / float-01 
                              :ARG1 (t2 / they) 
                              :ARG2 (m2 / market 
                                    :mod (s / stock))) 
                        :mod (c / common))) 
            :ARG1-of (w / write-01 
                  :ARG0 (t / temporal-quantity 
                        :unit (m / month 
                              :mod (n / next))))))

# ::snt practise made it perfect  pupils from an oxford school floated into respectable positions in a national hovercraft racing competition
# ::tok practise made it perfect pupils from an oxford school floated into respectable positions in a national hovercraft racing competition
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:57.554
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt they found the building flooded out the  recumbent effigies of knights and their ladies seemed to float on a flat mirror of water ellip
# ::tok they found the building flooded out the recumbent effigies of knights and their ladies seemed to float on a flat mirror of water ellip
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:57.555
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt page 26 water yield  ministers are resisting pressure from the water authorities for shares in the industry to be priced according to a common yield when they are floated on the stock market next month
# ::tok page 26 water yield ministers are resisting pressure from the water authorities for shares in the industry to be priced according to a common yield when they are floated on the stock market next month
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:57.556
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt if the county council is charge capped then we sorely fear the bypass will float away into the distance said dr edwards
# ::tok if the county council is charge capped then we sorely fear the bypass will float away into the distance said dr edwards
# ::alignments 19-20|0 18-19|0.0.1.1.0.0 15-16|0.0.1.1.0.1 14-15|0.0.1.1.0 12-13|0.0.1.1 10-11|0.0.1 8-9|0.0.1.0 7-8|0.0.1.2 6-7|0.0 3-4|0.0.0 2-3|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:57.703
# ::node	0	say-01	19-20
# ::node	0.0	cap-01	6-7
# ::node	0.0.0	council	3-4
# ::node	0.0.0.0	county	2-3
# ::node	0.0.1	fear-01	10-11
# ::node	0.0.1.0	we	8-9
# ::node	0.0.1.1	bypass	12-13
# ::node	0.0.1.1.0	float-01	14-15
# ::node	0.0.1.1.0.0	distance-01	18-19
# ::node	0.0.1.1.0.1	away	15-16
# ::node	0.0.1.2	then	7-8
# ::root	0	say-01
# ::edge	cap-01	ARG0	council	0.0	0.0.0	
# ::edge	cap-01	ARG1	fear-01	0.0	0.0.1	
# ::edge	council	mod	county	0.0.0	0.0.0.0	
# ::edge	fear-01	ARG0	we	0.0.1	0.0.1.0	
# ::edge	fear-01	ARG1	bypass	0.0.1	0.0.1.1	
# ::edge	fear-01	time	then	0.0.1	0.0.1.2	
# ::edge	float-01	ARG0	bypass	0.0.1.1.0	0.0.1.1	
# ::edge	float-01	ARG1	distance-01	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	float-01	ARG2	away	0.0.1.1.0	0.0.1.1.0.1	
# ::edge	say-01	ARG1	cap-01	0	0.0	
(s / say-01 
      :ARG1 (c / cap-01 
            :ARG0 (c2 / council 
                  :mod (c3 / county)) 
            :ARG1 (f2 / fear-01 
                  :ARG0 (w / we) 
                  :ARG1 (b / bypass 
                        :ARG0-of (f / float-01 
                              :ARG1 (d / distance-01) 
                              :ARG2 (a / away))) 
                  :time (t / then))))

# ::snt lord bertie denham the bluff and genial chief whip who floated between the lords whites and pratts proffering a glass of whisky to any peer tempted to vote against a government bill likes to maintain that there is no inbuilt conservative majority in the lords and during the first two thatcher terms the government did indeed lose 111 votes
# ::tok lord bertie denham the bluff and genial chief whip who floated between the lords whites and pratts proffering a glass of whisky to any peer tempted to vote against a government bill likes to maintain that there is no inbuilt conservative majority in the lords and during the first two thatcher terms the government did indeed lose 111 votes
# ::alignments 58-59|0.0.2 56-57|0.0 55-56|0.0.3 51-52|0.0.0 49-50|0.0.1.1.0.1 45-46|0 44-45|0.1.1 41-42|0.1 40-41|0.1.0 38-39|0.0.2.0 34-35|0.0.1 32-33|0.0.1.2 31-32|0.0.1.1 27-28|0.0.1.1.0 24-25|0.0.1.1.0.0 23-24|0.0.1.2.1.1.0.0 19-20|0.0.1.3 15-16|0.0.1.0 14-15|0.0.1.2.0.0+0.0.1.2.0 13-14|0.0.1.2.1.0.0 11-12|0.0.1.2.1.0 10-11|0.0.1.2.1 7-8|0.0.1.2.1.1.0.1.0+0.0.1.2.1.1.0.1 5-6|0.0.1.2.1.1 4-5|0.0.1.2.1.1.0 0-1|0.0.1.2.1.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:59.484
# ::node	0	and	45-46
# ::node	0.0	lose-02	56-57
# ::node	0.0.0	term	51-52
# ::node	0.0.1	maintain-01	34-35
# ::node	0.0.1.0	and	15-16
# ::node	0.0.1.1	bill	31-32
# ::node	0.0.1.1.0	vote-01	27-28
# ::node	0.0.1.1.0.0	peer	24-25
# ::node	0.0.1.1.0.1	2	49-50
# ::node	0.0.1.2	like-01	32-33
# ::node	0.0.1.2.0	person	14-15
# ::node	0.0.1.2.0.0	white	14-15
# ::node	0.0.1.2.1	float-01	10-11
# ::node	0.0.1.2.1.0	between	11-12
# ::node	0.0.1.2.1.0.0	lord	13-14
# ::node	0.0.1.2.1.1	and	5-6
# ::node	0.0.1.2.1.1.0	bluff-01	4-5
# ::node	0.0.1.2.1.1.0.0	any	23-24
# ::node	0.0.1.2.1.1.0.1	have-org-role-91	7-8
# ::node	0.0.1.2.1.1.0.1.0	chief	7-8
# ::node	0.0.1.2.1.1.1	lord	0-1
# ::node	0.0.1.3	glass	19-20
# ::node	0.0.2	vote-01	58-59
# ::node	0.0.2.0	-	38-39
# ::node	0.0.3	indeed	55-56
# ::node	0.1	majority	41-42
# ::node	0.1.0	conservative	40-41
# ::node	0.1.1	lord	44-45
# ::root	0	and
# ::edge	2	op1	vote-01	0.0.1.1.0.1	0.0.1.1.0	
# ::edge	and	op1	bluff-01	0.0.1.2.1.1	0.0.1.2.1.1.0	
# ::edge	and	op1	majority	0	0.1	
# ::edge	and	op2	float-01	0.0.1.2.1.1	0.0.1.2.1	
# ::edge	between	op1	lord	0.0.1.2.1.0	0.0.1.2.1.0.0	
# ::edge	bluff-01	ARG1	any	0.0.1.2.1.1.0	0.0.1.2.1.1.0.0	
# ::edge	float-01	ARG1	like-01	0.0.1.2.1	0.0.1.2	
# ::edge	float-01	ARG2	between	0.0.1.2.1	0.0.1.2.1.0	
# ::edge	have-org-role-91	ARG2	chief	0.0.1.2.1.1.0.1	0.0.1.2.1.1.0.1.0	
# ::edge	have-org-role-91	time	bluff-01	0.0.1.2.1.1.0.1	0.0.1.2.1.1.0	
# ::edge	like-01	ARG0	person	0.0.1.2	0.0.1.2.0	
# ::edge	like-01	ARG1	maintain-01	0.0.1.2	0.0.1	
# ::edge	lord	quant	majority	0.1.1	0.1	
# ::edge	lord	source	and	0.0.1.2.1.1.1	0.0.1.2.1.1	
# ::edge	lose-02	ARG0	and	0.0	0	
# ::edge	lose-02	ARG1	term	0.0	0.0.0	
# ::edge	lose-02	ARG2	maintain-01	0.0	0.0.1	
# ::edge	lose-02	compared-to	vote-01	0.0	0.0.2	
# ::edge	lose-02	manner	indeed	0.0	0.0.3	
# ::edge	maintain-01	ARG0	and	0.0.1	0.0.1.0	
# ::edge	maintain-01	ARG1	bill	0.0.1	0.0.1.1	
# ::edge	maintain-01	ARG2	glass	0.0.1	0.0.1.3	
# ::edge	majority	mod	conservative	0.1	0.1.0	
# ::edge	person	mod	white	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	vote-01	ARG0	-	0.0.2	0.0.2.0	
# ::edge	vote-01	ARG0	peer	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	vote-01	ARG1	bill	0.0.1.1.0	0.0.1.1	
(a / and 
      :ARG0-of (l / lose-02 
            :ARG1 (t / term) 
            :ARG2 (m2 / maintain-01 
                  :ARG0 (a3 / and) 
                  :ARG1 (b / bill 
                        :ARG1-of (v2 / vote-01 
                              :ARG0 (p / peer) 
                              :op-of 2)) 
                  :ARG1-of (l3 / like-01 
                        :ARG0 (p2 / person 
                              :mod (w / white)) 
                        :ARG1-of (f / float-01 
                              :ARG2 (b2 / between 
                                    :op1 (l4 / lord)) 
                              :op-of (a4 / and 
                                    :op1 (b3 / bluff-01 
                                          :ARG1 (a2 / any) 
                                          :time-of (h / have-org-role-91 
                                                :ARG2 (c2 / chief))) 
                                    :source-of (l5 / lord)))) 
                  :ARG2 (g / glass)) 
            :compared-to (v / vote-01 
                  :ARG0 (- / -)) 
            :manner (i / indeed)) 
      :op1 (m / majority 
            :mod (c / conservative) 
            :quant-of (l2 / lord)))

# ::snt dust floated in the beams of light that flooded through the fanlight over the front door
# ::tok dust floated in the beams of light that flooded through the fanlight over the front door
# ::alignments 15-16|0.0 14-15|0 8-9|0.1.1.0 6-7|0.1.1.0.0 4-5|0.1.1 1-2|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:59.538
# ::node	0	front	14-15
# ::node	0.0	door	15-16
# ::node	0.1	float-01	1-2
# ::node	0.1.0	dust	0-1
# ::node	0.1.1	beam	4-5
# ::node	0.1.1.0	flood-01	8-9
# ::node	0.1.1.0.0	light	6-7
# ::root	0	front
# ::edge	door	mod	front	0.0	0	
# ::edge	float-01	ARG0	dust	0.1	0.1.0	
# ::edge	float-01	ARG1	beam	0.1	0.1.1	
# ::edge	flood-01	ARG0	beam	0.1.1.0	0.1.1	
# ::edge	flood-01	ARG1	light	0.1.1.0	0.1.1.0.0	
# ::edge	front	op1	float-01	0	0.1	
(f / front 
      :mod-of (d / door) 
      :op1 (f3 / float-01 
            :ARG0 (d2 / dust) 
            :ARG1 (b / beam 
                  :ARG0-of (f2 / flood-01 
                        :ARG1 (l / light)))))

# ::snt gascoigne found the target with a freekick floated over the wall but pushed away by pagliuca
# ::tok gascoigne found the target with a freekick floated over the wall but pushed away by pagliuca
# ::alignments 13-14|0.1.0 12-13|0.1 11-12|0 10-11|0.0.0.0.0 7-8|0.0.0.0 3-4|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:59.606
# ::node	0	contrast-01	11-12
# ::node	0.0	find-01	1-2
# ::node	0.0.0	target-01	3-4
# ::node	0.0.0.0	float-01	7-8
# ::node	0.0.0.0.0	wall	10-11
# ::node	0.1	push-01	12-13
# ::node	0.1.0	away	13-14
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	find-01	0	0.0	
# ::edge	contrast-01	ARG2	push-01	0	0.1	
# ::edge	find-01	ARG1	target-01	0.0	0.0.0	
# ::edge	float-01	ARG1	wall	0.0.0.0	0.0.0.0.0	
# ::edge	push-01	direction	away	0.1	0.1.0	
# ::edge	target-01	ARG1	float-01	0.0.0	0.0.0.0	
(c / contrast-01 
      :ARG1 (f2 / find-01 
            :ARG1 (t / target-01 
                  :ARG1 (f / float-01 
                        :ARG1 (w / wall)))) 
      :ARG2 (p / push-01 
            :direction (a / away)))

# ::snt serve very hot with chopped chives floating in each bowl or pour into small individual ramekins with chopped chives or other herbs arranged on top and chill
# ::tok serve very hot with chopped chives floating in each bowl or pour into small individual ramekins with chopped chives or other herbs arranged on top and chill
# ::alignments 26-27|0.2 25-26|0 24-25|0.1 22-23|0.0 20-21|0.0.1.0.0.0.1.0 19-20|0.0.1 14-15|0.0.1.0.0.0.1.1 13-14|0.2.0 11-12|0.0.1.0 10-11|0.0.1.0.0 8-9|0.0.0 6-7|0.0.1.0.0.0.1 2-3|0.0.1.0.0.0.0 1-2|0.0.1.0.0.0.0.0 0-1|0.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:10:59.852
# ::node	0	and	25-26
# ::node	0.0	arrange-01	22-23
# ::node	0.0.0	each	8-9
# ::node	0.0.1	or	19-20
# ::node	0.0.1.0	pour-01	11-12
# ::node	0.0.1.0.0	or	10-11
# ::node	0.0.1.0.0.0	serve-01	0-1
# ::node	0.0.1.0.0.0.0	hot	2-3
# ::node	0.0.1.0.0.0.0.0	very	1-2
# ::node	0.0.1.0.0.0.1	float-01	6-7
# ::node	0.0.1.0.0.0.1.0	other	20-21
# ::node	0.0.1.0.0.0.1.1	individual	14-15
# ::node	0.1	top	24-25
# ::node	0.2	chill-01	26-27
# ::node	0.2.0	small	13-14
# ::root	0	and
# ::edge	and	op1	top	0	0.1	
# ::edge	and	op2	chill-01	0	0.2	
# ::edge	arrange-01	ARG0	each	0.0	0.0.0	
# ::edge	arrange-01	ARG1	or	0.0	0.0.1	
# ::edge	arrange-01	ARG2	and	0.0	0	
# ::edge	chill-01	ARG0	small	0.2	0.2.0	
# ::edge	float-01	ARG0	other	0.0.1.0.0.0.1	0.0.1.0.0.0.1.0	
# ::edge	float-01	ARG1	individual	0.0.1.0.0.0.1	0.0.1.0.0.0.1.1	
# ::edge	hot	degree	very	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0	
# ::edge	or	op1	serve-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	or	op2	pour-01	0.0.1.0.0	0.0.1.0	
# ::edge	pour-01	location	or	0.0.1.0	0.0.1	
# ::edge	serve-01	ARG1	hot	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	serve-01	time	float-01	0.0.1.0.0.0	0.0.1.0.0.0.1	
(a / and 
      :ARG2-of (a2 / arrange-01 
            :ARG0 (e / each) 
            :ARG1 (o2 / or 
                  :location-of (p / pour-01 
                        :op-of (o3 / or 
                              :op1 (s2 / serve-01 
                                    :ARG1 (h / hot 
                                          :degree (v / very)) 
                                    :time (f / float-01 
                                          :ARG0 (o / other) 
                                          :ARG1 (i / individual))))))) 
      :op1 (t / top) 
      :op2 (c / chill-01 
            :ARG0 (s / small)))

# ::snt police mounted a major search of the river thames at oxford early today after a passerby spotted a floating body, a man walking across folly bridge at midnight called in police after he saw what he thought was the body of a child floating past
# ::tok police mounted a major search of the river thames at oxford early today after a passerby spotted a floating body , a man walking across folly bridge at midnight called in police after he saw what he thought was the body of a child floating past
# ::alignments 45-46|0.3.1 44-45|0.3 43-44|0.3.0 40-41|0.1 37-38|0 36-37|0.0 34-35|0.2 33-34|0.2.0 32-33|0.2.2 31-32|0.2.1.1.0 28-29|0.2.2.0 26-27|0.2.2.0.0 24-25|0.2.2.0.0.0 23-24|0.2.1.0 22-23|0.2.1 19-20|0.2.1.1.1 18-19|0.2.1.1 16-17|0.2.1.1.2 13-14|0.2.1.1.2.1 12-13|0.2.1.1.2.1.0 11-12|0.2.1.1.2.1.0.0 7-8|0.2.1.1.2.0.0.0 4-5|0.2.1.1.2.0.0 3-4|0.2.1.1.2.0.0.1 0-1|0.2.1.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:02.159
# ::node	0	think-01	37-38
# ::node	0.0	he	36-37
# ::node	0.1	body	40-41
# ::node	0.2	see-01	34-35
# ::node	0.2.0	he	33-34
# ::node	0.2.1	man	22-23
# ::node	0.2.1.0	walk-01	23-24
# ::node	0.2.1.1	float-01	18-19
# ::node	0.2.1.1.0	police	31-32
# ::node	0.2.1.1.1	body	19-20
# ::node	0.2.1.1.2	spot-01	16-17
# ::node	0.2.1.1.2.0	police	0-1
# ::node	0.2.1.1.2.0.0	search-01	4-5
# ::node	0.2.1.1.2.0.0.0	river	7-8
# ::node	0.2.1.1.2.0.0.1	major	3-4
# ::node	0.2.1.1.2.1	after	13-14
# ::node	0.2.1.1.2.1.0	today	12-13
# ::node	0.2.1.1.2.1.0.0	early	11-12
# ::node	0.2.2	after	32-33
# ::node	0.2.2.0	midnight	28-29
# ::node	0.2.2.0.0	bridge	26-27
# ::node	0.2.2.0.0.0	across	24-25
# ::node	0.3	float-01	44-45
# ::node	0.3.0	child	43-44
# ::node	0.3.1	past	45-46
# ::root	0	think-01
# ::edge	across	op1	bridge	0.2.2.0.0.0	0.2.2.0.0	
# ::edge	after	op1	midnight	0.2.2	0.2.2.0	
# ::edge	after	op1	today	0.2.1.1.2.1	0.2.1.1.2.1.0	
# ::edge	after	op2	see-01	0.2.2	0.2	
# ::edge	after	op2	spot-01	0.2.1.1.2.1	0.2.1.1.2	
# ::edge	bridge	mod	midnight	0.2.2.0.0	0.2.2.0	
# ::edge	early	time	today	0.2.1.1.2.1.0.0	0.2.1.1.2.1.0	
# ::edge	float-01	ARG0	child	0.3	0.3.0	
# ::edge	float-01	ARG0	police	0.2.1.1	0.2.1.1.0	
# ::edge	float-01	ARG1	body	0.2.1.1	0.2.1.1.1	
# ::edge	float-01	ARG1	past	0.3	0.3.1	
# ::edge	float-01	concession	man	0.2.1.1	0.2.1	
# ::edge	search-01	ARG0	police	0.2.1.1.2.0.0	0.2.1.1.2.0	
# ::edge	search-01	ARG1	river	0.2.1.1.2.0.0	0.2.1.1.2.0.0.0	
# ::edge	search-01	mod	major	0.2.1.1.2.0.0	0.2.1.1.2.0.0.1	
# ::edge	see-01	ARG0	he	0.2	0.2.0	
# ::edge	see-01	ARG1	think-01	0.2	0	
# ::edge	see-01	ARG2	man	0.2	0.2.1	
# ::edge	spot-01	ARG0	police	0.2.1.1.2	0.2.1.1.2.0	
# ::edge	spot-01	ARG1	float-01	0.2.1.1.2	0.2.1.1	
# ::edge	think-01	ARG0	he	0	0.0	
# ::edge	think-01	ARG1	body	0	0.1	
# ::edge	think-01	source	float-01	0	0.3	
# ::edge	walk-01	ARG1	man	0.2.1.0	0.2.1	
(t / think-01 
      :ARG0 (h / he) 
      :ARG1 (b / body) 
      :ARG1-of (s / see-01 
            :ARG0 (h2 / he) 
            :ARG2 (m2 / man 
                  :ARG1-of (w / walk-01) 
                  :concession-of (f2 / float-01 
                        :ARG0 (p2 / police) 
                        :ARG1 (b3 / body) 
                        :ARG1-of (s2 / spot-01 
                              :ARG0 (p3 / police 
                                    :ARG0-of (s3 / search-01 
                                          :ARG1 (r / river) 
                                          :mod (m3 / major))) 
                              :op-of (a3 / after 
                                    :op1 (t2 / today 
                                          :time-of (e / early)))))) 
            :op-of (a / after 
                  :op1 (m / midnight 
                        :mod-of (b2 / bridge 
                              :op-of (a2 / across))))) 
      :source (f / float-01 
            :ARG0 (c / child) 
            :ARG1 (p / past)))

# ::snt her body was always ready to accept the exquisite pleasure he gave her and she could always let her mind float away
# ::tok her body was always ready to accept the exquisite pleasure he gave her and she could always let her mind float away
# ::alignments 21-22|0.0.0.3 20-21|0.0.0 19-20|0.0.0.1 17-18|0.0 16-17|0.0.1 15-16|0 14-15|0.0.0.0.0 13-14|0.0.0.0 10-11|0.0.0.2 9-10|0.0.0.2.0.0 6-7|0.0.0.2.0 4-5|0.0.0.2.0.1 3-4|0.0.0.2.0.1.1 1-2|0.0.0.2.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:02.526
# ::node	0	possible	15-16
# ::node	0.0	let-01	17-18
# ::node	0.0.0	float-01	20-21
# ::node	0.0.0.0	and	13-14
# ::node	0.0.0.0.0	she	14-15
# ::node	0.0.0.1	mind	19-20
# ::node	0.0.0.2	he	10-11
# ::node	0.0.0.2.0	accept-01	6-7
# ::node	0.0.0.2.0.0	pleasure	9-10
# ::node	0.0.0.2.0.1	ready-01	4-5
# ::node	0.0.0.2.0.1.0	body	1-2
# ::node	0.0.0.2.0.1.1	always	3-4
# ::node	0.0.0.3	away	21-22
# ::node	0.0.1	always	16-17
# ::root	0	possible
# ::edge	accept-01	ARG0	he	0.0.0.2.0	0.0.0.2	
# ::edge	accept-01	ARG1	pleasure	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	and	op1	she	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG0	and	0.0.0	0.0.0.0	
# ::edge	float-01	ARG1	mind	0.0.0	0.0.0.1	
# ::edge	float-01	ARG3	he	0.0.0	0.0.0.2	
# ::edge	float-01	direction	away	0.0.0	0.0.0.3	
# ::edge	let-01	ARG1	float-01	0.0	0.0.0	
# ::edge	let-01	time	always	0.0	0.0.1	
# ::edge	possible	domain	let-01	0	0.0	
# ::edge	ready-01	ARG1	body	0.0.0.2.0.1	0.0.0.2.0.1.0	
# ::edge	ready-01	ARG2	accept-01	0.0.0.2.0.1	0.0.0.2.0	
# ::edge	ready-01	time	always	0.0.0.2.0.1	0.0.0.2.0.1.1	
(p / possible 
      :domain (l / let-01 
            :ARG1 (f / float-01 
                  :ARG0 (a3 / and 
                        :op1 (s / she)) 
                  :ARG1 (m / mind) 
                  :ARG3 (h / he 
                        :ARG0-of (a4 / accept-01 
                              :ARG1 (p2 / pleasure) 
                              :ARG2-of (r / ready-01 
                                    :ARG1 (b / body) 
                                    :time (a5 / always)))) 
                  :direction (a / away)) 
            :time (a2 / always)))

# ::snt pendragon the garages group floated from williams holdings traded at 83p and sempernova which has a fruit preservation process started at 40p reaching 45p
# ::tok pendragon the garages group floated from williams holdings traded at 83p and sempernova which has a fruit preservation process started at 40p reaching 45p
# ::alignments 22-23|0.1.1.0 19-20|0.1 18-19|0.1.1 16-17|0.1.0 11-12|0 8-9|0.0 7-8|0.0.0 4-5|0.0.0.0 3-4|0.0.0.0.0 2-3|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:02.784
# ::node	0	and	11-12
# ::node	0.0	trade-01	8-9
# ::node	0.0.0	hold-01	7-8
# ::node	0.0.0.0	float-01	4-5
# ::node	0.0.0.0.0	group	3-4
# ::node	0.0.0.0.0.0	garage	2-3
# ::node	0.1	start-01	19-20
# ::node	0.1.0	fruit	16-17
# ::node	0.1.1	process	18-19
# ::node	0.1.1.0	reach-01	22-23
# ::root	0	and
# ::edge	and	op1	start-01	0	0.1	
# ::edge	float-01	ARG1	group	0.0.0.0	0.0.0.0.0	
# ::edge	float-01	ARG2	hold-01	0.0.0.0	0.0.0	
# ::edge	group	mod	garage	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	process	purpose	start-01	0.1.1	0.1	
# ::edge	reach-01	ARG1	process	0.1.1.0	0.1.1	
# ::edge	start-01	ARG1	fruit	0.1	0.1.0	
# ::edge	trade-01	ARG1	hold-01	0.0	0.0.0	
# ::edge	trade-01	ARG2	and	0.0	0	
(a / and 
      :ARG2-of (t / trade-01 
            :ARG1 (h / hold-01 
                  :ARG2-of (f2 / float-01 
                        :ARG1 (g / group 
                              :mod (g2 / garage))))) 
      :op1 (s / start-01 
            :ARG1 (f / fruit) 
            :purpose-of (p / process 
                  :ARG1-of (r / reach-01))))

# ::snt one said the rational argument says that you cannot float agrs
# ::tok one said the rational argument says that you cannot float agrs
# ::alignments 9-10|0.0.0.0 7-8|0.0.0 5-6|0.0 4-5|0.0.1 3-4|0.0.1.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:02.822
# ::node	0	say-01	1-2
# ::node	0.0	say-01	5-6
# ::node	0.0.0	you	7-8
# ::node	0.0.0.0	float-01	9-10
# ::node	0.0.1	argue-01	4-5
# ::node	0.0.1.0	rational	3-4
# ::root	0	say-01
# ::edge	argue-01	mod	rational	0.0.1	0.0.1.0	
# ::edge	float-01	ARG0	you	0.0.0.0	0.0.0	
# ::edge	say-01	ARG0	you	0.0	0.0.0	
# ::edge	say-01	ARG1	argue-01	0.0	0.0.1	
# ::edge	say-01	ARG1	say-01	0	0.0	
(s2 / say-01 
      :ARG1 (s / say-01 
            :ARG0 (y / you 
                  :ARG0-of (f / float-01)) 
            :ARG1 (a / argue-01 
                  :mod (r / rational))))

# ::snt its worth it because its lovely when youre in the water youre of equal status with everyone else its nice to have the movement to float around unrestrained
# ::tok its worth it because its lovely when youre in the water youre of equal status with everyone else its nice to have the movement to float around unrestrained
# ::alignments 27-28|0.1.3+0.1 26-27|0.1.2.1 25-26|0.1.2 23-24|0.1.2.0 19-20|0 17-18|0.1.1.0.0.0 16-17|0.1.1.0.0 14-15|0.1.1.0 13-14|0.1.1 10-11|0.0 5-6|0.1.0.0.1 3-4|0.1.0.0 2-3|0.1.0 1-2|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:03.030
# ::node	0	nice-42	19-20
# ::node	0.0	water	10-11
# ::node	0.1	restrain-01	27-28
# ::node	0.1.0	it	2-3
# ::node	0.1.0.0	cause-01	3-4
# ::node	0.1.0.0.0	worth	1-2
# ::node	0.1.0.0.1	lovely	5-6
# ::node	0.1.1	equal-01	13-14
# ::node	0.1.1.0	status	14-15
# ::node	0.1.1.0.0	everyone	16-17
# ::node	0.1.1.0.0.0	else	17-18
# ::node	0.1.2	float-01	25-26
# ::node	0.1.2.0	movement	23-24
# ::node	0.1.2.1	around	26-27
# ::node	0.1.3	-	27-28
# ::root	0	nice-42
# ::edge	cause-01	ARG0	worth	0.1.0.0	0.1.0.0.0	
# ::edge	cause-01	ARG1	it	0.1.0.0	0.1.0	
# ::edge	cause-01	ARG2	lovely	0.1.0.0	0.1.0.0.1	
# ::edge	equal-01	ARG1	status	0.1.1	0.1.1.0	
# ::edge	everyone	mod	else	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	float-01	ARG0	movement	0.1.2	0.1.2.0	
# ::edge	float-01	ARG1	restrain-01	0.1.2	0.1	
# ::edge	float-01	location	around	0.1.2	0.1.2.1	
# ::edge	nice-42	ARG0	water	0	0.0	
# ::edge	nice-42	ARG1	restrain-01	0	0.1	
# ::edge	restrain-01	ARG0	it	0.1	0.1.0	
# ::edge	restrain-01	ARG1	equal-01	0.1	0.1.1	
# ::edge	restrain-01	polarity	-	0.1	0.1.3	
# ::edge	status	poss	everyone	0.1.1.0	0.1.1.0.0	
(n / nice-42 
      :ARG0 (w / water) 
      :ARG1 (r / restrain-01 
            :ARG0 (i / it 
                  :ARG1-of (c / cause-01 
                        :ARG0 (w2 / worth) 
                        :ARG2 (l / lovely))) 
            :ARG1 (e3 / equal-01 
                  :ARG1 (s / status 
                        :poss (e2 / everyone 
                              :mod (e / else)))) 
            :ARG1-of (f / float-01 
                  :ARG0 (m / movement) 
                  :location (a / around)) 
            :polarity -))

# ::snt also today comes anglian waters maiden results where high interest rates will have hit harder than was expected when the group was floated
# ::tok also today comes anglian waters maiden results where high interest rates will have hit harder than was expected when the group was floated
# ::alignments 22-23|0.1 20-21|0.1.0 17-18|0 14-15|0.3.2 13-14|0.3 10-11|0.3.0 9-10|0.3.0.0 8-9|0.3.0.0.0 6-7|0.3.1 4-5|0.3.1.0 1-2|0.2 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:03.142
# ::node	0	expect-01	17-18
# ::node	0.0	also	0-1
# ::node	0.1	float-01	22-23
# ::node	0.1.0	group	20-21
# ::node	0.2	today	1-2
# ::node	0.3	hit-01	13-14
# ::node	0.3.0	rate	10-11
# ::node	0.3.0.0	interest-01	9-10
# ::node	0.3.0.0.0	high	8-9
# ::node	0.3.1	result-01	6-7
# ::node	0.3.1.0	water	4-5
# ::node	0.3.2	hard	14-15
# ::root	0	expect-01
# ::edge	expect-01	ARG1	also	0	0.0	
# ::edge	expect-01	time	float-01	0	0.1	
# ::edge	expect-01	time	today	0	0.2	
# ::edge	float-01	ARG1	group	0.1	0.1.0	
# ::edge	hit-01	ARG0	rate	0.3	0.3.0	
# ::edge	hit-01	ARG1	result-01	0.3	0.3.1	
# ::edge	hit-01	manner	hard	0.3	0.3.2	
# ::edge	hit-01	time	expect-01	0.3	0	
# ::edge	interest-01	mod	high	0.3.0.0	0.3.0.0.0	
# ::edge	rate	mod	interest-01	0.3.0	0.3.0.0	
# ::edge	result-01	ARG1	water	0.3.1	0.3.1.0	
(e / expect-01 
      :ARG1 (a / also) 
      :time (f / float-01 
            :ARG1 (g / group)) 
      :time (t / today) 
      :time-of (h2 / hit-01 
            :ARG0 (r / rate 
                  :mod (i / interest-01 
                        :mod (h3 / high))) 
            :ARG1 (r2 / result-01 
                  :ARG1 (w / water)) 
            :manner (h / hard)))

# ::snt the current obsession with all things sporty unembellished and easy to wear has meant that there is a surfeit of ideas floating around with no fixed destination
# ::tok the current obsession with all things sporty unembellished and easy to wear has meant that there is a surfeit of ideas floating around with no fixed destination
# ::alignments 26-27|0 25-26|0.0 24-25|0.1.1.0.0 22-23|0.1.2 21-22|0.1 20-21|0.1.0 13-14|0.1.1 11-12|0.1.1.1 9-10|0.1.1.1.0 8-9|0.1.1.1.0.0 5-6|0.1.1.0.1 4-5|0.1.1.0.1.0 2-3|0.1.1.0 1-2|0.1.1.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:03.395
# ::node	0	destination	26-27
# ::node	0.0	fix-03	25-26
# ::node	0.1	float-01	21-22
# ::node	0.1.0	idea	20-21
# ::node	0.1.1	mean-01	13-14
# ::node	0.1.1.0	obsess-01	2-3
# ::node	0.1.1.0.0	-	24-25
# ::node	0.1.1.0.1	thing	5-6
# ::node	0.1.1.0.1.0	all	4-5
# ::node	0.1.1.0.2	current	1-2
# ::node	0.1.1.1	wear-01	11-12
# ::node	0.1.1.1.0	easy	9-10
# ::node	0.1.1.1.0.0	and	8-9
# ::node	0.1.2	around	22-23
# ::root	0	destination
(d / destination 
      :ARG1-of (f / fix-03) 
      :location-of (f2 / float-01 
            :ARG1 (i / idea) 
            :ARG1-of (m / mean-01 
                  :ARG0 (o / obsess-01 
                        :ARG0 (- / -) 
                        :ARG1 (t / thing 
                              :quant (a3 / all)) 
                        :time (c / current)) 
                  :ARG1-of (w / wear-01 
                        :domain-of (e / easy 
                              :op-of (a2 / and)))) 
            :location (a / around)))

# ::snt sempernova floated earlier this month at 40p a share on the third market continued to attract discreet support
# ::tok sempernova floated earlier this month at 40p a share on the third market continued to attract discreet support
# ::alignments 17-18|0.0.0.0 15-16|0.0.0 13-14|0.0.0.1 12-13|0.0 8-9|0 4-5|0.0.0.0.0.0.0+0.0.0.0.0.0.0.1 3-4|0.0.0.0.0.0.0.0 2-3|0.0.0.0.0.0 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:03.451
# ::node	0	share-01	8-9
# ::node	0.0	market	12-13
# ::node	0.0.0	attract-01	15-16
# ::node	0.0.0.0	support-01	17-18
# ::node	0.0.0.0.0	float-01	1-2
# ::node	0.0.0.0.0.0	early	2-3
# ::node	0.0.0.0.0.0.0	month	4-5
# ::node	0.0.0.0.0.0.0.0	this	3-4
# ::node	0.0.0.0.0.0.0.1	temporal-quantity	4-5
# ::node	0.0.0.1	continue-01	13-14
# ::root	0	share-01
# ::edge	attract-01	ARG0	market	0.0.0	0.0	
# ::edge	attract-01	ARG1	support-01	0.0.0	0.0.0.0	
# ::edge	continue-01	ARG1	attract-01	0.0.0.1	0.0.0	
# ::edge	float-01	ARG1	support-01	0.0.0.0.0	0.0.0.0	
# ::edge	float-01	time	early	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	month	mod	this	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	month	time	early	0.0.0.0.0.0.0	0.0.0.0.0.0	
# ::edge	share-01	ARG1	market	0	0.0	
# ::edge	temporal-quantity	unit	month	0.0.0.0.0.0.0.1	0.0.0.0.0.0.0	
(s2 / share-01 
      :ARG1 (m / market 
            :ARG0-of (a / attract-01 
                  :ARG1 (s / support-01 
                        :ARG1-of (f / float-01 
                              :time (e / early 
                                    :time-of (m2 / month 
                                          :mod (t2 / this) 
                                          :unit-of (t / temporal-quantity))))) 
                  :ARG1-of (c / continue-01))))

# ::snt and i found myself floating quite calmly above my body, i could float around the ward and even went outside into the snow
# ::tok and i found myself floating quite calmly above my body , i could float around the ward and even went outside into the snow
# ::alignments 23-24|0.0.2 20-21|0.0.1.0 17-18|0.0.3 16-17|0.0.3.0 14-15|0.0.3.0.0 13-14|0.0.3.0.1 12-13|0.0.3.0.1.1 11-12|0.0.3.0.1.0 9-10|0.0.1.1.0 7-8|0.0.1.1 5-6|0.0.1.2 4-5|0.0.1 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:03.689
# ::node	0	and	0-1
# ::node	0.0	find-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	float-01	4-5
# ::node	0.0.1.0	outside	20-21
# ::node	0.0.1.1	above	7-8
# ::node	0.0.1.1.0	body	9-10
# ::node	0.0.1.2	quite	5-6
# ::node	0.0.2	snow	23-24
# ::node	0.0.3	and	17-18
# ::node	0.0.3.0	ward-01	16-17
# ::node	0.0.3.0.0	around	14-15
# ::node	0.0.3.0.1	float-01	13-14
# ::node	0.0.3.0.1.0	i	11-12
# ::node	0.0.3.0.1.1	possible	12-13
# ::root	0	and
# ::edge	above	op1	body	0.0.1.1	0.0.1.1.0	
# ::edge	and	op1	find-01	0	0.0	
# ::edge	and	op1	find-01	0.0.3	0.0	
# ::edge	and	op2	ward-01	0.0.3	0.0.3.0	
# ::edge	find-01	ARG0	i	0.0	0.0.0	
# ::edge	find-01	ARG1	float-01	0.0	0.0.1	
# ::edge	find-01	location	snow	0.0	0.0.2	
# ::edge	float-01	ARG0	i	0.0.3.0.1	0.0.3.0.1.0	
# ::edge	float-01	ARG0	outside	0.0.1	0.0.1.0	
# ::edge	float-01	ARG1	above	0.0.1	0.0.1.1	
# ::edge	float-01	ARG1	ward-01	0.0.3.0.1	0.0.3.0	
# ::edge	float-01	manner	quite	0.0.1	0.0.1.2	
# ::edge	possible	domain	float-01	0.0.3.0.1.1	0.0.3.0.1	
# ::edge	ward-01	ARG1	around	0.0.3.0	0.0.3.0.0	
(a4 / and 
      :op1 (f3 / find-01 
            :ARG0 (i2 / i) 
            :ARG1 (f2 / float-01 
                  :ARG0 (o / outside) 
                  :ARG1 (a3 / above 
                        :op1 (b / body)) 
                  :manner (q / quite)) 
            :location (s / snow) 
            :op-of (a / and 
                  :op1 (w / ward-01 
                        :ARG1 (a2 / around) 
                        :ARG1-of (f / float-01 
                              :ARG0 (i / i) 
                              :domain-of (p / possible))))))

# ::snt however polygram shares will not be floated on the london stock exchange
# ::tok however polygram shares will not be floated on the london stock exchange
# ::alignments 11-12|0.1 10-11|0.1.0 9-10|0.1.1.0.0+0.1.1.0+0.1.1 6-7|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:03.757
# ::node	0	float-01	6-7
# ::node	0.0	share	2-3
# ::node	0.1	exchange-01	11-12
# ::node	0.1.0	stock	10-11
# ::node	0.1.1	city	9-10
# ::node	0.1.1.0	name	9-10
# ::node	0.1.1.0.0	"London"	9-10
# ::root	0	float-01
# ::edge	city	name	name	0.1.1	0.1.1.0	
# ::edge	exchange-01	ARG1	stock	0.1	0.1.0	
# ::edge	exchange-01	mod	city	0.1	0.1.1	
# ::edge	float-01	ARG1	share	0	0.0	
# ::edge	float-01	ARG2	exchange-01	0	0.1	
# ::edge	name	op1	"London"	0.1.1.0	0.1.1.0.0	
(f / float-01 
      :ARG1 (s2 / share) 
      :ARG2 (e / exchange-01 
            :ARG1 (s / stock) 
            :mod (c / city 
                  :name (n / name 
                        :op1 "London"))))

# ::snt quite often an authority will float suggestions for new roads or other projects long before it puts forward formal proposals
# ::tok quite often an authority will float suggestions for new roads or other projects long before it puts forward formal proposals
# ::alignments 19-20|0+0.0 18-19|0.0.1 17-18|0.0.0.1 16-17|0.0.0 15-16|0.0.0.0 14-15|0.0.0.2 12-13|0.0.0.2.0.1.0.1 11-12|0.0.0.2.0.1.0.1.0 10-11|0.0.0.2.0.1.0 9-10|0.0.0.2.0.1.0.0 8-9|0.0.0.2.0.1.1 6-7|0.0.0.2.0.1 5-6|0.0.0.2.0 3-4|0.0.0.2.0.0 1-2|0.0.0.2.0.2 0-1|0.0.0.2.0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:04.133
# ::node	0	propose-01	19-20
# ::node	0.0	thing	19-20
# ::node	0.0.0	put-01	16-17
# ::node	0.0.0.0	it	15-16
# ::node	0.0.0.1	forward	17-18
# ::node	0.0.0.2	before	14-15
# ::node	0.0.0.2.0	float-01	5-6
# ::node	0.0.0.2.0.0	authority	3-4
# ::node	0.0.0.2.0.1	suggest-01	6-7
# ::node	0.0.0.2.0.1.0	or	10-11
# ::node	0.0.0.2.0.1.0.0	road	9-10
# ::node	0.0.0.2.0.1.0.1	project	12-13
# ::node	0.0.0.2.0.1.0.1.0	other	11-12
# ::node	0.0.0.2.0.1.1	new	8-9
# ::node	0.0.0.2.0.2	often	1-2
# ::node	0.0.0.2.0.2.0	quite	0-1
# ::node	0.0.1	formal	18-19
# ::root	0	propose-01
# ::edge	before	op1	put-01	0.0.0.2	0.0.0	
# ::edge	float-01	ARG0	authority	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	float-01	ARG1	suggest-01	0.0.0.2.0	0.0.0.2.0.1	
# ::edge	float-01	frequency	often	0.0.0.2.0	0.0.0.2.0.2	
# ::edge	float-01	time	before	0.0.0.2.0	0.0.0.2	
# ::edge	often	mod	quite	0.0.0.2.0.2	0.0.0.2.0.2.0	
# ::edge	or	op1	road	0.0.0.2.0.1.0	0.0.0.2.0.1.0.0	
# ::edge	or	op2	project	0.0.0.2.0.1.0	0.0.0.2.0.1.0.1	
# ::edge	project	mod	other	0.0.0.2.0.1.0.1	0.0.0.2.0.1.0.1.0	
# ::edge	propose-01	ARG1	thing	0	0.0	
# ::edge	put-01	ARG0	it	0.0.0	0.0.0.0	
# ::edge	put-01	ARG1	thing	0.0.0	0.0	
# ::edge	put-01	direction	forward	0.0.0	0.0.0.1	
# ::edge	suggest-01	ARG1	or	0.0.0.2.0.1	0.0.0.2.0.1.0	
# ::edge	suggest-01	mod	new	0.0.0.2.0.1	0.0.0.2.0.1.1	
# ::edge	thing	mod	formal	0.0	0.0.1	
(p / propose-01 
      :ARG1 (t / thing 
            :ARG1-of (p2 / put-01 
                  :ARG0 (i / it) 
                  :direction (f2 / forward) 
                  :op-of (b / before 
                        :time-of (f3 / float-01 
                              :ARG0 (a / authority) 
                              :ARG1 (s / suggest-01 
                                    :ARG1 (o2 / or 
                                          :op1 (r / road) 
                                          :op2 (p3 / project 
                                                :mod (o / other))) 
                                    :mod (n / new)) 
                              :frequency (o3 / often 
                                    :mod (q / quite))))) 
            :mod (f / formal)))

# ::snt martin dodsworth knaresborough stick floated maggot during a heavy snow storm to win his clubs match on the nidd
# ::tok martin dodsworth knaresborough stick floated maggot during a heavy snow storm to win his clubs match on the nidd
# ::alignments 15-16|0.0 14-15|0 12-13|0.0.0 10-11|0.0.0.0 9-10|0.0.0.0.0 8-9|0.0.0.0.1 4-5|0.0.0.1 3-4|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:04.230
# ::node	0	club	14-15
# ::node	0.0	match-01	15-16
# ::node	0.0.0	win-01	12-13
# ::node	0.0.0.0	storm	10-11
# ::node	0.0.0.0.0	snow	9-10
# ::node	0.0.0.0.1	heavy	8-9
# ::node	0.0.0.1	float-01	4-5
# ::node	0.0.0.1.0	stick-01	3-4
# ::root	0	club
(c / club 
      :ARG1-of (m / match-01 
            :ARG1-of (w / win-01 
                  :ARG0 (s / storm 
                        :consist-of (s2 / snow) 
                        :mod (h / heavy)) 
                  :ARG2-of (f / float-01 
                        :ARG1 (s3 / stick-01)))))

# ::snt their sound is like coffee with cream on the top discreet basses underneath pale floating counter tenors above
# ::tok their sound is like coffee with cream on the top discreet basses underneath pale floating counter tenors above
# ::alignments 17-18|0.0.2 15-16|0.0.1 14-15|0.0 13-14|0.0.1.1 12-13|0 9-10|0.0.2.0 4-5|0.0.1.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:04.289
# ::node	0	underneath	12-13
# ::node	0.0	float-01	14-15
# ::node	0.0.0	sound	1-2
# ::node	0.0.1	counter-01	15-16
# ::node	0.0.1.0	coffee	4-5
# ::node	0.0.1.1	pale	13-14
# ::node	0.0.2	above	17-18
# ::node	0.0.2.0	top	9-10
# ::root	0	underneath
(u / underneath 
      :ARG1-of (f / float-01 
            :ARG0 (s / sound) 
            :ARG1-of (c / counter-01 
                  :ARG0 (c2 / coffee) 
                  :mod (p / pale)) 
            :ARG2 (a / above 
                  :op1 (t / top))))

# ::snt he it was who first floated the idea of forcible repatriation for the vietnamese boat people
# ::tok he it was who first floated the idea of forcible repatriation for the vietnamese boat people
# ::alignments 14-15|0.0 10-11|0 7-8|0.1 5-6|0.1.0 1-2|0.1.0.0 0-1|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:04.370
# ::node	0	repatriate-01	10-11
# ::node	0.0	boat	14-15
# ::node	0.1	idea	7-8
# ::node	0.1.0	float-01	5-6
# ::node	0.1.0.0	it	1-2
# ::node	0.1.0.0.0	he	0-1
# ::root	0	repatriate-01
# ::edge	float-01	ARG0	it	0.1.0	0.1.0.0	
# ::edge	float-01	ARG1	idea	0.1.0	0.1	
# ::edge	idea	topic	repatriate-01	0.1	0	
# ::edge	it	mod	he	0.1.0.0	0.1.0.0.0	
# ::edge	repatriate-01	ARG1	boat	0	0.0	
(r / repatriate-01 
      :ARG1 (b / boat) 
      :topic-of (i / idea 
            :ARG1-of (f / float-01 
                  :ARG0 (i2 / it 
                        :mod (h / he)))))

# ::snt their epoxy kevlar carbon and foam construction is virtually bulletproof it floats and is all but impossible to dispose of
# ::tok their epoxy kevlar carbon and foam construction is virtually bulletproof it floats and is all but impossible to dispose of
# ::alignments 15-16|0 14-15|0.0 12-13|0.1.0.0.1 11-12|0.1.0.0 10-11|0.1.0.0.0 9-10|0.1.0.0.1.0 8-9|0.1.0.0.1.0.0 6-7|0.1.0 4-5|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:04.511
# ::node	0	contrast-01	15-16
# ::node	0.0	all	14-15
# ::node	0.1	and	4-5
# ::node	0.1.0	construct-01	6-7
# ::node	0.1.0.0	float-01	11-12
# ::node	0.1.0.0.0	it	10-11
# ::node	0.1.0.0.1	and	12-13
# ::node	0.1.0.0.1.0	bullet	9-10
# ::node	0.1.0.0.1.0.0	virtual	8-9
# ::root	0	contrast-01
# ::edge	and	op1	bullet	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	and	op1	construct-01	0.1	0.1.0	
# ::edge	and	op2	float-01	0.1.0.0.1	0.1.0.0	
# ::edge	bullet	degree	virtual	0.1.0.0.1.0	0.1.0.0.1.0.0	
# ::edge	contrast-01	ARG1	all	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.1	
# ::edge	float-01	ARG0	construct-01	0.1.0.0	0.1.0	
# ::edge	float-01	ARG1	it	0.1.0.0	0.1.0.0.0	
(c / contrast-01 
      :ARG1 (a / all) 
      :ARG2 (a3 / and 
            :op1 (c2 / construct-01 
                  :ARG0-of (f / float-01 
                        :ARG1 (i / it) 
                        :op-of (a2 / and 
                              :op1 (b / bullet 
                                    :degree (v / virtual)))))))

# ::snt freddie the superannuated wether was so vast that he floated upright like a ninepin eyes rolling desperately
# ::tok freddie the superannuated wether was so vast that he floated upright like a ninepin eyes rolling desperately
# ::alignments 16-17|0.2 15-16|0 14-15|0.1 9-10|0.1.0 8-9|0.1.0.0 6-7|0.0 5-6|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:04.542
# ::node	0	roll-01	15-16
# ::node	0.0	vast	6-7
# ::node	0.0.0	so	5-6
# ::node	0.1	eye	14-15
# ::node	0.1.0	float-01	9-10
# ::node	0.1.0.0	he	8-9
# ::node	0.2	desperate	16-17
# ::root	0	roll-01
# ::edge	float-01	ARG0	he	0.1.0	0.1.0.0	
# ::edge	float-01	location	eye	0.1.0	0.1	
# ::edge	roll-01	ARG0	vast	0	0.0	
# ::edge	roll-01	ARG1	eye	0	0.1	
# ::edge	roll-01	manner	desperate	0	0.2	
# ::edge	vast	degree	so	0.0	0.0.0	
(r / roll-01 
      :ARG0 (v / vast 
            :degree (s / so)) 
      :ARG1 (e / eye 
            :location-of (f / float-01 
                  :ARG0 (h / he))) 
      :manner (d / desperate))

# ::snt the prospectuses for all 10 authorities about to be floated on the stock exchange contain a warning that additional expenditure may be required over and above the 10year investment programmes agreed with the government
# ::tok the prospectuses for all 10 authorities about to be floated on the stock exchange contain a warning that additional expenditure may be required over and above the 10year investment programmes agreed with the government
# ::alignments 30-31|0.1.1.2.0 29-30|0.1.1.2 28-29|0.1.1.2.1 25-26|0.1.1.1 24-25|0.1.1 22-23|0.1 20-21|0.1.1.0.0.0.0+0.1.1.0.0.0 19-20|0.1.0 18-19|0.1.0.1 16-17|0 14-15|0.1.1.0.0 13-14|0.1.1.0.1 12-13|0.1.1.0.1.0 9-10|0.1.1.0 5-6|0.0 4-5|0.1.0.0 3-4|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:04.866
# ::node	0	warn-01	16-17
# ::node	0.0	authority	5-6
# ::node	0.0.0	all	3-4
# ::node	0.1	require-01	22-23
# ::node	0.1.0	expend-01	19-20
# ::node	0.1.0.0	10	4-5
# ::node	0.1.0.1	additional	18-19
# ::node	0.1.1	and	24-25
# ::node	0.1.1.0	float-01	9-10
# ::node	0.1.1.0.0	contain-01	14-15
# ::node	0.1.1.0.0.0	date-entity	20-21
# ::node	0.1.1.0.0.0.0	5	20-21
# ::node	0.1.1.0.1	exchange-01	13-14
# ::node	0.1.1.0.1.0	stock	12-13
# ::node	0.1.1.1	above	25-26
# ::node	0.1.1.2	program	29-30
# ::node	0.1.1.2.0	agree-01	30-31
# ::node	0.1.1.2.1	invest-01	28-29
# ::root	0	warn-01
# ::edge	agree-01	ARG1	program	0.1.1.2.0	0.1.1.2	
# ::edge	and	op1	float-01	0.1.1	0.1.1.0	
# ::edge	and	op2	require-01	0.1.1	0.1	
# ::edge	and	op3	above	0.1.1	0.1.1.1	
# ::edge	and	op4	program	0.1.1	0.1.1.2	
# ::edge	authority	quant	all	0.0	0.0.0	
# ::edge	contain-01	ARG1	date-entity	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	date-entity	month	5	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	exchange-01	ARG1	stock	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	expend-01	ARG1	10	0.1.0	0.1.0.0	
# ::edge	expend-01	mod	additional	0.1.0	0.1.0.1	
# ::edge	float-01	ARG1	contain-01	0.1.1.0	0.1.1.0.0	
# ::edge	float-01	ARG2	exchange-01	0.1.1.0	0.1.1.0.1	
# ::edge	program	mod	invest-01	0.1.1.2	0.1.1.2.1	
# ::edge	require-01	ARG1	expend-01	0.1	0.1.0	
# ::edge	warn-01	ARG0	authority	0	0.0	
# ::edge	warn-01	ARG1	require-01	0	0.1	
(w / warn-01 
      :ARG0 (a5 / authority 
            :quant (a6 / all)) 
      :ARG1 (r / require-01 
            :ARG1 (e / expend-01 
                  :ARG1 10 
                  :mod (a4 / additional)) 
            :op-of (a3 / and 
                  :op1 (f / float-01 
                        :ARG1 (c / contain-01 
                              :ARG1 (d / date-entity 
                                    :month 5)) 
                        :ARG2 (e2 / exchange-01 
                              :ARG1 (s / stock))) 
                  :op2 (a2 / above) 
                  :op3 (p / program 
                        :ARG1-of (a / agree-01) 
                        :mod (i / invest-01)))))

# ::snt by putting services out to tender setting up nonprofit agencies to provide care or floating off their own work into selfmanaging units
# ::tok by putting services out to tender setting up nonprofit agencies to provide care or floating off their own work into selfmanaging units
# ::alignments 21-22|0.1.1.0 15-16|0.1.1.1 14-15|0.1.1 13-14|0.1 12-13|0.1.0.1 11-12|0.1.0 9-10|0.1.0.0 8-9|0.1.0.0.0 6-7|0 5-6|0.0 2-3|0.0.0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T01:11:05.052
# ::node	0	set-02	6-7
# ::node	0.0	tender	5-6
# ::node	0.0.0	put-01	1-2
# ::node	0.0.0.0	service	2-3
# ::node	0.1	or	13-14
# ::node	0.1.0	provide-01	11-12
# ::node	0.1.0.0	agency	9-10
# ::node	0.1.0.0.0	nonprofit	8-9
# ::node	0.1.0.1	care-01	12-13
# ::node	0.1.1	float-01	14-15
# ::node	0.1.1.0	unit	21-22
# ::node	0.1.1.1	off	15-16
# ::root	0	set-02
# ::edge	agency	mod	nonprofit	0.1.0.0	0.1.0.0.0	
# ::edge	float-01	ARG1	unit	0.1.1	0.1.1.0	
# ::edge	float-01	ARG2	off	0.1.1	0.1.1.1	
# ::edge	or	op1	set-02	0.1	0	
# ::edge	or	op2	float-01	0.1	0.1.1	
# ::edge	provide-01	ARG0	agency	0.1.0	0.1.0.0	
# ::edge	provide-01	ARG1	or	0.1.0	0.1	
# ::edge	provide-01	ARG2	care-01	0.1.0	0.1.0.1	
# ::edge	put-01	ARG1	service	0.0.0	0.0.0.0	
# ::edge	put-01	ARG2	tender	0.0.0	0.0	
# ::edge	set-02	ARG1	tender	0	0.0	
(s / set-02 
      :ARG1 (t / tender 
            :ARG2-of (p2 / put-01 
                  :ARG1 (s2 / service))) 
      :op-of (o2 / or 
            :ARG1-of (p / provide-01 
                  :ARG0 (a / agency 
                        :mod (n / nonprofit)) 
                  :ARG2 (c / care-01)) 
            :op1 (f / float-01 
                  :ARG1 (u / unit) 
                  :ARG2 (o / off))))

