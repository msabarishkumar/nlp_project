# ::snt well i will not bother you ever again
# ::tok well i will not bother you ever again
# ::alignments 7-8|0.2 6-7|0.2.0 5-6|0.1 4-5|0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:36.390
# ::node	0	bother-02	4-5
# ::node	0.0	i	1-2
# ::node	0.0.0	well	0-1
# ::node	0.1	you	5-6
# ::node	0.2	again	7-8
# ::node	0.2.0	ever	6-7
# ::root	0	bother-02
# ::edge	again	time	ever	0.2	0.2.0	
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	you	0	0.1	
# ::edge	bother-02	mod	again	0	0.2	
# ::edge	i	mod	well	0.0	0.0.0	
(b / bother-02 
      :ARG0 (i / i 
            :mod (w / well)) 
      :ARG1 (y / you) 
      :mod (a / again 
            :time (e / ever)))

# ::snt   i wouldnt be too bothered about him
# ::tok i wouldnt be too bothered about him
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:36.422
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt  are more likely to be eaten since your depression means that you cannot be bothered to cook a proper meal
# ::tok are more likely to be eaten since your depression means that you cannot be bothered to cook a proper meal
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:36.431
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt apparently all 22 players could read and they all realized that they neednt bother to play hard any more
# ::tok apparently all 22 players could read and they all realized that they neednt bother to play hard any more
# ::alignments 17-18|0.0.2.0.1.0.0.0 16-17|0.0.2.0.1.0.0.1 15-16|0.0.2.0.1.0.0 13-14|0.0.2.0.1 11-12|0.0.2.0.1.0 9-10|0.0.2.0 8-9|0.0.2.0.0.0 7-8|0.0.2.0.0 6-7|0.0.2 5-6|0.0 4-5|0 3-4|0.0.0.0+0.0.0 2-3|0.0.0.1 1-2|0.0.1 0-1|0.0.2.0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:39.167
# ::node	0	possible	4-5
# ::node	0.0	read-01	5-6
# ::node	0.0.0	person	3-4
# ::node	0.0.0.0	play-01	3-4
# ::node	0.0.0.1	22	2-3
# ::node	0.0.1	all	1-2
# ::node	0.0.2	and	6-7
# ::node	0.0.2.0	realize-02	9-10
# ::node	0.0.2.0.0	they	7-8
# ::node	0.0.2.0.0.0	all	8-9
# ::node	0.0.2.0.1	bother-02	13-14
# ::node	0.0.2.0.1.0	they	11-12
# ::node	0.0.2.0.1.0.0	play-01	15-16
# ::node	0.0.2.0.1.0.0.0	any	17-18
# ::node	0.0.2.0.1.0.0.1	hard	16-17
# ::node	0.0.2.0.1.1	apparent	0-1
# ::root	0	possible
# ::edge	and	op1	read-01	0.0.2	0.0	
# ::edge	bother-02	ARG0	they	0.0.2.0.1	0.0.2.0.1.0	
# ::edge	bother-02	ARG1	apparent	0.0.2.0.1	0.0.2.0.1.1	
# ::edge	person	quant	22	0.0.0	0.0.0.1	
# ::edge	play-01	ARG0	person	0.0.0.0	0.0.0	
# ::edge	play-01	ARG0	they	0.0.2.0.1.0.0	0.0.2.0.1.0	
# ::edge	play-01	ARG1	any	0.0.2.0.1.0.0	0.0.2.0.1.0.0.0	
# ::edge	play-01	mod	hard	0.0.2.0.1.0.0	0.0.2.0.1.0.0.1	
# ::edge	possible	domain	read-01	0	0.0	
# ::edge	read-01	ARG0	person	0.0	0.0.0	
# ::edge	read-01	ARG1	all	0.0	0.0.1	
# ::edge	realize-02	ARG0	they	0.0.2.0	0.0.2.0.0	
# ::edge	realize-02	ARG1	and	0.0.2.0	0.0.2	
# ::edge	realize-02	ARG2	bother-02	0.0.2.0	0.0.2.0.1	
# ::edge	they	quant	all	0.0.2.0.0	0.0.2.0.0.0	
(p2 / possible 
      :domain (r2 / read-01 
            :ARG0 (p3 / person 
                  :ARG0-of (p4 / play-01) 
                  :quant 22) 
            :ARG1 (a4 / all) 
            :op-of (a3 / and 
                  :ARG1-of (r / realize-02 
                        :ARG0 (t2 / they 
                              :quant (a2 / all)) 
                        :ARG2 (b / bother-02 
                              :ARG0 (t / they 
                                    :ARG0-of (p / play-01 
                                          :ARG1 (a / any) 
                                          :mod (h / hard))) 
                              :ARG1 (a5 / apparent))))))

# ::snt i think we make the most of having a good time which a lot of bands just dont bother saying
# ::tok i think we make the most of having a good time which a lot of bands just dont bother saying
# ::alignments 19-20|0 18-19|0.2 16-17|0.2.1.0.0 15-16|0.0.0 13-14|0.0 10-11|0.2.1 9-10|0.2.1.0 5-6|0.1.1 2-3|0.2.0 1-2|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:39.544
# ::node	0	say-01	19-20
# ::node	0.0	lot	13-14
# ::node	0.0.0	band	15-16
# ::node	0.1	think-01	1-2
# ::node	0.1.0	i	0-1
# ::node	0.1.1	most	5-6
# ::node	0.2	bother-02	18-19
# ::node	0.2.0	we	2-3
# ::node	0.2.1	time	10-11
# ::node	0.2.1.0	good	9-10
# ::node	0.2.1.0.0	just	16-17
# ::root	0	say-01
# ::edge	band	quant	lot	0.0.0	0.0	
# ::edge	bother-02	ARG0	we	0.2	0.2.0	
# ::edge	bother-02	ARG1	say-01	0.2	0	
# ::edge	bother-02	time	time	0.2	0.2.1	
# ::edge	good	mod	just	0.2.1.0	0.2.1.0.0	
# ::edge	say-01	ARG0	lot	0	0.0	
# ::edge	say-01	ARG1	think-01	0	0.1	
# ::edge	think-01	ARG0	i	0.1	0.1.0	
# ::edge	think-01	ARG1	most	0.1	0.1.1	
# ::edge	time	mod	good	0.2.1	0.2.1.0	
(s / say-01 
      :ARG0 (l / lot 
            :quant-of (b2 / band)) 
      :ARG1 (t2 / think-01 
            :ARG0 (i / i) 
            :ARG1 (m / most)) 
      :ARG1-of (b / bother-02 
            :ARG0 (w / we) 
            :time (t / time 
                  :mod (g / good 
                        :mod (j / just)))))

# ::snt   you see we dont usually bother very much about missing girls
# ::tok you see we dont usually bother very much about missing girls
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:39.557
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt dont bother would be more honest for he prefers to have the kitchen to himself in the early morning to prepare his own simple breakfast and enjoy the first cigarette of the day undisturbed
# ::tok dont bother would be more honest for he prefers to have the kitchen to himself in the early morning to prepare his own simple breakfast and enjoy the first cigarette of the day undisturbed
# ::alignments 32-33|0.1.0.0 29-30|0.1.0 26-27|0.1 25-26|0 23-24|0.0.1.0.0.0.0 20-21|0.0 18-19|0.0.0 17-18|0.0.0.0 8-9|0.0.1.0 7-8|0.0.1 5-6|0.0.1.0.0 1-2|0.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:39.850
# ::node	0	and	25-26
# ::node	0.0	prepare-02	20-21
# ::node	0.0.0	morning	18-19
# ::node	0.0.0.0	early	17-18
# ::node	0.0.1	he	7-8
# ::node	0.0.1.0	prefer-01	8-9
# ::node	0.0.1.0.0	honest	5-6
# ::node	0.0.1.0.0.0	bother-02	1-2
# ::node	0.0.1.0.0.0.0	simple	23-24
# ::node	0.1	enjoy-01	26-27
# ::node	0.1.0	cigarette	29-30
# ::node	0.1.0.0	day	32-33
# ::root	0	and
# ::edge	and	op1	prepare-02	0	0.0	
# ::edge	and	op2	enjoy-01	0	0.1	
# ::edge	bother-02	ARG1	simple	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	cigarette	time	day	0.1.0	0.1.0.0	
# ::edge	enjoy-01	ARG1	cigarette	0.1	0.1.0	
# ::edge	honest	domain	bother-02	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	morning	time	early	0.0.0	0.0.0.0	
# ::edge	prefer-01	ARG0	he	0.0.1.0	0.0.1	
# ::edge	prefer-01	concession	honest	0.0.1.0	0.0.1.0.0	
# ::edge	prepare-02	ARG0	morning	0.0	0.0.0	
# ::edge	prepare-02	ARG1	he	0.0	0.0.1	
(a / and 
      :op1 (p / prepare-02 
            :ARG0 (m / morning 
                  :time (e2 / early)) 
            :ARG1 (h / he 
                  :ARG0-of (p2 / prefer-01 
                        :concession (h2 / honest 
                              :domain (b / bother-02 
                                    :ARG1 (s / simple)))))) 
      :op2 (e / enjoy-01 
            :ARG1 (c / cigarette 
                  :time (d / day))))

# ::snt like when youre cooking for two and then you come down to cooking for one you dont bother do you
# ::tok like when youre cooking for two and then you come down to cooking for one you dont bother do you
# ::alignments 19-20|0.0 17-18|0 15-16|0.1 12-13|0.3 10-11|0.3.0 8-9|0.2.0.0 7-8|0.3.2 6-7|0.2 5-6|0.3.1 3-4|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:40.096
# ::node	0	bother-02	17-18
# ::node	0.0	you	19-20
# ::node	0.1	you	15-16
# ::node	0.2	and	6-7
# ::node	0.2.0	cook-01	3-4
# ::node	0.2.0.0	you	8-9
# ::node	0.3	cook-01	12-13
# ::node	0.3.0	down	10-11
# ::node	0.3.1	2	5-6
# ::node	0.3.2	then	7-8
# ::root	0	bother-02
# ::edge	and	op1	cook-01	0.2	0.2.0	
# ::edge	and	op2	bother-02	0.2	0	
# ::edge	bother-02	ARG0	you	0	0.0	
# ::edge	bother-02	ARG1	you	0	0.1	
# ::edge	cook-01	ARG0	down	0.3	0.3.0	
# ::edge	cook-01	ARG0	you	0.2.0	0.2.0.0	
# ::edge	cook-01	ARG1	2	0.3	0.3.1	
# ::edge	cook-01	prep-as	bother-02	0.3	0	
# ::edge	then	domain	cook-01	0.3.2	0.3	
(b / bother-02 
      :ARG0 (y / you) 
      :ARG1 (y2 / you) 
      :op-of (a / and 
            :op1 (c2 / cook-01 
                  :ARG0 (y3 / you))) 
      :prep-as-of (c / cook-01 
            :ARG0 (d / down) 
            :ARG1 2 
            :domain-of (t / then)))

# ::snt all these complications arose simply because someone thought a smaller cabin would be big enough but had not bothered to consult the professionals
# ::tok all these complications arose simply because someone thought a smaller cabin would be big enough but had not bothered to consult the professionals
# ::alignments 22-23|0.1.0.0 20-21|0.1.0 18-19|0.1 15-16|0 14-15|0.0.2.0.1.0 13-14|0.0.2.0.1 9-10|0.0.0 7-8|0.0.2.0 6-7|0.0.2.0.0 5-6|0.0.2 4-5|0.0.2.1 3-4|0.0 2-3|0.0.1 0-1|0.0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:40.499
# ::node	0	contrast-01	15-16
# ::node	0.0	arise-01	3-4
# ::node	0.0.0	small	9-10
# ::node	0.0.1	complication	2-3
# ::node	0.0.2	cause-01	5-6
# ::node	0.0.2.0	think-01	7-8
# ::node	0.0.2.0.0	someone	6-7
# ::node	0.0.2.0.1	big	13-14
# ::node	0.0.2.0.1.0	enough	14-15
# ::node	0.0.2.1	simple	4-5
# ::node	0.0.3	all	0-1
# ::node	0.1	bother-01	18-19
# ::node	0.1.0	consult-01	20-21
# ::node	0.1.0.0	professional	22-23
# ::root	0	contrast-01
# ::edge	arise-01	ARG0	small	0.0	0.0.0	
# ::edge	arise-01	ARG1	complication	0.0	0.0.1	
# ::edge	arise-01	quant	all	0.0	0.0.3	
# ::edge	big	degree	enough	0.0.2.0.1	0.0.2.0.1.0	
# ::edge	bother-01	ARG1	consult-01	0.1	0.1.0	
# ::edge	cause-01	ARG0	think-01	0.0.2	0.0.2.0	
# ::edge	cause-01	ARG1	arise-01	0.0.2	0.0	
# ::edge	cause-01	mod	simple	0.0.2	0.0.2.1	
# ::edge	consult-01	ARG1	professional	0.1.0	0.1.0.0	
# ::edge	contrast-01	ARG1	arise-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.1	
# ::edge	think-01	ARG0	someone	0.0.2.0	0.0.2.0.0	
# ::edge	think-01	ARG1	big	0.0.2.0	0.0.2.0.1	
(c2 / contrast-01 
      :ARG1 (a / arise-01 
            :ARG0 (s / small) 
            :ARG1 (c4 / complication) 
            :ARG1-of (c3 / cause-01 
                  :ARG0 (t / think-01 
                        :ARG0 (s2 / someone) 
                        :ARG1 (b2 / big 
                              :degree (e / enough))) 
                  :mod (s3 / simple)) 
            :quant (a2 / all)) 
      :ARG2 (b / bother-01 
            :ARG1 (c / consult-01 
                  :ARG1 (p / professional))))

# ::snt do look out for that if you can be bothered to remember
# ::tok do look out for that if you can be bothered to remember
# ::alignments 11-12|0.0.0.0 9-10|0.0 7-8|0 6-7|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:40.526
# ::node	0	possible	7-8
# ::node	0.0	bother-01	9-10
# ::node	0.0.0	you	6-7
# ::node	0.0.0.0	remember-01	11-12
# ::root	0	possible
# ::edge	bother-01	ARG1	you	0.0	0.0.0	
# ::edge	possible	domain	bother-01	0	0.0	
# ::edge	remember-01	ARG0	you	0.0.0.0	0.0.0	
(p / possible 
      :domain (b / bother-01 
            :ARG1 (y / you 
                  :ARG0-of (r / remember-01))))

# ::snt its name was changed to make things clear to the outside world from banbury county school to banbury grammar school in surrey they had not bothered with such fine adjustments although wallington county school was unambiguously a grammar school
# ::tok its name was changed to make things clear to the outside world from banbury county school to banbury grammar school in surrey they had not bothered with such fine adjustments although wallington county school was unambiguously a grammar school
# ::alignments 38-39|0.1.0 37-38|0.1.0.0 33-34|0.1 32-33|0.1.1 29-30|0 28-29|0.0 27-28|0.3 25-26|0.2 22-23|0.2.0 19-20|0.2.1 18-19|0.2.1.0 15-16|0.2.1.1 14-15|0.2.1.1.0 11-12|0.2.0.0.0.0.0 10-11|0.2.0.0.0.0.0.0 7-8|0.2.0.0.0.0 6-7|0.2.0.0.0 3-4|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:41.274
# ::node	0	adjust-01	29-30
# ::node	0.0	fine	28-29
# ::node	0.1	school	33-34
# ::node	0.1.0	school	38-39
# ::node	0.1.0.0	grammar	37-38
# ::node	0.1.1	county	32-33
# ::node	0.2	bother-01	25-26
# ::node	0.2.0	they	22-23
# ::node	0.2.0.0	change-01	3-4
# ::node	0.2.0.0.0	thing	6-7
# ::node	0.2.0.0.0.0	clear	7-8
# ::node	0.2.0.0.0.0.0	world	11-12
# ::node	0.2.0.0.0.0.0.0	outside	10-11
# ::node	0.2.1	school	19-20
# ::node	0.2.1.0	grammar	18-19
# ::node	0.2.1.1	school	15-16
# ::node	0.2.1.1.0	county	14-15
# ::node	0.3	such	27-28
# ::root	0	adjust-01
# ::edge	adjust-01	ARG1	fine	0	0.0	
# ::edge	adjust-01	ARG2	school	0	0.1	
# ::edge	adjust-01	mod	such	0	0.3	
# ::edge	bother-01	ARG0	they	0.2	0.2.0	
# ::edge	bother-01	ARG1	school	0.2	0.2.1	
# ::edge	bother-01	ARG2	adjust-01	0.2	0	
# ::edge	change-01	ARG0	they	0.2.0.0	0.2.0	
# ::edge	change-01	ARG1	thing	0.2.0.0	0.2.0.0.0	
# ::edge	clear	prep-to	world	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	school	domain	school	0.1.0	0.1	
# ::edge	school	mod	county	0.1	0.1.1	
# ::edge	school	mod	county	0.2.1.1	0.2.1.1.0	
# ::edge	school	mod	grammar	0.1.0	0.1.0.0	
# ::edge	school	mod	grammar	0.2.1	0.2.1.0	
# ::edge	school	poss	school	0.2.1.1	0.2.1	
# ::edge	thing	mod	clear	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	world	mod	outside	0.2.0.0.0.0.0	0.2.0.0.0.0.0.0	
(a / adjust-01 
      :ARG1 (f / fine) 
      :ARG2 (s2 / school 
            :domain-of (s / school 
                  :mod (g / grammar)) 
            :mod (c / county)) 
      :ARG2-of (b / bother-01 
            :ARG0 (t / they 
                  :ARG0-of (c4 / change-01 
                        :ARG1 (t2 / thing 
                              :mod (c3 / clear 
                                    :prep-to (w / world 
                                          :mod (o / outside)))))) 
            :ARG1 (s4 / school 
                  :mod (g2 / grammar) 
                  :poss-of (s5 / school 
                        :mod (c2 / county)))) 
      :mod (s3 / such))

# ::snt mps who had never bothered to attend before hurried northwards determined to plunge their daggers into some of the available backs
# ::tok mps who had never bothered to attend before hurried northwards determined to plunge their daggers into some of the available backs
# ::alignments 20-21|0 19-20|0.1 16-17|0.2 12-13|0.0 10-11|0.0.0 7-8|0.0.0.0 6-7|0.0.0.0.0 4-5|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:41.325
# ::node	0	back-04	20-21
# ::node	0.0	plunge-01	12-13
# ::node	0.0.0	determine-01	10-11
# ::node	0.0.0.0	before	7-8
# ::node	0.0.0.0.0	attend-01	6-7
# ::node	0.0.0.0.0.0	bother-01	4-5
# ::node	0.1	available	19-20
# ::node	0.2	some	16-17
# ::root	0	back-04
# ::edge	attend-01	time	before	0.0.0.0.0	0.0.0.0	
# ::edge	back-04	mod	available	0	0.1	
# ::edge	back-04	quant	some	0	0.2	
# ::edge	before	op1	determine-01	0.0.0.0	0.0.0	
# ::edge	bother-01	ARG1	attend-01	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	determine-01	ARG1	plunge-01	0.0.0	0.0	
# ::edge	plunge-01	ARG1	back-04	0.0	0	
(b / back-04 
      :ARG1-of (p / plunge-01 
            :ARG1-of (d / determine-01 
                  :op-of (b2 / before 
                        :time-of (a2 / attend-01 
                              :ARG1-of (b3 / bother-01))))) 
      :mod (a / available) 
      :quant (s / some))

# ::snt training alone has never bothered me at all but its nice to be able to go down the pub for a good chinwag after a session
# ::tok training alone has never bothered me at all but its nice to be able to go down the pub for a good chinwag after a session
# ::alignments 25-26|0.1.0.0.0.0 23-24|0.1.0.0.0 21-22|0.1.0.0.1 18-19|0.1.0.0.0.1 16-17|0.1.0.0.0.1.0 13-14|0.1 10-11|0.0.0 8-9|0 7-8|0.0 4-5|0.1.0 1-2|0.1.0.0.2 0-1|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:41.499
# ::node	0	contrast-01	8-9
# ::node	0.0	all	7-8
# ::node	0.0.0	nice-42	10-11
# ::node	0.1	possible	13-14
# ::node	0.1.0	bother-01	4-5
# ::node	0.1.0.0	train-01	0-1
# ::node	0.1.0.0.0	after	23-24
# ::node	0.1.0.0.0.0	session	25-26
# ::node	0.1.0.0.0.1	pub	18-19
# ::node	0.1.0.0.0.1.0	down	16-17
# ::node	0.1.0.0.1	good	21-22
# ::node	0.1.0.0.2	alone	1-2
# ::root	0	contrast-01
# ::edge	after	op1	session	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	bother-01	ARG0	train-01	0.1.0	0.1.0.0	
# ::edge	bother-01	ARG1	possible	0.1.0	0.1	
# ::edge	contrast-01	ARG1	all	0	0.0	
# ::edge	contrast-01	ARG2	possible	0	0.1	
# ::edge	down	path	pub	0.1.0.0.0.1.0	0.1.0.0.0.1	
# ::edge	nice-42	ARG1	all	0.0.0	0.0	
# ::edge	pub	time	after	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	train-01	ARG0	after	0.1.0.0	0.1.0.0.0	
# ::edge	train-01	ARG1	good	0.1.0.0	0.1.0.0.1	
# ::edge	train-01	mod	alone	0.1.0.0	0.1.0.0.2	
(c / contrast-01 
      :ARG1 (a2 / all 
            :ARG1-of (n / nice-42)) 
      :ARG2 (p2 / possible 
            :ARG1-of (b / bother-01 
                  :ARG0 (t / train-01 
                        :ARG0 (a / after 
                              :op1 (s / session) 
                              :time-of (p / pub 
                                    :path-of (d / down))) 
                        :ARG1 (g / good) 
                        :mod (a3 / alone)))))

# ::snt why bother
# ::tok why bother
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:41.503
# ::node	0	bother-02	1-2
# ::root	0	bother-02
(b / bother-02)

# ::snt   the ncc rounds off its booklet with a list of 10 guidelines for course developers survey the site evaluate it defuse any local notions that golf is anticonservation allow plenty of room in the design avoid sensitive areas in the layout take care of drainage sites dont bother designing the rough at the start itll become clear anyway plant native species manage the land sympathetically and keep people educated about what youre doing
# ::tok the ncc rounds off its booklet with a list of 10 guidelines for course developers survey the site evaluate it defuse any local notions that golf is anticonservation allow plenty of room in the design avoid sensitive areas in the layout take care of drainage sites dont bother designing the rough at the start itll become clear anyway plant native species manage the land sympathetically and keep people educated about what youre doing
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:41.504
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i dont bother to pick them up
# ::tok i dont bother to pick them up
# ::alignments 4-5|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:41.518
# ::node	0	bother-02	2-3
# ::node	0.0	i	0-1
# ::node	0.1	pick-01	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	pick-01	0	0.1	
(b / bother-02 
      :ARG0 (i / i) 
      :ARG1 (p / pick-01))

# ::snt but ive become scruffier and scruffier and although i do keep myself immaculately clean i cant be bothered about my clothes any more
# ::tok but ive become scruffier and scruffier and although i do keep myself immaculately clean i cant be bothered about my clothes any more
# ::alignments 21-22|0.0 20-21|0.0.0.1 17-18|0.0.0 14-15|0.0.0.0 13-14|0.0.0.0.0 8-9|0.1.0.0 6-7|0.1.0.1 4-5|0.1 2-3|0.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:41.854
# ::node	0	contrast-01	0-1
# ::node	0.0	any	21-22
# ::node	0.0.0	bother-01	17-18
# ::node	0.0.0.0	i	14-15
# ::node	0.0.0.0.0	clean	13-14
# ::node	0.0.0.1	clothes	20-21
# ::node	0.1	and	4-5
# ::node	0.1.0	become-01	2-3
# ::node	0.1.0.0	i	8-9
# ::node	0.1.0.1	and	6-7
# ::root	0	contrast-01
# ::edge	and	op1	become-01	0.1	0.1.0	
# ::edge	become-01	ARG1	i	0.1.0	0.1.0.0	
# ::edge	become-01	ARG2	and	0.1.0	0.1.0.1	
# ::edge	bother-01	ARG0	any	0.0.0	0.0	
# ::edge	bother-01	ARG1	i	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG2	clothes	0.0.0	0.0.0.1	
# ::edge	contrast-01	ARG1	any	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.1	
# ::edge	i	mod	clean	0.0.0.0	0.0.0.0.0	
(c3 / contrast-01 
      :ARG1 (a / any 
            :ARG0-of (b / bother-01 
                  :ARG1 (i / i 
                        :mod (c2 / clean)) 
                  :ARG2 (c / clothes))) 
      :ARG2 (a3 / and 
            :op1 (b2 / become-01 
                  :ARG1 (i2 / i) 
                  :ARG2 (a2 / and))))

# ::snt relatively few had bothered to examine green party policy in detail and most were unaware that the party was hostile to the ec and proposed reducing consumption in the interests of conservation
# ::tok relatively few had bothered to examine green party policy in detail and most were unaware that the party was hostile to the ec and proposed reducing consumption in the interests of conservation
# ::alignments 31-32|0.0.1.1.0.0.0.0.0 29-30|0.0.1.1.0.0.0.0 26-27|0.0.1.1.0.0.0 25-26|0.0.1.1.0.0 24-25|0.0.1.1.0 23-24|0.0.1.1 19-20|0.0.1.1.1 17-18|0.0.1.1.1.0 12-13|0.2.0 11-12|0 10-11|0.2 8-9|0.1 7-8|0.1.0 6-7|0.1.0.0 5-6|0.0 3-4|0.0.1 1-2|0.0.0 0-1|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:42.110
# ::node	0	and	11-12
# ::node	0.0	examine-01	5-6
# ::node	0.0.0	few	1-2
# ::node	0.0.1	bother-01	3-4
# ::node	0.0.1.0	relative	0-1
# ::node	0.0.1.1	and	23-24
# ::node	0.0.1.1.0	propose-01	24-25
# ::node	0.0.1.1.0.0	reduce-01	25-26
# ::node	0.0.1.1.0.0.0	consume-01	26-27
# ::node	0.0.1.1.0.0.0.0	interest	29-30
# ::node	0.0.1.1.0.0.0.0.0	conserve-01	31-32
# ::node	0.0.1.1.1	hostile	19-20
# ::node	0.0.1.1.1.0	party	17-18
# ::node	0.1	policy	8-9
# ::node	0.1.0	party	7-8
# ::node	0.1.0.0	green	6-7
# ::node	0.2	detail-01	10-11
# ::node	0.2.0	most	12-13
# ::root	0	and
# ::edge	and	op1	bother-01	0.0.1.1	0.0.1	
# ::edge	and	op1	policy	0	0.1	
# ::edge	and	op2	detail-01	0	0.2	
# ::edge	and	op2	propose-01	0.0.1.1	0.0.1.1.0	
# ::edge	bother-01	ARG0	relative	0.0.1	0.0.1.0	
# ::edge	bother-01	ARG1	examine-01	0.0.1	0.0	
# ::edge	consume-01	ARG1	interest	0.0.1.1.0.0.0	0.0.1.1.0.0.0.0	
# ::edge	detail-01	ARG1	most	0.2	0.2.0	
# ::edge	examine-01	ARG0	few	0.0	0.0.0	
# ::edge	examine-01	ARG1	and	0.0	0	
# ::edge	hostile	domain	party	0.0.1.1.1	0.0.1.1.1.0	
# ::edge	hostile	prep-to	and	0.0.1.1.1	0.0.1.1	
# ::edge	interest	topic	conserve-01	0.0.1.1.0.0.0.0	0.0.1.1.0.0.0.0.0	
# ::edge	party	mod	green	0.1.0	0.1.0.0	
# ::edge	policy	mod	party	0.1	0.1.0	
# ::edge	propose-01	ARG1	reduce-01	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	reduce-01	ARG1	consume-01	0.0.1.1.0.0	0.0.1.1.0.0.0	
(a2 / and 
      :ARG1-of (e / examine-01 
            :ARG0 (f / few) 
            :ARG1-of (b / bother-01 
                  :ARG0 (r2 / relative) 
                  :op-of (a / and 
                        :op1 (p / propose-01 
                              :ARG1 (r / reduce-01 
                                    :ARG1 (c2 / consume-01 
                                          :ARG1 (i / interest 
                                                :topic (c / conserve-01))))) 
                        :prep-to-of (h / hostile 
                              :domain (p2 / party))))) 
      :op1 (p3 / policy 
            :mod (p4 / party 
                  :mod (g / green))) 
      :op2 (d / detail-01 
            :ARG1 (m / most)))

# ::snt hailed as the source of power too cheap to bother metering the 34yearold technology never lived up to expectations
# ::tok hailed as the source of power too cheap to bother metering the 34yearold technology never lived up to expectations
# ::alignments 18-19|0 15-16|0.0 13-14|0.0.0 9-10|0.0.0.0 7-8|0.0.0.0.1 6-7|0.0.0.0.1.0 5-6|0.0.0.0.0.0.0 3-4|0.0.0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:42.198
# ::node	0	expect-01	18-19
# ::node	0.0	live-01	15-16
# ::node	0.0.0	technology	13-14
# ::node	0.0.0.0	bother-02	9-10
# ::node	0.0.0.0.0	hail-02	0-1
# ::node	0.0.0.0.0.0	source	3-4
# ::node	0.0.0.0.0.0.0	power	5-6
# ::node	0.0.0.0.1	cheap	7-8
# ::node	0.0.0.0.1.0	too	6-7
# ::root	0	expect-01
(e / expect-01 
      :ARG2-of (l / live-01 
            :ARG1 (t / technology 
                  :ARG1-of (b / bother-02 
                        :ARG1-of (h / hail-02 
                              :ARG0 (s / source 
                                    :location (p / power))) 
                        :domain-of (c / cheap 
                              :degree (t2 / too))))))

# ::snt   if desmond had drawn in his breath to say that he preferred to stand he let it out again without forming the words and settled at the table with harry and another fosters in surroundings that an expert might have subdivided into the creation of one conscientious but not very capable manager one sloven who would not bother to drop a cigarettepacket into a bin and one martian
# ::tok if desmond had drawn in his breath to say that he preferred to stand he let it out again without forming the words and settled at the table with harry and another fosters in surroundings that an expert might have subdivided into the creation of one conscientious but not very capable manager one sloven who would not bother to drop a cigarettepacket into a bin and one martian
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:42.199
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt   you didnt bother to knock genevieve said
# ::tok you didnt bother to knock genevieve said
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:42.200
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt but now in the light of the new data she realised that she did not have the first idea what her mother had really been like and she had never bothered to find out
# ::tok but now in the light of the new data she realised that she did not have the first idea what her mother had really been like and she had never bothered to find out
# ::alignments 30-31|0.0.0.0 27-28|0.0.0.0.0 26-27|0.0.0.0.2 23-24|0.0.0.0.2.0 21-22|0.0.0.0.1.0+0.0.0.0.1 18-19|0.0.0 12-13|0.0.1.0.1 10-11|0.0.1.0 9-10|0.0.1.0.0 8-9|0.0.1 7-8|0.0.1.1 4-5|0.0 1-2|0.1 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:43.268
# ::node	0	contrast-01	0-1
# ::node	0.0	light	4-5
# ::node	0.0.0	idea	18-19
# ::node	0.0.0.0	bother-01	30-31
# ::node	0.0.0.0.0	she	27-28
# ::node	0.0.0.0.1	have-rel-role-91	21-22
# ::node	0.0.0.0.1.0	mother	21-22
# ::node	0.0.0.0.2	and	26-27
# ::node	0.0.0.0.2.0	really	23-24
# ::node	0.0.1	data	8-9
# ::node	0.0.1.0	realize-01	10-11
# ::node	0.0.1.0.0	she	9-10
# ::node	0.0.1.0.1	she	12-13
# ::node	0.0.1.1	new	7-8
# ::node	0.1	now	1-2
# ::root	0	contrast-01
# ::edge	and	mod	really	0.0.0.0.2	0.0.0.0.2.0	
# ::edge	and	op1	bother-01	0.0.0.0.2	0.0.0.0	
# ::edge	bother-01	ARG0	she	0.0.0.0	0.0.0.0.0	
# ::edge	bother-01	ARG1	idea	0.0.0.0	0.0.0	
# ::edge	contrast-01	ARG0	light	0	0.0	
# ::edge	contrast-01	ARG1	now	0	0.1	
# ::edge	data	mod	new	0.0.1	0.0.1.1	
# ::edge	have-rel-role-91	ARG1	bother-01	0.0.0.0.1	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	mother	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	idea	mod	light	0.0.0	0.0	
# ::edge	light	poss	data	0.0	0.0.1	
# ::edge	realize-01	ARG0	she	0.0.1.0	0.0.1.0.0	
# ::edge	realize-01	ARG1	data	0.0.1.0	0.0.1	
# ::edge	realize-01	ARG2	she	0.0.1.0	0.0.1.0.1	
(c / contrast-01 
      :ARG0 (l / light 
            :mod-of (i / idea 
                  :ARG1-of (b / bother-01 
                        :ARG0 (s / she) 
                        :ARG1-of (h / have-rel-role-91 
                              :ARG2 (m / mother)) 
                        :op-of (a / and 
                              :mod (r / really)))) 
            :poss (d / data 
                  :ARG1-of (r2 / realize-01 
                        :ARG0 (s3 / she) 
                        :ARG2 (s2 / she)) 
                  :mod (n / new))) 
      :ARG1 (n2 / now))

# ::snt but really i neednt have bothered
# ::tok but really i neednt have bothered
# ::alignments 5-6|0.0 2-3|0.0.0 1-2|0.0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:43.280
# ::node	0	contrast-01	0-1
# ::node	0.0	bother-01	5-6
# ::node	0.0.0	i	2-3
# ::node	0.0.0.0	really	1-2
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	i	0.0	0.0.0	
# ::edge	contrast-01	ARG1	bother-01	0	0.0	
# ::edge	i	mod	really	0.0.0	0.0.0.0	
(c / contrast-01 
      :ARG1 (b / bother-01 
            :ARG0 (i / i 
                  :mod (r / really))))

# ::snt sharpe was holding his own sword low beside his stirrup almost as if he could not be bothered to fight
# ::tok sharpe was holding his own sword low beside his stirrup almost as if he could not be bothered to fight
# ::alignments 19-20|0.0.1 17-18|0.0 14-15|0 13-14|0.0.1.0 10-11|0.0.0 7-8|0.0.2.0 6-7|0.0.2.0.0 5-6|0.0.2.1 2-3|0.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:43.361
# ::node	0	possible	14-15
# ::node	0.0	bother-01	17-18
# ::node	0.0.0	almost	10-11
# ::node	0.0.1	fight-01	19-20
# ::node	0.0.1.0	he	13-14
# ::node	0.0.2	hold-01	2-3
# ::node	0.0.2.0	beside	7-8
# ::node	0.0.2.0.0	low	6-7
# ::node	0.0.2.1	sword	5-6
# ::root	0	possible
# ::edge	bother-01	ARG0	almost	0.0	0.0.0	
# ::edge	bother-01	ARG1	fight-01	0.0	0.0.1	
# ::edge	fight-01	ARG0	he	0.0.1	0.0.1.0	
# ::edge	hold-01	ARG0	beside	0.0.2	0.0.2.0	
# ::edge	hold-01	ARG1	sword	0.0.2	0.0.2.1	
# ::edge	hold-01	purpose	bother-01	0.0.2	0.0	
# ::edge	low	time	beside	0.0.2.0.0	0.0.2.0	
# ::edge	possible	domain	bother-01	0	0.0	
(p / possible 
      :domain (b / bother-01 
            :ARG0 (a / almost) 
            :ARG1 (f / fight-01 
                  :ARG0 (h / he)) 
            :purpose-of (h2 / hold-01 
                  :ARG0 (b2 / beside 
                        :time-of (l / low)) 
                  :ARG1 (s / sword))))

# ::snt many critics of the ruling party will not bother to vote
# ::tok many critics of the ruling party will not bother to vote
# ::alignments 10-11|0.1 8-9|0 5-6|0.1.0 4-5|0.1.0.0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:43.384
# ::node	0	bother-02	8-9
# ::node	0.0	critic	1-2
# ::node	0.0.0	many	0-1
# ::node	0.1	vote-01	10-11
# ::node	0.1.0	party	5-6
# ::node	0.1.0.0	rule-03	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	critic	0	0.0	
# ::edge	bother-02	ARG1	vote-01	0	0.1	
# ::edge	critic	quant	many	0.0	0.0.0	
# ::edge	rule-03	ARG0	party	0.1.0.0	0.1.0	
# ::edge	vote-01	ARG1	party	0.1	0.1.0	
(b / bother-02 
      :ARG0 (c / critic 
            :quant (m / many)) 
      :ARG1 (v / vote-01 
            :ARG1 (p / party 
                  :ARG0-of (r / rule-03))))

# ::snt then to find all the other under5 activities we called at all the sports centres and community centres in the area and finally we also looked at any noticeboard any where  the results of these monday afternoon treks my baby is at nursery and i am not at work only monday and friday afternoon and friday afternoon is not a good time to go bothering people were now covering rather more than a double page and indeed was too much for a single newsletter article
# ::tok then to find all the other under5 activities we called at all the sports centres and community centres in the area and finally we also looked at any noticeboard any where the results of these monday afternoon treks my baby is at nursery and i am not at work only monday and friday afternoon and friday afternoon is not a good time to go bothering people were now covering rather more than a double page and indeed was too much for a single newsletter article
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:43.387
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt he moved even before the singing stopped rolling into the thick rye stalks where without bothering to see what damage his shot had done he began reloading
# ::tok he moved even before the singing stopped rolling into the thick rye stalks where without bothering to see what damage his shot had done he began reloading
# ::alignments 25-26|0.1.0.0 24-25|0.1.0 21-22|0.0.0 19-20|0.0 17-18|0 15-16|0.1 10-11|0.0.0.0 7-8|0.1.0.1.0 6-7|0.1.0.1 5-6|0.1.0.1.0.0 3-4|0.1.0.1.2 1-2|0.1.0.1.1 0-1|0.1.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:44.036
# ::node	0	see-01	17-18
# ::node	0.0	damage-01	19-20
# ::node	0.0.0	shoot-02	21-22
# ::node	0.0.0.0	thick	10-11
# ::node	0.1	bother-01	15-16
# ::node	0.1.0	he	24-25
# ::node	0.1.0.0	begin-01	25-26
# ::node	0.1.0.1	stop-01	6-7
# ::node	0.1.0.1.0	roll-01	7-8
# ::node	0.1.0.1.0.0	sing-01	5-6
# ::node	0.1.0.1.1	move-01	1-2
# ::node	0.1.0.1.1.0	he	0-1
# ::node	0.1.0.1.2	before	3-4
# ::root	0	see-01
# ::edge	before	op1	stop-01	0.1.0.1.2	0.1.0.1	
# ::edge	begin-01	ARG0	he	0.1.0.0	0.1.0	
# ::edge	bother-01	ARG0	he	0.1	0.1.0	
# ::edge	bother-01	ARG1	see-01	0.1	0	
# ::edge	damage-01	ARG1	shoot-02	0.0	0.0.0	
# ::edge	move-01	ARG1	he	0.1.0.1.1	0.1.0.1.1.0	
# ::edge	move-01	condition	stop-01	0.1.0.1.1	0.1.0.1	
# ::edge	roll-01	ARG0	sing-01	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	see-01	ARG1	damage-01	0	0.0	
# ::edge	shoot-02	ARG1	thick	0.0.0	0.0.0.0	
# ::edge	stop-01	ARG0	he	0.1.0.1	0.1.0	
# ::edge	stop-01	ARG1	roll-01	0.1.0.1	0.1.0.1.0	
(s2 / see-01 
      :ARG1 (d / damage-01 
            :ARG1 (s / shoot-02 
                  :ARG1 (t / thick))) 
      :ARG1-of (b2 / bother-01 
            :ARG0 (h / he 
                  :ARG0-of (b / begin-01) 
                  :ARG0-of (s3 / stop-01 
                        :ARG1 (r / roll-01 
                              :ARG0 (s4 / sing-01)) 
                        :condition-of (m / move-01 
                              :ARG1 (h2 / he)) 
                        :op-of (b3 / before)))))

# ::snt why bother with that
# ::tok why bother with that
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:44.040
# ::node	0	bother-02	1-2
# ::root	0	bother-02
(b / bother-02)

# ::snt if ministers believe there is no legal foundation for the claims it shouldnt bother them too much
# ::tok if ministers believe there is no legal foundation for the claims it shouldnt bother them too much
# ::alignments 16-17|0.4 15-16|0.4.0 13-14|0 11-12|0.1 10-11|0.5 7-8|0.5.0 6-7|0.5.0.0 5-6|0.0 2-3|0.3 1-2|0.2.0+0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:44.332
# ::node	0	bother-02	13-14
# ::node	0.0	-	5-6
# ::node	0.1	it	11-12
# ::node	0.2	have-org-role-91	1-2
# ::node	0.2.0	minister	1-2
# ::node	0.3	believe-01	2-3
# ::node	0.4	much	16-17
# ::node	0.4.0	too	15-16
# ::node	0.5	claim-01	10-11
# ::node	0.5.0	foundation	7-8
# ::node	0.5.0.0	legal	6-7
# ::root	0	bother-02
# ::edge	believe-01	ARG1	bother-02	0.3	0	
# ::edge	bother-02	ARG0	-	0	0.0	
# ::edge	bother-02	ARG1	it	0	0.1	
# ::edge	bother-02	mod	much	0	0.4	
# ::edge	bother-02	time	claim-01	0	0.5	
# ::edge	foundation	domain	claim-01	0.5.0	0.5	
# ::edge	foundation	mod	legal	0.5.0	0.5.0.0	
# ::edge	have-org-role-91	ARG1	bother-02	0.2	0	
# ::edge	have-org-role-91	ARG2	minister	0.2	0.2.0	
# ::edge	much	degree	too	0.4	0.4.0	
(b / bother-02 
      :ARG0 (- / -) 
      :ARG1 (i / it) 
      :ARG1-of (h / have-org-role-91 
            :ARG2 (m2 / minister)) 
      :ARG1-of (b2 / believe-01) 
      :mod (m / much 
            :degree (t / too)) 
      :time (c / claim-01 
            :domain-of (f / foundation 
                  :mod (l / legal))))

# ::snt   she stood up and not bothering with her stick took cautious steps towards the door
# ::tok she stood up and not bothering with her stick took cautious steps towards the door
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:44.334
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt and whether they had mrs heal or mr gummer on bbc2 at 4pm on tuesday would probably not bother that many viewers most of whom were tuned in to itv for the black and white movie
# ::tok and whether they had mrs heal or mr gummer on bbc2 at 4pm on tuesday would probably not bother that many viewers most of whom were tuned in to itv for the black and white movie
# ::alignments 35-36|0.0.1.2.2 34-35|0.0.1.2.1 33-34|0.0.1.2 32-33|0.0.1.2.0 26-27|0.0.1.1 22-23|0.0.1.0.0 21-22|0.0.1.0+0.0.1 20-21|0.0.1.3 18-19|0.0 16-17|0 6-7|0.0.0.0.0 5-6|0.0.0.0 2-3|0.0.0 0-1|0.0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:44.867
# ::node	0	probable	16-17
# ::node	0.0	bother-02	18-19
# ::node	0.0.0	they	2-3
# ::node	0.0.0.0	heal-01	5-6
# ::node	0.0.0.0.0	or	6-7
# ::node	0.0.0.0.0.0	and	0-1
# ::node	0.0.1	person	21-22
# ::node	0.0.1.0	view-01	21-22
# ::node	0.0.1.0.0	most	22-23
# ::node	0.0.1.1	tune-01	26-27
# ::node	0.0.1.2	and	33-34
# ::node	0.0.1.2.0	black	32-33
# ::node	0.0.1.2.1	white	34-35
# ::node	0.0.1.2.2	movie	35-36
# ::node	0.0.1.3	many	20-21
# ::root	0	probable
# ::edge	and	op1	or	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	and	op1	person	0.0.1.2	0.0.1	
# ::edge	and	op2	black	0.0.1.2	0.0.1.2.0	
# ::edge	and	op3	white	0.0.1.2	0.0.1.2.1	
# ::edge	and	op4	movie	0.0.1.2	0.0.1.2.2	
# ::edge	bother-02	ARG0	they	0.0	0.0.0	
# ::edge	bother-02	ARG1	person	0.0	0.0.1	
# ::edge	heal-01	ARG0	they	0.0.0.0	0.0.0	
# ::edge	or	op1	heal-01	0.0.0.0.0	0.0.0.0	
# ::edge	person	quant	many	0.0.1	0.0.1.3	
# ::edge	probable	domain	bother-02	0	0.0	
# ::edge	tune-01	ARG1	person	0.0.1.1	0.0.1	
# ::edge	view-01	ARG0	person	0.0.1.0	0.0.1	
# ::edge	view-01	ARG1	most	0.0.1.0	0.0.1.0.0	
(p2 / probable 
      :domain (b2 / bother-02 
            :ARG0 (t2 / they 
                  :ARG0-of (h / heal-01 
                        :op-of (o / or 
                              :op-of (a2 / and)))) 
            :ARG1 (p / person 
                  :ARG0-of (v / view-01 
                        :ARG1 (m2 / most)) 
                  :ARG1-of (t / tune-01) 
                  :op-of (a / and 
                        :op1 (b / black) 
                        :op2 (w / white) 
                        :op3 (m / movie)) 
                  :quant (m3 / many))))

# ::snt someone had brought the adjustable lectern and set it up perfectly but not bothered to find out the heights of the speakers
# ::tok someone had brought the adjustable lectern and set it up perfectly but not bothered to find out the heights of the speakers
# ::alignments 18-19|0.1.2 13-14|0.1 11-12|0 10-11|0.0 8-9|0.1.1 6-7|0.1.3 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:45.038
# ::node	0	contrast-01	11-12
# ::node	0.0	perfect	10-11
# ::node	0.1	bother-01	13-14
# ::node	0.1.0	someone	0-1
# ::node	0.1.1	it	8-9
# ::node	0.1.2	height	18-19
# ::node	0.1.3	and	6-7
# ::root	0	contrast-01
# ::edge	and	op1	bother-01	0.1.3	0.1	
# ::edge	bother-01	ARG0	someone	0.1	0.1.0	
# ::edge	bother-01	ARG1	it	0.1	0.1.1	
# ::edge	bother-01	ARG2	height	0.1	0.1.2	
# ::edge	contrast-01	ARG1	perfect	0	0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.1	
(c / contrast-01 
      :ARG1 (p / perfect) 
      :ARG2 (b / bother-01 
            :ARG0 (s / someone) 
            :ARG1 (i / it) 
            :ARG2 (h / height) 
            :op-of (a / and)))

# ::snt so you see i was right about needing that sly gandt said harry to clare in the back seat rightly confident that freddie would not bother to wonder what was meant even if he happened to be listening
# ::tok so you see i was right about needing that sly gandt said harry to clare in the back seat rightly confident that freddie would not bother to wonder what was meant even if he happened to be listening
# ::alignments 37-38|0.0.1 34-35|0.0.2 33-34|0.0 30-31|0.0.0 27-28|0.0.0.0 25-26|0.0.0.0.0 20-21|0.0.0.0.0.0 19-20|0.0.0.0.0.0.1 18-19|0.0.0.0.0.0.0 17-18|0.0.0.0.0.0.0.0 11-12|0 3-4|0.1.1 2-3|0.1 1-2|0.1.0 0-1|0.1.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:45.796
# ::node	0	say-01	11-12
# ::node	0.0	he	33-34
# ::node	0.0.0	mean-01	30-31
# ::node	0.0.0.0	wonder-01	27-28
# ::node	0.0.0.0.0	bother-02	25-26
# ::node	0.0.0.0.0.0	confident-41	20-21
# ::node	0.0.0.0.0.0.0	seat	18-19
# ::node	0.0.0.0.0.0.0.0	back	17-18
# ::node	0.0.0.0.0.0.1	right	19-20
# ::node	0.0.1	listen-01	37-38
# ::node	0.0.2	happen-01	34-35
# ::node	0.1	see-01	2-3
# ::node	0.1.0	you	1-2
# ::node	0.1.1	i	3-4
# ::node	0.1.2	so	0-1
# ::root	0	say-01
# ::edge	bother-02	ARG0	confident-41	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	bother-02	ARG1	wonder-01	0.0.0.0.0	0.0.0.0	
# ::edge	confident-41	ARG0	seat	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	confident-41	degree	right	0.0.0.0.0.0	0.0.0.0.0.0.1	
# ::edge	happen-01	ARG0	he	0.0.2	0.0	
# ::edge	listen-01	ARG0	he	0.0.1	0.0	
# ::edge	mean-01	ARG0	he	0.0.0	0.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	see-01	0	0.1	
# ::edge	seat	mod	back	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	see-01	ARG0	you	0.1	0.1.0	
# ::edge	see-01	ARG1	i	0.1	0.1.1	
# ::edge	so	op1	see-01	0.1.2	0.1	
# ::edge	wonder-01	ARG1	mean-01	0.0.0.0	0.0.0	
(s2 / say-01 
      :ARG0 (h2 / he 
            :ARG0-of (m / mean-01 
                  :ARG1-of (w / wonder-01 
                        :ARG1-of (b / bother-02 
                              :ARG0 (c / confident-41 
                                    :ARG0 (s / seat 
                                          :mod (b2 / back)) 
                                    :degree (r / right))))) 
            :ARG0-of (l / listen-01) 
            :ARG0-of (h / happen-01)) 
      :ARG1 (s3 / see-01 
            :ARG0 (y / you) 
            :ARG1 (i / i) 
            :op-of (s4 / so)))

# ::snt whys that  well its something vocal soundum i mean obviously a lot of people like the idea of going over to the swindon oasis now vocal soundum weve had at the back of our minds if it was at all possible to vocal soundum put something similar at didcot obviously nothing as grand as the oasis but something quite similar and obviously they would come to didcot and not bother to go over to swindon
# ::tok whys that well its something vocal soundum i mean obviously a lot of people like the idea of going over to the swindon oasis now vocal soundum weve had at the back of our minds if it was at all possible to vocal soundum put something similar at didcot obviously nothing as grand as the oasis but something quite similar and obviously they would come to didcot and not bother to go over to swindon
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:45.797
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt not that i would be bothered
# ::tok not that i would be bothered
# ::alignments 5-6|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:45.804
# ::node	0	bother-01	5-6
# ::node	0.0	i	2-3
# ::root	0	bother-01
# ::edge	bother-01	ARG1	i	0	0.0	
(b / bother-01 
      :ARG1 (i / i))

# ::snt they will thus not bother to pursue deskilling strategies with great vigour as the return on vigorous managerial activity is greater in other areas of operation
# ::tok they will thus not bother to pursue deskilling strategies with great vigour as the return on vigorous managerial activity is greater in other areas of operation
# ::alignments 25-26|0.1.2.1 23-24|0.1.2.0 22-23|0.1.2.0.0 20-21|0.1.2 18-19|0.1.0 10-11|0.1.2.1.0 8-9|0.1.1 6-7|0.1 4-5|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:45.942
# ::node	0	bother-02	4-5
# ::node	0.0	they	0-1
# ::node	0.1	pursue-01	6-7
# ::node	0.1.0	activity	18-19
# ::node	0.1.1	strategy	8-9
# ::node	0.1.2	great	20-21
# ::node	0.1.2.0	area	23-24
# ::node	0.1.2.0.0	other	22-23
# ::node	0.1.2.1	operation	25-26
# ::node	0.1.2.1.0	great	10-11
# ::root	0	bother-02
# ::edge	area	mod	other	0.1.2.0	0.1.2.0.0	
# ::edge	bother-02	ARG0	they	0	0.0	
# ::edge	bother-02	ARG1	pursue-01	0	0.1	
# ::edge	great	compared-to	area	0.1.2	0.1.2.0	
# ::edge	great	compared-to	operation	0.1.2	0.1.2.1	
# ::edge	operation	poss	great	0.1.2.1	0.1.2.1.0	
# ::edge	pursue-01	ARG0	activity	0.1	0.1.0	
# ::edge	pursue-01	ARG1	strategy	0.1	0.1.1	
# ::edge	pursue-01	time	great	0.1	0.1.2	
(b / bother-02 
      :ARG0 (t / they) 
      :ARG1 (p / pursue-01 
            :ARG0 (a2 / activity) 
            :ARG1 (s / strategy) 
            :time (g / great 
                  :compared-to (a / area 
                        :mod (o2 / other)) 
                  :compared-to (o / operation 
                        :poss (g2 / great)))))

# ::snt it doesnt bother me in the least but i must have told you twenty times before
# ::tok it doesnt bother me in the least but i must have told you twenty times before
# ::alignments 15-16|0.1.1 12-13|0.1.2 11-12|0.1 8-9|0.1.0 7-8|0 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:45.974
# ::node	0	contrast-01	7-8
# ::node	0.0	bother-02	2-3
# ::node	0.0.0	it	0-1
# ::node	0.1	tell-01	11-12
# ::node	0.1.0	i	8-9
# ::node	0.1.1	before	15-16
# ::node	0.1.2	you	12-13
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	it	0.0	0.0.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.0	
# ::edge	contrast-01	ARG2	tell-01	0	0.1	
# ::edge	tell-01	ARG0	i	0.1	0.1.0	
# ::edge	tell-01	ARG1	before	0.1	0.1.1	
# ::edge	tell-01	ARG2	you	0.1	0.1.2	
(c / contrast-01 
      :ARG1 (b2 / bother-02 
            :ARG0 (i2 / it)) 
      :ARG2 (t / tell-01 
            :ARG0 (i / i) 
            :ARG1 (b / before) 
            :ARG2 (y / you)))

# ::snt police did not even bother to search all the suspects homes
# ::tok police did not even bother to search all the suspects homes
# ::alignments 10-11|0.0.1 9-10|0.0.1.0+0.0.1.0.0 7-8|0.0.1.1 6-7|0.0 4-5|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:45.999
# ::node	0	bother-02	4-5
# ::node	0.0	search-01	6-7
# ::node	0.0.0	police	0-1
# ::node	0.0.1	home	10-11
# ::node	0.0.1.0	suspect-01	9-10
# ::node	0.0.1.0.0	person	9-10
# ::node	0.0.1.1	all	7-8
# ::root	0	bother-02
# ::edge	bother-02	ARG1	search-01	0	0.0	
# ::edge	home	quant	all	0.0.1	0.0.1.1	
# ::edge	search-01	ARG0	police	0.0	0.0.0	
# ::edge	search-01	ARG1	home	0.0	0.0.1	
# ::edge	suspect-01	ARG1	home	0.0.1.0	0.0.1	
# ::edge	suspect-01	ARG2	person	0.0.1.0	0.0.1.0.0	
(b / bother-02 
      :ARG1 (s2 / search-01 
            :ARG0 (p2 / police) 
            :ARG1 (h / home 
                  :ARG1-of (s / suspect-01 
                        :ARG2 (p / person)) 
                  :quant (a / all))))

# ::snt this group of professionals has not even bothered to ease the biggest problem facing entrepreneurs dash
# ::tok this group of professionals has not even bothered to ease the biggest problem facing entrepreneurs dash
# ::alignments 14-15|0 13-14|0.0 12-13|0.0.0 11-12|0.0.0.0.0+0.0.0.0 9-10|0.0.1 7-8|0.0.1.1 3-4|0.0.1.0.0 1-2|0.0.1.0 0-1|0.0.1.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:46.437
# ::node	0	entrepreneur	14-15
# ::node	0.0	face-01	13-14
# ::node	0.0.0	problem	12-13
# ::node	0.0.0.0	big	11-12
# ::node	0.0.0.0.0	most	11-12
# ::node	0.0.1	ease-02	9-10
# ::node	0.0.1.0	group	1-2
# ::node	0.0.1.0.0	professional	3-4
# ::node	0.0.1.0.1	this	0-1
# ::node	0.0.1.1	bother-01	7-8
# ::root	0	entrepreneur
(e / entrepreneur 
      :ARG1-of (f / face-01 
            :ARG0 (p / problem 
                  :mod (b / big 
                        :degree (m / most))) 
            :ARG1-of (e2 / ease-02 
                  :ARG0 (g / group 
                        :location (p2 / professional) 
                        :mod (t / this)) 
                  :ARG1-of (b2 / bother-01))))

# ::snt the prince paused shook his head like an animal bothered by gnats then turned with a resolute air
# ::tok the prince paused shook his head like an animal bothered by gnats then turned with a resolute air
# ::alignments 17-18|0.0.0.0 12-13|0.0.1 11-12|0.0.0.2 9-10|0.0.0 8-9|0.0.0.1 5-6|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:46.495
# ::node	0	prince	1-2
# ::node	0.0	head-01	5-6
# ::node	0.0.0	bother-01	9-10
# ::node	0.0.0.0	air	17-18
# ::node	0.0.0.1	animal	8-9
# ::node	0.0.0.2	gnat	11-12
# ::node	0.0.1	then	12-13
# ::root	0	prince
(p / prince 
      :ARG0-of (h / head-01 
            :ARG2 (b / bother-01 
                  :ARG0 (a / air) 
                  :ARG1 (a2 / animal) 
                  :ARG2 (g / gnat)) 
            :op-of (t / then)))

# ::snt the word absentee giving the curious impression that the absent person could not be bothered to return
# ::tok the word absentee giving the curious impression that the absent person could not be bothered to return
# ::alignments 14-15|0.0 11-12|0 10-11|0.0.1 9-10|0.0.1.0 6-7|0.1 5-6|0.1.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:46.530
# ::node	0	possible	11-12
# ::node	0.0	bother-01	14-15
# ::node	0.0.0	word	1-2
# ::node	0.0.1	person	10-11
# ::node	0.0.1.0	absent-01	9-10
# ::node	0.1	impression	6-7
# ::node	0.1.0	curious-41	5-6
# ::root	0	possible
# ::edge	absent-01	ARG1	person	0.0.1.0	0.0.1	
# ::edge	bother-01	ARG0	word	0.0	0.0.0	
# ::edge	bother-01	ARG1	person	0.0	0.0.1	
# ::edge	curious-41	ARG0	impression	0.1.0	0.1	
# ::edge	impression	mod	possible	0.1	0	
# ::edge	possible	domain	bother-01	0	0.0	
(p / possible 
      :domain (b / bother-01 
            :ARG0 (w / word) 
            :ARG1 (p2 / person 
                  :ARG1-of (a / absent-01))) 
      :mod-of (i / impression 
            :ARG0-of (c / curious-41)))

# ::snt more often than not noone bothers about the height factor with the result that the speaker may have to peer at his notes or stand awkwardly or otherwise find it impossible to combine proper use of the mike with proper use of the lectern
# ::tok more often than not noone bothers about the height factor with the result that the speaker may have to peer at his notes or stand awkwardly or otherwise find it impossible to combine proper use of the mike with proper use of the lectern
# ::alignments 40-41|0.1.1 39-40|0.1.1.1 34-35|0.1.1.0.0 33-34|0.1.1.0.0.1 32-33|0.1.1.0 29-30|0.1.1.0.0.0 27-28|0.1.0.1.0 26-27|0.1.0.1 23-24|0.1.0.2 22-23|0.1.0.0 19-20|0.1.0 16-17|0.0.1+0.0 15-16|0.1.2+0.1 12-13|0 9-10|0.0.0.0 5-6|0.0.0 1-2|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:46.763
# ::node	0	result-01	12-13
# ::node	0.0	date-entity	16-17
# ::node	0.0.0	bother-01	5-6
# ::node	0.0.0.0	factor	9-10
# ::node	0.0.0.1	often	1-2
# ::node	0.0.1	5	16-17
# ::node	0.1	person	15-16
# ::node	0.1.0	peer	19-20
# ::node	0.1.0.0	note	22-23
# ::node	0.1.0.1	or	26-27
# ::node	0.1.0.1.0	otherwise	27-28
# ::node	0.1.0.2	or	23-24
# ::node	0.1.1	use-01	40-41
# ::node	0.1.1.0	combine-01	32-33
# ::node	0.1.1.0.0	use-01	34-35
# ::node	0.1.1.0.0.0	it	29-30
# ::node	0.1.1.0.0.1	proper	33-34
# ::node	0.1.1.1	proper	39-40
# ::node	0.1.2	speak-01	15-16
# ::root	0	result-01
# ::edge	bother-01	ARG0	date-entity	0.0.0	0.0	
# ::edge	bother-01	ARG1	factor	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG2	often	0.0.0	0.0.0.1	
# ::edge	combine-01	ARG1	use-01	0.1.1.0	0.1.1.0.0	
# ::edge	combine-01	ARG3	use-01	0.1.1.0	0.1.1	
# ::edge	date-entity	month	5	0.0	0.0.1	
# ::edge	or	op1	peer	0.1.0.1	0.1.0	
# ::edge	or	op1	peer	0.1.0.2	0.1.0	
# ::edge	or	op2	otherwise	0.1.0.1	0.1.0.1.0	
# ::edge	peer	ARG0	person	0.1.0	0.1	
# ::edge	peer	medium	note	0.1.0	0.1.0.0	
# ::edge	result-01	ARG0	date-entity	0	0.0	
# ::edge	result-01	ARG1	person	0	0.1	
# ::edge	speak-01	ARG0	person	0.1.2	0.1	
# ::edge	use-01	ARG0	person	0.1.1	0.1	
# ::edge	use-01	ARG1	it	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	use-01	mod	proper	0.1.1	0.1.1.1	
# ::edge	use-01	mod	proper	0.1.1.0.0	0.1.1.0.0.1	
(r / result-01 
      :ARG0 (d / date-entity 
            :ARG0-of (b / bother-01 
                  :ARG1 (f / factor) 
                  :ARG2 (o4 / often)) 
            :month 5) 
      :ARG1 (p4 / person 
            :ARG0-of (p3 / peer 
                  :medium (n / note) 
                  :op-of (o2 / or 
                        :op1 (o / otherwise)) 
                  :op-of (o3 / or)) 
            :ARG0-of (u / use-01 
                  :ARG3-of (c / combine-01 
                        :ARG1 (u2 / use-01 
                              :ARG1 (i / it) 
                              :mod (p2 / proper))) 
                  :mod (p / proper)) 
            :ARG0-of (s / speak-01)))

# ::snt but i dont think anybody was that bothered because of my age
# ::tok but i dont think anybody was that bothered because of my age
# ::alignments 11-12|0.0 8-9|0 7-8|0.1 4-5|0.1.0 3-4|0.1.0.0 1-2|0.1.0.0.0 0-1|0.1.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:46.802
# ::node	0	cause-01	8-9
# ::node	0.0	age-01	11-12
# ::node	0.1	bother-01	7-8
# ::node	0.1.0	anybody	4-5
# ::node	0.1.0.0	think-01	3-4
# ::node	0.1.0.0.0	i	1-2
# ::node	0.1.0.0.1	contrast-01	0-1
# ::root	0	cause-01
# ::edge	bother-01	ARG0	anybody	0.1	0.1.0	
# ::edge	cause-01	ARG0	age-01	0	0.0	
# ::edge	cause-01	ARG1	bother-01	0	0.1	
# ::edge	contrast-01	ARG1	think-01	0.1.0.0.1	0.1.0.0	
# ::edge	think-01	ARG0	i	0.1.0.0	0.1.0.0.0	
# ::edge	think-01	ARG1	anybody	0.1.0.0	0.1.0	
(c / cause-01 
      :ARG0 (a / age-01) 
      :ARG1 (b / bother-01 
            :ARG0 (a2 / anybody 
                  :ARG1-of (t / think-01 
                        :ARG0 (i / i) 
                        :ARG1-of (c2 / contrast-01)))))

# ::snt cecil behaved liked the gentleman he is by escorting me out of the hall and seeing that prior and his bully boys did not bother me
# ::tok cecil behaved liked the gentleman he is by escorting me out of the hall and seeing that prior and his bully boys did not bother me
# ::alignments 24-25|0 21-22|0.0.1 20-21|0.0.1.0 18-19|0.0 17-18|0.0.0 15-16|0.1.2 14-15|0.1 13-14|0.1.1 5-6|0.1.2.0 4-5|0.1.0.1 2-3|0.1.0 1-2|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:47.332
# ::node	0	bother-02	24-25
# ::node	0.0	and	18-19
# ::node	0.0.0	prior	17-18
# ::node	0.0.1	boy	21-22
# ::node	0.0.1.0	bully-01	20-21
# ::node	0.1	and	14-15
# ::node	0.1.0	like-01	2-3
# ::node	0.1.0.0	behave-01	1-2
# ::node	0.1.0.1	gentleman	4-5
# ::node	0.1.1	hall	13-14
# ::node	0.1.2	see-01	15-16
# ::node	0.1.2.0	he	5-6
# ::root	0	bother-02
# ::edge	and	op1	like-01	0.1	0.1.0	
# ::edge	and	op1	prior	0.0	0.0.0	
# ::edge	and	op2	boy	0.0	0.0.1	
# ::edge	and	op2	hall	0.1	0.1.1	
# ::edge	and	op3	see-01	0.1	0.1.2	
# ::edge	and	op4	bother-02	0.1	0	
# ::edge	bother-02	ARG1	and	0	0.0	
# ::edge	bully-01	ARG0	boy	0.0.1.0	0.0.1	
# ::edge	like-01	ARG0	behave-01	0.1.0	0.1.0.0	
# ::edge	like-01	ARG1	gentleman	0.1.0	0.1.0.1	
# ::edge	see-01	ARG0	he	0.1.2	0.1.2.0	
(b / bother-02 
      :ARG1 (a / and 
            :op1 (p / prior) 
            :op2 (b2 / boy 
                  :ARG0-of (b3 / bully-01))) 
      :op-of (a2 / and 
            :op1 (l / like-01 
                  :ARG0 (b4 / behave-01) 
                  :ARG1 (g / gentleman)) 
            :op2 (h / hall) 
            :op3 (s / see-01 
                  :ARG0 (h2 / he))))

# ::snt they are not bothered about the weather or the customs of the country they are in
# ::tok they are not bothered about the weather or the customs of the country they are in
# ::alignments 13-14|0.0 12-13|0.2.1.0 9-10|0.2.1 7-8|0.2 6-7|0.2.0 3-4|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:47.385
# ::node	0	bother-01	3-4
# ::node	0.0	they	13-14
# ::node	0.1	they	0-1
# ::node	0.2	or	7-8
# ::node	0.2.0	weather	6-7
# ::node	0.2.1	customs	9-10
# ::node	0.2.1.0	country	12-13
# ::root	0	bother-01
# ::edge	bother-01	ARG0	they	0	0.0	
# ::edge	bother-01	ARG1	they	0	0.1	
# ::edge	bother-01	prep-with	or	0	0.2	
# ::edge	customs	poss	country	0.2.1	0.2.1.0	
# ::edge	or	op1	weather	0.2	0.2.0	
# ::edge	or	op2	customs	0.2	0.2.1	
(b / bother-01 
      :ARG0 (t / they) 
      :ARG1 (t2 / they) 
      :prep-with (o / or 
            :op1 (w / weather) 
            :op2 (c2 / customs 
                  :poss (c / country))))

# ::snt there were no boys to bother one no loud bellowd leather sellers only a misty sunlight in which all attica phaleron salamis eleusis and the distant peloponnese lay motionless drowned in deep peace below the rock platform of the wingless victory
# ::tok there were no boys to bother one no loud bellowd leather sellers only a misty sunlight in which all attica phaleron salamis eleusis and the distant peloponnese lay motionless drowned in deep peace below the rock platform of the wingless victory
# ::alignments 36-37|0.1.1.0.0.0.3.0 35-36|0.1.1.0.0.0.2.0 33-34|0.1.1.0.0.0.3 32-33|0.1.1.0.0.0.2 31-32|0.1.1.0.0.0.2.1 29-30|0.1.1.0.0.0 27-28|0.1.1.0 25-26|0.1.1.0.0.0.1 23-24|0.1.1.0.0 18-19|0.1.1.0.0.0.0 15-16|0.1.1 12-13|0.1.1.1 11-12|0.1.0+0.1 10-11|0.1.4 8-9|0.1.3 7-8|0.1.2 5-6|0 3-4|0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:48.400
# ::node	0	bother-02	5-6
# ::node	0.0	boy	3-4
# ::node	0.0.0	-	2-3
# ::node	0.1	person	11-12
# ::node	0.1.0	sell-01	11-12
# ::node	0.1.1	sunlight	15-16
# ::node	0.1.1.0	lay-01	27-28
# ::node	0.1.1.0.0	and	23-24
# ::node	0.1.1.0.0.0	drown-01	29-30
# ::node	0.1.1.0.0.0.0	all	18-19
# ::node	0.1.1.0.0.0.1	distant	25-26
# ::node	0.1.1.0.0.0.2	peace	32-33
# ::node	0.1.1.0.0.0.2.0	rock	35-36
# ::node	0.1.1.0.0.0.2.1	deep	31-32
# ::node	0.1.1.0.0.0.3	below	33-34
# ::node	0.1.1.0.0.0.3.0	platform	36-37
# ::node	0.1.1.1	only	12-13
# ::node	0.1.2	-	7-8
# ::node	0.1.3	loud	8-9
# ::node	0.1.4	leather	10-11
# ::root	0	bother-02
# ::edge	and	op1	drown-01	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	below	op1	platform	0.1.1.0.0.0.3	0.1.1.0.0.0.3.0	
# ::edge	bother-02	ARG0	boy	0	0.0	
# ::edge	bother-02	ARG1	person	0	0.1	
# ::edge	boy	polarity	-	0.0	0.0.0	
# ::edge	drown-01	ARG0	all	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	drown-01	ARG1	distant	0.1.1.0.0.0	0.1.1.0.0.0.1	
# ::edge	drown-01	ARG2	peace	0.1.1.0.0.0	0.1.1.0.0.0.2	
# ::edge	drown-01	time	below	0.1.1.0.0.0	0.1.1.0.0.0.3	
# ::edge	lay-01	ARG0	and	0.1.1.0	0.1.1.0.0	
# ::edge	lay-01	ARG1	sunlight	0.1.1.0	0.1.1	
# ::edge	peace	location	rock	0.1.1.0.0.0.2	0.1.1.0.0.0.2.0	
# ::edge	peace	mod	deep	0.1.1.0.0.0.2	0.1.1.0.0.0.2.1	
# ::edge	person	mod	-	0.1	0.1.2	
# ::edge	person	mod	leather	0.1	0.1.4	
# ::edge	person	mod	loud	0.1	0.1.3	
# ::edge	sell-01	ARG0	person	0.1.0	0.1	
# ::edge	sunlight	domain	person	0.1.1	0.1	
# ::edge	sunlight	mod	only	0.1.1	0.1.1.1	
(b2 / bother-02 
      :ARG0 (b3 / boy 
            :polarity (-2 / -)) 
      :ARG1 (p3 / person 
            :ARG0-of (s2 / sell-01) 
            :domain-of (s / sunlight 
                  :ARG1-of (l / lay-01 
                        :ARG0 (a / and 
                              :op1 (d2 / drown-01 
                                    :ARG0 (a2 / all) 
                                    :ARG1 (d3 / distant) 
                                    :ARG2 (p2 / peace 
                                          :location (r / rock) 
                                          :mod (d / deep)) 
                                    :time (b / below 
                                          :op1 (p / platform))))) 
                  :mod (o / only)) 
            :mod (- / -) 
            :mod (l3 / loud) 
            :mod (l2 / leather)))

# ::snt and you wont be bothered by the locals greedy for details about poor old alf wilson
# ::tok and you wont be bothered by the locals greedy for details about poor old alf wilson
# ::alignments 13-14|0.0 12-13|0.1.1.0.0.0 10-11|0.1.1.0.0 8-9|0.1.1.0 7-8|0.1.1 4-5|0.1 1-2|0.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:48.458
# ::node	0	and	0-1
# ::node	0.0	old	13-14
# ::node	0.1	bother-01	4-5
# ::node	0.1.0	you	1-2
# ::node	0.1.1	local	7-8
# ::node	0.1.1.0	greedy	8-9
# ::node	0.1.1.0.0	detail-01	10-11
# ::node	0.1.1.0.0.0	poor	12-13
# ::root	0	and
# ::edge	and	mod	old	0	0.0	
# ::edge	and	op1	bother-01	0	0.1	
# ::edge	bother-01	ARG0	you	0.1	0.1.0	
# ::edge	bother-01	ARG1	local	0.1	0.1.1	
# ::edge	detail-01	ARG1	poor	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	greedy	prep-in	detail-01	0.1.1.0	0.1.1.0.0	
# ::edge	local	mod	greedy	0.1.1	0.1.1.0	
(a / and 
      :mod (o / old) 
      :op1 (b / bother-01 
            :ARG0 (y / you) 
            :ARG1 (l / local 
                  :mod (g / greedy 
                        :prep-in (d / detail-01 
                              :ARG1 (p / poor))))))

# ::snt jesus allowed himself to see and to be bothered
# ::tok jesus allowed himself to see and to be bothered
# ::alignments 8-9|0.0.1 5-6|0.0 4-5|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:48.471
# ::node	0	allow-01	1-2
# ::node	0.0	and	5-6
# ::node	0.0.0	see-01	4-5
# ::node	0.0.1	bother-01	8-9
# ::root	0	allow-01
# ::edge	allow-01	ARG1	and	0	0.0	
# ::edge	and	op1	see-01	0.0	0.0.0	
# ::edge	and	op2	bother-01	0.0	0.0.1	
(a2 / allow-01 
      :ARG1 (a / and 
            :op1 (s / see-01) 
            :op2 (b / bother-01)))

# ::snt margaret disher thinks it unlikely that her aunt whose tastes were highbrow would have bothered to read the stories which were slight
# ::tok margaret disher thinks it unlikely that her aunt whose tastes were highbrow would have bothered to read the stories which were slight
# ::alignments 21-22|0.0.0.0.0 18-19|0.0.0.0 16-17|0.0.0 14-15|0.0 9-10|0 4-5|0.0.1.1.0+0.0.1.1 3-4|0.0.1.0 2-3|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:48.585
# ::node	0	taste	9-10
# ::node	0.0	bother-01	14-15
# ::node	0.0.0	read-01	16-17
# ::node	0.0.0.0	story	18-19
# ::node	0.0.0.0.0	slight	21-22
# ::node	0.0.1	think-01	2-3
# ::node	0.0.1.0	it	3-4
# ::node	0.0.1.1	likely	4-5
# ::node	0.0.1.1.0	-	4-5
# ::root	0	taste
(t / taste 
      :ARG0-of (b / bother-01 
            :ARG1 (r / read-01 
                  :ARG1 (s2 / story 
                        :location-of (s / slight))) 
            :ARG1-of (t2 / think-01 
                  :ARG0 (i / it) 
                  :ARG2 (l / likely 
                        :polarity -))))

# ::snt 8 but many anglers did not bother to weigh in
# ::tok 8 but many anglers did not bother to weigh in
# ::alignments 8-9|0.0 6-7|0.0.0 2-3|0.2 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:48.610
# ::node	0	contrast-01	1-2
# ::node	0.0	weigh-03	8-9
# ::node	0.0.0	bother-02	6-7
# ::node	0.1	8	0-1
# ::node	0.2	many	2-3
# ::root	0	contrast-01
# ::edge	bother-02	ARG1	weigh-03	0.0.0	0.0	
# ::edge	contrast-01	ARG1	8	0	0.1	
# ::edge	contrast-01	instrument	many	0	0.2	
# ::edge	weigh-03	ARG0	contrast-01	0.0	0	
(c / contrast-01 
      :ARG0-of (w / weigh-03 
            :ARG1-of (b / bother-02)) 
      :ARG1 8 
      :instrument (m / many))

# ::snt alright in fact my handset is just on ringing external i dont want hilary to be bothered with any internal calls of mine ive got a call log if anyone calls me i know theyve called me so i can call them back anyway
# ::tok alright in fact my handset is just on ringing external i dont want hilary to be bothered with any internal calls of mine ive got a call log if anyone calls me i know theyve called me so i can call them back anyway
# ::alignments 43-44|0.0.2.2 42-43|0.0.2.2.0 39-40|0 38-39|0.1.0 37-38|0.1 33-34|0.0 32-33|0.0.0 29-30|0.0.1 27-28|0.0.2 22-23|0.0.2.1 19-20|0.0.2.0 18-19|0.0.3 16-17|0.0.2.4 12-13|0.0.2.4.1 10-11|0.0.2.4.1.0 9-10|0.0.2.4.1.0.0.0 8-9|0.0.2.4.1.0.0 6-7|0.0.2.3 2-3|0.0.2.4.0 0-1|0.0.2.4.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:49.876
# ::node	0	possible	39-40
# ::node	0.0	know-01	33-34
# ::node	0.0.0	i	32-33
# ::node	0.0.1	anyone	29-30
# ::node	0.0.2	log-02	27-28
# ::node	0.0.2.0	internal	19-20
# ::node	0.0.2.1	mine	22-23
# ::node	0.0.2.2	anyway	43-44
# ::node	0.0.2.2.0	back	42-43
# ::node	0.0.2.3	just	6-7
# ::node	0.0.2.4	bother-01	16-17
# ::node	0.0.2.4.0	fact	2-3
# ::node	0.0.2.4.0.0	alright	0-1
# ::node	0.0.2.4.1	want-01	12-13
# ::node	0.0.2.4.1.0	i	10-11
# ::node	0.0.2.4.1.0.0	ring-01	8-9
# ::node	0.0.2.4.1.0.0.0	external	9-10
# ::node	0.0.3	any	18-19
# ::node	0.1	so	37-38
# ::node	0.1.0	i	38-39
# ::root	0	possible
(p / possible 
      :condition-of (k / know-01 
            :ARG0 (i2 / i) 
            :ARG1 (a2 / anyone) 
            :condition-of (l / log-02 
                  :ARG0 (i3 / internal) 
                  :ARG1 (m / mine) 
                  :op-of (a / anyway 
                        :op-of (b / back)) 
                  :op-of (j / just) 
                  :topic-of (b2 / bother-01 
                        :ARG1 (f / fact 
                              :prep-in-of (a4 / alright)) 
                        :ARG1-of (w / want-01 
                              :ARG0 (i4 / i 
                                    :ARG1-of (r / ring-01 
                                          :ARG0 (e / external)))))) 
            :op-of (a3 / any)) 
      :op-of (s / so 
            :mod-of (i / i)))

# ::snt dont bother to cook dinner tonight
# ::tok dont bother to cook dinner tonight
# ::alignments 5-6|0.0.0 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:49.883
# ::node	0	bother-02	1-2
# ::node	0.0	dinner	4-5
# ::node	0.0.0	tonight	5-6
# ::root	0	bother-02
# ::edge	bother-02	ARG1	dinner	0	0.0	
# ::edge	tonight	mod	dinner	0.0.0	0.0	
(b / bother-02 
      :ARG1 (d / dinner 
            :mod-of (t / tonight)))

# ::snt why do they bother
# ::tok why do they bother
# ::alignments 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:49.888
# ::node	0	bother-02	3-4
# ::node	0.0	they	2-3
# ::root	0	bother-02
# ::edge	bother-02	ARG0	they	0	0.0	
(b / bother-02 
      :ARG0 (t / they))

# ::snt after all in godbers world why bother with what is love tis not hereafter from o mistress mine when you can let rip with baby baby come closer to me
# ::tok after all in godbers world why bother with what is love tis not hereafter from o mistress mine when you can let rip with baby baby come closer to me
# ::alignments 27-28|0.2.0.0.0.0.0 25-26|0.1 24-25|0.1.0 22-23|0 21-22|0.2 20-21|0.2.1 19-20|0.2.0 17-18|0.2.2 16-17|0.2.2.0 10-11|0.2.0.0 6-7|0.2.0.0.0.0 4-5|0.2.0.0.0 1-2|0.0 0-1|0.2.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:50.105
# ::node	0	rip-04	22-23
# ::node	0.0	all	1-2
# ::node	0.1	baby	25-26
# ::node	0.1.0	baby	24-25
# ::node	0.2	let-01	21-22
# ::node	0.2.0	you	19-20
# ::node	0.2.0.0	love-01	10-11
# ::node	0.2.0.0.0	world	4-5
# ::node	0.2.0.0.0.0	bother-02	6-7
# ::node	0.2.0.0.0.0.0	close	27-28
# ::node	0.2.1	possible	20-21
# ::node	0.2.2	mine	17-18
# ::node	0.2.2.0	mistress	16-17
# ::node	0.2.3	after	0-1
# ::root	0	rip-04
# ::edge	after	op1	let-01	0.2.3	0.2	
# ::edge	baby	mod	baby	0.1	0.1.0	
# ::edge	bother-02	ARG0	close	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	bother-02	ARG1	world	0.2.0.0.0.0	0.2.0.0.0	
# ::edge	let-01	ARG0	you	0.2	0.2.0	
# ::edge	let-01	ARG1	rip-04	0.2	0	
# ::edge	let-01	location	mine	0.2	0.2.2	
# ::edge	love-01	ARG0	you	0.2.0.0	0.2.0	
# ::edge	love-01	ARG1	world	0.2.0.0	0.2.0.0.0	
# ::edge	mine	mod	mistress	0.2.2	0.2.2.0	
# ::edge	possible	domain	let-01	0.2.1	0.2	
# ::edge	rip-04	ARG0	all	0	0.0	
# ::edge	rip-04	ARG1	baby	0	0.1	
(r / rip-04 
      :ARG0 (a / all) 
      :ARG1 (b / baby 
            :mod (b2 / baby)) 
      :ARG1-of (l / let-01 
            :ARG0 (y / you 
                  :ARG0-of (l2 / love-01 
                        :ARG1 (w / world 
                              :ARG1-of (b3 / bother-02 
                                    :ARG0 (c / close))))) 
            :domain-of (p / possible) 
            :location (m / mine 
                  :mod (m2 / mistress)) 
            :op-of (a2 / after)))

# ::snt as always this last bothered slightly some of those within hearing who wondered whether the brothers might be enjoying a typical asian joke at some of the stupid brits they served and made a good living out of
# ::tok as always this last bothered slightly some of those within hearing who wondered whether the brothers might be enjoying a typical asian joke at some of the stupid brits they served and made a good living out of
# ::alignments 35-36|0.0.0.1.1.1 34-35|0.0.0.1.1.1.1 31-32|0.0.0.1 30-31|0.0.0.1.1 29-30|0.0.0.1.1.0 27-28|0.0.0.1.1.1.0 24-25|0.0.0.1.0.0.0 22-23|0.0 20-21|0 18-19|0.0.0 15-16|0.0.0.0+0.0.0.0.0 12-13|0.0.0.1.0 10-11|0.0.0.1.0.0 9-10|0.0.0.1.0.0.2 6-7|0.0.0.1.0.0.2.0.1.0 5-6|0.0.0.1.0.0.2.0.1 4-5|0.0.0.1.0.0.2.0 3-4|0.0.0.1.0.0.2.0.0 2-3|0.0.0.1.0.0.1 1-2|0.0.0.1.0.0.2.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:50.542
# ::node	0	typify-01	20-21
# ::node	0.0	joke-01	22-23
# ::node	0.0.0	enjoy-01	18-19
# ::node	0.0.0.0	brother	15-16
# ::node	0.0.0.0.0	have-rel-role-91	15-16
# ::node	0.0.0.1	and	31-32
# ::node	0.0.0.1.0	wonder-01	12-13
# ::node	0.0.0.1.0.0	hear-01	10-11
# ::node	0.0.0.1.0.0.0	some	24-25
# ::node	0.0.0.1.0.0.1	this	2-3
# ::node	0.0.0.1.0.0.2	within	9-10
# ::node	0.0.0.1.0.0.2.0	bother-01	4-5
# ::node	0.0.0.1.0.0.2.0.0	last	3-4
# ::node	0.0.0.1.0.0.2.0.1	slight	5-6
# ::node	0.0.0.1.0.0.2.0.1.0	some	6-7
# ::node	0.0.0.1.0.0.2.0.2	always	1-2
# ::node	0.0.0.1.1	serve-01	30-31
# ::node	0.0.0.1.1.0	they	29-30
# ::node	0.0.0.1.1.1	live-01	35-36
# ::node	0.0.0.1.1.1.0	stupid	27-28
# ::node	0.0.0.1.1.1.1	good	34-35
# ::root	0	typify-01
# ::edge	and	op1	enjoy-01	0.0.0.1	0.0.0	
# ::edge	and	op2	serve-01	0.0.0.1	0.0.0.1.1	
# ::edge	bother-01	ARG0	last	0.0.0.1.0.0.2.0	0.0.0.1.0.0.2.0.0	
# ::edge	bother-01	ARG1	slight	0.0.0.1.0.0.2.0	0.0.0.1.0.0.2.0.1	
# ::edge	bother-01	time	always	0.0.0.1.0.0.2.0	0.0.0.1.0.0.2.0.2	
# ::edge	bother-01	time	within	0.0.0.1.0.0.2.0	0.0.0.1.0.0.2	
# ::edge	enjoy-01	ARG0	brother	0.0.0	0.0.0.0	
# ::edge	enjoy-01	ARG1	joke-01	0.0.0	0.0	
# ::edge	have-rel-role-91	ARG2	brother	0.0.0.0.0	0.0.0.0	
# ::edge	hear-01	ARG0	some	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	hear-01	ARG1	this	0.0.0.1.0.0	0.0.0.1.0.0.1	
# ::edge	live-01	ARG1	stupid	0.0.0.1.1.1	0.0.0.1.1.1.0	
# ::edge	live-01	mod	good	0.0.0.1.1.1	0.0.0.1.1.1.1	
# ::edge	serve-01	ARG0	they	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	serve-01	ARG1	live-01	0.0.0.1.1	0.0.0.1.1.1	
# ::edge	some	mod	slight	0.0.0.1.0.0.2.0.1.0	0.0.0.1.0.0.2.0.1	
# ::edge	typify-01	ARG1	joke-01	0	0.0	
# ::edge	within	op1	hear-01	0.0.0.1.0.0.2	0.0.0.1.0.0	
# ::edge	wonder-01	ARG0	hear-01	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	wonder-01	ARG1	and	0.0.0.1.0	0.0.0.1	
(t2 / typify-01 
      :ARG1 (j / joke-01 
            :ARG1-of (e / enjoy-01 
                  :ARG0 (b / brother 
                        :ARG2-of (h / have-rel-role-91)) 
                  :op-of (a / and 
                        :ARG1-of (w / wonder-01 
                              :ARG0 (h2 / hear-01 
                                    :ARG0 (s3 / some) 
                                    :ARG1 (t3 / this) 
                                    :op-of (w2 / within 
                                          :time-of (b2 / bother-01 
                                                :ARG0 (l2 / last) 
                                                :ARG1 (s5 / slight 
                                                      :mod-of (s4 / some)) 
                                                :time (a2 / always))))) 
                        :op1 (s / serve-01 
                              :ARG0 (t / they) 
                              :ARG1 (l / live-01 
                                    :ARG1 (s2 / stupid) 
                                    :mod (g / good)))))))

# ::snt but since when have all blacks been bothered about the spirit of the game
# ::tok but since when have all blacks been bothered about the spirit of the game
# ::alignments 13-14|0.1.0.0 10-11|0.1.0 7-8|0.1 5-6|0.1.1.0+0.1.1 4-5|0.1.1.1 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:50.585
# ::node	0	contrast-01	0-1
# ::node	0.0	since	1-2
# ::node	0.1	bother-01	7-8
# ::node	0.1.0	spirit	10-11
# ::node	0.1.0.0	game	13-14
# ::node	0.1.1	person	5-6
# ::node	0.1.1.0	black	5-6
# ::node	0.1.1.1	all	4-5
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	spirit	0.1	0.1.0	
# ::edge	bother-01	ARG1	person	0.1	0.1.1	
# ::edge	contrast-01	ARG1	since	0	0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.1	
# ::edge	person	mod	black	0.1.1	0.1.1.0	
# ::edge	person	quant	all	0.1.1	0.1.1.1	
# ::edge	spirit	poss	game	0.1.0	0.1.0.0	
(c / contrast-01 
      :ARG1 (s2 / since) 
      :ARG2 (b / bother-01 
            :ARG0 (s / spirit 
                  :poss (g / game)) 
            :ARG1 (p / person 
                  :mod (b2 / black) 
                  :quant (a / all))))

# ::snt to bother about outside interests
# ::tok to bother about outside interests
# ::alignments 4-5|0.0 3-4|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:50.592
# ::node	0	bother-02	1-2
# ::node	0.0	interest	4-5
# ::node	0.0.0	outside	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG1	interest	0	0.0	
# ::edge	interest	mod	outside	0.0	0.0.0	
(b / bother-02 
      :ARG1 (i / interest 
            :mod (o / outside)))

# ::snt but then why bother if you can make an echo chamber out of a spring from the garden gate and get a range of weird noises simply by placing toilet chains and marbles across the strings of your piano
# ::tok but then why bother if you can make an echo chamber out of a spring from the garden gate and get a range of weird noises simply by placing toilet chains and marbles across the strings of your piano
# ::alignments 38-39|0.1.2.0.1.0.1.0.0 35-36|0.1.2.0.1.0.1.0 33-34|0.1.2.0.1.0.1 31-32|0.1.2.0.1.0.0 29-30|0.1.2.0.1.2 28-29|0.1.2.0.1.0 26-27|0.1.2.0.1.0.2 25-26|0.1.2.0.1.1 24-25|0.1.2.0.1.1.0 22-23|0.1.2.0.1 19-20|0.1.2.0 17-18|0.0 14-15|0.1.2.0.0 10-11|0.1.1 9-10|0.1.1.0 6-7|0.1.2 5-6|0.1.0 3-4|0.1 1-2|0.1.3 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:51.015
# ::node	0	contrast-01	0-1
# ::node	0.0	garden	17-18
# ::node	0.1	bother-02	3-4
# ::node	0.1.0	you	5-6
# ::node	0.1.1	chamber	10-11
# ::node	0.1.1.0	echo-01	9-10
# ::node	0.1.2	possible	6-7
# ::node	0.1.2.0	and	19-20
# ::node	0.1.2.0.0	spring	14-15
# ::node	0.1.2.0.1	range-01	22-23
# ::node	0.1.2.0.1.0	place-01	28-29
# ::node	0.1.2.0.1.0.0	and	31-32
# ::node	0.1.2.0.1.0.1	across	33-34
# ::node	0.1.2.0.1.0.1.0	string	35-36
# ::node	0.1.2.0.1.0.1.0.0	piano	38-39
# ::node	0.1.2.0.1.0.2	simple	26-27
# ::node	0.1.2.0.1.1	noise	25-26
# ::node	0.1.2.0.1.1.0	weird	24-25
# ::node	0.1.2.0.1.2	toilet	29-30
# ::node	0.1.3	then	1-2
# ::root	0	contrast-01
# ::edge	across	op1	string	0.1.2.0.1.0.1	0.1.2.0.1.0.1.0	
# ::edge	and	op1	spring	0.1.2.0	0.1.2.0.0	
# ::edge	and	op2	range-01	0.1.2.0	0.1.2.0.1	
# ::edge	bother-02	ARG0	you	0.1	0.1.0	
# ::edge	bother-02	ARG1	chamber	0.1	0.1.1	
# ::edge	bother-02	condition	possible	0.1	0.1.2	
# ::edge	bother-02	mod	then	0.1	0.1.3	
# ::edge	contrast-01	ARG0	garden	0	0.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.1	
# ::edge	echo-01	ARG1	chamber	0.1.1.0	0.1.1	
# ::edge	noise	mod	weird	0.1.2.0.1.1	0.1.2.0.1.1.0	
# ::edge	place-01	ARG0	range-01	0.1.2.0.1.0	0.1.2.0.1	
# ::edge	place-01	ARG1	and	0.1.2.0.1.0	0.1.2.0.1.0.0	
# ::edge	place-01	location	across	0.1.2.0.1.0	0.1.2.0.1.0.1	
# ::edge	place-01	mod	simple	0.1.2.0.1.0	0.1.2.0.1.0.2	
# ::edge	possible	domain	and	0.1.2	0.1.2.0	
# ::edge	range-01	ARG1	noise	0.1.2.0.1	0.1.2.0.1.1	
# ::edge	range-01	prep-in	toilet	0.1.2.0.1	0.1.2.0.1.2	
# ::edge	string	location	piano	0.1.2.0.1.0.1.0	0.1.2.0.1.0.1.0.0	
(c2 / contrast-01 
      :ARG0 (g / garden) 
      :ARG1 (b / bother-02 
            :ARG0 (y / you) 
            :ARG1 (c / chamber 
                  :ARG1-of (e / echo-01)) 
            :condition (p3 / possible 
                  :domain (a3 / and 
                        :op1 (s3 / spring) 
                        :op2 (r / range-01 
                              :ARG0-of (p2 / place-01 
                                    :ARG1 (a2 / and) 
                                    :location (a / across 
                                          :op1 (s / string 
                                                :location (p / piano))) 
                                    :mod (s2 / simple)) 
                              :ARG1 (n / noise 
                                    :mod (w / weird)) 
                              :prep-in (t / toilet)))) 
            :mod (t2 / then)))

# ::snt i cant be bothered
# ::tok i cant be bothered
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:51.022
# ::node	0	bother-01	3-4
# ::node	0.0	i	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG0	i	0	0.0	
(b / bother-01 
      :ARG0 (i / i))

# ::snt he taploaded the next cartridge not bothering to use the cumbersome ramrod but just slamming the rifles butt hard on the ground in hope that the blow would jar the ball down to the loose charge
# ::tok he taploaded the next cartridge not bothering to use the cumbersome ramrod but just slamming the rifles butt hard on the ground in hope that the blow would jar the ball down to the loose charge
# ::alignments 34-35|0.2 31-32|0.3.1.1.0 30-31|0.3.1.1 26-27|0.3.1 23-24|0.3 21-22|0.3.0 18-19|0.1.2 16-17|0.3.1.0 13-14|0.0 12-13|0 8-9|0.1 6-7|0.1.1 3-4|0.1.0 0-1|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:51.292
# ::node	0	contrast-01	12-13
# ::node	0.0	just	13-14
# ::node	0.1	use-01	8-9
# ::node	0.1.0	next	3-4
# ::node	0.1.1	bother-01	6-7
# ::node	0.1.1.0	he	0-1
# ::node	0.1.2	hard	18-19
# ::node	0.2	loose-01	34-35
# ::node	0.3	hope-01	23-24
# ::node	0.3.0	ground	21-22
# ::node	0.3.1	blow-06	26-27
# ::node	0.3.1.0	rifle	16-17
# ::node	0.3.1.1	ball	30-31
# ::node	0.3.1.1.0	down	31-32
# ::root	0	contrast-01
# ::edge	ball	prep-with	blow-06	0.3.1.1	0.3.1	
# ::edge	blow-06	ARG0	rifle	0.3.1	0.3.1.0	
# ::edge	bother-01	ARG0	he	0.1.1	0.1.1.0	
# ::edge	bother-01	ARG1	use-01	0.1.1	0.1	
# ::edge	contrast-01	ARG1	just	0	0.0	
# ::edge	contrast-01	ARG2	hope-01	0	0.3	
# ::edge	down	path	ball	0.3.1.1.0	0.3.1.1	
# ::edge	hard	domain	use-01	0.1.2	0.1	
# ::edge	hope-01	ARG0	ground	0.3	0.3.0	
# ::edge	hope-01	ARG1	blow-06	0.3	0.3.1	
# ::edge	loose-01	ARG1	contrast-01	0.2	0	
# ::edge	use-01	ARG0	next	0.1	0.1.0	
# ::edge	use-01	ARG1	contrast-01	0.1	0	
(c / contrast-01 
      :ARG1 (j / just) 
      :ARG1-of (u / use-01 
            :ARG0 (n / next) 
            :ARG1-of (b3 / bother-01 
                  :ARG0 (h3 / he)) 
            :domain-of (h2 / hard)) 
      :ARG1-of (l / loose-01) 
      :ARG2 (h / hope-01 
            :ARG0 (g / ground) 
            :ARG1 (b2 / blow-06 
                  :ARG0 (r / rifle) 
                  :prep-with-of (b / ball 
                        :path-of (d / down)))))

# ::snt if one talks to people in hong kong one soon discovers that few have read the draft basic law and even fewer find it worth bothering about
# ::tok if one talks to people in hong kong one soon discovers that few have read the draft basic law and even fewer find it worth bothering about
# ::alignments 25-26|0.0.0 24-25|0 23-24|0.0 21-22|0.0.0.0.0.2 19-20|0.0.0.0 18-19|0.0.0.0.0 17-18|0.0.0.0.0.3 16-17|0.0.0.0.0.0 14-15|0.0.0.0.0.1 12-13|0.0.0.0.0.1.0 9-10|0.0.1.0.0.2 6-8|0.0.1.0.0.0+0.0.1.0.0.1+0.0.1.0.0+0.0.1.0 2-3|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:51.505
# ::node	0	worth	24-25
# ::node	0.0	it	23-24
# ::node	0.0.0	bother-01	25-26
# ::node	0.0.0.0	and	19-20
# ::node	0.0.0.0.0	law	18-19
# ::node	0.0.0.0.0.0	draft-01	16-17
# ::node	0.0.0.0.0.1	read-01	14-15
# ::node	0.0.0.0.0.1.0	few	12-13
# ::node	0.0.0.0.0.2	few	21-22
# ::node	0.0.0.0.0.3	basic	17-18
# ::node	0.0.1	talk-01	2-3
# ::node	0.0.1.0	country	6-8
# ::node	0.0.1.0.0	name	6-8
# ::node	0.0.1.0.0.0	"kong"	6-8
# ::node	0.0.1.0.0.1	"hong"	6-8
# ::node	0.0.1.0.0.2	soon	9-10
# ::root	0	worth
# ::edge	and	op1	law	0.0.0.0	0.0.0.0.0	
# ::edge	bother-01	ARG0	and	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG1	it	0.0.0	0.0	
# ::edge	country	name	name	0.0.1.0	0.0.1.0.0	
# ::edge	draft-01	ARG1	law	0.0.0.0.0.0	0.0.0.0.0	
# ::edge	few	compared-to	law	0.0.0.0.0.2	0.0.0.0.0	
# ::edge	law	mod	basic	0.0.0.0.0	0.0.0.0.0.3	
# ::edge	name	op1	"kong"	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	name	op2	"hong"	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	name	time	soon	0.0.1.0.0	0.0.1.0.0.2	
# ::edge	read-01	ARG0	few	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	read-01	ARG1	law	0.0.0.0.0.1	0.0.0.0.0	
# ::edge	talk-01	ARG0	country	0.0.1	0.0.1.0	
# ::edge	talk-01	ARG1	it	0.0.1	0.0	
# ::edge	worth	op1	it	0	0.0	
(w / worth 
      :op1 (i / it 
            :ARG1-of (b / bother-01 
                  :ARG0 (a / and 
                        :op1 (l / law 
                              :ARG1-of (d / draft-01) 
                              :ARG1-of (r / read-01 
                                    :ARG0 (f2 / few)) 
                              :compared-to-of (f / few) 
                              :mod (b2 / basic)))) 
            :ARG1-of (t / talk-01 
                  :ARG0 (c / country 
                        :name (n / name 
                              :op1 "kong" 
                              :op2 "hong" 
                              :time (s / soon))))))

# ::snt houses that are way beyond anyones means although i thought the duchess of kent was kind to the organisers by bothering to tour one of the show homes that would be little more than a conservatory tacked on to her stately home
# ::tok houses that are way beyond anyones means although i thought the duchess of kent was kind to the organisers by bothering to tour one of the show homes that would be little more than a conservatory tacked on to her stately home
# ::alignments 41-42|0.0.0.1.0 31-32|0.0.0.0 27-28|0.0 26-27|0 22-23|0.0.0 20-21|0.0.0.1 15-16|0.0.0.1.1 9-10|0.0.0.1.1.0 8-9|0.0.0.1.1.0.0 6-7|0.0.0.1.1.0.1 4-5|0.0.0.1.1.0.1.1 3-4|0.0.0.1.1.0.1.1.0 0-1|0.0.0.1.1.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:51.696
# ::node	0	show-01	26-27
# ::node	0.0	home	27-28
# ::node	0.0.0	tour-01	22-23
# ::node	0.0.0.0	little	31-32
# ::node	0.0.0.1	bother-01	20-21
# ::node	0.0.0.1.0	home	41-42
# ::node	0.0.0.1.1	kind	15-16
# ::node	0.0.0.1.1.0	think-01	9-10
# ::node	0.0.0.1.1.0.0	i	8-9
# ::node	0.0.0.1.1.0.1	mean-01	6-7
# ::node	0.0.0.1.1.0.1.0	house	0-1
# ::node	0.0.0.1.1.0.1.1	beyond	4-5
# ::node	0.0.0.1.1.0.1.1.0	way	3-4
# ::root	0	show-01
# ::edge	bother-01	ARG0	home	0.0.0.1	0.0.0.1.0	
# ::edge	bother-01	ARG1	tour-01	0.0.0.1	0.0.0	
# ::edge	kind	topic	bother-01	0.0.0.1.1	0.0.0.1	
# ::edge	mean-01	ARG0	house	0.0.0.1.1.0.1	0.0.0.1.1.0.1.0	
# ::edge	mean-01	ARG1	beyond	0.0.0.1.1.0.1	0.0.0.1.1.0.1.1	
# ::edge	mean-01	condition	think-01	0.0.0.1.1.0.1	0.0.0.1.1.0	
# ::edge	show-01	ARG1	home	0	0.0	
# ::edge	think-01	ARG0	i	0.0.0.1.1.0	0.0.0.1.1.0.0	
# ::edge	think-01	ARG1	kind	0.0.0.1.1.0	0.0.0.1.1	
# ::edge	tour-01	ARG0	little	0.0.0	0.0.0.0	
# ::edge	tour-01	ARG1	home	0.0.0	0.0	
# ::edge	way	location	beyond	0.0.0.1.1.0.1.1.0	0.0.0.1.1.0.1.1	
(s / show-01 
      :ARG1 (h2 / home 
            :ARG1-of (t / tour-01 
                  :ARG0 (l / little) 
                  :ARG1-of (b / bother-01 
                        :ARG0 (h / home) 
                        :topic-of (k / kind 
                              :ARG1-of (t2 / think-01 
                                    :ARG0 (i / i) 
                                    :condition-of (m / mean-01 
                                          :ARG0 (h3 / house) 
                                          :ARG1 (b2 / beyond 
                                                :location-of (w / way)))))))))

# ::snt i never even bothered to dig for its buddy the lowly lugworm because they earned just 7s 6d for 100
# ::tok i never even bothered to dig for its buddy the lowly lugworm because they earned just 7s 6d for 100
# ::alignments 19-20|0.1.0.0.0.0.0 15-16|0.0.1 14-15|0.0 13-14|0.0.0 12-13|0 8-9|0.1.0.0+0.1.0 5-6|0.1.0.0.0 3-4|0.1.0.0.0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:51.797
# ::node	0	cause-01	12-13
# ::node	0.0	earn-01	14-15
# ::node	0.0.0	they	13-14
# ::node	0.0.1	just	15-16
# ::node	0.1	i	0-1
# ::node	0.1.0	have-rel-role-91	8-9
# ::node	0.1.0.0	buddy	8-9
# ::node	0.1.0.0.0	dig-01	5-6
# ::node	0.1.0.0.0.0	bother-01	3-4
# ::node	0.1.0.0.0.0.0	100	19-20
# ::root	0	cause-01
# ::edge	bother-01	ARG0	100	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	bother-01	ARG1	dig-01	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	cause-01	ARG0	earn-01	0	0.0	
# ::edge	cause-01	ARG1	i	0	0.1	
# ::edge	dig-01	ARG1	buddy	0.1.0.0.0	0.1.0.0	
# ::edge	earn-01	ARG0	they	0.0	0.0.0	
# ::edge	earn-01	ARG1	just	0.0	0.0.1	
# ::edge	have-rel-role-91	ARG1	i	0.1.0	0.1	
# ::edge	have-rel-role-91	ARG2	buddy	0.1.0	0.1.0.0	
(c / cause-01 
      :ARG0 (e / earn-01 
            :ARG0 (t / they) 
            :ARG1 (j / just)) 
      :ARG1 (i / i 
            :ARG1-of (h / have-rel-role-91 
                  :ARG2 (b / buddy 
                        :ARG1-of (d / dig-01 
                              :ARG1-of (b2 / bother-01 
                                    :ARG0 100))))))

# ::snt the anglers do not bother to fish if they are allocated a spot which is not frozen perhaps because a stream runs in or a tree has sheltered an area from the worst of the frost and snow
# ::tok the anglers do not bother to fish if they are allocated a spot which is not frozen perhaps because a stream runs in or a tree has sheltered an area from the worst of the frost and snow
# ::alignments 37-38|0.0.1 36-37|0.0.1.0 32-33|0.1.0.0.0.1 29-30|0.0.0.0 25-26|0.0.0.0.0 23-24|0.0 20-21|0.0.0 18-19|0 17-18|0.2 16-17|0.1 12-13|0.1.0 10-11|0.1.0.0 8-9|0.1.0.0.0 6-7|0.1.0.0.0.0.0 4-5|0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:52.312
# ::node	0	cause-01	18-19
# ::node	0.0	or	23-24
# ::node	0.0.0	stream-02	20-21
# ::node	0.0.0.0	area	29-30
# ::node	0.0.0.0.0	tree	25-26
# ::node	0.0.1	snow	37-38
# ::node	0.0.1.0	and	36-37
# ::node	0.1	freeze-02	16-17
# ::node	0.1.0	spot	12-13
# ::node	0.1.0.0	allocate-01	10-11
# ::node	0.1.0.0.0	they	8-9
# ::node	0.1.0.0.0.0	bother-02	4-5
# ::node	0.1.0.0.0.0.0	fish	6-7
# ::node	0.1.0.0.0.1	bad	32-33
# ::node	0.2	perhaps	17-18
# ::root	0	cause-01
# ::edge	allocate-01	ARG0	they	0.1.0.0	0.1.0.0.0	
# ::edge	allocate-01	ARG1	spot	0.1.0.0	0.1.0	
# ::edge	and	op1	snow	0.0.1.0	0.0.1	
# ::edge	area	direction	tree	0.0.0.0	0.0.0.0.0	
# ::edge	bother-02	ARG1	they	0.1.0.0.0.0	0.1.0.0.0	
# ::edge	bother-02	ARG2	fish	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	cause-01	ARG0	or	0	0.0	
# ::edge	cause-01	ARG1	freeze-02	0	0.1	
# ::edge	cause-01	mod	perhaps	0	0.2	
# ::edge	or	mod	stream-02	0.0	0.0.0	
# ::edge	or	op1	snow	0.0	0.0.1	
# ::edge	spot	mod	freeze-02	0.1.0	0.1	
# ::edge	stream-02	ARG1	area	0.0.0	0.0.0.0	
# ::edge	they	mod	bad	0.1.0.0.0	0.1.0.0.0.1	
(c / cause-01 
      :ARG0 (o / or 
            :mod (s2 / stream-02 
                  :ARG1 (a2 / area 
                        :direction (t / tree))) 
            :op1 (s / snow 
                  :op-of (a / and))) 
      :ARG1 (f / freeze-02 
            :mod-of (s3 / spot 
                  :ARG1-of (a3 / allocate-01 
                        :ARG0 (t2 / they 
                              :ARG1-of (b2 / bother-02 
                                    :ARG2 (f2 / fish)) 
                              :mod (b / bad))))) 
      :mod (p / perhaps))

# ::snt so youre excluding it from your warranty and saying dont bother us go back to the trader
# ::tok so youre excluding it from your warranty and saying dont bother us go back to the trader
# ::alignments 13-14|0.0.1.1 10-11|0.0.1 8-9|0 7-8|0.0 3-4|0.0.0.0 2-3|0.0.0 0-1|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:52.347
# ::node	0	say-01	8-9
# ::node	0.0	and	7-8
# ::node	0.0.0	exclude-01	2-3
# ::node	0.0.0.0	it	3-4
# ::node	0.0.1	bother-02	10-11
# ::node	0.0.1.0	so	0-1
# ::node	0.0.1.1	back	13-14
# ::root	0	say-01
# ::edge	and	op1	exclude-01	0.0	0.0.0	
# ::edge	and	op2	bother-02	0.0	0.0.1	
# ::edge	bother-02	ARG0	so	0.0.1	0.0.1.0	
# ::edge	bother-02	ARG1	back	0.0.1	0.0.1.1	
# ::edge	exclude-01	ARG1	it	0.0.0	0.0.0.0	
# ::edge	say-01	ARG1	and	0	0.0	
(s / say-01 
      :ARG1 (a / and 
            :op1 (e / exclude-01 
                  :ARG1 (i / it)) 
            :op2 (b2 / bother-02 
                  :ARG0 (s2 / so) 
                  :ARG1 (b / back))))

# ::snt hes bothering daily about his soldiers in the field and not about the crosses in the school ellip
# ::tok hes bothering daily about his soldiers in the field and not about the crosses in the school ellip
# ::alignments 16-17|0.0.0 9-10|0 8-9|0.1 5-6|0.0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:52.381
# ::node	0	and	9-10
# ::node	0.0	bother-01	1-2
# ::node	0.0.0	school	16-17
# ::node	0.0.1	soldier	5-6
# ::node	0.1	field	8-9
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.0	
# ::edge	and	op2	field	0	0.1	
# ::edge	bother-01	ARG1	school	0.0	0.0.0	
# ::edge	bother-01	purpose	soldier	0.0	0.0.1	
(a / and 
      :op1 (b / bother-01 
            :ARG1 (s / school) 
            :purpose (s2 / soldier)) 
      :op2 (f / field))

# ::snt this pool is filled with freshwater crocodiles and water pythons but they dont bother us so we didnt tell you
# ::tok this pool is filled with freshwater crocodiles and water pythons but they dont bother us so we didnt tell you
# ::alignments 19-20|0.0.1.0.0 18-19|0.0.1.0 16-17|0.0.1 15-16|0.0.2 13-14|0.0 11-12|0.0.0 10-11|0 8-9|0.1.0.0 7-8|0.1.0 3-4|0.1 1-2|0.1.1 0-1|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:52.796
# ::node	0	contrast-01	10-11
# ::node	0.0	bother-02	13-14
# ::node	0.0.0	they	11-12
# ::node	0.0.1	we	16-17
# ::node	0.0.1.0	tell-01	18-19
# ::node	0.0.1.0.0	you	19-20
# ::node	0.0.2	so	15-16
# ::node	0.1	fill-01	3-4
# ::node	0.1.0	and	7-8
# ::node	0.1.0.0	water	8-9
# ::node	0.1.1	pool	1-2
# ::node	0.1.1.0	this	0-1
# ::root	0	contrast-01
# ::edge	and	op1	water	0.1.0	0.1.0.0	
# ::edge	bother-02	ARG0	they	0.0	0.0.0	
# ::edge	bother-02	ARG1	we	0.0	0.0.1	
# ::edge	contrast-01	ARG2	bother-02	0	0.0	
# ::edge	fill-01	ARG0	and	0.1	0.1.0	
# ::edge	fill-01	ARG1	pool	0.1	0.1.1	
# ::edge	fill-01	ARG4	contrast-01	0.1	0	
# ::edge	pool	mod	this	0.1.1	0.1.1.0	
# ::edge	so	op1	bother-02	0.0.2	0.0	
# ::edge	tell-01	ARG0	we	0.0.1.0	0.0.1	
# ::edge	tell-01	ARG2	you	0.0.1.0	0.0.1.0.0	
(c / contrast-01 
      :ARG2 (b / bother-02 
            :ARG0 (t2 / they) 
            :ARG1 (w / we 
                  :ARG0-of (t / tell-01 
                        :ARG2 (y / you))) 
            :op-of (s / so)) 
      :ARG4-of (f / fill-01 
            :ARG0 (a / and 
                  :op1 (w2 / water)) 
            :ARG1 (p / pool 
                  :mod (t3 / this))))

# ::snt then i got so that i could not be bothered
# ::tok then i got so that i could not be bothered
# ::alignments 9-10|0.0 6-7|0 5-6|0.0.1 3-4|0.1 1-2|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:52.834
# ::node	0	possible	6-7
# ::node	0.0	bother-01	9-10
# ::node	0.0.0	i	1-2
# ::node	0.0.0.0	then	0-1
# ::node	0.0.1	i	5-6
# ::node	0.1	so	3-4
# ::root	0	possible
# ::edge	bother-01	ARG0	i	0.0	0.0.0	
# ::edge	bother-01	ARG1	i	0.0	0.0.1	
# ::edge	i	mod	then	0.0.0	0.0.0.0	
# ::edge	possible	domain	bother-01	0	0.0	
# ::edge	possible	mod	so	0	0.1	
(p / possible 
      :domain (b / bother-01 
            :ARG0 (i2 / i 
                  :mod (t / then)) 
            :ARG1 (i / i)) 
      :mod (s / so))

# ::snt another aspect of the theory which particularly bothered the army was that it cut the military off from the american people
# ::tok another aspect of the theory which particularly bothered the army was that it cut the military off from the american people
# ::alignments 19-20|0.1.0.0.0.0.0+0.1.0.0.0.0+0.1.0.0.0 16-17|0.1.0.0.0.1 15-16|0.1.0.0.0.1.0 12-13|0.1.0.1 9-10|0.1.0.0 7-8|0.1.0 6-7|0.1.0.2 4-5|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:53.056
# ::node	0	aspect	1-2
# ::node	0.0	another	0-1
# ::node	0.1	theory	4-5
# ::node	0.1.0	bother-01	7-8
# ::node	0.1.0.0	army	9-10
# ::node	0.1.0.0.0	country	19-20
# ::node	0.1.0.0.0.0	name	19-20
# ::node	0.1.0.0.0.0.0	"America"	19-20
# ::node	0.1.0.0.0.1	off	16-17
# ::node	0.1.0.0.0.1.0	military	15-16
# ::node	0.1.0.1	it	12-13
# ::node	0.1.0.2	particular	6-7
# ::root	0	aspect
# ::edge	army	poss	country	0.1.0.0	0.1.0.0.0	
# ::edge	aspect	mod	another	0	0.0	
# ::edge	bother-01	ARG0	theory	0.1.0	0.1	
# ::edge	bother-01	ARG1	army	0.1.0	0.1.0.0	
# ::edge	bother-01	ARG2	it	0.1.0	0.1.0.1	
# ::edge	bother-01	degree	particular	0.1.0	0.1.0.2	
# ::edge	country	name	name	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	name	op1	"America"	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	off	instrument	military	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	off	op1	country	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	theory	mod	aspect	0.1	0	
(a2 / aspect 
      :mod (a3 / another) 
      :mod-of (t / theory 
            :ARG0-of (b / bother-01 
                  :ARG1 (a / army 
                        :poss (c / country 
                              :name (n / name 
                                    :op1 "America") 
                              :op-of (o / off 
                                    :instrument (m / military)))) 
                  :ARG2 (i / it) 
                  :degree (p / particular))))

# ::snt my husbands not all that bothered one way or the other
# ::tok my husbands not all that bothered one way or the other
# ::alignments 10-11|0.0.2 8-9|0.0 7-8|0.0.1 5-6|0 3-4|0.1 1-2|0.0.0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:53.094
# ::node	0	bother-01	5-6
# ::node	0.0	or	8-9
# ::node	0.0.0	have-rel-role-91	1-2
# ::node	0.0.0.0	husband	1-2
# ::node	0.0.1	way	7-8
# ::node	0.0.2	other	10-11
# ::node	0.1	all	3-4
# ::root	0	bother-01
# ::edge	bother-01	ARG1	or	0	0.0	
# ::edge	bother-01	ARG2	all	0	0.1	
# ::edge	have-rel-role-91	ARG1	or	0.0.0	0.0	
# ::edge	have-rel-role-91	ARG2	husband	0.0.0	0.0.0.0	
# ::edge	or	op1	way	0.0	0.0.1	
# ::edge	or	op2	other	0.0	0.0.2	
(b / bother-01 
      :ARG1 (o2 / or 
            :ARG1-of (h / have-rel-role-91 
                  :ARG2 (h2 / husband)) 
            :op1 (w / way) 
            :op2 (o / other)) 
      :ARG2 (a / all))

# ::snt i know said henry and i am sorry to bother you at this time of night but my client has given me to understand that this is when you would be available
# ::tok i know said henry and i am sorry to bother you at this time of night but my client has given me to understand that this is when you would be available
# ::alignments 31-32|0.1.1.0.0 28-29|0.1.1.0 25-26|0.1.1.3 23-24|0.1.2 20-21|0.1 18-19|0.1.0 16-17|0 15-16|0.0.1.1.0 13-14|0.0.1.1 12-13|0.2 10-11|0.0.1.0 9-10|0.0.1 7-8|0.0 5-6|0.0.0 4-5|0.1.1.1 2-3|0.1.1 1-2|0.1.1.2 0-1|0.1.1.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:53.659
# ::node	0	contrast-01	16-17
# ::node	0.0	sorry-41	7-8
# ::node	0.0.0	i	5-6
# ::node	0.0.1	bother-02	9-10
# ::node	0.0.1.0	you	10-11
# ::node	0.0.1.1	time	13-14
# ::node	0.0.1.1.0	night	15-16
# ::node	0.1	give-01	20-21
# ::node	0.1.0	client	18-19
# ::node	0.1.1	say-01	2-3
# ::node	0.1.1.0	you	28-29
# ::node	0.1.1.0.0	available	31-32
# ::node	0.1.1.1	and	4-5
# ::node	0.1.1.2	know-01	1-2
# ::node	0.1.1.2.0	i	0-1
# ::node	0.1.1.3	this	25-26
# ::node	0.1.2	understand-01	23-24
# ::node	0.2	this	12-13
# ::root	0	contrast-01
# ::edge	available	domain	you	0.1.1.0.0	0.1.1.0	
# ::edge	bother-02	ARG1	you	0.0.1	0.0.1.0	
# ::edge	bother-02	time	time	0.0.1	0.0.1.1	
# ::edge	contrast-01	ARG1	sorry-41	0	0.0	
# ::edge	contrast-01	ARG2	give-01	0	0.1	
# ::edge	contrast-01	mod	this	0	0.2	
# ::edge	give-01	ARG0	client	0.1	0.1.0	
# ::edge	give-01	ARG1	say-01	0.1	0.1.1	
# ::edge	give-01	ARG2	understand-01	0.1	0.1.2	
# ::edge	know-01	ARG0	i	0.1.1.2	0.1.1.2.0	
# ::edge	know-01	ARG1	say-01	0.1.1.2	0.1.1	
# ::edge	say-01	ARG0	you	0.1.1	0.1.1.0	
# ::edge	say-01	ARG1	and	0.1.1	0.1.1.1	
# ::edge	sorry-41	ARG1	i	0.0	0.0.0	
# ::edge	sorry-41	ARG2	bother-02	0.0	0.0.1	
# ::edge	this	op1	say-01	0.1.1.3	0.1.1	
# ::edge	time	time	night	0.0.1.1	0.0.1.1.0	
(c2 / contrast-01 
      :ARG1 (s / sorry-41 
            :ARG1 (i / i) 
            :ARG2 (b / bother-02 
                  :ARG1 (y2 / you) 
                  :time (t2 / time 
                        :time (n / night)))) 
      :ARG2 (g / give-01 
            :ARG0 (c / client) 
            :ARG1 (s2 / say-01 
                  :ARG0 (y / you 
                        :domain-of (a / available)) 
                  :ARG1 (a2 / and) 
                  :ARG1-of (k / know-01 
                        :ARG0 (i2 / i)) 
                  :op-of (t / this)) 
            :ARG2 (u / understand-01)) 
      :mod (t3 / this))

# ::snt   does that bother her
# ::tok does that bother her
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:53.660
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt then why he asked bother to go
# ::tok then why he asked bother to go
# ::alignments 4-5|0 3-4|0.0.0 2-3|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:53.670
# ::node	0	bother-02	4-5
# ::node	0.0	he	2-3
# ::node	0.0.0	ask-02	3-4
# ::node	0.1	then	0-1
# ::root	0	bother-02
# ::edge	ask-02	ARG0	he	0.0.0	0.0	
# ::edge	bother-02	ARG0	he	0	0.0	
# ::edge	bother-02	ARG1	then	0	0.1	
(b / bother-02 
      :ARG0 (h / he 
            :ARG0-of (a / ask-02)) 
      :ARG1 (t / then))

# ::snt but as there are just 15 days of flat racing on turf left this year and with eddery having established a lead of eight in the jockeys table cauthen decided not to bother
# ::tok but as there are just 15 days of flat racing on turf left this year and with eddery having established a lead of eight in the jockeys table cauthen decided not to bother
# ::alignments 32-33|0.0.0.0.0 29-30|0.0.0.0.0.2 27-28|0.0.0.0.0.0 23-24|0.0.0.0.0.2.0 19-20|0.0.0.0 15-16|0.0.0 14-15|0.0.2 13-14|0.0.2.0 11-12|0.0.3 9-10|0.0 8-9|0.0.0.0.0.1 6-7|0.0.1.2+0.0.1 5-6|0.0.1.1 4-5|0.0.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:53.963
# ::node	0	contrast-01	0-1
# ::node	0.0	race-01	9-10
# ::node	0.0.0	and	15-16
# ::node	0.0.0.0	establish-01	19-20
# ::node	0.0.0.0.0	bother-02	32-33
# ::node	0.0.0.0.0.0	table	27-28
# ::node	0.0.0.0.0.1	flat	8-9
# ::node	0.0.0.0.0.2	decide-01	29-30
# ::node	0.0.0.0.0.2.0	8	23-24
# ::node	0.0.1	temporal-quantity	6-7
# ::node	0.0.1.0	just	4-5
# ::node	0.0.1.1	15	5-6
# ::node	0.0.1.2	day	6-7
# ::node	0.0.2	year	14-15
# ::node	0.0.2.0	this	13-14
# ::node	0.0.3	turf	11-12
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	table	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	bother-02	ARG1	flat	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	contrast-01	ARG1	race-01	0	0.0	
# ::edge	decide-01	ARG0	8	0.0.0.0.0.2	0.0.0.0.0.2.0	
# ::edge	decide-01	ARG1	bother-02	0.0.0.0.0.2	0.0.0.0.0	
# ::edge	establish-01	ARG1	and	0.0.0.0	0.0.0	
# ::edge	establish-01	ARG2	bother-02	0.0.0.0	0.0.0.0.0	
# ::edge	race-01	ARG0	and	0.0	0.0.0	
# ::edge	race-01	ARG1	temporal-quantity	0.0	0.0.1	
# ::edge	race-01	ARG2	year	0.0	0.0.2	
# ::edge	race-01	destination	turf	0.0	0.0.3	
# ::edge	temporal-quantity	mod	just	0.0.1	0.0.1.0	
# ::edge	temporal-quantity	quant	15	0.0.1	0.0.1.1	
# ::edge	temporal-quantity	unit	day	0.0.1	0.0.1.2	
# ::edge	year	mod	this	0.0.2	0.0.2.0	
(c / contrast-01 
      :ARG1 (r / race-01 
            :ARG0 (a / and 
                  :ARG1-of (e / establish-01 
                        :ARG2 (b / bother-02 
                              :ARG0 (t / table) 
                              :ARG1 (f / flat) 
                              :ARG1-of (d / decide-01 
                                    :ARG0 8)))) 
            :ARG1 (t4 / temporal-quantity 
                  :mod (j / just) 
                  :quant 15 
                  :unit (d2 / day)) 
            :ARG2 (y / year 
                  :mod (t2 / this)) 
            :destination (t3 / turf)))

# ::snt it didnt bother him that david hadnt had any hits dash
# ::tok it didnt bother him that david hadnt had any hits dash
# ::alignments 9-10|0.0.0 8-9|0.0.0.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:53.975
# ::node	0	bother-02	2-3
# ::node	0.0	it	0-1
# ::node	0.0.0	hit-01	9-10
# ::node	0.0.0.0	any	8-9
# ::root	0	bother-02
# ::edge	bother-02	ARG0	it	0	0.0	
# ::edge	hit-01	ARG2	it	0.0.0	0.0	
# ::edge	hit-01	instrument	any	0.0.0	0.0.0.0	
(b / bother-02 
      :ARG0 (i / it 
            :ARG2-of (h / hit-01 
                  :instrument (a / any))))

# ::snt rain did not care for the flat not because of its traces of vanessa that were everywhere but because she was disturbed that two people who were deeply aware of visual things should have bothered so little to make it pleasing
# ::tok rain did not care for the flat not because of its traces of vanessa that were everywhere but because she was disturbed that two people who were deeply aware of visual things should have bothered so little to make it pleasing
# ::alignments 39-40|0.1 36-37|0.2.0.0.0 35-36|0.2.0.0.0.0 34-35|0.2.0.0 32-33|0.2.0 31-32|0.2.0.0.1 30-31|0.2.0.0.1.0 27-28|0.0.0 23-24|0.0.2.0 21-22|0.0 19-20|0.0.1 18-19|0 17-18|0.2 16-17|0.2.1 11-12|0.0.2.1.1.0 8-9|0.0.2.1.1 6-7|0.0.2.1.0 3-4|0.0.2.1 0-1|0.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:54.762
# ::node	0	cause-01	18-19
# ::node	0.0	disturb-01	21-22
# ::node	0.0.0	deep	27-28
# ::node	0.0.1	she	19-20
# ::node	0.0.2	rain-01	0-1
# ::node	0.0.2.0	2	23-24
# ::node	0.0.2.1	care-01	3-4
# ::node	0.0.2.1.0	flat	6-7
# ::node	0.0.2.1.1	cause-01	8-9
# ::node	0.0.2.1.1.0	trace	11-12
# ::node	0.1	it	39-40
# ::node	0.2	contrast-01	17-18
# ::node	0.2.0	recommend-01	32-33
# ::node	0.2.0.0	bother-01	34-35
# ::node	0.2.0.0.0	little	36-37
# ::node	0.2.0.0.0.0	so	35-36
# ::node	0.2.0.0.1	thing	31-32
# ::node	0.2.0.0.1.0	visual	30-31
# ::node	0.2.1	everywhere	16-17
# ::root	0	cause-01
# ::edge	bother-01	ARG0	little	0.2.0.0	0.2.0.0.0	
# ::edge	bother-01	ARG1	thing	0.2.0.0	0.2.0.0.1	
# ::edge	care-01	ARG0	rain-01	0.0.2.1	0.0.2	
# ::edge	care-01	ARG1	flat	0.0.2.1	0.0.2.1.0	
# ::edge	cause-01	ARG0	disturb-01	0	0.0	
# ::edge	cause-01	ARG0	trace	0.0.2.1.1	0.0.2.1.1.0	
# ::edge	cause-01	ARG1	care-01	0.0.2.1.1	0.0.2.1	
# ::edge	cause-01	ARG1	it	0	0.1	
# ::edge	contrast-01	ARG1	recommend-01	0.2	0.2.0	
# ::edge	contrast-01	ARG2	cause-01	0.2	0	
# ::edge	contrast-01	direction	everywhere	0.2	0.2.1	
# ::edge	disturb-01	ARG0	deep	0.0	0.0.0	
# ::edge	disturb-01	ARG1	she	0.0	0.0.1	
# ::edge	little	degree	so	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	rain-01	ARG0	2	0.0.2	0.0.2.0	
# ::edge	rain-01	ARG1	disturb-01	0.0.2	0.0	
# ::edge	recommend-01	ARG1	bother-01	0.2.0	0.2.0.0	
# ::edge	thing	mod	visual	0.2.0.0.1	0.2.0.0.1.0	
(c / cause-01 
      :ARG0 (d2 / disturb-01 
            :ARG0 (d / deep) 
            :ARG1 (s2 / she) 
            :ARG1-of (r2 / rain-01 
                  :ARG0 2 
                  :ARG0-of (c4 / care-01 
                        :ARG1 (f / flat) 
                        :ARG1-of (c3 / cause-01 
                              :ARG0 (t2 / trace))))) 
      :ARG1 (i / it) 
      :ARG2-of (c2 / contrast-01 
            :ARG1 (r / recommend-01 
                  :ARG1 (b / bother-01 
                        :ARG0 (l / little 
                              :degree (s / so)) 
                        :ARG1 (t / thing 
                              :mod (v / visual)))) 
            :direction (e / everywhere)))

# ::snt although he appreciates the affection of his fans it bothers him that he cant do normal things without fans noticing
# ::tok although he appreciates the affection of his fans it bothers him that he cant do normal things without fans noticing
# ::alignments 18-19|0.1.1 16-17|0 15-16|0.0 12-13|0.1 9-10|0.1.0 8-9|0.1.0.1 7-8|0.1.0.0.0 4-5|0.1.0.0.0.0 1-2|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:54.899
# ::node	0	thing	16-17
# ::node	0.0	normal	15-16
# ::node	0.1	he	12-13
# ::node	0.1.0	bother-01	9-10
# ::node	0.1.0.0	he	1-2
# ::node	0.1.0.0.0	fan	7-8
# ::node	0.1.0.0.0.0	affection	4-5
# ::node	0.1.0.1	it	8-9
# ::node	0.1.1	fan	18-19
# ::root	0	thing
# ::edge	bother-01	ARG0	he	0.1.0	0.1.0.0	
# ::edge	bother-01	ARG1	it	0.1.0	0.1.0.1	
# ::edge	bother-01	ARG2	he	0.1.0	0.1	
# ::edge	fan	part	affection	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	fan	poss	he	0.1.0.0.0	0.1.0.0	
# ::edge	fan	poss	he	0.1.1	0.1	
# ::edge	thing	mod	normal	0	0.0	
# ::edge	thing	poss	he	0	0.1	
(t / thing 
      :mod (n / normal) 
      :poss (h / he 
            :ARG2-of (b / bother-01 
                  :ARG0 (h2 / he 
                        :poss-of (f2 / fan 
                              :part (a / affection))) 
                  :ARG1 (i / it)) 
            :poss-of (f / fan)))

# ::snt allowing for 120 proxy votes and some 50 people at the agm less than half the afbd membership bothered to register their opinion
# ::tok allowing for 120 proxy votes and some 50 people at the agm less than half the afbd membership bothered to register their opinion
# ::alignments 22-23|0 20-21|0.2 18-19|0.2.1 17-18|0.1 14-15|0.2.0.1.0 12-13|0.2.0.0 7-8|0.2.0.1.1 6-7|0.0 5-6|0.2.0.1.3 4-5|0.2.0.1 3-4|0.2.0.1.2 2-3|0.2.0.1.4 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:55.039
# ::node	0	opine-01	22-23
# ::node	0.0	some	6-7
# ::node	0.1	membership	17-18
# ::node	0.2	register-02	20-21
# ::node	0.2.0	allow-01	0-1
# ::node	0.2.0.0	less	12-13
# ::node	0.2.0.1	vote-01	4-5
# ::node	0.2.0.1.0	half	14-15
# ::node	0.2.0.1.1	50	7-8
# ::node	0.2.0.1.2	proxy	3-4
# ::node	0.2.0.1.3	and	5-6
# ::node	0.2.0.1.4	120	2-3
# ::node	0.2.1	bother-01	18-19
# ::root	0	opine-01
# ::edge	allow-01	ARG0	less	0.2.0	0.2.0.0	
# ::edge	allow-01	ARG1	register-02	0.2.0	0.2	
# ::edge	allow-01	manner	vote-01	0.2.0	0.2.0.1	
# ::edge	and	op1	vote-01	0.2.0.1.3	0.2.0.1	
# ::edge	bother-01	ARG1	register-02	0.2.1	0.2	
# ::edge	opine-01	ARG0	some	0	0.0	
# ::edge	opine-01	ARG1	membership	0	0.1	
# ::edge	register-02	ARG1	opine-01	0.2	0	
# ::edge	vote-01	ARG0	half	0.2.0.1	0.2.0.1.0	
# ::edge	vote-01	ARG1	50	0.2.0.1	0.2.0.1.1	
# ::edge	vote-01	mod	proxy	0.2.0.1	0.2.0.1.2	
# ::edge	vote-01	quant	120	0.2.0.1	0.2.0.1.4	
(o / opine-01 
      :ARG0 (s / some) 
      :ARG1 (m / membership) 
      :ARG1-of (r / register-02 
            :ARG1-of (a2 / allow-01 
                  :ARG0 (l / less) 
                  :manner (v / vote-01 
                        :ARG0 (h / half) 
                        :ARG1 50 
                        :mod (p / proxy) 
                        :op-of (a / and) 
                        :quant 120)) 
            :ARG1-of (b / bother-01)))

# ::snt the ftse share index although superfically in rampant form failed to reach the magic 2400 points but trading volume did manage to top 200 million shares the sort of insignificant level which left most wondering why the market had bothered to open at all
# ::tok the ftse share index although superfically in rampant form failed to reach the magic 2400 points but trading volume did manage to top 200 million shares the sort of insignificant level which left most wondering why the market had bothered to open at all
# ::alignments 43-44|0.1.0.0.1.0 39-40|0.1.0.0 37-38|0.1.0.0.0 34-35|0.1.0.0.1 33-34|0.0.0.1.2 30-31|0.0.0.1.0 29-30|0.0.0.1.0.1.0+0.0.0.1.0.1 27-28|0.0.0.1.0.0 25-26|0.0.0.1.1.0.0 23-24|0.0.0.1.1.0.0.0.0.0 22-23|0.0.0.1.1.0 20-21|0.0.0.1.1 18-19|0.1 17-18|0.1.0 16-17|0 15-16|0.0 14-15|0.0.2.0+0.0.2 13-14|0.0.1 11-12|0.0.0 9-10|0.0.0.1 8-9|0.0.0.0 7-8|0.0.0.0.0 3-4|0.0.0.1.1.0.0.0 2-3|0.0.0.1.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:55.835
# ::node	0	contrast-01	16-17
# ::node	0.0	point	15-16
# ::node	0.0.0	reach-01	11-12
# ::node	0.0.0.0	form	8-9
# ::node	0.0.0.0.0	rampant	7-8
# ::node	0.0.0.1	fail-01	9-10
# ::node	0.0.0.1.0	level	30-31
# ::node	0.0.0.1.0.0	sort	27-28
# ::node	0.0.0.1.0.1	significant	29-30
# ::node	0.0.0.1.0.1.0	-	29-30
# ::node	0.0.0.1.1	manage-01	20-21
# ::node	0.0.0.1.1.0	top	22-23
# ::node	0.0.0.1.1.0.0	share	25-26
# ::node	0.0.0.1.1.0.0.0	index	3-4
# ::node	0.0.0.1.1.0.0.0.0	share-01	2-3
# ::node	0.0.0.1.1.0.0.0.0.0	200	23-24
# ::node	0.0.0.1.2	most	33-34
# ::node	0.0.1	magic	13-14
# ::node	0.0.2	date-entity	14-15
# ::node	0.0.2.0	2400	14-15
# ::node	0.1	volume	18-19
# ::node	0.1.0	trade-01	17-18
# ::node	0.1.0.0	bother-01	39-40
# ::node	0.1.0.0.0	market	37-38
# ::node	0.1.0.0.1	wonder-01	34-35
# ::node	0.1.0.0.1.0	all	43-44
# ::root	0	contrast-01
# ::edge	bother-01	ARG1	market	0.1.0.0	0.1.0.0.0	
# ::edge	contrast-01	ARG1	point	0	0.0	
# ::edge	contrast-01	ARG2	volume	0	0.1	
# ::edge	date-entity	year	2400	0.0.2	0.0.2.0	
# ::edge	fail-01	ARG0	level	0.0.0.1	0.0.0.1.0	
# ::edge	fail-01	ARG1	most	0.0.0.1	0.0.0.1.2	
# ::edge	fail-01	ARG2	reach-01	0.0.0.1	0.0.0	
# ::edge	form	mod	rampant	0.0.0.0	0.0.0.0.0	
# ::edge	level	mod	significant	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	level	mod	sort	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	manage-01	ARG0	fail-01	0.0.0.1.1	0.0.0.1	
# ::edge	manage-01	ARG1	top	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	point	mod	magic	0.0	0.0.1	
# ::edge	point	time	date-entity	0.0	0.0.2	
# ::edge	reach-01	ARG0	form	0.0.0	0.0.0.0	
# ::edge	reach-01	ARG1	point	0.0.0	0.0	
# ::edge	share	poss	index	0.0.0.1.1.0.0	0.0.0.1.1.0.0.0	
# ::edge	share-01	ARG0	200	0.0.0.1.1.0.0.0.0	0.0.0.1.1.0.0.0.0.0	
# ::edge	share-01	ARG1	index	0.0.0.1.1.0.0.0.0	0.0.0.1.1.0.0.0	
# ::edge	significant	polarity	-	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	top	mod	share	0.0.0.1.1.0	0.0.0.1.1.0.0	
# ::edge	trade-01	ARG1	bother-01	0.1.0	0.1.0.0	
# ::edge	trade-01	quant	volume	0.1.0	0.1	
# ::edge	wonder-01	ARG0	all	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	wonder-01	ARG1	bother-01	0.1.0.0.1	0.1.0.0	
(c / contrast-01 
      :ARG1 (p / point 
            :ARG1-of (r / reach-01 
                  :ARG0 (f2 / form 
                        :mod (r2 / rampant)) 
                  :ARG2-of (f / fail-01 
                        :ARG0 (l / level 
                              :mod (s2 / sort) 
                              :mod (s / significant 
                                    :polarity -)) 
                        :ARG0-of (m3 / manage-01 
                              :ARG1 (t / top 
                                    :mod (s3 / share 
                                          :poss (i / index 
                                                :ARG1-of (s4 / share-01 
                                                      :ARG0 200))))) 
                        :ARG1 (m2 / most))) 
            :mod (m4 / magic) 
            :time (d / date-entity 
                  :year 2400)) 
      :ARG2 (v / volume 
            :quant-of (t2 / trade-01 
                  :ARG1 (b / bother-01 
                        :ARG1 (m / market) 
                        :ARG1-of (w / wonder-01 
                              :ARG0 (a / all))))))

# ::snt so why did bob bother
# ::tok so why did bob bother
# ::alignments 4-5|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:55.840
# ::node	0	bother-02	4-5
# ::node	0.0	so	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG0	so	0	0.0	
(b / bother-02 
      :ARG0 (s / so))

# ::snt obviously john had no time to investigate the theory and probably he would not have bothered anyway since it looks convincing and he was given to quick enthusiasms
# ::tok obviously john had no time to investigate the theory and probably he would not have bothered anyway since it looks convincing and he was given to quick enthusiasms
# ::alignments 26-27|0.0.1.1.2.2.0.0 24-25|0.0.1.1.2.2.0 22-23|0.0.1.1.2.2.0.2 21-22|0.0.1.1.2.2 20-21|0 19-20|0.0 18-19|0.0.0 17-18|0.0.1 16-17|0.0.1.0 15-16|0.0.1.1 11-12|0.0.1.1.0 10-11|0.0.1.1.2.1 9-10|0.0.1.1.2 8-9|0.0.1.1.1 6-7|0.0.1.1.2.0 4-5|0.0.1.1.2.0.0 3-4|0.0.1.1.2.0.0.0 0-1|0.0.1.1.2.2.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:56.560
# ::node	0	convince-01	20-21
# ::node	0.0	look-02	19-20
# ::node	0.0.0	it	18-19
# ::node	0.0.1	since	17-18
# ::node	0.0.1.0	anyway	16-17
# ::node	0.0.1.1	bother-01	15-16
# ::node	0.0.1.1.0	he	11-12
# ::node	0.0.1.1.1	theory	8-9
# ::node	0.0.1.1.2	and	9-10
# ::node	0.0.1.1.2.0	investigate-01	6-7
# ::node	0.0.1.1.2.0.0	time	4-5
# ::node	0.0.1.1.2.0.0.0	-	3-4
# ::node	0.0.1.1.2.1	probable	10-11
# ::node	0.0.1.1.2.2	and	21-22
# ::node	0.0.1.1.2.2.0	give-01	24-25
# ::node	0.0.1.1.2.2.0.0	quick	26-27
# ::node	0.0.1.1.2.2.0.1	obvious-41	0-1
# ::node	0.0.1.1.2.2.0.2	he	22-23
# ::root	0	convince-01
(c / convince-01 
      :ARG1-of (l / look-02 
            :ARG0 (i / it) 
            :op-of (s / since 
                  :mod (a2 / anyway) 
                  :time-of (b / bother-01 
                        :ARG0 (h2 / he) 
                        :ARG1 (t / theory) 
                        :op-of (a3 / and 
                              :ARG1-of (i2 / investigate-01 
                                    :purpose-of (t2 / time 
                                          :polarity (- / -))) 
                              :op1 (p / probable) 
                              :time-of (a / and 
                                    :op1 (g / give-01 
                                          :ARG1 (q / quick) 
                                          :ARG1-of (o / obvious-41) 
                                          :ARG2 (h / he))))))))

# ::snt this year marked the tenth anniversary of the face but whereas parties have been thrown to commemorate this occasion nobody has bothered to hold a do for the tenth anniversary of the training shoe
# ::tok this year marked the tenth anniversary of the face but whereas parties have been thrown to commemorate this occasion nobody has bothered to hold a do for the tenth anniversary of the training shoe
# ::alignments 33-34|0.1.0.1.1.0.0.0 32-33|0.1.0.1.1.0.0 29-30|0.1.0.1.1.0.0.0.0 21-22|0.1.0 19-20|0.1.0.0 18-19|0.1.0.0.0 17-18|0.1.0.0.1 16-17|0.1.0.1 14-15|0.1.0.1.1 11-12|0.1.0.1.0 10-11|0.1.0.1.1.0.1 9-10|0.1.0.1.1.0 8-9|0.1.1 5-6|0.1 2-3|0 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:56.991
# ::node	0	mark-01	2-3
# ::node	0.0	year	1-2
# ::node	0.0.0	this	0-1
# ::node	0.1	anniversary	5-6
# ::node	0.1.0	bother-01	21-22
# ::node	0.1.0.0	nobody	19-20
# ::node	0.1.0.0.0	occasion	18-19
# ::node	0.1.0.0.1	this	17-18
# ::node	0.1.0.1	commemorate-01	16-17
# ::node	0.1.0.1.0	party	11-12
# ::node	0.1.0.1.1	throw-01	14-15
# ::node	0.1.0.1.1.0	contrast-01	9-10
# ::node	0.1.0.1.1.0.0	train-01	32-33
# ::node	0.1.0.1.1.0.0.0	shoe-in	33-34
# ::node	0.1.0.1.1.0.0.0.0	anniversary	29-30
# ::node	0.1.0.1.1.0.1	whereas	10-11
# ::node	0.1.1	face-01	8-9
# ::root	0	mark-01
# ::edge	anniversary	poss	shoe-in	0.1.0.1.1.0.0.0.0	0.1.0.1.1.0.0.0	
# ::edge	anniversary	topic	face-01	0.1	0.1.1	
# ::edge	bother-01	ARG0	nobody	0.1.0	0.1.0.0	
# ::edge	bother-01	ARG1	anniversary	0.1.0	0.1	
# ::edge	commemorate-01	ARG0	party	0.1.0.1	0.1.0.1.0	
# ::edge	commemorate-01	ARG1	bother-01	0.1.0.1	0.1.0	
# ::edge	contrast-01	ARG1	throw-01	0.1.0.1.1.0	0.1.0.1.1	
# ::edge	contrast-01	ARG2	whereas	0.1.0.1.1.0	0.1.0.1.1.0.1	
# ::edge	mark-01	ARG0	year	0	0.0	
# ::edge	mark-01	ARG1	anniversary	0	0.1	
# ::edge	nobody	mod	occasion	0.1.0.0	0.1.0.0.0	
# ::edge	nobody	mod	this	0.1.0.0	0.1.0.0.1	
# ::edge	throw-01	ARG1	commemorate-01	0.1.0.1.1	0.1.0.1	
# ::edge	train-01	ARG0	shoe-in	0.1.0.1.1.0.0	0.1.0.1.1.0.0.0	
# ::edge	train-01	ARG1	contrast-01	0.1.0.1.1.0.0	0.1.0.1.1.0	
# ::edge	year	mod	this	0.0	0.0.0	
(m / mark-01 
      :ARG0 (y / year 
            :mod (t4 / this)) 
      :ARG1 (a2 / anniversary 
            :ARG1-of (b / bother-01 
                  :ARG0 (n / nobody 
                        :mod (o / occasion) 
                        :mod (t2 / this)) 
                  :ARG1-of (c / commemorate-01 
                        :ARG0 (p / party) 
                        :ARG1-of (t3 / throw-01 
                              :ARG1-of (c2 / contrast-01 
                                    :ARG1-of (t / train-01 
                                          :ARG0 (s / shoe-in 
                                                :poss-of (a / anniversary))) 
                                    :ARG2 (w / whereas))))) 
            :topic (f / face-01)))

# ::snt now there are people around who are  saying i wish i had never bothered taking a picture of  kylie minogue he added ruefully
# ::tok now there are people around who are saying i wish i had never bothered taking a picture of kylie minogue he added ruefully
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:56.992
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt this money was held by mr saunders swiss agent he said he had not bothered to find out if interest was being earned
# ::tok this money was held by mr saunders swiss agent he said he had not bothered to find out if interest was being earned
# ::alignments 22-23|0.0 19-20|0 14-15|0.0.0.0 11-12|0.0.0 10-11|0.0.0.0.0.0 9-10|0.0.0.0.0 8-9|0.0.0.0.0.0.0 1-2|0.0.0.0.0.0.1 0-1|0.0.0.0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:57.358
# ::node	0	interest-01	19-20
# ::node	0.0	earn-01	22-23
# ::node	0.0.0	he	11-12
# ::node	0.0.0.0	bother-01	14-15
# ::node	0.0.0.0.0	he	9-10
# ::node	0.0.0.0.0.0	say-01	10-11
# ::node	0.0.0.0.0.0.0	agent	8-9
# ::node	0.0.0.0.0.0.1	money	1-2
# ::node	0.0.0.0.0.0.1.0	this	0-1
# ::root	0	interest-01
(i / interest-01 
      :ARG1-of (e / earn-01 
            :ARG0 (h / he 
                  :ARG1-of (b / bother-01 
                        :ARG0 (h2 / he 
                              :ARG0-of (s / say-01 
                                    :ARG1 (a / agent) 
                                    :time (m / money 
                                          :mod (t / this))))))))

# ::snt there had been too many of them for her to bother to get it right
# ::tok there had been too many of them for her to bother to get it right
# ::alignments 13-14|0.0 10-11|0 4-5|0.1 3-4|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:57.373
# ::node	0	bother-02	10-11
# ::node	0.0	it	13-14
# ::node	0.1	many	4-5
# ::node	0.1.0	too	3-4
# ::root	0	bother-02
(b / bother-02 
      :op-of (i / it) 
      :topic-of (m / many 
            :degree (t / too)))

# ::snt if you really dont feel happy about it say sorry but i dont think ill bother
# ::tok if you really dont feel happy about it say sorry but i dont think ill bother
# ::alignments 15-16|0.1.1 14-15|0.1.1.0 13-14|0.1 11-12|0.1.0 10-11|0 9-10|0.0 8-9|0.1.2 7-8|0.1.2.0 5-6|0.1.2.1.1 4-5|0.1.2.1 2-3|0.1.2.1.2 1-2|0.1.2.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:57.469
# ::node	0	contrast-01	10-11
# ::node	0.0	sorry-41	9-10
# ::node	0.1	think-01	13-14
# ::node	0.1.0	i	11-12
# ::node	0.1.1	bother-02	15-16
# ::node	0.1.1.0	ill-41	14-15
# ::node	0.1.2	say-01	8-9
# ::node	0.1.2.0	it	7-8
# ::node	0.1.2.1	feel-01	4-5
# ::node	0.1.2.1.0	you	1-2
# ::node	0.1.2.1.1	happy	5-6
# ::node	0.1.2.1.2	really	2-3
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	sorry-41	0	0.0	
# ::edge	contrast-01	ARG2	think-01	0	0.1	
# ::edge	feel-01	ARG0	you	0.1.2.1	0.1.2.1.0	
# ::edge	feel-01	ARG1	happy	0.1.2.1	0.1.2.1.1	
# ::edge	feel-01	condition	say-01	0.1.2.1	0.1.2	
# ::edge	feel-01	mod	really	0.1.2.1	0.1.2.1.2	
# ::edge	ill-41	ARG1	bother-02	0.1.1.0	0.1.1	
# ::edge	say-01	ARG0	it	0.1.2	0.1.2.0	
# ::edge	say-01	ARG1	think-01	0.1.2	0.1	
# ::edge	think-01	ARG0	i	0.1	0.1.0	
# ::edge	think-01	ARG1	bother-02	0.1	0.1.1	
(c / contrast-01 
      :ARG1 (s / sorry-41) 
      :ARG2 (t / think-01 
            :ARG0 (i2 / i) 
            :ARG1 (b / bother-02 
                  :ARG1-of (i / ill-41)) 
            :ARG1-of (s2 / say-01 
                  :ARG0 (i3 / it) 
                  :condition-of (f / feel-01 
                        :ARG0 (y / you) 
                        :ARG1 (h / happy) 
                        :mod (r / really)))))

# ::snt british restaurant cooking had been despaired of after fifteen years of siege conditions until the counterattack of the good food guide founded in 1951 by raymond postgate a pioneering bon vivant and compiled by himself his friends and any members of the public who could be bothered to write in with their recommendations one who did was a lion tamer
# ::tok british restaurant cooking had been despaired of after fifteen years of siege conditions until the counterattack of the good food guide founded in 1951 by raymond postgate a pioneering bon vivant and compiled by himself his friends and any members of the public who could be bothered to write in with their recommendations one who did was a lion tamer
# ::alignments 52-53|0.0.0.0.0.1 48-49|0.0.0.0.0 46-47|0.0.0.0.0.0 44-45|0.0.0.0.0.0.1 42-43|0.0.0.0.0.0.0 39-40|0.0.0.0.0.0.0.0.0+0.0.0.0.0.0.0.0 38-39|0.0.0.0.0.1.0 37-38|0.0.2 36-37|0.0.0.1+0.0.0 32-33|0 31-32|0.0 25-27|0.0.0.0.1.0+0.0.0.0.1.1+0.0.0.0.1+0.0.0.0 23-24|0.0.1.2.0+0.0.1.2 21-22|0.0.1 20-21|0.0.1.1 19-20|0.0.1.1.0 18-19|0.0.1.1.1 13-14|0.0.1.1.0.0.0 12-13|0.0.1.1.0.0 9-10|0.0.1.0.0+0.0.1.0 7-8|0.0.1.1.0.0.1 5-6|0.0.1.1.0.0.1.0 2-3|0.0.1.1.0.0.1.0.0 1-2|0.0.1.1.0.0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.362
# ::node	0	compile-01	32-33
# ::node	0.0	and	31-32
# ::node	0.0.0	have-rel-role-91	36-37
# ::node	0.0.0.0	person	25-27
# ::node	0.0.0.0.0	write-01	48-49
# ::node	0.0.0.0.0.0	bother-01	46-47
# ::node	0.0.0.0.0.0.0	public	42-43
# ::node	0.0.0.0.0.0.0.0	have-org-role-91	39-40
# ::node	0.0.0.0.0.0.0.0.0	member	39-40
# ::node	0.0.0.0.0.0.1	possible	44-45
# ::node	0.0.0.0.0.1	recommend-01	52-53
# ::node	0.0.0.0.0.1.0	any	38-39
# ::node	0.0.0.0.1	name	25-27
# ::node	0.0.0.0.1.0	"postgate"	25-27
# ::node	0.0.0.0.1.1	"raymond"	25-27
# ::node	0.0.0.1	friend	36-37
# ::node	0.0.1	found-01	21-22
# ::node	0.0.1.0	temporal-quantity	9-10
# ::node	0.0.1.0.0	year	9-10
# ::node	0.0.1.1	guide-01	20-21
# ::node	0.0.1.1.0	food	19-20
# ::node	0.0.1.1.0.0	condition	12-13
# ::node	0.0.1.1.0.0.0	until	13-14
# ::node	0.0.1.1.0.0.1	after	7-8
# ::node	0.0.1.1.0.0.1.0	despair-01	5-6
# ::node	0.0.1.1.0.0.1.0.0	cook-01	2-3
# ::node	0.0.1.1.0.0.1.0.0.0	restaurant	1-2
# ::node	0.0.1.1.1	good	18-19
# ::node	0.0.1.2	date-entity	23-24
# ::node	0.0.1.2.0	1951	23-24
# ::node	0.0.2	and	37-38
# ::root	0	compile-01
(c / compile-01 
      :op-of (a3 / and 
            :ARG1-of (h2 / have-rel-role-91 
                  :ARG0 (p3 / person 
                        :ARG0-of (w / write-01 
                              :ARG1-of (b / bother-01 
                                    :ARG0 (p2 / public 
                                          :ARG1-of (h / have-org-role-91 
                                                :ARG2 (m / member))) 
                                    :domain-of (p / possible)) 
                              :destination (r / recommend-01 
                                    :ARG1 (a / any))) 
                        :name (n / name 
                              :op1 "postgate" 
                              :op2 "raymond")) 
                  :ARG2 (f / friend)) 
            :op1 (f2 / found-01 
                  :ARG0 (t / temporal-quantity 
                        :unit (y / year)) 
                  :ARG1 (g / guide-01 
                        :ARG1 (f3 / food 
                              :mod (c2 / condition 
                                    :location (u / until) 
                                    :op-of (a4 / after 
                                          :time-of (d2 / despair-01 
                                                :ARG1 (c3 / cook-01 
                                                      :ARG1 (r2 / restaurant)))))) 
                        :mod (g2 / good)) 
                  :time (d / date-entity 
                        :year 1951)) 
            :op2 (a2 / and)))

# ::snt jack was too distraught to apologize or explain why he had not bothered to tell maureen of his plan to marry even though she was in some senses family
# ::tok jack was too distraught to apologize or explain why he had not bothered to tell maureen of his plan to marry even though she was in some senses family
# ::alignments 28-29|0.0.0.2.0.0 27-28|0.0.0.0 26-27|0.0.0.2.0.0.0 23-24|0.1.0.0 20-21|0.1.0 18-19|0.1 14-15|0 12-13|0.0.1 9-10|0.0 7-8|0.0.0.2.0 6-7|0.0.0.2 5-6|0.0.0 3-4|0.0.0.1 2-3|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.552
# ::node	0	tell-01	14-15
# ::node	0.0	he	9-10
# ::node	0.0.0	apologize-01	5-6
# ::node	0.0.0.0	sense	27-28
# ::node	0.0.0.1	distraught	3-4
# ::node	0.0.0.1.0	too	2-3
# ::node	0.0.0.2	or	6-7
# ::node	0.0.0.2.0	explain-01	7-8
# ::node	0.0.0.2.0.0	family	28-29
# ::node	0.0.0.2.0.0.0	some	26-27
# ::node	0.0.1	bother-01	12-13
# ::node	0.1	plan-01	18-19
# ::node	0.1.0	marry-01	20-21
# ::node	0.1.0.0	she	23-24
# ::root	0	tell-01
# ::edge	apologize-01	ARG0	he	0.0.0	0.0	
# ::edge	apologize-01	ARG1	sense	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG0	he	0.0.1	0.0	
# ::edge	distraught	degree	too	0.0.0.1	0.0.0.1.0	
# ::edge	distraught	domain	apologize-01	0.0.0.1	0.0.0	
# ::edge	explain-01	ARG1	family	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	family	quant	some	0.0.0.2.0.0	0.0.0.2.0.0.0	
# ::edge	marry-01	ARG0	she	0.1.0	0.1.0.0	
# ::edge	or	op1	apologize-01	0.0.0.2	0.0.0	
# ::edge	or	op2	explain-01	0.0.0.2	0.0.0.2.0	
# ::edge	plan-01	ARG1	marry-01	0.1	0.1.0	
# ::edge	tell-01	ARG0	he	0	0.0	
# ::edge	tell-01	ARG1	plan-01	0	0.1	
(t / tell-01 
      :ARG0 (h / he 
            :ARG0-of (a / apologize-01 
                  :ARG1 (s / sense) 
                  :domain-of (d / distraught 
                        :degree (t2 / too)) 
                  :op-of (o / or 
                        :op1 (e / explain-01 
                              :ARG1 (f / family 
                                    :quant (s2 / some))))) 
            :ARG0-of (b / bother-01)) 
      :ARG1 (p / plan-01 
            :ARG1 (m / marry-01 
                  :ARG0 (s3 / she))))

# ::snt never think that you have blown your  exercise schedule so you may as well not bother going back to  it
# ::tok never think that you have blown your exercise schedule so you may as well not bother going back to it
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.553
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt even theologians may encourage us to revere the gospels and gain inspiration from them without bothering whether particular parts are literally true
# ::tok even theologians may encourage us to revere the gospels and gain inspiration from them without bothering whether particular parts are literally true
# ::alignments 21-22|0.0.0 20-21|0.0.0.0 18-19|0.0.0.1 17-18|0.0.0.1.0 15-16|0.0 11-12|0.2.0 10-11|0.2.0.0 9-10|0.2 3-4|0 2-3|0.1.0+0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.624
# ::node	0	encourage-01	3-4
# ::node	0.0	bother-01	15-16
# ::node	0.0.0	true	21-22
# ::node	0.0.0.0	literal	20-21
# ::node	0.0.0.1	part	18-19
# ::node	0.0.0.1.0	particular	17-18
# ::node	0.1	date-entity	2-3
# ::node	0.1.0	5	2-3
# ::node	0.2	and	9-10
# ::node	0.2.0	inspire-01	11-12
# ::node	0.2.0.0	gain-02	10-11
# ::root	0	encourage-01
# ::edge	and	op1	encourage-01	0.2	0	
# ::edge	and	op2	inspire-01	0.2	0.2.0	
# ::edge	bother-01	ARG1	true	0.0	0.0.0	
# ::edge	date-entity	month	5	0.1	0.1.0	
# ::edge	encourage-01	ARG1	bother-01	0	0.0	
# ::edge	encourage-01	mod	date-entity	0	0.1	
# ::edge	inspire-01	ARG1	gain-02	0.2.0	0.2.0.0	
# ::edge	part	mod	particular	0.0.0.1	0.0.0.1.0	
# ::edge	true	degree	literal	0.0.0	0.0.0.0	
# ::edge	true	domain	part	0.0.0	0.0.0.1	
(e / encourage-01 
      :ARG1 (b / bother-01 
            :ARG1 (t / true 
                  :degree (l / literal) 
                  :domain (p / part 
                        :mod (p2 / particular)))) 
      :mod (d / date-entity 
            :month 5) 
      :op-of (a / and 
            :op1 (i / inspire-01 
                  :ARG1 (g / gain-02))))

# ::snt and you couldnt imagine why hed bothered to write it in the first place
# ::tok and you couldnt imagine why hed bothered to write it in the first place
# ::alignments 13-14|0.0.0.0.2 9-10|0.0.0.0.0 8-9|0.0.0.0 6-7|0.0.0.0.1 3-4|0.0.0 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.651
# ::node	0	and	0-1
# ::node	0.0	you	1-2
# ::node	0.0.0	imagine-01	3-4
# ::node	0.0.0.0	write-01	8-9
# ::node	0.0.0.0.0	it	9-10
# ::node	0.0.0.0.1	bother-01	6-7
# ::node	0.0.0.0.2	place	13-14
# ::root	0	and
# ::edge	and	op1	you	0	0.0	
# ::edge	bother-01	ARG1	write-01	0.0.0.0.1	0.0.0.0	
# ::edge	imagine-01	ARG0	you	0.0.0	0.0	
# ::edge	imagine-01	ARG1	write-01	0.0.0	0.0.0.0	
# ::edge	write-01	ARG1	it	0.0.0.0	0.0.0.0.0	
# ::edge	write-01	prep-in	place	0.0.0.0	0.0.0.0.2	
(a / and 
      :op1 (y / you 
            :ARG0-of (i2 / imagine-01 
                  :ARG1 (w / write-01 
                        :ARG1 (i / it) 
                        :ARG1-of (b / bother-01) 
                        :prep-in (p / place)))))

# ::snt nell will go back to america and that will be that but dont bother daddy with a word she counselled
# ::tok nell will go back to america and that will be that but dont bother daddy with a word she counselled
# ::alignments 18-19|0.1.0 17-18|0.1.1 13-14|0.1 11-12|0 6-7|0.2 5-6|0.2.0.0.0+0.2.0.0+0.2.0 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.717
# ::node	0	contrast-01	11-12
# ::node	0.0	back	3-4
# ::node	0.1	bother-02	13-14
# ::node	0.1.0	she	18-19
# ::node	0.1.1	word	17-18
# ::node	0.2	and	6-7
# ::node	0.2.0	country	5-6
# ::node	0.2.0.0	name	5-6
# ::node	0.2.0.0.0	"America"	5-6
# ::root	0	contrast-01
# ::edge	and	op1	country	0.2	0.2.0	
# ::edge	bother-02	ARG0	she	0.1	0.1.0	
# ::edge	bother-02	ARG1	contrast-01	0.1	0	
# ::edge	bother-02	prep-with	word	0.1	0.1.1	
# ::edge	contrast-01	ARG0	back	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.2	
# ::edge	country	name	name	0.2.0	0.2.0.0	
# ::edge	name	op1	"America"	0.2.0.0	0.2.0.0.0	
(c / contrast-01 
      :ARG0 (b2 / back) 
      :ARG1-of (b / bother-02 
            :ARG0 (s / she) 
            :prep-with (w / word)) 
      :ARG2 (a / and 
            :op1 (c2 / country 
                  :name (n / name 
                        :op1 "America"))))

# ::snt why bother anyway
# ::tok why bother anyway
# ::alignments 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.724
# ::node	0	bother-02	1-2
# ::node	0.0	anyway	2-3
# ::root	0	bother-02
# ::edge	bother-02	mod	anyway	0	0.0	
(b / bother-02 
      :mod (a / anyway))

# ::snt i know now that i have a duty to look after myself for no one else will bother
# ::tok i know now that i have a duty to look after myself for no one else will bother
# ::alignments 17-18|0 15-16|0.0 13-14|0.1 10-11|0.2 7-8|0.2.0 4-5|0.2.0.0 2-3|0.2.0.0.0.1 1-2|0.2.0.0.0 0-1|0.2.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.890
# ::node	0	bother-02	17-18
# ::node	0.0	else	15-16
# ::node	0.1	-	13-14
# ::node	0.2	after	10-11
# ::node	0.2.0	duty	7-8
# ::node	0.2.0.0	i	4-5
# ::node	0.2.0.0.0	know-01	1-2
# ::node	0.2.0.0.0.0	i	0-1
# ::node	0.2.0.0.0.1	now	2-3
# ::root	0	bother-02
# ::edge	after	op1	duty	0.2	0.2.0	
# ::edge	after	op2	bother-02	0.2	0	
# ::edge	bother-02	ARG0	else	0	0.0	
# ::edge	bother-02	ARG1	-	0	0.1	
# ::edge	duty	example	i	0.2.0	0.2.0.0	
# ::edge	know-01	ARG0	i	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	know-01	ARG1	i	0.2.0.0.0	0.2.0.0	
# ::edge	know-01	time	now	0.2.0.0.0	0.2.0.0.0.1	
(b / bother-02 
      :ARG0 (e / else) 
      :ARG1 (- / -) 
      :op-of (a / after 
            :op1 (d / duty 
                  :example (i / i 
                        :ARG1-of (k / know-01 
                              :ARG0 (i2 / i) 
                              :time (n / now))))))

# ::snt the machine can completely fail to work because noone has bothered to test it before the day
# ::tok the machine can completely fail to work because noone has bothered to test it before the day
# ::alignments 16-17|0.0.1.0.1.0 14-15|0.0.1.0.1 13-14|0.0.1.0.0.0 12-13|0.0.1.0.0 10-11|0.0.1.0 7-8|0.0.1 4-5|0.0 3-4|0.0.2 2-3|0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:12:59.930
# ::node	0	possible	2-3
# ::node	0.0	fail-01	4-5
# ::node	0.0.0	machine	1-2
# ::node	0.0.1	cause-01	7-8
# ::node	0.0.1.0	bother-01	10-11
# ::node	0.0.1.0.0	test-01	12-13
# ::node	0.0.1.0.0.0	it	13-14
# ::node	0.0.1.0.1	before	14-15
# ::node	0.0.1.0.1.0	day	16-17
# ::node	0.0.2	complete	3-4
# ::root	0	possible
# ::edge	before	op1	day	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	bother-01	ARG1	test-01	0.0.1.0	0.0.1.0.0	
# ::edge	bother-01	time	before	0.0.1.0	0.0.1.0.1	
# ::edge	cause-01	ARG0	bother-01	0.0.1	0.0.1.0	
# ::edge	cause-01	ARG1	fail-01	0.0.1	0.0	
# ::edge	fail-01	ARG0	machine	0.0	0.0.0	
# ::edge	fail-01	degree	complete	0.0	0.0.2	
# ::edge	possible	domain	fail-01	0	0.0	
# ::edge	test-01	ARG1	it	0.0.1.0.0	0.0.1.0.0.0	
(p / possible 
      :domain (f / fail-01 
            :ARG0 (m / machine) 
            :ARG1-of (c / cause-01 
                  :ARG0 (b2 / bother-01 
                        :ARG1 (t / test-01 
                              :ARG1 (i / it)) 
                        :time (b / before 
                              :op1 (d / day)))) 
            :degree (c2 / complete)))

# ::snt some audiences are still bothered by the idea that dance music and design do not operate as a mutual support system in merce cunninghams work
# ::tok some audiences are still bothered by the idea that dance music and design do not operate as a mutual support system in merce cunninghams work
# ::alignments 20-21|0.3.0.1 19-20|0.3.0 18-19|0.3.0.0 15-16|0.0 12-13|0.3 11-12|0 10-11|0.1.0 9-10|0.1 7-8|0.2.0 4-5|0.2 3-4|0.2.2 1-2|0.2.1 0-1|0.2.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.013
# ::node	0	and	11-12
# ::node	0.0	operate-01	15-16
# ::node	0.1	dance-01	9-10
# ::node	0.1.0	music	10-11
# ::node	0.2	bother-01	4-5
# ::node	0.2.0	idea	7-8
# ::node	0.2.1	audience	1-2
# ::node	0.2.1.0	some	0-1
# ::node	0.2.2	still	3-4
# ::node	0.3	design-01	12-13
# ::node	0.3.0	support-01	19-20
# ::node	0.3.0.0	mutual	18-19
# ::node	0.3.0.1	system	20-21
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.2	
# ::edge	and	op2	design-01	0	0.3	
# ::edge	audience	quant	some	0.2.1	0.2.1.0	
# ::edge	bother-01	ARG0	idea	0.2	0.2.0	
# ::edge	bother-01	ARG1	audience	0.2	0.2.1	
# ::edge	bother-01	time	still	0.2	0.2.2	
# ::edge	dance-01	ARG1	and	0.1	0	
# ::edge	music	mod	dance-01	0.1.0	0.1	
# ::edge	operate-01	ARG0	and	0.0	0	
# ::edge	support-01	mod	design-01	0.3.0	0.3	
# ::edge	support-01	mod	mutual	0.3.0	0.3.0.0	
# ::edge	system	mod	support-01	0.3.0.1	0.3.0	
(a / and 
      :ARG0-of (o / operate-01) 
      :ARG1-of (d2 / dance-01 
            :mod-of (m2 / music)) 
      :op1 (b / bother-01 
            :ARG0 (i / idea) 
            :ARG1 (a2 / audience 
                  :quant (s4 / some)) 
            :time (s3 / still)) 
      :op2 (d / design-01 
            :mod-of (s2 / support-01 
                  :mod (m / mutual) 
                  :mod-of (s / system))))

# ::snt neither was short of opportunities to form new relationships but somehow neither of them could be bothered to do so
# ::tok neither was short of opportunities to form new relationships but somehow neither of them could be bothered to do so
# ::alignments 19-20|0.2.0 16-17|0.2 14-15|0.1 10-11|0.2.1 9-10|0 8-9|0.3.0.0 7-8|0.3.0.0.0 6-7|0.3.0 4-5|0.0 2-3|0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.256
# ::node	0	contrast-01	9-10
# ::node	0.0	opportunity	4-5
# ::node	0.1	possible	14-15
# ::node	0.2	bother-01	16-17
# ::node	0.2.0	so	19-20
# ::node	0.2.1	somehow	10-11
# ::node	0.3	short	2-3
# ::node	0.3.0	form	6-7
# ::node	0.3.0.0	relationship	8-9
# ::node	0.3.0.0.0	new	7-8
# ::root	0	contrast-01
# ::edge	bother-01	ARG1	so	0.2	0.2.0	
# ::edge	bother-01	degree	somehow	0.2	0.2.1	
# ::edge	contrast-01	ARG0	opportunity	0	0.0	
# ::edge	contrast-01	ARG1	possible	0	0.1	
# ::edge	contrast-01	ARG2	bother-01	0	0.2	
# ::edge	form	mod	relationship	0.3.0	0.3.0.0	
# ::edge	relationship	mod	new	0.3.0.0	0.3.0.0.0	
# ::edge	short	domain	contrast-01	0.3	0	
# ::edge	short	domain	form	0.3	0.3.0	
(c / contrast-01 
      :ARG0 (o / opportunity) 
      :ARG1 (p / possible) 
      :ARG2 (b / bother-01 
            :ARG1 (s / so) 
            :degree (s2 / somehow)) 
      :domain-of (s3 / short 
            :domain (f / form 
                  :mod (r / relationship 
                        :mod (n / new)))))

# ::snt why bother to write a sort of autobiography anyway especially if it is not to be a shortterm effort but will occupy several years of a working life
# ::tok why bother to write a sort of autobiography anyway especially if it is not to be a shortterm effort but will occupy several years of a working life
# ::alignments 27-28|0.1.0.0.1.1 26-27|0.1.0.0.1.1.0 23-24|0.1.0.0.1.0.1+0.1.0.0.1.0 22-23|0.1.0.0.1.0.0 21-22|0.1.0.0.1 19-20|0.1.0.0 18-19|0.1.0 11-12|0.1 9-10|0.1.0.0.0 8-9|0.1.0.0.1.1.0.0 5-6|0.0.0 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.656
# ::node	0	bother-02	1-2
# ::node	0.0	write-01	3-4
# ::node	0.0.0	sort	5-6
# ::node	0.1	it	11-12
# ::node	0.1.0	effort	18-19
# ::node	0.1.0.0	contrast-01	19-20
# ::node	0.1.0.0.0	especially	9-10
# ::node	0.1.0.0.1	occupy-01	21-22
# ::node	0.1.0.0.1.0	temporal-quantity	23-24
# ::node	0.1.0.0.1.0.0	several	22-23
# ::node	0.1.0.0.1.0.1	year	23-24
# ::node	0.1.0.0.1.1	life	27-28
# ::node	0.1.0.0.1.1.0	work-01	26-27
# ::node	0.1.0.0.1.1.0.0	anyway	8-9
# ::root	0	bother-02
# ::edge	bother-02	ARG1	write-01	0	0.0	
# ::edge	bother-02	ARG2	it	0	0.1	
# ::edge	contrast-01	ARG0	especially	0.1.0.0	0.1.0.0.0	
# ::edge	contrast-01	ARG1	effort	0.1.0.0	0.1.0	
# ::edge	contrast-01	ARG2	occupy-01	0.1.0.0	0.1.0.0.1	
# ::edge	effort	domain	it	0.1.0	0.1	
# ::edge	occupy-01	ARG0	temporal-quantity	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	occupy-01	ARG1	life	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	several	op1	temporal-quantity	0.1.0.0.1.0.0	0.1.0.0.1.0	
# ::edge	temporal-quantity	unit	year	0.1.0.0.1.0	0.1.0.0.1.0.1	
# ::edge	work-01	ARG0	life	0.1.0.0.1.1.0	0.1.0.0.1.1	
# ::edge	work-01	ARG1	anyway	0.1.0.0.1.1.0	0.1.0.0.1.1.0.0	
# ::edge	write-01	ARG1	sort	0.0	0.0.0	
(b / bother-02 
      :ARG1 (w2 / write-01 
            :ARG1 (s2 / sort)) 
      :ARG2 (i / it 
            :domain-of (e / effort 
                  :ARG1-of (c / contrast-01 
                        :ARG0 (e2 / especially) 
                        :ARG2 (o / occupy-01 
                              :ARG0 (t / temporal-quantity 
                                    :op-of (s / several) 
                                    :unit (y / year)) 
                              :ARG1 (l / life 
                                    :ARG0-of (w / work-01 
                                          :ARG1 (a / anyway))))))))

# ::snt those who bothered to listen were astonishingly obtuse or even rude
# ::tok those who bothered to listen were astonishingly obtuse or even rude
# ::alignments 10-11|0.0.0.0 8-9|0.0.0 4-5|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.677
# ::node	0	listen-01	4-5
# ::node	0.0	bother-01	2-3
# ::node	0.0.0	or	8-9
# ::node	0.0.0.0	rude-41	10-11
# ::root	0	listen-01
(l / listen-01 
      :ARG1-of (b / bother-01 
            :ARG0 (o / or 
                  :op1 (r / rude-41))))

# ::snt ham the idle son of noah cannot be bothered to unlock the door of the ark to let in this creature in any case the ark is already fall
# ::tok ham the idle son of noah cannot be bothered to unlock the door of the ark to let in this creature in any case the ark is already fall
# ::alignments 27-28|0.1.0.0.0.0 23-24|0 22-23|0.0 20-21|0.1 19-20|0.1.1 17-18|0.1.0 12-13|0.1.0.0 8-9|0.1.0.0.0.1 3-4|0.1.0.0.0.2+0.1.0.0.0 2-3|0.1.0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.764
# ::node	0	case	23-24
# ::node	0.0	any	22-23
# ::node	0.1	creature	20-21
# ::node	0.1.0	let-01	17-18
# ::node	0.1.0.0	door	12-13
# ::node	0.1.0.0.0	have-rel-role-91	3-4
# ::node	0.1.0.0.0.0	already	27-28
# ::node	0.1.0.0.0.1	bother-01	8-9
# ::node	0.1.0.0.0.1.0	idle	2-3
# ::node	0.1.0.0.0.2	son	3-4
# ::node	0.1.1	this	19-20
# ::root	0	case
# ::edge	bother-01	ARG0	idle	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	bother-01	ARG1	have-rel-role-91	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	case	mod	any	0	0.0	
# ::edge	case	part	creature	0	0.1	
# ::edge	creature	mod	this	0.1	0.1.1	
# ::edge	have-rel-role-91	ARG0	already	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	have-rel-role-91	ARG1	door	0.1.0.0.0	0.1.0.0	
# ::edge	have-rel-role-91	ARG2	son	0.1.0.0.0	0.1.0.0.0.2	
# ::edge	let-01	ARG0	door	0.1.0	0.1.0.0	
# ::edge	let-01	ARG1	creature	0.1.0	0.1	
(c / case 
      :mod (a2 / any) 
      :part (c2 / creature 
            :ARG1-of (l / let-01 
                  :ARG0 (d / door 
                        :ARG1-of (h / have-rel-role-91 
                              :ARG0 (a / already) 
                              :ARG1-of (b / bother-01 
                                    :ARG0 (i / idle)) 
                              :ARG2 (s / son)))) 
            :mod (t / this)))

# ::snt so i did it to bother her
# ::tok so i did it to bother her
# ::alignments 5-6|0 3-4|0.1 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.804
# ::node	0	bother-02	5-6
# ::node	0.0	i	1-2
# ::node	0.0.0	so	0-1
# ::node	0.1	it	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	it	0	0.1	
# ::edge	i	mod	so	0.0	0.0.0	
(b / bother-02 
      :ARG0 (i2 / i 
            :mod (s / so)) 
      :ARG1 (i / it))

# ::snt a shetland pony tethered in the hotel paddock did not even bother to raise its head for them
# ::tok a shetland pony tethered in the hotel paddock did not even bother to raise its head for them
# ::alignments 15-16|0.0.0 13-14|0.0 11-12|0 6-7|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.827
# ::node	0	bother-02	11-12
# ::node	0.0	raise-01	13-14
# ::node	0.0.0	head-01	15-16
# ::node	0.0.0.0	hotel	6-7
# ::root	0	bother-02
# ::edge	bother-02	ARG1	raise-01	0	0.0	
# ::edge	head-01	ARG1	hotel	0.0.0	0.0.0.0	
# ::edge	raise-01	ARG1	head-01	0.0	0.0.0	
(b / bother-02 
      :ARG1 (r / raise-01 
            :ARG1 (h / head-01 
                  :ARG1 (h2 / hotel))))

# ::snt  why are you bothering now
# ::tok why are you bothering now
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.828
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt it bothers me sometimes
# ::tok it bothers me sometimes
# ::alignments 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.834
# ::node	0	bother-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	sometimes	3-4
# ::root	0	bother-01
# ::edge	bother-01	ARG0	it	0	0.0	
# ::edge	bother-01	frequency	sometimes	0	0.1	
(b / bother-01 
      :ARG0 (i / it) 
      :frequency (s / sometimes))

# ::snt they dont bother with the ancient ones that nobody uses any more
# ::tok they dont bother with the ancient ones that nobody uses any more
# ::alignments 10-11|0.1.1 9-10|0.1 8-9|0.1.0 6-7|0.2 5-6|0.2.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:00.893
# ::node	0	bother-02	2-3
# ::node	0.0	they	0-1
# ::node	0.1	use-01	9-10
# ::node	0.1.0	nobody	8-9
# ::node	0.1.1	any	10-11
# ::node	0.2	one	6-7
# ::node	0.2.0	ancient	5-6
# ::root	0	bother-02
# ::edge	bother-02	ARG0	they	0	0.0	
# ::edge	bother-02	ARG1	use-01	0	0.1	
# ::edge	bother-02	ARG2	one	0	0.2	
# ::edge	one	mod	ancient	0.2	0.2.0	
# ::edge	use-01	ARG0	nobody	0.1	0.1.0	
# ::edge	use-01	ARG2	any	0.1	0.1.1	
(b / bother-02 
      :ARG0 (t / they) 
      :ARG1 (u / use-01 
            :ARG0 (n / nobody) 
            :ARG2 (a / any)) 
      :ARG2 (o / one 
            :mod (a2 / ancient)))

# ::snt winning nobel science prizes is not one of those games in which we once shone but which we have now decided not to bother with so as to let others have a chance
# ::tok winning nobel science prizes is not one of those games in which we once shone but which we have now decided not to bother with so as to let others have a chance
# ::alignments 32-33|0.1.1.1 29-30|0.1.1.0.0.0 28-29|0.1.1.0.0 25-26|0.1.1.2.0 23-24|0.1.1 20-21|0.1 19-20|0.1.2 17-18|0.1.1.0 15-16|0 13-14|0.2 12-13|0.1.0 9-10|0.0 2-3|0.1.1.3 0-1|0.1.1.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:01.458
# ::node	0	contrast-01	15-16
# ::node	0.0	game	9-10
# ::node	0.1	decide-01	20-21
# ::node	0.1.0	we	12-13
# ::node	0.1.1	bother-02	23-24
# ::node	0.1.1.0	we	17-18
# ::node	0.1.1.0.0	let-01	28-29
# ::node	0.1.1.0.0.0	other	29-30
# ::node	0.1.1.1	chance	32-33
# ::node	0.1.1.2	win-01	0-1
# ::node	0.1.1.2.0	so	25-26
# ::node	0.1.1.3	science	2-3
# ::node	0.1.2	now	19-20
# ::node	0.2	once	13-14
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	we	0.1.1	0.1.1.0	
# ::edge	bother-02	ARG1	chance	0.1.1	0.1.1.1	
# ::edge	contrast-01	ARG1	game	0	0.0	
# ::edge	contrast-01	ARG2	decide-01	0	0.1	
# ::edge	contrast-01	frequency	once	0	0.2	
# ::edge	decide-01	ARG0	we	0.1	0.1.0	
# ::edge	decide-01	ARG1	bother-02	0.1	0.1.1	
# ::edge	decide-01	time	now	0.1	0.1.2	
# ::edge	let-01	ARG0	we	0.1.1.0.0	0.1.1.0	
# ::edge	let-01	ARG1	other	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	science	op1	bother-02	0.1.1.3	0.1.1	
# ::edge	win-01	ARG0	so	0.1.1.2	0.1.1.2.0	
# ::edge	win-01	ARG1	bother-02	0.1.1.2	0.1.1	
(c2 / contrast-01 
      :ARG1 (g / game) 
      :ARG2 (d / decide-01 
            :ARG0 (w2 / we) 
            :ARG1 (b / bother-02 
                  :ARG0 (w / we 
                        :ARG0-of (l / let-01 
                              :ARG1 (o / other))) 
                  :ARG1 (c / chance) 
                  :ARG1-of (w3 / win-01 
                        :ARG0 (s / so)) 
                  :op-of (s2 / science)) 
            :time (n / now)) 
      :frequency (o2 / once))

# ::snt   even so i would not have bothered to make this list of similarities and differences if the first part of what had been intended as a literary experiment of some interest to others besides myself had not already been delivered to my agent after innumerable and seemingly very urgent requests to see at least something on paper and if i had not through my own alert intelligence discovered on this very day that my agent dash
# ::tok even so i would not have bothered to make this list of similarities and differences if the first part of what had been intended as a literary experiment of some interest to others besides myself had not already been delivered to my agent after innumerable and seemingly very urgent requests to see at least something on paper and if i had not through my own alert intelligence discovered on this very day that my agent dash
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:01.459
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt nobody bothers
# ::tok nobody bothers
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:01.463
# ::node	0	bother-01	1-2
# ::node	0.0	nobody	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG1	nobody	0	0.0	
(b / bother-01 
      :ARG1 (n / nobody))

# ::snt that i noticed and was first bothered by a rough stowage of the tray table behind me by an adult and even then i initially thought not with irritation but with surprise and interest that my absorption in a piece of learned intellectual biography could be interrupted simply by some dufe closing a latch at my back and i went on to wonder whether in twenty years when boeing was begging for loan guarantees and sleek airships by daewoo and honda with perfect safety records were taxied on every runway the humble latches on the tray table would be one of the first things in the new nonu, and later in that same plane ride instead of feeling hate for this man behind me who in his late forties had not yet learned to stow his tray table without interrupting the reading of a fellow passenger this man who was too coarse apparently ever to have been bothered by a rough stowage behind him though he looked to have logged tens of thousands of flight miles a year i simply used extreme care in closing my own table after dinner i painstakingly clutched the top of the seat ahead of me and thus stably based used that thumb to squeeze the table under the fastener before i allowed it to slide into place imagining as i did so that i was closing the coffin on the u
# ::tok that i noticed and was first bothered by a rough stowage of the tray table behind me by an adult and even then i initially thought not with irritation but with surprise and interest that my absorption in a piece of learned intellectual biography could be interrupted simply by some dufe closing a latch at my back and i went on to wonder whether in twenty years when boeing was begging for loan guarantees and sleek airships by daewoo and honda with perfect safety records were taxied on every runway the humble latches on the tray table would be one of the first things in the new nonu , and later in that same plane ride instead of feeling hate for this man behind me who in his late forties had not yet learned to stow his tray table without interrupting the reading of a fellow passenger this man who was too coarse apparently ever to have been bothered by a rough stowage behind him though he looked to have logged tens of thousands of flight miles a year i simply used extreme care in closing my own table after dinner i painstakingly clutched the top of the seat ahead of me and thus stably based used that thumb to squeeze the table under the fastener before i allowed it to slide into place imagining as i did so that i was closing the coffin on the u
# ::alignments 234-235|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0.0 232-233|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0 230-231|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0 228-229|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0.0.0 226-227|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0.1 224-225|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0.0 223-224|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.2 221-222|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1 219-220|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0 218-219|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0 217-218|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.0 216-217|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1 212-213|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.0 210-211|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1 206-207|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0 205-206|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0 202-203|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2 199-200|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.1 198-199|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.1.0 195-196|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.1 191-192|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.0 190-191|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.0 189-190|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3 188-189|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.1 185-186|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1 183-184|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1 182-183|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.3 181-182|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2 180-181|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.2 179-180|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.0 178-179|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.2 176-177|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.0.0+0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.0 170-171|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0 167-168|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0 166-167|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0 163-164|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.0 161-162|0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.1 158-159|0.1.1.0.2.1.1.0.0.0.0.1.2.0 154-155|0.1.1.0.2.1.1.0.0.0.0.1.2.0.2 153-154|0.1.1.0.2.1.1.0.0.0.0.1.2.0.1 151-152|0.1.1.0.2.1.1.0.0.0.0.0.0.1 148-149|0.1.1.0.2.1.1.0.0.0.0.1.2 147-148|0.1.1.0.2.1.1.0.0.0.0.1.2.1 146-147|0.1.1.0.2.1.1.0.0.0.0.1.1 145-146|0.1.1.0.2.1.1.0.0.0.0.1.1.0 142-143|0.1.1.0.2.1.1.0.0.0.0.1 138-139|0.1.1.0.2.1.1.0.0.0.0.1.0 133-134|0.1.1.0.2.1.1.0.0.0.0.0.0 132-133|0.1.1.0.2.1.1.0.0.0.0.0.0.0 128-129|0.1.1.0.2.1.1.0.0.0.3.0 123-124|0.1.1.0.2.1.1.0.0.0.0.0.1 122-123|0.1.1.0.2.1.1.0.0.0.0.0 121-122|0.1.1.0.2.1.1.0.0.0.0.0.2 119-120|0.1.1.0.2.1.1.0.0.0.0 118-119|0.1.1.0.2.1.1.0.0.0.3 116-117|0.1.1.0.2.1.1.0.0.0.0.3 115-116|0.1.1.0.2.1.1.0.0.0 114-115|0.1.1.0.2.1.1.0.0.0.1 113-114|0.1.1.0.2.1.1.0.0.0.2 110-111|0.1.1.0.2.1.1.0.0.0.0.2.0.0 109-110|0.1.1.0.2.1.1.0.0.0.0.2 106-107|0.1.1.0.2.1.1.0.0 103-104|0.1.1.0.2.1.1.0.0.0.0.2.0 96-97|0.1.1.0.2.1.1.0.0.0.0.2.0.1 91-92|0.1.1.0.2.1.0 89-90|0.1.1.0.2.1.1.1.0.0 88-89|0.1.1.0.2.1.1.1.0 84-85|0.1.1.0.2.1.1.0.1 83-84|0.1.1.0.2.1.1.0 82-83|0.1.1.0.2.1.1.0.1.0 79-80|0.1.1.0.2.1.3 74-75|0.1.1.0.2.1.2 73-74|0.1.1.0.2.1.1 72-73|0.1.1.0.2.1.1.1 70-71|0.1.1.0.2.1 66-67|0.1.1.0.2.1.4+0.1.1.0.2.1.4.0 62-63|0.1.1.0.2 58-59|0.1.1.0.2.0 57-58|0.1.1.0 56-57|0.1.1.0.1.1 51-52|0.1.1.0.1 49-50|0.1.1.0.1.0 47-48|0.1.1.0.1.2 46-47|0.1.1.0.0 44-45|0.1.1 43-44|0.1.1.0.0.0.0.0 42-43|0.1.1.0.0.0.0.0.1 41-42|0.1.1.0.0.0.0.0.0 39-40|0.1.1.0.0.0.0 36-37|0.1.1.0.0.0 33-34|0.0 32-33|0.0.0 31-32|0.0.0.1 29-30|0 28-29|0.0.0.0 25-26|0.1 24-25|0.1.3 23-24|0.1.0 22-23|0.1.4 20-21|0.1.2.1.0 19-20|0.1.2.1.0.0 15-16|0.1.2.2.0 14-15|0.1.2.2 9-10|0.0.0.1.0 6-7|0.1.2.1 3-4|0.1.2 2-3|0.1.2.0 1-2|0.1.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:29.402
# ::node	0	contrast-01	29-30
# ::node	0.0	interest-01	33-34
# ::node	0.0.0	and	32-33
# ::node	0.0.0.0	irritation	28-29
# ::node	0.0.0.1	surprise-01	31-32
# ::node	0.0.0.1.0	rough	9-10
# ::node	0.1	think-01	25-26
# ::node	0.1.0	i	23-24
# ::node	0.1.1	possible	44-45
# ::node	0.1.1.0	and	57-58
# ::node	0.1.1.0.0	interrupt-01	46-47
# ::node	0.1.1.0.0.0	absorb-01	36-37
# ::node	0.1.1.0.0.0.0	piece	39-40
# ::node	0.1.1.0.0.0.0.0	biography	43-44
# ::node	0.1.1.0.0.0.0.0.0	learn-01	41-42
# ::node	0.1.1.0.0.0.0.0.1	intellectual	42-43
# ::node	0.1.1.0.1	close-01	51-52
# ::node	0.1.1.0.1.0	some	49-50
# ::node	0.1.1.0.1.1	back	56-57
# ::node	0.1.1.0.1.2	simple	47-48
# ::node	0.1.1.0.2	wonder-01	62-63
# ::node	0.1.1.0.2.0	i	58-59
# ::node	0.1.1.0.2.1	beg-01	70-71
# ::node	0.1.1.0.2.1.0	humble	91-92
# ::node	0.1.1.0.2.1.1	guarantee-01	73-74
# ::node	0.1.1.0.2.1.1.0	safe-41	83-84
# ::node	0.1.1.0.2.1.1.0.0	new	106-107
# ::node	0.1.1.0.2.1.1.0.0.0	ride-01	115-116
# ::node	0.1.1.0.2.1.1.0.0.0.0	hate-01	119-120
# ::node	0.1.1.0.2.1.1.0.0.0.0.0	man	122-123
# ::node	0.1.1.0.2.1.1.0.0.0.0.0.0	learn-01	133-134
# ::node	0.1.1.0.2.1.1.0.0.0.0.0.0.0	yet	132-133
# ::node	0.1.1.0.2.1.1.0.0.0.0.0.0.1	too	151-152
# ::node	0.1.1.0.2.1.1.0.0.0.0.0.1	behind	123-124
# ::node	0.1.1.0.2.1.1.0.0.0.0.0.2	this	121-122
# ::node	0.1.1.0.2.1.1.0.0.0.0.1	read-01	142-143
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.0	table	138-139
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.1	passenger	146-147
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.1.0	fellow	145-146
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2	man	148-149
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0	bother-01	158-159
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0	look-01	167-168
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0	he	166-167
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0	log-01	170-171
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.0	distance-quantity	176-177
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.0.0	mile	176-177
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1	close-01	185-186
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.0	behind	163-164
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.1	table	188-189
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2	use-01	181-182
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.0	i	179-180
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1	care-01	183-184
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.0	i	191-192
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.1	rough	161-162
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.2	simple	180-181
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.3	extreme	182-183
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2	and	202-203
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0	base-01	205-206
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0	use-01	206-207
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0	i	230-231
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0	close-01	232-233
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0.0	coffin	234-235
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0.1	i	226-227
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1	squeeze-01	210-211
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.0	table	212-213
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1	before	216-217
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0	allow-01	218-219
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.0	i	217-218
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1	slide-01	221-222
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0	it	219-220
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0.0	imagine-01	224-225
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0.0.0	so	228-229
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.1	ahead	199-200
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.2	place	223-224
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3	after	189-190
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.0	dinner	190-191
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.1	top	195-196
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.1.0	seat	198-199
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.2	year	178-179
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.1	apparent	153-154
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.0.2	ever	154-155
# ::node	0.1.1.0.2.1.1.0.0.0.0.1.2.1	this	147-148
# ::node	0.1.1.0.2.1.1.0.0.0.0.2	and	109-110
# ::node	0.1.1.0.2.1.1.0.0.0.0.2.0	thing	103-104
# ::node	0.1.1.0.2.1.1.0.0.0.0.2.0.0	late	110-111
# ::node	0.1.1.0.2.1.1.0.0.0.0.2.0.1	table	96-97
# ::node	0.1.1.0.2.1.1.0.0.0.0.3	instead	116-117
# ::node	0.1.1.0.2.1.1.0.0.0.1	plane	114-115
# ::node	0.1.1.0.2.1.1.0.0.0.2	same-41	113-114
# ::node	0.1.1.0.2.1.1.0.0.0.3	feel-01	118-119
# ::node	0.1.1.0.2.1.1.0.0.0.3.0	late	128-129
# ::node	0.1.1.0.2.1.1.0.1	record	84-85
# ::node	0.1.1.0.2.1.1.0.1.0	perfect	82-83
# ::node	0.1.1.0.2.1.1.1	loan-01	72-73
# ::node	0.1.1.0.2.1.1.1.0	every	88-89
# ::node	0.1.1.0.2.1.1.1.0.0	runway	89-90
# ::node	0.1.1.0.2.1.2	and	74-75
# ::node	0.1.1.0.2.1.3	and	79-80
# ::node	0.1.1.0.2.1.4	year	66-67
# ::node	0.1.1.0.2.1.4.0	temporal-quantity	66-67
# ::node	0.1.2	and	3-4
# ::node	0.1.2.0	notice-01	2-3
# ::node	0.1.2.0.0	i	1-2
# ::node	0.1.2.1	bother-01	6-7
# ::node	0.1.2.1.0	and	20-21
# ::node	0.1.2.1.0.0	adult	19-20
# ::node	0.1.2.2	table	14-15
# ::node	0.1.2.2.0	behind	15-16
# ::node	0.1.3	initial	24-25
# ::node	0.1.4	then	22-23
# ::root	0	contrast-01
# ::edge	absorb-01	ARG1	piece	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	after	op1	top	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.1	
# ::edge	allow-01	ARG0	i	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.0	
# ::edge	allow-01	ARG1	slide-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1	
# ::edge	and	op1	beg-01	0.1.1.0.2.1.2	0.1.1.0.2.1	
# ::edge	and	op1	bother-01	0.1.2.1.0	0.1.2.1	
# ::edge	and	op1	interrupt-01	0.1.1.0	0.1.1.0.0	
# ::edge	and	op1	irritation	0.0.0	0.0.0.0	
# ::edge	and	op1	notice-01	0.1.2	0.1.2.0	
# ::edge	and	op1	thing	0.1.1.0.2.1.1.0.0.0.0.2	0.1.1.0.2.1.1.0.0.0.0.2.0	
# ::edge	and	op1	use-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2	
# ::edge	and	op2	adult	0.1.2.1.0	0.1.2.1.0.0	
# ::edge	and	op2	bother-01	0.1.2	0.1.2.1	
# ::edge	and	op2	close-01	0.1.1.0	0.1.1.0.1	
# ::edge	and	op2	hate-01	0.1.1.0.2.1.1.0.0.0.0.2	0.1.1.0.2.1.1.0.0.0.0	
# ::edge	and	op2	surprise-01	0.0.0	0.0.0.1	
# ::edge	and	op3	interest-01	0.0.0	0.0	
# ::edge	and	op3	table	0.1.2	0.1.2.2	
# ::edge	and	op3	wonder-01	0.1.1.0	0.1.1.0.2	
# ::edge	and	op4	think-01	0.1.2	0.1	
# ::edge	base-01	ARG0	and	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2	
# ::edge	base-01	ARG1	use-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0	
# ::edge	before	op1	allow-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0	
# ::edge	beg-01	ARG0	humble	0.1.1.0.2.1	0.1.1.0.2.1.0	
# ::edge	beg-01	ARG1	guarantee-01	0.1.1.0.2.1	0.1.1.0.2.1.1	
# ::edge	beg-01	source	and	0.1.1.0.2.1	0.1.1.0.2.1.3	
# ::edge	biography	mod	intellectual	0.1.1.0.0.0.0.0	0.1.1.0.0.0.0.0.1	
# ::edge	bother-01	ARG1	man	0.1.1.0.2.1.1.0.0.0.0.1.2.0	0.1.1.0.2.1.1.0.0.0.0.1.2	
# ::edge	bother-01	frequency	apparent	0.1.1.0.2.1.1.0.0.0.0.1.2.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.1	
# ::edge	bother-01	time	ever	0.1.1.0.2.1.1.0.0.0.0.1.2.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.2	
# ::edge	care-01	ARG0	i	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.0	
# ::edge	care-01	ARG1	rough	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.1	
# ::edge	care-01	manner	simple	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.2	
# ::edge	care-01	mod	extreme	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1.3	
# ::edge	close-01	ARG0	behind	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.0	
# ::edge	close-01	ARG0	i	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0	
# ::edge	close-01	ARG0	some	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	close-01	ARG1	coffin	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0.0	
# ::edge	close-01	ARG1	table	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.1	
# ::edge	close-01	ARG2	i	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0.0.1	
# ::edge	close-01	location	back	0.1.1.0.1	0.1.1.0.1.1	
# ::edge	close-01	mod	simple	0.1.1.0.1	0.1.1.0.1.2	
# ::edge	close-01	time	after	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3	
# ::edge	contrast-01	ARG1	interest-01	0	0.0	
# ::edge	contrast-01	ARG2	think-01	0	0.1	
# ::edge	dinner	mod	after	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3	
# ::edge	distance-quantity	unit	mile	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.0.0	
# ::edge	feel-01	ARG1	late	0.1.1.0.2.1.1.0.0.0.3	0.1.1.0.2.1.1.0.0.0.3.0	
# ::edge	guarantee-01	ARG1	safe-41	0.1.1.0.2.1.1	0.1.1.0.2.1.1.0	
# ::edge	guarantee-01	ARG2	loan-01	0.1.1.0.2.1.1	0.1.1.0.2.1.1.1	
# ::edge	hate-01	ARG0	ride-01	0.1.1.0.2.1.1.0.0.0.0	0.1.1.0.2.1.1.0.0.0	
# ::edge	hate-01	ARG1	man	0.1.1.0.2.1.1.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.0	
# ::edge	imagine-01	ARG0	it	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0	
# ::edge	imagine-01	ARG1	so	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0.0.0	
# ::edge	instead	op1	hate-01	0.1.1.0.2.1.1.0.0.0.0.3	0.1.1.0.2.1.1.0.0.0.0	
# ::edge	interrupt-01	ARG1	absorb-01	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	learn-01	ARG1	biography	0.1.1.0.0.0.0.0.0	0.1.1.0.0.0.0.0	
# ::edge	learn-01	ARG1	man	0.1.1.0.2.1.1.0.0.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.0	
# ::edge	learn-01	mod	yet	0.1.1.0.2.1.1.0.0.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.0.0.0	
# ::edge	loan-01	ARG0	every	0.1.1.0.2.1.1.1	0.1.1.0.2.1.1.1.0	
# ::edge	log-01	ARG0	he	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0	
# ::edge	log-01	ARG1	distance-quantity	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.0	
# ::edge	log-01	ARG2	close-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1	
# ::edge	log-01	duration	year	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.2	
# ::edge	look-01	ARG0	he	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0	
# ::edge	look-01	ARG1	bother-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0	
# ::edge	man	location	behind	0.1.1.0.2.1.1.0.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.0.1	
# ::edge	man	mod	this	0.1.1.0.2.1.1.0.0.0.0.0	0.1.1.0.2.1.1.0.0.0.0.0.2	
# ::edge	man	mod	this	0.1.1.0.2.1.1.0.0.0.0.1.2	0.1.1.0.2.1.1.0.0.0.0.1.2.1	
# ::edge	notice-01	ARG0	i	0.1.2.0	0.1.2.0.0	
# ::edge	passenger	mod	fellow	0.1.1.0.2.1.1.0.0.0.0.1.1	0.1.1.0.2.1.1.0.0.0.0.1.1.0	
# ::edge	piece	domain	biography	0.1.1.0.0.0.0	0.1.1.0.0.0.0.0	
# ::edge	possible	domain	and	0.1.1	0.1.1.0	
# ::edge	read-01	ARG0	table	0.1.1.0.2.1.1.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.0	
# ::edge	read-01	ARG1	passenger	0.1.1.0.2.1.1.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.1	
# ::edge	read-01	ARG2	hate-01	0.1.1.0.2.1.1.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0	
# ::edge	read-01	time	man	0.1.1.0.2.1.1.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2	
# ::edge	record	mod	perfect	0.1.1.0.2.1.1.0.1	0.1.1.0.2.1.1.0.1.0	
# ::edge	record	mod	safe-41	0.1.1.0.2.1.1.0.1	0.1.1.0.2.1.1.0	
# ::edge	ride-01	ARG0	new	0.1.1.0.2.1.1.0.0.0	0.1.1.0.2.1.1.0.0	
# ::edge	ride-01	ARG1	plane	0.1.1.0.2.1.1.0.0.0	0.1.1.0.2.1.1.0.0.0.1	
# ::edge	ride-01	ARG3	feel-01	0.1.1.0.2.1.1.0.0.0	0.1.1.0.2.1.1.0.0.0.3	
# ::edge	runway	mod	every	0.1.1.0.2.1.1.1.0.0	0.1.1.0.2.1.1.1.0	
# ::edge	safe-41	ARG0	new	0.1.1.0.2.1.1.0	0.1.1.0.2.1.1.0.0	
# ::edge	same-41	ARG1	ride-01	0.1.1.0.2.1.1.0.0.0.2	0.1.1.0.2.1.1.0.0.0	
# ::edge	slide-01	ARG0	it	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.0	
# ::edge	slide-01	ARG1	ahead	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.1	
# ::edge	slide-01	location	place	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1.0.1.2	
# ::edge	squeeze-01	ARG1	table	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.0	
# ::edge	squeeze-01	time	before	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1.1	
# ::edge	surprise-01	ARG1	rough	0.0.0.1	0.0.0.1.0	
# ::edge	table	location	behind	0.1.2.2	0.1.2.2.0	
# ::edge	temporal-quantity	unit	year	0.1.1.0.2.1.4.0	0.1.1.0.2.1.4	
# ::edge	thing	mod	late	0.1.1.0.2.1.1.0.0.0.0.2.0	0.1.1.0.2.1.1.0.0.0.0.2.0.0	
# ::edge	thing	mod	table	0.1.1.0.2.1.1.0.0.0.0.2.0	0.1.1.0.2.1.1.0.0.0.0.2.0.1	
# ::edge	think-01	ARG0	i	0.1	0.1.0	
# ::edge	think-01	ARG1	possible	0.1	0.1.1	
# ::edge	think-01	time	initial	0.1	0.1.3	
# ::edge	think-01	time	then	0.1	0.1.4	
# ::edge	too	op1	learn-01	0.1.1.0.2.1.1.0.0.0.0.0.0.1	0.1.1.0.2.1.1.0.0.0.0.0.0	
# ::edge	top	poss	seat	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.1	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.3.1.0	
# ::edge	use-01	ARG0	i	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.0	
# ::edge	use-01	ARG0	i	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.0	
# ::edge	use-01	ARG1	care-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.1	
# ::edge	use-01	ARG1	squeeze-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2.2.0.0.1	
# ::edge	use-01	ARG2	close-01	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1.2	0.1.1.0.2.1.1.0.0.0.0.1.2.0.0.0.0.1	
# ::edge	wonder-01	ARG0	i	0.1.1.0.2	0.1.1.0.2.0	
# ::edge	wonder-01	ARG1	beg-01	0.1.1.0.2	0.1.1.0.2.1	
# ::edge	year	time	beg-01	0.1.1.0.2.1.4	0.1.1.0.2.1	
(c6 / contrast-01 
      :ARG1 (i12 / interest-01 
            :op-of (a11 / and 
                  :op1 (i13 / irritation) 
                  :op2 (s10 / surprise-01 
                        :ARG1 (r6 / rough)))) 
      :ARG2 (t11 / think-01 
            :ARG0 (i15 / i) 
            :ARG1 (p5 / possible 
                  :domain (a9 / and 
                        :op1 (i10 / interrupt-01 
                              :ARG1 (a10 / absorb-01 
                                    :ARG1 (p6 / piece 
                                          :domain (b8 / biography 
                                                :ARG1-of (l7 / learn-01) 
                                                :mod (i11 / intellectual))))) 
                        :op2 (c5 / close-01 
                              :ARG0 (s8 / some) 
                              :location (b7 / back) 
                              :mod (s9 / simple)) 
                        :op3 (w / wonder-01 
                              :ARG0 (i9 / i) 
                              :ARG1 (b6 / beg-01 
                                    :ARG0 (h3 / humble) 
                                    :ARG1 (g / guarantee-01 
                                          :ARG1 (s7 / safe-41 
                                                :ARG0 (n / new 
                                                      :ARG0-of (r3 / ride-01 
                                                            :ARG0-of (h2 / hate-01 
                                                                  :ARG1 (m3 / man 
                                                                        :ARG1-of (l3 / learn-01 
                                                                              :mod (y2 / yet) 
                                                                              :op-of (t4 / too)) 
                                                                        :location (b5 / behind) 
                                                                        :mod (t7 / this)) 
                                                                  :ARG2-of (r2 / read-01 
                                                                        :ARG0 (t6 / table) 
                                                                        :ARG1 (p2 / passenger 
                                                                              :mod (f / fellow)) 
                                                                        :time (m2 / man 
                                                                              :ARG1-of (b4 / bother-01 
                                                                                    :ARG1-of (l2 / look-01 
                                                                                          :ARG0 (h / he 
                                                                                                :ARG0-of (l / log-01 
                                                                                                      :ARG1 (d2 / distance-quantity 
                                                                                                            :unit (m / mile)) 
                                                                                                      :ARG2 (c3 / close-01 
                                                                                                            :ARG0 (b3 / behind) 
                                                                                                            :ARG1 (t3 / table) 
                                                                                                            :ARG2-of (u2 / use-01 
                                                                                                                  :ARG0 (i7 / i) 
                                                                                                                  :ARG1 (c4 / care-01 
                                                                                                                        :ARG0 (i6 / i) 
                                                                                                                        :ARG1 (r / rough) 
                                                                                                                        :manner (s5 / simple) 
                                                                                                                        :mod (e / extreme)) 
                                                                                                                  :op-of (a2 / and 
                                                                                                                        :ARG0-of (b2 / base-01 
                                                                                                                              :ARG1 (u / use-01 
                                                                                                                                    :ARG0 (i / i 
                                                                                                                                          :ARG0-of (c2 / close-01 
                                                                                                                                                :ARG1 (c / coffin) 
                                                                                                                                                :ARG2 (i2 / i))) 
                                                                                                                                    :ARG1 (s3 / squeeze-01 
                                                                                                                                          :ARG1 (t / table) 
                                                                                                                                          :time (b / before 
                                                                                                                                                :op1 (a / allow-01 
                                                                                                                                                      :ARG0 (i5 / i) 
                                                                                                                                                      :ARG1 (s2 / slide-01 
                                                                                                                                                            :ARG0 (i4 / it 
                                                                                                                                                                  :ARG0-of (i3 / imagine-01 
                                                                                                                                                                        :ARG1 (s / so))) 
                                                                                                                                                            :ARG1 (a3 / ahead) 
                                                                                                                                                            :location (p / place))))))))) 
                                                                                                            :time (a4 / after 
                                                                                                                  :mod-of (d / dinner) 
                                                                                                                  :op1 (t2 / top 
                                                                                                                        :poss (s4 / seat)))) 
                                                                                                      :duration (y / year)))) 
                                                                                    :frequency (a5 / apparent) 
                                                                                    :time (e2 / ever)) 
                                                                              :mod (t5 / this))) 
                                                                  :op-of (a6 / and 
                                                                        :op1 (t8 / thing 
                                                                              :mod (l5 / late) 
                                                                              :mod (t9 / table))) 
                                                                  :op-of (i8 / instead)) 
                                                            :ARG1 (p3 / plane) 
                                                            :ARG1-of (s6 / same-41) 
                                                            :ARG3 (f2 / feel-01 
                                                                  :ARG1 (l4 / late)))) 
                                                :mod-of (r5 / record 
                                                      :mod (p4 / perfect))) 
                                          :ARG2 (l6 / loan-01 
                                                :ARG0 (e3 / every 
                                                      :mod-of (r4 / runway)))) 
                                    :op-of (a8 / and) 
                                    :source (a7 / and) 
                                    :time-of (y3 / year 
                                          :unit-of (t10 / temporal-quantity)))))) 
            :op-of (a14 / and 
                  :op1 (n2 / notice-01 
                        :ARG0 (i16 / i)) 
                  :op2 (b10 / bother-01 
                        :op-of (a12 / and 
                              :op1 (a13 / adult))) 
                  :op3 (t13 / table 
                        :location (b9 / behind))) 
            :time (i14 / initial) 
            :time (t12 / then)))

# ::snt what bothers them much more is the erratic way business continues to be done
# ::tok what bothers them much more is the erratic way business continues to be done
# ::alignments 10-11|0.0.0 9-10|0.0 8-9|0.0.1.0 7-8|0 3-4|0.0.0.0 1-2|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:29.440
# ::node	0	erratic	7-8
# ::node	0.0	business	9-10
# ::node	0.0.0	continue-01	10-11
# ::node	0.0.0.0	much	3-4
# ::node	0.0.1	bother-01	1-2
# ::node	0.0.1.0	way	8-9
# ::root	0	erratic
(e / erratic 
      :mod-of (b / business 
            :ARG1-of (c / continue-01 
                  :ARG0 (m / much)) 
            :ARG1-of (b2 / bother-01 
                  :ARG0 (w / way))))

# ::snt so low had the war cabinet sunk that he did not even bother to rejoin it
# ::tok so low had the war cabinet sunk that he did not even bother to rejoin it
# ::alignments 15-16|0.1.1 14-15|0.1 12-13|0 8-9|0.1.0 6-7|0.0.0 5-6|0.0 4-5|0.0.1 1-2|0.0.1.0 0-1|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:29.518
# ::node	0	bother-02	12-13
# ::node	0.0	cabinet	5-6
# ::node	0.0.0	sink-01	6-7
# ::node	0.0.1	war	4-5
# ::node	0.0.1.0	low	1-2
# ::node	0.0.1.0.0	so	0-1
# ::node	0.1	rejoin-01	14-15
# ::node	0.1.0	he	8-9
# ::node	0.1.1	it	15-16
# ::root	0	bother-02
# ::edge	bother-02	ARG0	cabinet	0	0.0	
# ::edge	bother-02	ARG1	rejoin-01	0	0.1	
# ::edge	cabinet	mod	war	0.0	0.0.1	
# ::edge	low	degree	so	0.0.1.0	0.0.1.0.0	
# ::edge	low	domain	war	0.0.1.0	0.0.1	
# ::edge	rejoin-01	ARG0	he	0.1	0.1.0	
# ::edge	rejoin-01	ARG1	it	0.1	0.1.1	
# ::edge	sink-01	ARG1	cabinet	0.0.0	0.0	
(b / bother-02 
      :ARG0 (c / cabinet 
            :ARG1-of (s / sink-01) 
            :mod (w / war 
                  :domain-of (l / low 
                        :degree (s2 / so)))) 
      :ARG1 (r / rejoin-01 
            :ARG0 (h / he) 
            :ARG1 (i / it)))

# ::snt it is widely assumed that elders will not bother to hold on to any scottish shares and its 23
# ::tok it is widely assumed that elders will not bother to hold on to any scottish shares and its 23
# ::alignments 18-19|0.2 16-17|0 15-16|0.2.0 13-14|0.0 8-9|0.1 5-6|0.1.0 3-4|0.1.1 2-3|0.1.1.1 0-1|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:29.659
# ::node	0	and	16-17
# ::node	0.0	any	13-14
# ::node	0.1	bother-02	8-9
# ::node	0.1.0	elder	5-6
# ::node	0.1.1	assume-02	3-4
# ::node	0.1.1.0	it	0-1
# ::node	0.1.1.1	wide	2-3
# ::node	0.2	23	18-19
# ::node	0.2.0	share	15-16
# ::root	0	and
# ::edge	23	poss	share	0.2	0.2.0	
# ::edge	and	mod	any	0	0.0	
# ::edge	and	op1	bother-02	0	0.1	
# ::edge	and	op2	23	0	0.2	
# ::edge	assume-02	ARG0	it	0.1.1	0.1.1.0	
# ::edge	assume-02	ARG1	bother-02	0.1.1	0.1	
# ::edge	assume-02	manner	wide	0.1.1	0.1.1.1	
# ::edge	bother-02	ARG0	elder	0.1	0.1.0	
(a / and 
      :mod (a2 / any) 
      :op1 (b / bother-02 
            :ARG0 (e / elder) 
            :ARG1-of (a3 / assume-02 
                  :ARG0 (i / it) 
                  :manner (w / wide))) 
      :op2 (2 / 23 
            :poss (s / share)))

# ::snt a lot dont bother with the social they just beg
# ::tok a lot dont bother with the social they just beg
# ::alignments 9-10|0.1 8-9|0.1.1 7-8|0.1.0 6-7|0.1.0.0 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:29.686
# ::node	0	bother-02	3-4
# ::node	0.0	lot	1-2
# ::node	0.1	beg-01	9-10
# ::node	0.1.0	they	7-8
# ::node	0.1.0.0	society	6-7
# ::node	0.1.1	just	8-9
# ::root	0	bother-02
# ::edge	beg-01	ARG0	they	0.1	0.1.0	
# ::edge	beg-01	mod	just	0.1	0.1.1	
# ::edge	bother-02	ARG1	lot	0	0.0	
# ::edge	bother-02	time	beg-01	0	0.1	
# ::edge	society	prep-in	they	0.1.0.0	0.1.0	
(b2 / bother-02 
      :ARG1 (l / lot) 
      :time (b / beg-01 
            :ARG0 (t / they 
                  :prep-in-of (s / society)) 
            :mod (j / just)))

# ::snt now the pacific ocean is on the whole immensely deeper than that  reaching 10000 metres in places yet parts of it are speckled with  thousands of tiny islands and reefs as well as some larger islands so  one is forced to ask what is all the coral growing on and how did it  get established in the first place  this problem has bothered scientists for a long while yet it was  charles darwin way back in the nineteenth century who suggested one of  the most convincing hypotheses
# ::tok now the pacific ocean is on the whole immensely deeper than that reaching 10000 metres in places yet parts of it are speckled with thousands of tiny islands and reefs as well as some larger islands so one is forced to ask what is all the coral growing on and how did it get established in the first place this problem has bothered scientists for a long while yet it was charles darwin way back in the nineteenth century who suggested one of the most convincing hypotheses
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:29.687
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt he was in a towering rage pushed his way into the house most rudely and didnt even bother to wipe his feet
# ::tok he was in a towering rage pushed his way into the house most rudely and didnt even bother to wipe his feet
# ::alignments 21-22|0.0.0 19-20|0.0 17-18|0 14-15|0.1.0 12-13|0.1.2.0 11-12|0.1.2 8-9|0.1.3 6-7|0.1 5-6|0.1.1 4-5|0.1.1.1 0-1|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:29.953
# ::node	0	bother-02	17-18
# ::node	0.0	wipe-02	19-20
# ::node	0.0.0	foot	21-22
# ::node	0.1	push-01	6-7
# ::node	0.1.0	and	14-15
# ::node	0.1.1	rage-02	5-6
# ::node	0.1.1.0	he	0-1
# ::node	0.1.1.1	tower-01	4-5
# ::node	0.1.2	house	11-12
# ::node	0.1.2.0	most	12-13
# ::node	0.1.3	way	8-9
# ::root	0	bother-02
# ::edge	bother-02	ARG1	wipe-02	0	0.0	
# ::edge	bother-02	condition	push-01	0	0.1	
# ::edge	most	mod	house	0.1.2.0	0.1.2	
# ::edge	push-01	ARG0	and	0.1	0.1.0	
# ::edge	push-01	ARG1	rage-02	0.1	0.1.1	
# ::edge	push-01	ARG2	house	0.1	0.1.2	
# ::edge	push-01	manner	way	0.1	0.1.3	
# ::edge	rage-02	ARG0	he	0.1.1	0.1.1.0	
# ::edge	tower-01	ARG0	rage-02	0.1.1.1	0.1.1	
# ::edge	wipe-02	ARG1	foot	0.0	0.0.0	
(b / bother-02 
      :ARG1 (w / wipe-02 
            :ARG1 (f / foot)) 
      :condition (p / push-01 
            :ARG0 (a / and) 
            :ARG1 (r / rage-02 
                  :ARG0 (h2 / he) 
                  :ARG0-of (t / tower-01)) 
            :ARG2 (h / house 
                  :mod-of (m / most)) 
            :manner (w2 / way)))

# ::snt he seemed a genial and indestructible landmark in the history of american music in spite of defective hearing which had bothered him since the late seventies
# ::tok he seemed a genial and indestructible landmark in the history of american music in spite of defective hearing which had bothered him since the late seventies
# ::alignments 24-25|0.1.0.0.1.0 22-23|0.1.0.0.1 20-21|0.1.0.0 17-18|0.1.0.0.0 16-17|0.1.0.0.0.1 14-15|0.1.0.0.0.0 12-13|0.1.1.0 11-12|0.1.1.1.0+0.1.1.1+0.1.1 9-10|0.1.1.0.0 6-7|0.1.0 4-5|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:30.081
# ::node	0	seem-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	and	4-5
# ::node	0.1.0	landmark	6-7
# ::node	0.1.0.0	bother-01	20-21
# ::node	0.1.0.0.0	hear-01	17-18
# ::node	0.1.0.0.0.0	spite	14-15
# ::node	0.1.0.0.0.1	defective	16-17
# ::node	0.1.0.0.1	since	22-23
# ::node	0.1.0.0.1.0	late	24-25
# ::node	0.1.1	country	11-12
# ::node	0.1.1.0	music	12-13
# ::node	0.1.1.0.0	history	9-10
# ::node	0.1.1.1	name	11-12
# ::node	0.1.1.1.0	"America"	11-12
# ::root	0	seem-01
# ::edge	and	op1	seem-01	0.1	0	
# ::edge	and	op2	landmark	0.1	0.1.0	
# ::edge	and	op3	country	0.1	0.1.1	
# ::edge	bother-01	ARG0	landmark	0.1.0.0	0.1.0	
# ::edge	bother-01	ARG1	hear-01	0.1.0.0	0.1.0.0.0	
# ::edge	bother-01	time	since	0.1.0.0	0.1.0.0.1	
# ::edge	country	name	name	0.1.1	0.1.1.1	
# ::edge	hear-01	ARG1	spite	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	hear-01	mod	defective	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	history	poss	music	0.1.1.0.0	0.1.1.0	
# ::edge	music	mod	country	0.1.1.0	0.1.1	
# ::edge	name	op1	"America"	0.1.1.1	0.1.1.1.0	
# ::edge	seem-01	ARG1	he	0	0.0	
# ::edge	since	op1	late	0.1.0.0.1	0.1.0.0.1.0	
(s3 / seem-01 
      :ARG1 (h3 / he) 
      :op-of (a / and 
            :op1 (l2 / landmark 
                  :ARG0-of (b / bother-01 
                        :ARG1 (h / hear-01 
                              :ARG1 (s2 / spite) 
                              :mod (d / defective)) 
                        :time (s / since 
                              :op1 (l / late)))) 
            :op2 (c / country 
                  :mod-of (m / music 
                        :poss-of (h2 / history)) 
                  :name (n / name 
                        :op1 "America"))))

# ::snt being a neutral they didnt bother me at first but then i got involved with entirely the wrong people from their point of view and i had to exit stage left rather quickly
# ::tok being a neutral they didnt bother me at first but then i got involved with entirely the wrong people from their point of view and i had to exit stage left rather quickly
# ::alignments 32-33|0.1.0.1.2 29-30|0.1.0.1.1 28-29|0.1.0.1 25-26|0.1.0.1.0 24-25|0.1.3 21-22|0.1.2 17-18|0.1.1.0 15-16|0.0 13-14|0.1 11-12|0.1.1 10-11|0.1.4 9-10|0 5-6|0.1.0.0 3-4|0.1.0 2-3|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.016
# ::node	0	contrast-01	9-10
# ::node	0.0	entire	15-16
# ::node	0.1	involve-01	13-14
# ::node	0.1.0	they	3-4
# ::node	0.1.0.0	bother-02	5-6
# ::node	0.1.0.0.0	neutral	2-3
# ::node	0.1.0.1	exit-01	28-29
# ::node	0.1.0.1.0	i	25-26
# ::node	0.1.0.1.1	stage	29-30
# ::node	0.1.0.1.2	quick	32-33
# ::node	0.1.1	i	11-12
# ::node	0.1.1.0	wrong-41	17-18
# ::node	0.1.2	point	21-22
# ::node	0.1.3	and	24-25
# ::node	0.1.4	then	10-11
# ::root	0	contrast-01
# ::edge	and	op1	involve-01	0.1.3	0.1	
# ::edge	bother-02	ARG0	they	0.1.0.0	0.1.0	
# ::edge	bother-02	ARG1	neutral	0.1.0.0	0.1.0.0.0	
# ::edge	contrast-01	ARG1	entire	0	0.0	
# ::edge	contrast-01	ARG2	involve-01	0	0.1	
# ::edge	exit-01	ARG0	i	0.1.0.1	0.1.0.1.0	
# ::edge	exit-01	ARG1	stage	0.1.0.1	0.1.0.1.1	
# ::edge	exit-01	ARG2	they	0.1.0.1	0.1.0	
# ::edge	exit-01	time	quick	0.1.0.1	0.1.0.1.2	
# ::edge	involve-01	ARG0	they	0.1	0.1.0	
# ::edge	involve-01	ARG1	i	0.1	0.1.1	
# ::edge	involve-01	ARG2	point	0.1	0.1.2	
# ::edge	involve-01	time	then	0.1	0.1.4	
# ::edge	wrong-41	ARG1	i	0.1.1.0	0.1.1	
(c / contrast-01 
      :ARG1 (e2 / entire) 
      :ARG2 (i2 / involve-01 
            :ARG0 (t2 / they 
                  :ARG0-of (b / bother-02 
                        :ARG1 (n / neutral)) 
                  :ARG2-of (e / exit-01 
                        :ARG0 (i / i) 
                        :ARG1 (s / stage) 
                        :time (q / quick))) 
            :ARG1 (i3 / i 
                  :ARG1-of (w / wrong-41)) 
            :ARG2 (p / point) 
            :op-of (a / and) 
            :time (t / then)))

# ::snt his reply was tantamount to do not bother me
# ::tok his reply was tantamount to do not bother me
# ::alignments 7-8|0 3-4|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.027
# ::node	0	bother-02	7-8
# ::node	0.0	tantamount	3-4
# ::node	0.0.0	reply-01	1-2
# ::root	0	bother-02
# ::edge	bother-02	ARG1	tantamount	0	0.0	
# ::edge	tantamount	domain	reply-01	0.0	0.0.0	
(b / bother-02 
      :ARG1 (t / tantamount 
            :domain (r / reply-01)))

# ::snt what may have seem prudent in the days when pearl was not bothered by a takeover has now been miraculously rethought
# ::tok what may have seem prudent in the days when pearl was not bothered by a takeover has now been miraculously rethought
# ::alignments 19-20|0.2.1.0 17-18|0.1 15-16|0.2.1 12-13|0.2 9-10|0.2.0 7-8|0.3.0+0.3 3-4|0 1-2|0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.134
# ::node	0	seem-01	3-4
# ::node	0.0	date-entity	1-2
# ::node	0.0.0	5	1-2
# ::node	0.1	now	17-18
# ::node	0.2	bother-01	12-13
# ::node	0.2.0	pearl	9-10
# ::node	0.2.1	take-12	15-16
# ::node	0.2.1.0	miraculous	19-20
# ::node	0.3	temporal-quantity	7-8
# ::node	0.3.0	day	7-8
# ::root	0	seem-01
# ::edge	bother-01	ARG1	pearl	0.2	0.2.0	
# ::edge	bother-01	ARG2	take-12	0.2	0.2.1	
# ::edge	date-entity	month	5	0.0	0.0.0	
# ::edge	seem-01	ARG0	date-entity	0	0.0	
# ::edge	seem-01	ARG1	now	0	0.1	
# ::edge	seem-01	time	bother-01	0	0.2	
# ::edge	seem-01	time	temporal-quantity	0	0.3	
# ::edge	take-12	ARG1	miraculous	0.2.1	0.2.1.0	
# ::edge	temporal-quantity	unit	day	0.3	0.3.0	
(s / seem-01 
      :ARG0 (d2 / date-entity 
            :month 5) 
      :ARG1 (n / now) 
      :time (b / bother-01 
            :ARG1 (p / pearl) 
            :ARG2 (t / take-12 
                  :ARG1 (m / miraculous))) 
      :time (t2 / temporal-quantity 
            :unit (d / day)))

# ::snt   she didnt bother to turn simply confronted him in the mirror
# ::tok she didnt bother to turn simply confronted him in the mirror
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.135
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt   im not bothered its not to do with me
# ::tok im not bothered its not to do with me
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.136
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt they didnt even bother to learn portuguese
# ::tok they didnt even bother to learn portuguese
# ::alignments 5-6|0.0.0 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.145
# ::node	0	bother-02	3-4
# ::node	0.0	they	0-1
# ::node	0.0.0	learn-01	5-6
# ::root	0	bother-02
# ::edge	bother-02	ARG0	they	0	0.0	
# ::edge	learn-01	ARG0	they	0.0.0	0.0	
(b / bother-02 
      :ARG0 (t / they 
            :ARG0-of (l / learn-01)))

# ::snt webb laughed it was a low wellfelt laugh as he looked at his friend  it doesnt bother you a bit does it alex
# ::tok webb laughed it was a low wellfelt laugh as he looked at his friend it doesnt bother you a bit does it alex
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.147
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt only the organist in the conference hall seemed to be properly tunedin belting out a rendition of bewitched bothered and bewildered as the representatives filed in for their annual law and order debate
# ::tok only the organist in the conference hall seemed to be properly tunedin belting out a rendition of bewitched bothered and bewildered as the representatives filed in for their annual law and order debate
# ::alignments 32-33|0.3 30-31|0 29-30|0.2 24-25|0.0 23-24|0.0.0.0+0.0.0 19-20|0.1.1 18-19|0.1.1.0.0 15-16|0.1.1.0 10-11|0.3.0 7-8|0.1 6-7|0.1.0 5-6|0.1.0.0 0-1|0.1.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.519
# ::node	0	and	30-31
# ::node	0.0	file-01	24-25
# ::node	0.0.0	person	23-24
# ::node	0.0.0.0	represent-01	23-24
# ::node	0.1	seem-01	7-8
# ::node	0.1.0	hall	6-7
# ::node	0.1.0.0	conference	5-6
# ::node	0.1.1	and	19-20
# ::node	0.1.1.0	rendition	15-16
# ::node	0.1.1.0.0	bother-01	18-19
# ::node	0.1.1.0.0.0	only	0-1
# ::node	0.2	law	29-30
# ::node	0.3	debate-01	32-33
# ::node	0.3.0	proper	10-11
# ::root	0	and
# ::edge	and	op1	rendition	0.1.1	0.1.1.0	
# ::edge	and	op1	seem-01	0	0.1	
# ::edge	and	op2	law	0	0.2	
# ::edge	and	op3	debate-01	0	0.3	
# ::edge	bother-01	ARG1	only	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	conference	location	hall	0.1.0.0	0.1.0	
# ::edge	debate-01	ARG1	proper	0.3	0.3.0	
# ::edge	file-01	ARG0	person	0.0	0.0.0	
# ::edge	file-01	ARG1	and	0.0	0	
# ::edge	rendition	mod	bother-01	0.1.1.0	0.1.1.0.0	
# ::edge	represent-01	ARG0	person	0.0.0.0	0.0.0	
# ::edge	seem-01	ARG0	hall	0.1	0.1.0	
# ::edge	seem-01	ARG1	and	0.1	0.1.1	
(a / and 
      :ARG1-of (f / file-01 
            :ARG0 (p / person 
                  :ARG0-of (r / represent-01))) 
      :op1 (s / seem-01 
            :ARG0 (h / hall 
                  :location-of (c / conference)) 
            :ARG1 (a2 / and 
                  :op1 (r2 / rendition 
                        :mod (b / bother-01 
                              :ARG1 (o / only))))) 
      :op2 (l / law) 
      :op3 (d / debate-01 
            :ARG1 (p2 / proper)))

# ::snt so this is how much you care about me  i plead for help to you who caused my suffering and you do not even bother to reply
# ::tok so this is how much you care about me i plead for help to you who caused my suffering and you do not even bother to reply
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.520
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt i loved her  when i first read nabokovs glory i had been bothered by a sentence early on that claimed that the mothers love for the hero was so violent and intense that it seemed to make the heart hoarse
# ::tok i loved her when i first read nabokovs glory i had been bothered by a sentence early on that claimed that the mothers love for the hero was so violent and intense that it seemed to make the heart hoarse
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.521
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the computer programming can you imagine bobby moore bothering with that was done by toby king goon baker who has worked with chaka khan
# ::tok the computer programming can you imagine bobby moore bothering with that was done by toby king goon baker who has worked with chaka khan
# ::alignments 20-21|0.0.0.0 15-16|0.0.0.0.0 8-9|0.0.0 6-7|0.2 5-6|0 4-5|0.0 3-4|0.3 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:31.581
# ::node	0	imagine-01	5-6
# ::node	0.0	you	4-5
# ::node	0.0.0	bother-01	8-9
# ::node	0.0.0.0	work-01	20-21
# ::node	0.0.0.0.0	king	15-16
# ::node	0.1	computer	1-2
# ::node	0.2	bobby	6-7
# ::node	0.3	possible	3-4
# ::root	0	imagine-01
# ::edge	bother-01	ARG1	you	0.0.0	0.0	
# ::edge	imagine-01	ARG0	you	0	0.0	
# ::edge	imagine-01	ARG1	computer	0	0.1	
# ::edge	imagine-01	manner	bobby	0	0.2	
# ::edge	imagine-01	mod	possible	0	0.3	
# ::edge	work-01	ARG0	king	0.0.0.0	0.0.0.0.0	
# ::edge	work-01	ARG1	bother-01	0.0.0.0	0.0.0	
(i / imagine-01 
      :ARG0 (y / you 
            :ARG1-of (b / bother-01 
                  :ARG1-of (w / work-01 
                        :ARG0 (k / king)))) 
      :ARG1 (c / computer) 
      :manner (b2 / bobby) 
      :mod (p / possible))

# ::snt last season at the instigation of don rutherford the rugby football unions coaching organiser the coaches and captains from the 36 national league clubs were invited to attend a coaching seminar but a depressingly small number bothered to turn up
# ::tok last season at the instigation of don rutherford the rugby football unions coaching organiser the coaches and captains from the 36 national league clubs were invited to attend a coaching seminar but a depressingly small number bothered to turn up
# ::alignments 36-37|0.1.0.0 35-36|0.1.0 34-35|0.1 31-32|0 30-31|0.2.2.1 27-28|0.2.2 25-26|0.2 23-24|0.2.2.0 22-23|0.2.2.0.0 21-22|0.2.2.0.0.0 20-21|0.2.2.0.1 16-17|0.2.1 11-12|0.0.0 10-11|0.0 1-2|0.2.0 0-1|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:32.024
# ::node	0	contrast-01	31-32
# ::node	0.0	football	10-11
# ::node	0.0.0	union	11-12
# ::node	0.1	small	34-35
# ::node	0.1.0	number	35-36
# ::node	0.1.0.0	bother-01	36-37
# ::node	0.2	invite-01	25-26
# ::node	0.2.0	season	1-2
# ::node	0.2.0.0	last	0-1
# ::node	0.2.1	and	16-17
# ::node	0.2.2	attend-01	27-28
# ::node	0.2.2.0	club	23-24
# ::node	0.2.2.0.0	league	22-23
# ::node	0.2.2.0.0.0	nation	21-22
# ::node	0.2.2.0.1	36	20-21
# ::node	0.2.2.1	seminar	30-31
# ::root	0	contrast-01
# ::edge	attend-01	ARG0	club	0.2.2	0.2.2.0	
# ::edge	attend-01	ARG1	seminar	0.2.2	0.2.2.1	
# ::edge	bother-01	ARG1	number	0.1.0.0	0.1.0	
# ::edge	club	poss	league	0.2.2.0	0.2.2.0.0	
# ::edge	club	quant	36	0.2.2.0	0.2.2.0.1	
# ::edge	contrast-01	ARG1	football	0	0.0	
# ::edge	contrast-01	ARG2	small	0	0.1	
# ::edge	invite-01	ARG0	season	0.2	0.2.0	
# ::edge	invite-01	ARG1	and	0.2	0.2.1	
# ::edge	invite-01	ARG2	attend-01	0.2	0.2.2	
# ::edge	invite-01	purpose	contrast-01	0.2	0	
# ::edge	league	mod	nation	0.2.2.0.0	0.2.2.0.0.0	
# ::edge	number	mod	small	0.1.0	0.1	
# ::edge	season	mod	last	0.2.0	0.2.0.0	
# ::edge	union	mod	football	0.0.0	0.0	
(c / contrast-01 
      :ARG1 (f / football 
            :mod-of (u / union)) 
      :ARG2 (s / small 
            :mod-of (n / number 
                  :ARG1-of (b / bother-01))) 
      :purpose-of (i / invite-01 
            :ARG0 (s3 / season 
                  :mod (l2 / last)) 
            :ARG1 (a2 / and) 
            :ARG2 (a / attend-01 
                  :ARG0 (c2 / club 
                        :poss (l / league 
                              :mod (n2 / nation)) 
                        :quant 36) 
                  :ARG1 (s2 / seminar))))

# ::snt so did a weak wall street bothered by more junk bond problems
# ::tok so did a weak wall street bothered by more junk bond problems
# ::alignments 11-12|0.0 9-10|0 6-7|0.0.0 5-6|0.0.0.1 4-5|0.0.0.1.0 3-4|0.0.0.1.1 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:32.109
# ::node	0	junk	9-10
# ::node	0.0	problem	11-12
# ::node	0.0.0	bother-01	6-7
# ::node	0.0.0.0	so	0-1
# ::node	0.0.0.1	street	5-6
# ::node	0.0.0.1.0	wall	4-5
# ::node	0.0.0.1.1	weak	3-4
# ::root	0	junk
(j / junk 
      :mod-of (p / problem 
            :ARG2-of (b / bother-01 
                  :ARG0 (s2 / so) 
                  :ARG1 (s / street 
                        :mod (w / wall) 
                        :mod (w2 / weak)))))

# ::snt i hadnt bothered thinking we wouldnt be going maggie told susan
# ::tok i hadnt bothered thinking we wouldnt be going maggie told susan
# ::alignments 9-10|0 4-5|0.1.0.0 3-4|0.1.0 2-3|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:32.123
# ::node	0	tell-01	9-10
# ::node	0.0	i	0-1
# ::node	0.1	bother-01	2-3
# ::node	0.1.0	think-01	3-4
# ::node	0.1.0.0	we	4-5
# ::root	0	tell-01
# ::edge	bother-01	ARG1	think-01	0.1	0.1.0	
# ::edge	tell-01	ARG0	i	0	0.0	
# ::edge	tell-01	ARG1	bother-01	0	0.1	
# ::edge	think-01	ARG0	we	0.1.0	0.1.0.0	
(t / tell-01 
      :ARG0 (i / i) 
      :ARG1 (b / bother-01 
            :ARG1 (t2 / think-01 
                  :ARG0 (w / we))))

# ::snt mrs fairbrother said if people cant be bothered to come along and try and support the public meeting in bicester then they deserve what they get under the poll tax
# ::tok mrs fairbrother said if people cant be bothered to come along and try and support the public meeting in bicester then they deserve what they get under the poll tax
# ::alignments 29-30|0.0.1.0.0 28-29|0.0.1.0.0.0 24-25|0.0.1.0 22-23|0.0.0 21-22|0.0.0.0 20-21|0.0.0.1 17-18|0.0.2.0.0 16-17|0.0.2.0.0.0 14-15|0.0.2.0 13-14|0.0.3 12-13|0.0.2 11-12|0.0 10-11|0.0.1.1 7-8|0.0.1 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:32.487
# ::node	0	say-01	2-3
# ::node	0.0	and	11-12
# ::node	0.0.0	deserve-01	22-23
# ::node	0.0.0.0	they	21-22
# ::node	0.0.0.1	then	20-21
# ::node	0.0.1	bother-01	7-8
# ::node	0.0.1.0	they	24-25
# ::node	0.0.1.0.0	tax-01	29-30
# ::node	0.0.1.0.0.0	poll-01	28-29
# ::node	0.0.1.1	along	10-11
# ::node	0.0.2	try-01	12-13
# ::node	0.0.2.0	support-01	14-15
# ::node	0.0.2.0.0	meet-03	17-18
# ::node	0.0.2.0.0.0	public	16-17
# ::node	0.0.3	and	13-14
# ::root	0	say-01
# ::edge	and	op1	bother-01	0.0	0.0.1	
# ::edge	and	op2	try-01	0.0	0.0.2	
# ::edge	and	op3	and	0.0	0.0.3	
# ::edge	bother-01	ARG0	they	0.0.1	0.0.1.0	
# ::edge	bother-01	ARG1	along	0.0.1	0.0.1.1	
# ::edge	deserve-01	ARG0	they	0.0.0	0.0.0.0	
# ::edge	deserve-01	condition	and	0.0.0	0.0	
# ::edge	deserve-01	time	then	0.0.0	0.0.0.1	
# ::edge	meet-03	ARG0	public	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	say-01	ARG1	and	0	0.0	
# ::edge	support-01	ARG1	meet-03	0.0.2.0	0.0.2.0.0	
# ::edge	tax-01	ARG0	they	0.0.1.0.0	0.0.1.0	
# ::edge	tax-01	ARG1	poll-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	try-01	ARG1	support-01	0.0.2	0.0.2.0	
(s2 / say-01 
      :ARG1 (a2 / and 
            :condition-of (d / deserve-01 
                  :ARG0 (t3 / they) 
                  :time (t4 / then)) 
            :op1 (b / bother-01 
                  :ARG0 (t2 / they 
                        :ARG0-of (t / tax-01 
                              :ARG1 (p / poll-01))) 
                  :ARG1 (a3 / along)) 
            :op2 (t5 / try-01 
                  :ARG1 (s / support-01 
                        :ARG1 (m / meet-03 
                              :ARG0 (p2 / public)))) 
            :op3 (a / and)))

# ::snt he dont talk too much cos his english aint so good so people dont really bother to talk back
# ::tok he dont talk too much cos his english aint so good so people dont really bother to talk back
# ::alignments 18-19|0.0.1 17-18|0.0 15-16|0 14-15|0.2 11-12|0.3 10-11|0.1.0.0 9-10|0.1.0.0.0 7-8|0.0.0.0.0+0.0.0.0+0.0.0 4-5|0.1.1 3-4|0.1.1.0 2-3|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:32.730
# ::node	0	bother-02	15-16
# ::node	0.0	talk-01	17-18
# ::node	0.0.0	language	7-8
# ::node	0.0.0.0	name	7-8
# ::node	0.0.0.0.0	"English"	7-8
# ::node	0.0.1	back	18-19
# ::node	0.1	talk-01	2-3
# ::node	0.1.0	he	0-1
# ::node	0.1.0.0	good	10-11
# ::node	0.1.0.0.0	so	9-10
# ::node	0.1.1	much	4-5
# ::node	0.1.1.0	too	3-4
# ::node	0.2	really	14-15
# ::node	0.3	so	11-12
# ::root	0	bother-02
# ::edge	bother-02	ARG1	talk-01	0	0.0	
# ::edge	bother-02	degree	really	0	0.2	
# ::edge	good	degree	so	0.1.0.0	0.1.0.0.0	
# ::edge	good	domain	he	0.1.0.0	0.1.0	
# ::edge	language	name	name	0.0.0	0.0.0.0	
# ::edge	much	degree	too	0.1.1	0.1.1.0	
# ::edge	name	op1	"English"	0.0.0.0	0.0.0.0.0	
# ::edge	so	op1	bother-02	0.3	0	
# ::edge	talk-01	ARG0	he	0.1	0.1.0	
# ::edge	talk-01	ARG0	language	0.0	0.0.0	
# ::edge	talk-01	ARG1	bother-02	0.1	0	
# ::edge	talk-01	direction	back	0.0	0.0.1	
# ::edge	talk-01	manner	much	0.1	0.1.1	
(b2 / bother-02 
      :ARG1 (t / talk-01 
            :ARG0 (l / language 
                  :name (n / name 
                        :op1 "English")) 
            :direction (b / back)) 
      :ARG1-of (t3 / talk-01 
            :ARG0 (h / he 
                  :domain-of (g / good 
                        :degree (s2 / so))) 
            :manner (m / much 
                  :degree (t2 / too))) 
      :degree (r / really) 
      :op-of (s / so))

# ::snt but the women who havent bothered with makeup dash
# ::tok but the women who havent bothered with makeup dash
# ::alignments 7-8|0.0.0.0 5-6|0.0.0 2-3|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:32.745
# ::node	0	contrast-01	0-1
# ::node	0.0	woman	2-3
# ::node	0.0.0	bother-01	5-6
# ::node	0.0.0.0	makeup	7-8
# ::root	0	contrast-01
# ::edge	bother-01	ARG1	makeup	0.0.0	0.0.0.0	
# ::edge	bother-01	mod	woman	0.0.0	0.0	
# ::edge	contrast-01	ARG1	woman	0	0.0	
(c / contrast-01 
      :ARG1 (w / woman 
            :mod-of (b / bother-01 
                  :ARG1 (m / makeup))))

# ::snt but only 31 vehicles finally made it to the marquee in the airfield and jackos was one of the last snaking accidentally through hedgerowed back roads the police hadnt bothered to seal off
# ::tok but only 31 vehicles finally made it to the marquee in the airfield and jackos was one of the last snaking accidentally through hedgerowed back roads the police hadnt bothered to seal off
# ::alignments 32-33|0.2.0.0.2 29-30|0.2.0.0 27-28|0.2.0.0.1 25-26|0.2.0 24-25|0.1 21-22|0.0 19-20|0.2.0.0.0 13-14|0.2 6-7|0.2.0.1 4-5|0.2.2 3-4|0.2.1 1-2|0.2.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.003
# ::node	0	contrast-01	0-1
# ::node	0.0	accidental	21-22
# ::node	0.1	back	24-25
# ::node	0.2	and	13-14
# ::node	0.2.0	road	25-26
# ::node	0.2.0.0	bother-01	29-30
# ::node	0.2.0.0.0	last	19-20
# ::node	0.2.0.0.1	police	27-28
# ::node	0.2.0.0.2	off	32-33
# ::node	0.2.0.1	it	6-7
# ::node	0.2.1	vehicle	3-4
# ::node	0.2.1.0	only	1-2
# ::node	0.2.2	final	4-5
# ::root	0	contrast-01
# ::edge	and	location	road	0.2	0.2.0	
# ::edge	and	op1	vehicle	0.2	0.2.1	
# ::edge	and	time	final	0.2	0.2.2	
# ::edge	bother-01	ARG0	last	0.2.0.0	0.2.0.0.0	
# ::edge	bother-01	ARG1	police	0.2.0.0	0.2.0.0.1	
# ::edge	bother-01	ARG2	off	0.2.0.0	0.2.0.0.2	
# ::edge	bother-01	time	road	0.2.0.0	0.2.0	
# ::edge	contrast-01	ARG0	accidental	0	0.0	
# ::edge	contrast-01	ARG1	back	0	0.1	
# ::edge	contrast-01	ARG2	and	0	0.2	
# ::edge	it	topic	road	0.2.0.1	0.2.0	
# ::edge	vehicle	mod	only	0.2.1	0.2.1.0	
(c / contrast-01 
      :ARG0 (a / accidental) 
      :ARG1 (b2 / back) 
      :ARG2 (a2 / and 
            :location (r / road 
                  :time-of (b / bother-01 
                        :ARG0 (l / last) 
                        :ARG1 (p / police) 
                        :ARG2 (o / off)) 
                  :topic-of (i / it)) 
            :op1 (v / vehicle 
                  :mod (o2 / only)) 
            :time (f / final)))

# ::snt do not bother to trade in the microwave for a rembrandt
# ::tok do not bother to trade in the microwave for a rembrandt
# ::alignments 4-5|0.0 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.013
# ::node	0	bother-02	2-3
# ::node	0.0	trade-01	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG1	trade-01	0	0.0	
(b / bother-02 
      :ARG1 (t / trade-01))

# ::snt   so why does he bother with the phenomenon
# ::tok so why does he bother with the phenomenon
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.014
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt nobody seemed to bother about that either
# ::tok nobody seemed to bother about that either
# ::alignments 6-7|0.0.1 3-4|0.0 1-2|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.028
# ::node	0	seem-01	1-2
# ::node	0.0	bother-02	3-4
# ::node	0.0.0	nobody	0-1
# ::node	0.0.1	either	6-7
# ::root	0	seem-01
# ::edge	bother-02	ARG0	nobody	0.0	0.0.0	
# ::edge	bother-02	mod	either	0.0	0.0.1	
# ::edge	seem-01	ARG1	bother-02	0	0.0	
(s / seem-01 
      :ARG1 (b / bother-02 
            :ARG0 (n / nobody) 
            :mod (e / either)))

# ::snt i say take my advice dont bother
# ::tok i say take my advice dont bother
# ::alignments 6-7|0.1 4-5|0.1.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.038
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	bother-02	6-7
# ::node	0.1.0	advise-01	4-5
# ::root	0	say-01
# ::edge	advise-01	ARG1	bother-02	0.1.0	0.1	
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	bother-02	0	0.1	
(s / say-01 
      :ARG0 (i / i) 
      :ARG1 (b / bother-02 
            :ARG1-of (a / advise-01)))

# ::snt i hope youve got a camera with you  im sorry to keep on bothering you said noel in the slow patient voice of a sober man talking to a drunk and i know you must be frightfully tired but do you mind if we go over it again
# ::tok i hope youve got a camera with you im sorry to keep on bothering you said noel in the slow patient voice of a sober man talking to a drunk and i know you must be frightfully tired but do you mind if we go over it again
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.039
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt his first step was to create a proper cabinet secretariat to produce agendas and take minutes amazingly nobody had bothered to do this before
# ::tok his first step was to create a proper cabinet secretariat to produce agendas and take minutes amazingly nobody had bothered to do this before
# ::alignments 23-24|0.1 22-23|0.0.1.2.1.0.0 19-20|0.0.0 17-18|0.0 16-17|0 15-16|0.0.1.2.0.0+0.0.1.2.0 13-14|0.0.1.2.1 11-12|0.0.1.2 9-10|0.0.1 8-9|0.0.1.1 7-8|0.0.1.0 5-6|0.0.1.2.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.200
# ::node	0	amaze-01	16-17
# ::node	0.0	nobody	17-18
# ::node	0.0.0	bother-01	19-20
# ::node	0.0.1	secretariat	9-10
# ::node	0.0.1.0	proper	7-8
# ::node	0.0.1.1	cabinet	8-9
# ::node	0.0.1.2	produce-01	11-12
# ::node	0.0.1.2.0	temporal-quantity	15-16
# ::node	0.0.1.2.0.0	minute	15-16
# ::node	0.0.1.2.1	and	13-14
# ::node	0.0.1.2.1.0	create-01	5-6
# ::node	0.0.1.2.1.0.0	this	22-23
# ::node	0.1	before	23-24
# ::root	0	amaze-01
# ::edge	amaze-01	ARG0	nobody	0	0.0	
# ::edge	amaze-01	ARG1	before	0	0.1	
# ::edge	and	op1	produce-01	0.0.1.2.1	0.0.1.2	
# ::edge	bother-01	ARG0	nobody	0.0.0	0.0	
# ::edge	create-01	ARG0	this	0.0.1.2.1.0	0.0.1.2.1.0.0	
# ::edge	create-01	ARG1	and	0.0.1.2.1.0	0.0.1.2.1	
# ::edge	nobody	mod	secretariat	0.0	0.0.1	
# ::edge	produce-01	ARG1	temporal-quantity	0.0.1.2	0.0.1.2.0	
# ::edge	secretariat	mod	cabinet	0.0.1	0.0.1.1	
# ::edge	secretariat	mod	proper	0.0.1	0.0.1.0	
# ::edge	secretariat	purpose	produce-01	0.0.1	0.0.1.2	
# ::edge	temporal-quantity	unit	minute	0.0.1.2.0	0.0.1.2.0.0	
(a / amaze-01 
      :ARG0 (n / nobody 
            :ARG0-of (b2 / bother-01) 
            :mod (s / secretariat 
                  :mod (p2 / proper) 
                  :mod (c / cabinet) 
                  :purpose (p / produce-01 
                        :ARG1 (t2 / temporal-quantity 
                              :unit (m / minute)) 
                        :op-of (a2 / and 
                              :ARG1-of (c2 / create-01 
                                    :ARG0 (t / this)))))) 
      :ARG1 (b / before))

# ::snt its not going to bother anybody
# ::tok its not going to bother anybody
# ::alignments 5-6|0.0 4-5|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.205
# ::node	0	bother-02	4-5
# ::node	0.0	anybody	5-6
# ::root	0	bother-02
# ::edge	bother-02	ARG1	anybody	0	0.0	
(b / bother-02 
      :ARG1 (a / anybody))

# ::snt when they shed leaves because of drought trees do not usually bother with all the razzmatazz of colouring them beforehand
# ::tok when they shed leaves because of drought trees do not usually bother with all the razzmatazz of colouring them beforehand
# ::alignments 19-20|0.1.1.0 17-18|0.1.1 13-14|0.1.0.1 11-12|0.1 10-11|0.1.2 7-8|0.0 4-5|0 3-4|0.1.0.0.0 2-3|0.1.0.0 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:33.365
# ::node	0	cause-01	4-5
# ::node	0.0	tree	7-8
# ::node	0.1	bother-02	11-12
# ::node	0.1.0	they	1-2
# ::node	0.1.0.0	shed-01	2-3
# ::node	0.1.0.0.0	leave-01	3-4
# ::node	0.1.0.1	all	13-14
# ::node	0.1.1	colouring	17-18
# ::node	0.1.1.0	beforehand	19-20
# ::node	0.1.2	usual	10-11
# ::root	0	cause-01
# ::edge	bother-02	ARG0	they	0.1	0.1.0	
# ::edge	bother-02	ARG1	colouring	0.1	0.1.1	
# ::edge	bother-02	mod	usual	0.1	0.1.2	
# ::edge	cause-01	ARG0	tree	0	0.0	
# ::edge	cause-01	ARG1	bother-02	0	0.1	
# ::edge	colouring	mod	beforehand	0.1.1	0.1.1.0	
# ::edge	shed-01	ARG0	they	0.1.0.0	0.1.0	
# ::edge	shed-01	ARG1	leave-01	0.1.0.0	0.1.0.0.0	
# ::edge	they	quant	all	0.1.0	0.1.0.1	
(c2 / cause-01 
      :ARG0 (t / tree) 
      :ARG1 (b2 / bother-02 
            :ARG0 (t2 / they 
                  :ARG0-of (s / shed-01 
                        :ARG1 (l / leave-01)) 
                  :quant (a / all)) 
            :ARG1 (c / colouring 
                  :mod (b / beforehand)) 
            :mod (u / usual)))

# ::snt i dont think ill bother to answer the remarks that others need to say of course tremendous resources have gone into the health service over the past few years but i think whatever government is in power it will never be enough for all the new developments in the health service and that is always the trouble whoever would be there would find it difficult
# ::tok i dont think ill bother to answer the remarks that others need to say of course tremendous resources have gone into the health service over the past few years but i think whatever government is in power it will never be enough for all the new developments in the health service and that is always the trouble whoever would be there would find it difficult
# ::alignments 64-65|0.0.1.0.0.2.2.0 63-64|0.0.1.0.0.2.2.0.0 57-58|0.0.1.0.0.2.2.1 56-57|0.0.1.0.0.2.2 54-55|0.0.1.0.0.2.2.2 51-52|0.0.1.0.0.2 49-50|0.0.1.0.0.2.0.1 46-47|0.0.1.0.0.2.1 45-46|0.0.1.0.0.2.1.2 43-44|0.0.1.0.0.2.1.3 41-42|0.0.1.0.0.2.1.0.0 37-38|0.0.1.0.0.2.1.0 36-37|0.0.1.0.0.2.1.1 32-33|0.0.1.0.0.2.0.3 31-32|0.0.1.0.0.2.0 30-31|0.0.1.0.0.2.0.0 29-30|0.0.1.0.0.2.0.2 28-29|0.0.1.0.0.2.0.2.1.0.0+0.0.1.0.0.2.0.2.1.0 27-28|0.0.1.0.0.2.0.2.1 26-27|0.0.1.0.0.2.0.2.1.0.0.0 22-23|0.0.1.0.0.0.0.0 17-18|0.0.1.1 16-17|0.0.1.0.0.2.0.2.0 13-14|0 11-12|0.0 10-11|0.0.0 8-9|0.0.1 6-7|0.0.1.0 4-5|0.0.1.0.0 3-4|0.0.1.0.0.1 2-3|0.0.1.0.0.0 0-1|0.0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:34.233
# ::node	0	say-01	13-14
# ::node	0.0	need-01	11-12
# ::node	0.0.0	other	10-11
# ::node	0.0.1	remark-01	8-9
# ::node	0.0.1.0	answer-01	6-7
# ::node	0.0.1.0.0	bother-02	4-5
# ::node	0.0.1.0.0.0	think-01	2-3
# ::node	0.0.1.0.0.0.0	i	0-1
# ::node	0.0.1.0.0.0.0.0	health	22-23
# ::node	0.0.1.0.0.1	ill-41	3-4
# ::node	0.0.1.0.0.2	and	51-52
# ::node	0.0.1.0.0.2.0	think-01	31-32
# ::node	0.0.1.0.0.2.0.0	i	30-31
# ::node	0.0.1.0.0.2.0.1	health	49-50
# ::node	0.0.1.0.0.2.0.2	contrast-01	29-30
# ::node	0.0.1.0.0.2.0.2.0	tremendous	16-17
# ::node	0.0.1.0.0.2.0.2.1	few	27-28
# ::node	0.0.1.0.0.2.0.2.1.0	temporal-quantity	28-29
# ::node	0.0.1.0.0.2.0.2.1.0.0	year	28-29
# ::node	0.0.1.0.0.2.0.2.1.0.0.0	past	26-27
# ::node	0.0.1.0.0.2.0.3	whatever	32-33
# ::node	0.0.1.0.0.2.1	develop-01	46-47
# ::node	0.0.1.0.0.2.1.0	it	37-38
# ::node	0.0.1.0.0.2.1.0.0	enough	41-42
# ::node	0.0.1.0.0.2.1.1	power	36-37
# ::node	0.0.1.0.0.2.1.2	new	45-46
# ::node	0.0.1.0.0.2.1.3	all	43-44
# ::node	0.0.1.0.0.2.2	trouble-01	56-57
# ::node	0.0.1.0.0.2.2.0	difficult	64-65
# ::node	0.0.1.0.0.2.2.0.0	it	63-64
# ::node	0.0.1.0.0.2.2.1	whoever	57-58
# ::node	0.0.1.0.0.2.2.2	always	54-55
# ::node	0.0.1.1	resource	17-18
# ::root	0	say-01
(s / say-01 
      :ARG1-of (n2 / need-01 
            :ARG0 (o / other) 
            :ARG1-of (r2 / remark-01 
                  :ARG1-of (a4 / answer-01 
                        :ARG1-of (b / bother-02 
                              :ARG1-of (t5 / think-01 
                                    :ARG0 (i5 / i 
                                          :poss-of (h2 / health))) 
                              :ARG1-of (i4 / ill-41) 
                              :op-of (a2 / and 
                                    :op1 (t2 / think-01 
                                          :ARG0 (i3 / i) 
                                          :ARG1 (h / health) 
                                          :ARG2-of (c / contrast-01 
                                                :ARG0 (t4 / tremendous) 
                                                :ARG1 (f / few 
                                                      :op1 (t3 / temporal-quantity 
                                                            :unit (y / year 
                                                                  :time (p2 / past))))) 
                                          :op-of (w2 / whatever)) 
                                    :op2 (d2 / develop-01 
                                          :ARG0 (i2 / it 
                                                :domain-of (e / enough)) 
                                          :ARG1 (p / power) 
                                          :mod (n / new) 
                                          :quant (a3 / all)) 
                                    :op3 (t / trouble-01 
                                          :ARG0 (d / difficult 
                                                :domain (i / it)) 
                                          :ARG1 (w / whoever) 
                                          :time (a / always))))) 
                  :op-of (r / resource))))

# ::snt james callaghan when prime minister would have the subjects he planned to raise on a piece of card but often didnt bother to raise them as they gossiped about politics or took a stroll around the gardens on summer evenings
# ::tok james callaghan when prime minister would have the subjects he planned to raise on a piece of card but often didnt bother to raise them as they gossiped about politics or took a stroll around the gardens on summer evenings
# ::alignments 38-39|0.0.0.0.0 36-37|0.0.0.0 34-35|0.0.0.0.1 30-31|0.0.0.2 29-30|0.0.0.2.0 26-27|0.0.0.1 23-24|0.0.0 21-22|0.0 19-20|0.1 18-19|0 17-18|0.2.0.0 15-16|0.2.0 12-13|0.2 10-11|0.2.2 9-10|0.2.2.0 8-9|0.2.1 4-5|0.2.2.1.0+0.2.2.1 3-4|0.2.2.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:35.205
# ::node	0	contrast-01	18-19
# ::node	0.0	bother-02	21-22
# ::node	0.0.0	raise-01	23-24
# ::node	0.0.0.0	garden	36-37
# ::node	0.0.0.0.0	summer	38-39
# ::node	0.0.0.0.1	around	34-35
# ::node	0.0.0.1	they	26-27
# ::node	0.0.0.2	or	30-31
# ::node	0.0.0.2.0	politics	29-30
# ::node	0.1	often	19-20
# ::node	0.2	raise-01	12-13
# ::node	0.2.0	piece	15-16
# ::node	0.2.0.0	card	17-18
# ::node	0.2.1	subject	8-9
# ::node	0.2.2	plan-01	10-11
# ::node	0.2.2.0	he	9-10
# ::node	0.2.2.1	have-org-role-91	4-5
# ::node	0.2.2.1.0	minister	4-5
# ::node	0.2.2.1.0.0	prime	3-4
# ::root	0	contrast-01
# ::edge	around	op1	garden	0.0.0.0.1	0.0.0.0	
# ::edge	bother-02	ARG1	raise-01	0.0	0.0.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.0	
# ::edge	contrast-01	ARG2	often	0	0.1	
# ::edge	garden	location	summer	0.0.0.0	0.0.0.0.0	
# ::edge	have-org-role-91	ARG2	minister	0.2.2.1	0.2.2.1.0	
# ::edge	minister	mod	prime	0.2.2.1.0	0.2.2.1.0.0	
# ::edge	or	op1	politics	0.0.0.2	0.0.0.2.0	
# ::edge	piece	mod	card	0.2.0	0.2.0.0	
# ::edge	plan-01	ARG0	he	0.2.2	0.2.2.0	
# ::edge	plan-01	ARG1	raise-01	0.2.2	0.2	
# ::edge	plan-01	manner	have-org-role-91	0.2.2	0.2.2.1	
# ::edge	raise-01	ARG0	garden	0.0.0	0.0.0.0	
# ::edge	raise-01	ARG0	piece	0.2	0.2.0	
# ::edge	raise-01	ARG1	subject	0.2	0.2.1	
# ::edge	raise-01	ARG1	they	0.0.0	0.0.0.1	
# ::edge	raise-01	condition	or	0.0.0	0.0.0.2	
# ::edge	raise-01	manner	contrast-01	0.2	0	
(c / contrast-01 
      :ARG1 (b / bother-02 
            :ARG1 (r / raise-01 
                  :ARG0 (g / garden 
                        :location (s / summer) 
                        :op-of (a / around)) 
                  :ARG1 (t / they) 
                  :condition (o / or 
                        :op1 (p / politics)))) 
      :ARG2 (o2 / often) 
      :manner-of (r2 / raise-01 
            :ARG0 (p2 / piece 
                  :mod (c2 / card)) 
            :ARG1 (s2 / subject) 
            :ARG1-of (p3 / plan-01 
                  :ARG0 (h / he) 
                  :manner (h2 / have-org-role-91 
                        :ARG2 (m / minister 
                              :mod (p4 / prime))))))

# ::snt nor is she too bothered any more about letting go of the occasional secret
# ::tok nor is she too bothered any more about letting go of the occasional secret
# ::alignments 13-14|0.1.0 12-13|0.1.0.0 8-9|0.1 5-6|0.3 4-5|0 3-4|0.2 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:35.307
# ::node	0	bother-01	4-5
# ::node	0.0	she	2-3
# ::node	0.1	let-01	8-9
# ::node	0.1.0	secret	13-14
# ::node	0.1.0.0	occasional	12-13
# ::node	0.2	too	3-4
# ::node	0.3	any	5-6
# ::root	0	bother-01
# ::edge	bother-01	ARG1	she	0	0.0	
# ::edge	bother-01	ARG2	let-01	0	0.1	
# ::edge	bother-01	degree	too	0	0.2	
# ::edge	bother-01	instrument	any	0	0.3	
# ::edge	let-01	ARG1	secret	0.1	0.1.0	
# ::edge	secret	frequency	occasional	0.1.0	0.1.0.0	
(b / bother-01 
      :ARG1 (s2 / she) 
      :ARG2 (l / let-01 
            :ARG1 (s / secret 
                  :frequency (o / occasional))) 
      :degree (t / too) 
      :instrument (a / any))

# ::snt she never looked flushed even after a punishing routine never bothered to look at other performers or waited to see her own score up on the scoreboard
# ::tok she never looked flushed even after a punishing routine never bothered to look at other performers or waited to see her own score up on the scoreboard
# ::alignments 26-27|0 22-23|0.0.0 19-20|0.0 17-18|0.0.1 16-17|0.0.1.1 15-16|0.0.1.1.0.1 14-15|0.0.1.1.0.1.0 10-11|0.0.1.1.0 8-9|0.0.1.0 7-8|0.0.1.0.0 5-6|0.0.1.1.0.0.0.0 2-3|0.0.1.1.0.0.0 0-1|0.0.1.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:35.445
# ::node	0	scoreboard	26-27
# ::node	0.0	see-01	19-20
# ::node	0.0.0	score-01	22-23
# ::node	0.0.1	wait-01	17-18
# ::node	0.0.1.0	routine	8-9
# ::node	0.0.1.0.0	punish-01	7-8
# ::node	0.0.1.1	or	16-17
# ::node	0.0.1.1.0	bother-01	10-11
# ::node	0.0.1.1.0.0	she	0-1
# ::node	0.0.1.1.0.0.0	look-01	2-3
# ::node	0.0.1.1.0.0.0.0	after	5-6
# ::node	0.0.1.1.0.1	perform-01	15-16
# ::node	0.0.1.1.0.1.0	other	14-15
# ::root	0	scoreboard
(s / scoreboard 
      :medium-of (s3 / see-01 
            :ARG1 (s2 / score-01) 
            :ARG2-of (w / wait-01 
                  :ARG1 (r / routine 
                        :ARG1-of (p2 / punish-01)) 
                  :op-of (o / or 
                        :op1 (b / bother-01 
                              :ARG0 (s4 / she 
                                    :ARG0-of (l / look-01 
                                          :time (a / after))) 
                              :ARG1 (p / perform-01 
                                    :mod (o2 / other)))))))

# ::snt if more people bothered to bring decently designed office furniture to the attention of their office manager fewer people would be taking days off with bad backs
# ::tok if more people bothered to bring decently designed office furniture to the attention of their office manager fewer people would be taking days off with bad backs
# ::alignments 26-27|0.1 25-26|0.1.1 23-24|0 22-23|0.0.0+0.0 17-18|0.1.0.1.0 16-17|0.1.0.2.0 15-16|0.1.0.2.0.0 12-13|0.1.0.2 9-10|0.1.0.0 8-9|0.1.0.0.1 7-8|0.1.0.0.0 6-7|0.1.0.0.0.0 5-6|0.1.0 3-4|0.1.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:35.838
# ::node	0	off	23-24
# ::node	0.0	temporal-quantity	22-23
# ::node	0.0.0	day	22-23
# ::node	0.1	back-04	26-27
# ::node	0.1.0	bring-01	5-6
# ::node	0.1.0.0	furniture	9-10
# ::node	0.1.0.0.0	design-01	7-8
# ::node	0.1.0.0.0.0	decent	6-7
# ::node	0.1.0.0.1	office	8-9
# ::node	0.1.0.1	bother-01	3-4
# ::node	0.1.0.1.0	few	17-18
# ::node	0.1.0.2	attention	12-13
# ::node	0.1.0.2.0	manage-01	16-17
# ::node	0.1.0.2.0.0	office	15-16
# ::node	0.1.1	bad	25-26
# ::root	0	off
# ::edge	back-04	ARG1	bring-01	0.1	0.1.0	
# ::edge	back-04	mod	bad	0.1	0.1.1	
# ::edge	bother-01	ARG0	few	0.1.0.1	0.1.0.1.0	
# ::edge	bother-01	ARG1	bring-01	0.1.0.1	0.1.0	
# ::edge	bring-01	ARG1	furniture	0.1.0	0.1.0.0	
# ::edge	bring-01	ARG2	attention	0.1.0	0.1.0.2	
# ::edge	design-01	ARG1	furniture	0.1.0.0.0	0.1.0.0	
# ::edge	design-01	mod	decent	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	furniture	mod	office	0.1.0.0	0.1.0.0.1	
# ::edge	manage-01	ARG0	attention	0.1.0.2.0	0.1.0.2	
# ::edge	manage-01	ARG1	office	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	off	op1	back-04	0	0.1	
# ::edge	temporal-quantity	mod	off	0.0	0	
# ::edge	temporal-quantity	unit	day	0.0	0.0.0	
(o / off 
      :mod-of (t / temporal-quantity 
            :unit (d / day)) 
      :op1 (b / back-04 
            :ARG1 (b3 / bring-01 
                  :ARG1 (f2 / furniture 
                        :ARG1-of (d2 / design-01 
                              :mod (d3 / decent)) 
                        :mod (o3 / office)) 
                  :ARG1-of (b4 / bother-01 
                        :ARG0 (f / few)) 
                  :ARG2 (a / attention 
                        :ARG0-of (m / manage-01 
                              :ARG1 (o2 / office)))) 
            :mod (b2 / bad)))

# ::snt those who bothered to turn up were treated to a fine spectacle
# ::tok those who bothered to turn up were treated to a fine spectacle
# ::alignments 11-12|0.1 10-11|0.1.0 7-8|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:35.850
# ::node	0	treat-01	7-8
# ::node	0.0	bother-01	2-3
# ::node	0.1	spectacle	11-12
# ::node	0.1.0	fine	10-11
# ::root	0	treat-01
# ::edge	spectacle	mod	fine	0.1	0.1.0	
# ::edge	treat-01	ARG0	bother-01	0	0.0	
# ::edge	treat-01	ARG2	spectacle	0	0.1	
(t / treat-01 
      :ARG0 (b / bother-01) 
      :ARG2 (s / spectacle 
            :mod (f / fine)))

# ::snt i look out on to the line and see guys with their kids and it bothers me
# ::tok i look out on to the line and see guys with their kids and it bothers me
# ::alignments 15-16|0.0 14-15|0.0.0 13-14|0 12-13|0.0.1.1.2 9-10|0.0.1.1.1 8-9|0.0.1.1 7-8|0.0.1 6-7|0.0.1.0 0-1|0.0.1.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.022
# ::node	0	and	13-14
# ::node	0.0	bother-01	15-16
# ::node	0.0.0	it	14-15
# ::node	0.0.1	and	7-8
# ::node	0.0.1.0	line	6-7
# ::node	0.0.1.1	see-01	8-9
# ::node	0.0.1.1.0	i	0-1
# ::node	0.0.1.1.1	guy	9-10
# ::node	0.0.1.1.2	kid	12-13
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.0	
# ::edge	and	op1	line	0.0.1	0.0.1.0	
# ::edge	and	op2	see-01	0.0.1	0.0.1.1	
# ::edge	and	op3	bother-01	0.0.1	0.0	
# ::edge	bother-01	ARG0	it	0.0	0.0.0	
# ::edge	see-01	ARG0	i	0.0.1.1	0.0.1.1.0	
# ::edge	see-01	ARG1	guy	0.0.1.1	0.0.1.1.1	
# ::edge	see-01	ARG2	kid	0.0.1.1	0.0.1.1.2	
(a / and 
      :op1 (b / bother-01 
            :ARG0 (i / it) 
            :op-of (a2 / and 
                  :op1 (l / line) 
                  :op2 (s / see-01 
                        :ARG0 (i2 / i) 
                        :ARG1 (g / guy) 
                        :ARG2 (k / kid)))))

# ::snt those who do not pass or who are not worth bothering about in terms of academic success get very little reward out of the school system
# ::tok those who do not pass or who are not worth bothering about in terms of academic success get very little reward out of the school system
# ::alignments 25-26|0.1.0.0.0 24-25|0.1.0.0.0.0 20-21|0.1.0.0 19-20|0.1.0.0.1 18-19|0.1.0.0.1.0 16-17|0.1.0 15-16|0.1.0.1 13-14|0.1 10-11|0 9-10|0.0 5-6|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.078
# ::node	0	bother-01	10-11
# ::node	0.0	worth	9-10
# ::node	0.0.0	or	5-6
# ::node	0.1	term	13-14
# ::node	0.1.0	succeed-01	16-17
# ::node	0.1.0.0	reward-01	20-21
# ::node	0.1.0.0.0	system	25-26
# ::node	0.1.0.0.0.0	school	24-25
# ::node	0.1.0.0.1	little	19-20
# ::node	0.1.0.0.1.0	very	18-19
# ::node	0.1.0.1	academia	15-16
# ::root	0	bother-01
# ::edge	bother-01	ARG1	worth	0	0.0	
# ::edge	bother-01	manner	term	0	0.1	
# ::edge	little	degree	very	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	or	op1	worth	0.0.0	0.0	
# ::edge	reward-01	ARG1	system	0.1.0.0	0.1.0.0.0	
# ::edge	reward-01	mod	little	0.1.0.0	0.1.0.0.1	
# ::edge	succeed-01	ARG2	reward-01	0.1.0	0.1.0.0	
# ::edge	succeed-01	mod	academia	0.1.0	0.1.0.1	
# ::edge	system	mod	school	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	term	mod	succeed-01	0.1	0.1.0	
(b / bother-01 
      :ARG1 (w / worth 
            :op-of (o / or)) 
      :manner (t / term 
            :mod (s3 / succeed-01 
                  :ARG2 (r / reward-01 
                        :ARG1 (s / system 
                              :mod (s2 / school)) 
                        :mod (l / little 
                              :degree (v / very))) 
                  :mod (a / academia))))

# ::snt   as for the design and commission of the first american flag mr quaife says that no one bothered at the time to record the name of its creator or to claim the honour for himself
# ::tok as for the design and commission of the first american flag mr quaife says that no one bothered at the time to record the name of its creator or to claim the honour for himself
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.079
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt thats why french people are disaffected why they dont bother to vote in large numbers
# ::tok thats why french people are disaffected why they dont bother to vote in large numbers
# ::alignments 14-15|0.1.1 13-14|0.1.1.0 11-12|0.1 9-10|0 7-8|0.1.0 2-3|0.1.2.0.0+0.1.2.0+0.1.2 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.189
# ::node	0	bother-02	9-10
# ::node	0.0	that	0-1
# ::node	0.1	vote-01	11-12
# ::node	0.1.0	they	7-8
# ::node	0.1.1	number	14-15
# ::node	0.1.1.0	large	13-14
# ::node	0.1.2	country	2-3
# ::node	0.1.2.0	name	2-3
# ::node	0.1.2.0.0	"France"	2-3
# ::root	0	bother-02
# ::edge	bother-02	ARG0	that	0	0.0	
# ::edge	bother-02	ARG1	vote-01	0	0.1	
# ::edge	country	name	name	0.1.2	0.1.2.0	
# ::edge	country	op1	vote-01	0.1.2	0.1	
# ::edge	name	op1	"France"	0.1.2.0	0.1.2.0.0	
# ::edge	number	mod	large	0.1.1	0.1.1.0	
# ::edge	vote-01	ARG0	they	0.1	0.1.0	
# ::edge	vote-01	ARG1	number	0.1	0.1.1	
(b / bother-02 
      :ARG0 (t2 / that) 
      :ARG1 (v / vote-01 
            :ARG0 (t / they) 
            :ARG1 (n / number 
                  :mod (l / large)) 
            :op-of (c / country 
                  :name (n2 / name 
                        :op1 "France"))))

# ::snt at the 15th grady lit his customary filtertip then marched up the fairway without bothering to smoke it
# ::tok at the 15th grady lit his customary filtertip then marched up the fairway without bothering to smoke it
# ::alignments 17-18|0.0 14-15|0.1 9-10|0 8-9|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.207
# ::node	0	march-01	9-10
# ::node	0.0	it	17-18
# ::node	0.1	bother-01	14-15
# ::node	0.2	then	8-9
# ::root	0	march-01
# ::edge	march-01	ARG1	it	0	0.0	
# ::edge	march-01	manner	bother-01	0	0.1	
# ::edge	march-01	time	then	0	0.2	
(m / march-01 
      :ARG1 (i / it) 
      :manner (b / bother-01) 
      :time (t / then))

# ::snt its about the only thing i bothered to take away from his flat
# ::tok its about the only thing i bothered to take away from his flat
# ::alignments 12-13|0 9-10|0.0.1 6-7|0.0 5-6|0.0.0 4-5|0.0.0.0 3-4|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.256
# ::node	0	flat	12-13
# ::node	0.0	bother-01	6-7
# ::node	0.0.0	i	5-6
# ::node	0.0.0.0	thing	4-5
# ::node	0.0.0.0.0	only	3-4
# ::node	0.0.1	away	9-10
# ::root	0	flat
(f / flat 
      :ARG0-of (b / bother-01 
            :ARG1 (i / i 
                  :location-of (t / thing 
                        :mod (o / only))) 
            :ARG2 (a / away)))

# ::snt its 1000 members most of whom he knew personally had just not bothered to turn out for the meeting that elected the delegation
# ::tok its 1000 members most of whom he knew personally had just not bothered to turn out for the meeting that elected the delegation
# ::alignments 22-23|0.1.0.0 20-21|0.1.0 18-19|0.1 12-13|0.0.0 10-11|0.0.0.0 8-9|0.2 7-8|0 6-7|0.0 3-4|0.0.1.0 2-3|0.0.1.1+0.0.1 1-2|0.1.1.0+0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.429
# ::node	0	know-01	7-8
# ::node	0.0	he	6-7
# ::node	0.0.0	bother-01	12-13
# ::node	0.0.0.0	just	10-11
# ::node	0.0.1	have-org-role-91	2-3
# ::node	0.0.1.0	most	3-4
# ::node	0.0.1.1	member	2-3
# ::node	0.1	meet-03	18-19
# ::node	0.1.0	elect-01	20-21
# ::node	0.1.0.0	delegation	22-23
# ::node	0.1.1	date-entity	1-2
# ::node	0.1.1.0	1000	1-2
# ::node	0.2	personal	8-9
# ::root	0	know-01
# ::edge	bother-01	ARG0	he	0.0.0	0.0	
# ::edge	bother-01	manner	just	0.0.0	0.0.0.0	
# ::edge	date-entity	year	1000	0.1.1	0.1.1.0	
# ::edge	elect-01	ARG0	meet-03	0.1.0	0.1	
# ::edge	elect-01	ARG1	delegation	0.1.0	0.1.0.0	
# ::edge	have-org-role-91	ARG0	he	0.0.1	0.0	
# ::edge	have-org-role-91	ARG1	most	0.0.1	0.0.1.0	
# ::edge	have-org-role-91	ARG2	member	0.0.1	0.0.1.1	
# ::edge	know-01	ARG0	he	0	0.0	
# ::edge	know-01	manner	personal	0	0.2	
# ::edge	meet-03	ARG1	know-01	0.1	0	
# ::edge	meet-03	time	date-entity	0.1	0.1.1	
(k / know-01 
      :ARG0 (h / he 
            :ARG0-of (b / bother-01 
                  :manner (j / just)) 
            :ARG0-of (h2 / have-org-role-91 
                  :ARG1 (m2 / most) 
                  :ARG2 (m3 / member))) 
      :ARG1-of (m / meet-03 
            :ARG0-of (e / elect-01 
                  :ARG1 (d / delegation)) 
            :time (d2 / date-entity 
                  :year 1000)) 
      :manner (p / personal))

# ::snt shes been a bit funny these last couple of days like summats bothering her or summat
# ::tok shes been a bit funny these last couple of days like summats bothering her or summat
# ::alignments 14-15|0.2.0.0.0 12-13|0.2.0.0 9-10|0.2.0.1+0.2.0 7-8|0.2 6-7|0.2.0.1.0 4-5|0 3-4|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.479
# ::node	0	funny	4-5
# ::node	0.0	she	0-1
# ::node	0.1	bit	3-4
# ::node	0.2	couple	7-8
# ::node	0.2.0	temporal-quantity	9-10
# ::node	0.2.0.0	bother-01	12-13
# ::node	0.2.0.0.0	or	14-15
# ::node	0.2.0.1	day	9-10
# ::node	0.2.0.1.0	last	6-7
# ::root	0	funny
# ::edge	bother-01	ARG0	temporal-quantity	0.2.0.0	0.2.0	
# ::edge	bother-01	ARG1	or	0.2.0.0	0.2.0.0.0	
# ::edge	couple	op1	temporal-quantity	0.2	0.2.0	
# ::edge	day	mod	last	0.2.0.1	0.2.0.1.0	
# ::edge	funny	degree	bit	0	0.1	
# ::edge	funny	domain	couple	0	0.2	
# ::edge	she	condition	funny	0.0	0	
# ::edge	temporal-quantity	unit	day	0.2.0	0.2.0.1	
(f / funny 
      :condition-of (s / she) 
      :degree (b2 / bit) 
      :domain (c / couple 
            :op1 (t / temporal-quantity 
                  :ARG0-of (b / bother-01 
                        :ARG1 (o / or)) 
                  :unit (d / day 
                        :mod (l / last)))))

# ::snt  he stuck a cigarette in the corner of his mouth but didnt bother lighting it
# ::tok he stuck a cigarette in the corner of his mouth but didnt bother lighting it
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:36.480
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt she put time and work into it did more than wage a purely defensive battle with it but thought and bought and acted ahead so that it was one of the two or three best kept in the little row and he quite liked sitting in it and yet the other evening he had seen from the way she paused on her fork over some dead leaves and looked round that if they should ever pack up and go and live somewhere else she would not even bother to take a farewell look at it
# ::tok she put time and work into it did more than wage a purely defensive battle with it but thought and bought and acted ahead so that it was one of the two or three best kept in the little row and he quite liked sitting in it and yet the other evening he had seen from the way she paused on her fork over some dead leaves and looked round that if they should ever pack up and go and live somewhere else she would not even bother to take a farewell look at it
# ::alignments 94-95|0.0.1.0.1.0.3.2.0.0.0.0.1.0.0 91-92|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0.0 87-88|0.0.1.0.1.0.3.2.0.0.0.0.1.0 83-84|0.0.1.0.1.0.3.2.0.0.0.0.1 82-83|0.0.1.0.1.0.3.2.0.0.0.1.0.0 81-82|0.0.1.0.1.0.3.2.0.0.0.1.0.0.0 80-81|0.0.1.0.1.0.3.2.0.0.0.1.0 79-80|0.0.1.0.1.0.3.2.0.0.0.1 77-78|0.0.1.0.1.0.3.2.0.0.0 75-76|0.0.1.0.1.0.3.2.0.0.0.0 74-75|0.0.1.0.1.0.3.2.0.0.0.0.2 73-74|0.0.1.0.1.0.3.2.0.0 72-73|0.0.1.0.1.0.3.2.0.0.0.0.0 69-70|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.1 68-69|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1 67-68|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1 66-67|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0 64-65|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0.1 62-63|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.0.0 58-59|0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.0 57-58|0.0.1.0.1.0.3.2.1 54-55|0.0.1.0.1.0.3.2 52-53|0.0.1.0.1.0.3.2.0 51-52|0.0.1.0.1.0.3.2.2 50-51|0.0.1.0.1.0.3.2.2.0 48-49|0.0.1.0.1.0.3.1.1.0 47-48|0.0.1.0.1.0.3.1.3 46-47|0.0.1.0.1.0.3.1.1.1 44-45|0.0.1.0.1.0.3.1.1 43-44|0.0.1.0.1.0.3.1 42-43|0.0.1.0.1.0.3.1.2 41-42|0.0.1.0.1.0.3.1.0 40-41|0.0.1.0.1.0.3 39-40|0.0.1.0.1.0.3.0.0 38-39|0.0.1.0.1.0.3.0.0.0 35-36|0.0.1.0.1.0.3.0 33-34|0.0.1.0.1.0.3.0.1 32-33|0.0.1.0.1.0.3.2.3 31-32|0.0.0.0.1.0.0 26-27|0.0.1.0.1.0.0 24-25|0.0.1.0.1.0.2 23-24|0.0.1.0.1.0.1 22-23|0.0.1.0.1.0 21-22|0.0.1.0.1 20-21|0.0 19-20|0.0.1 18-19|0.0.1.0 17-18|0 16-17|0.0.0 14-15|0.0.0.0 13-14|0.0.0.0.1 12-13|0.0.0.0.1.1 10-11|0.0.0.0.1.0 6-7|0.0.0.0.0 3-4|0.0.1.0.1.1.0 2-3|0.0.1.0.1.1 0-1|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.646
# ::node	0	contrast-01	17-18
# ::node	0.0	buy-01	20-21
# ::node	0.0.0	it	16-17
# ::node	0.0.0.0	battle-01	14-15
# ::node	0.0.0.0.0	it	6-7
# ::node	0.0.0.0.1	defensive	13-14
# ::node	0.0.0.0.1.0	wage-01	10-11
# ::node	0.0.0.0.1.0.0	2	31-32
# ::node	0.0.0.0.1.1	pure	12-13
# ::node	0.0.1	and	19-20
# ::node	0.0.1.0	think-01	18-19
# ::node	0.0.1.0.0	she	0-1
# ::node	0.0.1.0.1	and	21-22
# ::node	0.0.1.0.1.0	act-02	22-23
# ::node	0.0.1.0.1.0.0	it	26-27
# ::node	0.0.1.0.1.0.1	ahead	23-24
# ::node	0.0.1.0.1.0.2	so	24-25
# ::node	0.0.1.0.1.0.3	and	40-41
# ::node	0.0.1.0.1.0.3.0	keep-01	35-36
# ::node	0.0.1.0.1.0.3.0.0	row	39-40
# ::node	0.0.1.0.1.0.3.0.0.0	little	38-39
# ::node	0.0.1.0.1.0.3.0.1	3	33-34
# ::node	0.0.1.0.1.0.3.1	like-01	43-44
# ::node	0.0.1.0.1.0.3.1.0	he	41-42
# ::node	0.0.1.0.1.0.3.1.1	sit-01	44-45
# ::node	0.0.1.0.1.0.3.1.1.0	yet	48-49
# ::node	0.0.1.0.1.0.3.1.1.1	it	46-47
# ::node	0.0.1.0.1.0.3.1.2	quite	42-43
# ::node	0.0.1.0.1.0.3.1.3	and	47-48
# ::node	0.0.1.0.1.0.3.2	see-01	54-55
# ::node	0.0.1.0.1.0.3.2.0	he	52-53
# ::node	0.0.1.0.1.0.3.2.0.0	recommend-01	73-74
# ::node	0.0.1.0.1.0.3.2.0.0.0	and	77-78
# ::node	0.0.1.0.1.0.3.2.0.0.0.0	pack-01	75-76
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.0	they	72-73
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1	she	83-84
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0	bother-02	87-88
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.0	it	94-95
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1	and	67-68
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0	leave-01	66-67
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0.0	farewell	91-92
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0.1	some	64-65
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1	look-01	68-69
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.0	she	58-59
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.0.0	fork	62-63
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.1	round	69-70
# ::node	0.0.1.0.1.0.3.2.0.0.0.0.2	ever	74-75
# ::node	0.0.1.0.1.0.3.2.0.0.0.1	and	79-80
# ::node	0.0.1.0.1.0.3.2.0.0.0.1.0	live-01	80-81
# ::node	0.0.1.0.1.0.3.2.0.0.0.1.0.0	else	82-83
# ::node	0.0.1.0.1.0.3.2.0.0.0.1.0.0.0	somewhere	81-82
# ::node	0.0.1.0.1.0.3.2.1	way	57-58
# ::node	0.0.1.0.1.0.3.2.2	evening	51-52
# ::node	0.0.1.0.1.0.3.2.2.0	other	50-51
# ::node	0.0.1.0.1.0.3.2.3	or	32-33
# ::node	0.0.1.0.1.1	time	2-3
# ::node	0.0.1.0.1.1.0	and	3-4
# ::root	0	contrast-01
# ::edge	act-02	ARG0	it	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	act-02	ARG1	ahead	0.0.1.0.1.0	0.0.1.0.1.0.1	
# ::edge	act-02	ARG2	so	0.0.1.0.1.0	0.0.1.0.1.0.2	
# ::edge	and	op1	act-02	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	and	op1	act-02	0.0.1.0.1.0.3	0.0.1.0.1.0	
# ::edge	and	op1	leave-01	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0	
# ::edge	and	op1	like-01	0.0.1.0.1.0.3.1.3	0.0.1.0.1.0.3.1	
# ::edge	and	op1	live-01	0.0.1.0.1.0.3.2.0.0.0.1	0.0.1.0.1.0.3.2.0.0.0.1.0	
# ::edge	and	op1	pack-01	0.0.1.0.1.0.3.2.0.0.0	0.0.1.0.1.0.3.2.0.0.0.0	
# ::edge	and	op1	think-01	0.0.1	0.0.1.0	
# ::edge	and	op1	time	0.0.1.0.1.1.0	0.0.1.0.1.1	
# ::edge	and	op2	and	0.0.1.0.1.0.3.2.0.0.0	0.0.1.0.1.0.3.2.0.0.0.1	
# ::edge	and	op2	buy-01	0.0.1	0.0	
# ::edge	and	op2	keep-01	0.0.1.0.1.0.3	0.0.1.0.1.0.3.0	
# ::edge	and	op2	look-01	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1	
# ::edge	and	op3	bother-02	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1	0.0.1.0.1.0.3.2.0.0.0.0.1.0	
# ::edge	and	op3	like-01	0.0.1.0.1.0.3	0.0.1.0.1.0.3.1	
# ::edge	and	op4	see-01	0.0.1.0.1.0.3	0.0.1.0.1.0.3.2	
# ::edge	battle-01	ARG0	it	0.0.0.0	0.0.0.0.0	
# ::edge	battle-01	ARG1	it	0.0.0.0	0.0.0	
# ::edge	battle-01	mod	defensive	0.0.0.0	0.0.0.0.1	
# ::edge	bother-02	ARG0	she	0.0.1.0.1.0.3.2.0.0.0.0.1.0	0.0.1.0.1.0.3.2.0.0.0.0.1	
# ::edge	bother-02	ARG1	it	0.0.1.0.1.0.3.2.0.0.0.0.1.0	0.0.1.0.1.0.3.2.0.0.0.0.1.0.0	
# ::edge	buy-01	ARG0	it	0.0	0.0.0	
# ::edge	contrast-01	ARG2	buy-01	0	0.0	
# ::edge	defensive	mod	pure	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	evening	mod	other	0.0.1.0.1.0.3.2.2	0.0.1.0.1.0.3.2.2.0	
# ::edge	fork	poss	she	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.0.0	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.0	
# ::edge	keep-01	ARG0	row	0.0.1.0.1.0.3.0	0.0.1.0.1.0.3.0.0	
# ::edge	keep-01	ARG1	3	0.0.1.0.1.0.3.0	0.0.1.0.1.0.3.0.1	
# ::edge	leave-01	ARG1	farewell	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0.0	
# ::edge	leave-01	mod	some	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.0.1	
# ::edge	like-01	ARG0	he	0.0.1.0.1.0.3.1	0.0.1.0.1.0.3.1.0	
# ::edge	like-01	ARG1	sit-01	0.0.1.0.1.0.3.1	0.0.1.0.1.0.3.1.1	
# ::edge	like-01	degree	quite	0.0.1.0.1.0.3.1	0.0.1.0.1.0.3.1.2	
# ::edge	live-01	ARG1	else	0.0.1.0.1.0.3.2.0.0.0.1.0	0.0.1.0.1.0.3.2.0.0.0.1.0.0	
# ::edge	look-01	ARG0	she	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.0	
# ::edge	look-01	ARG1	round	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1	0.0.1.0.1.0.3.2.0.0.0.0.1.0.1.1.1	
# ::edge	or	op1	see-01	0.0.1.0.1.0.3.2.3	0.0.1.0.1.0.3.2	
# ::edge	pack-01	ARG0	they	0.0.1.0.1.0.3.2.0.0.0.0	0.0.1.0.1.0.3.2.0.0.0.0.0	
# ::edge	pack-01	ARG1	she	0.0.1.0.1.0.3.2.0.0.0.0	0.0.1.0.1.0.3.2.0.0.0.0.1	
# ::edge	pack-01	time	ever	0.0.1.0.1.0.3.2.0.0.0.0	0.0.1.0.1.0.3.2.0.0.0.0.2	
# ::edge	recommend-01	ARG0	he	0.0.1.0.1.0.3.2.0.0	0.0.1.0.1.0.3.2.0	
# ::edge	recommend-01	ARG1	and	0.0.1.0.1.0.3.2.0.0	0.0.1.0.1.0.3.2.0.0.0	
# ::edge	row	mod	little	0.0.1.0.1.0.3.0.0	0.0.1.0.1.0.3.0.0.0	
# ::edge	see-01	ARG0	he	0.0.1.0.1.0.3.2	0.0.1.0.1.0.3.2.0	
# ::edge	see-01	ARG1	way	0.0.1.0.1.0.3.2	0.0.1.0.1.0.3.2.1	
# ::edge	see-01	frequency	evening	0.0.1.0.1.0.3.2	0.0.1.0.1.0.3.2.2	
# ::edge	sit-01	ARG0	yet	0.0.1.0.1.0.3.1.1	0.0.1.0.1.0.3.1.1.0	
# ::edge	sit-01	ARG1	it	0.0.1.0.1.0.3.1.1	0.0.1.0.1.0.3.1.1.1	
# ::edge	somewhere	mod	else	0.0.1.0.1.0.3.2.0.0.0.1.0.0.0	0.0.1.0.1.0.3.2.0.0.0.1.0.0	
# ::edge	think-01	ARG0	she	0.0.1.0	0.0.1.0.0	
# ::edge	think-01	ARG1	and	0.0.1.0	0.0.1.0.1	
# ::edge	time	topic	and	0.0.1.0.1.1	0.0.1.0.1	
# ::edge	wage-01	ARG0	2	0.0.0.0.1.0	0.0.0.0.1.0.0	
# ::edge	wage-01	ARG1	defensive	0.0.0.0.1.0	0.0.0.0.1	
(c / contrast-01 
      :ARG2 (b2 / buy-01 
            :ARG0 (i4 / it 
                  :ARG1-of (b3 / battle-01 
                        :ARG0 (i5 / it) 
                        :mod (d / defensive 
                              :ARG1-of (w2 / wage-01 
                                    :ARG0 2) 
                              :mod (p2 / pure)))) 
            :op-of (a9 / and 
                  :op1 (t2 / think-01 
                        :ARG0 (s8 / she) 
                        :ARG1 (a8 / and 
                              :op1 (a7 / act-02 
                                    :ARG0 (i3 / it) 
                                    :ARG1 (a6 / ahead) 
                                    :ARG2 (s7 / so) 
                                    :op-of (a5 / and 
                                          :op1 (k / keep-01 
                                                :ARG0 (r3 / row 
                                                      :mod (l5 / little)) 
                                                :ARG1 3) 
                                          :op2 (l4 / like-01 
                                                :ARG0 (h2 / he) 
                                                :ARG1 (s6 / sit-01 
                                                      :ARG0 (y / yet) 
                                                      :ARG1 (i2 / it)) 
                                                :degree (q / quite) 
                                                :op-of (a4 / and)) 
                                          :op3 (s5 / see-01 
                                                :ARG0 (h / he 
                                                      :ARG0-of (r / recommend-01 
                                                            :ARG1 (a2 / and 
                                                                  :op1 (p / pack-01 
                                                                        :ARG0 (t / they) 
                                                                        :ARG1 (s / she 
                                                                              :ARG0-of (b / bother-02 
                                                                                    :ARG1 (i / it) 
                                                                                    :op-of (a3 / and 
                                                                                          :op1 (l3 / leave-01 
                                                                                                :ARG1 (f / farewell) 
                                                                                                :mod (s3 / some)) 
                                                                                          :op2 (l2 / look-01 
                                                                                                :ARG0 (s4 / she 
                                                                                                      :poss-of (f2 / fork)) 
                                                                                                :ARG1 (r2 / round))))) 
                                                                        :time (e2 / ever)) 
                                                                  :op2 (a / and 
                                                                        :op1 (l / live-01 
                                                                              :ARG1 (e / else 
                                                                                    :mod-of (s2 / somewhere))))))) 
                                                :ARG1 (w / way) 
                                                :frequency (e3 / evening 
                                                      :mod (o / other)) 
                                                :op-of (o2 / or)))) 
                              :topic-of (t3 / time 
                                    :op-of (a10 / and)))))))

# ::snt the other guests were too stoned to bother to turn towards him
# ::tok the other guests were too stoned to bother to turn towards him
# ::alignments 7-8|0 5-6|0.1 4-5|0.1.0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.661
# ::node	0	bother-02	7-8
# ::node	0.0	guest	2-3
# ::node	0.0.0	other	1-2
# ::node	0.1	stoned	5-6
# ::node	0.1.0	too	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	guest	0	0.0	
# ::edge	guest	mod	other	0.0	0.0.0	
# ::edge	stoned	mod	too	0.1	0.1.0	
# ::edge	stoned	purpose	bother-02	0.1	0	
(b / bother-02 
      :ARG0 (g / guest 
            :mod (o / other)) 
      :purpose-of (s / stoned 
            :mod (t / too)))

# ::snt ford appears i frankly dont bother to read it
# ::tok ford appears i frankly dont bother to read it
# ::alignments 8-9|0.1.1.0 7-8|0.1.1 5-6|0.1 3-4|0.1.0 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.709
# ::node	0	appear-02	1-2
# ::node	0.0	i	2-3
# ::node	0.1	bother-02	5-6
# ::node	0.1.0	frank	3-4
# ::node	0.1.1	read-01	7-8
# ::node	0.1.1.0	it	8-9
# ::root	0	appear-02
# ::edge	appear-02	ARG0	i	0	0.0	
# ::edge	appear-02	ARG1	bother-02	0	0.1	
# ::edge	bother-02	ARG0	frank	0.1	0.1.0	
# ::edge	bother-02	ARG1	read-01	0.1	0.1.1	
# ::edge	read-01	ARG1	it	0.1.1	0.1.1.0	
(a / appear-02 
      :ARG0 (i2 / i) 
      :ARG1 (b / bother-02 
            :ARG0 (f / frank) 
            :ARG1 (r / read-01 
                  :ARG1 (i / it))))

# ::snt few anglers bothering at tewkesbury
# ::tok few anglers bothering at tewkesbury
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.714
# ::node	0	bother-01	2-3
# ::node	0.0	few	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG0	few	0	0.0	
(b / bother-01 
      :ARG0 (f / few))

# ::snt but i want to know whats bothering you first
# ::tok but i want to know whats bothering you first
# ::alignments 7-8|0.0.1.0.0 6-7|0.0.1.0 4-5|0.0.1 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.730
# ::node	0	contrast-01	0-1
# ::node	0.0	want-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	know-01	4-5
# ::node	0.0.1.0	bother-01	6-7
# ::node	0.0.1.0.0	you	7-8
# ::root	0	contrast-01
# ::edge	bother-01	ARG1	you	0.0.1.0	0.0.1.0.0	
# ::edge	contrast-01	ARG2	want-01	0	0.0	
# ::edge	know-01	ARG1	bother-01	0.0.1	0.0.1.0	
# ::edge	want-01	ARG0	i	0.0	0.0.0	
# ::edge	want-01	ARG1	know-01	0.0	0.0.1	
(c / contrast-01 
      :ARG2 (w / want-01 
            :ARG0 (i / i) 
            :ARG1 (k / know-01 
                  :ARG1 (b / bother-01 
                        :ARG1 (y / you)))))

# ::snt im looking forward to hamlet but i wont bother you at the theatre ill see you at the flat
# ::tok im looking forward to hamlet but i wont bother you at the theatre ill see you at the flat
# ::alignments 18-19|0.2.0.2 15-16|0.2.0.0 14-15|0.2.0 13-14|0.2.0.1 9-10|0.0.0 8-9|0.0 6-7|0.2 5-6|0 2-3|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.845
# ::node	0	contrast-01	5-6
# ::node	0.0	bother-02	8-9
# ::node	0.0.0	you	9-10
# ::node	0.1	forward	2-3
# ::node	0.2	i	6-7
# ::node	0.2.0	see-01	14-15
# ::node	0.2.0.0	you	15-16
# ::node	0.2.0.1	ill-41	13-14
# ::node	0.2.0.2	flat	18-19
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	contrast-01	0.0	0	
# ::edge	bother-02	ARG1	you	0.0	0.0.0	
# ::edge	contrast-01	ARG1	forward	0	0.1	
# ::edge	contrast-01	ARG2	i	0	0.2	
# ::edge	ill-41	ARG1	see-01	0.2.0.1	0.2.0	
# ::edge	see-01	ARG0	i	0.2.0	0.2	
# ::edge	see-01	ARG1	you	0.2.0	0.2.0.0	
# ::edge	see-01	location	flat	0.2.0	0.2.0.2	
(c / contrast-01 
      :ARG0-of (b / bother-02 
            :ARG1 (y2 / you)) 
      :ARG1 (f2 / forward) 
      :ARG2 (i2 / i 
            :ARG0-of (s / see-01 
                  :ARG1 (y / you) 
                  :ARG1-of (i / ill-41) 
                  :location (f / flat))))

# ::snt few in the west bothered to ask what the islamic state envisaged by these people entailed especially for women
# ::tok few in the west bothered to ask what the islamic state envisaged by these people entailed especially for women
# ::alignments 18-19|0 16-17|0.0.0.1.0 10-11|0.0.0.1 6-7|0.0.0 4-5|0.0 3-4|0.0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.888
# ::node	0	woman	18-19
# ::node	0.0	bother-01	4-5
# ::node	0.0.0	ask-01	6-7
# ::node	0.0.0.0	west	3-4
# ::node	0.0.0.0.0	few	0-1
# ::node	0.0.0.1	state	10-11
# ::node	0.0.0.1.0	especially	16-17
# ::root	0	woman
(w / woman 
      :ARG0-of (b / bother-01 
            :ARG1 (a / ask-01 
                  :ARG0 (w2 / west 
                        :quant (f / few)) 
                  :ARG1 (s / state 
                        :quant (e / especially)))))

# ::snt dont bother to visit lunn poly
# ::tok dont bother to visit lunn poly
# ::alignments 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:41.892
# ::node	0	bother-02	1-2
# ::node	0.0	visit-01	3-4
# ::root	0	bother-02
# ::edge	bother-02	ARG1	visit-01	0	0.0	
(b / bother-02 
      :ARG1 (v / visit-01))

# ::snt it has become our tradition he notes not to bother clients with news views scoops earthshattering insights from the massed ranks of sixyearold girls standing 10 deep on rangoon high street an oblique reference to glasgow and suchlike rubbish dash
# ::tok it has become our tradition he notes not to bother clients with news views scoops earthshattering insights from the massed ranks of sixyearold girls standing 10 deep on rangoon high street an oblique reference to glasgow and suchlike rubbish dash
# ::alignments 38-39|0.0 36-37|0.3 33-34|0 30-31|0.2.0 29-30|0.2.0.0 26-27|0.2 25-26|0.3.0.0.0.2.0.0.1 23-24|0.3.0.0 20-21|0.3.0 12-13|0.1 10-11|0.3.0.0.0.2.0.0.0 9-10|0.3.0.0.0.2.0.0 6-7|0.3.0.0.0.2 5-6|0.3.0.0.0.2.0 4-5|0.3.0.0.0.1 2-3|0.3.0.0.0 0-1|0.3.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:42.268
# ::node	0	reference-01	33-34
# ::node	0.0	rubbish	38-39
# ::node	0.1	news	12-13
# ::node	0.2	deep	26-27
# ::node	0.2.0	street	30-31
# ::node	0.2.0.0	high	29-30
# ::node	0.3	and	36-37
# ::node	0.3.0	rank	20-21
# ::node	0.3.0.0	girl	23-24
# ::node	0.3.0.0.0	become-01	2-3
# ::node	0.3.0.0.0.0	it	0-1
# ::node	0.3.0.0.0.1	tradition	4-5
# ::node	0.3.0.0.0.2	note	6-7
# ::node	0.3.0.0.0.2.0	he	5-6
# ::node	0.3.0.0.0.2.0.0	bother-02	9-10
# ::node	0.3.0.0.0.2.0.0.0	client	10-11
# ::node	0.3.0.0.0.2.0.0.1	10	25-26
# ::root	0	reference-01
# ::edge	and	op1	rank	0.3	0.3.0	
# ::edge	become-01	ARG0	girl	0.3.0.0.0	0.3.0.0	
# ::edge	become-01	ARG1	it	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	become-01	ARG2	tradition	0.3.0.0.0	0.3.0.0.0.1	
# ::edge	bother-02	ARG0	he	0.3.0.0.0.2.0.0	0.3.0.0.0.2.0	
# ::edge	bother-02	ARG1	client	0.3.0.0.0.2.0.0	0.3.0.0.0.2.0.0.0	
# ::edge	bother-02	time	10	0.3.0.0.0.2.0.0	0.3.0.0.0.2.0.0.1	
# ::edge	deep	compared-to	street	0.2	0.2.0	
# ::edge	note	ARG0	he	0.3.0.0.0.2	0.3.0.0.0.2.0	
# ::edge	note	source	become-01	0.3.0.0.0.2	0.3.0.0.0	
# ::edge	rank	mod	girl	0.3.0	0.3.0.0	
# ::edge	reference-01	ARG0	rubbish	0	0.0	
# ::edge	reference-01	ARG1	news	0	0.1	
# ::edge	reference-01	manner	deep	0	0.2	
# ::edge	reference-01	purpose	and	0	0.3	
# ::edge	street	mod	high	0.2.0	0.2.0.0	
(r2 / reference-01 
      :ARG0 (r / rubbish) 
      :ARG1 (n / news) 
      :manner (d / deep 
            :compared-to (s / street 
                  :mod (h / high))) 
      :purpose (a / and 
            :op1 (r3 / rank 
                  :mod (g / girl 
                        :ARG0-of (b2 / become-01 
                              :ARG1 (i / it) 
                              :ARG2 (t / tradition) 
                              :source-of (n2 / note 
                                    :ARG0 (h2 / he 
                                          :ARG0-of (b / bother-02 
                                                :ARG1 (c / client) 
                                                :time 10))))))))

# ::snt im deeply sorry that youve been upset and bothered in this way dash
# ::tok im deeply sorry that youve been upset and bothered in this way dash
# ::alignments 11-12|0.1.0 10-11|0.1.0.0 8-9|0.1 7-8|0 6-7|0.0 2-3|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:42.292
# ::node	0	and	7-8
# ::node	0.0	upset-01	6-7
# ::node	0.0.0	sorry-41	2-3
# ::node	0.0.0.0	deep	1-2
# ::node	0.1	bother-01	8-9
# ::node	0.1.0	way	11-12
# ::node	0.1.0.0	this	10-11
# ::root	0	and
# ::edge	and	op1	upset-01	0	0.0	
# ::edge	and	op2	bother-01	0	0.1	
# ::edge	bother-01	ARG0	way	0.1	0.1.0	
# ::edge	sorry-41	degree	deep	0.0.0	0.0.0.0	
# ::edge	upset-01	ARG1	sorry-41	0.0	0.0.0	
# ::edge	way	mod	this	0.1.0	0.1.0.0	
(a / and 
      :op1 (u / upset-01 
            :ARG1 (s / sorry-41 
                  :degree (d / deep))) 
      :op2 (b / bother-01 
            :ARG0 (w / way 
                  :mod (t / this))))

# ::snt but ive become scruffier and scruffier and although i do keep myself immaculately clean i cant be bothered about my clothes any more, they get washed whenever i can be bothered or whenever my mother raids my bedroom
# ::tok but ive become scruffier and scruffier and although i do keep myself immaculately clean i cant be bothered about my clothes any more , they get washed whenever i can be bothered or whenever my mother raids my bedroom
# ::alignments 38-39|0.1.3.1.0 36-37|0.1.3.1 35-36|0.1.3.1.0.0.2+0.1.3.1.0.0 33-34|0.1.3.1.0.0.0 32-33|0.1.3 31-32|0.1.3.0 29-30|0.1.3.0.1 28-29|0.1.3.0.0 27-28|0.1.2 26-27|0.1 24-25|0.1.0 21-22|0.1.3.1.0.0.1.0.0 20-21|0.1.3.1.0.0.1.0.1 17-18|0.1.3.1.0.0.1.0 14-15|0.1.3.1.0.0.1 13-14|0.1.3.1.0.0.1.1 8-9|0.1.1 6-7|0.0.0 4-5|0.0.1 2-3|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:42.744
# ::node	0	contrast-01	0-1
# ::node	0.0	become-01	2-3
# ::node	0.0.0	and	6-7
# ::node	0.0.1	and	4-5
# ::node	0.1	wash-01	26-27
# ::node	0.1.0	they	24-25
# ::node	0.1.1	i	8-9
# ::node	0.1.2	whenever	27-28
# ::node	0.1.3	or	32-33
# ::node	0.1.3.0	bother-01	31-32
# ::node	0.1.3.0.0	i	28-29
# ::node	0.1.3.0.1	possible	29-30
# ::node	0.1.3.1	raid-01	36-37
# ::node	0.1.3.1.0	bedroom	38-39
# ::node	0.1.3.1.0.0	have-rel-role-91	35-36
# ::node	0.1.3.1.0.0.0	whenever	33-34
# ::node	0.1.3.1.0.0.1	i	14-15
# ::node	0.1.3.1.0.0.1.0	bother-01	17-18
# ::node	0.1.3.1.0.0.1.0.0	any	21-22
# ::node	0.1.3.1.0.0.1.0.1	clothes	20-21
# ::node	0.1.3.1.0.0.1.1	clean	13-14
# ::node	0.1.3.1.0.0.2	mother	35-36
# ::root	0	contrast-01
# ::edge	and	op1	become-01	0.0.1	0.0	
# ::edge	become-01	ARG2	and	0.0	0.0.0	
# ::edge	bedroom	poss	have-rel-role-91	0.1.3.1.0	0.1.3.1.0.0	
# ::edge	bother-01	ARG0	any	0.1.3.1.0.0.1.0	0.1.3.1.0.0.1.0.0	
# ::edge	bother-01	ARG1	i	0.1.3.0	0.1.3.0.0	
# ::edge	bother-01	ARG1	i	0.1.3.1.0.0.1.0	0.1.3.1.0.0.1	
# ::edge	bother-01	ARG2	clothes	0.1.3.1.0.0.1.0	0.1.3.1.0.0.1.0.1	
# ::edge	contrast-01	ARG2	become-01	0	0.0	
# ::edge	contrast-01	condition	wash-01	0	0.1	
# ::edge	have-rel-role-91	ARG0	whenever	0.1.3.1.0.0	0.1.3.1.0.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.1.3.1.0.0	0.1.3.1.0.0.1	
# ::edge	have-rel-role-91	ARG2	mother	0.1.3.1.0.0	0.1.3.1.0.0.2	
# ::edge	i	mod	clean	0.1.3.1.0.0.1	0.1.3.1.0.0.1.1	
# ::edge	or	op1	wash-01	0.1.3	0.1	
# ::edge	or	op2	bother-01	0.1.3	0.1.3.0	
# ::edge	or	op3	raid-01	0.1.3	0.1.3.1	
# ::edge	possible	domain	bother-01	0.1.3.0.1	0.1.3.0	
# ::edge	raid-01	ARG1	bedroom	0.1.3.1	0.1.3.1.0	
# ::edge	wash-01	ARG0	they	0.1	0.1.0	
# ::edge	wash-01	ARG1	i	0.1	0.1.1	
# ::edge	wash-01	frequency	whenever	0.1	0.1.2	
(c3 / contrast-01 
      :ARG2 (b4 / become-01 
            :ARG2 (a2 / and) 
            :op-of (a3 / and)) 
      :condition (w3 / wash-01 
            :ARG0 (t / they) 
            :ARG1 (i3 / i) 
            :frequency (w2 / whenever) 
            :op-of (o / or 
                  :op1 (b2 / bother-01 
                        :ARG1 (i / i) 
                        :domain-of (p / possible)) 
                  :op2 (r / raid-01 
                        :ARG1 (b / bedroom 
                              :poss (h / have-rel-role-91 
                                    :ARG0 (w / whenever) 
                                    :ARG1 (i2 / i 
                                          :ARG1-of (b3 / bother-01 
                                                :ARG0 (a / any) 
                                                :ARG2 (c / clothes)) 
                                          :mod (c2 / clean)) 
                                    :ARG2 (m / mother)))))))

# ::snt or did you not bother with the slap because you were enjoying the tickling so much
# ::tok or did you not bother with the slap because you were enjoying the tickling so much
# ::alignments 15-16|0.2.0.1 14-15|0.2.0.1.0 11-12|0.2.0 9-10|0.2.0.0 8-9|0.2 7-8|0.1 4-5|0 2-3|0.0 0-1|0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:42.906
# ::node	0	bother-02	4-5
# ::node	0.0	you	2-3
# ::node	0.1	slap-01	7-8
# ::node	0.2	cause-01	8-9
# ::node	0.2.0	enjoy-01	11-12
# ::node	0.2.0.0	you	9-10
# ::node	0.2.0.1	much	15-16
# ::node	0.2.0.1.0	so	14-15
# ::node	0.3	or	0-1
# ::root	0	bother-02
# ::edge	bother-02	ARG0	you	0	0.0	
# ::edge	bother-02	ARG1	slap-01	0	0.1	
# ::edge	cause-01	ARG0	enjoy-01	0.2	0.2.0	
# ::edge	cause-01	ARG1	bother-02	0.2	0	
# ::edge	enjoy-01	ARG0	you	0.2.0	0.2.0.0	
# ::edge	enjoy-01	degree	much	0.2.0	0.2.0.1	
# ::edge	much	degree	so	0.2.0.1	0.2.0.1.0	
# ::edge	or	op1	bother-02	0.3	0	
(b / bother-02 
      :ARG0 (y2 / you) 
      :ARG1 (s2 / slap-01) 
      :ARG1-of (c / cause-01 
            :ARG0 (e / enjoy-01 
                  :ARG0 (y / you) 
                  :degree (m / much 
                        :degree (s / so)))) 
      :op-of (o / or))

# ::snt since you will be able to keep it at home and trail it behind your car you wont need to bother about moorings or security
# ::tok since you will be able to keep it at home and trail it behind your car you wont need to bother about moorings or security
# ::alignments 24-25|0.3.0 23-24|0.3 20-21|0 18-19|0.2 16-17|0.0 15-16|0.1 13-14|0.1.0 12-13|0.1.0.0.0 11-12|0.1.0.0 10-11|0.1.0.0.1 9-10|0.1.0.0.0.0 7-8|0.1.0.0.0.0.0 4-5|0.1.0.0.1.0 1-2|0.2.0 0-1|0.1.0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:43.290
# ::node	0	bother-02	20-21
# ::node	0.0	you	16-17
# ::node	0.1	car	15-16
# ::node	0.1.0	behind	13-14
# ::node	0.1.0.0	trail	11-12
# ::node	0.1.0.0.0	it	12-13
# ::node	0.1.0.0.0.0	home	9-10
# ::node	0.1.0.0.0.0.0	it	7-8
# ::node	0.1.0.0.1	and	10-11
# ::node	0.1.0.0.1.0	possible	4-5
# ::node	0.1.0.0.1.0.0	since	0-1
# ::node	0.2	need-01	18-19
# ::node	0.2.0	you	1-2
# ::node	0.3	or	23-24
# ::node	0.3.0	security	24-25
# ::root	0	bother-02
# ::edge	and	op1	trail	0.1.0.0.1	0.1.0.0	
# ::edge	behind	op1	car	0.1.0	0.1	
# ::edge	bother-02	ARG0	you	0	0.0	
# ::edge	bother-02	ARG1	car	0	0.1	
# ::edge	bother-02	ARG2	or	0	0.3	
# ::edge	it	part	home	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	it	topic	home	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	need-01	ARG0	you	0.2	0.2.0	
# ::edge	need-01	ARG1	bother-02	0.2	0	
# ::edge	or	op1	security	0.3	0.3.0	
# ::edge	possible	domain	and	0.1.0.0.1.0	0.1.0.0.1	
# ::edge	since	op1	possible	0.1.0.0.1.0.0	0.1.0.0.1.0	
# ::edge	trail	degree	it	0.1.0.0	0.1.0.0.0	
# ::edge	trail	location	behind	0.1.0.0	0.1.0	
(b / bother-02 
      :ARG0 (y / you) 
      :ARG1 (c / car 
            :op-of (b2 / behind 
                  :location-of (t / trail 
                        :degree (i / it 
                              :part (h / home 
                                    :topic-of (i2 / it))) 
                        :op-of (a / and 
                              :domain-of (p / possible 
                                    :op-of (s2 / since)))))) 
      :ARG1-of (n / need-01 
            :ARG0 (y2 / you)) 
      :ARG2 (o / or 
            :op1 (s / security)))

# ::snt but what exactly does it mean and why should we bother anyway
# ::tok but what exactly does it mean and why should we bother anyway
# ::alignments 11-12|0.1.1.1 10-11|0.1.1 9-10|0.1.1.0 8-9|0.1.0 6-7|0.1 5-6|0 4-5|0.0 2-3|0.2.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:43.365
# ::node	0	mean-01	5-6
# ::node	0.0	it	4-5
# ::node	0.1	and	6-7
# ::node	0.1.0	recommend-01	8-9
# ::node	0.1.1	bother-02	10-11
# ::node	0.1.1.0	we	9-10
# ::node	0.1.1.1	anyway	11-12
# ::node	0.2	contrast-01	0-1
# ::node	0.2.0	exact	2-3
# ::root	0	mean-01
# ::edge	and	op1	mean-01	0.1	0	
# ::edge	and	op2	recommend-01	0.1	0.1.0	
# ::edge	and	op3	bother-02	0.1	0.1.1	
# ::edge	bother-02	ARG0	we	0.1.1	0.1.1.0	
# ::edge	bother-02	mod	anyway	0.1.1	0.1.1.1	
# ::edge	contrast-01	ARG1	exact	0.2	0.2.0	
# ::edge	mean-01	ARG0	it	0	0.0	
# ::edge	mean-01	time	contrast-01	0	0.2	
(m / mean-01 
      :ARG0 (i / it) 
      :op-of (a2 / and 
            :op1 (r / recommend-01) 
            :op2 (b / bother-02 
                  :ARG0 (w / we) 
                  :mod (a / anyway))) 
      :time (c / contrast-01 
            :ARG1 (e / exact)))

# ::snt take it along to a trick cyclist if it bothers you
# ::tok take it along to a trick cyclist if it bothers you
# ::alignments 10-11|0.0.0.1 9-10|0.0.0 8-9|0.0.0.0 5-6|0.0.0.2 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:43.473
# ::node	0	along	2-3
# ::node	0.0	it	1-2
# ::node	0.0.0	bother-01	9-10
# ::node	0.0.0.0	it	8-9
# ::node	0.0.0.1	you	10-11
# ::node	0.0.0.2	trick	5-6
# ::root	0	along
# ::edge	along	mod	it	0	0.0	
# ::edge	bother-01	ARG0	it	0.0.0	0.0.0.0	
# ::edge	bother-01	ARG1	you	0.0.0	0.0.0.1	
# ::edge	bother-01	ARG3	it	0.0.0	0.0	
# ::edge	trick	op1	bother-01	0.0.0.2	0.0.0	
(a / along 
      :mod (i2 / it 
            :ARG3-of (b / bother-01 
                  :ARG0 (i / it) 
                  :ARG1 (y / you) 
                  :op-of (t / trick))))

# ::snt baldemero is owned by robert sangsters son guy who had been told by trainer willie jarvis not to bother taking a day off work
# ::tok baldemero is owned by robert sangsters son guy who had been told by trainer willie jarvis not to bother taking a day off work
# ::alignments 22-23|0.1.0 21-22|0.1 18-19|0 13-14|0.0.2 11-12|0.2 7-8|0.0 6-7|0.0.0.0+0.0.0 2-3|0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:43.530
# ::node	0	bother-02	18-19
# ::node	0.0	guy	7-8
# ::node	0.0.0	have-rel-role-91	6-7
# ::node	0.0.0.0	son	6-7
# ::node	0.0.1	own-01	2-3
# ::node	0.0.2	train-01	13-14
# ::node	0.1	day	21-22
# ::node	0.1.0	off	22-23
# ::node	0.2	tell-01	11-12
# ::root	0	bother-02
# ::edge	bother-02	ARG0	guy	0	0.0	
# ::edge	bother-02	ARG1	day	0	0.1	
# ::edge	have-rel-role-91	ARG0	guy	0.0.0	0.0	
# ::edge	have-rel-role-91	ARG2	son	0.0.0	0.0.0.0	
# ::edge	off	op1	day	0.1.0	0.1	
# ::edge	own-01	ARG0	guy	0.0.1	0.0	
# ::edge	tell-01	ARG1	bother-02	0.2	0	
# ::edge	train-01	ARG1	guy	0.0.2	0.0	
(b / bother-02 
      :ARG0 (g / guy 
            :ARG0-of (h / have-rel-role-91 
                  :ARG2 (s / son)) 
            :ARG0-of (o2 / own-01) 
            :ARG1-of (t / train-01)) 
      :ARG1 (d / day 
            :op-of (o / off)) 
      :ARG1-of (t2 / tell-01))

# ::snt how come we have believed what we have seen and seen what we have believed  john pilger may point us back to the lessons of vietnam or even the falklands but we also live daytoday with distorted coverage of ireland and it doesnt seem to bother us too much
# ::tok how come we have believed what we have seen and seen what we have believed john pilger may point us back to the lessons of vietnam or even the falklands but we also live daytoday with distorted coverage of ireland and it doesnt seem to bother us too much
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:43.532
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt they will pay whatever it takes to get scots crayfish and dublin bay prawns into the shops and restaurants in beautiful condition when no one back home can be bothered
# ::tok they will pay whatever it takes to get scots crayfish and dublin bay prawns into the shops and restaurants in beautiful condition when no one back home can be bothered
# ::alignments 29-30|0.0 27-28|0 26-27|0.0.0 25-26|0.0.0.0 23-24|0.0.2 21-22|0.0.1.1.1 20-21|0.0.1.1.1.0 18-19|0.0.1.1 17-18|0.0.1.1.0 16-17|0.0.1.1.0.0 10-11|0.0.1 8-9|0.0.1.0.0.0.0+0.0.1.0.0.0+0.0.1.0.0+0.0.1.0 4-5|0.0.1.2 3-4|0.0.1.2.0.1 2-3|0.0.1.2.0 0-1|0.0.1.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:43.772
# ::node	0	possible	27-28
# ::node	0.0	bother-01	29-30
# ::node	0.0.0	home	26-27
# ::node	0.0.0.0	back	25-26
# ::node	0.0.1	and	10-11
# ::node	0.0.1.0	person	8-9
# ::node	0.0.1.0.0	country	8-9
# ::node	0.0.1.0.0.0	name	8-9
# ::node	0.0.1.0.0.0.0	"Scotland"	8-9
# ::node	0.0.1.1	restaurant	18-19
# ::node	0.0.1.1.0	and	17-18
# ::node	0.0.1.1.0.0	shop	16-17
# ::node	0.0.1.1.1	condition	21-22
# ::node	0.0.1.1.1.0	beautiful	20-21
# ::node	0.0.1.2	it	4-5
# ::node	0.0.1.2.0	pay-01	2-3
# ::node	0.0.1.2.0.0	they	0-1
# ::node	0.0.1.2.0.1	whatever	3-4
# ::node	0.0.2	-	23-24
# ::root	0	possible
# ::edge	and	op1	person	0.0.1	0.0.1.0	
# ::edge	and	op1	shop	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	and	op2	restaurant	0.0.1	0.0.1.1	
# ::edge	and	op2	restaurant	0.0.1.1.0	0.0.1.1	
# ::edge	and	poss	it	0.0.1	0.0.1.2	
# ::edge	bother-01	ARG0	home	0.0	0.0.0	
# ::edge	bother-01	ARG1	and	0.0	0.0.1	
# ::edge	bother-01	polarity	-	0.0	0.0.2	
# ::edge	condition	mod	beautiful	0.0.1.1.1	0.0.1.1.1.0	
# ::edge	country	name	name	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	home	manner	back	0.0.0	0.0.0.0	
# ::edge	name	op1	"Scotland"	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	pay-01	ARG0	they	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	pay-01	ARG1	it	0.0.1.2.0	0.0.1.2	
# ::edge	person	mod	country	0.0.1.0	0.0.1.0.0	
# ::edge	possible	domain	bother-01	0	0.0	
# ::edge	restaurant	poss	condition	0.0.1.1	0.0.1.1.1	
# ::edge	whatever	op1	pay-01	0.0.1.2.0.1	0.0.1.2.0	
(p / possible 
      :domain (b / bother-01 
            :ARG0 (h / home 
                  :manner (b2 / back)) 
            :ARG1 (a2 / and 
                  :op1 (p2 / person 
                        :mod (c2 / country 
                              :name (n / name 
                                    :op1 "Scotland"))) 
                  :op2 (r / restaurant 
                        :op-of (a / and 
                              :op1 (s / shop)) 
                        :poss (c / condition 
                              :mod (b3 / beautiful))) 
                  :poss (i / it 
                        :ARG1-of (p3 / pay-01 
                              :ARG0 (t / they) 
                              :op-of (w / whatever)))) 
            :polarity (- / -)))

# ::snt but nobody ever bothers to apply the posthocergopropterhoc fallacy to road accidents where it is unquestioned that anyone involved in a road accident whose blood alcohol is over the limit must be to blame for the accident
# ::tok but nobody ever bothers to apply the posthocergopropterhoc fallacy to road accidents where it is unquestioned that anyone involved in a road accident whose blood alcohol is over the limit must be to blame for the accident
# ::alignments 36-37|0.0.1.1.0.1 33-34|0.0.1.1.0 29-30|0.0.1.1.0.0 25-26|0.0.1.1.1.1.1.0 24-25|0.0.1.1.1.1.1 22-23|0.0.1.1.1.1 21-22|0.0.1.1.1.1.0 18-19|0.0.1.1.1 17-18|0.0.1.1 13-14|0.0.1.1.1.0 11-12|0.0.0.0 10-11|0.0.0 5-6|0.0.1 3-4|0.0 2-3|0.0.2 1-2|0.0.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:44.177
# ::node	0	contrast-01	0-1
# ::node	0.0	bother-01	3-4
# ::node	0.0.0	road	10-11
# ::node	0.0.0.0	accident	11-12
# ::node	0.0.1	apply-01	5-6
# ::node	0.0.1.0	nobody	1-2
# ::node	0.0.1.1	anyone	17-18
# ::node	0.0.1.1.0	blame-01	33-34
# ::node	0.0.1.1.0.0	limit-01	29-30
# ::node	0.0.1.1.0.1	accident	36-37
# ::node	0.0.1.1.1	involve-01	18-19
# ::node	0.0.1.1.1.0	it	13-14
# ::node	0.0.1.1.1.1	accident	22-23
# ::node	0.0.1.1.1.1.0	road	21-22
# ::node	0.0.1.1.1.1.1	blood	24-25
# ::node	0.0.1.1.1.1.1.0	alcohol	25-26
# ::node	0.0.2	ever	2-3
# ::root	0	contrast-01
# ::edge	accident	location	road	0.0.0.0	0.0.0	
# ::edge	accident	location	road	0.0.1.1.1.1	0.0.1.1.1.1.0	
# ::edge	alcohol	mod	blood	0.0.1.1.1.1.1.0	0.0.1.1.1.1.1	
# ::edge	apply-01	ARG0	nobody	0.0.1	0.0.1.0	
# ::edge	apply-01	ARG1	anyone	0.0.1	0.0.1.1	
# ::edge	blame-01	ARG0	limit-01	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	blame-01	ARG1	anyone	0.0.1.1.0	0.0.1.1	
# ::edge	blame-01	ARG2	accident	0.0.1.1.0	0.0.1.1.0.1	
# ::edge	blood	poss	accident	0.0.1.1.1.1.1	0.0.1.1.1.1	
# ::edge	bother-01	ARG0	road	0.0	0.0.0	
# ::edge	bother-01	ARG1	apply-01	0.0	0.0.1	
# ::edge	bother-01	time	ever	0.0	0.0.2	
# ::edge	contrast-01	ARG2	bother-01	0	0.0	
# ::edge	involve-01	ARG0	it	0.0.1.1.1	0.0.1.1.1.0	
# ::edge	involve-01	ARG1	anyone	0.0.1.1.1	0.0.1.1	
# ::edge	involve-01	ARG2	accident	0.0.1.1.1	0.0.1.1.1.1	
(c / contrast-01 
      :ARG2 (b3 / bother-01 
            :ARG0 (r2 / road 
                  :location-of (a5 / accident)) 
            :ARG1 (a6 / apply-01 
                  :ARG0 (n / nobody) 
                  :ARG1 (a4 / anyone 
                        :ARG1-of (b / blame-01 
                              :ARG0 (l / limit-01) 
                              :ARG2 (a / accident)) 
                        :ARG1-of (i / involve-01 
                              :ARG0 (i2 / it) 
                              :ARG2 (a3 / accident 
                                    :location (r / road) 
                                    :poss-of (b2 / blood 
                                          :mod-of (a2 / alcohol)))))) 
            :time (e / ever)))

# ::snt it was a long shot that he and i would do the gower script therefore i didnt bother mentioning it to you
# ::tok it was a long shot that he and i would do the gower script therefore i didnt bother mentioning it to you
# ::alignments 21-22|0.1.2 19-20|0.1.1 18-19|0.1 17-18|0 15-16|0.0 13-14|0.1.0 8-9|0.1.0.0.1.0 7-8|0.1.0.0.1 6-7|0.1.0.0 4-5|0.1.0.0.0 0-1|0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:44.441
# ::node	0	bother-02	17-18
# ::node	0.0	i	15-16
# ::node	0.1	mention-01	18-19
# ::node	0.1.0	script	13-14
# ::node	0.1.0.0	he	6-7
# ::node	0.1.0.0.0	shoot-02	4-5
# ::node	0.1.0.0.0.0	it	0-1
# ::node	0.1.0.0.1	and	7-8
# ::node	0.1.0.0.1.0	i	8-9
# ::node	0.1.1	it	19-20
# ::node	0.1.2	you	21-22
# ::root	0	bother-02
# ::edge	and	op1	he	0.1.0.0.1	0.1.0.0	
# ::edge	and	op2	i	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	bother-02	ARG0	i	0	0.0	
# ::edge	bother-02	ARG1	mention-01	0	0.1	
# ::edge	mention-01	ARG0	script	0.1	0.1.0	
# ::edge	mention-01	ARG1	it	0.1	0.1.1	
# ::edge	mention-01	ARG2	you	0.1	0.1.2	
# ::edge	script	poss	he	0.1.0	0.1.0.0	
# ::edge	shoot-02	ARG0	it	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	shoot-02	ARG1	he	0.1.0.0.0	0.1.0.0	
(b / bother-02 
      :ARG0 (i2 / i) 
      :ARG1 (m / mention-01 
            :ARG0 (s / script 
                  :poss (h / he 
                        :ARG1-of (s2 / shoot-02 
                              :ARG0 (i4 / it)) 
                        :op-of (a / and 
                              :op1 (i3 / i)))) 
            :ARG1 (i / it) 
            :ARG2 (y / you)))

# ::snt he was merely shown up as a man who had not bothered to come to terms with the way that philosophers since wittgenstein thought
# ::tok he was merely shown up as a man who had not bothered to come to terms with the way that philosophers since wittgenstein thought
# ::alignments 23-24|0 21-22|0.0 18-19|0.1.0.0.0.0 15-16|0.1.0.0.0 11-12|0.1.0.0 7-8|0.1.0 3-4|0.1 2-3|0.1.2 0-1|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:44.491
# ::node	0	think-01	23-24
# ::node	0.0	since	21-22
# ::node	0.1	show-01	3-4
# ::node	0.1.0	man	7-8
# ::node	0.1.0.0	bother-01	11-12
# ::node	0.1.0.0.0	term	15-16
# ::node	0.1.0.0.0.0	way	18-19
# ::node	0.1.1	he	0-1
# ::node	0.1.2	mere	2-3
# ::root	0	think-01
# ::edge	bother-01	ARG0	man	0.1.0.0	0.1.0	
# ::edge	bother-01	ARG1	term	0.1.0.0	0.1.0.0.0	
# ::edge	show-01	ARG0	man	0.1	0.1.0	
# ::edge	show-01	ARG1	he	0.1	0.1.1	
# ::edge	show-01	mod	mere	0.1	0.1.2	
# ::edge	term	mod	way	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	think-01	ARG0	since	0	0.0	
# ::edge	think-01	ARG1	show-01	0	0.1	
(t / think-01 
      :ARG0 (s / since) 
      :ARG1 (s2 / show-01 
            :ARG0 (m / man 
                  :ARG0-of (b / bother-01 
                        :ARG1 (t2 / term 
                              :mod (w / way)))) 
            :ARG1 (h / he) 
            :mod (m2 / mere)))

# ::snt holly i cant help wondering whether if id bothered to cross the road and spared him a few minutes of my time hed have avoided reaching such depths
# ::tok holly i cant help wondering whether if id bothered to cross the road and spared him a few minutes of my time hed have avoided reaching such depths
# ::alignments 27-28|0.0.1.0.0.0 26-27|0.0.1.0.0.0.0 25-26|0.0.1.0.0 24-25|0.0.1.0.0.1 21-22|0.0.0 18-19|0.1.0.1+0.1.0 17-18|0.1.0.0 14-15|0.1 13-14|0 12-13|0.0.1.1 10-11|0.0.1 8-9|0.0 7-8|0.0.1.0 4-5|0.0.1.0.0.1.0 3-4|0.0.1.0.0.1.0.1 1-2|0.0.1.0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.328
# ::node	0	and	13-14
# ::node	0.0	bother-01	8-9
# ::node	0.0.0	time	21-22
# ::node	0.0.1	cross-02	10-11
# ::node	0.0.1.0	id	7-8
# ::node	0.0.1.0.0	reach-01	25-26
# ::node	0.0.1.0.0.0	depth	27-28
# ::node	0.0.1.0.0.0.0	such	26-27
# ::node	0.0.1.0.0.1	avoid-01	24-25
# ::node	0.0.1.0.0.1.0	wonder-01	4-5
# ::node	0.0.1.0.0.1.0.0	i	1-2
# ::node	0.0.1.0.0.1.0.1	help-01	3-4
# ::node	0.0.1.1	road	12-13
# ::node	0.1	spare-01	14-15
# ::node	0.1.0	temporal-quantity	18-19
# ::node	0.1.0.0	few	17-18
# ::node	0.1.0.1	minute	18-19
# ::root	0	and
# ::edge	and	op1	bother-01	0	0.0	
# ::edge	and	op2	spare-01	0	0.1	
# ::edge	avoid-01	ARG1	reach-01	0.0.1.0.0.1	0.0.1.0.0	
# ::edge	bother-01	ARG0	time	0.0	0.0.0	
# ::edge	bother-01	ARG1	cross-02	0.0	0.0.1	
# ::edge	cross-02	ARG0	id	0.0.1	0.0.1.0	
# ::edge	cross-02	ARG1	road	0.0.1	0.0.1.1	
# ::edge	depth	mod	such	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	few	op1	temporal-quantity	0.1.0.0	0.1.0	
# ::edge	help-01	ARG1	wonder-01	0.0.1.0.0.1.0.1	0.0.1.0.0.1.0	
# ::edge	reach-01	ARG0	id	0.0.1.0.0	0.0.1.0	
# ::edge	reach-01	ARG1	depth	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	spare-01	ARG1	temporal-quantity	0.1	0.1.0	
# ::edge	temporal-quantity	unit	minute	0.1.0	0.1.0.1	
# ::edge	wonder-01	ARG0	i	0.0.1.0.0.1.0	0.0.1.0.0.1.0.0	
# ::edge	wonder-01	ARG1	avoid-01	0.0.1.0.0.1.0	0.0.1.0.0.1	
(a2 / and 
      :op1 (b / bother-01 
            :ARG0 (t / time) 
            :ARG1 (c / cross-02 
                  :ARG0 (i / id 
                        :ARG0-of (r / reach-01 
                              :ARG1 (d / depth 
                                    :mod (s / such)) 
                              :ARG1-of (a / avoid-01 
                                    :ARG1-of (w / wonder-01 
                                          :ARG0 (i2 / i) 
                                          :ARG1-of (h / help-01))))) 
                  :ARG1 (r2 / road))) 
      :op2 (s2 / spare-01 
            :ARG1 (t2 / temporal-quantity 
                  :op-of (f / few) 
                  :unit (m / minute))))

# ::snt but in that case why bother with the stomach at all
# ::tok but in that case why bother with the stomach at all
# ::alignments 10-11|0.0.1 8-9|0.0.0 5-6|0.0 3-4|0.1 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.362
# ::node	0	contrast-01	0-1
# ::node	0.0	bother-02	5-6
# ::node	0.0.0	stomach	8-9
# ::node	0.0.1	all	10-11
# ::node	0.1	case	3-4
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	stomach	0.0	0.0.0	
# ::edge	bother-02	ARG1	all	0.0	0.0.1	
# ::edge	contrast-01	ARG1	bother-02	0	0.0	
# ::edge	contrast-01	ARG2	case	0	0.1	
(c2 / contrast-01 
      :ARG1 (b / bother-02 
            :ARG0 (s / stomach) 
            :ARG1 (a / all)) 
      :ARG2 (c / case))

# ::snt i decided to be helpful and rather than bother anyone i took it upon myself to move about 30 of the magazines to the womens section
# ::tok i decided to be helpful and rather than bother anyone i took it upon myself to move about 30 of the magazines to the womens section
# ::alignments 25-26|0.2.0.1.1 21-22|0.0.0 18-19|0.0 12-13|0.2.0.1.0 10-11|0.1.0 9-10|0.1 8-9|0 5-6|0.2 4-5|0.2.0.1 1-2|0.2.0 0-1|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.485
# ::node	0	bother-02	8-9
# ::node	0.0	30	18-19
# ::node	0.0.0	magazine	21-22
# ::node	0.1	anyone	9-10
# ::node	0.1.0	i	10-11
# ::node	0.2	and	5-6
# ::node	0.2.0	decide-01	1-2
# ::node	0.2.0.0	i	0-1
# ::node	0.2.0.1	help-01	4-5
# ::node	0.2.0.1.0	it	12-13
# ::node	0.2.0.1.1	section	25-26
# ::root	0	bother-02
# ::edge	and	op1	decide-01	0.2	0.2.0	
# ::edge	and	op2	bother-02	0.2	0	
# ::edge	anyone	poss	i	0.1	0.1.0	
# ::edge	bother-02	ARG0	30	0	0.0	
# ::edge	bother-02	ARG1	anyone	0	0.1	
# ::edge	decide-01	ARG0	i	0.2.0	0.2.0.0	
# ::edge	decide-01	ARG1	help-01	0.2.0	0.2.0.1	
# ::edge	help-01	ARG0	it	0.2.0.1	0.2.0.1.0	
# ::edge	help-01	ARG1	section	0.2.0.1	0.2.0.1.1	
# ::edge	magazine	quant	30	0.0.0	0.0	
(b / bother-02 
      :ARG0 (3 / 30 
            :quant-of (m / magazine)) 
      :ARG1 (a / anyone 
            :poss (i2 / i)) 
      :op-of (a2 / and 
            :op1 (d / decide-01 
                  :ARG0 (i3 / i) 
                  :ARG1 (h / help-01 
                        :ARG0 (i / it) 
                        :ARG1 (s / section)))))

# ::snt henry had never understood why it was that raskolnywhateverhis namewas had bothered to turn himself in to the police when no one had anything whatsoever against him
# ::tok henry had never understood why it was that raskolnywhateverhis namewas had bothered to turn himself in to the police when no one had anything whatsoever against him
# ::alignments 24-25|0.2 23-24|0.2.0 20-21|0.1.0 18-19|0.0 11-12|0.1 5-6|0.1.1 3-4|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.612
# ::node	0	understand-01	3-4
# ::node	0.0	police	18-19
# ::node	0.1	bother-01	11-12
# ::node	0.1.0	-	20-21
# ::node	0.1.1	it	5-6
# ::node	0.2	whatsoever	24-25
# ::node	0.2.0	anything	23-24
# ::root	0	understand-01
# ::edge	anything	mod	whatsoever	0.2.0	0.2	
# ::edge	bother-01	ARG0	-	0.1	0.1.0	
# ::edge	bother-01	ARG1	it	0.1	0.1.1	
# ::edge	understand-01	ARG0	police	0	0.0	
# ::edge	understand-01	ARG1	bother-01	0	0.1	
# ::edge	understand-01	degree	whatsoever	0	0.2	
(u / understand-01 
      :ARG0 (p / police) 
      :ARG1 (b / bother-01 
            :ARG0 (- / -) 
            :ARG1 (i / it)) 
      :degree (w / whatsoever 
            :mod-of (a / anything)))

# ::snt but about the great lie i was living i was hardly bothered
# ::tok but about the great lie i was living i was hardly bothered
# ::alignments 11-12|0.0.1 10-11|0.0.1.2 8-9|0.0.1.1 7-8|0.0 5-6|0.0.0 3-4|0.0.1.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.643
# ::node	0	contrast-01	0-1
# ::node	0.0	live-01	7-8
# ::node	0.0.0	i	5-6
# ::node	0.0.1	bother-01	11-12
# ::node	0.0.1.0	great	3-4
# ::node	0.0.1.1	i	8-9
# ::node	0.0.1.2	hardly	10-11
# ::root	0	contrast-01
# ::edge	bother-01	ARG0	great	0.0.1	0.0.1.0	
# ::edge	bother-01	ARG1	i	0.0.1	0.0.1.1	
# ::edge	bother-01	mod	hardly	0.0.1	0.0.1.2	
# ::edge	contrast-01	ARG1	live-01	0	0.0	
# ::edge	live-01	ARG0	i	0.0	0.0.0	
# ::edge	live-01	ARG1	bother-01	0.0	0.0.1	
(c / contrast-01 
      :ARG1 (l / live-01 
            :ARG0 (i2 / i) 
            :ARG1 (b / bother-01 
                  :ARG0 (g / great) 
                  :ARG1 (i / i) 
                  :mod (h / hardly))))

# ::snt  piers was obviously not going to bother with this part of morrissey
# ::tok piers was obviously not going to bother with this part of morrissey
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.643
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt he doesnt bother with ordinary diy problems
# ::tok he doesnt bother with ordinary diy problems
# ::alignments 6-7|0.1 4-5|0.1.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.652
# ::node	0	bother-02	2-3
# ::node	0.0	he	0-1
# ::node	0.1	problem	6-7
# ::node	0.1.0	ordinary	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	he	0	0.0	
# ::edge	bother-02	ARG1	problem	0	0.1	
# ::edge	problem	mod	ordinary	0.1	0.1.0	
(b / bother-02 
      :ARG0 (h / he) 
      :ARG1 (p / problem 
            :mod (o / ordinary)))

# ::snt do not  bother adding sugar
# ::tok do not bother adding sugar
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.653
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt and arent bothering to do anything constructive about it
# ::tok and arent bothering to do anything constructive about it
# ::alignments 8-9|0.2 6-7|0 5-6|0.1 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.678
# ::node	0	constructive	6-7
# ::node	0.0	bother-01	2-3
# ::node	0.0.0	and	0-1
# ::node	0.1	anything	5-6
# ::node	0.2	it	8-9
# ::root	0	constructive
# ::edge	bother-01	ARG0	and	0.0	0.0.0	
# ::edge	bother-01	ARG1	constructive	0.0	0	
# ::edge	constructive	mod	anything	0	0.1	
# ::edge	constructive	topic	it	0	0.2	
(c / constructive 
      :ARG1-of (b / bother-01 
            :ARG0 (a2 / and)) 
      :mod (a / anything) 
      :topic (i / it))

# ::snt this however is such a public shiner i dont need to bother
# ::tok this however is such a public shiner i dont need to bother
# ::alignments 11-12|0 9-10|0.0 7-8|0.0.0 5-6|0.0.0.0 3-4|0.0.1 0-1|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.708
# ::node	0	bother-02	11-12
# ::node	0.0	need-01	9-10
# ::node	0.0.0	i	7-8
# ::node	0.0.0.0	public	5-6
# ::node	0.0.1	such	3-4
# ::node	0.0.1.0	this	0-1
# ::root	0	bother-02
(b / bother-02 
      :ARG1-of (n / need-01 
            :ARG0 (i / i 
                  :mod (p / public)) 
            :domain-of (s / such 
                  :domain (t / this))))

# ::snt sister catherine said these people who claim to be concerned about animals dont appear to be bothered about the welfare of the chickens at all
# ::tok sister catherine said these people who claim to be concerned about animals dont appear to be bothered about the welfare of the chickens at all
# ::alignments 24-25|0.0 22-23|0.1.2.0.0 19-20|0.1.2.0 16-17|0.1.2 13-14|0.1 11-12|0.1.1 9-10|0.1.0.0 6-7|0.1.0 2-3|0 0-1|0.2.0+0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.797
# ::node	0	say-01	2-3
# ::node	0.0	all	24-25
# ::node	0.1	appear-02	13-14
# ::node	0.1.0	claim-01	6-7
# ::node	0.1.0.0	concern-01	9-10
# ::node	0.1.1	animal	11-12
# ::node	0.1.2	bother-01	16-17
# ::node	0.1.2.0	welfare	19-20
# ::node	0.1.2.0.0	chicken	22-23
# ::node	0.2	have-rel-role-91	0-1
# ::node	0.2.0	sister	0-1
# ::root	0	say-01
# ::edge	appear-02	ARG0	claim-01	0.1	0.1.0	
# ::edge	appear-02	ARG1	animal	0.1	0.1.1	
# ::edge	appear-02	ARG2	bother-01	0.1	0.1.2	
# ::edge	bother-01	ARG0	welfare	0.1.2	0.1.2.0	
# ::edge	chicken	part	welfare	0.1.2.0.0	0.1.2.0	
# ::edge	claim-01	ARG1	concern-01	0.1.0	0.1.0.0	
# ::edge	have-rel-role-91	ARG1	say-01	0.2	0	
# ::edge	have-rel-role-91	ARG2	sister	0.2	0.2.0	
# ::edge	say-01	ARG0	all	0	0.0	
# ::edge	say-01	ARG1	appear-02	0	0.1	
(s / say-01 
      :ARG0 (a / all) 
      :ARG1 (a2 / appear-02 
            :ARG0 (c3 / claim-01 
                  :ARG1 (c2 / concern-01)) 
            :ARG1 (a3 / animal) 
            :ARG2 (b / bother-01 
                  :ARG0 (w / welfare 
                        :part-of (c / chicken)))) 
      :ARG1-of (h / have-rel-role-91 
            :ARG2 (s2 / sister)))

# ::snt should he lock up the house  irina said not to bother
# ::tok should he lock up the house irina said not to bother
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:45.798
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt even if lead levels in the atmosphere do not bother you i am sure you will find the fact that unleaded petrol is 15p cheaper and that diesel fuel boosts mpg by at least a third most interesting
# ::tok even if lead levels in the atmosphere do not bother you i am sure you will find the fact that unleaded petrol is 15p cheaper and that diesel fuel boosts mpg by at least a third most interesting
# ::alignments 37-38|0.4.0 36-37|0.4 30-31|0.1.0.1.0+0.1.0.1 29-30|0.1.0 28-29|0.1.0.0 27-28|0.1.0.0.0 25-26|0.1.0.2 24-25|0.1.0.2.0 21-22|0.1.0.2.0.1 18-19|0.1.0.2.0.0 14-15|0.2 11-12|0.3 10-11|0.1 9-10|0 6-7|0.0.0 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:46.407
# ::node	0	bother-02	9-10
# ::node	0.0	level	3-4
# ::node	0.0.0	atmosphere	6-7
# ::node	0.1	you	10-11
# ::node	0.1.0	boost-01	29-30
# ::node	0.1.0.0	fuel	28-29
# ::node	0.1.0.0.0	diesel-electric	27-28
# ::node	0.1.0.1	fuel-consumption-quantity	30-31
# ::node	0.1.0.1.0	mpg	30-31
# ::node	0.1.0.2	and	25-26
# ::node	0.1.0.2.0	cheap	24-25
# ::node	0.1.0.2.0.0	fact	18-19
# ::node	0.1.0.2.0.1	petrol	21-22
# ::node	0.2	you	14-15
# ::node	0.3	i	11-12
# ::node	0.4	most	36-37
# ::node	0.4.0	interesting	37-38
# ::root	0	bother-02
# ::edge	and	op1	cheap	0.1.0.2	0.1.0.2.0	
# ::edge	and	op2	boost-01	0.1.0.2	0.1.0	
# ::edge	boost-01	ARG0	fuel	0.1.0	0.1.0.0	
# ::edge	boost-01	ARG1	fuel-consumption-quantity	0.1.0	0.1.0.1	
# ::edge	boost-01	ARG2	you	0.1.0	0.1	
# ::edge	bother-02	ARG0	level	0	0.0	
# ::edge	bother-02	ARG1	you	0	0.1	
# ::edge	bother-02	ARG2	you	0	0.2	
# ::edge	bother-02	ARG4	i	0	0.3	
# ::edge	cheap	domain	petrol	0.1.0.2.0	0.1.0.2.0.1	
# ::edge	fact	degree	cheap	0.1.0.2.0.0	0.1.0.2.0	
# ::edge	fuel	mod	diesel-electric	0.1.0.0	0.1.0.0.0	
# ::edge	fuel-consumption-quantity	unit	mpg	0.1.0.1	0.1.0.1.0	
# ::edge	interesting	degree	most	0.4.0	0.4	
# ::edge	level	mod	atmosphere	0.0	0.0.0	
# ::edge	most	op1	bother-02	0.4	0	
(b2 / bother-02 
      :ARG0 (l / level 
            :mod (a2 / atmosphere)) 
      :ARG1 (y2 / you 
            :ARG2-of (b / boost-01 
                  :ARG0 (f2 / fuel 
                        :mod (d / diesel-electric)) 
                  :ARG1 (f / fuel-consumption-quantity 
                        :unit (m2 / mpg)) 
                  :op-of (a / and 
                        :op1 (c / cheap 
                              :degree-of (f3 / fact) 
                              :domain (p / petrol))))) 
      :ARG2 (y / you) 
      :ARG4 (i2 / i) 
      :op-of (m / most 
            :degree-of (i / interesting)))

# ::snt that stuff doesnt bother me because i was born into it and i think its worthless but if i were you thats what id be worrying about dash
# ::tok that stuff doesnt bother me because i was born into it and i think its worthless but if i were you thats what id be worrying about dash
# ::alignments 25-26|0.2.1.0.0 23-24|0.2.1.0.0.0.1 21-22|0.2.1.0.0.0 20-21|0.2.1.0.0.0.0 18-19|0.0 16-17|0 15-16|0.1 13-14|0.2.1 12-13|0.2.1.0 11-12|0.2 10-11|0.2.0.1.0.1 8-9|0.2.0.1.0 6-7|0.2.0.1.0.0 5-6|0.2.0.1 3-4|0.2.0 1-2|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:47.137
# ::node	0	contrast-01	16-17
# ::node	0.0	i	18-19
# ::node	0.1	worth	15-16
# ::node	0.2	and	11-12
# ::node	0.2.0	bother-02	3-4
# ::node	0.2.0.0	stuff	1-2
# ::node	0.2.0.1	cause-01	5-6
# ::node	0.2.0.1.0	bear-02	8-9
# ::node	0.2.0.1.0.0	i	6-7
# ::node	0.2.0.1.0.1	it	10-11
# ::node	0.2.1	think-01	13-14
# ::node	0.2.1.0	i	12-13
# ::node	0.2.1.0.0	worry-02	25-26
# ::node	0.2.1.0.0.0	that	21-22
# ::node	0.2.1.0.0.0.0	you	20-21
# ::node	0.2.1.0.0.0.1	id	23-24
# ::root	0	contrast-01
# ::edge	and	op1	think-01	0.2	0.2.1	
# ::edge	bear-02	ARG1	i	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	bear-02	ARG2	it	0.2.0.1.0	0.2.0.1.0.1	
# ::edge	bother-02	ARG0	stuff	0.2.0	0.2.0.0	
# ::edge	bother-02	ARG1	and	0.2.0	0.2	
# ::edge	cause-01	ARG0	bear-02	0.2.0.1	0.2.0.1.0	
# ::edge	cause-01	ARG1	bother-02	0.2.0.1	0.2.0	
# ::edge	contrast-01	ARG0	i	0	0.0	
# ::edge	contrast-01	ARG1	worth	0	0.1	
# ::edge	contrast-01	ARG2	and	0	0.2	
# ::edge	id	source	that	0.2.1.0.0.0.1	0.2.1.0.0.0	
# ::edge	that	mod	you	0.2.1.0.0.0	0.2.1.0.0.0.0	
# ::edge	think-01	ARG0	i	0.2.1	0.2.1.0	
# ::edge	worry-02	ARG0	i	0.2.1.0.0	0.2.1.0	
# ::edge	worry-02	ARG1	that	0.2.1.0.0	0.2.1.0.0.0	
(c / contrast-01 
      :ARG0 (i2 / i) 
      :ARG1 (w2 / worth) 
      :ARG2 (a / and 
            :ARG1-of (b2 / bother-02 
                  :ARG0 (s / stuff) 
                  :ARG1-of (c2 / cause-01 
                        :ARG0 (b / bear-02 
                              :ARG1 (i5 / i) 
                              :ARG2 (i4 / it)))) 
            :op1 (t2 / think-01 
                  :ARG0 (i3 / i 
                        :ARG0-of (w / worry-02 
                              :ARG1 (t / that 
                                    :mod (y / you) 
                                    :source-of (i / id)))))))

# ::snt whatever was bothering him was gnawing at him as he ate
# ::tok whatever was bothering him was gnawing at him as he ate
# ::alignments 9-10|0.0 2-3|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:47.147
# ::node	0	bother-01	2-3
# ::node	0.0	he	9-10
# ::node	0.1	whatever	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG0	he	0	0.0	
# ::edge	bother-01	ARG1	whatever	0	0.1	
(b / bother-01 
      :ARG0 (h / he) 
      :ARG1 (w / whatever))

# ::snt  because if its a big drag for you to come from like shepherds hill to chelsea then dont bother and next time ill go out to dinner with the others okay
# ::tok because if its a big drag for you to come from like shepherds hill to chelsea then dont bother and next time ill go out to dinner with the others okay
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:47.147
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt the door to the private garden is open but do we bother to go in
# ::tok the door to the private garden is open but do we bother to go in
# ::alignments 11-12|0.1 10-11|0.1.0 8-9|0 5-6|0.0 4-5|0.0.0 1-2|0.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:47.210
# ::node	0	contrast-01	8-9
# ::node	0.0	garden	5-6
# ::node	0.0.0	private	4-5
# ::node	0.1	bother-02	11-12
# ::node	0.1.0	we	10-11
# ::node	0.1.1	door	1-2
# ::root	0	contrast-01
# ::edge	bother-02	ARG0	we	0.1	0.1.0	
# ::edge	bother-02	ARG1	door	0.1	0.1.1	
# ::edge	contrast-01	ARG0	garden	0	0.0	
# ::edge	contrast-01	ARG2	bother-02	0	0.1	
# ::edge	garden	mod	private	0.0	0.0.0	
(c / contrast-01 
      :ARG0 (g / garden 
            :mod (p / private)) 
      :ARG2 (b / bother-02 
            :ARG0 (w / we) 
            :ARG1 (d / door)))

# ::snt criminals arent too bothered about the vocal soundum problems they cause victims in the commission for their crime but vocal soundum as a general rule vocal soundum they do draw a line somewhere but i think to vocal soundum rob a lady who is vocal soundum presumably grieving over the loss of a relative at the graveside has got to be plumbing some new depth of vocal soundum depravity and vocal soundum ill expect the vocal soundum vast majority of the citizens of banbury will think similarly
# ::tok criminals arent too bothered about the vocal soundum problems they cause victims in the commission for their crime but vocal soundum as a general rule vocal soundum they do draw a line somewhere but i think to vocal soundum rob a lady who is vocal soundum presumably grieving over the loss of a relative at the graveside has got to be plumbing some new depth of vocal soundum depravity and vocal soundum ill expect the vocal soundum vast majority of the citizens of banbury will think similarly
# ::alignments 85-86|0.2.0.3.0.0 81-82|0.2.0.3.0.0.0.2 78-79|0.2.0.3.0.0.0 77-78|0.2.0.3.0.0.0.0 75-76|0.2.0.3.0.0.0.1 73-74|0.2.0.3.0 72-73|0.2.0.3.0.1 70-71|0.2.0.3.2 69-70|0.2.0.3 66-67|0.2.0.3.0.0.1 63-64|0.2.0.3.0.0.2 62-63|0.2.0.3.0.1.1 53-54|0.2.0.3.0.1.0 46-47|0.2.0.3.1.2.1.0.2.0.0 44-45|0.2.0.3.1.2.0 41-42|0.2.0.1.0 37-38|0.2.0.3.1.1 35-36|0.2.0.3.1 34-35|0.2.0.3.1.0 33-34|0.2.0.3.1.2 32-33|0.2.0.3.1.2.1 31-32|0.2.0.3.1.2.1.0.1 29-30|0.2.0.3.1.2.1.0 27-28|0.2.0.3.1.2.1.0.0 25-26|0.2.0.3.1.2.1.0.2 24-25|0.2.0.3.1.2.1.0.2.0 23-24|0.2.0.3.1.2.1.0.2.0.1 19-20|0.2.0.1.1 18-19|0.2.0.1 17-18|0.1.0.0 14-15|0.1.0 11-12|0.1 10-11|0 9-10|0.0 8-9|0.2 6-7|0.3 3-4|0.2.0 2-3|0.2.0.2 0-1|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:51.030
# ::node	0	cause-01	10-11
# ::node	0.0	they	9-10
# ::node	0.1	victim	11-12
# ::node	0.1.0	commission	14-15
# ::node	0.1.0.0	crime	17-18
# ::node	0.2	problem	8-9
# ::node	0.2.0	bother-01	3-4
# ::node	0.2.0.0	criminal	0-1
# ::node	0.2.0.1	contrast-01	18-19
# ::node	0.2.0.1.0	lady	41-42
# ::node	0.2.0.1.1	vocal	19-20
# ::node	0.2.0.2	too	2-3
# ::node	0.2.0.3	and	69-70
# ::node	0.2.0.3.0	expect-01	73-74
# ::node	0.2.0.3.0.0	think-01	85-86
# ::node	0.2.0.3.0.0.0	majority	78-79
# ::node	0.2.0.3.0.0.0.0	vast	77-78
# ::node	0.2.0.3.0.0.0.1	vocal	75-76
# ::node	0.2.0.3.0.0.0.2	citizen	81-82
# ::node	0.2.0.3.0.0.1	vocal	66-67
# ::node	0.2.0.3.0.0.2	new	63-64
# ::node	0.2.0.3.0.1	ill-41	72-73
# ::node	0.2.0.3.0.1.0	relative	53-54
# ::node	0.2.0.3.0.1.1	some	62-63
# ::node	0.2.0.3.1	think-01	35-36
# ::node	0.2.0.3.1.0	i	34-35
# ::node	0.2.0.3.1.1	vocal	37-38
# ::node	0.2.0.3.1.2	contrast-01	33-34
# ::node	0.2.0.3.1.2.0	vocal	44-45
# ::node	0.2.0.3.1.2.1	somewhere	32-33
# ::node	0.2.0.3.1.2.1.0	draw-02	29-30
# ::node	0.2.0.3.1.2.1.0.0	they	27-28
# ::node	0.2.0.3.1.2.1.0.1	line	31-32
# ::node	0.2.0.3.1.2.1.0.2	vocal	25-26
# ::node	0.2.0.3.1.2.1.0.2.0	rule-03	24-25
# ::node	0.2.0.3.1.2.1.0.2.0.0	presume-01	46-47
# ::node	0.2.0.3.1.2.1.0.2.0.1	general	23-24
# ::node	0.2.0.3.2	vocal	70-71
# ::node	0.3	vocal	6-7
# ::root	0	cause-01
# ::edge	and	op1	bother-01	0.2.0.3	0.2.0	
# ::edge	and	op2	think-01	0.2.0.3	0.2.0.3.1	
# ::edge	and	op3	vocal	0.2.0.3	0.2.0.3.2	
# ::edge	bother-01	ARG0	criminal	0.2.0	0.2.0.0	
# ::edge	bother-01	ARG1	problem	0.2.0	0.2	
# ::edge	bother-01	degree	too	0.2.0	0.2.0.2	
# ::edge	cause-01	ARG0	they	0	0.0	
# ::edge	cause-01	ARG1	victim	0	0.1	
# ::edge	cause-01	ARG2	problem	0	0.2	
# ::edge	cause-01	mod	vocal	0	0.3	
# ::edge	commission	poss	crime	0.1.0	0.1.0.0	
# ::edge	contrast-01	ARG0	lady	0.2.0.1	0.2.0.1.0	
# ::edge	contrast-01	ARG0	vocal	0.2.0.3.1.2	0.2.0.3.1.2.0	
# ::edge	contrast-01	ARG1	bother-01	0.2.0.1	0.2.0	
# ::edge	contrast-01	ARG1	somewhere	0.2.0.3.1.2	0.2.0.3.1.2.1	
# ::edge	contrast-01	ARG2	think-01	0.2.0.3.1.2	0.2.0.3.1	
# ::edge	contrast-01	ARG2	vocal	0.2.0.1	0.2.0.1.1	
# ::edge	draw-02	ARG0	they	0.2.0.3.1.2.1.0	0.2.0.3.1.2.1.0.0	
# ::edge	draw-02	ARG1	line	0.2.0.3.1.2.1.0	0.2.0.3.1.2.1.0.1	
# ::edge	draw-02	ARG2	vocal	0.2.0.3.1.2.1.0	0.2.0.3.1.2.1.0.2	
# ::edge	draw-02	location	somewhere	0.2.0.3.1.2.1.0	0.2.0.3.1.2.1	
# ::edge	expect-01	ARG0	and	0.2.0.3.0	0.2.0.3	
# ::edge	expect-01	ARG1	think-01	0.2.0.3.0	0.2.0.3.0.0	
# ::edge	expect-01	mod	ill-41	0.2.0.3.0	0.2.0.3.0.1	
# ::edge	ill-41	ARG0	relative	0.2.0.3.0.1	0.2.0.3.0.1.0	
# ::edge	ill-41	ARG1	some	0.2.0.3.0.1	0.2.0.3.0.1.1	
# ::edge	majority	degree	vast	0.2.0.3.0.0.0	0.2.0.3.0.0.0.0	
# ::edge	majority	mod	vocal	0.2.0.3.0.0.0	0.2.0.3.0.0.0.1	
# ::edge	majority	topic	citizen	0.2.0.3.0.0.0	0.2.0.3.0.0.0.2	
# ::edge	new	op1	think-01	0.2.0.3.0.0.2	0.2.0.3.0.0	
# ::edge	rule-03	ARG0	vocal	0.2.0.3.1.2.1.0.2.0	0.2.0.3.1.2.1.0.2	
# ::edge	rule-03	ARG1	presume-01	0.2.0.3.1.2.1.0.2.0	0.2.0.3.1.2.1.0.2.0.0	
# ::edge	rule-03	manner	general	0.2.0.3.1.2.1.0.2.0	0.2.0.3.1.2.1.0.2.0.1	
# ::edge	think-01	ARG0	i	0.2.0.3.1	0.2.0.3.1.0	
# ::edge	think-01	ARG0	majority	0.2.0.3.0.0	0.2.0.3.0.0.0	
# ::edge	think-01	ARG1	vocal	0.2.0.3.0.0	0.2.0.3.0.0.1	
# ::edge	think-01	ARG1	vocal	0.2.0.3.1	0.2.0.3.1.1	
# ::edge	victim	poss	commission	0.1	0.1.0	
(c6 / cause-01 
      :ARG0 (t4 / they) 
      :ARG1 (v9 / victim 
            :poss (c5 / commission 
                  :poss (c4 / crime))) 
      :ARG2 (p2 / problem 
            :ARG1-of (b / bother-01 
                  :ARG0 (c7 / criminal) 
                  :ARG1-of (c3 / contrast-01 
                        :ARG0 (l / lady) 
                        :ARG2 (v8 / vocal)) 
                  :degree (t5 / too) 
                  :op-of (a / and 
                        :ARG0-of (e / expect-01 
                              :ARG1 (t / think-01 
                                    :ARG0 (m / majority 
                                          :degree (v / vast) 
                                          :mod (v2 / vocal) 
                                          :topic (c / citizen)) 
                                    :ARG1 (v4 / vocal) 
                                    :op-of (n / new)) 
                              :mod (i / ill-41 
                                    :ARG0 (r / relative) 
                                    :ARG1 (s / some))) 
                        :op1 (t2 / think-01 
                              :ARG0 (i2 / i) 
                              :ARG1 (v6 / vocal) 
                              :ARG2-of (c2 / contrast-01 
                                    :ARG0 (v5 / vocal) 
                                    :ARG1 (s2 / somewhere 
                                          :location-of (d / draw-02 
                                                :ARG0 (t3 / they) 
                                                :ARG1 (l2 / line) 
                                                :ARG2 (v7 / vocal 
                                                      :ARG0-of (r2 / rule-03 
                                                            :ARG1 (p / presume-01) 
                                                            :manner (g / general))))))) 
                        :op2 (v3 / vocal)))) 
      :mod (v10 / vocal))

# ::snt asked what he thought of the united nations mr maendo said he was not sure but since the south african army left no one bothered to take his people to hospital when they were sick
# ::tok asked what he thought of the united nations mr maendo said he was not sure but since the south african army left no one bothered to take his people to hospital when they were sick
# ::alignments 34-35|0.1.0.0 32-33|0.1.0 30-31|0.1.1.1 24-25|0.1 22-23|0.0.0.0.0 20-21|0.1.1 18-19|0.1.1.0 16-17|0.0.1 15-16|0 11-12|0.0.0.0.1.0 10-11|0.0 7-8|0.0.0.0.2 6-7|0.0.0.0.2.0 3-4|0.0.0.0 2-3|0.0.0 0-1|0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:51.354
# ::node	0	contrast-01	15-16
# ::node	0.0	say-01	10-11
# ::node	0.0.0	he	2-3
# ::node	0.0.0.0	think-01	3-4
# ::node	0.0.0.0.0	-	22-23
# ::node	0.0.0.0.1	ask-02	0-1
# ::node	0.0.0.0.1.0	he	11-12
# ::node	0.0.0.0.2	nation	7-8
# ::node	0.0.0.0.2.0	unite-01	6-7
# ::node	0.0.1	since	16-17
# ::node	0.1	bother-01	24-25
# ::node	0.1.0	they	32-33
# ::node	0.1.0.0	sick	34-35
# ::node	0.1.1	army	20-21
# ::node	0.1.1.0	south	18-19
# ::node	0.1.1.1	hospital	30-31
# ::root	0	contrast-01
# ::edge	army	mod	south	0.1.1	0.1.1.0	
# ::edge	army	part	hospital	0.1.1	0.1.1.1	
# ::edge	ask-02	ARG0	he	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	ask-02	ARG1	think-01	0.0.0.0.1	0.0.0.0	
# ::edge	bother-01	ARG0	they	0.1	0.1.0	
# ::edge	bother-01	ARG1	army	0.1	0.1.1	
# ::edge	contrast-01	ARG1	say-01	0	0.0	
# ::edge	contrast-01	ARG2	bother-01	0	0.1	
# ::edge	say-01	ARG0	he	0.0	0.0.0	
# ::edge	say-01	ARG1	since	0.0	0.0.1	
# ::edge	sick	domain	they	0.1.0.0	0.1.0	
# ::edge	think-01	ARG0	he	0.0.0.0	0.0.0	
# ::edge	think-01	ARG1	-	0.0.0.0	0.0.0.0.0	
# ::edge	think-01	location	nation	0.0.0.0	0.0.0.0.2	
# ::edge	unite-01	ARG1	nation	0.0.0.0.2.0	0.0.0.0.2	
(c / contrast-01 
      :ARG1 (s4 / say-01 
            :ARG0 (h3 / he 
                  :ARG0-of (t2 / think-01 
                        :ARG1 (- / -) 
                        :ARG1-of (a2 / ask-02 
                              :ARG0 (h2 / he)) 
                        :location (n / nation 
                              :ARG1-of (u / unite-01)))) 
            :ARG1 (s3 / since)) 
      :ARG2 (b / bother-01 
            :ARG0 (t / they 
                  :domain-of (s / sick)) 
            :ARG1 (a / army 
                  :mod (s2 / south) 
                  :part (h / hospital))))

# ::snt according to reliable sources the tate gallery greeted the expansion of the saatchi collection with a mixture of relief and complacency it was felt that it would inevitably one day be bequeathed to the nation and since that was so the underfunded tate gallery need not bother to acquire major work in the same area as the saatchis
# ::tok according to reliable sources the tate gallery greeted the expansion of the saatchi collection with a mixture of relief and complacency it was felt that it would inevitably one day be bequeathed to the nation and since that was so the underfunded tate gallery need not bother to acquire major work in the same area as the saatchis
# ::alignments 54-55|0.0.1 53-54|0.0.1.0 49-50|0.1.1.0.0 48-49|0.0 46-47|0 44-45|0.1 41-42|0.1.1.0 39-40|0.1.1 36-37|0.1.0.1 35-36|0.1.0 34-35|0.1.0.0.1.0.1.0.0 29-30|0.1.0.0.1.0.0 27-28|0.0.0 25-26|0.1.0.0.0 23-24|0.1.0.0 21-22|0.1.0.0.1 20-21|0.1.0.0.2.1 19-20|0.1.0.0.2 18-19|0.1.0.0.2.0 13-14|0.1.0.0.1.0.1.0 9-10|0.1.0.0.1.0.1 7-8|0.1.0.0.1.0 3-4|0.1.0.0.1.0.2 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:52.460
# ::node	0	bother-02	46-47
# ::node	0.0	acquire-01	48-49
# ::node	0.0.0	inevitable	27-28
# ::node	0.0.1	area	54-55
# ::node	0.0.1.0	same-41	53-54
# ::node	0.1	need-01	44-45
# ::node	0.1.0	and	35-36
# ::node	0.1.0.0	feel-01	23-24
# ::node	0.1.0.0.0	it	25-26
# ::node	0.1.0.0.1	it	21-22
# ::node	0.1.0.0.1.0	greet-01	7-8
# ::node	0.1.0.0.1.0.0	day	29-30
# ::node	0.1.0.0.1.0.1	expand-01	9-10
# ::node	0.1.0.0.1.0.1.0	collect-01	13-14
# ::node	0.1.0.0.1.0.1.0.0	nation	34-35
# ::node	0.1.0.0.1.0.2	source	3-4
# ::node	0.1.0.0.2	and	19-20
# ::node	0.1.0.0.2.0	relieve-01	18-19
# ::node	0.1.0.0.2.1	complacency	20-21
# ::node	0.1.0.1	since	36-37
# ::node	0.1.1	so	39-40
# ::node	0.1.1.0	underfund-00	41-42
# ::node	0.1.1.0.0	major	49-50
# ::root	0	bother-02
# ::edge	acquire-01	ARG1	inevitable	0.0	0.0.0	
# ::edge	acquire-01	location	area	0.0	0.0.1	
# ::edge	and	op1	feel-01	0.1.0	0.1.0.0	
# ::edge	and	op1	relieve-01	0.1.0.0.2	0.1.0.0.2.0	
# ::edge	and	op2	complacency	0.1.0.0.2	0.1.0.0.2.1	
# ::edge	and	op2	since	0.1.0	0.1.0.1	
# ::edge	bother-02	ARG1	acquire-01	0	0.0	
# ::edge	collect-01	ARG1	nation	0.1.0.0.1.0.1.0	0.1.0.0.1.0.1.0.0	
# ::edge	expand-01	ARG1	collect-01	0.1.0.0.1.0.1	0.1.0.0.1.0.1.0	
# ::edge	feel-01	ARG0	it	0.1.0.0	0.1.0.0.0	
# ::edge	feel-01	ARG1	it	0.1.0.0	0.1.0.0.1	
# ::edge	feel-01	time	and	0.1.0.0	0.1.0.0.2	
# ::edge	greet-01	ARG0	day	0.1.0.0.1.0	0.1.0.0.1.0.0	
# ::edge	greet-01	ARG1	expand-01	0.1.0.0.1.0	0.1.0.0.1.0.1	
# ::edge	greet-01	ARG2	it	0.1.0.0.1.0	0.1.0.0.1	
# ::edge	greet-01	location	source	0.1.0.0.1.0	0.1.0.0.1.0.2	
# ::edge	need-01	ARG1	and	0.1	0.1.0	
# ::edge	need-01	ARG2	bother-02	0.1	0	
# ::edge	need-01	time	so	0.1	0.1.1	
# ::edge	same-41	ARG1	area	0.0.1.0	0.0.1	
# ::edge	underfund-00	ARG0	so	0.1.1.0	0.1.1	
# ::edge	underfund-00	ARG1	major	0.1.1.0	0.1.1.0.0	
(b / bother-02 
      :ARG1 (a2 / acquire-01 
            :ARG1 (i / inevitable) 
            :location (a / area 
                  :ARG1-of (s / same-41))) 
      :ARG2-of (n / need-01 
            :ARG1 (a3 / and 
                  :op1 (f / feel-01 
                        :ARG0 (i2 / it) 
                        :ARG1 (i3 / it 
                              :ARG2-of (g / greet-01 
                                    :ARG0 (d / day) 
                                    :ARG1 (e / expand-01 
                                          :ARG1 (c2 / collect-01 
                                                :ARG1 (n2 / nation))) 
                                    :location (s4 / source))) 
                        :time (a4 / and 
                              :op1 (r / relieve-01) 
                              :op2 (c / complacency))) 
                  :op2 (s3 / since)) 
            :time (s2 / so 
                  :ARG0-of (u / underfund-00 
                        :ARG1 (m / major)))))

# ::snt 3bn and a growth rate of 15 per cent why should itv need to bother with what at best will remain a marginal financial contribution
# ::tok 3bn and a growth rate of 15 per cent why should itv need to bother with what at best will remain a marginal financial contribution
# ::alignments 24-25|0.1.0.0 23-24|0.1.0.0.2 20-21|0.1.0.0.1 14-15|0 12-13|0.2 10-11|0.2.0 8-9|0.1.0.0.0.0+0.1.0.0.0 6-7|0.0 4-5|0.1 3-4|0.1.0 1-2|0.1.0.0.3 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:52.570
# ::node	0	bother-02	14-15
# ::node	0.0	15	6-7
# ::node	0.1	rate	4-5
# ::node	0.1.0	grow-01	3-4
# ::node	0.1.0.0	contribute-01	24-25
# ::node	0.1.0.0.0	monetary-quantity	8-9
# ::node	0.1.0.0.0.0	cent	8-9
# ::node	0.1.0.0.1	remain-01	20-21
# ::node	0.1.0.0.2	finance	23-24
# ::node	0.1.0.0.3	and	1-2
# ::node	0.2	need-01	12-13
# ::node	0.2.0	recommend-01	10-11
# ::root	0	bother-02
# ::edge	and	op1	contribute-01	0.1.0.0.3	0.1.0.0	
# ::edge	bother-02	ARG0	15	0	0.0	
# ::edge	bother-02	ARG1	rate	0	0.1	
# ::edge	contribute-01	ARG1	monetary-quantity	0.1.0.0	0.1.0.0.0	
# ::edge	contribute-01	ARG2	grow-01	0.1.0.0	0.1.0	
# ::edge	contribute-01	mod	finance	0.1.0.0	0.1.0.0.2	
# ::edge	monetary-quantity	unit	cent	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	need-01	ARG1	bother-02	0.2	0	
# ::edge	rate	mod	grow-01	0.1	0.1.0	
# ::edge	recommend-01	ARG1	need-01	0.2.0	0.2	
# ::edge	remain-01	ARG1	contribute-01	0.1.0.0.1	0.1.0.0	
(b / bother-02 
      :ARG0 15 
      :ARG1 (r3 / rate 
            :mod (g / grow-01 
                  :ARG2-of (c / contribute-01 
                        :ARG1 (m / monetary-quantity 
                              :unit (c2 / cent)) 
                        :ARG1-of (r / remain-01) 
                        :mod (f / finance) 
                        :op-of (a / and)))) 
      :ARG1-of (n / need-01 
            :ARG1-of (r2 / recommend-01)))

# ::snt mrs skudder said were the guinea pigs but theyre not even bothering to put us under the microscope
# ::tok mrs skudder said were the guinea pigs but theyre not even bothering to put us under the microscope
# ::alignments 11-12|0.0.0 7-8|0.0 2-3|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:52.586
# ::node	0	say-01	2-3
# ::node	0.0	contrast-01	7-8
# ::node	0.0.0	bother-01	11-12
# ::root	0	say-01
(s / say-01 
      :ARG1-of (c / contrast-01 
            :ARG2 (b / bother-01)))

# ::snt why bother about the last trifles
# ::tok why bother about the last trifles
# ::alignments 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:52.591
# ::node	0	bother-02	1-2
# ::node	0.0	last	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG1	last	0	0.0	
(b / bother-02 
      :ARG1 (l / last))

# ::snt this is the confessional only you neednt bother with your confession as i know it all
# ::tok this is the confessional only you neednt bother with your confession as i know it all
# ::alignments 15-16|0.2.0.0.0.0 14-15|0.2.0.0.0 13-14|0.2.0.0 12-13|0.2.0 10-11|0.2 7-8|0 5-6|0.0 4-5|0.3 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:52.711
# ::node	0	bother-02	7-8
# ::node	0.0	you	5-6
# ::node	0.1	this	0-1
# ::node	0.2	confess-01	10-11
# ::node	0.2.0	i	12-13
# ::node	0.2.0.0	know-01	13-14
# ::node	0.2.0.0.0	it	14-15
# ::node	0.2.0.0.0.0	all	15-16
# ::node	0.3	only	4-5
# ::root	0	bother-02
# ::edge	bother-02	ARG0	you	0	0.0	
# ::edge	bother-02	ARG1	this	0	0.1	
# ::edge	bother-02	ARG2	confess-01	0	0.2	
# ::edge	bother-02	mod	only	0	0.3	
# ::edge	confess-01	ARG0	i	0.2	0.2.0	
# ::edge	it	quant	all	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	know-01	ARG0	i	0.2.0.0	0.2.0	
# ::edge	know-01	ARG1	it	0.2.0.0	0.2.0.0.0	
(b / bother-02 
      :ARG0 (y / you) 
      :ARG1 (t / this) 
      :ARG2 (c / confess-01 
            :ARG0 (i2 / i 
                  :ARG0-of (k / know-01 
                        :ARG1 (i / it 
                              :quant (a / all))))) 
      :mod (o / only))

# ::snt  those labels have never bothered miles davis much either contemptuous as he is of anything but the word music
# ::tok those labels have never bothered miles davis much either contemptuous as he is of anything but the word music
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:52.712
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt gower kept him on the knife edge then challenged him on another front david what bothers you about my idea is that you wish youd thought of it yourself
# ::tok gower kept him on the knife edge then challenged him on another front david what bothers you about my idea is that you wish youd thought of it yourself
# ::alignments 27-28|0.1 25-26|0 23-24|0.0.0 22-23|0.0 19-20|0.0.0.0 16-17|0.0.0.0.0.0 15-16|0.0.0.0.0 12-13|0.0.1 11-12|0.0.0.1.0 8-9|0.0.0.1.1 7-8|0.0.0.1.1.1 5-6|0.0.0.1.1.0 1-2|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:53.040
# ::node	0	think-01	25-26
# ::node	0.0	you	22-23
# ::node	0.0.0	wish-01	23-24
# ::node	0.0.0.0	idea	19-20
# ::node	0.0.0.0.0	bother-01	15-16
# ::node	0.0.0.0.0.0	you	16-17
# ::node	0.0.0.1	keep-01	1-2
# ::node	0.0.0.1.0	another	11-12
# ::node	0.0.0.1.1	challenge-01	8-9
# ::node	0.0.0.1.1.0	knife	5-6
# ::node	0.0.0.1.1.1	then	7-8
# ::node	0.0.1	front	12-13
# ::node	0.1	it	27-28
# ::root	0	think-01
# ::edge	bother-01	ARG1	you	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	bother-01	ARG2	idea	0.0.0.0.0	0.0.0.0	
# ::edge	challenge-01	ARG1	knife	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	challenge-01	time	then	0.0.0.1.1	0.0.0.1.1.1	
# ::edge	front	op1	you	0.0.1	0.0	
# ::edge	keep-01	ARG0	another	0.0.0.1	0.0.0.1.0	
# ::edge	keep-01	ARG1	wish-01	0.0.0.1	0.0.0	
# ::edge	keep-01	purpose	challenge-01	0.0.0.1	0.0.0.1.1	
# ::edge	think-01	ARG0	you	0	0.0	
# ::edge	think-01	ARG1	it	0	0.1	
# ::edge	wish-01	ARG0	you	0.0.0	0.0	
# ::edge	wish-01	ARG1	idea	0.0.0	0.0.0.0	
(t / think-01 
      :ARG0 (y / you 
            :ARG0-of (w / wish-01 
                  :ARG1 (i2 / idea 
                        :ARG2-of (b / bother-01 
                              :ARG1 (y2 / you))) 
                  :ARG1-of (k2 / keep-01 
                        :ARG0 (a / another) 
                        :purpose (c / challenge-01 
                              :ARG1 (k / knife) 
                              :time (t2 / then)))) 
            :op-of (f / front)) 
      :ARG1 (i / it))

# ::snt this bothers him
# ::tok this bothers him
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:53.044
# ::node	0	bother-01	1-2
# ::node	0.0	this	0-1
# ::root	0	bother-01
# ::edge	bother-01	ARG0	this	0	0.0	
(b / bother-01 
      :ARG0 (t / this))

# ::snt it reads like masefield on a very bad day and one uses the word reads with caution since few people in recent times except lewis enthusiasts anxious to have read their way through the entire canon can ever have bothered to press on with dymer
# ::tok it reads like masefield on a very bad day and one uses the word reads with caution since few people in recent times except lewis enthusiasts anxious to have read their way through the entire canon can ever have bothered to press on with dymer
# ::alignments 41-42|0.0.0 39-40|0.0 37-38|0.0.2 36-37|0 34-35|0.0.1.0.0.1.0 31-32|0.0.1.0.0.0.0 29-30|0.0.1.0.0.0 26-27|0.0.1.0.0.0.1 23-24|0.0.1.0.0.1.3 21-22|0.0.1.0.0.1.3.0 18-19|0.0.1.0.0.1.1.0 17-18|0.0.1 14-15|0.0.1.0 13-14|0.0.1.0.0 11-12|0.0.1.0.0.1 9-10|0.0.1.0.0.1.2 8-9|0.0.1.0.0.1.2.0 7-8|0.0.1.0.0.1.2.0.0 6-7|0.0.1.0.0.1.2.0.0.0 1-2|0.0.1.0.0.1.1 0-1|0.0.1.0.0.1.1.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:53.351
# ::node	0	possible	36-37
# ::node	0.0	bother-01	39-40
# ::node	0.0.0	press	41-42
# ::node	0.0.1	since	17-18
# ::node	0.0.1.0	read-01	14-15
# ::node	0.0.1.0.0	word	13-14
# ::node	0.0.1.0.0.0	read-01	29-30
# ::node	0.0.1.0.0.0.0	way	31-32
# ::node	0.0.1.0.0.0.1	anxious	26-27
# ::node	0.0.1.0.0.1	use-01	11-12
# ::node	0.0.1.0.0.1.0	entire	34-35
# ::node	0.0.1.0.0.1.1	read-01	1-2
# ::node	0.0.1.0.0.1.1.0	few	18-19
# ::node	0.0.1.0.0.1.1.1	it	0-1
# ::node	0.0.1.0.0.1.2	and	9-10
# ::node	0.0.1.0.0.1.2.0	day	8-9
# ::node	0.0.1.0.0.1.2.0.0	bad	7-8
# ::node	0.0.1.0.0.1.2.0.0.0	very	6-7
# ::node	0.0.1.0.0.1.3	except-00	23-24
# ::node	0.0.1.0.0.1.3.0	recent	21-22
# ::node	0.0.2	ever	37-38
# ::root	0	possible
# ::edge	and	op1	day	0.0.1.0.0.1.2	0.0.1.0.0.1.2.0	
# ::edge	and	op2	use-01	0.0.1.0.0.1.2	0.0.1.0.0.1	
# ::edge	anxious	domain	read-01	0.0.1.0.0.0.1	0.0.1.0.0.0	
# ::edge	bad	degree	very	0.0.1.0.0.1.2.0.0	0.0.1.0.0.1.2.0.0.0	
# ::edge	bother-01	ARG1	press	0.0	0.0.0	
# ::edge	bother-01	time	ever	0.0	0.0.2	
# ::edge	day	mod	bad	0.0.1.0.0.1.2.0	0.0.1.0.0.1.2.0.0	
# ::edge	except-00	ARG1	recent	0.0.1.0.0.1.3	0.0.1.0.0.1.3.0	
# ::edge	possible	domain	bother-01	0	0.0	
# ::edge	read-01	ARG0	few	0.0.1.0.0.1.1	0.0.1.0.0.1.1.0	
# ::edge	read-01	ARG0	word	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	read-01	ARG1	it	0.0.1.0.0.1.1	0.0.1.0.0.1.1.1	
# ::edge	read-01	ARG1	way	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	read-01	ARG1	word	0.0.1.0	0.0.1.0.0	
# ::edge	read-01	condition	use-01	0.0.1.0.0.1.1	0.0.1.0.0.1	
# ::edge	read-01	time	since	0.0.1.0	0.0.1	
# ::edge	since	op1	bother-01	0.0.1	0.0	
# ::edge	use-01	ARG0	entire	0.0.1.0.0.1	0.0.1.0.0.1.0	
# ::edge	use-01	ARG1	word	0.0.1.0.0.1	0.0.1.0.0	
# ::edge	use-01	time	except-00	0.0.1.0.0.1	0.0.1.0.0.1.3	
(p2 / possible 
      :domain (b / bother-01 
            :ARG1 (p / press) 
            :op-of (s / since 
                  :time-of (r3 / read-01 
                        :ARG1 (w2 / word 
                              :ARG0-of (r / read-01 
                                    :ARG1 (w / way) 
                                    :domain-of (a / anxious)) 
                              :ARG1-of (u / use-01 
                                    :ARG0 (e2 / entire) 
                                    :condition-of (r4 / read-01 
                                          :ARG0 (f / few) 
                                          :ARG1 (i / it)) 
                                    :op-of (a2 / and 
                                          :op1 (d / day 
                                                :mod (b2 / bad 
                                                      :degree (v / very)))) 
                                    :time (e3 / except-00 
                                          :ARG1 (r2 / recent)))))) 
            :time (e / ever)))

# ::snt this is what really gets my goat about this place what is the point of bothering to use different coloured chalks when the vegetables all come sprinkled with the same chopped parsley and the oil that dresses the leeks renders them inedible, why bother to have a carefully chosen selection of sophisticated cigarettes for sale at the entrance desk but overcook the duck
# ::tok this is what really gets my goat about this place what is the point of bothering to use different coloured chalks when the vegetables all come sprinkled with the same chopped parsley and the oil that dresses the leeks renders them inedible , why bother to have a carefully chosen selection of sophisticated cigarettes for sale at the entrance desk but overcook the duck
# ::alignments 63-64|0.0 60-61|0 58-59|0.1.0.1.0 53-54|0.1.0.0 52-53|0.1.0.0.0 50-51|0.1.0 49-50|0.1.0.1 48-49|0.1.0.1.1 44-45|0.1 34-35|0.3.2 32-33|0.3 29-30|0.3.1 24-25|0.3.0.0 18-19|0.3.0 17-18|0.2 15-16|0.2.0 13-14|0.2.0.1 9-10|0.3.1.0.0 8-9|0.3.1.0 3-4|0.3.1.1 0-1|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:54.049
# ::node	0	contrast-01	60-61
# ::node	0.0	duck	63-64
# ::node	0.1	bother-02	44-45
# ::node	0.1.0	select-01	50-51
# ::node	0.1.0.0	cigarette	53-54
# ::node	0.1.0.0.0	sophisticated	52-53
# ::node	0.1.0.1	choose-01	49-50
# ::node	0.1.0.1.0	entrance	58-59
# ::node	0.1.0.1.1	careful	48-49
# ::node	0.2	use-01	17-18
# ::node	0.2.0	bother-01	15-16
# ::node	0.2.0.0	this	0-1
# ::node	0.2.0.1	point	13-14
# ::node	0.3	and	32-33
# ::node	0.3.0	differ-02	18-19
# ::node	0.3.0.0	all	24-25
# ::node	0.3.1	same-41	29-30
# ::node	0.3.1.0	this	8-9
# ::node	0.3.1.0.0	place	9-10
# ::node	0.3.1.1	really	3-4
# ::node	0.3.2	oil	34-35
# ::root	0	contrast-01
# ::edge	and	op1	oil	0.3	0.3.2	
# ::edge	bother-01	ARG0	this	0.2.0	0.2.0.0	
# ::edge	bother-01	ARG1	use-01	0.2.0	0.2	
# ::edge	bother-02	ARG1	select-01	0.1	0.1.0	
# ::edge	choose-01	ARG0	entrance	0.1.0.1	0.1.0.1.0	
# ::edge	choose-01	ARG1	select-01	0.1.0.1	0.1.0	
# ::edge	choose-01	manner	careful	0.1.0.1	0.1.0.1.1	
# ::edge	cigarette	mod	sophisticated	0.1.0.0	0.1.0.0.0	
# ::edge	contrast-01	ARG0	duck	0	0.0	
# ::edge	contrast-01	ARG1	bother-02	0	0.1	
# ::edge	contrast-01	ARG2	and	0	0.3	
# ::edge	differ-02	ARG0	all	0.3.0	0.3.0.0	
# ::edge	differ-02	ARG1	and	0.3.0	0.3	
# ::edge	place	mod	this	0.3.1.0.0	0.3.1.0	
# ::edge	point	mod	bother-01	0.2.0.1	0.2.0	
# ::edge	same-41	ARG0	this	0.3.1	0.3.1.0	
# ::edge	same-41	ARG1	and	0.3.1	0.3	
# ::edge	same-41	mod	really	0.3.1	0.3.1.1	
# ::edge	select-01	ARG1	cigarette	0.1.0	0.1.0.0	
# ::edge	use-01	ARG1	contrast-01	0.2	0	
(c / contrast-01 
      :ARG0 (d / duck) 
      :ARG1 (b / bother-02 
            :ARG1 (s2 / select-01 
                  :ARG1 (c2 / cigarette 
                        :mod (s / sophisticated)) 
                  :ARG1-of (c3 / choose-01 
                        :ARG0 (e / entrance) 
                        :manner (c4 / careful)))) 
      :ARG1-of (u / use-01 
            :ARG1-of (b2 / bother-01 
                  :ARG0 (t2 / this) 
                  :mod-of (p / point))) 
      :ARG2 (a / and 
            :ARG1-of (d2 / differ-02 
                  :ARG0 (a2 / all)) 
            :ARG1-of (s3 / same-41 
                  :ARG0 (t / this 
                        :mod-of (p2 / place)) 
                  :mod (r / really)) 
            :op1 (o / oil)))

# ::snt is it the thought of his being happy that bothers her
# ::tok is it the thought of his being happy that bothers her
# ::alignments 9-10|0 7-8|0.0 3-4|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:54.066
# ::node	0	bother-01	9-10
# ::node	0.0	happy	7-8
# ::node	0.0.0	think-01	3-4
# ::node	0.0.0.0	it	1-2
# ::root	0	bother-01
# ::edge	bother-01	ARG0	happy	0	0.0	
# ::edge	think-01	ARG0	it	0.0.0	0.0.0.0	
# ::edge	think-01	ARG1	happy	0.0.0	0.0	
(b / bother-01 
      :ARG0 (h / happy 
            :ARG1-of (t / think-01 
                  :ARG0 (i / it))))

# ::snt one of the virtues of a video recorder is that it watches the television for you when you cant be bothered to watch it yourself
# ::tok one of the virtues of a video recorder is that it watches the television for you when you cant be bothered to watch it yourself
# ::alignments 23-24|0.1.0.2 22-23|0 20-21|0.2 17-18|0.0 15-16|0.1.1 13-14|0.1 11-12|0.1.0 10-11|0.1.0.0 6-7|0.2.0 3-4|0.1.0.1 ::annotator JAMR dev v0.3 ::date 2015-05-11T22:13:54.241
# ::node	0	watch-01	22-23
# ::node	0.0	you	17-18
# ::node	0.1	television	13-14
# ::node	0.1.0	watch-01	11-12
# ::node	0.1.0.0	it	10-11
# ::node	0.1.0.1	virtue	3-4
# ::node	0.1.0.2	it	23-24
# ::node	0.1.1	you	15-16
# ::node	0.2	bother-01	20-21
# ::node	0.2.0	video	6-7
# ::root	0	watch-01
# ::edge	bother-01	ARG0	video	0.2	0.2.0	
# ::edge	bother-01	ARG1	watch-01	0.2	0	
# ::edge	it	op1	watch-01	0.1.0.2	0.1.0	
# ::edge	television	beneficiary	you	0.1	0.1.1	
# ::edge	watch-01	ARG0	it	0.1.0	0.1.0.0	
# ::edge	watch-01	ARG0	you	0	0.0	
# ::edge	watch-01	ARG1	television	0	0.1	
# ::edge	watch-01	ARG1	television	0.1.0	0.1	
# ::edge	watch-01	ARG2	virtue	0.1.0	0.1.0.1	
(w / watch-01 
      :ARG0 (y / you) 
      :ARG1 (t / television 
            :ARG1-of (w2 / watch-01 
                  :ARG0 (i2 / it) 
                  :ARG2 (v2 / virtue) 
                  :op-of (i / it)) 
            :beneficiary (y2 / you)) 
      :ARG1-of (b / bother-01 
            :ARG0 (v / video)))

